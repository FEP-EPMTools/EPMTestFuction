; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guiblank.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guiblank.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guiblank.crf src\user\guiblank.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateData PROC
;;;90     
;;;91     static void updateData(void)
000000  e92d4010          PUSH     {r4,lr}
;;;92     {
;;;93         MTP_WaitingStartMessage();
000004  ebfffffe          BL       MTP_WaitingStartMessage
;;;94     }
000008  e8bd8010          POP      {r4,pc}
;;;95     
                          ENDP

                  GuiBlankOnDraw PROC
;;;99     /*-----------------------------------------*/
;;;100    BOOL GuiBlankOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int para2, int para3)
00000c  e92d47f0          PUSH     {r4-r10,lr}
;;;101    {
000010  e1a08000          MOV      r8,r0
000014  e1a04001          MOV      r4,r1
000018  e1a09002          MOV      r9,r2
00001c  e1a0a003          MOV      r10,r3
;;;102        TempreFreshPara = reFreshPara;
000020  e59f0388          LDR      r0,|L1.944|
000024  e5c04000          STRB     r4,[r0,#0]  ; TempreFreshPara
;;;103        touchflag = FALSE;
000028  e3a00000          MOV      r0,#0
00002c  e59f1380          LDR      r1,|L1.948|
000030  e5c10000          STRB     r0,[r1,#0]  ; touchflag
;;;104        int counter=0;
000034  e3a06000          MOV      r6,#0
;;;105    //    tickStart = xTaskGetTickCount();
;;;106        // sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
;;;107    
;;;108        powerStatus = TRUE;
000038  e3a00001          MOV      r0,#1
00003c  e59f1374          LDR      r1,|L1.952|
000040  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;109        
;;;110        if(reFreshPara == GUI_MTP_SCREEN)
000044  e354000c          CMP      r4,#0xc
000048  1a000004          BNE      |L1.96|
;;;111        {
;;;112            MTPstatus = GUI_MTP_SCREEN;
00004c  e3a0000c          MOV      r0,#0xc
000050  e59f1364          LDR      r1,|L1.956|
000054  e5c10000          STRB     r0,[r1,#0]  ; MTPstatus
;;;113            return TRUE;
000058  e3a00001          MOV      r0,#1
                  |L1.92|
;;;114        }
;;;115        else if(reFreshPara == GUI_MTP_START)
;;;116        {
;;;117            terninalPrintf("GUI_MTP_START\r\n");
;;;118            MTPstatus = GUI_MTP_START;
;;;119            return TRUE;
;;;120        }
;;;121        
;;;122        pGuiGetInterface = GuiGetInterface();
;;;123        pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
;;;124        //if((reFreshPara == GUI_MTP_SCREEN) || (reFreshPara == GUI_MTP_START))
;;;125        if(reFreshPara == GUI_MTP_INI)
;;;126        {
;;;127            pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, 1000/portTICK_RATE_MS);
;;;128        }
;;;129        else
;;;130        {
;;;131            pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL);
;;;132        }        
;;;133        pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
;;;134        
;;;135        pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
;;;136        EPDDrawMulti(TRUE,EPD_PICT_ALL_WHITE_INDEX,0,0);
;;;137        
;;;138        if(reFreshPara == GUI_KEYPAD_TEST)
;;;139        {
;;;140            EPDDrawString(TRUE,"KEYPAD TEST \nPress SW4 to quit.\nPress a to set input pin.\nPress b to set I2C pin.",100,100);
;;;141        }
;;;142        else if(reFreshPara == GUI_MTP_INI)
;;;143        {
;;;144            MTPstatus = GUI_MTP_SCREEN;
;;;145            return TRUE;
;;;146        }
;;;147        else
;;;148            EPDDrawString(TRUE,"Hello World",100,100);
;;;149        
;;;150        
;;;151        
;;;152        
;;;153        
;;;154        
;;;155    
;;;156    /*while(1)
;;;157    {
;;;158        while(sysIsKbHit())
;;;159        {//empty registor buffer
;;;160        #include <TMPA900.H>
;;;161            sysGetChar();
;;;162        }
;;;163        while(1)
;;;164        {//wait user respone
;;;165            vTaskDelay(100/portTICK_RATE_MS);
;;;166            if(sysIsKbHit())
;;;167            {
;;;168               chrtemp = sysGetChar();
;;;169               char* stringtmp = malloc(2);
;;;170               *stringtmp = chrtemp;
;;;171               *(stringtmp+1) = '\0';
;;;172               terninalPrintf("ishit=%s \n",stringtmp);
;;;173               EPDDrawString(TRUE,stringtmp,100,150);
;;;174               break;
;;;175            }
;;;176    
;;;177    
;;;178        }
;;;179        if(chrtemp=='q')
;;;180          {
;;;181                break;
;;;182          }
;;;183      }*/
;;;184        
;;;185        
;;;186        
;;;187    
;;;188    
;;;189        if(reFreshPara == GUI_KEYPAD_TEST)
;;;190        {
;;;191            key1flag = FALSE;
;;;192            key2flag = FALSE;
;;;193            key3flag = FALSE;
;;;194            key4flag = FALSE;
;;;195            key5flag = FALSE;
;;;196            key6flag = FALSE;
;;;197            
;;;198            if(GPIO_ReadBit(GPIOI,BIT3))
;;;199            {
;;;200                while(1)
;;;201                {
;;;202                    if(sysIsKbHit())
;;;203                    {
;;;204                        if(sysGetChar() == 'a')
;;;205                        {
;;;206                            terninalPrintf("Change I2C to input pin.\r\n");
;;;207                            BOOL pin2changeflag = TRUE;
;;;208                            BOOL pin3changeflag = TRUE;
;;;209                            I2c1ResetInputPin();
;;;210                            while(1)
;;;211                            {
;;;212                                if(!(GPIO_ReadBit(GPIOG,BIT2)) && (pin2changeflag == TRUE))
;;;213                                {   
;;;214                                    pin2changeflag = FALSE;
;;;215                                    terninalPrintf("GPIOG PIN2 LOW.\r\n");
;;;216                                }
;;;217                                else if((GPIO_ReadBit(GPIOG,BIT2)) && (pin2changeflag == FALSE))
;;;218                                {
;;;219                                    pin2changeflag = TRUE;
;;;220                                    terninalPrintf("GPIOG PIN2 HIGH.\r\n");
;;;221                                }
;;;222                                    
;;;223                                
;;;224                                if(!(GPIO_ReadBit(GPIOG,BIT3)) && (pin3changeflag == TRUE))
;;;225                                {   
;;;226                                    pin3changeflag = FALSE;
;;;227                                    terninalPrintf("GPIOG PIN3 LOW.\r\n");
;;;228                                }
;;;229                                else if((GPIO_ReadBit(GPIOG,BIT3)) && (pin3changeflag == FALSE))
;;;230                                {
;;;231                                    pin3changeflag = TRUE;
;;;232                                    terninalPrintf("GPIOG PIN3 HIGH.\r\n");
;;;233                                }
;;;234                                
;;;235                                
;;;236                                if(sysIsKbHit())
;;;237                                {
;;;238                                    if(sysGetChar() == 'b')
;;;239                                    {
;;;240                                        terninalPrintf("Set I2C pin.\r\n");
;;;241                                        I2c1SetPin();
;;;242                                        break;
;;;243                                    }
;;;244                                    vTaskDelay(100/portTICK_RATE_MS);
;;;245                                }
;;;246                            }
;;;247                        }
;;;248                    }
;;;249                    
;;;250                    if((key1flag == TRUE) && (key2flag == TRUE) && (key3flag == TRUE) && (key4flag == TRUE) && (key5flag == TRUE) && (key6flag == TRUE))
;;;251                    {
;;;252                        key1flag = FALSE;
;;;253                        key2flag = FALSE;
;;;254                        key3flag = FALSE;
;;;255                        key4flag = FALSE;
;;;256                        key5flag = FALSE;
;;;257                        key6flag = FALSE;
;;;258                        LedSetColor(tempColorAllGreen, LIGHT_COLOR_OFF, TRUE);
;;;259                        vTaskDelay(1000/portTICK_RATE_MS);
;;;260                        LedSetColor(tempColorOff, LIGHT_COLOR_OFF, TRUE);
;;;261                    }
;;;262                    if(!GPIO_ReadBit(GPIOI,BIT3))
;;;263                        break;
;;;264                    vTaskDelay(100/portTICK_RATE_MS);
;;;265                }
;;;266            }
;;;267            else
;;;268            {
;;;269                while(1)
;;;270                {
;;;271                    if((key1flag == TRUE) && (key2flag == TRUE) && (key3flag == TRUE) && (key4flag == TRUE) && (key5flag == TRUE) && (key6flag == TRUE))
;;;272                    {
;;;273                        key1flag = FALSE;
;;;274                        key2flag = FALSE;
;;;275                        key3flag = FALSE;
;;;276                        key4flag = FALSE;
;;;277                        key5flag = FALSE;
;;;278                        key6flag = FALSE;
;;;279                        LedSetColor(tempColorAllGreen, LIGHT_COLOR_OFF, TRUE);
;;;280                        vTaskDelay(1000/portTICK_RATE_MS);
;;;281                        LedSetColor(tempColorOff, LIGHT_COLOR_OFF, TRUE);
;;;282                    }
;;;283                    if(GPIO_ReadBit(GPIOI,BIT3))
;;;284                        break;
;;;285                    vTaskDelay(100/portTICK_RATE_MS);
;;;286                }
;;;287            }
;;;288            
;;;289            
;;;290        }
;;;291        else
;;;292        {
;;;293    
;;;294        
;;;295            while(1){
;;;296                vTaskDelay(100/portTICK_RATE_MS);
;;;297                BOOL flag = sysIsKbHit(); 
;;;298                //terninalPrintf("ishit=%d \n",flag);
;;;299                if(flag  || touchflag)
;;;300                 {
;;;301                     counter++;
;;;302                     if (!touchflag)
;;;303                     {
;;;304                        chrtemp=sysGetChar();
;;;305                     }
;;;306                     //terninalPrintf("ishit=%c \n",chrtemp);
;;;307                   if(chrtemp==0x1b)
;;;308                   {
;;;309                    break;
;;;310                   }
;;;311                   char* stringtmp = malloc(2);
;;;312                   *stringtmp = chrtemp;
;;;313                   *(stringtmp+1) = '\0';
;;;314                   terninalPrintf("ishit=%s \n",stringtmp);
;;;315                   EPDDrawString(TRUE,stringtmp,100+counter*50,150);
;;;316                   vTaskDelay(100/portTICK_RATE_MS);
;;;317                   free(stringtmp);
;;;318                 }
;;;319            }
;;;320        }
;;;321        //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;322        return TRUE;
;;;323    }
00005c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.96|
000060  e354000d          CMP      r4,#0xd               ;115
000064  1a000006          BNE      |L1.132|
000068  e28f0e35          ADR      r0,|L1.960|
00006c  ebfffffe          BL       terninalPrintf
000070  e3a0000d          MOV      r0,#0xd               ;118
000074  e59f1340          LDR      r1,|L1.956|
000078  e5c10000          STRB     r0,[r1,#0]            ;118  ; MTPstatus
00007c  e3a00001          MOV      r0,#1                 ;119
000080  eafffff5          B        |L1.92|
                  |L1.132|
000084  ebfffffe          BL       GuiGetInterface
000088  e59f1340          LDR      r1,|L1.976|
00008c  e5810000          STR      r0,[r1,#0]            ;122  ; pGuiGetInterface
000090  e2810000          ADD      r0,r1,#0              ;123
000094  e5900000          LDR      r0,[r0,#0]            ;123  ; pGuiGetInterface
000098  e3e01000          MVN      r1,#0                 ;123
00009c  e590200c          LDR      r2,[r0,#0xc]          ;123
0000a0  e3a00000          MOV      r0,#0                 ;123
0000a4  e12fff32          BLX      r2                    ;123
0000a8  e354000b          CMP      r4,#0xb               ;125
0000ac  1a000006          BNE      |L1.204|
0000b0  e59f0318          LDR      r0,|L1.976|
0000b4  e5900000          LDR      r0,[r0,#0]            ;127  ; pGuiGetInterface
0000b8  e3a01064          MOV      r1,#0x64              ;127
0000bc  e590200c          LDR      r2,[r0,#0xc]          ;127
0000c0  e3a00001          MOV      r0,#1                 ;127
0000c4  e12fff32          BLX      r2                    ;127
0000c8  ea000005          B        |L1.228|
                  |L1.204|
0000cc  e59f02fc          LDR      r0,|L1.976|
0000d0  e5900000          LDR      r0,[r0,#0]            ;131  ; pGuiGetInterface
0000d4  e3e01000          MVN      r1,#0                 ;131
0000d8  e590200c          LDR      r2,[r0,#0xc]          ;131
0000dc  e3a00001          MOV      r0,#1                 ;131
0000e0  e12fff32          BLX      r2                    ;131
                  |L1.228|
0000e4  e59f02e4          LDR      r0,|L1.976|
0000e8  e5900000          LDR      r0,[r0,#0]            ;133  ; pGuiGetInterface
0000ec  e3e01000          MVN      r1,#0                 ;133
0000f0  e590200c          LDR      r2,[r0,#0xc]          ;133
0000f4  e3a00002          MOV      r0,#2                 ;133
0000f8  e12fff32          BLX      r2                    ;133
0000fc  e59f02cc          LDR      r0,|L1.976|
000100  e5900000          LDR      r0,[r0,#0]            ;135  ; pGuiGetInterface
000104  e5901010          LDR      r1,[r0,#0x10]         ;135
000108  e3a00000          MOV      r0,#0                 ;135
00010c  e12fff31          BLX      r1                    ;135
000110  e3a03000          MOV      r3,#0                 ;136
000114  e1a02003          MOV      r2,r3                 ;136
000118  e3a01003          MOV      r1,#3                 ;136
00011c  e3a00001          MOV      r0,#1                 ;136
000120  ebfffffe          BL       EPDDrawMulti
000124  e354000a          CMP      r4,#0xa               ;138
000128  1a000005          BNE      |L1.324|
00012c  e3a03064          MOV      r3,#0x64              ;140
000130  e1a02003          MOV      r2,r3                 ;140
000134  e59f1298          LDR      r1,|L1.980|
000138  e3a00001          MOV      r0,#1                 ;140
00013c  ebfffffe          BL       EPDDrawString
000140  ea00000b          B        |L1.372|
                  |L1.324|
000144  e354000b          CMP      r4,#0xb               ;142
000148  1a000004          BNE      |L1.352|
00014c  e3a0000c          MOV      r0,#0xc               ;144
000150  e59f1264          LDR      r1,|L1.956|
000154  e5c10000          STRB     r0,[r1,#0]            ;144  ; MTPstatus
000158  e3a00001          MOV      r0,#1                 ;145
00015c  eaffffbe          B        |L1.92|
                  |L1.352|
000160  e3a03064          MOV      r3,#0x64              ;148
000164  e1a02003          MOV      r2,r3                 ;148
000168  e28f1f9a          ADR      r1,|L1.984|
00016c  e3a00001          MOV      r0,#1                 ;148
000170  ebfffffe          BL       EPDDrawString
                  |L1.372|
000174  e354000a          CMP      r4,#0xa               ;189
000178  1a0000fe          BNE      |L1.1400|
00017c  e3a00000          MOV      r0,#0                 ;191
000180  e59f125c          LDR      r1,|L1.996|
000184  e5c10000          STRB     r0,[r1,#0]            ;191  ; key1flag
000188  e59f1258          LDR      r1,|L1.1000|
00018c  e5c10000          STRB     r0,[r1,#0]            ;192  ; key2flag
000190  e59f1254          LDR      r1,|L1.1004|
000194  e5c10000          STRB     r0,[r1,#0]            ;193  ; key3flag
000198  e59f1250          LDR      r1,|L1.1008|
00019c  e5c10000          STRB     r0,[r1,#0]            ;194  ; key4flag
0001a0  e59f124c          LDR      r1,|L1.1012|
0001a4  e5c10000          STRB     r0,[r1,#0]            ;195  ; key5flag
0001a8  e59f1248          LDR      r1,|L1.1016|
0001ac  e5c10000          STRB     r0,[r1,#0]            ;196  ; key6flag
0001b0  e3a01008          MOV      r1,#8                 ;198
0001b4  e3a00c02          MOV      r0,#0x200             ;198
0001b8  ebfffffe          BL       GPIO_ReadBit
0001bc  e3500000          CMP      r0,#0                 ;198
0001c0  0a0000b2          BEQ      |L1.1168|
0001c4  ea0000af          B        |L1.1160|
                  |L1.456|
0001c8  ebfffffe          BL       sysIsKbHit
0001cc  e3500000          CMP      r0,#0                 ;202
0001d0  0a000041          BEQ      |L1.732|
0001d4  ebfffffe          BL       sysGetChar
0001d8  e3500061          CMP      r0,#0x61              ;204
0001dc  1a00003e          BNE      |L1.732|
0001e0  e28f0f85          ADR      r0,|L1.1020|
0001e4  ebfffffe          BL       terninalPrintf
0001e8  e3a05001          MOV      r5,#1                 ;207
0001ec  e3a07001          MOV      r7,#1                 ;208
0001f0  ebfffffe          BL       I2c1ResetInputPin
0001f4  ea000035          B        |L1.720|
                  |L1.504|
0001f8  e3a01004          MOV      r1,#4                 ;212
0001fc  e3a00d06          MOV      r0,#0x180             ;212
000200  ebfffffe          BL       GPIO_ReadBit
000204  e3500000          CMP      r0,#0                 ;212
000208  1a000005          BNE      |L1.548|
00020c  e3550001          CMP      r5,#1                 ;212
000210  1a000003          BNE      |L1.548|
000214  e3a05000          MOV      r5,#0                 ;214
000218  e28f0f7e          ADR      r0,|L1.1048|
00021c  ebfffffe          BL       terninalPrintf
000220  ea000009          B        |L1.588|
                  |L1.548|
000224  e3a01004          MOV      r1,#4                 ;217
000228  e3a00d06          MOV      r0,#0x180             ;217
00022c  ebfffffe          BL       GPIO_ReadBit
000230  e3500000          CMP      r0,#0                 ;217
000234  0a000004          BEQ      |L1.588|
000238  e3550000          CMP      r5,#0                 ;217
00023c  1a000002          BNE      |L1.588|
000240  e3a05001          MOV      r5,#1                 ;219
000244  e28f0e1e          ADR      r0,|L1.1068|
000248  ebfffffe          BL       terninalPrintf
                  |L1.588|
00024c  e3a01008          MOV      r1,#8                 ;224
000250  e3a00d06          MOV      r0,#0x180             ;224
000254  ebfffffe          BL       GPIO_ReadBit
000258  e3500000          CMP      r0,#0                 ;224
00025c  1a000005          BNE      |L1.632|
000260  e3570001          CMP      r7,#1                 ;224
000264  1a000003          BNE      |L1.632|
000268  e3a07000          MOV      r7,#0                 ;226
00026c  e28f0f73          ADR      r0,|L1.1088|
000270  ebfffffe          BL       terninalPrintf
000274  ea000009          B        |L1.672|
                  |L1.632|
000278  e3a01008          MOV      r1,#8                 ;229
00027c  e3a00d06          MOV      r0,#0x180             ;229
000280  ebfffffe          BL       GPIO_ReadBit
000284  e3500000          CMP      r0,#0                 ;229
000288  0a000004          BEQ      |L1.672|
00028c  e3570000          CMP      r7,#0                 ;229
000290  1a000002          BNE      |L1.672|
000294  e3a07001          MOV      r7,#1                 ;231
000298  e28f0f6d          ADR      r0,|L1.1108|
00029c  ebfffffe          BL       terninalPrintf
                  |L1.672|
0002a0  ebfffffe          BL       sysIsKbHit
0002a4  e3500000          CMP      r0,#0                 ;236
0002a8  0a000008          BEQ      |L1.720|
0002ac  ebfffffe          BL       sysGetChar
0002b0  e3500062          CMP      r0,#0x62              ;238
0002b4  1a000003          BNE      |L1.712|
0002b8  e28f0f6a          ADR      r0,|L1.1128|
0002bc  ebfffffe          BL       terninalPrintf
0002c0  ebfffffe          BL       I2c1SetPin
0002c4  ea000002          B        |L1.724|
                  |L1.712|
0002c8  e3a0000a          MOV      r0,#0xa               ;244
0002cc  ebfffffe          BL       vTaskDelay
                  |L1.720|
0002d0  eaffffc8          B        |L1.504|
                  |L1.724|
0002d4  e1a00000          MOV      r0,r0                 ;242
0002d8  e1a00000          MOV      r0,r0                 ;247
                  |L1.732|
0002dc  e59f0100          LDR      r0,|L1.996|
0002e0  e5d00000          LDRB     r0,[r0,#0]            ;250  ; key1flag
0002e4  e3500001          CMP      r0,#1                 ;250
0002e8  1a00002a          BNE      |L1.920|
0002ec  e59f00f4          LDR      r0,|L1.1000|
0002f0  e5d00000          LDRB     r0,[r0,#0]            ;250  ; key2flag
0002f4  e3500001          CMP      r0,#1                 ;250
0002f8  1a000026          BNE      |L1.920|
0002fc  e59f00e8          LDR      r0,|L1.1004|
000300  e5d00000          LDRB     r0,[r0,#0]            ;250  ; key3flag
000304  e3500001          CMP      r0,#1                 ;250
000308  1a000022          BNE      |L1.920|
00030c  e59f00dc          LDR      r0,|L1.1008|
000310  e5d00000          LDRB     r0,[r0,#0]            ;250  ; key4flag
000314  e3500001          CMP      r0,#1                 ;250
000318  1a00001e          BNE      |L1.920|
00031c  e59f00d0          LDR      r0,|L1.1012|
000320  e5d00000          LDRB     r0,[r0,#0]            ;250  ; key5flag
000324  e3500001          CMP      r0,#1                 ;250
000328  1a00001a          BNE      |L1.920|
00032c  e59f00c4          LDR      r0,|L1.1016|
000330  e5d00000          LDRB     r0,[r0,#0]            ;250  ; key6flag
000334  e3500001          CMP      r0,#1                 ;250
000338  1a000016          BNE      |L1.920|
00033c  e3a00000          MOV      r0,#0                 ;252
000340  e59f109c          LDR      r1,|L1.996|
000344  e5c10000          STRB     r0,[r1,#0]            ;252  ; key1flag
000348  e59f1098          LDR      r1,|L1.1000|
00034c  e5c10000          STRB     r0,[r1,#0]            ;253  ; key2flag
000350  e59f1094          LDR      r1,|L1.1004|
000354  e5c10000          STRB     r0,[r1,#0]            ;254  ; key3flag
000358  e59f1090          LDR      r1,|L1.1008|
00035c  e5c10000          STRB     r0,[r1,#0]            ;255  ; key4flag
000360  e59f108c          LDR      r1,|L1.1012|
000364  e5c10000          STRB     r0,[r1,#0]            ;256  ; key5flag
000368  e59f1088          LDR      r1,|L1.1016|
00036c  e5c10000          STRB     r0,[r1,#0]            ;257  ; key6flag
000370  e3a02001          MOV      r2,#1                 ;258
000374  e3a01000          MOV      r1,#0                 ;258
000378  e59f00f8          LDR      r0,|L1.1144|
00037c  ebfffffe          BL       LedSetColor
000380  e3a00064          MOV      r0,#0x64              ;259
000384  ebfffffe          BL       vTaskDelay
000388  e3a02001          MOV      r2,#1                 ;260
00038c  e3a01000          MOV      r1,#0                 ;260
000390  e59f00e4          LDR      r0,|L1.1148|
000394  ebfffffe          BL       LedSetColor
                  |L1.920|
000398  e3a01008          MOV      r1,#8                 ;262
00039c  e3a00c02          MOV      r0,#0x200             ;262
0003a0  ebfffffe          BL       GPIO_ReadBit
0003a4  e3500000          CMP      r0,#0                 ;262
0003a8  1a000034          BNE      |L1.1152|
0003ac  ea000036          B        |L1.1164|
                  |L1.944|
                          DCD      TempreFreshPara
                  |L1.948|
                          DCD      touchflag
                  |L1.952|
                          DCD      powerStatus
                  |L1.956|
                          DCD      MTPstatus
                  |L1.960|
0003c0  4755495f          DCB      "GUI_MTP_START\r\n",0
0003c4  4d54505f
0003c8  53544152
0003cc  540d0a00
                  |L1.976|
                          DCD      pGuiGetInterface
                  |L1.980|
                          DCD      ||.constdata||
                  |L1.984|
0003d8  48656c6c          DCB      "Hello World",0
0003dc  6f20576f
0003e0  726c6400
                  |L1.996|
                          DCD      key1flag
                  |L1.1000|
                          DCD      key2flag
                  |L1.1004|
                          DCD      key3flag
                  |L1.1008|
                          DCD      key4flag
                  |L1.1012|
                          DCD      key5flag
                  |L1.1016|
                          DCD      key6flag
                  |L1.1020|
0003fc  4368616e          DCB      "Change I2C to input pin.\r\n",0
000400  67652049
000404  32432074
000408  6f20696e
00040c  70757420
000410  70696e2e
000414  0d0a00  
000417  00                DCB      0
                  |L1.1048|
000418  4750494f          DCB      "GPIOG PIN2 LOW.\r\n",0
00041c  47205049
000420  4e32204c
000424  4f572e0d
000428  0a00    
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
00042c  4750494f          DCB      "GPIOG PIN2 HIGH.\r\n",0
000430  47205049
000434  4e322048
000438  4947482e
00043c  0d0a00  
00043f  00                DCB      0
                  |L1.1088|
000440  4750494f          DCB      "GPIOG PIN3 LOW.\r\n",0
000444  47205049
000448  4e33204c
00044c  4f572e0d
000450  0a00    
000452  00                DCB      0
000453  00                DCB      0
                  |L1.1108|
000454  4750494f          DCB      "GPIOG PIN3 HIGH.\r\n",0
000458  47205049
00045c  4e332048
000460  4947482e
000464  0d0a00  
000467  00                DCB      0
                  |L1.1128|
000468  53657420          DCB      "Set I2C pin.\r\n",0
00046c  49324320
000470  70696e2e
000474  0d0a00  
000477  00                DCB      0
                  |L1.1144|
                          DCD      tempColorAllGreen
                  |L1.1148|
                          DCD      tempColorOff
                  |L1.1152|
000480  e3a0000a          MOV      r0,#0xa               ;264
000484  ebfffffe          BL       vTaskDelay
                  |L1.1160|
000488  eaffff4e          B        |L1.456|
                  |L1.1164|
00048c  ea00006c          B        |L1.1604|
                  |L1.1168|
000490  ea000036          B        |L1.1392|
                  |L1.1172|
000494  e51f00b8          LDR      r0,|L1.996|
000498  e5d00000          LDRB     r0,[r0,#0]            ;271  ; key1flag
00049c  e3500001          CMP      r0,#1                 ;271
0004a0  1a00002a          BNE      |L1.1360|
0004a4  e51f00c4          LDR      r0,|L1.1000|
0004a8  e5d00000          LDRB     r0,[r0,#0]            ;271  ; key2flag
0004ac  e3500001          CMP      r0,#1                 ;271
0004b0  1a000026          BNE      |L1.1360|
0004b4  e51f00d0          LDR      r0,|L1.1004|
0004b8  e5d00000          LDRB     r0,[r0,#0]            ;271  ; key3flag
0004bc  e3500001          CMP      r0,#1                 ;271
0004c0  1a000022          BNE      |L1.1360|
0004c4  e51f00dc          LDR      r0,|L1.1008|
0004c8  e5d00000          LDRB     r0,[r0,#0]            ;271  ; key4flag
0004cc  e3500001          CMP      r0,#1                 ;271
0004d0  1a00001e          BNE      |L1.1360|
0004d4  e51f00e8          LDR      r0,|L1.1012|
0004d8  e5d00000          LDRB     r0,[r0,#0]            ;271  ; key5flag
0004dc  e3500001          CMP      r0,#1                 ;271
0004e0  1a00001a          BNE      |L1.1360|
0004e4  e51f00f4          LDR      r0,|L1.1016|
0004e8  e5d00000          LDRB     r0,[r0,#0]            ;271  ; key6flag
0004ec  e3500001          CMP      r0,#1                 ;271
0004f0  1a000016          BNE      |L1.1360|
0004f4  e3a00000          MOV      r0,#0                 ;273
0004f8  e51f111c          LDR      r1,|L1.996|
0004fc  e5c10000          STRB     r0,[r1,#0]            ;273  ; key1flag
000500  e51f1120          LDR      r1,|L1.1000|
000504  e5c10000          STRB     r0,[r1,#0]            ;274  ; key2flag
000508  e51f1124          LDR      r1,|L1.1004|
00050c  e5c10000          STRB     r0,[r1,#0]            ;275  ; key3flag
000510  e51f1128          LDR      r1,|L1.1008|
000514  e5c10000          STRB     r0,[r1,#0]            ;276  ; key4flag
000518  e51f112c          LDR      r1,|L1.1012|
00051c  e5c10000          STRB     r0,[r1,#0]            ;277  ; key5flag
000520  e51f1130          LDR      r1,|L1.1016|
000524  e5c10000          STRB     r0,[r1,#0]            ;278  ; key6flag
000528  e3a02001          MOV      r2,#1                 ;279
00052c  e3a01000          MOV      r1,#0                 ;279
000530  e51f00c0          LDR      r0,|L1.1144|
000534  ebfffffe          BL       LedSetColor
000538  e3a00064          MOV      r0,#0x64              ;280
00053c  ebfffffe          BL       vTaskDelay
000540  e3a02001          MOV      r2,#1                 ;281
000544  e3a01000          MOV      r1,#0                 ;281
000548  e51f00d4          LDR      r0,|L1.1148|
00054c  ebfffffe          BL       LedSetColor
                  |L1.1360|
000550  e3a01008          MOV      r1,#8                 ;283
000554  e3a00c02          MOV      r0,#0x200             ;283
000558  ebfffffe          BL       GPIO_ReadBit
00055c  e3500000          CMP      r0,#0                 ;283
000560  0a000000          BEQ      |L1.1384|
000564  ea000002          B        |L1.1396|
                  |L1.1384|
000568  e3a0000a          MOV      r0,#0xa               ;285
00056c  ebfffffe          BL       vTaskDelay
                  |L1.1392|
000570  eaffffc7          B        |L1.1172|
                  |L1.1396|
000574  ea000032          B        |L1.1604|
                  |L1.1400|
000578  ea00002f          B        |L1.1596|
                  |L1.1404|
00057c  e3a0000a          MOV      r0,#0xa               ;296
000580  ebfffffe          BL       vTaskDelay
000584  ebfffffe          BL       sysIsKbHit
000588  e20070ff          AND      r7,r0,#0xff           ;297
00058c  e3570000          CMP      r7,#0                 ;299
000590  1a000003          BNE      |L1.1444|
000594  e51f01e8          LDR      r0,|L1.948|
000598  e5d00000          LDRB     r0,[r0,#0]            ;299  ; touchflag
00059c  e3500000          CMP      r0,#0                 ;299
0005a0  0a000024          BEQ      |L1.1592|
                  |L1.1444|
0005a4  e2866001          ADD      r6,r6,#1              ;301
0005a8  e51f01fc          LDR      r0,|L1.948|
0005ac  e5d00000          LDRB     r0,[r0,#0]            ;302  ; touchflag
0005b0  e3500000          CMP      r0,#0                 ;302
0005b4  1a000002          BNE      |L1.1476|
0005b8  ebfffffe          BL       sysGetChar
0005bc  e59f1270          LDR      r1,|L1.2100|
0005c0  e5c10000          STRB     r0,[r1,#0]            ;304  ; chrtemp
                  |L1.1476|
0005c4  e59f0268          LDR      r0,|L1.2100|
0005c8  e5d00000          LDRB     r0,[r0,#0]            ;307  ; chrtemp
0005cc  e350001b          CMP      r0,#0x1b              ;307
0005d0  1a000000          BNE      |L1.1496|
0005d4  ea000019          B        |L1.1600|
                  |L1.1496|
0005d8  e3a00002          MOV      r0,#2                 ;311
0005dc  ebfffffe          BL       malloc
0005e0  e1a05000          MOV      r5,r0                 ;311
0005e4  e59f0248          LDR      r0,|L1.2100|
0005e8  e5d00000          LDRB     r0,[r0,#0]            ;312  ; chrtemp
0005ec  e5c50000          STRB     r0,[r5,#0]            ;312
0005f0  e3a00000          MOV      r0,#0                 ;313
0005f4  e5c50001          STRB     r0,[r5,#1]            ;313
0005f8  e1a01005          MOV      r1,r5                 ;314
0005fc  e28f0f8d          ADR      r0,|L1.2104|
000600  ebfffffe          BL       terninalPrintf
000604  e0860186          ADD      r0,r6,r6,LSL #3       ;315
000608  e0800206          ADD      r0,r0,r6,LSL #4       ;315
00060c  e3a01064          MOV      r1,#0x64              ;315
000610  e0812080          ADD      r2,r1,r0,LSL #1       ;315
000614  e3a03096          MOV      r3,#0x96              ;315
000618  e1a01005          MOV      r1,r5                 ;315
00061c  e3a00001          MOV      r0,#1                 ;315
000620  ebfffffe          BL       EPDDrawString
000624  e3a0000a          MOV      r0,#0xa               ;316
000628  ebfffffe          BL       vTaskDelay
00062c  e1a00005          MOV      r0,r5                 ;317
000630  ebfffffe          BL       free
000634  e1a00000          MOV      r0,r0                 ;318
                  |L1.1592|
000638  e1a00000          MOV      r0,r0                 ;319
                  |L1.1596|
00063c  eaffffce          B        |L1.1404|
                  |L1.1600|
000640  e1a00000          MOV      r0,r0                 ;309
                  |L1.1604|
000644  e3a00001          MOV      r0,#1                 ;322
000648  eafffe83          B        |L1.92|
;;;324    BOOL GuiBlankUpdateData(void)
                          ENDP

                  GuiBlankUpdateData PROC
00064c  e92d4010          PUSH     {r4,lr}
;;;325    {    
;;;326        //tickStart = xTaskGetTickCount();
;;;327        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更updateScreen
000650  e51f0288          LDR      r0,|L1.976|
000654  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000658  e5901010          LDR      r1,[r0,#0x10]
00065c  e3a00001          MOV      r0,#1
000660  e12fff31          BLX      r1
;;;328        return TRUE;
000664  e3a00001          MOV      r0,#1
;;;329    }
000668  e8bd8010          POP      {r4,pc}
;;;330    BOOL GuiBlankKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiBlankKeyCallback PROC
00066c  e92d4070          PUSH     {r4-r6,lr}
;;;331    {
000670  e1a04000          MOV      r4,r0
000674  e1a05001          MOV      r5,r1
;;;332        //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;333        BOOL reVal = FALSE; 
000678  e3a06000          MOV      r6,#0
;;;334        if(keyIgnoreFlag)
00067c  e59f01c0          LDR      r0,|L1.2116|
000680  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
000684  e3500000          CMP      r0,#0
000688  0a000003          BEQ      |L1.1692|
;;;335        {
;;;336            sysprintf(" [INFO GUI] <Free> Key:  ignore...\n"); 
00068c  e28f0f6d          ADR      r0,|L1.2120|
000690  ebfffffe          BL       sysprintf
;;;337            return reVal;
000694  e1a00006          MOV      r0,r6
                  |L1.1688|
;;;338        }
;;;339        //pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
;;;340        if(GUI_KEY_DOWN_INDEX == downUp)
;;;341        {
;;;342            switch(keyId)
;;;343            {
;;;344                case GUI_KEYPAD_ONE:
;;;345                    if(TempreFreshPara == GUI_KEYPAD_TEST)
;;;346                    {
;;;347                        key1flag = TRUE;
;;;348                        reVal = TRUE;
;;;349                    }
;;;350                    //reVal = TRUE;
;;;351                    break;
;;;352                case GUI_KEYPAD_TWO:
;;;353                    if(TempreFreshPara == GUI_KEYPAD_TEST)
;;;354                    {
;;;355                        key2flag = TRUE;
;;;356                        reVal = TRUE;
;;;357                    }
;;;358                    //reVal = TRUE;
;;;359                    break;
;;;360                case GUI_KEYPAD_THREE:
;;;361                    if(TempreFreshPara == GUI_KEYPAD_TEST)
;;;362                    {
;;;363                        key3flag = TRUE;
;;;364                        reVal = TRUE;
;;;365                    }
;;;366                    //reVal = TRUE;
;;;367                    break;
;;;368                case GUI_KEYPAD_FOUR:
;;;369                    if(TempreFreshPara == GUI_KEYPAD_TEST)
;;;370                    {
;;;371                        key4flag = TRUE;
;;;372                        reVal = TRUE;
;;;373                    }
;;;374                    //SetGuiResponseVal('q');
;;;375                    //reVal = TRUE;
;;;376                    break;
;;;377                case GUI_KEYPAD_FIVE:
;;;378                    if(TempreFreshPara == GUI_KEYPAD_TEST)
;;;379                    {
;;;380                        key5flag = TRUE;
;;;381                        reVal = TRUE;
;;;382                    }
;;;383                    //reVal = TRUE;
;;;384                    break;
;;;385                case GUI_KEYPAD_SIX:
;;;386                    if(TempreFreshPara == GUI_KEYPAD_TEST)
;;;387                    {
;;;388                        key6flag = TRUE;
;;;389                        reVal = TRUE;
;;;390                    }
;;;391                    else
;;;392                    {  
;;;393                        SetGuiResponseVal('q');
;;;394                    
;;;395                        //chrtemp='q';
;;;396                    
;;;397                        chrtemp=0x1b;
;;;398                        touchflag = TRUE;
;;;399                        reVal = TRUE;
;;;400                    }
;;;401                    break;
;;;402                case GUI_KEYPAD_REPLACE_BP_ID:
;;;403                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;404                    //GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;405                    //reVal = TRUE;
;;;406                    break;
;;;407                
;;;408                case GUI_KEYPAD_TESTER_ID:
;;;409                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;410                    //GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;411                    //reVal = TRUE;
;;;412                    break;
;;;413                
;;;414                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;415                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;416                    //GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;417                    //reVal = TRUE;
;;;418                    break;
;;;419            }
;;;420        }
;;;421        else
;;;422        {
;;;423            
;;;424        }
;;;425       // setPrintfFlag(FALSE);
;;;426        return reVal;
;;;427    }
000698  e8bd8070          POP      {r4-r6,pc}
                  |L1.1692|
00069c  e3550001          CMP      r5,#1                 ;340
0006a0  1a000061          BNE      |L1.2092|
0006a4  e3540004          CMP      r4,#4                 ;342
0006a8  0a000026          BEQ      |L1.1864|
0006ac  ca000008          BGT      |L1.1748|
0006b0  e3540000          CMP      r4,#0                 ;342
0006b4  0a000041          BEQ      |L1.1984|
0006b8  e3540001          CMP      r4,#1                 ;342
0006bc  0a00002b          BEQ      |L1.1904|
0006c0  e3540002          CMP      r4,#2                 ;342
0006c4  0a000015          BEQ      |L1.1824|
0006c8  e3540003          CMP      r4,#3                 ;342
0006cc  1a000055          BNE      |L1.2088|
0006d0  ea000008          B        |L1.1784|
                  |L1.1748|
0006d4  e3540005          CMP      r4,#5                 ;342
0006d8  0a00002e          BEQ      |L1.1944|
0006dc  e3540011          CMP      r4,#0x11              ;342
0006e0  0a00004a          BEQ      |L1.2064|
0006e4  e3540013          CMP      r4,#0x13              ;342
0006e8  0a00004c          BEQ      |L1.2080|
0006ec  e3540014          CMP      r4,#0x14              ;342
0006f0  1a00004c          BNE      |L1.2088|
0006f4  ea000047          B        |L1.2072|
                  |L1.1784|
0006f8  e1a00000          MOV      r0,r0                 ;344
0006fc  e51f0354          LDR      r0,|L1.944|
000700  e5d00000          LDRB     r0,[r0,#0]            ;345  ; TempreFreshPara
000704  e350000a          CMP      r0,#0xa               ;345
000708  1a000003          BNE      |L1.1820|
00070c  e3a00001          MOV      r0,#1                 ;347
000710  e51f1334          LDR      r1,|L1.996|
000714  e5c10000          STRB     r0,[r1,#0]            ;347  ; key1flag
000718  e3a06001          MOV      r6,#1                 ;348
                  |L1.1820|
00071c  ea000041          B        |L1.2088|
                  |L1.1824|
000720  e1a00000          MOV      r0,r0                 ;352
000724  e51f037c          LDR      r0,|L1.944|
000728  e5d00000          LDRB     r0,[r0,#0]            ;353  ; TempreFreshPara
00072c  e350000a          CMP      r0,#0xa               ;353
000730  1a000003          BNE      |L1.1860|
000734  e3a00001          MOV      r0,#1                 ;355
000738  e51f1358          LDR      r1,|L1.1000|
00073c  e5c10000          STRB     r0,[r1,#0]            ;355  ; key2flag
000740  e3a06001          MOV      r6,#1                 ;356
                  |L1.1860|
000744  ea000037          B        |L1.2088|
                  |L1.1864|
000748  e1a00000          MOV      r0,r0                 ;360
00074c  e51f03a4          LDR      r0,|L1.944|
000750  e5d00000          LDRB     r0,[r0,#0]            ;361  ; TempreFreshPara
000754  e350000a          CMP      r0,#0xa               ;361
000758  1a000003          BNE      |L1.1900|
00075c  e3a00001          MOV      r0,#1                 ;363
000760  e51f137c          LDR      r1,|L1.1004|
000764  e5c10000          STRB     r0,[r1,#0]            ;363  ; key3flag
000768  e3a06001          MOV      r6,#1                 ;364
                  |L1.1900|
00076c  ea00002d          B        |L1.2088|
                  |L1.1904|
000770  e1a00000          MOV      r0,r0                 ;368
000774  e51f03cc          LDR      r0,|L1.944|
000778  e5d00000          LDRB     r0,[r0,#0]            ;369  ; TempreFreshPara
00077c  e350000a          CMP      r0,#0xa               ;369
000780  1a000003          BNE      |L1.1940|
000784  e3a00001          MOV      r0,#1                 ;371
000788  e51f13a0          LDR      r1,|L1.1008|
00078c  e5c10000          STRB     r0,[r1,#0]            ;371  ; key4flag
000790  e3a06001          MOV      r6,#1                 ;372
                  |L1.1940|
000794  ea000023          B        |L1.2088|
                  |L1.1944|
000798  e1a00000          MOV      r0,r0                 ;377
00079c  e51f03f4          LDR      r0,|L1.944|
0007a0  e5d00000          LDRB     r0,[r0,#0]            ;378  ; TempreFreshPara
0007a4  e350000a          CMP      r0,#0xa               ;378
0007a8  1a000003          BNE      |L1.1980|
0007ac  e3a00001          MOV      r0,#1                 ;380
0007b0  e51f13c4          LDR      r1,|L1.1012|
0007b4  e5c10000          STRB     r0,[r1,#0]            ;380  ; key5flag
0007b8  e3a06001          MOV      r6,#1                 ;381
                  |L1.1980|
0007bc  ea000019          B        |L1.2088|
                  |L1.1984|
0007c0  e1a00000          MOV      r0,r0                 ;385
0007c4  e51f041c          LDR      r0,|L1.944|
0007c8  e5d00000          LDRB     r0,[r0,#0]            ;386  ; TempreFreshPara
0007cc  e350000a          CMP      r0,#0xa               ;386
0007d0  1a000004          BNE      |L1.2024|
0007d4  e3a00001          MOV      r0,#1                 ;388
0007d8  e51f13e8          LDR      r1,|L1.1016|
0007dc  e5c10000          STRB     r0,[r1,#0]            ;388  ; key6flag
0007e0  e3a06001          MOV      r6,#1                 ;389
0007e4  ea000008          B        |L1.2060|
                  |L1.2024|
0007e8  e3a00071          MOV      r0,#0x71              ;393
0007ec  ebfffffe          BL       SetGuiResponseVal
0007f0  e3a0001b          MOV      r0,#0x1b              ;397
0007f4  e59f1038          LDR      r1,|L1.2100|
0007f8  e5c10000          STRB     r0,[r1,#0]            ;397  ; chrtemp
0007fc  e3a00001          MOV      r0,#1                 ;398
000800  e51f1454          LDR      r1,|L1.948|
000804  e5c10000          STRB     r0,[r1,#0]            ;398  ; touchflag
000808  e3a06001          MOV      r6,#1                 ;399
                  |L1.2060|
00080c  ea000005          B        |L1.2088|
                  |L1.2064|
000810  e1a00000          MOV      r0,r0                 ;402
000814  ea000003          B        |L1.2088|
                  |L1.2072|
000818  e1a00000          MOV      r0,r0                 ;408
00081c  ea000001          B        |L1.2088|
                  |L1.2080|
000820  e1a00000          MOV      r0,r0                 ;414
000824  e1a00000          MOV      r0,r0                 ;418
                  |L1.2088|
000828  e1a00000          MOV      r0,r0                 ;351
                  |L1.2092|
00082c  e1a00006          MOV      r0,r6                 ;426
000830  eaffff98          B        |L1.1688|
                  |L1.2100|
                          DCD      chrtemp
                  |L1.2104|
000838  69736869          DCB      "ishit=%s \n",0
00083c  743d2573
000840  200a00  
000843  00                DCB      0
                  |L1.2116|
                          DCD      keyIgnoreFlag
                  |L1.2120|
000848  205b494e          DCB      " [INFO GUI] <Free> Key:  ignore...\n",0
00084c  464f2047
000850  55495d20
000854  3c467265
000858  653e204b
00085c  65793a20
000860  2069676e
000864  6f72652e
000868  2e2e0a00
                          ENDP

                  GuiBlankTimerCallback PROC
;;;428    BOOL GuiBlankTimerCallback(uint8_t timerIndex)
00086c  e92d4010          PUSH     {r4,lr}
;;;429    {
000870  e1a04000          MOV      r4,r0
;;;430        //sysprintf(" [INFO GUI] <Free> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;431        keyIgnoreFlag = TRUE;
000874  e3a00001          MOV      r0,#1
000878  e51f103c          LDR      r1,|L1.2116|
00087c  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;432        switch(timerIndex)
000880  e3540000          CMP      r4,#0
000884  0a000004          BEQ      |L1.2204|
000888  e3540001          CMP      r4,#1
00088c  0a000004          BEQ      |L1.2212|
000890  e3540002          CMP      r4,#2
000894  1a00001e          BNE      |L1.2324|
000898  ea000019          B        |L1.2308|
                  |L1.2204|
;;;433        {
;;;434            case UPDATE_BG_TIMER:
00089c  e1a00000          MOV      r0,r0
;;;435    
;;;436                break;
0008a0  ea00001b          B        |L1.2324|
                  |L1.2212|
;;;437            case UPDATE_DATA_TIMER:
0008a4  e1a00000          MOV      r0,r0
;;;438                if(MTPstatus == GUI_MTP_SCREEN)
0008a8  e51f04f4          LDR      r0,|L1.956|
0008ac  e5d00000          LDRB     r0,[r0,#0]  ; MTPstatus
0008b0  e350000c          CMP      r0,#0xc
0008b4  1a000002          BNE      |L1.2244|
;;;439                {
;;;440                    terninalPrintf("ReadyGoMTPScreen\r\n");
0008b8  e28f00c8          ADR      r0,|L1.2440|
0008bc  ebfffffe          BL       terninalPrintf
0008c0  ea00000e          B        |L1.2304|
                  |L1.2244|
;;;441                }
;;;442                else if(MTPstatus == GUI_MTP_START)
0008c4  e51f0510          LDR      r0,|L1.956|
0008c8  e5d00000          LDRB     r0,[r0,#0]  ; MTPstatus
0008cc  e350000d          CMP      r0,#0xd
0008d0  1a00000a          BNE      |L1.2304|
;;;443                {
;;;444                    
;;;445                    //terninalPrintf("MTPstatus == GUI_MTP_START\r\n");
;;;446                    
;;;447                    if (MTP_GetProcedureFlag() == FALSE) 
0008d4  ebfffffe          BL       MTP_GetProcedureFlag
0008d8  e3500000          CMP      r0,#0
0008dc  1a000001          BNE      |L1.2280|
;;;448                    {
;;;449                        updateData();
0008e0  ebfffffe          BL       updateData
0008e4  ea000005          B        |L1.2304|
                  |L1.2280|
;;;450                    }
;;;451                    else
;;;452                    {
;;;453                        pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, portMAX_DELAY);
0008e8  e51f0520          LDR      r0,|L1.976|
0008ec  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0008f0  e3e01000          MVN      r1,#0
0008f4  e590200c          LDR      r2,[r0,#0xc]
0008f8  e3a00001          MOV      r0,#1
0008fc  e12fff32          BLX      r2
                  |L1.2304|
;;;454                        //if (MTP_GetSwitchRTCFlag()) {
;;;455                        //    EPDDrawString(TRUE, "Start RTC Procedure ...", 100, 100);
;;;456                        //}
;;;457                        //else {
;;;458                            //EPDDrawString(TRUE, "Start MTP Procedure ...", 100, 100);
;;;459                        //}
;;;460                    }
;;;461                }
;;;462    
;;;463                break;
000900  ea000003          B        |L1.2324|
                  |L1.2308|
;;;464            case EXIT_TIMER:
000904  e1a00000          MOV      r0,r0
;;;465                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);  
;;;466                SetGuiResponseVal('q');
000908  e3a00071          MOV      r0,#0x71
00090c  ebfffffe          BL       SetGuiResponseVal
;;;467                break;
000910  e1a00000          MOV      r0,r0
                  |L1.2324|
000914  e1a00000          MOV      r0,r0                 ;436
;;;468    
;;;469        }
;;;470        keyIgnoreFlag = FALSE;
000918  e3a00000          MOV      r0,#0
00091c  e51f10e0          LDR      r1,|L1.2116|
000920  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;471        return TRUE;
000924  e3a00001          MOV      r0,#1
;;;472    }
000928  e8bd8010          POP      {r4,pc}
;;;473    
                          ENDP

                  GuiBlankPowerCallbackFunc PROC
;;;474    BOOL GuiBlankPowerCallbackFunc(uint8_t type, int flag)
00092c  e1a02000          MOV      r2,r0
;;;475    {
;;;476        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;477        switch(type)
000930  e3520001          CMP      r2,#1
000934  0a000006          BEQ      |L1.2388|
000938  e3520002          CMP      r2,#2
00093c  0a000008          BEQ      |L1.2404|
000940  e3520003          CMP      r2,#3
000944  0a000008          BEQ      |L1.2412|
000948  e3520004          CMP      r2,#4
00094c  1a00000a          BNE      |L1.2428|
000950  ea000007          B        |L1.2420|
                  |L1.2388|
;;;478        {
;;;479            case GUI_POWER_STATUS_INDEX:
000954  e1a00000          MOV      r0,r0
;;;480                return powerStatus;
000958  e51f05a8          LDR      r0,|L1.952|
00095c  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.2400|
;;;481            case GUI_POWER_ON_INDEX:
;;;482                break;
;;;483            case GUI_POWER_OFF_INDEX:
;;;484                break;
;;;485            case GUI_POWER_PREV_OFF_INDEX:
;;;486                break;
;;;487        }
;;;488        return TRUE;
;;;489    }
000960  e12fff1e          BX       lr
                  |L1.2404|
000964  e1a00000          MOV      r0,r0                 ;481
000968  ea000003          B        |L1.2428|
                  |L1.2412|
00096c  e1a00000          MOV      r0,r0                 ;483
000970  ea000001          B        |L1.2428|
                  |L1.2420|
000974  e1a00000          MOV      r0,r0                 ;485
000978  e1a00000          MOV      r0,r0                 ;486
                  |L1.2428|
00097c  e1a00000          MOV      r0,r0                 ;482
000980  e3a00001          MOV      r0,#1                 ;488
000984  eafffff5          B        |L1.2400|
;;;490    
                          ENDP

                  |L1.2440|
000988  52656164          DCB      "ReadyGoMTPScreen\r\n",0
00098c  79476f4d
000990  54505363
000994  7265656e
000998  0d0a00  
00099b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4b455950          DCB      0x4b,0x45,0x59,0x50
000004  41442054          DCB      0x41,0x44,0x20,0x54
000008  45535420          DCB      0x45,0x53,0x54,0x20
00000c  0a507265          DCB      0x0a,0x50,0x72,0x65
000010  73732053          DCB      0x73,0x73,0x20,0x53
000014  57342074          DCB      0x57,0x34,0x20,0x74
000018  6f207175          DCB      0x6f,0x20,0x71,0x75
00001c  69742e0a          DCB      0x69,0x74,0x2e,0x0a
000020  50726573          DCB      0x50,0x72,0x65,0x73
000024  73206120          DCB      0x73,0x20,0x61,0x20
000028  746f2073          DCB      0x74,0x6f,0x20,0x73
00002c  65742069          DCB      0x65,0x74,0x20,0x69
000030  6e707574          DCB      0x6e,0x70,0x75,0x74
000034  2070696e          DCB      0x20,0x70,0x69,0x6e
000038  2e0a5072          DCB      0x2e,0x0a,0x50,0x72
00003c  65737320          DCB      0x65,0x73,0x73,0x20
000040  6220746f          DCB      0x62,0x20,0x74,0x6f
000044  20736574          DCB      0x20,0x73,0x65,0x74
000048  20493243          DCB      0x20,0x49,0x32,0x43
00004c  2070696e          DCB      0x20,0x70,0x69,0x6e
000050  2e00              DCB      0x2e,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  01                DCB      0x01
                  keyIgnoreFlag
000005  00                DCB      0x00
                  touchflag
000006  00                DCB      0x00
                  key1flag
000007  00                DCB      0x00
                  key2flag
000008  00                DCB      0x00
                  key3flag
000009  00                DCB      0x00
                  key4flag
00000a  00                DCB      0x00
                  key5flag
00000b  00                DCB      0x00
                  key6flag
00000c  00                DCB      0x00
                  tempColorAllGreen
00000d  010101            DCB      0x01,0x01,0x01
000010  01010100          DCB      0x01,0x01,0x01,0x00
000014  00                DCB      0x00
                  tempColorOff
000015  000000            DCB      0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00                DCB      0x00
                  chrtemp
00001d  00                DCB      0x00
                  TempreFreshPara
00001e  00                DCB      0x00
                  MTPstatus
00001f  00                DCB      0x00
