; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ledcmdlib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ledcmdlib.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\ledcmdlib.crf src\syshal\ledcmdlib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Bay_light_Command PROC
;;;38     
;;;39     uint8_t Bay_light_Command(char* Out_command, uint8_t Buff_LEN,uint8_t Frequency, uint8_t Period)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;40     {
000004  e1a0c000          MOV      r12,r0
;;;41         uint8_t TX_Check_Sum;
;;;42         if((Buff_LEN < 9) | (Period == 0))
000008  e3510009          CMP      r1,#9
00000c  aa000001          BGE      |L1.24|
000010  e3a00001          MOV      r0,#1
000014  ea000000          B        |L1.28|
                  |L1.24|
000018  e3a00000          MOV      r0,#0
                  |L1.28|
00001c  e3530000          CMP      r3,#0
000020  1a000001          BNE      |L1.44|
000024  e3a05001          MOV      r5,#1
000028  ea000000          B        |L1.48|
                  |L1.44|
00002c  e3a05000          MOV      r5,#0
                  |L1.48|
000030  e1900005          ORRS     r0,r0,r5
000034  0a000001          BEQ      |L1.64|
;;;43                 return COMMAND_ERROR; 
000038  e3a00000          MOV      r0,#0
                  |L1.60|
;;;44         if((Frequency > Period*10) && (Frequency != 0xFF))
;;;45                 return COMMAND_ERROR; 
;;;46             
;;;47         TX_Check_Sum = 0x09+0x01+Frequency+Period;
;;;48     
;;;49         Out_command[0] = 0x7a;
;;;50         Out_command[1] = 0xa7;
;;;51         Out_command[2] = 0x09;
;;;52         Out_command[3] = 0x01;
;;;53         Out_command[4] = Frequency;
;;;54         Out_command[5] = Period;
;;;55         Out_command[6] = TX_Check_Sum;
;;;56         Out_command[7] = 0xd3;
;;;57         Out_command[8] = 0x3d;
;;;58         return 9;
;;;59         
;;;60     }
00003c  e8bd8030          POP      {r4,r5,pc}
                  |L1.64|
000040  e0830103          ADD      r0,r3,r3,LSL #2       ;44
000044  e1520080          CMP      r2,r0,LSL #1          ;44
000048  da000003          BLE      |L1.92|
00004c  e35200ff          CMP      r2,#0xff              ;44
000050  0a000001          BEQ      |L1.92|
000054  e3a00000          MOV      r0,#0                 ;45
000058  eafffff7          B        |L1.60|
                  |L1.92|
00005c  e282000a          ADD      r0,r2,#0xa            ;47
000060  e0800003          ADD      r0,r0,r3              ;47
000064  e20040ff          AND      r4,r0,#0xff           ;47
000068  e3a0007a          MOV      r0,#0x7a              ;49
00006c  e5cc0000          STRB     r0,[r12,#0]           ;49
000070  e3a000a7          MOV      r0,#0xa7              ;50
000074  e5cc0001          STRB     r0,[r12,#1]           ;50
000078  e3a00009          MOV      r0,#9                 ;51
00007c  e5cc0002          STRB     r0,[r12,#2]           ;51
000080  e3a00001          MOV      r0,#1                 ;52
000084  e5cc0003          STRB     r0,[r12,#3]           ;52
000088  e5cc2004          STRB     r2,[r12,#4]           ;53
00008c  e5cc3005          STRB     r3,[r12,#5]           ;54
000090  e5cc4006          STRB     r4,[r12,#6]           ;55
000094  e3a000d3          MOV      r0,#0xd3              ;56
000098  e5cc0007          STRB     r0,[r12,#7]           ;56
00009c  e3a0003d          MOV      r0,#0x3d              ;57
0000a0  e5cc0008          STRB     r0,[r12,#8]           ;57
0000a4  e3a00009          MOV      r0,#9                 ;58
0000a8  eaffffe3          B        |L1.60|
;;;61     
                          ENDP

                  Alive_State_light_Command PROC
;;;62     uint8_t Alive_State_light_Command(char* Out_command, uint8_t Buff_LEN, uint8_t Frequency, uint8_t Period)
0000ac  e92d4030          PUSH     {r4,r5,lr}
;;;63     {   
0000b0  e1a0c000          MOV      r12,r0
;;;64         uint8_t TX_Check_Sum;
;;;65         if((Buff_LEN < 9) | (Period == 0))
0000b4  e3510009          CMP      r1,#9
0000b8  aa000001          BGE      |L1.196|
0000bc  e3a00001          MOV      r0,#1
0000c0  ea000000          B        |L1.200|
                  |L1.196|
0000c4  e3a00000          MOV      r0,#0
                  |L1.200|
0000c8  e3530000          CMP      r3,#0
0000cc  1a000001          BNE      |L1.216|
0000d0  e3a05001          MOV      r5,#1
0000d4  ea000000          B        |L1.220|
                  |L1.216|
0000d8  e3a05000          MOV      r5,#0
                  |L1.220|
0000dc  e1900005          ORRS     r0,r0,r5
0000e0  0a000001          BEQ      |L1.236|
;;;66                 return COMMAND_ERROR; 
0000e4  e3a00000          MOV      r0,#0
                  |L1.232|
;;;67         if((Frequency > Period*10) && (Frequency != 0xFF))
;;;68                 return COMMAND_ERROR; 
;;;69             
;;;70         TX_Check_Sum = 0x09+0x12+Frequency+Period;
;;;71         Out_command[0] = 0x7a;
;;;72         Out_command[1] = 0xa7;
;;;73         Out_command[2] = 0x09;
;;;74         Out_command[3] = 0x12;
;;;75         Out_command[4] = Frequency;
;;;76         Out_command[5] = Period;
;;;77         Out_command[6] = TX_Check_Sum;
;;;78         Out_command[7] = 0xd3;
;;;79         Out_command[8] = 0x3d;
;;;80         return 9;
;;;81     }
0000e8  e8bd8030          POP      {r4,r5,pc}
                  |L1.236|
0000ec  e0830103          ADD      r0,r3,r3,LSL #2       ;67
0000f0  e1520080          CMP      r2,r0,LSL #1          ;67
0000f4  da000003          BLE      |L1.264|
0000f8  e35200ff          CMP      r2,#0xff              ;67
0000fc  0a000001          BEQ      |L1.264|
000100  e3a00000          MOV      r0,#0                 ;68
000104  eafffff7          B        |L1.232|
                  |L1.264|
000108  e282001b          ADD      r0,r2,#0x1b           ;70
00010c  e0800003          ADD      r0,r0,r3              ;70
000110  e20040ff          AND      r4,r0,#0xff           ;70
000114  e3a0007a          MOV      r0,#0x7a              ;71
000118  e5cc0000          STRB     r0,[r12,#0]           ;71
00011c  e3a000a7          MOV      r0,#0xa7              ;72
000120  e5cc0001          STRB     r0,[r12,#1]           ;72
000124  e3a00009          MOV      r0,#9                 ;73
000128  e5cc0002          STRB     r0,[r12,#2]           ;73
00012c  e3a00012          MOV      r0,#0x12              ;74
000130  e5cc0003          STRB     r0,[r12,#3]           ;74
000134  e5cc2004          STRB     r2,[r12,#4]           ;75
000138  e5cc3005          STRB     r3,[r12,#5]           ;76
00013c  e5cc4006          STRB     r4,[r12,#6]           ;77
000140  e3a000d3          MOV      r0,#0xd3              ;78
000144  e5cc0007          STRB     r0,[r12,#7]           ;78
000148  e3a0003d          MOV      r0,#0x3d              ;79
00014c  e5cc0008          STRB     r0,[r12,#8]           ;79
000150  e3a00009          MOV      r0,#9                 ;80
000154  eaffffe3          B        |L1.232|
;;;82     
                          ENDP

                  State_light_Command PROC
;;;83     uint8_t State_light_Command(char* Out_command, uint8_t Buff_LEN, uint8_t Frequency, uint8_t Period)
000158  e92d4030          PUSH     {r4,r5,lr}
;;;84     {   
00015c  e1a0c000          MOV      r12,r0
;;;85         uint8_t TX_Check_Sum;
;;;86         if((Buff_LEN < 9) | (Period == 0))
000160  e3510009          CMP      r1,#9
000164  aa000001          BGE      |L1.368|
000168  e3a00001          MOV      r0,#1
00016c  ea000000          B        |L1.372|
                  |L1.368|
000170  e3a00000          MOV      r0,#0
                  |L1.372|
000174  e3530000          CMP      r3,#0
000178  1a000001          BNE      |L1.388|
00017c  e3a05001          MOV      r5,#1
000180  ea000000          B        |L1.392|
                  |L1.388|
000184  e3a05000          MOV      r5,#0
                  |L1.392|
000188  e1900005          ORRS     r0,r0,r5
00018c  0a000001          BEQ      |L1.408|
;;;87                 return COMMAND_ERROR; 
000190  e3a00000          MOV      r0,#0
                  |L1.404|
;;;88         if((Frequency > Period*10) && (Frequency != 0xFF))
;;;89                 return COMMAND_ERROR; 
;;;90             
;;;91         TX_Check_Sum = 0x09+0x02+Frequency+Period;
;;;92         Out_command[0] = 0x7a;
;;;93         Out_command[1] = 0xa7;
;;;94         Out_command[2] = 0x09;
;;;95         Out_command[3] = 0x02;
;;;96         Out_command[4] = Frequency;
;;;97         Out_command[5] = Period;
;;;98         Out_command[6] = TX_Check_Sum;
;;;99         Out_command[7] = 0xd3;
;;;100        Out_command[8] = 0x3d;
;;;101        return 9;
;;;102    }
000194  e8bd8030          POP      {r4,r5,pc}
                  |L1.408|
000198  e0830103          ADD      r0,r3,r3,LSL #2       ;88
00019c  e1520080          CMP      r2,r0,LSL #1          ;88
0001a0  da000003          BLE      |L1.436|
0001a4  e35200ff          CMP      r2,#0xff              ;88
0001a8  0a000001          BEQ      |L1.436|
0001ac  e3a00000          MOV      r0,#0                 ;89
0001b0  eafffff7          B        |L1.404|
                  |L1.436|
0001b4  e282000b          ADD      r0,r2,#0xb            ;91
0001b8  e0800003          ADD      r0,r0,r3              ;91
0001bc  e20040ff          AND      r4,r0,#0xff           ;91
0001c0  e3a0007a          MOV      r0,#0x7a              ;92
0001c4  e5cc0000          STRB     r0,[r12,#0]           ;92
0001c8  e3a000a7          MOV      r0,#0xa7              ;93
0001cc  e5cc0001          STRB     r0,[r12,#1]           ;93
0001d0  e3a00009          MOV      r0,#9                 ;94
0001d4  e5cc0002          STRB     r0,[r12,#2]           ;94
0001d8  e3a00002          MOV      r0,#2                 ;95
0001dc  e5cc0003          STRB     r0,[r12,#3]           ;95
0001e0  e5cc2004          STRB     r2,[r12,#4]           ;96
0001e4  e5cc3005          STRB     r3,[r12,#5]           ;97
0001e8  e5cc4006          STRB     r4,[r12,#6]           ;98
0001ec  e3a000d3          MOV      r0,#0xd3              ;99
0001f0  e5cc0007          STRB     r0,[r12,#7]           ;99
0001f4  e3a0003d          MOV      r0,#0x3d              ;100
0001f8  e5cc0008          STRB     r0,[r12,#8]           ;100
0001fc  e3a00009          MOV      r0,#9                 ;101
000200  eaffffe3          B        |L1.404|
;;;103    uint8_t Light_Color_Command(char* Out_command, uint8_t Buff_LEN, uint8_t Bay[], uint8_t state)
                          ENDP

                  Light_Color_Command PROC
000204  e92d43f0          PUSH     {r4-r9,lr}
;;;104    {       
000208  e1a0c000          MOV      r12,r0
00020c  e1a07001          MOV      r7,r1
;;;105        uint8_t Bay1_4, Bay5_8, BayState ,TX_Check_Sum;
;;;106        uint8_t data_check;
;;;107        for(data_check=0;data_check<=7;data_check++)
000210  e3a01000          MOV      r1,#0
000214  ea000018          B        |L1.636|
                  |L1.536|
;;;108        {
;;;109            if(!((Bay[data_check] == 0) | (Bay[data_check] == 1) | (Bay[data_check] == 2)))
000218  e7d20001          LDRB     r0,[r2,r1]
00021c  e3500000          CMP      r0,#0
000220  1a000001          BNE      |L1.556|
000224  e3a00001          MOV      r0,#1
000228  ea000000          B        |L1.560|
                  |L1.556|
00022c  e3a00000          MOV      r0,#0
                  |L1.560|
000230  e7d29001          LDRB     r9,[r2,r1]
000234  e3590001          CMP      r9,#1
000238  1a000001          BNE      |L1.580|
00023c  e3a09001          MOV      r9,#1
000240  ea000000          B        |L1.584|
                  |L1.580|
000244  e3a09000          MOV      r9,#0
                  |L1.584|
000248  e1800009          ORR      r0,r0,r9
00024c  e7d29001          LDRB     r9,[r2,r1]
000250  e3590002          CMP      r9,#2
000254  1a000001          BNE      |L1.608|
000258  e3a09001          MOV      r9,#1
00025c  ea000000          B        |L1.612|
                  |L1.608|
000260  e3a09000          MOV      r9,#0
                  |L1.612|
000264  e1900009          ORRS     r0,r0,r9
000268  1a000001          BNE      |L1.628|
;;;110                return COMMAND_ERROR; //Light color erro
00026c  e3a00000          MOV      r0,#0
                  |L1.624|
;;;111        }
;;;112        //if(!((state == 0x00) | (state == 0x3)))
;;;113         //       return COMMAND_ERROR; //Light color erro
;;;114                    
;;;115        if(Buff_LEN < 10)
;;;116                return COMMAND_ERROR;
;;;117        Bay1_4 = Bay[0]+ (Bay[1] << 2) + (Bay[2] << 4) + (Bay[3] << 6) ;
;;;118        Bay5_8 = Bay[4]+ (Bay[5] << 2) + (Bay[6] << 4) + (Bay[7] << 6) ;
;;;119        BayState = state;
;;;120        TX_Check_Sum = 0x0a + 0x05 + Bay1_4 + Bay5_8 + BayState;
;;;121        Out_command[0] = 0x7a;
;;;122        Out_command[1] = 0xa7;
;;;123        Out_command[2] = 0x0a;
;;;124        Out_command[3] = 0x05;
;;;125        Out_command[4] = Bay1_4;
;;;126        Out_command[5] = Bay5_8;
;;;127        Out_command[6] = BayState;  
;;;128        Out_command[7] = TX_Check_Sum;
;;;129        Out_command[8] = 0xd3;
;;;130        Out_command[9] = 0x3d;
;;;131        return 10;
;;;132    }
000270  e8bd83f0          POP      {r4-r9,pc}
                  |L1.628|
000274  e2810001          ADD      r0,r1,#1              ;107
000278  e20010ff          AND      r1,r0,#0xff           ;107
                  |L1.636|
00027c  e3510007          CMP      r1,#7                 ;107
000280  daffffe4          BLE      |L1.536|
000284  e357000a          CMP      r7,#0xa               ;115
000288  aa000001          BGE      |L1.660|
00028c  e3a00000          MOV      r0,#0                 ;116
000290  eafffff6          B        |L1.624|
                  |L1.660|
000294  e5d20000          LDRB     r0,[r2,#0]            ;117
000298  e5d29001          LDRB     r9,[r2,#1]            ;117
00029c  e0800109          ADD      r0,r0,r9,LSL #2       ;117
0002a0  e5d29002          LDRB     r9,[r2,#2]            ;117
0002a4  e0800209          ADD      r0,r0,r9,LSL #4       ;117
0002a8  e5d29003          LDRB     r9,[r2,#3]            ;117
0002ac  e0800309          ADD      r0,r0,r9,LSL #6       ;117
0002b0  e20040ff          AND      r4,r0,#0xff           ;117
0002b4  e5d20004          LDRB     r0,[r2,#4]            ;118
0002b8  e5d29005          LDRB     r9,[r2,#5]            ;118
0002bc  e0800109          ADD      r0,r0,r9,LSL #2       ;118
0002c0  e5d29006          LDRB     r9,[r2,#6]            ;118
0002c4  e0800209          ADD      r0,r0,r9,LSL #4       ;118
0002c8  e5d29007          LDRB     r9,[r2,#7]            ;118
0002cc  e0800309          ADD      r0,r0,r9,LSL #6       ;118
0002d0  e20050ff          AND      r5,r0,#0xff           ;118
0002d4  e1a06003          MOV      r6,r3                 ;119
0002d8  e284000f          ADD      r0,r4,#0xf            ;120
0002dc  e0800005          ADD      r0,r0,r5              ;120
0002e0  e0800006          ADD      r0,r0,r6              ;120
0002e4  e20080ff          AND      r8,r0,#0xff           ;120
0002e8  e3a0007a          MOV      r0,#0x7a              ;121
0002ec  e5cc0000          STRB     r0,[r12,#0]           ;121
0002f0  e3a000a7          MOV      r0,#0xa7              ;122
0002f4  e5cc0001          STRB     r0,[r12,#1]           ;122
0002f8  e3a0000a          MOV      r0,#0xa               ;123
0002fc  e5cc0002          STRB     r0,[r12,#2]           ;123
000300  e3a00005          MOV      r0,#5                 ;124
000304  e5cc0003          STRB     r0,[r12,#3]           ;124
000308  e5cc4004          STRB     r4,[r12,#4]           ;125
00030c  e5cc5005          STRB     r5,[r12,#5]           ;126
000310  e5cc6006          STRB     r6,[r12,#6]           ;127
000314  e5cc8007          STRB     r8,[r12,#7]           ;128
000318  e3a000d3          MOV      r0,#0xd3              ;129
00031c  e5cc0008          STRB     r0,[r12,#8]           ;129
000320  e3a0003d          MOV      r0,#0x3d              ;130
000324  e5cc0009          STRB     r0,[r12,#9]           ;130
000328  e3a0000a          MOV      r0,#0xa               ;131
00032c  eaffffcf          B        |L1.624|
;;;133    uint8_t HeartBeatTimeSet(char* Out_command, uint8_t Buff_LEN, uint8_t DeathMin, uint8_t DeathSec)
                          ENDP

                  HeartBeatTimeSet PROC
000330  e92d40f0          PUSH     {r4-r7,lr}
;;;134    {
000334  e1a0c000          MOV      r12,r0
000338  e1a06001          MOV      r6,r1
;;;135        uint8_t TimeBig,TimeLittle,TX_Check_Sum;
;;;136        uint16_t TotalSec;
;;;137        if(Buff_LEN < 9)
00033c  e3560009          CMP      r6,#9
000340  aa000001          BGE      |L1.844|
;;;138            return COMMAND_ERROR;
000344  e3a00000          MOV      r0,#0
                  |L1.840|
;;;139        if((DeathMin >= 27) && (DeathSec > 57))
;;;140            return COMMAND_ERROR;
;;;141        if(DeathSec > 59)
;;;142            return COMMAND_ERROR;
;;;143        if(DeathMin > 27)
;;;144            return COMMAND_ERROR;
;;;145        TotalSec = DeathMin*60 + DeathSec;
;;;146        TimeBig = (TotalSec >> 8) & 0xFF;
;;;147        TimeLittle = TotalSec & 0xFF;
;;;148        TX_Check_Sum = 0x09 + 0x10 + TimeBig + TimeLittle;
;;;149        Out_command[0] = 0x7a;
;;;150        Out_command[1] = 0xa7;
;;;151        Out_command[2] = 0x09;
;;;152        Out_command[3] = 0x10;
;;;153        Out_command[4] = TimeBig;
;;;154        Out_command[5] = TimeLittle;
;;;155        Out_command[6] = TX_Check_Sum;
;;;156        Out_command[7] = 0xd3;
;;;157        Out_command[8] = 0x3d;
;;;158        return 9;
;;;159    }
000348  e8bd80f0          POP      {r4-r7,pc}
                  |L1.844|
00034c  e352001b          CMP      r2,#0x1b              ;139
000350  ba000003          BLT      |L1.868|
000354  e3530039          CMP      r3,#0x39              ;139
000358  da000001          BLE      |L1.868|
00035c  e3a00000          MOV      r0,#0                 ;140
000360  eafffff8          B        |L1.840|
                  |L1.868|
000364  e353003b          CMP      r3,#0x3b              ;141
000368  da000001          BLE      |L1.884|
00036c  e3a00000          MOV      r0,#0                 ;142
000370  eafffff4          B        |L1.840|
                  |L1.884|
000374  e352001b          CMP      r2,#0x1b              ;143
000378  da000001          BLE      |L1.900|
00037c  e3a00000          MOV      r0,#0                 ;144
000380  eafffff0          B        |L1.840|
                  |L1.900|
000384  e0620202          RSB      r0,r2,r2,LSL #4       ;145
000388  e0835100          ADD      r5,r3,r0,LSL #2       ;145
00038c  e1a00805          LSL      r0,r5,#16             ;146
000390  e1a01c20          LSR      r1,r0,#24             ;146
000394  e20540ff          AND      r4,r5,#0xff           ;147
000398  e2810019          ADD      r0,r1,#0x19           ;148
00039c  e0800004          ADD      r0,r0,r4              ;148
0003a0  e20070ff          AND      r7,r0,#0xff           ;148
0003a4  e3a0007a          MOV      r0,#0x7a              ;149
0003a8  e5cc0000          STRB     r0,[r12,#0]           ;149
0003ac  e3a000a7          MOV      r0,#0xa7              ;150
0003b0  e5cc0001          STRB     r0,[r12,#1]           ;150
0003b4  e3a00009          MOV      r0,#9                 ;151
0003b8  e5cc0002          STRB     r0,[r12,#2]           ;151
0003bc  e3a00010          MOV      r0,#0x10              ;152
0003c0  e5cc0003          STRB     r0,[r12,#3]           ;152
0003c4  e5cc1004          STRB     r1,[r12,#4]           ;153
0003c8  e5cc4005          STRB     r4,[r12,#5]           ;154
0003cc  e5cc7006          STRB     r7,[r12,#6]           ;155
0003d0  e3a000d3          MOV      r0,#0xd3              ;156
0003d4  e5cc0007          STRB     r0,[r12,#7]           ;156
0003d8  e3a0003d          MOV      r0,#0x3d              ;157
0003dc  e5cc0008          STRB     r0,[r12,#8]           ;157
0003e0  e3a00009          MOV      r0,#9                 ;158
0003e4  eaffffd7          B        |L1.840|
;;;160    
                          ENDP

                  CalibrationSet PROC
;;;161    uint8_t CalibrationSet(char* Out_command, uint8_t Buff_LEN)
0003e8  e1a02000          MOV      r2,r0
;;;162    {
;;;163        uint8_t TX_Check_Sum;
;;;164        if(Buff_LEN < 7)
0003ec  e3510007          CMP      r1,#7
0003f0  aa000001          BGE      |L1.1020|
;;;165            return COMMAND_ERROR;
0003f4  e3a00000          MOV      r0,#0
                  |L1.1016|
;;;166        TX_Check_Sum = 0x07 + 0x07;
;;;167        Out_command[0] = 0x7a;
;;;168        Out_command[1] = 0xa7;
;;;169        Out_command[2] = 0x07;
;;;170        Out_command[3] = 0x07;
;;;171        Out_command[4] = TX_Check_Sum;
;;;172        Out_command[5] = 0xd3;
;;;173        Out_command[6] = 0x3d;
;;;174        return 7;
;;;175    }
0003f8  e12fff1e          BX       lr
                  |L1.1020|
0003fc  e3a0300e          MOV      r3,#0xe               ;166
000400  e3a0007a          MOV      r0,#0x7a              ;167
000404  e5c20000          STRB     r0,[r2,#0]            ;167
000408  e3a000a7          MOV      r0,#0xa7              ;168
00040c  e5c20001          STRB     r0,[r2,#1]            ;168
000410  e3a00007          MOV      r0,#7                 ;169
000414  e5c20002          STRB     r0,[r2,#2]            ;169
000418  e5c20003          STRB     r0,[r2,#3]            ;170
00041c  e5c23004          STRB     r3,[r2,#4]            ;171
000420  e3a000d3          MOV      r0,#0xd3              ;172
000424  e5c20005          STRB     r0,[r2,#5]            ;172
000428  e3a0003d          MOV      r0,#0x3d              ;173
00042c  e5c20006          STRB     r0,[r2,#6]            ;173
000430  e3a00007          MOV      r0,#7                 ;174
000434  eaffffef          B        |L1.1016|
;;;176    
                          ENDP

                  CollisionSet PROC
;;;177    uint8_t CollisionSet(char* Out_command, uint8_t Buff_LEN,uint8_t bias_degree,uint8_t strength_X,uint8_t strength_Y,uint8_t strength_Z)
000438  e92d4070          PUSH     {r4-r6,lr}
;;;178    {
00043c  e1a0c000          MOV      r12,r0
000440  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;179        uint8_t TX_Check_Sum;
;;;180        if(Buff_LEN < 11)
000444  e351000b          CMP      r1,#0xb
000448  aa000001          BGE      |L1.1108|
;;;181            return COMMAND_ERROR;
00044c  e3a00000          MOV      r0,#0
                  |L1.1104|
;;;182        TX_Check_Sum = 0x0B + 0x06 + bias_degree + strength_X + strength_Y + strength_Z;
;;;183        Out_command[0] = 0x7a;
;;;184        Out_command[1] = 0xa7;
;;;185        Out_command[2] = 0x0B;
;;;186        Out_command[3] = 0x06;
;;;187        Out_command[4] = bias_degree;
;;;188        Out_command[5] = strength_X;
;;;189        Out_command[6] = strength_Y;
;;;190        Out_command[7] = strength_Z;
;;;191        Out_command[8] = TX_Check_Sum;
;;;192        Out_command[9] = 0xd3;
;;;193        Out_command[10]= 0x3d;
;;;194        return 11;
;;;195    }
000450  e8bd8070          POP      {r4-r6,pc}
                  |L1.1108|
000454  e2820011          ADD      r0,r2,#0x11           ;182
000458  e0800003          ADD      r0,r0,r3              ;182
00045c  e0800004          ADD      r0,r0,r4              ;182
000460  e0800005          ADD      r0,r0,r5              ;182
000464  e20060ff          AND      r6,r0,#0xff           ;182
000468  e3a0007a          MOV      r0,#0x7a              ;183
00046c  e5cc0000          STRB     r0,[r12,#0]           ;183
000470  e3a000a7          MOV      r0,#0xa7              ;184
000474  e5cc0001          STRB     r0,[r12,#1]           ;184
000478  e3a0000b          MOV      r0,#0xb               ;185
00047c  e5cc0002          STRB     r0,[r12,#2]           ;185
000480  e3a00006          MOV      r0,#6                 ;186
000484  e5cc0003          STRB     r0,[r12,#3]           ;186
000488  e5cc2004          STRB     r2,[r12,#4]           ;187
00048c  e5cc3005          STRB     r3,[r12,#5]           ;188
000490  e5cc4006          STRB     r4,[r12,#6]           ;189
000494  e5cc5007          STRB     r5,[r12,#7]           ;190
000498  e5cc6008          STRB     r6,[r12,#8]           ;191
00049c  e3a000d3          MOV      r0,#0xd3              ;192
0004a0  e5cc0009          STRB     r0,[r12,#9]           ;192
0004a4  e3a0003d          MOV      r0,#0x3d              ;193
0004a8  e5cc000a          STRB     r0,[r12,#0xa]         ;193
0004ac  e3a0000b          MOV      r0,#0xb               ;194
0004b0  eaffffe6          B        |L1.1104|
;;;196    
                          ENDP

                  VersionQuery PROC
;;;197    uint8_t VersionQuery(char* Out_command, uint8_t Buff_LEN)
0004b4  e1a02000          MOV      r2,r0
;;;198    {
;;;199        uint8_t TX_Check_Sum;
;;;200        if(Buff_LEN < 7)
0004b8  e3510007          CMP      r1,#7
0004bc  aa000001          BGE      |L1.1224|
;;;201            return COMMAND_ERROR;
0004c0  e3a00000          MOV      r0,#0
                  |L1.1220|
;;;202        TX_Check_Sum = 0x07 + 0x08;
;;;203        Out_command[0] = 0x7a;
;;;204        Out_command[1] = 0xa7;
;;;205        Out_command[2] = 0x07;
;;;206        Out_command[3] = 0x08;
;;;207        Out_command[4] = TX_Check_Sum;
;;;208        Out_command[5] = 0xd3;
;;;209        Out_command[6] = 0x3d;
;;;210        return 7;
;;;211    }
0004c4  e12fff1e          BX       lr
                  |L1.1224|
0004c8  e3a0300f          MOV      r3,#0xf               ;202
0004cc  e3a0007a          MOV      r0,#0x7a              ;203
0004d0  e5c20000          STRB     r0,[r2,#0]            ;203
0004d4  e3a000a7          MOV      r0,#0xa7              ;204
0004d8  e5c20001          STRB     r0,[r2,#1]            ;204
0004dc  e3a00007          MOV      r0,#7                 ;205
0004e0  e5c20002          STRB     r0,[r2,#2]            ;205
0004e4  e3a00008          MOV      r0,#8                 ;206
0004e8  e5c20003          STRB     r0,[r2,#3]            ;206
0004ec  e5c23004          STRB     r3,[r2,#4]            ;207
0004f0  e3a000d3          MOV      r0,#0xd3              ;208
0004f4  e5c20005          STRB     r0,[r2,#5]            ;208
0004f8  e3a0003d          MOV      r0,#0x3d              ;209
0004fc  e5c20006          STRB     r0,[r2,#6]            ;209
000500  e3a00007          MOV      r0,#7                 ;210
000504  eaffffee          B        |L1.1220|
;;;212    
                          ENDP

                  CollisionClean PROC
;;;213    
;;;214    uint8_t CollisionClean(char* Out_command, uint8_t Buff_LEN)
000508  e1a02000          MOV      r2,r0
;;;215    {
;;;216        uint8_t TX_Check_Sum;
;;;217        if(Buff_LEN < 7)
00050c  e3510007          CMP      r1,#7
000510  aa000001          BGE      |L1.1308|
;;;218            return COMMAND_ERROR;
000514  e3a00000          MOV      r0,#0
                  |L1.1304|
;;;219        TX_Check_Sum = 0x07 + 0x09;
;;;220        Out_command[0] = 0x7a;
;;;221        Out_command[1] = 0xa7;
;;;222        Out_command[2] = 0x07;
;;;223        Out_command[3] = 0x09;
;;;224        Out_command[4] = TX_Check_Sum;
;;;225        Out_command[5] = 0xd3;
;;;226        Out_command[6] = 0x3d;
;;;227        return 7;
;;;228    }
000518  e12fff1e          BX       lr
                  |L1.1308|
00051c  e3a03010          MOV      r3,#0x10              ;219
000520  e3a0007a          MOV      r0,#0x7a              ;220
000524  e5c20000          STRB     r0,[r2,#0]            ;220
000528  e3a000a7          MOV      r0,#0xa7              ;221
00052c  e5c20001          STRB     r0,[r2,#1]            ;221
000530  e3a00007          MOV      r0,#7                 ;222
000534  e5c20002          STRB     r0,[r2,#2]            ;222
000538  e3a00009          MOV      r0,#9                 ;223
00053c  e5c20003          STRB     r0,[r2,#3]            ;223
000540  e5c23004          STRB     r3,[r2,#4]            ;224
000544  e3a000d3          MOV      r0,#0xd3              ;225
000548  e5c20005          STRB     r0,[r2,#5]            ;225
00054c  e3a0003d          MOV      r0,#0x3d              ;226
000550  e5c20006          STRB     r0,[r2,#6]            ;226
000554  e3a00007          MOV      r0,#7                 ;227
000558  eaffffee          B        |L1.1304|
;;;229    
                          ENDP

                  FactoryTest PROC
;;;230    int8_t FactoryTest(char* Out_command , uint8_t Command_LEN)
00055c  e1a02000          MOV      r2,r0
;;;231    {
;;;232        if(Command_LEN < 7)
000560  e3510007          CMP      r1,#7
000564  aa000001          BGE      |L1.1392|
;;;233            return COMMAND_ERROR;
000568  e3a00000          MOV      r0,#0
                  |L1.1388|
;;;234        Out_command[0] = 0x7a;
;;;235        Out_command[1] = 0xa7;
;;;236        Out_command[2] = 0x07;
;;;237        Out_command[3] = 0x30;
;;;238        Out_command[4] = 0x37;
;;;239        Out_command[5] = 0xd3;
;;;240        Out_command[6] = 0x3d;  
;;;241        return 7;
;;;242    
;;;243    }
00056c  e12fff1e          BX       lr
                  |L1.1392|
000570  e3a0007a          MOV      r0,#0x7a              ;234
000574  e5c20000          STRB     r0,[r2,#0]            ;234
000578  e3a000a7          MOV      r0,#0xa7              ;235
00057c  e5c20001          STRB     r0,[r2,#1]            ;235
000580  e3a00007          MOV      r0,#7                 ;236
000584  e5c20002          STRB     r0,[r2,#2]            ;236
000588  e3a00030          MOV      r0,#0x30              ;237
00058c  e5c20003          STRB     r0,[r2,#3]            ;237
000590  e3a00037          MOV      r0,#0x37              ;238
000594  e5c20004          STRB     r0,[r2,#4]            ;238
000598  e3a000d3          MOV      r0,#0xd3              ;239
00059c  e5c20005          STRB     r0,[r2,#5]            ;239
0005a0  e3a0003d          MOV      r0,#0x3d              ;240
0005a4  e5c20006          STRB     r0,[r2,#6]            ;240
0005a8  e3a00007          MOV      r0,#7                 ;241
0005ac  eaffffee          B        |L1.1388|
;;;244    
                          ENDP

                  RUN_Results PROC
;;;245    int8_t RUN_Results(char* Results_Command , uint8_t Command_LEN, short* Command_ID, int* head)
0005b0  e92d40f0          PUSH     {r4-r7,lr}
;;;246    {
0005b4  e1a0c000          MOV      r12,r0
0005b8  e1a04001          MOV      r4,r1
;;;247        uint8_t Len;
;;;248        int temphead;
;;;249        while(Results_Command[*head] != 0x7A)
0005bc  ea000007          B        |L1.1504|
                  |L1.1472|
;;;250        {
;;;251            temphead = *head;
0005c0  e5935000          LDR      r5,[r3,#0]
;;;252            temphead++;
0005c4  e2855001          ADD      r5,r5,#1
;;;253            *head = temphead;
0005c8  e5835000          STR      r5,[r3,#0]
;;;254            if(*head >= Command_LEN)
0005cc  e5930000          LDR      r0,[r3,#0]
0005d0  e1500004          CMP      r0,r4
0005d4  ba000001          BLT      |L1.1504|
;;;255               return COMMAND_LENGTH_ERROR;
0005d8  e3e00009          MVN      r0,#9
                  |L1.1500|
;;;256        }
;;;257        
;;;258        Len = Results_Command[2 + *head];
;;;259        //if(!((Command_LEN != 18)|(Command_LEN != 10)) | (Command_LEN != Len))
;;;260        //    return COMMAND_LENGTH_ERROR;
;;;261        if(((Results_Command[0 + *head] & 0xff) != 0x7A) | ((Results_Command[1 + *head] & 0xff) != 0xA7) | ((Results_Command[Len-2 + *head] & 0xff) != 0xD3) | ((Results_Command[Len-1 + *head] & 0xff) != 0x3D))
;;;262            return COMMAND_FORMAT_ERROR;
;;;263        if((Results_Command[5 + *head] & 0xff) == 0xFF)
;;;264        {
;;;265            *Command_ID = Results_Command[4 + *head];
;;;266            return COMMAND_SUCCESSFUL;
;;;267        }
;;;268        if((Results_Command[5 + *head] & 0xff) == 0x00)
;;;269        {
;;;270            *Command_ID = Results_Command[4 + *head];
;;;271            return COMMAND_FIAL;
;;;272        }
;;;273        return -5;
;;;274    }
0005dc  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1504|
0005e0  e5930000          LDR      r0,[r3,#0]            ;249
0005e4  e7dc0000          LDRB     r0,[r12,r0]           ;249
0005e8  e350007a          CMP      r0,#0x7a              ;249
0005ec  1afffff3          BNE      |L1.1472|
0005f0  e5930000          LDR      r0,[r3,#0]            ;258
0005f4  e2800002          ADD      r0,r0,#2              ;258
0005f8  e7dc1000          LDRB     r1,[r12,r0]           ;258
0005fc  e5930000          LDR      r0,[r3,#0]            ;261
000600  e7dc0000          LDRB     r0,[r12,r0]           ;261
000604  e350007a          CMP      r0,#0x7a              ;261
000608  0a000001          BEQ      |L1.1556|
00060c  e3a06001          MOV      r6,#1                 ;261
000610  ea000000          B        |L1.1560|
                  |L1.1556|
000614  e3a06000          MOV      r6,#0                 ;261
                  |L1.1560|
000618  e5930000          LDR      r0,[r3,#0]            ;261
00061c  e2800001          ADD      r0,r0,#1              ;261
000620  e7dc0000          LDRB     r0,[r12,r0]           ;261
000624  e35000a7          CMP      r0,#0xa7              ;261
000628  0a000001          BEQ      |L1.1588|
00062c  e3a00001          MOV      r0,#1                 ;261
000630  ea000000          B        |L1.1592|
                  |L1.1588|
000634  e3a00000          MOV      r0,#0                 ;261
                  |L1.1592|
000638  e1866000          ORR      r6,r6,r0              ;261
00063c  e2410002          SUB      r0,r1,#2              ;261
000640  e5937000          LDR      r7,[r3,#0]            ;261
000644  e0800007          ADD      r0,r0,r7              ;261
000648  e7dc0000          LDRB     r0,[r12,r0]           ;261
00064c  e35000d3          CMP      r0,#0xd3              ;261
000650  0a000001          BEQ      |L1.1628|
000654  e3a00001          MOV      r0,#1                 ;261
000658  ea000000          B        |L1.1632|
                  |L1.1628|
00065c  e3a00000          MOV      r0,#0                 ;261
                  |L1.1632|
000660  e1866000          ORR      r6,r6,r0              ;261
000664  e2410001          SUB      r0,r1,#1              ;261
000668  e5937000          LDR      r7,[r3,#0]            ;261
00066c  e0800007          ADD      r0,r0,r7              ;261
000670  e7dc0000          LDRB     r0,[r12,r0]           ;261
000674  e350003d          CMP      r0,#0x3d              ;261
000678  0a000001          BEQ      |L1.1668|
00067c  e3a00001          MOV      r0,#1                 ;261
000680  ea000000          B        |L1.1672|
                  |L1.1668|
000684  e3a00000          MOV      r0,#0                 ;261
                  |L1.1672|
000688  e1900006          ORRS     r0,r0,r6              ;261
00068c  0a000001          BEQ      |L1.1688|
000690  e3e0000a          MVN      r0,#0xa               ;262
000694  eaffffd0          B        |L1.1500|
                  |L1.1688|
000698  e5930000          LDR      r0,[r3,#0]            ;263
00069c  e2800005          ADD      r0,r0,#5              ;263
0006a0  e7dc0000          LDRB     r0,[r12,r0]           ;263
0006a4  e35000ff          CMP      r0,#0xff              ;263
0006a8  1a000005          BNE      |L1.1732|
0006ac  e5930000          LDR      r0,[r3,#0]            ;265
0006b0  e2800004          ADD      r0,r0,#4              ;265
0006b4  e7dc0000          LDRB     r0,[r12,r0]           ;265
0006b8  e1c200b0          STRH     r0,[r2,#0]            ;265
0006bc  e3a00001          MOV      r0,#1                 ;266
0006c0  eaffffc5          B        |L1.1500|
                  |L1.1732|
0006c4  e5930000          LDR      r0,[r3,#0]            ;268
0006c8  e2800005          ADD      r0,r0,#5              ;268
0006cc  e7dc0000          LDRB     r0,[r12,r0]           ;268
0006d0  e3500000          CMP      r0,#0                 ;268
0006d4  1a000005          BNE      |L1.1776|
0006d8  e5930000          LDR      r0,[r3,#0]            ;270
0006dc  e2800004          ADD      r0,r0,#4              ;270
0006e0  e7dc0000          LDRB     r0,[r12,r0]           ;270
0006e4  e1c200b0          STRH     r0,[r2,#0]            ;270
0006e8  e3e00000          MVN      r0,#0                 ;271
0006ec  eaffffba          B        |L1.1500|
                  |L1.1776|
0006f0  e3e00004          MVN      r0,#4                 ;273
0006f4  eaffffb8          B        |L1.1500|
;;;275    
                          ENDP

