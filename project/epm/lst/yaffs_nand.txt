; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_nand.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_nand.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_nand.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_nand.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  yaffs_rd_chunk_tags_nand PROC
;;;19     
;;;20     int yaffs_rd_chunk_tags_nand(struct yaffs_dev *dev, int nand_chunk,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;21     			     u8 *buffer, struct yaffs_ext_tags *tags)
;;;22     {
000004  e24dd04c          SUB      sp,sp,#0x4c
000008  e1a04000          MOV      r4,r0
00000c  e1a07001          MOV      r7,r1
000010  e1a0a002          MOV      r10,r2
000014  e1a06003          MOV      r6,r3
;;;23     	int result;
;;;24     	struct yaffs_ext_tags local_tags;
;;;25     	int flash_chunk = nand_chunk - dev->chunk_offset;
000018  e59400dc          LDR      r0,[r4,#0xdc]
00001c  e047b000          SUB      r11,r7,r0
;;;26     
;;;27     	dev->n_page_reads++;
000020  e5940e14          LDR      r0,[r4,#0xe14]
000024  e2800001          ADD      r0,r0,#1
000028  e5840e14          STR      r0,[r4,#0xe14]
;;;28     
;;;29     	/* If there are no tags provided use local tags. */
;;;30     	if (!tags)
00002c  e3560000          CMP      r6,#0
000030  1a000000          BNE      |L1.56|
;;;31     		tags = &local_tags;
000034  e1a0600d          MOV      r6,sp
                  |L1.56|
;;;32     
;;;33     	if (dev->param.read_chunk_tags_fn)
000038  e594005c          LDR      r0,[r4,#0x5c]
00003c  e3500000          CMP      r0,#0
000040  0a000007          BEQ      |L1.100|
;;;34     		result =
000044  e1a03006          MOV      r3,r6
000048  e1a0200a          MOV      r2,r10
00004c  e1a0100b          MOV      r1,r11
000050  e594c05c          LDR      r12,[r4,#0x5c]
000054  e1a00004          MOV      r0,r4
000058  e12fff3c          BLX      r12
00005c  e1a08000          MOV      r8,r0
000060  ea000005          B        |L1.124|
                  |L1.100|
;;;35     		    dev->param.read_chunk_tags_fn(dev, flash_chunk, buffer,
;;;36     						  tags);
;;;37     	else
;;;38     		result = yaffs_tags_compat_rd(dev,
000064  e1a03006          MOV      r3,r6
000068  e1a0200a          MOV      r2,r10
00006c  e1a0100b          MOV      r1,r11
000070  e1a00004          MOV      r0,r4
000074  ebfffffe          BL       yaffs_tags_compat_rd
000078  e1a08000          MOV      r8,r0
                  |L1.124|
;;;39     					      flash_chunk, buffer, tags);
;;;40     	if (tags && tags->ecc_result > YAFFS_ECC_RESULT_NO_ERROR) {
00007c  e3560000          CMP      r6,#0
000080  0a000022          BEQ      |L1.272|
000084  e5d60010          LDRB     r0,[r6,#0x10]
000088  e3500001          CMP      r0,#1
00008c  da00001f          BLE      |L1.272|
;;;41     
;;;42     		struct yaffs_block_info *bi;
;;;43     		bi = yaffs_get_block_info(dev,
000090  e1a00007          MOV      r0,r7
000094  e594100c          LDR      r1,[r4,#0xc]
000098  ebfffffe          BL       __aeabi_idivmod
00009c  e1a05000          MOV      r5,r0
0000a0  e59400d0          LDR      r0,[r4,#0xd0]
0000a4  e1500005          CMP      r0,r5
0000a8  ca000002          BGT      |L1.184|
0000ac  e59400d4          LDR      r0,[r4,#0xd4]
0000b0  e1500005          CMP      r0,r5
0000b4  aa00000c          BGE      |L1.236|
                  |L1.184|
0000b8  e59f00f8          LDR      r0,|L1.440|
0000bc  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
0000c0  e3100101          TST      r0,#0x40000000
0000c4  0a000002          BEQ      |L1.212|
0000c8  e1a01005          MOV      r1,r5
0000cc  e28f00e8          ADR      r0,|L1.444|
0000d0  ebfffffe          BL       sysprintf
                  |L1.212|
0000d4  e1a00000          MOV      r0,r0
0000d8  e3a0201f          MOV      r2,#0x1f
0000dc  e28f1f45          ADR      r1,|L1.504|
0000e0  e28f0f53          ADR      r0,|L1.564|
0000e4  ebfffffe          BL       sysprintf
0000e8  e1a00000          MOV      r0,r0
                  |L1.236|
0000ec  e1a00000          MOV      r0,r0
0000f0  e59410d0          LDR      r1,[r4,#0xd0]
0000f4  e0451001          SUB      r1,r5,r1
0000f8  e5940118          LDR      r0,[r4,#0x118]
0000fc  e0809181          ADD      r9,r0,r1,LSL #3
;;;44     					  nand_chunk /
;;;45     					  dev->param.chunks_per_block);
;;;46     		yaffs_handle_chunk_error(dev, bi);
000100  e1a01009          MOV      r1,r9
000104  e1a00004          MOV      r0,r4
000108  ebfffffe          BL       yaffs_handle_chunk_error
;;;47     	}
00010c  e1a00000          MOV      r0,r0
                  |L1.272|
;;;48     	return result;
000110  e1a00008          MOV      r0,r8
000114  e28dd04c          ADD      sp,sp,#0x4c
;;;49     }
000118  e8bd8ff0          POP      {r4-r11,pc}
;;;50     
                          ENDP

                  yaffs_wr_chunk_tags_nand PROC
;;;51     int yaffs_wr_chunk_tags_nand(struct yaffs_dev *dev,
00011c  e92d47f0          PUSH     {r4-r10,lr}
;;;52     				int nand_chunk,
;;;53     				const u8 *buffer, struct yaffs_ext_tags *tags)
;;;54     {
000120  e1a04000          MOV      r4,r0
000124  e1a06001          MOV      r6,r1
000128  e1a07002          MOV      r7,r2
00012c  e1a05003          MOV      r5,r3
;;;55     	int result;
;;;56     	int flash_chunk = nand_chunk - dev->chunk_offset;
000130  e59400dc          LDR      r0,[r4,#0xdc]
000134  e0468000          SUB      r8,r6,r0
;;;57     
;;;58     	dev->n_page_writes++;
000138  e5940e10          LDR      r0,[r4,#0xe10]
00013c  e2800001          ADD      r0,r0,#1
000140  e5840e10          STR      r0,[r4,#0xe10]
;;;59     
;;;60     	if (tags) {
000144  e3550000          CMP      r5,#0
000148  0a00000c          BEQ      |L1.384|
;;;61     		tags->seq_number = dev->seq_number;
00014c  e5940df0          LDR      r0,[r4,#0xdf0]
000150  e5850020          STR      r0,[r5,#0x20]
;;;62     		tags->chunk_used = 1;
000154  e3a00001          MOV      r0,#1
000158  e5850000          STR      r0,[r5,#0]
;;;63     		yaffs_trace(YAFFS_TRACE_WRITE,
00015c  e59f0054          LDR      r0,|L1.440|
000160  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
000164  e3100080          TST      r0,#0x80
000168  0a000055          BEQ      |L1.708|
00016c  e1a01006          MOV      r1,r6
000170  e28f00d4          ADR      r0,|L1.588|
000174  e995000c          LDMIB    r5,{r2,r3}
000178  ebfffffe          BL       sysprintf
00017c  ea000050          B        |L1.708|
                  |L1.384|
;;;64     			"Writing chunk %d tags %d %d",
;;;65     			nand_chunk, tags->obj_id, tags->chunk_id);
;;;66     	} else {
;;;67     		yaffs_trace(YAFFS_TRACE_ERROR, "Writing with no tags");
000180  e59f0030          LDR      r0,|L1.440|
000184  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
000188  e3100101          TST      r0,#0x40000000
00018c  0a000001          BEQ      |L1.408|
000190  e28f00d8          ADR      r0,|L1.624|
000194  ebfffffe          BL       sysprintf
                  |L1.408|
;;;68     		BUG();
000198  e1a00000          MOV      r0,r0
00019c  e3a02044          MOV      r2,#0x44
0001a0  e28f10e8          ADR      r1,|L1.656|
0001a4  e28f0088          ADR      r0,|L1.564|
0001a8  ebfffffe          BL       sysprintf
0001ac  e1a00000          MOV      r0,r0
;;;69     		return YAFFS_FAIL;
0001b0  e3a00000          MOV      r0,#0
                  |L1.436|
;;;70     	}
;;;71     
;;;72     	if (dev->param.write_chunk_tags_fn)
;;;73     		result = dev->param.write_chunk_tags_fn(dev, flash_chunk,
;;;74     							buffer, tags);
;;;75     	else
;;;76     		result = yaffs_tags_compat_wr(dev, flash_chunk, buffer, tags);
;;;77     
;;;78     	yaffs_summary_add(dev, tags, nand_chunk);
;;;79     
;;;80     	return result;
;;;81     }
0001b4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.440|
                          DCD      yaffs_trace_mask
                  |L1.444|
0001bc  79616666          DCB      "yaffs: **>> yaffs: get_block_info block %d is not valid"
0001c0  733a202a
0001c4  2a3e3e20
0001c8  79616666
0001cc  733a2067
0001d0  65745f62
0001d4  6c6f636b
0001d8  5f696e66
0001dc  6f20626c
0001e0  6f636b20
0001e4  25642069
0001e8  73206e6f
0001ec  74207661
0001f0  6c6964  
0001f3  0a00              DCB      "\n",0
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L1.504|
0001f8  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_get"
0001fc  2e5c636f
000200  6d6d6f6e
000204  5c737263
000208  5c425350
00020c  5c546869
000210  72645061
000214  7274795c
000218  79616666
00021c  73325c79
000220  61666673
000224  5f676574
000228  626c6f63          DCB      "blockinfo.h",0
00022c  6b696e66
000230  6f2e6800
                  |L1.564|
000234  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
000238  6f742042
00023c  55472061
000240  74202573
000244  3a256421
000248  0a00    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L1.588|
00024c  79616666          DCB      "yaffs: Writing chunk %d tags %d %d\n",0
000250  733a2057
000254  72697469
000258  6e672063
00025c  68756e6b
000260  20256420
000264  74616773
000268  20256420
00026c  25640a00
                  |L1.624|
000270  79616666          DCB      "yaffs: Writing with no tags\n",0
000274  733a2057
000278  72697469
00027c  6e672077
000280  69746820
000284  6e6f2074
000288  6167730a
00028c  00      
00028d  00                DCB      0
00028e  00                DCB      0
00028f  00                DCB      0
                  |L1.656|
000290  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_nan"
000294  2e5c636f
000298  6d6d6f6e
00029c  5c737263
0002a0  5c425350
0002a4  5c546869
0002a8  72645061
0002ac  7274795c
0002b0  79616666
0002b4  73325c79
0002b8  61666673
0002bc  5f6e616e
0002c0  642e6300          DCB      "d.c",0
                  |L1.708|
0002c4  e5940058          LDR      r0,[r4,#0x58]         ;72
0002c8  e3500000          CMP      r0,#0                 ;72
0002cc  0a000007          BEQ      |L1.752|
0002d0  e1a03005          MOV      r3,r5                 ;73
0002d4  e1a02007          MOV      r2,r7                 ;73
0002d8  e1a01008          MOV      r1,r8                 ;73
0002dc  e594c058          LDR      r12,[r4,#0x58]        ;73
0002e0  e1a00004          MOV      r0,r4                 ;73
0002e4  e12fff3c          BLX      r12                   ;73
0002e8  e1a09000          MOV      r9,r0                 ;73
0002ec  ea000005          B        |L1.776|
                  |L1.752|
0002f0  e1a03005          MOV      r3,r5                 ;76
0002f4  e1a02007          MOV      r2,r7                 ;76
0002f8  e1a01008          MOV      r1,r8                 ;76
0002fc  e1a00004          MOV      r0,r4                 ;76
000300  ebfffffe          BL       yaffs_tags_compat_wr
000304  e1a09000          MOV      r9,r0                 ;76
                  |L1.776|
000308  e1a02006          MOV      r2,r6                 ;78
00030c  e1a01005          MOV      r1,r5                 ;78
000310  e1a00004          MOV      r0,r4                 ;78
000314  ebfffffe          BL       yaffs_summary_add
000318  e1a00009          MOV      r0,r9                 ;80
00031c  eaffffa4          B        |L1.436|
;;;82     
                          ENDP

                  yaffs_mark_bad PROC
;;;83     int yaffs_mark_bad(struct yaffs_dev *dev, int block_no)
000320  e92d4070          PUSH     {r4-r6,lr}
;;;84     {
000324  e1a04000          MOV      r4,r0
000328  e1a05001          MOV      r5,r1
;;;85     	block_no -= dev->block_offset;
00032c  e59400d8          LDR      r0,[r4,#0xd8]
000330  e0455000          SUB      r5,r5,r0
;;;86     	if (dev->param.bad_block_fn)
000334  e5940060          LDR      r0,[r4,#0x60]
000338  e3500000          CMP      r0,#0
00033c  0a000004          BEQ      |L1.852|
;;;87     		return dev->param.bad_block_fn(dev, block_no);
000340  e1a01005          MOV      r1,r5
000344  e5942060          LDR      r2,[r4,#0x60]
000348  e1a00004          MOV      r0,r4
00034c  e12fff32          BLX      r2
                  |L1.848|
;;;88     
;;;89     	return yaffs_tags_compat_mark_bad(dev, block_no);
;;;90     }
000350  e8bd8070          POP      {r4-r6,pc}
                  |L1.852|
000354  e1a01005          MOV      r1,r5                 ;89
000358  e1a00004          MOV      r0,r4                 ;89
00035c  ebfffffe          BL       yaffs_tags_compat_mark_bad
000360  eafffffa          B        |L1.848|
;;;91     
                          ENDP

                  yaffs_query_init_block_state PROC
;;;92     int yaffs_query_init_block_state(struct yaffs_dev *dev,
000364  e92d41f0          PUSH     {r4-r8,lr}
;;;93     				 int block_no,
;;;94     				 enum yaffs_block_state *state,
;;;95     				 u32 *seq_number)
;;;96     {
000368  e1a04000          MOV      r4,r0
00036c  e1a05001          MOV      r5,r1
000370  e1a06002          MOV      r6,r2
000374  e1a07003          MOV      r7,r3
;;;97     	block_no -= dev->block_offset;
000378  e59400d8          LDR      r0,[r4,#0xd8]
00037c  e0455000          SUB      r5,r5,r0
;;;98     	if (dev->param.query_block_fn)
000380  e5940064          LDR      r0,[r4,#0x64]
000384  e3500000          CMP      r0,#0
000388  0a000006          BEQ      |L1.936|
;;;99     		return dev->param.query_block_fn(dev, block_no, state,
00038c  e1a03007          MOV      r3,r7
000390  e1a02006          MOV      r2,r6
000394  e1a01005          MOV      r1,r5
000398  e594c064          LDR      r12,[r4,#0x64]
00039c  e1a00004          MOV      r0,r4
0003a0  e12fff3c          BLX      r12
                  |L1.932|
;;;100    						 seq_number);
;;;101    
;;;102    	return yaffs_tags_compat_query_block(dev, block_no, state, seq_number);
;;;103    }
0003a4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.936|
0003a8  e1a03007          MOV      r3,r7                 ;102
0003ac  e1a02006          MOV      r2,r6                 ;102
0003b0  e1a01005          MOV      r1,r5                 ;102
0003b4  e1a00004          MOV      r0,r4                 ;102
0003b8  ebfffffe          BL       yaffs_tags_compat_query_block
0003bc  eafffff8          B        |L1.932|
;;;104    
                          ENDP

                  yaffs_erase_block PROC
;;;105    int yaffs_erase_block(struct yaffs_dev *dev, int flash_block)
0003c0  e92d4070          PUSH     {r4-r6,lr}
;;;106    {
0003c4  e1a04000          MOV      r4,r0
0003c8  e1a05001          MOV      r5,r1
;;;107    	int result;
;;;108    
;;;109    	flash_block -= dev->block_offset;
0003cc  e59400d8          LDR      r0,[r4,#0xd8]
0003d0  e0455000          SUB      r5,r5,r0
;;;110    	dev->n_erasures++;
0003d4  e5940e18          LDR      r0,[r4,#0xe18]
0003d8  e2800001          ADD      r0,r0,#1
0003dc  e5840e18          STR      r0,[r4,#0xe18]
;;;111    	result = dev->param.erase_fn(dev, flash_block);
0003e0  e1a01005          MOV      r1,r5
0003e4  e594204c          LDR      r2,[r4,#0x4c]
0003e8  e1a00004          MOV      r0,r4
0003ec  e12fff32          BLX      r2
0003f0  e1a06000          MOV      r6,r0
;;;112    	return result;
0003f4  e1a00006          MOV      r0,r6
;;;113    }
0003f8  e8bd8070          POP      {r4-r6,pc}
;;;114    
                          ENDP

                  yaffs_init_nand PROC
;;;115    int yaffs_init_nand(struct yaffs_dev *dev)
0003fc  e92d4010          PUSH     {r4,lr}
;;;116    {
000400  e1a04000          MOV      r4,r0
;;;117    	if (dev->param.initialise_flash_fn)
000404  e5940050          LDR      r0,[r4,#0x50]
000408  e3500000          CMP      r0,#0
00040c  0a000003          BEQ      |L1.1056|
;;;118    		return dev->param.initialise_flash_fn(dev);
000410  e5941050          LDR      r1,[r4,#0x50]
000414  e1a00004          MOV      r0,r4
000418  e12fff31          BLX      r1
                  |L1.1052|
;;;119    	return YAFFS_OK;
;;;120    }
00041c  e8bd8010          POP      {r4,pc}
                  |L1.1056|
000420  e3a00001          MOV      r0,#1                 ;119
000424  eafffffc          B        |L1.1052|
                          ENDP

