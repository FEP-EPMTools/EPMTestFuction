; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\timelib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timelib.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\timelib.crf src\SysHal\timelib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  fepgmtime PROC
;;;47     
;;;48     struct tm* fepgmtime(register const time_t time)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;49     {
000004  e1a08000          MOV      r8,r0
;;;50         //sysprintf("\r\n-- fepgmtime :%d !!! \r\n", time);
;;;51         static struct tm br_time;
;;;52         register struct tm *timep = &br_time;
000008  e59f55e0          LDR      r5,|L1.1520|
;;;53         //time_t time = *timer;
;;;54         register unsigned long dayclock, dayno;
;;;55         int year = EPOCH_YR;
00000c  e59f45e0          LDR      r4,|L1.1524|
;;;56     
;;;57         dayclock = (unsigned long)time % SECS_DAY;
000010  e59f15e0          LDR      r1,|L1.1528|
000014  e1a00008          MOV      r0,r8
000018  ebfffffe          BL       __aeabi_uidivmod
00001c  e1a09001          MOV      r9,r1
;;;58         dayno = (unsigned long)time / SECS_DAY;
000020  e59f15d0          LDR      r1,|L1.1528|
000024  e1a00008          MOV      r0,r8
000028  ebfffffe          BL       __aeabi_uidivmod
00002c  e1a06000          MOV      r6,r0
;;;59     
;;;60         timep->tm_sec = dayclock % 60;
000030  e3a0103c          MOV      r1,#0x3c
000034  e1a00009          MOV      r0,r9
000038  ebfffffe          BL       __aeabi_uidivmod
00003c  e5851000          STR      r1,[r5,#0]
;;;61         timep->tm_min = (dayclock % 3600) / 60;
000040  e3a01ee1          MOV      r1,#0xe10
000044  e1a00009          MOV      r0,r9
000048  ebfffffe          BL       __aeabi_uidivmod
00004c  e1a07001          MOV      r7,r1
000050  e3a0103c          MOV      r1,#0x3c
000054  e1a00007          MOV      r0,r7
000058  ebfffffe          BL       __aeabi_uidivmod
00005c  e5850004          STR      r0,[r5,#4]
;;;62         timep->tm_hour = dayclock / 3600;
000060  e3a01ee1          MOV      r1,#0xe10
000064  e1a00009          MOV      r0,r9
000068  ebfffffe          BL       __aeabi_uidivmod
00006c  e5850008          STR      r0,[r5,#8]
;;;63         timep->tm_wday = (dayno + 4) % 7;       /* day 0 was a thursday */
000070  e3a01007          MOV      r1,#7
000074  e2860004          ADD      r0,r6,#4
000078  ebfffffe          BL       __aeabi_uidivmod
00007c  e5851018          STR      r1,[r5,#0x18]
;;;64         while (dayno >= YEARSIZE(year)) 
000080  ea000014          B        |L1.216|
                  |L1.132|
;;;65         {
;;;66             dayno -= YEARSIZE(year);
000084  e1a07004          MOV      r7,r4
000088  e1a00fc4          ASR      r0,r4,#31
00008c  e0840f20          ADD      r0,r4,r0,LSR #30
000090  e1a00140          ASR      r0,r0,#2
000094  e0540100          SUBS     r0,r4,r0,LSL #2
000098  1a00000b          BNE      |L1.204|
00009c  e3a01064          MOV      r1,#0x64
0000a0  e1a00004          MOV      r0,r4
0000a4  ebfffffe          BL       __aeabi_idivmod
0000a8  e3510000          CMP      r1,#0
0000ac  1a000004          BNE      |L1.196|
0000b0  e3a01e19          MOV      r1,#0x190
0000b4  e1a00004          MOV      r0,r4
0000b8  ebfffffe          BL       __aeabi_idivmod
0000bc  e3510000          CMP      r1,#0
0000c0  1a000001          BNE      |L1.204|
                  |L1.196|
0000c4  e59f0530          LDR      r0,|L1.1532|
0000c8  ea000000          B        |L1.208|
                  |L1.204|
0000cc  e59f052c          LDR      r0,|L1.1536|
                  |L1.208|
0000d0  e0466000          SUB      r6,r6,r0
;;;67             year++;
0000d4  e2844001          ADD      r4,r4,#1
                  |L1.216|
0000d8  e1a00fc4          ASR      r0,r4,#31             ;64
0000dc  e0840f20          ADD      r0,r4,r0,LSR #30      ;64
0000e0  e1a00140          ASR      r0,r0,#2              ;64
0000e4  e0540100          SUBS     r0,r4,r0,LSL #2       ;64
0000e8  1a00000b          BNE      |L1.284|
0000ec  e3a01064          MOV      r1,#0x64              ;64
0000f0  e1a00004          MOV      r0,r4                 ;64
0000f4  ebfffffe          BL       __aeabi_idivmod
0000f8  e3510000          CMP      r1,#0                 ;64
0000fc  1a000004          BNE      |L1.276|
000100  e3a01e19          MOV      r1,#0x190             ;64
000104  e1a00004          MOV      r0,r4                 ;64
000108  ebfffffe          BL       __aeabi_idivmod
00010c  e3510000          CMP      r1,#0                 ;64
000110  1a000001          BNE      |L1.284|
                  |L1.276|
000114  e59f04e0          LDR      r0,|L1.1532|
000118  ea000000          B        |L1.288|
                  |L1.284|
00011c  e59f04dc          LDR      r0,|L1.1536|
                  |L1.288|
000120  e1500006          CMP      r0,r6                 ;64
000124  9affffd6          BLS      |L1.132|
;;;68         }
;;;69         timep->tm_year = year - YEAR0;
000128  e2440b01          SUB      r0,r4,#0x400
00012c  e2400fdb          SUB      r0,r0,#0x36c
000130  e5850014          STR      r0,[r5,#0x14]
;;;70         timep->tm_yday = dayno;
000134  e585601c          STR      r6,[r5,#0x1c]
;;;71         timep->tm_mon = 0;
000138  e3a00000          MOV      r0,#0
00013c  e5850010          STR      r0,[r5,#0x10]
;;;72         while (dayno >= _ytab[LEAPYEAR(year)][timep->tm_mon]) 
000140  ea00001b          B        |L1.436|
                  |L1.324|
;;;73         {
;;;74             dayno -= _ytab[LEAPYEAR(year)][timep->tm_mon];
000144  e1a07004          MOV      r7,r4
000148  e1a00fc4          ASR      r0,r4,#31
00014c  e0840f20          ADD      r0,r4,r0,LSR #30
000150  e1a00140          ASR      r0,r0,#2
000154  e0540100          SUBS     r0,r4,r0,LSL #2
000158  1a00000b          BNE      |L1.396|
00015c  e3a01064          MOV      r1,#0x64
000160  e1a00004          MOV      r0,r4
000164  ebfffffe          BL       __aeabi_idivmod
000168  e3510000          CMP      r1,#0
00016c  1a000004          BNE      |L1.388|
000170  e3a01e19          MOV      r1,#0x190
000174  e1a00004          MOV      r0,r4
000178  ebfffffe          BL       __aeabi_idivmod
00017c  e3510000          CMP      r1,#0
000180  1a000001          BNE      |L1.396|
                  |L1.388|
000184  e3a00001          MOV      r0,#1
000188  ea000000          B        |L1.400|
                  |L1.396|
00018c  e3a00000          MOV      r0,#0
                  |L1.400|
000190  e0800080          ADD      r0,r0,r0,LSL #1
000194  e59f1468          LDR      r1,|L1.1540|
000198  e0810200          ADD      r0,r1,r0,LSL #4
00019c  e5951010          LDR      r1,[r5,#0x10]
0001a0  e7900101          LDR      r0,[r0,r1,LSL #2]
0001a4  e0466000          SUB      r6,r6,r0
;;;75             timep->tm_mon++;
0001a8  e5950010          LDR      r0,[r5,#0x10]
0001ac  e2800001          ADD      r0,r0,#1
0001b0  e5850010          STR      r0,[r5,#0x10]
                  |L1.436|
0001b4  e1a00fc4          ASR      r0,r4,#31             ;72
0001b8  e0840f20          ADD      r0,r4,r0,LSR #30      ;72
0001bc  e1a00140          ASR      r0,r0,#2              ;72
0001c0  e0540100          SUBS     r0,r4,r0,LSL #2       ;72
0001c4  1a00000b          BNE      |L1.504|
0001c8  e3a01064          MOV      r1,#0x64              ;72
0001cc  e1a00004          MOV      r0,r4                 ;72
0001d0  ebfffffe          BL       __aeabi_idivmod
0001d4  e3510000          CMP      r1,#0                 ;72
0001d8  1a000004          BNE      |L1.496|
0001dc  e3a01e19          MOV      r1,#0x190             ;72
0001e0  e1a00004          MOV      r0,r4                 ;72
0001e4  ebfffffe          BL       __aeabi_idivmod
0001e8  e3510000          CMP      r1,#0                 ;72
0001ec  1a000001          BNE      |L1.504|
                  |L1.496|
0001f0  e3a00001          MOV      r0,#1                 ;72
0001f4  ea000000          B        |L1.508|
                  |L1.504|
0001f8  e3a00000          MOV      r0,#0                 ;72
                  |L1.508|
0001fc  e0800080          ADD      r0,r0,r0,LSL #1       ;72
000200  e59f13fc          LDR      r1,|L1.1540|
000204  e0810200          ADD      r0,r1,r0,LSL #4       ;72
000208  e5951010          LDR      r1,[r5,#0x10]         ;72
00020c  e7900101          LDR      r0,[r0,r1,LSL #2]     ;72
000210  e1500006          CMP      r0,r6                 ;72
000214  9affffca          BLS      |L1.324|
;;;76         }
;;;77         timep->tm_mday = dayno + 1;
000218  e2860001          ADD      r0,r6,#1
00021c  e585000c          STR      r0,[r5,#0xc]
;;;78         timep->tm_isdst = 0;
000220  e3a00000          MOV      r0,#0
000224  e5850020          STR      r0,[r5,#0x20]
;;;79     
;;;80         return timep;
000228  e1a00005          MOV      r0,r5
;;;81     }
00022c  e8bd87f0          POP      {r4-r10,pc}
;;;82     
                          ENDP

                  RTC2Time PROC
;;;83     time_t RTC2Time(RTC_TIME_DATA_T* pt)
000230  e92d4070          PUSH     {r4-r6,lr}
;;;84     {
000234  e1a04000          MOV      r4,r0
;;;85         time_t rawtime;
;;;86         timeinfo.tm_year    = pt->u32Year - YEAR0;
000238  e594001c          LDR      r0,[r4,#0x1c]
00023c  e2400b01          SUB      r0,r0,#0x400
000240  e2400fdb          SUB      r0,r0,#0x36c
000244  e59f13bc          LDR      r1,|L1.1544|
000248  e5810014          STR      r0,[r1,#0x14]  ; timeinfo
;;;87         timeinfo.tm_mon     = pt->u32cMonth-1;
00024c  e5940018          LDR      r0,[r4,#0x18]
000250  e2400001          SUB      r0,r0,#1
000254  e5810010          STR      r0,[r1,#0x10]  ; timeinfo
;;;88         timeinfo.tm_mday    = pt->u32cDay;
000258  e5940014          LDR      r0,[r4,#0x14]
00025c  e581000c          STR      r0,[r1,#0xc]  ; timeinfo
;;;89         timeinfo.tm_hour    = pt->u32cHour;
000260  e594000c          LDR      r0,[r4,#0xc]
000264  e5810008          STR      r0,[r1,#8]  ; timeinfo
;;;90         timeinfo.tm_min     = pt->u32cMinute;
000268  e5940008          LDR      r0,[r4,#8]
00026c  e5810004          STR      r0,[r1,#4]  ; timeinfo
;;;91         timeinfo.tm_sec     = pt->u32cSecond;                
000270  e5940004          LDR      r0,[r4,#4]
000274  e5810000          STR      r0,[r1,#0]  ; timeinfo
;;;92         timeinfo.tm_wday    = pt->u32cDayOfWeek;
000278  e5940010          LDR      r0,[r4,#0x10]
00027c  e5810018          STR      r0,[r1,#0x18]  ; timeinfo
;;;93         timeinfo.tm_yday    = 0;
000280  e3a00000          MOV      r0,#0
000284  e581001c          STR      r0,[r1,#0x1c]  ; timeinfo
;;;94         timeinfo.tm_isdst   = 0;
000288  e5810020          STR      r0,[r1,#0x20]  ; timeinfo
;;;95                     
;;;96         rawtime = mktime(&timeinfo);
00028c  e2810000          ADD      r0,r1,#0
000290  ebfffffe          BL       mktime
000294  e1a05000          MOV      r5,r0
;;;97         return rawtime;
000298  e1a00005          MOV      r0,r5
;;;98     }
00029c  e8bd8070          POP      {r4-r6,pc}
;;;99     
                          ENDP

                  Time2RTC PROC
;;;100    RTC_TIME_DATA_T* Time2RTC(time_t rawtime, RTC_TIME_DATA_T* ppt)
0002a0  e92d4070          PUSH     {r4-r6,lr}
;;;101    {
0002a4  e1a05000          MOV      r5,r0
0002a8  e1a04001          MOV      r4,r1
;;;102        //static RTC_TIME_DATA_T pt;
;;;103        //RTC_TIME_DATA_T* ppt = &pt;
;;;104        //sysprintf("\r\n-- Time2RTC :%d !!! \r\n", rawtime);
;;;105        ptimeinfo = fepgmtime(rawtime);
0002ac  e1a00005          MOV      r0,r5
0002b0  ebfffffe          BL       fepgmtime
0002b4  e59f1350          LDR      r1,|L1.1548|
0002b8  e5810000          STR      r0,[r1,#0]  ; ptimeinfo
;;;106        ppt->u32Year = ptimeinfo->tm_year + YEAR0;
0002bc  e2810000          ADD      r0,r1,#0
0002c0  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
0002c4  e5900014          LDR      r0,[r0,#0x14]
0002c8  e2800b01          ADD      r0,r0,#0x400
0002cc  e2800fdb          ADD      r0,r0,#0x36c
0002d0  e584001c          STR      r0,[r4,#0x1c]
;;;107        ppt->u32cMonth = ptimeinfo->tm_mon + 1;
0002d4  e2810000          ADD      r0,r1,#0
0002d8  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
0002dc  e5900010          LDR      r0,[r0,#0x10]
0002e0  e2800001          ADD      r0,r0,#1
0002e4  e5840018          STR      r0,[r4,#0x18]
;;;108        ppt->u32cDay = ptimeinfo->tm_mday;
0002e8  e2810000          ADD      r0,r1,#0
0002ec  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
0002f0  e590000c          LDR      r0,[r0,#0xc]
0002f4  e5840014          STR      r0,[r4,#0x14]
;;;109        ppt->u32cHour = ptimeinfo->tm_hour;
0002f8  e2810000          ADD      r0,r1,#0
0002fc  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
000300  e5900008          LDR      r0,[r0,#8]
000304  e584000c          STR      r0,[r4,#0xc]
;;;110        ppt->u32cMinute = ptimeinfo->tm_min;
000308  e2810000          ADD      r0,r1,#0
00030c  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
000310  e5900004          LDR      r0,[r0,#4]
000314  e5840008          STR      r0,[r4,#8]
;;;111        ppt->u32cSecond = ptimeinfo->tm_sec;                
000318  e2810000          ADD      r0,r1,#0
00031c  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
000320  e5900000          LDR      r0,[r0,#0]
000324  e5840004          STR      r0,[r4,#4]
;;;112        ppt->u32cDayOfWeek = ptimeinfo->tm_wday;   
000328  e2810000          ADD      r0,r1,#0
00032c  e5900000          LDR      r0,[r0,#0]  ; ptimeinfo
000330  e5900018          LDR      r0,[r0,#0x18]
000334  e5840010          STR      r0,[r4,#0x10]
;;;113        return ppt;
000338  e1a00004          MOV      r0,r4
;;;114    }
00033c  e8bd8070          POP      {r4-r6,pc}
;;;115    
                          ENDP

                  RTCAddTime PROC
;;;116    BOOL RTCAddTime(RTC_TIME_DATA_T* pt, time_t addTime)
000340  e92d4070          PUSH     {r4-r6,lr}
;;;117    {
000344  e1a04000          MOV      r4,r0
000348  e1a05001          MOV      r5,r1
;;;118        //RTC_TIME_DATA_T* ppt;
;;;119        time_t rawtime = RTC2Time(pt);
00034c  e1a00004          MOV      r0,r4
000350  ebfffffe          BL       RTC2Time
000354  e1a06000          MOV      r6,r0
;;;120        rawtime = rawtime + addTime;
000358  e0866005          ADD      r6,r6,r5
;;;121        Time2RTC(rawtime, pt);
00035c  e1a01004          MOV      r1,r4
000360  e1a00006          MOV      r0,r6
000364  ebfffffe          BL       Time2RTC
;;;122        //pt->u32Year = ppt->u32Year;
;;;123        //pt->u32cMonth = ppt->u32cMonth;
;;;124        //pt->u32cDay = ppt->u32cDay;
;;;125        //pt->u32cHour = ppt->u32cHour;
;;;126        //pt->u32cMinute = ppt->u32cMinute;
;;;127        //pt->u32cSecond = ppt->u32cSecond;                
;;;128        //pt->u32cDayOfWeek = ppt->u32cDayOfWeek;   
;;;129        return TRUE;
000368  e3a00001          MOV      r0,#1
;;;130    }
00036c  e8bd8070          POP      {r4-r6,pc}
;;;131    
                          ENDP

                  RTCAddTimeEx PROC
;;;132    time_t RTCAddTimeEx(time_t addTime)
000370  e92d4030          PUSH     {r4,r5,lr}
;;;133    {
000374  e24dd034          SUB      sp,sp,#0x34
000378  e1a04000          MOV      r4,r0
;;;134        RTC_TIME_DATA_T pt;
;;;135        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
00037c  e28d1004          ADD      r1,sp,#4
000380  e3a00000          MOV      r0,#0
000384  ebfffffe          BL       RTC_Read
000388  e3500000          CMP      r0,#0
00038c  1a000005          BNE      |L1.936|
;;;136        {
;;;137            time_t rawtime = RTC2Time(&pt);   
000390  e28d0004          ADD      r0,sp,#4
000394  ebfffffe          BL       RTC2Time
000398  e1a05000          MOV      r5,r0
;;;138            return (rawtime + addTime);        
00039c  e0850004          ADD      r0,r5,r4
                  |L1.928|
0003a0  e28dd034          ADD      sp,sp,#0x34
;;;139        }
;;;140          
;;;141        return 0;
;;;142    }
0003a4  e8bd8030          POP      {r4,r5,pc}
                  |L1.936|
0003a8  e1a00000          MOV      r0,r0                 ;139
0003ac  e3a00000          MOV      r0,#0                 ;141
0003b0  eafffffa          B        |L1.928|
;;;143    
                          ENDP

                  SetOSTime PROC
;;;144    BOOL SetOSTime(uint32_t u32Year, uint32_t u32cMonth, uint32_t u32cDay, uint32_t u32cHour, uint32_t u32cMinute, uint32_t u32cSecond, uint32_t u32cDayOfWeek)
0003b4  e92d4ff0          PUSH     {r4-r11,lr}
;;;145    {
0003b8  e24dd07c          SUB      sp,sp,#0x7c
0003bc  e1a04000          MOV      r4,r0
0003c0  e1a05001          MOV      r5,r1
0003c4  e1a06002          MOV      r6,r2
0003c8  e1a07003          MOV      r7,r3
0003cc  e28db0a0          ADD      r11,sp,#0xa0
0003d0  e89b0e00          LDM      r11,{r9-r11}
;;;146        UINT32 reval;
;;;147        RTC_TIME_DATA_T pt;
;;;148        RTC_TIME_DATA_T sInitTime;
;;;149        sInitTime.u32Year = u32Year;
0003d4  e58d4038          STR      r4,[sp,#0x38]
;;;150        sInitTime.u32cMonth = u32cMonth;
0003d8  e58d5034          STR      r5,[sp,#0x34]
;;;151        sInitTime.u32cDay = u32cDay;
0003dc  e58d6030          STR      r6,[sp,#0x30]
;;;152        sInitTime.u32cHour = u32cHour;
0003e0  e58d7028          STR      r7,[sp,#0x28]
;;;153        sInitTime.u32cMinute = u32cMinute;
0003e4  e58d9024          STR      r9,[sp,#0x24]
;;;154        sInitTime.u32cSecond = u32cSecond;
0003e8  e58da020          STR      r10,[sp,#0x20]
;;;155        sInitTime.u32cDayOfWeek = u32cDayOfWeek;
0003ec  e58db02c          STR      r11,[sp,#0x2c]
;;;156        sInitTime.u8cClockDisplay = RTC_CLOCK_24;
0003f0  e3a00001          MOV      r0,#1
0003f4  e5cd001c          STRB     r0,[sp,#0x1c]
;;;157    
;;;158        /* Initialization the RTC timer */
;;;159        reval = RTC_Open(&sInitTime);
0003f8  e28d001c          ADD      r0,sp,#0x1c
0003fc  ebfffffe          BL       RTC_Open
000400  e1a08000          MOV      r8,r0
;;;160        RTC_Close();
000404  ebfffffe          BL       RTC_Close
;;;161        if(reval !=E_RTC_SUCCESS)
000408  e3580000          CMP      r8,#0
00040c  0a000005          BEQ      |L1.1064|
;;;162        {
;;;163            sysprintf("SetOSTime RTC Open Fail!!(reval = %d)\n", reval);
000410  e1a01008          MOV      r1,r8
000414  e28f0f7d          ADR      r0,|L1.1552|
000418  ebfffffe          BL       sysprintf
;;;164            
;;;165            return FALSE;
00041c  e3a00000          MOV      r0,#0
                  |L1.1056|
000420  e28dd07c          ADD      sp,sp,#0x7c
;;;166        }   
;;;167    
;;;168        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
;;;169        {
;;;170    
;;;171            sysprintf("SetOSTime RTC_CURRENT_TIME: [%04d/%02d/%02d %02d:%02d:%02d (%d)  u8cClockDisplay = %d, u8cAmPm =%d]\r\n",
;;;172                                                    pt.u32Year, pt.u32cMonth, pt.u32cDay, 
;;;173                                                    pt.u32cHour, pt.u32cMinute, pt.u32cSecond, pt.u32cDayOfWeek, pt.u8cClockDisplay, pt.u8cAmPm); 
;;;174        }
;;;175        return TRUE;
;;;176    }
000424  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1064|
000428  e28d104c          ADD      r1,sp,#0x4c           ;168
00042c  e3a00000          MOV      r0,#0                 ;168
000430  ebfffffe          BL       RTC_Read
000434  e3500000          CMP      r0,#0                 ;168
000438  1a00000e          BNE      |L1.1144|
00043c  e5dd004d          LDRB     r0,[sp,#0x4d]         ;171
000440  e5dd104c          LDRB     r1,[sp,#0x4c]         ;171
000444  e59d2050          LDR      r2,[sp,#0x50]         ;171
000448  e59d305c          LDR      r3,[sp,#0x5c]         ;171
00044c  e58d0014          STR      r0,[sp,#0x14]         ;171
000450  e58d1010          STR      r1,[sp,#0x10]         ;171
000454  e1cd20f8          STRD     r2,r3,[sp,#8]         ;171
000458  e59d0058          LDR      r0,[sp,#0x58]         ;171
00045c  e59d1054          LDR      r1,[sp,#0x54]         ;171
000460  e1cd00f0          STRD     r0,r1,[sp,#0]         ;171
000464  e59f01cc          LDR      r0,|L1.1592|
000468  e59d1068          LDR      r1,[sp,#0x68]         ;171
00046c  e59d2064          LDR      r2,[sp,#0x64]         ;171
000470  e59d3060          LDR      r3,[sp,#0x60]         ;171
000474  ebfffffe          BL       sysprintf
                  |L1.1144|
000478  e3a00001          MOV      r0,#1                 ;175
00047c  eaffffe7          B        |L1.1056|
;;;177    
                          ENDP

                  SetOSTimeLite PROC
;;;178    
;;;179    BOOL SetOSTimeLite(uint32_t u32Year, uint32_t u32cMonth, uint32_t u32cDay, uint32_t u32cHour, uint32_t u32cMinute, uint32_t u32cSecond)
000480  e92d4ffe          PUSH     {r1-r11,lr}
;;;180    {
000484  e1a04000          MOV      r4,r0
000488  e1a05001          MOV      r5,r1
00048c  e1a06002          MOV      r6,r2
000490  e1a07003          MOV      r7,r3
000494  e1cd83d0          LDRD     r8,r9,[sp,#0x30]
;;;181        uint32_t tempDayOfWeek = inp32(REG_RTC_WEEKDAY);
000498  e59f019c          LDR      r0,|L1.1596|
00049c  e590a018          LDR      r10,[r0,#0x18]
;;;182        //terninalPrintf("RTC:%d/%d/%d/ %d:%d:%d  Weekday = %d\r\n",u32Year, u32cMonth,u32cDay,u32cHour,u32cMinute,u32cSecond,tempDayOfWeek);
;;;183       return SetOSTime(u32Year,u32cMonth,u32cDay,u32cHour,u32cMinute,u32cSecond,tempDayOfWeek);
0004a0  e1a03007          MOV      r3,r7
0004a4  e1a02006          MOV      r2,r6
0004a8  e1a01005          MOV      r1,r5
0004ac  e1a00004          MOV      r0,r4
0004b0  e88d0700          STM      sp,{r8-r10}
0004b4  ebfffffe          BL       SetOSTime
;;;184    }
0004b8  e8bd8ffe          POP      {r1-r11,pc}
;;;185    
                          ENDP

                  GetCurrentUTCTime PROC
;;;186    time_t GetCurrentUTCTime(void)
0004bc  e52de004          PUSH     {lr}
;;;187    {
0004c0  e24dd034          SUB      sp,sp,#0x34
;;;188        RTC_TIME_DATA_T pt;
;;;189        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
0004c4  e28d1004          ADD      r1,sp,#4
0004c8  e3a00000          MOV      r0,#0
0004cc  ebfffffe          BL       RTC_Read
0004d0  e3500000          CMP      r0,#0
0004d4  1a000003          BNE      |L1.1256|
;;;190        {
;;;191            return RTC2Time(&pt);
0004d8  e28d0004          ADD      r0,sp,#4
0004dc  ebfffffe          BL       RTC2Time
                  |L1.1248|
0004e0  e28dd034          ADD      sp,sp,#0x34
;;;192        }
;;;193        return 0;
;;;194    }
0004e4  e49df004          POP      {pc}
                  |L1.1256|
0004e8  e3a00000          MOV      r0,#0                 ;193
0004ec  eafffffb          B        |L1.1248|
;;;195    
                          ENDP

                  UTCTimeToString PROC
;;;196    BOOL UTCTimeToString(time_t time, char* str)
0004f0  e92d4030          PUSH     {r4,r5,lr}
;;;197    {
0004f4  e24dd03c          SUB      sp,sp,#0x3c
0004f8  e1a05000          MOV      r5,r0
0004fc  e1a04001          MOV      r4,r1
;;;198        RTC_TIME_DATA_T pt;
;;;199        //sysprintf("\r\nUTCTimeToString[%d]\n", time);
;;;200        Time2RTC(time, &pt);
000500  e28d100c          ADD      r1,sp,#0xc
000504  e1a00005          MOV      r0,r5
000508  ebfffffe          BL       Time2RTC
;;;201        sprintf(str,"%04d%02d%02d%02d%02d", pt.u32Year, pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute); 
00050c  e59d0014          LDR      r0,[sp,#0x14]
000510  e59d2018          LDR      r2,[sp,#0x18]
000514  e59d1020          LDR      r1,[sp,#0x20]
000518  e58d0008          STR      r0,[sp,#8]
00051c  e88d0006          STM      sp,{r1,r2}
000520  e28f1f46          ADR      r1,|L1.1600|
000524  e1a00004          MOV      r0,r4
000528  e59d2028          LDR      r2,[sp,#0x28]
00052c  e59d3024          LDR      r3,[sp,#0x24]
000530  ebfffffe          BL       __2sprintf
;;;202        //sysprintf("\r\nUTCTimeToString[%s]\n", str);
;;;203        return TRUE;
000534  e3a00001          MOV      r0,#1
000538  e28dd03c          ADD      sp,sp,#0x3c
;;;204    }
00053c  e8bd8030          POP      {r4,r5,pc}
;;;205    
                          ENDP

                  UTCTimeToStringEx PROC
;;;206    BOOL UTCTimeToStringEx(time_t time, char* str)
000540  e92d4030          PUSH     {r4,r5,lr}
;;;207    {
000544  e24dd03c          SUB      sp,sp,#0x3c
000548  e1a05000          MOV      r5,r0
00054c  e1a04001          MOV      r4,r1
;;;208        RTC_TIME_DATA_T pt;
;;;209        //sysprintf("\r\nUTCTimeToString[%d]\n", time);
;;;210        //terninalPrintf("GetCurrentUTCTime = %d\r\n",time);
;;;211        Time2RTC(time, &pt);
000550  e28d100c          ADD      r1,sp,#0xc
000554  e1a00005          MOV      r0,r5
000558  ebfffffe          BL       Time2RTC
;;;212        //sprintf(str,"%02d%02d%02d%02d%02d%02d", pt.u32Year-2000, pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute, pt.u32cSecond); 
;;;213        sprintf(str,"%02d%02d%02d%02d%02d",pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute, pt.u32cSecond); 
00055c  e59d0010          LDR      r0,[sp,#0x10]
000560  e59d2014          LDR      r2,[sp,#0x14]
000564  e59d1018          LDR      r1,[sp,#0x18]
000568  e58d0008          STR      r0,[sp,#8]
00056c  e88d0006          STM      sp,{r1,r2}
000570  e28f10e0          ADR      r1,|L1.1624|
000574  e1a00004          MOV      r0,r4
000578  e59d2024          LDR      r2,[sp,#0x24]
00057c  e59d3020          LDR      r3,[sp,#0x20]
000580  ebfffffe          BL       __2sprintf
;;;214        //sysprintf("\r\nUTCTimeToString[%s]\n", str);
;;;215        return TRUE;
000584  e3a00001          MOV      r0,#1
000588  e28dd03c          ADD      sp,sp,#0x3c
;;;216    }
00058c  e8bd8030          POP      {r4,r5,pc}
;;;217    
                          ENDP

                  PrintRTC PROC
;;;218    
;;;219    void PrintRTC(void)
000590  e52de004          PUSH     {lr}
;;;220    {
000594  e24dd04c          SUB      sp,sp,#0x4c
;;;221        RTC_TIME_DATA_T pt;
;;;222        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
000598  e28d101c          ADD      r1,sp,#0x1c
00059c  e3a00000          MOV      r0,#0
0005a0  ebfffffe          BL       RTC_Read
0005a4  e3500000          CMP      r0,#0
0005a8  1a00000e          BNE      |L1.1512|
;;;223        {
;;;224    
;;;225            sysprintf("RTC_CURRENT_TIME: [%04d/%02d/%02d %02d:%02d:%02d (%d)  u8cClockDisplay = %d, u8cAmPm =%d]\r\n",
0005ac  e5dd001d          LDRB     r0,[sp,#0x1d]
0005b0  e5dd101c          LDRB     r1,[sp,#0x1c]
0005b4  e59d2020          LDR      r2,[sp,#0x20]
0005b8  e59d302c          LDR      r3,[sp,#0x2c]
0005bc  e58d0014          STR      r0,[sp,#0x14]
0005c0  e58d1010          STR      r1,[sp,#0x10]
0005c4  e1cd20f8          STRD     r2,r3,[sp,#8]
0005c8  e59d0028          LDR      r0,[sp,#0x28]
0005cc  e59d1024          LDR      r1,[sp,#0x24]
0005d0  e1cd00f0          STRD     r0,r1,[sp,#0]
0005d4  e59f0094          LDR      r0,|L1.1648|
0005d8  e59d1038          LDR      r1,[sp,#0x38]
0005dc  e59d2034          LDR      r2,[sp,#0x34]
0005e0  e59d3030          LDR      r3,[sp,#0x30]
0005e4  ebfffffe          BL       sysprintf
                  |L1.1512|
;;;226                                                                pt.u32Year, pt.u32cMonth, pt.u32cDay, 
;;;227                                                                pt.u32cHour, pt.u32cMinute, pt.u32cSecond, pt.u32cDayOfWeek, pt.u8cClockDisplay, pt.u8cAmPm); 
;;;228        }
;;;229    }
0005e8  e28dd04c          ADD      sp,sp,#0x4c
0005ec  e49df004          POP      {pc}
                  |L1.1520|
                          DCD      br_time
                  |L1.1524|
                          DCD      0x000007b2
                  |L1.1528|
                          DCD      0x00015180
                  |L1.1532|
                          DCD      0x0000016e
                  |L1.1536|
                          DCD      0x0000016d
                  |L1.1540|
                          DCD      _ytab
                  |L1.1544|
                          DCD      timeinfo
                  |L1.1548|
                          DCD      ptimeinfo
                  |L1.1552|
000610  5365744f          DCB      "SetOSTime RTC Open Fail!!(reval = %d)\n",0
000614  5354696d
000618  65205254
00061c  43204f70
000620  656e2046
000624  61696c21
000628  21287265
00062c  76616c20
000630  3d202564
000634  290a00  
000637  00                DCB      0
                  |L1.1592|
                          DCD      ||.constdata||+0x60
                  |L1.1596|
                          DCD      0xb8004000
                  |L1.1600|
000640  25303464          DCB      "%04d%02d%02d%02d%02d",0
000644  25303264
000648  25303264
00064c  25303264
000650  25303264
000654  00      
000655  00                DCB      0
000656  00                DCB      0
000657  00                DCB      0
                  |L1.1624|
000658  25303264          DCB      "%02d%02d%02d%02d%02d",0
00065c  25303264
000660  25303264
000664  25303264
000668  25303264
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
                          DCD      ||.constdata||+0xc8
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  br_time
                          %        44
                  timeinfo
                          %        44

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ytab
                          DCD      0x0000001f
                          DCD      0x0000001c
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001f
                          DCD      0x0000001d
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
000060  5365744f          DCB      0x53,0x65,0x74,0x4f
000064  5354696d          DCB      0x53,0x54,0x69,0x6d
000068  65205254          DCB      0x65,0x20,0x52,0x54
00006c  435f4355          DCB      0x43,0x5f,0x43,0x55
000070  5252454e          DCB      0x52,0x52,0x45,0x4e
000074  545f5449          DCB      0x54,0x5f,0x54,0x49
000078  4d453a20          DCB      0x4d,0x45,0x3a,0x20
00007c  5b253034          DCB      0x5b,0x25,0x30,0x34
000080  642f2530          DCB      0x64,0x2f,0x25,0x30
000084  32642f25          DCB      0x32,0x64,0x2f,0x25
000088  30326420          DCB      0x30,0x32,0x64,0x20
00008c  25303264          DCB      0x25,0x30,0x32,0x64
000090  3a253032          DCB      0x3a,0x25,0x30,0x32
000094  643a2530          DCB      0x64,0x3a,0x25,0x30
000098  32642028          DCB      0x32,0x64,0x20,0x28
00009c  25642920          DCB      0x25,0x64,0x29,0x20
0000a0  20753863          DCB      0x20,0x75,0x38,0x63
0000a4  436c6f63          DCB      0x43,0x6c,0x6f,0x63
0000a8  6b446973          DCB      0x6b,0x44,0x69,0x73
0000ac  706c6179          DCB      0x70,0x6c,0x61,0x79
0000b0  203d2025          DCB      0x20,0x3d,0x20,0x25
0000b4  642c2075          DCB      0x64,0x2c,0x20,0x75
0000b8  3863416d          DCB      0x38,0x63,0x41,0x6d
0000bc  506d203d          DCB      0x50,0x6d,0x20,0x3d
0000c0  25645d0d          DCB      0x25,0x64,0x5d,0x0d
0000c4  0a000000          DCB      0x0a,0x00,0x00,0x00
0000c8  5254435f          DCB      0x52,0x54,0x43,0x5f
0000cc  43555252          DCB      0x43,0x55,0x52,0x52
0000d0  454e545f          DCB      0x45,0x4e,0x54,0x5f
0000d4  54494d45          DCB      0x54,0x49,0x4d,0x45
0000d8  3a205b25          DCB      0x3a,0x20,0x5b,0x25
0000dc  3034642f          DCB      0x30,0x34,0x64,0x2f
0000e0  25303264          DCB      0x25,0x30,0x32,0x64
0000e4  2f253032          DCB      0x2f,0x25,0x30,0x32
0000e8  64202530          DCB      0x64,0x20,0x25,0x30
0000ec  32643a25          DCB      0x32,0x64,0x3a,0x25
0000f0  3032643a          DCB      0x30,0x32,0x64,0x3a
0000f4  25303264          DCB      0x25,0x30,0x32,0x64
0000f8  20282564          DCB      0x20,0x28,0x25,0x64
0000fc  29202075          DCB      0x29,0x20,0x20,0x75
000100  3863436c          DCB      0x38,0x63,0x43,0x6c
000104  6f636b44          DCB      0x6f,0x63,0x6b,0x44
000108  6973706c          DCB      0x69,0x73,0x70,0x6c
00010c  6179203d          DCB      0x61,0x79,0x20,0x3d
000110  2025642c          DCB      0x20,0x25,0x64,0x2c
000114  20753863          DCB      0x20,0x75,0x38,0x63
000118  416d506d          DCB      0x41,0x6d,0x50,0x6d
00011c  203d2564          DCB      0x20,0x3d,0x25,0x64
000120  5d0d0a00          DCB      0x5d,0x0d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ptimeinfo
                          DCD      0x00000000
