; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_checkptrw.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_checkptrw.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_checkptrw.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_checkptrw.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  yaffs_get_block_info PROC
;;;23     /* Function to manipulate block info */
;;;24     static __inline struct yaffs_block_info *yaffs_get_block_info(struct yaffs_dev
000000  e92d4070          PUSH     {r4-r6,lr}
;;;25     							      *dev, int blk)
;;;26     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;27     	if (blk < dev->internal_start_block || blk > dev->internal_end_block) {
00000c  e59400d0          LDR      r0,[r4,#0xd0]
000010  e1500005          CMP      r0,r5
000014  ca000002          BGT      |L1.36|
000018  e59400d4          LDR      r0,[r4,#0xd4]
00001c  e1500005          CMP      r0,r5
000020  aa00000c          BGE      |L1.88|
                  |L1.36|
;;;28     		yaffs_trace(YAFFS_TRACE_ERROR,
000024  e59f0160          LDR      r0,|L1.396|
000028  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
00002c  e3100101          TST      r0,#0x40000000
000030  0a000002          BEQ      |L1.64|
000034  e1a01005          MOV      r1,r5
000038  e28f0e15          ADR      r0,|L1.400|
00003c  ebfffffe          BL       sysprintf
                  |L1.64|
;;;29     			"**>> yaffs: get_block_info block %d is not valid",
;;;30     			blk);
;;;31     		BUG();
000040  e1a00000          MOV      r0,r0
000044  e3a0201f          MOV      r2,#0x1f
000048  e28f1f5f          ADR      r1,|L1.460|
00004c  e28f0f6d          ADR      r0,|L1.520|
000050  ebfffffe          BL       sysprintf
000054  e1a00000          MOV      r0,r0
                  |L1.88|
;;;32     	}
;;;33     	return &dev->block_info[blk - dev->internal_start_block];
000058  e59410d0          LDR      r1,[r4,#0xd0]
00005c  e0451001          SUB      r1,r5,r1
000060  e5940118          LDR      r0,[r4,#0x118]
000064  e0800181          ADD      r0,r0,r1,LSL #3
;;;34     }
000068  e8bd8070          POP      {r4-r6,pc}
;;;35     
                          ENDP

                  yaffs2_checkpt_space_ok PROC
;;;17     
;;;18     static int yaffs2_checkpt_space_ok(struct yaffs_dev *dev)
00006c  e92d4070          PUSH     {r4-r6,lr}
;;;19     {
000070  e1a04000          MOV      r4,r0
;;;20     	int blocks_avail = dev->n_erased_blocks - dev->param.n_reserved_blocks;
000074  e5940128          LDR      r0,[r4,#0x128]
000078  e594101c          LDR      r1,[r4,#0x1c]
00007c  e0405001          SUB      r5,r0,r1
;;;21     
;;;22     	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000080  e59f0104          LDR      r0,|L1.396|
000084  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000088  e3100902          TST      r0,#0x8000
00008c  0a000002          BEQ      |L1.156|
000090  e1a01005          MOV      r1,r5
000094  e28f0f61          ADR      r0,|L1.544|
000098  ebfffffe          BL       sysprintf
                  |L1.156|
;;;23     		"checkpt blocks_avail = %d", blocks_avail);
;;;24     
;;;25     	return (blocks_avail <= 0) ? 0 : 1;
00009c  e3550000          CMP      r5,#0
0000a0  da000001          BLE      |L1.172|
0000a4  e3a00001          MOV      r0,#1
                  |L1.168|
;;;26     }
0000a8  e8bd8070          POP      {r4-r6,pc}
                  |L1.172|
0000ac  e3a00000          MOV      r0,#0                 ;25
0000b0  eafffffc          B        |L1.168|
;;;27     
                          ENDP

                  yaffs_checkpt_erase PROC
;;;28     static int yaffs_checkpt_erase(struct yaffs_dev *dev)
0000b4  e92d4070          PUSH     {r4-r6,lr}
;;;29     {
0000b8  e1a04000          MOV      r4,r0
;;;30     	int i;
;;;31     
;;;32     	if (!dev->param.erase_fn)
0000bc  e594004c          LDR      r0,[r4,#0x4c]
0000c0  e3500000          CMP      r0,#0
0000c4  1a000001          BNE      |L1.208|
;;;33     		return 0;
0000c8  e3a00000          MOV      r0,#0
                  |L1.204|
;;;34     	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
;;;35     		"checking blocks %d to %d",
;;;36     		dev->internal_start_block, dev->internal_end_block);
;;;37     
;;;38     	for (i = dev->internal_start_block; i <= dev->internal_end_block; i++) {
;;;39     		struct yaffs_block_info *bi = yaffs_get_block_info(dev, i);
;;;40     		if (bi->block_state == YAFFS_BLOCK_STATE_CHECKPOINT) {
;;;41     			yaffs_trace(YAFFS_TRACE_CHECKPOINT,
;;;42     			"erasing checkpt block %d", i);
;;;43     
;;;44     			dev->n_erasures++;
;;;45     
;;;46     			if (dev->param.
;;;47     			    erase_fn(dev,
;;;48     				     i - dev->block_offset /* realign */)) {
;;;49     				bi->block_state = YAFFS_BLOCK_STATE_EMPTY;
;;;50     				dev->n_erased_blocks++;
;;;51     				dev->n_free_chunks +=
;;;52     				    dev->param.chunks_per_block;
;;;53     			} else {
;;;54     				dev->param.bad_block_fn(dev, i);
;;;55     				bi->block_state = YAFFS_BLOCK_STATE_DEAD;
;;;56     			}
;;;57     		}
;;;58     	}
;;;59     
;;;60     	dev->blocks_in_checkpt = 0;
;;;61     
;;;62     	return 1;
;;;63     }
0000cc  e8bd8070          POP      {r4-r6,pc}
                  |L1.208|
0000d0  e59f00b4          LDR      r0,|L1.396|
0000d4  e1d000b0          LDRH     r0,[r0,#0]            ;34  ; yaffs_trace_mask
0000d8  e3100902          TST      r0,#0x8000            ;34
0000dc  0a000003          BEQ      |L1.240|
0000e0  e28f0f57          ADR      r0,|L1.580|
0000e4  e59410d0          LDR      r1,[r4,#0xd0]         ;34
0000e8  e59420d4          LDR      r2,[r4,#0xd4]         ;34
0000ec  ebfffffe          BL       sysprintf
                  |L1.240|
0000f0  e59450d0          LDR      r5,[r4,#0xd0]         ;38
0000f4  ea00006d          B        |L1.688|
                  |L1.248|
0000f8  e1a01005          MOV      r1,r5                 ;39
0000fc  e1a00004          MOV      r0,r4                 ;39
000100  ebfffffe          BL       yaffs_get_block_info
000104  e1a06000          MOV      r6,r0                 ;39
000108  e5960000          LDR      r0,[r6,#0]            ;40
00010c  e200060f          AND      r0,r0,#0xf00000       ;40
000110  e3500607          CMP      r0,#0x700000          ;40
000114  1a000064          BNE      |L1.684|
000118  e59f006c          LDR      r0,|L1.396|
00011c  e1d000b0          LDRH     r0,[r0,#0]            ;41  ; yaffs_trace_mask
000120  e3100902          TST      r0,#0x8000            ;41
000124  0a000002          BEQ      |L1.308|
000128  e1a01005          MOV      r1,r5                 ;41
00012c  e28f0f4d          ADR      r0,|L1.616|
000130  ebfffffe          BL       sysprintf
                  |L1.308|
000134  e5940e18          LDR      r0,[r4,#0xe18]        ;44
000138  e2800001          ADD      r0,r0,#1              ;44
00013c  e5840e18          STR      r0,[r4,#0xe18]        ;44
000140  e59400d8          LDR      r0,[r4,#0xd8]         ;46
000144  e0451000          SUB      r1,r5,r0              ;46
000148  e594204c          LDR      r2,[r4,#0x4c]         ;46
00014c  e1a00004          MOV      r0,r4                 ;46
000150  e12fff32          BLX      r2                    ;46
000154  e3500000          CMP      r0,#0                 ;46
000158  0a00004b          BEQ      |L1.652|
00015c  e5960000          LDR      r0,[r6,#0]            ;49
000160  e3c0060f          BIC      r0,r0,#0xf00000       ;49
000164  e3800603          ORR      r0,r0,#0x300000       ;49
000168  e5860000          STR      r0,[r6,#0]            ;49
00016c  e5940128          LDR      r0,[r4,#0x128]        ;50
000170  e2800001          ADD      r0,r0,#1              ;50
000174  e5840128          STR      r0,[r4,#0x128]        ;50
000178  e5940d4c          LDR      r0,[r4,#0xd4c]        ;51
00017c  e594100c          LDR      r1,[r4,#0xc]          ;51
000180  e0800001          ADD      r0,r0,r1              ;51
000184  e5840d4c          STR      r0,[r4,#0xd4c]        ;51
000188  ea000047          B        |L1.684|
                  |L1.396|
                          DCD      yaffs_trace_mask
                  |L1.400|
000190  79616666          DCB      "yaffs: **>> yaffs: get_block_info block %d is not valid"
000194  733a202a
000198  2a3e3e20
00019c  79616666
0001a0  733a2067
0001a4  65745f62
0001a8  6c6f636b
0001ac  5f696e66
0001b0  6f20626c
0001b4  6f636b20
0001b8  25642069
0001bc  73206e6f
0001c0  74207661
0001c4  6c6964  
0001c7  0a00              DCB      "\n",0
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L1.460|
0001cc  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_get"
0001d0  2e5c636f
0001d4  6d6d6f6e
0001d8  5c737263
0001dc  5c425350
0001e0  5c546869
0001e4  72645061
0001e8  7274795c
0001ec  79616666
0001f0  73325c79
0001f4  61666673
0001f8  5f676574
0001fc  626c6f63          DCB      "blockinfo.h",0
000200  6b696e66
000204  6f2e6800
                  |L1.520|
000208  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
00020c  6f742042
000210  55472061
000214  74202573
000218  3a256421
00021c  0a00    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L1.544|
000220  79616666          DCB      "yaffs: checkpt blocks_avail = %d\n",0
000224  733a2063
000228  6865636b
00022c  70742062
000230  6c6f636b
000234  735f6176
000238  61696c20
00023c  3d202564
000240  0a00    
000242  00                DCB      0
000243  00                DCB      0
                  |L1.580|
000244  79616666          DCB      "yaffs: checking blocks %d to %d\n",0
000248  733a2063
00024c  6865636b
000250  696e6720
000254  626c6f63
000258  6b732025
00025c  6420746f
000260  2025640a
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L1.616|
000268  79616666          DCB      "yaffs: erasing checkpt block %d\n",0
00026c  733a2065
000270  72617369
000274  6e672063
000278  6865636b
00027c  70742062
000280  6c6f636b
000284  2025640a
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
                  |L1.652|
00028c  e1a01005          MOV      r1,r5                 ;54
000290  e5942060          LDR      r2,[r4,#0x60]         ;54
000294  e1a00004          MOV      r0,r4                 ;54
000298  e12fff32          BLX      r2                    ;54
00029c  e5960000          LDR      r0,[r6,#0]            ;55
0002a0  e3c0060f          BIC      r0,r0,#0xf00000       ;55
0002a4  e3800609          ORR      r0,r0,#0x900000       ;55
0002a8  e5860000          STR      r0,[r6,#0]            ;55
                  |L1.684|
0002ac  e2855001          ADD      r5,r5,#1              ;38
                  |L1.688|
0002b0  e59400d4          LDR      r0,[r4,#0xd4]         ;38
0002b4  e1500005          CMP      r0,r5                 ;38
0002b8  aaffff8e          BGE      |L1.248|
0002bc  e3a00000          MOV      r0,#0                 ;60
0002c0  e58400f4          STR      r0,[r4,#0xf4]         ;60
0002c4  e3a00001          MOV      r0,#1                 ;62
0002c8  eaffff7f          B        |L1.204|
;;;64     
                          ENDP

                  yaffs2_checkpt_find_erased_block PROC
;;;65     static void yaffs2_checkpt_find_erased_block(struct yaffs_dev *dev)
0002cc  e92d40f8          PUSH     {r3-r7,lr}
;;;66     {
0002d0  e1a04000          MOV      r4,r0
;;;67     	int i;
;;;68     	int blocks_avail = dev->n_erased_blocks - dev->param.n_reserved_blocks;
0002d4  e5940128          LDR      r0,[r4,#0x128]
0002d8  e594101c          LDR      r1,[r4,#0x1c]
0002dc  e0406001          SUB      r6,r0,r1
;;;69     
;;;70     	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0002e0  e51f015c          LDR      r0,|L1.396|
0002e4  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0002e8  e3100902          TST      r0,#0x8000
0002ec  0a000006          BEQ      |L1.780|
0002f0  e5940100          LDR      r0,[r4,#0x100]
0002f4  e58d0000          STR      r0,[sp,#0]
0002f8  e1a03006          MOV      r3,r6
0002fc  e59f0348          LDR      r0,|L1.1612|
000300  e5941128          LDR      r1,[r4,#0x128]
000304  e594201c          LDR      r2,[r4,#0x1c]
000308  ebfffffe          BL       sysprintf
                  |L1.780|
;;;71     		"allocating checkpt block: erased %d reserved %d avail %d next %d ",
;;;72     		dev->n_erased_blocks, dev->param.n_reserved_blocks,
;;;73     		blocks_avail, dev->checkpt_next_block);
;;;74     
;;;75     	if (dev->checkpt_next_block >= 0 &&
00030c  e5940100          LDR      r0,[r4,#0x100]
000310  e3500000          CMP      r0,#0
000314  ba00001e          BLT      |L1.916|
;;;76     	    dev->checkpt_next_block <= dev->internal_end_block &&
000318  e5940100          LDR      r0,[r4,#0x100]
00031c  e59410d4          LDR      r1,[r4,#0xd4]
000320  e1500001          CMP      r0,r1
000324  ca00001a          BGT      |L1.916|
;;;77     	    blocks_avail > 0) {
000328  e3560000          CMP      r6,#0
00032c  da000018          BLE      |L1.916|
;;;78     
;;;79     		for (i = dev->checkpt_next_block; i <= dev->internal_end_block;
000330  e5945100          LDR      r5,[r4,#0x100]
000334  ea000013          B        |L1.904|
                  |L1.824|
;;;80     		     i++) {
;;;81     			struct yaffs_block_info *bi =
000338  e1a01005          MOV      r1,r5
00033c  e1a00004          MOV      r0,r4
000340  ebfffffe          BL       yaffs_get_block_info
000344  e1a07000          MOV      r7,r0
;;;82     			    yaffs_get_block_info(dev, i);
;;;83     			if (bi->block_state == YAFFS_BLOCK_STATE_EMPTY) {
000348  e5970000          LDR      r0,[r7,#0]
00034c  e200060f          AND      r0,r0,#0xf00000
000350  e3500603          CMP      r0,#0x300000
000354  1a00000a          BNE      |L1.900|
;;;84     				dev->checkpt_next_block = i + 1;
000358  e2850001          ADD      r0,r5,#1
00035c  e5840100          STR      r0,[r4,#0x100]
;;;85     				dev->checkpt_cur_block = i;
000360  e58450fc          STR      r5,[r4,#0xfc]
;;;86     				yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000364  e51f01e0          LDR      r0,|L1.396|
000368  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
00036c  e3100902          TST      r0,#0x8000
000370  0a000002          BEQ      |L1.896|
000374  e1a01005          MOV      r1,r5
000378  e28f0e2d          ADR      r0,|L1.1616|
00037c  ebfffffe          BL       sysprintf
                  |L1.896|
;;;87     					"allocating checkpt block %d", i);
;;;88     				return;
;;;89     			}
;;;90     		}
;;;91     	}
;;;92     	yaffs_trace(YAFFS_TRACE_CHECKPOINT, "out of checkpt blocks");
;;;93     
;;;94     	dev->checkpt_next_block = -1;
;;;95     	dev->checkpt_cur_block = -1;
;;;96     }
000380  e8bd80f8          POP      {r3-r7,pc}
                  |L1.900|
000384  e2855001          ADD      r5,r5,#1              ;80
                  |L1.904|
000388  e59400d4          LDR      r0,[r4,#0xd4]         ;79
00038c  e1500005          CMP      r0,r5                 ;79
000390  aaffffe8          BGE      |L1.824|
                  |L1.916|
000394  e51f0210          LDR      r0,|L1.396|
000398  e1d000b0          LDRH     r0,[r0,#0]            ;92  ; yaffs_trace_mask
00039c  e3100902          TST      r0,#0x8000            ;92
0003a0  0a000001          BEQ      |L1.940|
0003a4  e28f0fb2          ADR      r0,|L1.1652|
0003a8  ebfffffe          BL       sysprintf
                  |L1.940|
0003ac  e3e00000          MVN      r0,#0                 ;94
0003b0  e5840100          STR      r0,[r4,#0x100]        ;94
0003b4  e58400fc          STR      r0,[r4,#0xfc]         ;95
0003b8  e1a00000          MOV      r0,r0
0003bc  eaffffef          B        |L1.896|
;;;97     
                          ENDP

                  yaffs2_checkpt_find_block PROC
;;;98     static void yaffs2_checkpt_find_block(struct yaffs_dev *dev)
0003c0  e92d40f0          PUSH     {r4-r7,lr}
;;;99     {
0003c4  e24dd054          SUB      sp,sp,#0x54
0003c8  e1a04000          MOV      r4,r0
;;;100    	int i;
;;;101    	struct yaffs_ext_tags tags;
;;;102    
;;;103    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0003cc  e51f0248          LDR      r0,|L1.396|
0003d0  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0003d4  e3100902          TST      r0,#0x8000
0003d8  0a000003          BEQ      |L1.1004|
0003dc  e28f0e2b          ADR      r0,|L1.1684|
0003e0  e59410f4          LDR      r1,[r4,#0xf4]
0003e4  e5942100          LDR      r2,[r4,#0x100]
0003e8  ebfffffe          BL       sysprintf
                  |L1.1004|
;;;104    		"find next checkpt block: start:  blocks %d next %d",
;;;105    		dev->blocks_in_checkpt, dev->checkpt_next_block);
;;;106    
;;;107    	if (dev->blocks_in_checkpt < dev->checkpt_max_blocks)
0003ec  e59400f4          LDR      r0,[r4,#0xf4]
0003f0  e5941108          LDR      r1,[r4,#0x108]
0003f4  e1500001          CMP      r0,r1
0003f8  aa00002f          BGE      |L1.1212|
;;;108    		for (i = dev->checkpt_next_block; i <= dev->internal_end_block;
0003fc  e5945100          LDR      r5,[r4,#0x100]
000400  ea00002a          B        |L1.1200|
                  |L1.1028|
;;;109    		     i++) {
;;;110    			int chunk = i * dev->param.chunks_per_block;
000404  e594000c          LDR      r0,[r4,#0xc]
000408  e0060590          MUL      r6,r0,r5
;;;111    			int realigned_chunk = chunk - dev->chunk_offset;
00040c  e59400dc          LDR      r0,[r4,#0xdc]
000410  e0467000          SUB      r7,r6,r0
;;;112    
;;;113    			dev->param.read_chunk_tags_fn(dev, realigned_chunk,
000414  e28d3008          ADD      r3,sp,#8
000418  e3a02000          MOV      r2,#0
00041c  e1a01007          MOV      r1,r7
000420  e594c05c          LDR      r12,[r4,#0x5c]
000424  e1a00004          MOV      r0,r4
000428  e12fff3c          BLX      r12
;;;114    						      NULL, &tags);
;;;115    			yaffs_trace(YAFFS_TRACE_CHECKPOINT,
00042c  e51f02a8          LDR      r0,|L1.396|
000430  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000434  e3100902          TST      r0,#0x8000
000438  0a000006          BEQ      |L1.1112|
00043c  e5dd0018          LDRB     r0,[sp,#0x18]
000440  e58d0000          STR      r0,[sp,#0]
000444  e1a01005          MOV      r1,r5
000448  e59f0280          LDR      r0,|L1.1744|
00044c  e59d200c          LDR      r2,[sp,#0xc]
000450  e59d3028          LDR      r3,[sp,#0x28]
000454  ebfffffe          BL       sysprintf
                  |L1.1112|
;;;116    				"find next checkpt block: search: block %d oid %d seq %d eccr %d",
;;;117    				i, tags.obj_id, tags.seq_number,
;;;118    				tags.ecc_result);
;;;119    
;;;120    			if (tags.seq_number == YAFFS_SEQUENCE_CHECKPOINT_DATA) {
000458  e59d0028          LDR      r0,[sp,#0x28]
00045c  e3500021          CMP      r0,#0x21
000460  1a000011          BNE      |L1.1196|
;;;121    				/* Right kind of block */
;;;122    				dev->checkpt_next_block = tags.obj_id;
000464  e59d000c          LDR      r0,[sp,#0xc]
000468  e5840100          STR      r0,[r4,#0x100]
;;;123    				dev->checkpt_cur_block = i;
00046c  e58450fc          STR      r5,[r4,#0xfc]
;;;124    				dev->checkpt_block_list[dev->
000470  e5940104          LDR      r0,[r4,#0x104]
000474  e59410f4          LDR      r1,[r4,#0xf4]
000478  e7805101          STR      r5,[r0,r1,LSL #2]
;;;125    							blocks_in_checkpt] = i;
;;;126    				dev->blocks_in_checkpt++;
00047c  e59400f4          LDR      r0,[r4,#0xf4]
000480  e2800001          ADD      r0,r0,#1
000484  e58400f4          STR      r0,[r4,#0xf4]
;;;127    				yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000488  e51f0304          LDR      r0,|L1.396|
00048c  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000490  e3100902          TST      r0,#0x8000
000494  0a000002          BEQ      |L1.1188|
000498  e1a01005          MOV      r1,r5
00049c  e28f0e23          ADR      r0,|L1.1748|
0004a0  ebfffffe          BL       sysprintf
                  |L1.1188|
;;;128    					"found checkpt block %d", i);
;;;129    				return;
;;;130    			}
;;;131    		}
;;;132    
;;;133    	yaffs_trace(YAFFS_TRACE_CHECKPOINT, "found no more checkpt blocks");
;;;134    
;;;135    	dev->checkpt_next_block = -1;
;;;136    	dev->checkpt_cur_block = -1;
;;;137    }
0004a4  e28dd054          ADD      sp,sp,#0x54
0004a8  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1196|
0004ac  e2855001          ADD      r5,r5,#1              ;109
                  |L1.1200|
0004b0  e59400d4          LDR      r0,[r4,#0xd4]         ;108
0004b4  e1500005          CMP      r0,r5                 ;108
0004b8  aaffffd1          BGE      |L1.1028|
                  |L1.1212|
0004bc  e51f0338          LDR      r0,|L1.396|
0004c0  e1d000b0          LDRH     r0,[r0,#0]            ;133  ; yaffs_trace_mask
0004c4  e3100902          TST      r0,#0x8000            ;133
0004c8  0a000001          BEQ      |L1.1236|
0004cc  e28f0e22          ADR      r0,|L1.1780|
0004d0  ebfffffe          BL       sysprintf
                  |L1.1236|
0004d4  e3e00000          MVN      r0,#0                 ;135
0004d8  e5840100          STR      r0,[r4,#0x100]        ;135
0004dc  e58400fc          STR      r0,[r4,#0xfc]         ;136
0004e0  e1a00000          MOV      r0,r0
0004e4  eaffffee          B        |L1.1188|
;;;138    
                          ENDP

                  yaffs2_checkpt_open PROC
;;;139    int yaffs2_checkpt_open(struct yaffs_dev *dev, int writing)
0004e8  e92d4070          PUSH     {r4-r6,lr}
;;;140    {
0004ec  e1a04000          MOV      r4,r0
0004f0  e1a05001          MOV      r5,r1
;;;141    	int i;
;;;142    
;;;143    	dev->checkpt_open_write = writing;
0004f4  e58450f0          STR      r5,[r4,#0xf0]
;;;144    
;;;145    	/* Got the functions we need? */
;;;146    	if (!dev->param.write_chunk_tags_fn ||
0004f8  e5940058          LDR      r0,[r4,#0x58]
0004fc  e3500000          CMP      r0,#0
000500  0a000008          BEQ      |L1.1320|
;;;147    	    !dev->param.read_chunk_tags_fn ||
000504  e594005c          LDR      r0,[r4,#0x5c]
000508  e3500000          CMP      r0,#0
00050c  0a000005          BEQ      |L1.1320|
;;;148    	    !dev->param.erase_fn || !dev->param.bad_block_fn)
000510  e594004c          LDR      r0,[r4,#0x4c]
000514  e3500000          CMP      r0,#0
000518  0a000002          BEQ      |L1.1320|
00051c  e5940060          LDR      r0,[r4,#0x60]
000520  e3500000          CMP      r0,#0
000524  1a000001          BNE      |L1.1328|
                  |L1.1320|
;;;149    		return 0;
000528  e3a00000          MOV      r0,#0
                  |L1.1324|
;;;150    
;;;151    	if (writing && !yaffs2_checkpt_space_ok(dev))
;;;152    		return 0;
;;;153    
;;;154    	if (!dev->checkpt_buffer)
;;;155    // 		dev->checkpt_buffer = kmalloc(dev->param.total_bytes_per_chunk, GFP_NOFS);
;;;156    		dev->checkpt_buffer = (u8 *)yaffs_malloc(dev->param.total_bytes_per_chunk);
;;;157    	if (!dev->checkpt_buffer)
;;;158    		return 0;
;;;159    
;;;160    	dev->checkpt_page_seq = 0;
;;;161    	dev->checkpt_byte_count = 0;
;;;162    	dev->checkpt_sum = 0;
;;;163    	dev->checkpt_xor = 0;
;;;164    	dev->checkpt_cur_block = -1;
;;;165    	dev->checkpt_cur_chunk = -1;
;;;166    	dev->checkpt_next_block = dev->internal_start_block;
;;;167    
;;;168    	/* Erase all the blocks in the checkpoint area */
;;;169    	if (writing) {
;;;170    		memset(dev->checkpt_buffer, 0, dev->data_bytes_per_chunk);
;;;171    		dev->checkpt_byte_offs = 0;
;;;172    		return yaffs_checkpt_erase(dev);
;;;173    	}
;;;174    
;;;175    	/* Set to a value that will kick off a read */
;;;176    	dev->checkpt_byte_offs = dev->data_bytes_per_chunk;
;;;177    	/* A checkpoint block list of 1 checkpoint block per 16 block is
;;;178    	 * (hopefully) going to be way more than we need */
;;;179    	dev->blocks_in_checkpt = 0;
;;;180    	dev->checkpt_max_blocks =
;;;181    	    (dev->internal_end_block - dev->internal_start_block) / 16 + 2;
;;;182    // 	dev->checkpt_block_list = kmalloc(sizeof(int) * dev->checkpt_max_blocks, GFP_NOFS);
;;;183    	dev->checkpt_block_list = yaffs_malloc(sizeof(int) * dev->checkpt_max_blocks);
;;;184    
;;;185    	if (!dev->checkpt_block_list)
;;;186    		return 0;
;;;187    
;;;188    	for (i = 0; i < dev->checkpt_max_blocks; i++)
;;;189    		dev->checkpt_block_list[i] = -1;
;;;190    
;;;191    	return 1;
;;;192    }
00052c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1328|
000530  e3550000          CMP      r5,#0                 ;151
000534  0a000005          BEQ      |L1.1360|
000538  e1a00004          MOV      r0,r4                 ;151
00053c  ebfffffe          BL       yaffs2_checkpt_space_ok
000540  e3500000          CMP      r0,#0                 ;151
000544  1a000001          BNE      |L1.1360|
000548  e3a00000          MOV      r0,#0                 ;152
00054c  eafffff6          B        |L1.1324|
                  |L1.1360|
000550  e59400ec          LDR      r0,[r4,#0xec]         ;154
000554  e3500000          CMP      r0,#0                 ;154
000558  1a000002          BNE      |L1.1384|
00055c  e5940008          LDR      r0,[r4,#8]            ;156
000560  ebfffffe          BL       yaffs_malloc
000564  e58400ec          STR      r0,[r4,#0xec]         ;156
                  |L1.1384|
000568  e59400ec          LDR      r0,[r4,#0xec]         ;157
00056c  e3500000          CMP      r0,#0                 ;157
000570  1a000001          BNE      |L1.1404|
000574  e3a00000          MOV      r0,#0                 ;158
000578  eaffffeb          B        |L1.1324|
                  |L1.1404|
00057c  e3a00000          MOV      r0,#0                 ;160
000580  e58400e0          STR      r0,[r4,#0xe0]         ;160
000584  e58400e4          STR      r0,[r4,#0xe4]         ;161
000588  e584010c          STR      r0,[r4,#0x10c]        ;162
00058c  e5840110          STR      r0,[r4,#0x110]        ;163
000590  e3e00000          MVN      r0,#0                 ;164
000594  e58400fc          STR      r0,[r4,#0xfc]         ;164
000598  e58400f8          STR      r0,[r4,#0xf8]         ;165
00059c  e59400d0          LDR      r0,[r4,#0xd0]         ;166
0005a0  e5840100          STR      r0,[r4,#0x100]        ;166
0005a4  e3550000          CMP      r5,#0                 ;169
0005a8  0a000007          BEQ      |L1.1484|
0005ac  e59400ec          LDR      r0,[r4,#0xec]         ;170
0005b0  e59410a4          LDR      r1,[r4,#0xa4]         ;170
0005b4  ebfffffe          BL       __aeabi_memclr
0005b8  e3a00000          MOV      r0,#0                 ;171
0005bc  e58400e8          STR      r0,[r4,#0xe8]         ;171
0005c0  e1a00004          MOV      r0,r4                 ;172
0005c4  ebfffffe          BL       yaffs_checkpt_erase
0005c8  eaffffd7          B        |L1.1324|
                  |L1.1484|
0005cc  e59400a4          LDR      r0,[r4,#0xa4]         ;176
0005d0  e58400e8          STR      r0,[r4,#0xe8]         ;176
0005d4  e3a00000          MOV      r0,#0                 ;179
0005d8  e58400f4          STR      r0,[r4,#0xf4]         ;179
0005dc  e59410d4          LDR      r1,[r4,#0xd4]         ;180
0005e0  e59420d0          LDR      r2,[r4,#0xd0]         ;180
0005e4  e0410002          SUB      r0,r1,r2              ;180
0005e8  e1a01fc0          ASR      r1,r0,#31             ;180
0005ec  e0801e21          ADD      r1,r0,r1,LSR #28      ;180
0005f0  e1a01241          ASR      r1,r1,#4              ;180
0005f4  e2811002          ADD      r1,r1,#2              ;180
0005f8  e5841108          STR      r1,[r4,#0x108]        ;180
0005fc  e5941108          LDR      r1,[r4,#0x108]        ;183
000600  e1a00101          LSL      r0,r1,#2              ;183
000604  ebfffffe          BL       yaffs_malloc
000608  e5840104          STR      r0,[r4,#0x104]        ;183
00060c  e5940104          LDR      r0,[r4,#0x104]        ;185
000610  e3500000          CMP      r0,#0                 ;185
000614  1a000001          BNE      |L1.1568|
000618  e3a00000          MOV      r0,#0                 ;186
00061c  eaffffc2          B        |L1.1324|
                  |L1.1568|
000620  e3a06000          MOV      r6,#0                 ;188
000624  ea000003          B        |L1.1592|
                  |L1.1576|
000628  e3e00000          MVN      r0,#0                 ;189
00062c  e5941104          LDR      r1,[r4,#0x104]        ;189
000630  e7810106          STR      r0,[r1,r6,LSL #2]     ;189
000634  e2866001          ADD      r6,r6,#1              ;188
                  |L1.1592|
000638  e5940108          LDR      r0,[r4,#0x108]        ;188
00063c  e1500006          CMP      r0,r6                 ;188
000640  cafffff8          BGT      |L1.1576|
000644  e3a00001          MOV      r0,#1                 ;191
000648  eaffffb7          B        |L1.1324|
                  |L1.1612|
                          DCD      ||.constdata||
                  |L1.1616|
000650  79616666          DCB      "yaffs: allocating checkpt block %d\n",0
000654  733a2061
000658  6c6c6f63
00065c  6174696e
000660  67206368
000664  65636b70
000668  7420626c
00066c  6f636b20
000670  25640a00
                  |L1.1652|
000674  79616666          DCB      "yaffs: out of checkpt blocks\n",0
000678  733a206f
00067c  7574206f
000680  66206368
000684  65636b70
000688  7420626c
00068c  6f636b73
000690  0a00    
000692  00                DCB      0
000693  00                DCB      0
                  |L1.1684|
000694  79616666          DCB      "yaffs: find next checkpt block: start:  blocks %d next "
000698  733a2066
00069c  696e6420
0006a0  6e657874
0006a4  20636865
0006a8  636b7074
0006ac  20626c6f
0006b0  636b3a20
0006b4  73746172
0006b8  743a2020
0006bc  626c6f63
0006c0  6b732025
0006c4  64206e65
0006c8  787420  
0006cb  25640a00          DCB      "%d\n",0
0006cf  00                DCB      0
                  |L1.1744|
                          DCD      ||.constdata||+0x4c
                  |L1.1748|
0006d4  79616666          DCB      "yaffs: found checkpt block %d\n",0
0006d8  733a2066
0006dc  6f756e64
0006e0  20636865
0006e4  636b7074
0006e8  20626c6f
0006ec  636b2025
0006f0  640a00  
0006f3  00                DCB      0
                  |L1.1780|
0006f4  79616666          DCB      "yaffs: found no more checkpt blocks\n",0
0006f8  733a2066
0006fc  6f756e64
000700  206e6f20
000704  6d6f7265
000708  20636865
00070c  636b7074
000710  20626c6f
000714  636b730a
000718  00      
000719  00                DCB      0
00071a  00                DCB      0
00071b  00                DCB      0
                          ENDP

                  yaffs2_get_checkpt_sum PROC
;;;193    
;;;194    int yaffs2_get_checkpt_sum(struct yaffs_dev *dev, u32 * sum)
00071c  e1a02000          MOV      r2,r0
;;;195    {
;;;196    	u32 composite_sum;
;;;197    
;;;198    	composite_sum = (dev->checkpt_sum << 8) | (dev->checkpt_xor & 0xff);
000720  e5d20110          LDRB     r0,[r2,#0x110]
000724  e592c10c          LDR      r12,[r2,#0x10c]
000728  e180340c          ORR      r3,r0,r12,LSL #8
;;;199    	*sum = composite_sum;
00072c  e5813000          STR      r3,[r1,#0]
;;;200    	return 1;
000730  e3a00001          MOV      r0,#1
;;;201    }
000734  e12fff1e          BX       lr
;;;202    
                          ENDP

                  yaffs2_checkpt_flush_buffer PROC
;;;203    static int yaffs2_checkpt_flush_buffer(struct yaffs_dev *dev)
000738  e92d40f0          PUSH     {r4-r7,lr}
;;;204    {
00073c  e24dd054          SUB      sp,sp,#0x54
000740  e1a04000          MOV      r4,r0
;;;205    	int chunk;
;;;206    	int realigned_chunk;
;;;207    	struct yaffs_ext_tags tags;
;;;208    
;;;209    	if (dev->checkpt_cur_block < 0) {
000744  e59400fc          LDR      r0,[r4,#0xfc]
000748  e3500000          CMP      r0,#0
00074c  aa000003          BGE      |L1.1888|
;;;210    		yaffs2_checkpt_find_erased_block(dev);
000750  e1a00004          MOV      r0,r4
000754  ebfffffe          BL       yaffs2_checkpt_find_erased_block
;;;211    		dev->checkpt_cur_chunk = 0;
000758  e3a00000          MOV      r0,#0
00075c  e58400f8          STR      r0,[r4,#0xf8]
                  |L1.1888|
;;;212    	}
;;;213    
;;;214    	if (dev->checkpt_cur_block < 0)
000760  e59400fc          LDR      r0,[r4,#0xfc]
000764  e3500000          CMP      r0,#0
000768  aa000002          BGE      |L1.1912|
;;;215    		return 0;
00076c  e3a00000          MOV      r0,#0
                  |L1.1904|
000770  e28dd054          ADD      sp,sp,#0x54
;;;216    
;;;217    	tags.is_deleted = 0;
;;;218    	tags.obj_id = dev->checkpt_next_block;	/* Hint to next place to look */
;;;219    	tags.chunk_id = dev->checkpt_page_seq + 1;
;;;220    	tags.seq_number = YAFFS_SEQUENCE_CHECKPOINT_DATA;
;;;221    	tags.n_bytes = dev->data_bytes_per_chunk;
;;;222    	if (dev->checkpt_cur_chunk == 0) {
;;;223    		/* First chunk we write for the block? Set block state to
;;;224    		   checkpoint */
;;;225    		struct yaffs_block_info *bi =
;;;226    		    yaffs_get_block_info(dev, dev->checkpt_cur_block);
;;;227    		bi->block_state = YAFFS_BLOCK_STATE_CHECKPOINT;
;;;228    		dev->blocks_in_checkpt++;
;;;229    	}
;;;230    
;;;231    	chunk =
;;;232    	    dev->checkpt_cur_block * dev->param.chunks_per_block +
;;;233    	    dev->checkpt_cur_chunk;
;;;234    
;;;235    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
;;;236    		"checkpoint wite buffer nand %d(%d:%d) objid %d chId %d",
;;;237    		chunk, dev->checkpt_cur_block, dev->checkpt_cur_chunk,
;;;238    		tags.obj_id, tags.chunk_id);
;;;239    
;;;240    	realigned_chunk = chunk - dev->chunk_offset;
;;;241    
;;;242    	dev->n_page_writes++;
;;;243    
;;;244    	dev->param.write_chunk_tags_fn(dev, realigned_chunk,
;;;245    				       dev->checkpt_buffer, &tags);
;;;246    	dev->checkpt_byte_offs = 0;
;;;247    	dev->checkpt_page_seq++;
;;;248    	dev->checkpt_cur_chunk++;
;;;249    	if (dev->checkpt_cur_chunk >= dev->param.chunks_per_block) {
;;;250    		dev->checkpt_cur_chunk = 0;
;;;251    		dev->checkpt_cur_block = -1;
;;;252    	}
;;;253    	memset(dev->checkpt_buffer, 0, dev->data_bytes_per_chunk);
;;;254    
;;;255    	return 1;
;;;256    }
000774  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1912|
000778  e3a00000          MOV      r0,#0                 ;217
00077c  e58d0020          STR      r0,[sp,#0x20]         ;217
000780  e5940100          LDR      r0,[r4,#0x100]        ;218
000784  e58d000c          STR      r0,[sp,#0xc]          ;218
000788  e59400e0          LDR      r0,[r4,#0xe0]         ;219
00078c  e2800001          ADD      r0,r0,#1              ;219
000790  e58d0010          STR      r0,[sp,#0x10]         ;219
000794  e3a00021          MOV      r0,#0x21              ;220
000798  e58d0028          STR      r0,[sp,#0x28]         ;220
00079c  e59400a4          LDR      r0,[r4,#0xa4]         ;221
0007a0  e58d0014          STR      r0,[sp,#0x14]         ;221
0007a4  e59400f8          LDR      r0,[r4,#0xf8]         ;222
0007a8  e3500000          CMP      r0,#0                 ;222
0007ac  1a00000b          BNE      |L1.2016|
0007b0  e59410fc          LDR      r1,[r4,#0xfc]         ;225
0007b4  e1a00004          MOV      r0,r4                 ;225
0007b8  ebfffffe          BL       yaffs_get_block_info
0007bc  e1a07000          MOV      r7,r0                 ;225
0007c0  e5970000          LDR      r0,[r7,#0]            ;227
0007c4  e3c0060f          BIC      r0,r0,#0xf00000       ;227
0007c8  e3800607          ORR      r0,r0,#0x700000       ;227
0007cc  e5870000          STR      r0,[r7,#0]            ;227
0007d0  e59400f4          LDR      r0,[r4,#0xf4]         ;228
0007d4  e2800001          ADD      r0,r0,#1              ;228
0007d8  e58400f4          STR      r0,[r4,#0xf4]         ;228
0007dc  e1a00000          MOV      r0,r0                 ;229
                  |L1.2016|
0007e0  e59400f8          LDR      r0,[r4,#0xf8]         ;231
0007e4  e59410fc          LDR      r1,[r4,#0xfc]         ;231
0007e8  e594200c          LDR      r2,[r4,#0xc]          ;231
0007ec  e0250291          MLA      r5,r1,r2,r0           ;231
0007f0  e51f066c          LDR      r0,|L1.396|
0007f4  e1d000b0          LDRH     r0,[r0,#0]            ;235  ; yaffs_trace_mask
0007f8  e3100902          TST      r0,#0x8000            ;235
0007fc  0a000007          BEQ      |L1.2080|
000800  e59d000c          LDR      r0,[sp,#0xc]          ;235
000804  e59d1010          LDR      r1,[sp,#0x10]         ;235
000808  e1cd00f0          STRD     r0,r1,[sp,#0]         ;235
00080c  e1a01005          MOV      r1,r5                 ;235
000810  e28f0e31          ADR      r0,|L1.2856|
000814  e59420fc          LDR      r2,[r4,#0xfc]         ;235
000818  e59430f8          LDR      r3,[r4,#0xf8]         ;235
00081c  ebfffffe          BL       sysprintf
                  |L1.2080|
000820  e59400dc          LDR      r0,[r4,#0xdc]         ;240
000824  e0456000          SUB      r6,r5,r0              ;240
000828  e5940e10          LDR      r0,[r4,#0xe10]        ;242
00082c  e2800001          ADD      r0,r0,#1              ;242
000830  e5840e10          STR      r0,[r4,#0xe10]        ;242
000834  e28d3008          ADD      r3,sp,#8              ;244
000838  e1a01006          MOV      r1,r6                 ;244
00083c  e59420ec          LDR      r2,[r4,#0xec]         ;244
000840  e594c058          LDR      r12,[r4,#0x58]        ;244
000844  e1a00004          MOV      r0,r4                 ;244
000848  e12fff3c          BLX      r12                   ;244
00084c  e3a00000          MOV      r0,#0                 ;246
000850  e58400e8          STR      r0,[r4,#0xe8]         ;246
000854  e59400e0          LDR      r0,[r4,#0xe0]         ;247
000858  e2800001          ADD      r0,r0,#1              ;247
00085c  e58400e0          STR      r0,[r4,#0xe0]         ;247
000860  e59400f8          LDR      r0,[r4,#0xf8]         ;248
000864  e2800001          ADD      r0,r0,#1              ;248
000868  e58400f8          STR      r0,[r4,#0xf8]         ;248
00086c  e59400f8          LDR      r0,[r4,#0xf8]         ;249
000870  e594100c          LDR      r1,[r4,#0xc]          ;249
000874  e1500001          CMP      r0,r1                 ;249
000878  ba000003          BLT      |L1.2188|
00087c  e3a00000          MOV      r0,#0                 ;250
000880  e58400f8          STR      r0,[r4,#0xf8]         ;250
000884  e3e00000          MVN      r0,#0                 ;251
000888  e58400fc          STR      r0,[r4,#0xfc]         ;251
                  |L1.2188|
00088c  e59400ec          LDR      r0,[r4,#0xec]         ;253
000890  e59410a4          LDR      r1,[r4,#0xa4]         ;253
000894  ebfffffe          BL       __aeabi_memclr
000898  e3a00001          MOV      r0,#1                 ;255
00089c  eaffffb3          B        |L1.1904|
;;;257    
                          ENDP

                  yaffs2_checkpt_wr PROC
;;;258    int yaffs2_checkpt_wr(struct yaffs_dev *dev, const void *data, int n_bytes)
0008a0  e92d47f0          PUSH     {r4-r10,lr}
;;;259    {
0008a4  e1a04000          MOV      r4,r0
0008a8  e1a07001          MOV      r7,r1
0008ac  e1a08002          MOV      r8,r2
;;;260    	int i = 0;
0008b0  e3a06000          MOV      r6,#0
;;;261    	int ok = 1;
0008b4  e3a09001          MOV      r9,#1
;;;262    	u8 *data_bytes = (u8 *) data;
0008b8  e1a05007          MOV      r5,r7
;;;263    
;;;264    	if (!dev->checkpt_buffer)
0008bc  e59400ec          LDR      r0,[r4,#0xec]
0008c0  e3500000          CMP      r0,#0
0008c4  1a000001          BNE      |L1.2256|
;;;265    		return 0;
0008c8  e3a00000          MOV      r0,#0
                  |L1.2252|
;;;266    
;;;267    	if (!dev->checkpt_open_write)
;;;268    		return -1;
;;;269    
;;;270    	while (i < n_bytes && ok) {
;;;271    		dev->checkpt_buffer[dev->checkpt_byte_offs] = *data_bytes;
;;;272    		dev->checkpt_sum += *data_bytes;
;;;273    		dev->checkpt_xor ^= *data_bytes;
;;;274    
;;;275    		dev->checkpt_byte_offs++;
;;;276    		i++;
;;;277    		data_bytes++;
;;;278    		dev->checkpt_byte_count++;
;;;279    
;;;280    		if (dev->checkpt_byte_offs < 0 ||
;;;281    		    dev->checkpt_byte_offs >= dev->data_bytes_per_chunk)
;;;282    			ok = yaffs2_checkpt_flush_buffer(dev);
;;;283    	}
;;;284    
;;;285    	return i;
;;;286    }
0008cc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2256|
0008d0  e59400f0          LDR      r0,[r4,#0xf0]         ;267
0008d4  e3500000          CMP      r0,#0                 ;267
0008d8  1a000001          BNE      |L1.2276|
0008dc  e3e00000          MVN      r0,#0                 ;268
0008e0  eafffff9          B        |L1.2252|
                  |L1.2276|
0008e4  ea00001d          B        |L1.2400|
                  |L1.2280|
0008e8  e5d50000          LDRB     r0,[r5,#0]            ;271
0008ec  e59410ec          LDR      r1,[r4,#0xec]         ;271
0008f0  e59420e8          LDR      r2,[r4,#0xe8]         ;271
0008f4  e7c10002          STRB     r0,[r1,r2]            ;271
0008f8  e594010c          LDR      r0,[r4,#0x10c]        ;272
0008fc  e5d51000          LDRB     r1,[r5,#0]            ;272
000900  e0800001          ADD      r0,r0,r1              ;272
000904  e584010c          STR      r0,[r4,#0x10c]        ;272
000908  e5940110          LDR      r0,[r4,#0x110]        ;273
00090c  e5d51000          LDRB     r1,[r5,#0]            ;273
000910  e0200001          EOR      r0,r0,r1              ;273
000914  e5840110          STR      r0,[r4,#0x110]        ;273
000918  e59400e8          LDR      r0,[r4,#0xe8]         ;275
00091c  e2800001          ADD      r0,r0,#1              ;275
000920  e58400e8          STR      r0,[r4,#0xe8]         ;275
000924  e2866001          ADD      r6,r6,#1              ;276
000928  e2855001          ADD      r5,r5,#1              ;277
00092c  e59400e4          LDR      r0,[r4,#0xe4]         ;278
000930  e2800001          ADD      r0,r0,#1              ;278
000934  e58400e4          STR      r0,[r4,#0xe4]         ;278
000938  e59400e8          LDR      r0,[r4,#0xe8]         ;280
00093c  e3500000          CMP      r0,#0                 ;280
000940  ba000003          BLT      |L1.2388|
000944  e59400e8          LDR      r0,[r4,#0xe8]         ;281
000948  e59410a4          LDR      r1,[r4,#0xa4]         ;281
00094c  e1500001          CMP      r0,r1                 ;281
000950  ba000002          BLT      |L1.2400|
                  |L1.2388|
000954  e1a00004          MOV      r0,r4                 ;282
000958  ebfffffe          BL       yaffs2_checkpt_flush_buffer
00095c  e1a09000          MOV      r9,r0                 ;282
                  |L1.2400|
000960  e1560008          CMP      r6,r8                 ;270
000964  aa000001          BGE      |L1.2416|
000968  e3590000          CMP      r9,#0                 ;270
00096c  1affffdd          BNE      |L1.2280|
                  |L1.2416|
000970  e1a00006          MOV      r0,r6                 ;285
000974  eaffffd4          B        |L1.2252|
;;;287    
                          ENDP

                  yaffs2_checkpt_rd PROC
;;;288    int yaffs2_checkpt_rd(struct yaffs_dev *dev, void *data, int n_bytes)
000978  e92d4ff0          PUSH     {r4-r11,lr}
;;;289    {
00097c  e24dd04c          SUB      sp,sp,#0x4c
000980  e1a04000          MOV      r4,r0
000984  e1a07001          MOV      r7,r1
000988  e1a08002          MOV      r8,r2
;;;290    	int i = 0;
00098c  e3a06000          MOV      r6,#0
;;;291    	int ok = 1;
000990  e3a0b001          MOV      r11,#1
;;;292    	struct yaffs_ext_tags tags;
;;;293    	int chunk;
;;;294    	int realigned_chunk;
;;;295    	u8 *data_bytes = (u8 *) data;
000994  e1a05007          MOV      r5,r7
;;;296    
;;;297    	if (!dev->checkpt_buffer)
000998  e59400ec          LDR      r0,[r4,#0xec]
00099c  e3500000          CMP      r0,#0
0009a0  1a000002          BNE      |L1.2480|
;;;298    		return 0;
0009a4  e3a00000          MOV      r0,#0
                  |L1.2472|
0009a8  e28dd04c          ADD      sp,sp,#0x4c
;;;299    
;;;300    	if (dev->checkpt_open_write)
;;;301    		return -1;
;;;302    
;;;303    	while (i < n_bytes && ok) {
;;;304    
;;;305    		if (dev->checkpt_byte_offs < 0 ||
;;;306    		    dev->checkpt_byte_offs >= dev->data_bytes_per_chunk) {
;;;307    
;;;308    			if (dev->checkpt_cur_block < 0) {
;;;309    				yaffs2_checkpt_find_block(dev);
;;;310    				dev->checkpt_cur_chunk = 0;
;;;311    			}
;;;312    
;;;313    			if (dev->checkpt_cur_block < 0) {
;;;314    				ok = 0;
;;;315    				break;
;;;316    			}
;;;317    
;;;318    			chunk = dev->checkpt_cur_block *
;;;319    			    dev->param.chunks_per_block +
;;;320    			    dev->checkpt_cur_chunk;
;;;321    
;;;322    			realigned_chunk = chunk - dev->chunk_offset;
;;;323    			dev->n_page_reads++;
;;;324    
;;;325    			/* read in the next chunk */
;;;326    			dev->param.read_chunk_tags_fn(dev,
;;;327    						realigned_chunk,
;;;328    						dev->checkpt_buffer,
;;;329    						&tags);
;;;330    
;;;331    			if (tags.chunk_id != (dev->checkpt_page_seq + 1) ||
;;;332    			    tags.ecc_result > YAFFS_ECC_RESULT_FIXED ||
;;;333    			    tags.seq_number != YAFFS_SEQUENCE_CHECKPOINT_DATA) {
;;;334    				ok = 0;
;;;335    				break;
;;;336    			}
;;;337    
;;;338    			dev->checkpt_byte_offs = 0;
;;;339    			dev->checkpt_page_seq++;
;;;340    			dev->checkpt_cur_chunk++;
;;;341    
;;;342    			if (dev->checkpt_cur_chunk >=
;;;343    					dev->param.chunks_per_block)
;;;344    				dev->checkpt_cur_block = -1;
;;;345    		}
;;;346    
;;;347    		*data_bytes = dev->checkpt_buffer[dev->checkpt_byte_offs];
;;;348    		dev->checkpt_sum += *data_bytes;
;;;349    		dev->checkpt_xor ^= *data_bytes;
;;;350    		dev->checkpt_byte_offs++;
;;;351    		i++;
;;;352    		data_bytes++;
;;;353    		dev->checkpt_byte_count++;
;;;354    	}
;;;355    
;;;356    	return i;
;;;357    }
0009ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2480|
0009b0  e59400f0          LDR      r0,[r4,#0xf0]         ;300
0009b4  e3500000          CMP      r0,#0                 ;300
0009b8  0a000001          BEQ      |L1.2500|
0009bc  e3e00000          MVN      r0,#0                 ;301
0009c0  eafffff8          B        |L1.2472|
                  |L1.2500|
0009c4  ea000050          B        |L1.2828|
                  |L1.2504|
0009c8  e59400e8          LDR      r0,[r4,#0xe8]         ;305
0009cc  e3500000          CMP      r0,#0                 ;305
0009d0  ba000003          BLT      |L1.2532|
0009d4  e59400e8          LDR      r0,[r4,#0xe8]         ;306
0009d8  e59410a4          LDR      r1,[r4,#0xa4]         ;306
0009dc  e1500001          CMP      r0,r1                 ;306
0009e0  ba000035          BLT      |L1.2748|
                  |L1.2532|
0009e4  e59400fc          LDR      r0,[r4,#0xfc]         ;308
0009e8  e3500000          CMP      r0,#0                 ;308
0009ec  aa000003          BGE      |L1.2560|
0009f0  e1a00004          MOV      r0,r4                 ;309
0009f4  ebfffffe          BL       yaffs2_checkpt_find_block
0009f8  e3a00000          MOV      r0,#0                 ;310
0009fc  e58400f8          STR      r0,[r4,#0xf8]         ;310
                  |L1.2560|
000a00  e59400fc          LDR      r0,[r4,#0xfc]         ;313
000a04  e3500000          CMP      r0,#0                 ;313
000a08  aa000001          BGE      |L1.2580|
000a0c  e3a0b000          MOV      r11,#0                ;314
000a10  ea000041          B        |L1.2844|
                  |L1.2580|
000a14  e59400f8          LDR      r0,[r4,#0xf8]         ;318
000a18  e59410fc          LDR      r1,[r4,#0xfc]         ;318
000a1c  e594200c          LDR      r2,[r4,#0xc]          ;318
000a20  e0290291          MLA      r9,r1,r2,r0           ;318
000a24  e59400dc          LDR      r0,[r4,#0xdc]         ;322
000a28  e049a000          SUB      r10,r9,r0             ;322
000a2c  e5940e14          LDR      r0,[r4,#0xe14]        ;323
000a30  e2800001          ADD      r0,r0,#1              ;323
000a34  e5840e14          STR      r0,[r4,#0xe14]        ;323
000a38  e1a0300d          MOV      r3,sp                 ;326
000a3c  e1a0100a          MOV      r1,r10                ;326
000a40  e59420ec          LDR      r2,[r4,#0xec]         ;326
000a44  e594c05c          LDR      r12,[r4,#0x5c]        ;326
000a48  e1a00004          MOV      r0,r4                 ;326
000a4c  e12fff3c          BLX      r12                   ;326
000a50  e59d0008          LDR      r0,[sp,#8]            ;331
000a54  e59410e0          LDR      r1,[r4,#0xe0]         ;331
000a58  e2811001          ADD      r1,r1,#1              ;331
000a5c  e1500001          CMP      r0,r1                 ;331
000a60  1a000005          BNE      |L1.2684|
000a64  e5dd0010          LDRB     r0,[sp,#0x10]         ;332
000a68  e3500002          CMP      r0,#2                 ;332
000a6c  ca000002          BGT      |L1.2684|
000a70  e59d0020          LDR      r0,[sp,#0x20]         ;333
000a74  e3500021          CMP      r0,#0x21              ;333
000a78  0a000001          BEQ      |L1.2692|
                  |L1.2684|
000a7c  e3a0b000          MOV      r11,#0                ;334
000a80  ea000025          B        |L1.2844|
                  |L1.2692|
000a84  e3a00000          MOV      r0,#0                 ;338
000a88  e58400e8          STR      r0,[r4,#0xe8]         ;338
000a8c  e59400e0          LDR      r0,[r4,#0xe0]         ;339
000a90  e2800001          ADD      r0,r0,#1              ;339
000a94  e58400e0          STR      r0,[r4,#0xe0]         ;339
000a98  e59400f8          LDR      r0,[r4,#0xf8]         ;340
000a9c  e2800001          ADD      r0,r0,#1              ;340
000aa0  e58400f8          STR      r0,[r4,#0xf8]         ;340
000aa4  e59400f8          LDR      r0,[r4,#0xf8]         ;342
000aa8  e594100c          LDR      r1,[r4,#0xc]          ;342
000aac  e1500001          CMP      r0,r1                 ;342
000ab0  ba000001          BLT      |L1.2748|
000ab4  e3e00000          MVN      r0,#0                 ;344
000ab8  e58400fc          STR      r0,[r4,#0xfc]         ;344
                  |L1.2748|
000abc  e59400ec          LDR      r0,[r4,#0xec]         ;347
000ac0  e59410e8          LDR      r1,[r4,#0xe8]         ;347
000ac4  e7d00001          LDRB     r0,[r0,r1]            ;347
000ac8  e5c50000          STRB     r0,[r5,#0]            ;347
000acc  e594010c          LDR      r0,[r4,#0x10c]        ;348
000ad0  e5d51000          LDRB     r1,[r5,#0]            ;348
000ad4  e0800001          ADD      r0,r0,r1              ;348
000ad8  e584010c          STR      r0,[r4,#0x10c]        ;348
000adc  e5940110          LDR      r0,[r4,#0x110]        ;349
000ae0  e5d51000          LDRB     r1,[r5,#0]            ;349
000ae4  e0200001          EOR      r0,r0,r1              ;349
000ae8  e5840110          STR      r0,[r4,#0x110]        ;349
000aec  e59400e8          LDR      r0,[r4,#0xe8]         ;350
000af0  e2800001          ADD      r0,r0,#1              ;350
000af4  e58400e8          STR      r0,[r4,#0xe8]         ;350
000af8  e2866001          ADD      r6,r6,#1              ;351
000afc  e2855001          ADD      r5,r5,#1              ;352
000b00  e59400e4          LDR      r0,[r4,#0xe4]         ;353
000b04  e2800001          ADD      r0,r0,#1              ;353
000b08  e58400e4          STR      r0,[r4,#0xe4]         ;353
                  |L1.2828|
000b0c  e1560008          CMP      r6,r8                 ;303
000b10  aa000001          BGE      |L1.2844|
000b14  e35b0000          CMP      r11,#0                ;303
000b18  1affffaa          BNE      |L1.2504|
                  |L1.2844|
000b1c  e1a00000          MOV      r0,r0                 ;315
000b20  e1a00006          MOV      r0,r6                 ;356
000b24  eaffff9f          B        |L1.2472|
                  |L1.2856|
000b28  79616666          DCB      "yaffs: checkpoint wite buffer nand %d(%d:%d) objid %d c"
000b2c  733a2063
000b30  6865636b
000b34  706f696e
000b38  74207769
000b3c  74652062
000b40  75666665
000b44  72206e61
000b48  6e642025
000b4c  64282564
000b50  3a256429
000b54  206f626a
000b58  69642025
000b5c  642063  
000b5f  68496420          DCB      "hId %d\n",0
000b63  25640a00
000b67  00                DCB      0
                          ENDP

                  yaffs_checkpt_close PROC
;;;358    
;;;359    int yaffs_checkpt_close(struct yaffs_dev *dev)
000b68  e92d41f0          PUSH     {r4-r8,lr}
;;;360    {
000b6c  e1a04000          MOV      r4,r0
;;;361    	int i;
;;;362    
;;;363    	if (dev->checkpt_open_write) {
000b70  e59400f0          LDR      r0,[r4,#0xf0]
000b74  e3500000          CMP      r0,#0
000b78  0a000005          BEQ      |L1.2964|
;;;364    		if (dev->checkpt_byte_offs != 0)
000b7c  e59400e8          LDR      r0,[r4,#0xe8]
000b80  e3500000          CMP      r0,#0
000b84  0a00002a          BEQ      |L1.3124|
;;;365    			yaffs2_checkpt_flush_buffer(dev);
000b88  e1a00004          MOV      r0,r4
000b8c  ebfffffe          BL       yaffs2_checkpt_flush_buffer
000b90  ea000027          B        |L1.3124|
                  |L1.2964|
;;;366    	} else if (dev->checkpt_block_list) {
000b94  e5940104          LDR      r0,[r4,#0x104]
000b98  e3500000          CMP      r0,#0
000b9c  0a000024          BEQ      |L1.3124|
;;;367    		for (i = 0;
000ba0  e3a05000          MOV      r5,#0
000ba4  ea000017          B        |L1.3080|
                  |L1.2984|
;;;368    		     i < dev->blocks_in_checkpt &&
;;;369    		     dev->checkpt_block_list[i] >= 0; i++) {
;;;370    			int blk = dev->checkpt_block_list[i];
000ba8  e5940104          LDR      r0,[r4,#0x104]
000bac  e7907105          LDR      r7,[r0,r5,LSL #2]
;;;371    			struct yaffs_block_info *bi = NULL;
000bb0  e3a06000          MOV      r6,#0
;;;372    
;;;373    			if (dev->internal_start_block <= blk &&
000bb4  e59400d0          LDR      r0,[r4,#0xd0]
000bb8  e1500007          CMP      r0,r7
000bbc  ca000006          BGT      |L1.3036|
;;;374    			    blk <= dev->internal_end_block)
000bc0  e59400d4          LDR      r0,[r4,#0xd4]
000bc4  e1500007          CMP      r0,r7
000bc8  ba000003          BLT      |L1.3036|
;;;375    				bi = yaffs_get_block_info(dev, blk);
000bcc  e1a01007          MOV      r1,r7
000bd0  e1a00004          MOV      r0,r4
000bd4  ebfffffe          BL       yaffs_get_block_info
000bd8  e1a06000          MOV      r6,r0
                  |L1.3036|
;;;376    			if (bi && bi->block_state == YAFFS_BLOCK_STATE_EMPTY)
000bdc  e3560000          CMP      r6,#0
000be0  0a000007          BEQ      |L1.3076|
000be4  e5960000          LDR      r0,[r6,#0]
000be8  e200060f          AND      r0,r0,#0xf00000
000bec  e3500603          CMP      r0,#0x300000
000bf0  1a000003          BNE      |L1.3076|
;;;377    				bi->block_state = YAFFS_BLOCK_STATE_CHECKPOINT;
000bf4  e5960000          LDR      r0,[r6,#0]
000bf8  e3c0060f          BIC      r0,r0,#0xf00000
000bfc  e3800607          ORR      r0,r0,#0x700000
000c00  e5860000          STR      r0,[r6,#0]
                  |L1.3076|
000c04  e2855001          ADD      r5,r5,#1              ;369
                  |L1.3080|
000c08  e59400f4          LDR      r0,[r4,#0xf4]         ;368
000c0c  e1500005          CMP      r0,r5                 ;368
000c10  da000003          BLE      |L1.3108|
000c14  e5940104          LDR      r0,[r4,#0x104]        ;369
000c18  e7900105          LDR      r0,[r0,r5,LSL #2]     ;369
000c1c  e3500000          CMP      r0,#0                 ;369
000c20  aaffffe0          BGE      |L1.2984|
                  |L1.3108|
;;;378    		}
;;;379    		yaffs_free(dev->checkpt_block_list);
000c24  e5940104          LDR      r0,[r4,#0x104]
000c28  ebfffffe          BL       yaffs_free
;;;380    		dev->checkpt_block_list = NULL;
000c2c  e3a00000          MOV      r0,#0
000c30  e5840104          STR      r0,[r4,#0x104]
                  |L1.3124|
;;;381    	}
;;;382    
;;;383    	dev->n_free_chunks -=
000c34  e59400f4          LDR      r0,[r4,#0xf4]
000c38  e594100c          LDR      r1,[r4,#0xc]
000c3c  e0000091          MUL      r0,r1,r0
000c40  e5941d4c          LDR      r1,[r4,#0xd4c]
000c44  e0410000          SUB      r0,r1,r0
000c48  e5840d4c          STR      r0,[r4,#0xd4c]
;;;384    		dev->blocks_in_checkpt * dev->param.chunks_per_block;
;;;385    	dev->n_erased_blocks -= dev->blocks_in_checkpt;
000c4c  e5940128          LDR      r0,[r4,#0x128]
000c50  e59410f4          LDR      r1,[r4,#0xf4]
000c54  e0400001          SUB      r0,r0,r1
000c58  e5840128          STR      r0,[r4,#0x128]
;;;386    
;;;387    	yaffs_trace(YAFFS_TRACE_CHECKPOINT, "checkpoint byte count %d",
000c5c  e51f0ad8          LDR      r0,|L1.396|
000c60  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000c64  e3100902          TST      r0,#0x8000
000c68  0a000002          BEQ      |L1.3192|
000c6c  e28f0060          ADR      r0,|L1.3284|
000c70  e59410e4          LDR      r1,[r4,#0xe4]
000c74  ebfffffe          BL       sysprintf
                  |L1.3192|
;;;388    		dev->checkpt_byte_count);
;;;389    
;;;390    	if (dev->checkpt_buffer) {
000c78  e59400ec          LDR      r0,[r4,#0xec]
000c7c  e3500000          CMP      r0,#0
000c80  0a000005          BEQ      |L1.3228|
;;;391    		/* free the buffer */
;;;392    		yaffs_free(dev->checkpt_buffer);
000c84  e59400ec          LDR      r0,[r4,#0xec]
000c88  ebfffffe          BL       yaffs_free
;;;393    		dev->checkpt_buffer = NULL;
000c8c  e3a00000          MOV      r0,#0
000c90  e58400ec          STR      r0,[r4,#0xec]
;;;394    		return 1;
000c94  e3a00001          MOV      r0,#1
                  |L1.3224|
;;;395    	} else {
;;;396    		return 0;
;;;397    	}
;;;398    }
000c98  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3228|
000c9c  e3a00000          MOV      r0,#0                 ;396
000ca0  eafffffc          B        |L1.3224|
;;;399    
                          ENDP

                  yaffs2_checkpt_invalidate_stream PROC
;;;400    int yaffs2_checkpt_invalidate_stream(struct yaffs_dev *dev)
000ca4  e92d4010          PUSH     {r4,lr}
;;;401    {
000ca8  e1a04000          MOV      r4,r0
;;;402    	/* Erase the checkpoint data */
;;;403    
;;;404    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000cac  e51f0b28          LDR      r0,|L1.396|
000cb0  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000cb4  e3100902          TST      r0,#0x8000
000cb8  0a000002          BEQ      |L1.3272|
000cbc  e28f0034          ADR      r0,|L1.3320|
000cc0  e59410f4          LDR      r1,[r4,#0xf4]
000cc4  ebfffffe          BL       sysprintf
                  |L1.3272|
;;;405    		"checkpoint invalidate of %d blocks",
;;;406    		dev->blocks_in_checkpt);
;;;407    
;;;408    	return yaffs_checkpt_erase(dev);
000cc8  e1a00004          MOV      r0,r4
000ccc  ebfffffe          BL       yaffs_checkpt_erase
;;;409    }
000cd0  e8bd8010          POP      {r4,pc}
                          ENDP

                  |L1.3284|
000cd4  79616666          DCB      "yaffs: checkpoint byte count %d\n",0
000cd8  733a2063
000cdc  6865636b
000ce0  706f696e
000ce4  74206279
000ce8  74652063
000cec  6f756e74
000cf0  2025640a
000cf4  00      
000cf5  00                DCB      0
000cf6  00                DCB      0
000cf7  00                DCB      0
                  |L1.3320|
000cf8  79616666          DCB      "yaffs: checkpoint invalidate of %d blocks\n",0
000cfc  733a2063
000d00  6865636b
000d04  706f696e
000d08  7420696e
000d0c  76616c69
000d10  64617465
000d14  206f6620
000d18  25642062
000d1c  6c6f636b
000d20  730a00  
000d23  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  79616666          DCB      0x79,0x61,0x66,0x66
000004  733a2061          DCB      0x73,0x3a,0x20,0x61
000008  6c6c6f63          DCB      0x6c,0x6c,0x6f,0x63
00000c  6174696e          DCB      0x61,0x74,0x69,0x6e
000010  67206368          DCB      0x67,0x20,0x63,0x68
000014  65636b70          DCB      0x65,0x63,0x6b,0x70
000018  7420626c          DCB      0x74,0x20,0x62,0x6c
00001c  6f636b3a          DCB      0x6f,0x63,0x6b,0x3a
000020  20657261          DCB      0x20,0x65,0x72,0x61
000024  73656420          DCB      0x73,0x65,0x64,0x20
000028  25642072          DCB      0x25,0x64,0x20,0x72
00002c  65736572          DCB      0x65,0x73,0x65,0x72
000030  76656420          DCB      0x76,0x65,0x64,0x20
000034  25642061          DCB      0x25,0x64,0x20,0x61
000038  7661696c          DCB      0x76,0x61,0x69,0x6c
00003c  20256420          DCB      0x20,0x25,0x64,0x20
000040  6e657874          DCB      0x6e,0x65,0x78,0x74
000044  20256420          DCB      0x20,0x25,0x64,0x20
000048  0a000000          DCB      0x0a,0x00,0x00,0x00
00004c  79616666          DCB      0x79,0x61,0x66,0x66
000050  733a2066          DCB      0x73,0x3a,0x20,0x66
000054  696e6420          DCB      0x69,0x6e,0x64,0x20
000058  6e657874          DCB      0x6e,0x65,0x78,0x74
00005c  20636865          DCB      0x20,0x63,0x68,0x65
000060  636b7074          DCB      0x63,0x6b,0x70,0x74
000064  20626c6f          DCB      0x20,0x62,0x6c,0x6f
000068  636b3a20          DCB      0x63,0x6b,0x3a,0x20
00006c  73656172          DCB      0x73,0x65,0x61,0x72
000070  63683a20          DCB      0x63,0x68,0x3a,0x20
000074  626c6f63          DCB      0x62,0x6c,0x6f,0x63
000078  6b202564          DCB      0x6b,0x20,0x25,0x64
00007c  206f6964          DCB      0x20,0x6f,0x69,0x64
000080  20256420          DCB      0x20,0x25,0x64,0x20
000084  73657120          DCB      0x73,0x65,0x71,0x20
000088  25642065          DCB      0x25,0x64,0x20,0x65
00008c  63637220          DCB      0x63,0x63,0x72,0x20
000090  25640a00          DCB      0x25,0x64,0x0a,0x00
