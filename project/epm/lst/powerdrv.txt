; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\powerdrv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\powerdrv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\powerdrv.crf src\SysHal\powerdrv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  busyDelay PROC
;;;105    /*-----------------------------------------*/
;;;106    static void busyDelay(void)
000000  e12fff1e          BX       lr
;;;107    {
;;;108        
;;;109    }
;;;110    
                          ENDP

                  showReg PROC
;;;111    #if(1)
;;;112    static void showReg(char* str)
000004  e92d4010          PUSH     {r4,lr}
;;;113    {
000008  e1a04000          MOV      r4,r0
;;;114        /*
;;;115        *** Suspend ***
;;;116        REG_CLK_PMCON        : 0x0000FF03
;;;117        REG_CLK_HCLKEN       : 0x00000527
;;;118        REG_CLK_PCLKEN0      : 0x0001010C
;;;119        REG_CLK_PCLKEN1      : 0x00000000
;;;120        REG_CLK_APLLCON      : 0x50000015
;;;121        REG_CLK_UPLLCON      : 0xC0000018
;;;122        REG_CLK_PLLSTBCNTR   : 0x00001800
;;;123        
;;;124        
;;;125    
;;;126        */
;;;127        //outpw(REG_SYS_GPC_MFPL, 0x00000000);
;;;128        //outpw(REG_SYS_GPC_MFPH, 0x00000000);
;;;129        //outpw(REG_SYS_GPJ_MFPL, 0x00000000);
;;;130        //outpw(REG_CLK_PMCON, 0x0000FF03);
;;;131        sysprintf("*** showReg [%s] start ***\n", str);
00000c  e1a01004          MOV      r1,r4
000010  e28f0f76          ADR      r0,|L1.496|
000014  ebfffffe          BL       sysprintf
;;;132        sysprintf("REG_CLK_PMCON        : 0x%08x\n", inpw(REG_CLK_PMCON));
000018  e3a0020b          MOV      r0,#0xb0000000
00001c  e5901200          LDR      r1,[r0,#0x200]
000020  e28f0f79          ADR      r0,|L1.524|
000024  ebfffffe          BL       sysprintf
;;;133        sysprintf("REG_CLK_HCLKEN       : 0x%08x\n", inpw(REG_CLK_HCLKEN));
000028  e3a0020b          MOV      r0,#0xb0000000
00002c  e5901210          LDR      r1,[r0,#0x210]
000030  e28f0f7d          ADR      r0,|L1.556|
000034  ebfffffe          BL       sysprintf
;;;134        sysprintf("REG_CLK_PCLKEN0      : 0x%08x\n", inpw(REG_CLK_PCLKEN0));
000038  e3a0020b          MOV      r0,#0xb0000000
00003c  e5901218          LDR      r1,[r0,#0x218]
000040  e28f0f81          ADR      r0,|L1.588|
000044  ebfffffe          BL       sysprintf
;;;135        sysprintf("REG_CLK_PCLKEN1      : 0x%08x\n", inpw(REG_CLK_PCLKEN1));
000048  e3a0020b          MOV      r0,#0xb0000000
00004c  e590121c          LDR      r1,[r0,#0x21c]
000050  e28f0f85          ADR      r0,|L1.620|
000054  ebfffffe          BL       sysprintf
;;;136        sysprintf("REG_CLK_APLLCON      : 0x%08x\n", inpw(REG_CLK_APLLCON));
000058  e3a0020b          MOV      r0,#0xb0000000
00005c  e5901260          LDR      r1,[r0,#0x260]
000060  e28f0f89          ADR      r0,|L1.652|
000064  ebfffffe          BL       sysprintf
;;;137        sysprintf("REG_CLK_UPLLCON      : 0x%08x\n", inpw(REG_CLK_UPLLCON));
000068  e3a0020b          MOV      r0,#0xb0000000
00006c  e5901264          LDR      r1,[r0,#0x264]
000070  e28f0f8d          ADR      r0,|L1.684|
000074  ebfffffe          BL       sysprintf
;;;138        sysprintf("REG_CLK_PLLSTBCNTR   : 0x%08x\n\n", inpw(REG_CLK_PLLSTBCNTR)); 
000078  e3a0020b          MOV      r0,#0xb0000000
00007c  e5901280          LDR      r1,[r0,#0x280]
000080  e28f0f91          ADR      r0,|L1.716|
000084  ebfffffe          BL       sysprintf
;;;139        
;;;140        sysprintf("REG_SYS_PWRON        : 0x%08x\n\n", inpw(REG_SYS_PWRON)); //0x020007F0
000088  e3a0020b          MOV      r0,#0xb0000000
00008c  e5901004          LDR      r1,[r0,#4]
000090  e28f0f95          ADR      r0,|L1.748|
000094  ebfffffe          BL       sysprintf
;;;141        
;;;142        
;;;143        sysprintf("REG_SYS_GPA_MFPL     : 0x%08x\n", inpw(REG_SYS_GPA_MFPL));
000098  e3a0020b          MOV      r0,#0xb0000000
00009c  e5901070          LDR      r1,[r0,#0x70]
0000a0  e28f0f99          ADR      r0,|L1.780|
0000a4  ebfffffe          BL       sysprintf
;;;144        sysprintf("REG_SYS_GPA_MFPH     : 0x%08x\n", inpw(REG_SYS_GPA_MFPH));
0000a8  e3a0020b          MOV      r0,#0xb0000000
0000ac  e5901074          LDR      r1,[r0,#0x74]
0000b0  e28f0f9d          ADR      r0,|L1.812|
0000b4  ebfffffe          BL       sysprintf
;;;145        sysprintf("REG_GPIOA_DIR        : 0x%08x\n\n", inpw(REG_GPIOA_DIR));
0000b8  e59f028c          LDR      r0,|L1.844|
0000bc  e5901000          LDR      r1,[r0,#0]
0000c0  e28f0fa2          ADR      r0,|L1.848|
0000c4  ebfffffe          BL       sysprintf
;;;146        
;;;147        
;;;148        sysprintf("REG_SYS_GPB_MFPL     : 0x%08x\n", inpw(REG_SYS_GPB_MFPL));
0000c8  e3a0020b          MOV      r0,#0xb0000000
0000cc  e5901078          LDR      r1,[r0,#0x78]
0000d0  e28f0fa6          ADR      r0,|L1.880|
0000d4  ebfffffe          BL       sysprintf
;;;149        sysprintf("REG_SYS_GPB_MFPH     : 0x%08x\n", inpw(REG_SYS_GPB_MFPH));
0000d8  e3a0020b          MOV      r0,#0xb0000000
0000dc  e590107c          LDR      r1,[r0,#0x7c]
0000e0  e28f0faa          ADR      r0,|L1.912|
0000e4  ebfffffe          BL       sysprintf
;;;150        sysprintf("REG_GPIOB_DIR        : 0x%08x\n\n", inpw(REG_GPIOB_DIR));
0000e8  e59f025c          LDR      r0,|L1.844|
0000ec  e5901040          LDR      r1,[r0,#0x40]
0000f0  e28f0fae          ADR      r0,|L1.944|
0000f4  ebfffffe          BL       sysprintf
;;;151        
;;;152        sysprintf("REG_SYS_GPC_MFPL     : 0x%08x\n", inpw(REG_SYS_GPC_MFPL));
0000f8  e3a0020b          MOV      r0,#0xb0000000
0000fc  e5901080          LDR      r1,[r0,#0x80]
000100  e28f0fb2          ADR      r0,|L1.976|
000104  ebfffffe          BL       sysprintf
;;;153        sysprintf("REG_SYS_GPC_MFPH     : 0x%08x\n", inpw(REG_SYS_GPC_MFPH));
000108  e3a0020b          MOV      r0,#0xb0000000
00010c  e5901084          LDR      r1,[r0,#0x84]
000110  e28f0fb6          ADR      r0,|L1.1008|
000114  ebfffffe          BL       sysprintf
;;;154        sysprintf("REG_GPIOC_DIR        : 0x%08x\n\n", inpw(REG_GPIOC_DIR));
000118  e59f022c          LDR      r0,|L1.844|
00011c  e5901080          LDR      r1,[r0,#0x80]
000120  e28f0fba          ADR      r0,|L1.1040|
000124  ebfffffe          BL       sysprintf
;;;155        
;;;156        sysprintf("REG_SYS_GPD_MFPL     : 0x%08x\n", inpw(REG_SYS_GPD_MFPL));
000128  e3a0020b          MOV      r0,#0xb0000000
00012c  e5901088          LDR      r1,[r0,#0x88]
000130  e28f0fbe          ADR      r0,|L1.1072|
000134  ebfffffe          BL       sysprintf
;;;157        sysprintf("REG_SYS_GPD_MFPH     : 0x%08x\n", inpw(REG_SYS_GPD_MFPH));
000138  e3a0020b          MOV      r0,#0xb0000000
00013c  e590108c          LDR      r1,[r0,#0x8c]
000140  e28f0fc2          ADR      r0,|L1.1104|
000144  ebfffffe          BL       sysprintf
;;;158        sysprintf("REG_GPIOD_DIR        : 0x%08x\n\n", inpw(REG_GPIOD_DIR));
000148  e59f01fc          LDR      r0,|L1.844|
00014c  e59010c0          LDR      r1,[r0,#0xc0]
000150  e28f0fc6          ADR      r0,|L1.1136|
000154  ebfffffe          BL       sysprintf
;;;159        
;;;160        sysprintf("REG_SYS_GPE_MFPL     : 0x%08x\n", inpw(REG_SYS_GPE_MFPL));
000158  e3a0020b          MOV      r0,#0xb0000000
00015c  e5901090          LDR      r1,[r0,#0x90]
000160  e28f0fca          ADR      r0,|L1.1168|
000164  ebfffffe          BL       sysprintf
;;;161        sysprintf("REG_SYS_GPE_MFPH     : 0x%08x\n", inpw(REG_SYS_GPE_MFPH));
000168  e3a0020b          MOV      r0,#0xb0000000
00016c  e5901094          LDR      r1,[r0,#0x94]
000170  e28f0fce          ADR      r0,|L1.1200|
000174  ebfffffe          BL       sysprintf
;;;162        sysprintf("REG_GPIOE_DIR        : 0x%08x\n\n", inpw(REG_GPIOE_DIR));
000178  e59f01cc          LDR      r0,|L1.844|
00017c  e5901100          LDR      r1,[r0,#0x100]
000180  e28f0fd2          ADR      r0,|L1.1232|
000184  ebfffffe          BL       sysprintf
;;;163        
;;;164        sysprintf("REG_SYS_GPF_MFPL     : 0x%08x\n", inpw(REG_SYS_GPF_MFPL));
000188  e3a0020b          MOV      r0,#0xb0000000
00018c  e5901098          LDR      r1,[r0,#0x98]
000190  e28f0fd6          ADR      r0,|L1.1264|
000194  ebfffffe          BL       sysprintf
;;;165        sysprintf("REG_SYS_GPF_MFPH     : 0x%08x\n", inpw(REG_SYS_GPF_MFPH));
000198  e3a0020b          MOV      r0,#0xb0000000
00019c  e590109c          LDR      r1,[r0,#0x9c]
0001a0  e28f0fda          ADR      r0,|L1.1296|
0001a4  ebfffffe          BL       sysprintf
;;;166        sysprintf("REG_GPIOF_DIR        : 0x%08x\n\n", inpw(REG_GPIOF_DIR));
0001a8  e59f019c          LDR      r0,|L1.844|
0001ac  e5901140          LDR      r1,[r0,#0x140]
0001b0  e28f0fde          ADR      r0,|L1.1328|
0001b4  ebfffffe          BL       sysprintf
;;;167        
;;;168        sysprintf("REG_SYS_GPG_MFPL     : 0x%08x\n", inpw(REG_SYS_GPG_MFPL));
0001b8  e3a0020b          MOV      r0,#0xb0000000
0001bc  e59010a0          LDR      r1,[r0,#0xa0]
0001c0  e28f0fe2          ADR      r0,|L1.1360|
0001c4  ebfffffe          BL       sysprintf
;;;169        sysprintf("REG_SYS_GPG_MFPH     : 0x%08x\n", inpw(REG_SYS_GPG_MFPH));
0001c8  e3a0020b          MOV      r0,#0xb0000000
0001cc  e59010a4          LDR      r1,[r0,#0xa4]
0001d0  e28f0fe6          ADR      r0,|L1.1392|
0001d4  ebfffffe          BL       sysprintf
;;;170        sysprintf("REG_GPIOG_DIR        : 0x%08x\n\n", inpw(REG_GPIOG_DIR));
0001d8  e59f016c          LDR      r0,|L1.844|
0001dc  e5901180          LDR      r1,[r0,#0x180]
0001e0  e28f0fea          ADR      r0,|L1.1424|
0001e4  ebfffffe          BL       sysprintf
;;;171        
;;;172        sysprintf("REG_SYS_GPH_MFPL     : 0x%08x\n", inpw(REG_SYS_GPH_MFPL));
0001e8  e3a0020b          MOV      r0,#0xb0000000
0001ec  ea0000ef          B        |L1.1456|
                  |L1.496|
0001f0  2a2a2a20          DCB      "*** showReg [%s] start ***\n",0
0001f4  73686f77
0001f8  52656720
0001fc  5b25735d
000200  20737461
000204  7274202a
000208  2a2a0a00
                  |L1.524|
00020c  5245475f          DCB      "REG_CLK_PMCON        : 0x%08x\n",0
000210  434c4b5f
000214  504d434f
000218  4e202020
00021c  20202020
000220  203a2030
000224  78253038
000228  780a00  
00022b  00                DCB      0
                  |L1.556|
00022c  5245475f          DCB      "REG_CLK_HCLKEN       : 0x%08x\n",0
000230  434c4b5f
000234  48434c4b
000238  454e2020
00023c  20202020
000240  203a2030
000244  78253038
000248  780a00  
00024b  00                DCB      0
                  |L1.588|
00024c  5245475f          DCB      "REG_CLK_PCLKEN0      : 0x%08x\n",0
000250  434c4b5f
000254  50434c4b
000258  454e3020
00025c  20202020
000260  203a2030
000264  78253038
000268  780a00  
00026b  00                DCB      0
                  |L1.620|
00026c  5245475f          DCB      "REG_CLK_PCLKEN1      : 0x%08x\n",0
000270  434c4b5f
000274  50434c4b
000278  454e3120
00027c  20202020
000280  203a2030
000284  78253038
000288  780a00  
00028b  00                DCB      0
                  |L1.652|
00028c  5245475f          DCB      "REG_CLK_APLLCON      : 0x%08x\n",0
000290  434c4b5f
000294  41504c4c
000298  434f4e20
00029c  20202020
0002a0  203a2030
0002a4  78253038
0002a8  780a00  
0002ab  00                DCB      0
                  |L1.684|
0002ac  5245475f          DCB      "REG_CLK_UPLLCON      : 0x%08x\n",0
0002b0  434c4b5f
0002b4  55504c4c
0002b8  434f4e20
0002bc  20202020
0002c0  203a2030
0002c4  78253038
0002c8  780a00  
0002cb  00                DCB      0
                  |L1.716|
0002cc  5245475f          DCB      "REG_CLK_PLLSTBCNTR   : 0x%08x\n\n",0
0002d0  434c4b5f
0002d4  504c4c53
0002d8  5442434e
0002dc  54522020
0002e0  203a2030
0002e4  78253038
0002e8  780a0a00
                  |L1.748|
0002ec  5245475f          DCB      "REG_SYS_PWRON        : 0x%08x\n\n",0
0002f0  5359535f
0002f4  5057524f
0002f8  4e202020
0002fc  20202020
000300  203a2030
000304  78253038
000308  780a0a00
                  |L1.780|
00030c  5245475f          DCB      "REG_SYS_GPA_MFPL     : 0x%08x\n",0
000310  5359535f
000314  4750415f
000318  4d46504c
00031c  20202020
000320  203a2030
000324  78253038
000328  780a00  
00032b  00                DCB      0
                  |L1.812|
00032c  5245475f          DCB      "REG_SYS_GPA_MFPH     : 0x%08x\n",0
000330  5359535f
000334  4750415f
000338  4d465048
00033c  20202020
000340  203a2030
000344  78253038
000348  780a00  
00034b  00                DCB      0
                  |L1.844|
                          DCD      0xb8003000
                  |L1.848|
000350  5245475f          DCB      "REG_GPIOA_DIR        : 0x%08x\n\n",0
000354  4750494f
000358  415f4449
00035c  52202020
000360  20202020
000364  203a2030
000368  78253038
00036c  780a0a00
                  |L1.880|
000370  5245475f          DCB      "REG_SYS_GPB_MFPL     : 0x%08x\n",0
000374  5359535f
000378  4750425f
00037c  4d46504c
000380  20202020
000384  203a2030
000388  78253038
00038c  780a00  
00038f  00                DCB      0
                  |L1.912|
000390  5245475f          DCB      "REG_SYS_GPB_MFPH     : 0x%08x\n",0
000394  5359535f
000398  4750425f
00039c  4d465048
0003a0  20202020
0003a4  203a2030
0003a8  78253038
0003ac  780a00  
0003af  00                DCB      0
                  |L1.944|
0003b0  5245475f          DCB      "REG_GPIOB_DIR        : 0x%08x\n\n",0
0003b4  4750494f
0003b8  425f4449
0003bc  52202020
0003c0  20202020
0003c4  203a2030
0003c8  78253038
0003cc  780a0a00
                  |L1.976|
0003d0  5245475f          DCB      "REG_SYS_GPC_MFPL     : 0x%08x\n",0
0003d4  5359535f
0003d8  4750435f
0003dc  4d46504c
0003e0  20202020
0003e4  203a2030
0003e8  78253038
0003ec  780a00  
0003ef  00                DCB      0
                  |L1.1008|
0003f0  5245475f          DCB      "REG_SYS_GPC_MFPH     : 0x%08x\n",0
0003f4  5359535f
0003f8  4750435f
0003fc  4d465048
000400  20202020
000404  203a2030
000408  78253038
00040c  780a00  
00040f  00                DCB      0
                  |L1.1040|
000410  5245475f          DCB      "REG_GPIOC_DIR        : 0x%08x\n\n",0
000414  4750494f
000418  435f4449
00041c  52202020
000420  20202020
000424  203a2030
000428  78253038
00042c  780a0a00
                  |L1.1072|
000430  5245475f          DCB      "REG_SYS_GPD_MFPL     : 0x%08x\n",0
000434  5359535f
000438  4750445f
00043c  4d46504c
000440  20202020
000444  203a2030
000448  78253038
00044c  780a00  
00044f  00                DCB      0
                  |L1.1104|
000450  5245475f          DCB      "REG_SYS_GPD_MFPH     : 0x%08x\n",0
000454  5359535f
000458  4750445f
00045c  4d465048
000460  20202020
000464  203a2030
000468  78253038
00046c  780a00  
00046f  00                DCB      0
                  |L1.1136|
000470  5245475f          DCB      "REG_GPIOD_DIR        : 0x%08x\n\n",0
000474  4750494f
000478  445f4449
00047c  52202020
000480  20202020
000484  203a2030
000488  78253038
00048c  780a0a00
                  |L1.1168|
000490  5245475f          DCB      "REG_SYS_GPE_MFPL     : 0x%08x\n",0
000494  5359535f
000498  4750455f
00049c  4d46504c
0004a0  20202020
0004a4  203a2030
0004a8  78253038
0004ac  780a00  
0004af  00                DCB      0
                  |L1.1200|
0004b0  5245475f          DCB      "REG_SYS_GPE_MFPH     : 0x%08x\n",0
0004b4  5359535f
0004b8  4750455f
0004bc  4d465048
0004c0  20202020
0004c4  203a2030
0004c8  78253038
0004cc  780a00  
0004cf  00                DCB      0
                  |L1.1232|
0004d0  5245475f          DCB      "REG_GPIOE_DIR        : 0x%08x\n\n",0
0004d4  4750494f
0004d8  455f4449
0004dc  52202020
0004e0  20202020
0004e4  203a2030
0004e8  78253038
0004ec  780a0a00
                  |L1.1264|
0004f0  5245475f          DCB      "REG_SYS_GPF_MFPL     : 0x%08x\n",0
0004f4  5359535f
0004f8  4750465f
0004fc  4d46504c
000500  20202020
000504  203a2030
000508  78253038
00050c  780a00  
00050f  00                DCB      0
                  |L1.1296|
000510  5245475f          DCB      "REG_SYS_GPF_MFPH     : 0x%08x\n",0
000514  5359535f
000518  4750465f
00051c  4d465048
000520  20202020
000524  203a2030
000528  78253038
00052c  780a00  
00052f  00                DCB      0
                  |L1.1328|
000530  5245475f          DCB      "REG_GPIOF_DIR        : 0x%08x\n\n",0
000534  4750494f
000538  465f4449
00053c  52202020
000540  20202020
000544  203a2030
000548  78253038
00054c  780a0a00
                  |L1.1360|
000550  5245475f          DCB      "REG_SYS_GPG_MFPL     : 0x%08x\n",0
000554  5359535f
000558  4750475f
00055c  4d46504c
000560  20202020
000564  203a2030
000568  78253038
00056c  780a00  
00056f  00                DCB      0
                  |L1.1392|
000570  5245475f          DCB      "REG_SYS_GPG_MFPH     : 0x%08x\n",0
000574  5359535f
000578  4750475f
00057c  4d465048
000580  20202020
000584  203a2030
000588  78253038
00058c  780a00  
00058f  00                DCB      0
                  |L1.1424|
000590  5245475f          DCB      "REG_GPIOG_DIR        : 0x%08x\n\n",0
000594  4750494f
000598  475f4449
00059c  52202020
0005a0  20202020
0005a4  203a2030
0005a8  78253038
0005ac  780a0a00
                  |L1.1456|
0005b0  e59010a8          LDR      r1,[r0,#0xa8]
0005b4  e28f0080          ADR      r0,|L1.1596|
0005b8  ebfffffe          BL       sysprintf
;;;173        sysprintf("REG_SYS_GPH_MFPH     : 0x%08x\n", inpw(REG_SYS_GPH_MFPH));
0005bc  e3a0020b          MOV      r0,#0xb0000000
0005c0  e59010ac          LDR      r1,[r0,#0xac]
0005c4  e28f0090          ADR      r0,|L1.1628|
0005c8  ebfffffe          BL       sysprintf
;;;174        sysprintf("REG_GPIOH_DIR        : 0x%08x\n\n", inpw(REG_GPIOH_DIR));
0005cc  e51f0288          LDR      r0,|L1.844|
0005d0  e59011c0          LDR      r1,[r0,#0x1c0]
0005d4  e28f00a0          ADR      r0,|L1.1660|
0005d8  ebfffffe          BL       sysprintf
;;;175        
;;;176        sysprintf("REG_SYS_GPI_MFPL     : 0x%08x\n", inpw(REG_SYS_GPI_MFPL));
0005dc  e3a0020b          MOV      r0,#0xb0000000
0005e0  e59010b0          LDR      r1,[r0,#0xb0]
0005e4  e28f00b0          ADR      r0,|L1.1692|
0005e8  ebfffffe          BL       sysprintf
;;;177        sysprintf("REG_SYS_GPI_MFPH     : 0x%08x\n", inpw(REG_SYS_GPI_MFPH));
0005ec  e3a0020b          MOV      r0,#0xb0000000
0005f0  e59010b4          LDR      r1,[r0,#0xb4]
0005f4  e28f00c0          ADR      r0,|L1.1724|
0005f8  ebfffffe          BL       sysprintf
;;;178        sysprintf("REG_GPIOI_DIR        : 0x%08x\n\n", inpw(REG_GPIOI_DIR));
0005fc  e51f02b8          LDR      r0,|L1.844|
000600  e5901200          LDR      r1,[r0,#0x200]
000604  e28f00d0          ADR      r0,|L1.1756|
000608  ebfffffe          BL       sysprintf
;;;179    
;;;180        sysprintf("REG_SYS_GPJ_MFPL     : 0x%08x\n", inpw(REG_SYS_GPJ_MFPL));
00060c  e3a0020b          MOV      r0,#0xb0000000
000610  e59010b8          LDR      r1,[r0,#0xb8]
000614  e28f00e0          ADR      r0,|L1.1788|
000618  ebfffffe          BL       sysprintf
;;;181        sysprintf("REG_GPIOJ_DIR        : 0x%08x\n\n", inpw(REG_GPIOJ_DIR));
00061c  e51f02d8          LDR      r0,|L1.844|
000620  e5901240          LDR      r1,[r0,#0x240]
000624  e28f00f0          ADR      r0,|L1.1820|
000628  ebfffffe          BL       sysprintf
;;;182        
;;;183        sysprintf("*** showReg [%s] end ***\n", str);
00062c  e1a01004          MOV      r1,r4
000630  e28f0f41          ADR      r0,|L1.1852|
000634  ebfffffe          BL       sysprintf
;;;184    }
000638  e8bd8010          POP      {r4,pc}
                  |L1.1596|
00063c  5245475f          DCB      "REG_SYS_GPH_MFPL     : 0x%08x\n",0
000640  5359535f
000644  4750485f
000648  4d46504c
00064c  20202020
000650  203a2030
000654  78253038
000658  780a00  
00065b  00                DCB      0
                  |L1.1628|
00065c  5245475f          DCB      "REG_SYS_GPH_MFPH     : 0x%08x\n",0
000660  5359535f
000664  4750485f
000668  4d465048
00066c  20202020
000670  203a2030
000674  78253038
000678  780a00  
00067b  00                DCB      0
                  |L1.1660|
00067c  5245475f          DCB      "REG_GPIOH_DIR        : 0x%08x\n\n",0
000680  4750494f
000684  485f4449
000688  52202020
00068c  20202020
000690  203a2030
000694  78253038
000698  780a0a00
                  |L1.1692|
00069c  5245475f          DCB      "REG_SYS_GPI_MFPL     : 0x%08x\n",0
0006a0  5359535f
0006a4  4750495f
0006a8  4d46504c
0006ac  20202020
0006b0  203a2030
0006b4  78253038
0006b8  780a00  
0006bb  00                DCB      0
                  |L1.1724|
0006bc  5245475f          DCB      "REG_SYS_GPI_MFPH     : 0x%08x\n",0
0006c0  5359535f
0006c4  4750495f
0006c8  4d465048
0006cc  20202020
0006d0  203a2030
0006d4  78253038
0006d8  780a00  
0006db  00                DCB      0
                  |L1.1756|
0006dc  5245475f          DCB      "REG_GPIOI_DIR        : 0x%08x\n\n",0
0006e0  4750494f
0006e4  495f4449
0006e8  52202020
0006ec  20202020
0006f0  203a2030
0006f4  78253038
0006f8  780a0a00
                  |L1.1788|
0006fc  5245475f          DCB      "REG_SYS_GPJ_MFPL     : 0x%08x\n",0
000700  5359535f
000704  47504a5f
000708  4d46504c
00070c  20202020
000710  203a2030
000714  78253038
000718  780a00  
00071b  00                DCB      0
                  |L1.1820|
00071c  5245475f          DCB      "REG_GPIOJ_DIR        : 0x%08x\n\n",0
000720  4750494f
000724  4a5f4449
000728  52202020
00072c  20202020
000730  203a2030
000734  78253038
000738  780a0a00
                  |L1.1852|
00073c  2a2a2a20          DCB      "*** showReg [%s] end ***\n",0
000740  73686f77
000744  52656720
000748  5b25735d
00074c  20656e64
000750  202a2a2a
000754  0a00    
000756  00                DCB      0
000757  00                DCB      0
                          ENDP

                  backupReg PROC
;;;186    
;;;187    static void backupReg(void)
000758  e12fff1e          BX       lr
;;;188    {
;;;189        //showReg("backupReg enter");
;;;190        //REG_CLK_HCLKENTmp = inpw(REG_CLK_HCLKEN);
;;;191        //outpw(REG_CLK_HCLKEN, 0x00000501);
;;;192        
;;;193        //REG_CLK_PCLKEN0Tmp = inpw(REG_CLK_PCLKEN0);
;;;194        //outpw(REG_CLK_PCLKEN0, 0x0000000c);
;;;195        
;;;196        //REG_CLK_PCLKEN1Tmp = inpw(REG_CLK_PCLKEN1);
;;;197        //outpw(REG_CLK_PCLKEN1, 0x00000000);
;;;198        //showReg("backupReg exit");
;;;199    }
;;;200    static void restoreReg(void)
                          ENDP

                  restoreReg PROC
00075c  e12fff1e          BX       lr
;;;201    {
;;;202        //showReg("restoreReg enter");
;;;203        //outpw(REG_CLK_HCLKEN , REG_CLK_HCLKENTmp);
;;;204       // outpw(REG_CLK_PCLKEN0 , REG_CLK_PCLKEN0Tmp);
;;;205        //outpw(REG_CLK_PCLKEN1 , REG_CLK_PCLKEN1Tmp);
;;;206        //showReg("restoreReg exit");
;;;207    }
;;;208    
                          ENDP

                  RTC_Releative_AlarmISR PROC
                  |L1.1888|
;;;209    
;;;210    VOID RTC_Releative_AlarmISR(void)
000760  e3a00001          MOV      r0,#1
;;;211    {
;;;212        //sysprintf("   Relative Alarm!!\n");
;;;213        g_bAlarm = TRUE;
000764  e59f1478          LDR      r1,|L1.3044|
000768  e5c10000          STRB     r0,[r1,#0]  ; g_bAlarm
;;;214    }
00076c  e12fff1e          BX       lr
;;;215    static BOOL PowerDrvPreOffCallback(int flag)
                          ENDP

                  PowerDrvPreOffCallback PROC
000770  e1a01000          MOV      r1,r0
;;;216    {
;;;217        BOOL reVal = TRUE;
000774  e3a00001          MOV      r0,#1
;;;218        //sysprintf("### Power OFF Callback [%s] ###\r\n", powerDrvPowerCallabck.drvName);    
;;;219        return reVal;    
;;;220    }
000778  e12fff1e          BX       lr
;;;221    static BOOL PowerDrvOffCallback(int flag)
                          ENDP

                  PowerDrvOffCallback PROC
00077c  e1a01000          MOV      r1,r0
;;;222    {
;;;223        BOOL reVal = TRUE;
000780  e3a00001          MOV      r0,#1
;;;224        //sysprintf("### Power OFF Callback [%s] ###\r\n", powerDrvPowerCallabck.drvName);    
;;;225        return reVal;    
;;;226    }
000784  e12fff1e          BX       lr
;;;227    static BOOL PowerDrvOnCallback(int flag)
                          ENDP

                  PowerDrvOnCallback PROC
000788  e1a01000          MOV      r1,r0
;;;228    {
;;;229        BOOL reVal = TRUE;
00078c  e3a00001          MOV      r0,#1
;;;230        //sysprintf("### Power ON Callback [%s] ###\r\n", powerDrvPowerCallabck.drvName);    
;;;231        return reVal;    
;;;232    }
000790  e12fff1e          BX       lr
;;;233    static BOOL PowerDrvCheckStatus(int flag)
                          ENDP

                  PowerDrvCheckStatus PROC
000794  e92d4070          PUSH     {r4-r6,lr}
;;;234    {
000798  e1a05000          MOV      r5,r0
;;;235        #if(1)
;;;236        BOOL reVal = FALSE;
00079c  e3a04000          MOV      r4,#0
;;;237        //sysprintf("### Power STATUS Callback [%s] ###\r\n", powerDrvPowerCallabck.drvName); 
;;;238        //sysprintf(" PowerCheckStatus:  GPIO_ReadBit(EINT_PORT, EINT_BIT) = %d\n", GPIO_ReadBit(EINT_PORT, EINT_BIT));
;;;239        #if(1)
;;;240        if(GPIO_ReadBit(GPIOJ, BIT4) == 1)
0007a0  e3a01010          MOV      r1,#0x10
0007a4  e3a00d09          MOV      r0,#0x240
0007a8  ebfffffe          BL       GPIO_ReadBit
0007ac  e3500001          CMP      r0,#1
0007b0  1a000007          BNE      |L1.2004|
;;;241        {        
;;;242            sysDelay(10/portTICK_RATE_MS);//100ms
0007b4  e3a00001          MOV      r0,#1
0007b8  ebfffffe          BL       sysDelay
;;;243            if(GPIO_ReadBit(GPIOJ, BIT4) == 1)
0007bc  e3a01010          MOV      r1,#0x10
0007c0  e3a00d09          MOV      r0,#0x240
0007c4  ebfffffe          BL       GPIO_ReadBit
0007c8  e3500001          CMP      r0,#1
0007cc  1a000000          BNE      |L1.2004|
;;;244            {        
;;;245                //sysDelay(100);//1000ms
;;;246                reVal = TRUE;
0007d0  e3a04001          MOV      r4,#1
                  |L1.2004|
;;;247            }        
;;;248        }
;;;249        #endif
;;;250        return reVal; 
0007d4  e1a00004          MOV      r0,r4
;;;251        #else
;;;252        BOOL reVal = FALSE;
;;;253        //sysprintf("### Power STATUS Callback [%s] ###\r\n", powerDrvPowerCallabck.drvName); 
;;;254        //sysprintf(" PowerCheckStatus:  GPIO_ReadBit(EINT_PORT, EINT_BIT) = %d\n", GPIO_ReadBit(EINT_PORT, EINT_BIT));
;;;255        if(GPIO_ReadBit(EINT_PORT, EINT_BIT) == 1)
;;;256        {        
;;;257            sysDelay(10/portTICK_RATE_MS);//100ms
;;;258            if(GPIO_ReadBit(EINT_PORT, EINT_BIT) == 1)
;;;259            {        
;;;260                //sysDelay(100);//1000ms
;;;261                reVal = TRUE;
;;;262            }        
;;;263        }
;;;264        return reVal; 
;;;265        #endif    
;;;266    }
0007d8  e8bd8070          POP      {r4-r6,pc}
;;;267    static BOOL processPreOffCallback(void)
                          ENDP

                  processPreOffCallback PROC
0007dc  e92d4070          PUSH     {r4-r6,lr}
;;;268    {
;;;269        int i;
;;;270        BOOL suspendFlag = TRUE;
0007e0  e3a05001          MOV      r5,#1
;;;271        #if(BUILD_DEBUG_VERSION)
;;;272        sysprintf(" >~> Pre OFF >> Start...\r\n"); 
;;;273        #endif
;;;274        for(i=0; i<regCallbackIndex; i++)
0007e4  e3a04000          MOV      r4,#0
0007e8  ea00000a          B        |L1.2072|
                  |L1.2028|
;;;275        {  
;;;276            if(mPowerCallbackFunc[i]->powerPreOffCallback(BatteryCheckPowerDownCondition()))
0007ec  ebfffffe          BL       BatteryCheckPowerDownCondition
0007f0  e1a06000          MOV      r6,r0
0007f4  e59f03ec          LDR      r0,|L1.3048|
0007f8  e7900104          LDR      r0,[r0,r4,LSL #2]
0007fc  e5901004          LDR      r1,[r0,#4]
000800  e1a00006          MOV      r0,r6
000804  e12fff31          BLX      r1
000808  e3500000          CMP      r0,#0
00080c  1a000000          BNE      |L1.2068|
;;;277            {
;;;278                //sysprintf(" >~> Pre OFF [%d] >> %s is OK...\r\n", i, mPowerCallbackFunc[i]->drvName); 
;;;279            }
;;;280            else
;;;281            { 
;;;282                suspendFlag = FALSE;
000810  e3a05000          MOV      r5,#0
                  |L1.2068|
000814  e2844001          ADD      r4,r4,#1              ;274
                  |L1.2072|
000818  e59f03cc          LDR      r0,|L1.3052|
00081c  e5900000          LDR      r0,[r0,#0]            ;274  ; regCallbackIndex
000820  e1540000          CMP      r4,r0                 ;274
000824  bafffff0          BLT      |L1.2028|
;;;283                #if(BUILD_DEBUG_VERSION)
;;;284                sysprintf(" !!! Pre OFF [%d] >> %s is ERROR...\r\n", i, mPowerCallbackFunc[i]->drvName);   
;;;285                #endif            
;;;286            }
;;;287        }
;;;288        #if(BUILD_DEBUG_VERSION)
;;;289        if(suspendFlag)
;;;290            sysprintf(" <~< Pre OFF << OK...\r\n"); 
;;;291        else
;;;292            sysprintf(" <~< Pre OFF << ERROR...\r\n");
;;;293        #endif
;;;294        return suspendFlag;
000828  e1a00005          MOV      r0,r5
;;;295    }
00082c  e8bd8070          POP      {r4-r6,pc}
;;;296    static BOOL processOffCallback(void)
                          ENDP

                  processOffCallback PROC
000830  e92d4070          PUSH     {r4-r6,lr}
;;;297    {
;;;298        int i;
;;;299        BOOL suspendFlag = TRUE;
000834  e3a05001          MOV      r5,#1
;;;300        #if(BUILD_DEBUG_VERSION)
;;;301        sysprintf(" >!> OFF >> Start...\r\n"); 
;;;302        #endif
;;;303        for(i=0; i<regCallbackIndex; i++)
000838  e3a04000          MOV      r4,#0
00083c  ea00000a          B        |L1.2156|
                  |L1.2112|
;;;304        {  
;;;305            if(mPowerCallbackFunc[i]->powerOffCallback(BatteryCheckPowerDownCondition()))
000840  ebfffffe          BL       BatteryCheckPowerDownCondition
000844  e1a06000          MOV      r6,r0
000848  e59f0398          LDR      r0,|L1.3048|
00084c  e7900104          LDR      r0,[r0,r4,LSL #2]
000850  e5901008          LDR      r1,[r0,#8]
000854  e1a00006          MOV      r0,r6
000858  e12fff31          BLX      r1
00085c  e3500000          CMP      r0,#0
000860  1a000000          BNE      |L1.2152|
;;;306            {
;;;307                //sysprintf(" >!> OFF [%d] >> %s is OK...\r\n", i, mPowerCallbackFunc[i]->drvName); 
;;;308            }
;;;309            else
;;;310            { 
;;;311                suspendFlag = FALSE;
000864  e3a05000          MOV      r5,#0
                  |L1.2152|
000868  e2844001          ADD      r4,r4,#1              ;303
                  |L1.2156|
00086c  e59f0378          LDR      r0,|L1.3052|
000870  e5900000          LDR      r0,[r0,#0]            ;303  ; regCallbackIndex
000874  e1540000          CMP      r4,r0                 ;303
000878  bafffff0          BLT      |L1.2112|
;;;312                #if(BUILD_DEBUG_VERSION)
;;;313                sysprintf(" !!! OFF [%d] >> %s is ERROR...\r\n", i, mPowerCallbackFunc[i]->drvName);   
;;;314                #endif            
;;;315            }
;;;316        }
;;;317        #if(BUILD_DEBUG_VERSION)
;;;318        if(suspendFlag)
;;;319            sysprintf(" <!< OFF << OK...\r\n"); 
;;;320        else
;;;321            sysprintf(" <!< OFF << ERROR...\r\n");
;;;322        #endif
;;;323        return suspendFlag;
00087c  e1a00005          MOV      r0,r5
;;;324    }
000880  e8bd8070          POP      {r4-r6,pc}
;;;325    static BOOL processOnCallback(void)
                          ENDP

                  processOnCallback PROC
000884  e92d4070          PUSH     {r4-r6,lr}
;;;326    {
;;;327        int i;
;;;328        BOOL suspendFlag = TRUE;
000888  e3a05001          MOV      r5,#1
;;;329        //for(i=0; i<regCallbackIndex; i++)
;;;330        #if(BUILD_DEBUG_VERSION)
;;;331        sysprintf(" >^> ON >> Start...\r\n"); 
;;;332        #endif
;;;333        
;;;334        for(i=regCallbackIndex-1; i>=0; i--)
00088c  e59f0358          LDR      r0,|L1.3052|
000890  e5900000          LDR      r0,[r0,#0]  ; regCallbackIndex
000894  e2404001          SUB      r4,r0,#1
000898  ea000009          B        |L1.2244|
                  |L1.2204|
;;;335        {  
;;;336            if(mPowerCallbackFunc[i]->powerOnCallback(wakeupSource))
00089c  e59f0344          LDR      r0,|L1.3048|
0008a0  e7900104          LDR      r0,[r0,r4,LSL #2]
0008a4  e590100c          LDR      r1,[r0,#0xc]
0008a8  e59f0340          LDR      r0,|L1.3056|
0008ac  e5d00000          LDRB     r0,[r0,#0]  ; wakeupSource
0008b0  e12fff31          BLX      r1
0008b4  e3500000          CMP      r0,#0
0008b8  1a000000          BNE      |L1.2240|
;;;337            {
;;;338                //sysprintf(" >^> ON [%d] >> %s is OK...\r\n", i, mPowerCallbackFunc[i]->drvName); 
;;;339            }
;;;340            else
;;;341            { 
;;;342                suspendFlag = FALSE;
0008bc  e3a05000          MOV      r5,#0
                  |L1.2240|
0008c0  e2444001          SUB      r4,r4,#1              ;334
                  |L1.2244|
0008c4  e3540000          CMP      r4,#0                 ;334
0008c8  aafffff3          BGE      |L1.2204|
;;;343                #if(BUILD_DEBUG_VERSION)
;;;344                sysprintf(" !!! ON [%d] >> %s is ERROR...\r\n", i, mPowerCallbackFunc[i]->drvName); 
;;;345                #endif            
;;;346            }
;;;347        }
;;;348        #if(BUILD_DEBUG_VERSION)
;;;349        if(suspendFlag)
;;;350            sysprintf(" <^< ON << OK...\r\n"); 
;;;351        else
;;;352            sysprintf(" <^< ON << ERROR...\r\n");
;;;353        #endif
;;;354        return suspendFlag;
0008cc  e1a00005          MOV      r0,r5
;;;355    }
0008d0  e8bd8070          POP      {r4-r6,pc}
;;;356    static BOOL processStatusCallback(void)
                          ENDP

                  processStatusCallback PROC
0008d4  e92d4070          PUSH     {r4-r6,lr}
;;;357    {
;;;358        int i;
;;;359        BOOL suspendFlag = TRUE;
0008d8  e3a05001          MOV      r5,#1
;;;360        if(regCallbackIndex > 0)
0008dc  e59f0308          LDR      r0,|L1.3052|
0008e0  e5900000          LDR      r0,[r0,#0]  ; regCallbackIndex
0008e4  e3500000          CMP      r0,#0
0008e8  da000001          BLE      |L1.2292|
;;;361            sysprintf("\r\n <*< STATUS Busy: ");  
0008ec  e28f0c03          ADR      r0,|L1.3060|
0008f0  ebfffffe          BL       sysprintf
                  |L1.2292|
;;;362        for(i=0; i<regCallbackIndex; i++)
0008f4  e3a04000          MOV      r4,#0
0008f8  ea00000f          B        |L1.2364|
                  |L1.2300|
;;;363        {  
;;;364            if(mPowerCallbackFunc[i]->powerStatusCallback(BatteryCheckPowerDownCondition()))
0008fc  ebfffffe          BL       BatteryCheckPowerDownCondition
000900  e1a06000          MOV      r6,r0
000904  e59f02dc          LDR      r0,|L1.3048|
000908  e7900104          LDR      r0,[r0,r4,LSL #2]
00090c  e5901010          LDR      r1,[r0,#0x10]
000910  e1a00006          MOV      r0,r6
000914  e12fff31          BLX      r1
000918  e3500000          CMP      r0,#0
00091c  1a000005          BNE      |L1.2360|
;;;365            {
;;;366                //sysprintf("    >> STATUS : [%d]>> %s is OK...\r\n", i, mPowerCallbackFunc[i]->drvName); 
;;;367            }
;;;368            else
;;;369            { 
;;;370                suspendFlag = FALSE;
000920  e3a05000          MOV      r5,#0
;;;371                //#if(BUILD_DEBUG_VERSION)
;;;372                //sysprintf(" >*> STATUS [%d]>> %s is Busy...\r\n", i, mPowerCallbackFunc[i]->drvName);  
;;;373                sysprintf("%s ", mPowerCallbackFunc[i]->drvName); 
000924  e59f02bc          LDR      r0,|L1.3048|
000928  e7900104          LDR      r0,[r0,r4,LSL #2]
00092c  e5901000          LDR      r1,[r0,#0]
000930  e28f0fb5          ADR      r0,|L1.3084|
000934  ebfffffe          BL       sysprintf
                  |L1.2360|
000938  e2844001          ADD      r4,r4,#1              ;362
                  |L1.2364|
00093c  e59f02a8          LDR      r0,|L1.3052|
000940  e5900000          LDR      r0,[r0,#0]            ;362  ; regCallbackIndex
000944  e1540000          CMP      r4,r0                 ;362
000948  baffffeb          BLT      |L1.2300|
;;;374                //#endif  
;;;375                //break;
;;;376            }
;;;377        }
;;;378        if(regCallbackIndex > 0)
00094c  e59f0298          LDR      r0,|L1.3052|
000950  e5900000          LDR      r0,[r0,#0]  ; regCallbackIndex
000954  e3500000          CMP      r0,#0
000958  da000001          BLE      |L1.2404|
;;;379            sysprintf(" >*>\r\n");  
00095c  e28f0fab          ADR      r0,|L1.3088|
000960  ebfffffe          BL       sysprintf
                  |L1.2404|
;;;380        return suspendFlag;
000964  e1a00005          MOV      r0,r5
;;;381    }
000968  e8bd8070          POP      {r4-r6,pc}
;;;382    
                          ENDP

                  powerSendStatusData PROC
;;;383    static void powerSendStatusData(void)
00096c  e92d4010          PUSH     {r4,lr}
;;;384    {   
;;;385        sysprintf(">> powerSendStatusData: wakeupSource = %d Enter....\n", wakeupSource);
000970  e59f0278          LDR      r0,|L1.3056|
000974  e5d01000          LDRB     r1,[r0,#0]  ; wakeupSource
000978  e28f0fa6          ADR      r0,|L1.3096|
00097c  ebfffffe          BL       sysprintf
;;;386        switch(wakeupSource)
000980  e59f0268          LDR      r0,|L1.3056|
000984  e5d00000          LDRB     r0,[r0,#0]  ; wakeupSource
000988  e3500001          CMP      r0,#1
00098c  0a000006          BEQ      |L1.2476|
000990  e3500003          CMP      r0,#3
000994  0a00000e          BEQ      |L1.2516|
000998  e3500004          CMP      r0,#4
00099c  0a000007          BEQ      |L1.2496|
0009a0  e3500005          CMP      r0,#5
0009a4  1a000014          BNE      |L1.2556|
0009a8  ea00000e          B        |L1.2536|
                  |L1.2476|
;;;387        {
;;;388            case WAKEUP_SOURCE_RTC:
0009ac  e1a00000          MOV      r0,r0
;;;389                DataProcessSendStatusData(0, "RTC_Wakeup");     
0009b0  e28f1fa6          ADR      r1,|L1.3152|
0009b4  e3a00000          MOV      r0,#0
0009b8  ebfffffe          BL       DataProcessSendStatusData
;;;390                break;
0009bc  ea000013          B        |L1.2576|
                  |L1.2496|
;;;391            case WAKEUP_SOURCE_USER:
0009c0  e1a00000          MOV      r0,r0
;;;392                DataProcessSendStatusData(0, "User_Wakeup");     
0009c4  e28f1e29          ADR      r1,|L1.3164|
0009c8  e3a00000          MOV      r0,#0
0009cc  ebfffffe          BL       DataProcessSendStatusData
;;;393                break;
0009d0  ea00000e          B        |L1.2576|
                  |L1.2516|
;;;394            case WAKEUP_SOURCE_DIP:
0009d4  e1a00000          MOV      r0,r0
;;;395                DataProcessSendStatusData(0, "DIP_Wakeup");     
0009d8  e28f1fa2          ADR      r1,|L1.3176|
0009dc  e3a00000          MOV      r0,#0
0009e0  ebfffffe          BL       DataProcessSendStatusData
;;;396                break;
0009e4  ea000009          B        |L1.2576|
                  |L1.2536|
;;;397            case WAKEUP_SOURCE_OTHER:
0009e8  e1a00000          MOV      r0,r0
;;;398                DataProcessSendStatusData(0, "Other_Wakeup");     
0009ec  e28f1d0a          ADR      r1,|L1.3188|
0009f0  e3a00000          MOV      r0,#0
0009f4  ebfffffe          BL       DataProcessSendStatusData
;;;399                break;        
0009f8  ea000004          B        |L1.2576|
                  |L1.2556|
;;;400            default:
0009fc  e1a00000          MOV      r0,r0
;;;401                DataProcessSendStatusData(0, "Unknown_Wakeup");     
000a00  e28f1f9f          ADR      r1,|L1.3204|
000a04  e3a00000          MOV      r0,#0
000a08  ebfffffe          BL       DataProcessSendStatusData
;;;402                break;
000a0c  e1a00000          MOV      r0,r0
                  |L1.2576|
000a10  e1a00000          MOV      r0,r0                 ;390
;;;403        }   
;;;404        sysprintf(">> powerSendStatusData: wakeupSource = %d Exit....\n", wakeupSource);
000a14  e59f01d4          LDR      r0,|L1.3056|
000a18  e5d01000          LDRB     r1,[r0,#0]  ; wakeupSource
000a1c  e28f0e27          ADR      r0,|L1.3220|
000a20  ebfffffe          BL       sysprintf
;;;405    }
000a24  e8bd8010          POP      {r4,pc}
;;;406    static void vPowerDrvTask( void *pvParameters )
                          ENDP

                  PowerClearISR PROC
;;;624     
;;;625    void PowerClearISR(void)
000a28  e92d4010          PUSH     {r4,lr}
;;;626    {   
;;;627        //sysprintf(">> PowerClearISR: REG_SYS_WKUPSSR = 0x%08x....\n", inpw(REG_SYS_WKUPSSR));
;;;628        if(inpw(REG_SYS_WKUPSSR) & (1<<24))
000a2c  e3a0020b          MOV      r0,#0xb0000000
000a30  e590005c          LDR      r0,[r0,#0x5c]
000a34  e3100401          TST      r0,#0x1000000
000a38  0a00000c          BEQ      |L1.2672|
;;;629        {
;;;630            outpw(REG_SYS_WKUPSSR,(1<<24));
000a3c  e3a00401          MOV      r0,#0x1000000
000a40  e3a0120b          MOV      r1,#0xb0000000
000a44  e581005c          STR      r0,[r1,#0x5c]
;;;631            RTC_Ioctl(0,RTC_IOC_DISABLE_INT,RTC_RELATIVE_ALARM_INT,0);
000a48  e3a03000          MOV      r3,#0
000a4c  e3a02010          MOV      r2,#0x10
000a50  e3a01005          MOV      r1,#5
000a54  e1a00003          MOV      r0,r3
000a58  ebfffffe          BL       RTC_Ioctl
;;;632            wakeupSource = WAKEUP_SOURCE_RTC;
000a5c  e3a00001          MOV      r0,#1
000a60  e59f1188          LDR      r1,|L1.3056|
000a64  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;633            sysprintf(" ***** RTC Wakeup ***** \n\n");          
000a68  e28f0f96          ADR      r0,|L1.3272|
000a6c  ebfffffe          BL       sysprintf
                  |L1.2672|
;;;634        }    
;;;635        #if(0)
;;;636        if(inpw(REG_SYS_WKUPSSR) & (1<<EINT_BIT_DEFINE))
;;;637        {
;;;638            outpw(REG_SYS_WKUPSSR,(1<<EINT_BIT_DEFINE));
;;;639            GPIO_ClrISRBit(EINT_PORT, EINT_BIT);  
;;;640            GPIO_DisableTriggerType(EINT_PORT, EINT_BIT);  
;;;641            wakeupSource = WAKEUP_SOURCE_USER;
;;;642            sysprintf(" ***** EINT%d Wakeup ***** \n\n", EINT_BIT_DEFINE);
;;;643        }
;;;644        #endif
;;;645        if(inpw(REG_SYS_WKUPSSR) & (1<<2))
000a70  e3a0020b          MOV      r0,#0xb0000000
000a74  e590005c          LDR      r0,[r0,#0x5c]
000a78  e3100004          TST      r0,#4
000a7c  0a000008          BEQ      |L1.2724|
;;;646        {
;;;647            outpw(REG_SYS_WKUPSSR,(1<<2));
000a80  e3a00004          MOV      r0,#4
000a84  e3a0120b          MOV      r1,#0xb0000000
000a88  e581005c          STR      r0,[r1,#0x5c]
;;;648            wakeupSource = WAKEUP_SOURCE_DIP;
000a8c  e3a00003          MOV      r0,#3
000a90  e59f1158          LDR      r1,|L1.3056|
000a94  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;649            sysprintf(" ***** EINT%d Wakeup ***** \n\n", 2);
000a98  e3a01002          MOV      r1,#2
000a9c  e28f0d09          ADR      r0,|L1.3300|
000aa0  ebfffffe          BL       sysprintf
                  |L1.2724|
;;;650        }
;;;651        if(inpw(REG_SYS_WKUPSSR) & (1<<3))
000aa4  e3a0020b          MOV      r0,#0xb0000000
000aa8  e590005c          LDR      r0,[r0,#0x5c]
000aac  e3100008          TST      r0,#8
000ab0  0a000008          BEQ      |L1.2776|
;;;652        {
;;;653            outpw(REG_SYS_WKUPSSR,(1<<3));
000ab4  e3a00008          MOV      r0,#8
000ab8  e3a0120b          MOV      r1,#0xb0000000
000abc  e581005c          STR      r0,[r1,#0x5c]
;;;654            wakeupSource = WAKEUP_SOURCE_DIP;
000ac0  e3a00003          MOV      r0,#3
000ac4  e59f1124          LDR      r1,|L1.3056|
000ac8  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;655            sysprintf(" ***** EINT%d Wakeup ***** \n\n", 3);
000acc  e3a01003          MOV      r1,#3
000ad0  e28f0f83          ADR      r0,|L1.3300|
000ad4  ebfffffe          BL       sysprintf
                  |L1.2776|
;;;656        }
;;;657        if(inpw(REG_SYS_WKUPSSR) & (1<<4))
000ad8  e3a0020b          MOV      r0,#0xb0000000
000adc  e590005c          LDR      r0,[r0,#0x5c]
000ae0  e3100010          TST      r0,#0x10
000ae4  0a000008          BEQ      |L1.2828|
;;;658        {
;;;659            outpw(REG_SYS_WKUPSSR,(1<<4));
000ae8  e3a00010          MOV      r0,#0x10
000aec  e3a0120b          MOV      r1,#0xb0000000
000af0  e581005c          STR      r0,[r1,#0x5c]
;;;660            wakeupSource = WAKEUP_SOURCE_DIP;
000af4  e3a00003          MOV      r0,#3
000af8  e59f10f0          LDR      r1,|L1.3056|
000afc  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;661            sysprintf(" ***** EINT%d Wakeup ***** \n\n", 4);
000b00  e3a01004          MOV      r1,#4
000b04  e28f0f76          ADR      r0,|L1.3300|
000b08  ebfffffe          BL       sysprintf
                  |L1.2828|
;;;662        }
;;;663        if(inpw(REG_SYS_WKUPSSR) & (1<<5))
000b0c  e3a0020b          MOV      r0,#0xb0000000
000b10  e590005c          LDR      r0,[r0,#0x5c]
000b14  e3100020          TST      r0,#0x20
000b18  0a000008          BEQ      |L1.2880|
;;;664        {
;;;665            outpw(REG_SYS_WKUPSSR,(1<<5));
000b1c  e3a00020          MOV      r0,#0x20
000b20  e3a0120b          MOV      r1,#0xb0000000
000b24  e581005c          STR      r0,[r1,#0x5c]
;;;666            wakeupSource = WAKEUP_SOURCE_BATTERY;
000b28  e3a00006          MOV      r0,#6
000b2c  e59f10bc          LDR      r1,|L1.3056|
000b30  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;667            sysprintf(" ***** EINT%d Wakeup ***** \n\n", 5);
000b34  e3a01005          MOV      r1,#5
000b38  e28f0f69          ADR      r0,|L1.3300|
000b3c  ebfffffe          BL       sysprintf
                  |L1.2880|
;;;668        }
;;;669        if(inpw(REG_SYS_WKUPSSR) & (1<<6))
000b40  e3a0020b          MOV      r0,#0xb0000000
000b44  e590005c          LDR      r0,[r0,#0x5c]
000b48  e3100040          TST      r0,#0x40
000b4c  0a000008          BEQ      |L1.2932|
;;;670        {
;;;671            outpw(REG_SYS_WKUPSSR,(1<<6));
000b50  e3a00040          MOV      r0,#0x40
000b54  e3a0120b          MOV      r1,#0xb0000000
000b58  e581005c          STR      r0,[r1,#0x5c]
;;;672            wakeupSource = WAKEUP_SOURCE_BATTERY;
000b5c  e3a00006          MOV      r0,#6
000b60  e59f1088          LDR      r1,|L1.3056|
000b64  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;673            sysprintf(" ***** EINT%d Wakeup ***** \n\n", 6);
000b68  e3a01006          MOV      r1,#6
000b6c  e28f0e17          ADR      r0,|L1.3300|
000b70  ebfffffe          BL       sysprintf
                  |L1.2932|
;;;674        }
;;;675        if(inpw(REG_SYS_WKUPSSR) & (1<<1))
000b74  e3a0020b          MOV      r0,#0xb0000000
000b78  e590005c          LDR      r0,[r0,#0x5c]
000b7c  e3100002          TST      r0,#2
000b80  0a000007          BEQ      |L1.2980|
;;;676        {
;;;677            outpw(REG_SYS_WKUPSSR,(1<<1));
000b84  e3a00002          MOV      r0,#2
000b88  e3a0120b          MOV      r1,#0xb0000000
000b8c  e581005c          STR      r0,[r1,#0x5c]
;;;678            wakeupSource = WAKEUP_SOURCE_KEYPAD;
000b90  e59f1058          LDR      r1,|L1.3056|
000b94  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;679            sysprintf(" ***** EINT%d Wakeup ***** \n\n", 1);
000b98  e3a01001          MOV      r1,#1
000b9c  e28f0d05          ADR      r0,|L1.3300|
000ba0  ebfffffe          BL       sysprintf
                  |L1.2980|
;;;680        }
;;;681        if(inpw(REG_SYS_WKUPSSR) != 0x0)
000ba4  e3a0020b          MOV      r0,#0xb0000000
000ba8  e590005c          LDR      r0,[r0,#0x5c]
000bac  e3500000          CMP      r0,#0
000bb0  0a000006          BEQ      |L1.3024|
;;;682        {
;;;683            wakeupSource = WAKEUP_SOURCE_OTHER;
000bb4  e3a00005          MOV      r0,#5
000bb8  e59f1030          LDR      r1,|L1.3056|
000bbc  e5c10000          STRB     r0,[r1,#0]  ; wakeupSource
;;;684            sysprintf(" ***** Other Wakeup 0x%08x *****\n\n",inpw(REG_SYS_WKUPSSR));
000bc0  e3a0020b          MOV      r0,#0xb0000000
000bc4  e590105c          LDR      r1,[r0,#0x5c]
000bc8  e28f0f4d          ADR      r0,|L1.3332|
000bcc  ebfffffe          BL       sysprintf
                  |L1.3024|
;;;685        }
;;;686        
;;;687        outpw(REG_SYS_WKUPSSR , inpw(REG_SYS_WKUPSSR)); //clean wakeup status
000bd0  e3a0020b          MOV      r0,#0xb0000000
000bd4  e590005c          LDR      r0,[r0,#0x5c]
000bd8  e3a0120b          MOV      r1,#0xb0000000
000bdc  e581005c          STR      r0,[r1,#0x5c]
;;;688    }
000be0  e8bd8010          POP      {r4,pc}
                  |L1.3044|
                          DCD      g_bAlarm
                  |L1.3048|
                          DCD      mPowerCallbackFunc
                  |L1.3052|
                          DCD      regCallbackIndex
                  |L1.3056|
                          DCD      wakeupSource
                  |L1.3060|
000bf4  0d0a203c          DCB      "\r\n <*< STATUS Busy: ",0
000bf8  2a3c2053
000bfc  54415455
000c00  53204275
000c04  73793a20
000c08  00      
000c09  00                DCB      0
000c0a  00                DCB      0
000c0b  00                DCB      0
                  |L1.3084|
000c0c  25732000          DCB      "%s ",0
                  |L1.3088|
000c10  203e2a3e          DCB      " >*>\r\n",0
000c14  0d0a00  
000c17  00                DCB      0
                  |L1.3096|
000c18  3e3e2070          DCB      ">> powerSendStatusData: wakeupSource = %d Enter....\n",0
000c1c  6f776572
000c20  53656e64
000c24  53746174
000c28  75734461
000c2c  74613a20
000c30  77616b65
000c34  7570536f
000c38  75726365
000c3c  203d2025
000c40  6420456e
000c44  7465722e
000c48  2e2e2e0a
000c4c  00      
000c4d  00                DCB      0
000c4e  00                DCB      0
000c4f  00                DCB      0
                  |L1.3152|
000c50  5254435f          DCB      "RTC_Wakeup",0
000c54  57616b65
000c58  757000  
000c5b  00                DCB      0
                  |L1.3164|
000c5c  55736572          DCB      "User_Wakeup",0
000c60  5f57616b
000c64  65757000
                  |L1.3176|
000c68  4449505f          DCB      "DIP_Wakeup",0
000c6c  57616b65
000c70  757000  
000c73  00                DCB      0
                  |L1.3188|
000c74  4f746865          DCB      "Other_Wakeup",0
000c78  725f5761
000c7c  6b657570
000c80  00      
000c81  00                DCB      0
000c82  00                DCB      0
000c83  00                DCB      0
                  |L1.3204|
000c84  556e6b6e          DCB      "Unknown_Wakeup",0
000c88  6f776e5f
000c8c  57616b65
000c90  757000  
000c93  00                DCB      0
                  |L1.3220|
000c94  3e3e2070          DCB      ">> powerSendStatusData: wakeupSource = %d Exit....\n",0
000c98  6f776572
000c9c  53656e64
000ca0  53746174
000ca4  75734461
000ca8  74613a20
000cac  77616b65
000cb0  7570536f
000cb4  75726365
000cb8  203d2025
000cbc  64204578
000cc0  69742e2e
000cc4  2e2e0a00
                  |L1.3272|
000cc8  202a2a2a          DCB      " ***** RTC Wakeup ***** \n\n",0
000ccc  2a2a2052
000cd0  54432057
000cd4  616b6575
000cd8  70202a2a
000cdc  2a2a2a20
000ce0  0a0a00  
000ce3  00                DCB      0
                  |L1.3300|
000ce4  202a2a2a          DCB      " ***** EINT%d Wakeup ***** \n\n",0
000ce8  2a2a2045
000cec  494e5425
000cf0  64205761
000cf4  6b657570
000cf8  202a2a2a
000cfc  2a2a200a
000d00  0a00    
000d02  00                DCB      0
000d03  00                DCB      0
                  |L1.3332|
000d04  202a2a2a          DCB      " ***** Other Wakeup 0x%08x *****\n\n",0
000d08  2a2a204f
000d0c  74686572
000d10  2057616b
000d14  65757020
000d18  30782530
000d1c  3878202a
000d20  2a2a2a2a
000d24  0a0a00  
000d27  00                DCB      0
                          ENDP

                  PowerSuspend PROC
;;;527    
;;;528    BOOL PowerSuspend(UINT32 wakeUpSource)
000d28  e92d4030          PUSH     {r4,r5,lr}
;;;529    {
000d2c  e24dd044          SUB      sp,sp,#0x44
000d30  e1a04000          MOV      r4,r0
;;;530        UINT32 reg;
;;;531        RTC_TIME_DATA_T sCurTime;
;;;532        /* Get the currnet time */
;;;533        //if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &sCurTime))
;;;534        if(TariffGetNextWakeupTime(&wakeUpTime, &sCurTime))
000d34  e28d1014          ADD      r1,sp,#0x14
000d38  e59f023c          LDR      r0,|L1.3964|
000d3c  ebfffffe          BL       TariffGetNextWakeupTime
000d40  e3500000          CMP      r0,#0
000d44  0a000063          BEQ      |L1.3800|
;;;535        {
;;;536            mTotalWakeupTick = xTaskGetTickCount() - mWakeupTick;
000d48  ebfffffe          BL       xTaskGetTickCount
000d4c  e59f122c          LDR      r1,|L1.3968|
000d50  e5911000          LDR      r1,[r1,#0]  ; mWakeupTick
000d54  e0400001          SUB      r0,r0,r1
000d58  e59f1224          LDR      r1,|L1.3972|
000d5c  e5810000          STR      r0,[r1,#0]  ; mTotalWakeupTick
;;;537            sysprintf("\r\n *** Suspend [Total Wakeup Tick: %d] ***\n", mTotalWakeupTick);
000d60  e2810000          ADD      r0,r1,#0
000d64  e5901000          LDR      r1,[r0,#0]  ; mTotalWakeupTick
000d68  e28f0f86          ADR      r0,|L1.3976|
000d6c  ebfffffe          BL       sysprintf
;;;538            //showReg("PowerSuspend");   
;;;539    
;;;540            #if(0)
;;;541            /* Confingure PF11 to rising-edge trigger */
;;;542            GPIO_EnableTriggerType(EINT_PORT, EINT_BIT, FALLING);
;;;543            #endif
;;;544            
;;;545            //#if(BUILD_RELEASE_VERSION || BUILD_PRE_RELEASE_VERSION)
;;;546            //wakeUpTime = 60 - sCurTime.u32cSecond;
;;;547            //if(wakeUpTime < 5)
;;;548            //    wakeUpTime = wakeUpTime + 60;
;;;549            //#endif
;;;550            if(wakeUpSource != 0xffffffff)
000d70  e3740001          CMN      r4,#1
000d74  0a00000b          BEQ      |L1.3496|
;;;551            {
;;;552                sysprintf("Before suspend(wakeUpSource = 0x%08x): %d/%02d/%02d %02d:%02d:%02d\n", 
000d78  e28d3018          ADD      r3,sp,#0x18
000d7c  e893000b          LDM      r3,{r0,r1,r3}
000d80  e59d2028          LDR      r2,[sp,#0x28]
000d84  e58d000c          STR      r0,[sp,#0xc]
000d88  e58d1008          STR      r1,[sp,#8]
000d8c  e1cd20f0          STRD     r2,r3,[sp,#0]
000d90  e1a01004          MOV      r1,r4
000d94  e59f0218          LDR      r0,|L1.4020|
000d98  e59d2030          LDR      r2,[sp,#0x30]
000d9c  e59d302c          LDR      r3,[sp,#0x2c]
000da0  ebfffffe          BL       sysprintf
000da4  ea000011          B        |L1.3568|
                  |L1.3496|
;;;553                        wakeUpSource, sCurTime.u32Year, sCurTime.u32cMonth, sCurTime.u32cDay, sCurTime.u32cHour, sCurTime.u32cMinute, sCurTime.u32cSecond);
;;;554            }
;;;555            else
;;;556            {
;;;557                sysprintf("Before suspend(wakeup time = %d): %d/%02d/%02d %02d:%02d:%02d\n", 
000da8  e28d3018          ADD      r3,sp,#0x18
000dac  e893000b          LDM      r3,{r0,r1,r3}
000db0  e59d2028          LDR      r2,[sp,#0x28]
000db4  e58d000c          STR      r0,[sp,#0xc]
000db8  e58d1008          STR      r1,[sp,#8]
000dbc  e1cd20f0          STRD     r2,r3,[sp,#0]
000dc0  e59f01b4          LDR      r0,|L1.3964|
000dc4  e59d2030          LDR      r2,[sp,#0x30]
000dc8  e59d302c          LDR      r3,[sp,#0x2c]
000dcc  e5901000          LDR      r1,[r0,#0]  ; wakeUpTime
000dd0  e28f0e1e          ADR      r0,|L1.4024|
000dd4  ebfffffe          BL       sysprintf
;;;558                        wakeUpTime, sCurTime.u32Year, sCurTime.u32cMonth, sCurTime.u32cDay, sCurTime.u32cHour, sCurTime.u32cMinute, sCurTime.u32cSecond);
;;;559                /* Enable RTC Tick Interrupt and install tick call back function */
;;;560                RTC_Ioctl(0, RTC_IOC_SET_RELEATIVE_ALARM, wakeUpTime, (UINT32)RTC_Releative_AlarmISR);
000dd8  e24f3d1a          ADR      r3,|L1.1888|
000ddc  e59f0198          LDR      r0,|L1.3964|
000de0  e3a01012          MOV      r1,#0x12
000de4  e5902000          LDR      r2,[r0,#0]  ; wakeUpTime
000de8  e3a00000          MOV      r0,#0
000dec  ebfffffe          BL       RTC_Ioctl
                  |L1.3568|
;;;561            }
;;;562            
;;;563    
;;;564            #if(FREERTOS_USE_1000MHZ)
;;;565            sysDelay(5/portTICK_RATE_MS);
;;;566            #else
;;;567            sysDelay(10/portTICK_RATE_MS);
000df0  e3a00001          MOV      r0,#1
000df4  ebfffffe          BL       sysDelay
;;;568            #endif
;;;569    
;;;570            outpw(REG_SYS_WKUPSSR , inpw(REG_SYS_WKUPSSR)); // clean wakeup status
000df8  e3a0020b          MOV      r0,#0xb0000000
000dfc  e590005c          LDR      r0,[r0,#0x5c]
000e00  e3a0120b          MOV      r1,#0xb0000000
000e04  e581005c          STR      r0,[r1,#0x5c]
;;;571    
;;;572            outpw(0xB00001FC, 0x59);
000e08  e3a00059          MOV      r0,#0x59
000e0c  e58101fc          STR      r0,[r1,#0x1fc]
;;;573            outpw(0xB00001FC, 0x16);
000e10  e3a00016          MOV      r0,#0x16
000e14  e58101fc          STR      r0,[r1,#0x1fc]
;;;574            outpw(0xB00001FC, 0x88);
000e18  e3a00088          MOV      r0,#0x88
000e1c  e58101fc          STR      r0,[r1,#0x1fc]
;;;575            while(!(inpw(0xB00001FC) & 0x1));
000e20  e1a00000          MOV      r0,r0
                  |L1.3620|
000e24  e3a0020b          MOV      r0,#0xb0000000
000e28  e59001fc          LDR      r0,[r0,#0x1fc]
000e2c  e3100001          TST      r0,#1
000e30  0afffffb          BEQ      |L1.3620|
;;;576    #if(0)
;;;577            outpw(REG_SYS_WKUPSER , (1 << EINT_BIT_DEFINE)| (1 << 4)| (1 << 5)| (1 << 6)| (1 << 7)|(1 << 24)); // wakeup source select EINT? DIP(EINT4, EINT5, EINT6) Keypad(EINT7) RTC
;;;578    #else
;;;579            if(wakeUpSource != 0xffffffff)
000e34  e3740001          CMN      r4,#1
000e38  0a000002          BEQ      |L1.3656|
;;;580            {
;;;581                outpw(REG_SYS_WKUPSER , wakeUpSource); // wakeup source select Battery(EINT5, EINT6) 
000e3c  e3a0020b          MOV      r0,#0xb0000000
000e40  e5804058          STR      r4,[r0,#0x58]
000e44  ea000002          B        |L1.3668|
                  |L1.3656|
;;;582            }
;;;583            else
;;;584            {
;;;585                outpw(REG_SYS_WKUPSER , (1 << 2)| (1 << 3)| (1 << 4)| (1 << 1)|(1 << 24)); // wakeup source select DIP(EINT2, EINT3, EINT4) Keypad(EINT1) RTC
000e48  e59f01a8          LDR      r0,|L1.4088|
000e4c  e3a0120b          MOV      r1,#0xb0000000
000e50  e5810058          STR      r0,[r1,#0x58]
                  |L1.3668|
;;;586                //outpw(REG_SYS_WKUPSER , (1 << 2)| (1 << 3)| (1 << 4)| (1 << 5)| (1 << 6)| (1 << 1)|(1 << 24)); // wakeup source select DIP(EINT2, EINT3, EINT4) Battery(EINT5, EINT6) Keypad(EINT1) RTC
;;;587            }
;;;588    #endif             
;;;589            reg=inpw(REG_CLK_PMCON);   //Enable NUC970 to enter power down mode
000e54  e3a0020b          MOV      r0,#0xb0000000
000e58  e5905200          LDR      r5,[r0,#0x200]
;;;590            reg = reg & (0xFF00FFFE);
000e5c  e3c558ff          BIC      r5,r5,#0xff0000
000e60  e3c55001          BIC      r5,r5,#1
;;;591            outpw(REG_CLK_PMCON,reg);
000e64  e5805200          STR      r5,[r0,#0x200]
;;;592            
;;;593            backupReg();    
000e68  ebfffffe          BL       backupReg
;;;594            __wfi();    
000e6c  ebfffffe          BL       __wfi
;;;595            restoreReg();
000e70  ebfffffe          BL       restoreReg
;;;596            
;;;597            outpw(REG_SYS_WKUPSER , 0); // wakeup source select NONE  
000e74  e3a00000          MOV      r0,#0
000e78  e3a0120b          MOV      r1,#0xb0000000
000e7c  e5810058          STR      r0,[r1,#0x58]
;;;598            mWakeupTick = xTaskGetTickCount();
000e80  ebfffffe          BL       xTaskGetTickCount
000e84  e59f10f4          LDR      r1,|L1.3968|
000e88  e5810000          STR      r0,[r1,#0]  ; mWakeupTick
;;;599            /* Get the currnet time */
;;;600            if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &sCurTime))
000e8c  e28d1014          ADD      r1,sp,#0x14
000e90  e3a00000          MOV      r0,#0
000e94  ebfffffe          BL       RTC_Read
000e98  e3500000          CMP      r0,#0
000e9c  1a00000a          BNE      |L1.3788|
;;;601            {
;;;602                sysprintf("After suspend: %d/%02d/%02d %02d:%02d:%02d\n",
000ea0  e59d0018          LDR      r0,[sp,#0x18]
000ea4  e59d201c          LDR      r2,[sp,#0x1c]
000ea8  e59d1020          LDR      r1,[sp,#0x20]
000eac  e58d0008          STR      r0,[sp,#8]
000eb0  e88d0006          STM      sp,{r1,r2}
000eb4  e28f0d05          ADR      r0,|L1.4092|
000eb8  e59d1030          LDR      r1,[sp,#0x30]
000ebc  e59d202c          LDR      r2,[sp,#0x2c]
000ec0  e59d3028          LDR      r3,[sp,#0x28]
000ec4  ebfffffe          BL       sysprintf
000ec8  ea000004          B        |L1.3808|
                  |L1.3788|
;;;603                    sCurTime.u32Year, sCurTime.u32cMonth, sCurTime.u32cDay, sCurTime.u32cHour, sCurTime.u32cMinute, sCurTime.u32cSecond);
;;;604            }
;;;605            else
;;;606            {
;;;607                sysprintf("After suspend: RTC_Read error\n");
000ecc  e28f0f55          ADR      r0,|L1.4136|
000ed0  ebfffffe          BL       sysprintf
000ed4  ea000001          B        |L1.3808|
                  |L1.3800|
;;;608            }
;;;609        }
;;;610        else
;;;611        {
;;;612            sysprintf("\r\n *** Suspend ignore [RTC_Read error] ***\n");
000ed8  e28f0f5a          ADR      r0,|L1.4168|
000edc  ebfffffe          BL       sysprintf
                  |L1.3808|
;;;613        }
;;;614        
;;;615        return TRUE;
000ee0  e3a00001          MOV      r0,#1
000ee4  e28dd044          ADD      sp,sp,#0x44
;;;616        
;;;617    }
000ee8  e8bd8030          POP      {r4,r5,pc}
;;;618    void PowerSetWakeupTime(UINT32 time)
                          ENDP

                  PowerDrvResetSystem PROC
;;;715    #define LOCKREG  do{outpw(REG_SYS_REGWPCTL,0x00);}while(0)
;;;716    void PowerDrvResetSystem(void)
000eec  e92d4010          PUSH     {r4,lr}
;;;717    {
;;;718        sysprintf(" ***** PowerDrvResetSystem 0x%08x *****\n\n",inpw(REG_SYS_AHBIPRST));
000ef0  e3a0020b          MOV      r0,#0xb0000000
000ef4  e5901060          LDR      r1,[r0,#0x60]
000ef8  e28f0f5d          ADR      r0,|L1.4212|
000efc  ebfffffe          BL       sysprintf
;;;719        UNLOCKREG;
000f00  e1a00000          MOV      r0,r0
                  |L1.3844|
000f04  e3a00059          MOV      r0,#0x59
000f08  e3a0120b          MOV      r1,#0xb0000000
000f0c  e58101fc          STR      r0,[r1,#0x1fc]
000f10  e3a00016          MOV      r0,#0x16
000f14  e58101fc          STR      r0,[r1,#0x1fc]
000f18  e3a00088          MOV      r0,#0x88
000f1c  e58101fc          STR      r0,[r1,#0x1fc]
000f20  e3a0020b          MOV      r0,#0xb0000000
000f24  e59001fc          LDR      r0,[r0,#0x1fc]
000f28  e3500000          CMP      r0,#0
000f2c  0afffff4          BEQ      |L1.3844|
;;;720        outpw(REG_SYS_AHBIPRST,0x1);
000f30  e3a00001          MOV      r0,#1
000f34  e5810060          STR      r0,[r1,#0x60]
;;;721        UNLOCKREG;
000f38  e1a00000          MOV      r0,r0
                  |L1.3900|
000f3c  e3a00059          MOV      r0,#0x59
000f40  e3a0120b          MOV      r1,#0xb0000000
000f44  e58101fc          STR      r0,[r1,#0x1fc]
000f48  e3a00016          MOV      r0,#0x16
000f4c  e58101fc          STR      r0,[r1,#0x1fc]
000f50  e3a00088          MOV      r0,#0x88
000f54  e58101fc          STR      r0,[r1,#0x1fc]
000f58  e3a0020b          MOV      r0,#0xb0000000
000f5c  e59001fc          LDR      r0,[r0,#0x1fc]
000f60  e3500000          CMP      r0,#0
000f64  0afffff4          BEQ      |L1.3900|
;;;722        sysprintf(" ***** PowerDrvResetSystem 0x%08x *****\n\n",inpw(REG_SYS_AHBIPRST));
000f68  e3a0020b          MOV      r0,#0xb0000000
000f6c  e5901060          LDR      r1,[r0,#0x60]
000f70  e28f00fc          ADR      r0,|L1.4212|
000f74  ebfffffe          BL       sysprintf
;;;723    }
000f78  e8bd8010          POP      {r4,pc}
                  |L1.3964|
                          DCD      wakeUpTime
                  |L1.3968|
                          DCD      mWakeupTick
                  |L1.3972|
                          DCD      mTotalWakeupTick
                  |L1.3976|
000f88  0d0a202a          DCB      "\r\n *** Suspend [Total Wakeup Tick: %d] ***\n",0
000f8c  2a2a2053
000f90  75737065
000f94  6e64205b
000f98  546f7461
000f9c  6c205761
000fa0  6b657570
000fa4  20546963
000fa8  6b3a2025
000fac  645d202a
000fb0  2a2a0a00
                  |L1.4020|
                          DCD      ||.constdata||
                  |L1.4024|
000fb8  4265666f          DCB      "Before suspend(wakeup time = %d): %d/%02d/%02d %02d:%02"
000fbc  72652073
000fc0  75737065
000fc4  6e642877
000fc8  616b6575
000fcc  70207469
000fd0  6d65203d
000fd4  20256429
000fd8  3a202564
000fdc  2f253032
000fe0  642f2530
000fe4  32642025
000fe8  3032643a
000fec  253032  
000fef  643a2530          DCB      "d:%02d\n",0
000ff3  32640a00
000ff7  00                DCB      0
                  |L1.4088|
                          DCD      0x0100001e
                  |L1.4092|
000ffc  41667465          DCB      "After suspend: %d/%02d/%02d %02d:%02d:%02d\n",0
001000  72207375
001004  7370656e
001008  643a2025
00100c  642f2530
001010  32642f25
001014  30326420
001018  25303264
00101c  3a253032
001020  643a2530
001024  32640a00
                  |L1.4136|
001028  41667465          DCB      "After suspend: RTC_Read error\n",0
00102c  72207375
001030  7370656e
001034  643a2052
001038  54435f52
00103c  65616420
001040  6572726f
001044  720a00  
001047  00                DCB      0
                  |L1.4168|
001048  0d0a202a          DCB      "\r\n *** Suspend ignore [RTC_Read error] ***\n",0
00104c  2a2a2053
001050  75737065
001054  6e642069
001058  676e6f72
00105c  65205b52
001060  54435f52
001064  65616420
001068  6572726f
00106c  725d202a
001070  2a2a0a00
                  |L1.4212|
001074  202a2a2a          DCB      " ***** PowerDrvResetSystem 0x%08x *****\n\n",0
001078  2a2a2050
00107c  6f776572
001080  44727652
001084  65736574
001088  53797374
00108c  656d2030
001090  78253038
001094  78202a2a
001098  2a2a2a0a
00109c  0a00    
00109e  00                DCB      0
00109f  00                DCB      0
                          ENDP

                  vPowerDrvTask PROC
;;;405    }
;;;406    static void vPowerDrvTask( void *pvParameters )
0010a0  e3a04001          MOV      r4,#1
;;;407    {
;;;408        BOOL suspendFlag = TRUE;
;;;409        sysprintf("\r\n !!! vPowerDrvTask Waiting... !!!\r\n"); 
0010a4  e28f0e21          ADR      r0,|L1.4796|
0010a8  ebfffffe          BL       sysprintf
;;;410        while(SysGetBooted() == FALSE)
0010ac  ea000001          B        |L1.4280|
                  |L1.4272|
;;;411        {
;;;412            vTaskDelay(500/portTICK_RATE_MS);
0010b0  e3a00032          MOV      r0,#0x32
0010b4  ebfffffe          BL       vTaskDelay
                  |L1.4280|
0010b8  ebfffffe          BL       SysGetBooted
0010bc  e3500000          CMP      r0,#0                 ;410
0010c0  0afffffa          BEQ      |L1.4272|
;;;413        }
;;;414        vTaskDelay(1000/portTICK_RATE_MS);
0010c4  e3a00064          MOV      r0,#0x64
0010c8  ebfffffe          BL       vTaskDelay
;;;415        sysprintf("\r\n !!! vPowerDrvTask Going... !!!\r\n");  
0010cc  e28f0e21          ADR      r0,|L1.4836|
0010d0  ebfffffe          BL       sysprintf
;;;416        for(;;)
0010d4  e1a00000          MOV      r0,r0
                  |L1.4312|
;;;417        {       
;;;418            xSemaphoreTake(xSemaphore, threadWaitTime);               
0010d8  e3a03000          MOV      r3,#0
0010dc  e59f0224          LDR      r0,|L1.4872|
0010e0  e1a01003          MOV      r1,r3
0010e4  e5902000          LDR      r2,[r0,#0]  ; threadWaitTime
0010e8  e59f021c          LDR      r0,|L1.4876|
0010ec  e5900000          LDR      r0,[r0,#0]  ; xSemaphore
0010f0  ebfffffe          BL       xQueueGenericReceive
;;;419            suspendFlag = processStatusCallback(); 
0010f4  ebfffffe          BL       processStatusCallback
0010f8  e1a04000          MOV      r4,r0
;;;420            if(BatteryCheckPowerDownCondition() || (suspendFlag))
0010fc  ebfffffe          BL       BatteryCheckPowerDownCondition
001100  e3500000          CMP      r0,#0
001104  1a000001          BNE      |L1.4368|
001108  e3540000          CMP      r4,#0
00110c  0afffff1          BEQ      |L1.4312|
                  |L1.4368|
;;;421            {
;;;422                processPreOffCallback();
001110  ebfffffe          BL       processPreOffCallback
;;;423                suspendFlag = processOffCallback();
001114  ebfffffe          BL       processOffCallback
001118  e1a04000          MOV      r4,r0
;;;424                if(BatteryCheckPowerDownCondition())
00111c  ebfffffe          BL       BatteryCheckPowerDownCondition
001120  e3500000          CMP      r0,#0
001124  0a000010          BEQ      |L1.4460|
;;;425                {
;;;426                    NT066ESetPower(FALSE);
001128  e3a00000          MOV      r0,#0
00112c  ebfffffe          BL       NT066ESetPower
;;;427                    LedSetPower(FALSE);
001130  e3a00000          MOV      r0,#0
001134  ebfffffe          BL       LedSetPower
;;;428                    EPDShowBGScreen(EPD_PICT_ALL_WHITE_INDEX, TRUE); 
001138  e3a01001          MOV      r1,#1
00113c  e3a00003          MOV      r0,#3
001140  ebfffffe          BL       EPDShowBGScreen
;;;429                    BuzzerPlay(100, 100, 2, TRUE); 
001144  e3a03001          MOV      r3,#1
001148  e3a02002          MOV      r2,#2
00114c  e3a01064          MOV      r1,#0x64
001150  e1a00001          MOV      r0,r1
001154  ebfffffe          BL       BuzzerPlay
;;;430    								//QModemTotalStop();							
;;;431                    PowerSuspend((1 << 5)| (1 << 6));
001158  e3a00060          MOV      r0,#0x60
00115c  ebfffffe          BL       PowerSuspend
;;;432                    PowerClearISR(); 
001160  ebfffffe          BL       PowerClearISR
;;;433    							
;;;434    								//BatterySetSwitch1(TRUE);
;;;435    								//BatterySetSwitch2(TRUE);
;;;436                    //temp
;;;437                    //sysDelay(100/portTICK_RATE_MS);//
;;;438                    //GuiManagerRefreshScreen();
;;;439                    //BuzzerPlay(100, 100, 2, TRUE);
;;;440                    PowerDrvResetSystem();
001164  ebfffffe          BL       PowerDrvResetSystem
001168  ea000009          B        |L1.4500|
                  |L1.4460|
;;;441                }
;;;442                else if(suspendFlag)
00116c  e3540000          CMP      r4,#0
001170  0a000005          BEQ      |L1.4492|
;;;443                {
;;;444                    PowerSuspend(0xffffffff);
001174  e3e00000          MVN      r0,#0
001178  ebfffffe          BL       PowerSuspend
;;;445                    PowerClearISR(); 
00117c  ebfffffe          BL       PowerClearISR
;;;446                    //temp
;;;447                    sysDelay(100/portTICK_RATE_MS);//
001180  e3a0000a          MOV      r0,#0xa
001184  ebfffffe          BL       sysDelay
001188  ea000001          B        |L1.4500|
                  |L1.4492|
;;;448                    //powerSendStatusData();
;;;449                }
;;;450                
;;;451                else
;;;452                {
;;;453                    sysprintf("\r\n   !!! ERROR processOffCallback ERROR, ignore PowerSuspend... !!!\r\n");    
00118c  e59f017c          LDR      r0,|L1.4880|
001190  ebfffffe          BL       sysprintf
                  |L1.4500|
;;;454                }
;;;455                processOnCallback();    
001194  ebfffffe          BL       processOnCallback
001198  eaffffce          B        |L1.4312|
;;;456                //vTaskDelay(1000/portTICK_RATE_MS);  
;;;457                //DataProcessSendStatusData(0, "wakeup");   
;;;458                //ModemAgentStartSend(DATA_PROCESS_ID_ESF);            
;;;459            }
;;;460    
;;;461        }
;;;462    }
;;;463    /*-----------------------------------------*/
                          ENDP

                  PowerRegCallback PROC
;;;510    
;;;511    int PowerRegCallback(powerCallbackFunc* callbackFunc)
00119c  e92d4070          PUSH     {r4-r6,lr}
;;;512    {
0011a0  e1a05000          MOV      r5,r0
;;;513        if(regCallbackIndex<MAX_POWER_REG_CALLBACK_NUM)
0011a4  e51f05c0          LDR      r0,|L1.3052|
0011a8  e5900000          LDR      r0,[r0,#0]  ; regCallbackIndex
0011ac  e350000a          CMP      r0,#0xa
0011b0  aa00000e          BGE      |L1.4592|
;;;514        {
;;;515            int reval = regCallbackIndex;
0011b4  e51f05d0          LDR      r0,|L1.3052|
0011b8  e5904000          LDR      r4,[r0,#0]  ; regCallbackIndex
;;;516            regCallbackIndex++;
0011bc  e5900000          LDR      r0,[r0,#0]  ; regCallbackIndex
0011c0  e2800001          ADD      r0,r0,#1
0011c4  e51f15e0          LDR      r1,|L1.3052|
0011c8  e5810000          STR      r0,[r1,#0]  ; regCallbackIndex
;;;517            mPowerCallbackFunc[reval] = callbackFunc;
0011cc  e51f05ec          LDR      r0,|L1.3048|
0011d0  e7805104          STR      r5,[r0,r4,LSL #2]
;;;518            sysprintf(" --###- PowerRegCallback[%s] OK: index = %d ---\n", mPowerCallbackFunc[reval]->drvName, reval);
0011d4  e7900104          LDR      r0,[r0,r4,LSL #2]
0011d8  e1a02004          MOV      r2,r4
0011dc  e5901000          LDR      r1,[r0,#0]
0011e0  e28f0f4b          ADR      r0,|L1.4884|
0011e4  ebfffffe          BL       sysprintf
;;;519            return reval;
0011e8  e1a00004          MOV      r0,r4
                  |L1.4588|
;;;520        }
;;;521        else
;;;522        {
;;;523            sysprintf(" --###- PowerRegCallback[%s] ERROR: regCallbackIndex = %d ---\n", callbackFunc->drvName, regCallbackIndex);
;;;524            return -1;
;;;525        }
;;;526    }
0011ec  e8bd8070          POP      {r4-r6,pc}
                  |L1.4592|
0011f0  e1a00000          MOV      r0,r0                 ;520
0011f4  e51f0610          LDR      r0,|L1.3052|
0011f8  e5951000          LDR      r1,[r5,#0]            ;523
0011fc  e5902000          LDR      r2,[r0,#0]            ;523  ; regCallbackIndex
001200  e28f0d05          ADR      r0,|L1.4936|
001204  ebfffffe          BL       sysprintf
001208  e3e00000          MVN      r0,#0                 ;524
00120c  eafffff6          B        |L1.4588|
;;;527    
                          ENDP

                  PowerDrvInit PROC
;;;465    /*-----------------------------------------*/
;;;466    BOOL PowerDrvInit(BOOL testModeFlag)
001210  e92d401c          PUSH     {r2-r4,lr}
;;;467    {
001214  e1a04000          MOV      r4,r0
;;;468        sysprintf("PowerDrvInit!!\n");
001218  e28f0f5a          ADR      r0,|L1.5000|
00121c  ebfffffe          BL       sysprintf
;;;469        
;;;470        //move to main.c
;;;471        /*
;;;472        RTC_EnableClock(TRUE);
;;;473        // RTC Initialize
;;;474        RTC_Init();
;;;475        */
;;;476        
;;;477        outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
001220  e3a0020b          MOV      r0,#0xb0000000
001224  e5900218          LDR      r0,[r0,#0x218]
001228  e3800008          ORR      r0,r0,#8
00122c  e3a0120b          MOV      r1,#0xb0000000
001230  e5810218          STR      r0,[r1,#0x218]
;;;478    #if(0)
;;;479    #if(EINT_DEFINE == USE_GPF11)
;;;480        /* Set MFP_GPF11 to EINT0 */
;;;481        outpw(REG_SYS_GPF_MFPH,(inpw(REG_SYS_GPF_MFPH) & ~(0xF<<12)) | (0xF<<12));
;;;482    #elif(EINT_DEFINE == USE_GPH0)
;;;483        /* Set MFP_GPH00 to EINT0 */
;;;484        outpw(REG_SYS_GPH_MFPL,(inpw(REG_SYS_GPH_MFPL) & ~(0xF<<0)) | (0xF<<0));
;;;485    #elif(EINT_DEFINE == USE_GPH4)
;;;486        /* Set MFP_GPH04 to EINT4 */
;;;487        outpw(REG_SYS_GPH_MFPL,(inpw(REG_SYS_GPH_MFPL) & ~(0xF<<16)) | (0xF<<16));
;;;488    #elif(EINT_DEFINE == USE_GPH3)
;;;489        /* Set MFP_GPH03 to EINT3 */
;;;490        outpw(REG_SYS_GPH_MFPL,(inpw(REG_SYS_GPH_MFPL) & ~(0xF<<12)) | (0xF<<12));
;;;491    #endif 
;;;492    #endif
;;;493        
;;;494        RTC_Ioctl(0, RTC_IOC_ENABLE_INT, RTC_RELATIVE_ALARM_INT, 0);
001234  e3a03000          MOV      r3,#0
001238  e3a02010          MOV      r2,#0x10
00123c  e3a01004          MOV      r1,#4
001240  e1a00003          MOV      r0,r3
001244  ebfffffe          BL       RTC_Ioctl
;;;495    #if(0)    
;;;496        GPIO_OpenBit(EINT_PORT, EINT_BIT, DIR_INPUT, PULL_UP);
;;;497        GPIO_DisableTriggerType(EINT_PORT, EINT_BIT);
;;;498    #else
;;;499        //GPJ 4
;;;500        outpw(REG_SYS_GPJ_MFPL,(inpw(REG_SYS_GPJ_MFPL) & ~(0xF<<16)) | (0x0<<16));
001248  e3a0020b          MOV      r0,#0xb0000000
00124c  e59000b8          LDR      r0,[r0,#0xb8]
001250  e3c0080f          BIC      r0,r0,#0xf0000
001254  e3a0120b          MOV      r1,#0xb0000000
001258  e58100b8          STR      r0,[r1,#0xb8]
;;;501        GPIO_OpenBit(GPIOJ, BIT4, DIR_INPUT, PULL_UP);
00125c  e3a03001          MOV      r3,#1
001260  e3a02000          MOV      r2,#0
001264  e3a01010          MOV      r1,#0x10
001268  e3a00d09          MOV      r0,#0x240
00126c  ebfffffe          BL       GPIO_OpenBit
;;;502    #endif
;;;503        PowerRegCallback(&powerDrvPowerCallabck);
001270  e59f0120          LDR      r0,|L1.5016|
001274  ebfffffe          BL       PowerRegCallback
;;;504        
;;;505        xSemaphore = xSemaphoreCreateBinary();
001278  e3a02003          MOV      r2,#3
00127c  e3a01000          MOV      r1,#0
001280  e3a00001          MOV      r0,#1
001284  ebfffffe          BL       xQueueGenericCreate
001288  e59f107c          LDR      r1,|L1.4876|
00128c  e5810000          STR      r0,[r1,#0]  ; xSemaphore
;;;506       
;;;507        xTaskCreate( vPowerDrvTask, "PowerDrvTask", 1024*10, NULL, POWER_THREAD_PROI, NULL );
001290  e3a00000          MOV      r0,#0
001294  e3a0100e          MOV      r1,#0xe
001298  e58d0004          STR      r0,[sp,#4]
00129c  e1a03000          MOV      r3,r0
0012a0  e3a02b0a          MOV      r2,#0x2800
0012a4  e58d1000          STR      r1,[sp,#0]
0012a8  e28f10ec          ADR      r1,|L1.5020|
0012ac  e59f00f8          LDR      r0,|L1.5036|
0012b0  ebfffffe          BL       xTaskCreate
;;;508        return TRUE;
0012b4  e3a00001          MOV      r0,#1
;;;509    }
0012b8  e8bd801c          POP      {r2-r4,pc}
                  |L1.4796|
0012bc  0d0a2021          DCB      "\r\n !!! vPowerDrvTask Waiting... !!!\r\n",0
0012c0  21212076
0012c4  506f7765
0012c8  72447276
0012cc  5461736b
0012d0  20576169
0012d4  74696e67
0012d8  2e2e2e20
0012dc  2121210d
0012e0  0a00    
0012e2  00                DCB      0
0012e3  00                DCB      0
                  |L1.4836|
0012e4  0d0a2021          DCB      "\r\n !!! vPowerDrvTask Going... !!!\r\n",0
0012e8  21212076
0012ec  506f7765
0012f0  72447276
0012f4  5461736b
0012f8  20476f69
0012fc  6e672e2e
001300  2e202121
001304  210d0a00
                  |L1.4872|
                          DCD      threadWaitTime
                  |L1.4876|
                          DCD      xSemaphore
                  |L1.4880|
                          DCD      ||.constdata||+0x44
                  |L1.4884|
001314  202d2d23          DCB      " --###- PowerRegCallback[%s] OK: index = %d ---\n",0
001318  23232d20
00131c  506f7765
001320  72526567
001324  43616c6c
001328  6261636b
00132c  5b25735d
001330  204f4b3a
001334  20696e64
001338  6578203d
00133c  20256420
001340  2d2d2d0a
001344  00      
001345  00                DCB      0
001346  00                DCB      0
001347  00                DCB      0
                  |L1.4936|
001348  202d2d23          DCB      " --###- PowerRegCallback[%s] ERROR: regCallbackIndex = "
00134c  23232d20
001350  506f7765
001354  72526567
001358  43616c6c
00135c  6261636b
001360  5b25735d
001364  20455252
001368  4f523a20
00136c  72656743
001370  616c6c62
001374  61636b49
001378  6e646578
00137c  203d20  
00137f  2564202d          DCB      "%d ---\n",0
001383  2d2d0a00
001387  00                DCB      0
                  |L1.5000|
001388  506f7765          DCB      "PowerDrvInit!!\n",0
00138c  72447276
001390  496e6974
001394  21210a00
                  |L1.5016|
                          DCD      powerDrvPowerCallabck
                  |L1.5020|
00139c  506f7765          DCB      "PowerDrvTask",0
0013a0  72447276
0013a4  5461736b
0013a8  00      
0013a9  00                DCB      0
0013aa  00                DCB      0
0013ab  00                DCB      0
                  |L1.5036|
                          DCD      vPowerDrvTask
                          ENDP

                  PowerSetWakeupTime PROC
;;;617    }
;;;618    void PowerSetWakeupTime(UINT32 time)
0013b0  e92d4010          PUSH     {r4,lr}
;;;619    {
0013b4  e1a04000          MOV      r4,r0
;;;620        sysprintf("PowerSetWakeupTime: ori = %d, new = %d\n", wakeUpTime, time);
0013b8  e1a02004          MOV      r2,r4
0013bc  e51f0448          LDR      r0,|L1.3964|
0013c0  e5901000          LDR      r1,[r0,#0]  ; wakeUpTime
0013c4  e28f0078          ADR      r0,|L1.5188|
0013c8  ebfffffe          BL       sysprintf
;;;621        wakeUpTime = time;
0013cc  e51f0458          LDR      r0,|L1.3964|
0013d0  e5804000          STR      r4,[r0,#0]  ; wakeUpTime
;;;622    }
0013d4  e8bd8010          POP      {r4,pc}
;;;623    
                          ENDP

                  PowerGetTotalWakeupTick PROC
;;;692    
;;;693    uint32_t PowerGetTotalWakeupTick(void)
0013d8  e51f045c          LDR      r0,|L1.3972|
;;;694    {
;;;695        return mTotalWakeupTick;
0013dc  e5900000          LDR      r0,[r0,#0]  ; mTotalWakeupTick
;;;696    }
0013e0  e12fff1e          BX       lr
;;;697    
                          ENDP

                  PowerDrvSetEnable PROC
;;;698    void PowerDrvSetEnable(BOOL flag)
0013e4  e92d4010          PUSH     {r4,lr}
;;;699    {
0013e8  e1a04000          MOV      r4,r0
;;;700        if(xSemaphore == NULL)
0013ec  e51f00e8          LDR      r0,|L1.4876|
0013f0  e5900000          LDR      r0,[r0,#0]  ; xSemaphore
0013f4  e3500000          CMP      r0,#0
0013f8  1a000000          BNE      |L1.5120|
                  |L1.5116|
;;;701            return;
;;;702        if(flag)
;;;703        {
;;;704            threadWaitTime = (POWER_DRV_POLLING_TIME/portTICK_RATE_MS);
;;;705        }
;;;706        else
;;;707        {
;;;708            threadWaitTime = portMAX_DELAY;
;;;709        }
;;;710        xSemaphoreGive(xSemaphore);
;;;711    }
0013fc  e8bd8010          POP      {r4,pc}
                  |L1.5120|
001400  e3540000          CMP      r4,#0                 ;702
001404  0a000003          BEQ      |L1.5144|
001408  e3a00096          MOV      r0,#0x96              ;704
00140c  e51f110c          LDR      r1,|L1.4872|
001410  e5810000          STR      r0,[r1,#0]            ;704  ; threadWaitTime
001414  ea000002          B        |L1.5156|
                  |L1.5144|
001418  e3e00000          MVN      r0,#0                 ;708
00141c  e51f111c          LDR      r1,|L1.4872|
001420  e5810000          STR      r0,[r1,#0]            ;708  ; threadWaitTime
                  |L1.5156|
001424  e3a03000          MOV      r3,#0                 ;710
001428  e1a02003          MOV      r2,r3                 ;710
00142c  e1a01003          MOV      r1,r3                 ;710
001430  e51f012c          LDR      r0,|L1.4876|
001434  e5900000          LDR      r0,[r0,#0]            ;710  ; xSemaphore
001438  ebfffffe          BL       xQueueGenericSend
00143c  e1a00000          MOV      r0,r0
001440  eaffffed          B        |L1.5116|
;;;712    /*! Unlock protected register */
                          ENDP

                  |L1.5188|
001444  506f7765          DCB      "PowerSetWakeupTime: ori = %d, new = %d\n",0
001448  72536574
00144c  57616b65
001450  75705469
001454  6d653a20
001458  6f726920
00145c  3d202564
001460  2c206e65
001464  77203d20
001468  25640a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mPowerCallbackFunc
                          %        40

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4265666f          DCB      0x42,0x65,0x66,0x6f
000004  72652073          DCB      0x72,0x65,0x20,0x73
000008  75737065          DCB      0x75,0x73,0x70,0x65
00000c  6e642877          DCB      0x6e,0x64,0x28,0x77
000010  616b6555          DCB      0x61,0x6b,0x65,0x55
000014  70536f75          DCB      0x70,0x53,0x6f,0x75
000018  72636520          DCB      0x72,0x63,0x65,0x20
00001c  3d203078          DCB      0x3d,0x20,0x30,0x78
000020  25303878          DCB      0x25,0x30,0x38,0x78
000024  293a2025          DCB      0x29,0x3a,0x20,0x25
000028  642f2530          DCB      0x64,0x2f,0x25,0x30
00002c  32642f25          DCB      0x32,0x64,0x2f,0x25
000030  30326420          DCB      0x30,0x32,0x64,0x20
000034  25303264          DCB      0x25,0x30,0x32,0x64
000038  3a253032          DCB      0x3a,0x25,0x30,0x32
00003c  643a2530          DCB      0x64,0x3a,0x25,0x30
000040  32640a00          DCB      0x32,0x64,0x0a,0x00
000044  0d0a2020          DCB      0x0d,0x0a,0x20,0x20
000048  20212121          DCB      0x20,0x21,0x21,0x21
00004c  20455252          DCB      0x20,0x45,0x52,0x52
000050  4f522070          DCB      0x4f,0x52,0x20,0x70
000054  726f6365          DCB      0x72,0x6f,0x63,0x65
000058  73734f66          DCB      0x73,0x73,0x4f,0x66
00005c  6643616c          DCB      0x66,0x43,0x61,0x6c
000060  6c626163          DCB      0x6c,0x62,0x61,0x63
000064  6b204552          DCB      0x6b,0x20,0x45,0x52
000068  524f522c          DCB      0x52,0x4f,0x52,0x2c
00006c  2069676e          DCB      0x20,0x69,0x67,0x6e
000070  6f726520          DCB      0x6f,0x72,0x65,0x20
000074  506f7765          DCB      0x50,0x6f,0x77,0x65
000078  72537573          DCB      0x72,0x53,0x75,0x73
00007c  70656e64          DCB      0x70,0x65,0x6e,0x64
000080  2e2e2e20          DCB      0x2e,0x2e,0x2e,0x20
000084  2121210d          DCB      0x21,0x21,0x21,0x0d
000088  0a00              DCB      0x0a,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  205b506f          DCB      " [PowerDrv] ",0
000004  77657244
000008  72765d20
00000c  00      

                          AREA ||.data||, DATA, ALIGN=2

                  g_bAlarm
000000  00                DCB      0x00
                  wakeupSource
000001  000000            DCB      0x00,0x00,0x00
                  wakeUpTime
                          DCD      0x00000005
                  powerDrvPowerCallabck
                          DCD      ||.conststring||
                          DCD      PowerDrvPreOffCallback
                          DCD      PowerDrvOffCallback
                          DCD      PowerDrvOnCallback
                          DCD      PowerDrvCheckStatus
                  regCallbackIndex
                          DCD      0x00000000
                  mWakeupTick
                          DCD      0x00000000
                  mTotalWakeupTick
                          DCD      0x00000000
                  threadWaitTime
                          DCD      0x00000096
                  xSemaphore
                          DCD      0x00000000
                  REG_CLK_HCLKENTmp
                          DCD      0x00000000
                  REG_CLK_PCLKEN0Tmp
                          DCD      0x00000000
                  REG_CLK_PCLKEN1Tmp
                          DCD      0x00000000
