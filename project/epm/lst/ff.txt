; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ff.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ff.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\ff.crf ..\..\common\src\BSP\ThirdParty\FATFS\src\ff.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mem_cpy PROC
;;;463    static
;;;464    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  e92d4030          PUSH     {r4,r5,lr}
;;;465    	BYTE *d = (BYTE*)dst;
000004  e1a03000          MOV      r3,r0
;;;466    	const BYTE *s = (const BYTE*)src;
000008  e1a0c001          MOV      r12,r1
;;;467    
;;;468    #if _WORD_ACCESS == 1
;;;469    	while (cnt >= sizeof (int)) {
;;;470    		*(int*)d = *(int*)s;
;;;471    		d += sizeof (int); s += sizeof (int);
;;;472    		cnt -= sizeof (int);
;;;473    	}
;;;474    #endif
;;;475    	while (cnt--)
00000c  ea000001          B        |L1.24|
                  |L1.16|
;;;476    		*d++ = *s++;
000010  e4dc4001          LDRB     r4,[r12],#1
000014  e4c34001          STRB     r4,[r3],#1
                  |L1.24|
000018  e1b04002          MOVS     r4,r2                 ;475
00001c  e2422001          SUB      r2,r2,#1              ;475
000020  1afffffa          BNE      |L1.16|
;;;477    }
000024  e8bd8030          POP      {r4,r5,pc}
;;;478    
                          ENDP

                  mem_set PROC
;;;480    static
;;;481    void mem_set (void* dst, int val, UINT cnt) {
000028  e92d4010          PUSH     {r4,lr}
;;;482    	BYTE *d = (BYTE*)dst;
00002c  e1a03000          MOV      r3,r0
;;;483    
;;;484    	while (cnt--)
000030  ea000000          B        |L1.56|
                  |L1.52|
;;;485    		*d++ = (BYTE)val;
000034  e4c31001          STRB     r1,[r3],#1
                  |L1.56|
000038  e1b0c002          MOVS     r12,r2                ;484
00003c  e2422001          SUB      r2,r2,#1              ;484
000040  1afffffb          BNE      |L1.52|
;;;486    }
000044  e8bd8010          POP      {r4,pc}
;;;487    
                          ENDP

                  mem_cmp PROC
;;;489    static
;;;490    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000048  e92d40f0          PUSH     {r4-r7,lr}
00004c  e1a03000          MOV      r3,r0
;;;491    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000050  e1a0c003          MOV      r12,r3
000054  e1a04001          MOV      r4,r1
;;;492    	int r = 0;
000058  e3a00000          MOV      r0,#0
;;;493    
;;;494    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00005c  e1a00000          MOV      r0,r0
                  |L1.96|
000060  e1b05002          MOVS     r5,r2
000064  e2422001          SUB      r2,r2,#1
000068  0a000004          BEQ      |L1.128|
00006c  e4dc5001          LDRB     r5,[r12],#1
000070  e4d46001          LDRB     r6,[r4],#1
000074  e0455006          SUB      r5,r5,r6
000078  e1b00005          MOVS     r0,r5
00007c  0afffff7          BEQ      |L1.96|
                  |L1.128|
;;;495    	return r;
;;;496    }
000080  e8bd80f0          POP      {r4-r7,pc}
;;;497    
                          ENDP

                  chk_chr PROC
;;;499    static
;;;500    int chk_chr (const char* str, int chr) {
000084  e1a02000          MOV      r2,r0
;;;501    	while (*str && *str != chr) str++;
000088  ea000000          B        |L1.144|
                  |L1.140|
00008c  e2822001          ADD      r2,r2,#1
                  |L1.144|
000090  e5d20000          LDRB     r0,[r2,#0]
000094  e3500000          CMP      r0,#0
000098  0a000002          BEQ      |L1.168|
00009c  e5d20000          LDRB     r0,[r2,#0]
0000a0  e1500001          CMP      r0,r1
0000a4  1afffff8          BNE      |L1.140|
                  |L1.168|
;;;502    	return *str;
0000a8  e5d20000          LDRB     r0,[r2,#0]
;;;503    }
0000ac  e12fff1e          BX       lr
;;;504    
                          ENDP

                  ff_req_grant PROC
;;;4733   }
;;;4734   int ff_req_grant (_SYNC_t sobj)				/* Lock sync object */
0000b0  e92d4070          PUSH     {r4-r6,lr}
;;;4735   {
0000b4  e1a04000          MOV      r4,r0
;;;4736   	int ret;
;;;4737   	ret = (int)(xSemaphoreTake(sobj, _FS_TIMEOUT) == pdTRUE);	/* FreeRTOS */      
0000b8  e3a03000          MOV      r3,#0
0000bc  e3e02000          MVN      r2,#0
0000c0  e1a01003          MOV      r1,r3
0000c4  e1a00004          MOV      r0,r4
0000c8  ebfffffe          BL       xQueueGenericReceive
0000cc  e3500001          CMP      r0,#1
0000d0  1a000001          BNE      |L1.220|
0000d4  e3a00001          MOV      r0,#1
0000d8  ea000000          B        |L1.224|
                  |L1.220|
0000dc  e3a00000          MOV      r0,#0
                  |L1.224|
0000e0  e1a05000          MOV      r5,r0
;;;4738   	return ret;
0000e4  e1a00005          MOV      r0,r5
;;;4739   }
0000e8  e8bd8070          POP      {r4-r6,pc}
;;;4740   void ff_rel_grant (_SYNC_t sobj)				/* Unlock sync object */
                          ENDP

                  lock_fs PROC
;;;512    static
;;;513    int lock_fs (
0000ec  e92d4010          PUSH     {r4,lr}
;;;514    	FATFS* fs		/* File system object */
;;;515    )
;;;516    {
0000f0  e1a04000          MOV      r4,r0
;;;517    	return ff_req_grant(fs->sobj);
0000f4  e594000c          LDR      r0,[r4,#0xc]
0000f8  ebfffffe          BL       ff_req_grant
;;;518    }
0000fc  e8bd8010          POP      {r4,pc}
;;;519    
                          ENDP

                  ff_rel_grant PROC
;;;4739   }
;;;4740   void ff_rel_grant (_SYNC_t sobj)				/* Unlock sync object */
000100  e92d4010          PUSH     {r4,lr}
;;;4741   {
000104  e1a04000          MOV      r4,r0
;;;4742       xSemaphoreGive(sobj);	/* FreeRTOS */
000108  e3a03000          MOV      r3,#0
00010c  e1a02003          MOV      r2,r3
000110  e1a01003          MOV      r1,r3
000114  e1a00004          MOV      r0,r4
000118  ebfffffe          BL       xQueueGenericSend
;;;4743   }
00011c  e8bd8010          POP      {r4,pc}
;;;4744   int ff_del_syncobj (_SYNC_t sobj)				/* Delete a sync object */
                          ENDP

                  unlock_fs PROC
;;;521    static
;;;522    void unlock_fs (
000120  e92d4070          PUSH     {r4-r6,lr}
;;;523    	FATFS* fs,		/* File system object */
;;;524    	FRESULT res		/* Result code to be returned */
;;;525    )
;;;526    {
000124  e1a05000          MOV      r5,r0
000128  e1a04001          MOV      r4,r1
;;;527    	if (fs &&
00012c  e3550000          CMP      r5,#0
000130  0a000009          BEQ      |L1.348|
;;;528    		res != FR_NOT_ENABLED &&
000134  e354000c          CMP      r4,#0xc
000138  0a000007          BEQ      |L1.348|
;;;529    		res != FR_INVALID_DRIVE &&
00013c  e354000b          CMP      r4,#0xb
000140  0a000005          BEQ      |L1.348|
;;;530    		res != FR_INVALID_OBJECT &&
000144  e3540009          CMP      r4,#9
000148  0a000003          BEQ      |L1.348|
;;;531    		res != FR_TIMEOUT) {
00014c  e354000f          CMP      r4,#0xf
000150  0a000001          BEQ      |L1.348|
;;;532    		ff_rel_grant(fs->sobj);
000154  e595000c          LDR      r0,[r5,#0xc]
000158  ebfffffe          BL       ff_rel_grant
                  |L1.348|
;;;533    	}
;;;534    }
00015c  e8bd8070          POP      {r4-r6,pc}
;;;535    #endif
                          ENDP

                  sync_window PROC
;;;656    static
;;;657    FRESULT sync_window (
000160  e92d41f0          PUSH     {r4-r8,lr}
;;;658    	FATFS* fs		/* File system object */
;;;659    )
;;;660    {
000164  e1a04000          MOV      r4,r0
;;;661    	DWORD wsect;
;;;662    	UINT nf;
;;;663    	FRESULT res = FR_OK;
000168  e3a07000          MOV      r7,#0
;;;664    
;;;665    
;;;666    	if (fs->wflag) {	/* Write back the sector if it is dirty */
00016c  e5d40004          LDRB     r0,[r4,#4]
000170  e3500000          CMP      r0,#0
000174  0a00001c          BEQ      |L1.492|
;;;667    		wsect = fs->winsect;	/* Current sector number */
000178  e5945034          LDR      r5,[r4,#0x34]
;;;668    		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
00017c  e5d40001          LDRB     r0,[r4,#1]
000180  e3a03001          MOV      r3,#1
000184  e1a02005          MOV      r2,r5
000188  e2841038          ADD      r1,r4,#0x38
00018c  ebfffffe          BL       disk_write
000190  e3500000          CMP      r0,#0
000194  0a000001          BEQ      |L1.416|
;;;669    			res = FR_DISK_ERR;
000198  e3a07001          MOV      r7,#1
00019c  ea000012          B        |L1.492|
                  |L1.416|
;;;670    		} else {
;;;671    			fs->wflag = 0;
0001a0  e3a00000          MOV      r0,#0
0001a4  e5c40004          STRB     r0,[r4,#4]
;;;672    			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
0001a8  e5940028          LDR      r0,[r4,#0x28]
0001ac  e0450000          SUB      r0,r5,r0
0001b0  e5941020          LDR      r1,[r4,#0x20]
0001b4  e1500001          CMP      r0,r1
0001b8  2a00000b          BCS      |L1.492|
;;;673    				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
0001bc  e5d46003          LDRB     r6,[r4,#3]
0001c0  ea000007          B        |L1.484|
                  |L1.452|
;;;674    					wsect += fs->fsize;
0001c4  e5940020          LDR      r0,[r4,#0x20]
0001c8  e0855000          ADD      r5,r5,r0
;;;675    					disk_write(fs->drv, fs->win, wsect, 1);
0001cc  e5d40001          LDRB     r0,[r4,#1]
0001d0  e3a03001          MOV      r3,#1
0001d4  e1a02005          MOV      r2,r5
0001d8  e2841038          ADD      r1,r4,#0x38
0001dc  ebfffffe          BL       disk_write
0001e0  e2466001          SUB      r6,r6,#1              ;673
                  |L1.484|
0001e4  e3560002          CMP      r6,#2                 ;673
0001e8  2afffff5          BCS      |L1.452|
                  |L1.492|
;;;676    				}
;;;677    			}
;;;678    		}
;;;679    	}
;;;680    	return res;
0001ec  e1a00007          MOV      r0,r7
;;;681    }
0001f0  e8bd81f0          POP      {r4-r8,pc}
;;;682    #endif
                          ENDP

                  move_window PROC
;;;685    static
;;;686    FRESULT move_window (
0001f4  e92d4070          PUSH     {r4-r6,lr}
;;;687    	FATFS* fs,		/* File system object */
;;;688    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;689    )
;;;690    {
0001f8  e1a04000          MOV      r4,r0
0001fc  e1a05001          MOV      r5,r1
;;;691    	FRESULT res = FR_OK;
000200  e3a06000          MOV      r6,#0
;;;692    
;;;693    
;;;694    	if (sector != fs->winsect) {	/* Window offset changed? */
000204  e5940034          LDR      r0,[r4,#0x34]
000208  e1500005          CMP      r0,r5
00020c  0a00000e          BEQ      |L1.588|
;;;695    #if !_FS_READONLY
;;;696    		res = sync_window(fs);		/* Write-back changes */
000210  e1a00004          MOV      r0,r4
000214  ebfffffe          BL       sync_window
000218  e1a06000          MOV      r6,r0
;;;697    #endif
;;;698    		if (res == FR_OK) {			/* Fill sector window with new data */
00021c  e3560000          CMP      r6,#0
000220  1a000009          BNE      |L1.588|
;;;699    			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
000224  e5d40001          LDRB     r0,[r4,#1]
000228  e3a03001          MOV      r3,#1
00022c  e1a02005          MOV      r2,r5
000230  e2841038          ADD      r1,r4,#0x38
000234  ebfffffe          BL       disk_read
000238  e3500000          CMP      r0,#0
00023c  0a000001          BEQ      |L1.584|
;;;700    				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
000240  e3e05000          MVN      r5,#0
;;;701    				res = FR_DISK_ERR;
000244  e3a06001          MOV      r6,#1
                  |L1.584|
;;;702    			}
;;;703    			fs->winsect = sector;
000248  e5845034          STR      r5,[r4,#0x34]
                  |L1.588|
;;;704    		}
;;;705    	}
;;;706    	return res;
00024c  e1a00006          MOV      r0,r6
;;;707    }
000250  e8bd8070          POP      {r4-r6,pc}
;;;708    
                          ENDP

                  sync_fs PROC
;;;716    static
;;;717    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
000254  e92d4070          PUSH     {r4-r6,lr}
;;;718    	FATFS* fs		/* File system object */
;;;719    )
;;;720    {
000258  e1a04000          MOV      r4,r0
;;;721    	FRESULT res;
;;;722    
;;;723    
;;;724    	res = sync_window(fs);
00025c  e1a00004          MOV      r0,r4
000260  ebfffffe          BL       sync_window
000264  e1a05000          MOV      r5,r0
;;;725    	if (res == FR_OK) {
000268  e3550000          CMP      r5,#0
00026c  1a000046          BNE      |L1.908|
;;;726    		/* Update FSINFO sector if needed */
;;;727    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
000270  e5d40000          LDRB     r0,[r4,#0]
000274  e3500003          CMP      r0,#3
000278  1a00003c          BNE      |L1.880|
00027c  e5d40005          LDRB     r0,[r4,#5]
000280  e3500001          CMP      r0,#1
000284  1a000039          BNE      |L1.880|
;;;728    			/* Create FSINFO structure */
;;;729    			mem_set(fs->win, 0, SS(fs));
000288  e1d420ba          LDRH     r2,[r4,#0xa]
00028c  e3a01000          MOV      r1,#0
000290  e2840038          ADD      r0,r4,#0x38
000294  ebfffffe          BL       mem_set
;;;730    			ST_WORD(fs->win + BS_55AA, 0xAA55);
000298  e3a00055          MOV      r0,#0x55
00029c  e5c40236          STRB     r0,[r4,#0x236]
0002a0  e3a000aa          MOV      r0,#0xaa
0002a4  e5c40237          STRB     r0,[r4,#0x237]
;;;731    			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
0002a8  e3a00052          MOV      r0,#0x52
0002ac  e5c40038          STRB     r0,[r4,#0x38]
0002b0  e5c40039          STRB     r0,[r4,#0x39]
0002b4  e3a00061          MOV      r0,#0x61
0002b8  e5c4003a          STRB     r0,[r4,#0x3a]
0002bc  e3a00041          MOV      r0,#0x41
0002c0  e5c4003b          STRB     r0,[r4,#0x3b]
;;;732    			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
0002c4  e3a00072          MOV      r0,#0x72
0002c8  e5c4021c          STRB     r0,[r4,#0x21c]
0002cc  e5c4021d          STRB     r0,[r4,#0x21d]
0002d0  e3a00041          MOV      r0,#0x41
0002d4  e5c4021e          STRB     r0,[r4,#0x21e]
0002d8  e3a00061          MOV      r0,#0x61
0002dc  e5c4021f          STRB     r0,[r4,#0x21f]
;;;733    			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
0002e0  e5d40014          LDRB     r0,[r4,#0x14]
0002e4  e5c40220          STRB     r0,[r4,#0x220]
0002e8  e1d401b4          LDRH     r0,[r4,#0x14]
0002ec  e1a00800          LSL      r0,r0,#16
0002f0  e1a00c20          LSR      r0,r0,#24
0002f4  e5c40221          STRB     r0,[r4,#0x221]
0002f8  e5940014          LDR      r0,[r4,#0x14]
0002fc  e1a00400          LSL      r0,r0,#8
000300  e1a00c20          LSR      r0,r0,#24
000304  e5c40222          STRB     r0,[r4,#0x222]
000308  e5940014          LDR      r0,[r4,#0x14]
00030c  e1a00c20          LSR      r0,r0,#24
000310  e5c40223          STRB     r0,[r4,#0x223]
;;;734    			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
000314  e5d40010          LDRB     r0,[r4,#0x10]
000318  e5c40224          STRB     r0,[r4,#0x224]
00031c  e1d401b0          LDRH     r0,[r4,#0x10]
000320  e1a00800          LSL      r0,r0,#16
000324  e1a00c20          LSR      r0,r0,#24
000328  e5c40225          STRB     r0,[r4,#0x225]
00032c  e5940010          LDR      r0,[r4,#0x10]
000330  e1a00400          LSL      r0,r0,#8
000334  e1a00c20          LSR      r0,r0,#24
000338  e5c40226          STRB     r0,[r4,#0x226]
00033c  e5940010          LDR      r0,[r4,#0x10]
000340  e1a00c20          LSR      r0,r0,#24
000344  e5c40227          STRB     r0,[r4,#0x227]
;;;735    			/* Write it into the FSINFO sector */
;;;736    			fs->winsect = fs->volbase + 1;
000348  e5940024          LDR      r0,[r4,#0x24]
00034c  e2800001          ADD      r0,r0,#1
000350  e5840034          STR      r0,[r4,#0x34]
;;;737    			disk_write(fs->drv, fs->win, fs->winsect, 1);
000354  e5942034          LDR      r2,[r4,#0x34]
000358  e5d40001          LDRB     r0,[r4,#1]
00035c  e3a03001          MOV      r3,#1
000360  e2841038          ADD      r1,r4,#0x38
000364  ebfffffe          BL       disk_write
;;;738    			fs->fsi_flag = 0;
000368  e3a00000          MOV      r0,#0
00036c  e5c40005          STRB     r0,[r4,#5]
                  |L1.880|
;;;739    		}
;;;740    		/* Make sure that no pending write process in the physical drive */
;;;741    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
000370  e5d40001          LDRB     r0,[r4,#1]
000374  e3a02000          MOV      r2,#0
000378  e1a01002          MOV      r1,r2
00037c  ebfffffe          BL       disk_ioctl
000380  e3500000          CMP      r0,#0
000384  0a000000          BEQ      |L1.908|
;;;742    			res = FR_DISK_ERR;
000388  e3a05001          MOV      r5,#1
                  |L1.908|
;;;743    	}
;;;744    
;;;745    	return res;
00038c  e1a00005          MOV      r0,r5
;;;746    }
000390  e8bd8070          POP      {r4-r6,pc}
;;;747    #endif
                          ENDP

                  clust2sect PROC
;;;756    
;;;757    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000394  e1a02000          MOV      r2,r0
;;;758    	FATFS* fs,		/* File system object */
;;;759    	DWORD clst		/* Cluster# to be converted */
;;;760    )
;;;761    {
;;;762    	clst -= 2;
000398  e2411002          SUB      r1,r1,#2
;;;763    	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
00039c  e592001c          LDR      r0,[r2,#0x1c]
0003a0  e2400002          SUB      r0,r0,#2
0003a4  e1500001          CMP      r0,r1
0003a8  8a000001          BHI      |L1.948|
0003ac  e3a00000          MOV      r0,#0
                  |L1.944|
;;;764    	return clst * fs->csize + fs->database;
;;;765    }
0003b0  e12fff1e          BX       lr
                  |L1.948|
0003b4  e5920030          LDR      r0,[r2,#0x30]         ;764
0003b8  e5d23002          LDRB     r3,[r2,#2]            ;764
0003bc  e0200391          MLA      r0,r1,r3,r0           ;764
0003c0  eafffffa          B        |L1.944|
;;;766    
                          ENDP

                  get_fat PROC
;;;774    
;;;775    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
0003c4  e92d5ff0          PUSH     {r4-r12,lr}
;;;776    	FATFS* fs,	/* File system object */
;;;777    	DWORD clst	/* FAT index number (cluster number) to get the value */
;;;778    )
;;;779    {
0003c8  e1a04000          MOV      r4,r0
0003cc  e1a05001          MOV      r5,r1
;;;780    	UINT wc, bc;
;;;781    	BYTE *p;
;;;782    	DWORD val;
;;;783    
;;;784    
;;;785    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0003d0  e3550002          CMP      r5,#2
0003d4  3a000002          BCC      |L1.996|
0003d8  e594001c          LDR      r0,[r4,#0x1c]
0003dc  e1500005          CMP      r0,r5
0003e0  8a000001          BHI      |L1.1004|
                  |L1.996|
;;;786    		val = 1;	/* Internal error */
0003e4  e3a09001          MOV      r9,#1
0003e8  ea00006e          B        |L1.1448|
                  |L1.1004|
;;;787    
;;;788    	} else {
;;;789    		val = 0xFFFFFFFF;	/* Default value falls on disk error */
0003ec  e3e09000          MVN      r9,#0
;;;790    
;;;791    		switch (fs->fs_type) {
0003f0  e5d40000          LDRB     r0,[r4,#0]
0003f4  e3500001          CMP      r0,#1
0003f8  0a000004          BEQ      |L1.1040|
0003fc  e3500002          CMP      r0,#2
000400  0a00002f          BEQ      |L1.1220|
000404  e3500003          CMP      r0,#3
000408  1a000062          BNE      |L1.1432|
00040c  ea000043          B        |L1.1312|
                  |L1.1040|
;;;792    		case FS_FAT12 :
000410  e1a00000          MOV      r0,r0
;;;793    			bc = (UINT)clst; bc += bc / 2;
000414  e1a08005          MOV      r8,r5
000418  e08880a8          ADD      r8,r8,r8,LSR #1
;;;794    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
00041c  e1d410ba          LDRH     r1,[r4,#0xa]
000420  e1a00008          MOV      r0,r8
000424  ebfffffe          BL       __aeabi_uidivmod
000428  e5941028          LDR      r1,[r4,#0x28]
00042c  e080a001          ADD      r10,r0,r1
000430  e1a0100a          MOV      r1,r10
000434  e1a00004          MOV      r0,r4
000438  ebfffffe          BL       move_window
00043c  e3500000          CMP      r0,#0
000440  0a000000          BEQ      |L1.1096|
000444  ea000056          B        |L1.1444|
                  |L1.1096|
;;;795    			wc = fs->win[bc++ % SS(fs)];
000448  e1d410ba          LDRH     r1,[r4,#0xa]
00044c  e1a00008          MOV      r0,r8
000450  e2888001          ADD      r8,r8,#1
000454  ebfffffe          BL       __aeabi_uidivmod
000458  e2840038          ADD      r0,r4,#0x38
00045c  e7d07001          LDRB     r7,[r0,r1]
;;;796    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
000460  e1d410ba          LDRH     r1,[r4,#0xa]
000464  e1a00008          MOV      r0,r8
000468  ebfffffe          BL       __aeabi_uidivmod
00046c  e5941028          LDR      r1,[r4,#0x28]
000470  e080a001          ADD      r10,r0,r1
000474  e1a0100a          MOV      r1,r10
000478  e1a00004          MOV      r0,r4
00047c  ebfffffe          BL       move_window
000480  e3500000          CMP      r0,#0
000484  0a000000          BEQ      |L1.1164|
000488  ea000045          B        |L1.1444|
                  |L1.1164|
;;;797    			wc |= fs->win[bc % SS(fs)] << 8;
00048c  e1d410ba          LDRH     r1,[r4,#0xa]
000490  e1a00008          MOV      r0,r8
000494  ebfffffe          BL       __aeabi_uidivmod
000498  e2840038          ADD      r0,r4,#0x38
00049c  e7d00001          LDRB     r0,[r0,r1]
0004a0  e1877400          ORR      r7,r7,r0,LSL #8
;;;798    			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
0004a4  e3150001          TST      r5,#1
0004a8  0a000001          BEQ      |L1.1204|
0004ac  e1a00227          LSR      r0,r7,#4
0004b0  ea000001          B        |L1.1212|
                  |L1.1204|
0004b4  e1a00a07          LSL      r0,r7,#20
0004b8  e1a00a20          LSR      r0,r0,#20
                  |L1.1212|
0004bc  e1a09000          MOV      r9,r0
;;;799    			break;
0004c0  ea000037          B        |L1.1444|
                  |L1.1220|
;;;800    
;;;801    		case FS_FAT16 :
0004c4  e1a00000          MOV      r0,r0
;;;802    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
0004c8  e1d4a0ba          LDRH     r10,[r4,#0xa]
0004cc  e08a0faa          ADD      r0,r10,r10,LSR #31
0004d0  e1a010c0          ASR      r1,r0,#1
0004d4  e1a00005          MOV      r0,r5
0004d8  ebfffffe          BL       __aeabi_uidivmod
0004dc  e5941028          LDR      r1,[r4,#0x28]
0004e0  e080b001          ADD      r11,r0,r1
0004e4  e1a0100b          MOV      r1,r11
0004e8  e1a00004          MOV      r0,r4
0004ec  ebfffffe          BL       move_window
0004f0  e3500000          CMP      r0,#0
0004f4  0a000000          BEQ      |L1.1276|
0004f8  ea000029          B        |L1.1444|
                  |L1.1276|
;;;803    			p = &fs->win[clst * 2 % SS(fs)];
0004fc  e1d410ba          LDRH     r1,[r4,#0xa]
000500  e1a00085          LSL      r0,r5,#1
000504  ebfffffe          BL       __aeabi_uidivmod
000508  e2840038          ADD      r0,r4,#0x38
00050c  e0816000          ADD      r6,r1,r0
;;;804    			val = LD_WORD(p);
000510  e5d60000          LDRB     r0,[r6,#0]
000514  e5d61001          LDRB     r1,[r6,#1]
000518  e1809401          ORR      r9,r0,r1,LSL #8
;;;805    			break;
00051c  ea000020          B        |L1.1444|
                  |L1.1312|
;;;806    
;;;807    		case FS_FAT32 :
000520  e1a00000          MOV      r0,r0
;;;808    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
000524  e1d4a0ba          LDRH     r10,[r4,#0xa]
000528  e1a00fca          ASR      r0,r10,#31
00052c  e08a0f20          ADD      r0,r10,r0,LSR #30
000530  e1a01140          ASR      r1,r0,#2
000534  e1a00005          MOV      r0,r5
000538  ebfffffe          BL       __aeabi_uidivmod
00053c  e5941028          LDR      r1,[r4,#0x28]
000540  e080b001          ADD      r11,r0,r1
000544  e1a0100b          MOV      r1,r11
000548  e1a00004          MOV      r0,r4
00054c  ebfffffe          BL       move_window
000550  e3500000          CMP      r0,#0
000554  0a000000          BEQ      |L1.1372|
000558  ea000011          B        |L1.1444|
                  |L1.1372|
;;;809    			p = &fs->win[clst * 4 % SS(fs)];
00055c  e1d410ba          LDRH     r1,[r4,#0xa]
000560  e1a00105          LSL      r0,r5,#2
000564  ebfffffe          BL       __aeabi_uidivmod
000568  e2840038          ADD      r0,r4,#0x38
00056c  e0816000          ADD      r6,r1,r0
;;;810    			val = LD_DWORD(p) & 0x0FFFFFFF;
000570  e5d60003          LDRB     r0,[r6,#3]
000574  e1a00c00          LSL      r0,r0,#24
000578  e5d61002          LDRB     r1,[r6,#2]
00057c  e1800801          ORR      r0,r0,r1,LSL #16
000580  e5d61001          LDRB     r1,[r6,#1]
000584  e1800401          ORR      r0,r0,r1,LSL #8
000588  e5d61000          LDRB     r1,[r6,#0]
00058c  e1800001          ORR      r0,r0,r1
000590  e3c0920f          BIC      r9,r0,#0xf0000000
;;;811    			break;
000594  ea000002          B        |L1.1444|
                  |L1.1432|
;;;812    
;;;813    		default:
000598  e1a00000          MOV      r0,r0
;;;814    			val = 1;	/* Internal error */
00059c  e3a09001          MOV      r9,#1
0005a0  e1a00000          MOV      r0,r0                 ;791
                  |L1.1444|
0005a4  e1a00000          MOV      r0,r0                 ;794
                  |L1.1448|
;;;815    		}
;;;816    	}
;;;817    
;;;818    	return val;
0005a8  e1a00009          MOV      r0,r9
;;;819    }
0005ac  e8bd9ff0          POP      {r4-r12,pc}
;;;820    
                          ENDP

                  put_fat PROC
;;;829    #if !_FS_READONLY
;;;830    FRESULT put_fat (
0005b0  e92d5ff0          PUSH     {r4-r12,lr}
;;;831    	FATFS* fs,	/* File system object */
;;;832    	DWORD clst,	/* FAT index number (cluster number) to be changed */
;;;833    	DWORD val	/* New value to be set to the entry */
;;;834    )
;;;835    {
0005b4  e1a04000          MOV      r4,r0
0005b8  e1a07001          MOV      r7,r1
0005bc  e1a06002          MOV      r6,r2
;;;836    	UINT bc;
;;;837    	BYTE *p;
;;;838    	FRESULT res;
;;;839    
;;;840    
;;;841    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0005c0  e3570002          CMP      r7,#2
0005c4  3a000002          BCC      |L1.1492|
0005c8  e594001c          LDR      r0,[r4,#0x1c]
0005cc  e1500007          CMP      r0,r7
0005d0  8a000001          BHI      |L1.1500|
                  |L1.1492|
;;;842    		res = FR_INT_ERR;
0005d4  e3a08002          MOV      r8,#2
0005d8  ea00008f          B        |L1.2076|
                  |L1.1500|
;;;843    
;;;844    	} else {
;;;845    		switch (fs->fs_type) {
0005dc  e5d40000          LDRB     r0,[r4,#0]
0005e0  e3500001          CMP      r0,#1
0005e4  0a000004          BEQ      |L1.1532|
0005e8  e3500002          CMP      r0,#2
0005ec  0a000040          BEQ      |L1.1780|
0005f0  e3500003          CMP      r0,#3
0005f4  1a000084          BNE      |L1.2060|
0005f8  ea000058          B        |L1.1888|
                  |L1.1532|
;;;846    		case FS_FAT12 :
0005fc  e1a00000          MOV      r0,r0
;;;847    			bc = (UINT)clst; bc += bc / 2;
000600  e1a09007          MOV      r9,r7
000604  e08990a9          ADD      r9,r9,r9,LSR #1
;;;848    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000608  e1d410ba          LDRH     r1,[r4,#0xa]
00060c  e1a00009          MOV      r0,r9
000610  ebfffffe          BL       __aeabi_uidivmod
000614  e5941028          LDR      r1,[r4,#0x28]
000618  e080a001          ADD      r10,r0,r1
00061c  e1a0100a          MOV      r1,r10
000620  e1a00004          MOV      r0,r4
000624  ebfffffe          BL       move_window
000628  e1a08000          MOV      r8,r0
;;;849    			if (res != FR_OK) break;
00062c  e3580000          CMP      r8,#0
000630  0a000000          BEQ      |L1.1592|
000634  ea000077          B        |L1.2072|
                  |L1.1592|
;;;850    			p = &fs->win[bc++ % SS(fs)];
000638  e1d410ba          LDRH     r1,[r4,#0xa]
00063c  e1a00009          MOV      r0,r9
000640  e2899001          ADD      r9,r9,#1
000644  ebfffffe          BL       __aeabi_uidivmod
000648  e2840038          ADD      r0,r4,#0x38
00064c  e0815000          ADD      r5,r1,r0
;;;851    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000650  e3170001          TST      r7,#1
000654  0a000003          BEQ      |L1.1640|
000658  e5d50000          LDRB     r0,[r5,#0]
00065c  e200000f          AND      r0,r0,#0xf
000660  e1800206          ORR      r0,r0,r6,LSL #4
000664  ea000000          B        |L1.1644|
                  |L1.1640|
000668  e1a00006          MOV      r0,r6
                  |L1.1644|
00066c  e5c50000          STRB     r0,[r5,#0]
;;;852    			fs->wflag = 1;
000670  e3a00001          MOV      r0,#1
000674  e5c40004          STRB     r0,[r4,#4]
;;;853    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000678  e1d410ba          LDRH     r1,[r4,#0xa]
00067c  e1a00009          MOV      r0,r9
000680  ebfffffe          BL       __aeabi_uidivmod
000684  e5941028          LDR      r1,[r4,#0x28]
000688  e080a001          ADD      r10,r0,r1
00068c  e1a0100a          MOV      r1,r10
000690  e1a00004          MOV      r0,r4
000694  ebfffffe          BL       move_window
000698  e1a08000          MOV      r8,r0
;;;854    			if (res != FR_OK) break;
00069c  e3580000          CMP      r8,#0
0006a0  0a000000          BEQ      |L1.1704|
0006a4  ea00005b          B        |L1.2072|
                  |L1.1704|
;;;855    			p = &fs->win[bc % SS(fs)];
0006a8  e1d410ba          LDRH     r1,[r4,#0xa]
0006ac  e1a00009          MOV      r0,r9
0006b0  ebfffffe          BL       __aeabi_uidivmod
0006b4  e2840038          ADD      r0,r4,#0x38
0006b8  e0815000          ADD      r5,r1,r0
;;;856    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
0006bc  e3170001          TST      r7,#1
0006c0  0a000002          BEQ      |L1.1744|
0006c4  e1a00a06          LSL      r0,r6,#20
0006c8  e1a00c20          LSR      r0,r0,#24
0006cc  ea000004          B        |L1.1764|
                  |L1.1744|
0006d0  e5d50000          LDRB     r0,[r5,#0]
0006d4  e20000f0          AND      r0,r0,#0xf0
0006d8  e3a0100f          MOV      r1,#0xf
0006dc  e0011426          AND      r1,r1,r6,LSR #8
0006e0  e1800001          ORR      r0,r0,r1
                  |L1.1764|
0006e4  e5c50000          STRB     r0,[r5,#0]
;;;857    			fs->wflag = 1;
0006e8  e3a00001          MOV      r0,#1
0006ec  e5c40004          STRB     r0,[r4,#4]
;;;858    			break;
0006f0  ea000048          B        |L1.2072|
                  |L1.1780|
;;;859    
;;;860    		case FS_FAT16 :
0006f4  e1a00000          MOV      r0,r0
;;;861    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0006f8  e1d4a0ba          LDRH     r10,[r4,#0xa]
0006fc  e08a0faa          ADD      r0,r10,r10,LSR #31
000700  e1a010c0          ASR      r1,r0,#1
000704  e1a00007          MOV      r0,r7
000708  ebfffffe          BL       __aeabi_uidivmod
00070c  e5941028          LDR      r1,[r4,#0x28]
000710  e080b001          ADD      r11,r0,r1
000714  e1a0100b          MOV      r1,r11
000718  e1a00004          MOV      r0,r4
00071c  ebfffffe          BL       move_window
000720  e1a08000          MOV      r8,r0
;;;862    			if (res != FR_OK) break;
000724  e3580000          CMP      r8,#0
000728  0a000000          BEQ      |L1.1840|
00072c  ea000039          B        |L1.2072|
                  |L1.1840|
;;;863    			p = &fs->win[clst * 2 % SS(fs)];
000730  e1d410ba          LDRH     r1,[r4,#0xa]
000734  e1a00087          LSL      r0,r7,#1
000738  ebfffffe          BL       __aeabi_uidivmod
00073c  e2840038          ADD      r0,r4,#0x38
000740  e0815000          ADD      r5,r1,r0
;;;864    			ST_WORD(p, (WORD)val);
000744  e5c56000          STRB     r6,[r5,#0]
000748  e1a00806          LSL      r0,r6,#16
00074c  e1a00c20          LSR      r0,r0,#24
000750  e5c50001          STRB     r0,[r5,#1]
;;;865    			fs->wflag = 1;
000754  e3a00001          MOV      r0,#1
000758  e5c40004          STRB     r0,[r4,#4]
;;;866    			break;
00075c  ea00002d          B        |L1.2072|
                  |L1.1888|
;;;867    
;;;868    		case FS_FAT32 :
000760  e1a00000          MOV      r0,r0
;;;869    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
000764  e1d4a0ba          LDRH     r10,[r4,#0xa]
000768  e1a00fca          ASR      r0,r10,#31
00076c  e08a0f20          ADD      r0,r10,r0,LSR #30
000770  e1a01140          ASR      r1,r0,#2
000774  e1a00007          MOV      r0,r7
000778  ebfffffe          BL       __aeabi_uidivmod
00077c  e5941028          LDR      r1,[r4,#0x28]
000780  e080b001          ADD      r11,r0,r1
000784  e1a0100b          MOV      r1,r11
000788  e1a00004          MOV      r0,r4
00078c  ebfffffe          BL       move_window
000790  e1a08000          MOV      r8,r0
;;;870    			if (res != FR_OK) break;
000794  e3580000          CMP      r8,#0
000798  0a000000          BEQ      |L1.1952|
00079c  ea00001d          B        |L1.2072|
                  |L1.1952|
;;;871    			p = &fs->win[clst * 4 % SS(fs)];
0007a0  e1d410ba          LDRH     r1,[r4,#0xa]
0007a4  e1a00107          LSL      r0,r7,#2
0007a8  ebfffffe          BL       __aeabi_uidivmod
0007ac  e2840038          ADD      r0,r4,#0x38
0007b0  e0815000          ADD      r5,r1,r0
;;;872    			val |= LD_DWORD(p) & 0xF0000000;
0007b4  e5d50003          LDRB     r0,[r5,#3]
0007b8  e1a00c00          LSL      r0,r0,#24
0007bc  e5d51002          LDRB     r1,[r5,#2]
0007c0  e1800801          ORR      r0,r0,r1,LSL #16
0007c4  e5d51001          LDRB     r1,[r5,#1]
0007c8  e1800401          ORR      r0,r0,r1,LSL #8
0007cc  e5d51000          LDRB     r1,[r5,#0]
0007d0  e1800001          ORR      r0,r0,r1
0007d4  e200020f          AND      r0,r0,#0xf0000000
0007d8  e1866000          ORR      r6,r6,r0
;;;873    			ST_DWORD(p, val);
0007dc  e5c56000          STRB     r6,[r5,#0]
0007e0  e1a00806          LSL      r0,r6,#16
0007e4  e1a00c20          LSR      r0,r0,#24
0007e8  e5c50001          STRB     r0,[r5,#1]
0007ec  e1a00406          LSL      r0,r6,#8
0007f0  e1a00c20          LSR      r0,r0,#24
0007f4  e5c50002          STRB     r0,[r5,#2]
0007f8  e1a00c26          LSR      r0,r6,#24
0007fc  e5c50003          STRB     r0,[r5,#3]
;;;874    			fs->wflag = 1;
000800  e3a00001          MOV      r0,#1
000804  e5c40004          STRB     r0,[r4,#4]
;;;875    			break;
000808  ea000002          B        |L1.2072|
                  |L1.2060|
;;;876    
;;;877    		default :
00080c  e1a00000          MOV      r0,r0
;;;878    			res = FR_INT_ERR;
000810  e3a08002          MOV      r8,#2
000814  e1a00000          MOV      r0,r0                 ;845
                  |L1.2072|
000818  e1a00000          MOV      r0,r0                 ;849
                  |L1.2076|
;;;879    		}
;;;880    	}
;;;881    
;;;882    	return res;
00081c  e1a00008          MOV      r0,r8
;;;883    }
000820  e8bd9ff0          POP      {r4-r12,pc}
;;;884    #endif /* !_FS_READONLY */
                          ENDP

                  remove_chain PROC
;;;893    static
;;;894    FRESULT remove_chain (
000824  e92d41f0          PUSH     {r4-r8,lr}
;;;895    	FATFS* fs,			/* File system object */
;;;896    	DWORD clst			/* Cluster# to remove a chain from */
;;;897    )
;;;898    {
000828  e1a04000          MOV      r4,r0
00082c  e1a06001          MOV      r6,r1
;;;899    	FRESULT res;
;;;900    	DWORD nxt;
;;;901    #if _USE_TRIM
;;;902    	DWORD scl = clst, ecl = clst, rt[2];
;;;903    #endif
;;;904    
;;;905    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000830  e3560002          CMP      r6,#2
000834  3a000002          BCC      |L1.2116|
000838  e594001c          LDR      r0,[r4,#0x1c]
00083c  e1500006          CMP      r0,r6
000840  8a000001          BHI      |L1.2124|
                  |L1.2116|
;;;906    		res = FR_INT_ERR;
000844  e3a07002          MOV      r7,#2
000848  ea000026          B        |L1.2280|
                  |L1.2124|
;;;907    
;;;908    	} else {
;;;909    		res = FR_OK;
00084c  e3a07000          MOV      r7,#0
;;;910    		while (clst < fs->n_fatent) {			/* Not a last link? */
000850  ea000020          B        |L1.2264|
                  |L1.2132|
;;;911    			nxt = get_fat(fs, clst);			/* Get cluster status */
000854  e1a01006          MOV      r1,r6
000858  e1a00004          MOV      r0,r4
00085c  ebfffffe          BL       get_fat
000860  e1a05000          MOV      r5,r0
;;;912    			if (nxt == 0) break;				/* Empty cluster? */
000864  e3550000          CMP      r5,#0
000868  1a000000          BNE      |L1.2160|
00086c  ea00001c          B        |L1.2276|
                  |L1.2160|
;;;913    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000870  e3550001          CMP      r5,#1
000874  1a000001          BNE      |L1.2176|
000878  e3a07002          MOV      r7,#2
00087c  ea000018          B        |L1.2276|
                  |L1.2176|
;;;914    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000880  e3750001          CMN      r5,#1
000884  1a000001          BNE      |L1.2192|
000888  e3a07001          MOV      r7,#1
00088c  ea000014          B        |L1.2276|
                  |L1.2192|
;;;915    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000890  e3a02000          MOV      r2,#0
000894  e1a01006          MOV      r1,r6
000898  e1a00004          MOV      r0,r4
00089c  ebfffffe          BL       put_fat
0008a0  e1a07000          MOV      r7,r0
;;;916    			if (res != FR_OK) break;
0008a4  e3570000          CMP      r7,#0
0008a8  0a000000          BEQ      |L1.2224|
0008ac  ea00000c          B        |L1.2276|
                  |L1.2224|
;;;917    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
0008b0  e5940014          LDR      r0,[r4,#0x14]
0008b4  e3700001          CMN      r0,#1
0008b8  0a000005          BEQ      |L1.2260|
;;;918    				fs->free_clust++;
0008bc  e5940014          LDR      r0,[r4,#0x14]
0008c0  e2800001          ADD      r0,r0,#1
0008c4  e5840014          STR      r0,[r4,#0x14]
;;;919    				fs->fsi_flag |= 1;
0008c8  e5d40005          LDRB     r0,[r4,#5]
0008cc  e3800001          ORR      r0,r0,#1
0008d0  e5c40005          STRB     r0,[r4,#5]
                  |L1.2260|
;;;920    			}
;;;921    #if _USE_TRIM
;;;922    			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;923    				ecl = nxt;
;;;924    			} else {				/* End of contiguous clusters */ 
;;;925    				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;926    				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;927    				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
;;;928    				scl = ecl = nxt;
;;;929    			}
;;;930    #endif
;;;931    			clst = nxt;	/* Next cluster */
0008d4  e1a06005          MOV      r6,r5
                  |L1.2264|
0008d8  e594001c          LDR      r0,[r4,#0x1c]         ;910
0008dc  e1500006          CMP      r0,r6                 ;910
0008e0  8affffdb          BHI      |L1.2132|
                  |L1.2276|
0008e4  e1a00000          MOV      r0,r0                 ;912
                  |L1.2280|
;;;932    		}
;;;933    	}
;;;934    
;;;935    	return res;
0008e8  e1a00007          MOV      r0,r7
;;;936    }
0008ec  e8bd81f0          POP      {r4-r8,pc}
;;;937    #endif
                          ENDP

                  create_chain PROC
;;;946    static
;;;947    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
0008f0  e92d47f0          PUSH     {r4-r10,lr}
;;;948    	FATFS* fs,			/* File system object */
;;;949    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;950    )
;;;951    {
0008f4  e1a04000          MOV      r4,r0
0008f8  e1a09001          MOV      r9,r1
;;;952    	DWORD cs, ncl, scl;
;;;953    	FRESULT res;
;;;954    
;;;955    
;;;956    	if (clst == 0) {		/* Create a new chain */
0008fc  e3590000          CMP      r9,#0
000900  1a000007          BNE      |L1.2340|
;;;957    		scl = fs->last_clust;			/* Get suggested start point */
000904  e5947010          LDR      r7,[r4,#0x10]
;;;958    		if (!scl || scl >= fs->n_fatent) scl = 1;
000908  e3570000          CMP      r7,#0
00090c  0a000002          BEQ      |L1.2332|
000910  e594001c          LDR      r0,[r4,#0x1c]
000914  e1500007          CMP      r0,r7
000918  8a000013          BHI      |L1.2412|
                  |L1.2332|
00091c  e3a07001          MOV      r7,#1
000920  ea000011          B        |L1.2412|
                  |L1.2340|
;;;959    	}
;;;960    	else {					/* Stretch the current chain */
;;;961    		cs = get_fat(fs, clst);			/* Check the cluster status */
000924  e1a01009          MOV      r1,r9
000928  e1a00004          MOV      r0,r4
00092c  ebfffffe          BL       get_fat
000930  e1a06000          MOV      r6,r0
;;;962    		if (cs < 2) return 1;			/* Invalid value */
000934  e3560002          CMP      r6,#2
000938  2a000001          BCS      |L1.2372|
00093c  e3a00001          MOV      r0,#1
                  |L1.2368|
;;;963    		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
;;;964    		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;965    		scl = clst;
;;;966    	}
;;;967    
;;;968    	ncl = scl;				/* Start cluster */
;;;969    	for (;;) {
;;;970    		ncl++;							/* Next cluster */
;;;971    		if (ncl >= fs->n_fatent) {		/* Check wrap around */
;;;972    			ncl = 2;
;;;973    			if (ncl > scl) return 0;	/* No free cluster */
;;;974    		}
;;;975    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;976    		if (cs == 0) break;				/* Found a free cluster */
;;;977    		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;978    			return cs;
;;;979    		if (ncl == scl) return 0;		/* No free cluster */
;;;980    	}
;;;981    
;;;982    	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;983    	if (res == FR_OK && clst != 0) {
;;;984    		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;985    	}
;;;986    	if (res == FR_OK) {
;;;987    		fs->last_clust = ncl;			/* Update FSINFO */
;;;988    		if (fs->free_clust != 0xFFFFFFFF) {
;;;989    			fs->free_clust--;
;;;990    			fs->fsi_flag |= 1;
;;;991    		}
;;;992    	} else {
;;;993    		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;994    	}
;;;995    
;;;996    	return ncl;		/* Return new cluster number or error code */
;;;997    }
000940  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2372|
000944  e3760001          CMN      r6,#1                 ;963
000948  1a000001          BNE      |L1.2388|
00094c  e1a00006          MOV      r0,r6                 ;963
000950  eafffffa          B        |L1.2368|
                  |L1.2388|
000954  e594001c          LDR      r0,[r4,#0x1c]         ;964
000958  e1500006          CMP      r0,r6                 ;964
00095c  9a000001          BLS      |L1.2408|
000960  e1a00006          MOV      r0,r6                 ;964
000964  eafffff5          B        |L1.2368|
                  |L1.2408|
000968  e1a07009          MOV      r7,r9                 ;965
                  |L1.2412|
00096c  e1a05007          MOV      r5,r7                 ;968
000970  e1a00000          MOV      r0,r0                 ;969
                  |L1.2420|
000974  e2855001          ADD      r5,r5,#1              ;970
000978  e594001c          LDR      r0,[r4,#0x1c]         ;971
00097c  e1500005          CMP      r0,r5                 ;971
000980  8a000004          BHI      |L1.2456|
000984  e3a05002          MOV      r5,#2                 ;972
000988  e1550007          CMP      r5,r7                 ;973
00098c  9a000001          BLS      |L1.2456|
000990  e3a00000          MOV      r0,#0                 ;973
000994  eaffffe9          B        |L1.2368|
                  |L1.2456|
000998  e1a01005          MOV      r1,r5                 ;975
00099c  e1a00004          MOV      r0,r4                 ;975
0009a0  ebfffffe          BL       get_fat
0009a4  e1a06000          MOV      r6,r0                 ;975
0009a8  e3560000          CMP      r6,#0                 ;976
0009ac  1a000000          BNE      |L1.2484|
0009b0  ea000009          B        |L1.2524|
                  |L1.2484|
0009b4  e3760001          CMN      r6,#1                 ;977
0009b8  0a000001          BEQ      |L1.2500|
0009bc  e3560001          CMP      r6,#1                 ;977
0009c0  1a000001          BNE      |L1.2508|
                  |L1.2500|
0009c4  e1a00006          MOV      r0,r6                 ;978
0009c8  eaffffdc          B        |L1.2368|
                  |L1.2508|
0009cc  e1550007          CMP      r5,r7                 ;979
0009d0  1affffe7          BNE      |L1.2420|
0009d4  e3a00000          MOV      r0,#0                 ;979
0009d8  eaffffd8          B        |L1.2368|
                  |L1.2524|
0009dc  e1a00000          MOV      r0,r0                 ;976
0009e0  e3e0220f          MVN      r2,#0xf0000000        ;982
0009e4  e1a01005          MOV      r1,r5                 ;982
0009e8  e1a00004          MOV      r0,r4                 ;982
0009ec  ebfffffe          BL       put_fat
0009f0  e1a08000          MOV      r8,r0                 ;982
0009f4  e3580000          CMP      r8,#0                 ;983
0009f8  1a000006          BNE      |L1.2584|
0009fc  e3590000          CMP      r9,#0                 ;983
000a00  0a000004          BEQ      |L1.2584|
000a04  e1a02005          MOV      r2,r5                 ;984
000a08  e1a01009          MOV      r1,r9                 ;984
000a0c  e1a00004          MOV      r0,r4                 ;984
000a10  ebfffffe          BL       put_fat
000a14  e1a08000          MOV      r8,r0                 ;984
                  |L1.2584|
000a18  e3580000          CMP      r8,#0                 ;986
000a1c  1a00000a          BNE      |L1.2636|
000a20  e5845010          STR      r5,[r4,#0x10]         ;987
000a24  e5940014          LDR      r0,[r4,#0x14]         ;988
000a28  e3700001          CMN      r0,#1                 ;988
000a2c  0a00000c          BEQ      |L1.2660|
000a30  e5940014          LDR      r0,[r4,#0x14]         ;989
000a34  e2400001          SUB      r0,r0,#1              ;989
000a38  e5840014          STR      r0,[r4,#0x14]         ;989
000a3c  e5d40005          LDRB     r0,[r4,#5]            ;990
000a40  e3800001          ORR      r0,r0,#1              ;990
000a44  e5c40005          STRB     r0,[r4,#5]            ;990
000a48  ea000005          B        |L1.2660|
                  |L1.2636|
000a4c  e3580001          CMP      r8,#1                 ;993
000a50  1a000001          BNE      |L1.2652|
000a54  e3e00000          MVN      r0,#0                 ;993
000a58  ea000000          B        |L1.2656|
                  |L1.2652|
000a5c  e3a00001          MOV      r0,#1                 ;993
                  |L1.2656|
000a60  e1a05000          MOV      r5,r0                 ;993
                  |L1.2660|
000a64  e1a00005          MOV      r0,r5                 ;996
000a68  eaffffb4          B        |L1.2368|
;;;998    #endif /* !_FS_READONLY */
                          ENDP

                  dir_sdi PROC
;;;1036   static
;;;1037   FRESULT dir_sdi (
000a6c  e92d47f0          PUSH     {r4-r10,lr}
;;;1038   	DIR* dp,		/* Pointer to directory object */
;;;1039   	UINT idx		/* Index of directory table */
;;;1040   )
;;;1041   {
000a70  e1a04000          MOV      r4,r0
000a74  e1a06001          MOV      r6,r1
;;;1042   	DWORD clst, sect;
;;;1043   	UINT ic;
;;;1044   
;;;1045   
;;;1046   	dp->index = (WORD)idx;	/* Current index */
000a78  e1c460b6          STRH     r6,[r4,#6]
;;;1047   	clst = dp->sclust;		/* Table start cluster (0:root) */
000a7c  e5945008          LDR      r5,[r4,#8]
;;;1048   	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
000a80  e3550001          CMP      r5,#1
000a84  0a000003          BEQ      |L1.2712|
000a88  e5940000          LDR      r0,[r4,#0]
000a8c  e590001c          LDR      r0,[r0,#0x1c]
000a90  e1500005          CMP      r0,r5
000a94  8a000001          BHI      |L1.2720|
                  |L1.2712|
;;;1049   		return FR_INT_ERR;
000a98  e3a00002          MOV      r0,#2
                  |L1.2716|
;;;1050   	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1051   		clst = dp->fs->dirbase;
;;;1052   
;;;1053   	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
;;;1054   		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
;;;1055   			return FR_INT_ERR;
;;;1056   		sect = dp->fs->dirbase;
;;;1057   	}
;;;1058   	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
;;;1059   		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
;;;1060   		while (idx >= ic) {	/* Follow cluster chain */
;;;1061   			clst = get_fat(dp->fs, clst);				/* Get next cluster */
;;;1062   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1063   			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
;;;1064   				return FR_INT_ERR;
;;;1065   			idx -= ic;
;;;1066   		}
;;;1067   		sect = clust2sect(dp->fs, clst);
;;;1068   	}
;;;1069   	dp->clust = clst;	/* Current cluster# */
;;;1070   	if (!sect) return FR_INT_ERR;
;;;1071   	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
;;;1072   	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
;;;1073   
;;;1074   	return FR_OK;
;;;1075   }
000a9c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2720|
000aa0  e3550000          CMP      r5,#0                 ;1050
000aa4  1a000005          BNE      |L1.2752|
000aa8  e5940000          LDR      r0,[r4,#0]            ;1050
000aac  e5d00000          LDRB     r0,[r0,#0]            ;1050
000ab0  e3500003          CMP      r0,#3                 ;1050
000ab4  1a000001          BNE      |L1.2752|
000ab8  e5940000          LDR      r0,[r4,#0]            ;1051
000abc  e590502c          LDR      r5,[r0,#0x2c]         ;1051
                  |L1.2752|
000ac0  e3550000          CMP      r5,#0                 ;1053
000ac4  1a000008          BNE      |L1.2796|
000ac8  e5940000          LDR      r0,[r4,#0]            ;1054
000acc  e1d000b8          LDRH     r0,[r0,#8]            ;1054
000ad0  e1500006          CMP      r0,r6                 ;1054
000ad4  8a000001          BHI      |L1.2784|
000ad8  e3a00002          MOV      r0,#2                 ;1055
000adc  eaffffee          B        |L1.2716|
                  |L1.2784|
000ae0  e5940000          LDR      r0,[r4,#0]            ;1056
000ae4  e590702c          LDR      r7,[r0,#0x2c]         ;1056
000ae8  ea00001f          B        |L1.2924|
                  |L1.2796|
000aec  e5941000          LDR      r1,[r4,#0]            ;1059
000af0  e1d100ba          LDRH     r0,[r1,#0xa]          ;1059
000af4  e1a01fc0          ASR      r1,r0,#31             ;1059
000af8  e0801da1          ADD      r1,r0,r1,LSR #27      ;1059
000afc  e1a012c1          ASR      r1,r1,#5              ;1059
000b00  e5942000          LDR      r2,[r4,#0]            ;1059
000b04  e5d22002          LDRB     r2,[r2,#2]            ;1059
000b08  e1680281          SMULBB   r8,r1,r2              ;1059
000b0c  ea000010          B        |L1.2900|
                  |L1.2832|
000b10  e1a01005          MOV      r1,r5                 ;1061
000b14  e5940000          LDR      r0,[r4,#0]            ;1061
000b18  ebfffffe          BL       get_fat
000b1c  e1a05000          MOV      r5,r0                 ;1061
000b20  e3750001          CMN      r5,#1                 ;1062
000b24  1a000001          BNE      |L1.2864|
000b28  e3a00001          MOV      r0,#1                 ;1062
000b2c  eaffffda          B        |L1.2716|
                  |L1.2864|
000b30  e3550002          CMP      r5,#2                 ;1063
000b34  3a000003          BCC      |L1.2888|
000b38  e5940000          LDR      r0,[r4,#0]            ;1063
000b3c  e590001c          LDR      r0,[r0,#0x1c]         ;1063
000b40  e1500005          CMP      r0,r5                 ;1063
000b44  8a000001          BHI      |L1.2896|
                  |L1.2888|
000b48  e3a00002          MOV      r0,#2                 ;1064
000b4c  eaffffd2          B        |L1.2716|
                  |L1.2896|
000b50  e0466008          SUB      r6,r6,r8              ;1065
                  |L1.2900|
000b54  e1560008          CMP      r6,r8                 ;1060
000b58  2affffec          BCS      |L1.2832|
000b5c  e1a01005          MOV      r1,r5                 ;1067
000b60  e5940000          LDR      r0,[r4,#0]            ;1067
000b64  ebfffffe          BL       clust2sect
000b68  e1a07000          MOV      r7,r0                 ;1067
                  |L1.2924|
000b6c  e584500c          STR      r5,[r4,#0xc]          ;1069
000b70  e3570000          CMP      r7,#0                 ;1070
000b74  1a000001          BNE      |L1.2944|
000b78  e3a00002          MOV      r0,#2                 ;1070
000b7c  eaffffc6          B        |L1.2716|
                  |L1.2944|
000b80  e5940000          LDR      r0,[r4,#0]            ;1071
000b84  e1d090ba          LDRH     r9,[r0,#0xa]          ;1071
000b88  e1a00fc9          ASR      r0,r9,#31             ;1071
000b8c  e0890da0          ADD      r0,r9,r0,LSR #27      ;1071
000b90  e1a012c0          ASR      r1,r0,#5              ;1071
000b94  e1a00006          MOV      r0,r6                 ;1071
000b98  ebfffffe          BL       __aeabi_uidivmod
000b9c  e0800007          ADD      r0,r0,r7              ;1071
000ba0  e5840010          STR      r0,[r4,#0x10]         ;1071
000ba4  e5940000          LDR      r0,[r4,#0]            ;1072
000ba8  e1d090ba          LDRH     r9,[r0,#0xa]          ;1072
000bac  e1a00fc9          ASR      r0,r9,#31             ;1072
000bb0  e0890da0          ADD      r0,r9,r0,LSR #27      ;1072
000bb4  e1a012c0          ASR      r1,r0,#5              ;1072
000bb8  e1a00006          MOV      r0,r6                 ;1072
000bbc  ebfffffe          BL       __aeabi_uidivmod
000bc0  e5940000          LDR      r0,[r4,#0]            ;1072
000bc4  e2800038          ADD      r0,r0,#0x38           ;1072
000bc8  e0800281          ADD      r0,r0,r1,LSL #5       ;1072
000bcc  e5840014          STR      r0,[r4,#0x14]         ;1072
000bd0  e3a00000          MOV      r0,#0                 ;1074
000bd4  eaffffb0          B        |L1.2716|
;;;1076   
                          ENDP

                  dir_next PROC
;;;1084   static
;;;1085   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000bd8  e92d47f0          PUSH     {r4-r10,lr}
;;;1086   	DIR* dp,		/* Pointer to the directory object */
;;;1087   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1088   )
;;;1089   {
000bdc  e1a04000          MOV      r4,r0
000be0  e1a08001          MOV      r8,r1
;;;1090   	DWORD clst;
;;;1091   	UINT i;
;;;1092   #if !_FS_READONLY
;;;1093   	UINT c;
;;;1094   #endif
;;;1095   
;;;1096   
;;;1097   	i = dp->index + 1;
000be4  e1d400b6          LDRH     r0,[r4,#6]
000be8  e2806001          ADD      r6,r0,#1
;;;1098   	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
000bec  e3d60801          BICS     r0,r6,#0x10000
000bf0  0a000002          BEQ      |L1.3072|
000bf4  e5940010          LDR      r0,[r4,#0x10]
000bf8  e3500000          CMP      r0,#0
000bfc  1a000001          BNE      |L1.3080|
                  |L1.3072|
;;;1099   		return FR_NO_FILE;
000c00  e3a00004          MOV      r0,#4
                  |L1.3076|
;;;1100   
;;;1101   	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
;;;1102   		dp->sect++;					/* Next sector */
;;;1103   
;;;1104   		if (!dp->clust) {		/* Static table */
;;;1105   			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
;;;1106   				return FR_NO_FILE;
;;;1107   		}
;;;1108   		else {					/* Dynamic table */
;;;1109   			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1110   				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
;;;1111   				if (clst <= 1) return FR_INT_ERR;
;;;1112   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1113   				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
;;;1114   #if !_FS_READONLY
;;;1115   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
;;;1116   					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
;;;1117   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1118   					if (clst == 1) return FR_INT_ERR;
;;;1119   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1120   					/* Clean-up stretched table */
;;;1121   					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
;;;1122   					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
;;;1123   					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
;;;1124   					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1125   						dp->fs->wflag = 1;
;;;1126   						if (sync_window(dp->fs)) return FR_DISK_ERR;
;;;1127   						dp->fs->winsect++;
;;;1128   					}
;;;1129   					dp->fs->winsect -= c;						/* Rewind window offset */
;;;1130   #else
;;;1131   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
;;;1132   					return FR_NO_FILE;							/* Report EOT */
;;;1133   #endif
;;;1134   				}
;;;1135   				dp->clust = clst;				/* Initialize data for new cluster */
;;;1136   				dp->sect = clust2sect(dp->fs, clst);
;;;1137   			}
;;;1138   		}
;;;1139   	}
;;;1140   
;;;1141   	dp->index = (WORD)i;	/* Current index */
;;;1142   	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
;;;1143   
;;;1144   	return FR_OK;
;;;1145   }
000c04  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3080|
000c08  e5940000          LDR      r0,[r4,#0]            ;1101
000c0c  e1d090ba          LDRH     r9,[r0,#0xa]          ;1101
000c10  e1a00fc9          ASR      r0,r9,#31             ;1101
000c14  e0890da0          ADD      r0,r9,r0,LSR #27      ;1101
000c18  e1a012c0          ASR      r1,r0,#5              ;1101
000c1c  e1a00006          MOV      r0,r6                 ;1101
000c20  ebfffffe          BL       __aeabi_uidivmod
000c24  e3510000          CMP      r1,#0                 ;1101
000c28  1a00006a          BNE      |L1.3544|
000c2c  e5940010          LDR      r0,[r4,#0x10]         ;1102
000c30  e2800001          ADD      r0,r0,#1              ;1102
000c34  e5840010          STR      r0,[r4,#0x10]         ;1102
000c38  e594000c          LDR      r0,[r4,#0xc]          ;1104
000c3c  e3500000          CMP      r0,#0                 ;1104
000c40  1a000005          BNE      |L1.3164|
000c44  e5940000          LDR      r0,[r4,#0]            ;1105
000c48  e1d000b8          LDRH     r0,[r0,#8]            ;1105
000c4c  e1500006          CMP      r0,r6                 ;1105
000c50  8a000060          BHI      |L1.3544|
000c54  e3a00004          MOV      r0,#4                 ;1106
000c58  eaffffe9          B        |L1.3076|
                  |L1.3164|
000c5c  e5940000          LDR      r0,[r4,#0]            ;1109
000c60  e1d090ba          LDRH     r9,[r0,#0xa]          ;1109
000c64  e1a00fc9          ASR      r0,r9,#31             ;1109
000c68  e0890da0          ADD      r0,r9,r0,LSR #27      ;1109
000c6c  e1a012c0          ASR      r1,r0,#5              ;1109
000c70  e1a00006          MOV      r0,r6                 ;1109
000c74  ebfffffe          BL       __aeabi_uidivmod
000c78  e5941000          LDR      r1,[r4,#0]            ;1109
000c7c  e5d11002          LDRB     r1,[r1,#2]            ;1109
000c80  e2411001          SUB      r1,r1,#1              ;1109
000c84  e1100001          TST      r0,r1                 ;1109
000c88  1a000052          BNE      |L1.3544|
000c8c  e5940000          LDR      r0,[r4,#0]            ;1110
000c90  e594100c          LDR      r1,[r4,#0xc]          ;1110
000c94  ebfffffe          BL       get_fat
000c98  e1a05000          MOV      r5,r0                 ;1110
000c9c  e3550001          CMP      r5,#1                 ;1111
000ca0  8a000001          BHI      |L1.3244|
000ca4  e3a00002          MOV      r0,#2                 ;1111
000ca8  eaffffd5          B        |L1.3076|
                  |L1.3244|
000cac  e3750001          CMN      r5,#1                 ;1112
000cb0  1a000001          BNE      |L1.3260|
000cb4  e3a00001          MOV      r0,#1                 ;1112
000cb8  eaffffd1          B        |L1.3076|
                  |L1.3260|
000cbc  e5940000          LDR      r0,[r4,#0]            ;1113
000cc0  e590001c          LDR      r0,[r0,#0x1c]         ;1113
000cc4  e1500005          CMP      r0,r5                 ;1113
000cc8  8a00003d          BHI      |L1.3524|
000ccc  e3580000          CMP      r8,#0                 ;1115
000cd0  1a000001          BNE      |L1.3292|
000cd4  e3a00004          MOV      r0,#4                 ;1115
000cd8  eaffffc9          B        |L1.3076|
                  |L1.3292|
000cdc  e5940000          LDR      r0,[r4,#0]            ;1116
000ce0  e594100c          LDR      r1,[r4,#0xc]          ;1116
000ce4  ebfffffe          BL       create_chain
000ce8  e1a05000          MOV      r5,r0                 ;1116
000cec  e3550000          CMP      r5,#0                 ;1117
000cf0  1a000001          BNE      |L1.3324|
000cf4  e3a00007          MOV      r0,#7                 ;1117
000cf8  eaffffc1          B        |L1.3076|
                  |L1.3324|
000cfc  e3550001          CMP      r5,#1                 ;1118
000d00  1a000001          BNE      |L1.3340|
000d04  e3a00002          MOV      r0,#2                 ;1118
000d08  eaffffbd          B        |L1.3076|
                  |L1.3340|
000d0c  e3750001          CMN      r5,#1                 ;1119
000d10  1a000001          BNE      |L1.3356|
000d14  e3a00001          MOV      r0,#1                 ;1119
000d18  eaffffb9          B        |L1.3076|
                  |L1.3356|
000d1c  e5940000          LDR      r0,[r4,#0]            ;1121
000d20  ebfffffe          BL       sync_window
000d24  e3500000          CMP      r0,#0                 ;1121
000d28  0a000001          BEQ      |L1.3380|
000d2c  e3a00001          MOV      r0,#1                 ;1121
000d30  eaffffb3          B        |L1.3076|
                  |L1.3380|
000d34  e5941000          LDR      r1,[r4,#0]            ;1122
000d38  e1d120ba          LDRH     r2,[r1,#0xa]          ;1122
000d3c  e2810038          ADD      r0,r1,#0x38           ;1122
000d40  e3a01000          MOV      r1,#0                 ;1122
000d44  ebfffffe          BL       mem_set
000d48  e1a01005          MOV      r1,r5                 ;1123
000d4c  e5940000          LDR      r0,[r4,#0]            ;1123
000d50  ebfffffe          BL       clust2sect
000d54  e5941000          LDR      r1,[r4,#0]            ;1123
000d58  e5810034          STR      r0,[r1,#0x34]         ;1123
000d5c  e3a07000          MOV      r7,#0                 ;1124
000d60  ea00000e          B        |L1.3488|
                  |L1.3428|
000d64  e3a00001          MOV      r0,#1                 ;1125
000d68  e5941000          LDR      r1,[r4,#0]            ;1125
000d6c  e5c10004          STRB     r0,[r1,#4]            ;1125
000d70  e5940000          LDR      r0,[r4,#0]            ;1126
000d74  ebfffffe          BL       sync_window
000d78  e3500000          CMP      r0,#0                 ;1126
000d7c  0a000001          BEQ      |L1.3464|
000d80  e3a00001          MOV      r0,#1                 ;1126
000d84  eaffff9e          B        |L1.3076|
                  |L1.3464|
000d88  e5940000          LDR      r0,[r4,#0]            ;1127
000d8c  e5900034          LDR      r0,[r0,#0x34]         ;1127
000d90  e2800001          ADD      r0,r0,#1              ;1127
000d94  e5941000          LDR      r1,[r4,#0]            ;1127
000d98  e5810034          STR      r0,[r1,#0x34]         ;1127
000d9c  e2877001          ADD      r7,r7,#1              ;1124
                  |L1.3488|
000da0  e5940000          LDR      r0,[r4,#0]            ;1124
000da4  e5d00002          LDRB     r0,[r0,#2]            ;1124
000da8  e1500007          CMP      r0,r7                 ;1124
000dac  8affffec          BHI      |L1.3428|
000db0  e5940000          LDR      r0,[r4,#0]            ;1129
000db4  e5900034          LDR      r0,[r0,#0x34]         ;1129
000db8  e0400007          SUB      r0,r0,r7              ;1129
000dbc  e5941000          LDR      r1,[r4,#0]            ;1129
000dc0  e5810034          STR      r0,[r1,#0x34]         ;1129
                  |L1.3524|
000dc4  e584500c          STR      r5,[r4,#0xc]          ;1135
000dc8  e1a01005          MOV      r1,r5                 ;1136
000dcc  e5940000          LDR      r0,[r4,#0]            ;1136
000dd0  ebfffffe          BL       clust2sect
000dd4  e5840010          STR      r0,[r4,#0x10]         ;1136
                  |L1.3544|
000dd8  e1c460b6          STRH     r6,[r4,#6]            ;1141
000ddc  e5940000          LDR      r0,[r4,#0]            ;1142
000de0  e1d090ba          LDRH     r9,[r0,#0xa]          ;1142
000de4  e1a00fc9          ASR      r0,r9,#31             ;1142
000de8  e0890da0          ADD      r0,r9,r0,LSR #27      ;1142
000dec  e1a012c0          ASR      r1,r0,#5              ;1142
000df0  e1a00006          MOV      r0,r6                 ;1142
000df4  ebfffffe          BL       __aeabi_uidivmod
000df8  e5940000          LDR      r0,[r4,#0]            ;1142
000dfc  e2800038          ADD      r0,r0,#0x38           ;1142
000e00  e0800281          ADD      r0,r0,r1,LSL #5       ;1142
000e04  e5840014          STR      r0,[r4,#0x14]         ;1142
000e08  e3a00000          MOV      r0,#0                 ;1144
000e0c  eaffff7c          B        |L1.3076|
;;;1146   
                          ENDP

                  dir_alloc PROC
;;;1155   static
;;;1156   FRESULT dir_alloc (
000e10  e92d41f0          PUSH     {r4-r8,lr}
;;;1157   	DIR* dp,	/* Pointer to the directory object */
;;;1158   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1159   )
;;;1160   {
000e14  e1a04000          MOV      r4,r0
000e18  e1a06001          MOV      r6,r1
;;;1161   	FRESULT res;
;;;1162   	UINT n;
;;;1163   
;;;1164   
;;;1165   	res = dir_sdi(dp, 0);
000e1c  e3a01000          MOV      r1,#0
000e20  e1a00004          MOV      r0,r4
000e24  ebfffffe          BL       dir_sdi
000e28  e1a05000          MOV      r5,r0
;;;1166   	if (res == FR_OK) {
000e2c  e3550000          CMP      r5,#0
000e30  1a00001d          BNE      |L1.3756|
;;;1167   		n = 0;
000e34  e3a07000          MOV      r7,#0
;;;1168   		do {
000e38  e1a00000          MOV      r0,r0
                  |L1.3644|
;;;1169   			res = move_window(dp->fs, dp->sect);
000e3c  e5940000          LDR      r0,[r4,#0]
000e40  e5941010          LDR      r1,[r4,#0x10]
000e44  ebfffffe          BL       move_window
000e48  e1a05000          MOV      r5,r0
;;;1170   			if (res != FR_OK) break;
000e4c  e3550000          CMP      r5,#0
000e50  0a000000          BEQ      |L1.3672|
000e54  ea000013          B        |L1.3752|
                  |L1.3672|
;;;1171   			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
000e58  e5940014          LDR      r0,[r4,#0x14]
000e5c  e5d00000          LDRB     r0,[r0,#0]
000e60  e35000e5          CMP      r0,#0xe5
000e64  0a000003          BEQ      |L1.3704|
000e68  e5940014          LDR      r0,[r4,#0x14]
000e6c  e5d00000          LDRB     r0,[r0,#0]
000e70  e3500000          CMP      r0,#0
000e74  1a000004          BNE      |L1.3724|
                  |L1.3704|
;;;1172   				if (++n == nent) break;	/* A block of contiguous free entries is found */
000e78  e2870001          ADD      r0,r7,#1
000e7c  e1a07000          MOV      r7,r0
000e80  e1500006          CMP      r0,r6
000e84  1a000001          BNE      |L1.3728|
000e88  ea000006          B        |L1.3752|
                  |L1.3724|
;;;1173   			} else {
;;;1174   				n = 0;					/* Not a blank entry. Restart to search */
000e8c  e3a07000          MOV      r7,#0
                  |L1.3728|
;;;1175   			}
;;;1176   			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
000e90  e3a01001          MOV      r1,#1
000e94  e1a00004          MOV      r0,r4
000e98  ebfffffe          BL       dir_next
000e9c  e1a05000          MOV      r5,r0
;;;1177   		} while (res == FR_OK);
000ea0  e3550000          CMP      r5,#0
000ea4  0affffe4          BEQ      |L1.3644|
                  |L1.3752|
000ea8  e1a00000          MOV      r0,r0                 ;1170
                  |L1.3756|
;;;1178   	}
;;;1179   	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
000eac  e3550004          CMP      r5,#4
000eb0  1a000000          BNE      |L1.3768|
000eb4  e3a05007          MOV      r5,#7
                  |L1.3768|
;;;1180   	return res;
000eb8  e1a00005          MOV      r0,r5
;;;1181   }
000ebc  e8bd81f0          POP      {r4-r8,pc}
;;;1182   #endif
                          ENDP

                  ld_clust PROC
;;;1191   static
;;;1192   DWORD ld_clust (
000ec0  e1a02000          MOV      r2,r0
;;;1193   	FATFS* fs,	/* Pointer to the fs object */
;;;1194   	BYTE* dir	/* Pointer to the directory entry */
;;;1195   )
;;;1196   {
;;;1197   	DWORD cl;
;;;1198   
;;;1199   	cl = LD_WORD(dir + DIR_FstClusLO);
000ec4  e5d1301a          LDRB     r3,[r1,#0x1a]
000ec8  e5d1c01b          LDRB     r12,[r1,#0x1b]
000ecc  e183040c          ORR      r0,r3,r12,LSL #8
;;;1200   	if (fs->fs_type == FS_FAT32)
000ed0  e5d23000          LDRB     r3,[r2,#0]
000ed4  e3530003          CMP      r3,#3
000ed8  1a000003          BNE      |L1.3820|
;;;1201   		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
000edc  e5d13014          LDRB     r3,[r1,#0x14]
000ee0  e5d1c015          LDRB     r12,[r1,#0x15]
000ee4  e183340c          ORR      r3,r3,r12,LSL #8
000ee8  e1800803          ORR      r0,r0,r3,LSL #16
                  |L1.3820|
;;;1202   
;;;1203   	return cl;
;;;1204   }
000eec  e12fff1e          BX       lr
;;;1205   
                          ENDP

                  st_clust PROC
;;;1208   static
;;;1209   void st_clust (
000ef0  e5c0101a          STRB     r1,[r0,#0x1a]
;;;1210   	BYTE* dir,	/* Pointer to the directory entry */
;;;1211   	DWORD cl	/* Value to be set */
;;;1212   )
;;;1213   {
;;;1214   	ST_WORD(dir + DIR_FstClusLO, cl);
000ef4  e1a02801          LSL      r2,r1,#16
000ef8  e1a02c22          LSR      r2,r2,#24
000efc  e5c0201b          STRB     r2,[r0,#0x1b]
;;;1215   	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
000f00  e1a02401          LSL      r2,r1,#8
000f04  e1a02c22          LSR      r2,r2,#24
000f08  e5c02014          STRB     r2,[r0,#0x14]
000f0c  e1a02c21          LSR      r2,r1,#24
000f10  e5c02015          STRB     r2,[r0,#0x15]
;;;1216   }
000f14  e12fff1e          BX       lr
;;;1217   #endif
                          ENDP

                  cmp_lfn PROC
;;;1230   static
;;;1231   int cmp_lfn (			/* 1:Matched, 0:Not matched */
000f18  e92d47f0          PUSH     {r4-r10,lr}
;;;1232   	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
;;;1233   	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
;;;1234   )
;;;1235   {
000f1c  e1a05000          MOV      r5,r0
000f20  e1a04001          MOV      r4,r1
;;;1236   	UINT i, s;
;;;1237   	WCHAR wc, uc;
;;;1238   
;;;1239   
;;;1240   	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
000f24  e5d40000          LDRB     r0,[r4,#0]
000f28  e3c00040          BIC      r0,r0,#0x40
000f2c  e2400001          SUB      r0,r0,#1
000f30  e0801100          ADD      r1,r0,r0,LSL #2
000f34  e0818180          ADD      r8,r1,r0,LSL #3
;;;1241   	s = 0; wc = 1;
000f38  e3a09000          MOV      r9,#0
000f3c  e3a06001          MOV      r6,#1
;;;1242   	do {
000f40  e1a00000          MOV      r0,r0
                  |L1.3908|
;;;1243   		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
000f44  e59f0890          LDR      r0,|L1.6108|
000f48  e7d00009          LDRB     r0,[r0,r9]
000f4c  e7d40000          LDRB     r0,[r4,r0]
000f50  e59f1884          LDR      r1,|L1.6108|
000f54  e7d11009          LDRB     r1,[r1,r9]
000f58  e0811004          ADD      r1,r1,r4
000f5c  e5d11001          LDRB     r1,[r1,#1]
000f60  e1807401          ORR      r7,r0,r1,LSL #8
;;;1244   		if (wc) {	/* Last character has not been processed */
000f64  e3560000          CMP      r6,#0
000f68  0a00000d          BEQ      |L1.4004|
;;;1245   			wc = ff_wtoupper(uc);		/* Convert it to upper case */
000f6c  e1a00007          MOV      r0,r7
000f70  ebfffffe          BL       ff_wtoupper
000f74  e1a06000          MOV      r6,r0
;;;1246   			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
000f78  e35800ff          CMP      r8,#0xff
000f7c  2a000006          BCS      |L1.3996|
000f80  e1a01008          MOV      r1,r8
000f84  e2888001          ADD      r8,r8,#1
000f88  e0851081          ADD      r1,r5,r1,LSL #1
000f8c  e1d100b0          LDRH     r0,[r1,#0]
000f90  ebfffffe          BL       ff_wtoupper
000f94  e1500006          CMP      r0,r6
000f98  0a000006          BEQ      |L1.4024|
                  |L1.3996|
;;;1247   				return 0;				/* Not matched */
000f9c  e3a00000          MOV      r0,#0
                  |L1.4000|
;;;1248   		} else {
;;;1249   			if (uc != 0xFFFF) return 0;	/* Check filler */
;;;1250   		}
;;;1251   	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
;;;1252   
;;;1253   	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1254   		return 0;
;;;1255   
;;;1256   	return 1;						/* The part of LFN matched */
;;;1257   }
000fa0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.4004|
000fa4  e2470cff          SUB      r0,r7,#0xff00         ;1249
000fa8  e25000ff          SUBS     r0,r0,#0xff           ;1249
000fac  0a000001          BEQ      |L1.4024|
000fb0  e3a00000          MOV      r0,#0                 ;1249
000fb4  eafffff9          B        |L1.4000|
                  |L1.4024|
000fb8  e2890001          ADD      r0,r9,#1              ;1251
000fbc  e1a09000          MOV      r9,r0                 ;1251
000fc0  e350000d          CMP      r0,#0xd               ;1251
000fc4  3affffde          BCC      |L1.3908|
000fc8  e5d40000          LDRB     r0,[r4,#0]            ;1253
000fcc  e3100040          TST      r0,#0x40              ;1253
000fd0  0a000007          BEQ      |L1.4084|
000fd4  e3560000          CMP      r6,#0                 ;1253
000fd8  0a000005          BEQ      |L1.4084|
000fdc  e0850088          ADD      r0,r5,r8,LSL #1       ;1253
000fe0  e1d000b0          LDRH     r0,[r0,#0]            ;1253
000fe4  e3500000          CMP      r0,#0                 ;1253
000fe8  0a000001          BEQ      |L1.4084|
000fec  e3a00000          MOV      r0,#0                 ;1254
000ff0  eaffffea          B        |L1.4000|
                  |L1.4084|
000ff4  e3a00001          MOV      r0,#1                 ;1256
000ff8  eaffffe8          B        |L1.4000|
;;;1258   
                          ENDP

                  pick_lfn PROC
;;;1261   static
;;;1262   int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
000ffc  e92d4070          PUSH     {r4-r6,lr}
;;;1263   	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
;;;1264   	BYTE* dir			/* Pointer to the directory entry */
;;;1265   )
;;;1266   {
001000  e1a03000          MOV      r3,r0
;;;1267   	UINT i, s;
;;;1268   	WCHAR wc, uc;
;;;1269   
;;;1270   
;;;1271   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
001004  e5d10000          LDRB     r0,[r1,#0]
001008  e200003f          AND      r0,r0,#0x3f
00100c  e2400001          SUB      r0,r0,#1
001010  e0806100          ADD      r6,r0,r0,LSL #2
001014  e0862180          ADD      r2,r6,r0,LSL #3
;;;1272   
;;;1273   	s = 0; wc = 1;
001018  e3a0c000          MOV      r12,#0
00101c  e3a05001          MOV      r5,#1
;;;1274   	do {
001020  e1a00000          MOV      r0,r0
                  |L1.4132|
;;;1275   		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
001024  e59f07b0          LDR      r0,|L1.6108|
001028  e7d0000c          LDRB     r0,[r0,r12]
00102c  e7d10000          LDRB     r0,[r1,r0]
001030  e59f67a4          LDR      r6,|L1.6108|
001034  e7d6600c          LDRB     r6,[r6,r12]
001038  e0866001          ADD      r6,r6,r1
00103c  e5d66001          LDRB     r6,[r6,#1]
001040  e1804406          ORR      r4,r0,r6,LSL #8
;;;1276   		if (wc) {	/* Last character has not been processed */
001044  e3550000          CMP      r5,#0
001048  0a000009          BEQ      |L1.4212|
;;;1277   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
00104c  e35200ff          CMP      r2,#0xff
001050  3a000001          BCC      |L1.4188|
001054  e3a00000          MOV      r0,#0
                  |L1.4184|
;;;1278   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1279   		} else {
;;;1280   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1281   		}
;;;1282   	} while (++s < 13);						/* Read all character in the entry */
;;;1283   
;;;1284   	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
;;;1285   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1286   		lfnbuf[i] = 0;
;;;1287   	}
;;;1288   
;;;1289   	return 1;
;;;1290   }
001058  e8bd8070          POP      {r4-r6,pc}
                  |L1.4188|
00105c  e1a05004          MOV      r5,r4                 ;1278
001060  e1a00002          MOV      r0,r2                 ;1278
001064  e2822001          ADD      r2,r2,#1              ;1278
001068  e0830080          ADD      r0,r3,r0,LSL #1       ;1278
00106c  e1c040b0          STRH     r4,[r0,#0]            ;1278
001070  ea000004          B        |L1.4232|
                  |L1.4212|
001074  e2440cff          SUB      r0,r4,#0xff00         ;1280
001078  e25000ff          SUBS     r0,r0,#0xff           ;1280
00107c  0a000001          BEQ      |L1.4232|
001080  e3a00000          MOV      r0,#0                 ;1280
001084  eafffff3          B        |L1.4184|
                  |L1.4232|
001088  e28c0001          ADD      r0,r12,#1             ;1282
00108c  e1a0c000          MOV      r12,r0                ;1282
001090  e350000d          CMP      r0,#0xd               ;1282
001094  3affffe2          BCC      |L1.4132|
001098  e5d10000          LDRB     r0,[r1,#0]            ;1284
00109c  e3100040          TST      r0,#0x40              ;1284
0010a0  0a000006          BEQ      |L1.4288|
0010a4  e35200ff          CMP      r2,#0xff              ;1285
0010a8  3a000001          BCC      |L1.4276|
0010ac  e3a00000          MOV      r0,#0                 ;1285
0010b0  eaffffe8          B        |L1.4184|
                  |L1.4276|
0010b4  e3a00000          MOV      r0,#0                 ;1286
0010b8  e0836082          ADD      r6,r3,r2,LSL #1       ;1286
0010bc  e1c600b0          STRH     r0,[r6,#0]            ;1286
                  |L1.4288|
0010c0  e3a00001          MOV      r0,#1                 ;1289
0010c4  eaffffe3          B        |L1.4184|
;;;1291   
                          ENDP

                  fit_lfn PROC
;;;1294   static
;;;1295   void fit_lfn (
0010c8  e92d40f0          PUSH     {r4-r7,lr}
;;;1296   	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
;;;1297   	BYTE* dir,				/* Pointer to the directory entry */
;;;1298   	BYTE ord,				/* LFN order (1-20) */
;;;1299   	BYTE sum				/* SFN sum */
;;;1300   )
;;;1301   {
0010cc  e1a0c000          MOV      r12,r0
0010d0  e1a04003          MOV      r4,r3
;;;1302   	UINT i, s;
;;;1303   	WCHAR wc;
;;;1304   
;;;1305   
;;;1306   	dir[LDIR_Chksum] = sum;			/* Set check sum */
0010d4  e5c1400d          STRB     r4,[r1,#0xd]
;;;1307   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
0010d8  e3a0600f          MOV      r6,#0xf
0010dc  e5c1600b          STRB     r6,[r1,#0xb]
;;;1308   	dir[LDIR_Type] = 0;
0010e0  e3a06000          MOV      r6,#0
0010e4  e5c1600c          STRB     r6,[r1,#0xc]
;;;1309   	ST_WORD(dir + LDIR_FstClusLO, 0);
0010e8  e5c1601a          STRB     r6,[r1,#0x1a]
0010ec  e5c1601b          STRB     r6,[r1,#0x1b]
;;;1310   
;;;1311   	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
0010f0  e2426001          SUB      r6,r2,#1
0010f4  e0867106          ADD      r7,r6,r6,LSL #2
0010f8  e0875186          ADD      r5,r7,r6,LSL #3
;;;1312   	s = wc = 0;
0010fc  e3a06000          MOV      r6,#0
001100  e1a00006          MOV      r0,r6
001104  e1a03006          MOV      r3,r6
;;;1313   	do {
001108  e1a00000          MOV      r0,r0
                  |L1.4364|
;;;1314   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
00110c  e2406cff          SUB      r6,r0,#0xff00
001110  e25660ff          SUBS     r6,r6,#0xff
001114  0a000003          BEQ      |L1.4392|
001118  e1a06005          MOV      r6,r5
00111c  e2855001          ADD      r5,r5,#1
001120  e08c6086          ADD      r6,r12,r6,LSL #1
001124  e1d600b0          LDRH     r0,[r6,#0]
                  |L1.4392|
;;;1315   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
001128  e59f76ac          LDR      r7,|L1.6108|
00112c  e7d77003          LDRB     r7,[r7,r3]
001130  e7c10007          STRB     r0,[r1,r7]
001134  e1a06440          ASR      r6,r0,#8
001138  e59f769c          LDR      r7,|L1.6108|
00113c  e7d77003          LDRB     r7,[r7,r3]
001140  e0877001          ADD      r7,r7,r1
001144  e5c76001          STRB     r6,[r7,#1]
;;;1316   		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
001148  e3500000          CMP      r0,#0
00114c  1a000000          BNE      |L1.4436|
001150  e59f0688          LDR      r0,|L1.6112|
                  |L1.4436|
;;;1317   	} while (++s < 13);
001154  e2836001          ADD      r6,r3,#1
001158  e1a03006          MOV      r3,r6
00115c  e356000d          CMP      r6,#0xd
001160  3affffe9          BCC      |L1.4364|
;;;1318   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
001164  e2406cff          SUB      r6,r0,#0xff00
001168  e25660ff          SUBS     r6,r6,#0xff
00116c  0a000003          BEQ      |L1.4480|
001170  e08c6085          ADD      r6,r12,r5,LSL #1
001174  e1d660b0          LDRH     r6,[r6,#0]
001178  e3560000          CMP      r6,#0
00117c  1a000000          BNE      |L1.4484|
                  |L1.4480|
001180  e3822040          ORR      r2,r2,#0x40
                  |L1.4484|
;;;1319   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
001184  e5c12000          STRB     r2,[r1,#0]
;;;1320   }
001188  e8bd80f0          POP      {r4-r7,pc}
;;;1321   
                          ENDP

                  gen_numname PROC
;;;1332   static
;;;1333   void gen_numname (
00118c  e92d4fff          PUSH     {r0-r11,lr}
;;;1334   	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
;;;1335   	const BYTE* src,	/* Pointer to SFN */
;;;1336   	const WCHAR* lfn,	/* Pointer to LFN */
;;;1337   	UINT seq			/* Sequence number */
;;;1338   )
;;;1339   {
001190  e24dd00c          SUB      sp,sp,#0xc
001194  e1a09000          MOV      r9,r0
001198  e1a08002          MOV      r8,r2
00119c  e1a05003          MOV      r5,r3
;;;1340   	BYTE ns[8], c;
;;;1341   	UINT i, j;
;;;1342   	WCHAR wc;
;;;1343   	DWORD sr;
;;;1344   
;;;1345   
;;;1346   	mem_cpy(dst, src, 11);
0011a0  e3a0200b          MOV      r2,#0xb
0011a4  e1a00009          MOV      r0,r9
0011a8  e59d1010          LDR      r1,[sp,#0x10]
0011ac  ebfffffe          BL       mem_cpy
;;;1347   
;;;1348   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
0011b0  e3550005          CMP      r5,#5
0011b4  9a000012          BLS      |L1.4612|
;;;1349   		sr = seq;
0011b8  e1a07005          MOV      r7,r5
;;;1350   		while (*lfn) {	/* Create a CRC */
0011bc  ea00000c          B        |L1.4596|
                  |L1.4544|
;;;1351   			wc = *lfn++;
0011c0  e0d8b0b2          LDRH     r11,[r8],#2
;;;1352   			for (i = 0; i < 16; i++) {
0011c4  e3a04000          MOV      r4,#0
0011c8  ea000007          B        |L1.4588|
                  |L1.4556|
;;;1353   				sr = (sr << 1) + (wc & 1);
0011cc  e20b0001          AND      r0,r11,#1
0011d0  e0807087          ADD      r7,r0,r7,LSL #1
;;;1354   				wc >>= 1;
0011d4  e1a0b0cb          ASR      r11,r11,#1
;;;1355   				if (sr & 0x10000) sr ^= 0x11021;
0011d8  e3170801          TST      r7,#0x10000
0011dc  0a000001          BEQ      |L1.4584|
0011e0  e2277a11          EOR      r7,r7,#0x11000
0011e4  e2277021          EOR      r7,r7,#0x21
                  |L1.4584|
0011e8  e2844001          ADD      r4,r4,#1              ;1352
                  |L1.4588|
0011ec  e3540010          CMP      r4,#0x10              ;1352
0011f0  3afffff5          BCC      |L1.4556|
                  |L1.4596|
0011f4  e1d800b0          LDRH     r0,[r8,#0]            ;1350
0011f8  e3500000          CMP      r0,#0                 ;1350
0011fc  1affffef          BNE      |L1.4544|
;;;1356   			}
;;;1357   		}
;;;1358   		seq = (UINT)sr;
001200  e1a05007          MOV      r5,r7
                  |L1.4612|
;;;1359   	}
;;;1360   
;;;1361   	/* itoa (hexdecimal) */
;;;1362   	i = 7;
001204  e3a04007          MOV      r4,#7
;;;1363   	do {
001208  e1a00000          MOV      r0,r0
                  |L1.4620|
;;;1364   		c = (seq % 16) + '0';
00120c  e205000f          AND      r0,r5,#0xf
001210  e280a030          ADD      r10,r0,#0x30
;;;1365   		if (c > '9') c += 7;
001214  e35a0039          CMP      r10,#0x39
001218  da000001          BLE      |L1.4644|
00121c  e28a0007          ADD      r0,r10,#7
001220  e200a0ff          AND      r10,r0,#0xff
                  |L1.4644|
;;;1366   		ns[i--] = c;
001224  e1a00004          MOV      r0,r4
001228  e2444001          SUB      r4,r4,#1
00122c  e28d1004          ADD      r1,sp,#4
001230  e7c1a000          STRB     r10,[r1,r0]
;;;1367   		seq /= 16;
001234  e1a05225          LSR      r5,r5,#4
;;;1368   	} while (seq);
001238  e3550000          CMP      r5,#0
00123c  1afffff2          BNE      |L1.4620|
;;;1369   	ns[i] = '~';
001240  e3a0007e          MOV      r0,#0x7e
001244  e28d1004          ADD      r1,sp,#4
001248  e7c10004          STRB     r0,[r1,r4]
;;;1370   
;;;1371   	/* Append the number */
;;;1372   	for (j = 0; j < i && dst[j] != ' '; j++) {
00124c  e3a06000          MOV      r6,#0
001250  ea000000          B        |L1.4696|
                  |L1.4692|
001254  e2866001          ADD      r6,r6,#1
                  |L1.4696|
001258  e1560004          CMP      r6,r4
00125c  2a000002          BCS      |L1.4716|
001260  e7d90006          LDRB     r0,[r9,r6]
001264  e3500020          CMP      r0,#0x20
001268  1afffff9          BNE      |L1.4692|
                  |L1.4716|
;;;1373   		if (IsDBCS1(dst[j])) {
;;;1374   			if (j == i - 1) break;
;;;1375   			j++;
;;;1376   		}
;;;1377   	}
;;;1378   	do {
00126c  e1a00000          MOV      r0,r0
                  |L1.4720|
;;;1379   		dst[j++] = (i < 8) ? ns[i++] : ' ';
001270  e3540008          CMP      r4,#8
001274  2a000004          BCS      |L1.4748|
001278  e1a00004          MOV      r0,r4
00127c  e2844001          ADD      r4,r4,#1
001280  e28d1004          ADD      r1,sp,#4
001284  e7d10000          LDRB     r0,[r1,r0]
001288  ea000000          B        |L1.4752|
                  |L1.4748|
00128c  e3a00020          MOV      r0,#0x20
                  |L1.4752|
001290  e1a01006          MOV      r1,r6
001294  e2866001          ADD      r6,r6,#1
001298  e7c90001          STRB     r0,[r9,r1]
;;;1380   	} while (j < 8);
00129c  e3560008          CMP      r6,#8
0012a0  3afffff2          BCC      |L1.4720|
;;;1381   }
0012a4  e28dd01c          ADD      sp,sp,#0x1c
0012a8  e8bd8ff0          POP      {r4-r11,pc}
;;;1382   #endif
                          ENDP

                  sum_sfn PROC
;;;1391   static
;;;1392   BYTE sum_sfn (
0012ac  e92d4010          PUSH     {r4,lr}
;;;1393   	const BYTE* dir		/* Pointer to the SFN entry */
;;;1394   )
;;;1395   {
0012b0  e1a01000          MOV      r1,r0
;;;1396   	BYTE sum = 0;
0012b4  e3a00000          MOV      r0,#0
;;;1397   	UINT n = 11;
0012b8  e3a0200b          MOV      r2,#0xb
;;;1398   
;;;1399   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
0012bc  e1a00000          MOV      r0,r0
                  |L1.4800|
0012c0  e1a030c0          ASR      r3,r0,#1
0012c4  e0833380          ADD      r3,r3,r0,LSL #7
0012c8  e4d1c001          LDRB     r12,[r1],#1
0012cc  e083300c          ADD      r3,r3,r12
0012d0  e20300ff          AND      r0,r3,#0xff
0012d4  e2423001          SUB      r3,r2,#1
0012d8  e1b02003          MOVS     r2,r3
0012dc  1afffff7          BNE      |L1.4800|
;;;1400   	return sum;
;;;1401   }
0012e0  e8bd8010          POP      {r4,pc}
;;;1402   #endif
                          ENDP

                  dir_find PROC
;;;1411   static
;;;1412   FRESULT dir_find (
0012e4  e92d47f0          PUSH     {r4-r10,lr}
;;;1413   	DIR* dp			/* Pointer to the directory object linked to the file name */
;;;1414   )
;;;1415   {
0012e8  e1a04000          MOV      r4,r0
;;;1416   	FRESULT res;
;;;1417   	BYTE c, *dir;
;;;1418   #if _USE_LFN
;;;1419   	BYTE a, ord, sum;
;;;1420   #endif
;;;1421   
;;;1422   	res = dir_sdi(dp, 0);			/* Rewind directory object */
0012ec  e3a01000          MOV      r1,#0
0012f0  e1a00004          MOV      r0,r4
0012f4  ebfffffe          BL       dir_sdi
0012f8  e1a07000          MOV      r7,r0
;;;1423   	if (res != FR_OK) return res;
0012fc  e3570000          CMP      r7,#0
001300  0a000001          BEQ      |L1.4876|
001304  e1a00007          MOV      r0,r7
                  |L1.4872|
;;;1424   
;;;1425   #if _USE_LFN
;;;1426   	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1427   #endif
;;;1428   	do {
;;;1429   		res = move_window(dp->fs, dp->sect);
;;;1430   		if (res != FR_OK) break;
;;;1431   		dir = dp->dir;					/* Ptr to the directory entry of current index */
;;;1432   		c = dir[DIR_Name];
;;;1433   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1434   #if _USE_LFN	/* LFN configuration */
;;;1435   		a = dir[DIR_Attr] & AM_MASK;
;;;1436   		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1437   			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1438   		} else {
;;;1439   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1440   				if (dp->lfn) {
;;;1441   					if (c & LLEF) {		/* Is it start of LFN sequence? */
;;;1442   						sum = dir[LDIR_Chksum];
;;;1443   						c &= ~LLEF; ord = c;	/* LFN start order */
;;;1444   						dp->lfn_idx = dp->index;	/* Start index of LFN */
;;;1445   					}
;;;1446   					/* Check validity of the LFN entry and compare it with given name */
;;;1447   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1448   				}
;;;1449   			} else {					/* An SFN entry is found */
;;;1450   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1451   				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
;;;1452   				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1453   			}
;;;1454   		}
;;;1455   #else		/* Non LFN configuration */
;;;1456   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
;;;1457   			break;
;;;1458   #endif
;;;1459   		res = dir_next(dp, 0);		/* Next entry */
;;;1460   	} while (res == FR_OK);
;;;1461   
;;;1462   	return res;
;;;1463   }
001308  e8bd87f0          POP      {r4-r10,pc}
                  |L1.4876|
00130c  e3a090ff          MOV      r9,#0xff              ;1426
001310  e1a0a009          MOV      r10,r9                ;1426
001314  e3e00000          MVN      r0,#0                 ;1426
001318  e1c402b0          STRH     r0,[r4,#0x20]         ;1426
00131c  e1a00000          MOV      r0,r0                 ;1428
                  |L1.4896|
001320  e5940000          LDR      r0,[r4,#0]            ;1429
001324  e5941010          LDR      r1,[r4,#0x10]         ;1429
001328  ebfffffe          BL       move_window
00132c  e1a07000          MOV      r7,r0                 ;1429
001330  e3570000          CMP      r7,#0                 ;1430
001334  0a000000          BEQ      |L1.4924|
001338  ea000047          B        |L1.5212|
                  |L1.4924|
00133c  e5945014          LDR      r5,[r4,#0x14]         ;1431
001340  e5d56000          LDRB     r6,[r5,#0]            ;1432
001344  e3560000          CMP      r6,#0                 ;1433
001348  1a000001          BNE      |L1.4948|
00134c  e3a07004          MOV      r7,#4                 ;1433
001350  ea000041          B        |L1.5212|
                  |L1.4948|
001354  e5d5000b          LDRB     r0,[r5,#0xb]          ;1435
001358  e200803f          AND      r8,r0,#0x3f           ;1435
00135c  e35600e5          CMP      r6,#0xe5              ;1436
001360  0a000003          BEQ      |L1.4980|
001364  e3180008          TST      r8,#8                 ;1436
001368  0a000005          BEQ      |L1.4996|
00136c  e358000f          CMP      r8,#0xf               ;1436
001370  0a000003          BEQ      |L1.4996|
                  |L1.4980|
001374  e3a090ff          MOV      r9,#0xff              ;1437
001378  e3e00000          MVN      r0,#0                 ;1437
00137c  e1c402b0          STRH     r0,[r4,#0x20]         ;1437
001380  ea00002f          B        |L1.5188|
                  |L1.4996|
001384  e358000f          CMP      r8,#0xf               ;1439
001388  1a000018          BNE      |L1.5104|
00138c  e594001c          LDR      r0,[r4,#0x1c]         ;1440
001390  e3500000          CMP      r0,#0                 ;1440
001394  0a00002a          BEQ      |L1.5188|
001398  e3160040          TST      r6,#0x40              ;1441
00139c  0a000004          BEQ      |L1.5044|
0013a0  e5d5a00d          LDRB     r10,[r5,#0xd]         ;1442
0013a4  e3c66040          BIC      r6,r6,#0x40           ;1443
0013a8  e1a09006          MOV      r9,r6                 ;1443
0013ac  e1d400b6          LDRH     r0,[r4,#6]            ;1444
0013b0  e1c402b0          STRH     r0,[r4,#0x20]         ;1444
                  |L1.5044|
0013b4  e1560009          CMP      r6,r9                 ;1447
0013b8  1a000009          BNE      |L1.5092|
0013bc  e5d5000d          LDRB     r0,[r5,#0xd]          ;1447
0013c0  e150000a          CMP      r0,r10                ;1447
0013c4  1a000006          BNE      |L1.5092|
0013c8  e1a01005          MOV      r1,r5                 ;1447
0013cc  e594001c          LDR      r0,[r4,#0x1c]         ;1447
0013d0  ebfffffe          BL       cmp_lfn
0013d4  e3500000          CMP      r0,#0                 ;1447
0013d8  0a000001          BEQ      |L1.5092|
0013dc  e2490001          SUB      r0,r9,#1              ;1447
0013e0  ea000000          B        |L1.5096|
                  |L1.5092|
0013e4  e3a000ff          MOV      r0,#0xff              ;1447
                  |L1.5096|
0013e8  e20090ff          AND      r9,r0,#0xff           ;1447
0013ec  ea000014          B        |L1.5188|
                  |L1.5104|
0013f0  e3590000          CMP      r9,#0                 ;1450
0013f4  1a000004          BNE      |L1.5132|
0013f8  e1a00005          MOV      r0,r5                 ;1450
0013fc  ebfffffe          BL       sum_sfn
001400  e150000a          CMP      r0,r10                ;1450
001404  1a000000          BNE      |L1.5132|
001408  ea000013          B        |L1.5212|
                  |L1.5132|
00140c  e5940018          LDR      r0,[r4,#0x18]         ;1451
001410  e5d0000b          LDRB     r0,[r0,#0xb]          ;1451
001414  e3100001          TST      r0,#1                 ;1451
001418  1a000006          BNE      |L1.5176|
00141c  e3a0200b          MOV      r2,#0xb               ;1451
001420  e1a00005          MOV      r0,r5                 ;1451
001424  e5941018          LDR      r1,[r4,#0x18]         ;1451
001428  ebfffffe          BL       mem_cmp
00142c  e3500000          CMP      r0,#0                 ;1451
001430  1a000000          BNE      |L1.5176|
001434  ea000008          B        |L1.5212|
                  |L1.5176|
001438  e3a090ff          MOV      r9,#0xff              ;1452
00143c  e3e00000          MVN      r0,#0                 ;1452
001440  e1c402b0          STRH     r0,[r4,#0x20]         ;1452
                  |L1.5188|
001444  e3a01000          MOV      r1,#0                 ;1459
001448  e1a00004          MOV      r0,r4                 ;1459
00144c  ebfffffe          BL       dir_next
001450  e1a07000          MOV      r7,r0                 ;1459
001454  e3570000          CMP      r7,#0                 ;1460
001458  0affffb0          BEQ      |L1.4896|
                  |L1.5212|
00145c  e1a00000          MOV      r0,r0                 ;1430
001460  e1a00007          MOV      r0,r7                 ;1462
001464  eaffffa7          B        |L1.4872|
;;;1464   
                          ENDP

                  dir_read PROC
;;;1472   static
;;;1473   FRESULT dir_read (
001468  e92d5ff0          PUSH     {r4-r12,lr}
;;;1474   	DIR* dp,		/* Pointer to the directory object */
;;;1475   	int vol			/* Filtered by 0:file/directory or 1:volume label */
;;;1476   )
;;;1477   {
00146c  e1a04000          MOV      r4,r0
001470  e1a0a001          MOV      r10,r1
;;;1478   	FRESULT res;
;;;1479   	BYTE a, c, *dir;
;;;1480   #if _USE_LFN
;;;1481   	BYTE ord = 0xFF, sum = 0xFF;
001474  e3a090ff          MOV      r9,#0xff
001478  e3a0b0ff          MOV      r11,#0xff
;;;1482   #endif
;;;1483   
;;;1484   	res = FR_NO_FILE;
00147c  e3a07004          MOV      r7,#4
;;;1485   	while (dp->sect) {
001480  ea000043          B        |L1.5524|
                  |L1.5252|
;;;1486   		res = move_window(dp->fs, dp->sect);
001484  e5940000          LDR      r0,[r4,#0]
001488  e5941010          LDR      r1,[r4,#0x10]
00148c  ebfffffe          BL       move_window
001490  e1a07000          MOV      r7,r0
;;;1487   		if (res != FR_OK) break;
001494  e3570000          CMP      r7,#0
001498  0a000000          BEQ      |L1.5280|
00149c  ea00003f          B        |L1.5536|
                  |L1.5280|
;;;1488   		dir = dp->dir;					/* Ptr to the directory entry of current index */
0014a0  e5945014          LDR      r5,[r4,#0x14]
;;;1489   		c = dir[DIR_Name];
0014a4  e5d56000          LDRB     r6,[r5,#0]
;;;1490   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
0014a8  e3560000          CMP      r6,#0
0014ac  1a000001          BNE      |L1.5304|
0014b0  e3a07004          MOV      r7,#4
0014b4  ea000039          B        |L1.5536|
                  |L1.5304|
;;;1491   		a = dir[DIR_Attr] & AM_MASK;
0014b8  e5d5000b          LDRB     r0,[r5,#0xb]
0014bc  e200803f          AND      r8,r0,#0x3f
;;;1492   #if _USE_LFN	/* LFN configuration */
;;;1493   		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
0014c0  e35600e5          CMP      r6,#0xe5
0014c4  0a000008          BEQ      |L1.5356|
0014c8  e1a00000          MOV      r0,r0
0014cc  e3c80020          BIC      r0,r8,#0x20
0014d0  e3500008          CMP      r0,#8
0014d4  1a000001          BNE      |L1.5344|
0014d8  e3a00001          MOV      r0,#1
0014dc  ea000000          B        |L1.5348|
                  |L1.5344|
0014e0  e3a00000          MOV      r0,#0
                  |L1.5348|
0014e4  e150000a          CMP      r0,r10
0014e8  0a000001          BEQ      |L1.5364|
                  |L1.5356|
;;;1494   			ord = 0xFF;
0014ec  e3a090ff          MOV      r9,#0xff
0014f0  ea000020          B        |L1.5496|
                  |L1.5364|
;;;1495   		} else {
;;;1496   			if (a == AM_LFN) {			/* An LFN entry is found */
0014f4  e358000f          CMP      r8,#0xf
0014f8  1a000015          BNE      |L1.5460|
;;;1497   				if (c & LLEF) {			/* Is it start of LFN sequence? */
0014fc  e3160040          TST      r6,#0x40
001500  0a000004          BEQ      |L1.5400|
;;;1498   					sum = dir[LDIR_Chksum];
001504  e5d5b00d          LDRB     r11,[r5,#0xd]
;;;1499   					c &= ~LLEF; ord = c;
001508  e3c66040          BIC      r6,r6,#0x40
00150c  e1a09006          MOV      r9,r6
;;;1500   					dp->lfn_idx = dp->index;
001510  e1d400b6          LDRH     r0,[r4,#6]
001514  e1c402b0          STRH     r0,[r4,#0x20]
                  |L1.5400|
;;;1501   				}
;;;1502   				/* Check LFN validity and capture it */
;;;1503   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
001518  e1560009          CMP      r6,r9
00151c  1a000009          BNE      |L1.5448|
001520  e5d5000d          LDRB     r0,[r5,#0xd]
001524  e150000b          CMP      r0,r11
001528  1a000006          BNE      |L1.5448|
00152c  e1a01005          MOV      r1,r5
001530  e594001c          LDR      r0,[r4,#0x1c]
001534  ebfffffe          BL       pick_lfn
001538  e3500000          CMP      r0,#0
00153c  0a000001          BEQ      |L1.5448|
001540  e2490001          SUB      r0,r9,#1
001544  ea000000          B        |L1.5452|
                  |L1.5448|
001548  e3a000ff          MOV      r0,#0xff
                  |L1.5452|
00154c  e20090ff          AND      r9,r0,#0xff
001550  ea000008          B        |L1.5496|
                  |L1.5460|
;;;1504   			} else {					/* An SFN entry is found */
;;;1505   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
001554  e3590000          CMP      r9,#0
001558  1a000003          BNE      |L1.5484|
00155c  e1a00005          MOV      r0,r5
001560  ebfffffe          BL       sum_sfn
001564  e150000b          CMP      r0,r11
001568  0a000001          BEQ      |L1.5492|
                  |L1.5484|
;;;1506   					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
00156c  e3e00000          MVN      r0,#0
001570  e1c402b0          STRH     r0,[r4,#0x20]
                  |L1.5492|
;;;1507   				break;
001574  ea000009          B        |L1.5536|
                  |L1.5496|
;;;1508   			}
;;;1509   		}
;;;1510   #else		/* Non LFN configuration */
;;;1511   		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
;;;1512   			break;
;;;1513   #endif
;;;1514   		res = dir_next(dp, 0);				/* Next entry */
001578  e3a01000          MOV      r1,#0
00157c  e1a00004          MOV      r0,r4
001580  ebfffffe          BL       dir_next
001584  e1a07000          MOV      r7,r0
;;;1515   		if (res != FR_OK) break;
001588  e3570000          CMP      r7,#0
00158c  0a000000          BEQ      |L1.5524|
001590  ea000002          B        |L1.5536|
                  |L1.5524|
001594  e5940010          LDR      r0,[r4,#0x10]         ;1485
001598  e3500000          CMP      r0,#0                 ;1485
00159c  1affffb8          BNE      |L1.5252|
                  |L1.5536|
0015a0  e1a00000          MOV      r0,r0                 ;1487
;;;1516   	}
;;;1517   
;;;1518   	if (res != FR_OK) dp->sect = 0;
0015a4  e3570000          CMP      r7,#0
0015a8  0a000001          BEQ      |L1.5556|
0015ac  e3a00000          MOV      r0,#0
0015b0  e5840010          STR      r0,[r4,#0x10]
                  |L1.5556|
;;;1519   
;;;1520   	return res;
0015b4  e1a00007          MOV      r0,r7
;;;1521   }
0015b8  e8bd9ff0          POP      {r4-r12,pc}
;;;1522   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP

                  dir_register PROC
;;;1531   static
;;;1532   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
0015bc  e92d4ffe          PUSH     {r1-r11,lr}
;;;1533   	DIR* dp				/* Target directory with object name to be created */
;;;1534   )
;;;1535   {
0015c0  e1a04000          MOV      r4,r0
;;;1536   	FRESULT res;
;;;1537   #if _USE_LFN	/* LFN configuration */
;;;1538   	UINT n, nent;
;;;1539   	BYTE sn[12], *fn, sum;
;;;1540   	WCHAR *lfn;
;;;1541   
;;;1542   
;;;1543   	fn = dp->fn; lfn = dp->lfn;
0015c4  e5948018          LDR      r8,[r4,#0x18]
0015c8  e594901c          LDR      r9,[r4,#0x1c]
;;;1544   	mem_cpy(sn, fn, 12);
0015cc  e3a0200c          MOV      r2,#0xc
0015d0  e1a01008          MOV      r1,r8
0015d4  e1a0000d          MOV      r0,sp
0015d8  ebfffffe          BL       mem_cpy
;;;1545   
;;;1546   	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
0015dc  e5dd000b          LDRB     r0,[sp,#0xb]
0015e0  e3100020          TST      r0,#0x20
0015e4  0a000003          BEQ      |L1.5624|
;;;1547       {
;;;1548           sysprintf("FR_INVALID_NAME : 13\n\r");
0015e8  e28f0f7d          ADR      r0,|L1.6116|
0015ec  ebfffffe          BL       sysprintf
;;;1549   		return FR_INVALID_NAME;
0015f0  e3a00006          MOV      r0,#6
                  |L1.5620|
;;;1550       }
;;;1551   
;;;1552   	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;1553   		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
;;;1554   		for (n = 1; n < 100; n++) {
;;;1555   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;1556   			res = dir_find(dp);				/* Check if the name collides with existing SFN */
;;;1557   			if (res != FR_OK) break;
;;;1558   		}
;;;1559   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;1560   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1561   		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
;;;1562   	}
;;;1563   
;;;1564   	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1565   		for (n = 0; lfn[n]; n++) ;
;;;1566   		nent = (n + 25) / 13;
;;;1567   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1568   		nent = 1;
;;;1569   	}
;;;1570   	res = dir_alloc(dp, nent);		/* Allocate entries */
;;;1571   
;;;1572   	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
;;;1573   		res = dir_sdi(dp, dp->index - nent);
;;;1574   		if (res == FR_OK) {
;;;1575   			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
;;;1576   			do {					/* Store LFN entries in bottom first */
;;;1577   				res = move_window(dp->fs, dp->sect);
;;;1578   				if (res != FR_OK) break;
;;;1579   				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
;;;1580   				dp->fs->wflag = 1;
;;;1581   				res = dir_next(dp, 0);	/* Next entry */
;;;1582   			} while (res == FR_OK && --nent);
;;;1583   		}
;;;1584   	}
;;;1585   #else	/* Non LFN configuration */
;;;1586   	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
;;;1587   #endif
;;;1588   
;;;1589   	if (res == FR_OK) {				/* Set SFN entry */
;;;1590   		res = move_window(dp->fs, dp->sect);
;;;1591   		if (res == FR_OK) {
;;;1592   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
;;;1593   			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
;;;1594   #if _USE_LFN
;;;1595   			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1596   #endif
;;;1597   			dp->fs->wflag = 1;
;;;1598   		}
;;;1599   	}
;;;1600   
;;;1601   	return res;
;;;1602   }
0015f4  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.5624|
0015f8  e5dd000b          LDRB     r0,[sp,#0xb]          ;1552
0015fc  e3100001          TST      r0,#1                 ;1552
001600  0a00001e          BEQ      |L1.5760|
001604  e3a00000          MOV      r0,#0                 ;1553
001608  e5c8000b          STRB     r0,[r8,#0xb]          ;1553
00160c  e584001c          STR      r0,[r4,#0x1c]         ;1553
001610  e3a06001          MOV      r6,#1                 ;1554
001614  ea00000b          B        |L1.5704|
                  |L1.5656|
001618  e1a03006          MOV      r3,r6                 ;1555
00161c  e1a02009          MOV      r2,r9                 ;1555
001620  e1a0100d          MOV      r1,sp                 ;1555
001624  e1a00008          MOV      r0,r8                 ;1555
001628  ebfffffe          BL       gen_numname
00162c  e1a00004          MOV      r0,r4                 ;1556
001630  ebfffffe          BL       dir_find
001634  e1a05000          MOV      r5,r0                 ;1556
001638  e3550000          CMP      r5,#0                 ;1557
00163c  0a000000          BEQ      |L1.5700|
001640  ea000002          B        |L1.5712|
                  |L1.5700|
001644  e2866001          ADD      r6,r6,#1              ;1554
                  |L1.5704|
001648  e3560064          CMP      r6,#0x64              ;1554
00164c  3afffff1          BCC      |L1.5656|
                  |L1.5712|
001650  e1a00000          MOV      r0,r0                 ;1557
001654  e3560064          CMP      r6,#0x64              ;1559
001658  1a000001          BNE      |L1.5732|
00165c  e3a00007          MOV      r0,#7                 ;1559
001660  eaffffe3          B        |L1.5620|
                  |L1.5732|
001664  e3550004          CMP      r5,#4                 ;1560
001668  0a000001          BEQ      |L1.5748|
00166c  e1a00005          MOV      r0,r5                 ;1560
001670  eaffffdf          B        |L1.5620|
                  |L1.5748|
001674  e5dd000b          LDRB     r0,[sp,#0xb]          ;1561
001678  e5c8000b          STRB     r0,[r8,#0xb]          ;1561
00167c  e584901c          STR      r9,[r4,#0x1c]         ;1561
                  |L1.5760|
001680  e5dd000b          LDRB     r0,[sp,#0xb]          ;1564
001684  e3100002          TST      r0,#2                 ;1564
001688  0a00000b          BEQ      |L1.5820|
00168c  e3a06000          MOV      r6,#0                 ;1565
001690  ea000000          B        |L1.5784|
                  |L1.5780|
001694  e2866001          ADD      r6,r6,#1              ;1565
                  |L1.5784|
001698  e0890086          ADD      r0,r9,r6,LSL #1       ;1565
00169c  e1d000b0          LDRH     r0,[r0,#0]            ;1565
0016a0  e3500000          CMP      r0,#0                 ;1565
0016a4  1afffffa          BNE      |L1.5780|
0016a8  e3a0100d          MOV      r1,#0xd               ;1566
0016ac  e2860019          ADD      r0,r6,#0x19           ;1566
0016b0  ebfffffe          BL       __aeabi_uidivmod
0016b4  e1a07000          MOV      r7,r0                 ;1566
0016b8  ea000000          B        |L1.5824|
                  |L1.5820|
0016bc  e3a07001          MOV      r7,#1                 ;1568
                  |L1.5824|
0016c0  e1a01007          MOV      r1,r7                 ;1570
0016c4  e1a00004          MOV      r0,r4                 ;1570
0016c8  ebfffffe          BL       dir_alloc
0016cc  e1a05000          MOV      r5,r0                 ;1570
0016d0  e3550000          CMP      r5,#0                 ;1572
0016d4  1a000026          BNE      |L1.6004|
0016d8  e2470001          SUB      r0,r7,#1              ;1572
0016dc  e1b07000          MOVS     r7,r0                 ;1572
0016e0  0a000023          BEQ      |L1.6004|
0016e4  e1d400b6          LDRH     r0,[r4,#6]            ;1573
0016e8  e0401007          SUB      r1,r0,r7              ;1573
0016ec  e1a00004          MOV      r0,r4                 ;1573
0016f0  ebfffffe          BL       dir_sdi
0016f4  e1a05000          MOV      r5,r0                 ;1573
0016f8  e3550000          CMP      r5,#0                 ;1574
0016fc  1a00001c          BNE      |L1.6004|
001700  e5940018          LDR      r0,[r4,#0x18]         ;1575
001704  ebfffffe          BL       sum_sfn
001708  e1a0a000          MOV      r10,r0                ;1575
00170c  e1a00000          MOV      r0,r0                 ;1576
                  |L1.5904|
001710  e5940000          LDR      r0,[r4,#0]            ;1577
001714  e5941010          LDR      r1,[r4,#0x10]         ;1577
001718  ebfffffe          BL       move_window
00171c  e1a05000          MOV      r5,r0                 ;1577
001720  e3550000          CMP      r5,#0                 ;1578
001724  0a000000          BEQ      |L1.5932|
001728  ea000010          B        |L1.6000|
                  |L1.5932|
00172c  e20720ff          AND      r2,r7,#0xff           ;1579
001730  e1a0300a          MOV      r3,r10                ;1579
001734  e594001c          LDR      r0,[r4,#0x1c]         ;1579
001738  e5941014          LDR      r1,[r4,#0x14]         ;1579
00173c  ebfffffe          BL       fit_lfn
001740  e3a00001          MOV      r0,#1                 ;1580
001744  e5941000          LDR      r1,[r4,#0]            ;1580
001748  e5c10004          STRB     r0,[r1,#4]            ;1580
00174c  e3a01000          MOV      r1,#0                 ;1581
001750  e1a00004          MOV      r0,r4                 ;1581
001754  ebfffffe          BL       dir_next
001758  e1a05000          MOV      r5,r0                 ;1581
00175c  e3550000          CMP      r5,#0                 ;1582
001760  1a000002          BNE      |L1.6000|
001764  e2470001          SUB      r0,r7,#1              ;1582
001768  e1b07000          MOVS     r7,r0                 ;1582
00176c  1affffe7          BNE      |L1.5904|
                  |L1.6000|
001770  e1a00000          MOV      r0,r0                 ;1578
                  |L1.6004|
001774  e3550000          CMP      r5,#0                 ;1589
001778  1a000015          BNE      |L1.6100|
00177c  e5940000          LDR      r0,[r4,#0]            ;1590
001780  e5941010          LDR      r1,[r4,#0x10]         ;1590
001784  ebfffffe          BL       move_window
001788  e1a05000          MOV      r5,r0                 ;1590
00178c  e3550000          CMP      r5,#0                 ;1591
001790  1a00000f          BNE      |L1.6100|
001794  e3a02020          MOV      r2,#0x20              ;1592
001798  e3a01000          MOV      r1,#0                 ;1592
00179c  e5940014          LDR      r0,[r4,#0x14]         ;1592
0017a0  ebfffffe          BL       mem_set
0017a4  e3a0200b          MOV      r2,#0xb               ;1593
0017a8  e5940014          LDR      r0,[r4,#0x14]         ;1593
0017ac  e5941018          LDR      r1,[r4,#0x18]         ;1593
0017b0  ebfffffe          BL       mem_cpy
0017b4  e5940018          LDR      r0,[r4,#0x18]         ;1595
0017b8  e5d0000b          LDRB     r0,[r0,#0xb]          ;1595
0017bc  e2000018          AND      r0,r0,#0x18           ;1595
0017c0  e5941014          LDR      r1,[r4,#0x14]         ;1595
0017c4  e5c1000c          STRB     r0,[r1,#0xc]          ;1595
0017c8  e3a00001          MOV      r0,#1                 ;1597
0017cc  e5941000          LDR      r1,[r4,#0]            ;1597
0017d0  e5c10004          STRB     r0,[r1,#4]            ;1597
                  |L1.6100|
0017d4  e1a00005          MOV      r0,r5                 ;1601
0017d8  eaffff85          B        |L1.5620|
                  |L1.6108|
                          DCD      LfnOfs
                  |L1.6112|
                          DCD      0x0000ffff
                  |L1.6116|
0017e4  46525f49          DCB      "FR_INVALID_NAME : 13\n\r",0
0017e8  4e56414c
0017ec  49445f4e
0017f0  414d4520
0017f4  3a203133
0017f8  0a0d00  
0017fb  00                DCB      0
                          ENDP

                  dir_remove PROC
;;;1612   static
;;;1613   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
0017fc  e92d4070          PUSH     {r4-r6,lr}
;;;1614   	DIR* dp				/* Directory object pointing the entry to be removed */
;;;1615   )
;;;1616   {
001800  e1a04000          MOV      r4,r0
;;;1617   	FRESULT res;
;;;1618   #if _USE_LFN	/* LFN configuration */
;;;1619   	UINT i;
;;;1620   
;;;1621   	i = dp->index;	/* SFN index */
001804  e1d460b6          LDRH     r6,[r4,#6]
;;;1622   	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
001808  e1d402b0          LDRH     r0,[r4,#0x20]
00180c  e2402cff          SUB      r2,r0,#0xff00
001810  e25220ff          SUBS     r2,r2,#0xff
001814  1a000001          BNE      |L1.6176|
001818  e1a00006          MOV      r0,r6
00181c  ea000000          B        |L1.6180|
                  |L1.6176|
001820  e1d402b0          LDRH     r0,[r4,#0x20]
                  |L1.6180|
001824  e1a01000          MOV      r1,r0
001828  e1a00004          MOV      r0,r4
00182c  ebfffffe          BL       dir_sdi
001830  e1a05000          MOV      r5,r0
;;;1623   	if (res == FR_OK) {
001834  e3550000          CMP      r5,#0
001838  1a00001f          BNE      |L1.6332|
;;;1624   		do {
00183c  e1a00000          MOV      r0,r0
                  |L1.6208|
;;;1625   			res = move_window(dp->fs, dp->sect);
001840  e5940000          LDR      r0,[r4,#0]
001844  e5941010          LDR      r1,[r4,#0x10]
001848  ebfffffe          BL       move_window
00184c  e1a05000          MOV      r5,r0
;;;1626   			if (res != FR_OK) break;
001850  e3550000          CMP      r5,#0
001854  0a000000          BEQ      |L1.6236|
001858  ea000013          B        |L1.6316|
                  |L1.6236|
;;;1627   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
00185c  e3a02020          MOV      r2,#0x20
001860  e3a01000          MOV      r1,#0
001864  e5940014          LDR      r0,[r4,#0x14]
001868  ebfffffe          BL       mem_set
;;;1628   			*dp->dir = DDEM;
00186c  e3a000e5          MOV      r0,#0xe5
001870  e5941014          LDR      r1,[r4,#0x14]
001874  e5c10000          STRB     r0,[r1,#0]
;;;1629   			dp->fs->wflag = 1;
001878  e3a00001          MOV      r0,#1
00187c  e5941000          LDR      r1,[r4,#0]
001880  e5c10004          STRB     r0,[r1,#4]
;;;1630   			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
001884  e1d400b6          LDRH     r0,[r4,#6]
001888  e1500006          CMP      r0,r6
00188c  3a000000          BCC      |L1.6292|
001890  ea000005          B        |L1.6316|
                  |L1.6292|
;;;1631   			res = dir_next(dp, 0);		/* Next entry */
001894  e3a01000          MOV      r1,#0
001898  e1a00004          MOV      r0,r4
00189c  ebfffffe          BL       dir_next
0018a0  e1a05000          MOV      r5,r0
;;;1632   		} while (res == FR_OK);
0018a4  e3550000          CMP      r5,#0
0018a8  0affffe4          BEQ      |L1.6208|
                  |L1.6316|
0018ac  e1a00000          MOV      r0,r0                 ;1626
;;;1633   		if (res == FR_NO_FILE) res = FR_INT_ERR;
0018b0  e3550004          CMP      r5,#4
0018b4  1a000000          BNE      |L1.6332|
0018b8  e3a05002          MOV      r5,#2
                  |L1.6332|
;;;1634   	}
;;;1635   
;;;1636   #else			/* Non LFN configuration */
;;;1637   	res = dir_sdi(dp, dp->index);
;;;1638   	if (res == FR_OK) {
;;;1639   		res = move_window(dp->fs, dp->sect);
;;;1640   		if (res == FR_OK) {
;;;1641   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
;;;1642   			*dp->dir = DDEM;
;;;1643   			dp->fs->wflag = 1;
;;;1644   		}
;;;1645   	}
;;;1646   #endif
;;;1647   
;;;1648   	return res;
0018bc  e1a00005          MOV      r0,r5
;;;1649   }
0018c0  e8bd8070          POP      {r4-r6,pc}
;;;1650   #endif /* !_FS_READONLY */
                          ENDP

                  get_fileinfo PROC
;;;1659   static
;;;1660   void get_fileinfo (		/* No return code */
0018c4  e92d5ff0          PUSH     {r4-r12,lr}
;;;1661   	DIR* dp,			/* Pointer to the directory object */
;;;1662   	FILINFO* fno	 	/* Pointer to the file information to be filled */
;;;1663   )
;;;1664   {
0018c8  e1a08000          MOV      r8,r0
0018cc  e1a05001          MOV      r5,r1
;;;1665   	UINT i;
;;;1666   	TCHAR *p, c;
;;;1667   	BYTE *dir;
;;;1668   #if _USE_LFN
;;;1669   	WCHAR w, *lfn;
;;;1670   #endif
;;;1671   
;;;1672   	p = fno->fname;
0018d0  e2857009          ADD      r7,r5,#9
;;;1673   	if (dp->sect) {		/* Get SFN */
0018d4  e5980010          LDR      r0,[r8,#0x10]
0018d8  e3500000          CMP      r0,#0
0018dc  0a000034          BEQ      |L1.6580|
;;;1674   		dir = dp->dir;
0018e0  e5984014          LDR      r4,[r8,#0x14]
;;;1675   		i = 0;
0018e4  e3a06000          MOV      r6,#0
;;;1676   		while (i < 11) {		/* Copy name body and extension */
0018e8  ea00001c          B        |L1.6496|
                  |L1.6380|
;;;1677   			c = (TCHAR)dir[i++];
0018ec  e1a00006          MOV      r0,r6
0018f0  e2866001          ADD      r6,r6,#1
0018f4  e7d49000          LDRB     r9,[r4,r0]
;;;1678   			if (c == ' ') continue;				/* Skip padding spaces */
0018f8  e3590020          CMP      r9,#0x20
0018fc  1a000000          BNE      |L1.6404|
001900  ea000016          B        |L1.6496|
                  |L1.6404|
;;;1679   			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
001904  e3590005          CMP      r9,#5
001908  1a000000          BNE      |L1.6416|
00190c  e3a090e5          MOV      r9,#0xe5
                  |L1.6416|
;;;1680   			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
001910  e3560009          CMP      r6,#9
001914  1a000001          BNE      |L1.6432|
001918  e3a0002e          MOV      r0,#0x2e
00191c  e4c70001          STRB     r0,[r7],#1
                  |L1.6432|
;;;1681   #if _USE_LFN
;;;1682   			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
001920  e3590041          CMP      r9,#0x41
001924  ba00000b          BLT      |L1.6488|
001928  e359005a          CMP      r9,#0x5a
00192c  ca000009          BGT      |L1.6488|
001930  e5d4000c          LDRB     r0,[r4,#0xc]
001934  e3560009          CMP      r6,#9
001938  3a000001          BCC      |L1.6468|
00193c  e3a01010          MOV      r1,#0x10
001940  ea000000          B        |L1.6472|
                  |L1.6468|
001944  e3a01008          MOV      r1,#8
                  |L1.6472|
001948  e1100001          TST      r0,r1
00194c  0a000001          BEQ      |L1.6488|
;;;1683   				c += 0x20;			/* To lower */
001950  e2890020          ADD      r0,r9,#0x20
001954  e20090ff          AND      r9,r0,#0xff
                  |L1.6488|
;;;1684   #if _LFN_UNICODE
;;;1685   			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
;;;1686   				c = c << 8 | dir[i++];
;;;1687   			c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;1688   			if (!c) c = '?';
;;;1689   #endif
;;;1690   #endif
;;;1691   			*p++ = c;
001958  e4c79001          STRB     r9,[r7],#1
00195c  e1a00000          MOV      r0,r0                 ;1678
                  |L1.6496|
001960  e356000b          CMP      r6,#0xb               ;1676
001964  3affffe0          BCC      |L1.6380|
;;;1692   		}
;;;1693   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
001968  e5d4000b          LDRB     r0,[r4,#0xb]
00196c  e5c50008          STRB     r0,[r5,#8]
;;;1694   		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
001970  e5d4001f          LDRB     r0,[r4,#0x1f]
001974  e1a00c00          LSL      r0,r0,#24
001978  e5d4101e          LDRB     r1,[r4,#0x1e]
00197c  e1800801          ORR      r0,r0,r1,LSL #16
001980  e5d4101d          LDRB     r1,[r4,#0x1d]
001984  e1800401          ORR      r0,r0,r1,LSL #8
001988  e5d4101c          LDRB     r1,[r4,#0x1c]
00198c  e1800001          ORR      r0,r0,r1
001990  e5850000          STR      r0,[r5,#0]
;;;1695   		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
001994  e5d40018          LDRB     r0,[r4,#0x18]
001998  e5d41019          LDRB     r1,[r4,#0x19]
00199c  e1800401          ORR      r0,r0,r1,LSL #8
0019a0  e1c500b4          STRH     r0,[r5,#4]
;;;1696   		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
0019a4  e5d40016          LDRB     r0,[r4,#0x16]
0019a8  e5d41017          LDRB     r1,[r4,#0x17]
0019ac  e1800401          ORR      r0,r0,r1,LSL #8
0019b0  e1c500b6          STRH     r0,[r5,#6]
                  |L1.6580|
;;;1697   	}
;;;1698   	*p = 0;		/* Terminate SFN string by a \0 */
0019b4  e3a00000          MOV      r0,#0
0019b8  e5c70000          STRB     r0,[r7,#0]
;;;1699   
;;;1700   #if _USE_LFN
;;;1701   	if (fno->lfname) {
0019bc  e5950018          LDR      r0,[r5,#0x18]
0019c0  e3500000          CMP      r0,#0
0019c4  0a000025          BEQ      |L1.6752|
;;;1702   		i = 0; p = fno->lfname;
0019c8  e3a06000          MOV      r6,#0
0019cc  e5957018          LDR      r7,[r5,#0x18]
;;;1703   		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
0019d0  e5980010          LDR      r0,[r8,#0x10]
0019d4  e3500000          CMP      r0,#0
0019d8  0a00001e          BEQ      |L1.6744|
0019dc  e595001c          LDR      r0,[r5,#0x1c]
0019e0  e3500000          CMP      r0,#0
0019e4  0a00001b          BEQ      |L1.6744|
0019e8  e1d802b0          LDRH     r0,[r8,#0x20]
0019ec  e2401cff          SUB      r1,r0,#0xff00
0019f0  e25110ff          SUBS     r1,r1,#0xff
0019f4  0a000017          BEQ      |L1.6744|
;;;1704   			lfn = dp->lfn;
0019f8  e598b01c          LDR      r11,[r8,#0x1c]
;;;1705   			while ((w = *lfn++) != 0) {		/* Get an LFN character */
0019fc  ea000011          B        |L1.6728|
                  |L1.6656|
;;;1706   #if !_LFN_UNICODE
;;;1707   				w = ff_convert(w, 0);		/* Unicode -> OEM */
001a00  e3a01000          MOV      r1,#0
001a04  e1a0000a          MOV      r0,r10
001a08  ebfffffe          BL       ff_convert
001a0c  e1a0a000          MOV      r10,r0
;;;1708   				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
001a10  e35a0000          CMP      r10,#0
001a14  1a000001          BNE      |L1.6688|
001a18  e3a06000          MOV      r6,#0
001a1c  ea00000c          B        |L1.6740|
                  |L1.6688|
;;;1709   				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
001a20  e1a00000          MOV      r0,r0
;;;1710   					p[i++] = (TCHAR)(w >> 8);
;;;1711   #endif
;;;1712   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
001a24  e595001c          LDR      r0,[r5,#0x1c]
001a28  e2400001          SUB      r0,r0,#1
001a2c  e1500006          CMP      r0,r6
001a30  8a000001          BHI      |L1.6716|
001a34  e3a06000          MOV      r6,#0
001a38  ea000005          B        |L1.6740|
                  |L1.6716|
;;;1713   				p[i++] = (TCHAR)w;
001a3c  e1a00006          MOV      r0,r6
001a40  e2866001          ADD      r6,r6,#1
001a44  e7c7a000          STRB     r10,[r7,r0]
                  |L1.6728|
001a48  e0db00b2          LDRH     r0,[r11],#2           ;1705
001a4c  e1b0a000          MOVS     r10,r0                ;1705
001a50  1affffea          BNE      |L1.6656|
                  |L1.6740|
001a54  e1a00000          MOV      r0,r0                 ;1708
                  |L1.6744|
;;;1714   			}
;;;1715   		}
;;;1716   		p[i] = 0;	/* Terminate LFN string by a \0 */
001a58  e3a00000          MOV      r0,#0
001a5c  e7c70006          STRB     r0,[r7,r6]
                  |L1.6752|
;;;1717   	}
;;;1718   #endif
;;;1719   }
001a60  e8bd9ff0          POP      {r4-r12,pc}
;;;1720   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
                          ENDP

                  get_achar PROC
;;;1729   static
;;;1730   WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
001a64  e1a01000          MOV      r1,r0
;;;1731   	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
;;;1732   )
;;;1733   {
;;;1734   	WCHAR chr;
;;;1735   
;;;1736   #if !_LFN_UNICODE
;;;1737   	chr = (BYTE)*(*ptr)++;					/* Get a byte */
001a68  e5912000          LDR      r2,[r1,#0]
001a6c  e2823001          ADD      r3,r2,#1
001a70  e5813000          STR      r3,[r1,#0]
001a74  e5d20000          LDRB     r0,[r2,#0]
;;;1738   	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
001a78  e3500061          CMP      r0,#0x61
001a7c  ba000004          BLT      |L1.6804|
001a80  e350007a          CMP      r0,#0x7a
001a84  ca000002          BGT      |L1.6804|
001a88  e2402020          SUB      r2,r0,#0x20
001a8c  e1a00802          LSL      r0,r2,#16
001a90  e1a00820          LSR      r0,r0,#16
                  |L1.6804|
;;;1739   	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
;;;1740   		chr = chr << 8 | (BYTE)*(*ptr)++;
;;;1741   #ifdef _EXCVT
;;;1742   	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
001a94  e3500080          CMP      r0,#0x80
001a98  ba000002          BLT      |L1.6824|
001a9c  e2402080          SUB      r2,r0,#0x80
001aa0  e59f3518          LDR      r3,|L1.8128|
001aa4  e7d30002          LDRB     r0,[r3,r2]
                  |L1.6824|
;;;1743   #endif
;;;1744   #else
;;;1745   	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
;;;1746   #endif
;;;1747   	return chr;
;;;1748   }
001aa8  e12fff1e          BX       lr
;;;1749   
                          ENDP

                  pattern_matching PROC
;;;1751   static
;;;1752   int pattern_matching (	/* Return value: 0:mismatched, 1:matched */
001aac  e92d47ff          PUSH     {r0-r10,lr}
;;;1753   	const TCHAR* pat,	/* Matching pattern */
;;;1754   	const TCHAR* nam,	/* String to be tested */
;;;1755   	int skip,			/* Number of pre-skip chars (number of ?s) */
;;;1756   	int inf				/* Infinite search (* specified) */
;;;1757   )
;;;1758   {
001ab0  e24dd008          SUB      sp,sp,#8
001ab4  e1a04000          MOV      r4,r0
001ab8  e1a07002          MOV      r7,r2
001abc  e1a05003          MOV      r5,r3
;;;1759   	const TCHAR *pp, *np;
;;;1760   	WCHAR pc, nc;
;;;1761   	int nm, nx;
;;;1762   
;;;1763   
;;;1764   	while (skip--) {				/* Pre-skip name chars */
001ac0  ea000006          B        |L1.6880|
                  |L1.6852|
;;;1765   		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
001ac4  e28d000c          ADD      r0,sp,#0xc
001ac8  ebfffffe          BL       get_achar
001acc  e3500000          CMP      r0,#0
001ad0  1a000002          BNE      |L1.6880|
001ad4  e3a00000          MOV      r0,#0
                  |L1.6872|
001ad8  e28dd018          ADD      sp,sp,#0x18
;;;1766   	}
;;;1767   	if (!*pat && inf) return 1;		/* (short circuit) */
;;;1768   
;;;1769   	do {
;;;1770   		pp = pat; np = nam;			/* Top of pattern and name to match */
;;;1771   		for (;;) {
;;;1772   			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
;;;1773   				nm = nx = 0;
;;;1774   				do {				/* Analyze the wildcard chars */
;;;1775   					if (*pp++ == '?') nm++; else nx = 1;
;;;1776   				} while (*pp == '?' || *pp == '*');
;;;1777   				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
;;;1778   				nc = *np; break;	/* Branch mismatched */
;;;1779   			}
;;;1780   			pc = get_achar(&pp);	/* Get a pattern char */
;;;1781   			nc = get_achar(&np);	/* Get a name char */
;;;1782   			if (pc != nc) break;	/* Branch mismatched? */
;;;1783   			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
;;;1784   		}
;;;1785   		get_achar(&nam);			/* nam++ */
;;;1786   	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
;;;1787   
;;;1788   	return 0;
;;;1789   }
001adc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.6880|
001ae0  e1b00007          MOVS     r0,r7                 ;1764
001ae4  e2477001          SUB      r7,r7,#1              ;1764
001ae8  1afffff5          BNE      |L1.6852|
001aec  e5d40000          LDRB     r0,[r4,#0]            ;1767
001af0  e3500000          CMP      r0,#0                 ;1767
001af4  1a000003          BNE      |L1.6920|
001af8  e3550000          CMP      r5,#0                 ;1767
001afc  0a000001          BEQ      |L1.6920|
001b00  e3a00001          MOV      r0,#1                 ;1767
001b04  eafffff3          B        |L1.6872|
                  |L1.6920|
001b08  e1a00000          MOV      r0,r0                 ;1769
                  |L1.6924|
001b0c  e58d4004          STR      r4,[sp,#4]            ;1770
001b10  e59d000c          LDR      r0,[sp,#0xc]          ;1770
001b14  e58d0000          STR      r0,[sp,#0]            ;1770
001b18  e1a00000          MOV      r0,r0                 ;1771
                  |L1.6940|
001b1c  e59d0004          LDR      r0,[sp,#4]            ;1772
001b20  e5d00000          LDRB     r0,[r0,#0]            ;1772
001b24  e350003f          CMP      r0,#0x3f              ;1772
001b28  0a000003          BEQ      |L1.6972|
001b2c  e59d0004          LDR      r0,[sp,#4]            ;1772
001b30  e5d00000          LDRB     r0,[r0,#0]            ;1772
001b34  e350002a          CMP      r0,#0x2a              ;1772
001b38  1a000021          BNE      |L1.7108|
                  |L1.6972|
001b3c  e3a00000          MOV      r0,#0                 ;1773
001b40  e1a0a000          MOV      r10,r0                ;1773
001b44  e1a09000          MOV      r9,r0                 ;1773
001b48  e1a00000          MOV      r0,r0                 ;1774
                  |L1.6988|
001b4c  e59d0004          LDR      r0,[sp,#4]            ;1775
001b50  e5d00000          LDRB     r0,[r0,#0]            ;1775
001b54  e59d1004          LDR      r1,[sp,#4]            ;1775
001b58  e2811001          ADD      r1,r1,#1              ;1775
001b5c  e350003f          CMP      r0,#0x3f              ;1775
001b60  e58d1004          STR      r1,[sp,#4]            ;1775
001b64  1a000001          BNE      |L1.7024|
001b68  e2899001          ADD      r9,r9,#1              ;1775
001b6c  ea000000          B        |L1.7028|
                  |L1.7024|
001b70  e3a0a001          MOV      r10,#1                ;1775
                  |L1.7028|
001b74  e59d0004          LDR      r0,[sp,#4]            ;1776
001b78  e5d00000          LDRB     r0,[r0,#0]            ;1776
001b7c  e350003f          CMP      r0,#0x3f              ;1776
001b80  0afffff1          BEQ      |L1.6988|
001b84  e59d0004          LDR      r0,[sp,#4]            ;1776
001b88  e5d00000          LDRB     r0,[r0,#0]            ;1776
001b8c  e350002a          CMP      r0,#0x2a              ;1776
001b90  0affffed          BEQ      |L1.6988|
001b94  e1a0300a          MOV      r3,r10                ;1777
001b98  e1a02009          MOV      r2,r9                 ;1777
001b9c  e59d0004          LDR      r0,[sp,#4]            ;1777
001ba0  e59d1000          LDR      r1,[sp,#0]            ;1777
001ba4  ebfffffe          BL       pattern_matching
001ba8  e3500000          CMP      r0,#0                 ;1777
001bac  0a000001          BEQ      |L1.7096|
001bb0  e3a00001          MOV      r0,#1                 ;1777
001bb4  eaffffc7          B        |L1.6872|
                  |L1.7096|
001bb8  e59d0000          LDR      r0,[sp,#0]            ;1778
001bbc  e5d08000          LDRB     r8,[r0,#0]            ;1778
001bc0  ea00000c          B        |L1.7160|
                  |L1.7108|
001bc4  e28d0004          ADD      r0,sp,#4              ;1780
001bc8  ebfffffe          BL       get_achar
001bcc  e1a06000          MOV      r6,r0                 ;1780
001bd0  e1a0000d          MOV      r0,sp                 ;1781
001bd4  ebfffffe          BL       get_achar
001bd8  e1a08000          MOV      r8,r0                 ;1781
001bdc  e1560008          CMP      r6,r8                 ;1782
001be0  0a000000          BEQ      |L1.7144|
001be4  ea000003          B        |L1.7160|
                  |L1.7144|
001be8  e3560000          CMP      r6,#0                 ;1783
001bec  1affffca          BNE      |L1.6940|
001bf0  e3a00001          MOV      r0,#1                 ;1783
001bf4  eaffffb7          B        |L1.6872|
                  |L1.7160|
001bf8  e1a00000          MOV      r0,r0                 ;1778
001bfc  e28d000c          ADD      r0,sp,#0xc            ;1785
001c00  ebfffffe          BL       get_achar
001c04  e3550000          CMP      r5,#0                 ;1786
001c08  0a000001          BEQ      |L1.7188|
001c0c  e3580000          CMP      r8,#0                 ;1786
001c10  1affffbd          BNE      |L1.6924|
                  |L1.7188|
001c14  e3a00000          MOV      r0,#0                 ;1788
001c18  eaffffae          B        |L1.6872|
;;;1790   #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
                          ENDP

                  create_name PROC
;;;1799   static
;;;1800   FRESULT create_name (
001c1c  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1801   	DIR* dp,			/* Pointer to the directory object */
;;;1802   	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
;;;1803   )
;;;1804   {
001c20  e24dd00c          SUB      sp,sp,#0xc
001c24  e1a09000          MOV      r9,r0
;;;1805   #if _USE_LFN	/* LFN configuration */
;;;1806   	BYTE b, cf;
;;;1807   	WCHAR w, *lfn;
;;;1808   	UINT i, ni, si, di;
;;;1809   	const TCHAR *p;
;;;1810   
;;;1811   	/* Create LFN in Unicode */
;;;1812   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
001c28  e59d0010          LDR      r0,[sp,#0x10]
001c2c  e5900000          LDR      r0,[r0,#0]
001c30  e58d0004          STR      r0,[sp,#4]
001c34  ea000002          B        |L1.7236|
                  |L1.7224|
001c38  e59d0004          LDR      r0,[sp,#4]
001c3c  e2800001          ADD      r0,r0,#1
001c40  e58d0004          STR      r0,[sp,#4]
                  |L1.7236|
001c44  e59d0004          LDR      r0,[sp,#4]
001c48  e5d00000          LDRB     r0,[r0,#0]
001c4c  e350002f          CMP      r0,#0x2f
001c50  0afffff8          BEQ      |L1.7224|
001c54  e59d0004          LDR      r0,[sp,#4]
001c58  e5d00000          LDRB     r0,[r0,#0]
001c5c  e350005c          CMP      r0,#0x5c
001c60  0afffff4          BEQ      |L1.7224|
;;;1813   	lfn = dp->lfn;
001c64  e599701c          LDR      r7,[r9,#0x1c]
;;;1814   	si = di = 0;
001c68  e3a05000          MOV      r5,#0
001c6c  e1a08005          MOV      r8,r5
;;;1815   	for (;;) {
001c70  e1a00000          MOV      r0,r0
                  |L1.7284|
;;;1816   		w = p[si++];					/* Get a character */
001c74  e1a00008          MOV      r0,r8
001c78  e2888001          ADD      r8,r8,#1
001c7c  e59d1004          LDR      r1,[sp,#4]
001c80  e7d14000          LDRB     r4,[r1,r0]
;;;1817   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
001c84  e3540020          CMP      r4,#0x20
001c88  ba000003          BLT      |L1.7324|
001c8c  e354002f          CMP      r4,#0x2f
001c90  0a000001          BEQ      |L1.7324|
001c94  e354005c          CMP      r4,#0x5c
001c98  1a000000          BNE      |L1.7328|
                  |L1.7324|
001c9c  ea000022          B        |L1.7468|
                  |L1.7328|
;;;1818   		if (di >= _MAX_LFN)				/* Reject too long name */
001ca0  e35500ff          CMP      r5,#0xff
001ca4  3a000005          BCC      |L1.7360|
;;;1819           {
;;;1820               sysprintf("FR_INVALID_NAME : 14(%d)\n\r", di);
001ca8  e1a01005          MOV      r1,r5
001cac  e28f0e31          ADR      r0,|L1.8132|
001cb0  ebfffffe          BL       sysprintf
;;;1821   			return FR_INVALID_NAME;
001cb4  e3a00006          MOV      r0,#6
                  |L1.7352|
001cb8  e28dd014          ADD      sp,sp,#0x14
;;;1822           }
;;;1823   #if !_LFN_UNICODE
;;;1824   		w &= 0xFF;
;;;1825   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1826   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1827   			w = (w << 8) + b;			/* Create a DBC */
;;;1828   			if (!IsDBCS2(b))
;;;1829               {
;;;1830                   sysprintf("FR_INVALID_NAME : 15\n\r");
;;;1831   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1832               }
;;;1833   		}
;;;1834   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1835   		if (!w) 
;;;1836           {
;;;1837               sysprintf("FR_INVALID_NAME : 16\n\r");
;;;1838               return FR_INVALID_NAME;	/* Reject invalid code */
;;;1839           }
;;;1840   #endif
;;;1841   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
;;;1842           {
;;;1843               sysprintf("FR_INVALID_NAME : 17\n\r");
;;;1844   			return FR_INVALID_NAME;
;;;1845           }
;;;1846   		lfn[di++] = w;					/* Store the Unicode character */
;;;1847   	}
;;;1848   	*path = &p[si];						/* Return pointer to the next segment */
;;;1849   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1850   #if _FS_RPATH
;;;1851   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1852   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1853   		lfn[di] = 0;
;;;1854   		for (i = 0; i < 11; i++)
;;;1855   			dp->fn[i] = (i < di) ? '.' : ' ';
;;;1856   		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1857   		return FR_OK;
;;;1858   	}
;;;1859   #endif
;;;1860   	while (di) {						/* Strip trailing spaces and dots */
;;;1861   		w = lfn[di - 1];
;;;1862   		if (w != ' ' && w != '.') break;
;;;1863   		di--;
;;;1864   	}
;;;1865   	if (!di) 
;;;1866       {
;;;1867           sysprintf("FR_INVALID_NAME : 18\n\r");
;;;1868           return FR_INVALID_NAME;	/* Reject nul string */
;;;1869       }
;;;1870   
;;;1871   	lfn[di] = 0;						/* LFN is created */
;;;1872   
;;;1873   	/* Create SFN in directory form */
;;;1874   	mem_set(dp->fn, ' ', 11);
;;;1875   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1876   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1877   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1878   
;;;1879   	b = i = 0; ni = 8;
;;;1880   	for (;;) {
;;;1881   		w = lfn[si++];					/* Get an LFN character */
;;;1882   		if (!w) break;					/* Break on end of the LFN */
;;;1883   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1884   			cf |= NS_LOSS | NS_LFN; continue;
;;;1885   		}
;;;1886   
;;;1887   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1888   			if (ni == 11) {				/* Long extension */
;;;1889   				cf |= NS_LOSS | NS_LFN; break;
;;;1890   			}
;;;1891   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1892   			if (si > di) break;			/* No extension */
;;;1893   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1894   			b <<= 2; continue;
;;;1895   		}
;;;1896   
;;;1897   		if (w >= 0x80) {				/* Non ASCII character */
;;;1898   #ifdef _EXCVT
;;;1899   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1900   			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
;;;1901   #else
;;;1902   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1903   #endif
;;;1904   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1905   		}
;;;1906   
;;;1907   		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
;;;1908   			if (i >= ni - 1) {
;;;1909   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1910   			}
;;;1911   			dp->fn[i++] = (BYTE)(w >> 8);
;;;1912   		} else {						/* SBC */
;;;1913   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
;;;1914   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1915   			} else {
;;;1916   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1917   					b |= 2;
;;;1918   				} else {
;;;1919   					if (IsLower(w)) {	/* ASCII small capital */
;;;1920   						b |= 1; w -= 0x20;
;;;1921   					}
;;;1922   				}
;;;1923   			}
;;;1924   		}
;;;1925   		dp->fn[i++] = (BYTE)w;
;;;1926   	}
;;;1927   
;;;1928   	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
;;;1929   
;;;1930   	if (ni == 8) b <<= 2;
;;;1931   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1932   		cf |= NS_LFN;
;;;1933   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
;;;1934   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1935   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1936   	}
;;;1937   
;;;1938   	dp->fn[NSFLAG] = cf;	/* SFN is created */
;;;1939   
;;;1940   	return FR_OK;
;;;1941   
;;;1942   
;;;1943   #else	/* Non-LFN configuration */
;;;1944   	BYTE b, c, d, *sfn;
;;;1945   	UINT ni, si, i;
;;;1946   	const char *p;
;;;1947   
;;;1948   	/* Create file name in directory form */
;;;1949   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1950   	sfn = dp->fn;
;;;1951   	mem_set(sfn, ' ', 11);
;;;1952   	si = i = b = 0; ni = 8;
;;;1953   #if _FS_RPATH
;;;1954   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1955   		for (;;) {
;;;1956   			c = (BYTE)p[si++];
;;;1957   			if (c != '.' || si >= 3) break;
;;;1958   			sfn[i++] = c;
;;;1959   		}
;;;1960   		if (c != '/' && c != '\\' && c > ' ') 
;;;1961           {
;;;1962               sysprintf("FR_INVALID_NAME : 19\n\r");
;;;1963               return FR_INVALID_NAME;
;;;1964           }
;;;1965   		*path = &p[si];									/* Return pointer to the next segment */
;;;1966   		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1967   		return FR_OK;
;;;1968   	}
;;;1969   #endif
;;;1970   	for (;;) {
;;;1971   		c = (BYTE)p[si++];
;;;1972   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1973   		if (c == '.' || i >= ni) {
;;;1974   			if (ni != 8 || c != '.') 
;;;1975               {
;;;1976                   sysprintf("FR_INVALID_NAME : 20\n\r");
;;;1977                   return FR_INVALID_NAME;
;;;1978               }
;;;1979   			i = 8; ni = 11;
;;;1980   			b <<= 2; continue;
;;;1981   		}
;;;1982   		if (c >= 0x80) {				/* Extended character? */
;;;1983   			b |= 3;						/* Eliminate NT flag */
;;;1984   #ifdef _EXCVT
;;;1985   			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
;;;1986   #else
;;;1987   #if !_DF1S
;;;1988               sysprintf("FR_INVALID_NAME : 21\n\r");
;;;1989   			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
;;;1990   #endif
;;;1991   #endif
;;;1992   		}
;;;1993   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1994   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1995   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1996               {
;;;1997                   sysprintf("FR_INVALID_NAME : 22\n\r");
;;;1998   				return FR_INVALID_NAME;
;;;1999               }
;;;2000   			sfn[i++] = c;
;;;2001   			sfn[i++] = d;
;;;2002   		} else {						/* SBC */
;;;2003   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;2004               {
;;;2005                   sysprintf("FR_INVALID_NAME : 23\n\r");
;;;2006   				return FR_INVALID_NAME;
;;;2007               }
;;;2008   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;2009   				b |= 2;
;;;2010   			} else {
;;;2011   				if (IsLower(c)) {		/* ASCII small capital? */
;;;2012   					b |= 1; c -= 0x20;
;;;2013   				}
;;;2014   			}
;;;2015   			sfn[i++] = c;
;;;2016   		}
;;;2017   	}
;;;2018   	*path = &p[si];						/* Return pointer to the next segment */
;;;2019   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;2020   
;;;2021   	if (!i)
;;;2022       {    
;;;2023           sysprintf("FR_INVALID_NAME : 24\n\r");        
;;;2024           return FR_INVALID_NAME;		/* Reject nul string */
;;;2025       }
;;;2026   	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
;;;2027   
;;;2028   	if (ni == 8) b <<= 2;
;;;2029   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;2030   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;2031   
;;;2032   	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
;;;2033   
;;;2034   	return FR_OK;
;;;2035   #endif
;;;2036   }
001cbc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.7360|
001cc0  e20440ff          AND      r4,r4,#0xff           ;1824
001cc4  e3a01001          MOV      r1,#1                 ;1834
001cc8  e1a00004          MOV      r0,r4                 ;1834
001ccc  ebfffffe          BL       ff_convert
001cd0  e1a04000          MOV      r4,r0                 ;1834
001cd4  e3540000          CMP      r4,#0                 ;1835
001cd8  1a000003          BNE      |L1.7404|
001cdc  e28f0fbf          ADR      r0,|L1.8160|
001ce0  ebfffffe          BL       sysprintf
001ce4  e3a00006          MOV      r0,#6                 ;1838
001ce8  eafffff2          B        |L1.7352|
                  |L1.7404|
001cec  e3540080          CMP      r4,#0x80              ;1841
001cf0  aa000008          BGE      |L1.7448|
001cf4  e1a01004          MOV      r1,r4                 ;1841
001cf8  e28f0fbe          ADR      r0,|L1.8184|
001cfc  ebfffffe          BL       chk_chr
001d00  e3500000          CMP      r0,#0                 ;1841
001d04  0a000003          BEQ      |L1.7448|
001d08  e28f0fbd          ADR      r0,|L1.8196|
001d0c  ebfffffe          BL       sysprintf
001d10  e3a00006          MOV      r0,#6                 ;1844
001d14  eaffffe7          B        |L1.7352|
                  |L1.7448|
001d18  e1a00005          MOV      r0,r5                 ;1846
001d1c  e2855001          ADD      r5,r5,#1              ;1846
001d20  e0870080          ADD      r0,r7,r0,LSL #1       ;1846
001d24  e1c040b0          STRH     r4,[r0,#0]            ;1846
001d28  eaffffd1          B        |L1.7284|
                  |L1.7468|
001d2c  e1a00000          MOV      r0,r0                 ;1817
001d30  e59d0004          LDR      r0,[sp,#4]            ;1848
001d34  e0801008          ADD      r1,r0,r8              ;1848
001d38  e59d0010          LDR      r0,[sp,#0x10]         ;1848
001d3c  e5801000          STR      r1,[r0,#0]            ;1848
001d40  e3540020          CMP      r4,#0x20              ;1849
001d44  aa000001          BGE      |L1.7504|
001d48  e3a00004          MOV      r0,#4                 ;1849
001d4c  ea000000          B        |L1.7508|
                  |L1.7504|
001d50  e3a00000          MOV      r0,#0                 ;1849
                  |L1.7508|
001d54  e1a06000          MOV      r6,r0                 ;1849
001d58  e3550001          CMP      r5,#1                 ;1851
001d5c  1a000004          BNE      |L1.7540|
001d60  e2450001          SUB      r0,r5,#1              ;1851
001d64  e0870080          ADD      r0,r7,r0,LSL #1       ;1851
001d68  e1d000b0          LDRH     r0,[r0,#0]            ;1851
001d6c  e350002e          CMP      r0,#0x2e              ;1851
001d70  0a00000b          BEQ      |L1.7588|
                  |L1.7540|
001d74  e3550002          CMP      r5,#2                 ;1852
001d78  1a00001d          BNE      |L1.7668|
001d7c  e2450001          SUB      r0,r5,#1              ;1852
001d80  e0870080          ADD      r0,r7,r0,LSL #1       ;1852
001d84  e1d000b0          LDRH     r0,[r0,#0]            ;1852
001d88  e350002e          CMP      r0,#0x2e              ;1852
001d8c  1a000018          BNE      |L1.7668|
001d90  e2450002          SUB      r0,r5,#2              ;1852
001d94  e0870080          ADD      r0,r7,r0,LSL #1       ;1852
001d98  e1d000b0          LDRH     r0,[r0,#0]            ;1852
001d9c  e350002e          CMP      r0,#0x2e              ;1852
001da0  1a000013          BNE      |L1.7668|
                  |L1.7588|
001da4  e3a00000          MOV      r0,#0                 ;1853
001da8  e0871085          ADD      r1,r7,r5,LSL #1       ;1853
001dac  e1c100b0          STRH     r0,[r1,#0]            ;1853
001db0  e3a0b000          MOV      r11,#0                ;1854
001db4  ea000007          B        |L1.7640|
                  |L1.7608|
001db8  e15b0005          CMP      r11,r5                ;1855
001dbc  2a000001          BCS      |L1.7624|
001dc0  e3a0002e          MOV      r0,#0x2e              ;1855
001dc4  ea000000          B        |L1.7628|
                  |L1.7624|
001dc8  e3a00020          MOV      r0,#0x20              ;1855
                  |L1.7628|
001dcc  e5991018          LDR      r1,[r9,#0x18]         ;1855
001dd0  e7c1000b          STRB     r0,[r1,r11]           ;1855
001dd4  e28bb001          ADD      r11,r11,#1            ;1854
                  |L1.7640|
001dd8  e35b000b          CMP      r11,#0xb              ;1854
001ddc  3afffff5          BCC      |L1.7608|
001de0  e3860020          ORR      r0,r6,#0x20           ;1856
001de4  e5991018          LDR      r1,[r9,#0x18]         ;1856
001de8  e7c1000b          STRB     r0,[r1,r11]           ;1856
001dec  e3a00000          MOV      r0,#0                 ;1857
001df0  eaffffb0          B        |L1.7352|
                  |L1.7668|
001df4  ea000008          B        |L1.7708|
                  |L1.7672|
001df8  e2450001          SUB      r0,r5,#1              ;1861
001dfc  e0870080          ADD      r0,r7,r0,LSL #1       ;1861
001e00  e1d040b0          LDRH     r4,[r0,#0]            ;1861
001e04  e3540020          CMP      r4,#0x20              ;1862
001e08  0a000002          BEQ      |L1.7704|
001e0c  e354002e          CMP      r4,#0x2e              ;1862
001e10  0a000000          BEQ      |L1.7704|
001e14  ea000002          B        |L1.7716|
                  |L1.7704|
001e18  e2455001          SUB      r5,r5,#1              ;1863
                  |L1.7708|
001e1c  e3550000          CMP      r5,#0                 ;1860
001e20  1afffff4          BNE      |L1.7672|
                  |L1.7716|
001e24  e1a00000          MOV      r0,r0                 ;1862
001e28  e3550000          CMP      r5,#0                 ;1865
001e2c  1a000003          BNE      |L1.7744|
001e30  e28f0f79          ADR      r0,|L1.8220|
001e34  ebfffffe          BL       sysprintf
001e38  e3a00006          MOV      r0,#6                 ;1868
001e3c  eaffff9d          B        |L1.7352|
                  |L1.7744|
001e40  e3a00000          MOV      r0,#0                 ;1871
001e44  e0871085          ADD      r1,r7,r5,LSL #1       ;1871
001e48  e1c100b0          STRH     r0,[r1,#0]            ;1871
001e4c  e3a0200b          MOV      r2,#0xb               ;1874
001e50  e3a01020          MOV      r1,#0x20              ;1874
001e54  e5990018          LDR      r0,[r9,#0x18]         ;1874
001e58  ebfffffe          BL       mem_set
001e5c  e3a08000          MOV      r8,#0                 ;1875
001e60  ea000000          B        |L1.7784|
                  |L1.7780|
001e64  e2888001          ADD      r8,r8,#1              ;1875
                  |L1.7784|
001e68  e0870088          ADD      r0,r7,r8,LSL #1       ;1875
001e6c  e1d000b0          LDRH     r0,[r0,#0]            ;1875
001e70  e3500020          CMP      r0,#0x20              ;1875
001e74  0afffffa          BEQ      |L1.7780|
001e78  e0870088          ADD      r0,r7,r8,LSL #1       ;1875
001e7c  e1d000b0          LDRH     r0,[r0,#0]            ;1875
001e80  e350002e          CMP      r0,#0x2e              ;1875
001e84  0afffff6          BEQ      |L1.7780|
001e88  e3580000          CMP      r8,#0                 ;1876
001e8c  0a000000          BEQ      |L1.7828|
001e90  e3866003          ORR      r6,r6,#3              ;1876
                  |L1.7828|
001e94  ea000000          B        |L1.7836|
                  |L1.7832|
001e98  e2455001          SUB      r5,r5,#1              ;1877
                  |L1.7836|
001e9c  e3550000          CMP      r5,#0                 ;1877
001ea0  0a000004          BEQ      |L1.7864|
001ea4  e2450001          SUB      r0,r5,#1              ;1877
001ea8  e0870080          ADD      r0,r7,r0,LSL #1       ;1877
001eac  e1d000b0          LDRH     r0,[r0,#0]            ;1877
001eb0  e350002e          CMP      r0,#0x2e              ;1877
001eb4  1afffff7          BNE      |L1.7832|
                  |L1.7864|
001eb8  e3a0a000          MOV      r10,#0                ;1879
001ebc  e1a0b00a          MOV      r11,r10               ;1879
001ec0  e3a00008          MOV      r0,#8                 ;1879
001ec4  e58d0008          STR      r0,[sp,#8]            ;1879
001ec8  e1a00000          MOV      r0,r0                 ;1880
                  |L1.7884|
001ecc  e1a00008          MOV      r0,r8                 ;1881
001ed0  e2888001          ADD      r8,r8,#1              ;1881
001ed4  e0870080          ADD      r0,r7,r0,LSL #1       ;1881
001ed8  e1d040b0          LDRH     r4,[r0,#0]            ;1881
001edc  e3540000          CMP      r4,#0                 ;1882
001ee0  1a000000          BNE      |L1.7912|
001ee4  ea000067          B        |L1.8328|
                  |L1.7912|
001ee8  e3540020          CMP      r4,#0x20              ;1883
001eec  0a000003          BEQ      |L1.7936|
001ef0  e354002e          CMP      r4,#0x2e              ;1883
001ef4  1a000003          BNE      |L1.7944|
001ef8  e1580005          CMP      r8,r5                 ;1883
001efc  0a000001          BEQ      |L1.7944|
                  |L1.7936|
001f00  e3866003          ORR      r6,r6,#3              ;1884
001f04  eafffff0          B        |L1.7884|
                  |L1.7944|
001f08  e59d0008          LDR      r0,[sp,#8]            ;1887
001f0c  e15b0000          CMP      r11,r0                ;1887
001f10  2a000001          BCS      |L1.7964|
001f14  e1580005          CMP      r8,r5                 ;1887
001f18  1a000011          BNE      |L1.8036|
                  |L1.7964|
001f1c  e59d0008          LDR      r0,[sp,#8]            ;1888
001f20  e350000b          CMP      r0,#0xb               ;1888
001f24  1a000001          BNE      |L1.7984|
001f28  e3866003          ORR      r6,r6,#3              ;1889
001f2c  ea000055          B        |L1.8328|
                  |L1.7984|
001f30  e1580005          CMP      r8,r5                 ;1891
001f34  0a000000          BEQ      |L1.7996|
001f38  e3866003          ORR      r6,r6,#3              ;1891
                  |L1.7996|
001f3c  e1580005          CMP      r8,r5                 ;1892
001f40  9a000000          BLS      |L1.8008|
001f44  ea00004f          B        |L1.8328|
                  |L1.8008|
001f48  e1a08005          MOV      r8,r5                 ;1893
001f4c  e3a0b008          MOV      r11,#8                ;1893
001f50  e3a0000b          MOV      r0,#0xb               ;1893
001f54  e58d0008          STR      r0,[sp,#8]            ;1893
001f58  e1a00d0a          LSL      r0,r10,#26            ;1894
001f5c  e1a0ac20          LSR      r10,r0,#24            ;1894
001f60  eaffffd9          B        |L1.7884|
                  |L1.8036|
001f64  e3540080          CMP      r4,#0x80              ;1897
001f68  ba000009          BLT      |L1.8084|
001f6c  e3a01000          MOV      r1,#0                 ;1899
001f70  e1a00004          MOV      r0,r4                 ;1899
001f74  ebfffffe          BL       ff_convert
001f78  e1a04000          MOV      r4,r0                 ;1899
001f7c  e3540000          CMP      r4,#0                 ;1900
001f80  0a000002          BEQ      |L1.8080|
001f84  e2440080          SUB      r0,r4,#0x80           ;1900
001f88  e59f1030          LDR      r1,|L1.8128|
001f8c  e7d14000          LDRB     r4,[r1,r0]            ;1900
                  |L1.8080|
001f90  e3866002          ORR      r6,r6,#2              ;1904
                  |L1.8084|
001f94  e1a00000          MOV      r0,r0                 ;1907
001f98  e3540000          CMP      r4,#0                 ;1913
001f9c  0a000004          BEQ      |L1.8116|
001fa0  e1a01004          MOV      r1,r4                 ;1913
001fa4  e28f0088          ADR      r0,|L1.8244|
001fa8  ebfffffe          BL       chk_chr
001fac  e3500000          CMP      r0,#0                 ;1913
001fb0  0a000021          BEQ      |L1.8252|
                  |L1.8116|
001fb4  e3a0405f          MOV      r4,#0x5f              ;1914
001fb8  e3866003          ORR      r6,r6,#3              ;1914
001fbc  ea00002c          B        |L1.8308|
                  |L1.8128|
                          DCD      ExCvt
                  |L1.8132|
001fc4  46525f49          DCB      "FR_INVALID_NAME : 14(%d)\n\r",0
001fc8  4e56414c
001fcc  49445f4e
001fd0  414d4520
001fd4  3a203134
001fd8  28256429
001fdc  0a0d00  
001fdf  00                DCB      0
                  |L1.8160|
001fe0  46525f49          DCB      "FR_INVALID_NAME : 16\n\r",0
001fe4  4e56414c
001fe8  49445f4e
001fec  414d4520
001ff0  3a203136
001ff4  0a0d00  
001ff7  00                DCB      0
                  |L1.8184|
001ff8  222a3a3c          DCB      """*:<>?|",127,0
001ffc  3e3f7c7f
002000  00      
002001  00                DCB      0
002002  00                DCB      0
002003  00                DCB      0
                  |L1.8196|
002004  46525f49          DCB      "FR_INVALID_NAME : 17\n\r",0
002008  4e56414c
00200c  49445f4e
002010  414d4520
002014  3a203137
002018  0a0d00  
00201b  00                DCB      0
                  |L1.8220|
00201c  46525f49          DCB      "FR_INVALID_NAME : 18\n\r",0
002020  4e56414c
002024  49445f4e
002028  414d4520
00202c  3a203138
002030  0a0d00  
002033  00                DCB      0
                  |L1.8244|
002034  2b2c3b3d          DCB      "+,;=[]",0
002038  5b5d00  
00203b  00                DCB      0
                  |L1.8252|
00203c  e3540041          CMP      r4,#0x41              ;1916
002040  ba000003          BLT      |L1.8276|
002044  e354005a          CMP      r4,#0x5a              ;1916
002048  ca000001          BGT      |L1.8276|
00204c  e38aa002          ORR      r10,r10,#2            ;1917
002050  ea000007          B        |L1.8308|
                  |L1.8276|
002054  e3540061          CMP      r4,#0x61              ;1919
002058  ba000005          BLT      |L1.8308|
00205c  e354007a          CMP      r4,#0x7a              ;1919
002060  ca000003          BGT      |L1.8308|
002064  e38aa001          ORR      r10,r10,#1            ;1920
002068  e2440020          SUB      r0,r4,#0x20           ;1920
00206c  e1a04800          LSL      r4,r0,#16             ;1920
002070  e1a04824          LSR      r4,r4,#16             ;1920
                  |L1.8308|
002074  e1a0000b          MOV      r0,r11                ;1925
002078  e28bb001          ADD      r11,r11,#1            ;1925
00207c  e5992018          LDR      r2,[r9,#0x18]         ;1925
002080  e7c24000          STRB     r4,[r2,r0]            ;1925
002084  eaffff90          B        |L1.7884|
                  |L1.8328|
002088  e1a00000          MOV      r0,r0                 ;1882
00208c  e5990018          LDR      r0,[r9,#0x18]         ;1928
002090  e5d00000          LDRB     r0,[r0,#0]            ;1928
002094  e35000e5          CMP      r0,#0xe5              ;1928
002098  1a000002          BNE      |L1.8360|
00209c  e3a00005          MOV      r0,#5                 ;1928
0020a0  e5991018          LDR      r1,[r9,#0x18]         ;1928
0020a4  e5c10000          STRB     r0,[r1,#0]            ;1928
                  |L1.8360|
0020a8  e59d0008          LDR      r0,[sp,#8]            ;1930
0020ac  e3500008          CMP      r0,#8                 ;1930
0020b0  1a000001          BNE      |L1.8380|
0020b4  e1a00d0a          LSL      r0,r10,#26            ;1930
0020b8  e1a0ac20          LSR      r10,r0,#24            ;1930
                  |L1.8380|
0020bc  e20a000c          AND      r0,r10,#0xc           ;1931
0020c0  e350000c          CMP      r0,#0xc               ;1931
0020c4  0a000002          BEQ      |L1.8404|
0020c8  e20a0003          AND      r0,r10,#3             ;1931
0020cc  e3500003          CMP      r0,#3                 ;1931
0020d0  1a000000          BNE      |L1.8408|
                  |L1.8404|
0020d4  e3866002          ORR      r6,r6,#2              ;1932
                  |L1.8408|
0020d8  e3160002          TST      r6,#2                 ;1933
0020dc  1a000007          BNE      |L1.8448|
0020e0  e20a0003          AND      r0,r10,#3             ;1934
0020e4  e3500001          CMP      r0,#1                 ;1934
0020e8  1a000000          BNE      |L1.8432|
0020ec  e3866010          ORR      r6,r6,#0x10           ;1934
                  |L1.8432|
0020f0  e20a000c          AND      r0,r10,#0xc           ;1935
0020f4  e3500004          CMP      r0,#4                 ;1935
0020f8  1a000000          BNE      |L1.8448|
0020fc  e3866008          ORR      r6,r6,#8              ;1935
                  |L1.8448|
002100  e5990018          LDR      r0,[r9,#0x18]         ;1938
002104  e5c0600b          STRB     r6,[r0,#0xb]          ;1938
002108  e3a00000          MOV      r0,#0                 ;1940
00210c  eafffee9          B        |L1.7352|
;;;2037   
                          ENDP

                  follow_path PROC
;;;2045   static
;;;2046   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
002110  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;2047   	DIR* dp,			/* Directory object to return last directory and found object */
;;;2048   	const TCHAR* path	/* Full-path string to find a file or directory */
;;;2049   )
;;;2050   {
002114  e1a04000          MOV      r4,r0
;;;2051   	FRESULT res;
;;;2052   	BYTE *dir, ns;
;;;2053   
;;;2054   
;;;2055   #if _FS_RPATH
;;;2056   	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
002118  e59d0004          LDR      r0,[sp,#4]
00211c  e5d00000          LDRB     r0,[r0,#0]
002120  e350002f          CMP      r0,#0x2f
002124  0a000003          BEQ      |L1.8504|
002128  e59d0004          LDR      r0,[sp,#4]
00212c  e5d00000          LDRB     r0,[r0,#0]
002130  e350005c          CMP      r0,#0x5c
002134  1a000005          BNE      |L1.8528|
                  |L1.8504|
;;;2057   		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
002138  e59d0004          LDR      r0,[sp,#4]
00213c  e2800001          ADD      r0,r0,#1
002140  e58d0004          STR      r0,[sp,#4]
002144  e3a00000          MOV      r0,#0
002148  e5840008          STR      r0,[r4,#8]
00214c  ea000002          B        |L1.8540|
                  |L1.8528|
;;;2058   	} else {								/* No heading separator */
;;;2059   		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
002150  e5940000          LDR      r0,[r4,#0]
002154  e5900018          LDR      r0,[r0,#0x18]
002158  e5840008          STR      r0,[r4,#8]
                  |L1.8540|
;;;2060   	}
;;;2061   #else
;;;2062   	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
;;;2063   		path++;
;;;2064   	dp->sclust = 0;							/* Always start from the root directory */
;;;2065   #endif
;;;2066   
;;;2067   	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
00215c  e59d0004          LDR      r0,[sp,#4]
002160  e5d00000          LDRB     r0,[r0,#0]
002164  e3500020          CMP      r0,#0x20
002168  2a000006          BCS      |L1.8584|
;;;2068   		res = dir_sdi(dp, 0);
00216c  e3a01000          MOV      r1,#0
002170  e1a00004          MOV      r0,r4
002174  ebfffffe          BL       dir_sdi
002178  e1a05000          MOV      r5,r0
;;;2069   		dp->dir = 0;
00217c  e3a00000          MOV      r0,#0
002180  e5840014          STR      r0,[r4,#0x14]
002184  ea00002d          B        |L1.8768|
                  |L1.8584|
;;;2070   	} else {								/* Follow path */
;;;2071   		for (;;) {
002188  e1a00000          MOV      r0,r0
                  |L1.8588|
;;;2072   			res = create_name(dp, &path);	/* Get a segment name of the path */
00218c  e28d1004          ADD      r1,sp,#4
002190  e1a00004          MOV      r0,r4
002194  ebfffffe          BL       create_name
002198  e1a05000          MOV      r5,r0
;;;2073   			if (res != FR_OK) break;
00219c  e3550000          CMP      r5,#0
0021a0  0a000000          BEQ      |L1.8616|
0021a4  ea000024          B        |L1.8764|
                  |L1.8616|
;;;2074   			res = dir_find(dp);				/* Find an object with the sagment name */
0021a8  e1a00004          MOV      r0,r4
0021ac  ebfffffe          BL       dir_find
0021b0  e1a05000          MOV      r5,r0
;;;2075   			ns = dp->fn[NSFLAG];
0021b4  e5940018          LDR      r0,[r4,#0x18]
0021b8  e5d0600b          LDRB     r6,[r0,#0xb]
;;;2076   			if (res != FR_OK) {				/* Failed to find the object */
0021bc  e3550000          CMP      r5,#0
0021c0  0a00000f          BEQ      |L1.8708|
;;;2077   				if (res == FR_NO_FILE) {	/* Object is not found */
0021c4  e3550004          CMP      r5,#4
0021c8  1a00000c          BNE      |L1.8704|
;;;2078   					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
0021cc  e3160020          TST      r6,#0x20
0021d0  0a000007          BEQ      |L1.8692|
;;;2079   						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
0021d4  e3a00000          MOV      r0,#0
0021d8  e5840008          STR      r0,[r4,#8]
0021dc  e5840014          STR      r0,[r4,#0x14]
;;;2080   						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
0021e0  e3160004          TST      r6,#4
0021e4  1a000000          BNE      |L1.8684|
0021e8  eaffffe7          B        |L1.8588|
                  |L1.8684|
;;;2081   						res = FR_OK;					/* Ended at the root directroy. Function completed. */
0021ec  e3a05000          MOV      r5,#0
0021f0  ea000002          B        |L1.8704|
                  |L1.8692|
;;;2082   					} else {							/* Could not find the object */
;;;2083   						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
0021f4  e3160004          TST      r6,#4
0021f8  1a000000          BNE      |L1.8704|
0021fc  e3a05005          MOV      r5,#5
                  |L1.8704|
;;;2084   					}
;;;2085   				}
;;;2086   				break;
002200  ea00000d          B        |L1.8764|
                  |L1.8708|
;;;2087   			}
;;;2088   			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
002204  e3160004          TST      r6,#4
002208  0a000000          BEQ      |L1.8720|
00220c  ea00000a          B        |L1.8764|
                  |L1.8720|
;;;2089   			dir = dp->dir;						/* Follow the sub-directory */
002210  e5947014          LDR      r7,[r4,#0x14]
;;;2090   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
002214  e5d7000b          LDRB     r0,[r7,#0xb]
002218  e3100010          TST      r0,#0x10
00221c  1a000001          BNE      |L1.8744|
;;;2091   				res = FR_NO_PATH; break;
002220  e3a05005          MOV      r5,#5
002224  ea000004          B        |L1.8764|
                  |L1.8744|
;;;2092   			}
;;;2093   			dp->sclust = ld_clust(dp->fs, dir);
002228  e1a01007          MOV      r1,r7
00222c  e5940000          LDR      r0,[r4,#0]
002230  ebfffffe          BL       ld_clust
002234  e5840008          STR      r0,[r4,#8]
002238  eaffffd3          B        |L1.8588|
                  |L1.8764|
00223c  e1a00000          MOV      r0,r0                 ;2073
                  |L1.8768|
;;;2094   		}
;;;2095   	}
;;;2096   
;;;2097   	return res;
002240  e1a00005          MOV      r0,r5
;;;2098   }
002244  e8bd81fc          POP      {r2-r8,pc}
;;;2099   
                          ENDP

                  get_ldnumber PROC
;;;2107   static
;;;2108   int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
002248  e92d4030          PUSH     {r4,r5,lr}
;;;2109   	const TCHAR** path	/* Pointer to pointer to the path name */
;;;2110   )
;;;2111   {
00224c  e1a02000          MOV      r2,r0
;;;2112   	const TCHAR *tp, *tt;
;;;2113   	UINT i;
;;;2114   	int vol = -1;
002250  e3e00000          MVN      r0,#0
;;;2115   #if _STR_VOLUME_ID		/* Find string drive id */
;;;2116   	static const char* const str[] = {_VOLUME_STRS};
;;;2117   	const char *sp;
;;;2118   	char c;
;;;2119   	TCHAR tc;
;;;2120   #endif
;;;2121   
;;;2122   
;;;2123   	if (*path) {	/* If the pointer is not a null */
002254  e5924000          LDR      r4,[r2,#0]
002258  e3540000          CMP      r4,#0
00225c  0a00001b          BEQ      |L1.8912|
;;;2124   		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
002260  e5921000          LDR      r1,[r2,#0]
002264  ea000000          B        |L1.8812|
                  |L1.8808|
002268  e2811001          ADD      r1,r1,#1
                  |L1.8812|
00226c  e5d14000          LDRB     r4,[r1,#0]
002270  e3540020          CMP      r4,#0x20
002274  3a000002          BCC      |L1.8836|
002278  e5d14000          LDRB     r4,[r1,#0]
00227c  e354003a          CMP      r4,#0x3a
002280  1afffff8          BNE      |L1.8808|
                  |L1.8836|
;;;2125   		if (*tt == ':') {	/* If a ':' is exist in the path name */
002284  e5d14000          LDRB     r4,[r1,#0]
002288  e354003a          CMP      r4,#0x3a
00228c  1a00000d          BNE      |L1.8904|
;;;2126   			tp = *path;
002290  e592c000          LDR      r12,[r2,#0]
;;;2127   			i = *tp++ - '0'; 
002294  e4dc4001          LDRB     r4,[r12],#1
002298  e2443030          SUB      r3,r4,#0x30
;;;2128   			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
00229c  e353000a          CMP      r3,#0xa
0022a0  2a000007          BCS      |L1.8900|
0022a4  e15c0001          CMP      r12,r1
0022a8  1a000005          BNE      |L1.8900|
;;;2129   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
0022ac  e3530003          CMP      r3,#3
0022b0  2a000003          BCS      |L1.8900|
;;;2130   					vol = (int)i;
0022b4  e1a00003          MOV      r0,r3
;;;2131   					*path = ++tt;
0022b8  e2814001          ADD      r4,r1,#1
0022bc  e1a01004          MOV      r1,r4
0022c0  e5824000          STR      r4,[r2,#0]
                  |L1.8900|
;;;2132   				}
;;;2133   			}
;;;2134   #if _STR_VOLUME_ID
;;;2135   			 else {	/* No numeric drive number, find string drive id */
;;;2136   				i = 0; tt++;
;;;2137   				do {
;;;2138   					sp = str[i]; tp = *path;
;;;2139   					do {	/* Compare a string drive id with path name */
;;;2140   						c = *sp++; tc = *tp++;
;;;2141   						if (IsLower(tc)) tc -= 0x20;
;;;2142   					} while (c && (TCHAR)c == tc);
;;;2143   				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
;;;2144   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
;;;2145   					vol = (int)i;
;;;2146   					*path = tt;
;;;2147   				}
;;;2148   			}
;;;2149   #endif
;;;2150   			return vol;
;;;2151   		}
;;;2152   #if _FS_RPATH && _VOLUMES >= 2
;;;2153   		vol = CurrVol;	/* Current drive */
;;;2154   #else
;;;2155   		vol = 0;		/* Drive 0 */
;;;2156   #endif
;;;2157   	}
;;;2158   	return vol;
;;;2159   }
0022c4  e8bd8030          POP      {r4,r5,pc}
                  |L1.8904|
0022c8  e59f4b44          LDR      r4,|L1.11796|
0022cc  e5d40000          LDRB     r0,[r4,#0]            ;2153  ; CurrVol
                  |L1.8912|
0022d0  e1a00000          MOV      r0,r0                 ;2158
0022d4  eafffffa          B        |L1.8900|
;;;2160   
                          ENDP

                  check_fs PROC
;;;2168   static
;;;2169   BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
0022d8  e92d4070          PUSH     {r4-r6,lr}
;;;2170   	FATFS* fs,	/* File system object */
;;;2171   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2172   )
;;;2173   {
0022dc  e1a04000          MOV      r4,r0
0022e0  e1a05001          MOV      r5,r1
;;;2174   	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
0022e4  e3a00000          MOV      r0,#0
0022e8  e5c40004          STRB     r0,[r4,#4]
0022ec  e3e00000          MVN      r0,#0
0022f0  e5840034          STR      r0,[r4,#0x34]
;;;2175   	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
0022f4  e1a01005          MOV      r1,r5
0022f8  e1a00004          MOV      r0,r4
0022fc  ebfffffe          BL       move_window
002300  e3500000          CMP      r0,#0
002304  0a000001          BEQ      |L1.8976|
;;;2176   		return 3;
002308  e3a00003          MOV      r0,#3
                  |L1.8972|
;;;2177   
;;;2178   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
;;;2179   		return 2;
;;;2180   
;;;2181   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
;;;2182   		return 0;
;;;2183   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2184   		return 0;
;;;2185   
;;;2186   	return 1;
;;;2187   }
00230c  e8bd8070          POP      {r4-r6,pc}
                  |L1.8976|
002310  e5d40236          LDRB     r0,[r4,#0x236]        ;2178
002314  e5d41237          LDRB     r1,[r4,#0x237]        ;2178
002318  e1800401          ORR      r0,r0,r1,LSL #8       ;2178
00231c  e2401caa          SUB      r1,r0,#0xaa00         ;2178
002320  e2511055          SUBS     r1,r1,#0x55           ;2178
002324  0a000001          BEQ      |L1.9008|
002328  e3a00002          MOV      r0,#2                 ;2179
00232c  eafffff6          B        |L1.8972|
                  |L1.9008|
002330  e5d40071          LDRB     r0,[r4,#0x71]         ;2181
002334  e1a00c00          LSL      r0,r0,#24             ;2181
002338  e5d41070          LDRB     r1,[r4,#0x70]         ;2181
00233c  e1800801          ORR      r0,r0,r1,LSL #16      ;2181
002340  e5d4106f          LDRB     r1,[r4,#0x6f]         ;2181
002344  e1800401          ORR      r0,r0,r1,LSL #8       ;2181
002348  e5d4106e          LDRB     r1,[r4,#0x6e]         ;2181
00234c  e1800001          ORR      r0,r0,r1              ;2181
002350  e3c004ff          BIC      r0,r0,#0xff000000     ;2181
002354  e59f1abc          LDR      r1,|L1.11800|
002358  e1500001          CMP      r0,r1                 ;2181
00235c  1a000001          BNE      |L1.9064|
002360  e3a00000          MOV      r0,#0                 ;2182
002364  eaffffe8          B        |L1.8972|
                  |L1.9064|
002368  e5d4008d          LDRB     r0,[r4,#0x8d]         ;2183
00236c  e1a00c00          LSL      r0,r0,#24             ;2183
002370  e5d4108c          LDRB     r1,[r4,#0x8c]         ;2183
002374  e1800801          ORR      r0,r0,r1,LSL #16      ;2183
002378  e5d4108b          LDRB     r1,[r4,#0x8b]         ;2183
00237c  e1800401          ORR      r0,r0,r1,LSL #8       ;2183
002380  e5d4108a          LDRB     r1,[r4,#0x8a]         ;2183
002384  e1800001          ORR      r0,r0,r1              ;2183
002388  e3c004ff          BIC      r0,r0,#0xff000000     ;2183
00238c  e59f1a84          LDR      r1,|L1.11800|
002390  e1500001          CMP      r0,r1                 ;2183
002394  1a000001          BNE      |L1.9120|
002398  e3a00000          MOV      r0,#0                 ;2184
00239c  eaffffda          B        |L1.8972|
                  |L1.9120|
0023a0  e3a00001          MOV      r0,#1                 ;2186
0023a4  eaffffd8          B        |L1.8972|
;;;2188   
                          ENDP

                  find_volume PROC
;;;2196   static
;;;2197   FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
0023a8  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2198   	FATFS** rfs,		/* Pointer to pointer to the found file system object */
;;;2199   	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
;;;2200   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2201   )
;;;2202   {
0023ac  e24dd028          SUB      sp,sp,#0x28
;;;2203   	BYTE fmt, *pt;
;;;2204   	int vol;
;;;2205   	DSTATUS stat;
;;;2206   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
;;;2207   	WORD nrsv;
;;;2208   	FATFS *fs;
;;;2209   	UINT i;
;;;2210   
;;;2211   
;;;2212   	/* Get logical drive number from the path name */
;;;2213   	*rfs = 0;
0023b0  e3a01000          MOV      r1,#0
0023b4  e59d0028          LDR      r0,[sp,#0x28]
0023b8  e5801000          STR      r1,[r0,#0]
;;;2214   	vol = get_ldnumber(path);
0023bc  e59d002c          LDR      r0,[sp,#0x2c]
0023c0  ebfffffe          BL       get_ldnumber
0023c4  e58d0024          STR      r0,[sp,#0x24]
;;;2215   	if (vol < 0) return FR_INVALID_DRIVE;
0023c8  e59d0024          LDR      r0,[sp,#0x24]
0023cc  e3500000          CMP      r0,#0
0023d0  aa000002          BGE      |L1.9184|
0023d4  e3a0000b          MOV      r0,#0xb
                  |L1.9176|
0023d8  e28dd034          ADD      sp,sp,#0x34
;;;2216   
;;;2217   	/* Check if the file system object is valid or not */
;;;2218   	fs = FatFs[vol];					/* Get pointer to the file system object */
;;;2219   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2220   
;;;2221   	ENTER_FF(fs);						/* Lock the volume */
;;;2222   	*rfs = fs;							/* Return pointer to the file system object */
;;;2223   
;;;2224   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2225   		stat = disk_status(fs->drv);
;;;2226   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
;;;2227   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2228   				return FR_WRITE_PROTECTED;
;;;2229   			return FR_OK;				/* The file system object is valid */
;;;2230   		}
;;;2231   	}
;;;2232   
;;;2233   	/* The file system object is not valid. */
;;;2234   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2235   
;;;2236   	fs->fs_type = 0;					/* Clear the file system object */
;;;2237   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2238   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2239   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2240   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2241   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2242   		return FR_WRITE_PROTECTED;
;;;2243   #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
;;;2244   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2245   		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
;;;2246   #endif
;;;2247   	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
;;;2248   	bsect = 0;
;;;2249   	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
;;;2250   	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
;;;2251   		for (i = 0; i < 4; i++) {			/* Get partition offset */
;;;2252   			pt = fs->win + MBR_Table + i * SZ_PTE;
;;;2253   			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
;;;2254   		}
;;;2255   		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
;;;2256   		if (i) i--;
;;;2257   		do {								/* Find an FAT volume */
;;;2258   			bsect = br[i];
;;;2259   			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
;;;2260   		} while (!LD2PT(vol) && fmt && ++i < 4);
;;;2261   	}
;;;2262   	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
;;;2263   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2264   
;;;2265   	/* An FAT volume is found. Following code initializes the file system object */
;;;2266   
;;;2267   	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2268   		return FR_NO_FILESYSTEM;
;;;2269   
;;;2270   	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
;;;2271   	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
;;;2272   	fs->fsize = fasize;
;;;2273   
;;;2274   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;2275   	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
;;;2276   		return FR_NO_FILESYSTEM;
;;;2277   	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
;;;2278   
;;;2279   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;2280   	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
;;;2281   		return FR_NO_FILESYSTEM;
;;;2282   
;;;2283   	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
;;;2284   	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
;;;2285   		return FR_NO_FILESYSTEM;
;;;2286   
;;;2287   	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
;;;2288   	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
;;;2289   
;;;2290   	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
;;;2291   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
;;;2292   
;;;2293   	/* Determine the FAT sub type */
;;;2294   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
;;;2295   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2296   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2297   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2298   	fmt = FS_FAT12;
;;;2299   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2300   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2301   
;;;2302   	/* Boundaries and Limits */
;;;2303   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2304   	fs->volbase = bsect;								/* Volume start sector */
;;;2305   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2306   	fs->database = bsect + sysect;						/* Data start sector */
;;;2307   	if (fmt == FS_FAT32) {
;;;2308   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2309   		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
;;;2310   		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
;;;2311   	} else {
;;;2312   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2313   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2314   		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
;;;2315   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2316   	}
;;;2317   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
;;;2318   		return FR_NO_FILESYSTEM;
;;;2319   
;;;2320   #if !_FS_READONLY
;;;2321   	/* Initialize cluster allocation information */
;;;2322   	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
;;;2323   
;;;2324   	/* Get fsinfo if available */
;;;2325   	fs->fsi_flag = 0x80;
;;;2326   #if (_FS_NOFSINFO & 3) != 3
;;;2327   	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
;;;2328   		&& LD_WORD(fs->win + BPB_FSInfo) == 1
;;;2329   		&& move_window(fs, bsect + 1) == FR_OK)
;;;2330   	{
;;;2331   		fs->fsi_flag = 0;
;;;2332   		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
;;;2333   			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
;;;2334   			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
;;;2335   		{
;;;2336   #if (_FS_NOFSINFO & 1) == 0
;;;2337   			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
;;;2338   #endif
;;;2339   #if (_FS_NOFSINFO & 2) == 0
;;;2340   			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
;;;2341   #endif
;;;2342   		}
;;;2343   	}
;;;2344   #endif
;;;2345   #endif
;;;2346   	fs->fs_type = fmt;	/* FAT sub-type */
;;;2347   	fs->id = ++Fsid;	/* File system mount ID */
;;;2348   #if _FS_RPATH
;;;2349   	fs->cdir = 0;		/* Set current directory to root */
;;;2350   #endif
;;;2351   #if _FS_LOCK			/* Clear file lock semaphores */
;;;2352   	clear_lock(fs);
;;;2353   #endif
;;;2354   
;;;2355   	return FR_OK;
;;;2356   }
0023dc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.9184|
0023e0  e59f1a34          LDR      r1,|L1.11804|
0023e4  e59d0024          LDR      r0,[sp,#0x24]         ;2218
0023e8  e7914100          LDR      r4,[r1,r0,LSL #2]     ;2218
0023ec  e3540000          CMP      r4,#0                 ;2219
0023f0  1a000001          BNE      |L1.9212|
0023f4  e3a0000c          MOV      r0,#0xc               ;2219
0023f8  eafffff6          B        |L1.9176|
                  |L1.9212|
0023fc  e1a00004          MOV      r0,r4                 ;2221
002400  ebfffffe          BL       lock_fs
002404  e3500000          CMP      r0,#0                 ;2221
002408  1a000001          BNE      |L1.9236|
00240c  e3a0000f          MOV      r0,#0xf               ;2221
002410  eafffff0          B        |L1.9176|
                  |L1.9236|
002414  e59d0028          LDR      r0,[sp,#0x28]         ;2222
002418  e5804000          STR      r4,[r0,#0]            ;2222
00241c  e5d40000          LDRB     r0,[r4,#0]            ;2224
002420  e3500000          CMP      r0,#0                 ;2224
002424  0a00000d          BEQ      |L1.9312|
002428  e5d40001          LDRB     r0,[r4,#1]            ;2225
00242c  ebfffffe          BL       disk_status
002430  e1a09000          MOV      r9,r0                 ;2225
002434  e3190001          TST      r9,#1                 ;2226
002438  1a000008          BNE      |L1.9312|
00243c  e59d0030          LDR      r0,[sp,#0x30]         ;2227
002440  e3500000          CMP      r0,#0                 ;2227
002444  0a000003          BEQ      |L1.9304|
002448  e3190004          TST      r9,#4                 ;2227
00244c  0a000001          BEQ      |L1.9304|
002450  e3a0000a          MOV      r0,#0xa               ;2228
002454  eaffffdf          B        |L1.9176|
                  |L1.9304|
002458  e3a00000          MOV      r0,#0                 ;2229
00245c  eaffffdd          B        |L1.9176|
                  |L1.9312|
002460  e3a00000          MOV      r0,#0                 ;2236
002464  e5c40000          STRB     r0,[r4,#0]            ;2236
002468  e59d0024          LDR      r0,[sp,#0x24]         ;2237
00246c  e5c40001          STRB     r0,[r4,#1]            ;2237
002470  e5d40001          LDRB     r0,[r4,#1]            ;2238
002474  ebfffffe          BL       disk_initialize
002478  e1a09000          MOV      r9,r0                 ;2238
00247c  e3190001          TST      r9,#1                 ;2239
002480  0a000001          BEQ      |L1.9356|
002484  e3a00003          MOV      r0,#3                 ;2240
002488  eaffffd2          B        |L1.9176|
                  |L1.9356|
00248c  e59d0030          LDR      r0,[sp,#0x30]         ;2241
002490  e3500000          CMP      r0,#0                 ;2241
002494  0a000003          BEQ      |L1.9384|
002498  e3190004          TST      r9,#4                 ;2241
00249c  0a000001          BEQ      |L1.9384|
0024a0  e3a0000a          MOV      r0,#0xa               ;2242
0024a4  eaffffcb          B        |L1.9176|
                  |L1.9384|
0024a8  e5d40001          LDRB     r0,[r4,#1]            ;2244
0024ac  e284200a          ADD      r2,r4,#0xa            ;2244
0024b0  e3a01002          MOV      r1,#2                 ;2244
0024b4  ebfffffe          BL       disk_ioctl
0024b8  e3500000          CMP      r0,#0                 ;2244
0024bc  1a000005          BNE      |L1.9432|
0024c0  e1d400ba          LDRH     r0,[r4,#0xa]          ;2245
0024c4  e3500c02          CMP      r0,#0x200             ;2245
0024c8  ba000002          BLT      |L1.9432|
0024cc  e1d400ba          LDRH     r0,[r4,#0xa]          ;2245
0024d0  e3500a01          CMP      r0,#0x1000            ;2245
0024d4  da000001          BLE      |L1.9440|
                  |L1.9432|
0024d8  e3a00001          MOV      r0,#1                 ;2245
0024dc  eaffffbd          B        |L1.9176|
                  |L1.9440|
0024e0  e3a07000          MOV      r7,#0                 ;2248
0024e4  e1a01007          MOV      r1,r7                 ;2249
0024e8  e1a00004          MOV      r0,r4                 ;2249
0024ec  ebfffffe          BL       check_fs
0024f0  e1a05000          MOV      r5,r0                 ;2249
0024f4  e3550001          CMP      r5,#1                 ;2250
0024f8  0a000002          BEQ      |L1.9480|
0024fc  e3550000          CMP      r5,#0                 ;2250
002500  1a00002c          BNE      |L1.9656|
002504  ea00002b          B        |L1.9656|
                  |L1.9480|
002508  e3a06000          MOV      r6,#0                 ;2251
00250c  ea000012          B        |L1.9564|
                  |L1.9488|
002510  e2840c01          ADD      r0,r4,#0x100          ;2252
002514  e28000f6          ADD      r0,r0,#0xf6           ;2252
002518  e0808206          ADD      r8,r0,r6,LSL #4       ;2252
00251c  e5d80004          LDRB     r0,[r8,#4]            ;2253
002520  e3500000          CMP      r0,#0                 ;2253
002524  0a000008          BEQ      |L1.9548|
002528  e5d8000b          LDRB     r0,[r8,#0xb]          ;2253
00252c  e1a00c00          LSL      r0,r0,#24             ;2253
002530  e5d8100a          LDRB     r1,[r8,#0xa]          ;2253
002534  e1800801          ORR      r0,r0,r1,LSL #16      ;2253
002538  e5d81009          LDRB     r1,[r8,#9]            ;2253
00253c  e1800401          ORR      r0,r0,r1,LSL #8       ;2253
002540  e5d81008          LDRB     r1,[r8,#8]            ;2253
002544  e1800001          ORR      r0,r0,r1              ;2253
002548  ea000000          B        |L1.9552|
                  |L1.9548|
00254c  e3a00000          MOV      r0,#0                 ;2253
                  |L1.9552|
002550  e28d1008          ADD      r1,sp,#8              ;2253
002554  e7810106          STR      r0,[r1,r6,LSL #2]     ;2253
002558  e2866001          ADD      r6,r6,#1              ;2251
                  |L1.9564|
00255c  e3560004          CMP      r6,#4                 ;2251
002560  3affffea          BCC      |L1.9488|
002564  e3a06000          MOV      r6,#0                 ;2255
002568  e3560000          CMP      r6,#0                 ;2256
00256c  0a000000          BEQ      |L1.9588|
002570  e2466001          SUB      r6,r6,#1              ;2256
                  |L1.9588|
002574  e1a00000          MOV      r0,r0                 ;2257
                  |L1.9592|
002578  e28d0008          ADD      r0,sp,#8              ;2258
00257c  e7907106          LDR      r7,[r0,r6,LSL #2]     ;2258
002580  e3570000          CMP      r7,#0                 ;2259
002584  0a000003          BEQ      |L1.9624|
002588  e1a01007          MOV      r1,r7                 ;2259
00258c  e1a00004          MOV      r0,r4                 ;2259
002590  ebfffffe          BL       check_fs
002594  ea000000          B        |L1.9628|
                  |L1.9624|
002598  e3a00002          MOV      r0,#2                 ;2259
                  |L1.9628|
00259c  e1a05000          MOV      r5,r0                 ;2259
0025a0  e3550000          CMP      r5,#0                 ;2260
0025a4  0a000003          BEQ      |L1.9656|
0025a8  e2860001          ADD      r0,r6,#1              ;2260
0025ac  e1a06000          MOV      r6,r0                 ;2260
0025b0  e3500004          CMP      r0,#4                 ;2260
0025b4  3affffef          BCC      |L1.9592|
                  |L1.9656|
0025b8  e3550003          CMP      r5,#3                 ;2262
0025bc  1a000001          BNE      |L1.9672|
0025c0  e3a00001          MOV      r0,#1                 ;2262
0025c4  eaffff83          B        |L1.9176|
                  |L1.9672|
0025c8  e3550000          CMP      r5,#0                 ;2263
0025cc  0a000001          BEQ      |L1.9688|
0025d0  e3a0000d          MOV      r0,#0xd               ;2263
0025d4  eaffff7f          B        |L1.9176|
                  |L1.9688|
0025d8  e5d40043          LDRB     r0,[r4,#0x43]         ;2267
0025dc  e5d41044          LDRB     r1,[r4,#0x44]         ;2267
0025e0  e1800401          ORR      r0,r0,r1,LSL #8       ;2267
0025e4  e1d410ba          LDRH     r1,[r4,#0xa]          ;2267
0025e8  e1500001          CMP      r0,r1                 ;2267
0025ec  0a000001          BEQ      |L1.9720|
0025f0  e3a0000d          MOV      r0,#0xd               ;2268
0025f4  eaffff77          B        |L1.9176|
                  |L1.9720|
0025f8  e5d4004e          LDRB     r0,[r4,#0x4e]         ;2270
0025fc  e5d4104f          LDRB     r1,[r4,#0x4f]         ;2270
002600  e180a401          ORR      r10,r0,r1,LSL #8      ;2270
002604  e35a0000          CMP      r10,#0                ;2271
002608  1a000007          BNE      |L1.9772|
00260c  e5d4005f          LDRB     r0,[r4,#0x5f]         ;2271
002610  e1a00c00          LSL      r0,r0,#24             ;2271
002614  e5d4105e          LDRB     r1,[r4,#0x5e]         ;2271
002618  e1800801          ORR      r0,r0,r1,LSL #16      ;2271
00261c  e5d4105d          LDRB     r1,[r4,#0x5d]         ;2271
002620  e1800401          ORR      r0,r0,r1,LSL #8       ;2271
002624  e5d4105c          LDRB     r1,[r4,#0x5c]         ;2271
002628  e180a001          ORR      r10,r0,r1             ;2271
                  |L1.9772|
00262c  e584a020          STR      r10,[r4,#0x20]        ;2272
002630  e5d40048          LDRB     r0,[r4,#0x48]         ;2274
002634  e5c40003          STRB     r0,[r4,#3]            ;2274
002638  e5d40003          LDRB     r0,[r4,#3]            ;2275
00263c  e3500001          CMP      r0,#1                 ;2275
002640  0a000004          BEQ      |L1.9816|
002644  e5d40003          LDRB     r0,[r4,#3]            ;2275
002648  e3500002          CMP      r0,#2                 ;2275
00264c  0a000001          BEQ      |L1.9816|
002650  e3a0000d          MOV      r0,#0xd               ;2276
002654  eaffff5f          B        |L1.9176|
                  |L1.9816|
002658  e5d40003          LDRB     r0,[r4,#3]            ;2277
00265c  e00a0a90          MUL      r10,r0,r10            ;2277
002660  e5d40045          LDRB     r0,[r4,#0x45]         ;2279
002664  e5c40002          STRB     r0,[r4,#2]            ;2279
002668  e5d40002          LDRB     r0,[r4,#2]            ;2280
00266c  e3500000          CMP      r0,#0                 ;2280
002670  0a000003          BEQ      |L1.9860|
002674  e5d40002          LDRB     r0,[r4,#2]            ;2280
002678  e2401001          SUB      r1,r0,#1              ;2280
00267c  e1100001          TST      r0,r1                 ;2280
002680  0a000001          BEQ      |L1.9868|
                  |L1.9860|
002684  e3a0000d          MOV      r0,#0xd               ;2281
002688  eaffff52          B        |L1.9176|
                  |L1.9868|
00268c  e5d40049          LDRB     r0,[r4,#0x49]         ;2283
002690  e5d4104a          LDRB     r1,[r4,#0x4a]         ;2283
002694  e1800401          ORR      r0,r0,r1,LSL #8       ;2283
002698  e1c400b8          STRH     r0,[r4,#8]            ;2283
00269c  e1d400ba          LDRH     r0,[r4,#0xa]          ;2284
0026a0  e58d0000          STR      r0,[sp,#0]            ;2284
0026a4  e1a03fc0          ASR      r3,r0,#31             ;2284
0026a8  e0802da3          ADD      r2,r0,r3,LSR #27      ;2284
0026ac  e1a012c2          ASR      r1,r2,#5              ;2284
0026b0  e1d400b8          LDRH     r0,[r4,#8]            ;2284
0026b4  ebfffffe          BL       __aeabi_idivmod
0026b8  e3510000          CMP      r1,#0                 ;2284
0026bc  0a000001          BEQ      |L1.9928|
0026c0  e3a0000d          MOV      r0,#0xd               ;2285
0026c4  eaffff43          B        |L1.9176|
                  |L1.9928|
0026c8  e5d4004b          LDRB     r0,[r4,#0x4b]         ;2287
0026cc  e5d4104c          LDRB     r1,[r4,#0x4c]         ;2287
0026d0  e1800401          ORR      r0,r0,r1,LSL #8       ;2287
0026d4  e58d0020          STR      r0,[sp,#0x20]         ;2287
0026d8  e59d0020          LDR      r0,[sp,#0x20]         ;2288
0026dc  e3500000          CMP      r0,#0                 ;2288
0026e0  1a000008          BNE      |L1.9992|
0026e4  e5d4005b          LDRB     r0,[r4,#0x5b]         ;2288
0026e8  e1a00c00          LSL      r0,r0,#24             ;2288
0026ec  e5d4105a          LDRB     r1,[r4,#0x5a]         ;2288
0026f0  e1800801          ORR      r0,r0,r1,LSL #16      ;2288
0026f4  e5d41059          LDRB     r1,[r4,#0x59]         ;2288
0026f8  e1800401          ORR      r0,r0,r1,LSL #8       ;2288
0026fc  e5d41058          LDRB     r1,[r4,#0x58]         ;2288
002700  e1800001          ORR      r0,r0,r1              ;2288
002704  e58d0020          STR      r0,[sp,#0x20]         ;2288
                  |L1.9992|
002708  e5d40046          LDRB     r0,[r4,#0x46]         ;2290
00270c  e5d41047          LDRB     r1,[r4,#0x47]         ;2290
002710  e1800401          ORR      r0,r0,r1,LSL #8       ;2290
002714  e58d0004          STR      r0,[sp,#4]            ;2290
002718  e59d0004          LDR      r0,[sp,#4]            ;2291
00271c  e3500000          CMP      r0,#0                 ;2291
002720  1a000001          BNE      |L1.10028|
002724  e3a0000d          MOV      r0,#0xd               ;2291
002728  eaffff2a          B        |L1.9176|
                  |L1.10028|
00272c  e1d400ba          LDRH     r0,[r4,#0xa]          ;2294
002730  e58d0000          STR      r0,[sp,#0]            ;2294
002734  e1a03fc0          ASR      r3,r0,#31             ;2294
002738  e0802da3          ADD      r2,r0,r3,LSR #27      ;2294
00273c  e1a012c2          ASR      r1,r2,#5              ;2294
002740  e1d400b8          LDRH     r0,[r4,#8]            ;2294
002744  ebfffffe          BL       __aeabi_idivmod
002748  e59d1004          LDR      r1,[sp,#4]            ;2294
00274c  e081100a          ADD      r1,r1,r10             ;2294
002750  e0800001          ADD      r0,r0,r1              ;2294
002754  e58d001c          STR      r0,[sp,#0x1c]         ;2294
002758  e59d001c          LDR      r0,[sp,#0x1c]         ;2295
00275c  e59d1020          LDR      r1,[sp,#0x20]         ;2295
002760  e1510000          CMP      r1,r0                 ;2295
002764  2a000001          BCS      |L1.10096|
002768  e3a0000d          MOV      r0,#0xd               ;2295
00276c  eaffff19          B        |L1.9176|
                  |L1.10096|
002770  e5d41002          LDRB     r1,[r4,#2]            ;2296
002774  e59d2020          LDR      r2,[sp,#0x20]         ;2296
002778  e59d301c          LDR      r3,[sp,#0x1c]         ;2296
00277c  e0420003          SUB      r0,r2,r3              ;2296
002780  ebfffffe          BL       __aeabi_uidivmod
002784  e1a0b000          MOV      r11,r0                ;2296
002788  e35b0000          CMP      r11,#0                ;2297
00278c  1a000001          BNE      |L1.10136|
002790  e3a0000d          MOV      r0,#0xd               ;2297
002794  eaffff0f          B        |L1.9176|
                  |L1.10136|
002798  e3a05001          MOV      r5,#1                 ;2298
00279c  e59f067c          LDR      r0,|L1.11808|
0027a0  e15b0000          CMP      r11,r0                ;2299
0027a4  3a000000          BCC      |L1.10156|
0027a8  e3a05002          MOV      r5,#2                 ;2299
                  |L1.10156|
0027ac  e59f0670          LDR      r0,|L1.11812|
0027b0  e15b0000          CMP      r11,r0                ;2300
0027b4  3a000000          BCC      |L1.10172|
0027b8  e3a05003          MOV      r5,#3                 ;2300
                  |L1.10172|
0027bc  e28b0002          ADD      r0,r11,#2             ;2303
0027c0  e584001c          STR      r0,[r4,#0x1c]         ;2303
0027c4  e5847024          STR      r7,[r4,#0x24]         ;2304
0027c8  e59d0004          LDR      r0,[sp,#4]            ;2305
0027cc  e0800007          ADD      r0,r0,r7              ;2305
0027d0  e5840028          STR      r0,[r4,#0x28]         ;2305
0027d4  e59d001c          LDR      r0,[sp,#0x1c]         ;2306
0027d8  e0800007          ADD      r0,r0,r7              ;2306
0027dc  e5840030          STR      r0,[r4,#0x30]         ;2306
0027e0  e3550003          CMP      r5,#3                 ;2307
0027e4  1a000011          BNE      |L1.10288|
0027e8  e1d400b8          LDRH     r0,[r4,#8]            ;2308
0027ec  e3500000          CMP      r0,#0                 ;2308
0027f0  0a000001          BEQ      |L1.10236|
0027f4  e3a0000d          MOV      r0,#0xd               ;2308
0027f8  eafffef6          B        |L1.9176|
                  |L1.10236|
0027fc  e5d40067          LDRB     r0,[r4,#0x67]         ;2309
002800  e1a00c00          LSL      r0,r0,#24             ;2309
002804  e5d41066          LDRB     r1,[r4,#0x66]         ;2309
002808  e1800801          ORR      r0,r0,r1,LSL #16      ;2309
00280c  e5d41065          LDRB     r1,[r4,#0x65]         ;2309
002810  e1800401          ORR      r0,r0,r1,LSL #8       ;2309
002814  e5d41064          LDRB     r1,[r4,#0x64]         ;2309
002818  e1800001          ORR      r0,r0,r1              ;2309
00281c  e584002c          STR      r0,[r4,#0x2c]         ;2309
002820  e594001c          LDR      r0,[r4,#0x1c]         ;2310
002824  e1a00100          LSL      r0,r0,#2              ;2310
002828  e58d0018          STR      r0,[sp,#0x18]         ;2310
00282c  ea000012          B        |L1.10364|
                  |L1.10288|
002830  e1d400b8          LDRH     r0,[r4,#8]            ;2312
002834  e3500000          CMP      r0,#0                 ;2312
002838  1a000001          BNE      |L1.10308|
00283c  e3a0000d          MOV      r0,#0xd               ;2312
002840  eafffee4          B        |L1.9176|
                  |L1.10308|
002844  e5940028          LDR      r0,[r4,#0x28]         ;2313
002848  e080000a          ADD      r0,r0,r10             ;2313
00284c  e584002c          STR      r0,[r4,#0x2c]         ;2313
002850  e3550002          CMP      r5,#2                 ;2314
002854  1a000002          BNE      |L1.10340|
002858  e594001c          LDR      r0,[r4,#0x1c]         ;2315
00285c  e1a00080          LSL      r0,r0,#1              ;2315
002860  ea000004          B        |L1.10360|
                  |L1.10340|
002864  e5d4001c          LDRB     r0,[r4,#0x1c]         ;2315
002868  e2000001          AND      r0,r0,#1              ;2315
00286c  e594101c          LDR      r1,[r4,#0x1c]         ;2315
002870  e0811081          ADD      r1,r1,r1,LSL #1       ;2315
002874  e08000a1          ADD      r0,r0,r1,LSR #1       ;2315
                  |L1.10360|
002878  e58d0018          STR      r0,[sp,#0x18]         ;2315
                  |L1.10364|
00287c  e1d410ba          LDRH     r1,[r4,#0xa]          ;2317
002880  e2413001          SUB      r3,r1,#1              ;2317
002884  e59d2018          LDR      r2,[sp,#0x18]         ;2317
002888  e0830002          ADD      r0,r3,r2              ;2317
00288c  ebfffffe          BL       __aeabi_uidivmod
002890  e5941020          LDR      r1,[r4,#0x20]         ;2317
002894  e1500001          CMP      r0,r1                 ;2317
002898  9a000001          BLS      |L1.10404|
00289c  e3a0000d          MOV      r0,#0xd               ;2318
0028a0  eafffecc          B        |L1.9176|
                  |L1.10404|
0028a4  e3e00000          MVN      r0,#0                 ;2322
0028a8  e5840014          STR      r0,[r4,#0x14]         ;2322
0028ac  e5840010          STR      r0,[r4,#0x10]         ;2322
0028b0  e3a00080          MOV      r0,#0x80              ;2325
0028b4  e5c40005          STRB     r0,[r4,#5]            ;2325
0028b8  e3550003          CMP      r5,#3                 ;2327
0028bc  1a000039          BNE      |L1.10664|
0028c0  e5d40068          LDRB     r0,[r4,#0x68]         ;2328
0028c4  e5d41069          LDRB     r1,[r4,#0x69]         ;2328
0028c8  e1800401          ORR      r0,r0,r1,LSL #8       ;2328
0028cc  e3500001          CMP      r0,#1                 ;2328
0028d0  1a000034          BNE      |L1.10664|
0028d4  e2871001          ADD      r1,r7,#1              ;2329
0028d8  e1a00004          MOV      r0,r4                 ;2329
0028dc  ebfffffe          BL       move_window
0028e0  e3500000          CMP      r0,#0                 ;2329
0028e4  1a00002f          BNE      |L1.10664|
0028e8  e3a00000          MOV      r0,#0                 ;2331
0028ec  e5c40005          STRB     r0,[r4,#5]            ;2331
0028f0  e5d40236          LDRB     r0,[r4,#0x236]        ;2332
0028f4  e5d41237          LDRB     r1,[r4,#0x237]        ;2332
0028f8  e1800401          ORR      r0,r0,r1,LSL #8       ;2332
0028fc  e2401caa          SUB      r1,r0,#0xaa00         ;2332
002900  e2511055          SUBS     r1,r1,#0x55           ;2332
002904  1a000027          BNE      |L1.10664|
002908  e5d4003b          LDRB     r0,[r4,#0x3b]         ;2333
00290c  e1a00c00          LSL      r0,r0,#24             ;2333
002910  e5d4103a          LDRB     r1,[r4,#0x3a]         ;2333
002914  e1800801          ORR      r0,r0,r1,LSL #16      ;2333
002918  e5d41039          LDRB     r1,[r4,#0x39]         ;2333
00291c  e1800401          ORR      r0,r0,r1,LSL #8       ;2333
002920  e5d41038          LDRB     r1,[r4,#0x38]         ;2333
002924  e1800001          ORR      r0,r0,r1              ;2333
002928  e59f14f8          LDR      r1,|L1.11816|
00292c  e1500001          CMP      r0,r1                 ;2333
002930  1a00001c          BNE      |L1.10664|
002934  e5d4021f          LDRB     r0,[r4,#0x21f]        ;2334
002938  e1a00c00          LSL      r0,r0,#24             ;2334
00293c  e5d4121e          LDRB     r1,[r4,#0x21e]        ;2334
002940  e1800801          ORR      r0,r0,r1,LSL #16      ;2334
002944  e5d4121d          LDRB     r1,[r4,#0x21d]        ;2334
002948  e1800401          ORR      r0,r0,r1,LSL #8       ;2334
00294c  e5d4121c          LDRB     r1,[r4,#0x21c]        ;2334
002950  e1800001          ORR      r0,r0,r1              ;2334
002954  e59f14d0          LDR      r1,|L1.11820|
002958  e1500001          CMP      r0,r1                 ;2334
00295c  1a000011          BNE      |L1.10664|
002960  e5d40223          LDRB     r0,[r4,#0x223]        ;2337
002964  e1a00c00          LSL      r0,r0,#24             ;2337
002968  e5d41222          LDRB     r1,[r4,#0x222]        ;2337
00296c  e1800801          ORR      r0,r0,r1,LSL #16      ;2337
002970  e5d41221          LDRB     r1,[r4,#0x221]        ;2337
002974  e1800401          ORR      r0,r0,r1,LSL #8       ;2337
002978  e5d41220          LDRB     r1,[r4,#0x220]        ;2337
00297c  e1800001          ORR      r0,r0,r1              ;2337
002980  e5840014          STR      r0,[r4,#0x14]         ;2337
002984  e5d40227          LDRB     r0,[r4,#0x227]        ;2340
002988  e1a00c00          LSL      r0,r0,#24             ;2340
00298c  e5d41226          LDRB     r1,[r4,#0x226]        ;2340
002990  e1800801          ORR      r0,r0,r1,LSL #16      ;2340
002994  e5d41225          LDRB     r1,[r4,#0x225]        ;2340
002998  e1800401          ORR      r0,r0,r1,LSL #8       ;2340
00299c  e5d41224          LDRB     r1,[r4,#0x224]        ;2340
0029a0  e1800001          ORR      r0,r0,r1              ;2340
0029a4  e5840010          STR      r0,[r4,#0x10]         ;2340
                  |L1.10664|
0029a8  e5c45000          STRB     r5,[r4,#0]            ;2346
0029ac  e59f047c          LDR      r0,|L1.11824|
0029b0  e1d000b0          LDRH     r0,[r0,#0]            ;2347  ; Fsid
0029b4  e2800001          ADD      r0,r0,#1              ;2347
0029b8  e3c00801          BIC      r0,r0,#0x10000        ;2347
0029bc  e59f146c          LDR      r1,|L1.11824|
0029c0  e1c100b0          STRH     r0,[r1,#0]            ;2347  ; Fsid
0029c4  e1c400b6          STRH     r0,[r4,#6]            ;2347
0029c8  e3a00000          MOV      r0,#0                 ;2349
0029cc  e5840018          STR      r0,[r4,#0x18]         ;2349
0029d0  e1a00000          MOV      r0,r0                 ;2355
0029d4  eafffe7f          B        |L1.9176|
;;;2357   
                          ENDP

                  validate PROC
;;;2365   static
;;;2366   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
0029d8  e92d4070          PUSH     {r4-r6,lr}
;;;2367   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2368   )
;;;2369   {
0029dc  e1a05000          MOV      r5,r0
;;;2370   	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
0029e0  e1a04005          MOV      r4,r5
;;;2371   
;;;2372   
;;;2373   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
0029e4  e3540000          CMP      r4,#0
0029e8  0a00000b          BEQ      |L1.10780|
0029ec  e5940000          LDR      r0,[r4,#0]
0029f0  e3500000          CMP      r0,#0
0029f4  0a000008          BEQ      |L1.10780|
0029f8  e5940000          LDR      r0,[r4,#0]
0029fc  e5d00000          LDRB     r0,[r0,#0]
002a00  e3500000          CMP      r0,#0
002a04  0a000004          BEQ      |L1.10780|
002a08  e5940000          LDR      r0,[r4,#0]
002a0c  e1d000b6          LDRH     r0,[r0,#6]
002a10  e1d410b4          LDRH     r1,[r4,#4]
002a14  e1500001          CMP      r0,r1
002a18  0a000001          BEQ      |L1.10788|
                  |L1.10780|
;;;2374   		return FR_INVALID_OBJECT;
002a1c  e3a00009          MOV      r0,#9
                  |L1.10784|
;;;2375   
;;;2376   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2377   
;;;2378   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2379   		return FR_NOT_READY;
;;;2380   
;;;2381   	return FR_OK;
;;;2382   }
002a20  e8bd8070          POP      {r4-r6,pc}
                  |L1.10788|
002a24  e5940000          LDR      r0,[r4,#0]            ;2376
002a28  ebfffffe          BL       lock_fs
002a2c  e3500000          CMP      r0,#0                 ;2376
002a30  1a000001          BNE      |L1.10812|
002a34  e3a0000f          MOV      r0,#0xf               ;2376
002a38  eafffff8          B        |L1.10784|
                  |L1.10812|
002a3c  e5941000          LDR      r1,[r4,#0]            ;2378
002a40  e5d10001          LDRB     r0,[r1,#1]            ;2378
002a44  ebfffffe          BL       disk_status
002a48  e3100001          TST      r0,#1                 ;2378
002a4c  0a000001          BEQ      |L1.10840|
002a50  e3a00003          MOV      r0,#3                 ;2379
002a54  eafffff1          B        |L1.10784|
                  |L1.10840|
002a58  e3a00000          MOV      r0,#0                 ;2381
002a5c  eaffffef          B        |L1.10784|
;;;2383   
                          ENDP

                  ff_cre_syncobj PROC
;;;4726   #if(1)
;;;4727   int ff_cre_syncobj (BYTE vol, _SYNC_t* sobj)	/* Create a sync object */
002a60  e92d4070          PUSH     {r4-r6,lr}
;;;4728   {
002a64  e1a06000          MOV      r6,r0
002a68  e1a04001          MOV      r4,r1
;;;4729   	int ret;
;;;4730       *sobj = xSemaphoreCreateMutex();	/* FreeRTOS */
002a6c  e3a00001          MOV      r0,#1
002a70  ebfffffe          BL       xQueueCreateMutex
002a74  e5840000          STR      r0,[r4,#0]
;;;4731   	ret = (int)(*sobj != NULL);
002a78  e5940000          LDR      r0,[r4,#0]
002a7c  e3500000          CMP      r0,#0
002a80  0a000001          BEQ      |L1.10892|
002a84  e3a00001          MOV      r0,#1
002a88  ea000000          B        |L1.10896|
                  |L1.10892|
002a8c  e3a00000          MOV      r0,#0
                  |L1.10896|
002a90  e1a05000          MOV      r5,r0
;;;4732   	return ret;
002a94  e1a00005          MOV      r0,r5
;;;4733   }
002a98  e8bd8070          POP      {r4-r6,pc}
;;;4734   int ff_req_grant (_SYNC_t sobj)				/* Lock sync object */
                          ENDP

                  ff_del_syncobj PROC
;;;4743   }
;;;4744   int ff_del_syncobj (_SYNC_t sobj)				/* Delete a sync object */
002a9c  e92d4010          PUSH     {r4,lr}
;;;4745   {
002aa0  e1a04000          MOV      r4,r0
;;;4746   	vSemaphoreDelete(sobj);		/* FreeRTOS */
002aa4  e1a00004          MOV      r0,r4
002aa8  ebfffffe          BL       vQueueDelete
;;;4747   	return 1;
002aac  e3a00001          MOV      r0,#1
;;;4748   }
002ab0  e8bd8010          POP      {r4,pc}
;;;4749   #else
                          ENDP

                  f_mount PROC
;;;2398   
;;;2399   FRESULT f_mount (
002ab4  e92d40f7          PUSH     {r0-r2,r4-r7,lr}
;;;2400   	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
;;;2401   	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
;;;2402   	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
;;;2403   )
;;;2404   {
002ab8  e24dd008          SUB      sp,sp,#8
002abc  e1a06002          MOV      r6,r2
;;;2405   	FATFS *cfs;
;;;2406   	int vol;
;;;2407   	FRESULT res;
;;;2408   	const TCHAR *rp = path;
002ac0  e59d000c          LDR      r0,[sp,#0xc]
002ac4  e58d0004          STR      r0,[sp,#4]
;;;2409   
;;;2410   
;;;2411   	vol = get_ldnumber(&rp);
002ac8  e28d0004          ADD      r0,sp,#4
002acc  ebfffffe          BL       get_ldnumber
002ad0  e1a05000          MOV      r5,r0
;;;2412   	if (vol < 0) return FR_INVALID_DRIVE;
002ad4  e3550000          CMP      r5,#0
002ad8  aa000002          BGE      |L1.10984|
002adc  e3a0000b          MOV      r0,#0xb
                  |L1.10976|
002ae0  e28dd014          ADD      sp,sp,#0x14
;;;2413   	cfs = FatFs[vol];					/* Pointer to fs object */
;;;2414   
;;;2415   	if (cfs) {
;;;2416   #if _FS_LOCK
;;;2417   		clear_lock(cfs);
;;;2418   #endif
;;;2419   #if _FS_REENTRANT						/* Discard sync object of the current volume */
;;;2420   		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
;;;2421   #endif
;;;2422   		cfs->fs_type = 0;				/* Clear old fs object */
;;;2423   	}
;;;2424   
;;;2425   	if (fs) {
;;;2426   		fs->fs_type = 0;				/* Clear new fs object */
;;;2427   #if _FS_REENTRANT						/* Create sync object for the new volume */
;;;2428   		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
;;;2429   #endif
;;;2430   	}
;;;2431   	FatFs[vol] = fs;					/* Register new fs object */
;;;2432   
;;;2433       
;;;2434   	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
;;;2435   
;;;2436   	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
;;;2437   	LEAVE_FF(fs, res);
;;;2438   }
002ae4  e8bd80f0          POP      {r4-r7,pc}
                  |L1.10984|
002ae8  e59f032c          LDR      r0,|L1.11804|
002aec  e7904105          LDR      r4,[r0,r5,LSL #2]     ;2413
002af0  e3540000          CMP      r4,#0                 ;2415
002af4  0a000007          BEQ      |L1.11032|
002af8  e594000c          LDR      r0,[r4,#0xc]          ;2420
002afc  ebfffffe          BL       ff_del_syncobj
002b00  e3500000          CMP      r0,#0                 ;2420
002b04  1a000001          BNE      |L1.11024|
002b08  e3a00002          MOV      r0,#2                 ;2420
002b0c  eafffff3          B        |L1.10976|
                  |L1.11024|
002b10  e3a00000          MOV      r0,#0                 ;2422
002b14  e5c40000          STRB     r0,[r4,#0]            ;2422
                  |L1.11032|
002b18  e59d0008          LDR      r0,[sp,#8]            ;2425
002b1c  e3500000          CMP      r0,#0                 ;2425
002b20  0a00000a          BEQ      |L1.11088|
002b24  e3a00000          MOV      r0,#0                 ;2426
002b28  e59d1008          LDR      r1,[sp,#8]            ;2426
002b2c  e5c10000          STRB     r0,[r1,#0]            ;2426
002b30  e20500ff          AND      r0,r5,#0xff           ;2428
002b34  e59d1008          LDR      r1,[sp,#8]            ;2428
002b38  e281100c          ADD      r1,r1,#0xc            ;2428
002b3c  ebfffffe          BL       ff_cre_syncobj
002b40  e3500000          CMP      r0,#0                 ;2428
002b44  1a000001          BNE      |L1.11088|
002b48  e3a00002          MOV      r0,#2                 ;2428
002b4c  eaffffe3          B        |L1.10976|
                  |L1.11088|
002b50  e59f12c4          LDR      r1,|L1.11804|
002b54  e59d0008          LDR      r0,[sp,#8]            ;2431
002b58  e7810105          STR      r0,[r1,r5,LSL #2]     ;2431
002b5c  e59d0008          LDR      r0,[sp,#8]            ;2434
002b60  e3500000          CMP      r0,#0                 ;2434
002b64  0a000001          BEQ      |L1.11120|
002b68  e3560001          CMP      r6,#1                 ;2434
002b6c  0a000001          BEQ      |L1.11128|
                  |L1.11120|
002b70  e3a00000          MOV      r0,#0                 ;2434
002b74  eaffffd9          B        |L1.10976|
                  |L1.11128|
002b78  e3a02000          MOV      r2,#0                 ;2436
002b7c  e28d100c          ADD      r1,sp,#0xc            ;2436
002b80  e28d0008          ADD      r0,sp,#8              ;2436
002b84  ebfffffe          BL       find_volume
002b88  e1a07000          MOV      r7,r0                 ;2436
002b8c  e1a01007          MOV      r1,r7                 ;2437
002b90  e59d0008          LDR      r0,[sp,#8]            ;2437
002b94  ebfffffe          BL       unlock_fs
002b98  e1a00007          MOV      r0,r7                 ;2437
002b9c  eaffffcf          B        |L1.10976|
;;;2439   
                          ENDP

                  f_open PROC
;;;2446   
;;;2447   FRESULT f_open (
002ba0  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2448   	FIL* fp,			/* Pointer to the blank file object */
;;;2449   	const TCHAR* path,	/* Pointer to the file name */
;;;2450   	BYTE mode			/* Access mode and file open mode flags */
;;;2451   )
;;;2452   {
002ba4  e24ddf8e          SUB      sp,sp,#0x238
002ba8  e1a05000          MOV      r5,r0
002bac  e1a07002          MOV      r7,r2
;;;2453   	FRESULT res;
;;;2454   	DIR dj;
;;;2455   	BYTE *dir;
;;;2456   	DEFINE_NAMEBUF;
;;;2457       
;;;2458       //terninalPrintf("res = %08x \r\n",&res);
;;;2459       //terninalPrintf("dj = %08x \r\n",&dj);
;;;2460       
;;;2461   #if !_FS_READONLY
;;;2462   	DWORD dw, cl;
;;;2463   #endif
;;;2464   
;;;2465   
;;;2466   	if (!fp) return FR_INVALID_OBJECT;
002bb0  e3550000          CMP      r5,#0
002bb4  1a000002          BNE      |L1.11204|
002bb8  e3a00009          MOV      r0,#9
                  |L1.11196|
002bbc  e28ddf91          ADD      sp,sp,#0x244
;;;2467   	fp->fs = 0;			// Clear file object 
;;;2468       //sysprintf("\r\nf_open : [%s]\n\r", path);
;;;2469   	// Get logical drive number 
;;;2470   #if !_FS_READONLY
;;;2471   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2472   	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
;;;2473   #else
;;;2474   	mode &= FA_READ;
;;;2475   	res = find_volume(&dj.fs, &path, 0);
;;;2476   #endif
;;;2477   	if (res == FR_OK) {
;;;2478   		INIT_BUF(dj);
;;;2479   		res = follow_path(&dj, path);	// Follow the file path 
;;;2480   		dir = dj.dir;
;;;2481   #if !_FS_READONLY	// R/W configuration 
;;;2482   		if (res == FR_OK) {
;;;2483   			if (!dir)	// Default directory itself 
;;;2484               {
;;;2485                   sysprintf("FR_INVALID_NAME : 1\n\r");
;;;2486   				res = FR_INVALID_NAME;
;;;2487               }
;;;2488   #if _FS_LOCK
;;;2489   			else
;;;2490               {
;;;2491   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2492               }
;;;2493   #endif
;;;2494   		}
;;;2495   		// Create or Open a file 
;;;2496   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2497   			if (res != FR_OK) {					// No file, create new 
;;;2498   				if (res == FR_NO_FILE)			// There is no file to open, create a new entry 
;;;2499   #if _FS_LOCK
;;;2500   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2501   #else
;;;2502   					res = dir_register(&dj);
;;;2503   #endif
;;;2504   				mode |= FA_CREATE_ALWAYS;		// File is created 
;;;2505   				dir = dj.dir;					// New entry 
;;;2506   			}
;;;2507   			else {								// Any object is already existing 
;;;2508   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	// Cannot overwrite it (R/O or DIR) 
;;;2509   					res = FR_DENIED;
;;;2510   				} else {
;;;2511   					if (mode & FA_CREATE_NEW)	// Cannot create as new file 
;;;2512   						res = FR_EXIST;
;;;2513   				}
;;;2514   			}
;;;2515   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	// Truncate it if overwrite mode 
;;;2516   				dw = GET_FATTIME();				// Created time 
;;;2517   				ST_DWORD(dir + DIR_CrtTime, dw);
;;;2518   				dir[DIR_Attr] = 0;				// Reset attribute 
;;;2519   				ST_DWORD(dir + DIR_FileSize, 0);// size = 0 
;;;2520   				cl = ld_clust(dj.fs, dir);		// Get start cluster 
;;;2521   				st_clust(dir, 0);				// cluster = 0 
;;;2522   				dj.fs->wflag = 1;
;;;2523   				if (cl) {						// Remove the cluster chain if exist 
;;;2524   					dw = dj.fs->winsect;
;;;2525   					res = remove_chain(dj.fs, cl);
;;;2526   					if (res == FR_OK) {
;;;2527   						dj.fs->last_clust = cl - 1;	// Reuse the cluster hole 
;;;2528   						res = move_window(dj.fs, dw);
;;;2529   					}
;;;2530   				}
;;;2531   			}
;;;2532   		}
;;;2533   		else {	// Open an existing file 
;;;2534   			if (res == FR_OK) {					// Follow succeeded 
;;;2535   				if (dir[DIR_Attr] & AM_DIR) {	// It is a directory 
;;;2536   					res = FR_NO_FILE;
;;;2537   				} else {
;;;2538   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) // R/O violation 
;;;2539   						res = FR_DENIED;
;;;2540   				}
;;;2541   			}
;;;2542   		}
;;;2543   		if (res == FR_OK) {
;;;2544   			if (mode & FA_CREATE_ALWAYS)		// Set file change flag if created or overwritten 
;;;2545   				mode |= FA__WRITTEN;
;;;2546   			fp->dir_sect = dj.fs->winsect;		// Pointer to the directory entry 
;;;2547   			fp->dir_ptr = dir;
;;;2548   #if _FS_LOCK
;;;2549   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2550   			if (!fp->lockid) res = FR_INT_ERR;
;;;2551   #endif
;;;2552   		}
;;;2553   
;;;2554   #else				// R/O configuration 
;;;2555   		if (res == FR_OK) {					// Follow succeeded 
;;;2556   			dir = dj.dir;
;;;2557   			if (!dir) {						// Current directory itself 
;;;2558                   sysprintf("FR_INVALID_NAME : 2\n\r");
;;;2559   				res = FR_INVALID_NAME;
;;;2560   			} else {
;;;2561   				if (dir[DIR_Attr] & AM_DIR)	// It is a directory 
;;;2562   					res = FR_NO_FILE;
;;;2563   			}
;;;2564   		}
;;;2565   #endif
;;;2566   		FREE_BUF();
;;;2567   
;;;2568   		if (res == FR_OK) {
;;;2569   			fp->flag = mode;					// File access mode 
;;;2570   			fp->err = 0;						// Clear error flag 
;;;2571   			fp->sclust = ld_clust(dj.fs, dir);	// File start cluster 
;;;2572   			fp->fsize = LD_DWORD(dir + DIR_FileSize);	// File size 
;;;2573   			fp->fptr = 0;						// File pointer 
;;;2574   			fp->dsect = 0;
;;;2575   #if _USE_FASTSEEK
;;;2576   			fp->cltbl = 0;						// Normal seek mode 
;;;2577   #endif
;;;2578   			fp->fs = dj.fs;	 					// Validate file object 
;;;2579   			fp->id = fp->fs->id;
;;;2580   		}
;;;2581   	}
;;;2582   
;;;2583   	LEAVE_FF(dj.fs, res);
;;;2584       
;;;2585   }
002bc0  e8bd83f0          POP      {r4-r9,pc}
                  |L1.11204|
002bc4  e3a00000          MOV      r0,#0                 ;2467
002bc8  e5850000          STR      r0,[r5,#0]            ;2467
002bcc  e207701f          AND      r7,r7,#0x1f           ;2471
002bd0  e3c72001          BIC      r2,r7,#1              ;2472
002bd4  e28d1f8f          ADD      r1,sp,#0x23c          ;2472
002bd8  e28d0e21          ADD      r0,sp,#0x210          ;2472
002bdc  ebfffffe          BL       find_volume
002be0  e1a06000          MOV      r6,r0                 ;2472
002be4  e3560000          CMP      r6,#0                 ;2477
002be8  1a000084          BNE      |L1.11776|
002bec  e28d0f81          ADD      r0,sp,#0x204          ;2478
002bf0  e58d0228          STR      r0,[sp,#0x228]        ;2478
002bf4  e28d0004          ADD      r0,sp,#4              ;2478
002bf8  e58d022c          STR      r0,[sp,#0x22c]        ;2478
002bfc  e59d123c          LDR      r1,[sp,#0x23c]        ;2479
002c00  e28d0e21          ADD      r0,sp,#0x210          ;2479
002c04  ebfffffe          BL       follow_path
002c08  e1a06000          MOV      r6,r0                 ;2479
002c0c  e59d4224          LDR      r4,[sp,#0x224]        ;2480
002c10  e3560000          CMP      r6,#0                 ;2482
002c14  1a000004          BNE      |L1.11308|
002c18  e3540000          CMP      r4,#0                 ;2483
002c1c  1a000002          BNE      |L1.11308|
002c20  e28f0f83          ADR      r0,|L1.11828|
002c24  ebfffffe          BL       sysprintf
002c28  e3a06006          MOV      r6,#6                 ;2486
                  |L1.11308|
002c2c  e317001c          TST      r7,#0x1c              ;2496
002c30  0a000042          BEQ      |L1.11584|
002c34  e3560000          CMP      r6,#0                 ;2497
002c38  0a000007          BEQ      |L1.11356|
002c3c  e3560004          CMP      r6,#4                 ;2498
002c40  1a000002          BNE      |L1.11344|
002c44  e28d0e21          ADD      r0,sp,#0x210          ;2502
002c48  ebfffffe          BL       dir_register
002c4c  e1a06000          MOV      r6,r0                 ;2502
                  |L1.11344|
002c50  e3877008          ORR      r7,r7,#8              ;2504
002c54  e59d4224          LDR      r4,[sp,#0x224]        ;2505
002c58  ea000007          B        |L1.11388|
                  |L1.11356|
002c5c  e5d4000b          LDRB     r0,[r4,#0xb]          ;2508
002c60  e3100011          TST      r0,#0x11              ;2508
002c64  0a000001          BEQ      |L1.11376|
002c68  e3a06007          MOV      r6,#7                 ;2509
002c6c  ea000002          B        |L1.11388|
                  |L1.11376|
002c70  e3170004          TST      r7,#4                 ;2511
002c74  0a000000          BEQ      |L1.11388|
002c78  e3a06008          MOV      r6,#8                 ;2512
                  |L1.11388|
002c7c  e3560000          CMP      r6,#0                 ;2515
002c80  1a00003b          BNE      |L1.11636|
002c84  e3170008          TST      r7,#8                 ;2515
002c88  0a000039          BEQ      |L1.11636|
002c8c  ebfffffe          BL       get_fattime
002c90  e1a08000          MOV      r8,r0                 ;2516
002c94  e5c4800e          STRB     r8,[r4,#0xe]          ;2517
002c98  e1a00808          LSL      r0,r8,#16             ;2517
002c9c  e1a00c20          LSR      r0,r0,#24             ;2517
002ca0  e5c4000f          STRB     r0,[r4,#0xf]          ;2517
002ca4  e1a00408          LSL      r0,r8,#8              ;2517
002ca8  e1a00c20          LSR      r0,r0,#24             ;2517
002cac  e5c40010          STRB     r0,[r4,#0x10]         ;2517
002cb0  e1a00c28          LSR      r0,r8,#24             ;2517
002cb4  e5c40011          STRB     r0,[r4,#0x11]         ;2517
002cb8  e3a00000          MOV      r0,#0                 ;2518
002cbc  e5c4000b          STRB     r0,[r4,#0xb]          ;2518
002cc0  e5c4001c          STRB     r0,[r4,#0x1c]         ;2519
002cc4  e5c4001d          STRB     r0,[r4,#0x1d]         ;2519
002cc8  e5c4001e          STRB     r0,[r4,#0x1e]         ;2519
002ccc  e5c4001f          STRB     r0,[r4,#0x1f]         ;2519
002cd0  e1a01004          MOV      r1,r4                 ;2520
002cd4  e59d0210          LDR      r0,[sp,#0x210]        ;2520
002cd8  ebfffffe          BL       ld_clust
002cdc  e1a09000          MOV      r9,r0                 ;2520
002ce0  e3a01000          MOV      r1,#0                 ;2521
002ce4  e1a00004          MOV      r0,r4                 ;2521
002ce8  ebfffffe          BL       st_clust
002cec  e3a00001          MOV      r0,#1                 ;2522
002cf0  e59d1210          LDR      r1,[sp,#0x210]        ;2522
002cf4  e5c10004          STRB     r0,[r1,#4]            ;2522
002cf8  e3590000          CMP      r9,#0                 ;2523
002cfc  0a00001c          BEQ      |L1.11636|
002d00  e59d0210          LDR      r0,[sp,#0x210]        ;2524
002d04  e5908034          LDR      r8,[r0,#0x34]         ;2524
002d08  e1a01009          MOV      r1,r9                 ;2525
002d0c  e59d0210          LDR      r0,[sp,#0x210]        ;2525
002d10  ebfffffe          BL       remove_chain
002d14  e1a06000          MOV      r6,r0                 ;2525
002d18  e3560000          CMP      r6,#0                 ;2526
002d1c  1a000014          BNE      |L1.11636|
002d20  e2490001          SUB      r0,r9,#1              ;2527
002d24  e59d1210          LDR      r1,[sp,#0x210]        ;2527
002d28  e5810010          STR      r0,[r1,#0x10]         ;2527
002d2c  e1a01008          MOV      r1,r8                 ;2528
002d30  e59d0210          LDR      r0,[sp,#0x210]        ;2528
002d34  ebfffffe          BL       move_window
002d38  e1a06000          MOV      r6,r0                 ;2528
002d3c  ea00000c          B        |L1.11636|
                  |L1.11584|
002d40  e3560000          CMP      r6,#0                 ;2534
002d44  1a00000a          BNE      |L1.11636|
002d48  e5d4000b          LDRB     r0,[r4,#0xb]          ;2535
002d4c  e3100010          TST      r0,#0x10              ;2535
002d50  0a000001          BEQ      |L1.11612|
002d54  e3a06004          MOV      r6,#4                 ;2536
002d58  ea000005          B        |L1.11636|
                  |L1.11612|
002d5c  e3170002          TST      r7,#2                 ;2538
002d60  0a000003          BEQ      |L1.11636|
002d64  e5d4000b          LDRB     r0,[r4,#0xb]          ;2538
002d68  e3100001          TST      r0,#1                 ;2538
002d6c  0a000000          BEQ      |L1.11636|
002d70  e3a06007          MOV      r6,#7                 ;2539
                  |L1.11636|
002d74  e3560000          CMP      r6,#0                 ;2543
002d78  1a000006          BNE      |L1.11672|
002d7c  e3170008          TST      r7,#8                 ;2544
002d80  0a000000          BEQ      |L1.11656|
002d84  e3877020          ORR      r7,r7,#0x20           ;2545
                  |L1.11656|
002d88  e59d0210          LDR      r0,[sp,#0x210]        ;2546
002d8c  e5900034          LDR      r0,[r0,#0x34]         ;2546
002d90  e585001c          STR      r0,[r5,#0x1c]         ;2546
002d94  e5854020          STR      r4,[r5,#0x20]         ;2547
                  |L1.11672|
002d98  e3560000          CMP      r6,#0                 ;2568
002d9c  1a000017          BNE      |L1.11776|
002da0  e5c57006          STRB     r7,[r5,#6]            ;2569
002da4  e3a00000          MOV      r0,#0                 ;2570
002da8  e5c50007          STRB     r0,[r5,#7]            ;2570
002dac  e1a01004          MOV      r1,r4                 ;2571
002db0  e59d0210          LDR      r0,[sp,#0x210]        ;2571
002db4  ebfffffe          BL       ld_clust
002db8  e5850010          STR      r0,[r5,#0x10]         ;2571
002dbc  e5d4001f          LDRB     r0,[r4,#0x1f]         ;2572
002dc0  e1a00c00          LSL      r0,r0,#24             ;2572
002dc4  e5d4101e          LDRB     r1,[r4,#0x1e]         ;2572
002dc8  e1800801          ORR      r0,r0,r1,LSL #16      ;2572
002dcc  e5d4101d          LDRB     r1,[r4,#0x1d]         ;2572
002dd0  e1800401          ORR      r0,r0,r1,LSL #8       ;2572
002dd4  e5d4101c          LDRB     r1,[r4,#0x1c]         ;2572
002dd8  e1800001          ORR      r0,r0,r1              ;2572
002ddc  e585000c          STR      r0,[r5,#0xc]          ;2572
002de0  e3a00000          MOV      r0,#0                 ;2573
002de4  e5850008          STR      r0,[r5,#8]            ;2573
002de8  e5850018          STR      r0,[r5,#0x18]         ;2574
002dec  e59d0210          LDR      r0,[sp,#0x210]        ;2578
002df0  e5850000          STR      r0,[r5,#0]            ;2578
002df4  e5950000          LDR      r0,[r5,#0]            ;2579
002df8  e1d000b6          LDRH     r0,[r0,#6]            ;2579
002dfc  e1c500b4          STRH     r0,[r5,#4]            ;2579
                  |L1.11776|
002e00  e1a01006          MOV      r1,r6                 ;2583
002e04  e59d0210          LDR      r0,[sp,#0x210]        ;2583
002e08  ebfffffe          BL       unlock_fs
002e0c  e1a00006          MOV      r0,r6                 ;2583
002e10  eaffff69          B        |L1.11196|
                  |L1.11796|
                          DCD      CurrVol
                  |L1.11800|
                          DCD      0x00544146
                  |L1.11804|
                          DCD      FatFs
                  |L1.11808|
                          DCD      0x00000ff6
                  |L1.11812|
                          DCD      0x0000fff6
                  |L1.11816|
                          DCD      0x41615252
                  |L1.11820|
                          DCD      0x61417272
                  |L1.11824|
                          DCD      Fsid
                  |L1.11828|
002e34  46525f49          DCB      "FR_INVALID_NAME : 1\n\r",0
002e38  4e56414c
002e3c  49445f4e
002e40  414d4520
002e44  3a20310a
002e48  0d00    
002e4a  00                DCB      0
002e4b  00                DCB      0
                          ENDP

                  f_read PROC
;;;2593   
;;;2594   FRESULT f_read (
002e4c  e92d4fff          PUSH     {r0-r11,lr}
;;;2595   	FIL* fp, 		/* Pointer to the file object */
;;;2596   	void* buff,		/* Pointer to data buffer */
;;;2597   	UINT btr,		/* Number of bytes to read */
;;;2598   	UINT* br		/* Pointer to number of bytes read */
;;;2599   )
;;;2600   {
002e50  e24dd014          SUB      sp,sp,#0x14
002e54  e1a04000          MOV      r4,r0
002e58  e1a05002          MOV      r5,r2
002e5c  e1a0a003          MOV      r10,r3
;;;2601   	FRESULT res;
;;;2602   	DWORD clst, sect, remain;
;;;2603   	UINT rcnt, cc;
;;;2604   	BYTE csect, *rbuff = (BYTE*)buff;
002e60  e59db018          LDR      r11,[sp,#0x18]
;;;2605   
;;;2606   	*br = 0;	/* Clear read byte counter */
002e64  e3a00000          MOV      r0,#0
002e68  e58a0000          STR      r0,[r10,#0]
;;;2607   
;;;2608   	res = validate(fp);							/* Check validity */
002e6c  e1a00004          MOV      r0,r4
002e70  ebfffffe          BL       validate
002e74  e58d0010          STR      r0,[sp,#0x10]
;;;2609   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
002e78  e59d0010          LDR      r0,[sp,#0x10]
002e7c  e3500000          CMP      r0,#0
002e80  0a000005          BEQ      |L1.11932|
002e84  e5940000          LDR      r0,[r4,#0]
002e88  e59d1010          LDR      r1,[sp,#0x10]
002e8c  ebfffffe          BL       unlock_fs
002e90  e59d0010          LDR      r0,[sp,#0x10]
                  |L1.11924|
002e94  e28dd024          ADD      sp,sp,#0x24
;;;2610   	if (fp->err)								/* Check error */
;;;2611   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2612   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2613   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2614   	remain = fp->fsize - fp->fptr;
;;;2615   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2616   
;;;2617   	for ( ;  btr;								/* Repeat until all data read */
;;;2618   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2619   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2620   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2621   			if (!csect) {						/* On the cluster boundary? */
;;;2622   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2623   					clst = fp->sclust;			/* Follow from the origin */
;;;2624   				} else {						/* Middle or end of the file */
;;;2625   #if _USE_FASTSEEK
;;;2626   					if (fp->cltbl)
;;;2627   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2628   					else
;;;2629   #endif
;;;2630   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2631   				}
;;;2632   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2633   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2634   				fp->clust = clst;				/* Update current cluster */
;;;2635   			}
;;;2636   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2637   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2638   			sect += csect;
;;;2639   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2640   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2641   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2642   					cc = fp->fs->csize - csect;
;;;2643   				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
;;;2644   					ABORT(fp->fs, FR_DISK_ERR);
;;;2645   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2646   #if _FS_TINY
;;;2647   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2648   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2649   #else
;;;2650   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2651   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2652                  
;;;2653                       
;;;2654                   
;;;2655   #endif
;;;2656   #endif
;;;2657   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2658   				continue;
;;;2659   			}
;;;2660   #if !_FS_TINY
;;;2661   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2662   #if !_FS_READONLY
;;;2663   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2664   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2665   						ABORT(fp->fs, FR_DISK_ERR);
;;;2666   					fp->flag &= ~FA__DIRTY;
;;;2667   				}
;;;2668   #endif
;;;2669   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2670   					ABORT(fp->fs, FR_DISK_ERR);
;;;2671   			}
;;;2672   #endif
;;;2673   			fp->dsect = sect;
;;;2674   		}
;;;2675   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2676   		if (rcnt > btr) rcnt = btr;
;;;2677   #if _FS_TINY
;;;2678   		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
;;;2679   			ABORT(fp->fs, FR_DISK_ERR);
;;;2680   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2681   #else
;;;2682   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2683   
;;;2684   #endif
;;;2685   	}
;;;2686   
;;;2687   	LEAVE_FF(fp->fs, FR_OK);
;;;2688   }
002e98  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.11932|
002e9c  e5d40007          LDRB     r0,[r4,#7]            ;2610
002ea0  e3500000          CMP      r0,#0                 ;2610
002ea4  0a000004          BEQ      |L1.11964|
002ea8  e5d41007          LDRB     r1,[r4,#7]            ;2611
002eac  e5940000          LDR      r0,[r4,#0]            ;2611
002eb0  ebfffffe          BL       unlock_fs
002eb4  e5d40007          LDRB     r0,[r4,#7]            ;2611
002eb8  eafffff5          B        |L1.11924|
                  |L1.11964|
002ebc  e5d40006          LDRB     r0,[r4,#6]            ;2612
002ec0  e3100001          TST      r0,#1                 ;2612
002ec4  1a000004          BNE      |L1.11996|
002ec8  e3a01007          MOV      r1,#7                 ;2613
002ecc  e5940000          LDR      r0,[r4,#0]            ;2613
002ed0  ebfffffe          BL       unlock_fs
002ed4  e3a00007          MOV      r0,#7                 ;2613
002ed8  eaffffed          B        |L1.11924|
                  |L1.11996|
002edc  e594000c          LDR      r0,[r4,#0xc]          ;2614
002ee0  e5941008          LDR      r1,[r4,#8]            ;2614
002ee4  e0400001          SUB      r0,r0,r1              ;2614
002ee8  e58d0008          STR      r0,[sp,#8]            ;2614
002eec  e59d0008          LDR      r0,[sp,#8]            ;2615
002ef0  e1550000          CMP      r5,r0                 ;2615
002ef4  9a000000          BLS      |L1.12028|
002ef8  e59d5008          LDR      r5,[sp,#8]            ;2615
                  |L1.12028|
002efc  ea0000b6          B        |L1.12764|
                  |L1.12032|
002f00  e5942000          LDR      r2,[r4,#0]            ;2619
002f04  e1d210ba          LDRH     r1,[r2,#0xa]          ;2619
002f08  e5940008          LDR      r0,[r4,#8]            ;2619
002f0c  ebfffffe          BL       __aeabi_uidivmod
002f10  e3510000          CMP      r1,#0                 ;2619
002f14  1a000092          BNE      |L1.12644|
002f18  e5942000          LDR      r2,[r4,#0]            ;2620
002f1c  e1d210ba          LDRH     r1,[r2,#0xa]          ;2620
002f20  e5940008          LDR      r0,[r4,#8]            ;2620
002f24  ebfffffe          BL       __aeabi_uidivmod
002f28  e5941000          LDR      r1,[r4,#0]            ;2620
002f2c  e5d11002          LDRB     r1,[r1,#2]            ;2620
002f30  e2411001          SUB      r1,r1,#1              ;2620
002f34  e0000001          AND      r0,r0,r1              ;2620
002f38  e20090ff          AND      r9,r0,#0xff           ;2620
002f3c  e3590000          CMP      r9,#0                 ;2621
002f40  1a00001f          BNE      |L1.12228|
002f44  e5940008          LDR      r0,[r4,#8]            ;2622
002f48  e3500000          CMP      r0,#0                 ;2622
002f4c  1a000002          BNE      |L1.12124|
002f50  e5940010          LDR      r0,[r4,#0x10]         ;2623
002f54  e58d000c          STR      r0,[sp,#0xc]          ;2623
002f58  ea000003          B        |L1.12140|
                  |L1.12124|
002f5c  e5940000          LDR      r0,[r4,#0]            ;2630
002f60  e5941014          LDR      r1,[r4,#0x14]         ;2630
002f64  ebfffffe          BL       get_fat
002f68  e58d000c          STR      r0,[sp,#0xc]          ;2630
                  |L1.12140|
002f6c  e59d000c          LDR      r0,[sp,#0xc]          ;2632
002f70  e3500002          CMP      r0,#2                 ;2632
002f74  2a000006          BCS      |L1.12180|
002f78  e3a00002          MOV      r0,#2                 ;2632
002f7c  e5c40007          STRB     r0,[r4,#7]            ;2632
002f80  e3a01002          MOV      r1,#2                 ;2632
002f84  e5940000          LDR      r0,[r4,#0]            ;2632
002f88  ebfffffe          BL       unlock_fs
002f8c  e3a00002          MOV      r0,#2                 ;2632
002f90  eaffffbf          B        |L1.11924|
                  |L1.12180|
002f94  e59d000c          LDR      r0,[sp,#0xc]          ;2633
002f98  e3700001          CMN      r0,#1                 ;2633
002f9c  1a000006          BNE      |L1.12220|
002fa0  e3a00001          MOV      r0,#1                 ;2633
002fa4  e5c40007          STRB     r0,[r4,#7]            ;2633
002fa8  e3a01001          MOV      r1,#1                 ;2633
002fac  e5940000          LDR      r0,[r4,#0]            ;2633
002fb0  ebfffffe          BL       unlock_fs
002fb4  e3a00001          MOV      r0,#1                 ;2633
002fb8  eaffffb5          B        |L1.11924|
                  |L1.12220|
002fbc  e59d000c          LDR      r0,[sp,#0xc]          ;2634
002fc0  e5840014          STR      r0,[r4,#0x14]         ;2634
                  |L1.12228|
002fc4  e5940000          LDR      r0,[r4,#0]            ;2636
002fc8  e5941014          LDR      r1,[r4,#0x14]         ;2636
002fcc  ebfffffe          BL       clust2sect
002fd0  e1a06000          MOV      r6,r0                 ;2636
002fd4  e3560000          CMP      r6,#0                 ;2637
002fd8  1a000006          BNE      |L1.12280|
002fdc  e3a00002          MOV      r0,#2                 ;2637
002fe0  e5c40007          STRB     r0,[r4,#7]            ;2637
002fe4  e3a01002          MOV      r1,#2                 ;2637
002fe8  e5940000          LDR      r0,[r4,#0]            ;2637
002fec  ebfffffe          BL       unlock_fs
002ff0  e3a00002          MOV      r0,#2                 ;2637
002ff4  eaffffa6          B        |L1.11924|
                  |L1.12280|
002ff8  e0866009          ADD      r6,r6,r9              ;2638
002ffc  e5940000          LDR      r0,[r4,#0]            ;2639
003000  e1d010ba          LDRH     r1,[r0,#0xa]          ;2639
003004  e1a00005          MOV      r0,r5                 ;2639
003008  ebfffffe          BL       __aeabi_uidivmod
00300c  e1a08000          MOV      r8,r0                 ;2639
003010  e3580000          CMP      r8,#0                 ;2640
003014  0a00002a          BEQ      |L1.12484|
003018  e0890008          ADD      r0,r9,r8              ;2641
00301c  e5941000          LDR      r1,[r4,#0]            ;2641
003020  e5d11002          LDRB     r1,[r1,#2]            ;2641
003024  e1500001          CMP      r0,r1                 ;2641
003028  9a000002          BLS      |L1.12344|
00302c  e5940000          LDR      r0,[r4,#0]            ;2642
003030  e5d00002          LDRB     r0,[r0,#2]            ;2642
003034  e0408009          SUB      r8,r0,r9              ;2642
                  |L1.12344|
003038  e5941000          LDR      r1,[r4,#0]            ;2643
00303c  e5d10001          LDRB     r0,[r1,#1]            ;2643
003040  e1a03008          MOV      r3,r8                 ;2643
003044  e1a02006          MOV      r2,r6                 ;2643
003048  e1a0100b          MOV      r1,r11                ;2643
00304c  ebfffffe          BL       disk_read
003050  e3500000          CMP      r0,#0                 ;2643
003054  0a000006          BEQ      |L1.12404|
003058  e3a00001          MOV      r0,#1                 ;2644
00305c  e5c40007          STRB     r0,[r4,#7]            ;2644
003060  e3a01001          MOV      r1,#1                 ;2644
003064  e5940000          LDR      r0,[r4,#0]            ;2644
003068  ebfffffe          BL       unlock_fs
00306c  e3a00001          MOV      r0,#1                 ;2644
003070  eaffff87          B        |L1.11924|
                  |L1.12404|
003074  e5d40006          LDRB     r0,[r4,#6]            ;2650
003078  e3100040          TST      r0,#0x40              ;2650
00307c  0a00000c          BEQ      |L1.12468|
003080  e5940018          LDR      r0,[r4,#0x18]         ;2650
003084  e0400006          SUB      r0,r0,r6              ;2650
003088  e1500008          CMP      r0,r8                 ;2650
00308c  2a000008          BCS      |L1.12468|
003090  e5941018          LDR      r1,[r4,#0x18]         ;2651
003094  e0411006          SUB      r1,r1,r6              ;2651
003098  e5943000          LDR      r3,[r4,#0]            ;2651
00309c  e1d330ba          LDRH     r3,[r3,#0xa]          ;2651
0030a0  e020b391          MLA      r0,r1,r3,r11          ;2651
0030a4  e5941000          LDR      r1,[r4,#0]            ;2651
0030a8  e1d120ba          LDRH     r2,[r1,#0xa]          ;2651
0030ac  e2841024          ADD      r1,r4,#0x24           ;2651
0030b0  ebfffffe          BL       mem_cpy
                  |L1.12468|
0030b4  e5940000          LDR      r0,[r4,#0]            ;2657
0030b8  e1d000ba          LDRH     r0,[r0,#0xa]          ;2657
0030bc  e0070890          MUL      r7,r0,r8              ;2657
0030c0  ea00003d          B        |L1.12732|
                  |L1.12484|
0030c4  e5940018          LDR      r0,[r4,#0x18]         ;2661
0030c8  e1500006          CMP      r0,r6                 ;2661
0030cc  0a000023          BEQ      |L1.12640|
0030d0  e5d40006          LDRB     r0,[r4,#6]            ;2663
0030d4  e3100040          TST      r0,#0x40              ;2663
0030d8  0a000011          BEQ      |L1.12580|
0030dc  e5941000          LDR      r1,[r4,#0]            ;2664
0030e0  e5942018          LDR      r2,[r4,#0x18]         ;2664
0030e4  e5d10001          LDRB     r0,[r1,#1]            ;2664
0030e8  e3a03001          MOV      r3,#1                 ;2664
0030ec  e2841024          ADD      r1,r4,#0x24           ;2664
0030f0  ebfffffe          BL       disk_write
0030f4  e3500000          CMP      r0,#0                 ;2664
0030f8  0a000006          BEQ      |L1.12568|
0030fc  e3a00001          MOV      r0,#1                 ;2665
003100  e5c40007          STRB     r0,[r4,#7]            ;2665
003104  e3a01001          MOV      r1,#1                 ;2665
003108  e5940000          LDR      r0,[r4,#0]            ;2665
00310c  ebfffffe          BL       unlock_fs
003110  e3a00001          MOV      r0,#1                 ;2665
003114  eaffff5e          B        |L1.11924|
                  |L1.12568|
003118  e5d40006          LDRB     r0,[r4,#6]            ;2666
00311c  e3c00040          BIC      r0,r0,#0x40           ;2666
003120  e5c40006          STRB     r0,[r4,#6]            ;2666
                  |L1.12580|
003124  e5941000          LDR      r1,[r4,#0]            ;2669
003128  e5d10001          LDRB     r0,[r1,#1]            ;2669
00312c  e3a03001          MOV      r3,#1                 ;2669
003130  e1a02006          MOV      r2,r6                 ;2669
003134  e2841024          ADD      r1,r4,#0x24           ;2669
003138  ebfffffe          BL       disk_read
00313c  e3500000          CMP      r0,#0                 ;2669
003140  0a000006          BEQ      |L1.12640|
003144  e3a00001          MOV      r0,#1                 ;2670
003148  e5c40007          STRB     r0,[r4,#7]            ;2670
00314c  e3a01001          MOV      r1,#1                 ;2670
003150  e5940000          LDR      r0,[r4,#0]            ;2670
003154  ebfffffe          BL       unlock_fs
003158  e3a00001          MOV      r0,#1                 ;2670
00315c  eaffff4c          B        |L1.11924|
                  |L1.12640|
003160  e5846018          STR      r6,[r4,#0x18]         ;2673
                  |L1.12644|
003164  e5942000          LDR      r2,[r4,#0]            ;2675
003168  e1d210ba          LDRH     r1,[r2,#0xa]          ;2675
00316c  e5940008          LDR      r0,[r4,#8]            ;2675
003170  ebfffffe          BL       __aeabi_uidivmod
003174  e5940000          LDR      r0,[r4,#0]            ;2675
003178  e1d000ba          LDRH     r0,[r0,#0xa]          ;2675
00317c  e0407001          SUB      r7,r0,r1              ;2675
003180  e1570005          CMP      r7,r5                 ;2676
003184  9a000000          BLS      |L1.12684|
003188  e1a07005          MOV      r7,r5                 ;2676
                  |L1.12684|
00318c  e5942000          LDR      r2,[r4,#0]            ;2682
003190  e1d210ba          LDRH     r1,[r2,#0xa]          ;2682
003194  e5940008          LDR      r0,[r4,#8]            ;2682
003198  ebfffffe          BL       __aeabi_uidivmod
00319c  e2840024          ADD      r0,r4,#0x24           ;2682
0031a0  e0800001          ADD      r0,r0,r1              ;2682
0031a4  e1a02007          MOV      r2,r7                 ;2682
0031a8  e58d0004          STR      r0,[sp,#4]            ;2682
0031ac  e1a01000          MOV      r1,r0                 ;2682
0031b0  e1a0000b          MOV      r0,r11                ;2682
0031b4  ebfffffe          BL       mem_cpy
0031b8  e1a00000          MOV      r0,r0                 ;2658
                  |L1.12732|
0031bc  e08bb007          ADD      r11,r11,r7            ;2618
0031c0  e5940008          LDR      r0,[r4,#8]            ;2618
0031c4  e0800007          ADD      r0,r0,r7              ;2618
0031c8  e5840008          STR      r0,[r4,#8]            ;2618
0031cc  e59a0000          LDR      r0,[r10,#0]           ;2618
0031d0  e0800007          ADD      r0,r0,r7              ;2618
0031d4  e58a0000          STR      r0,[r10,#0]           ;2618
0031d8  e0455007          SUB      r5,r5,r7              ;2618
                  |L1.12764|
0031dc  e3550000          CMP      r5,#0                 ;2617
0031e0  1affff46          BNE      |L1.12032|
0031e4  e3a01000          MOV      r1,#0                 ;2687
0031e8  e5940000          LDR      r0,[r4,#0]            ;2687
0031ec  ebfffffe          BL       unlock_fs
0031f0  e3a00000          MOV      r0,#0                 ;2687
0031f4  eaffff26          B        |L1.11924|
;;;2689   
                          ENDP

                  f_write PROC
;;;2697   
;;;2698   FRESULT f_write (
0031f8  e92d4fff          PUSH     {r0-r11,lr}
;;;2699   	FIL* fp,			/* Pointer to the file object */
;;;2700   	const void *buff,	/* Pointer to the data to be written */
;;;2701   	UINT btw,			/* Number of bytes to write */
;;;2702   	UINT* bw			/* Pointer to number of bytes written */
;;;2703   )
;;;2704   {
0031fc  e24dd00c          SUB      sp,sp,#0xc
003200  e1a04000          MOV      r4,r0
003204  e1a05002          MOV      r5,r2
003208  e1a0b003          MOV      r11,r3
;;;2705   	FRESULT res;
;;;2706   	DWORD clst, sect;
;;;2707   	UINT wcnt, cc;
;;;2708   	const BYTE *wbuff = (const BYTE*)buff;
00320c  e59d0010          LDR      r0,[sp,#0x10]
003210  e58d0004          STR      r0,[sp,#4]
;;;2709   	BYTE csect;
;;;2710   
;;;2711   
;;;2712   	*bw = 0;	/* Clear write byte counter */
003214  e3a00000          MOV      r0,#0
003218  e58b0000          STR      r0,[r11,#0]
;;;2713   
;;;2714   	res = validate(fp);						/* Check validity */
00321c  e1a00004          MOV      r0,r4
003220  ebfffffe          BL       validate
003224  e58d0008          STR      r0,[sp,#8]
;;;2715   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
003228  e59d0008          LDR      r0,[sp,#8]
00322c  e3500000          CMP      r0,#0
003230  0a000005          BEQ      |L1.12876|
003234  e5940000          LDR      r0,[r4,#0]
003238  e59d1008          LDR      r1,[sp,#8]
00323c  ebfffffe          BL       unlock_fs
003240  e59d0008          LDR      r0,[sp,#8]
                  |L1.12868|
003244  e28dd01c          ADD      sp,sp,#0x1c
;;;2716   	if (fp->err)							/* Check error */
;;;2717   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2718   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2719   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2720   	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
;;;2721   
;;;2722   	for ( ;  btw;							/* Repeat until all data written */
;;;2723   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2724   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2725   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2726   			if (!csect) {					/* On the cluster boundary? */
;;;2727   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2728   					clst = fp->sclust;		/* Follow from the origin */
;;;2729   					if (clst == 0)			/* When no cluster is allocated, */
;;;2730   						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2731   				} else {					/* Middle or end of the file */
;;;2732   #if _USE_FASTSEEK
;;;2733   					if (fp->cltbl)
;;;2734   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2735   					else
;;;2736   #endif
;;;2737   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2738   				}
;;;2739   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2740   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2741   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2742   				fp->clust = clst;			/* Update current cluster */
;;;2743   				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
;;;2744   			}
;;;2745   #if _FS_TINY
;;;2746   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2747   				ABORT(fp->fs, FR_DISK_ERR);
;;;2748   #else
;;;2749   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2750   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2751   					ABORT(fp->fs, FR_DISK_ERR);
;;;2752   				fp->flag &= ~FA__DIRTY;
;;;2753   			}
;;;2754   #endif
;;;2755   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2756   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2757   			sect += csect;
;;;2758   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2759   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2760   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2761   					cc = fp->fs->csize - csect;
;;;2762   				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
;;;2763   					ABORT(fp->fs, FR_DISK_ERR);
;;;2764   #if _FS_MINIMIZE <= 2
;;;2765   #if _FS_TINY
;;;2766   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2767   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2768   					fp->fs->wflag = 0;
;;;2769   				}
;;;2770   #else
;;;2771   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2772   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2773   					fp->flag &= ~FA__DIRTY;
;;;2774   				}
;;;2775   #endif
;;;2776   #endif
;;;2777   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2778   				continue;
;;;2779   			}
;;;2780   #if _FS_TINY
;;;2781   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2782   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2783   				fp->fs->winsect = sect;
;;;2784   			}
;;;2785   #else
;;;2786   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2787   				if (fp->fptr < fp->fsize &&
;;;2788   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2789   						ABORT(fp->fs, FR_DISK_ERR);
;;;2790   			}
;;;2791   #endif
;;;2792   			fp->dsect = sect;
;;;2793   		}
;;;2794   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2795   		if (wcnt > btw) wcnt = btw;
;;;2796   #if _FS_TINY
;;;2797   		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
;;;2798   			ABORT(fp->fs, FR_DISK_ERR);
;;;2799   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2800   		fp->fs->wflag = 1;
;;;2801   #else
;;;2802   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2803   		fp->flag |= FA__DIRTY;
;;;2804   #endif
;;;2805   	}
;;;2806   
;;;2807   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2808   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2809   
;;;2810   	LEAVE_FF(fp->fs, FR_OK);
;;;2811   }
003248  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.12876|
00324c  e5d40007          LDRB     r0,[r4,#7]            ;2716
003250  e3500000          CMP      r0,#0                 ;2716
003254  0a000004          BEQ      |L1.12908|
003258  e5d41007          LDRB     r1,[r4,#7]            ;2717
00325c  e5940000          LDR      r0,[r4,#0]            ;2717
003260  ebfffffe          BL       unlock_fs
003264  e5d40007          LDRB     r0,[r4,#7]            ;2717
003268  eafffff5          B        |L1.12868|
                  |L1.12908|
00326c  e5d40006          LDRB     r0,[r4,#6]            ;2718
003270  e3100002          TST      r0,#2                 ;2718
003274  1a000004          BNE      |L1.12940|
003278  e3a01007          MOV      r1,#7                 ;2719
00327c  e5940000          LDR      r0,[r4,#0]            ;2719
003280  ebfffffe          BL       unlock_fs
003284  e3a00007          MOV      r0,#7                 ;2719
003288  eaffffed          B        |L1.12868|
                  |L1.12940|
00328c  e5940008          LDR      r0,[r4,#8]            ;2720
003290  e0800005          ADD      r0,r0,r5              ;2720
003294  e5941008          LDR      r1,[r4,#8]            ;2720
003298  e1500001          CMP      r0,r1                 ;2720
00329c  2a000000          BCS      |L1.12964|
0032a0  e3a05000          MOV      r5,#0                 ;2720
                  |L1.12964|
0032a4  ea0000c8          B        |L1.13772|
                  |L1.12968|
0032a8  e5942000          LDR      r2,[r4,#0]            ;2724
0032ac  e1d210ba          LDRH     r1,[r2,#0xa]          ;2724
0032b0  e5940008          LDR      r0,[r4,#8]            ;2724
0032b4  ebfffffe          BL       __aeabi_uidivmod
0032b8  e3510000          CMP      r1,#0                 ;2724
0032bc  1a0000a0          BNE      |L1.13636|
0032c0  e5942000          LDR      r2,[r4,#0]            ;2725
0032c4  e1d210ba          LDRH     r1,[r2,#0xa]          ;2725
0032c8  e5940008          LDR      r0,[r4,#8]            ;2725
0032cc  ebfffffe          BL       __aeabi_uidivmod
0032d0  e5941000          LDR      r1,[r4,#0]            ;2725
0032d4  e5d11002          LDRB     r1,[r1,#2]            ;2725
0032d8  e2411001          SUB      r1,r1,#1              ;2725
0032dc  e0000001          AND      r0,r0,r1              ;2725
0032e0  e200a0ff          AND      r10,r0,#0xff          ;2725
0032e4  e35a0000          CMP      r10,#0                ;2726
0032e8  1a000028          BNE      |L1.13200|
0032ec  e5940008          LDR      r0,[r4,#8]            ;2727
0032f0  e3500000          CMP      r0,#0                 ;2727
0032f4  1a000007          BNE      |L1.13080|
0032f8  e5947010          LDR      r7,[r4,#0x10]         ;2728
0032fc  e3570000          CMP      r7,#0                 ;2729
003300  1a000008          BNE      |L1.13096|
003304  e3a01000          MOV      r1,#0                 ;2730
003308  e5940000          LDR      r0,[r4,#0]            ;2730
00330c  ebfffffe          BL       create_chain
003310  e1a07000          MOV      r7,r0                 ;2730
003314  ea000003          B        |L1.13096|
                  |L1.13080|
003318  e5940000          LDR      r0,[r4,#0]            ;2737
00331c  e5941014          LDR      r1,[r4,#0x14]         ;2737
003320  ebfffffe          BL       create_chain
003324  e1a07000          MOV      r7,r0                 ;2737
                  |L1.13096|
003328  e3570000          CMP      r7,#0                 ;2739
00332c  1a000000          BNE      |L1.13108|
003330  ea0000a7          B        |L1.13780|
                  |L1.13108|
003334  e3570001          CMP      r7,#1                 ;2740
003338  1a000006          BNE      |L1.13144|
00333c  e3a00002          MOV      r0,#2                 ;2740
003340  e5c40007          STRB     r0,[r4,#7]            ;2740
003344  e3a01002          MOV      r1,#2                 ;2740
003348  e5940000          LDR      r0,[r4,#0]            ;2740
00334c  ebfffffe          BL       unlock_fs
003350  e3a00002          MOV      r0,#2                 ;2740
003354  eaffffba          B        |L1.12868|
                  |L1.13144|
003358  e3770001          CMN      r7,#1                 ;2741
00335c  1a000006          BNE      |L1.13180|
003360  e3a00001          MOV      r0,#1                 ;2741
003364  e5c40007          STRB     r0,[r4,#7]            ;2741
003368  e3a01001          MOV      r1,#1                 ;2741
00336c  e5940000          LDR      r0,[r4,#0]            ;2741
003370  ebfffffe          BL       unlock_fs
003374  e3a00001          MOV      r0,#1                 ;2741
003378  eaffffb1          B        |L1.12868|
                  |L1.13180|
00337c  e5847014          STR      r7,[r4,#0x14]         ;2742
003380  e5940010          LDR      r0,[r4,#0x10]         ;2743
003384  e3500000          CMP      r0,#0                 ;2743
003388  1a000000          BNE      |L1.13200|
00338c  e5847010          STR      r7,[r4,#0x10]         ;2743
                  |L1.13200|
003390  e5d40006          LDRB     r0,[r4,#6]            ;2749
003394  e3100040          TST      r0,#0x40              ;2749
003398  0a000011          BEQ      |L1.13284|
00339c  e5941000          LDR      r1,[r4,#0]            ;2750
0033a0  e5942018          LDR      r2,[r4,#0x18]         ;2750
0033a4  e5d10001          LDRB     r0,[r1,#1]            ;2750
0033a8  e3a03001          MOV      r3,#1                 ;2750
0033ac  e2841024          ADD      r1,r4,#0x24           ;2750
0033b0  ebfffffe          BL       disk_write
0033b4  e3500000          CMP      r0,#0                 ;2750
0033b8  0a000006          BEQ      |L1.13272|
0033bc  e3a00001          MOV      r0,#1                 ;2751
0033c0  e5c40007          STRB     r0,[r4,#7]            ;2751
0033c4  e3a01001          MOV      r1,#1                 ;2751
0033c8  e5940000          LDR      r0,[r4,#0]            ;2751
0033cc  ebfffffe          BL       unlock_fs
0033d0  e3a00001          MOV      r0,#1                 ;2751
0033d4  eaffff9a          B        |L1.12868|
                  |L1.13272|
0033d8  e5d40006          LDRB     r0,[r4,#6]            ;2752
0033dc  e3c00040          BIC      r0,r0,#0x40           ;2752
0033e0  e5c40006          STRB     r0,[r4,#6]            ;2752
                  |L1.13284|
0033e4  e5940000          LDR      r0,[r4,#0]            ;2755
0033e8  e5941014          LDR      r1,[r4,#0x14]         ;2755
0033ec  ebfffffe          BL       clust2sect
0033f0  e1a06000          MOV      r6,r0                 ;2755
0033f4  e3560000          CMP      r6,#0                 ;2756
0033f8  1a000006          BNE      |L1.13336|
0033fc  e3a00002          MOV      r0,#2                 ;2756
003400  e5c40007          STRB     r0,[r4,#7]            ;2756
003404  e3a01002          MOV      r1,#2                 ;2756
003408  e5940000          LDR      r0,[r4,#0]            ;2756
00340c  ebfffffe          BL       unlock_fs
003410  e3a00002          MOV      r0,#2                 ;2756
003414  eaffff8a          B        |L1.12868|
                  |L1.13336|
003418  e086600a          ADD      r6,r6,r10             ;2757
00341c  e5940000          LDR      r0,[r4,#0]            ;2758
003420  e1d010ba          LDRH     r1,[r0,#0xa]          ;2758
003424  e1a00005          MOV      r0,r5                 ;2758
003428  ebfffffe          BL       __aeabi_uidivmod
00342c  e1a09000          MOV      r9,r0                 ;2758
003430  e3590000          CMP      r9,#0                 ;2759
003434  0a00002b          BEQ      |L1.13544|
003438  e08a0009          ADD      r0,r10,r9             ;2760
00343c  e5941000          LDR      r1,[r4,#0]            ;2760
003440  e5d11002          LDRB     r1,[r1,#2]            ;2760
003444  e1500001          CMP      r0,r1                 ;2760
003448  9a000002          BLS      |L1.13400|
00344c  e5940000          LDR      r0,[r4,#0]            ;2761
003450  e5d00002          LDRB     r0,[r0,#2]            ;2761
003454  e040900a          SUB      r9,r0,r10             ;2761
                  |L1.13400|
003458  e5941000          LDR      r1,[r4,#0]            ;2762
00345c  e5d10001          LDRB     r0,[r1,#1]            ;2762
003460  e1a03009          MOV      r3,r9                 ;2762
003464  e1a02006          MOV      r2,r6                 ;2762
003468  e59d1004          LDR      r1,[sp,#4]            ;2762
00346c  ebfffffe          BL       disk_write
003470  e3500000          CMP      r0,#0                 ;2762
003474  0a000006          BEQ      |L1.13460|
003478  e3a00001          MOV      r0,#1                 ;2763
00347c  e5c40007          STRB     r0,[r4,#7]            ;2763
003480  e3a01001          MOV      r1,#1                 ;2763
003484  e5940000          LDR      r0,[r4,#0]            ;2763
003488  ebfffffe          BL       unlock_fs
00348c  e3a00001          MOV      r0,#1                 ;2763
003490  eaffff6b          B        |L1.12868|
                  |L1.13460|
003494  e5940018          LDR      r0,[r4,#0x18]         ;2771
003498  e0400006          SUB      r0,r0,r6              ;2771
00349c  e1500009          CMP      r0,r9                 ;2771
0034a0  2a00000c          BCS      |L1.13528|
0034a4  e5940018          LDR      r0,[r4,#0x18]         ;2772
0034a8  e0403006          SUB      r3,r0,r6              ;2772
0034ac  e5940000          LDR      r0,[r4,#0]            ;2772
0034b0  e1d0c0ba          LDRH     r12,[r0,#0xa]         ;2772
0034b4  e59d0004          LDR      r0,[sp,#4]            ;2772
0034b8  e0210c93          MLA      r1,r3,r12,r0          ;2772
0034bc  e5940000          LDR      r0,[r4,#0]            ;2772
0034c0  e1d020ba          LDRH     r2,[r0,#0xa]          ;2772
0034c4  e2840024          ADD      r0,r4,#0x24           ;2772
0034c8  ebfffffe          BL       mem_cpy
0034cc  e5d40006          LDRB     r0,[r4,#6]            ;2773
0034d0  e3c00040          BIC      r0,r0,#0x40           ;2773
0034d4  e5c40006          STRB     r0,[r4,#6]            ;2773
                  |L1.13528|
0034d8  e5940000          LDR      r0,[r4,#0]            ;2777
0034dc  e1d000ba          LDRH     r0,[r0,#0xa]          ;2777
0034e0  e0080990          MUL      r8,r0,r9              ;2777
0034e4  ea00002e          B        |L1.13732|
                  |L1.13544|
0034e8  e5940018          LDR      r0,[r4,#0x18]         ;2786
0034ec  e1500006          CMP      r0,r6                 ;2786
0034f0  0a000012          BEQ      |L1.13632|
0034f4  e5940008          LDR      r0,[r4,#8]            ;2787
0034f8  e594100c          LDR      r1,[r4,#0xc]          ;2787
0034fc  e1500001          CMP      r0,r1                 ;2787
003500  2a00000e          BCS      |L1.13632|
003504  e5941000          LDR      r1,[r4,#0]            ;2788
003508  e5d10001          LDRB     r0,[r1,#1]            ;2788
00350c  e3a03001          MOV      r3,#1                 ;2788
003510  e1a02006          MOV      r2,r6                 ;2788
003514  e2841024          ADD      r1,r4,#0x24           ;2788
003518  ebfffffe          BL       disk_read
00351c  e3500000          CMP      r0,#0                 ;2788
003520  0a000006          BEQ      |L1.13632|
003524  e3a00001          MOV      r0,#1                 ;2789
003528  e5c40007          STRB     r0,[r4,#7]            ;2789
00352c  e3a01001          MOV      r1,#1                 ;2789
003530  e5940000          LDR      r0,[r4,#0]            ;2789
003534  ebfffffe          BL       unlock_fs
003538  e3a00001          MOV      r0,#1                 ;2789
00353c  eaffff40          B        |L1.12868|
                  |L1.13632|
003540  e5846018          STR      r6,[r4,#0x18]         ;2792
                  |L1.13636|
003544  e5942000          LDR      r2,[r4,#0]            ;2794
003548  e1d210ba          LDRH     r1,[r2,#0xa]          ;2794
00354c  e5940008          LDR      r0,[r4,#8]            ;2794
003550  ebfffffe          BL       __aeabi_uidivmod
003554  e5940000          LDR      r0,[r4,#0]            ;2794
003558  e1d000ba          LDRH     r0,[r0,#0xa]          ;2794
00355c  e0408001          SUB      r8,r0,r1              ;2794
003560  e1580005          CMP      r8,r5                 ;2795
003564  9a000000          BLS      |L1.13676|
003568  e1a08005          MOV      r8,r5                 ;2795
                  |L1.13676|
00356c  e5942000          LDR      r2,[r4,#0]            ;2802
003570  e1d210ba          LDRH     r1,[r2,#0xa]          ;2802
003574  e5940008          LDR      r0,[r4,#8]            ;2802
003578  ebfffffe          BL       __aeabi_uidivmod
00357c  e2840024          ADD      r0,r4,#0x24           ;2802
003580  e0800001          ADD      r0,r0,r1              ;2802
003584  e1a02008          MOV      r2,r8                 ;2802
003588  e58d0000          STR      r0,[sp,#0]            ;2802
00358c  e59d1004          LDR      r1,[sp,#4]            ;2802
003590  ebfffffe          BL       mem_cpy
003594  e5d40006          LDRB     r0,[r4,#6]            ;2803
003598  e3800040          ORR      r0,r0,#0x40           ;2803
00359c  e5c40006          STRB     r0,[r4,#6]            ;2803
0035a0  e1a00000          MOV      r0,r0                 ;2778
                  |L1.13732|
0035a4  e59d0004          LDR      r0,[sp,#4]            ;2723
0035a8  e0800008          ADD      r0,r0,r8              ;2723
0035ac  e58d0004          STR      r0,[sp,#4]            ;2723
0035b0  e5940008          LDR      r0,[r4,#8]            ;2723
0035b4  e0800008          ADD      r0,r0,r8              ;2723
0035b8  e5840008          STR      r0,[r4,#8]            ;2723
0035bc  e59b0000          LDR      r0,[r11,#0]           ;2723
0035c0  e0800008          ADD      r0,r0,r8              ;2723
0035c4  e58b0000          STR      r0,[r11,#0]           ;2723
0035c8  e0455008          SUB      r5,r5,r8              ;2723
                  |L1.13772|
0035cc  e3550000          CMP      r5,#0                 ;2722
0035d0  1affff34          BNE      |L1.12968|
                  |L1.13780|
0035d4  e1a00000          MOV      r0,r0                 ;2739
0035d8  e5940008          LDR      r0,[r4,#8]            ;2807
0035dc  e594100c          LDR      r1,[r4,#0xc]          ;2807
0035e0  e1500001          CMP      r0,r1                 ;2807
0035e4  9a000001          BLS      |L1.13808|
0035e8  e5940008          LDR      r0,[r4,#8]            ;2807
0035ec  e584000c          STR      r0,[r4,#0xc]          ;2807
                  |L1.13808|
0035f0  e5d40006          LDRB     r0,[r4,#6]            ;2808
0035f4  e3800020          ORR      r0,r0,#0x20           ;2808
0035f8  e5c40006          STRB     r0,[r4,#6]            ;2808
0035fc  e3a01000          MOV      r1,#0                 ;2810
003600  e5940000          LDR      r0,[r4,#0]            ;2810
003604  ebfffffe          BL       unlock_fs
003608  e3a00000          MOV      r0,#0                 ;2810
00360c  eaffff0c          B        |L1.12868|
;;;2812   
                          ENDP

                  f_sync PROC
;;;2819   
;;;2820   FRESULT f_sync (
003610  e92d41f0          PUSH     {r4-r8,lr}
;;;2821   	FIL* fp		/* Pointer to the file object */
;;;2822   )
;;;2823   {
003614  e1a04000          MOV      r4,r0
;;;2824   	FRESULT res;
;;;2825   	DWORD tm;
;;;2826   	BYTE *dir;
;;;2827   
;;;2828   
;;;2829   	res = validate(fp);					/* Check validity of the object */
003618  e1a00004          MOV      r0,r4
00361c  ebfffffe          BL       validate
003620  e1a07000          MOV      r7,r0
;;;2830   	if (res == FR_OK) {
003624  e3570000          CMP      r7,#0
003628  1a000046          BNE      |L1.14152|
;;;2831   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
00362c  e5d40006          LDRB     r0,[r4,#6]
003630  e3100020          TST      r0,#0x20
003634  0a000043          BEQ      |L1.14152|
;;;2832   			/* Write-back dirty buffer */
;;;2833   #if !_FS_TINY
;;;2834   			if (fp->flag & FA__DIRTY) {
003638  e5d40006          LDRB     r0,[r4,#6]
00363c  e3100040          TST      r0,#0x40
003640  0a00000f          BEQ      |L1.13956|
;;;2835   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
003644  e5941000          LDR      r1,[r4,#0]
003648  e5942018          LDR      r2,[r4,#0x18]
00364c  e5d10001          LDRB     r0,[r1,#1]
003650  e3a03001          MOV      r3,#1
003654  e2841024          ADD      r1,r4,#0x24
003658  ebfffffe          BL       disk_write
00365c  e3500000          CMP      r0,#0
003660  0a000004          BEQ      |L1.13944|
;;;2836   					LEAVE_FF(fp->fs, FR_DISK_ERR);
003664  e3a01001          MOV      r1,#1
003668  e5940000          LDR      r0,[r4,#0]
00366c  ebfffffe          BL       unlock_fs
003670  e3a00001          MOV      r0,#1
                  |L1.13940|
;;;2837   				fp->flag &= ~FA__DIRTY;
;;;2838   			}
;;;2839   #endif
;;;2840   			/* Update the directory entry */
;;;2841   			res = move_window(fp->fs, fp->dir_sect);
;;;2842   			if (res == FR_OK) {
;;;2843   				dir = fp->dir_ptr;
;;;2844   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2845   				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
;;;2846   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2847   				tm = GET_FATTIME();							/* Update updated time */
;;;2848   				ST_DWORD(dir + DIR_WrtTime, tm);
;;;2849   				ST_WORD(dir + DIR_LstAccDate, 0);
;;;2850   				fp->flag &= ~FA__WRITTEN;
;;;2851   				fp->fs->wflag = 1;
;;;2852   				res = sync_fs(fp->fs);
;;;2853   			}
;;;2854   		}
;;;2855   	}
;;;2856   
;;;2857   	LEAVE_FF(fp->fs, res);
;;;2858   }
003674  e8bd81f0          POP      {r4-r8,pc}
                  |L1.13944|
003678  e5d40006          LDRB     r0,[r4,#6]            ;2837
00367c  e3c00040          BIC      r0,r0,#0x40           ;2837
003680  e5c40006          STRB     r0,[r4,#6]            ;2837
                  |L1.13956|
003684  e5940000          LDR      r0,[r4,#0]            ;2841
003688  e594101c          LDR      r1,[r4,#0x1c]         ;2841
00368c  ebfffffe          BL       move_window
003690  e1a07000          MOV      r7,r0                 ;2841
003694  e3570000          CMP      r7,#0                 ;2842
003698  1a00002a          BNE      |L1.14152|
00369c  e5945020          LDR      r5,[r4,#0x20]         ;2843
0036a0  e5d5000b          LDRB     r0,[r5,#0xb]          ;2844
0036a4  e3800020          ORR      r0,r0,#0x20           ;2844
0036a8  e5c5000b          STRB     r0,[r5,#0xb]          ;2844
0036ac  e5d4000c          LDRB     r0,[r4,#0xc]          ;2845
0036b0  e5c5001c          STRB     r0,[r5,#0x1c]         ;2845
0036b4  e1d400bc          LDRH     r0,[r4,#0xc]          ;2845
0036b8  e1a00800          LSL      r0,r0,#16             ;2845
0036bc  e1a00c20          LSR      r0,r0,#24             ;2845
0036c0  e5c5001d          STRB     r0,[r5,#0x1d]         ;2845
0036c4  e594000c          LDR      r0,[r4,#0xc]          ;2845
0036c8  e1a00400          LSL      r0,r0,#8              ;2845
0036cc  e1a00c20          LSR      r0,r0,#24             ;2845
0036d0  e5c5001e          STRB     r0,[r5,#0x1e]         ;2845
0036d4  e594000c          LDR      r0,[r4,#0xc]          ;2845
0036d8  e1a00c20          LSR      r0,r0,#24             ;2845
0036dc  e5c5001f          STRB     r0,[r5,#0x1f]         ;2845
0036e0  e1a00005          MOV      r0,r5                 ;2846
0036e4  e5941010          LDR      r1,[r4,#0x10]         ;2846
0036e8  ebfffffe          BL       st_clust
0036ec  ebfffffe          BL       get_fattime
0036f0  e1a06000          MOV      r6,r0                 ;2847
0036f4  e5c56016          STRB     r6,[r5,#0x16]         ;2848
0036f8  e1a00806          LSL      r0,r6,#16             ;2848
0036fc  e1a00c20          LSR      r0,r0,#24             ;2848
003700  e5c50017          STRB     r0,[r5,#0x17]         ;2848
003704  e1a00406          LSL      r0,r6,#8              ;2848
003708  e1a00c20          LSR      r0,r0,#24             ;2848
00370c  e5c50018          STRB     r0,[r5,#0x18]         ;2848
003710  e1a00c26          LSR      r0,r6,#24             ;2848
003714  e5c50019          STRB     r0,[r5,#0x19]         ;2848
003718  e3a00000          MOV      r0,#0                 ;2849
00371c  e5c50012          STRB     r0,[r5,#0x12]         ;2849
003720  e5c50013          STRB     r0,[r5,#0x13]         ;2849
003724  e5d40006          LDRB     r0,[r4,#6]            ;2850
003728  e3c00020          BIC      r0,r0,#0x20           ;2850
00372c  e5c40006          STRB     r0,[r4,#6]            ;2850
003730  e3a00001          MOV      r0,#1                 ;2851
003734  e5941000          LDR      r1,[r4,#0]            ;2851
003738  e5c10004          STRB     r0,[r1,#4]            ;2851
00373c  e5940000          LDR      r0,[r4,#0]            ;2852
003740  ebfffffe          BL       sync_fs
003744  e1a07000          MOV      r7,r0                 ;2852
                  |L1.14152|
003748  e1a01007          MOV      r1,r7                 ;2857
00374c  e5940000          LDR      r0,[r4,#0]            ;2857
003750  ebfffffe          BL       unlock_fs
003754  e1a00007          MOV      r0,r7                 ;2857
003758  eaffffc5          B        |L1.13940|
;;;2859   
                          ENDP

                  f_close PROC
;;;2868   
;;;2869   FRESULT f_close (
00375c  e92d4070          PUSH     {r4-r6,lr}
;;;2870   	FIL *fp		/* Pointer to the file object to be closed */
;;;2871   )
;;;2872   {
003760  e1a04000          MOV      r4,r0
;;;2873   	FRESULT res;
;;;2874   
;;;2875   
;;;2876   #if !_FS_READONLY
;;;2877   	res = f_sync(fp);					/* Flush cached data */
003764  e1a00004          MOV      r0,r4
003768  ebfffffe          BL       f_sync
00376c  e1a05000          MOV      r5,r0
;;;2878   	if (res == FR_OK)
003770  e3550000          CMP      r5,#0
003774  1a00000b          BNE      |L1.14248|
;;;2879   #endif
;;;2880   	{
;;;2881   		res = validate(fp);				/* Lock volume */
003778  e1a00004          MOV      r0,r4
00377c  ebfffffe          BL       validate
003780  e1a05000          MOV      r5,r0
;;;2882   		if (res == FR_OK) {
003784  e3550000          CMP      r5,#0
003788  1a000006          BNE      |L1.14248|
;;;2883   #if _FS_REENTRANT
;;;2884   			FATFS *fs = fp->fs;
00378c  e5946000          LDR      r6,[r4,#0]
;;;2885   #endif
;;;2886   #if _FS_LOCK
;;;2887   			res = dec_lock(fp->lockid);	/* Decrement file open counter */
;;;2888   			if (res == FR_OK)
;;;2889   #endif
;;;2890   				fp->fs = 0;				/* Invalidate file object */
003790  e3a00000          MOV      r0,#0
003794  e5840000          STR      r0,[r4,#0]
;;;2891   #if _FS_REENTRANT
;;;2892   			unlock_fs(fs, FR_OK);		/* Unlock volume */
003798  e3a01000          MOV      r1,#0
00379c  e1a00006          MOV      r0,r6
0037a0  ebfffffe          BL       unlock_fs
;;;2893   #endif
;;;2894   		}
0037a4  e1a00000          MOV      r0,r0
                  |L1.14248|
;;;2895   	}
;;;2896   	return res;
0037a8  e1a00005          MOV      r0,r5
;;;2897   }
0037ac  e8bd8070          POP      {r4-r6,pc}
;;;2898   
                          ENDP

                  f_chdrive PROC
;;;2907   #if _VOLUMES >= 2
;;;2908   FRESULT f_chdrive (
0037b0  e92d4031          PUSH     {r0,r4,r5,lr}
;;;2909   	const TCHAR* path		/* Drive number */
;;;2910   )
;;;2911   {
;;;2912   	int vol;
;;;2913   
;;;2914   
;;;2915   	vol = get_ldnumber(&path);
0037b4  e1a0000d          MOV      r0,sp
0037b8  ebfffffe          BL       get_ldnumber
0037bc  e1a04000          MOV      r4,r0
;;;2916   	if (vol < 0) return FR_INVALID_DRIVE;
0037c0  e3540000          CMP      r4,#0
0037c4  aa000001          BGE      |L1.14288|
0037c8  e3a0000b          MOV      r0,#0xb
                  |L1.14284|
;;;2917   
;;;2918   	CurrVol = (BYTE)vol;
;;;2919   
;;;2920   	return FR_OK;
;;;2921   }
0037cc  e8bd8038          POP      {r3-r5,pc}
                  |L1.14288|
0037d0  e51f19c4          LDR      r1,|L1.11796|
0037d4  e5c14000          STRB     r4,[r1,#0]            ;2918  ; CurrVol
0037d8  e3a00000          MOV      r0,#0                 ;2920
0037dc  eafffffa          B        |L1.14284|
;;;2922   #endif
                          ENDP

                  f_chdir PROC
;;;2924   
;;;2925   FRESULT f_chdir (
0037e0  e92d4011          PUSH     {r0,r4,lr}
;;;2926   	const TCHAR* path	/* Pointer to the directory path */
;;;2927   )
;;;2928   {
0037e4  e24ddf8d          SUB      sp,sp,#0x234
;;;2929   	FRESULT res;
;;;2930   	DIR dj;
;;;2931   	DEFINE_NAMEBUF;
;;;2932   
;;;2933   
;;;2934   	/* Get logical drive number */
;;;2935   	res = find_volume(&dj.fs, &path, 0);
0037e8  e3a02000          MOV      r2,#0
0037ec  e28d1f8d          ADD      r1,sp,#0x234
0037f0  e28d0f83          ADD      r0,sp,#0x20c
0037f4  ebfffffe          BL       find_volume
0037f8  e1a04000          MOV      r4,r0
;;;2936   	if (res == FR_OK) {
0037fc  e3540000          CMP      r4,#0
003800  1a00001d          BNE      |L1.14460|
;;;2937   		INIT_BUF(dj);
003804  e28d0c02          ADD      r0,sp,#0x200
003808  e58d0224          STR      r0,[sp,#0x224]
00380c  e58dd228          STR      sp,[sp,#0x228]
;;;2938   		res = follow_path(&dj, path);		/* Follow the path */
003810  e59d1234          LDR      r1,[sp,#0x234]
003814  e28d0f83          ADD      r0,sp,#0x20c
003818  ebfffffe          BL       follow_path
00381c  e1a04000          MOV      r4,r0
;;;2939   		FREE_BUF();
;;;2940   		if (res == FR_OK) {					/* Follow completed */
003820  e3540000          CMP      r4,#0
003824  1a000011          BNE      |L1.14448|
;;;2941   			if (!dj.dir) {
003828  e59d0220          LDR      r0,[sp,#0x220]
00382c  e3500000          CMP      r0,#0
003830  1a000003          BNE      |L1.14404|
;;;2942   				dj.fs->cdir = dj.sclust;	/* Start directory itself */
003834  e59d0214          LDR      r0,[sp,#0x214]
003838  e59d120c          LDR      r1,[sp,#0x20c]
00383c  e5810018          STR      r0,[r1,#0x18]
003840  ea00000a          B        |L1.14448|
                  |L1.14404|
;;;2943   			} else {
;;;2944   				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
003844  e59d0220          LDR      r0,[sp,#0x220]
003848  e5d0000b          LDRB     r0,[r0,#0xb]
00384c  e3100010          TST      r0,#0x10
003850  0a000005          BEQ      |L1.14444|
;;;2945   					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
003854  e59d020c          LDR      r0,[sp,#0x20c]
003858  e59d1220          LDR      r1,[sp,#0x220]
00385c  ebfffffe          BL       ld_clust
003860  e59d120c          LDR      r1,[sp,#0x20c]
003864  e5810018          STR      r0,[r1,#0x18]
003868  ea000000          B        |L1.14448|
                  |L1.14444|
;;;2946   				else
;;;2947   					res = FR_NO_PATH;		/* Reached but a file */
00386c  e3a04005          MOV      r4,#5
                  |L1.14448|
;;;2948   			}
;;;2949   		}
;;;2950   		if (res == FR_NO_FILE) res = FR_NO_PATH;
003870  e3540004          CMP      r4,#4
003874  1a000000          BNE      |L1.14460|
003878  e3a04005          MOV      r4,#5
                  |L1.14460|
;;;2951   	}
;;;2952   
;;;2953   	LEAVE_FF(dj.fs, res);
00387c  e1a01004          MOV      r1,r4
003880  e59d020c          LDR      r0,[sp,#0x20c]
003884  ebfffffe          BL       unlock_fs
003888  e1a00004          MOV      r0,r4
00388c  e28ddf8e          ADD      sp,sp,#0x238
;;;2954   }
003890  e8bd8010          POP      {r4,pc}
;;;2955   
                          ENDP

                  f_lseek PROC
;;;3040   
;;;3041   FRESULT f_lseek (
003894  e92d5ff0          PUSH     {r4-r12,lr}
;;;3042   	FIL* fp,		/* Pointer to the file object */
;;;3043   	DWORD ofs		/* File pointer from top of file */
;;;3044   )
;;;3045   {
003898  e1a04000          MOV      r4,r0
00389c  e1a06001          MOV      r6,r1
;;;3046   	FRESULT res;
;;;3047   	DWORD clst, bcs, nsect, ifptr;
;;;3048   #if _USE_FASTSEEK
;;;3049   	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;3050   #endif
;;;3051   
;;;3052   
;;;3053   	res = validate(fp);					/* Check validity of the object */
0038a0  e1a00004          MOV      r0,r4
0038a4  ebfffffe          BL       validate
0038a8  e1a0a000          MOV      r10,r0
;;;3054   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
0038ac  e35a0000          CMP      r10,#0
0038b0  0a000004          BEQ      |L1.14536|
0038b4  e1a0100a          MOV      r1,r10
0038b8  e5940000          LDR      r0,[r4,#0]
0038bc  ebfffffe          BL       unlock_fs
0038c0  e1a0000a          MOV      r0,r10
                  |L1.14532|
;;;3055   	if (fp->err)						/* Check error */
;;;3056   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;3057   
;;;3058   #if _USE_FASTSEEK
;;;3059   	if (fp->cltbl) {	/* Fast seek */
;;;3060   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;3061   			tbl = fp->cltbl;
;;;3062   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;3063   			cl = fp->sclust;			/* Top of the chain */
;;;3064   			if (cl) {
;;;3065   				do {
;;;3066   					/* Get a fragment */
;;;3067   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;3068   					do {
;;;3069   						pcl = cl; ncl++;
;;;3070   						cl = get_fat(fp->fs, cl);
;;;3071   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;3072   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3073   					} while (cl == pcl + 1);
;;;3074   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;3075   						*tbl++ = ncl; *tbl++ = tcl;
;;;3076   					}
;;;3077   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;3078   			}
;;;3079   			*fp->cltbl = ulen;	/* Number of items used */
;;;3080   			if (ulen <= tlen)
;;;3081   				*tbl = 0;		/* Terminate table */
;;;3082   			else
;;;3083   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;3084   
;;;3085   		} else {						/* Fast seek */
;;;3086   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;3087   				ofs = fp->fsize;
;;;3088   			fp->fptr = ofs;				/* Set file pointer */
;;;3089   			if (ofs) {
;;;3090   				fp->clust = clmt_clust(fp, ofs - 1);
;;;3091   				dsc = clust2sect(fp->fs, fp->clust);
;;;3092   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;3093   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;3094   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;3095   #if !_FS_TINY
;;;3096   #if !_FS_READONLY
;;;3097   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;3098   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3099   							ABORT(fp->fs, FR_DISK_ERR);
;;;3100   						fp->flag &= ~FA__DIRTY;
;;;3101   					}
;;;3102   #endif
;;;3103   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;3104   						ABORT(fp->fs, FR_DISK_ERR);
;;;3105   #endif
;;;3106   					fp->dsect = dsc;
;;;3107   				}
;;;3108   			}
;;;3109   		}
;;;3110   	} else
;;;3111   #endif
;;;3112   
;;;3113   	/* Normal Seek */
;;;3114   	{
;;;3115   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;3116   #if !_FS_READONLY
;;;3117   			 && !(fp->flag & FA_WRITE)
;;;3118   #endif
;;;3119   			) ofs = fp->fsize;
;;;3120   
;;;3121   		ifptr = fp->fptr;
;;;3122   		fp->fptr = nsect = 0;
;;;3123   		if (ofs) {
;;;3124   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;3125   			if (ifptr > 0 &&
;;;3126   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;3127   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;3128   				ofs -= fp->fptr;
;;;3129   				clst = fp->clust;
;;;3130   			} else {									/* When seek to back cluster, */
;;;3131   				clst = fp->sclust;						/* start from the first cluster */
;;;3132   #if !_FS_READONLY
;;;3133   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;3134   					clst = create_chain(fp->fs, 0);
;;;3135   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;3136   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3137   					fp->sclust = clst;
;;;3138   				}
;;;3139   #endif
;;;3140   				fp->clust = clst;
;;;3141   			}
;;;3142   			if (clst != 0) {
;;;3143   				while (ofs > bcs) {						/* Cluster following loop */
;;;3144   #if !_FS_READONLY
;;;3145   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;3146   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;3147   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;3148   							ofs = bcs; break;
;;;3149   						}
;;;3150   					} else
;;;3151   #endif
;;;3152   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;3153   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3154   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;3155   					fp->clust = clst;
;;;3156   					fp->fptr += bcs;
;;;3157   					ofs -= bcs;
;;;3158   				}
;;;3159   				fp->fptr += ofs;
;;;3160   				if (ofs % SS(fp->fs)) {
;;;3161   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;3162   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;3163   					nsect += ofs / SS(fp->fs);
;;;3164   				}
;;;3165   			}
;;;3166   		}
;;;3167   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3168   #if !_FS_TINY
;;;3169   #if !_FS_READONLY
;;;3170   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3171   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3172   					ABORT(fp->fs, FR_DISK_ERR);
;;;3173   				fp->flag &= ~FA__DIRTY;
;;;3174   			}
;;;3175   #endif
;;;3176   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;3177   				ABORT(fp->fs, FR_DISK_ERR);
;;;3178   #endif
;;;3179   			fp->dsect = nsect;
;;;3180   		}
;;;3181   #if !_FS_READONLY
;;;3182   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3183   			fp->fsize = fp->fptr;
;;;3184   			fp->flag |= FA__WRITTEN;
;;;3185   		}
;;;3186   #endif
;;;3187   	}
;;;3188   
;;;3189   	LEAVE_FF(fp->fs, res);
;;;3190   }
0038c4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.14536|
0038c8  e5d40007          LDRB     r0,[r4,#7]            ;3055
0038cc  e3500000          CMP      r0,#0                 ;3055
0038d0  0a000004          BEQ      |L1.14568|
0038d4  e5d41007          LDRB     r1,[r4,#7]            ;3056
0038d8  e5940000          LDR      r0,[r4,#0]            ;3056
0038dc  ebfffffe          BL       unlock_fs
0038e0  e5d40007          LDRB     r0,[r4,#7]            ;3056
0038e4  eafffff6          B        |L1.14532|
                  |L1.14568|
0038e8  e594000c          LDR      r0,[r4,#0xc]          ;3115
0038ec  e1500006          CMP      r0,r6                 ;3115
0038f0  2a000003          BCS      |L1.14596|
0038f4  e5d40006          LDRB     r0,[r4,#6]            ;3117
0038f8  e3100002          TST      r0,#2                 ;3117
0038fc  1a000000          BNE      |L1.14596|
003900  e594600c          LDR      r6,[r4,#0xc]          ;3119
                  |L1.14596|
003904  e5949008          LDR      r9,[r4,#8]            ;3121
003908  e3a08000          MOV      r8,#0                 ;3122
00390c  e5848008          STR      r8,[r4,#8]            ;3122
003910  e3560000          CMP      r6,#0                 ;3123
003914  0a00007d          BEQ      |L1.15120|
003918  e5940000          LDR      r0,[r4,#0]            ;3124
00391c  e5d00002          LDRB     r0,[r0,#2]            ;3124
003920  e5941000          LDR      r1,[r4,#0]            ;3124
003924  e1d110ba          LDRH     r1,[r1,#0xa]          ;3124
003928  e0070190          MUL      r7,r0,r1              ;3124
00392c  e3590000          CMP      r9,#0                 ;3125
003930  0a000010          BEQ      |L1.14712|
003934  e2460001          SUB      r0,r6,#1              ;3126
003938  e1a01007          MOV      r1,r7                 ;3126
00393c  ebfffffe          BL       __aeabi_uidivmod
003940  e1a0b000          MOV      r11,r0                ;3126
003944  e2490001          SUB      r0,r9,#1              ;3126
003948  e1a01007          MOV      r1,r7                 ;3126
00394c  ebfffffe          BL       __aeabi_uidivmod
003950  e15b0000          CMP      r11,r0                ;3126
003954  3a000007          BCC      |L1.14712|
003958  e2490001          SUB      r0,r9,#1              ;3127
00395c  e2471001          SUB      r1,r7,#1              ;3127
003960  e1c00001          BIC      r0,r0,r1              ;3127
003964  e5840008          STR      r0,[r4,#8]            ;3127
003968  e5940008          LDR      r0,[r4,#8]            ;3128
00396c  e0466000          SUB      r6,r6,r0              ;3128
003970  e5945014          LDR      r5,[r4,#0x14]         ;3129
003974  ea00001a          B        |L1.14820|
                  |L1.14712|
003978  e5945010          LDR      r5,[r4,#0x10]         ;3131
00397c  e3550000          CMP      r5,#0                 ;3133
003980  1a000016          BNE      |L1.14816|
003984  e3a01000          MOV      r1,#0                 ;3134
003988  e5940000          LDR      r0,[r4,#0]            ;3134
00398c  ebfffffe          BL       create_chain
003990  e1a05000          MOV      r5,r0                 ;3134
003994  e3550001          CMP      r5,#1                 ;3135
003998  1a000006          BNE      |L1.14776|
00399c  e3a00002          MOV      r0,#2                 ;3135
0039a0  e5c40007          STRB     r0,[r4,#7]            ;3135
0039a4  e3a01002          MOV      r1,#2                 ;3135
0039a8  e5940000          LDR      r0,[r4,#0]            ;3135
0039ac  ebfffffe          BL       unlock_fs
0039b0  e3a00002          MOV      r0,#2                 ;3135
0039b4  eaffffc2          B        |L1.14532|
                  |L1.14776|
0039b8  e3750001          CMN      r5,#1                 ;3136
0039bc  1a000006          BNE      |L1.14812|
0039c0  e3a00001          MOV      r0,#1                 ;3136
0039c4  e5c40007          STRB     r0,[r4,#7]            ;3136
0039c8  e3a01001          MOV      r1,#1                 ;3136
0039cc  e5940000          LDR      r0,[r4,#0]            ;3136
0039d0  ebfffffe          BL       unlock_fs
0039d4  e3a00001          MOV      r0,#1                 ;3136
0039d8  eaffffb9          B        |L1.14532|
                  |L1.14812|
0039dc  e5845010          STR      r5,[r4,#0x10]         ;3137
                  |L1.14816|
0039e0  e5845014          STR      r5,[r4,#0x14]         ;3140
                  |L1.14820|
0039e4  e3550000          CMP      r5,#0                 ;3142
0039e8  0a000048          BEQ      |L1.15120|
0039ec  ea000029          B        |L1.15000|
                  |L1.14832|
0039f0  e5d40006          LDRB     r0,[r4,#6]            ;3145
0039f4  e3100002          TST      r0,#2                 ;3145
0039f8  0a000007          BEQ      |L1.14876|
0039fc  e1a01005          MOV      r1,r5                 ;3146
003a00  e5940000          LDR      r0,[r4,#0]            ;3146
003a04  ebfffffe          BL       create_chain
003a08  e1a05000          MOV      r5,r0                 ;3146
003a0c  e3550000          CMP      r5,#0                 ;3147
003a10  1a000005          BNE      |L1.14892|
003a14  e1a06007          MOV      r6,r7                 ;3148
003a18  ea000020          B        |L1.15008|
                  |L1.14876|
003a1c  e1a01005          MOV      r1,r5                 ;3152
003a20  e5940000          LDR      r0,[r4,#0]            ;3152
003a24  ebfffffe          BL       get_fat
003a28  e1a05000          MOV      r5,r0                 ;3152
                  |L1.14892|
003a2c  e3750001          CMN      r5,#1                 ;3153
003a30  1a000006          BNE      |L1.14928|
003a34  e3a00001          MOV      r0,#1                 ;3153
003a38  e5c40007          STRB     r0,[r4,#7]            ;3153
003a3c  e3a01001          MOV      r1,#1                 ;3153
003a40  e5940000          LDR      r0,[r4,#0]            ;3153
003a44  ebfffffe          BL       unlock_fs
003a48  e3a00001          MOV      r0,#1                 ;3153
003a4c  eaffff9c          B        |L1.14532|
                  |L1.14928|
003a50  e3550001          CMP      r5,#1                 ;3154
003a54  9a000003          BLS      |L1.14952|
003a58  e5940000          LDR      r0,[r4,#0]            ;3154
003a5c  e590001c          LDR      r0,[r0,#0x1c]         ;3154
003a60  e1500005          CMP      r0,r5                 ;3154
003a64  8a000006          BHI      |L1.14980|
                  |L1.14952|
003a68  e3a00002          MOV      r0,#2                 ;3154
003a6c  e5c40007          STRB     r0,[r4,#7]            ;3154
003a70  e3a01002          MOV      r1,#2                 ;3154
003a74  e5940000          LDR      r0,[r4,#0]            ;3154
003a78  ebfffffe          BL       unlock_fs
003a7c  e3a00002          MOV      r0,#2                 ;3154
003a80  eaffff8f          B        |L1.14532|
                  |L1.14980|
003a84  e5845014          STR      r5,[r4,#0x14]         ;3155
003a88  e5940008          LDR      r0,[r4,#8]            ;3156
003a8c  e0800007          ADD      r0,r0,r7              ;3156
003a90  e5840008          STR      r0,[r4,#8]            ;3156
003a94  e0466007          SUB      r6,r6,r7              ;3157
                  |L1.15000|
003a98  e1560007          CMP      r6,r7                 ;3143
003a9c  8affffd3          BHI      |L1.14832|
                  |L1.15008|
003aa0  e1a00000          MOV      r0,r0                 ;3148
003aa4  e5940008          LDR      r0,[r4,#8]            ;3159
003aa8  e0800006          ADD      r0,r0,r6              ;3159
003aac  e5840008          STR      r0,[r4,#8]            ;3159
003ab0  e5940000          LDR      r0,[r4,#0]            ;3160
003ab4  e1d010ba          LDRH     r1,[r0,#0xa]          ;3160
003ab8  e1a00006          MOV      r0,r6                 ;3160
003abc  ebfffffe          BL       __aeabi_uidivmod
003ac0  e3510000          CMP      r1,#0                 ;3160
003ac4  0a000011          BEQ      |L1.15120|
003ac8  e1a01005          MOV      r1,r5                 ;3161
003acc  e5940000          LDR      r0,[r4,#0]            ;3161
003ad0  ebfffffe          BL       clust2sect
003ad4  e1a08000          MOV      r8,r0                 ;3161
003ad8  e3580000          CMP      r8,#0                 ;3162
003adc  1a000006          BNE      |L1.15100|
003ae0  e3a00002          MOV      r0,#2                 ;3162
003ae4  e5c40007          STRB     r0,[r4,#7]            ;3162
003ae8  e3a01002          MOV      r1,#2                 ;3162
003aec  e5940000          LDR      r0,[r4,#0]            ;3162
003af0  ebfffffe          BL       unlock_fs
003af4  e3a00002          MOV      r0,#2                 ;3162
003af8  eaffff71          B        |L1.14532|
                  |L1.15100|
003afc  e5940000          LDR      r0,[r4,#0]            ;3163
003b00  e1d010ba          LDRH     r1,[r0,#0xa]          ;3163
003b04  e1a00006          MOV      r0,r6                 ;3163
003b08  ebfffffe          BL       __aeabi_uidivmod
003b0c  e0888000          ADD      r8,r8,r0              ;3163
                  |L1.15120|
003b10  e5942000          LDR      r2,[r4,#0]            ;3167
003b14  e1d210ba          LDRH     r1,[r2,#0xa]          ;3167
003b18  e5940008          LDR      r0,[r4,#8]            ;3167
003b1c  ebfffffe          BL       __aeabi_uidivmod
003b20  e3510000          CMP      r1,#0                 ;3167
003b24  0a000027          BEQ      |L1.15304|
003b28  e5940018          LDR      r0,[r4,#0x18]         ;3167
003b2c  e1500008          CMP      r0,r8                 ;3167
003b30  0a000024          BEQ      |L1.15304|
003b34  e5d40006          LDRB     r0,[r4,#6]            ;3170
003b38  e3100040          TST      r0,#0x40              ;3170
003b3c  0a000011          BEQ      |L1.15240|
003b40  e5941000          LDR      r1,[r4,#0]            ;3171
003b44  e5942018          LDR      r2,[r4,#0x18]         ;3171
003b48  e5d10001          LDRB     r0,[r1,#1]            ;3171
003b4c  e3a03001          MOV      r3,#1                 ;3171
003b50  e2841024          ADD      r1,r4,#0x24           ;3171
003b54  ebfffffe          BL       disk_write
003b58  e3500000          CMP      r0,#0                 ;3171
003b5c  0a000006          BEQ      |L1.15228|
003b60  e3a00001          MOV      r0,#1                 ;3172
003b64  e5c40007          STRB     r0,[r4,#7]            ;3172
003b68  e3a01001          MOV      r1,#1                 ;3172
003b6c  e5940000          LDR      r0,[r4,#0]            ;3172
003b70  ebfffffe          BL       unlock_fs
003b74  e3a00001          MOV      r0,#1                 ;3172
003b78  eaffff51          B        |L1.14532|
                  |L1.15228|
003b7c  e5d40006          LDRB     r0,[r4,#6]            ;3173
003b80  e3c00040          BIC      r0,r0,#0x40           ;3173
003b84  e5c40006          STRB     r0,[r4,#6]            ;3173
                  |L1.15240|
003b88  e5941000          LDR      r1,[r4,#0]            ;3176
003b8c  e5d10001          LDRB     r0,[r1,#1]            ;3176
003b90  e3a03001          MOV      r3,#1                 ;3176
003b94  e1a02008          MOV      r2,r8                 ;3176
003b98  e2841024          ADD      r1,r4,#0x24           ;3176
003b9c  ebfffffe          BL       disk_read
003ba0  e3500000          CMP      r0,#0                 ;3176
003ba4  0a000006          BEQ      |L1.15300|
003ba8  e3a00001          MOV      r0,#1                 ;3177
003bac  e5c40007          STRB     r0,[r4,#7]            ;3177
003bb0  e3a01001          MOV      r1,#1                 ;3177
003bb4  e5940000          LDR      r0,[r4,#0]            ;3177
003bb8  ebfffffe          BL       unlock_fs
003bbc  e3a00001          MOV      r0,#1                 ;3177
003bc0  eaffff3f          B        |L1.14532|
                  |L1.15300|
003bc4  e5848018          STR      r8,[r4,#0x18]         ;3179
                  |L1.15304|
003bc8  e5940008          LDR      r0,[r4,#8]            ;3182
003bcc  e594100c          LDR      r1,[r4,#0xc]          ;3182
003bd0  e1500001          CMP      r0,r1                 ;3182
003bd4  9a000004          BLS      |L1.15340|
003bd8  e5940008          LDR      r0,[r4,#8]            ;3183
003bdc  e584000c          STR      r0,[r4,#0xc]          ;3183
003be0  e5d40006          LDRB     r0,[r4,#6]            ;3184
003be4  e3800020          ORR      r0,r0,#0x20           ;3184
003be8  e5c40006          STRB     r0,[r4,#6]            ;3184
                  |L1.15340|
003bec  e1a0100a          MOV      r1,r10                ;3189
003bf0  e5940000          LDR      r0,[r4,#0]            ;3189
003bf4  ebfffffe          BL       unlock_fs
003bf8  e1a0000a          MOV      r0,r10                ;3189
003bfc  eaffff30          B        |L1.14532|
;;;3191   
                          ENDP

                  f_opendir PROC
;;;3198   
;;;3199   FRESULT f_opendir (
003c00  e92d4033          PUSH     {r0,r1,r4,r5,lr}
;;;3200   	DIR* dp,			/* Pointer to directory object to create */
;;;3201   	const TCHAR* path	/* Pointer to the directory path */
;;;3202   )
;;;3203   {
003c04  e24ddf85          SUB      sp,sp,#0x214
003c08  e1a04000          MOV      r4,r0
;;;3204   	FRESULT res;
;;;3205   	FATFS* fs;
;;;3206   	DEFINE_NAMEBUF;
;;;3207   
;;;3208   
;;;3209   	if (!dp) return FR_INVALID_OBJECT;
003c0c  e3540000          CMP      r4,#0
003c10  1a000002          BNE      |L1.15392|
003c14  e3a00009          MOV      r0,#9
                  |L1.15384|
003c18  e28ddf87          ADD      sp,sp,#0x21c
;;;3210   
;;;3211   	/* Get logical drive number */
;;;3212   	res = find_volume(&fs, &path, 0);
;;;3213   	if (res == FR_OK) {
;;;3214   		dp->fs = fs;
;;;3215   		INIT_BUF(*dp);
;;;3216   		res = follow_path(dp, path);			/* Follow the path to the directory */
;;;3217   		FREE_BUF();
;;;3218   		if (res == FR_OK) {						/* Follow completed */
;;;3219   			if (dp->dir) {						/* It is not the origin directory itself */
;;;3220   				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
;;;3221   					dp->sclust = ld_clust(fs, dp->dir);
;;;3222   				else							/* The object is a file */
;;;3223   					res = FR_NO_PATH;
;;;3224   			}
;;;3225   			if (res == FR_OK) {
;;;3226   				dp->id = fs->id;
;;;3227   				res = dir_sdi(dp, 0);			/* Rewind directory */
;;;3228   #if _FS_LOCK
;;;3229   				if (res == FR_OK) {
;;;3230   					if (dp->sclust) {
;;;3231   						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
;;;3232   						if (!dp->lockid)
;;;3233   							res = FR_TOO_MANY_OPEN_FILES;
;;;3234   					} else {
;;;3235   						dp->lockid = 0;	/* Root directory need not to be locked */
;;;3236   					}
;;;3237   				}
;;;3238   #endif
;;;3239   			}
;;;3240   		}
;;;3241   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3242   	}
;;;3243   	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
;;;3244   
;;;3245   	LEAVE_FF(fs, res);
;;;3246   }
003c1c  e8bd8030          POP      {r4,r5,pc}
                  |L1.15392|
003c20  e3a02000          MOV      r2,#0                 ;3212
003c24  e28d1f86          ADD      r1,sp,#0x218          ;3212
003c28  e28d0e21          ADD      r0,sp,#0x210          ;3212
003c2c  ebfffffe          BL       find_volume
003c30  e1a05000          MOV      r5,r0                 ;3212
003c34  e3550000          CMP      r5,#0                 ;3213
003c38  1a000024          BNE      |L1.15568|
003c3c  e59d0210          LDR      r0,[sp,#0x210]        ;3214
003c40  e5840000          STR      r0,[r4,#0]            ;3214
003c44  e28d0f81          ADD      r0,sp,#0x204          ;3215
003c48  e5840018          STR      r0,[r4,#0x18]         ;3215
003c4c  e28d0004          ADD      r0,sp,#4              ;3215
003c50  e584001c          STR      r0,[r4,#0x1c]         ;3215
003c54  e1a00004          MOV      r0,r4                 ;3216
003c58  e59d1218          LDR      r1,[sp,#0x218]        ;3216
003c5c  ebfffffe          BL       follow_path
003c60  e1a05000          MOV      r5,r0                 ;3216
003c64  e3550000          CMP      r5,#0                 ;3218
003c68  1a000015          BNE      |L1.15556|
003c6c  e5940014          LDR      r0,[r4,#0x14]         ;3219
003c70  e3500000          CMP      r0,#0                 ;3219
003c74  0a000009          BEQ      |L1.15520|
003c78  e5940014          LDR      r0,[r4,#0x14]         ;3220
003c7c  e5d0000b          LDRB     r0,[r0,#0xb]          ;3220
003c80  e3100010          TST      r0,#0x10              ;3220
003c84  0a000004          BEQ      |L1.15516|
003c88  e5941014          LDR      r1,[r4,#0x14]         ;3221
003c8c  e59d0210          LDR      r0,[sp,#0x210]        ;3221
003c90  ebfffffe          BL       ld_clust
003c94  e5840008          STR      r0,[r4,#8]            ;3221
003c98  ea000000          B        |L1.15520|
                  |L1.15516|
003c9c  e3a05005          MOV      r5,#5                 ;3223
                  |L1.15520|
003ca0  e3550000          CMP      r5,#0                 ;3225
003ca4  1a000006          BNE      |L1.15556|
003ca8  e59d0210          LDR      r0,[sp,#0x210]        ;3226
003cac  e1d000b6          LDRH     r0,[r0,#6]            ;3226
003cb0  e1c400b4          STRH     r0,[r4,#4]            ;3226
003cb4  e3a01000          MOV      r1,#0                 ;3227
003cb8  e1a00004          MOV      r0,r4                 ;3227
003cbc  ebfffffe          BL       dir_sdi
003cc0  e1a05000          MOV      r5,r0                 ;3227
                  |L1.15556|
003cc4  e3550004          CMP      r5,#4                 ;3241
003cc8  1a000000          BNE      |L1.15568|
003ccc  e3a05005          MOV      r5,#5                 ;3241
                  |L1.15568|
003cd0  e3550000          CMP      r5,#0                 ;3243
003cd4  0a000001          BEQ      |L1.15584|
003cd8  e3a00000          MOV      r0,#0                 ;3243
003cdc  e5840000          STR      r0,[r4,#0]            ;3243
                  |L1.15584|
003ce0  e1a01005          MOV      r1,r5                 ;3245
003ce4  e59d0210          LDR      r0,[sp,#0x210]        ;3245
003ce8  ebfffffe          BL       unlock_fs
003cec  e1a00005          MOV      r0,r5                 ;3245
003cf0  eaffffc8          B        |L1.15384|
;;;3247   
                          ENDP

                  f_closedir PROC
;;;3254   
;;;3255   FRESULT f_closedir (
003cf4  e92d4070          PUSH     {r4-r6,lr}
;;;3256   	DIR *dp		/* Pointer to the directory object to be closed */
;;;3257   )
;;;3258   {
003cf8  e1a04000          MOV      r4,r0
;;;3259   	FRESULT res;
;;;3260   
;;;3261   
;;;3262   	res = validate(dp);
003cfc  e1a00004          MOV      r0,r4
003d00  ebfffffe          BL       validate
003d04  e1a05000          MOV      r5,r0
;;;3263   	if (res == FR_OK) {
003d08  e3550000          CMP      r5,#0
003d0c  1a000006          BNE      |L1.15660|
;;;3264   #if _FS_REENTRANT
;;;3265   		FATFS *fs = dp->fs;
003d10  e5946000          LDR      r6,[r4,#0]
;;;3266   #endif
;;;3267   #if _FS_LOCK
;;;3268   		if (dp->lockid)				/* Decrement sub-directory open counter */
;;;3269   			res = dec_lock(dp->lockid);
;;;3270   		if (res == FR_OK)
;;;3271   #endif
;;;3272   			dp->fs = 0;				/* Invalidate directory object */
003d14  e3a00000          MOV      r0,#0
003d18  e5840000          STR      r0,[r4,#0]
;;;3273   #if _FS_REENTRANT
;;;3274   		unlock_fs(fs, FR_OK);		/* Unlock volume */
003d1c  e3a01000          MOV      r1,#0
003d20  e1a00006          MOV      r0,r6
003d24  ebfffffe          BL       unlock_fs
;;;3275   #endif
;;;3276   	}
003d28  e1a00000          MOV      r0,r0
                  |L1.15660|
;;;3277   	return res;
003d2c  e1a00005          MOV      r0,r5
;;;3278   }
003d30  e8bd8070          POP      {r4-r6,pc}
;;;3279   
                          ENDP

                  f_readdir PROC
;;;3286   
;;;3287   FRESULT f_readdir (
003d34  e92d4070          PUSH     {r4-r6,lr}
;;;3288   	DIR* dp,			/* Pointer to the open directory object */
;;;3289   	FILINFO* fno		/* Pointer to file information to return */
;;;3290   )
;;;3291   {
003d38  e24dde21          SUB      sp,sp,#0x210
003d3c  e1a04000          MOV      r4,r0
003d40  e1a06001          MOV      r6,r1
;;;3292   	FRESULT res;
;;;3293   	DEFINE_NAMEBUF;
;;;3294   
;;;3295   
;;;3296   	res = validate(dp);						/* Check validity of the object */
003d44  e1a00004          MOV      r0,r4
003d48  ebfffffe          BL       validate
003d4c  e1a05000          MOV      r5,r0
;;;3297   	if (res == FR_OK) {
003d50  e3550000          CMP      r5,#0
003d54  1a000021          BNE      |L1.15840|
;;;3298   		if (!fno) {
003d58  e3560000          CMP      r6,#0
003d5c  1a000004          BNE      |L1.15732|
;;;3299   			res = dir_sdi(dp, 0);			/* Rewind the directory object */
003d60  e3a01000          MOV      r1,#0
003d64  e1a00004          MOV      r0,r4
003d68  ebfffffe          BL       dir_sdi
003d6c  e1a05000          MOV      r5,r0
003d70  ea00001a          B        |L1.15840|
                  |L1.15732|
;;;3300   		} else {
;;;3301   			INIT_BUF(*dp);
003d74  e28d0f81          ADD      r0,sp,#0x204
003d78  e5840018          STR      r0,[r4,#0x18]
003d7c  e28d0004          ADD      r0,sp,#4
003d80  e584001c          STR      r0,[r4,#0x1c]
;;;3302   			res = dir_read(dp, 0);			/* Read an item */
003d84  e3a01000          MOV      r1,#0
003d88  e1a00004          MOV      r0,r4
003d8c  ebfffffe          BL       dir_read
003d90  e1a05000          MOV      r5,r0
;;;3303   			if (res == FR_NO_FILE) {		/* Reached end of directory */
003d94  e3550004          CMP      r5,#4
003d98  1a000002          BNE      |L1.15784|
;;;3304   				dp->sect = 0;
003d9c  e3a00000          MOV      r0,#0
003da0  e5840010          STR      r0,[r4,#0x10]
;;;3305   				res = FR_OK;
003da4  e3a05000          MOV      r5,#0
                  |L1.15784|
;;;3306   			}
;;;3307   			if (res == FR_OK) {				/* A valid entry is found */
003da8  e3550000          CMP      r5,#0
003dac  1a00000b          BNE      |L1.15840|
;;;3308   				get_fileinfo(dp, fno);		/* Get the object information */
003db0  e1a01006          MOV      r1,r6
003db4  e1a00004          MOV      r0,r4
003db8  ebfffffe          BL       get_fileinfo
;;;3309   				res = dir_next(dp, 0);		/* Increment index for next */
003dbc  e3a01000          MOV      r1,#0
003dc0  e1a00004          MOV      r0,r4
003dc4  ebfffffe          BL       dir_next
003dc8  e1a05000          MOV      r5,r0
;;;3310   				if (res == FR_NO_FILE) {
003dcc  e3550004          CMP      r5,#4
003dd0  1a000002          BNE      |L1.15840|
;;;3311   					dp->sect = 0;
003dd4  e3a00000          MOV      r0,#0
003dd8  e5840010          STR      r0,[r4,#0x10]
;;;3312   					res = FR_OK;
003ddc  e3a05000          MOV      r5,#0
                  |L1.15840|
;;;3313   				}
;;;3314   			}
;;;3315   			FREE_BUF();
;;;3316   		}
;;;3317   	}
;;;3318   
;;;3319   	LEAVE_FF(dp->fs, res);
003de0  e1a01005          MOV      r1,r5
003de4  e5940000          LDR      r0,[r4,#0]
003de8  ebfffffe          BL       unlock_fs
003dec  e1a00005          MOV      r0,r5
003df0  e28dde21          ADD      sp,sp,#0x210
;;;3320   }
003df4  e8bd8070          POP      {r4-r6,pc}
;;;3321   
                          ENDP

                  f_findnext PROC
;;;3328   
;;;3329   FRESULT f_findnext (
003df8  e92d4070          PUSH     {r4-r6,lr}
;;;3330   	DIR* dp,		/* Pointer to the open directory object */
;;;3331   	FILINFO* fno	/* Pointer to the file information structure */
;;;3332   )
;;;3333   {
003dfc  e1a05000          MOV      r5,r0
003e00  e1a04001          MOV      r4,r1
;;;3334   	FRESULT res;
;;;3335   
;;;3336   
;;;3337   	for (;;) {
003e04  e1a00000          MOV      r0,r0
                  |L1.15880|
;;;3338   		res = f_readdir(dp, fno);		/* Get a directory item */
003e08  e1a01004          MOV      r1,r4
003e0c  e1a00005          MOV      r0,r5
003e10  ebfffffe          BL       f_readdir
003e14  e1a06000          MOV      r6,r0
;;;3339   		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
003e18  e3560000          CMP      r6,#0
003e1c  1a000004          BNE      |L1.15924|
003e20  e3540000          CMP      r4,#0
003e24  0a000002          BEQ      |L1.15924|
003e28  e5d40009          LDRB     r0,[r4,#9]
003e2c  e3500000          CMP      r0,#0
003e30  1a000000          BNE      |L1.15928|
                  |L1.15924|
003e34  ea000012          B        |L1.16004|
                  |L1.15928|
;;;3340   #if _USE_LFN
;;;3341   		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist */
003e38  e5940018          LDR      r0,[r4,#0x18]
003e3c  e3500000          CMP      r0,#0
003e40  0a000007          BEQ      |L1.15972|
003e44  e5941018          LDR      r1,[r4,#0x18]
003e48  e3a03000          MOV      r3,#0
003e4c  e1a02003          MOV      r2,r3
003e50  e5950024          LDR      r0,[r5,#0x24]
003e54  ebfffffe          BL       pattern_matching
003e58  e3500000          CMP      r0,#0
003e5c  0a000000          BEQ      |L1.15972|
003e60  ea000007          B        |L1.16004|
                  |L1.15972|
;;;3342   #endif
;;;3343   		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
003e64  e3a03000          MOV      r3,#0
003e68  e1a02003          MOV      r2,r3
003e6c  e2841009          ADD      r1,r4,#9
003e70  e5950024          LDR      r0,[r5,#0x24]
003e74  ebfffffe          BL       pattern_matching
003e78  e3500000          CMP      r0,#0
003e7c  0affffe1          BEQ      |L1.15880|
003e80  e1a00000          MOV      r0,r0
                  |L1.16004|
003e84  e1a00000          MOV      r0,r0                 ;3339
;;;3344   	}
;;;3345   	return res;
003e88  e1a00006          MOV      r0,r6
;;;3346   
;;;3347   }
003e8c  e8bd8070          POP      {r4-r6,pc}
;;;3348   
                          ENDP

                  f_findfirst PROC
;;;3354   
;;;3355   FRESULT f_findfirst (
003e90  e92d41f0          PUSH     {r4-r8,lr}
;;;3356   	DIR* dp,				/* Pointer to the blank directory object */
;;;3357   	FILINFO* fno,			/* Pointer to the file information structure */
;;;3358   	const TCHAR* path,		/* Pointer to the directory to open */
;;;3359   	const TCHAR* pattern	/* Pointer to the matching pattern */
;;;3360   )
;;;3361   {
003e94  e1a04000          MOV      r4,r0
003e98  e1a08001          MOV      r8,r1
003e9c  e1a05002          MOV      r5,r2
003ea0  e1a06003          MOV      r6,r3
;;;3362   	FRESULT res;
;;;3363   
;;;3364   
;;;3365   	dp->pat = pattern;		/* Save pointer to pattern string */
003ea4  e5846024          STR      r6,[r4,#0x24]
;;;3366   	res = f_opendir(dp, path);		/* Open the target directory */
003ea8  e1a01005          MOV      r1,r5
003eac  e1a00004          MOV      r0,r4
003eb0  ebfffffe          BL       f_opendir
003eb4  e1a07000          MOV      r7,r0
;;;3367   	if (res == FR_OK)
003eb8  e3570000          CMP      r7,#0
003ebc  1a000003          BNE      |L1.16080|
;;;3368   		res = f_findnext(dp, fno);	/* Find the first item */
003ec0  e1a01008          MOV      r1,r8
003ec4  e1a00004          MOV      r0,r4
003ec8  ebfffffe          BL       f_findnext
003ecc  e1a07000          MOV      r7,r0
                  |L1.16080|
;;;3369   	return res;
003ed0  e1a00007          MOV      r0,r7
;;;3370   }
003ed4  e8bd81f0          POP      {r4-r8,pc}
;;;3371   
                          ENDP

                  f_stat PROC
;;;3380   
;;;3381   FRESULT f_stat (
003ed8  e92d4033          PUSH     {r0,r1,r4,r5,lr}
;;;3382   	const TCHAR* path,	/* Pointer to the file path */
;;;3383   	FILINFO* fno		/* Pointer to file information to return */
;;;3384   )
;;;3385   {
003edc  e24ddf8d          SUB      sp,sp,#0x234
003ee0  e1a05001          MOV      r5,r1
;;;3386   	FRESULT res;
;;;3387   	DIR dj;
;;;3388   	DEFINE_NAMEBUF;
;;;3389   
;;;3390   
;;;3391   	/* Get logical drive number */
;;;3392   	res = find_volume(&dj.fs, &path, 0);
003ee4  e3a02000          MOV      r2,#0
003ee8  e28d1f8d          ADD      r1,sp,#0x234
003eec  e28d0f83          ADD      r0,sp,#0x20c
003ef0  ebfffffe          BL       find_volume
003ef4  e1a04000          MOV      r4,r0
;;;3393   	if (res == FR_OK) {
003ef8  e3540000          CMP      r4,#0
003efc  1a000014          BNE      |L1.16212|
;;;3394   		INIT_BUF(dj);
003f00  e28d0c02          ADD      r0,sp,#0x200
003f04  e58d0224          STR      r0,[sp,#0x224]
003f08  e58dd228          STR      sp,[sp,#0x228]
;;;3395   		res = follow_path(&dj, path);	/* Follow the file path */
003f0c  e59d1234          LDR      r1,[sp,#0x234]
003f10  e28d0f83          ADD      r0,sp,#0x20c
003f14  ebfffffe          BL       follow_path
003f18  e1a04000          MOV      r4,r0
;;;3396   		if (res == FR_OK) {				/* Follow completed */
003f1c  e3540000          CMP      r4,#0
003f20  1a00000b          BNE      |L1.16212|
;;;3397   			if (dj.dir) {		/* Found an object */
003f24  e59d0220          LDR      r0,[sp,#0x220]
003f28  e3500000          CMP      r0,#0
003f2c  0a000005          BEQ      |L1.16200|
;;;3398   				if (fno) get_fileinfo(&dj, fno);
003f30  e3550000          CMP      r5,#0
003f34  0a000006          BEQ      |L1.16212|
003f38  e1a01005          MOV      r1,r5
003f3c  e28d0f83          ADD      r0,sp,#0x20c
003f40  ebfffffe          BL       get_fileinfo
003f44  ea000002          B        |L1.16212|
                  |L1.16200|
;;;3399   			} else {			/* It is root directory */
;;;3400                   sysprintf("FR_INVALID_NAME : 3\n\r");
003f48  e28f0f76          ADR      r0,|L1.16680|
003f4c  ebfffffe          BL       sysprintf
;;;3401   				res = FR_INVALID_NAME;
003f50  e3a04006          MOV      r4,#6
                  |L1.16212|
;;;3402   			}
;;;3403   		}
;;;3404   		FREE_BUF();
;;;3405   	}
;;;3406   
;;;3407   	LEAVE_FF(dj.fs, res);
003f54  e1a01004          MOV      r1,r4
003f58  e59d020c          LDR      r0,[sp,#0x20c]
003f5c  ebfffffe          BL       unlock_fs
003f60  e1a00004          MOV      r0,r4
003f64  e28ddf8f          ADD      sp,sp,#0x23c
;;;3408   }
003f68  e8bd8030          POP      {r4,r5,pc}
;;;3409   
                          ENDP

                  f_getfree PROC
;;;3416   
;;;3417   FRESULT f_getfree (
003f6c  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3418   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3419   	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
;;;3420   	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3421   )
;;;3422   {
003f70  e24dd008          SUB      sp,sp,#8
;;;3423   	FRESULT res;
;;;3424   	FATFS *fs;
;;;3425   	DWORD n, clst, sect, stat;
;;;3426   	UINT i;
;;;3427   	BYTE fat, *p;
;;;3428   
;;;3429   
;;;3430   	/* Get logical drive number */
;;;3431   	res = find_volume(fatfs, &path, 0);
003f74  e3a02000          MOV      r2,#0
003f78  e28d1008          ADD      r1,sp,#8
003f7c  e59d0010          LDR      r0,[sp,#0x10]
003f80  ebfffffe          BL       find_volume
003f84  e1a07000          MOV      r7,r0
;;;3432   	fs = *fatfs;
003f88  e59d0010          LDR      r0,[sp,#0x10]
003f8c  e5904000          LDR      r4,[r0,#0]
;;;3433       if(res != 0)
003f90  e3570000          CMP      r7,#0
003f94  0a000002          BEQ      |L1.16292|
;;;3434           sysprintf("f_getfree:  find_volume return (%d)\n", res);
003f98  e1a01007          MOV      r1,r7
003f9c  e28f0f67          ADR      r0,|L1.16704|
003fa0  ebfffffe          BL       sysprintf
                  |L1.16292|
;;;3435   	if (res == FR_OK) 
003fa4  e3570000          CMP      r7,#0
003fa8  1a000058          BNE      |L1.16656|
;;;3436       {
;;;3437   		/* If free_clust is valid, return it without full cluster scan */
;;;3438   		if (fs->free_clust <= fs->n_fatent - 2) 
003fac  e594101c          LDR      r1,[r4,#0x1c]
003fb0  e2411002          SUB      r1,r1,#2
003fb4  e5940014          LDR      r0,[r4,#0x14]
003fb8  e1500001          CMP      r0,r1
003fbc  8a000003          BHI      |L1.16336|
;;;3439           {
;;;3440   			*nclst = fs->free_clust;
003fc0  e5941014          LDR      r1,[r4,#0x14]
003fc4  e59d000c          LDR      r0,[sp,#0xc]
003fc8  e5801000          STR      r1,[r0,#0]
003fcc  ea00004f          B        |L1.16656|
                  |L1.16336|
;;;3441   		} 
;;;3442           else
;;;3443           {
;;;3444   			/* Get number of free clusters */
;;;3445   			fat = fs->fs_type;
003fd0  e5d4b000          LDRB     r11,[r4,#0]
;;;3446   			n = 0;
003fd4  e3a06000          MOV      r6,#0
;;;3447   			if (fat == FS_FAT12) 
003fd8  e35b0001          CMP      r11,#1
003fdc  1a000016          BNE      |L1.16444|
;;;3448               {
;;;3449   				clst = 2;
003fe0  e3a08002          MOV      r8,#2
;;;3450   				do {
003fe4  e1a00000          MOV      r0,r0
                  |L1.16360|
;;;3451   					stat = get_fat(fs, clst);
003fe8  e1a01008          MOV      r1,r8
003fec  e1a00004          MOV      r0,r4
003ff0  ebfffffe          BL       get_fat
003ff4  e1a09000          MOV      r9,r0
;;;3452   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
003ff8  e3790001          CMN      r9,#1
003ffc  1a000001          BNE      |L1.16392|
004000  e3a07001          MOV      r7,#1
004004  ea00000b          B        |L1.16440|
                  |L1.16392|
;;;3453   					if (stat == 1) { res = FR_INT_ERR; break; }
004008  e3590001          CMP      r9,#1
00400c  1a000001          BNE      |L1.16408|
004010  e3a07002          MOV      r7,#2
004014  ea000007          B        |L1.16440|
                  |L1.16408|
;;;3454   					if (stat == 0) n++;
004018  e3590000          CMP      r9,#0
00401c  1a000000          BNE      |L1.16420|
004020  e2866001          ADD      r6,r6,#1
                  |L1.16420|
;;;3455   				} while (++clst < fs->n_fatent);
004024  e2880001          ADD      r0,r8,#1
004028  e1a08000          MOV      r8,r0
00402c  e594101c          LDR      r1,[r4,#0x1c]
004030  e1500001          CMP      r0,r1
004034  3affffeb          BCC      |L1.16360|
                  |L1.16440|
004038  ea00002e          B        |L1.16632|
                  |L1.16444|
;;;3456   			} 
;;;3457               else 
;;;3458               {
;;;3459   				clst = fs->n_fatent;
00403c  e594801c          LDR      r8,[r4,#0x1c]
;;;3460   				sect = fs->fatbase;
004040  e5940028          LDR      r0,[r4,#0x28]
004044  e58d0004          STR      r0,[sp,#4]
;;;3461   				i = 0; p = 0;
004048  e3a0a000          MOV      r10,#0
00404c  e3a05000          MOV      r5,#0
;;;3462   				do {
004050  e1a00000          MOV      r0,r0
                  |L1.16468|
;;;3463   					if (!i) 
004054  e35a0000          CMP      r10,#0
004058  1a00000b          BNE      |L1.16524|
;;;3464                       {
;;;3465   						res = move_window(fs, sect++);
00405c  e59d0004          LDR      r0,[sp,#4]
004060  e2802001          ADD      r2,r0,#1
004064  e1a01000          MOV      r1,r0
004068  e1a00004          MOV      r0,r4
00406c  e58d2004          STR      r2,[sp,#4]
004070  ebfffffe          BL       move_window
004074  e1a07000          MOV      r7,r0
;;;3466   						if (res != FR_OK) break;
004078  e3570000          CMP      r7,#0
00407c  0a000000          BEQ      |L1.16516|
004080  ea00001b          B        |L1.16628|
                  |L1.16516|
;;;3467   						p = fs->win;
004084  e2845038          ADD      r5,r4,#0x38
;;;3468   						i = SS(fs);
004088  e1d4a0ba          LDRH     r10,[r4,#0xa]
                  |L1.16524|
;;;3469   					}
;;;3470   					if (fat == FS_FAT16) 
00408c  e35b0002          CMP      r11,#2
004090  1a000007          BNE      |L1.16564|
;;;3471                       {
;;;3472   						if (LD_WORD(p) == 0) n++;
004094  e5d50000          LDRB     r0,[r5,#0]
004098  e5d51001          LDRB     r1,[r5,#1]
00409c  e1900401          ORRS     r0,r0,r1,LSL #8
0040a0  1a000000          BNE      |L1.16552|
0040a4  e2866001          ADD      r6,r6,#1
                  |L1.16552|
;;;3473   						p += 2; i -= 2;
0040a8  e2855002          ADD      r5,r5,#2
0040ac  e24aa002          SUB      r10,r10,#2
0040b0  ea00000c          B        |L1.16616|
                  |L1.16564|
;;;3474   					} 
;;;3475                       else 
;;;3476                       {
;;;3477   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0040b4  e5d50003          LDRB     r0,[r5,#3]
0040b8  e1a00c00          LSL      r0,r0,#24
0040bc  e5d51002          LDRB     r1,[r5,#2]
0040c0  e1800801          ORR      r0,r0,r1,LSL #16
0040c4  e5d51001          LDRB     r1,[r5,#1]
0040c8  e1800401          ORR      r0,r0,r1,LSL #8
0040cc  e5d51000          LDRB     r1,[r5,#0]
0040d0  e1800001          ORR      r0,r0,r1
0040d4  e3d0020f          BICS     r0,r0,#0xf0000000
0040d8  1a000000          BNE      |L1.16608|
0040dc  e2866001          ADD      r6,r6,#1
                  |L1.16608|
;;;3478   						p += 4; i -= 4;
0040e0  e2855004          ADD      r5,r5,#4
0040e4  e24aa004          SUB      r10,r10,#4
                  |L1.16616|
;;;3479   					}
;;;3480   				} while (--clst);
0040e8  e2480001          SUB      r0,r8,#1
0040ec  e1b08000          MOVS     r8,r0
0040f0  1affffd7          BNE      |L1.16468|
                  |L1.16628|
0040f4  e1a00000          MOV      r0,r0                 ;3466
                  |L1.16632|
;;;3481   			}
;;;3482   			fs->free_clust = n;
0040f8  e5846014          STR      r6,[r4,#0x14]
;;;3483   			fs->fsi_flag |= 1;
0040fc  e5d40005          LDRB     r0,[r4,#5]
004100  e3800001          ORR      r0,r0,#1
004104  e5c40005          STRB     r0,[r4,#5]
;;;3484   			*nclst = n;
004108  e59d000c          LDR      r0,[sp,#0xc]
00410c  e5806000          STR      r6,[r0,#0]
                  |L1.16656|
;;;3485   		}
;;;3486   	}
;;;3487   	LEAVE_FF(fs, res);
004110  e1a01007          MOV      r1,r7
004114  e1a00004          MOV      r0,r4
004118  ebfffffe          BL       unlock_fs
00411c  e1a00007          MOV      r0,r7
004120  e28dd014          ADD      sp,sp,#0x14
;;;3488   }
004124  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.16680|
004128  46525f49          DCB      "FR_INVALID_NAME : 3\n\r",0
00412c  4e56414c
004130  49445f4e
004134  414d4520
004138  3a20330a
00413c  0d00    
00413e  00                DCB      0
00413f  00                DCB      0
                  |L1.16704|
004140  665f6765          DCB      "f_getfree:  find_volume return (%d)\n",0
004144  74667265
004148  653a2020
00414c  66696e64
004150  5f766f6c
004154  756d6520
004158  72657475
00415c  726e2028
004160  2564290a
004164  00      
004165  00                DCB      0
004166  00                DCB      0
004167  00                DCB      0
                          ENDP

                  f_truncate PROC
;;;3496   
;;;3497   FRESULT f_truncate (
004168  e92d4070          PUSH     {r4-r6,lr}
;;;3498   	FIL* fp		/* Pointer to the file object */
;;;3499   )
;;;3500   {
00416c  e1a04000          MOV      r4,r0
;;;3501   	FRESULT res;
;;;3502   	DWORD ncl;
;;;3503   
;;;3504   
;;;3505   	res = validate(fp);						/* Check validity of the object */
004170  e1a00004          MOV      r0,r4
004174  ebfffffe          BL       validate
004178  e1a05000          MOV      r5,r0
;;;3506   	if (res == FR_OK) {
00417c  e3550000          CMP      r5,#0
004180  1a000008          BNE      |L1.16808|
;;;3507   		if (fp->err) {						/* Check error */
004184  e5d40007          LDRB     r0,[r4,#7]
004188  e3500000          CMP      r0,#0
00418c  0a000001          BEQ      |L1.16792|
;;;3508   			res = (FRESULT)fp->err;
004190  e5d45007          LDRB     r5,[r4,#7]
004194  ea000003          B        |L1.16808|
                  |L1.16792|
;;;3509   		} else {
;;;3510   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
004198  e5d40006          LDRB     r0,[r4,#6]
00419c  e3100002          TST      r0,#2
0041a0  1a000000          BNE      |L1.16808|
;;;3511   				res = FR_DENIED;
0041a4  e3a05007          MOV      r5,#7
                  |L1.16808|
;;;3512   		}
;;;3513   	}
;;;3514   	if (res == FR_OK) {
0041a8  e3550000          CMP      r5,#0
0041ac  1a000043          BNE      |L1.17088|
;;;3515   		if (fp->fsize > fp->fptr) {
0041b0  e594000c          LDR      r0,[r4,#0xc]
0041b4  e5941008          LDR      r1,[r4,#8]
0041b8  e1500001          CMP      r0,r1
0041bc  9a00003c          BLS      |L1.17076|
;;;3516   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
0041c0  e5940008          LDR      r0,[r4,#8]
0041c4  e584000c          STR      r0,[r4,#0xc]
;;;3517   			fp->flag |= FA__WRITTEN;
0041c8  e5d40006          LDRB     r0,[r4,#6]
0041cc  e3800020          ORR      r0,r0,#0x20
0041d0  e5c40006          STRB     r0,[r4,#6]
;;;3518   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
0041d4  e5940008          LDR      r0,[r4,#8]
0041d8  e3500000          CMP      r0,#0
0041dc  1a000006          BNE      |L1.16892|
;;;3519   				res = remove_chain(fp->fs, fp->sclust);
0041e0  e5940000          LDR      r0,[r4,#0]
0041e4  e5941010          LDR      r1,[r4,#0x10]
0041e8  ebfffffe          BL       remove_chain
0041ec  e1a05000          MOV      r5,r0
;;;3520   				fp->sclust = 0;
0041f0  e3a00000          MOV      r0,#0
0041f4  e5840010          STR      r0,[r4,#0x10]
0041f8  ea00001b          B        |L1.17004|
                  |L1.16892|
;;;3521   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3522   				ncl = get_fat(fp->fs, fp->clust);
0041fc  e5940000          LDR      r0,[r4,#0]
004200  e5941014          LDR      r1,[r4,#0x14]
004204  ebfffffe          BL       get_fat
004208  e1a06000          MOV      r6,r0
;;;3523   				res = FR_OK;
00420c  e3a05000          MOV      r5,#0
;;;3524   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
004210  e3760001          CMN      r6,#1
004214  1a000000          BNE      |L1.16924|
004218  e3a05001          MOV      r5,#1
                  |L1.16924|
;;;3525   				if (ncl == 1) res = FR_INT_ERR;
00421c  e3560001          CMP      r6,#1
004220  1a000000          BNE      |L1.16936|
004224  e3a05002          MOV      r5,#2
                  |L1.16936|
;;;3526   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
004228  e3550000          CMP      r5,#0
00422c  1a00000e          BNE      |L1.17004|
004230  e5940000          LDR      r0,[r4,#0]
004234  e590001c          LDR      r0,[r0,#0x1c]
004238  e1500006          CMP      r0,r6
00423c  9a00000a          BLS      |L1.17004|
;;;3527   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
004240  e3e0220f          MVN      r2,#0xf0000000
004244  e5940000          LDR      r0,[r4,#0]
004248  e5941014          LDR      r1,[r4,#0x14]
00424c  ebfffffe          BL       put_fat
004250  e1a05000          MOV      r5,r0
;;;3528   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
004254  e3550000          CMP      r5,#0
004258  1a000003          BNE      |L1.17004|
00425c  e1a01006          MOV      r1,r6
004260  e5940000          LDR      r0,[r4,#0]
004264  ebfffffe          BL       remove_chain
004268  e1a05000          MOV      r5,r0
                  |L1.17004|
;;;3529   				}
;;;3530   			}
;;;3531   #if !_FS_TINY
;;;3532   			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
00426c  e3550000          CMP      r5,#0
004270  1a00000f          BNE      |L1.17076|
004274  e5d40006          LDRB     r0,[r4,#6]
004278  e3100040          TST      r0,#0x40
00427c  0a00000c          BEQ      |L1.17076|
;;;3533   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
004280  e5941000          LDR      r1,[r4,#0]
004284  e5942018          LDR      r2,[r4,#0x18]
004288  e5d10001          LDRB     r0,[r1,#1]
00428c  e3a03001          MOV      r3,#1
004290  e2841024          ADD      r1,r4,#0x24
004294  ebfffffe          BL       disk_write
004298  e3500000          CMP      r0,#0
00429c  0a000001          BEQ      |L1.17064|
;;;3534   					res = FR_DISK_ERR;
0042a0  e3a05001          MOV      r5,#1
0042a4  ea000002          B        |L1.17076|
                  |L1.17064|
;;;3535   				else
;;;3536   					fp->flag &= ~FA__DIRTY;
0042a8  e5d40006          LDRB     r0,[r4,#6]
0042ac  e3c00040          BIC      r0,r0,#0x40
0042b0  e5c40006          STRB     r0,[r4,#6]
                  |L1.17076|
;;;3537   			}
;;;3538   #endif
;;;3539   		}
;;;3540   		if (res != FR_OK) fp->err = (FRESULT)res;
0042b4  e3550000          CMP      r5,#0
0042b8  0a000000          BEQ      |L1.17088|
0042bc  e5c45007          STRB     r5,[r4,#7]
                  |L1.17088|
;;;3541   	}
;;;3542   
;;;3543   	LEAVE_FF(fp->fs, res);
0042c0  e1a01005          MOV      r1,r5
0042c4  e5940000          LDR      r0,[r4,#0]
0042c8  ebfffffe          BL       unlock_fs
0042cc  e1a00005          MOV      r0,r5
;;;3544   }
0042d0  e8bd8070          POP      {r4-r6,pc}
;;;3545   
                          ENDP

                  f_unlink PROC
;;;3552   
;;;3553   FRESULT f_unlink (
0042d4  e92d4071          PUSH     {r0,r4-r6,lr}
;;;3554   	const TCHAR* path		/* Pointer to the file or directory path */
;;;3555   )
;;;3556   {
0042d8  e24ddf97          SUB      sp,sp,#0x25c
;;;3557   	FRESULT res;
;;;3558   	DIR dj, sdj;
;;;3559   	BYTE *dir;
;;;3560   	DWORD dclst = 0;
0042dc  e3a06000          MOV      r6,#0
;;;3561   	DEFINE_NAMEBUF;
;;;3562   
;;;3563   
;;;3564   	/* Get logical drive number */
;;;3565   	res = find_volume(&dj.fs, &path, 1);
0042e0  e3a02001          MOV      r2,#1
0042e4  e28d1f97          ADD      r1,sp,#0x25c
0042e8  e28d0f8d          ADD      r0,sp,#0x234
0042ec  ebfffffe          BL       find_volume
0042f0  e1a04000          MOV      r4,r0
;;;3566   	if (res == FR_OK) {
0042f4  e3540000          CMP      r4,#0
0042f8  1a000054          BNE      |L1.17488|
;;;3567   		INIT_BUF(dj);
0042fc  e28d0c02          ADD      r0,sp,#0x200
004300  e58d024c          STR      r0,[sp,#0x24c]
004304  e58dd250          STR      sp,[sp,#0x250]
;;;3568   		res = follow_path(&dj, path);		/* Follow the file path */
004308  e59d125c          LDR      r1,[sp,#0x25c]
00430c  e28d0f8d          ADD      r0,sp,#0x234
004310  ebfffffe          BL       follow_path
004314  e1a04000          MOV      r4,r0
;;;3569   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
004318  e3540000          CMP      r4,#0
00431c  1a000006          BNE      |L1.17212|
004320  e59d024c          LDR      r0,[sp,#0x24c]
004324  e5d0000b          LDRB     r0,[r0,#0xb]
004328  e3100020          TST      r0,#0x20
00432c  0a000002          BEQ      |L1.17212|
;;;3570           {
;;;3571               sysprintf("FR_INVALID_NAME : 4\n\r");
004330  e28f0fb6          ADR      r0,|L1.17936|
004334  ebfffffe          BL       sysprintf
;;;3572   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
004338  e3a04006          MOV      r4,#6
                  |L1.17212|
;;;3573           }
;;;3574   #if _FS_LOCK
;;;3575   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
;;;3576   #endif
;;;3577   		if (res == FR_OK) {					/* The object is accessible */
00433c  e3540000          CMP      r4,#0
004340  1a000042          BNE      |L1.17488|
;;;3578   			dir = dj.dir;
004344  e59d5248          LDR      r5,[sp,#0x248]
;;;3579   			if (!dir) {
004348  e3550000          CMP      r5,#0
00434c  1a000003          BNE      |L1.17248|
;;;3580                   sysprintf("FR_INVALID_NAME : 5\n\r");
004350  e28f0e2d          ADR      r0,|L1.17960|
004354  ebfffffe          BL       sysprintf
;;;3581   				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
004358  e3a04006          MOV      r4,#6
00435c  ea000003          B        |L1.17264|
                  |L1.17248|
;;;3582   			} else {
;;;3583   				if (dir[DIR_Attr] & AM_RDO)
004360  e5d5000b          LDRB     r0,[r5,#0xb]
004364  e3100001          TST      r0,#1
004368  0a000000          BEQ      |L1.17264|
;;;3584   					res = FR_DENIED;		/* Cannot remove R/O object */
00436c  e3a04007          MOV      r4,#7
                  |L1.17264|
;;;3585   			}
;;;3586   			if (res == FR_OK) {
004370  e3540000          CMP      r4,#0
004374  1a000023          BNE      |L1.17416|
;;;3587   				dclst = ld_clust(dj.fs, dir);
004378  e1a01005          MOV      r1,r5
00437c  e59d0234          LDR      r0,[sp,#0x234]
004380  ebfffffe          BL       ld_clust
004384  e1a06000          MOV      r6,r0
;;;3588   				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
004388  e3560000          CMP      r6,#0
00438c  0a00001d          BEQ      |L1.17416|
004390  e5d5000b          LDRB     r0,[r5,#0xb]
004394  e3100010          TST      r0,#0x10
004398  0a00001a          BEQ      |L1.17416|
;;;3589   #if _FS_RPATH
;;;3590   					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
00439c  e59d0234          LDR      r0,[sp,#0x234]
0043a0  e5900018          LDR      r0,[r0,#0x18]
0043a4  e1500006          CMP      r0,r6
0043a8  1a000001          BNE      |L1.17332|
;;;3591   						res = FR_DENIED;
0043ac  e3a04007          MOV      r4,#7
0043b0  ea000014          B        |L1.17416|
                  |L1.17332|
;;;3592   					} else
;;;3593   #endif
;;;3594   					{
;;;3595   						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
0043b4  e3a02028          MOV      r2,#0x28
0043b8  e28d1f8d          ADD      r1,sp,#0x234
0043bc  e28d0f83          ADD      r0,sp,#0x20c
0043c0  ebfffffe          BL       mem_cpy
;;;3596   						sdj.sclust = dclst;
0043c4  e58d6214          STR      r6,[sp,#0x214]
;;;3597   						res = dir_sdi(&sdj, 2);
0043c8  e3a01002          MOV      r1,#2
0043cc  e28d0f83          ADD      r0,sp,#0x20c
0043d0  ebfffffe          BL       dir_sdi
0043d4  e1a04000          MOV      r4,r0
;;;3598   						if (res == FR_OK) {
0043d8  e3540000          CMP      r4,#0
0043dc  1a000009          BNE      |L1.17416|
;;;3599   							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
0043e0  e3a01000          MOV      r1,#0
0043e4  e28d0f83          ADD      r0,sp,#0x20c
0043e8  ebfffffe          BL       dir_read
0043ec  e1a04000          MOV      r4,r0
;;;3600   							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
0043f0  e3540000          CMP      r4,#0
0043f4  1a000000          BNE      |L1.17404|
0043f8  e3a04007          MOV      r4,#7
                  |L1.17404|
;;;3601   							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
0043fc  e3540004          CMP      r4,#4
004400  1a000000          BNE      |L1.17416|
004404  e3a04000          MOV      r4,#0
                  |L1.17416|
;;;3602   						}
;;;3603   					}
;;;3604   				}
;;;3605   			}
;;;3606   			if (res == FR_OK) {
004408  e3540000          CMP      r4,#0
00440c  1a00000f          BNE      |L1.17488|
;;;3607   				res = dir_remove(&dj);		/* Remove the directory entry */
004410  e28d0f8d          ADD      r0,sp,#0x234
004414  ebfffffe          BL       dir_remove
004418  e1a04000          MOV      r4,r0
;;;3608   				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
00441c  e3540000          CMP      r4,#0
004420  1a000005          BNE      |L1.17468|
004424  e3560000          CMP      r6,#0
004428  0a000003          BEQ      |L1.17468|
;;;3609   					res = remove_chain(dj.fs, dclst);
00442c  e1a01006          MOV      r1,r6
004430  e59d0234          LDR      r0,[sp,#0x234]
004434  ebfffffe          BL       remove_chain
004438  e1a04000          MOV      r4,r0
                  |L1.17468|
;;;3610   				if (res == FR_OK) res = sync_fs(dj.fs);
00443c  e3540000          CMP      r4,#0
004440  1a000002          BNE      |L1.17488|
004444  e59d0234          LDR      r0,[sp,#0x234]
004448  ebfffffe          BL       sync_fs
00444c  e1a04000          MOV      r4,r0
                  |L1.17488|
;;;3611   			}
;;;3612   		}
;;;3613   		FREE_BUF();
;;;3614   	}
;;;3615   
;;;3616   	LEAVE_FF(dj.fs, res);
004450  e1a01004          MOV      r1,r4
004454  e59d0234          LDR      r0,[sp,#0x234]
004458  ebfffffe          BL       unlock_fs
00445c  e1a00004          MOV      r0,r4
004460  e28dde26          ADD      sp,sp,#0x260
;;;3617   }
004464  e8bd8070          POP      {r4-r6,pc}
;;;3618   
                          ENDP

                  f_mkdir PROC
;;;3625   
;;;3626   FRESULT f_mkdir (
004468  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3627   	const TCHAR* path		/* Pointer to the directory path */
;;;3628   )
;;;3629   {
00446c  e24ddf8d          SUB      sp,sp,#0x234
;;;3630   	FRESULT res;
;;;3631   	DIR dj;
;;;3632   	BYTE *dir, n;
;;;3633   	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
004470  ebfffffe          BL       get_fattime
004474  e1a06000          MOV      r6,r0
;;;3634   	DEFINE_NAMEBUF;
;;;3635   
;;;3636   
;;;3637   	/* Get logical drive number */
;;;3638   	res = find_volume(&dj.fs, &path, 1);
004478  e3a02001          MOV      r2,#1
00447c  e28d1f8d          ADD      r1,sp,#0x234
004480  e28d0f83          ADD      r0,sp,#0x20c
004484  ebfffffe          BL       find_volume
004488  e1a05000          MOV      r5,r0
;;;3639   	if (res == FR_OK) {
00448c  e3550000          CMP      r5,#0
004490  1a0000a6          BNE      |L1.18224|
;;;3640   		INIT_BUF(dj);
004494  e28d0c02          ADD      r0,sp,#0x200
004498  e58d0224          STR      r0,[sp,#0x224]
00449c  e58dd228          STR      sp,[sp,#0x228]
;;;3641   		res = follow_path(&dj, path);			/* Follow the file path */
0044a0  e59d1234          LDR      r1,[sp,#0x234]
0044a4  e28d0f83          ADD      r0,sp,#0x20c
0044a8  ebfffffe          BL       follow_path
0044ac  e1a05000          MOV      r5,r0
;;;3642   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
0044b0  e3550000          CMP      r5,#0
0044b4  1a000000          BNE      |L1.17596|
0044b8  e3a05008          MOV      r5,#8
                  |L1.17596|
;;;3643   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
0044bc  e3550004          CMP      r5,#4
0044c0  1a000006          BNE      |L1.17632|
0044c4  e59d0224          LDR      r0,[sp,#0x224]
0044c8  e5d0000b          LDRB     r0,[r0,#0xb]
0044cc  e3100020          TST      r0,#0x20
0044d0  0a000002          BEQ      |L1.17632|
;;;3644           {
;;;3645               sysprintf("FR_INVALID_NAME : 6\n\r");
0044d4  e28f0f59          ADR      r0,|L1.17984|
0044d8  ebfffffe          BL       sysprintf
;;;3646   			res = FR_INVALID_NAME;
0044dc  e3a05006          MOV      r5,#6
                  |L1.17632|
;;;3647           }
;;;3648   		if (res == FR_NO_FILE) {				/* Can create a new directory */
0044e0  e3550004          CMP      r5,#4
0044e4  1a000091          BNE      |L1.18224|
;;;3649   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
0044e8  e3a01000          MOV      r1,#0
0044ec  e59d020c          LDR      r0,[sp,#0x20c]
0044f0  ebfffffe          BL       create_chain
0044f4  e1a07000          MOV      r7,r0
;;;3650   			res = FR_OK;
0044f8  e3a05000          MOV      r5,#0
;;;3651   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
0044fc  e3570000          CMP      r7,#0
004500  1a000000          BNE      |L1.17672|
004504  e3a05007          MOV      r5,#7
                  |L1.17672|
;;;3652   			if (dcl == 1) res = FR_INT_ERR;
004508  e3570001          CMP      r7,#1
00450c  1a000000          BNE      |L1.17684|
004510  e3a05002          MOV      r5,#2
                  |L1.17684|
;;;3653   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
004514  e3770001          CMN      r7,#1
004518  1a000000          BNE      |L1.17696|
00451c  e3a05001          MOV      r5,#1
                  |L1.17696|
;;;3654   			if (res == FR_OK)					/* Flush FAT */
004520  e3550000          CMP      r5,#0
004524  1a000002          BNE      |L1.17716|
;;;3655   				res = sync_window(dj.fs);
004528  e59d020c          LDR      r0,[sp,#0x20c]
00452c  ebfffffe          BL       sync_window
004530  e1a05000          MOV      r5,r0
                  |L1.17716|
;;;3656   			if (res == FR_OK) {					/* Initialize the new directory table */
004534  e3550000          CMP      r5,#0
004538  1a00005c          BNE      |L1.18096|
;;;3657   				dsc = clust2sect(dj.fs, dcl);
00453c  e1a01007          MOV      r1,r7
004540  e59d020c          LDR      r0,[sp,#0x20c]
004544  ebfffffe          BL       clust2sect
004548  e1a09000          MOV      r9,r0
;;;3658   				dir = dj.fs->win;
00454c  e59d020c          LDR      r0,[sp,#0x20c]
004550  e2804038          ADD      r4,r0,#0x38
;;;3659   				mem_set(dir, 0, SS(dj.fs));
004554  e59d020c          LDR      r0,[sp,#0x20c]
004558  e1d020ba          LDRH     r2,[r0,#0xa]
00455c  e3a01000          MOV      r1,#0
004560  e1a00004          MOV      r0,r4
004564  ebfffffe          BL       mem_set
;;;3660   				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
004568  e3a0200b          MOV      r2,#0xb
00456c  e3a01020          MOV      r1,#0x20
004570  e1a00004          MOV      r0,r4
004574  ebfffffe          BL       mem_set
;;;3661   				dir[DIR_Name] = '.';
004578  e3a0002e          MOV      r0,#0x2e
00457c  e5c40000          STRB     r0,[r4,#0]
;;;3662   				dir[DIR_Attr] = AM_DIR;
004580  e3a00010          MOV      r0,#0x10
004584  e5c4000b          STRB     r0,[r4,#0xb]
;;;3663   				ST_DWORD(dir + DIR_WrtTime, tm);
004588  e5c46016          STRB     r6,[r4,#0x16]
00458c  e1a00806          LSL      r0,r6,#16
004590  e1a00c20          LSR      r0,r0,#24
004594  e5c40017          STRB     r0,[r4,#0x17]
004598  e1a00406          LSL      r0,r6,#8
00459c  e1a00c20          LSR      r0,r0,#24
0045a0  e5c40018          STRB     r0,[r4,#0x18]
0045a4  e1a00c26          LSR      r0,r6,#24
0045a8  e5c40019          STRB     r0,[r4,#0x19]
;;;3664   				st_clust(dir, dcl);
0045ac  e1a01007          MOV      r1,r7
0045b0  e1a00004          MOV      r0,r4
0045b4  ebfffffe          BL       st_clust
;;;3665   				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
0045b8  e3a02020          MOV      r2,#0x20
0045bc  e1a01004          MOV      r1,r4
0045c0  e2840020          ADD      r0,r4,#0x20
0045c4  ebfffffe          BL       mem_cpy
;;;3666   				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
0045c8  e3a0002e          MOV      r0,#0x2e
0045cc  e5c40021          STRB     r0,[r4,#0x21]
0045d0  e59da214          LDR      r10,[sp,#0x214]
;;;3667   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0045d4  e59d020c          LDR      r0,[sp,#0x20c]
0045d8  e5d00000          LDRB     r0,[r0,#0]
0045dc  e3500003          CMP      r0,#3
0045e0  1a000004          BNE      |L1.17912|
0045e4  e59d020c          LDR      r0,[sp,#0x20c]
0045e8  e590002c          LDR      r0,[r0,#0x2c]
0045ec  e150000a          CMP      r0,r10
0045f0  1a000000          BNE      |L1.17912|
;;;3668   					pcl = 0;
0045f4  e3a0a000          MOV      r10,#0
                  |L1.17912|
;;;3669   				st_clust(dir + SZ_DIRE, pcl);
0045f8  e1a0100a          MOV      r1,r10
0045fc  e2840020          ADD      r0,r4,#0x20
004600  ebfffffe          BL       st_clust
;;;3670   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
004604  e59d020c          LDR      r0,[sp,#0x20c]
004608  e5d08002          LDRB     r8,[r0,#2]
00460c  ea000024          B        |L1.18084|
                  |L1.17936|
004610  46525f49          DCB      "FR_INVALID_NAME : 4\n\r",0
004614  4e56414c
004618  49445f4e
00461c  414d4520
004620  3a20340a
004624  0d00    
004626  00                DCB      0
004627  00                DCB      0
                  |L1.17960|
004628  46525f49          DCB      "FR_INVALID_NAME : 5\n\r",0
00462c  4e56414c
004630  49445f4e
004634  414d4520
004638  3a20350a
00463c  0d00    
00463e  00                DCB      0
00463f  00                DCB      0
                  |L1.17984|
004640  46525f49          DCB      "FR_INVALID_NAME : 6\n\r",0
004644  4e56414c
004648  49445f4e
00464c  414d4520
004650  3a20360a
004654  0d00    
004656  00                DCB      0
004657  00                DCB      0
                  |L1.18008|
;;;3671   					dj.fs->winsect = dsc++;
004658  e59d020c          LDR      r0,[sp,#0x20c]
00465c  e5809034          STR      r9,[r0,#0x34]
004660  e2899001          ADD      r9,r9,#1
;;;3672   					dj.fs->wflag = 1;
004664  e3a00001          MOV      r0,#1
004668  e59d120c          LDR      r1,[sp,#0x20c]
00466c  e5c10004          STRB     r0,[r1,#4]
;;;3673   					res = sync_window(dj.fs);
004670  e59d020c          LDR      r0,[sp,#0x20c]
004674  ebfffffe          BL       sync_window
004678  e1a05000          MOV      r5,r0
;;;3674   					if (res != FR_OK) break;
00467c  e3550000          CMP      r5,#0
004680  0a000000          BEQ      |L1.18056|
004684  ea000008          B        |L1.18092|
                  |L1.18056|
;;;3675   					mem_set(dir, 0, SS(dj.fs));
004688  e59d020c          LDR      r0,[sp,#0x20c]
00468c  e1d020ba          LDRH     r2,[r0,#0xa]
004690  e3a01000          MOV      r1,#0
004694  e1a00004          MOV      r0,r4
004698  ebfffffe          BL       mem_set
00469c  e2480001          SUB      r0,r8,#1              ;3670
0046a0  e20080ff          AND      r8,r0,#0xff           ;3670
                  |L1.18084|
0046a4  e3580000          CMP      r8,#0                 ;3670
0046a8  1affffea          BNE      |L1.18008|
                  |L1.18092|
0046ac  e1a00000          MOV      r0,r0                 ;3674
                  |L1.18096|
;;;3676   				}
;;;3677   			}
;;;3678   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
0046b0  e3550000          CMP      r5,#0
0046b4  1a000002          BNE      |L1.18116|
0046b8  e28d0f83          ADD      r0,sp,#0x20c
0046bc  ebfffffe          BL       dir_register
0046c0  e1a05000          MOV      r5,r0
                  |L1.18116|
;;;3679   			if (res != FR_OK) {
0046c4  e3550000          CMP      r5,#0
0046c8  0a000003          BEQ      |L1.18140|
;;;3680   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
0046cc  e1a01007          MOV      r1,r7
0046d0  e59d020c          LDR      r0,[sp,#0x20c]
0046d4  ebfffffe          BL       remove_chain
0046d8  ea000014          B        |L1.18224|
                  |L1.18140|
;;;3681   			} else {
;;;3682   				dir = dj.dir;
0046dc  e59d4220          LDR      r4,[sp,#0x220]
;;;3683   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
0046e0  e3a00010          MOV      r0,#0x10
0046e4  e5c4000b          STRB     r0,[r4,#0xb]
;;;3684   				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
0046e8  e5c46016          STRB     r6,[r4,#0x16]
0046ec  e1a00806          LSL      r0,r6,#16
0046f0  e1a00c20          LSR      r0,r0,#24
0046f4  e5c40017          STRB     r0,[r4,#0x17]
0046f8  e1a00406          LSL      r0,r6,#8
0046fc  e1a00c20          LSR      r0,r0,#24
004700  e5c40018          STRB     r0,[r4,#0x18]
004704  e1a00c26          LSR      r0,r6,#24
004708  e5c40019          STRB     r0,[r4,#0x19]
;;;3685   				st_clust(dir, dcl);					/* Table start cluster */
00470c  e1a01007          MOV      r1,r7
004710  e1a00004          MOV      r0,r4
004714  ebfffffe          BL       st_clust
;;;3686   				dj.fs->wflag = 1;
004718  e3a00001          MOV      r0,#1
00471c  e59d120c          LDR      r1,[sp,#0x20c]
004720  e5c10004          STRB     r0,[r1,#4]
;;;3687   				res = sync_fs(dj.fs);
004724  e59d020c          LDR      r0,[sp,#0x20c]
004728  ebfffffe          BL       sync_fs
00472c  e1a05000          MOV      r5,r0
                  |L1.18224|
;;;3688   			}
;;;3689   		}
;;;3690   		FREE_BUF();
;;;3691   	}
;;;3692   
;;;3693   	LEAVE_FF(dj.fs, res);
004730  e1a01005          MOV      r1,r5
004734  e59d020c          LDR      r0,[sp,#0x20c]
004738  ebfffffe          BL       unlock_fs
00473c  e1a00005          MOV      r0,r5
004740  e28ddf8e          ADD      sp,sp,#0x238
;;;3694   }
004744  e8bd87f0          POP      {r4-r10,pc}
;;;3695   
                          ENDP

                  f_chmod PROC
;;;3702   
;;;3703   FRESULT f_chmod (
004748  e92d40f7          PUSH     {r0-r2,r4-r7,lr}
;;;3704   	const TCHAR* path,	/* Pointer to the file path */
;;;3705   	BYTE attr,			/* Attribute bits */
;;;3706   	BYTE mask			/* Attribute mask to change */
;;;3707   )
;;;3708   {
00474c  e24ddf8e          SUB      sp,sp,#0x238
004750  e1a07001          MOV      r7,r1
004754  e1a05002          MOV      r5,r2
;;;3709   	FRESULT res;
;;;3710   	DIR dj;
;;;3711   	BYTE *dir;
;;;3712   	DEFINE_NAMEBUF;
;;;3713   
;;;3714   
;;;3715   	/* Get logical drive number */
;;;3716   	res = find_volume(&dj.fs, &path, 1);
004758  e3a02001          MOV      r2,#1
00475c  e28d1f8e          ADD      r1,sp,#0x238
004760  e28d0e21          ADD      r0,sp,#0x210
004764  ebfffffe          BL       find_volume
004768  e1a04000          MOV      r4,r0
;;;3717   	if (res == FR_OK) {
00476c  e3540000          CMP      r4,#0
004770  1a000025          BNE      |L1.18444|
;;;3718   		INIT_BUF(dj);
004774  e28d0f81          ADD      r0,sp,#0x204
004778  e58d0228          STR      r0,[sp,#0x228]
00477c  e28d0004          ADD      r0,sp,#4
004780  e58d022c          STR      r0,[sp,#0x22c]
;;;3719   		res = follow_path(&dj, path);		/* Follow the file path */
004784  e59d1238          LDR      r1,[sp,#0x238]
004788  e28d0e21          ADD      r0,sp,#0x210
00478c  ebfffffe          BL       follow_path
004790  e1a04000          MOV      r4,r0
;;;3720   		FREE_BUF();
;;;3721   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
004794  e3540000          CMP      r4,#0
004798  1a000006          BNE      |L1.18360|
00479c  e59d0228          LDR      r0,[sp,#0x228]
0047a0  e5d0000b          LDRB     r0,[r0,#0xb]
0047a4  e3100020          TST      r0,#0x20
0047a8  0a000002          BEQ      |L1.18360|
;;;3722           {
;;;3723               sysprintf("FR_INVALID_NAME : 7\n\r");
0047ac  e28f0f9b          ADR      r0,|L1.18976|
0047b0  ebfffffe          BL       sysprintf
;;;3724   			res = FR_INVALID_NAME;
0047b4  e3a04006          MOV      r4,#6
                  |L1.18360|
;;;3725           }
;;;3726   		if (res == FR_OK) {
0047b8  e3540000          CMP      r4,#0
0047bc  1a000012          BNE      |L1.18444|
;;;3727   			dir = dj.dir;
0047c0  e59d6224          LDR      r6,[sp,#0x224]
;;;3728   			if (!dir) {						/* Is it a root directory? */
0047c4  e3560000          CMP      r6,#0
0047c8  1a000003          BNE      |L1.18396|
;;;3729                   sysprintf("FR_INVALID_NAME : 8\n\r");
0047cc  e28f0f99          ADR      r0,|L1.19000|
0047d0  ebfffffe          BL       sysprintf
;;;3730   				res = FR_INVALID_NAME;
0047d4  e3a04006          MOV      r4,#6
0047d8  ea00000b          B        |L1.18444|
                  |L1.18396|
;;;3731   			} else {						/* File or sub directory */
;;;3732   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
0047dc  e2055027          AND      r5,r5,#0x27
;;;3733   				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
0047e0  e0070005          AND      r0,r7,r5
0047e4  e5d6100b          LDRB     r1,[r6,#0xb]
0047e8  e1c11005          BIC      r1,r1,r5
0047ec  e1800001          ORR      r0,r0,r1
0047f0  e5c6000b          STRB     r0,[r6,#0xb]
;;;3734   				dj.fs->wflag = 1;
0047f4  e3a00001          MOV      r0,#1
0047f8  e59d1210          LDR      r1,[sp,#0x210]
0047fc  e5c10004          STRB     r0,[r1,#4]
;;;3735   				res = sync_fs(dj.fs);
004800  e59d0210          LDR      r0,[sp,#0x210]
004804  ebfffffe          BL       sync_fs
004808  e1a04000          MOV      r4,r0
                  |L1.18444|
;;;3736   			}
;;;3737   		}
;;;3738   	}
;;;3739   
;;;3740   	LEAVE_FF(dj.fs, res);
00480c  e1a01004          MOV      r1,r4
004810  e59d0210          LDR      r0,[sp,#0x210]
004814  ebfffffe          BL       unlock_fs
004818  e1a00004          MOV      r0,r4
00481c  e28ddf91          ADD      sp,sp,#0x244
;;;3741   }
004820  e8bd80f0          POP      {r4-r7,pc}
;;;3742   
                          ENDP

                  f_rename PROC
;;;3749   
;;;3750   FRESULT f_rename (
004824  e92d40f3          PUSH     {r0,r1,r4-r7,lr}
;;;3751   	const TCHAR* path_old,	/* Pointer to the object to be renamed */
;;;3752   	const TCHAR* path_new	/* Pointer to the new name */
;;;3753   )
;;;3754   {
004828  e24ddf9d          SUB      sp,sp,#0x274
;;;3755   	FRESULT res;
;;;3756   	DIR djo, djn;
;;;3757   	BYTE buf[21], *dir;
;;;3758   	DWORD dw;
;;;3759   	DEFINE_NAMEBUF;
;;;3760   
;;;3761   
;;;3762   	/* Get logical drive number of the source object */
;;;3763   	res = find_volume(&djo.fs, &path_old, 1);
00482c  e3a02001          MOV      r2,#1
004830  e28d1f9d          ADD      r1,sp,#0x274
004834  e28d0f93          ADD      r0,sp,#0x24c
004838  ebfffffe          BL       find_volume
00483c  e1a04000          MOV      r4,r0
;;;3764   	if (res == FR_OK) {
004840  e3540000          CMP      r4,#0
004844  1a00006f          BNE      |L1.18952|
;;;3765   		djn.fs = djo.fs;
004848  e59d024c          LDR      r0,[sp,#0x24c]
00484c  e58d0224          STR      r0,[sp,#0x224]
;;;3766   		INIT_BUF(djo);
004850  e28d0c02          ADD      r0,sp,#0x200
004854  e58d0264          STR      r0,[sp,#0x264]
004858  e58dd268          STR      sp,[sp,#0x268]
;;;3767   		res = follow_path(&djo, path_old);		/* Check old object */
00485c  e59d1274          LDR      r1,[sp,#0x274]
004860  e28d0f93          ADD      r0,sp,#0x24c
004864  ebfffffe          BL       follow_path
004868  e1a04000          MOV      r4,r0
;;;3768   		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
00486c  e3540000          CMP      r4,#0
004870  1a000006          BNE      |L1.18576|
004874  e59d0264          LDR      r0,[sp,#0x264]
004878  e5d0000b          LDRB     r0,[r0,#0xb]
00487c  e3100020          TST      r0,#0x20
004880  0a000002          BEQ      |L1.18576|
;;;3769           {
;;;3770               sysprintf("FR_INVALID_NAME : 9\n\r");
004884  e28f0f71          ADR      r0,|L1.19024|
004888  ebfffffe          BL       sysprintf
;;;3771   			res = FR_INVALID_NAME;
00488c  e3a04006          MOV      r4,#6
                  |L1.18576|
;;;3772           }
;;;3773   #if _FS_LOCK
;;;3774   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3775   #endif
;;;3776   		if (res == FR_OK) {						/* Old object is found */
004890  e3540000          CMP      r4,#0
004894  1a00005b          BNE      |L1.18952|
;;;3777   			if (!djo.dir) {						/* Is root dir? */
004898  e59d0260          LDR      r0,[sp,#0x260]
00489c  e3500000          CMP      r0,#0
0048a0  1a000001          BNE      |L1.18604|
;;;3778   				res = FR_NO_FILE;
0048a4  e3a04004          MOV      r4,#4
0048a8  ea000056          B        |L1.18952|
                  |L1.18604|
;;;3779   			} else {
;;;3780   				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
0048ac  e59d0260          LDR      r0,[sp,#0x260]
0048b0  e280100b          ADD      r1,r0,#0xb
0048b4  e3a02015          MOV      r2,#0x15
0048b8  e28d0f83          ADD      r0,sp,#0x20c
0048bc  ebfffffe          BL       mem_cpy
;;;3781   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
0048c0  e3a02028          MOV      r2,#0x28
0048c4  e28d1f93          ADD      r1,sp,#0x24c
0048c8  e28d0f89          ADD      r0,sp,#0x224
0048cc  ebfffffe          BL       mem_cpy
;;;3782   				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
0048d0  e28d0f9e          ADD      r0,sp,#0x278
0048d4  ebfffffe          BL       get_ldnumber
0048d8  e3500000          CMP      r0,#0
0048dc  ba000004          BLT      |L1.18676|
;;;3783   					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
0048e0  e59d1278          LDR      r1,[sp,#0x278]
0048e4  e28d0f89          ADD      r0,sp,#0x224
0048e8  ebfffffe          BL       follow_path
0048ec  e1a04000          MOV      r4,r0
0048f0  ea000000          B        |L1.18680|
                  |L1.18676|
;;;3784   				else
;;;3785   					res = FR_INVALID_DRIVE;
0048f4  e3a0400b          MOV      r4,#0xb
                  |L1.18680|
;;;3786   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
0048f8  e3540000          CMP      r4,#0
0048fc  1a000000          BNE      |L1.18692|
004900  e3a04008          MOV      r4,#8
                  |L1.18692|
;;;3787   				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
004904  e3540004          CMP      r4,#4
004908  1a00003e          BNE      |L1.18952|
;;;3788   					res = dir_register(&djn);			/* Register the new entry */
00490c  e28d0f89          ADD      r0,sp,#0x224
004910  ebfffffe          BL       dir_register
004914  e1a04000          MOV      r4,r0
;;;3789   					if (res == FR_OK) {
004918  e3540000          CMP      r4,#0
00491c  1a000039          BNE      |L1.18952|
;;;3790   /* Start of critical section where any interruption can cause a cross-link */
;;;3791   						dir = djn.dir;					/* Copy information about object except name */
004920  e59d5238          LDR      r5,[sp,#0x238]
;;;3792   						mem_cpy(dir + 13, buf + 2, 19);
004924  e3a02013          MOV      r2,#0x13
004928  e28d1c02          ADD      r1,sp,#0x200
00492c  e281100e          ADD      r1,r1,#0xe
004930  e285000d          ADD      r0,r5,#0xd
004934  ebfffffe          BL       mem_cpy
;;;3793   						dir[DIR_Attr] = buf[0] | AM_ARC;
004938  e5dd020c          LDRB     r0,[sp,#0x20c]
00493c  e3800020          ORR      r0,r0,#0x20
004940  e5c5000b          STRB     r0,[r5,#0xb]
;;;3794   						djo.fs->wflag = 1;
004944  e3a00001          MOV      r0,#1
004948  e59d124c          LDR      r1,[sp,#0x24c]
00494c  e5c10004          STRB     r0,[r1,#4]
;;;3795   						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-directory if needed */
004950  e5d5000b          LDRB     r0,[r5,#0xb]
004954  e3100010          TST      r0,#0x10
004958  0a000020          BEQ      |L1.18912|
00495c  e59d0254          LDR      r0,[sp,#0x254]
004960  e59d122c          LDR      r1,[sp,#0x22c]
004964  e1500001          CMP      r0,r1
004968  0a00001c          BEQ      |L1.18912|
;;;3796   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
00496c  e1a01005          MOV      r1,r5
004970  e59d024c          LDR      r0,[sp,#0x24c]
004974  ebfffffe          BL       ld_clust
004978  e1a07000          MOV      r7,r0
00497c  e1a01007          MOV      r1,r7
004980  e59d024c          LDR      r0,[sp,#0x24c]
004984  ebfffffe          BL       clust2sect
004988  e1a06000          MOV      r6,r0
;;;3797   							if (!dw) {
00498c  e3560000          CMP      r6,#0
004990  1a000001          BNE      |L1.18844|
;;;3798   								res = FR_INT_ERR;
004994  e3a04002          MOV      r4,#2
004998  ea000010          B        |L1.18912|
                  |L1.18844|
;;;3799   							} else {
;;;3800   								res = move_window(djo.fs, dw);
00499c  e1a01006          MOV      r1,r6
0049a0  e59d024c          LDR      r0,[sp,#0x24c]
0049a4  ebfffffe          BL       move_window
0049a8  e1a04000          MOV      r4,r0
;;;3801   								dir = djo.fs->win + SZ_DIRE * 1;	/* Ptr to .. entry */
0049ac  e59d024c          LDR      r0,[sp,#0x24c]
0049b0  e2805058          ADD      r5,r0,#0x58
;;;3802   								if (res == FR_OK && dir[1] == '.') {
0049b4  e3540000          CMP      r4,#0
0049b8  1a000008          BNE      |L1.18912|
0049bc  e5d50001          LDRB     r0,[r5,#1]
0049c0  e350002e          CMP      r0,#0x2e
0049c4  1a000005          BNE      |L1.18912|
;;;3803   									st_clust(dir, djn.sclust);
0049c8  e1a00005          MOV      r0,r5
0049cc  e59d122c          LDR      r1,[sp,#0x22c]
0049d0  ebfffffe          BL       st_clust
;;;3804   									djo.fs->wflag = 1;
0049d4  e3a00001          MOV      r0,#1
0049d8  e59d124c          LDR      r1,[sp,#0x24c]
0049dc  e5c10004          STRB     r0,[r1,#4]
                  |L1.18912|
;;;3805   								}
;;;3806   							}
;;;3807   						}
;;;3808   						if (res == FR_OK) {
0049e0  e3540000          CMP      r4,#0
0049e4  1a000007          BNE      |L1.18952|
;;;3809   							res = dir_remove(&djo);		/* Remove old entry */
0049e8  e28d0f93          ADD      r0,sp,#0x24c
0049ec  ebfffffe          BL       dir_remove
0049f0  e1a04000          MOV      r4,r0
;;;3810   							if (res == FR_OK)
0049f4  e3540000          CMP      r4,#0
0049f8  1a000002          BNE      |L1.18952|
;;;3811   								res = sync_fs(djo.fs);
0049fc  e59d024c          LDR      r0,[sp,#0x24c]
004a00  ebfffffe          BL       sync_fs
004a04  e1a04000          MOV      r4,r0
                  |L1.18952|
;;;3812   						}
;;;3813   /* End of critical section */
;;;3814   					}
;;;3815   				}
;;;3816   			}
;;;3817   		}
;;;3818   		FREE_BUF();
;;;3819   	}
;;;3820   
;;;3821   	LEAVE_FF(djo.fs, res);
004a08  e1a01004          MOV      r1,r4
004a0c  e59d024c          LDR      r0,[sp,#0x24c]
004a10  ebfffffe          BL       unlock_fs
004a14  e1a00004          MOV      r0,r4
004a18  e28ddf9f          ADD      sp,sp,#0x27c
;;;3822   }
004a1c  e8bd80f0          POP      {r4-r7,pc}
                  |L1.18976|
004a20  46525f49          DCB      "FR_INVALID_NAME : 7\n\r",0
004a24  4e56414c
004a28  49445f4e
004a2c  414d4520
004a30  3a20370a
004a34  0d00    
004a36  00                DCB      0
004a37  00                DCB      0
                  |L1.19000|
004a38  46525f49          DCB      "FR_INVALID_NAME : 8\n\r",0
004a3c  4e56414c
004a40  49445f4e
004a44  414d4520
004a48  3a20380a
004a4c  0d00    
004a4e  00                DCB      0
004a4f  00                DCB      0
                  |L1.19024|
004a50  46525f49          DCB      "FR_INVALID_NAME : 9\n\r",0
004a54  4e56414c
004a58  49445f4e
004a5c  414d4520
004a60  3a20390a
004a64  0d00    
004a66  00                DCB      0
004a67  00                DCB      0
                          ENDP

                  f_utime PROC
;;;3830   
;;;3831   FRESULT f_utime (
004a68  e92d4073          PUSH     {r0,r1,r4-r6,lr}
;;;3832   	const TCHAR* path,	/* Pointer to the file/directory name */
;;;3833   	const FILINFO* fno	/* Pointer to the time stamp to be set */
;;;3834   )
;;;3835   {
004a6c  e24ddf8e          SUB      sp,sp,#0x238
004a70  e1a05001          MOV      r5,r1
;;;3836   	FRESULT res;
;;;3837   	DIR dj;
;;;3838   	BYTE *dir;
;;;3839   	DEFINE_NAMEBUF;
;;;3840   
;;;3841   
;;;3842   	/* Get logical drive number */
;;;3843   	res = find_volume(&dj.fs, &path, 1);
004a74  e3a02001          MOV      r2,#1
004a78  e28d1f8e          ADD      r1,sp,#0x238
004a7c  e28d0e21          ADD      r0,sp,#0x210
004a80  ebfffffe          BL       find_volume
004a84  e1a06000          MOV      r6,r0
;;;3844   	if (res == FR_OK) {
004a88  e3560000          CMP      r6,#0
004a8c  1a000029          BNE      |L1.19256|
;;;3845   		INIT_BUF(dj);
004a90  e28d0f81          ADD      r0,sp,#0x204
004a94  e58d0228          STR      r0,[sp,#0x228]
004a98  e28d0004          ADD      r0,sp,#4
004a9c  e58d022c          STR      r0,[sp,#0x22c]
;;;3846   		res = follow_path(&dj, path);	/* Follow the file path */
004aa0  e59d1238          LDR      r1,[sp,#0x238]
004aa4  e28d0e21          ADD      r0,sp,#0x210
004aa8  ebfffffe          BL       follow_path
004aac  e1a06000          MOV      r6,r0
;;;3847   		FREE_BUF();
;;;3848   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
004ab0  e3560000          CMP      r6,#0
004ab4  1a000006          BNE      |L1.19156|
004ab8  e59d0228          LDR      r0,[sp,#0x228]
004abc  e5d0000b          LDRB     r0,[r0,#0xb]
004ac0  e3100020          TST      r0,#0x20
004ac4  0a000002          BEQ      |L1.19156|
;;;3849           {
;;;3850               sysprintf("FR_INVALID_NAME : 10\n\r");
004ac8  e28f0fb6          ADR      r0,|L1.19880|
004acc  ebfffffe          BL       sysprintf
;;;3851   			res = FR_INVALID_NAME;
004ad0  e3a06006          MOV      r6,#6
                  |L1.19156|
;;;3852           }
;;;3853   		if (res == FR_OK) {
004ad4  e3560000          CMP      r6,#0
004ad8  1a000016          BNE      |L1.19256|
;;;3854   			dir = dj.dir;
004adc  e59d4224          LDR      r4,[sp,#0x224]
;;;3855   			if (!dir) {					/* Root directory */
004ae0  e3540000          CMP      r4,#0
004ae4  1a000003          BNE      |L1.19192|
;;;3856                   sysprintf("FR_INVALID_NAME : 11\n\r");
004ae8  e28f0e2d          ADR      r0,|L1.19904|
004aec  ebfffffe          BL       sysprintf
;;;3857   				res = FR_INVALID_NAME;
004af0  e3a06006          MOV      r6,#6
004af4  ea00000f          B        |L1.19256|
                  |L1.19192|
;;;3858   			} else {					/* File or sub-directory */
;;;3859   				ST_WORD(dir + DIR_WrtTime, fno->ftime);
004af8  e5d50006          LDRB     r0,[r5,#6]
004afc  e5c40016          STRB     r0,[r4,#0x16]
004b00  e1d500b6          LDRH     r0,[r5,#6]
004b04  e1a00440          ASR      r0,r0,#8
004b08  e5c40017          STRB     r0,[r4,#0x17]
;;;3860   				ST_WORD(dir + DIR_WrtDate, fno->fdate);
004b0c  e5d50004          LDRB     r0,[r5,#4]
004b10  e5c40018          STRB     r0,[r4,#0x18]
004b14  e1d500b4          LDRH     r0,[r5,#4]
004b18  e1a00440          ASR      r0,r0,#8
004b1c  e5c40019          STRB     r0,[r4,#0x19]
;;;3861   				dj.fs->wflag = 1;
004b20  e3a00001          MOV      r0,#1
004b24  e59d1210          LDR      r1,[sp,#0x210]
004b28  e5c10004          STRB     r0,[r1,#4]
;;;3862   				res = sync_fs(dj.fs);
004b2c  e59d0210          LDR      r0,[sp,#0x210]
004b30  ebfffffe          BL       sync_fs
004b34  e1a06000          MOV      r6,r0
                  |L1.19256|
;;;3863   			}
;;;3864   		}
;;;3865   	}
;;;3866   
;;;3867   	LEAVE_FF(dj.fs, res);
004b38  e1a01006          MOV      r1,r6
004b3c  e59d0210          LDR      r0,[sp,#0x210]
004b40  ebfffffe          BL       unlock_fs
004b44  e1a00006          MOV      r0,r6
004b48  e28ddd09          ADD      sp,sp,#0x240
;;;3868   }
004b4c  e8bd8070          POP      {r4-r6,pc}
;;;3869   
                          ENDP

                  f_mkfs PROC
;;;4108   
;;;4109   FRESULT f_mkfs (
004b50  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;4110   	const TCHAR* path,	/* Logical drive number */
;;;4111   	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
;;;4112   	UINT au				/* Size of allocation unit in unit of byte or sector */
;;;4113   )
;;;4114   {
004b54  e24dd048          SUB      sp,sp,#0x48
004b58  e1a0b002          MOV      r11,r2
;;;4115   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;4116   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;4117   	int vol;
;;;4118   	BYTE fmt, md, sys, *tbl, pdrv, part;
;;;4119   	DWORD n_clst, vs, n, wsect;
;;;4120   	UINT i;
;;;4121   	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
;;;4122   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;4123   	FATFS *fs;
;;;4124   	DSTATUS stat;
;;;4125   #if _USE_TRIM
;;;4126   	DWORD eb[2];
;;;4127   #endif
;;;4128   
;;;4129   
;;;4130   	/* Check mounted drive and clear work area */
;;;4131   	if (sfd > 1) return FR_INVALID_PARAMETER;
004b5c  e59d004c          LDR      r0,[sp,#0x4c]
004b60  e3500001          CMP      r0,#1
004b64  da000002          BLE      |L1.19316|
004b68  e3a00013          MOV      r0,#0x13
                  |L1.19308|
004b6c  e28dd054          ADD      sp,sp,#0x54
;;;4132   	vol = get_ldnumber(&path);
;;;4133   	if (vol < 0) return FR_INVALID_DRIVE;
;;;4134   	fs = FatFs[vol];
;;;4135   	if (!fs) return FR_NOT_ENABLED;
;;;4136   	fs->fs_type = 0;
;;;4137   	pdrv = LD2PD(vol);	/* Physical drive */
;;;4138   	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
;;;4139   
;;;4140   	/* Get disk statics */
;;;4141   	stat = disk_initialize(pdrv);
;;;4142   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;4143   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;4144   #if _MAX_SS != _MIN_SS		/* Get disk sector size */
;;;4145   	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
;;;4146   		return FR_DISK_ERR;
;;;4147   #endif
;;;4148   	if (_MULTI_PARTITION && part) {
;;;4149   		/* Get partition information from partition table in the MBR */
;;;4150   		if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
;;;4151   		if (LD_WORD(fs->win + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;4152   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4153   		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
;;;4154   		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
;;;4155   		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
;;;4156   	} else {
;;;4157   		/* Create a partition in this function */
;;;4158   		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;4159   			return FR_DISK_ERR;
;;;4160   		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
;;;4161   		n_vol -= b_vol;				/* Volume size */
;;;4162   	}
;;;4163   
;;;4164   	if (au & (au - 1)) au = 0;
;;;4165   	if (!au) {						/* AU auto selection */
;;;4166   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;4167   		for (i = 0; vs < vst[i]; i++) ;
;;;4168   		au = cst[i];
;;;4169   	}
;;;4170   	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
;;;4171   	if (!au) au = 1;
;;;4172   	if (au > 128) au = 128;
;;;4173   
;;;4174   	/* Pre-compute number of clusters and FAT sub-type */
;;;4175   	n_clst = n_vol / au;
;;;4176   	fmt = FS_FAT12;
;;;4177   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;4178   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;4179   
;;;4180   	/* Determine offset and size of FAT structure */
;;;4181   	if (fmt == FS_FAT32) {
;;;4182   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;4183   		n_rsv = 32;
;;;4184   		n_dir = 0;
;;;4185   	} else {
;;;4186   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;4187   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;4188   		n_rsv = 1;
;;;4189   		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
;;;4190   	}
;;;4191   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;4192   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;4193   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;4194   	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
;;;4195   
;;;4196   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;4197   	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;4198   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;4199   	n = (n - b_data) / N_FATS;
;;;4200   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;4201   		n_rsv += n;
;;;4202   		b_fat += n;
;;;4203   	} else {					/* FAT12/16: Expand FAT size */
;;;4204   		n_fat += n;
;;;4205   	}
;;;4206   
;;;4207   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;4208   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;4209   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;4210   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;4211   		return FR_MKFS_ABORTED;
;;;4212   
;;;4213   	/* Determine system ID in the partition table */
;;;4214   	if (fmt == FS_FAT32) {
;;;4215   		sys = 0x0C;		/* FAT32X */
;;;4216   	} else {
;;;4217   		if (fmt == FS_FAT12 && n_vol < 0x10000) {
;;;4218   			sys = 0x01;	/* FAT12(<65536) */
;;;4219   		} else {
;;;4220   			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
;;;4221   		}
;;;4222   	}
;;;4223   
;;;4224   	if (_MULTI_PARTITION && part) {
;;;4225   		/* Update system ID in the partition table */
;;;4226   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4227   		tbl[4] = sys;
;;;4228   		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
;;;4229   			return FR_DISK_ERR;
;;;4230   		md = 0xF8;
;;;4231   	} else {
;;;4232   		if (sfd) {	/* No partition table (SFD) */
;;;4233   			md = 0xF0;
;;;4234   		} else {	/* Create partition table (FDISK) */
;;;4235   			mem_set(fs->win, 0, SS(fs));
;;;4236   			tbl = fs->win + MBR_Table;	/* Create partition table for single partition in the drive */
;;;4237   			tbl[1] = 1;						/* Partition start head */
;;;4238   			tbl[2] = 1;						/* Partition start sector */
;;;4239   			tbl[3] = 0;						/* Partition start cylinder */
;;;4240   			tbl[4] = sys;					/* System type */
;;;4241   			tbl[5] = 254;					/* Partition end head */
;;;4242   			n = (b_vol + n_vol) / 63 / 255;
;;;4243   			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
;;;4244   			tbl[7] = (BYTE)n;				/* End cylinder */
;;;4245   			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
;;;4246   			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
;;;4247   			ST_WORD(fs->win + BS_55AA, 0xAA55);	/* MBR signature */
;;;4248   			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
;;;4249   				return FR_DISK_ERR;
;;;4250   			md = 0xF8;
;;;4251   		}
;;;4252   	}
;;;4253   
;;;4254   	/* Create BPB in the VBR */
;;;4255   	tbl = fs->win;							/* Clear sector */
;;;4256   	mem_set(tbl, 0, SS(fs));
;;;4257   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;4258   	i = SS(fs);								/* Sector size */
;;;4259   	ST_WORD(tbl + BPB_BytsPerSec, i);
;;;4260   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;4261   	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
;;;4262   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;4263   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
;;;4264   	ST_WORD(tbl + BPB_RootEntCnt, i);
;;;4265   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;4266   		ST_WORD(tbl + BPB_TotSec16, n_vol);
;;;4267   	} else {
;;;4268   		ST_DWORD(tbl + BPB_TotSec32, n_vol);
;;;4269   	}
;;;4270   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;4271   	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
;;;4272   	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
;;;4273   	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;4274   	n = GET_FATTIME();						/* Use current time as VSN */
;;;4275   	if (fmt == FS_FAT32) {
;;;4276   		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
;;;4277   		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;4278   		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
;;;4279   		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
;;;4280   		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
;;;4281   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;4282   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;4283   		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;4284   	} else {
;;;4285   		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
;;;4286   		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;4287   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;4288   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;4289   		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;4290   	}
;;;4291   	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;4292   	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
;;;4293   		return FR_DISK_ERR;
;;;4294   	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
;;;4295   		disk_write(pdrv, tbl, b_vol + 6, 1);
;;;4296   
;;;4297   	/* Initialize FAT area */
;;;4298   	wsect = b_fat;
;;;4299   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;4300   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;4301   		n = md;								/* Media descriptor byte */
;;;4302   		if (fmt != FS_FAT32) {
;;;4303   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;4304   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
;;;4305   		} else {
;;;4306   			n |= 0xFFFFFF00;
;;;4307   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
;;;4308   			ST_DWORD(tbl + 4, 0xFFFFFFFF);
;;;4309   			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
;;;4310   		}
;;;4311   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4312   			return FR_DISK_ERR;
;;;4313   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;4314   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;4315   			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4316   				return FR_DISK_ERR;
;;;4317   		}
;;;4318   	}
;;;4319   
;;;4320   	/* Initialize root directory */
;;;4321   	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
;;;4322   	do {
;;;4323   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4324   			return FR_DISK_ERR;
;;;4325   	} while (--i);
;;;4326   
;;;4327   #if _USE_TRIM	/* Erase data area if needed */
;;;4328   	{
;;;4329   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;4330   		disk_ioctl(pdrv, CTRL_TRIM, eb);
;;;4331   	}
;;;4332   #endif
;;;4333   
;;;4334   	/* Create FSINFO if needed */
;;;4335   	if (fmt == FS_FAT32) {
;;;4336   		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
;;;4337   		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
;;;4338   		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;4339   		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
;;;4340   		ST_WORD(tbl + BS_55AA, 0xAA55);
;;;4341   		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
;;;4342   		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
;;;4343   	}
;;;4344   
;;;4345   	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;4346   }
004b70  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.19316|
004b74  e28d0048          ADD      r0,sp,#0x48           ;4132
004b78  ebfffffe          BL       get_ldnumber
004b7c  e58d0044          STR      r0,[sp,#0x44]         ;4132
004b80  e59d0044          LDR      r0,[sp,#0x44]         ;4133
004b84  e3500000          CMP      r0,#0                 ;4133
004b88  aa000001          BGE      |L1.19348|
004b8c  e3a0000b          MOV      r0,#0xb               ;4133
004b90  eafffff5          B        |L1.19308|
                  |L1.19348|
004b94  e59f123c          LDR      r1,|L1.19928|
004b98  e59d0044          LDR      r0,[sp,#0x44]         ;4134
004b9c  e7915100          LDR      r5,[r1,r0,LSL #2]     ;4134
004ba0  e3550000          CMP      r5,#0                 ;4135
004ba4  1a000001          BNE      |L1.19376|
004ba8  e3a0000c          MOV      r0,#0xc               ;4135
004bac  eaffffee          B        |L1.19308|
                  |L1.19376|
004bb0  e3a00000          MOV      r0,#0                 ;4136
004bb4  e5c50000          STRB     r0,[r5,#0]            ;4136
004bb8  e59d0044          LDR      r0,[sp,#0x44]         ;4137
004bbc  e20000ff          AND      r0,r0,#0xff           ;4137
004bc0  e58d0038          STR      r0,[sp,#0x38]         ;4137
004bc4  e3a00000          MOV      r0,#0                 ;4138
004bc8  e58d0034          STR      r0,[sp,#0x34]         ;4138
004bcc  e59d0038          LDR      r0,[sp,#0x38]         ;4141
004bd0  ebfffffe          BL       disk_initialize
004bd4  e58d000c          STR      r0,[sp,#0xc]          ;4141
004bd8  e59d000c          LDR      r0,[sp,#0xc]          ;4142
004bdc  e3100001          TST      r0,#1                 ;4142
004be0  0a000001          BEQ      |L1.19436|
004be4  e3a00003          MOV      r0,#3                 ;4142
004be8  eaffffdf          B        |L1.19308|
                  |L1.19436|
004bec  e59d000c          LDR      r0,[sp,#0xc]          ;4143
004bf0  e3100004          TST      r0,#4                 ;4143
004bf4  0a000001          BEQ      |L1.19456|
004bf8  e3a0000a          MOV      r0,#0xa               ;4143
004bfc  eaffffda          B        |L1.19308|
                  |L1.19456|
004c00  e285200a          ADD      r2,r5,#0xa            ;4145
004c04  e3a01002          MOV      r1,#2                 ;4145
004c08  e59d0038          LDR      r0,[sp,#0x38]         ;4145
004c0c  ebfffffe          BL       disk_ioctl
004c10  e3500000          CMP      r0,#0                 ;4145
004c14  1a000005          BNE      |L1.19504|
004c18  e1d500ba          LDRH     r0,[r5,#0xa]          ;4145
004c1c  e3500a01          CMP      r0,#0x1000            ;4145
004c20  ca000002          BGT      |L1.19504|
004c24  e1d500ba          LDRH     r0,[r5,#0xa]          ;4145
004c28  e3500c02          CMP      r0,#0x200             ;4145
004c2c  aa000001          BGE      |L1.19512|
                  |L1.19504|
004c30  e3a00001          MOV      r0,#1                 ;4146
004c34  eaffffcc          B        |L1.19308|
                  |L1.19512|
004c38  e1a00000          MOV      r0,r0                 ;4148
004c3c  e28d2018          ADD      r2,sp,#0x18           ;4158
004c40  e3a01001          MOV      r1,#1                 ;4158
004c44  e59d0038          LDR      r0,[sp,#0x38]         ;4158
004c48  ebfffffe          BL       disk_ioctl
004c4c  e3500000          CMP      r0,#0                 ;4158
004c50  1a000002          BNE      |L1.19552|
004c54  e59d0018          LDR      r0,[sp,#0x18]         ;4158
004c58  e3500080          CMP      r0,#0x80              ;4158
004c5c  2a000001          BCS      |L1.19560|
                  |L1.19552|
004c60  e3a00001          MOV      r0,#1                 ;4159
004c64  eaffffc0          B        |L1.19308|
                  |L1.19560|
004c68  e59d004c          LDR      r0,[sp,#0x4c]         ;4160
004c6c  e3500000          CMP      r0,#0                 ;4160
004c70  0a000001          BEQ      |L1.19580|
004c74  e3a00000          MOV      r0,#0                 ;4160
004c78  ea000000          B        |L1.19584|
                  |L1.19580|
004c7c  e3a0003f          MOV      r0,#0x3f              ;4160
                  |L1.19584|
004c80  e1a0a000          MOV      r10,r0                ;4160
004c84  e59d0018          LDR      r0,[sp,#0x18]         ;4161
004c88  e040000a          SUB      r0,r0,r10             ;4161
004c8c  e58d0018          STR      r0,[sp,#0x18]         ;4161
004c90  e24b0001          SUB      r0,r11,#1             ;4164
004c94  e110000b          TST      r0,r11                ;4164
004c98  0a000000          BEQ      |L1.19616|
004c9c  e3a0b000          MOV      r11,#0                ;4164
                  |L1.19616|
004ca0  e35b0000          CMP      r11,#0                ;4165
004ca4  1a000017          BNE      |L1.19720|
004ca8  e1d500ba          LDRH     r0,[r5,#0xa]          ;4166
004cac  e58d0008          STR      r0,[sp,#8]            ;4166
004cb0  e1a02fc0          ASR      r2,r0,#31             ;4166
004cb4  e0800ba2          ADD      r0,r0,r2,LSR #23      ;4166
004cb8  e1a014c0          ASR      r1,r0,#9              ;4166
004cbc  e3a00e7d          MOV      r0,#0x7d0             ;4166
004cc0  ebfffffe          BL       __aeabi_idivmod
004cc4  e58d0004          STR      r0,[sp,#4]            ;4166
004cc8  e1a01000          MOV      r1,r0                 ;4166
004ccc  e59d0018          LDR      r0,[sp,#0x18]         ;4166
004cd0  ebfffffe          BL       __aeabi_uidivmod
004cd4  e58d0030          STR      r0,[sp,#0x30]         ;4166
004cd8  e3a09000          MOV      r9,#0                 ;4167
004cdc  ea000000          B        |L1.19684|
                  |L1.19680|
004ce0  e2899001          ADD      r9,r9,#1              ;4167
                  |L1.19684|
004ce4  e59f00f0          LDR      r0,|L1.19932|
004ce8  e0800089          ADD      r0,r0,r9,LSL #1       ;4167
004cec  e1d010b0          LDRH     r1,[r0,#0]            ;4167
004cf0  e59d0030          LDR      r0,[sp,#0x30]         ;4167
004cf4  e1510000          CMP      r1,r0                 ;4167
004cf8  8afffff8          BHI      |L1.19680|
004cfc  e59f00dc          LDR      r0,|L1.19936|
004d00  e0800089          ADD      r0,r0,r9,LSL #1       ;4168
004d04  e1d0b0b0          LDRH     r11,[r0,#0]           ;4168
                  |L1.19720|
004d08  e35b0c02          CMP      r11,#0x200            ;4170
004d0c  3a000003          BCC      |L1.19744|
004d10  e1d510ba          LDRH     r1,[r5,#0xa]          ;4170
004d14  e1a0000b          MOV      r0,r11                ;4170
004d18  ebfffffe          BL       __aeabi_uidivmod
004d1c  e1a0b000          MOV      r11,r0                ;4170
                  |L1.19744|
004d20  e35b0000          CMP      r11,#0                ;4171
004d24  1a000000          BNE      |L1.19756|
004d28  e3a0b001          MOV      r11,#1                ;4171
                  |L1.19756|
004d2c  e35b0080          CMP      r11,#0x80             ;4172
004d30  9a000000          BLS      |L1.19768|
004d34  e3a0b080          MOV      r11,#0x80             ;4172
                  |L1.19768|
004d38  e1a0100b          MOV      r1,r11                ;4175
004d3c  e59d0018          LDR      r0,[sp,#0x18]         ;4175
004d40  ebfffffe          BL       __aeabi_uidivmod
004d44  e1a08000          MOV      r8,r0                 ;4175
004d48  e3a06001          MOV      r6,#1                 ;4176
004d4c  e59f1090          LDR      r1,|L1.19940|
004d50  e1580001          CMP      r8,r1                 ;4177
004d54  3a000000          BCC      |L1.19804|
004d58  e3a06002          MOV      r6,#2                 ;4177
                  |L1.19804|
004d5c  e59f0084          LDR      r0,|L1.19944|
004d60  e1580000          CMP      r8,r0                 ;4178
004d64  3a000000          BCC      |L1.19820|
004d68  e3a06003          MOV      r6,#3                 ;4178
                  |L1.19820|
004d6c  e3560003          CMP      r6,#3                 ;4181
004d70  1a00001d          BNE      |L1.19948|
004d74  e3a02008          MOV      r2,#8                 ;4182
004d78  e0822108          ADD      r2,r2,r8,LSL #2       ;4182
004d7c  e1d530ba          LDRH     r3,[r5,#0xa]          ;4182
004d80  e0822003          ADD      r2,r2,r3              ;4182
004d84  e2420001          SUB      r0,r2,#1              ;4182
004d88  e1a01003          MOV      r1,r3                 ;4182
004d8c  ebfffffe          BL       __aeabi_uidivmod
004d90  e1a07000          MOV      r7,r0                 ;4182
004d94  e3a00020          MOV      r0,#0x20              ;4183
004d98  e58d0014          STR      r0,[sp,#0x14]         ;4183
004d9c  e3a00000          MOV      r0,#0                 ;4184
004da0  e58d0010          STR      r0,[sp,#0x10]         ;4184
004da4  ea000025          B        |L1.20032|
                  |L1.19880|
004da8  46525f49          DCB      "FR_INVALID_NAME : 10\n\r",0
004dac  4e56414c
004db0  49445f4e
004db4  414d4520
004db8  3a203130
004dbc  0a0d00  
004dbf  00                DCB      0
                  |L1.19904|
004dc0  46525f49          DCB      "FR_INVALID_NAME : 11\n\r",0
004dc4  4e56414c
004dc8  49445f4e
004dcc  414d4520
004dd0  3a203131
004dd4  0a0d00  
004dd7  00                DCB      0
                  |L1.19928|
                          DCD      FatFs
                  |L1.19932|
                          DCD      vst
                  |L1.19936|
                          DCD      ||cst||
                  |L1.19940|
                          DCD      0x00000ff6
                  |L1.19944|
                          DCD      0x0000fff6
                  |L1.19948|
004dec  e3560001          CMP      r6,#1                 ;4186
004df0  1a000004          BNE      |L1.19976|
004df4  e0880088          ADD      r0,r8,r8,LSL #1       ;4186
004df8  e2800001          ADD      r0,r0,#1              ;4186
004dfc  e1a000a0          LSR      r0,r0,#1              ;4186
004e00  e2800003          ADD      r0,r0,#3              ;4186
004e04  ea000001          B        |L1.19984|
                  |L1.19976|
004e08  e1a00088          LSL      r0,r8,#1              ;4186
004e0c  e2800004          ADD      r0,r0,#4              ;4186
                  |L1.19984|
004e10  e1a07000          MOV      r7,r0                 ;4186
004e14  e1d510ba          LDRH     r1,[r5,#0xa]          ;4187
004e18  e0812007          ADD      r2,r1,r7              ;4187
004e1c  e2420001          SUB      r0,r2,#1              ;4187
004e20  ebfffffe          BL       __aeabi_uidivmod
004e24  e1a07000          MOV      r7,r0                 ;4187
004e28  e3a00001          MOV      r0,#1                 ;4188
004e2c  e58d0014          STR      r0,[sp,#0x14]         ;4188
004e30  e1d510ba          LDRH     r1,[r5,#0xa]          ;4189
004e34  e3a00901          MOV      r0,#0x4000            ;4189
004e38  ebfffffe          BL       __aeabi_uidivmod
004e3c  e58d0010          STR      r0,[sp,#0x10]         ;4189
                  |L1.20032|
004e40  e59d0014          LDR      r0,[sp,#0x14]         ;4191
004e44  e080000a          ADD      r0,r0,r10             ;4191
004e48  e58d0024          STR      r0,[sp,#0x24]         ;4191
004e4c  e59d0024          LDR      r0,[sp,#0x24]         ;4192
004e50  e0800007          ADD      r0,r0,r7              ;4192
004e54  e58d0020          STR      r0,[sp,#0x20]         ;4192
004e58  e59d0020          LDR      r0,[sp,#0x20]         ;4193
004e5c  e59d1010          LDR      r1,[sp,#0x10]         ;4193
004e60  e0800001          ADD      r0,r0,r1              ;4193
004e64  e58d001c          STR      r0,[sp,#0x1c]         ;4193
004e68  e59d001c          LDR      r0,[sp,#0x1c]         ;4194
004e6c  e080000b          ADD      r0,r0,r11             ;4194
004e70  e040000a          SUB      r0,r0,r10             ;4194
004e74  e59d1018          LDR      r1,[sp,#0x18]         ;4194
004e78  e1500001          CMP      r0,r1                 ;4194
004e7c  9a000001          BLS      |L1.20104|
004e80  e3a0000e          MOV      r0,#0xe               ;4194
004e84  eaffff38          B        |L1.19308|
                  |L1.20104|
004e88  e28d202c          ADD      r2,sp,#0x2c           ;4197
004e8c  e3a01003          MOV      r1,#3                 ;4197
004e90  e59d0038          LDR      r0,[sp,#0x38]         ;4197
004e94  ebfffffe          BL       disk_ioctl
004e98  e3500000          CMP      r0,#0                 ;4197
004e9c  1a000005          BNE      |L1.20152|
004ea0  e59d002c          LDR      r0,[sp,#0x2c]         ;4197
004ea4  e3500000          CMP      r0,#0                 ;4197
004ea8  0a000002          BEQ      |L1.20152|
004eac  e59d002c          LDR      r0,[sp,#0x2c]         ;4197
004eb0  e3500902          CMP      r0,#0x8000            ;4197
004eb4  9a000001          BLS      |L1.20160|
                  |L1.20152|
004eb8  e3a00001          MOV      r0,#1                 ;4197
004ebc  e58d002c          STR      r0,[sp,#0x2c]         ;4197
                  |L1.20160|
004ec0  e59d001c          LDR      r0,[sp,#0x1c]         ;4198
004ec4  e59d102c          LDR      r1,[sp,#0x2c]         ;4198
004ec8  e0800001          ADD      r0,r0,r1              ;4198
004ecc  e2400001          SUB      r0,r0,#1              ;4198
004ed0  e2411001          SUB      r1,r1,#1              ;4198
004ed4  e1c00001          BIC      r0,r0,r1              ;4198
004ed8  e58d002c          STR      r0,[sp,#0x2c]         ;4198
004edc  e59d001c          LDR      r0,[sp,#0x1c]         ;4199
004ee0  e59d102c          LDR      r1,[sp,#0x2c]         ;4199
004ee4  e0410000          SUB      r0,r1,r0              ;4199
004ee8  e58d002c          STR      r0,[sp,#0x2c]         ;4199
004eec  e3560003          CMP      r6,#3                 ;4200
004ef0  1a000008          BNE      |L1.20248|
004ef4  e59d0014          LDR      r0,[sp,#0x14]         ;4201
004ef8  e59d102c          LDR      r1,[sp,#0x2c]         ;4201
004efc  e0800001          ADD      r0,r0,r1              ;4201
004f00  e58d0014          STR      r0,[sp,#0x14]         ;4201
004f04  e59d0024          LDR      r0,[sp,#0x24]         ;4202
004f08  e59d102c          LDR      r1,[sp,#0x2c]         ;4202
004f0c  e0800001          ADD      r0,r0,r1              ;4202
004f10  e58d0024          STR      r0,[sp,#0x24]         ;4202
004f14  ea000001          B        |L1.20256|
                  |L1.20248|
004f18  e59d002c          LDR      r0,[sp,#0x2c]         ;4204
004f1c  e0877000          ADD      r7,r7,r0              ;4204
                  |L1.20256|
004f20  e59d1014          LDR      r1,[sp,#0x14]         ;4208
004f24  e59d2018          LDR      r2,[sp,#0x18]         ;4208
004f28  e0421001          SUB      r1,r2,r1              ;4208
004f2c  e0412007          SUB      r2,r1,r7              ;4208
004f30  e59d1010          LDR      r1,[sp,#0x10]         ;4208
004f34  e0420001          SUB      r0,r2,r1              ;4208
004f38  e1a0100b          MOV      r1,r11                ;4208
004f3c  ebfffffe          BL       __aeabi_uidivmod
004f40  e1a08000          MOV      r8,r0                 ;4208
004f44  e3560002          CMP      r6,#2                 ;4209
004f48  1a000002          BNE      |L1.20312|
004f4c  e51f0170          LDR      r0,|L1.19940|
004f50  e1580000          CMP      r8,r0                 ;4209
004f54  3a000004          BCC      |L1.20332|
                  |L1.20312|
004f58  e3560003          CMP      r6,#3                 ;4210
004f5c  1a000004          BNE      |L1.20340|
004f60  e51f0180          LDR      r0,|L1.19944|
004f64  e1580000          CMP      r8,r0                 ;4210
004f68  2a000001          BCS      |L1.20340|
                  |L1.20332|
004f6c  e3a0000e          MOV      r0,#0xe               ;4211
004f70  eafffefd          B        |L1.19308|
                  |L1.20340|
004f74  e3560003          CMP      r6,#3                 ;4214
004f78  1a000002          BNE      |L1.20360|
004f7c  e3a0000c          MOV      r0,#0xc               ;4215
004f80  e58d003c          STR      r0,[sp,#0x3c]         ;4215
004f84  ea00000e          B        |L1.20420|
                  |L1.20360|
004f88  e3560001          CMP      r6,#1                 ;4217
004f8c  1a000005          BNE      |L1.20392|
004f90  e59d0018          LDR      r0,[sp,#0x18]         ;4217
004f94  e3500801          CMP      r0,#0x10000           ;4217
004f98  2a000002          BCS      |L1.20392|
004f9c  e3a00001          MOV      r0,#1                 ;4218
004fa0  e58d003c          STR      r0,[sp,#0x3c]         ;4218
004fa4  ea000006          B        |L1.20420|
                  |L1.20392|
004fa8  e59d0018          LDR      r0,[sp,#0x18]         ;4220
004fac  e3500801          CMP      r0,#0x10000           ;4220
004fb0  2a000001          BCS      |L1.20412|
004fb4  e3a00004          MOV      r0,#4                 ;4220
004fb8  ea000000          B        |L1.20416|
                  |L1.20412|
004fbc  e3a00006          MOV      r0,#6                 ;4220
                  |L1.20416|
004fc0  e58d003c          STR      r0,[sp,#0x3c]         ;4220
                  |L1.20420|
004fc4  e1a00000          MOV      r0,r0                 ;4224
004fc8  e59d004c          LDR      r0,[sp,#0x4c]         ;4232
004fcc  e3500000          CMP      r0,#0                 ;4232
004fd0  0a000002          BEQ      |L1.20448|
004fd4  e3a000f0          MOV      r0,#0xf0              ;4233
004fd8  e58d0040          STR      r0,[sp,#0x40]         ;4233
004fdc  ea00003e          B        |L1.20700|
                  |L1.20448|
004fe0  e1d520ba          LDRH     r2,[r5,#0xa]          ;4235
004fe4  e3a01000          MOV      r1,#0                 ;4235
004fe8  e2850038          ADD      r0,r5,#0x38           ;4235
004fec  ebfffffe          BL       mem_set
004ff0  e2854c01          ADD      r4,r5,#0x100          ;4236
004ff4  e28440f6          ADD      r4,r4,#0xf6           ;4236
004ff8  e3a00001          MOV      r0,#1                 ;4237
004ffc  e5c40001          STRB     r0,[r4,#1]            ;4237
005000  e5c40002          STRB     r0,[r4,#2]            ;4238
005004  e3a00000          MOV      r0,#0                 ;4239
005008  e5c40003          STRB     r0,[r4,#3]            ;4239
00500c  e59d003c          LDR      r0,[sp,#0x3c]         ;4240
005010  e5c40004          STRB     r0,[r4,#4]            ;4240
005014  e3a000fe          MOV      r0,#0xfe              ;4241
005018  e5c40005          STRB     r0,[r4,#5]            ;4241
00501c  e59d1018          LDR      r1,[sp,#0x18]         ;4242
005020  e08a0001          ADD      r0,r10,r1             ;4242
005024  e3a0103f          MOV      r1,#0x3f              ;4242
005028  ebfffffe          BL       __aeabi_uidivmod
00502c  e3a010ff          MOV      r1,#0xff              ;4242
005030  e58d0008          STR      r0,[sp,#8]            ;4242
005034  ebfffffe          BL       __aeabi_uidivmod
005038  e58d002c          STR      r0,[sp,#0x2c]         ;4242
00503c  e3a0103f          MOV      r1,#0x3f              ;4243
005040  e59d002c          LDR      r0,[sp,#0x2c]         ;4243
005044  e1810120          ORR      r0,r1,r0,LSR #2       ;4243
005048  e5c40006          STRB     r0,[r4,#6]            ;4243
00504c  e59d002c          LDR      r0,[sp,#0x2c]         ;4244
005050  e5c40007          STRB     r0,[r4,#7]            ;4244
005054  e3a0003f          MOV      r0,#0x3f              ;4245
005058  e5c40008          STRB     r0,[r4,#8]            ;4245
00505c  e3a00000          MOV      r0,#0                 ;4245
005060  e5c40009          STRB     r0,[r4,#9]            ;4245
005064  e5c4000a          STRB     r0,[r4,#0xa]          ;4245
005068  e5c4000b          STRB     r0,[r4,#0xb]          ;4245
00506c  e59d0018          LDR      r0,[sp,#0x18]         ;4246
005070  e5c4000c          STRB     r0,[r4,#0xc]          ;4246
005074  e59d0018          LDR      r0,[sp,#0x18]         ;4246
005078  e1a00800          LSL      r0,r0,#16             ;4246
00507c  e1a00c20          LSR      r0,r0,#24             ;4246
005080  e5c4000d          STRB     r0,[r4,#0xd]          ;4246
005084  e59d0018          LDR      r0,[sp,#0x18]         ;4246
005088  e1a00400          LSL      r0,r0,#8              ;4246
00508c  e1a00c20          LSR      r0,r0,#24             ;4246
005090  e5c4000e          STRB     r0,[r4,#0xe]          ;4246
005094  e59d0018          LDR      r0,[sp,#0x18]         ;4246
005098  e1a00c20          LSR      r0,r0,#24             ;4246
00509c  e5c4000f          STRB     r0,[r4,#0xf]          ;4246
0050a0  e3a00055          MOV      r0,#0x55              ;4247
0050a4  e5c50236          STRB     r0,[r5,#0x236]        ;4247
0050a8  e3a000aa          MOV      r0,#0xaa              ;4247
0050ac  e5c50237          STRB     r0,[r5,#0x237]        ;4247
0050b0  e3a03001          MOV      r3,#1                 ;4248
0050b4  e3a02000          MOV      r2,#0                 ;4248
0050b8  e2851038          ADD      r1,r5,#0x38           ;4248
0050bc  e59d0038          LDR      r0,[sp,#0x38]         ;4248
0050c0  ebfffffe          BL       disk_write
0050c4  e3500000          CMP      r0,#0                 ;4248
0050c8  0a000001          BEQ      |L1.20692|
0050cc  e3a00001          MOV      r0,#1                 ;4249
0050d0  eafffea5          B        |L1.19308|
                  |L1.20692|
0050d4  e3a000f8          MOV      r0,#0xf8              ;4250
0050d8  e58d0040          STR      r0,[sp,#0x40]         ;4250
                  |L1.20700|
0050dc  e2854038          ADD      r4,r5,#0x38           ;4255
0050e0  e1d520ba          LDRH     r2,[r5,#0xa]          ;4256
0050e4  e3a01000          MOV      r1,#0                 ;4256
0050e8  e1a00004          MOV      r0,r4                 ;4256
0050ec  ebfffffe          BL       mem_set
0050f0  e3a0200b          MOV      r2,#0xb               ;4257
0050f4  e28f1fc2          ADR      r1,|L1.21508|
0050f8  e1a00004          MOV      r0,r4                 ;4257
0050fc  ebfffffe          BL       mem_cpy
005100  e1d590ba          LDRH     r9,[r5,#0xa]          ;4258
005104  e5c4900b          STRB     r9,[r4,#0xb]          ;4259
005108  e1a00449          ASR      r0,r9,#8              ;4259
00510c  e5c4000c          STRB     r0,[r4,#0xc]          ;4259
005110  e5c4b00d          STRB     r11,[r4,#0xd]         ;4260
005114  e59d0014          LDR      r0,[sp,#0x14]         ;4261
005118  e5c4000e          STRB     r0,[r4,#0xe]          ;4261
00511c  e59d0014          LDR      r0,[sp,#0x14]         ;4261
005120  e1a00800          LSL      r0,r0,#16             ;4261
005124  e1a00c20          LSR      r0,r0,#24             ;4261
005128  e5c4000f          STRB     r0,[r4,#0xf]          ;4261
00512c  e3a00001          MOV      r0,#1                 ;4262
005130  e5c40010          STRB     r0,[r4,#0x10]         ;4262
005134  e3560003          CMP      r6,#3                 ;4263
005138  1a000001          BNE      |L1.20804|
00513c  e3a00000          MOV      r0,#0                 ;4263
005140  ea000000          B        |L1.20808|
                  |L1.20804|
005144  e3a00c02          MOV      r0,#0x200             ;4263
                  |L1.20808|
005148  e1a09000          MOV      r9,r0                 ;4263
00514c  e5c49011          STRB     r9,[r4,#0x11]         ;4264
005150  e1a00809          LSL      r0,r9,#16             ;4264
005154  e1a00c20          LSR      r0,r0,#24             ;4264
005158  e5c40012          STRB     r0,[r4,#0x12]         ;4264
00515c  e59d0018          LDR      r0,[sp,#0x18]         ;4265
005160  e3500801          CMP      r0,#0x10000           ;4265
005164  2a000006          BCS      |L1.20868|
005168  e59d0018          LDR      r0,[sp,#0x18]         ;4266
00516c  e5c40013          STRB     r0,[r4,#0x13]         ;4266
005170  e59d0018          LDR      r0,[sp,#0x18]         ;4266
005174  e1a00800          LSL      r0,r0,#16             ;4266
005178  e1a00c20          LSR      r0,r0,#24             ;4266
00517c  e5c40014          STRB     r0,[r4,#0x14]         ;4266
005180  ea00000c          B        |L1.20920|
                  |L1.20868|
005184  e59d0018          LDR      r0,[sp,#0x18]         ;4268
005188  e5c40020          STRB     r0,[r4,#0x20]         ;4268
00518c  e59d0018          LDR      r0,[sp,#0x18]         ;4268
005190  e1a00800          LSL      r0,r0,#16             ;4268
005194  e1a00c20          LSR      r0,r0,#24             ;4268
005198  e5c40021          STRB     r0,[r4,#0x21]         ;4268
00519c  e59d0018          LDR      r0,[sp,#0x18]         ;4268
0051a0  e1a00400          LSL      r0,r0,#8              ;4268
0051a4  e1a00c20          LSR      r0,r0,#24             ;4268
0051a8  e5c40022          STRB     r0,[r4,#0x22]         ;4268
0051ac  e59d0018          LDR      r0,[sp,#0x18]         ;4268
0051b0  e1a00c20          LSR      r0,r0,#24             ;4268
0051b4  e5c40023          STRB     r0,[r4,#0x23]         ;4268
                  |L1.20920|
0051b8  e59d0040          LDR      r0,[sp,#0x40]         ;4270
0051bc  e5c40015          STRB     r0,[r4,#0x15]         ;4270
0051c0  e3a0003f          MOV      r0,#0x3f              ;4271
0051c4  e5c40018          STRB     r0,[r4,#0x18]         ;4271
0051c8  e3a00000          MOV      r0,#0                 ;4271
0051cc  e5c40019          STRB     r0,[r4,#0x19]         ;4271
0051d0  e3a000ff          MOV      r0,#0xff              ;4272
0051d4  e5c4001a          STRB     r0,[r4,#0x1a]         ;4272
0051d8  e3a00000          MOV      r0,#0                 ;4272
0051dc  e5c4001b          STRB     r0,[r4,#0x1b]         ;4272
0051e0  e5c4a01c          STRB     r10,[r4,#0x1c]        ;4273
0051e4  e1a0080a          LSL      r0,r10,#16            ;4273
0051e8  e1a00c20          LSR      r0,r0,#24             ;4273
0051ec  e5c4001d          STRB     r0,[r4,#0x1d]         ;4273
0051f0  e1a0040a          LSL      r0,r10,#8             ;4273
0051f4  e1a00c20          LSR      r0,r0,#24             ;4273
0051f8  e5c4001e          STRB     r0,[r4,#0x1e]         ;4273
0051fc  e1a00c2a          LSR      r0,r10,#24            ;4273
005200  e5c4001f          STRB     r0,[r4,#0x1f]         ;4273
005204  ebfffffe          BL       get_fattime
005208  e58d002c          STR      r0,[sp,#0x2c]         ;4274
00520c  e3560003          CMP      r6,#3                 ;4275
005210  1a00002c          BNE      |L1.21192|
005214  e59d002c          LDR      r0,[sp,#0x2c]         ;4276
005218  e5c40043          STRB     r0,[r4,#0x43]         ;4276
00521c  e59d002c          LDR      r0,[sp,#0x2c]         ;4276
005220  e1a00800          LSL      r0,r0,#16             ;4276
005224  e1a00c20          LSR      r0,r0,#24             ;4276
005228  e5c40044          STRB     r0,[r4,#0x44]         ;4276
00522c  e59d002c          LDR      r0,[sp,#0x2c]         ;4276
005230  e1a00400          LSL      r0,r0,#8              ;4276
005234  e1a00c20          LSR      r0,r0,#24             ;4276
005238  e5c40045          STRB     r0,[r4,#0x45]         ;4276
00523c  e59d002c          LDR      r0,[sp,#0x2c]         ;4276
005240  e1a00c20          LSR      r0,r0,#24             ;4276
005244  e5c40046          STRB     r0,[r4,#0x46]         ;4276
005248  e5c47024          STRB     r7,[r4,#0x24]         ;4277
00524c  e1a00807          LSL      r0,r7,#16             ;4277
005250  e1a00c20          LSR      r0,r0,#24             ;4277
005254  e5c40025          STRB     r0,[r4,#0x25]         ;4277
005258  e1a00407          LSL      r0,r7,#8              ;4277
00525c  e1a00c20          LSR      r0,r0,#24             ;4277
005260  e5c40026          STRB     r0,[r4,#0x26]         ;4277
005264  e1a00c27          LSR      r0,r7,#24             ;4277
005268  e5c40027          STRB     r0,[r4,#0x27]         ;4277
00526c  e3a00002          MOV      r0,#2                 ;4278
005270  e5c4002c          STRB     r0,[r4,#0x2c]         ;4278
005274  e3a00000          MOV      r0,#0                 ;4278
005278  e5c4002d          STRB     r0,[r4,#0x2d]         ;4278
00527c  e5c4002e          STRB     r0,[r4,#0x2e]         ;4278
005280  e5c4002f          STRB     r0,[r4,#0x2f]         ;4278
005284  e3a00001          MOV      r0,#1                 ;4279
005288  e5c40030          STRB     r0,[r4,#0x30]         ;4279
00528c  e3a00000          MOV      r0,#0                 ;4279
005290  e5c40031          STRB     r0,[r4,#0x31]         ;4279
005294  e3a00006          MOV      r0,#6                 ;4280
005298  e5c40032          STRB     r0,[r4,#0x32]         ;4280
00529c  e3a00000          MOV      r0,#0                 ;4280
0052a0  e5c40033          STRB     r0,[r4,#0x33]         ;4280
0052a4  e3a00080          MOV      r0,#0x80              ;4281
0052a8  e5c40040          STRB     r0,[r4,#0x40]         ;4281
0052ac  e3a00029          MOV      r0,#0x29              ;4282
0052b0  e5c40042          STRB     r0,[r4,#0x42]         ;4282
0052b4  e3a02013          MOV      r2,#0x13              ;4283
0052b8  e28f1e15          ADR      r1,|L1.21520|
0052bc  e2840047          ADD      r0,r4,#0x47           ;4283
0052c0  ebfffffe          BL       mem_cpy
0052c4  ea000018          B        |L1.21292|
                  |L1.21192|
0052c8  e59d002c          LDR      r0,[sp,#0x2c]         ;4285
0052cc  e5c40027          STRB     r0,[r4,#0x27]         ;4285
0052d0  e59d002c          LDR      r0,[sp,#0x2c]         ;4285
0052d4  e1a00800          LSL      r0,r0,#16             ;4285
0052d8  e1a00c20          LSR      r0,r0,#24             ;4285
0052dc  e5c40028          STRB     r0,[r4,#0x28]         ;4285
0052e0  e59d002c          LDR      r0,[sp,#0x2c]         ;4285
0052e4  e1a00400          LSL      r0,r0,#8              ;4285
0052e8  e1a00c20          LSR      r0,r0,#24             ;4285
0052ec  e5c40029          STRB     r0,[r4,#0x29]         ;4285
0052f0  e59d002c          LDR      r0,[sp,#0x2c]         ;4285
0052f4  e1a00c20          LSR      r0,r0,#24             ;4285
0052f8  e5c4002a          STRB     r0,[r4,#0x2a]         ;4285
0052fc  e5c47016          STRB     r7,[r4,#0x16]         ;4286
005300  e1a00807          LSL      r0,r7,#16             ;4286
005304  e1a00c20          LSR      r0,r0,#24             ;4286
005308  e5c40017          STRB     r0,[r4,#0x17]         ;4286
00530c  e3a00080          MOV      r0,#0x80              ;4287
005310  e5c40024          STRB     r0,[r4,#0x24]         ;4287
005314  e3a00029          MOV      r0,#0x29              ;4288
005318  e5c40026          STRB     r0,[r4,#0x26]         ;4288
00531c  e3a02013          MOV      r2,#0x13              ;4289
005320  e28f10fc          ADR      r1,|L1.21540|
005324  e284002b          ADD      r0,r4,#0x2b           ;4289
005328  ebfffffe          BL       mem_cpy
                  |L1.21292|
00532c  e3a00055          MOV      r0,#0x55              ;4291
005330  e5c401fe          STRB     r0,[r4,#0x1fe]        ;4291
005334  e3a000aa          MOV      r0,#0xaa              ;4291
005338  e5c401ff          STRB     r0,[r4,#0x1ff]        ;4291
00533c  e3a03001          MOV      r3,#1                 ;4292
005340  e1a0200a          MOV      r2,r10                ;4292
005344  e1a01004          MOV      r1,r4                 ;4292
005348  e59d0038          LDR      r0,[sp,#0x38]         ;4292
00534c  ebfffffe          BL       disk_write
005350  e3500000          CMP      r0,#0                 ;4292
005354  0a000001          BEQ      |L1.21344|
005358  e3a00001          MOV      r0,#1                 ;4293
00535c  eafffe02          B        |L1.19308|
                  |L1.21344|
005360  e3560003          CMP      r6,#3                 ;4294
005364  1a000004          BNE      |L1.21372|
005368  e3a03001          MOV      r3,#1                 ;4295
00536c  e28a2006          ADD      r2,r10,#6             ;4295
005370  e1a01004          MOV      r1,r4                 ;4295
005374  e59d0038          LDR      r0,[sp,#0x38]         ;4295
005378  ebfffffe          BL       disk_write
                  |L1.21372|
00537c  e59d0024          LDR      r0,[sp,#0x24]         ;4298
005380  e58d0028          STR      r0,[sp,#0x28]         ;4298
005384  e3a09000          MOV      r9,#0                 ;4299
005388  ea00006c          B        |L1.21824|
                  |L1.21388|
00538c  e1d520ba          LDRH     r2,[r5,#0xa]          ;4300
005390  e3a01000          MOV      r1,#0                 ;4300
005394  e1a00004          MOV      r0,r4                 ;4300
005398  ebfffffe          BL       mem_set
00539c  e59d0040          LDR      r0,[sp,#0x40]         ;4301
0053a0  e58d002c          STR      r0,[sp,#0x2c]         ;4301
0053a4  e3560003          CMP      r6,#3                 ;4302
0053a8  0a000023          BEQ      |L1.21564|
0053ac  e3560001          CMP      r6,#1                 ;4303
0053b0  1a000001          BNE      |L1.21436|
0053b4  e59f007c          LDR      r0,|L1.21560|
0053b8  ea000000          B        |L1.21440|
                  |L1.21436|
0053bc  e3e000ff          MVN      r0,#0xff              ;4303
                  |L1.21440|
0053c0  e59d102c          LDR      r1,[sp,#0x2c]         ;4303
0053c4  e1800001          ORR      r0,r0,r1              ;4303
0053c8  e58d002c          STR      r0,[sp,#0x2c]         ;4303
0053cc  e59d002c          LDR      r0,[sp,#0x2c]         ;4304
0053d0  e5c40000          STRB     r0,[r4,#0]            ;4304
0053d4  e59d002c          LDR      r0,[sp,#0x2c]         ;4304
0053d8  e1a00800          LSL      r0,r0,#16             ;4304
0053dc  e1a00c20          LSR      r0,r0,#24             ;4304
0053e0  e5c40001          STRB     r0,[r4,#1]            ;4304
0053e4  e59d002c          LDR      r0,[sp,#0x2c]         ;4304
0053e8  e1a00400          LSL      r0,r0,#8              ;4304
0053ec  e1a00c20          LSR      r0,r0,#24             ;4304
0053f0  e5c40002          STRB     r0,[r4,#2]            ;4304
0053f4  e59d002c          LDR      r0,[sp,#0x2c]         ;4304
0053f8  e1a00c20          LSR      r0,r0,#24             ;4304
0053fc  e5c40003          STRB     r0,[r4,#3]            ;4304
005400  ea000028          B        |L1.21672|
                  |L1.21508|
005404  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
005408  53444f53
00540c  352e3000
                  |L1.21520|
005410  4e4f204e          DCB      "NO NAME    FAT32   ",0
005414  414d4520
005418  20202046
00541c  41543332
005420  20202000
                  |L1.21540|
005424  4e4f204e          DCB      "NO NAME    FAT     ",0
005428  414d4520
00542c  20202046
005430  41542020
005434  20202000
                  |L1.21560|
                          DCD      0x00ffff00
                  |L1.21564|
00543c  e3e010ff          MVN      r1,#0xff              ;4306
005440  e59d002c          LDR      r0,[sp,#0x2c]         ;4306
005444  e1800001          ORR      r0,r0,r1              ;4306
005448  e58d002c          STR      r0,[sp,#0x2c]         ;4306
00544c  e59d002c          LDR      r0,[sp,#0x2c]         ;4307
005450  e5c40000          STRB     r0,[r4,#0]            ;4307
005454  e59d002c          LDR      r0,[sp,#0x2c]         ;4307
005458  e1a00800          LSL      r0,r0,#16             ;4307
00545c  e1a00c20          LSR      r0,r0,#24             ;4307
005460  e5c40001          STRB     r0,[r4,#1]            ;4307
005464  e59d002c          LDR      r0,[sp,#0x2c]         ;4307
005468  e1a00400          LSL      r0,r0,#8              ;4307
00546c  e1a00c20          LSR      r0,r0,#24             ;4307
005470  e5c40002          STRB     r0,[r4,#2]            ;4307
005474  e59d002c          LDR      r0,[sp,#0x2c]         ;4307
005478  e1a00c20          LSR      r0,r0,#24             ;4307
00547c  e5c40003          STRB     r0,[r4,#3]            ;4307
005480  e3a000ff          MOV      r0,#0xff              ;4308
005484  e5c40004          STRB     r0,[r4,#4]            ;4308
005488  e5c40005          STRB     r0,[r4,#5]            ;4308
00548c  e5c40006          STRB     r0,[r4,#6]            ;4308
005490  e5c40007          STRB     r0,[r4,#7]            ;4308
005494  e5c40008          STRB     r0,[r4,#8]            ;4309
005498  e5c40009          STRB     r0,[r4,#9]            ;4309
00549c  e5c4000a          STRB     r0,[r4,#0xa]          ;4309
0054a0  e3a0000f          MOV      r0,#0xf               ;4309
0054a4  e5c4000b          STRB     r0,[r4,#0xb]          ;4309
                  |L1.21672|
0054a8  e59d0028          LDR      r0,[sp,#0x28]         ;4311
0054ac  e2801001          ADD      r1,r0,#1              ;4311
0054b0  e1a02000          MOV      r2,r0                 ;4311
0054b4  e3a03001          MOV      r3,#1                 ;4311
0054b8  e58d1028          STR      r1,[sp,#0x28]         ;4311
0054bc  e1a01004          MOV      r1,r4                 ;4311
0054c0  e59d0038          LDR      r0,[sp,#0x38]         ;4311
0054c4  ebfffffe          BL       disk_write
0054c8  e3500000          CMP      r0,#0                 ;4311
0054cc  0a000001          BEQ      |L1.21720|
0054d0  e3a00001          MOV      r0,#1                 ;4312
0054d4  eafffda4          B        |L1.19308|
                  |L1.21720|
0054d8  e1d520ba          LDRH     r2,[r5,#0xa]          ;4313
0054dc  e3a01000          MOV      r1,#0                 ;4313
0054e0  e1a00004          MOV      r0,r4                 ;4313
0054e4  ebfffffe          BL       mem_set
0054e8  e3a00001          MOV      r0,#1                 ;4314
0054ec  e58d002c          STR      r0,[sp,#0x2c]         ;4314
0054f0  ea00000e          B        |L1.21808|
                  |L1.21748|
0054f4  e59d0028          LDR      r0,[sp,#0x28]         ;4315
0054f8  e2801001          ADD      r1,r0,#1              ;4315
0054fc  e1a02000          MOV      r2,r0                 ;4315
005500  e3a03001          MOV      r3,#1                 ;4315
005504  e58d1028          STR      r1,[sp,#0x28]         ;4315
005508  e1a01004          MOV      r1,r4                 ;4315
00550c  e59d0038          LDR      r0,[sp,#0x38]         ;4315
005510  ebfffffe          BL       disk_write
005514  e3500000          CMP      r0,#0                 ;4315
005518  0a000001          BEQ      |L1.21796|
00551c  e3a00001          MOV      r0,#1                 ;4316
005520  eafffd91          B        |L1.19308|
                  |L1.21796|
005524  e59d002c          LDR      r0,[sp,#0x2c]         ;4314
005528  e2800001          ADD      r0,r0,#1              ;4314
00552c  e58d002c          STR      r0,[sp,#0x2c]         ;4314
                  |L1.21808|
005530  e59d002c          LDR      r0,[sp,#0x2c]         ;4314
005534  e1500007          CMP      r0,r7                 ;4314
005538  3affffed          BCC      |L1.21748|
00553c  e2899001          ADD      r9,r9,#1              ;4299
                  |L1.21824|
005540  e3590000          CMP      r9,#0                 ;4299
005544  0affff90          BEQ      |L1.21388|
005548  e3560003          CMP      r6,#3                 ;4321
00554c  1a000001          BNE      |L1.21848|
005550  e1a0000b          MOV      r0,r11                ;4321
005554  ea000000          B        |L1.21852|
                  |L1.21848|
005558  e59d0010          LDR      r0,[sp,#0x10]         ;4321
                  |L1.21852|
00555c  e1a09000          MOV      r9,r0                 ;4321
005560  e1a00000          MOV      r0,r0                 ;4322
                  |L1.21860|
005564  e59d0028          LDR      r0,[sp,#0x28]         ;4323
005568  e2801001          ADD      r1,r0,#1              ;4323
00556c  e1a02000          MOV      r2,r0                 ;4323
005570  e3a03001          MOV      r3,#1                 ;4323
005574  e58d1028          STR      r1,[sp,#0x28]         ;4323
005578  e1a01004          MOV      r1,r4                 ;4323
00557c  e59d0038          LDR      r0,[sp,#0x38]         ;4323
005580  ebfffffe          BL       disk_write
005584  e3500000          CMP      r0,#0                 ;4323
005588  0a000001          BEQ      |L1.21908|
00558c  e3a00001          MOV      r0,#1                 ;4324
005590  eafffd75          B        |L1.19308|
                  |L1.21908|
005594  e2490001          SUB      r0,r9,#1              ;4325
005598  e1b09000          MOVS     r9,r0                 ;4325
00559c  1afffff0          BNE      |L1.21860|
0055a0  e3560003          CMP      r6,#3                 ;4335
0055a4  1a00002e          BNE      |L1.22116|
0055a8  e3a00052          MOV      r0,#0x52              ;4336
0055ac  e5c40000          STRB     r0,[r4,#0]            ;4336
0055b0  e5c40001          STRB     r0,[r4,#1]            ;4336
0055b4  e3a00061          MOV      r0,#0x61              ;4336
0055b8  e5c40002          STRB     r0,[r4,#2]            ;4336
0055bc  e3a00041          MOV      r0,#0x41              ;4336
0055c0  e5c40003          STRB     r0,[r4,#3]            ;4336
0055c4  e3a00072          MOV      r0,#0x72              ;4337
0055c8  e5c401e4          STRB     r0,[r4,#0x1e4]        ;4337
0055cc  e5c401e5          STRB     r0,[r4,#0x1e5]        ;4337
0055d0  e3a00041          MOV      r0,#0x41              ;4337
0055d4  e5c401e6          STRB     r0,[r4,#0x1e6]        ;4337
0055d8  e3a00061          MOV      r0,#0x61              ;4337
0055dc  e5c401e7          STRB     r0,[r4,#0x1e7]        ;4337
0055e0  e2480001          SUB      r0,r8,#1              ;4338
0055e4  e5c401e8          STRB     r0,[r4,#0x1e8]        ;4338
0055e8  e2480001          SUB      r0,r8,#1              ;4338
0055ec  e1a00800          LSL      r0,r0,#16             ;4338
0055f0  e1a00c20          LSR      r0,r0,#24             ;4338
0055f4  e5c401e9          STRB     r0,[r4,#0x1e9]        ;4338
0055f8  e2480001          SUB      r0,r8,#1              ;4338
0055fc  e1a00400          LSL      r0,r0,#8              ;4338
005600  e1a00c20          LSR      r0,r0,#24             ;4338
005604  e5c401ea          STRB     r0,[r4,#0x1ea]        ;4338
005608  e2480001          SUB      r0,r8,#1              ;4338
00560c  e1a00c20          LSR      r0,r0,#24             ;4338
005610  e5c401eb          STRB     r0,[r4,#0x1eb]        ;4338
005614  e3a00002          MOV      r0,#2                 ;4339
005618  e5c401ec          STRB     r0,[r4,#0x1ec]        ;4339
00561c  e3a00000          MOV      r0,#0                 ;4339
005620  e5c401ed          STRB     r0,[r4,#0x1ed]        ;4339
005624  e5c401ee          STRB     r0,[r4,#0x1ee]        ;4339
005628  e5c401ef          STRB     r0,[r4,#0x1ef]        ;4339
00562c  e3a00055          MOV      r0,#0x55              ;4340
005630  e5c401fe          STRB     r0,[r4,#0x1fe]        ;4340
005634  e3a000aa          MOV      r0,#0xaa              ;4340
005638  e5c401ff          STRB     r0,[r4,#0x1ff]        ;4340
00563c  e3a03001          MOV      r3,#1                 ;4341
005640  e28a2001          ADD      r2,r10,#1             ;4341
005644  e1a01004          MOV      r1,r4                 ;4341
005648  e59d0038          LDR      r0,[sp,#0x38]         ;4341
00564c  ebfffffe          BL       disk_write
005650  e3a03001          MOV      r3,#1                 ;4342
005654  e28a2007          ADD      r2,r10,#7             ;4342
005658  e1a01004          MOV      r1,r4                 ;4342
00565c  e59d0038          LDR      r0,[sp,#0x38]         ;4342
005660  ebfffffe          BL       disk_write
                  |L1.22116|
005664  e3a02000          MOV      r2,#0                 ;4345
005668  e1a01002          MOV      r1,r2                 ;4345
00566c  e59d0038          LDR      r0,[sp,#0x38]         ;4345
005670  ebfffffe          BL       disk_ioctl
005674  e3500000          CMP      r0,#0                 ;4345
005678  0a000001          BEQ      |L1.22148|
00567c  e3a00001          MOV      r0,#1                 ;4345
005680  eafffd39          B        |L1.19308|
                  |L1.22148|
005684  e3a00000          MOV      r0,#0                 ;4345
005688  eafffd37          B        |L1.19308|
;;;4347   
                          ENDP

                  f_gets PROC
;;;4427   
;;;4428   TCHAR* f_gets (
00568c  e92d47fc          PUSH     {r2-r10,lr}
;;;4429   	TCHAR* buff,	/* Pointer to the string buffer to read */
;;;4430   	int len,		/* Size of string buffer (characters) */
;;;4431   	FIL* fp			/* Pointer to the file object */
;;;4432   )
;;;4433   {
005690  e1a07000          MOV      r7,r0
005694  e1a08001          MOV      r8,r1
005698  e1a09002          MOV      r9,r2
;;;4434   	int n = 0;
00569c  e3a04000          MOV      r4,#0
;;;4435   	TCHAR c, *p = buff;
0056a0  e1a06007          MOV      r6,r7
;;;4436   	BYTE s[2];
;;;4437   	UINT rc;
;;;4438   
;;;4439   
;;;4440   	while (n < len - 1) {	/* Read characters until buffer gets filled */
0056a4  ea000010          B        |L1.22252|
                  |L1.22184|
;;;4441   #if _USE_LFN && _LFN_UNICODE
;;;4442   #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
;;;4443   		f_read(fp, s, 1, &rc);
;;;4444   		if (rc != 1) break;
;;;4445   		c = s[0];
;;;4446   		if (c >= 0x80) {
;;;4447   			if (c < 0xC0) continue;	/* Skip stray trailer */
;;;4448   			if (c < 0xE0) {			/* Two-byte sequence */
;;;4449   				f_read(fp, s, 1, &rc);
;;;4450   				if (rc != 1) break;
;;;4451   				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
;;;4452   				if (c < 0x80) c = '?';
;;;4453   			} else {
;;;4454   				if (c < 0xF0) {		/* Three-byte sequence */
;;;4455   					f_read(fp, s, 2, &rc);
;;;4456   					if (rc != 2) break;
;;;4457   					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
;;;4458   					if (c < 0x800) c = '?';
;;;4459   				} else {			/* Reject four-byte sequence */
;;;4460   					c = '?';
;;;4461   				}
;;;4462   			}
;;;4463   		}
;;;4464   #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
;;;4465   		f_read(fp, s, 2, &rc);
;;;4466   		if (rc != 2) break;
;;;4467   		c = s[1] + (s[0] << 8);
;;;4468   #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
;;;4469   		f_read(fp, s, 2, &rc);
;;;4470   		if (rc != 2) break;
;;;4471   		c = s[0] + (s[1] << 8);
;;;4472   #else						/* Read a character in ANSI/OEM */
;;;4473   		f_read(fp, s, 1, &rc);
;;;4474   		if (rc != 1) break;
;;;4475   		c = s[0];
;;;4476   		if (IsDBCS1(c)) {
;;;4477   			f_read(fp, s, 1, &rc);
;;;4478   			if (rc != 1) break;
;;;4479   			c = (c << 8) + s[0];
;;;4480   		}
;;;4481   		c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;4482   		if (!c) c = '?';
;;;4483   #endif
;;;4484   #else						/* Read a character without conversion */
;;;4485   		f_read(fp, s, 1, &rc);
0056a8  e1a0300d          MOV      r3,sp
0056ac  e3a02001          MOV      r2,#1
0056b0  e28d1004          ADD      r1,sp,#4
0056b4  e1a00009          MOV      r0,r9
0056b8  ebfffffe          BL       f_read
;;;4486   		if (rc != 1) break;
0056bc  e59d0000          LDR      r0,[sp,#0]
0056c0  e3500001          CMP      r0,#1
0056c4  0a000000          BEQ      |L1.22220|
0056c8  ea00000a          B        |L1.22264|
                  |L1.22220|
;;;4487   		c = s[0];
0056cc  e5dd5004          LDRB     r5,[sp,#4]
;;;4488   #endif
;;;4489   		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
0056d0  e1a00000          MOV      r0,r0
;;;4490   		*p++ = c;
0056d4  e4c65001          STRB     r5,[r6],#1
;;;4491   		n++;
0056d8  e2844001          ADD      r4,r4,#1
;;;4492   		if (c == '\n') break;		/* Break on EOL */
0056dc  e355000a          CMP      r5,#0xa
0056e0  1a000000          BNE      |L1.22248|
0056e4  ea000003          B        |L1.22264|
                  |L1.22248|
0056e8  e1a00000          MOV      r0,r0                 ;4489
                  |L1.22252|
0056ec  e2480001          SUB      r0,r8,#1              ;4440
0056f0  e1500004          CMP      r0,r4                 ;4440
0056f4  caffffeb          BGT      |L1.22184|
                  |L1.22264|
0056f8  e1a00000          MOV      r0,r0                 ;4486
;;;4493   	}
;;;4494   	*p = 0;
0056fc  e3a00000          MOV      r0,#0
005700  e5c60000          STRB     r0,[r6,#0]
;;;4495   	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
005704  e3540000          CMP      r4,#0
005708  0a000001          BEQ      |L1.22292|
00570c  e1a00007          MOV      r0,r7
                  |L1.22288|
;;;4496   }
005710  e8bd87fc          POP      {r2-r10,pc}
                  |L1.22292|
005714  e3a00000          MOV      r0,#0                 ;4495
005718  eafffffc          B        |L1.22288|
;;;4497   
                          ENDP

                  putc_bfd PROC
;;;4514   static
;;;4515   void putc_bfd (
00571c  e92d40f8          PUSH     {r3-r7,lr}
;;;4516   	putbuff* pb,
;;;4517   	TCHAR c
;;;4518   )
;;;4519   {
005720  e1a04000          MOV      r4,r0
005724  e1a06001          MOV      r6,r1
;;;4520   	UINT bw;
;;;4521   	int i;
;;;4522   
;;;4523   
;;;4524   	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
005728  e1a00000          MOV      r0,r0
;;;4525   		putc_bfd(pb, '\r');
;;;4526   
;;;4527   	i = pb->idx;	/* Buffer write index (-1:error) */
00572c  e5945004          LDR      r5,[r4,#4]
;;;4528   	if (i < 0) return;
005730  e3550000          CMP      r5,#0
005734  aa000000          BGE      |L1.22332|
                  |L1.22328|
;;;4529   
;;;4530   #if _USE_LFN && _LFN_UNICODE
;;;4531   #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
;;;4532   	if (c < 0x80) {				/* 7-bit */
;;;4533   		pb->buf[i++] = (BYTE)c;
;;;4534   	} else {
;;;4535   		if (c < 0x800) {		/* 11-bit */
;;;4536   			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
;;;4537   		} else {				/* 16-bit */
;;;4538   			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
;;;4539   			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
;;;4540   		}
;;;4541   		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
;;;4542   	}
;;;4543   #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
;;;4544   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4545   	pb->buf[i++] = (BYTE)c;
;;;4546   #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
;;;4547   	pb->buf[i++] = (BYTE)c;
;;;4548   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4549   #else							/* Write a character in ANSI/OEM */
;;;4550   	c = ff_convert(c, 0);	/* Unicode -> OEM */
;;;4551   	if (!c) c = '?';
;;;4552   	if (c >= 0x100)
;;;4553   		pb->buf[i++] = (BYTE)(c >> 8);
;;;4554   	pb->buf[i++] = (BYTE)c;
;;;4555   #endif
;;;4556   #else							/* Write a character without conversion */
;;;4557   	pb->buf[i++] = (BYTE)c;
;;;4558   #endif
;;;4559   
;;;4560   	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
;;;4561   		f_write(pb->fp, pb->buf, (UINT)i, &bw);
;;;4562   		i = (bw == (UINT)i) ? 0 : -1;
;;;4563   	}
;;;4564   	pb->idx = i;
;;;4565   	pb->nchr++;
;;;4566   }
005738  e8bd80f8          POP      {r3-r7,pc}
                  |L1.22332|
00573c  e1a00005          MOV      r0,r5                 ;4557
005740  e2855001          ADD      r5,r5,#1              ;4557
005744  e284100c          ADD      r1,r4,#0xc            ;4557
005748  e7c16000          STRB     r6,[r1,r0]            ;4557
00574c  e355003d          CMP      r5,#0x3d              ;4560
005750  ba00000b          BLT      |L1.22404|
005754  e1a0300d          MOV      r3,sp                 ;4561
005758  e1a02005          MOV      r2,r5                 ;4561
00575c  e5940000          LDR      r0,[r4,#0]            ;4561
005760  e284100c          ADD      r1,r4,#0xc            ;4561
005764  ebfffffe          BL       f_write
005768  e59d0000          LDR      r0,[sp,#0]            ;4562
00576c  e1500005          CMP      r0,r5                 ;4562
005770  1a000001          BNE      |L1.22396|
005774  e3a00000          MOV      r0,#0                 ;4562
005778  ea000000          B        |L1.22400|
                  |L1.22396|
00577c  e3e00000          MVN      r0,#0                 ;4562
                  |L1.22400|
005780  e1a05000          MOV      r5,r0                 ;4562
                  |L1.22404|
005784  e5845004          STR      r5,[r4,#4]            ;4564
005788  e5940008          LDR      r0,[r4,#8]            ;4565
00578c  e2800001          ADD      r0,r0,#1              ;4565
005790  e5840008          STR      r0,[r4,#8]            ;4565
005794  e1a00000          MOV      r0,r0
005798  eaffffe6          B        |L1.22328|
;;;4567   
                          ENDP

                  f_putc PROC
;;;4569   
;;;4570   int f_putc (
00579c  e92d4030          PUSH     {r4,r5,lr}
;;;4571   	TCHAR c,	/* A character to be output */
;;;4572   	FIL* fp		/* Pointer to the file object */
;;;4573   )
;;;4574   {
0057a0  e24dd054          SUB      sp,sp,#0x54
0057a4  e1a04000          MOV      r4,r0
0057a8  e1a05001          MOV      r5,r1
;;;4575   	putbuff pb;
;;;4576   	UINT nw;
;;;4577   
;;;4578   
;;;4579   	pb.fp = fp;			/* Initialize output buffer */
0057ac  e58d5008          STR      r5,[sp,#8]
;;;4580   	pb.nchr = pb.idx = 0;
0057b0  e3a00000          MOV      r0,#0
0057b4  e58d000c          STR      r0,[sp,#0xc]
0057b8  e58d0010          STR      r0,[sp,#0x10]
;;;4581   
;;;4582   	putc_bfd(&pb, c);	/* Put a character */
0057bc  e1a01004          MOV      r1,r4
0057c0  e28d0008          ADD      r0,sp,#8
0057c4  ebfffffe          BL       putc_bfd
;;;4583   
;;;4584   	if (   pb.idx >= 0	/* Flush buffered characters to the file */
0057c8  e59d000c          LDR      r0,[sp,#0xc]
0057cc  e3500000          CMP      r0,#0
0057d0  ba00000d          BLT      |L1.22540|
;;;4585   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
0057d4  e59d0008          LDR      r0,[sp,#8]
0057d8  e59d200c          LDR      r2,[sp,#0xc]
0057dc  e28d3004          ADD      r3,sp,#4
0057e0  e28d1014          ADD      r1,sp,#0x14
0057e4  ebfffffe          BL       f_write
0057e8  e3500000          CMP      r0,#0
0057ec  1a000006          BNE      |L1.22540|
;;;4586   		&& (UINT)pb.idx == nw) return pb.nchr;
0057f0  e59d000c          LDR      r0,[sp,#0xc]
0057f4  e59d1004          LDR      r1,[sp,#4]
0057f8  e1500001          CMP      r0,r1
0057fc  1a000002          BNE      |L1.22540|
005800  e59d0010          LDR      r0,[sp,#0x10]
                  |L1.22532|
005804  e28dd054          ADD      sp,sp,#0x54
;;;4587   	return EOF;
;;;4588   }
005808  e8bd8030          POP      {r4,r5,pc}
                  |L1.22540|
00580c  e3e00000          MVN      r0,#0                 ;4587
005810  eafffffb          B        |L1.22532|
;;;4589   
                          ENDP

                  f_puts PROC
;;;4596   
;;;4597   int f_puts (
005814  e92d4030          PUSH     {r4,r5,lr}
;;;4598   	const TCHAR* str,	/* Pointer to the string to be output */
;;;4599   	FIL* fp				/* Pointer to the file object */
;;;4600   )
;;;4601   {
005818  e24dd054          SUB      sp,sp,#0x54
00581c  e1a04000          MOV      r4,r0
005820  e1a05001          MOV      r5,r1
;;;4602   	putbuff pb;
;;;4603   	UINT nw;
;;;4604   
;;;4605   
;;;4606   	pb.fp = fp;				/* Initialize output buffer */
005824  e58d5008          STR      r5,[sp,#8]
;;;4607   	pb.nchr = pb.idx = 0;
005828  e3a00000          MOV      r0,#0
00582c  e58d000c          STR      r0,[sp,#0xc]
005830  e58d0010          STR      r0,[sp,#0x10]
;;;4608   
;;;4609   	while (*str)			/* Put the string */
005834  ea000002          B        |L1.22596|
                  |L1.22584|
;;;4610   		putc_bfd(&pb, *str++);
005838  e4d41001          LDRB     r1,[r4],#1
00583c  e28d0008          ADD      r0,sp,#8
005840  ebfffffe          BL       putc_bfd
                  |L1.22596|
005844  e5d40000          LDRB     r0,[r4,#0]            ;4609
005848  e3500000          CMP      r0,#0                 ;4609
00584c  1afffff9          BNE      |L1.22584|
;;;4611   
;;;4612   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
005850  e59d000c          LDR      r0,[sp,#0xc]
005854  e3500000          CMP      r0,#0
005858  ba00000d          BLT      |L1.22676|
;;;4613   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00585c  e59d0008          LDR      r0,[sp,#8]
005860  e59d200c          LDR      r2,[sp,#0xc]
005864  e28d3004          ADD      r3,sp,#4
005868  e28d1014          ADD      r1,sp,#0x14
00586c  ebfffffe          BL       f_write
005870  e3500000          CMP      r0,#0
005874  1a000006          BNE      |L1.22676|
;;;4614   		&& (UINT)pb.idx == nw) return pb.nchr;
005878  e59d000c          LDR      r0,[sp,#0xc]
00587c  e59d1004          LDR      r1,[sp,#4]
005880  e1500001          CMP      r0,r1
005884  1a000002          BNE      |L1.22676|
005888  e59d0010          LDR      r0,[sp,#0x10]
                  |L1.22668|
00588c  e28dd054          ADD      sp,sp,#0x54
;;;4615   	return EOF;
;;;4616   }
005890  e8bd8030          POP      {r4,r5,pc}
                  |L1.22676|
005894  e3e00000          MVN      r0,#0                 ;4615
005898  eafffffb          B        |L1.22668|
;;;4617   
                          ENDP

                  f_printf PROC
;;;4624   
;;;4625   int f_printf (
00589c  e92d000f          PUSH     {r0-r3}
;;;4626   	FIL* fp,			/* Pointer to the file object */
;;;4627   	const TCHAR* fmt,	/* Pointer to the format string */
;;;4628   	...					/* Optional arguments... */
;;;4629   )
;;;4630   {
0058a0  e92d4ff0          PUSH     {r4-r11,lr}
0058a4  e24dd06c          SUB      sp,sp,#0x6c
;;;4631   	va_list arp;
;;;4632   	BYTE f, r;
;;;4633   	UINT nw, i, j, w;
;;;4634   	DWORD v;
;;;4635   	TCHAR c, d, s[16], *p;
;;;4636   	putbuff pb;
;;;4637   
;;;4638   
;;;4639   	pb.fp = fp;				/* Initialize output buffer */
0058a8  e59d0090          LDR      r0,[sp,#0x90]
0058ac  e58d0004          STR      r0,[sp,#4]
;;;4640   	pb.nchr = pb.idx = 0;
0058b0  e3a00000          MOV      r0,#0
0058b4  e58d0008          STR      r0,[sp,#8]
0058b8  e58d000c          STR      r0,[sp,#0xc]
;;;4641   
;;;4642   	va_start(arp, fmt);
0058bc  e28d0098          ADD      r0,sp,#0x98
0058c0  e58d0068          STR      r0,[sp,#0x68]
;;;4643   
;;;4644   	for (;;) {
0058c4  e1a00000          MOV      r0,r0
                  |L1.22728|
;;;4645   		c = *fmt++;
0058c8  e59d0094          LDR      r0,[sp,#0x94]
0058cc  e4d04001          LDRB     r4,[r0],#1
0058d0  e58d0094          STR      r0,[sp,#0x94]
;;;4646   		if (c == 0) break;			/* End of string */
0058d4  e3540000          CMP      r4,#0
0058d8  1a000000          BNE      |L1.22752|
0058dc  ea0000ed          B        |L1.23704|
                  |L1.22752|
;;;4647   		if (c != '%') {				/* Non escape character */
0058e0  e3540025          CMP      r4,#0x25
0058e4  0a000003          BEQ      |L1.22776|
;;;4648   			putc_bfd(&pb, c);
0058e8  e1a01004          MOV      r1,r4
0058ec  e28d0004          ADD      r0,sp,#4
0058f0  ebfffffe          BL       putc_bfd
;;;4649   			continue;
0058f4  eafffff3          B        |L1.22728|
                  |L1.22776|
;;;4650   		}
;;;4651   		w = f = 0;
0058f8  e3a00000          MOV      r0,#0
0058fc  e1a06000          MOV      r6,r0
005900  e1a09000          MOV      r9,r0
;;;4652   		c = *fmt++;
005904  e59d0094          LDR      r0,[sp,#0x94]
005908  e4d04001          LDRB     r4,[r0],#1
00590c  e58d0094          STR      r0,[sp,#0x94]
;;;4653   		if (c == '0') {				/* Flag: '0' padding */
005910  e3540030          CMP      r4,#0x30
005914  1a000004          BNE      |L1.22828|
;;;4654   			f = 1; c = *fmt++;
005918  e3a06001          MOV      r6,#1
00591c  e59d0094          LDR      r0,[sp,#0x94]
005920  e4d04001          LDRB     r4,[r0],#1
005924  e58d0094          STR      r0,[sp,#0x94]
005928  ea000005          B        |L1.22852|
                  |L1.22828|
;;;4655   		} else {
;;;4656   			if (c == '-') {			/* Flag: left justified */
00592c  e354002d          CMP      r4,#0x2d
005930  1a000003          BNE      |L1.22852|
;;;4657   				f = 2; c = *fmt++;
005934  e3a06002          MOV      r6,#2
005938  e59d0094          LDR      r0,[sp,#0x94]
00593c  e4d04001          LDRB     r4,[r0],#1
005940  e58d0094          STR      r0,[sp,#0x94]
                  |L1.22852|
;;;4658   			}
;;;4659   		}
;;;4660   		while (IsDigit(c)) {		/* Precision */
005944  ea000005          B        |L1.22880|
                  |L1.22856|
;;;4661   			w = w * 10 + c - '0';
005948  e0890109          ADD      r0,r9,r9,LSL #2
00594c  e0840080          ADD      r0,r4,r0,LSL #1
005950  e2409030          SUB      r9,r0,#0x30
;;;4662   			c = *fmt++;
005954  e59d0094          LDR      r0,[sp,#0x94]
005958  e4d04001          LDRB     r4,[r0],#1
00595c  e58d0094          STR      r0,[sp,#0x94]
                  |L1.22880|
005960  e3540030          CMP      r4,#0x30              ;4660
005964  ba000001          BLT      |L1.22896|
005968  e3540039          CMP      r4,#0x39              ;4660
00596c  dafffff5          BLE      |L1.22856|
                  |L1.22896|
;;;4663   		}
;;;4664   		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
005970  e354006c          CMP      r4,#0x6c
005974  0a000001          BEQ      |L1.22912|
005978  e354004c          CMP      r4,#0x4c
00597c  1a000003          BNE      |L1.22928|
                  |L1.22912|
;;;4665   			f |= 4; c = *fmt++;
005980  e3866004          ORR      r6,r6,#4
005984  e59d0094          LDR      r0,[sp,#0x94]
005988  e4d04001          LDRB     r4,[r0],#1
00598c  e58d0094          STR      r0,[sp,#0x94]
                  |L1.22928|
;;;4666   		}
;;;4667   		if (!c) break;
005990  e3540000          CMP      r4,#0
005994  1a000000          BNE      |L1.22940|
005998  ea0000be          B        |L1.23704|
                  |L1.22940|
;;;4668   		d = c;
00599c  e1a05004          MOV      r5,r4
;;;4669   		if (IsLower(d)) d -= 0x20;
0059a0  e3550061          CMP      r5,#0x61
0059a4  ba000003          BLT      |L1.22968|
0059a8  e355007a          CMP      r5,#0x7a
0059ac  ca000001          BGT      |L1.22968|
0059b0  e2450020          SUB      r0,r5,#0x20
0059b4  e20050ff          AND      r5,r0,#0xff
                  |L1.22968|
;;;4670   		switch (d) {				/* Type is... */
0059b8  e355004f          CMP      r5,#0x4f
0059bc  0a00003f          BEQ      |L1.23232|
0059c0  ca000006          BGT      |L1.23008|
0059c4  e3550042          CMP      r5,#0x42
0059c8  0a000038          BEQ      |L1.23216|
0059cc  e3550043          CMP      r5,#0x43
0059d0  0a00002d          BEQ      |L1.23180|
0059d4  e3550044          CMP      r5,#0x44
0059d8  1a000045          BNE      |L1.23284|
0059dc  ea00003b          B        |L1.23248|
                  |L1.23008|
0059e0  e3550053          CMP      r5,#0x53
0059e4  0a000004          BEQ      |L1.23036|
0059e8  e3550055          CMP      r5,#0x55
0059ec  0a000039          BEQ      |L1.23256|
0059f0  e3550058          CMP      r5,#0x58
0059f4  1a00003e          BNE      |L1.23284|
0059f8  ea000039          B        |L1.23268|
                  |L1.23036|
;;;4671   		case 'S' :					/* String */
0059fc  e1a00000          MOV      r0,r0
;;;4672   			p = va_arg(arp, TCHAR*);
005a00  e59d0068          LDR      r0,[sp,#0x68]
005a04  e490b004          LDR      r11,[r0],#4
005a08  e58d0068          STR      r0,[sp,#0x68]
;;;4673   			for (j = 0; p[j]; j++) ;
005a0c  e3a08000          MOV      r8,#0
005a10  ea000000          B        |L1.23064|
                  |L1.23060|
005a14  e2888001          ADD      r8,r8,#1
                  |L1.23064|
005a18  e7db0008          LDRB     r0,[r11,r8]
005a1c  e3500000          CMP      r0,#0
005a20  1afffffb          BNE      |L1.23060|
;;;4674   			if (!(f & 2)) {
005a24  e3160002          TST      r6,#2
005a28  1a000007          BNE      |L1.23116|
;;;4675   				while (j++ < w) putc_bfd(&pb, ' ');
005a2c  ea000002          B        |L1.23100|
                  |L1.23088|
005a30  e3a01020          MOV      r1,#0x20
005a34  e28d0004          ADD      r0,sp,#4
005a38  ebfffffe          BL       putc_bfd
                  |L1.23100|
005a3c  e1a00008          MOV      r0,r8
005a40  e2888001          ADD      r8,r8,#1
005a44  e1500009          CMP      r0,r9
005a48  3afffff8          BCC      |L1.23088|
                  |L1.23116|
;;;4676   			}
;;;4677   			while (*p) putc_bfd(&pb, *p++);
005a4c  ea000002          B        |L1.23132|
                  |L1.23120|
005a50  e4db1001          LDRB     r1,[r11],#1
005a54  e28d0004          ADD      r0,sp,#4
005a58  ebfffffe          BL       putc_bfd
                  |L1.23132|
005a5c  e5db0000          LDRB     r0,[r11,#0]
005a60  e3500000          CMP      r0,#0
005a64  1afffff9          BNE      |L1.23120|
;;;4678   			while (j++ < w) putc_bfd(&pb, ' ');
005a68  ea000002          B        |L1.23160|
                  |L1.23148|
005a6c  e3a01020          MOV      r1,#0x20
005a70  e28d0004          ADD      r0,sp,#4
005a74  ebfffffe          BL       putc_bfd
                  |L1.23160|
005a78  e1a00008          MOV      r0,r8
005a7c  e2888001          ADD      r8,r8,#1
005a80  e1500009          CMP      r0,r9
005a84  3afffff8          BCC      |L1.23148|
;;;4679   			continue;
005a88  eaffff8e          B        |L1.22728|
                  |L1.23180|
;;;4680   		case 'C' :					/* Character */
005a8c  e1a00000          MOV      r0,r0
;;;4681   			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
005a90  e59d0068          LDR      r0,[sp,#0x68]
005a94  e5d01000          LDRB     r1,[r0,#0]
005a98  e59d2068          LDR      r2,[sp,#0x68]
005a9c  e2822004          ADD      r2,r2,#4
005aa0  e58d2068          STR      r2,[sp,#0x68]
005aa4  e28d0004          ADD      r0,sp,#4
005aa8  ebfffffe          BL       putc_bfd
005aac  eaffff85          B        |L1.22728|
                  |L1.23216|
;;;4682   		case 'B' :					/* Binary */
005ab0  e1a00000          MOV      r0,r0
;;;4683   			r = 2; break;
005ab4  e3a00002          MOV      r0,#2
005ab8  e58d0064          STR      r0,[sp,#0x64]
005abc  ea000011          B        |L1.23304|
                  |L1.23232|
;;;4684   		case 'O' :					/* Octal */
005ac0  e1a00000          MOV      r0,r0
;;;4685   			r = 8; break;
005ac4  e3a00008          MOV      r0,#8
005ac8  e58d0064          STR      r0,[sp,#0x64]
005acc  ea00000d          B        |L1.23304|
                  |L1.23248|
;;;4686   		case 'D' :					/* Signed decimal */
005ad0  e1a00000          MOV      r0,r0
;;;4687   		case 'U' :					/* Unsigned decimal */
005ad4  e1a00000          MOV      r0,r0
                  |L1.23256|
;;;4688   			r = 10; break;
005ad8  e3a0000a          MOV      r0,#0xa
005adc  e58d0064          STR      r0,[sp,#0x64]
005ae0  ea000008          B        |L1.23304|
                  |L1.23268|
;;;4689   		case 'X' :					/* Hexdecimal */
005ae4  e1a00000          MOV      r0,r0
;;;4690   			r = 16; break;
005ae8  e3a00010          MOV      r0,#0x10
005aec  e58d0064          STR      r0,[sp,#0x64]
005af0  ea000004          B        |L1.23304|
                  |L1.23284|
;;;4691   		default:					/* Unknown type (pass-through) */
005af4  e1a00000          MOV      r0,r0
;;;4692   			putc_bfd(&pb, c); continue;
005af8  e1a01004          MOV      r1,r4
005afc  e28d0004          ADD      r0,sp,#4
005b00  ebfffffe          BL       putc_bfd
005b04  eaffff6f          B        |L1.22728|
                  |L1.23304|
005b08  e1a00000          MOV      r0,r0                 ;4683
;;;4693   		}
;;;4694   
;;;4695   		/* Get an argument and put it in numeral */
;;;4696   		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
005b0c  e3160004          TST      r6,#4
005b10  0a000005          BEQ      |L1.23340|
005b14  e59d0068          LDR      r0,[sp,#0x68]
005b18  e5900000          LDR      r0,[r0,#0]
005b1c  e59d1068          LDR      r1,[sp,#0x68]
005b20  e2811004          ADD      r1,r1,#4
005b24  e58d1068          STR      r1,[sp,#0x68]
005b28  ea00000c          B        |L1.23392|
                  |L1.23340|
005b2c  e3550044          CMP      r5,#0x44
005b30  1a000005          BNE      |L1.23372|
005b34  e59d0068          LDR      r0,[sp,#0x68]
005b38  e5900000          LDR      r0,[r0,#0]
005b3c  e59d1068          LDR      r1,[sp,#0x68]
005b40  e2811004          ADD      r1,r1,#4
005b44  e58d1068          STR      r1,[sp,#0x68]
005b48  ea000004          B        |L1.23392|
                  |L1.23372|
005b4c  e59d0068          LDR      r0,[sp,#0x68]
005b50  e5900000          LDR      r0,[r0,#0]
005b54  e59d1068          LDR      r1,[sp,#0x68]
005b58  e2811004          ADD      r1,r1,#4
005b5c  e58d1068          STR      r1,[sp,#0x68]
                  |L1.23392|
005b60  e1a0a000          MOV      r10,r0
;;;4697   		if (d == 'D' && (v & 0x80000000)) {
005b64  e3550044          CMP      r5,#0x44
005b68  1a000003          BNE      |L1.23420|
005b6c  e31a0102          TST      r10,#0x80000000
005b70  0a000001          BEQ      |L1.23420|
;;;4698   			v = 0 - v;
005b74  e26aa000          RSB      r10,r10,#0
;;;4699   			f |= 8;
005b78  e3866008          ORR      r6,r6,#8
                  |L1.23420|
;;;4700   		}
;;;4701   		i = 0;
005b7c  e3a07000          MOV      r7,#0
;;;4702   		do {
005b80  e1a00000          MOV      r0,r0
                  |L1.23428|
;;;4703   			d = (TCHAR)(v % r); v /= r;
005b84  e1a0000a          MOV      r0,r10
005b88  e59d1064          LDR      r1,[sp,#0x64]
005b8c  ebfffffe          BL       __aeabi_uidivmod
005b90  e20150ff          AND      r5,r1,#0xff
005b94  e1a0000a          MOV      r0,r10
005b98  e59d1064          LDR      r1,[sp,#0x64]
005b9c  ebfffffe          BL       __aeabi_uidivmod
005ba0  e1a0a000          MOV      r10,r0
;;;4704   			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
005ba4  e3550009          CMP      r5,#9
005ba8  da000006          BLE      |L1.23496|
005bac  e3540078          CMP      r4,#0x78
005bb0  1a000001          BNE      |L1.23484|
005bb4  e3a00027          MOV      r0,#0x27
005bb8  ea000000          B        |L1.23488|
                  |L1.23484|
005bbc  e3a00007          MOV      r0,#7
                  |L1.23488|
005bc0  e0800005          ADD      r0,r0,r5
005bc4  e20050ff          AND      r5,r0,#0xff
                  |L1.23496|
;;;4705   			s[i++] = d + '0';
005bc8  e2850030          ADD      r0,r5,#0x30
005bcc  e20010ff          AND      r1,r0,#0xff
005bd0  e1a00007          MOV      r0,r7
005bd4  e2877001          ADD      r7,r7,#1
005bd8  e28d2050          ADD      r2,sp,#0x50
005bdc  e7c21000          STRB     r1,[r2,r0]
;;;4706   		} while (v && i < sizeof s / sizeof s[0]);
005be0  e35a0000          CMP      r10,#0
005be4  0a000001          BEQ      |L1.23536|
005be8  e3570010          CMP      r7,#0x10
005bec  3affffe4          BCC      |L1.23428|
                  |L1.23536|
;;;4707   		if (f & 8) s[i++] = '-';
005bf0  e3160008          TST      r6,#8
005bf4  0a000004          BEQ      |L1.23564|
005bf8  e3a0102d          MOV      r1,#0x2d
005bfc  e1a00007          MOV      r0,r7
005c00  e2877001          ADD      r7,r7,#1
005c04  e28d2050          ADD      r2,sp,#0x50
005c08  e7c21000          STRB     r1,[r2,r0]
                  |L1.23564|
;;;4708   		j = i; d = (f & 1) ? '0' : ' ';
005c0c  e1a08007          MOV      r8,r7
005c10  e3160001          TST      r6,#1
005c14  0a000001          BEQ      |L1.23584|
005c18  e3a00030          MOV      r0,#0x30
005c1c  ea000000          B        |L1.23588|
                  |L1.23584|
005c20  e3a00020          MOV      r0,#0x20
                  |L1.23588|
005c24  e1a05000          MOV      r5,r0
;;;4709   		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
005c28  ea000002          B        |L1.23608|
                  |L1.23596|
005c2c  e1a01005          MOV      r1,r5
005c30  e28d0004          ADD      r0,sp,#4
005c34  ebfffffe          BL       putc_bfd
                  |L1.23608|
005c38  e3160002          TST      r6,#2
005c3c  1a000003          BNE      |L1.23632|
005c40  e1a00008          MOV      r0,r8
005c44  e2888001          ADD      r8,r8,#1
005c48  e1500009          CMP      r0,r9
005c4c  3afffff6          BCC      |L1.23596|
                  |L1.23632|
;;;4710   		do putc_bfd(&pb, s[--i]); while (i);
005c50  e1a00000          MOV      r0,r0
                  |L1.23636|
005c54  e2470001          SUB      r0,r7,#1
005c58  e1a07000          MOV      r7,r0
005c5c  e28d2050          ADD      r2,sp,#0x50
005c60  e7d21000          LDRB     r1,[r2,r0]
005c64  e28d0004          ADD      r0,sp,#4
005c68  ebfffffe          BL       putc_bfd
005c6c  e3570000          CMP      r7,#0
005c70  1afffff7          BNE      |L1.23636|
;;;4711   		while (j++ < w) putc_bfd(&pb, d);
005c74  ea000002          B        |L1.23684|
                  |L1.23672|
005c78  e1a01005          MOV      r1,r5
005c7c  e28d0004          ADD      r0,sp,#4
005c80  ebfffffe          BL       putc_bfd
                  |L1.23684|
005c84  e1a00008          MOV      r0,r8
005c88  e2888001          ADD      r8,r8,#1
005c8c  e1500009          CMP      r0,r9
005c90  3afffff8          BCC      |L1.23672|
005c94  eaffff0b          B        |L1.22728|
                  |L1.23704|
005c98  e1a00000          MOV      r0,r0                 ;4646
;;;4712   	}
;;;4713   
;;;4714   	va_end(arp);
005c9c  e3a00000          MOV      r0,#0
005ca0  e58d0068          STR      r0,[sp,#0x68]
;;;4715   
;;;4716   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
005ca4  e59d0008          LDR      r0,[sp,#8]
005ca8  e3500000          CMP      r0,#0
005cac  ba00000d          BLT      |L1.23784|
;;;4717   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
005cb0  e99d0005          LDMIB    sp,{r0,r2}
005cb4  e28d3060          ADD      r3,sp,#0x60
005cb8  e28d1010          ADD      r1,sp,#0x10
005cbc  ebfffffe          BL       f_write
005cc0  e3500000          CMP      r0,#0
005cc4  1a000007          BNE      |L1.23784|
;;;4718   		&& (UINT)pb.idx == nw) return pb.nchr;
005cc8  e59d0008          LDR      r0,[sp,#8]
005ccc  e59d1060          LDR      r1,[sp,#0x60]
005cd0  e1500001          CMP      r0,r1
005cd4  1a000003          BNE      |L1.23784|
005cd8  e59d000c          LDR      r0,[sp,#0xc]
                  |L1.23772|
005cdc  e28dd06c          ADD      sp,sp,#0x6c
005ce0  e8bd0ff0          POP      {r4-r11}
;;;4719   	return EOF;
;;;4720   }
005ce4  e49df014          LDR      pc,[sp],#0x14
                  |L1.23784|
005ce8  e3e00000          MVN      r0,#0                 ;4719
005cec  eafffffa          B        |L1.23772|
;;;4721   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  FatFs
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  ExCvt
000000  80818283          DCB      0x80,0x81,0x82,0x83
000004  84858687          DCB      0x84,0x85,0x86,0x87
000008  88898a8b          DCB      0x88,0x89,0x8a,0x8b
00000c  8c8d8e8f          DCB      0x8c,0x8d,0x8e,0x8f
000010  90919293          DCB      0x90,0x91,0x92,0x93
000014  94959697          DCB      0x94,0x95,0x96,0x97
000018  9899ad9b          DCB      0x98,0x99,0xad,0x9b
00001c  8c9dae9f          DCB      0x8c,0x9d,0xae,0x9f
000020  a021a2a3          DCB      0xa0,0x21,0xa2,0xa3
000024  a4a5a6a7          DCB      0xa4,0xa5,0xa6,0xa7
000028  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00002c  acadaeaf          DCB      0xac,0xad,0xae,0xaf
000030  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000034  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000038  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00003c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000040  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000044  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000048  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00004c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000050  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000054  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000058  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00005c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
000060  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000064  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000068  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00006c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000070  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000074  d4d5d6f7          DCB      0xd4,0xd5,0xd6,0xf7
000078  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00007c  dcddde9f          DCB      0xdc,0xdd,0xde,0x9f
                  LfnOfs
000080  01030507          DCB      0x01,0x03,0x05,0x07
000084  090e1012          DCB      0x09,0x0e,0x10,0x12
000088  1416181c          DCB      0x14,0x16,0x18,0x1c
00008c  1e00              DCB      0x1e,0x00
                  vst
00008e  0400              DCW      0x0400
000090  02000100          DCW      0x0200,0x0100
000094  00800040          DCW      0x0080,0x0040
000098  00200010          DCW      0x0020,0x0010
00009c  00080004          DCW      0x0008,0x0004
0000a0  00020000          DCW      0x0002,0x0000
                  ||cst||
0000a4  80004000          DCW      0x8000,0x4000
0000a8  20001000          DCW      0x2000,0x1000
0000ac  08004000          DCW      0x0800,0x4000
0000b0  20001000          DCW      0x2000,0x1000
0000b4  08000400          DCW      0x0800,0x0400
0000b8  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=1

                  Fsid
000000  0000              DCB      0x00,0x00
                  CurrVol
000002  00                DCB      0x00
