; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\burnintester.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\burnintester.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\burnintester.crf src\userdrv\burnintester.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  hwInit PROC
;;;119    
;;;120    static void hwInit(void)
000000  e92d4010          PUSH     {r4,lr}
;;;121    {
;;;122        for (int i = 0 ; ; i++)
000004  e3a04000          MOV      r4,#0
000008  e1a00000          MOV      r0,r0
                  |L1.12|
;;;123        {
;;;124            if (mInitFunctionList[i].func == NULL)
00000c  e0840084          ADD      r0,r4,r4,LSL #1
000010  e59f1254          LDR      r1,|L1.620|
000014  e0810100          ADD      r0,r1,r0,LSL #2
000018  e5900004          LDR      r0,[r0,#4]
00001c  e3500000          CMP      r0,#0
000020  1a000000          BNE      |L1.40|
;;;125            {
;;;126                break;
000024  ea000018          B        |L1.140|
                  |L1.40|
;;;127            }
;;;128            if (mInitFunctionList[i].func(mInitFunctionList[i].runTestMode))
000028  e0842084          ADD      r2,r4,r4,LSL #1
00002c  e59f3238          LDR      r3,|L1.620|
000030  e0832102          ADD      r2,r3,r2,LSL #2
000034  e5d20008          LDRB     r0,[r2,#8]
000038  e0842084          ADD      r2,r4,r4,LSL #1
00003c  e0832102          ADD      r2,r3,r2,LSL #2
000040  e5921004          LDR      r1,[r2,#4]
000044  e12fff31          BLX      r1
000048  e3500000          CMP      r0,#0
00004c  0a000006          BEQ      |L1.108|
;;;129            {
;;;130                //mInitFunctionList[i].result =TRUE;
;;;131                terninalPrintf(" * [%02d]: Initial %s OK...    *\r\n", i, mInitFunctionList[i].drvName);
000050  e0840084          ADD      r0,r4,r4,LSL #1
000054  e59f1210          LDR      r1,|L1.620|
000058  e7912100          LDR      r2,[r1,r0,LSL #2]
00005c  e1a01004          MOV      r1,r4
000060  e28f0f82          ADR      r0,|L1.624|
000064  ebfffffe          BL       terninalPrintf
000068  ea000005          B        |L1.132|
                  |L1.108|
;;;132            }
;;;133            else
;;;134            {
;;;135                terninalPrintf(" * [%02d]: Initial %s ERROR... *\r\n", i, mInitFunctionList[i].drvName);
00006c  e0840084          ADD      r0,r4,r4,LSL #1
000070  e59f11f4          LDR      r1,|L1.620|
000074  e7912100          LDR      r2,[r1,r0,LSL #2]
000078  e1a01004          MOV      r1,r4
00007c  e28f0e21          ADR      r0,|L1.660|
000080  ebfffffe          BL       terninalPrintf
                  |L1.132|
000084  e2844001          ADD      r4,r4,#1              ;122
000088  eaffffdf          B        |L1.12|
                  |L1.140|
00008c  e1a00000          MOV      r0,r0                 ;126
;;;136                //if(memcmp("FATFS",mInitFunctionList[i].drvName,sizeof(mInitFunctionList[i].drvName)))
;;;137                //    ErrorDiableFlag = TRUE;
;;;138            }
;;;139        }
;;;140        if (GuiManagerInit())
000090  ebfffffe          BL       GuiManagerInit
000094  e3500000          CMP      r0,#0
000098  0a000002          BEQ      |L1.168|
;;;141        {
;;;142            terninalPrintf(" * Initial GuiManager OK...    *\r\n");
00009c  e28f0f85          ADR      r0,|L1.696|
0000a0  ebfffffe          BL       terninalPrintf
0000a4  ea000001          B        |L1.176|
                  |L1.168|
;;;143        }
;;;144        else
;;;145        {
;;;146            terninalPrintf(" * Initial GuiManager ERROR... *\r\n");
0000a8  e28f0f8b          ADR      r0,|L1.732|
0000ac  ebfffffe          BL       terninalPrintf
                  |L1.176|
;;;147        }
;;;148        
;;;149        outpw(REG_SYS_GPJ_MFPL,(inpw(REG_SYS_GPJ_MFPL) & ~(0xFu<<24)) | (0x0u<<24));
0000b0  e3a0020b          MOV      r0,#0xb0000000
0000b4  e59000b8          LDR      r0,[r0,#0xb8]
0000b8  e3c0040f          BIC      r0,r0,#0xf000000
0000bc  e3a0120b          MOV      r1,#0xb0000000
0000c0  e58100b8          STR      r0,[r1,#0xb8]
;;;150        //GPIO_OpenBit(GPIOJ, BIT4, DIR_INPUT, PULL_UP);
;;;151        GPIO_OpenBit(DIP_CARD_READER_SELECT_PORT, DIP_CARD_READER_SELECT_PIN, DIR_INPUT, PULL_UP);
0000c4  e3a03001          MOV      r3,#1
0000c8  e3a02000          MOV      r2,#0
0000cc  e3a01010          MOV      r1,#0x10
0000d0  e3a00d09          MOV      r0,#0x240
0000d4  ebfffffe          BL       GPIO_OpenBit
;;;152        GPIO_OpenBit(DIP_BURNIN_TEST_PORT, DIP_BURNIN_TEST_PIN, DIR_INPUT, PULL_UP);
0000d8  e3a03001          MOV      r3,#1
0000dc  e3a02000          MOV      r2,#0
0000e0  e1a01003          MOV      r1,r3
0000e4  e3a00d09          MOV      r0,#0x240
0000e8  ebfffffe          BL       GPIO_OpenBit
;;;153        
;;;154        #if(SUPPORT_HK_10_HW)
;;;155        //Sensor board DC5V GPB6
;;;156        outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xFu<<24)) | (0x0u<<24));
0000ec  e3a0020b          MOV      r0,#0xb0000000
0000f0  e5900078          LDR      r0,[r0,#0x78]
0000f4  e3c0040f          BIC      r0,r0,#0xf000000
0000f8  e3a0120b          MOV      r1,#0xb0000000
0000fc  e5810078          STR      r0,[r1,#0x78]
;;;157        GPIO_OpenBit(GPIOB, BIT6, DIR_OUTPUT, NO_PULL_UP);
000100  e3a03000          MOV      r3,#0
000104  e3a02001          MOV      r2,#1
000108  e3a01040          MOV      r1,#0x40
00010c  e1a00001          MOV      r0,r1
000110  ebfffffe          BL       GPIO_OpenBit
;;;158        GPIO_ClrBit(GPIOB, BIT6);
000114  e3a01040          MOV      r1,#0x40
000118  e1a00001          MOV      r0,r1
00011c  ebfffffe          BL       GPIO_ClrBit
;;;159        
;;;160        outpw(REG_SYS_GPI_MFPH,(inpw(REG_SYS_GPI_MFPH) & ~(0xFu<<28)) | (0x0u<<28));
000120  e3a0020b          MOV      r0,#0xb0000000
000124  e59000b4          LDR      r0,[r0,#0xb4]
000128  e3c0020f          BIC      r0,r0,#0xf0000000
00012c  e3a0120b          MOV      r1,#0xb0000000
000130  e58100b4          STR      r0,[r1,#0xb4]
;;;161        GPIO_OpenBit(GPIOI, BIT15, DIR_OUTPUT, NO_PULL_UP);
000134  e3a03000          MOV      r3,#0
000138  e3a02001          MOV      r2,#1
00013c  e3a01902          MOV      r1,#0x8000
000140  e3a00c02          MOV      r0,#0x200
000144  ebfffffe          BL       GPIO_OpenBit
;;;162        //GPIO_ClrBit(GPIOI, BIT15);
;;;163        #endif
;;;164    }
000148  e8bd8010          POP      {r4,pc}
;;;165    
                          ENDP

                  calcSuccessRate PROC
;;;166    static float calcSuccessRate(uint32_t totalCount, uint32_t errorCount)
00014c  e92d47f0          PUSH     {r4-r10,lr}
;;;167    {
000150  e1a04000          MOV      r4,r0
000154  e1a0a001          MOV      r10,r1
;;;168        float rate;
;;;169        if (totalCount == 0) {
000158  e3540000          CMP      r4,#0
00015c  1a000001          BNE      |L1.360|
;;;170            rate = 0.0f;
000160  e3a09000          MOV      r9,#0
000164  ea000008          B        |L1.396|
                  |L1.360|
;;;171        }
;;;172        else {
;;;173            rate = (float)(totalCount - errorCount) / (float)totalCount;
000168  e1a00004          MOV      r0,r4
00016c  ebfffffe          BL       __aeabi_ui2f
000170  e1a05000          MOV      r5,r0
000174  e044000a          SUB      r0,r4,r10
000178  ebfffffe          BL       __aeabi_ui2f
00017c  e1a06000          MOV      r6,r0
000180  e1a01005          MOV      r1,r5
000184  ebfffffe          BL       __aeabi_fdiv
000188  e1a09000          MOV      r9,r0
                  |L1.396|
;;;174        }
;;;175        return (rate * 100.0);
00018c  e1a00009          MOV      r0,r9
000190  ebfffffe          BL       __aeabi_f2d
000194  e1a07000          MOV      r7,r0
000198  e3a02000          MOV      r2,#0
00019c  e59f315c          LDR      r3,|L1.768|
0001a0  ebfffffe          BL       __aeabi_dmul
0001a4  e1a05000          MOV      r5,r0
0001a8  ebfffffe          BL       __aeabi_d2f
;;;176    }
0001ac  e8bd87f0          POP      {r4-r10,pc}
;;;177    
                          ENDP

                  burninLedTest PROC
;;;178    static BOOL burninLedTest(void)
0001b0  e92d41f0          PUSH     {r4-r8,lr}
;;;179    {
;;;180        int ledIndex = 0;
0001b4  e3a05000          MOV      r5,#0
;;;181        BOOL status1, status2 = TRUE;
0001b8  e3a07001          MOV      r7,#1
;;;182        for (int i = 0 ; i < 2 ; i++)
0001bc  e3a06000          MOV      r6,#0
0001c0  ea00001b          B        |L1.564|
                  |L1.452|
;;;183        {
;;;184            LEDColorBuffSet((1 << ledIndex), LIGHT_COLOR_OFF);
0001c4  e3a01001          MOV      r1,#1
0001c8  e1a01511          LSL      r1,r1,r5
0001cc  e1a00801          LSL      r0,r1,#16
0001d0  e1a00820          LSR      r0,r0,#16
0001d4  e3a01000          MOV      r1,#0
0001d8  ebfffffe          BL       LEDColorBuffSet
;;;185            status1 = LEDBoardLightSet();
0001dc  ebfffffe          BL       LEDBoardLightSet
0001e0  e1a04000          MOV      r4,r0
;;;186            if (!status1) {status2 = FALSE;}
0001e4  e3540000          CMP      r4,#0
0001e8  1a000000          BNE      |L1.496|
0001ec  e3a07000          MOV      r7,#0
                  |L1.496|
;;;187            vTaskDelay(BURNIN_LED_GAP_TIME / portTICK_RATE_MS);
0001f0  e3a00032          MOV      r0,#0x32
0001f4  ebfffffe          BL       vTaskDelay
;;;188            LEDColorBuffSet(LIGHT_COLOR_OFF, (1 << ledIndex));
0001f8  e3a00001          MOV      r0,#1
0001fc  e1a00510          LSL      r0,r0,r5
000200  e1a01800          LSL      r1,r0,#16
000204  e1a01821          LSR      r1,r1,#16
000208  e3a00000          MOV      r0,#0
00020c  ebfffffe          BL       LEDColorBuffSet
;;;189            status1 = LEDBoardLightSet();
000210  ebfffffe          BL       LEDBoardLightSet
000214  e1a04000          MOV      r4,r0
;;;190            if (!status1) {status2 = FALSE;}
000218  e3540000          CMP      r4,#0
00021c  1a000000          BNE      |L1.548|
000220  e3a07000          MOV      r7,#0
                  |L1.548|
;;;191            vTaskDelay(BURNIN_LED_GAP_TIME / portTICK_RATE_MS);
000224  e3a00032          MOV      r0,#0x32
000228  ebfffffe          BL       vTaskDelay
;;;192            ledIndex = 5;
00022c  e3a05005          MOV      r5,#5
000230  e2866001          ADD      r6,r6,#1              ;182
                  |L1.564|
000234  e3560002          CMP      r6,#2                 ;182
000238  baffffe1          BLT      |L1.452|
;;;193        }
;;;194        LEDColorBuffSet(LIGHT_COLOR_OFF, LIGHT_COLOR_OFF);
00023c  e3a01000          MOV      r1,#0
000240  e1a00001          MOV      r0,r1
000244  ebfffffe          BL       LEDColorBuffSet
;;;195        status1 = LEDBoardLightSet();
000248  ebfffffe          BL       LEDBoardLightSet
00024c  e1a04000          MOV      r4,r0
;;;196        if (!status1) {status2 = FALSE;}
000250  e3540000          CMP      r4,#0
000254  1a000000          BNE      |L1.604|
000258  e3a07000          MOV      r7,#0
                  |L1.604|
;;;197        vTaskDelay(BURNIN_LED_GAP_TIME / portTICK_RATE_MS);
00025c  e3a00032          MOV      r0,#0x32
000260  ebfffffe          BL       vTaskDelay
;;;198        //LedSetColor(NULL, 0x01, TRUE);
;;;199        //vTaskDelay(BURNIN_LED_GAP_TIME / portTICK_RATE_MS);
;;;200        //LedSetColor(NULL, 0x02, TRUE);
;;;201        //vTaskDelay(BURNIN_LED_GAP_TIME / portTICK_RATE_MS);
;;;202        //LedSetColor(NULL, LIGHT_COLOR_OFF, TRUE);
;;;203        return status2;
000264  e1a00007          MOV      r0,r7
;;;204    }
000268  e8bd81f0          POP      {r4-r8,pc}
                  |L1.620|
                          DCD      mInitFunctionList
                  |L1.624|
000270  202a205b          DCB      " * [%02d]: Initial %s OK...    *\r\n",0
000274  25303264
000278  5d3a2049
00027c  6e697469
000280  616c2025
000284  73204f4b
000288  2e2e2e20
00028c  2020202a
000290  0d0a00  
000293  00                DCB      0
                  |L1.660|
000294  202a205b          DCB      " * [%02d]: Initial %s ERROR... *\r\n",0
000298  25303264
00029c  5d3a2049
0002a0  6e697469
0002a4  616c2025
0002a8  73204552
0002ac  524f522e
0002b0  2e2e202a
0002b4  0d0a00  
0002b7  00                DCB      0
                  |L1.696|
0002b8  202a2049          DCB      " * Initial GuiManager OK...    *\r\n",0
0002bc  6e697469
0002c0  616c2047
0002c4  75694d61
0002c8  6e616765
0002cc  72204f4b
0002d0  2e2e2e20
0002d4  2020202a
0002d8  0d0a00  
0002db  00                DCB      0
                  |L1.732|
0002dc  202a2049          DCB      " * Initial GuiManager ERROR... *\r\n",0
0002e0  6e697469
0002e4  616c2047
0002e8  75694d61
0002ec  6e616765
0002f0  72204552
0002f4  524f522e
0002f8  2e2e202a
0002fc  0d0a00  
0002ff  00                DCB      0
                  |L1.768|
                          DCD      0x40590000
                          ENDP

                  GetPrepareStopBurninFlag PROC
;;;906    
;;;907    BOOL GetPrepareStopBurninFlag(void)
000304  e59f020c          LDR      r0,|L1.1304|
;;;908    {
;;;909        return prepareStopBurninTest;
000308  e5d00000          LDRB     r0,[r0,#0]  ; prepareStopBurninTest
;;;910    }
00030c  e12fff1e          BX       lr
;;;911    
                          ENDP

                  vLedBuzzerTestTask PROC
;;;205    
;;;206    static void vLedBuzzerTestTask(void *pvParameters)
000310  ebfffffe          BL       GetCurrentUTCTime
;;;207    {
;;;208        time_t lastTime = GetCurrentUTCTime();
000314  e1a05000          MOV      r5,r0
;;;209        time_t currentTime;
;;;210        BOOL testLoop = FALSE;
000318  e3a06000          MOV      r6,#0
;;;211        terninalPrintf("vLedBuzzerTestTask Going...\r\n");
00031c  e28f0f7e          ADR      r0,|L1.1308|
000320  ebfffffe          BL       terninalPrintf
;;;212        while (TRUE)
000324  ea000026          B        |L1.964|
                  |L1.808|
;;;213        {
;;;214            if (GetPrepareStopBurninFlag())
000328  ebfffffe          BL       GetPrepareStopBurninFlag
00032c  e3500000          CMP      r0,#0
000330  0a000003          BEQ      |L1.836|
;;;215            {
;;;216                terninalPrintf("vLedBuzzerTestTask Terminated !!\r\n");
000334  e28f0c02          ADR      r0,|L1.1340|
000338  ebfffffe          BL       terninalPrintf
;;;217                vTaskDelete(NULL);
00033c  e3a00000          MOV      r0,#0
000340  ebfffffe          BL       vTaskDelete
                  |L1.836|
;;;218            }
;;;219            currentTime = GetCurrentUTCTime();
000344  ebfffffe          BL       GetCurrentUTCTime
000348  e1a04000          MOV      r4,r0
;;;220            if ((currentTime - lastTime) > BURNIN_LED_BUZZER_INTERVAL)
00034c  e0440005          SUB      r0,r4,r5
000350  e350000c          CMP      r0,#0xc
000354  9a000001          BLS      |L1.864|
;;;221            {
;;;222                //terninalPrintf("vLedBuzzerTestTask heartbeat.\r\n");
;;;223                lastTime = currentTime;
000358  e1a05004          MOV      r5,r4
;;;224                testLoop = TRUE;
00035c  e3a06001          MOV      r6,#1
                  |L1.864|
;;;225            }
;;;226            if (!testLoop)
000360  e3560000          CMP      r6,#0
000364  1a000002          BNE      |L1.884|
;;;227            {
;;;228                vTaskDelay(100 / portTICK_RATE_MS);
000368  e3a0000a          MOV      r0,#0xa
00036c  ebfffffe          BL       vTaskDelay
;;;229                continue;
000370  ea000013          B        |L1.964|
                  |L1.884|
;;;230            }
;;;231            testLoop = FALSE;
000374  e3a06000          MOV      r6,#0
;;;232            if (burninLedTest() == FALSE) {
000378  ebfffffe          BL       burninLedTest
00037c  e3500000          CMP      r0,#0
000380  1a000004          BNE      |L1.920|
;;;233                ledBurninErrorCounter++;
000384  e59f01d4          LDR      r0,|L1.1376|
000388  e5900000          LDR      r0,[r0,#0]  ; ledBurninErrorCounter
00038c  e2800001          ADD      r0,r0,#1
000390  e59f11c8          LDR      r1,|L1.1376|
000394  e5810000          STR      r0,[r1,#0]  ; ledBurninErrorCounter
                  |L1.920|
;;;234            }
;;;235            BuzzerPlay(BURNIN_BUZZER_PERIOD, BURNIN_BUZZER_GAP_TIME, BURNIN_BUZZER_PLAY, TRUE);
000398  e3a03001          MOV      r3,#1
00039c  e3a02003          MOV      r2,#3
0003a0  e3a01e19          MOV      r1,#0x190
0003a4  e3a00064          MOV      r0,#0x64
0003a8  ebfffffe          BL       BuzzerPlay
;;;236            ledBurninCounter++;
0003ac  e59f01b0          LDR      r0,|L1.1380|
0003b0  e5900000          LDR      r0,[r0,#0]  ; ledBurninCounter
0003b4  e2800001          ADD      r0,r0,#1
0003b8  e59f11a4          LDR      r1,|L1.1380|
0003bc  e5810000          STR      r0,[r1,#0]  ; ledBurninCounter
0003c0  e1a00000          MOV      r0,r0                 ;229
                  |L1.964|
0003c4  eaffffd7          B        |L1.808|
;;;237            //terninalPrintf("LedBurninCounter = %d\r\n", GetLedBurninTestCounter());
;;;238            //lastTime = GetCurrentUTCTime();
;;;239        }
;;;240    }
;;;241    
                          ENDP

                  vBatteryTestTask PROC
;;;242    static void vBatteryTestTask(void *pvParameters)
0003c8  e92d401c          PUSH     {r2-r4,lr}
;;;243    {
;;;244        time_t lastTime = GetCurrentUTCTime();
0003cc  ebfffffe          BL       GetCurrentUTCTime
0003d0  e1a05000          MOV      r5,r0
;;;245        time_t currentTime;
;;;246        BOOL testLoop = FALSE;
0003d4  e3a06000          MOV      r6,#0
;;;247        uint32_t leftVoltage, rightVoltage;
;;;248        terninalPrintf("vBatteryTestTask Going...\r\n");
0003d8  e28f0f62          ADR      r0,|L1.1384|
0003dc  ebfffffe          BL       terninalPrintf
;;;249        
;;;250        BatterySetEnableTestMode(TRUE);
0003e0  e3a00001          MOV      r0,#1
0003e4  ebfffffe          BL       BatterySetEnableTestMode
;;;251        while (TRUE)
0003e8  ea000049          B        |L1.1300|
                  |L1.1004|
;;;252        {
;;;253            if (GetPrepareStopBurninFlag())
0003ec  ebfffffe          BL       GetPrepareStopBurninFlag
0003f0  e3500000          CMP      r0,#0
0003f4  0a000003          BEQ      |L1.1032|
;;;254            {
;;;255                terninalPrintf("vBatteryTestTask Terminated !!\r\n");
0003f8  e28f0f61          ADR      r0,|L1.1412|
0003fc  ebfffffe          BL       terninalPrintf
;;;256                vTaskDelete(NULL);
000400  e3a00000          MOV      r0,#0
000404  ebfffffe          BL       vTaskDelete
                  |L1.1032|
;;;257            }
;;;258            currentTime = GetCurrentUTCTime();
000408  ebfffffe          BL       GetCurrentUTCTime
00040c  e1a04000          MOV      r4,r0
;;;259            if ((currentTime - lastTime) > BURNIN_BATTERY_INTERVAL)
000410  e0440005          SUB      r0,r4,r5
000414  e3500005          CMP      r0,#5
000418  9a000001          BLS      |L1.1060|
;;;260            {
;;;261                //terninalPrintf("vBatteryTestTask heartbeat.\r\n");
;;;262                lastTime = currentTime;
00041c  e1a05004          MOV      r5,r4
;;;263                testLoop = TRUE;
000420  e3a06001          MOV      r6,#1
                  |L1.1060|
;;;264            }
;;;265            if (!testLoop)
000424  e3560000          CMP      r6,#0
000428  1a000002          BNE      |L1.1080|
;;;266            {
;;;267                vTaskDelay(100 / portTICK_RATE_MS);
00042c  e3a0000a          MOV      r0,#0xa
000430  ebfffffe          BL       vTaskDelay
;;;268                continue;
000434  ea000036          B        |L1.1300|
                  |L1.1080|
;;;269            }
;;;270            testLoop = FALSE;
000438  e3a06000          MOV      r6,#0
;;;271            BatteryGetVoltage();
00043c  ebfffffe          BL       BatteryGetVoltage
;;;272            vTaskDelay(500 / portTICK_RATE_MS);
000440  e3a00032          MOV      r0,#0x32
000444  ebfffffe          BL       vTaskDelay
;;;273            BatteryGetValue(NULL,&leftVoltage, &rightVoltage);
000448  e1a0200d          MOV      r2,sp
00044c  e28d1004          ADD      r1,sp,#4
000450  e3a00000          MOV      r0,#0
000454  ebfffffe          BL       BatteryGetValue
;;;274            batteryLastADCValue[BATTERY_INDEX_0] = leftVoltage;
000458  e59f1148          LDR      r1,|L1.1448|
00045c  e59d0004          LDR      r0,[sp,#4]
000460  e5810000          STR      r0,[r1,#0]  ; batteryLastADCValue
;;;275            batteryLastADCValue[BATTERY_INDEX_1] = rightVoltage;
000464  e59d0000          LDR      r0,[sp,#0]
000468  e5810004          STR      r0,[r1,#4]  ; batteryLastADCValue
;;;276            batteryLastADCValue[BATTERY_INDEX_SOLAR] = SolarBatteryGetValue();
00046c  ebfffffe          BL       SolarBatteryGetValue
000470  e59f1130          LDR      r1,|L1.1448|
000474  e5810008          STR      r0,[r1,#8]  ; batteryLastADCValue
;;;277            batteryBurninCounter[BATTERY_INDEX_0]++;
000478  e59f012c          LDR      r0,|L1.1452|
00047c  e5900000          LDR      r0,[r0,#0]  ; batteryBurninCounter
000480  e2800001          ADD      r0,r0,#1
000484  e59f1120          LDR      r1,|L1.1452|
000488  e5810000          STR      r0,[r1,#0]  ; batteryBurninCounter
;;;278            batteryBurninCounter[BATTERY_INDEX_1]++;
00048c  e2810000          ADD      r0,r1,#0
000490  e5900004          LDR      r0,[r0,#4]  ; batteryBurninCounter
000494  e2800001          ADD      r0,r0,#1
000498  e5810004          STR      r0,[r1,#4]  ; batteryBurninCounter
;;;279            batteryBurninCounter[BATTERY_INDEX_SOLAR]++;
00049c  e2810000          ADD      r0,r1,#0
0004a0  e5900008          LDR      r0,[r0,#8]  ; batteryBurninCounter
0004a4  e2800001          ADD      r0,r0,#1
0004a8  e5810008          STR      r0,[r1,#8]  ; batteryBurninCounter
;;;280            
;;;281            if (leftVoltage < BURNIN_BATTERY_BOUNDARY) {
0004ac  e59d0004          LDR      r0,[sp,#4]
0004b0  e3500fa5          CMP      r0,#0x294
0004b4  2a000004          BCS      |L1.1228|
;;;282                batteryBurninErrorCounter[BATTERY_INDEX_0]++;
0004b8  e59f00f0          LDR      r0,|L1.1456|
0004bc  e5900000          LDR      r0,[r0,#0]  ; batteryBurninErrorCounter
0004c0  e2800001          ADD      r0,r0,#1
0004c4  e59f10e4          LDR      r1,|L1.1456|
0004c8  e5810000          STR      r0,[r1,#0]  ; batteryBurninErrorCounter
                  |L1.1228|
;;;283            }
;;;284            if (rightVoltage < BURNIN_BATTERY_BOUNDARY) {
0004cc  e59d0000          LDR      r0,[sp,#0]
0004d0  e3500fa5          CMP      r0,#0x294
0004d4  2a000004          BCS      |L1.1260|
;;;285                batteryBurninErrorCounter[BATTERY_INDEX_1]++;
0004d8  e59f00d0          LDR      r0,|L1.1456|
0004dc  e5900004          LDR      r0,[r0,#4]  ; batteryBurninErrorCounter
0004e0  e2800001          ADD      r0,r0,#1
0004e4  e59f10c4          LDR      r1,|L1.1456|
0004e8  e5810004          STR      r0,[r1,#4]  ; batteryBurninErrorCounter
                  |L1.1260|
;;;286            }
;;;287            if (batteryLastADCValue[BATTERY_INDEX_SOLAR] < BURNIN_BATTERY_BOUNDARY) {
0004ec  e59f00b4          LDR      r0,|L1.1448|
0004f0  e5900008          LDR      r0,[r0,#8]  ; batteryLastADCValue
0004f4  e3500fa5          CMP      r0,#0x294
0004f8  2a000004          BCS      |L1.1296|
;;;288                batteryBurninErrorCounter[BATTERY_INDEX_SOLAR]++;
0004fc  e59f00ac          LDR      r0,|L1.1456|
000500  e5900008          LDR      r0,[r0,#8]  ; batteryBurninErrorCounter
000504  e2800001          ADD      r0,r0,#1
000508  e59f10a0          LDR      r1,|L1.1456|
00050c  e5810008          STR      r0,[r1,#8]  ; batteryBurninErrorCounter
                  |L1.1296|
000510  e1a00000          MOV      r0,r0                 ;268
                  |L1.1300|
000514  eaffffb4          B        |L1.1004|
                  |L1.1304|
                          DCD      prepareStopBurninTest
                  |L1.1308|
00051c  764c6564          DCB      "vLedBuzzerTestTask Going...\r\n",0
000520  42757a7a
000524  65725465
000528  73745461
00052c  736b2047
000530  6f696e67
000534  2e2e2e0d
000538  0a00    
00053a  00                DCB      0
00053b  00                DCB      0
                  |L1.1340|
00053c  764c6564          DCB      "vLedBuzzerTestTask Terminated !!\r\n",0
000540  42757a7a
000544  65725465
000548  73745461
00054c  736b2054
000550  65726d69
000554  6e617465
000558  64202121
00055c  0d0a00  
00055f  00                DCB      0
                  |L1.1376|
                          DCD      ledBurninErrorCounter
                  |L1.1380|
                          DCD      ledBurninCounter
                  |L1.1384|
000568  76426174          DCB      "vBatteryTestTask Going...\r\n",0
00056c  74657279
000570  54657374
000574  5461736b
000578  20476f69
00057c  6e672e2e
000580  2e0d0a00
                  |L1.1412|
000584  76426174          DCB      "vBatteryTestTask Terminated !!\r\n",0
000588  74657279
00058c  54657374
000590  5461736b
000594  20546572
000598  6d696e61
00059c  74656420
0005a0  21210d0a
0005a4  00      
0005a5  00                DCB      0
0005a6  00                DCB      0
0005a7  00                DCB      0
                  |L1.1448|
                          DCD      batteryLastADCValue
                  |L1.1452|
                          DCD      batteryBurninCounter
                  |L1.1456|
                          DCD      batteryBurninErrorCounter
                          ENDP

                  vNandFlashTestTask PROC
;;;293    
;;;294    static void vNandFlashTestTask(void *pvParameters)
0005b4  e92d4008          PUSH     {r3,lr}
;;;295    {
;;;296        time_t lastTime = GetCurrentUTCTime();
0005b8  ebfffffe          BL       GetCurrentUTCTime
0005bc  e1a07000          MOV      r7,r0
;;;297        time_t currentTime;
;;;298        BOOL testLoop = FALSE;
0005c0  e3a08000          MOV      r8,#0
;;;299        BOOL flashStatus[NAND_FLASH_NUM] = {FALSE};
0005c4  e3a00000          MOV      r0,#0
0005c8  e58d0000          STR      r0,[sp,#0]
;;;300        uint16_t uID;
;;;301        int index;
;;;302        terninalPrintf("vNandFlashTestTask Going...\r\n");
0005cc  e28f0fd1          ADR      r0,|L1.2328|
0005d0  ebfffffe          BL       terninalPrintf
;;;303        
;;;304        flashStatus[FLASH_INDEX_0] = FlashDrvExInitialize(SPI_FLASH_EX_0_INDEX);
0005d4  e3a00001          MOV      r0,#1
0005d8  ebfffffe          BL       FlashDrvExInitialize
0005dc  e5cd0000          STRB     r0,[sp,#0]
;;;305        flashStatus[FLASH_INDEX_1] = FlashDrvExInitialize(SPI_FLASH_EX_1_INDEX);
0005e0  e3a00002          MOV      r0,#2
0005e4  ebfffffe          BL       FlashDrvExInitialize
0005e8  e5cd0001          STRB     r0,[sp,#1]
;;;306        flashStatus[FLASH_INDEX_2] = FlashDrvExInitialize(SPI_FLASH_EX_2_INDEX);
0005ec  e3a00003          MOV      r0,#3
0005f0  ebfffffe          BL       FlashDrvExInitialize
0005f4  e5cd0002          STRB     r0,[sp,#2]
;;;307        
;;;308        while (TRUE)
0005f8  ea000033          B        |L1.1740|
                  |L1.1532|
;;;309        {
;;;310            if (GetPrepareStopBurninFlag())
0005fc  ebfffffe          BL       GetPrepareStopBurninFlag
000600  e3500000          CMP      r0,#0
000604  0a000003          BEQ      |L1.1560|
;;;311            {
;;;312                terninalPrintf("vNandFlashTestTask Terminated !!\r\n");
000608  e28f0fca          ADR      r0,|L1.2360|
00060c  ebfffffe          BL       terninalPrintf
;;;313                vTaskDelete(NULL);
000610  e3a00000          MOV      r0,#0
000614  ebfffffe          BL       vTaskDelete
                  |L1.1560|
;;;314            }
;;;315            currentTime = GetCurrentUTCTime();
000618  ebfffffe          BL       GetCurrentUTCTime
00061c  e1a05000          MOV      r5,r0
;;;316            if ((currentTime - lastTime) > BURNIN_NAND_FLASH_INTERVAL)
000620  e0450007          SUB      r0,r5,r7
000624  e350000f          CMP      r0,#0xf
000628  9a000000          BLS      |L1.1584|
;;;317            {
;;;318                //terninalPrintf("vNandFlashTestTask heartbeat.\r\n");
;;;319                testLoop = TRUE;
00062c  e3a08001          MOV      r8,#1
                  |L1.1584|
;;;320            }
;;;321            if (!testLoop)
000630  e3580000          CMP      r8,#0
000634  1a000002          BNE      |L1.1604|
;;;322            {
;;;323                vTaskDelay(100 / portTICK_RATE_MS);
000638  e3a0000a          MOV      r0,#0xa
00063c  ebfffffe          BL       vTaskDelay
;;;324                continue;
000640  ea000021          B        |L1.1740|
                  |L1.1604|
;;;325            }
;;;326            testLoop = FALSE;
000644  e3a08000          MOV      r8,#0
;;;327            for (index = FLASH_INDEX_0 ; index <= FLASH_INDEX_2 ; index++)
000648  e3a04000          MOV      r4,#0
00064c  ea000019          B        |L1.1720|
                  |L1.1616|
;;;328            {
;;;329                if (flashStatus[index] == FALSE) {
000650  e7dd0004          LDRB     r0,[sp,r4]
000654  e3500000          CMP      r0,#0
000658  1a000005          BNE      |L1.1652|
;;;330                    nandFlashBurninErrorCounter[index]++;
00065c  e59f02f8          LDR      r0,|L1.2396|
000660  e7900104          LDR      r0,[r0,r4,LSL #2]
000664  e2800001          ADD      r0,r0,#1
000668  e59f12ec          LDR      r1,|L1.2396|
00066c  e7810104          STR      r0,[r1,r4,LSL #2]
000670  ea00000a          B        |L1.1696|
                  |L1.1652|
;;;331                }
;;;332                else
;;;333                {
;;;334                    uID = FlashDrvExGetChipID(FLASH_INDEX_0 + 1);
000674  e3a00001          MOV      r0,#1
000678  ebfffffe          BL       FlashDrvExGetChipID
00067c  e1a06000          MOV      r6,r0
;;;335                    //terninalPrintf("vNandFlashTestTask ==> Flash[%d] uID=0x%x\r\n", index, uID);
;;;336                    if (uID != 0xEF16) {
000680  e2460cef          SUB      r0,r6,#0xef00
000684  e2500016          SUBS     r0,r0,#0x16
000688  0a000004          BEQ      |L1.1696|
;;;337                        nandFlashBurninErrorCounter[index]++;
00068c  e59f02c8          LDR      r0,|L1.2396|
000690  e7900104          LDR      r0,[r0,r4,LSL #2]
000694  e2800001          ADD      r0,r0,#1
000698  e59f12bc          LDR      r1,|L1.2396|
00069c  e7810104          STR      r0,[r1,r4,LSL #2]
                  |L1.1696|
;;;338                    }
;;;339                }
;;;340                nandFlashBurninCounter[index]++;
0006a0  e59f02b8          LDR      r0,|L1.2400|
0006a4  e7900104          LDR      r0,[r0,r4,LSL #2]
0006a8  e2800001          ADD      r0,r0,#1
0006ac  e59f12ac          LDR      r1,|L1.2400|
0006b0  e7810104          STR      r0,[r1,r4,LSL #2]
0006b4  e2844001          ADD      r4,r4,#1              ;327
                  |L1.1720|
0006b8  e3540002          CMP      r4,#2                 ;327
0006bc  daffffe3          BLE      |L1.1616|
;;;341            }
;;;342            lastTime = GetCurrentUTCTime();
0006c0  ebfffffe          BL       GetCurrentUTCTime
0006c4  e1a07000          MOV      r7,r0
0006c8  e1a00000          MOV      r0,r0                 ;324
                  |L1.1740|
0006cc  eaffffca          B        |L1.1532|
;;;343        }
;;;344    }
;;;345    
                          ENDP

                  versionQueryFunc PROC
;;;346    static void versionQueryFunc(void)
0006d0  e92d4ff0          PUSH     {r4-r11,lr}
;;;347    {
0006d4  e24ddf49          SUB      sp,sp,#0x124
;;;348        terninalPrintf("------- Version -------\r\n"); 
0006d8  e28f0fa1          ADR      r0,|L1.2404|
0006dc  ebfffffe          BL       terninalPrintf
;;;349        //---LED---
;;;350        uint8_t VerCode1,VerCode2,VerCode3,YearCode,MonthCode,DayCode,HourCode,MinuteCode;
;;;351        //char LEDVerStr[50];
;;;352        vTaskDelay(1000/portTICK_RATE_MS);
0006e0  e3a00064          MOV      r0,#0x64
0006e4  ebfffffe          BL       vTaskDelay
;;;353        if(QueryVersion(&VerCode1,&VerCode2,&VerCode3,&YearCode,&MonthCode,&DayCode,&HourCode,&MinuteCode))
0006e8  e28d0f41          ADD      r0,sp,#0x104
0006ec  e28d1f42          ADD      r1,sp,#0x108
0006f0  e28d2f43          ADD      r2,sp,#0x10c
0006f4  e28d3e11          ADD      r3,sp,#0x110
0006f8  e58d000c          STR      r0,[sp,#0xc]
0006fc  e58d1008          STR      r1,[sp,#8]
000700  e58d2004          STR      r2,[sp,#4]
000704  e58d3000          STR      r3,[sp,#0]
000708  e28d3f45          ADD      r3,sp,#0x114
00070c  e28d2f46          ADD      r2,sp,#0x118
000710  e28d1f47          ADD      r1,sp,#0x11c
000714  e28d0e12          ADD      r0,sp,#0x120
000718  ebfffffe          BL       QueryVersion
00071c  e3500000          CMP      r0,#0
000720  0a000007          BEQ      |L1.1860|
;;;354        {
;;;355            //sprintf(LEDVerStr,"Ver %d.%02d.%02d build %d%d%d%d%d",VerCode1,VerCode2,VerCode3,YearCode,MonthCode,
;;;356             //                                                     DayCode,HourCode,MinuteCode);
;;;357            sprintf(LEDVerStr,"Ver %d.%02d.%02d ",VerCode1,VerCode2,VerCode3);
000724  e5dd0118          LDRB     r0,[sp,#0x118]
000728  e58d0000          STR      r0,[sp,#0]
00072c  e5dd311c          LDRB     r3,[sp,#0x11c]
000730  e5dd2120          LDRB     r2,[sp,#0x120]
000734  e28f1f91          ADR      r1,|L1.2432|
000738  e59f0254          LDR      r0,|L1.2452|
00073c  ebfffffe          BL       __2sprintf
000740  ea000002          B        |L1.1872|
                  |L1.1860|
;;;358        }
;;;359        else
;;;360            sprintf(LEDVerStr,"Error");
000744  e28f1f93          ADR      r1,|L1.2456|
000748  e59f0244          LDR      r0,|L1.2452|
00074c  ebfffffe          BL       __2sprintf
                  |L1.1872|
;;;361        terninalPrintf("1.LED:%s\r\n",LEDVerStr); 
000750  e59f123c          LDR      r1,|L1.2452|
000754  e28f0f91          ADR      r0,|L1.2464|
000758  ebfffffe          BL       terninalPrintf
;;;362        
;;;363        //---Reader---
;;;364        int waitCounter = 15;
00075c  e3a0700f          MOV      r7,#0xf
;;;365        int ReaderStatus;
;;;366        //char ReaderVerBuf[64];
;;;367        if(!GPIO_ReadBit(GPIOJ, BIT4))
000760  e3a01010          MOV      r1,#0x10
000764  e3a00d09          MOV      r0,#0x240
000768  ebfffffe          BL       GPIO_ReadBit
00076c  e3500000          CMP      r0,#0
000770  1a00001c          BNE      |L1.2024|
;;;368        {
;;;369        
;;;370            CardReaderInit(FALSE);
000774  e3a00000          MOV      r0,#0
000778  ebfffffe          BL       CardReaderInit
;;;371            CardReaderSetPower(EPM_READER_CTRL_ID_GUI, TRUE);
00077c  e3a01001          MOV      r1,#1
000780  e3a00000          MOV      r0,#0
000784  ebfffffe          BL       CardReaderSetPower
;;;372            //terninalPrintf("READER CHECK ");
;;;373    
;;;374            do{
000788  e1a00000          MOV      r0,r0
                  |L1.1932|
;;;375                ReaderStatus = CardReaderGetBootedStatus();
00078c  ebfffffe          BL       CardReaderGetBootedStatus
000790  e1a06000          MOV      r6,r0
;;;376    
;;;377                vTaskDelay(1000/portTICK_RATE_MS);
000794  e3a00064          MOV      r0,#0x64
000798  ebfffffe          BL       vTaskDelay
;;;378                waitCounter--;
00079c  e2477001          SUB      r7,r7,#1
;;;379                if(ReaderStatus == TSREADER_CHECK_READER_OK)
0007a0  e3560002          CMP      r6,#2
0007a4  1a000002          BNE      |L1.1972|
;;;380                {   
;;;381                    OctopusReaderGetVersion(ReaderVerBuf);
0007a8  e59f01fc          LDR      r0,|L1.2476|
0007ac  ebfffffe          BL       OctopusReaderGetVersion
;;;382                    break;
0007b0  ea000007          B        |L1.2004|
                  |L1.1972|
;;;383                }
;;;384                if(waitCounter == 0)
0007b4  e3570000          CMP      r7,#0
0007b8  1a000003          BNE      |L1.1996|
;;;385                {
;;;386                    //terninalPrintf("\nCHECK READER [Time Out]\n");
;;;387                    sprintf(ReaderVerBuf,"Error");
0007bc  e28f1f75          ADR      r1,|L1.2456|
0007c0  e59f01e4          LDR      r0,|L1.2476|
0007c4  ebfffffe          BL       __2sprintf
;;;388                    break;
0007c8  ea000001          B        |L1.2004|
                  |L1.1996|
;;;389                }
;;;390            }while(ReaderStatus != TSREADER_CHECK_READER_OK);
0007cc  e3560002          CMP      r6,#2
0007d0  1affffed          BNE      |L1.1932|
                  |L1.2004|
0007d4  e1a00000          MOV      r0,r0                 ;382
;;;391    
;;;392            //terninalPrintf("ReaderVerBuf = %s\r\n",ReaderVerBuf);
;;;393            
;;;394            CardReaderSetPower(EPM_READER_CTRL_ID_GUI,FALSE);
0007d8  e3a01000          MOV      r1,#0
0007dc  e1a00001          MOV      r0,r1
0007e0  ebfffffe          BL       CardReaderSetPower
0007e4  ea000018          B        |L1.2124|
                  |L1.2024|
;;;395        }
;;;396        else
;;;397        {
;;;398           
;;;399            CardReaderInit(TRUE);
0007e8  e3a00001          MOV      r0,#1
0007ec  ebfffffe          BL       CardReaderInit
;;;400            CardReaderSetPower(EPM_READER_CTRL_ID_GUI, TRUE);
0007f0  e3a01001          MOV      r1,#1
0007f4  e3a00000          MOV      r0,#0
0007f8  ebfffffe          BL       CardReaderSetPower
;;;401            //terninalPrintf("READER CHECK ");
;;;402    
;;;403            do{
0007fc  e1a00000          MOV      r0,r0
                  |L1.2048|
;;;404                ReaderStatus = CardReaderGetBootedStatus();
000800  ebfffffe          BL       CardReaderGetBootedStatus
000804  e1a06000          MOV      r6,r0
;;;405    
;;;406                vTaskDelay(1000/portTICK_RATE_MS);
000808  e3a00064          MOV      r0,#0x64
00080c  ebfffffe          BL       vTaskDelay
;;;407                waitCounter--;
000810  e2477001          SUB      r7,r7,#1
;;;408                if(ReaderStatus == TSREADER_CHECK_READER_OK)
000814  e3560002          CMP      r6,#2
000818  1a000002          BNE      |L1.2088|
;;;409                {   
;;;410                    EPMReaderGetVersion(ReaderVerBuf);
00081c  e59f0188          LDR      r0,|L1.2476|
000820  ebfffffe          BL       EPMReaderGetVersion
;;;411                    break;
000824  ea000007          B        |L1.2120|
                  |L1.2088|
;;;412                }
;;;413                if(waitCounter == 0)
000828  e3570000          CMP      r7,#0
00082c  1a000003          BNE      |L1.2112|
;;;414                {
;;;415                    sprintf(ReaderVerBuf,"Error");
000830  e28f1e16          ADR      r1,|L1.2456|
000834  e59f0170          LDR      r0,|L1.2476|
000838  ebfffffe          BL       __2sprintf
;;;416                    break;
00083c  ea000001          B        |L1.2120|
                  |L1.2112|
;;;417                }
;;;418            }while(ReaderStatus != TSREADER_CHECK_READER_OK);
000840  e3560002          CMP      r6,#2
000844  1affffed          BNE      |L1.2048|
                  |L1.2120|
000848  e1a00000          MOV      r0,r0                 ;411
                  |L1.2124|
;;;419    
;;;420            //terninalPrintf("ReaderVerBuf = %s\r\n",ReaderVerBuf);
;;;421    
;;;422        }  
;;;423        terninalPrintf("2.READER:%s\r\n",ReaderVerBuf); 
00084c  e59f1158          LDR      r1,|L1.2476|
000850  e28f0f56          ADR      r0,|L1.2480|
000854  ebfffffe          BL       terninalPrintf
;;;424        
;;;425        //---EPD---
;;;426        
;;;427        //char  preadFWVersion[17] , preadLUTVersion[17];
;;;428        preadFWVersion[16]  = 0x00;
000858  e3a00000          MOV      r0,#0
00085c  e59f115c          LDR      r1,|L1.2496|
000860  e5c10010          STRB     r0,[r1,#0x10]  ; preadFWVersion
;;;429        preadLUTVersion[16] = 0x00;
000864  e59f1158          LDR      r1,|L1.2500|
000868  e5c10010          STRB     r0,[r1,#0x10]  ; preadLUTVersion
;;;430        ReadIT8951SystemInfoLite( preadFWVersion, preadLUTVersion);
00086c  e59f014c          LDR      r0,|L1.2496|
000870  ebfffffe          BL       ReadIT8951SystemInfoLite
;;;431        if (preadFWVersion == NULL)
000874  e59f0144          LDR      r0,|L1.2496|
000878  e3500000          CMP      r0,#0
00087c  1a000001          BNE      |L1.2184|
;;;432            sprintf(preadFWVersion,"Error");
000880  e28f1e11          ADR      r1,|L1.2456|
000884  ebfffffe          BL       __2sprintf
                  |L1.2184|
;;;433        
;;;434        terninalPrintf("3.EPD:%s\r\n",preadFWVersion); 
000888  e59f1130          LDR      r1,|L1.2496|
00088c  e28f0f4d          ADR      r0,|L1.2504|
000890  ebfffffe          BL       terninalPrintf
;;;435        //terninalPrintf("readFWVersion=%s\r\n",preadFWVersion);
;;;436        //terninalPrintf("readLUTVersion=%s\r\n",preadLUTVersion);
;;;437        
;;;438        //---SIM---
;;;439        char retVer[100],SIMStr[100];
;;;440        //char tempchr[100];
;;;441        //char SIMtempchr[100] ;
;;;442        char* pch1= malloc(100);
000894  e3a00064          MOV      r0,#0x64
000898  ebfffffe          BL       malloc
00089c  e58d0038          STR      r0,[sp,#0x38]
;;;443        char* SIMpch1= malloc(100);
0008a0  e3a00064          MOV      r0,#0x64
0008a4  ebfffffe          BL       malloc
0008a8  e58d0034          STR      r0,[sp,#0x34]
;;;444        char* pch2;
;;;445        char* SIMpch2;
;;;446        BOOL QModemGetSIMNumberFlag ;
;;;447        QModemGetSIMNumberFlag = QModemGetSIMNumber(SIMStr);
0008ac  e28d003c          ADD      r0,sp,#0x3c
0008b0  ebfffffe          BL       QModemGetSIMNumber
0008b4  e1a0a000          MOV      r10,r0
;;;448    
;;;449        if(QModemGetSIMNumberFlag)
0008b8  e35a0000          CMP      r10,#0
0008bc  0a000045          BEQ      |L1.2520|
;;;450        {           
;;;451            memcpy(SIMtempchr,SIMStr,100);
0008c0  e3a02064          MOV      r2,#0x64
0008c4  e28d103c          ADD      r1,sp,#0x3c
0008c8  e59f0104          LDR      r0,|L1.2516|
0008cc  ebfffffe          BL       __aeabi_memcpy4
;;;452            SIMpch1 = (char*) memchr(SIMtempchr,'\n',100); 
0008d0  e3a02064          MOV      r2,#0x64
0008d4  e3a0100a          MOV      r1,#0xa
0008d8  e59f00f4          LDR      r0,|L1.2516|
0008dc  ebfffffe          BL       memchr
0008e0  e58d0034          STR      r0,[sp,#0x34]
;;;453            memcpy(SIMtempchr,SIMpch1+1,99);    
0008e4  e3a02063          MOV      r2,#0x63
0008e8  e59d0034          LDR      r0,[sp,#0x34]
0008ec  e2801001          ADD      r1,r0,#1
0008f0  e59f00dc          LDR      r0,|L1.2516|
0008f4  ebfffffe          BL       __aeabi_memcpy
;;;454            SIMpch2 = (char*) memchr(SIMtempchr,'\n',100);
0008f8  e3a02064          MOV      r2,#0x64
0008fc  e3a0100a          MOV      r1,#0xa
000900  e59f00cc          LDR      r0,|L1.2516|
000904  ebfffffe          BL       memchr
000908  e1a09000          MOV      r9,r0
;;;455            memset (SIMpch2,'\0',1);
00090c  e3a01000          MOV      r1,#0
000910  e5c91000          STRB     r1,[r9,#0]
000914  ea000032          B        |L1.2532|
                  |L1.2328|
000918  764e616e          DCB      "vNandFlashTestTask Going...\r\n",0
00091c  64466c61
000920  73685465
000924  73745461
000928  736b2047
00092c  6f696e67
000930  2e2e2e0d
000934  0a00    
000936  00                DCB      0
000937  00                DCB      0
                  |L1.2360|
000938  764e616e          DCB      "vNandFlashTestTask Terminated !!\r\n",0
00093c  64466c61
000940  73685465
000944  73745461
000948  736b2054
00094c  65726d69
000950  6e617465
000954  64202121
000958  0d0a00  
00095b  00                DCB      0
                  |L1.2396|
                          DCD      nandFlashBurninErrorCounter
                  |L1.2400|
                          DCD      nandFlashBurninCounter
                  |L1.2404|
000964  2d2d2d2d          DCB      "------- Version -------\r\n",0
000968  2d2d2d20
00096c  56657273
000970  696f6e20
000974  2d2d2d2d
000978  2d2d2d0d
00097c  0a00    
00097e  00                DCB      0
00097f  00                DCB      0
                  |L1.2432|
000980  56657220          DCB      "Ver %d.%02d.%02d ",0
000984  25642e25
000988  3032642e
00098c  25303264
000990  2000    
000992  00                DCB      0
000993  00                DCB      0
                  |L1.2452|
                          DCD      LEDVerStr
                  |L1.2456|
000998  4572726f          DCB      "Error",0
00099c  7200    
00099e  00                DCB      0
00099f  00                DCB      0
                  |L1.2464|
0009a0  312e4c45          DCB      "1.LED:%s\r\n",0
0009a4  443a2573
0009a8  0d0a00  
0009ab  00                DCB      0
                  |L1.2476|
                          DCD      ReaderVerBuf
                  |L1.2480|
0009b0  322e5245          DCB      "2.READER:%s\r\n",0
0009b4  41444552
0009b8  3a25730d
0009bc  0a00    
0009be  00                DCB      0
0009bf  00                DCB      0
                  |L1.2496|
                          DCD      preadFWVersion
                  |L1.2500|
                          DCD      preadLUTVersion
                  |L1.2504|
0009c8  332e4550          DCB      "3.EPD:%s\r\n",0
0009cc  443a2573
0009d0  0d0a00  
0009d3  00                DCB      0
                  |L1.2516|
                          DCD      SIMtempchr
                  |L1.2520|
;;;456        
;;;457        }
;;;458        else
;;;459        {
;;;460            sprintf(SIMtempchr,"Error");
0009d8  e24f1048          ADR      r1,|L1.2456|
0009dc  e51f0010          LDR      r0,|L1.2516|
0009e0  ebfffffe          BL       __2sprintf
                  |L1.2532|
;;;461        }
;;;462        
;;;463        for(int g=0;g<sizeof(SIMtempchr);g++)
0009e4  e3a00000          MOV      r0,#0
0009e8  ea00000b          B        |L1.2588|
                  |L1.2540|
;;;464        {
;;;465            if((SIMtempchr[g] < 0x20) || (SIMtempchr[g] > 0x7E) )
0009ec  e51f1020          LDR      r1,|L1.2516|
0009f0  e7d11000          LDRB     r1,[r1,r0]
0009f4  e3510020          CMP      r1,#0x20
0009f8  ba000003          BLT      |L1.2572|
0009fc  e51f1030          LDR      r1,|L1.2516|
000a00  e7d11000          LDRB     r1,[r1,r0]
000a04  e351007e          CMP      r1,#0x7e
000a08  da000002          BLE      |L1.2584|
                  |L1.2572|
;;;466                SIMtempchr[g] = 0x00;
000a0c  e3a01000          MOV      r1,#0
000a10  e51f2044          LDR      r2,|L1.2516|
000a14  e7c21000          STRB     r1,[r2,r0]
                  |L1.2584|
000a18  e2800001          ADD      r0,r0,#1              ;463
                  |L1.2588|
000a1c  e3500064          CMP      r0,#0x64              ;463
000a20  3afffff1          BCC      |L1.2540|
;;;467        }
;;;468    
;;;469        terninalPrintf("4.SIM:%s\r\n",SIMtempchr); 
000a24  e51f1058          LDR      r1,|L1.2516|
000a28  e28f0f91          ADR      r0,|L1.3188|
000a2c  ebfffffe          BL       terninalPrintf
;;;470        
;;;471        //---MODEM---
;;;472        BOOL QModemGetVerFlag;
;;;473        QModemGetVerFlag = QModemGetVer(retVer);
000a30  e28d00a0          ADD      r0,sp,#0xa0
000a34  ebfffffe          BL       QModemGetVer
000a38  e1a0b000          MOV      r11,r0
;;;474        
;;;475        if(QModemGetVerFlag)
000a3c  e35b0000          CMP      r11,#0
000a40  0a000015          BEQ      |L1.2716|
;;;476        {            
;;;477            memcpy(tempchr,retVer,100);
000a44  e3a02064          MOV      r2,#0x64
000a48  e28d10a0          ADD      r1,sp,#0xa0
000a4c  e59f022c          LDR      r0,|L1.3200|
000a50  ebfffffe          BL       __aeabi_memcpy4
;;;478            pch1 = (char*) memchr(tempchr,'\n',100);
000a54  e3a02064          MOV      r2,#0x64
000a58  e3a0100a          MOV      r1,#0xa
000a5c  e59f021c          LDR      r0,|L1.3200|
000a60  ebfffffe          BL       memchr
000a64  e58d0038          STR      r0,[sp,#0x38]
;;;479            memcpy(tempchr,pch1+1,99);
000a68  e3a02063          MOV      r2,#0x63
000a6c  e59d0038          LDR      r0,[sp,#0x38]
000a70  e2801001          ADD      r1,r0,#1
000a74  e59f0204          LDR      r0,|L1.3200|
000a78  ebfffffe          BL       __aeabi_memcpy
;;;480            pch2 = (char*) memchr(tempchr,'\n',100);
000a7c  e3a02064          MOV      r2,#0x64
000a80  e3a0100a          MOV      r1,#0xa
000a84  e59f01f4          LDR      r0,|L1.3200|
000a88  ebfffffe          BL       memchr
000a8c  e1a08000          MOV      r8,r0
;;;481            memset (pch2,'\0',1);
000a90  e3a01000          MOV      r1,#0
000a94  e5c81000          STRB     r1,[r8,#0]
000a98  ea000002          B        |L1.2728|
                  |L1.2716|
;;;482            //terninalPrintf("tempchr=%s\r\ntempchrAD=%d\r\n",tempchr,tempchr);
;;;483        }
;;;484        else
;;;485        {
;;;486            sprintf(tempchr,"Error");
000a9c  e24f1f43          ADR      r1,|L1.2456|
000aa0  e59f01d8          LDR      r0,|L1.3200|
000aa4  ebfffffe          BL       __2sprintf
                  |L1.2728|
;;;487        }
;;;488        //sysprintf(MODEMchr,"%s",tempchr);
;;;489        
;;;490        for(int m=0;m<sizeof(tempchr);m++)
000aa8  e3a00000          MOV      r0,#0
000aac  ea00000b          B        |L1.2784|
                  |L1.2736|
;;;491        {
;;;492            if((tempchr[m] < 0x20) || (tempchr[m] > 0x7E) )
000ab0  e59f11c8          LDR      r1,|L1.3200|
000ab4  e7d11000          LDRB     r1,[r1,r0]
000ab8  e3510020          CMP      r1,#0x20
000abc  ba000003          BLT      |L1.2768|
000ac0  e59f11b8          LDR      r1,|L1.3200|
000ac4  e7d11000          LDRB     r1,[r1,r0]
000ac8  e351007e          CMP      r1,#0x7e
000acc  da000002          BLE      |L1.2780|
                  |L1.2768|
;;;493                tempchr[m] = 0x00;
000ad0  e3a01000          MOV      r1,#0
000ad4  e59f21a4          LDR      r2,|L1.3200|
000ad8  e7c21000          STRB     r1,[r2,r0]
                  |L1.2780|
000adc  e2800001          ADD      r0,r0,#1              ;490
                  |L1.2784|
000ae0  e3500064          CMP      r0,#0x64              ;490
000ae4  3afffff1          BCC      |L1.2736|
;;;494        }
;;;495        
;;;496        terninalPrintf("5.MODEM:%s\r\n",tempchr);
000ae8  e59f1190          LDR      r1,|L1.3200|
000aec  e28f0e19          ADR      r0,|L1.3204|
000af0  ebfffffe          BL       terninalPrintf
;;;497        
;;;498        
;;;499        //---RADAR---
;;;500    
;;;501        BOOL changeFlag;
;;;502        RadarInterface* pRadarInterface;
;;;503        //char tempRadar1VersionString[50];
;;;504        //char tempRadar2VersionString[50];
;;;505        uint8_t RadarData[22];
;;;506        
;;;507        uint8_t VersionCmd[9] = {0x7A, 0xA7, 0x00, 0x09, 0x00, 0x00, 0x09, 0xD3, 0x3D};
000af4  e28f2f66          ADR      r2,|L1.3220|
000af8  e8920007          LDM      r2,{r0-r2}
000afc  e28d3010          ADD      r3,sp,#0x10
000b00  e8830007          STM      r3,{r0-r2}
;;;508        //pRadarInterface = RadarGetInterface(RADAR_AV_DESIGN_INTERFACE_INDEX);
;;;509        pRadarInterface = RadarGetInterface(NEWRADAR_INTERFACE_INDEX);  
000b04  e3a00002          MOV      r0,#2
000b08  ebfffffe          BL       RadarGetInterface
000b0c  e1a04000          MOV      r4,r0
;;;510    
;;;511        if(pRadarInterface == NULL)
000b10  e3540000          CMP      r4,#0
000b14  1a000001          BNE      |L1.2848|
;;;512        {
;;;513            terninalPrintf("radarTest ERROR (pRadarInterface == NULL)!!\n");
000b18  e28f0d06          ADR      r0,|L1.3232|
000b1c  ebfffffe          BL       terninalPrintf
                  |L1.2848|
;;;514        }
;;;515    
;;;516        if(pRadarInterface->initFunc() == FALSE)
000b20  e5940000          LDR      r0,[r4,#0]
000b24  e12fff30          BLX      r0
000b28  e3500000          CMP      r0,#0
000b2c  1a000001          BNE      |L1.2872|
;;;517        {
;;;518            terninalPrintf("radarTest ERROR (initFunc false)!!\n");
000b30  e28f0f66          ADR      r0,|L1.3280|
000b34  ebfffffe          BL       terninalPrintf
                  |L1.2872|
;;;519        }
;;;520        pRadarInterface->setPowerStatusFunc(0,TRUE);
000b38  e3a01001          MOV      r1,#1
000b3c  e3a00000          MOV      r0,#0
000b40  e594200c          LDR      r2,[r4,#0xc]
000b44  e12fff32          BLX      r2
;;;521        pRadarInterface->setPowerStatusFunc(1,TRUE);
000b48  e3a01001          MOV      r1,#1
000b4c  e1a00001          MOV      r0,r1
000b50  e594200c          LDR      r2,[r4,#0xc]
000b54  e12fff32          BLX      r2
;;;522    
;;;523        for(int j = 0; j<2; j++)
000b58  e3a05000          MOV      r5,#0
000b5c  ea000036          B        |L1.3132|
                  |L1.2912|
;;;524        {
;;;525            if(pRadarInterface->RadarResultFunc(j, 0x00,VersionCmd,RadarData) == TRUE)
000b60  e28d301c          ADD      r3,sp,#0x1c
000b64  e28d2010          ADD      r2,sp,#0x10
000b68  e3a01000          MOV      r1,#0
000b6c  e1a00005          MOV      r0,r5
000b70  e594c034          LDR      r12,[r4,#0x34]
000b74  e12fff3c          BLX      r12
000b78  e3500001          CMP      r0,#1
000b7c  1a000017          BNE      |L1.3040|
;;;526            {   
;;;527    
;;;528                //terninalPrintf("Radar%d Version : Ver.%d.%d.%d.%d\r\n",j+1,RadarData[0],RadarData[1],RadarData[2],RadarData[3]);
;;;529                
;;;530                if(j == 0)
000b80  e3550000          CMP      r5,#0
000b84  1a000009          BNE      |L1.2992|
;;;531                {
;;;532                    sprintf(tempRadar1VersionString,"Ver %d.%d.%d.%d",RadarData[0],RadarData[1],RadarData[2],RadarData[3]);
000b88  e5dd001f          LDRB     r0,[sp,#0x1f]
000b8c  e5dd101e          LDRB     r1,[sp,#0x1e]
000b90  e58d0004          STR      r0,[sp,#4]
000b94  e58d1000          STR      r1,[sp,#0]
000b98  e5dd301d          LDRB     r3,[sp,#0x1d]
000b9c  e5dd201c          LDRB     r2,[sp,#0x1c]
000ba0  e28f1f53          ADR      r1,|L1.3316|
000ba4  e59f0158          LDR      r0,|L1.3332|
000ba8  ebfffffe          BL       __2sprintf
000bac  ea000016          B        |L1.3084|
                  |L1.2992|
;;;533                }
;;;534                else if(j == 1)
000bb0  e3550001          CMP      r5,#1
000bb4  1a000014          BNE      |L1.3084|
;;;535                {
;;;536                    sprintf(tempRadar2VersionString,"Ver %d.%d.%d.%d",RadarData[0],RadarData[1],RadarData[2],RadarData[3]);
000bb8  e5dd001f          LDRB     r0,[sp,#0x1f]
000bbc  e5dd101e          LDRB     r1,[sp,#0x1e]
000bc0  e58d0004          STR      r0,[sp,#4]
000bc4  e58d1000          STR      r1,[sp,#0]
000bc8  e5dd301d          LDRB     r3,[sp,#0x1d]
000bcc  e5dd201c          LDRB     r2,[sp,#0x1c]
000bd0  e28f1f47          ADR      r1,|L1.3316|
000bd4  e59f012c          LDR      r0,|L1.3336|
000bd8  ebfffffe          BL       __2sprintf
000bdc  ea00000a          B        |L1.3084|
                  |L1.3040|
;;;537                }
;;;538            }
;;;539            else
;;;540            {
;;;541                //terninalPrintf("Radar%d Version : Error\r\n",j+1);
;;;542    
;;;543                if(j == 0)
000be0  e3550000          CMP      r5,#0
000be4  1a000003          BNE      |L1.3064|
;;;544                    sprintf(tempRadar1VersionString,"Error");
000be8  e24f1f96          ADR      r1,|L1.2456|
000bec  e59f0110          LDR      r0,|L1.3332|
000bf0  ebfffffe          BL       __2sprintf
000bf4  ea000004          B        |L1.3084|
                  |L1.3064|
;;;545                else if(j == 1)
000bf8  e3550001          CMP      r5,#1
000bfc  1a000002          BNE      |L1.3084|
;;;546                    sprintf(tempRadar2VersionString,"Error");                
000c00  e24f1e27          ADR      r1,|L1.2456|
000c04  e59f00fc          LDR      r0,|L1.3336|
000c08  ebfffffe          BL       __2sprintf
                  |L1.3084|
;;;547            }
;;;548            
;;;549            if(j == 0)
000c0c  e3550000          CMP      r5,#0
000c10  1a000003          BNE      |L1.3108|
;;;550                terninalPrintf("6.Radar1:%s\r\n",tempRadar1VersionString);
000c14  e59f10e8          LDR      r1,|L1.3332|
000c18  e28f00ec          ADR      r0,|L1.3340|
000c1c  ebfffffe          BL       terninalPrintf
000c20  ea000004          B        |L1.3128|
                  |L1.3108|
;;;551            else if(j == 1)
000c24  e3550001          CMP      r5,#1
000c28  1a000002          BNE      |L1.3128|
;;;552                terninalPrintf("7.Radar2:%s\r\n",tempRadar2VersionString);  
000c2c  e59f10d4          LDR      r1,|L1.3336|
000c30  e28f00e4          ADR      r0,|L1.3356|
000c34  ebfffffe          BL       terninalPrintf
                  |L1.3128|
000c38  e2855001          ADD      r5,r5,#1              ;523
                  |L1.3132|
000c3c  e3550002          CMP      r5,#2                 ;523
000c40  baffffc6          BLT      |L1.2912|
;;;553            
;;;554        }
;;;555    
;;;556        pRadarInterface->setPowerStatusFunc(0,FALSE);
000c44  e3a01000          MOV      r1,#0
000c48  e1a00001          MOV      r0,r1
000c4c  e594200c          LDR      r2,[r4,#0xc]
000c50  e12fff32          BLX      r2
;;;557        pRadarInterface->setPowerStatusFunc(1,FALSE);
000c54  e3a01000          MOV      r1,#0
000c58  e3a00001          MOV      r0,#1
000c5c  e594200c          LDR      r2,[r4,#0xc]
000c60  e12fff32          BLX      r2
;;;558        
;;;559        terninalPrintf("-----------------------\r\n"); 
000c64  e28f00c0          ADR      r0,|L1.3372|
000c68  ebfffffe          BL       terninalPrintf
;;;560    }
000c6c  e28ddf49          ADD      sp,sp,#0x124
000c70  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3188|
000c74  342e5349          DCB      "4.SIM:%s\r\n",0
000c78  4d3a2573
000c7c  0d0a00  
000c7f  00                DCB      0
                  |L1.3200|
                          DCD      tempchr
                  |L1.3204|
000c84  352e4d4f          DCB      "5.MODEM:%s\r\n",0
000c88  44454d3a
000c8c  25730d0a
000c90  00      
000c91  00                DCB      0
000c92  00                DCB      0
000c93  00                DCB      0
                  |L1.3220|
000c94  7aa700            DCB      "z",167,0
000c97  0900              DCB      "\t",0
000c99  00                DCB      0
000c9a  09d33d00          DCB      "\t",211,"=",0
000c9e  00                DCB      0
000c9f  00                DCB      0
                  |L1.3232|
000ca0  72616461          DCB      "radarTest ERROR (pRadarInterface == NULL)!!\n",0
000ca4  72546573
000ca8  74204552
000cac  524f5220
000cb0  28705261
000cb4  64617249
000cb8  6e746572
000cbc  66616365
000cc0  203d3d20
000cc4  4e554c4c
000cc8  2921210a
000ccc  00      
000ccd  00                DCB      0
000cce  00                DCB      0
000ccf  00                DCB      0
                  |L1.3280|
000cd0  72616461          DCB      "radarTest ERROR (initFunc false)!!\n",0
000cd4  72546573
000cd8  74204552
000cdc  524f5220
000ce0  28696e69
000ce4  7446756e
000ce8  63206661
000cec  6c736529
000cf0  21210a00
                  |L1.3316|
000cf4  56657220          DCB      "Ver %d.%d.%d.%d",0
000cf8  25642e25
000cfc  642e2564
000d00  2e256400
                  |L1.3332|
                          DCD      tempRadar1VersionString
                  |L1.3336|
                          DCD      tempRadar2VersionString
                  |L1.3340|
000d0c  362e5261          DCB      "6.Radar1:%s\r\n",0
000d10  64617231
000d14  3a25730d
000d18  0a00    
000d1a  00                DCB      0
000d1b  00                DCB      0
                  |L1.3356|
000d1c  372e5261          DCB      "7.Radar2:%s\r\n",0
000d20  64617232
000d24  3a25730d
000d28  0a00    
000d2a  00                DCB      0
000d2b  00                DCB      0
                  |L1.3372|
000d2c  2d2d2d2d          DCB      "-----------------------\r\n",0
000d30  2d2d2d2d
000d34  2d2d2d2d
000d38  2d2d2d2d
000d3c  2d2d2d2d
000d40  2d2d2d0d
000d44  0a00    
000d46  00                DCB      0
000d47  00                DCB      0
                          ENDP

                  CalibRTCviaNTP PROC
;;;566    
;;;567    BOOL CalibRTCviaNTP()
000d48  e92d4010          PUSH     {r4,lr}
;;;568    {
;;;569        //GUIDrvInit(FALSE);
;;;570        //PowerDrvInit(FALSE);
;;;571        //PowerDrvInit(FALSE);
;;;572        //ModemAgentInit(FALSE);
;;;573        setPrintfFlag(TRUE);
000d4c  e3a00001          MOV      r0,#1
000d50  ebfffffe          BL       setPrintfFlag
;;;574        QModemLibInit(921600);
000d54  e3a00ae1          MOV      r0,#0xe1000
000d58  ebfffffe          BL       QModemLibInit
;;;575        QueryNTPfun();
000d5c  ebfffffe          BL       QueryNTPfun
;;;576        return TRUE;
000d60  e3a00001          MOV      r0,#1
;;;577    }
000d64  e8bd8010          POP      {r4,pc}
;;;578    
                          ENDP

                  BurninTesterInit PROC
;;;584    
;;;585    BOOL BurninTesterInit(void)
000d68  e52de004          PUSH     {lr}
;;;586    {
000d6c  e24dd02c          SUB      sp,sp,#0x2c
;;;587        isEnabledBurninTestMode = TRUE;
000d70  e3a00001          MOV      r0,#1
000d74  e59f12d0          LDR      r1,|L1.4172|
000d78  e5c10000          STRB     r0,[r1,#0]  ; isEnabledBurninTestMode
;;;588        setPrintfFlag(TRUE);
000d7c  ebfffffe          BL       setPrintfFlag
;;;589        hwInit();
000d80  ebfffffe          BL       hwInit
;;;590        BuzzerPlay(100, 800, 1, TRUE);
000d84  e3a03001          MOV      r3,#1
000d88  e1a02003          MOV      r2,r3
000d8c  e3a01e32          MOV      r1,#0x320
000d90  e3a00064          MOV      r0,#0x64
000d94  ebfffffe          BL       BuzzerPlay
;;;591        NT066EResetChip();
000d98  ebfffffe          BL       NT066EResetChip
;;;592        LEDColorBuffSet(0x00, 0x00);
000d9c  e3a01000          MOV      r1,#0
000da0  e1a00001          MOV      r0,r1
000da4  ebfffffe          BL       LEDColorBuffSet
;;;593        LEDBoardLightSet();
000da8  ebfffffe          BL       LEDBoardLightSet
;;;594        versionQueryFunc();
000dac  ebfffffe          BL       versionQueryFunc
;;;595        GuiManagerShowScreen(GUI_BURNIN_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
000db0  e3a03000          MOV      r3,#0
000db4  e1a02003          MOV      r2,r3
000db8  e3a01003          MOV      r1,#3
000dbc  e3a0001e          MOV      r0,#0x1e
000dc0  ebfffffe          BL       GuiManagerShowScreen
;;;596        EPDSetBacklight(FALSE);
000dc4  e3a00000          MOV      r0,#0
000dc8  ebfffffe          BL       EPDSetBacklight
;;;597        //terninalPrintf("FTP_ADDRESS = %s \r\n",FTP_ADDRESS);
;;;598        //terninalPrintf("FTP_ID = %s \r\n",FTP_ID);
;;;599        //terninalPrintf("FTP_PASSWD = %s \r\n",FTP_PASSWD);
;;;600        //terninalPrintf("FTP_PORT = %s \r\n",FTP_PORT);
;;;601        uint8_t readBuffer[SET_DEVICE_PARAMETER_MESSAGE_LENGTH];
;;;602        
;;;603        if (SFlashLoadStorage(SFLASH_STORAGE_EPM_SERIAL_ID_INDEX_BASE, readBuffer, sizeof(readBuffer)))
000dcc  e3a02020          MOV      r2,#0x20
000dd0  e28d100c          ADD      r1,sp,#0xc
000dd4  e3a00000          MOV      r0,#0
000dd8  ebfffffe          BL       SFlashLoadStorage
000ddc  e3500000          CMP      r0,#0
000de0  0a000021          BEQ      |L1.3692|
;;;604        {
;;;605            deviceID = *((uint32_t *)(&readBuffer[0]));
000de4  e59f1264          LDR      r1,|L1.4176|
000de8  e59d000c          LDR      r0,[sp,#0xc]
000dec  e5810000          STR      r0,[r1,#0]  ; deviceID
;;;606            specificBurninTime = *((uint32_t *)(&readBuffer[4]));
000df0  e59f125c          LDR      r1,|L1.4180|
000df4  e59d0010          LDR      r0,[sp,#0x10]
000df8  e5810000          STR      r0,[r1,#0]  ; specificBurninTime
;;;607            //terninalPrintf("specificBurninTime = %08x\r\n",specificBurninTime);
;;;608            if (specificBurninTime == 0xFFFFFFFF) {
000dfc  e2810000          ADD      r0,r1,#0
000e00  e5900000          LDR      r0,[r0,#0]  ; specificBurninTime
000e04  e3700001          CMN      r0,#1
000e08  1a000001          BNE      |L1.3604|
;;;609                specificBurninTime = 0;
000e0c  e3a00000          MOV      r0,#0
000e10  e5810000          STR      r0,[r1,#0]  ; specificBurninTime
                  |L1.3604|
;;;610            }
;;;611            if (specificBurninTime > 0) {
000e14  e59f0238          LDR      r0,|L1.4180|
000e18  e5900000          LDR      r0,[r0,#0]  ; specificBurninTime
000e1c  e3500000          CMP      r0,#0
000e20  0a000006          BEQ      |L1.3648|
;;;612                specificBurninTime = specificBurninTime * 60 - 10;  //Minutes to seconds
000e24  e59f0228          LDR      r0,|L1.4180|
000e28  e5900000          LDR      r0,[r0,#0]  ; specificBurninTime
000e2c  e0600200          RSB      r0,r0,r0,LSL #4
000e30  e3a0100a          MOV      r1,#0xa
000e34  e0610100          RSB      r0,r1,r0,LSL #2
000e38  e59f1214          LDR      r1,|L1.4180|
000e3c  e5810000          STR      r0,[r1,#0]  ; specificBurninTime
                  |L1.3648|
;;;613            }
;;;614            memcpy(manufactureDeviceID, &readBuffer[8], MANUFACTURE_DEVICE_ID_LENGTH);
000e40  e3a02018          MOV      r2,#0x18
000e44  e28d1014          ADD      r1,sp,#0x14
000e48  e59f0208          LDR      r0,|L1.4184|
000e4c  ebfffffe          BL       __aeabi_memcpy4
;;;615            //specificBurninTime = 890;   //Timer Test
;;;616            terninalPrintf(" >> DeviceID = %08d, manufactureDeviceID = %s, specificBurninTime:%d (from SFlash Record) read OK\n", deviceID, manufactureDeviceID, specificBurninTime);
000e50  e59f01fc          LDR      r0,|L1.4180|
000e54  e59f21fc          LDR      r2,|L1.4184|
000e58  e5903000          LDR      r3,[r0,#0]  ; specificBurninTime
000e5c  e59f01ec          LDR      r0,|L1.4176|
000e60  e5901000          LDR      r1,[r0,#0]  ; deviceID
000e64  e59f01f0          LDR      r0,|L1.4188|
000e68  ebfffffe          BL       terninalPrintf
                  |L1.3692|
;;;617        }
;;;618        xTaskCreate(vLedBuzzerTestTask, "vLedBuzzerTestTask", 1024*5, NULL, LED_BUZZER_TEST_THREAD_PROI, NULL);
000e6c  e3a00000          MOV      r0,#0
000e70  e3a01003          MOV      r1,#3
000e74  e58d0004          STR      r0,[sp,#4]
000e78  e1a03000          MOV      r3,r0
000e7c  e3a02b05          MOV      r2,#0x1400
000e80  e58d1000          STR      r1,[sp,#0]
000e84  e28f1f75          ADR      r1,|L1.4192|
000e88  e59f01e4          LDR      r0,|L1.4212|
000e8c  ebfffffe          BL       xTaskCreate
;;;619        xTaskCreate(vBatteryTestTask, "vBatteryTestTask", 1024*5, NULL, BATTERY_TEST_THREAD_PROI, NULL);
000e90  e3a00000          MOV      r0,#0
000e94  e3a01002          MOV      r1,#2
000e98  e58d0004          STR      r0,[sp,#4]
000e9c  e1a03000          MOV      r3,r0
000ea0  e3a02b05          MOV      r2,#0x1400
000ea4  e58d1000          STR      r1,[sp,#0]
000ea8  e28f1f72          ADR      r1,|L1.4216|
000eac  e59f01d8          LDR      r0,|L1.4236|
000eb0  ebfffffe          BL       xTaskCreate
;;;620        xTaskCreate(vNandFlashTestTask, "vNandFlashTestTask", 1024*5, NULL, NAND_FLASH_TEST_THREAD_PROI, NULL);
000eb4  e3a00000          MOV      r0,#0
000eb8  e3a01003          MOV      r1,#3
000ebc  e58d0004          STR      r0,[sp,#4]
000ec0  e1a03000          MOV      r3,r0
000ec4  e3a02b05          MOV      r2,#0x1400
000ec8  e58d1000          STR      r1,[sp,#0]
000ecc  e28f1f6f          ADR      r1,|L1.4240|
000ed0  e59f01cc          LDR      r0,|L1.4260|
000ed4  ebfffffe          BL       xTaskCreate
;;;621        RTC_Read(RTC_CURRENT_TIME, &startRTCTime);
000ed8  e59f11c8          LDR      r1,|L1.4264|
000edc  e3a00000          MOV      r0,#0
000ee0  ebfffffe          BL       RTC_Read
;;;622        startUTCTime = GetCurrentUTCTime();
000ee4  ebfffffe          BL       GetCurrentUTCTime
000ee8  e59f11bc          LDR      r1,|L1.4268|
000eec  e5810000          STR      r0,[r1,#0]  ; startUTCTime
;;;623        //versionQueryFunc();
;;;624        return TRUE;
000ef0  e3a00001          MOV      r0,#1
000ef4  e28dd02c          ADD      sp,sp,#0x2c
;;;625    }
000ef8  e49df004          POP      {pc}
;;;626    
                          ENDP

                  NoticeFTPReportDone PROC
;;;627    void NoticeFTPReportDone(void)
000efc  e51f09ec          LDR      r0,|L1.1304|
;;;628    {
;;;629        if (prepareStopBurninTest) {
000f00  e5d00000          LDRB     r0,[r0,#0]  ; prepareStopBurninTest
000f04  e3500000          CMP      r0,#0
000f08  0a000002          BEQ      |L1.3864|
;;;630            lastTestReportDone_FTP = TRUE;
000f0c  e3a00001          MOV      r0,#1
000f10  e59f1198          LDR      r1,|L1.4272|
000f14  e5c10000          STRB     r0,[r1,#0]  ; lastTestReportDone_FTP
                  |L1.3864|
;;;631        }
;;;632    }
000f18  e12fff1e          BX       lr
;;;633    
                          ENDP

                  NoticeSDReportDone PROC
;;;634    void NoticeSDReportDone(void)
000f1c  e51f0a0c          LDR      r0,|L1.1304|
;;;635    {
;;;636        if (prepareStopBurninTest) {
000f20  e5d00000          LDRB     r0,[r0,#0]  ; prepareStopBurninTest
000f24  e3500000          CMP      r0,#0
000f28  0a000002          BEQ      |L1.3896|
;;;637            lastTestReportDone_SD = TRUE;
000f2c  e3a00001          MOV      r0,#1
000f30  e59f117c          LDR      r1,|L1.4276|
000f34  e5c10000          STRB     r0,[r1,#0]  ; lastTestReportDone_SD
                  |L1.3896|
;;;638        }
;;;639    }
000f38  e12fff1e          BX       lr
;;;640    
                          ENDP

                  GetBurninTerminatedFlag PROC
;;;641    BOOL GetBurninTerminatedFlag(void)
000f3c  e59f016c          LDR      r0,|L1.4272|
;;;642    {
;;;643        return (lastTestReportDone_FTP & lastTestReportDone_SD);
000f40  e5d00000          LDRB     r0,[r0,#0]  ; lastTestReportDone_FTP
000f44  e59f1168          LDR      r1,|L1.4276|
000f48  e5d11000          LDRB     r1,[r1,#0]  ; lastTestReportDone_SD
000f4c  e0000001          AND      r0,r0,r1
;;;644    }
000f50  e12fff1e          BX       lr
;;;645    
                          ENDP

                  BurninTestingMonitor PROC
;;;646    void BurninTestingMonitor(void)
000f54  e92d4010          PUSH     {r4,lr}
;;;647    {
;;;648        if (specificBurninTime == 0) {
000f58  e59f00f4          LDR      r0,|L1.4180|
000f5c  e5900000          LDR      r0,[r0,#0]  ; specificBurninTime
000f60  e3500000          CMP      r0,#0
000f64  1a000000          BNE      |L1.3948|
                  |L1.3944|
;;;649            return;
;;;650        }
;;;651        
;;;652        terninalPrintf("BurninTestingMonitor Going...\r\n");
;;;653        uint32_t currentRuntime;
;;;654        while (TRUE)
;;;655        {
;;;656            currentRuntime = GetCurrentUTCTime() - startUTCTime;
;;;657            if (currentRuntime >= specificBurninTime) {
;;;658                prepareStopBurninTest = TRUE;
;;;659            }
;;;660            if ((prepareStopBurninTest) && (lastTestReportDone_FTP) && (lastTestReportDone_SD))
;;;661            {
;;;662                GuiBurninTesterStop();
;;;663                break;
;;;664            }
;;;665            vTaskDelay(500 / portTICK_RATE_MS);
;;;666        }
;;;667        terninalPrintf("BurninTestingMonitor Terminated !!\r\n");
;;;668    }
000f68  e8bd8010          POP      {r4,pc}
                  |L1.3948|
000f6c  e28f0f51          ADR      r0,|L1.4280|
000f70  ebfffffe          BL       terninalPrintf
000f74  ea00001a          B        |L1.4068|
                  |L1.3960|
000f78  ebfffffe          BL       GetCurrentUTCTime
000f7c  e59f1128          LDR      r1,|L1.4268|
000f80  e5911000          LDR      r1,[r1,#0]            ;656  ; startUTCTime
000f84  e0404001          SUB      r4,r0,r1              ;656
000f88  e59f00c4          LDR      r0,|L1.4180|
000f8c  e5900000          LDR      r0,[r0,#0]            ;657  ; specificBurninTime
000f90  e1540000          CMP      r4,r0                 ;657
000f94  3a000002          BCC      |L1.4004|
000f98  e3a00001          MOV      r0,#1                 ;658
000f9c  e51f1a8c          LDR      r1,|L1.1304|
000fa0  e5c10000          STRB     r0,[r1,#0]            ;658  ; prepareStopBurninTest
                  |L1.4004|
000fa4  e51f0a94          LDR      r0,|L1.1304|
000fa8  e5d00000          LDRB     r0,[r0,#0]            ;660  ; prepareStopBurninTest
000fac  e3500000          CMP      r0,#0                 ;660
000fb0  0a000009          BEQ      |L1.4060|
000fb4  e59f00f4          LDR      r0,|L1.4272|
000fb8  e5d00000          LDRB     r0,[r0,#0]            ;660  ; lastTestReportDone_FTP
000fbc  e3500000          CMP      r0,#0                 ;660
000fc0  0a000005          BEQ      |L1.4060|
000fc4  e59f00e8          LDR      r0,|L1.4276|
000fc8  e5d00000          LDRB     r0,[r0,#0]            ;660  ; lastTestReportDone_SD
000fcc  e3500000          CMP      r0,#0                 ;660
000fd0  0a000001          BEQ      |L1.4060|
000fd4  ebfffffe          BL       GuiBurninTesterStop
000fd8  ea000002          B        |L1.4072|
                  |L1.4060|
000fdc  e3a00032          MOV      r0,#0x32              ;665
000fe0  ebfffffe          BL       vTaskDelay
                  |L1.4068|
000fe4  eaffffe3          B        |L1.3960|
                  |L1.4072|
000fe8  e1a00000          MOV      r0,r0                 ;663
000fec  e28f00e4          ADR      r0,|L1.4312|
000ff0  ebfffffe          BL       terninalPrintf
000ff4  e1a00000          MOV      r0,r0
000ff8  eaffffda          B        |L1.3944|
;;;669    
                          ENDP

                  GetNandFlashBurninTestErrorCounter PROC
;;;891    
;;;892    uint32_t GetNandFlashBurninTestErrorCounter(int index)
000ffc  e1a01000          MOV      r1,r0
;;;893    {
;;;894        return nandFlashBurninErrorCounter[index];
001000  e51f06ac          LDR      r0,|L1.2396|
001004  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;895    }
001008  e12fff1e          BX       lr
;;;896    
                          ENDP

                  GetNandFlashBurninTestCounter PROC
;;;886    
;;;887    uint32_t GetNandFlashBurninTestCounter(int index)
00100c  e1a01000          MOV      r1,r0
;;;888    {
;;;889        return nandFlashBurninCounter[index];
001010  e51f06b8          LDR      r0,|L1.2400|
001014  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;890    }
001018  e12fff1e          BX       lr
;;;891    
                          ENDP

                  GetBatteryLastADCValue PROC
;;;896    
;;;897    uint32_t GetBatteryLastADCValue(int index)
00101c  e1a01000          MOV      r1,r0
;;;898    {
;;;899        return batteryLastADCValue[index];
001020  e51f0a80          LDR      r0,|L1.1448|
001024  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;900    }
001028  e12fff1e          BX       lr
;;;901    
                          ENDP

                  GetBatteryBurninTestErrorCounter PROC
;;;881    
;;;882    uint32_t GetBatteryBurninTestErrorCounter(int index)
00102c  e1a01000          MOV      r1,r0
;;;883    {
;;;884        return batteryBurninErrorCounter[index];
001030  e51f0a88          LDR      r0,|L1.1456|
001034  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;885    }
001038  e12fff1e          BX       lr
;;;886    
                          ENDP

                  GetBatteryBurninTestCounter PROC
;;;876    
;;;877    uint32_t GetBatteryBurninTestCounter(int index)
00103c  e1a01000          MOV      r1,r0
;;;878    {
;;;879        return batteryBurninCounter[index];
001040  e51f0a9c          LDR      r0,|L1.1452|
001044  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;880    }
001048  e12fff1e          BX       lr
                  |L1.4172|
                          DCD      isEnabledBurninTestMode
                  |L1.4176|
                          DCD      deviceID
                  |L1.4180|
                          DCD      specificBurninTime
                  |L1.4184|
                          DCD      manufactureDeviceID
                  |L1.4188|
                          DCD      ||.constdata||
                  |L1.4192|
001060  764c6564          DCB      "vLedBuzzerTestTask",0
001064  42757a7a
001068  65725465
00106c  73745461
001070  736b00  
001073  00                DCB      0
                  |L1.4212|
                          DCD      vLedBuzzerTestTask
                  |L1.4216|
001078  76426174          DCB      "vBatteryTestTask",0
00107c  74657279
001080  54657374
001084  5461736b
001088  00      
001089  00                DCB      0
00108a  00                DCB      0
00108b  00                DCB      0
                  |L1.4236|
                          DCD      vBatteryTestTask
                  |L1.4240|
001090  764e616e          DCB      "vNandFlashTestTask",0
001094  64466c61
001098  73685465
00109c  73745461
0010a0  736b00  
0010a3  00                DCB      0
                  |L1.4260|
                          DCD      vNandFlashTestTask
                  |L1.4264|
                          DCD      startRTCTime
                  |L1.4268|
                          DCD      startUTCTime
                  |L1.4272|
                          DCD      lastTestReportDone_FTP
                  |L1.4276|
                          DCD      lastTestReportDone_SD
                  |L1.4280|
0010b8  4275726e          DCB      "BurninTestingMonitor Going...\r\n",0
0010bc  696e5465
0010c0  7374696e
0010c4  674d6f6e
0010c8  69746f72
0010cc  20476f69
0010d0  6e672e2e
0010d4  2e0d0a00
                  |L1.4312|
0010d8  4275726e          DCB      "BurninTestingMonitor Terminated !!\r\n",0
0010dc  696e5465
0010e0  7374696e
0010e4  674d6f6e
0010e8  69746f72
0010ec  20546572
0010f0  6d696e61
0010f4  74656420
0010f8  21210d0a
0010fc  00      
0010fd  00                DCB      0
0010fe  00                DCB      0
0010ff  00                DCB      0
                          ENDP

                  GetLedBurninTestErrorCounter PROC
;;;871    
;;;872    uint32_t GetLedBurninTestErrorCounter(void)
001100  e51f0ba8          LDR      r0,|L1.1376|
;;;873    {
;;;874        return ledBurninErrorCounter;
001104  e5900000          LDR      r0,[r0,#0]  ; ledBurninErrorCounter
;;;875    }
001108  e12fff1e          BX       lr
;;;876    
                          ENDP

                  GetLedBurninTestCounter PROC
;;;866    
;;;867    uint32_t GetLedBurninTestCounter(void)
00110c  e51f0bb0          LDR      r0,|L1.1380|
;;;868    {
;;;869        return ledBurninCounter;
001110  e5900000          LDR      r0,[r0,#0]  ; ledBurninCounter
;;;870    }
001114  e12fff1e          BX       lr
;;;871    
                          ENDP

                  GetBurninTestRuntime PROC
;;;853    
;;;854    void GetBurninTestRuntime(uint32_t *hours, uint32_t *minutes, uint32_t *seconds)
001118  e92d41f0          PUSH     {r4-r8,lr}
;;;855    {
00111c  e1a04000          MOV      r4,r0
001120  e1a05001          MOV      r5,r1
001124  e1a06002          MOV      r6,r2
;;;856        uint32_t currentRuntime = GetCurrentUTCTime() - startUTCTime;
001128  ebfffffe          BL       GetCurrentUTCTime
00112c  e51f1088          LDR      r1,|L1.4268|
001130  e5911000          LDR      r1,[r1,#0]  ; startUTCTime
001134  e0407001          SUB      r7,r0,r1
;;;857        *hours = currentRuntime / 3600;
001138  e3a01ee1          MOV      r1,#0xe10
00113c  e1a00007          MOV      r0,r7
001140  ebfffffe          BL       __aeabi_uidivmod
001144  e5840000          STR      r0,[r4,#0]
;;;858        *minutes = (currentRuntime % 3600) / 60;
001148  e3a01ee1          MOV      r1,#0xe10
00114c  e1a00007          MOV      r0,r7
001150  ebfffffe          BL       __aeabi_uidivmod
001154  e1a08001          MOV      r8,r1
001158  e3a0103c          MOV      r1,#0x3c
00115c  e1a00008          MOV      r0,r8
001160  ebfffffe          BL       __aeabi_uidivmod
001164  e5850000          STR      r0,[r5,#0]
;;;859        *seconds = currentRuntime % 60;
001168  e3a0103c          MOV      r1,#0x3c
00116c  e1a00007          MOV      r0,r7
001170  ebfffffe          BL       __aeabi_uidivmod
001174  e5861000          STR      r1,[r6,#0]
;;;860    }
001178  e8bd81f0          POP      {r4-r8,pc}
;;;861    
                          ENDP

                  BuildBurninTestReport PROC
;;;669    
;;;670    char* BuildBurninTestReport(RTC_TIME_DATA_T *pt)
00117c  e92d4011          PUSH     {r0,r4,lr}
;;;671    {
001180  e24ddf4f          SUB      sp,sp,#0x13c
;;;672        char stringBuffer[256];
;;;673        uint32_t totalCount, errorCount;
;;;674        uint32_t hours, minutes, seconds;
;;;675        
;;;676        //Report Title, Program Version, Time Parameters
;;;677        memset(burninTestReportBuffer, 0x00, BURNIN_TEST_REPORT_BUFFER_LENGTH);
001184  e3a01a01          MOV      r1,#0x1000
001188  e59f0390          LDR      r0,|L1.5408|
00118c  ebfffffe          BL       __aeabi_memclr4
;;;678        strcat(burninTestReportBuffer, "EPM Burn/In Test Report\r\n");
001190  e28f1fe3          ADR      r1,|L1.5412|
001194  e59f0384          LDR      r0,|L1.5408|
001198  ebfffffe          BL       strcat
;;;679        //sprintf(stringBuffer, "Program Version: %s\r\n", BURNIN_TEST_VERSION);
;;;680        sprintf(stringBuffer, "Program Version: %d.%02d.%02d\r\n", MAJOR_VERSION, MINOR_VERSION, REVISION_VERSION);
00119c  e3a00007          MOV      r0,#7
0011a0  e3a03009          MOV      r3,#9
0011a4  e3a02001          MOV      r2,#1
0011a8  e28f1e39          ADR      r1,|L1.5440|
0011ac  e58d0000          STR      r0,[sp,#0]
0011b0  e28d003c          ADD      r0,sp,#0x3c
0011b4  ebfffffe          BL       __2sprintf
;;;681        strcat(burninTestReportBuffer, stringBuffer);
0011b8  e28d103c          ADD      r1,sp,#0x3c
0011bc  e59f035c          LDR      r0,|L1.5408|
0011c0  ebfffffe          BL       strcat
;;;682        sprintf(stringBuffer, "Manufacture DeviceID: %s\r\n", manufactureDeviceID);
0011c4  e51f2174          LDR      r2,|L1.4184|
0011c8  e28f1e39          ADR      r1,|L1.5472|
0011cc  e28d003c          ADD      r0,sp,#0x3c
0011d0  ebfffffe          BL       __2sprintf
;;;683        strcat(burninTestReportBuffer, stringBuffer);
0011d4  e28d103c          ADD      r1,sp,#0x3c
0011d8  e59f0340          LDR      r0,|L1.5408|
0011dc  ebfffffe          BL       strcat
;;;684        strcat(burninTestReportBuffer, "Testing Start Time: ");
0011e0  e28f1fe5          ADR      r1,|L1.5500|
0011e4  e59f0334          LDR      r0,|L1.5408|
0011e8  ebfffffe          BL       strcat
;;;685        sprintf(stringBuffer, "%04d/%02d/%02d %02d:%02d:%02d\r\n", startRTCTime.u32Year, startRTCTime.u32cMonth, startRTCTime.u32cDay, startRTCTime.u32cHour, startRTCTime.u32cMinute, startRTCTime.u32cSecond);
0011ec  e51f014c          LDR      r0,|L1.4264|
0011f0  e5900004          LDR      r0,[r0,#4]  ; startRTCTime
0011f4  e51f1154          LDR      r1,|L1.4264|
0011f8  e5911008          LDR      r1,[r1,#8]  ; startRTCTime
0011fc  e51f215c          LDR      r2,|L1.4264|
001200  e592200c          LDR      r2,[r2,#0xc]  ; startRTCTime
001204  e51f3164          LDR      r3,|L1.4264|
001208  e5933014          LDR      r3,[r3,#0x14]  ; startRTCTime
00120c  e58d000c          STR      r0,[sp,#0xc]
001210  e51f0170          LDR      r0,|L1.4264|
001214  e58d1008          STR      r1,[sp,#8]
001218  e58d2004          STR      r2,[sp,#4]
00121c  e58d3000          STR      r3,[sp,#0]
001220  e5900018          LDR      r0,[r0,#0x18]  ; startRTCTime
001224  e58d0024          STR      r0,[sp,#0x24]
001228  e51f0188          LDR      r0,|L1.4264|
00122c  e590001c          LDR      r0,[r0,#0x1c]  ; startRTCTime
001230  e58d0020          STR      r0,[sp,#0x20]
001234  e1a02000          MOV      r2,r0
001238  e28f1fd5          ADR      r1,|L1.5524|
00123c  e59d3024          LDR      r3,[sp,#0x24]
001240  e28d003c          ADD      r0,sp,#0x3c
001244  ebfffffe          BL       __2sprintf
;;;686        strcat(burninTestReportBuffer, stringBuffer);
001248  e28d103c          ADD      r1,sp,#0x3c
00124c  e59f02cc          LDR      r0,|L1.5408|
001250  ebfffffe          BL       strcat
;;;687        strcat(burninTestReportBuffer, "Report Create Time: ");
001254  e28f1fd6          ADR      r1,|L1.5556|
001258  e59f02c0          LDR      r0,|L1.5408|
00125c  ebfffffe          BL       strcat
;;;688        sprintf(stringBuffer, "%04d/%02d/%02d %02d:%02d:%02d\r\n", pt->u32Year, pt->u32cMonth, pt->u32cDay, pt->u32cHour, pt->u32cMinute, pt->u32cSecond);
001260  e59d013c          LDR      r0,[sp,#0x13c]
001264  e5900004          LDR      r0,[r0,#4]
001268  e59d113c          LDR      r1,[sp,#0x13c]
00126c  e5911008          LDR      r1,[r1,#8]
001270  e59d213c          LDR      r2,[sp,#0x13c]
001274  e592200c          LDR      r2,[r2,#0xc]
001278  e59d313c          LDR      r3,[sp,#0x13c]
00127c  e5933014          LDR      r3,[r3,#0x14]
001280  e58d000c          STR      r0,[sp,#0xc]
001284  e58d1008          STR      r1,[sp,#8]
001288  e58d2004          STR      r2,[sp,#4]
00128c  e58d3000          STR      r3,[sp,#0]
001290  e59d013c          LDR      r0,[sp,#0x13c]
001294  e5900018          LDR      r0,[r0,#0x18]
001298  e58d0024          STR      r0,[sp,#0x24]
00129c  e59d013c          LDR      r0,[sp,#0x13c]
0012a0  e590001c          LDR      r0,[r0,#0x1c]
0012a4  e58d0020          STR      r0,[sp,#0x20]
0012a8  e1a02000          MOV      r2,r0
0012ac  e28f1e2e          ADR      r1,|L1.5524|
0012b0  e59d3024          LDR      r3,[sp,#0x24]
0012b4  e28d003c          ADD      r0,sp,#0x3c
0012b8  ebfffffe          BL       __2sprintf
;;;689        strcat(burninTestReportBuffer, stringBuffer);
0012bc  e28d103c          ADD      r1,sp,#0x3c
0012c0  e59f0258          LDR      r0,|L1.5408|
0012c4  ebfffffe          BL       strcat
;;;690        GetBurninTestRuntime(&hours, &minutes, &seconds);
0012c8  e28d2028          ADD      r2,sp,#0x28
0012cc  e28d102c          ADD      r1,sp,#0x2c
0012d0  e28d0030          ADD      r0,sp,#0x30
0012d4  ebfffffe          BL       GetBurninTestRuntime
;;;691        strcat(burninTestReportBuffer, "Program Runtime: ");
0012d8  e28f1fbb          ADR      r1,|L1.5580|
0012dc  e59f023c          LDR      r0,|L1.5408|
0012e0  ebfffffe          BL       strcat
;;;692        sprintf(stringBuffer, "%02dh:%02dm:%02ds\r\n\r\n", hours, minutes, seconds);
0012e4  e59d0028          LDR      r0,[sp,#0x28]
0012e8  e58d0000          STR      r0,[sp,#0]
0012ec  e28f1fbb          ADR      r1,|L1.5600|
0012f0  e59d2030          LDR      r2,[sp,#0x30]
0012f4  e59d302c          LDR      r3,[sp,#0x2c]
0012f8  e28d003c          ADD      r0,sp,#0x3c
0012fc  ebfffffe          BL       __2sprintf
;;;693        strcat(burninTestReportBuffer, stringBuffer);
001300  e28d103c          ADD      r1,sp,#0x3c
001304  e59f0214          LDR      r0,|L1.5408|
001308  ebfffffe          BL       strcat
;;;694        
;;;695        if(FirstRun)
00130c  e59f02e4          LDR      r0,|L1.5624|
001310  e5d00000          LDRB     r0,[r0,#0]  ; FirstRun
001314  e3500000          CMP      r0,#0
001318  0a000039          BEQ      |L1.5124|
;;;696        {
;;;697            FirstRun = FALSE;
00131c  e3a00000          MOV      r0,#0
001320  e59f12d0          LDR      r1,|L1.5624|
001324  e5c10000          STRB     r0,[r1,#0]  ; FirstRun
;;;698            strcat(burninTestReportBuffer, "------- Version -------\r\n");
001328  e59f12cc          LDR      r1,|L1.5628|
00132c  e59f01ec          LDR      r0,|L1.5408|
001330  ebfffffe          BL       strcat
;;;699            sprintf(stringBuffer, "1.LED: %s\r\n", LEDVerStr);
001334  e51f29a8          LDR      r2,|L1.2452|
001338  e28f1d0b          ADR      r1,|L1.5632|
00133c  e28d003c          ADD      r0,sp,#0x3c
001340  ebfffffe          BL       __2sprintf
;;;700            strcat(burninTestReportBuffer, stringBuffer);
001344  e28d103c          ADD      r1,sp,#0x3c
001348  e59f01d0          LDR      r0,|L1.5408|
00134c  ebfffffe          BL       strcat
;;;701            sprintf(stringBuffer, "2.READER: %s\r\n", ReaderVerBuf);
001350  e51f29ac          LDR      r2,|L1.2476|
001354  e28f1e2b          ADR      r1,|L1.5644|
001358  e28d003c          ADD      r0,sp,#0x3c
00135c  ebfffffe          BL       __2sprintf
;;;702            strcat(burninTestReportBuffer, stringBuffer);
001360  e28d103c          ADD      r1,sp,#0x3c
001364  e59f01b4          LDR      r0,|L1.5408|
001368  ebfffffe          BL       strcat
;;;703            sprintf(stringBuffer, "3.EPD: %s\r\n", preadFWVersion);
00136c  e51f29b4          LDR      r2,|L1.2496|
001370  e28f1fa9          ADR      r1,|L1.5660|
001374  e28d003c          ADD      r0,sp,#0x3c
001378  ebfffffe          BL       __2sprintf
;;;704            strcat(burninTestReportBuffer, stringBuffer);
00137c  e28d103c          ADD      r1,sp,#0x3c
001380  e59f0198          LDR      r0,|L1.5408|
001384  ebfffffe          BL       strcat
;;;705            sprintf(stringBuffer, "4.SIM: %s\r\n", SIMtempchr);
001388  e51f29bc          LDR      r2,|L1.2516|
00138c  e28f1fa5          ADR      r1,|L1.5672|
001390  e28d003c          ADD      r0,sp,#0x3c
001394  ebfffffe          BL       __2sprintf
;;;706            strcat(burninTestReportBuffer, stringBuffer);
001398  e28d103c          ADD      r1,sp,#0x3c
00139c  e59f017c          LDR      r0,|L1.5408|
0013a0  ebfffffe          BL       strcat
;;;707            sprintf(stringBuffer, "5.MODEM: %s\r\n", tempchr);
0013a4  e51f272c          LDR      r2,|L1.3200|
0013a8  e28f1fa1          ADR      r1,|L1.5684|
0013ac  e28d003c          ADD      r0,sp,#0x3c
0013b0  ebfffffe          BL       __2sprintf
;;;708            strcat(burninTestReportBuffer, stringBuffer);
0013b4  e28d103c          ADD      r1,sp,#0x3c
0013b8  e59f0160          LDR      r0,|L1.5408|
0013bc  ebfffffe          BL       strcat
;;;709            sprintf(stringBuffer, "6.Radar1: %s\r\n", tempRadar1VersionString);
0013c0  e51f26c4          LDR      r2,|L1.3332|
0013c4  e28f1f9e          ADR      r1,|L1.5700|
0013c8  e28d003c          ADD      r0,sp,#0x3c
0013cc  ebfffffe          BL       __2sprintf
;;;710            strcat(burninTestReportBuffer, stringBuffer);
0013d0  e28d103c          ADD      r1,sp,#0x3c
0013d4  e59f0144          LDR      r0,|L1.5408|
0013d8  ebfffffe          BL       strcat
;;;711            sprintf(stringBuffer, "7.Radar2: %s\r\n", tempRadar2VersionString);
0013dc  e51f26dc          LDR      r2,|L1.3336|
0013e0  e28f1f9b          ADR      r1,|L1.5716|
0013e4  e28d003c          ADD      r0,sp,#0x3c
0013e8  ebfffffe          BL       __2sprintf
;;;712            strcat(burninTestReportBuffer, stringBuffer);
0013ec  e28d103c          ADD      r1,sp,#0x3c
0013f0  e59f0128          LDR      r0,|L1.5408|
0013f4  ebfffffe          BL       strcat
;;;713            strcat(burninTestReportBuffer, "-----------------------\r\n\r\n");
0013f8  e28f1f99          ADR      r1,|L1.5732|
0013fc  e59f011c          LDR      r0,|L1.5408|
001400  ebfffffe          BL       strcat
                  |L1.5124|
;;;714        }
;;;715        //LED & Buzzer
;;;716        totalCount = GetLedBurninTestCounter();
001404  ebfffffe          BL       GetLedBurninTestCounter
001408  e58d0038          STR      r0,[sp,#0x38]
;;;717        errorCount = GetLedBurninTestErrorCounter();
00140c  ebfffffe          BL       GetLedBurninTestErrorCounter
001410  e58d0034          STR      r0,[sp,#0x34]
;;;718        sprintf(stringBuffer, "01.LED/Buzzer: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001414  e59d0038          LDR      r0,[sp,#0x38]
001418  e59d1034          LDR      r1,[sp,#0x34]
00141c  ebfffffe          BL       calcSuccessRate
001420  e58d001c          STR      r0,[sp,#0x1c]
001424  ebfffffe          BL       __aeabi_f2d
001428  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00142c  e1a01000          MOV      r1,r0
001430  e59d0024          LDR      r0,[sp,#0x24]
001434  e58d0004          STR      r0,[sp,#4]
001438  e58d1000          STR      r1,[sp,#0]
00143c  e28f1f8f          ADR      r1,|L1.5760|
001440  e59d2038          LDR      r2,[sp,#0x38]
001444  e59d3034          LDR      r3,[sp,#0x34]
001448  e28d003c          ADD      r0,sp,#0x3c
00144c  ebfffffe          BL       __2sprintf
;;;719        strcat(burninTestReportBuffer, stringBuffer);
001450  e28d103c          ADD      r1,sp,#0x3c
001454  e59f00c4          LDR      r0,|L1.5408|
001458  ebfffffe          BL       strcat
;;;720        
;;;721        //EPD & EPD Backlight
;;;722        totalCount = GetEpdBurninTestCounter();
00145c  ebfffffe          BL       GetEpdBurninTestCounter
001460  e58d0038          STR      r0,[sp,#0x38]
;;;723        errorCount = GetEpdBurninTestErrorCounter();
001464  ebfffffe          BL       GetEpdBurninTestErrorCounter
001468  e58d0034          STR      r0,[sp,#0x34]
;;;724        sprintf(stringBuffer, "02.EPD/Backlight: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
00146c  e59d0038          LDR      r0,[sp,#0x38]
001470  e59d1034          LDR      r1,[sp,#0x34]
001474  ebfffffe          BL       calcSuccessRate
001478  e58d001c          STR      r0,[sp,#0x1c]
00147c  ebfffffe          BL       __aeabi_f2d
001480  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001484  e1a01000          MOV      r1,r0
001488  e59d0024          LDR      r0,[sp,#0x24]
00148c  e58d0004          STR      r0,[sp,#4]
001490  e58d1000          STR      r1,[sp,#0]
001494  e28f1f87          ADR      r1,|L1.5816|
001498  e59d2038          LDR      r2,[sp,#0x38]
00149c  e59d3034          LDR      r3,[sp,#0x34]
0014a0  e28d003c          ADD      r0,sp,#0x3c
0014a4  ebfffffe          BL       __2sprintf
;;;725        strcat(burninTestReportBuffer, stringBuffer);
0014a8  e28d103c          ADD      r1,sp,#0x3c
0014ac  e59f006c          LDR      r0,|L1.5408|
0014b0  ebfffffe          BL       strcat
;;;726        
;;;727        //Radar 1
;;;728        totalCount = GetRadarBurninTestCounter(VOS_INDEX_0);
0014b4  e3a00000          MOV      r0,#0
0014b8  ebfffffe          BL       GetRadarBurninTestCounter
0014bc  e58d0038          STR      r0,[sp,#0x38]
;;;729        errorCount = GetRadarBurninTestErrorCounter(VOS_INDEX_0);
0014c0  e3a00000          MOV      r0,#0
0014c4  ebfffffe          BL       GetRadarBurninTestErrorCounter
0014c8  e58d0034          STR      r0,[sp,#0x34]
;;;730        sprintf(stringBuffer, "03.Radar 1: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
0014cc  e59d0038          LDR      r0,[sp,#0x38]
0014d0  e59d1034          LDR      r1,[sp,#0x34]
0014d4  ebfffffe          BL       calcSuccessRate
0014d8  e58d001c          STR      r0,[sp,#0x1c]
0014dc  ebfffffe          BL       __aeabi_f2d
0014e0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
0014e4  e1cd00f0          STRD     r0,r1,[sp,#0]
0014e8  e28f1f81          ADR      r1,|L1.5876|
0014ec  e59d2038          LDR      r2,[sp,#0x38]
0014f0  e59d3034          LDR      r3,[sp,#0x34]
0014f4  e28d003c          ADD      r0,sp,#0x3c
0014f8  ebfffffe          BL       __2sprintf
;;;731        strcat(burninTestReportBuffer, stringBuffer);
0014fc  e28d103c          ADD      r1,sp,#0x3c
001500  e59f0018          LDR      r0,|L1.5408|
001504  ebfffffe          BL       strcat
;;;732        
;;;733        //Radar 2
;;;734        totalCount = GetRadarBurninTestCounter(VOS_INDEX_1);
001508  e3a00001          MOV      r0,#1
00150c  ebfffffe          BL       GetRadarBurninTestCounter
001510  e58d0038          STR      r0,[sp,#0x38]
;;;735        errorCount = GetRadarBurninTestErrorCounter(VOS_INDEX_1);
001514  e3a00001          MOV      r0,#1
001518  ebfffffe          BL       GetRadarBurninTestErrorCounter
00151c  ea000081          B        |L1.5928|
                  |L1.5408|
                          DCD      burninTestReportBuffer
                  |L1.5412|
001524  45504d20          DCB      "EPM Burn/In Test Report\r\n",0
001528  4275726e
00152c  2f496e20
001530  54657374
001534  20526570
001538  6f72740d
00153c  0a00    
00153e  00                DCB      0
00153f  00                DCB      0
                  |L1.5440|
001540  50726f67          DCB      "Program Version: %d.%02d.%02d\r\n",0
001544  72616d20
001548  56657273
00154c  696f6e3a
001550  2025642e
001554  25303264
001558  2e253032
00155c  640d0a00
                  |L1.5472|
001560  4d616e75          DCB      "Manufacture DeviceID: %s\r\n",0
001564  66616374
001568  75726520
00156c  44657669
001570  63654944
001574  3a202573
001578  0d0a00  
00157b  00                DCB      0
                  |L1.5500|
00157c  54657374          DCB      "Testing Start Time: ",0
001580  696e6720
001584  53746172
001588  74205469
00158c  6d653a20
001590  00      
001591  00                DCB      0
001592  00                DCB      0
001593  00                DCB      0
                  |L1.5524|
001594  25303464          DCB      "%04d/%02d/%02d %02d:%02d:%02d\r\n",0
001598  2f253032
00159c  642f2530
0015a0  32642025
0015a4  3032643a
0015a8  25303264
0015ac  3a253032
0015b0  640d0a00
                  |L1.5556|
0015b4  5265706f          DCB      "Report Create Time: ",0
0015b8  72742043
0015bc  72656174
0015c0  65205469
0015c4  6d653a20
0015c8  00      
0015c9  00                DCB      0
0015ca  00                DCB      0
0015cb  00                DCB      0
                  |L1.5580|
0015cc  50726f67          DCB      "Program Runtime: ",0
0015d0  72616d20
0015d4  52756e74
0015d8  696d653a
0015dc  2000    
0015de  00                DCB      0
0015df  00                DCB      0
                  |L1.5600|
0015e0  25303264          DCB      "%02dh:%02dm:%02ds\r\n\r\n",0
0015e4  683a2530
0015e8  32646d3a
0015ec  25303264
0015f0  730d0a0d
0015f4  0a00    
0015f6  00                DCB      0
0015f7  00                DCB      0
                  |L1.5624|
                          DCD      FirstRun
                  |L1.5628|
                          DCD      ||.text||+0x964
                  |L1.5632|
001600  312e4c45          DCB      "1.LED: %s\r\n",0
001604  443a2025
001608  730d0a00
                  |L1.5644|
00160c  322e5245          DCB      "2.READER: %s\r\n",0
001610  41444552
001614  3a202573
001618  0d0a00  
00161b  00                DCB      0
                  |L1.5660|
00161c  332e4550          DCB      "3.EPD: %s\r\n",0
001620  443a2025
001624  730d0a00
                  |L1.5672|
001628  342e5349          DCB      "4.SIM: %s\r\n",0
00162c  4d3a2025
001630  730d0a00
                  |L1.5684|
001634  352e4d4f          DCB      "5.MODEM: %s\r\n",0
001638  44454d3a
00163c  2025730d
001640  0a00    
001642  00                DCB      0
001643  00                DCB      0
                  |L1.5700|
001644  362e5261          DCB      "6.Radar1: %s\r\n",0
001648  64617231
00164c  3a202573
001650  0d0a00  
001653  00                DCB      0
                  |L1.5716|
001654  372e5261          DCB      "7.Radar2: %s\r\n",0
001658  64617232
00165c  3a202573
001660  0d0a00  
001663  00                DCB      0
                  |L1.5732|
001664  2d2d2d2d          DCB      "-----------------------\r\n\r\n",0
001668  2d2d2d2d
00166c  2d2d2d2d
001670  2d2d2d2d
001674  2d2d2d2d
001678  2d2d2d0d
00167c  0a0d0a00
                  |L1.5760|
001680  30312e4c          DCB      "01.LED/Buzzer: Total=%d, Error=%d, SuccessRate=%.2f\r\n"
001684  45442f42
001688  757a7a65
00168c  723a2054
001690  6f74616c
001694  3d25642c
001698  20457272
00169c  6f723d25
0016a0  642c2053
0016a4  75636365
0016a8  73735261
0016ac  74653d25
0016b0  2e32660d
0016b4  0a      
0016b5  00                DCB      0
0016b6  00                DCB      0
0016b7  00                DCB      0
                  |L1.5816|
0016b8  30322e45          DCB      "02.EPD/Backlight: Total=%d, Error=%d, SuccessRate=%.2f\r"
0016bc  50442f42
0016c0  61636b6c
0016c4  69676874
0016c8  3a20546f
0016cc  74616c3d
0016d0  25642c20
0016d4  4572726f
0016d8  723d2564
0016dc  2c205375
0016e0  63636573
0016e4  73526174
0016e8  653d252e
0016ec  32660d  
0016ef  0a00              DCB      "\n",0
0016f1  00                DCB      0
0016f2  00                DCB      0
0016f3  00                DCB      0
                  |L1.5876|
0016f4  30332e52          DCB      "03.Radar 1: Total=%d, Error=%d, SuccessRate=%.2f\r\n",0
0016f8  61646172
0016fc  20313a20
001700  546f7461
001704  6c3d2564
001708  2c204572
00170c  726f723d
001710  25642c20
001714  53756363
001718  65737352
00171c  6174653d
001720  252e3266
001724  0d0a00  
001727  00                DCB      0
                  |L1.5928|
001728  e58d0034          STR      r0,[sp,#0x34]
;;;736        sprintf(stringBuffer, "04.Radar 2: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
00172c  e59d0038          LDR      r0,[sp,#0x38]
001730  e59d1034          LDR      r1,[sp,#0x34]
001734  ebfffffe          BL       calcSuccessRate
001738  e58d001c          STR      r0,[sp,#0x1c]
00173c  ebfffffe          BL       __aeabi_f2d
001740  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001744  e1a01000          MOV      r1,r0
001748  e59d0024          LDR      r0,[sp,#0x24]
00174c  e58d0004          STR      r0,[sp,#4]
001750  e58d1000          STR      r1,[sp,#0]
001754  e28f1fe6          ADR      r1,|L1.6900|
001758  e59d2038          LDR      r2,[sp,#0x38]
00175c  e59d3034          LDR      r3,[sp,#0x34]
001760  e28d003c          ADD      r0,sp,#0x3c
001764  ebfffffe          BL       __2sprintf
;;;737        strcat(burninTestReportBuffer, stringBuffer);
001768  e28d103c          ADD      r1,sp,#0x3c
00176c  e51f0254          LDR      r0,|L1.5408|
001770  ebfffffe          BL       strcat
;;;738        
;;;739        //Lidar 1
;;;740        totalCount = GetLidarBurninTestCounter(VOS_INDEX_0);
001774  e3a00000          MOV      r0,#0
001778  ebfffffe          BL       GetLidarBurninTestCounter
00177c  e58d0038          STR      r0,[sp,#0x38]
;;;741        errorCount = GetLidarBurninTestErrorCounter(VOS_INDEX_0);
001780  e3a00000          MOV      r0,#0
001784  ebfffffe          BL       GetLidarBurninTestErrorCounter
001788  e58d0034          STR      r0,[sp,#0x34]
;;;742        sprintf(stringBuffer, "05.Lidar 1: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
00178c  e59d0038          LDR      r0,[sp,#0x38]
001790  e59d1034          LDR      r1,[sp,#0x34]
001794  ebfffffe          BL       calcSuccessRate
001798  e58d001c          STR      r0,[sp,#0x1c]
00179c  ebfffffe          BL       __aeabi_f2d
0017a0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
0017a4  e1cd00f0          STRD     r0,r1,[sp,#0]
0017a8  e28f1fde          ADR      r1,|L1.6952|
0017ac  e59d2038          LDR      r2,[sp,#0x38]
0017b0  e59d3034          LDR      r3,[sp,#0x34]
0017b4  e28d003c          ADD      r0,sp,#0x3c
0017b8  ebfffffe          BL       __2sprintf
;;;743        strcat(burninTestReportBuffer, stringBuffer);
0017bc  e28d103c          ADD      r1,sp,#0x3c
0017c0  e51f02a8          LDR      r0,|L1.5408|
0017c4  ebfffffe          BL       strcat
;;;744        
;;;745        //Lidar 2
;;;746        totalCount = GetLidarBurninTestCounter(VOS_INDEX_1);
0017c8  e3a00001          MOV      r0,#1
0017cc  ebfffffe          BL       GetLidarBurninTestCounter
0017d0  e58d0038          STR      r0,[sp,#0x38]
;;;747        errorCount = GetLidarBurninTestErrorCounter(VOS_INDEX_1);
0017d4  e3a00001          MOV      r0,#1
0017d8  ebfffffe          BL       GetLidarBurninTestErrorCounter
0017dc  e58d0034          STR      r0,[sp,#0x34]
;;;748        sprintf(stringBuffer, "06.Lidar 2: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
0017e0  e59d0038          LDR      r0,[sp,#0x38]
0017e4  e59d1034          LDR      r1,[sp,#0x34]
0017e8  ebfffffe          BL       calcSuccessRate
0017ec  e58d001c          STR      r0,[sp,#0x1c]
0017f0  ebfffffe          BL       __aeabi_f2d
0017f4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
0017f8  e1cd00f0          STRD     r0,r1,[sp,#0]
0017fc  e28f1fd6          ADR      r1,|L1.7004|
001800  e59d2038          LDR      r2,[sp,#0x38]
001804  e59d3034          LDR      r3,[sp,#0x34]
001808  e28d003c          ADD      r0,sp,#0x3c
00180c  ebfffffe          BL       __2sprintf
;;;749        strcat(burninTestReportBuffer, stringBuffer);
001810  e28d103c          ADD      r1,sp,#0x3c
001814  e51f02fc          LDR      r0,|L1.5408|
001818  ebfffffe          BL       strcat
;;;750        
;;;751        //Battery 1
;;;752        totalCount = GetBatteryBurninTestCounter(BATTERY_INDEX_0);
00181c  e3a00000          MOV      r0,#0
001820  ebfffffe          BL       GetBatteryBurninTestCounter
001824  e58d0038          STR      r0,[sp,#0x38]
;;;753        errorCount = GetBatteryBurninTestErrorCounter(BATTERY_INDEX_0);
001828  e3a00000          MOV      r0,#0
00182c  ebfffffe          BL       GetBatteryBurninTestErrorCounter
001830  e58d0034          STR      r0,[sp,#0x34]
;;;754        sprintf(stringBuffer, "07.Battery 1: Total=%d, Error=%d, SuccessRate=%.2f, LastADCValue=%d\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount), GetBatteryLastADCValue(BATTERY_INDEX_0));
001834  e3a00000          MOV      r0,#0
001838  ebfffffe          BL       GetBatteryLastADCValue
00183c  e58d0024          STR      r0,[sp,#0x24]
001840  e59d0038          LDR      r0,[sp,#0x38]
001844  e59d1034          LDR      r1,[sp,#0x34]
001848  ebfffffe          BL       calcSuccessRate
00184c  e58d0014          STR      r0,[sp,#0x14]
001850  ebfffffe          BL       __aeabi_f2d
001854  e1cd01f8          STRD     r0,r1,[sp,#0x18]
001858  e59d0024          LDR      r0,[sp,#0x24]
00185c  e58d0008          STR      r0,[sp,#8]
001860  e59d0018          LDR      r0,[sp,#0x18]
001864  e1cd00f0          STRD     r0,r1,[sp,#0]
001868  e59f1320          LDR      r1,|L1.7056|
00186c  e59d2038          LDR      r2,[sp,#0x38]
001870  e59d3034          LDR      r3,[sp,#0x34]
001874  e28d003c          ADD      r0,sp,#0x3c
001878  ebfffffe          BL       __2sprintf
;;;755        strcat(burninTestReportBuffer, stringBuffer);
00187c  e28d103c          ADD      r1,sp,#0x3c
001880  e51f0368          LDR      r0,|L1.5408|
001884  ebfffffe          BL       strcat
;;;756        
;;;757        //Battery 2
;;;758        totalCount = GetBatteryBurninTestCounter(BATTERY_INDEX_1);
001888  e3a00001          MOV      r0,#1
00188c  ebfffffe          BL       GetBatteryBurninTestCounter
001890  e58d0038          STR      r0,[sp,#0x38]
;;;759        errorCount = GetBatteryBurninTestErrorCounter(BATTERY_INDEX_1);
001894  e3a00001          MOV      r0,#1
001898  ebfffffe          BL       GetBatteryBurninTestErrorCounter
00189c  e58d0034          STR      r0,[sp,#0x34]
;;;760        sprintf(stringBuffer, "08.Battery 2: Total=%d, Error=%d, SuccessRate=%.2f, LastADCValue=%d\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount), GetBatteryLastADCValue(BATTERY_INDEX_1));
0018a0  e3a00001          MOV      r0,#1
0018a4  ebfffffe          BL       GetBatteryLastADCValue
0018a8  e58d0024          STR      r0,[sp,#0x24]
0018ac  e59d0038          LDR      r0,[sp,#0x38]
0018b0  e59d1034          LDR      r1,[sp,#0x34]
0018b4  ebfffffe          BL       calcSuccessRate
0018b8  e58d0014          STR      r0,[sp,#0x14]
0018bc  ebfffffe          BL       __aeabi_f2d
0018c0  e1cd01f8          STRD     r0,r1,[sp,#0x18]
0018c4  e59d0024          LDR      r0,[sp,#0x24]
0018c8  e58d0008          STR      r0,[sp,#8]
0018cc  e1cd01d8          LDRD     r0,r1,[sp,#0x18]
0018d0  e1cd00f0          STRD     r0,r1,[sp,#0]
0018d4  e59f12b8          LDR      r1,|L1.7060|
0018d8  e59d2038          LDR      r2,[sp,#0x38]
0018dc  e59d3034          LDR      r3,[sp,#0x34]
0018e0  e28d003c          ADD      r0,sp,#0x3c
0018e4  ebfffffe          BL       __2sprintf
;;;761        strcat(burninTestReportBuffer, stringBuffer);
0018e8  e28d103c          ADD      r1,sp,#0x3c
0018ec  e51f03d4          LDR      r0,|L1.5408|
0018f0  ebfffffe          BL       strcat
;;;762        
;;;763        //Solar Battery
;;;764        totalCount = GetBatteryBurninTestCounter(BATTERY_INDEX_SOLAR);
0018f4  e3a00002          MOV      r0,#2
0018f8  ebfffffe          BL       GetBatteryBurninTestCounter
0018fc  e58d0038          STR      r0,[sp,#0x38]
;;;765        errorCount = GetBatteryBurninTestErrorCounter(BATTERY_INDEX_SOLAR);
001900  e3a00002          MOV      r0,#2
001904  ebfffffe          BL       GetBatteryBurninTestErrorCounter
001908  e58d0034          STR      r0,[sp,#0x34]
;;;766        sprintf(stringBuffer, "09.Solar Battery: Total=%d, Error=%d, SuccessRate=%.2f, LastADCValue=%d\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount), GetBatteryLastADCValue(BATTERY_INDEX_SOLAR));
00190c  e3a00002          MOV      r0,#2
001910  ebfffffe          BL       GetBatteryLastADCValue
001914  e58d0024          STR      r0,[sp,#0x24]
001918  e59d0038          LDR      r0,[sp,#0x38]
00191c  e59d1034          LDR      r1,[sp,#0x34]
001920  ebfffffe          BL       calcSuccessRate
001924  e58d0014          STR      r0,[sp,#0x14]
001928  ebfffffe          BL       __aeabi_f2d
00192c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
001930  e59d0024          LDR      r0,[sp,#0x24]
001934  e58d0008          STR      r0,[sp,#8]
001938  e59d0018          LDR      r0,[sp,#0x18]
00193c  e1cd00f0          STRD     r0,r1,[sp,#0]
001940  e59f1250          LDR      r1,|L1.7064|
001944  e59d2038          LDR      r2,[sp,#0x38]
001948  e59d3034          LDR      r3,[sp,#0x34]
00194c  e28d003c          ADD      r0,sp,#0x3c
001950  ebfffffe          BL       __2sprintf
;;;767        strcat(burninTestReportBuffer, stringBuffer);
001954  e28d103c          ADD      r1,sp,#0x3c
001958  e51f0440          LDR      r0,|L1.5408|
00195c  ebfffffe          BL       strcat
;;;768        
;;;769        //Touch IC (NT066E)
;;;770        totalCount = GetNT066EBurninTestCounter();
001960  ebfffffe          BL       GetNT066EBurninTestCounter
001964  e58d0038          STR      r0,[sp,#0x38]
;;;771        errorCount = GetNT066EBurninTestErrorCounter();
001968  ebfffffe          BL       GetNT066EBurninTestErrorCounter
00196c  e58d0034          STR      r0,[sp,#0x34]
;;;772        sprintf(stringBuffer, "10.Touch IC(NT066E): Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001970  e59d0038          LDR      r0,[sp,#0x38]
001974  e59d1034          LDR      r1,[sp,#0x34]
001978  ebfffffe          BL       calcSuccessRate
00197c  e58d001c          STR      r0,[sp,#0x1c]
001980  ebfffffe          BL       __aeabi_f2d
001984  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001988  e1a01000          MOV      r1,r0
00198c  e59d0024          LDR      r0,[sp,#0x24]
001990  e58d0004          STR      r0,[sp,#4]
001994  e58d1000          STR      r1,[sp,#0]
001998  e28f1f7f          ADR      r1,|L1.7068|
00199c  e59d2038          LDR      r2,[sp,#0x38]
0019a0  e59d3034          LDR      r3,[sp,#0x34]
0019a4  e28d003c          ADD      r0,sp,#0x3c
0019a8  ebfffffe          BL       __2sprintf
;;;773        strcat(burninTestReportBuffer, stringBuffer);
0019ac  e28d103c          ADD      r1,sp,#0x3c
0019b0  e51f0498          LDR      r0,|L1.5408|
0019b4  ebfffffe          BL       strcat
;;;774        
;;;775        //Modem AT Command
;;;776        totalCount = GetModemATBurninTestCounter();
0019b8  ebfffffe          BL       GetModemATBurninTestCounter
0019bc  e58d0038          STR      r0,[sp,#0x38]
;;;777        errorCount = GetModemATBurninTestErrorCounter();
0019c0  ebfffffe          BL       GetModemATBurninTestErrorCounter
0019c4  e58d0034          STR      r0,[sp,#0x34]
;;;778        sprintf(stringBuffer, "11.Modem AT Command: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
0019c8  e59d0038          LDR      r0,[sp,#0x38]
0019cc  e59d1034          LDR      r1,[sp,#0x34]
0019d0  ebfffffe          BL       calcSuccessRate
0019d4  e58d001c          STR      r0,[sp,#0x1c]
0019d8  ebfffffe          BL       __aeabi_f2d
0019dc  e1cd02f0          STRD     r0,r1,[sp,#0x20]
0019e0  e1a01000          MOV      r1,r0
0019e4  e59d0024          LDR      r0,[sp,#0x24]
0019e8  e58d0004          STR      r0,[sp,#4]
0019ec  e58d1000          STR      r1,[sp,#0]
0019f0  e28f1e1e          ADR      r1,|L1.7128|
0019f4  e59d2038          LDR      r2,[sp,#0x38]
0019f8  e59d3034          LDR      r3,[sp,#0x34]
0019fc  e28d003c          ADD      r0,sp,#0x3c
001a00  ebfffffe          BL       __2sprintf
;;;779        strcat(burninTestReportBuffer, stringBuffer);
001a04  e28d103c          ADD      r1,sp,#0x3c
001a08  e51f04f0          LDR      r0,|L1.5408|
001a0c  ebfffffe          BL       strcat
;;;780        
;;;781        //Modem FTP Command (Upload Test Report)
;;;782        totalCount = GetModemFTPBurninTestCounter();
001a10  ebfffffe          BL       GetModemFTPBurninTestCounter
001a14  e58d0038          STR      r0,[sp,#0x38]
;;;783        errorCount = GetModemFTPBurninTestErrorCounter() + GetModemFileBurninTestErrorCounter() + GetModemDialupBurninTestErrorCounter();
001a18  ebfffffe          BL       GetModemFTPBurninTestErrorCounter
001a1c  e1a04000          MOV      r4,r0
001a20  ebfffffe          BL       GetModemFileBurninTestErrorCounter
001a24  e0844000          ADD      r4,r4,r0
001a28  ebfffffe          BL       GetModemDialupBurninTestErrorCounter
001a2c  e0800004          ADD      r0,r0,r4
001a30  e58d0034          STR      r0,[sp,#0x34]
;;;784        sprintf(stringBuffer, "12.Modem FTP Command: Total=%d, GetFileError=%d, DialupError=%d, FtpError=%d, SuccessRate=%.2f\r\n", totalCount,
001a34  e59d0038          LDR      r0,[sp,#0x38]
001a38  e59d1034          LDR      r1,[sp,#0x34]
001a3c  ebfffffe          BL       calcSuccessRate
001a40  e58d0010          STR      r0,[sp,#0x10]
001a44  ebfffffe          BL       __aeabi_f2d
001a48  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001a4c  ebfffffe          BL       GetModemFTPBurninTestErrorCounter
001a50  e58d001c          STR      r0,[sp,#0x1c]
001a54  ebfffffe          BL       GetModemDialupBurninTestErrorCounter
001a58  e58d0018          STR      r0,[sp,#0x18]
001a5c  ebfffffe          BL       GetModemFileBurninTestErrorCounter
001a60  e58d0014          STR      r0,[sp,#0x14]
001a64  e1cd02d0          LDRD     r0,r1,[sp,#0x20]
001a68  e1cd00f8          STRD     r0,r1,[sp,#8]
001a6c  e1cd01d8          LDRD     r0,r1,[sp,#0x18]
001a70  e1cd00f0          STRD     r0,r1,[sp,#0]
001a74  e59f1198          LDR      r1,|L1.7188|
001a78  e59d2038          LDR      r2,[sp,#0x38]
001a7c  e59d3014          LDR      r3,[sp,#0x14]
001a80  e28d003c          ADD      r0,sp,#0x3c
001a84  ebfffffe          BL       __2sprintf
;;;785                GetModemFileBurninTestErrorCounter(), GetModemDialupBurninTestErrorCounter(), GetModemFTPBurninTestErrorCounter(), calcSuccessRate(totalCount, errorCount));
;;;786        strcat(burninTestReportBuffer, stringBuffer);
001a88  e28d103c          ADD      r1,sp,#0x3c
001a8c  e51f0574          LDR      r0,|L1.5408|
001a90  ebfffffe          BL       strcat
;;;787        
;;;788        //SmartCard (SAM) Slot
;;;789        totalCount = GetSmartCardBurninTestCounter();
001a94  ebfffffe          BL       GetSmartCardBurninTestCounter
001a98  e58d0038          STR      r0,[sp,#0x38]
;;;790        errorCount = GetSmartCardBurninTestErrorCounter();
001a9c  ebfffffe          BL       GetSmartCardBurninTestErrorCounter
001aa0  e58d0034          STR      r0,[sp,#0x34]
;;;791        sprintf(stringBuffer, "13.SmartCard (SAM) Slot: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001aa4  e59d0038          LDR      r0,[sp,#0x38]
001aa8  e59d1034          LDR      r1,[sp,#0x34]
001aac  ebfffffe          BL       calcSuccessRate
001ab0  e58d001c          STR      r0,[sp,#0x1c]
001ab4  ebfffffe          BL       __aeabi_f2d
001ab8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001abc  e1a01000          MOV      r1,r0
001ac0  e59d0024          LDR      r0,[sp,#0x24]
001ac4  e58d0004          STR      r0,[sp,#4]
001ac8  e58d1000          STR      r1,[sp,#0]
001acc  e28f1f51          ADR      r1,|L1.7192|
001ad0  e59d2038          LDR      r2,[sp,#0x38]
001ad4  e59d3034          LDR      r3,[sp,#0x34]
001ad8  e28d003c          ADD      r0,sp,#0x3c
001adc  ebfffffe          BL       __2sprintf
;;;792        strcat(burninTestReportBuffer, stringBuffer);
001ae0  e28d103c          ADD      r1,sp,#0x3c
001ae4  e51f05cc          LDR      r0,|L1.5408|
001ae8  ebfffffe          BL       strcat
;;;793        
;;;794        //Contactless Card Reader
;;;795        totalCount = GetCardReaderBurninTestCounter();
001aec  ebfffffe          BL       GetCardReaderBurninTestCounter
001af0  ea000058          B        |L1.7256|
                  |L1.6900|
001af4  30342e52          DCB      "04.Radar 2: Total=%d, Error=%d, SuccessRate=%.2f\r\n",0
001af8  61646172
001afc  20323a20
001b00  546f7461
001b04  6c3d2564
001b08  2c204572
001b0c  726f723d
001b10  25642c20
001b14  53756363
001b18  65737352
001b1c  6174653d
001b20  252e3266
001b24  0d0a00  
001b27  00                DCB      0
                  |L1.6952|
001b28  30352e4c          DCB      "05.Lidar 1: Total=%d, Error=%d, SuccessRate=%.2f\r\n",0
001b2c  69646172
001b30  20313a20
001b34  546f7461
001b38  6c3d2564
001b3c  2c204572
001b40  726f723d
001b44  25642c20
001b48  53756363
001b4c  65737352
001b50  6174653d
001b54  252e3266
001b58  0d0a00  
001b5b  00                DCB      0
                  |L1.7004|
001b5c  30362e4c          DCB      "06.Lidar 2: Total=%d, Error=%d, SuccessRate=%.2f\r\n",0
001b60  69646172
001b64  20323a20
001b68  546f7461
001b6c  6c3d2564
001b70  2c204572
001b74  726f723d
001b78  25642c20
001b7c  53756363
001b80  65737352
001b84  6174653d
001b88  252e3266
001b8c  0d0a00  
001b8f  00                DCB      0
                  |L1.7056|
                          DCD      ||.constdata||+0x64
                  |L1.7060|
                          DCD      ||.constdata||+0xac
                  |L1.7064|
                          DCD      ||.constdata||+0xf4
                  |L1.7068|
001b9c  31302e54          DCB      "10.Touch IC(NT066E): Total=%d, Error=%d, SuccessRate=%."
001ba0  6f756368
001ba4  20494328
001ba8  4e543036
001bac  3645293a
001bb0  20546f74
001bb4  616c3d25
001bb8  642c2045
001bbc  72726f72
001bc0  3d25642c
001bc4  20537563
001bc8  63657373
001bcc  52617465
001bd0  3d252e  
001bd3  32660d0a          DCB      "2f\r\n",0
001bd7  00      
                  |L1.7128|
001bd8  31312e4d          DCB      "11.Modem AT Command: Total=%d, Error=%d, SuccessRate=%."
001bdc  6f64656d
001be0  20415420
001be4  436f6d6d
001be8  616e643a
001bec  20546f74
001bf0  616c3d25
001bf4  642c2045
001bf8  72726f72
001bfc  3d25642c
001c00  20537563
001c04  63657373
001c08  52617465
001c0c  3d252e  
001c0f  32660d0a          DCB      "2f\r\n",0
001c13  00      
                  |L1.7188|
                          DCD      ||.constdata||+0x140
                  |L1.7192|
001c18  31332e53          DCB      "13.SmartCard (SAM) Slot: Total=%d, Error=%d, SuccessRat"
001c1c  6d617274
001c20  43617264
001c24  20285341
001c28  4d292053
001c2c  6c6f743a
001c30  20546f74
001c34  616c3d25
001c38  642c2045
001c3c  72726f72
001c40  3d25642c
001c44  20537563
001c48  63657373
001c4c  526174  
001c4f  653d252e          DCB      "e=%.2f\r\n",0
001c53  32660d0a
001c57  00      
                  |L1.7256|
001c58  e58d0038          STR      r0,[sp,#0x38]
;;;796        errorCount = GetCardReaderBurninTestErrorCounter();
001c5c  ebfffffe          BL       GetCardReaderBurninTestErrorCounter
001c60  e58d0034          STR      r0,[sp,#0x34]
;;;797        sprintf(stringBuffer, "14.Contactless Card Reader: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001c64  e59d0038          LDR      r0,[sp,#0x38]
001c68  e59d1034          LDR      r1,[sp,#0x34]
001c6c  ebfffffe          BL       calcSuccessRate
001c70  e58d001c          STR      r0,[sp,#0x1c]
001c74  ebfffffe          BL       __aeabi_f2d
001c78  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001c7c  e1cd00f0          STRD     r0,r1,[sp,#0]
001c80  e59f12f8          LDR      r1,|L1.8064|
001c84  e59d2038          LDR      r2,[sp,#0x38]
001c88  e59d3034          LDR      r3,[sp,#0x34]
001c8c  e28d003c          ADD      r0,sp,#0x3c
001c90  ebfffffe          BL       __2sprintf
;;;798        strcat(burninTestReportBuffer, stringBuffer);
001c94  e28d103c          ADD      r1,sp,#0x3c
001c98  e51f0780          LDR      r0,|L1.5408|
001c9c  ebfffffe          BL       strcat
;;;799        
;;;800        //Credit Card Reader
;;;801        totalCount = GetCreditReaderBurninTestCounter();
001ca0  ebfffffe          BL       GetCreditReaderBurninTestCounter
001ca4  e58d0038          STR      r0,[sp,#0x38]
;;;802        errorCount = GetCreditReaderBurninTestErrorCounter();
001ca8  ebfffffe          BL       GetCreditReaderBurninTestErrorCounter
001cac  e58d0034          STR      r0,[sp,#0x34]
;;;803        sprintf(stringBuffer, "15.Credit Card Reader: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001cb0  e59d0038          LDR      r0,[sp,#0x38]
001cb4  e59d1034          LDR      r1,[sp,#0x34]
001cb8  ebfffffe          BL       calcSuccessRate
001cbc  e58d001c          STR      r0,[sp,#0x1c]
001cc0  ebfffffe          BL       __aeabi_f2d
001cc4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001cc8  e1a01000          MOV      r1,r0
001ccc  e59d0024          LDR      r0,[sp,#0x24]
001cd0  e58d0004          STR      r0,[sp,#4]
001cd4  e58d1000          STR      r1,[sp,#0]
001cd8  e28f1fa9          ADR      r1,|L1.8068|
001cdc  e59d2038          LDR      r2,[sp,#0x38]
001ce0  e59d3034          LDR      r3,[sp,#0x34]
001ce4  e28d003c          ADD      r0,sp,#0x3c
001ce8  ebfffffe          BL       __2sprintf
;;;804        strcat(burninTestReportBuffer, stringBuffer);
001cec  e28d103c          ADD      r1,sp,#0x3c
001cf0  e51f07d8          LDR      r0,|L1.5408|
001cf4  ebfffffe          BL       strcat
;;;805        
;;;806        //SD Card Reader (Save Test Report)
;;;807        totalCount = GetSDCardBurninTestCounter();
001cf8  ebfffffe          BL       GetSDCardBurninTestCounter
001cfc  e58d0038          STR      r0,[sp,#0x38]
;;;808        errorCount = GetSDCardBurninTestErrorCounter();
001d00  ebfffffe          BL       GetSDCardBurninTestErrorCounter
001d04  e58d0034          STR      r0,[sp,#0x34]
;;;809        sprintf(stringBuffer, "16.SD Card Reader: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001d08  e59d0038          LDR      r0,[sp,#0x38]
001d0c  e59d1034          LDR      r1,[sp,#0x34]
001d10  ebfffffe          BL       calcSuccessRate
001d14  e58d001c          STR      r0,[sp,#0x1c]
001d18  ebfffffe          BL       __aeabi_f2d
001d1c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001d20  e1a01000          MOV      r1,r0
001d24  e59d0024          LDR      r0,[sp,#0x24]
001d28  e58d0004          STR      r0,[sp,#4]
001d2c  e58d1000          STR      r1,[sp,#0]
001d30  e28f1fa3          ADR      r1,|L1.8132|
001d34  e59d2038          LDR      r2,[sp,#0x38]
001d38  e59d3034          LDR      r3,[sp,#0x34]
001d3c  e28d003c          ADD      r0,sp,#0x3c
001d40  ebfffffe          BL       __2sprintf
;;;810        strcat(burninTestReportBuffer, stringBuffer);
001d44  e28d103c          ADD      r1,sp,#0x3c
001d48  e51f0830          LDR      r0,|L1.5408|
001d4c  ebfffffe          BL       strcat
;;;811        
;;;812        //SPI NAND Flash 1
;;;813        totalCount = GetNandFlashBurninTestCounter(FLASH_INDEX_0);
001d50  e3a00000          MOV      r0,#0
001d54  ebfffffe          BL       GetNandFlashBurninTestCounter
001d58  e58d0038          STR      r0,[sp,#0x38]
;;;814        errorCount = GetNandFlashBurninTestErrorCounter(FLASH_INDEX_0);
001d5c  e3a00000          MOV      r0,#0
001d60  ebfffffe          BL       GetNandFlashBurninTestErrorCounter
001d64  e58d0034          STR      r0,[sp,#0x34]
;;;815        sprintf(stringBuffer, "17.SPI Flash 1: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001d68  e59d0038          LDR      r0,[sp,#0x38]
001d6c  e59d1034          LDR      r1,[sp,#0x34]
001d70  ebfffffe          BL       calcSuccessRate
001d74  e58d001c          STR      r0,[sp,#0x1c]
001d78  ebfffffe          BL       __aeabi_f2d
001d7c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001d80  e1cd00f0          STRD     r0,r1,[sp,#0]
001d84  e28f1f9d          ADR      r1,|L1.8192|
001d88  e59d2038          LDR      r2,[sp,#0x38]
001d8c  e59d3034          LDR      r3,[sp,#0x34]
001d90  e28d003c          ADD      r0,sp,#0x3c
001d94  ebfffffe          BL       __2sprintf
;;;816        strcat(burninTestReportBuffer, stringBuffer);
001d98  e28d103c          ADD      r1,sp,#0x3c
001d9c  e51f0884          LDR      r0,|L1.5408|
001da0  ebfffffe          BL       strcat
;;;817        
;;;818        //SPI NAND Flash 2
;;;819        totalCount = GetNandFlashBurninTestCounter(FLASH_INDEX_1);
001da4  e3a00001          MOV      r0,#1
001da8  ebfffffe          BL       GetNandFlashBurninTestCounter
001dac  e58d0038          STR      r0,[sp,#0x38]
;;;820        errorCount = GetNandFlashBurninTestErrorCounter(FLASH_INDEX_1);
001db0  e3a00001          MOV      r0,#1
001db4  ebfffffe          BL       GetNandFlashBurninTestErrorCounter
001db8  e58d0034          STR      r0,[sp,#0x34]
;;;821        sprintf(stringBuffer, "18.SPI Flash 2: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001dbc  e59d0038          LDR      r0,[sp,#0x38]
001dc0  e59d1034          LDR      r1,[sp,#0x34]
001dc4  ebfffffe          BL       calcSuccessRate
001dc8  e58d001c          STR      r0,[sp,#0x1c]
001dcc  ebfffffe          BL       __aeabi_f2d
001dd0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001dd4  e1a01000          MOV      r1,r0
001dd8  e59d0024          LDR      r0,[sp,#0x24]
001ddc  e58d0004          STR      r0,[sp,#4]
001de0  e58d1000          STR      r1,[sp,#0]
001de4  e28f1f93          ADR      r1,|L1.8248|
001de8  e59d2038          LDR      r2,[sp,#0x38]
001dec  e59d3034          LDR      r3,[sp,#0x34]
001df0  e28d003c          ADD      r0,sp,#0x3c
001df4  ebfffffe          BL       __2sprintf
;;;822        strcat(burninTestReportBuffer, stringBuffer);
001df8  e28d103c          ADD      r1,sp,#0x3c
001dfc  e51f08e4          LDR      r0,|L1.5408|
001e00  ebfffffe          BL       strcat
;;;823        
;;;824        //SPI NAND Flash 3
;;;825        totalCount = GetNandFlashBurninTestCounter(FLASH_INDEX_2);
001e04  e3a00002          MOV      r0,#2
001e08  ebfffffe          BL       GetNandFlashBurninTestCounter
001e0c  e58d0038          STR      r0,[sp,#0x38]
;;;826        errorCount = GetNandFlashBurninTestErrorCounter(FLASH_INDEX_2);
001e10  e3a00002          MOV      r0,#2
001e14  ebfffffe          BL       GetNandFlashBurninTestErrorCounter
001e18  e58d0034          STR      r0,[sp,#0x34]
;;;827        sprintf(stringBuffer, "19.SPI Flash 3: Total=%d, Error=%d, SuccessRate=%.2f\r\n", totalCount, errorCount, calcSuccessRate(totalCount, errorCount));
001e1c  e59d0038          LDR      r0,[sp,#0x38]
001e20  e59d1034          LDR      r1,[sp,#0x34]
001e24  ebfffffe          BL       calcSuccessRate
001e28  e58d001c          STR      r0,[sp,#0x1c]
001e2c  ebfffffe          BL       __aeabi_f2d
001e30  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001e34  e1a01000          MOV      r1,r0
001e38  e59d0024          LDR      r0,[sp,#0x24]
001e3c  e58d0004          STR      r0,[sp,#4]
001e40  e58d1000          STR      r1,[sp,#0]
001e44  e28f1f89          ADR      r1,|L1.8304|
001e48  e59d2038          LDR      r2,[sp,#0x38]
001e4c  e59d3034          LDR      r3,[sp,#0x34]
001e50  e28d003c          ADD      r0,sp,#0x3c
001e54  ebfffffe          BL       __2sprintf
;;;828        strcat(burninTestReportBuffer, stringBuffer);
001e58  e28d103c          ADD      r1,sp,#0x3c
001e5c  e51f0944          LDR      r0,|L1.5408|
001e60  ebfffffe          BL       strcat
;;;829        
;;;830        //Camera 1
;;;831        //if (GPIO_ReadBit(DIP_CARD_READER_SELECT_PORT, DIP_CARD_READER_SELECT_PIN))
;;;832        //{
;;;833            totalCount = GetCameraBurninTestCounter(UVCAMERA_INDEX_0);
001e64  e3a00000          MOV      r0,#0
001e68  ebfffffe          BL       GetCameraBurninTestCounter
001e6c  e58d0038          STR      r0,[sp,#0x38]
;;;834            errorCount = GetCameraBurninPhotoErrorCounter(UVCAMERA_INDEX_0) + GetCameraBurninFileErrorCounter(UVCAMERA_INDEX_0);
001e70  e3a00000          MOV      r0,#0
001e74  ebfffffe          BL       GetCameraBurninPhotoErrorCounter
001e78  e1a04000          MOV      r4,r0
001e7c  e3a00000          MOV      r0,#0
001e80  ebfffffe          BL       GetCameraBurninFileErrorCounter
001e84  e0800004          ADD      r0,r0,r4
001e88  e58d0034          STR      r0,[sp,#0x34]
;;;835            sprintf(stringBuffer, "20.Camera 1: Total=%d, PhotoError=%d, FileError=%d, SuccessRate=%.2f\r\n", totalCount,
001e8c  e59d0038          LDR      r0,[sp,#0x38]
001e90  e59d1034          LDR      r1,[sp,#0x34]
001e94  ebfffffe          BL       calcSuccessRate
001e98  e58d0014          STR      r0,[sp,#0x14]
001e9c  ebfffffe          BL       __aeabi_f2d
001ea0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001ea4  e3a00000          MOV      r0,#0
001ea8  ebfffffe          BL       GetCameraBurninFileErrorCounter
001eac  e58d001c          STR      r0,[sp,#0x1c]
001eb0  e3a00000          MOV      r0,#0
001eb4  ebfffffe          BL       GetCameraBurninPhotoErrorCounter
001eb8  e58d0018          STR      r0,[sp,#0x18]
001ebc  e1cd02d0          LDRD     r0,r1,[sp,#0x20]
001ec0  e1cd00f8          STRD     r0,r1,[sp,#8]
001ec4  e59d001c          LDR      r0,[sp,#0x1c]
001ec8  e58d0000          STR      r0,[sp,#0]
001ecc  e59f11d4          LDR      r1,|L1.8360|
001ed0  e59d2038          LDR      r2,[sp,#0x38]
001ed4  e59d3018          LDR      r3,[sp,#0x18]
001ed8  e28d003c          ADD      r0,sp,#0x3c
001edc  ebfffffe          BL       __2sprintf
;;;836                    GetCameraBurninPhotoErrorCounter(UVCAMERA_INDEX_0), GetCameraBurninFileErrorCounter(UVCAMERA_INDEX_0), calcSuccessRate(totalCount, errorCount));
;;;837            strcat(burninTestReportBuffer, stringBuffer);
001ee0  e28d103c          ADD      r1,sp,#0x3c
001ee4  e51f09cc          LDR      r0,|L1.5408|
001ee8  ebfffffe          BL       strcat
;;;838        //}
;;;839        
;;;840        //Camera 2
;;;841        //if (GPIO_ReadBit(DIP_CARD_READER_SELECT_PORT, DIP_CARD_READER_SELECT_PIN))
;;;842        //{
;;;843            totalCount = GetCameraBurninTestCounter(UVCAMERA_INDEX_1);
001eec  e3a00001          MOV      r0,#1
001ef0  ebfffffe          BL       GetCameraBurninTestCounter
001ef4  e58d0038          STR      r0,[sp,#0x38]
;;;844            errorCount = GetCameraBurninPhotoErrorCounter(UVCAMERA_INDEX_1) + GetCameraBurninFileErrorCounter(UVCAMERA_INDEX_1);
001ef8  e3a00001          MOV      r0,#1
001efc  ebfffffe          BL       GetCameraBurninPhotoErrorCounter
001f00  e1a04000          MOV      r4,r0
001f04  e3a00001          MOV      r0,#1
001f08  ebfffffe          BL       GetCameraBurninFileErrorCounter
001f0c  e0800004          ADD      r0,r0,r4
001f10  e58d0034          STR      r0,[sp,#0x34]
;;;845            sprintf(stringBuffer, "21.Camera 2: Total=%d, PhotoError=%d, FileError=%d, SuccessRate=%.2f\r\n", totalCount,
001f14  e59d0038          LDR      r0,[sp,#0x38]
001f18  e59d1034          LDR      r1,[sp,#0x34]
001f1c  ebfffffe          BL       calcSuccessRate
001f20  e58d0014          STR      r0,[sp,#0x14]
001f24  ebfffffe          BL       __aeabi_f2d
001f28  e1cd02f0          STRD     r0,r1,[sp,#0x20]
001f2c  e3a00001          MOV      r0,#1
001f30  ebfffffe          BL       GetCameraBurninFileErrorCounter
001f34  e58d001c          STR      r0,[sp,#0x1c]
001f38  e3a00001          MOV      r0,#1
001f3c  ebfffffe          BL       GetCameraBurninPhotoErrorCounter
001f40  e58d0018          STR      r0,[sp,#0x18]
001f44  e1cd02d0          LDRD     r0,r1,[sp,#0x20]
001f48  e1cd00f8          STRD     r0,r1,[sp,#8]
001f4c  e59d001c          LDR      r0,[sp,#0x1c]
001f50  e58d0000          STR      r0,[sp,#0]
001f54  e59f1150          LDR      r1,|L1.8364|
001f58  e59d2038          LDR      r2,[sp,#0x38]
001f5c  e59d3018          LDR      r3,[sp,#0x18]
001f60  e28d003c          ADD      r0,sp,#0x3c
001f64  ebfffffe          BL       __2sprintf
;;;846                    GetCameraBurninPhotoErrorCounter(UVCAMERA_INDEX_1), GetCameraBurninFileErrorCounter(UVCAMERA_INDEX_1), calcSuccessRate(totalCount, errorCount));
;;;847            strcat(burninTestReportBuffer, stringBuffer);
001f68  e28d103c          ADD      r1,sp,#0x3c
001f6c  e51f0a54          LDR      r0,|L1.5408|
001f70  ebfffffe          BL       strcat
;;;848        //}
;;;849        
;;;850        //terninalPrintf(burninTestReportBuffer);
;;;851        return burninTestReportBuffer;
001f74  e51f0a5c          LDR      r0,|L1.5408|
001f78  e28ddd05          ADD      sp,sp,#0x140
;;;852    }
001f7c  e8bd8010          POP      {r4,pc}
                  |L1.8064|
                          DCD      ||.constdata||+0x1a4
                  |L1.8068|
001f84  31352e43          DCB      "15.Credit Card Reader: Total=%d, Error=%d, SuccessRate="
001f88  72656469
001f8c  74204361
001f90  72642052
001f94  65616465
001f98  723a2054
001f9c  6f74616c
001fa0  3d25642c
001fa4  20457272
001fa8  6f723d25
001fac  642c2053
001fb0  75636365
001fb4  73735261
001fb8  74653d  
001fbb  252e3266          DCB      "%.2f\r\n",0
001fbf  0d0a00  
001fc2  00                DCB      0
001fc3  00                DCB      0
                  |L1.8132|
001fc4  31362e53          DCB      "16.SD Card Reader: Total=%d, Error=%d, SuccessRate=%.2f"
001fc8  44204361
001fcc  72642052
001fd0  65616465
001fd4  723a2054
001fd8  6f74616c
001fdc  3d25642c
001fe0  20457272
001fe4  6f723d25
001fe8  642c2053
001fec  75636365
001ff0  73735261
001ff4  74653d25
001ff8  2e3266  
001ffb  0d0a00            DCB      "\r\n",0
001ffe  00                DCB      0
001fff  00                DCB      0
                  |L1.8192|
002000  31372e53          DCB      "17.SPI Flash 1: Total=%d, Error=%d, SuccessRate=%.2f\r\n"
002004  50492046
002008  6c617368
00200c  20313a20
002010  546f7461
002014  6c3d2564
002018  2c204572
00201c  726f723d
002020  25642c20
002024  53756363
002028  65737352
00202c  6174653d
002030  252e3266
002034  0d0a    
002036  00                DCB      0
002037  00                DCB      0
                  |L1.8248|
002038  31382e53          DCB      "18.SPI Flash 2: Total=%d, Error=%d, SuccessRate=%.2f\r\n"
00203c  50492046
002040  6c617368
002044  20323a20
002048  546f7461
00204c  6c3d2564
002050  2c204572
002054  726f723d
002058  25642c20
00205c  53756363
002060  65737352
002064  6174653d
002068  252e3266
00206c  0d0a    
00206e  00                DCB      0
00206f  00                DCB      0
                  |L1.8304|
002070  31392e53          DCB      "19.SPI Flash 3: Total=%d, Error=%d, SuccessRate=%.2f\r\n"
002074  50492046
002078  6c617368
00207c  20333a20
002080  546f7461
002084  6c3d2564
002088  2c204572
00208c  726f723d
002090  25642c20
002094  53756363
002098  65737352
00209c  6174653d
0020a0  252e3266
0020a4  0d0a    
0020a6  00                DCB      0
0020a7  00                DCB      0
                  |L1.8360|
                          DCD      ||.constdata||+0x1e8
                  |L1.8364|
                          DCD      ||.constdata||+0x230
                          ENDP

                  EnabledBurninTestMode PROC
;;;861    
;;;862    BOOL EnabledBurninTestMode(void)
0020b0  e59f0024          LDR      r0,|L1.8412|
;;;863    {
;;;864        return isEnabledBurninTestMode;
0020b4  e5d00000          LDRB     r0,[r0,#0]  ; isEnabledBurninTestMode
;;;865    }
0020b8  e12fff1e          BX       lr
;;;866    
                          ENDP

                  GetDeviceID PROC
;;;901    
;;;902    uint32_t GetDeviceID(void)
0020bc  e59f001c          LDR      r0,|L1.8416|
;;;903    {
;;;904        return deviceID;
0020c0  e5900000          LDR      r0,[r0,#0]  ; deviceID
;;;905    }
0020c4  e12fff1e          BX       lr
;;;906    
                          ENDP

                  ResetRuntimefun PROC
;;;911    
;;;912    void ResetRuntimefun(void)
0020c8  e92d4010          PUSH     {r4,lr}
;;;913    {
;;;914        startUTCTime = GetCurrentUTCTime();
0020cc  ebfffffe          BL       GetCurrentUTCTime
0020d0  e59f100c          LDR      r1,|L1.8420|
0020d4  e5810000          STR      r0,[r1,#0]  ; startUTCTime
;;;915    }
0020d8  e8bd8010          POP      {r4,pc}
;;;916    
                          ENDP

                  |L1.8412|
                          DCD      isEnabledBurninTestMode
                  |L1.8416|
                          DCD      deviceID
                  |L1.8420|
                          DCD      startUTCTime

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  batteryBurninCounter
                          %        12
                  batteryBurninErrorCounter
                          %        12
                  batteryLastADCValue
                          %        12
                  nandFlashBurninCounter
                          %        12
                  nandFlashBurninErrorCounter
                          %        12
                  startRTCTime
                          %        48
                  burninTestReportBuffer
                          %        4096
                  LEDVerStr
                          %        50
                  ReaderVerBuf
                          %        64
                  preadFWVersion
                          %        17
                  preadLUTVersion
                          %        17
                  SIMtempchr
                          %        100
                  tempchr
                          %        100
                  tempRadar1VersionString
                          %        50
                  tempRadar2VersionString
                          %        50
                  manufactureDeviceID
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  203e3e20          DCB      0x20,0x3e,0x3e,0x20
000004  44657669          DCB      0x44,0x65,0x76,0x69
000008  63654944          DCB      0x63,0x65,0x49,0x44
00000c  203d2025          DCB      0x20,0x3d,0x20,0x25
000010  3038642c          DCB      0x30,0x38,0x64,0x2c
000014  206d616e          DCB      0x20,0x6d,0x61,0x6e
000018  75666163          DCB      0x75,0x66,0x61,0x63
00001c  74757265          DCB      0x74,0x75,0x72,0x65
000020  44657669          DCB      0x44,0x65,0x76,0x69
000024  63654944          DCB      0x63,0x65,0x49,0x44
000028  203d2025          DCB      0x20,0x3d,0x20,0x25
00002c  732c2073          DCB      0x73,0x2c,0x20,0x73
000030  70656369          DCB      0x70,0x65,0x63,0x69
000034  66696342          DCB      0x66,0x69,0x63,0x42
000038  75726e69          DCB      0x75,0x72,0x6e,0x69
00003c  6e54696d          DCB      0x6e,0x54,0x69,0x6d
000040  653a2564          DCB      0x65,0x3a,0x25,0x64
000044  20286672          DCB      0x20,0x28,0x66,0x72
000048  6f6d2053          DCB      0x6f,0x6d,0x20,0x53
00004c  466c6173          DCB      0x46,0x6c,0x61,0x73
000050  68205265          DCB      0x68,0x20,0x52,0x65
000054  636f7264          DCB      0x63,0x6f,0x72,0x64
000058  29207265          DCB      0x29,0x20,0x72,0x65
00005c  6164204f          DCB      0x61,0x64,0x20,0x4f
000060  4b0a0000          DCB      0x4b,0x0a,0x00,0x00
000064  30372e42          DCB      0x30,0x37,0x2e,0x42
000068  61747465          DCB      0x61,0x74,0x74,0x65
00006c  72792031          DCB      0x72,0x79,0x20,0x31
000070  3a20546f          DCB      0x3a,0x20,0x54,0x6f
000074  74616c3d          DCB      0x74,0x61,0x6c,0x3d
000078  25642c20          DCB      0x25,0x64,0x2c,0x20
00007c  4572726f          DCB      0x45,0x72,0x72,0x6f
000080  723d2564          DCB      0x72,0x3d,0x25,0x64
000084  2c205375          DCB      0x2c,0x20,0x53,0x75
000088  63636573          DCB      0x63,0x63,0x65,0x73
00008c  73526174          DCB      0x73,0x52,0x61,0x74
000090  653d252e          DCB      0x65,0x3d,0x25,0x2e
000094  32662c20          DCB      0x32,0x66,0x2c,0x20
000098  4c617374          DCB      0x4c,0x61,0x73,0x74
00009c  41444356          DCB      0x41,0x44,0x43,0x56
0000a0  616c7565          DCB      0x61,0x6c,0x75,0x65
0000a4  3d25640d          DCB      0x3d,0x25,0x64,0x0d
0000a8  0a000000          DCB      0x0a,0x00,0x00,0x00
0000ac  30382e42          DCB      0x30,0x38,0x2e,0x42
0000b0  61747465          DCB      0x61,0x74,0x74,0x65
0000b4  72792032          DCB      0x72,0x79,0x20,0x32
0000b8  3a20546f          DCB      0x3a,0x20,0x54,0x6f
0000bc  74616c3d          DCB      0x74,0x61,0x6c,0x3d
0000c0  25642c20          DCB      0x25,0x64,0x2c,0x20
0000c4  4572726f          DCB      0x45,0x72,0x72,0x6f
0000c8  723d2564          DCB      0x72,0x3d,0x25,0x64
0000cc  2c205375          DCB      0x2c,0x20,0x53,0x75
0000d0  63636573          DCB      0x63,0x63,0x65,0x73
0000d4  73526174          DCB      0x73,0x52,0x61,0x74
0000d8  653d252e          DCB      0x65,0x3d,0x25,0x2e
0000dc  32662c20          DCB      0x32,0x66,0x2c,0x20
0000e0  4c617374          DCB      0x4c,0x61,0x73,0x74
0000e4  41444356          DCB      0x41,0x44,0x43,0x56
0000e8  616c7565          DCB      0x61,0x6c,0x75,0x65
0000ec  3d25640d          DCB      0x3d,0x25,0x64,0x0d
0000f0  0a000000          DCB      0x0a,0x00,0x00,0x00
0000f4  30392e53          DCB      0x30,0x39,0x2e,0x53
0000f8  6f6c6172          DCB      0x6f,0x6c,0x61,0x72
0000fc  20426174          DCB      0x20,0x42,0x61,0x74
000100  74657279          DCB      0x74,0x65,0x72,0x79
000104  3a20546f          DCB      0x3a,0x20,0x54,0x6f
000108  74616c3d          DCB      0x74,0x61,0x6c,0x3d
00010c  25642c20          DCB      0x25,0x64,0x2c,0x20
000110  4572726f          DCB      0x45,0x72,0x72,0x6f
000114  723d2564          DCB      0x72,0x3d,0x25,0x64
000118  2c205375          DCB      0x2c,0x20,0x53,0x75
00011c  63636573          DCB      0x63,0x63,0x65,0x73
000120  73526174          DCB      0x73,0x52,0x61,0x74
000124  653d252e          DCB      0x65,0x3d,0x25,0x2e
000128  32662c20          DCB      0x32,0x66,0x2c,0x20
00012c  4c617374          DCB      0x4c,0x61,0x73,0x74
000130  41444356          DCB      0x41,0x44,0x43,0x56
000134  616c7565          DCB      0x61,0x6c,0x75,0x65
000138  3d25640d          DCB      0x3d,0x25,0x64,0x0d
00013c  0a000000          DCB      0x0a,0x00,0x00,0x00
000140  31322e4d          DCB      0x31,0x32,0x2e,0x4d
000144  6f64656d          DCB      0x6f,0x64,0x65,0x6d
000148  20465450          DCB      0x20,0x46,0x54,0x50
00014c  20436f6d          DCB      0x20,0x43,0x6f,0x6d
000150  6d616e64          DCB      0x6d,0x61,0x6e,0x64
000154  3a20546f          DCB      0x3a,0x20,0x54,0x6f
000158  74616c3d          DCB      0x74,0x61,0x6c,0x3d
00015c  25642c20          DCB      0x25,0x64,0x2c,0x20
000160  47657446          DCB      0x47,0x65,0x74,0x46
000164  696c6545          DCB      0x69,0x6c,0x65,0x45
000168  72726f72          DCB      0x72,0x72,0x6f,0x72
00016c  3d25642c          DCB      0x3d,0x25,0x64,0x2c
000170  20446961          DCB      0x20,0x44,0x69,0x61
000174  6c757045          DCB      0x6c,0x75,0x70,0x45
000178  72726f72          DCB      0x72,0x72,0x6f,0x72
00017c  3d25642c          DCB      0x3d,0x25,0x64,0x2c
000180  20467470          DCB      0x20,0x46,0x74,0x70
000184  4572726f          DCB      0x45,0x72,0x72,0x6f
000188  723d2564          DCB      0x72,0x3d,0x25,0x64
00018c  2c205375          DCB      0x2c,0x20,0x53,0x75
000190  63636573          DCB      0x63,0x63,0x65,0x73
000194  73526174          DCB      0x73,0x52,0x61,0x74
000198  653d252e          DCB      0x65,0x3d,0x25,0x2e
00019c  32660d0a          DCB      0x32,0x66,0x0d,0x0a
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  31342e43          DCB      0x31,0x34,0x2e,0x43
0001a8  6f6e7461          DCB      0x6f,0x6e,0x74,0x61
0001ac  63746c65          DCB      0x63,0x74,0x6c,0x65
0001b0  73732043          DCB      0x73,0x73,0x20,0x43
0001b4  61726420          DCB      0x61,0x72,0x64,0x20
0001b8  52656164          DCB      0x52,0x65,0x61,0x64
0001bc  65723a20          DCB      0x65,0x72,0x3a,0x20
0001c0  546f7461          DCB      0x54,0x6f,0x74,0x61
0001c4  6c3d2564          DCB      0x6c,0x3d,0x25,0x64
0001c8  2c204572          DCB      0x2c,0x20,0x45,0x72
0001cc  726f723d          DCB      0x72,0x6f,0x72,0x3d
0001d0  25642c20          DCB      0x25,0x64,0x2c,0x20
0001d4  53756363          DCB      0x53,0x75,0x63,0x63
0001d8  65737352          DCB      0x65,0x73,0x73,0x52
0001dc  6174653d          DCB      0x61,0x74,0x65,0x3d
0001e0  252e3266          DCB      0x25,0x2e,0x32,0x66
0001e4  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
0001e8  32302e43          DCB      0x32,0x30,0x2e,0x43
0001ec  616d6572          DCB      0x61,0x6d,0x65,0x72
0001f0  6120313a          DCB      0x61,0x20,0x31,0x3a
0001f4  20546f74          DCB      0x20,0x54,0x6f,0x74
0001f8  616c3d25          DCB      0x61,0x6c,0x3d,0x25
0001fc  642c2050          DCB      0x64,0x2c,0x20,0x50
000200  686f746f          DCB      0x68,0x6f,0x74,0x6f
000204  4572726f          DCB      0x45,0x72,0x72,0x6f
000208  723d2564          DCB      0x72,0x3d,0x25,0x64
00020c  2c204669          DCB      0x2c,0x20,0x46,0x69
000210  6c654572          DCB      0x6c,0x65,0x45,0x72
000214  726f723d          DCB      0x72,0x6f,0x72,0x3d
000218  25642c20          DCB      0x25,0x64,0x2c,0x20
00021c  53756363          DCB      0x53,0x75,0x63,0x63
000220  65737352          DCB      0x65,0x73,0x73,0x52
000224  6174653d          DCB      0x61,0x74,0x65,0x3d
000228  252e3266          DCB      0x25,0x2e,0x32,0x66
00022c  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000230  32312e43          DCB      0x32,0x31,0x2e,0x43
000234  616d6572          DCB      0x61,0x6d,0x65,0x72
000238  6120323a          DCB      0x61,0x20,0x32,0x3a
00023c  20546f74          DCB      0x20,0x54,0x6f,0x74
000240  616c3d25          DCB      0x61,0x6c,0x3d,0x25
000244  642c2050          DCB      0x64,0x2c,0x20,0x50
000248  686f746f          DCB      0x68,0x6f,0x74,0x6f
00024c  4572726f          DCB      0x45,0x72,0x72,0x6f
000250  723d2564          DCB      0x72,0x3d,0x25,0x64
000254  2c204669          DCB      0x2c,0x20,0x46,0x69
000258  6c654572          DCB      0x6c,0x65,0x45,0x72
00025c  726f723d          DCB      0x72,0x6f,0x72,0x3d
000260  25642c20          DCB      0x25,0x64,0x2c,0x20
000264  53756363          DCB      0x53,0x75,0x63,0x63
000268  65737352          DCB      0x65,0x73,0x73,0x52
00026c  6174653d          DCB      0x61,0x74,0x65,0x3d
000270  252e3266          DCB      0x25,0x2e,0x32,0x66
000274  0d0a00            DCB      0x0d,0x0a,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  45706444          DCB      "EpdDrv",0
000004  727600  
000007  4c454444          DCB      "LEDDrv",0
00000b  727600  
00000e  42757a7a          DCB      "BuzzerDrv",0
000012  65724472
000016  7600    
000018  47554944          DCB      "GUIDrv",0
00001c  727600  
00001f  546f7563          DCB      "TouchDrv(NT066E)",0
000023  68447276
000027  284e5430
00002b  36364529
00002f  00      
000030  43617264          DCB      "CardReaderDrv",0
000034  52656164
000038  65724472
00003c  7600    
00003e  506f7765          DCB      "PowerDrv",0
000042  72447276
000046  00      
000047  466c6173          DCB      "FlashExDrv",0
00004b  68457844
00004f  727600  
000052  4d6f6465          DCB      "ModemAgentDrv",0
000056  6d416765
00005a  6e744472
00005e  7600    
000060  42617474          DCB      "BatteryDrv",0
000064  65727944
000068  727600  
00006b  53706163          DCB      "SpaceExDrv",0
00006f  65457844
000073  727600  
000076  536d6172          DCB      "SmartCardDrv",0
00007a  74436172
00007e  64447276
000082  00      
000083  46415446          DCB      "FATFS",0
000087  5300    
000089  55564361          DCB      "UVCameraDrv",0
00008d  6d657261
000091  44727600
000095  43726564          DCB      "CreditReaderDrv",0
000099  69745265
00009d  61646572
0000a1  44727600
0000a5  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  mInitFunctionList
                          DCD      ||.conststring||
                          DCD      EpdDrvInit
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x7
                          DCD      LedDrvInit
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xe
                          DCD      BuzzerDrvInit
000020  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x18
                          DCD      GUIDrvInit
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1f
                          DCD      NT066EDrvInit
000038  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      ||.conststring||+0x30
                          DCD      CardReaderInit
000044  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x3e
                          DCD      PowerDrvInit
000050  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x47
                          DCD      FlashDrvExInit
00005c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x52
                          DCD      ModemAgentInit
000068  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x60
                          DCD      BatteryDrvInit
000074  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6b
                          DCD      SpaceExDrvInit
000080  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x76
                          DCD      SmartCardTestInit
00008c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x83
                          DCD      FatfsInit
000098  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x89
                          DCD      UVCameraTestInit
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x95
                          DCD      CreditReaderDrvInit
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xa5
                          DCD      0x00000000
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
                  isEnabledBurninTestMode
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
                  specificBurninTime
                          DCD      0x00000000
                  ledBurninCounter
                          DCD      0x00000000
                  ledBurninErrorCounter
                          DCD      0x00000000
                  prepareStopBurninTest
0000d0  00                DCB      0x00
                  lastTestReportDone_SD
0000d1  00                DCB      0x00
                  lastTestReportDone_FTP
0000d2  00                DCB      0x00
                  ErrorDiableFlag
0000d3  00                DCB      0x00
                  FirstRun
0000d4  01000000          DCB      0x01,0x00,0x00,0x00
                  startUTCTime
                          DCD      0x00000000
                  deviceID
                          DCD      0x00000000
