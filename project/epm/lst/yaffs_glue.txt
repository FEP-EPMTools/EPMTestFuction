; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_glue.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_glue.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_glue.crf src\syshal\yaffs2\yaffs_glue.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  yaffs_file_type_str PROC
;;;35     
;;;36     static const char *yaffs_file_type_str(struct yaffs_stat *stat)
000000  e1a01000          MOV      r1,r0
;;;37     {
;;;38         switch (stat->st_mode & S_IFMT) {
000004  e1d100b8          LDRH     r0,[r1,#8]
000008  e2000a0f          AND      r0,r0,#0xf000
00000c  e3500901          CMP      r0,#0x4000
000010  0a000007          BEQ      |L1.52|
000014  e3500902          CMP      r0,#0x8000
000018  0a000002          BEQ      |L1.40|
00001c  e3500a0a          CMP      r0,#0xa000
000020  1a000009          BNE      |L1.76|
000024  ea000005          B        |L1.64|
                  |L1.40|
;;;39         case S_IFREG:
000028  e1a00000          MOV      r0,r0
;;;40             return "regular file";
00002c  e28f0e1a          ADR      r0,|L1.468|
                  |L1.48|
;;;41         case S_IFDIR:
;;;42             return "directory";
;;;43         case S_IFLNK:
;;;44             return "symlink";
;;;45         default:
;;;46             return "unknown";
;;;47         }
;;;48     }
000030  e12fff1e          BX       lr
                  |L1.52|
000034  e1a00000          MOV      r0,r0                 ;41
000038  e28f0f69          ADR      r0,|L1.484|
00003c  eafffffb          B        |L1.48|
                  |L1.64|
000040  e1a00000          MOV      r0,r0                 ;43
000044  e28f0f69          ADR      r0,|L1.496|
000048  eafffff8          B        |L1.48|
                  |L1.76|
00004c  e1a00000          MOV      r0,r0                 ;45
000050  e28f0e1a          ADR      r0,|L1.504|
000054  eafffff5          B        |L1.48|
;;;49     
                          ENDP

                  yaffs_error_str PROC
;;;50     const char *yaffs_error_str(void)
000058  e92d4010          PUSH     {r4,lr}
;;;51     {
;;;52         int error = yaffsfs_GetLastError();
00005c  ebfffffe          BL       yaffsfs_GetLastError
000060  e1a04000          MOV      r4,r0
;;;53     
;;;54         if (error < 0)
000064  e3540000          CMP      r4,#0
000068  aa000000          BGE      |L1.112|
;;;55             error = -error;
00006c  e2644000          RSB      r4,r4,#0
                  |L1.112|
;;;56     
;;;57         switch (error) {
000070  e3540014          CMP      r4,#0x14
000074  0a00009f          BEQ      |L1.760|
000078  ca000016          BGT      |L1.216|
00007c  e3540014          CMP      r4,#0x14
000080  308ff104          ADDCC    pc,pc,r4,LSL #2
000084  ea0000a7          B        |L1.808|
000088  ea0000a3          B        |L1.796|
00008c  ea0000a5          B        |L1.808|
000090  ea00003a          B        |L1.384|
000094  ea0000a3          B        |L1.808|
000098  ea0000a2          B        |L1.808|
00009c  ea0000a1          B        |L1.808|
0000a0  ea0000a0          B        |L1.808|
0000a4  ea00009f          B        |L1.808|
0000a8  ea00009e          B        |L1.808|
0000ac  ea00002a          B        |L1.348|
0000b0  ea00009c          B        |L1.808|
0000b4  ea00009b          B        |L1.808|
0000b8  ea000042          B        |L1.456|
0000bc  ea000029          B        |L1.360|
0000c0  ea000086          B        |L1.736|
0000c4  ea000097          B        |L1.808|
0000c8  ea000017          B        |L1.300|
0000cc  ea000086          B        |L1.748|
0000d0  ea000027          B        |L1.372|
0000d4  ea000017          B        |L1.312|
                  |L1.216|
0000d8  e354001e          CMP      r4,#0x1e
0000dc  0a00002d          BEQ      |L1.408|
0000e0  ca000008          BGT      |L1.264|
0000e4  e3540015          CMP      r4,#0x15
0000e8  0a000085          BEQ      |L1.772|
0000ec  e3540016          CMP      r4,#0x16
0000f0  0a000013          BEQ      |L1.324|
0000f4  e3540017          CMP      r4,#0x17
0000f8  0a000014          BEQ      |L1.336|
0000fc  e354001c          CMP      r4,#0x1c
000100  1a000088          BNE      |L1.808|
000104  ea000020          B        |L1.396|
                  |L1.264|
000108  e3540022          CMP      r4,#0x22
00010c  0a000024          BEQ      |L1.420|
000110  e3540024          CMP      r4,#0x24
000114  0a000028          BEQ      |L1.444|
000118  e3540027          CMP      r4,#0x27
00011c  0a000023          BEQ      |L1.432|
000120  e3540028          CMP      r4,#0x28
000124  1a00007f          BNE      |L1.808|
000128  ea000078          B        |L1.784|
                  |L1.300|
;;;58         case EBUSY:
00012c  e1a00000          MOV      r0,r0
;;;59             return "Busy";
000130  e28f00c8          ADR      r0,|L1.512|
                  |L1.308|
;;;60         case ENODEV:
;;;61             return "No such device";
;;;62         case EINVAL:
;;;63             return "Invalid parameter";
;;;64         case ENFILE:
;;;65             return "Too many open files";
;;;66         case EBADF:
;;;67             return "Bad handle";
;;;68         case EACCES:
;;;69             return "Wrong permissions";
;;;70         case EXDEV:
;;;71             return "Not on same device";
;;;72         case ENOENT:
;;;73             return "No such entry";
;;;74         case ENOSPC:
;;;75             return "Device full";
;;;76         case EROFS:
;;;77             return "Read only file system";
;;;78         case ERANGE:
;;;79             return "Range error";
;;;80         case ENOTEMPTY:
;;;81             return "Not empty";
;;;82         case ENAMETOOLONG:
;;;83             return "Name too long";
;;;84         case ENOMEM:
;;;85             return "Out of memory";
;;;86         case EFAULT:
;;;87             return "Fault";
;;;88         case EEXIST:
;;;89             return "Name exists";
;;;90         case ENOTDIR:
;;;91             return "Not a directory";
;;;92         case EISDIR:
;;;93             return "Not permitted on a directory";
;;;94         case ELOOP:
;;;95             return "Symlink loop";
;;;96         case 0:
;;;97             return "No error";
;;;98         default:
;;;99             return "Unknown error";
;;;100        }
;;;101    }
000134  e8bd8010          POP      {r4,pc}
                  |L1.312|
000138  e1a00000          MOV      r0,r0                 ;60
00013c  e28f00c4          ADR      r0,|L1.520|
000140  eafffffb          B        |L1.308|
                  |L1.324|
000144  e1a00000          MOV      r0,r0                 ;62
000148  e28f00c8          ADR      r0,|L1.536|
00014c  eafffff8          B        |L1.308|
                  |L1.336|
000150  e1a00000          MOV      r0,r0                 ;64
000154  e28f00d0          ADR      r0,|L1.556|
000158  eafffff5          B        |L1.308|
                  |L1.348|
00015c  e1a00000          MOV      r0,r0                 ;66
000160  e28f00d8          ADR      r0,|L1.576|
000164  eafffff2          B        |L1.308|
                  |L1.360|
000168  e1a00000          MOV      r0,r0                 ;68
00016c  e28f00d8          ADR      r0,|L1.588|
000170  eaffffef          B        |L1.308|
                  |L1.372|
000174  e1a00000          MOV      r0,r0                 ;70
000178  e28f00e0          ADR      r0,|L1.608|
00017c  eaffffec          B        |L1.308|
                  |L1.384|
000180  e1a00000          MOV      r0,r0                 ;72
000184  e28f00e8          ADR      r0,|L1.628|
000188  eaffffe9          B        |L1.308|
                  |L1.396|
00018c  e1a00000          MOV      r0,r0                 ;74
000190  e28f00ec          ADR      r0,|L1.644|
000194  eaffffe6          B        |L1.308|
                  |L1.408|
000198  e1a00000          MOV      r0,r0                 ;76
00019c  e28f00ec          ADR      r0,|L1.656|
0001a0  eaffffe3          B        |L1.308|
                  |L1.420|
0001a4  e1a00000          MOV      r0,r0                 ;78
0001a8  e28f00f8          ADR      r0,|L1.680|
0001ac  eaffffe0          B        |L1.308|
                  |L1.432|
0001b0  e1a00000          MOV      r0,r0                 ;80
0001b4  e28f00f8          ADR      r0,|L1.692|
0001b8  eaffffdd          B        |L1.308|
                  |L1.444|
0001bc  e1a00000          MOV      r0,r0                 ;82
0001c0  e28f00f8          ADR      r0,|L1.704|
0001c4  eaffffda          B        |L1.308|
                  |L1.456|
0001c8  e1a00000          MOV      r0,r0                 ;84
0001cc  e28f00fc          ADR      r0,|L1.720|
0001d0  eaffffd7          B        |L1.308|
                  |L1.468|
0001d4  72656775          DCB      "regular file",0
0001d8  6c617220
0001dc  66696c65
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L1.484|
0001e4  64697265          DCB      "directory",0
0001e8  63746f72
0001ec  7900    
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L1.496|
0001f0  73796d6c          DCB      "symlink",0
0001f4  696e6b00
                  |L1.504|
0001f8  756e6b6e          DCB      "unknown",0
0001fc  6f776e00
                  |L1.512|
000200  42757379          DCB      "Busy",0
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L1.520|
000208  4e6f2073          DCB      "No such device",0
00020c  75636820
000210  64657669
000214  636500  
000217  00                DCB      0
                  |L1.536|
000218  496e7661          DCB      "Invalid parameter",0
00021c  6c696420
000220  70617261
000224  6d657465
000228  7200    
00022a  00                DCB      0
00022b  00                DCB      0
                  |L1.556|
00022c  546f6f20          DCB      "Too many open files",0
000230  6d616e79
000234  206f7065
000238  6e206669
00023c  6c657300
                  |L1.576|
000240  42616420          DCB      "Bad handle",0
000244  68616e64
000248  6c6500  
00024b  00                DCB      0
                  |L1.588|
00024c  57726f6e          DCB      "Wrong permissions",0
000250  67207065
000254  726d6973
000258  73696f6e
00025c  7300    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  4e6f7420          DCB      "Not on same device",0
000264  6f6e2073
000268  616d6520
00026c  64657669
000270  636500  
000273  00                DCB      0
                  |L1.628|
000274  4e6f2073          DCB      "No such entry",0
000278  75636820
00027c  656e7472
000280  7900    
000282  00                DCB      0
000283  00                DCB      0
                  |L1.644|
000284  44657669          DCB      "Device full",0
000288  63652066
00028c  756c6c00
                  |L1.656|
000290  52656164          DCB      "Read only file system",0
000294  206f6e6c
000298  79206669
00029c  6c652073
0002a0  79737465
0002a4  6d00    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L1.680|
0002a8  52616e67          DCB      "Range error",0
0002ac  65206572
0002b0  726f7200
                  |L1.692|
0002b4  4e6f7420          DCB      "Not empty",0
0002b8  656d7074
0002bc  7900    
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L1.704|
0002c0  4e616d65          DCB      "Name too long",0
0002c4  20746f6f
0002c8  206c6f6e
0002cc  6700    
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L1.720|
0002d0  4f757420          DCB      "Out of memory",0
0002d4  6f66206d
0002d8  656d6f72
0002dc  7900    
0002de  00                DCB      0
0002df  00                DCB      0
                  |L1.736|
0002e0  e1a00000          MOV      r0,r0                 ;86
0002e4  e28f0f85          ADR      r0,|L1.1280|
0002e8  eaffff91          B        |L1.308|
                  |L1.748|
0002ec  e1a00000          MOV      r0,r0                 ;88
0002f0  e28f0e21          ADR      r0,|L1.1288|
0002f4  eaffff8e          B        |L1.308|
                  |L1.760|
0002f8  e1a00000          MOV      r0,r0                 ;90
0002fc  e28f0e21          ADR      r0,|L1.1300|
000300  eaffff8b          B        |L1.308|
                  |L1.772|
000304  e1a00000          MOV      r0,r0                 ;92
000308  e28f0f85          ADR      r0,|L1.1316|
00030c  eaffff88          B        |L1.308|
                  |L1.784|
000310  e1a00000          MOV      r0,r0                 ;94
000314  e28f0f8a          ADR      r0,|L1.1348|
000318  eaffff85          B        |L1.308|
                  |L1.796|
00031c  e1a00000          MOV      r0,r0                 ;96
000320  e28f0f8b          ADR      r0,|L1.1364|
000324  eaffff82          B        |L1.308|
                  |L1.808|
000328  e1a00000          MOV      r0,r0                 ;98
00032c  e28f0f8b          ADR      r0,|L1.1376|
000330  eaffff7f          B        |L1.308|
;;;102    
                          ENDP

                  cmd_yaffs_tracemask PROC
;;;104    
;;;105    void cmd_yaffs_tracemask(unsigned set, unsigned mask)
000334  e92d4070          PUSH     {r4-r6,lr}
;;;106    {
000338  e1a04000          MOV      r4,r0
00033c  e1a05001          MOV      r5,r1
;;;107        if (set)
000340  e3540000          CMP      r4,#0
000344  0a000001          BEQ      |L1.848|
;;;108            yaffs_trace_mask = mask;
000348  e59f0220          LDR      r0,|L1.1392|
00034c  e5805000          STR      r5,[r0,#0]  ; yaffs_trace_mask
                  |L1.848|
;;;109    
;;;110        sysprintf("yaffs trace mask: %08x\n", yaffs_trace_mask);
000350  e59f0218          LDR      r0,|L1.1392|
000354  e5901000          LDR      r1,[r0,#0]  ; yaffs_trace_mask
000358  e28f0f85          ADR      r0,|L1.1396|
00035c  ebfffffe          BL       sysprintf
;;;111    }
000360  e8bd8070          POP      {r4-r6,pc}
;;;112    
                          ENDP

                  yaffs_regions_overlap PROC
;;;113    static int yaffs_regions_overlap(int a, int b, int x, int y)
000364  e1a0c000          MOV      r12,r0
;;;114    {
;;;115        return  (a <= x && x <= b) ||
000368  e15c0002          CMP      r12,r2
00036c  ca000001          BGT      |L1.888|
000370  e1520001          CMP      r2,r1
000374  da00000b          BLE      |L1.936|
                  |L1.888|
;;;116                (a <= y && y <= b) ||
000378  e15c0003          CMP      r12,r3
00037c  ca000001          BGT      |L1.904|
000380  e1530001          CMP      r3,r1
000384  da000007          BLE      |L1.936|
                  |L1.904|
;;;117                (x <= a && a <= y) ||
000388  e152000c          CMP      r2,r12
00038c  ca000001          BGT      |L1.920|
000390  e15c0003          CMP      r12,r3
000394  da000003          BLE      |L1.936|
                  |L1.920|
;;;118                (x <= b && b <= y);
000398  e1520001          CMP      r2,r1
00039c  ca000003          BGT      |L1.944|
0003a0  e1510003          CMP      r1,r3
0003a4  ca000001          BGT      |L1.944|
                  |L1.936|
0003a8  e3a00001          MOV      r0,#1                 ;115
                  |L1.940|
;;;119    }
0003ac  e12fff1e          BX       lr
                  |L1.944|
0003b0  e3a00000          MOV      r0,#0                 ;115
0003b4  eafffffc          B        |L1.940|
;;;120    
                          ENDP

                  cmd_yaffs_devconfig PROC
;;;121    void cmd_yaffs_devconfig(char *_mp, int flash_dev,
0003b8  e92d4fff          PUSH     {r0-r11,lr}
;;;122                             int start_block, int end_block)
;;;123    {
0003bc  e24dd00c          SUB      sp,sp,#0xc
0003c0  e1a08001          MOV      r8,r1
0003c4  e1a09002          MOV      r9,r2
0003c8  e1a07003          MOV      r7,r3
;;;124        struct mtd_info *mtd = NULL;
0003cc  e1a00000          MOV      r0,r0
;;;125        struct yaffs_dev *dev = NULL;
0003d0  e1a00000          MOV      r0,r0
;;;126        struct yaffs_dev *chk;
;;;127        char *mp = NULL;
0003d4  e1a00000          MOV      r0,r0
;;;128        struct nand_chip *chip;
;;;129    
;;;130    //  dev = calloc(1, sizeof(*dev));
;;;131    //  mp = (char *)strdup(_mp);
;;;132        dev = yaffs_malloc(sizeof(*dev));
0003d8  e59f01ac          LDR      r0,|L1.1420|
0003dc  ebfffffe          BL       yaffs_malloc
0003e0  e1a04000          MOV      r4,r0
;;;133        memset(dev, 0, sizeof(*dev));
0003e4  e59f11a0          LDR      r1,|L1.1420|
0003e8  e1a00004          MOV      r0,r4
0003ec  ebfffffe          BL       __aeabi_memclr4
;;;134        mp = yaffs_malloc(strlen(_mp));
0003f0  e59d000c          LDR      r0,[sp,#0xc]
0003f4  ebfffffe          BL       strlen
0003f8  e58d0004          STR      r0,[sp,#4]
0003fc  ebfffffe          BL       yaffs_malloc
000400  e1a0a000          MOV      r10,r0
;;;135        strcpy(mp, _mp);
000404  e1a0000a          MOV      r0,r10
000408  e59d100c          LDR      r1,[sp,#0xc]
00040c  ebfffffe          BL       strcpy
;;;136    
;;;137        mtd = &nand_info[flash_dev];
000410  e0880088          ADD      r0,r8,r8,LSL #1
000414  e0800188          ADD      r0,r0,r8,LSL #3
000418  e59f1170          LDR      r1,|L1.1424|
00041c  e0815200          ADD      r5,r1,r0,LSL #4
;;;138    
;;;139        if (!dev || !mp) {
000420  e3540000          CMP      r4,#0
000424  0a000001          BEQ      |L1.1072|
000428  e35a0000          CMP      r10,#0
00042c  1a000002          BNE      |L1.1084|
                  |L1.1072|
;;;140            /* Alloc error */
;;;141            sysprintf("Failed to allocate memory\n");
000430  e28f0f57          ADR      r0,|L1.1428|
000434  ebfffffe          BL       sysprintf
;;;142            goto err;
000438  ea0000af          B        |L1.1788|
                  |L1.1084|
;;;143        }
;;;144    
;;;145        if (flash_dev >= 1) {
00043c  e3580001          CMP      r8,#1
000440  ba000002          BLT      |L1.1104|
;;;146            sysprintf("Flash device invalid\n");
000444  e28f0f59          ADR      r0,|L1.1456|
000448  ebfffffe          BL       sysprintf
;;;147            goto err;
00044c  ea0000aa          B        |L1.1788|
                  |L1.1104|
;;;148        }
;;;149    
;;;150        if (end_block == 0)
000450  e3570000          CMP      r7,#0
000454  1a000006          BNE      |L1.1140|
;;;151            end_block = mtd->size / mtd->erasesize - 1;
000458  e285c008          ADD      r12,r5,#8
00045c  e89c1003          LDM      r12,{r0,r1,r12}
000460  e1a0200c          MOV      r2,r12
000464  e3a03000          MOV      r3,#0
000468  e1cd00f0          STRD     r0,r1,[sp,#0]
00046c  ebfffffe          BL       __aeabi_uldivmod
000470  e2507001          SUBS     r7,r0,#1
                  |L1.1140|
;;;152    
;;;153        if (end_block < start_block) {
000474  e1570009          CMP      r7,r9
000478  aa000002          BGE      |L1.1160|
;;;154            sysprintf("Bad start/end\n");
00047c  e28f0f51          ADR      r0,|L1.1480|
000480  ebfffffe          BL       sysprintf
;;;155            goto err;
000484  ea00009c          B        |L1.1788|
                  |L1.1160|
;;;156        }
;;;157    
;;;158        chip =  mtd->priv;
000488  e595b094          LDR      r11,[r5,#0x94]
;;;159    
;;;160        /* Check for any conflicts */
;;;161        yaffs_dev_rewind();
00048c  ebfffffe          BL       yaffs_dev_rewind
;;;162        while (1) {
000490  ea000061          B        |L1.1564|
                  |L1.1172|
;;;163            chk = yaffs_next_dev();
000494  ebfffffe          BL       yaffs_next_dev
000498  e1a06000          MOV      r6,r0
;;;164            if (!chk)
00049c  e3560000          CMP      r6,#0
0004a0  1a000000          BNE      |L1.1192|
;;;165                break;
0004a4  ea00005d          B        |L1.1568|
                  |L1.1192|
;;;166            if (strcmp(chk->param.name, mp) == 0) {
0004a8  e1a0100a          MOV      r1,r10
0004ac  e5960000          LDR      r0,[r6,#0]
0004b0  ebfffffe          BL       strcmp
0004b4  e3500000          CMP      r0,#0
0004b8  1a000002          BNE      |L1.1224|
;;;167                sysprintf("Mount point name already used\n");
0004bc  e28f0f45          ADR      r0,|L1.1496|
0004c0  ebfffffe          BL       sysprintf
;;;168                goto err;
0004c4  ea00008c          B        |L1.1788|
                  |L1.1224|
;;;169            }
;;;170            if (chk->driver_context == mtd &&
0004c8  e5960098          LDR      r0,[r6,#0x98]
0004cc  e1500005          CMP      r0,r5
0004d0  1a000051          BNE      |L1.1564|
;;;171                    yaffs_regions_overlap(
0004d4  e1a03007          MOV      r3,r7
0004d8  e1a02009          MOV      r2,r9
0004dc  e5960014          LDR      r0,[r6,#0x14]
0004e0  e5961018          LDR      r1,[r6,#0x18]
0004e4  ebfffffe          BL       yaffs_regions_overlap
0004e8  e3500000          CMP      r0,#0
0004ec  0a00004a          BEQ      |L1.1564|
;;;172                        chk->param.start_block, chk->param.end_block,
;;;173                        start_block, end_block)) {
;;;174                sysprintf("Region overlaps with partition %s\n",
0004f0  e28f0c01          ADR      r0,|L1.1528|
0004f4  e5961000          LDR      r1,[r6,#0]
0004f8  ebfffffe          BL       sysprintf
;;;175                          chk->param.name);
;;;176                goto err;
0004fc  ea00007e          B        |L1.1788|
                  |L1.1280|
000500  4661756c          DCB      "Fault",0
000504  7400    
000506  00                DCB      0
000507  00                DCB      0
                  |L1.1288|
000508  4e616d65          DCB      "Name exists",0
00050c  20657869
000510  73747300
                  |L1.1300|
000514  4e6f7420          DCB      "Not a directory",0
000518  61206469
00051c  72656374
000520  6f727900
                  |L1.1316|
000524  4e6f7420          DCB      "Not permitted on a directory"
000528  7065726d
00052c  69747465
000530  64206f6e
000534  20612064
000538  69726563
00053c  746f7279
                  |L1.1344|
000540  00                DCB      0
000541  00                DCB      0
000542  00                DCB      0
000543  00                DCB      0
                  |L1.1348|
000544  53796d6c          DCB      "Symlink loop",0
000548  696e6b20
00054c  6c6f6f70
000550  00      
000551  00                DCB      0
000552  00                DCB      0
000553  00                DCB      0
                  |L1.1364|
000554  4e6f2065          DCB      "No error",0
000558  72726f72
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
                  |L1.1376|
000560  556e6b6e          DCB      "Unknown error",0
000564  6f776e20
000568  6572726f
00056c  7200    
00056e  00                DCB      0
00056f  00                DCB      0
                  |L1.1392|
                          DCD      yaffs_trace_mask
                  |L1.1396|
000574  79616666          DCB      "yaffs trace mask: %08x\n",0
000578  73207472
00057c  61636520
000580  6d61736b
000584  3a202530
000588  38780a00
                  |L1.1420|
                          DCD      0x00000e68
                  |L1.1424|
                          DCD      nand_info
                  |L1.1428|
000594  4661696c          DCB      "Failed to allocate memory\n",0
000598  65642074
00059c  6f20616c
0005a0  6c6f6361
0005a4  7465206d
0005a8  656d6f72
0005ac  790a00  
0005af  00                DCB      0
                  |L1.1456|
0005b0  466c6173          DCB      "Flash device invalid\n",0
0005b4  68206465
0005b8  76696365
0005bc  20696e76
0005c0  616c6964
0005c4  0a00    
0005c6  00                DCB      0
0005c7  00                DCB      0
                  |L1.1480|
0005c8  42616420          DCB      "Bad start/end\n",0
0005cc  73746172
0005d0  742f656e
0005d4  640a00  
0005d7  00                DCB      0
                  |L1.1496|
0005d8  4d6f756e          DCB      "Mount point name already used\n",0
0005dc  7420706f
0005e0  696e7420
0005e4  6e616d65
0005e8  20616c72
0005ec  65616479
0005f0  20757365
0005f4  640a00  
0005f7  00                DCB      0
                  |L1.1528|
0005f8  52656769          DCB      "Region overlaps with partition %s\n",0
0005fc  6f6e206f
000600  7665726c
000604  61707320
000608  77697468
00060c  20706172
000610  74697469
000614  6f6e2025
000618  730a00  
00061b  00                DCB      0
                  |L1.1564|
00061c  eaffff9c          B        |L1.1172|
                  |L1.1568|
000620  e1a00000          MOV      r0,r0                 ;165
;;;177            }
;;;178    
;;;179        }
;;;180    
;;;181        /* Seems same, so configure */
;;;182        memset(dev, 0, sizeof(*dev));
000624  e51f10a0          LDR      r1,|L1.1420|
000628  e1a00004          MOV      r0,r4
00062c  ebfffffe          BL       __aeabi_memclr4
;;;183        dev->param.name = mp;
000630  e584a000          STR      r10,[r4,#0]
;;;184        dev->driver_context = mtd;
000634  e5845098          STR      r5,[r4,#0x98]
;;;185        dev->param.start_block = start_block;
000638  e5849014          STR      r9,[r4,#0x14]
;;;186        dev->param.end_block = end_block;
00063c  e5847018          STR      r7,[r4,#0x18]
;;;187        dev->param.chunks_per_block = mtd->erasesize / mtd->writesize;
000640  e1c501d0          LDRD     r0,r1,[r5,#0x10]
000644  ebfffffe          BL       __aeabi_uidivmod
000648  e584000c          STR      r0,[r4,#0xc]
;;;188        dev->param.total_bytes_per_chunk = mtd->writesize;
00064c  e5950014          LDR      r0,[r5,#0x14]
000650  e5840008          STR      r0,[r4,#8]
;;;189        dev->param.is_yaffs2 = 1;
000654  e3a00001          MOV      r0,#1
000658  e5840030          STR      r0,[r4,#0x30]
;;;190        dev->param.use_nand_ecc = 1;
00065c  e5840024          STR      r0,[r4,#0x24]
;;;191        dev->param.n_reserved_blocks = 5;
000660  e3a00005          MOV      r0,#5
000664  e584001c          STR      r0,[r4,#0x1c]
;;;192        if (chip->ecc.layout->oobavail <= sizeof(struct yaffs_packed_tags2))
000668  e59b00b8          LDR      r0,[r11,#0xb8]
00066c  e5900204          LDR      r0,[r0,#0x204]
000670  e350001c          CMP      r0,#0x1c
000674  8a000001          BHI      |L1.1664|
;;;193            dev->param.inband_tags = 1;
000678  e3a00001          MOV      r0,#1
00067c  e5840004          STR      r0,[r4,#4]
                  |L1.1664|
;;;194        dev->param.n_caches = 10;
000680  e3a0000a          MOV      r0,#0xa
000684  e5840020          STR      r0,[r4,#0x20]
;;;195        dev->param.write_chunk_tags_fn = nandmtd2_write_chunk_tags;
000688  e59f0220          LDR      r0,|L1.2224|
00068c  e5840058          STR      r0,[r4,#0x58]
;;;196        dev->param.read_chunk_tags_fn = nandmtd2_read_chunk_tags;
000690  e59f021c          LDR      r0,|L1.2228|
000694  e584005c          STR      r0,[r4,#0x5c]
;;;197        dev->param.erase_fn = nandmtd_EraseBlockInNAND;
000698  e59f0218          LDR      r0,|L1.2232|
00069c  e584004c          STR      r0,[r4,#0x4c]
;;;198        dev->param.initialise_flash_fn = nandmtd_InitialiseNAND;
0006a0  e59f0214          LDR      r0,|L1.2236|
0006a4  e5840050          STR      r0,[r4,#0x50]
;;;199        dev->param.bad_block_fn = nandmtd2_MarkNANDBlockBad;
0006a8  e59f0210          LDR      r0,|L1.2240|
0006ac  e5840060          STR      r0,[r4,#0x60]
;;;200        dev->param.query_block_fn = nandmtd2_QueryNANDBlock;
0006b0  e59f020c          LDR      r0,|L1.2244|
0006b4  e5840064          STR      r0,[r4,#0x64]
;;;201    
;;;202        yaffs_add_device(dev);
0006b8  e1a00004          MOV      r0,r4
0006bc  ebfffffe          BL       yaffs_add_device
;;;203    
;;;204        sysprintf("Configures yaffs mount %s: dev %d start block %d, end block %d %s\n",
0006c0  e5940004          LDR      r0,[r4,#4]
0006c4  e3500000          CMP      r0,#0
0006c8  0a000001          BEQ      |L1.1748|
;;;205                  dev->param.name, flash_dev, start_block, end_block,
;;;206                  dev->param.inband_tags ? "using inband tags" : "");
0006cc  e28f0f7d          ADR      r0,|L1.2248|
0006d0  ea000000          B        |L1.1752|
                  |L1.1748|
0006d4  e24f0f67          ADR      r0,|L1.1344|
                  |L1.1752|
0006d8  e58d0004          STR      r0,[sp,#4]
0006dc  e58d7000          STR      r7,[sp,#0]
0006e0  e1a03009          MOV      r3,r9
0006e4  e1a02008          MOV      r2,r8
0006e8  e59f01ec          LDR      r0,|L1.2268|
0006ec  e5941000          LDR      r1,[r4,#0]
0006f0  ebfffffe          BL       sysprintf
                  |L1.1780|
;;;207        return;
;;;208    
;;;209    err:
;;;210        yaffs_free(dev);
;;;211        yaffs_free(mp);
;;;212    }
0006f4  e28dd01c          ADD      sp,sp,#0x1c
0006f8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1788|
0006fc  e1a00000          MOV      r0,r0                 ;209
000700  e1a00004          MOV      r0,r4                 ;210
000704  ebfffffe          BL       yaffs_free
000708  e1a0000a          MOV      r0,r10                ;211
00070c  ebfffffe          BL       yaffs_free
000710  e1a00000          MOV      r0,r0
000714  eafffff6          B        |L1.1780|
;;;213    
                          ENDP

                  cmd_yaffs_dev_ls PROC
;;;214    void cmd_yaffs_dev_ls(void)
000718  e92d407c          PUSH     {r2-r6,lr}
;;;215    {
;;;216        struct yaffs_dev *dev;
;;;217        int flash_dev;
;;;218        int free_space;
;;;219    
;;;220        yaffs_dev_rewind();
00071c  ebfffffe          BL       yaffs_dev_rewind
;;;221    
;;;222        while (1) {
000720  ea000022          B        |L1.1968|
                  |L1.1828|
;;;223            dev = yaffs_next_dev();
000724  ebfffffe          BL       yaffs_next_dev
000728  e1a04000          MOV      r4,r0
;;;224            if (!dev)
00072c  e3540000          CMP      r4,#0
000730  1a000000          BNE      |L1.1848|
;;;225                return;
;;;226            flash_dev =
;;;227                ((unsigned) dev->driver_context - (unsigned) nand_info)/
;;;228                sizeof(nand_info[0]);
;;;229            sysprintf("%-3s %5d 0x%05x 0x%05x %s",
;;;230                      dev->param.name, flash_dev,
;;;231                      dev->param.start_block, dev->param.end_block,
;;;232                      dev->param.inband_tags ? "using inband tags, " : "");
;;;233    
;;;234            free_space = yaffs_freespace(dev->param.name);
;;;235            if (free_space < 0)
;;;236                sysprintf("not mounted\n");
;;;237            else
;;;238                sysprintf("free 0x%x\n", free_space);
;;;239    
;;;240        }
;;;241    }
000734  e8bd807c          POP      {r2-r6,pc}
                  |L1.1848|
000738  e51f21b0          LDR      r2,|L1.1424|
00073c  e5941098          LDR      r1,[r4,#0x98]         ;226
000740  e0410002          SUB      r0,r1,r2              ;226
000744  e3a010b0          MOV      r1,#0xb0              ;226
000748  ebfffffe          BL       __aeabi_uidivmod
00074c  e1a06000          MOV      r6,r0                 ;226
000750  e5940004          LDR      r0,[r4,#4]            ;229
000754  e3500000          CMP      r0,#0                 ;229
000758  0a000001          BEQ      |L1.1892|
00075c  e28f1f5f          ADR      r1,|L1.2272|
000760  ea000000          B        |L1.1896|
                  |L1.1892|
000764  e24f1f8b          ADR      r1,|L1.1344|
                  |L1.1896|
000768  e5940018          LDR      r0,[r4,#0x18]         ;232
00076c  e1cd00f0          STRD     r0,r1,[sp,#0]         ;232
000770  e1a02006          MOV      r2,r6                 ;232
000774  e28f0f5e          ADR      r0,|L1.2292|
000778  e5941000          LDR      r1,[r4,#0]            ;232
00077c  e5943014          LDR      r3,[r4,#0x14]         ;232
000780  ebfffffe          BL       sysprintf
000784  e5940000          LDR      r0,[r4,#0]            ;234
000788  ebfffffe          BL       yaffs_freespace
00078c  e1a05000          MOV      r5,r0                 ;234
000790  e3550000          CMP      r5,#0                 ;235
000794  aa000002          BGE      |L1.1956|
000798  e28f0e17          ADR      r0,|L1.2320|
00079c  ebfffffe          BL       sysprintf
0007a0  ea000002          B        |L1.1968|
                  |L1.1956|
0007a4  e1a01005          MOV      r1,r5                 ;238
0007a8  e28f0e17          ADR      r0,|L1.2336|
0007ac  ebfffffe          BL       sysprintf
                  |L1.1968|
0007b0  eaffffdb          B        |L1.1828|
;;;242    #if(0)
                          ENDP

                  cmd_yaffs_mount PROC
;;;308    #endif
;;;309    void cmd_yaffs_mount(char *mp)
0007b4  e92d41f0          PUSH     {r4-r8,lr}
;;;310    {
0007b8  e1a04000          MOV      r4,r0
;;;311        int retval = yaffs_mount(mp);
0007bc  e1a00004          MOV      r0,r4
0007c0  ebfffffe          BL       yaffs_mount
0007c4  e1a05000          MOV      r5,r0
;;;312        if (retval < 0)
0007c8  e3550000          CMP      r5,#0
0007cc  aa000008          BGE      |L1.2036|
;;;313            sysprintf("Error mounting %s, return value: %d, %s\n", mp,
0007d0  ebfffffe          BL       yaffs_error_str
0007d4  e1a06000          MOV      r6,r0
0007d8  ebfffffe          BL       yaffsfs_GetError
0007dc  e1a07000          MOV      r7,r0
0007e0  e1a03006          MOV      r3,r6
0007e4  e1a02007          MOV      r2,r7
0007e8  e1a01004          MOV      r1,r4
0007ec  e28f0f4e          ADR      r0,|L1.2348|
0007f0  ebfffffe          BL       sysprintf
                  |L1.2036|
;;;314                      yaffsfs_GetError(), yaffs_error_str());
;;;315    }
0007f4  e8bd81f0          POP      {r4-r8,pc}
;;;316    
                          ENDP

                  cmd_yaffs_umount PROC
;;;317    
;;;318    void cmd_yaffs_umount(char *mp)
0007f8  e92d4070          PUSH     {r4-r6,lr}
;;;319    {
0007fc  e1a04000          MOV      r4,r0
;;;320        if (yaffs_unmount(mp) == -1)
000800  e1a00004          MOV      r0,r4
000804  ebfffffe          BL       yaffs_unmount
000808  e3700001          CMN      r0,#1
00080c  1a000008          BNE      |L1.2100|
;;;321            sysprintf("Error umounting %s, return value: %d, %s\n", mp,
000810  ebfffffe          BL       yaffs_error_str
000814  e1a05000          MOV      r5,r0
000818  ebfffffe          BL       yaffsfs_GetError
00081c  e1a06000          MOV      r6,r0
000820  e1a03005          MOV      r3,r5
000824  e1a02006          MOV      r2,r6
000828  e1a01004          MOV      r1,r4
00082c  e28f0f49          ADR      r0,|L1.2392|
000830  ebfffffe          BL       sysprintf
                  |L1.2100|
;;;322                      yaffsfs_GetError(), yaffs_error_str());
;;;323    }
000834  e8bd8070          POP      {r4-r6,pc}
;;;324    
                          ENDP

                  cmd_yaffs_mread_fileByLen PROC
;;;326    
;;;327    void cmd_yaffs_mread_fileByLen(char *fn, char *addr, int len)
000838  e92d40f0          PUSH     {r4-r7,lr}
;;;328    {
00083c  e24dd044          SUB      sp,sp,#0x44
000840  e1a06000          MOV      r6,r0
000844  e1a07001          MOV      r7,r1
000848  e1a04002          MOV      r4,r2
;;;329        int h;
;;;330        struct yaffs_stat s;
;;;331    
;;;332        yaffs_stat(fn, &s);
00084c  e1a0100d          MOV      r1,sp
000850  e1a00006          MOV      r0,r6
000854  ebfffffe          BL       yaffs_stat
;;;333    
;;;334        //sysprintf("Copy %s to 0x%p... ", fn, addr);
;;;335        h = yaffs_open(fn, O_RDWR, 0);
000858  e3a02000          MOV      r2,#0
00085c  e3a01002          MOV      r1,#2
000860  e1a00006          MOV      r0,r6
000864  ebfffffe          BL       yaffs_open
000868  e1a05000          MOV      r5,r0
;;;336        if (h < 0) {
00086c  e3550000          CMP      r5,#0
000870  aa000003          BGE      |L1.2180|
;;;337            sysprintf("File not found\n");
000874  e28f0f42          ADR      r0,|L1.2436|
000878  ebfffffe          BL       sysprintf
                  |L1.2172|
;;;338            return;
;;;339        }
;;;340    
;;;341        yaffs_read(h, addr, len);
;;;342        sysprintf("[cmd_yaffs_mread_file DONE, s.st_size = %d]\n", len);
;;;343    
;;;344        yaffs_close(h);
;;;345    }
00087c  e28dd044          ADD      sp,sp,#0x44
000880  e8bd80f0          POP      {r4-r7,pc}
                  |L1.2180|
000884  e1a02004          MOV      r2,r4                 ;341
000888  e1a01007          MOV      r1,r7                 ;341
00088c  e1a00005          MOV      r0,r5                 ;341
000890  ebfffffe          BL       yaffs_read
000894  e1a01004          MOV      r1,r4                 ;342
000898  e28f00f4          ADR      r0,|L1.2452|
00089c  ebfffffe          BL       sysprintf
0008a0  e1a00005          MOV      r0,r5                 ;344
0008a4  ebfffffe          BL       yaffs_close
0008a8  e1a00000          MOV      r0,r0
0008ac  eafffff2          B        |L1.2172|
                  |L1.2224|
                          DCD      nandmtd2_write_chunk_tags
                  |L1.2228|
                          DCD      nandmtd2_read_chunk_tags
                  |L1.2232|
                          DCD      nandmtd_EraseBlockInNAND
                  |L1.2236|
                          DCD      nandmtd_InitialiseNAND
                  |L1.2240|
                          DCD      nandmtd2_MarkNANDBlockBad
                  |L1.2244|
                          DCD      nandmtd2_QueryNANDBlock
                  |L1.2248|
0008c8  7573696e          DCB      "using inband tags",0
0008cc  6720696e
0008d0  62616e64
0008d4  20746167
0008d8  7300    
0008da  00                DCB      0
0008db  00                DCB      0
                  |L1.2268|
                          DCD      ||.constdata||
                  |L1.2272|
0008e0  7573696e          DCB      "using inband tags, ",0
0008e4  6720696e
0008e8  62616e64
0008ec  20746167
0008f0  732c2000
                  |L1.2292|
0008f4  252d3373          DCB      "%-3s %5d 0x%05x 0x%05x %s",0
0008f8  20253564
0008fc  20307825
000900  30357820
000904  30782530
000908  35782025
00090c  7300    
00090e  00                DCB      0
00090f  00                DCB      0
                  |L1.2320|
000910  6e6f7420          DCB      "not mounted\n",0
000914  6d6f756e
000918  7465640a
00091c  00      
00091d  00                DCB      0
00091e  00                DCB      0
00091f  00                DCB      0
                  |L1.2336|
000920  66726565          DCB      "free 0x%x\n",0
000924  20307825
000928  780a00  
00092b  00                DCB      0
                  |L1.2348|
00092c  4572726f          DCB      "Error mounting %s, return value: %d, %s\n",0
000930  72206d6f
000934  756e7469
000938  6e672025
00093c  732c2072
000940  65747572
000944  6e207661
000948  6c75653a
00094c  2025642c
000950  2025730a
000954  00      
000955  00                DCB      0
000956  00                DCB      0
000957  00                DCB      0
                  |L1.2392|
000958  4572726f          DCB      "Error umounting %s, return value: %d, %s\n",0
00095c  7220756d
000960  6f756e74
000964  696e6720
000968  25732c20
00096c  72657475
000970  726e2076
000974  616c7565
000978  3a202564
00097c  2c202573
000980  0a00    
000982  00                DCB      0
000983  00                DCB      0
                  |L1.2436|
000984  46696c65          DCB      "File not found\n",0
000988  206e6f74
00098c  20666f75
000990  6e640a00
                  |L1.2452|
000994  5b636d64          DCB      "[cmd_yaffs_mread_file DONE, s.st_size = %d]\n",0
000998  5f796166
00099c  66735f6d
0009a0  72656164
0009a4  5f66696c
0009a8  6520444f
0009ac  4e452c20
0009b0  732e7374
0009b4  5f73697a
0009b8  65203d20
0009bc  25645d0a
0009c0  00      
0009c1  00                DCB      0
0009c2  00                DCB      0
0009c3  00                DCB      0
                          ENDP

                  cmd_yaffs_mread_file PROC
;;;346    
;;;347    void cmd_yaffs_mread_file(char *fn, char *addr)
0009c4  e92d4070          PUSH     {r4-r6,lr}
;;;348    {
0009c8  e24dd048          SUB      sp,sp,#0x48
0009cc  e1a04000          MOV      r4,r0
0009d0  e1a06001          MOV      r6,r1
;;;349        int h;
;;;350        struct yaffs_stat s;
;;;351    
;;;352        yaffs_stat(fn, &s);
0009d4  e28d1008          ADD      r1,sp,#8
0009d8  e1a00004          MOV      r0,r4
0009dc  ebfffffe          BL       yaffs_stat
;;;353    
;;;354        //sysprintf("Copy %s to 0x%p... ", fn, addr);
;;;355        h = yaffs_open(fn, O_RDWR, 0);
0009e0  e3a02000          MOV      r2,#0
0009e4  e3a01002          MOV      r1,#2
0009e8  e1a00004          MOV      r0,r4
0009ec  ebfffffe          BL       yaffs_open
0009f0  e1a05000          MOV      r5,r0
;;;356        if (h < 0) {
0009f4  e3550000          CMP      r5,#0
0009f8  aa000003          BGE      |L1.2572|
;;;357            sysprintf("File not found\n");
0009fc  e24f0080          ADR      r0,|L1.2436|
000a00  ebfffffe          BL       sysprintf
                  |L1.2564|
;;;358            return;
;;;359        }
;;;360    
;;;361        yaffs_read(h, addr, (int)s.st_size);
;;;362        sysprintf("[cmd_yaffs_mread_file DONE(%s), s.st_size = %d (0x%x)]\n", fn, (int)s.st_size, s.st_size);
;;;363    
;;;364        yaffs_close(h);
;;;365    }
000a04  e28dd048          ADD      sp,sp,#0x48
000a08  e8bd8070          POP      {r4-r6,pc}
                  |L1.2572|
000a0c  e1a01006          MOV      r1,r6                 ;361
000a10  e1a00005          MOV      r0,r5                 ;361
000a14  e59d2028          LDR      r2,[sp,#0x28]         ;361
000a18  ebfffffe          BL       yaffs_read
000a1c  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;362
000a20  e1cd00f0          STRD     r0,r1,[sp,#0]         ;362
000a24  e1a02000          MOV      r2,r0                 ;362
000a28  e1a01004          MOV      r1,r4                 ;362
000a2c  e28f0f71          ADR      r0,|L1.3064|
000a30  ebfffffe          BL       sysprintf
000a34  e1a00005          MOV      r0,r5                 ;364
000a38  ebfffffe          BL       yaffs_close
000a3c  e1a00000          MOV      r0,r0
000a40  eaffffef          B        |L1.2564|
;;;366    
                          ENDP

                  cmd_yaffs_mwrite_file PROC
;;;367    
;;;368    void cmd_yaffs_mwrite_file(char *fn, char *addr, int size)
000a44  e92d41f0          PUSH     {r4-r8,lr}
;;;369    {
000a48  e1a05000          MOV      r5,r0
000a4c  e1a06001          MOV      r6,r1
000a50  e1a07002          MOV      r7,r2
;;;370        int outh;
;;;371    
;;;372        outh = yaffs_open(fn, O_CREAT | O_RDWR | O_TRUNC, S_IREAD | S_IWRITE);
000a54  e3a02d06          MOV      r2,#0x180
000a58  e28210c2          ADD      r1,r2,#0xc2
000a5c  e1a00005          MOV      r0,r5
000a60  ebfffffe          BL       yaffs_open
000a64  e1a04000          MOV      r4,r0
;;;373        if (outh < 0)
000a68  e3540000          CMP      r4,#0
000a6c  aa000005          BGE      |L1.2696|
;;;374            sysprintf("Error opening file: %d, %s\n", outh, yaffs_error_str());
000a70  ebfffffe          BL       yaffs_error_str
000a74  e1a08000          MOV      r8,r0
000a78  e1a02008          MOV      r2,r8
000a7c  e1a01004          MOV      r1,r4
000a80  e28f0f6a          ADR      r0,|L1.3120|
000a84  ebfffffe          BL       sysprintf
                  |L1.2696|
;;;375    
;;;376        yaffs_write(outh, addr, size);
000a88  e1a02007          MOV      r2,r7
000a8c  e1a01006          MOV      r1,r6
000a90  e1a00004          MOV      r0,r4
000a94  ebfffffe          BL       yaffs_write
;;;377    
;;;378        yaffs_close(outh);
000a98  e1a00004          MOV      r0,r4
000a9c  ebfffffe          BL       yaffs_close
;;;379    }
000aa0  e8bd81f0          POP      {r4-r8,pc}
;;;380    
                          ENDP

                  cmd_yaffs_ls PROC
;;;381    
;;;382    void cmd_yaffs_ls(const char *mountpt, int longlist)
000aa4  e92d43f0          PUSH     {r4-r9,lr}
;;;383    {
000aa8  e24ddf51          SUB      sp,sp,#0x144
000aac  e1a05000          MOV      r5,r0
000ab0  e1a06001          MOV      r6,r1
;;;384        int i;
;;;385        yaffs_DIR *d;
;;;386        struct yaffs_dirent *de;
;;;387        struct yaffs_stat stat;
;;;388        char tempstr[255];
;;;389        sysprintf("\r\n ---- cmd_yaffs_ls start ----\n");
000ab4  e28f0e19          ADR      r0,|L1.3148|
000ab8  ebfffffe          BL       sysprintf
;;;390        d = yaffs_opendir(mountpt);
000abc  e1a00005          MOV      r0,r5
000ac0  ebfffffe          BL       yaffs_opendir
000ac4  e1a08000          MOV      r8,r0
;;;391    
;;;392        if (!d) {
000ac8  e3580000          CMP      r8,#0
000acc  1a000006          BNE      |L1.2796|
;;;393            sysprintf("opendir failed, %s\n", yaffs_error_str());
000ad0  ebfffffe          BL       yaffs_error_str
000ad4  e1a09000          MOV      r9,r0
000ad8  e1a01009          MOV      r1,r9
000adc  e28f0f63          ADR      r0,|L1.3184|
000ae0  ebfffffe          BL       sysprintf
                  |L1.2788|
;;;394            return;
;;;395        }
;;;396    
;;;397        for (i = 0; (de = yaffs_readdir(d)) != NULL; i++) {
;;;398            if (longlist) {
;;;399                sprintf(tempstr, "%s/%s", mountpt, de->d_name);
;;;400                yaffs_lstat(tempstr, &stat);
;;;401                sysprintf("%-25s\t%7ld",
;;;402                          de->d_name,
;;;403                          (long)stat.st_size);
;;;404                sysprintf(" %5d %s\n",
;;;405                          stat.st_ino,
;;;406                          yaffs_file_type_str(&stat));
;;;407            } else {
;;;408                sysprintf("%s\n", de->d_name);
;;;409            }
;;;410        }
;;;411    
;;;412        yaffs_closedir(d);
;;;413        sysprintf(" ---- cmd_yaffs_ls stop ----\n");
;;;414    }
000ae4  e28ddf51          ADD      sp,sp,#0x144
000ae8  e8bd83f0          POP      {r4-r9,pc}
                  |L1.2796|
000aec  e3a07000          MOV      r7,#0                 ;397
000af0  ea000019          B        |L1.2908|
                  |L1.2804|
000af4  e3560000          CMP      r6,#0                 ;398
000af8  0a000013          BEQ      |L1.2892|
000afc  e284300b          ADD      r3,r4,#0xb            ;399
000b00  e1a02005          MOV      r2,r5                 ;399
000b04  e28f1f5e          ADR      r1,|L1.3204|
000b08  e1a0000d          MOV      r0,sp                 ;399
000b0c  ebfffffe          BL       __2sprintf
000b10  e28d1c01          ADD      r1,sp,#0x100          ;400
000b14  e1a0000d          MOV      r0,sp                 ;400
000b18  ebfffffe          BL       yaffs_lstat
000b1c  e284100b          ADD      r1,r4,#0xb            ;401
000b20  e28f0f59          ADR      r0,|L1.3212|
000b24  e59d2120          LDR      r2,[sp,#0x120]        ;401
000b28  ebfffffe          BL       sysprintf
000b2c  e28d0c01          ADD      r0,sp,#0x100          ;404
000b30  ebfffffe          BL       yaffs_file_type_str
000b34  e1a09000          MOV      r9,r0                 ;404
000b38  e1a02009          MOV      r2,r9                 ;404
000b3c  e28f0f55          ADR      r0,|L1.3224|
000b40  e59d1104          LDR      r1,[sp,#0x104]        ;404
000b44  ebfffffe          BL       sysprintf
000b48  ea000002          B        |L1.2904|
                  |L1.2892|
000b4c  e284100b          ADD      r1,r4,#0xb            ;408
000b50  e28f00f0          ADR      r0,|L1.3144|
000b54  ebfffffe          BL       sysprintf
                  |L1.2904|
000b58  e2877001          ADD      r7,r7,#1              ;397
                  |L1.2908|
000b5c  e1a00008          MOV      r0,r8                 ;397
000b60  ebfffffe          BL       yaffs_readdir
000b64  e1b04000          MOVS     r4,r0                 ;397
000b68  1affffe1          BNE      |L1.2804|
000b6c  e1a00008          MOV      r0,r8                 ;412
000b70  ebfffffe          BL       yaffs_closedir
000b74  e28f0f4a          ADR      r0,|L1.3236|
000b78  ebfffffe          BL       sysprintf
000b7c  e1a00000          MOV      r0,r0
000b80  eaffffd7          B        |L1.2788|
;;;415    
                          ENDP

                  cmd_yaffs_mkdir PROC
;;;416    
;;;417    void cmd_yaffs_mkdir(const char *dir)
000b84  e92d4070          PUSH     {r4-r6,lr}
;;;418    {
000b88  e1a05000          MOV      r5,r0
;;;419        int retval = yaffs_mkdir(dir, 0);
000b8c  e3a01000          MOV      r1,#0
000b90  e1a00005          MOV      r0,r5
000b94  ebfffffe          BL       yaffs_mkdir
000b98  e1a04000          MOV      r4,r0
;;;420    
;;;421        if (retval < 0)
000b9c  e3540000          CMP      r4,#0
000ba0  aa000005          BGE      |L1.3004|
;;;422            sysprintf("yaffs_mkdir returning error: %d, %s\n",
000ba4  ebfffffe          BL       yaffs_error_str
000ba8  e1a06000          MOV      r6,r0
000bac  e1a02006          MOV      r2,r6
000bb0  e1a01004          MOV      r1,r4
000bb4  e28f0f42          ADR      r0,|L1.3268|
000bb8  ebfffffe          BL       sysprintf
                  |L1.3004|
;;;423                      retval, yaffs_error_str());
;;;424    }
000bbc  e8bd8070          POP      {r4-r6,pc}
;;;425    
                          ENDP

                  cmd_yaffs_rmdir PROC
;;;426    void cmd_yaffs_rmdir(const char *dir)
000bc0  e92d4070          PUSH     {r4-r6,lr}
;;;427    {
000bc4  e1a05000          MOV      r5,r0
;;;428        int retval = yaffs_rmdir(dir);
000bc8  e1a00005          MOV      r0,r5
000bcc  ebfffffe          BL       yaffs_rmdir
000bd0  e1a04000          MOV      r4,r0
;;;429    
;;;430        if (retval < 0)
000bd4  e3540000          CMP      r4,#0
000bd8  aa000005          BGE      |L1.3060|
;;;431            sysprintf("yaffs_rmdir returning error: %d, %s\n",
000bdc  ebfffffe          BL       yaffs_error_str
000be0  e1a06000          MOV      r6,r0
000be4  e1a02006          MOV      r2,r6
000be8  e1a01004          MOV      r1,r4
000bec  e28f00f8          ADR      r0,|L1.3308|
000bf0  ebfffffe          BL       sysprintf
                  |L1.3060|
;;;432                      retval, yaffs_error_str());
;;;433    }
000bf4  e8bd8070          POP      {r4-r6,pc}
                  |L1.3064|
000bf8  5b636d64          DCB      "[cmd_yaffs_mread_file DONE(%s), s.st_size = %d (0x%x)]\n"
000bfc  5f796166
000c00  66735f6d
000c04  72656164
000c08  5f66696c
000c0c  6520444f
000c10  4e452825
000c14  73292c20
000c18  732e7374
000c1c  5f73697a
000c20  65203d20
000c24  25642028
000c28  30782578
000c2c  295d0a  
000c2f  00                DCB      0
                  |L1.3120|
000c30  4572726f          DCB      "Error opening file: %d, "
000c34  72206f70
000c38  656e696e
000c3c  67206669
000c40  6c653a20
000c44  25642c20
                  |L1.3144|
000c48  25730a00          DCB      "%s\n",0
                  |L1.3148|
000c4c  0d0a202d          DCB      "\r\n ---- cmd_yaffs_ls start ----\n",0
000c50  2d2d2d20
000c54  636d645f
000c58  79616666
000c5c  735f6c73
000c60  20737461
000c64  7274202d
000c68  2d2d2d0a
000c6c  00      
000c6d  00                DCB      0
000c6e  00                DCB      0
000c6f  00                DCB      0
                  |L1.3184|
000c70  6f70656e          DCB      "opendir failed, %s\n",0
000c74  64697220
000c78  6661696c
000c7c  65642c20
000c80  25730a00
                  |L1.3204|
000c84  25732f25          DCB      "%s/%s",0
000c88  7300    
000c8a  00                DCB      0
000c8b  00                DCB      0
                  |L1.3212|
000c8c  252d3235          DCB      "%-25s\t%7ld",0
000c90  73092537
000c94  6c6400  
000c97  00                DCB      0
                  |L1.3224|
000c98  20253564          DCB      " %5d %s\n",0
000c9c  2025730a
000ca0  00      
000ca1  00                DCB      0
000ca2  00                DCB      0
000ca3  00                DCB      0
                  |L1.3236|
000ca4  202d2d2d          DCB      " ---- cmd_yaffs_ls stop ----\n",0
000ca8  2d20636d
000cac  645f7961
000cb0  6666735f
000cb4  6c732073
000cb8  746f7020
000cbc  2d2d2d2d
000cc0  0a00    
000cc2  00                DCB      0
000cc3  00                DCB      0
                  |L1.3268|
000cc4  79616666          DCB      "yaffs_mkdir returning error: %d, %s\n",0
000cc8  735f6d6b
000ccc  64697220
000cd0  72657475
000cd4  726e696e
000cd8  67206572
000cdc  726f723a
000ce0  2025642c
000ce4  2025730a
000ce8  00      
000ce9  00                DCB      0
000cea  00                DCB      0
000ceb  00                DCB      0
                  |L1.3308|
000cec  79616666          DCB      "yaffs_rmdir returning error: %d, %s\n",0
000cf0  735f726d
000cf4  64697220
000cf8  72657475
000cfc  726e696e
000d00  67206572
000d04  726f723a
000d08  2025642c
000d0c  2025730a
000d10  00      
000d11  00                DCB      0
000d12  00                DCB      0
000d13  00                DCB      0
                          ENDP

                  cmd_yaffs_rm PROC
;;;434    
;;;435    void cmd_yaffs_rm(const char *path)
000d14  e92d4070          PUSH     {r4-r6,lr}
;;;436    {
000d18  e1a05000          MOV      r5,r0
;;;437        int retval = yaffs_unlink(path);
000d1c  e1a00005          MOV      r0,r5
000d20  ebfffffe          BL       yaffs_unlink
000d24  e1a04000          MOV      r4,r0
;;;438    
;;;439        if (retval < 0)
000d28  e3540000          CMP      r4,#0
000d2c  aa000005          BGE      |L1.3400|
;;;440            sysprintf("yaffs_unlink returning error: %d, %s\n",
000d30  ebfffffe          BL       yaffs_error_str
000d34  e1a06000          MOV      r6,r0
000d38  e1a02006          MOV      r2,r6
000d3c  e1a01004          MOV      r1,r4
000d40  e28f0044          ADR      r0,|L1.3468|
000d44  ebfffffe          BL       sysprintf
                  |L1.3400|
;;;441                      retval, yaffs_error_str());
;;;442    }
000d48  e8bd8070          POP      {r4-r6,pc}
;;;443    
                          ENDP

                  cmd_yaffs_mv PROC
;;;444    void cmd_yaffs_mv(const char *oldPath, const char *newPath)
000d4c  e92d41f0          PUSH     {r4-r8,lr}
;;;445    {
000d50  e1a04000          MOV      r4,r0
000d54  e1a05001          MOV      r5,r1
;;;446        int retval = yaffs_rename(newPath, oldPath);
000d58  e1a01004          MOV      r1,r4
000d5c  e1a00005          MOV      r0,r5
000d60  ebfffffe          BL       yaffs_rename
000d64  e1a06000          MOV      r6,r0
;;;447    
;;;448        if (retval < 0)
000d68  e3560000          CMP      r6,#0
000d6c  aa000005          BGE      |L1.3464|
;;;449            sysprintf("yaffs_unlink returning error: %d, %s\n",
000d70  ebfffffe          BL       yaffs_error_str
000d74  e1a07000          MOV      r7,r0
000d78  e1a02007          MOV      r2,r7
000d7c  e1a01006          MOV      r1,r6
000d80  e28f0004          ADR      r0,|L1.3468|
000d84  ebfffffe          BL       sysprintf
                  |L1.3464|
;;;450                      retval, yaffs_error_str());
;;;451    }
000d88  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.3468|
000d8c  79616666          DCB      "yaffs_unlink returning error: %d, %s\n",0
000d90  735f756e
000d94  6c696e6b
000d98  20726574
000d9c  75726e69
000da0  6e672065
000da4  72726f72
000da8  3a202564
000dac  2c202573
000db0  0a00    
000db2  00                DCB      0
000db3  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  436f6e66          DCB      0x43,0x6f,0x6e,0x66
000004  69677572          DCB      0x69,0x67,0x75,0x72
000008  65732079          DCB      0x65,0x73,0x20,0x79
00000c  61666673          DCB      0x61,0x66,0x66,0x73
000010  206d6f75          DCB      0x20,0x6d,0x6f,0x75
000014  6e742025          DCB      0x6e,0x74,0x20,0x25
000018  733a2064          DCB      0x73,0x3a,0x20,0x64
00001c  65762025          DCB      0x65,0x76,0x20,0x25
000020  64207374          DCB      0x64,0x20,0x73,0x74
000024  61727420          DCB      0x61,0x72,0x74,0x20
000028  626c6f63          DCB      0x62,0x6c,0x6f,0x63
00002c  6b202564          DCB      0x6b,0x20,0x25,0x64
000030  2c20656e          DCB      0x2c,0x20,0x65,0x6e
000034  6420626c          DCB      0x64,0x20,0x62,0x6c
000038  6f636b20          DCB      0x6f,0x63,0x6b,0x20
00003c  25642025          DCB      0x25,0x64,0x20,0x25
000040  730a00            DCB      0x73,0x0a,0x00
