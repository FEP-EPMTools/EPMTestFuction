; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ipassblk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ipassblk.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\ipassblk.crf src\syshal\blk\ipassblk.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  searchTargetID PROC
;;;53     
;;;54     static int searchTargetID(uint32_t target, IPassBLKItem* pIPassKBItem, int itemSize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;55     {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
00000c  e1a09002          MOV      r9,r2
;;;56         int first = 0;
000010  e3a07000          MOV      r7,#0
;;;57         int last = itemSize - 1;
000014  e2498001          SUB      r8,r9,#1
;;;58         int middle = (first+last)/2;
000018  e0870008          ADD      r0,r7,r8
00001c  e0801fa0          ADD      r1,r0,r0,LSR #31
000020  e1a040c1          ASR      r4,r1,#1
;;;59      
;;;60         while (first <= last) 
000024  ea000014          B        |L1.124|
                  |L1.40|
;;;61         {
;;;62             if (pIPassKBItem[middle].value < target)
000028  e0841104          ADD      r1,r4,r4,LSL #2
00002c  e0811184          ADD      r1,r1,r4,LSL #3
000030  e0811006          ADD      r1,r1,r6
000034  e2810009          ADD      r0,r1,#9
000038  ebfffffe          BL       __aeabi_uread4
00003c  e1500005          CMP      r0,r5
000040  2a000001          BCS      |L1.76|
;;;63             {
;;;64                 first = middle + 1;    
000044  e2847001          ADD      r7,r4,#1
000048  ea000008          B        |L1.112|
                  |L1.76|
;;;65             }
;;;66             else if (pIPassKBItem[middle].value == target) 
00004c  e0841104          ADD      r1,r4,r4,LSL #2
000050  e0811184          ADD      r1,r1,r4,LSL #3
000054  e0811006          ADD      r1,r1,r6
000058  e2810009          ADD      r0,r1,#9
00005c  ebfffffe          BL       __aeabi_uread4
000060  e1500005          CMP      r0,r5
000064  1a000000          BNE      |L1.108|
;;;67             {
;;;68                 
;;;69                 break;
000068  ea000005          B        |L1.132|
                  |L1.108|
;;;70             }
;;;71             else
;;;72             {
;;;73                 last = middle - 1;
00006c  e2448001          SUB      r8,r4,#1
                  |L1.112|
;;;74             }
;;;75      
;;;76             middle = (first + last)/2;
000070  e0870008          ADD      r0,r7,r8
000074  e0801fa0          ADD      r1,r0,r0,LSR #31
000078  e1a040c1          ASR      r4,r1,#1
                  |L1.124|
00007c  e1570008          CMP      r7,r8                 ;60
000080  daffffe8          BLE      |L1.40|
                  |L1.132|
000084  e1a00000          MOV      r0,r0                 ;69
;;;77         }
;;;78         if (first > last)
000088  e1570008          CMP      r7,r8
00008c  da000004          BLE      |L1.164|
;;;79         {
;;;80             sysprintf("Not found! [0x%08x] is not present in the list.\n", target);
000090  e1a01005          MOV      r1,r5
000094  e28f0e11          ADR      r0,|L1.428|
000098  ebfffffe          BL       sysprintf
;;;81             return -1;
00009c  e3e00000          MVN      r0,#0
                  |L1.160|
;;;82         }
;;;83         else
;;;84         {
;;;85             sysprintf("found! [0x%08x] at location %d.: [%s]\n", target, middle+1, pIPassKBItem[middle].str);
;;;86             return middle+1;
;;;87         }
;;;88     }
0000a0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.164|
0000a4  e0840104          ADD      r0,r4,r4,LSL #2       ;85
0000a8  e0800184          ADD      r0,r0,r4,LSL #3       ;85
0000ac  e0803006          ADD      r3,r0,r6              ;85
0000b0  e2842001          ADD      r2,r4,#1              ;85
0000b4  e1a01005          MOV      r1,r5                 ;85
0000b8  e28f0e12          ADR      r0,|L1.480|
0000bc  ebfffffe          BL       sysprintf
0000c0  e2840001          ADD      r0,r4,#1              ;86
0000c4  eafffff5          B        |L1.160|
;;;89     static BOOL IPASSBLKLoad(uint8_t* data, int size, IPassBLKItem** pItem, int* itemNum)
                          ENDP

                  IPASSBLKLoad PROC
0000c8  e92d4ffe          PUSH     {r1-r11,lr}
;;;90     {
0000cc  e1a08000          MOV      r8,r0
0000d0  e1a09001          MOV      r9,r1
0000d4  e1a04002          MOV      r4,r2
0000d8  e1a05003          MOV      r5,r3
;;;91         uint8_t* pStart = data;
0000dc  e58d8008          STR      r8,[sp,#8]
;;;92         uint8_t* pEndStr = (uint8_t*)"\r\n";
0000e0  e28fae12          ADR      r10,|L1.520|
;;;93         uint8_t  itemDataLen = IPASS_BLK_ITEM_BYTE_LEN + strlen((char*)pEndStr);
0000e4  e1a0000a          MOV      r0,r10
0000e8  ebfffffe          BL       strlen
0000ec  e2800008          ADD      r0,r0,#8
0000f0  e20070ff          AND      r7,r0,#0xff
;;;94         int index = 0;
0000f4  e3a06000          MOV      r6,#0
;;;95         sysprintf("\r\n====  IPASSKBLNLoad (size = %d, itemDataLen = %d) ====\r\n", size, itemDataLen);
0000f8  e1a02007          MOV      r2,r7
0000fc  e1a01009          MOV      r1,r9
000100  e28f0f41          ADR      r0,|L1.524|
000104  ebfffffe          BL       sysprintf
;;;96         if((size%itemDataLen) != 0)
000108  e1a01007          MOV      r1,r7
00010c  e1a00009          MOV      r0,r9
000110  ebfffffe          BL       __aeabi_idivmod
000114  e3510000          CMP      r1,#0
000118  0a000007          BEQ      |L1.316|
;;;97         {
;;;98             sysprintf("IPASSKBLNLoad ERROR(maybe empty record):  [%d]\r\n", IPASS_BLK_ITEM_BYTE_LEN + strlen((char*)pEndStr));
00011c  e1a0000a          MOV      r0,r10
000120  ebfffffe          BL       strlen
000124  e280b008          ADD      r11,r0,#8
000128  e1a0100b          MOV      r1,r11
00012c  e28f0f45          ADR      r0,|L1.584|
000130  ebfffffe          BL       sysprintf
;;;99             //return FALSE;
;;;100            return TRUE;//為了不被刪除, 回應TRUE
000134  e3a00001          MOV      r0,#1
                  |L1.312|
;;;101        }
;;;102        *itemNum = size/itemDataLen;
;;;103        sysprintf("IPASSKBLNLoad *itemNum = [%d]\r\n", *itemNum);
;;;104        
;;;105        if(*pItem != NULL)
;;;106            vPortFree(*pItem);
;;;107        
;;;108        *pItem  = (IPassBLKItem*)pvPortMalloc(*itemNum * sizeof(IPassBLKItem));
;;;109        if(*pItem == NULL)
;;;110        {
;;;111            sysprintf("IPASSKBLNLoad ERROR: *pItem alloc error[%d]\r\n", *itemNum * sizeof(IPassBLKItem));
;;;112            *itemNum = 0;
;;;113            return FALSE;
;;;114        }
;;;115        for(index = 0; index < *itemNum; index++)
;;;116        {
;;;117            uint8_t* pTarget = pStart + index*itemDataLen;
;;;118            //IPassBLKItem item;
;;;119            if(memcmp((const void*)(pTarget + IPASS_BLK_ITEM_BYTE_LEN), (const void*)pEndStr, strlen((char*)pEndStr)) != 0)
;;;120            {
;;;121                sysprintf("IPASSKBLNLoad ERROR: Separator error\r\n");
;;;122                if(*pItem != NULL)
;;;123                    vPortFree(*pItem);
;;;124                *itemNum = 0;
;;;125                return FALSE;
;;;126            }
;;;127            memcpy((*pItem)[index].str, pTarget, IPASS_BLK_ITEM_BYTE_LEN);
;;;128            (*pItem)[index].str[IPASS_BLK_ITEM_BYTE_LEN] = 0x0;
;;;129            (*pItem)[index].value = BlkHexStr2Dec(((*pItem)[index].str), strlen((char*)(*pItem)[index].str));//strtol((char*)*pItem[index].str,NULL,16);
;;;130            //sysprintf(" <%08d>:[%s: 0x%08x]\r\n", index, (char*)*pItem[index].str, *pItem[index].value);        
;;;131        }  
;;;132        return TRUE;
;;;133    }
000138  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.316|
00013c  e1a01007          MOV      r1,r7                 ;102
000140  e1a00009          MOV      r0,r9                 ;102
000144  ebfffffe          BL       __aeabi_idivmod
000148  e5850000          STR      r0,[r5,#0]            ;102
00014c  e28f0f4a          ADR      r0,|L1.636|
000150  e5951000          LDR      r1,[r5,#0]            ;103
000154  ebfffffe          BL       sysprintf
000158  e5940000          LDR      r0,[r4,#0]            ;105
00015c  e3500000          CMP      r0,#0                 ;105
000160  0a000001          BEQ      |L1.364|
000164  e5940000          LDR      r0,[r4,#0]            ;106
000168  ebfffffe          BL       vPortFree
                  |L1.364|
00016c  e5951000          LDR      r1,[r5,#0]            ;108
000170  e0812101          ADD      r2,r1,r1,LSL #2       ;108
000174  e0820181          ADD      r0,r2,r1,LSL #3       ;108
000178  ebfffffe          BL       pvPortMalloc
00017c  e5840000          STR      r0,[r4,#0]            ;108
000180  e5940000          LDR      r0,[r4,#0]            ;109
000184  e3500000          CMP      r0,#0                 ;109
000188  1a00004f          BNE      |L1.716|
00018c  e5950000          LDR      r0,[r5,#0]            ;111
000190  e0802100          ADD      r2,r0,r0,LSL #2       ;111
000194  e0821180          ADD      r1,r2,r0,LSL #3       ;111
000198  e28f00fc          ADR      r0,|L1.668|
00019c  ebfffffe          BL       sysprintf
0001a0  e3a00000          MOV      r0,#0                 ;112
0001a4  e5850000          STR      r0,[r5,#0]            ;112
0001a8  eaffffe2          B        |L1.312|
                  |L1.428|
0001ac  4e6f7420          DCB      "Not found! [0x%08x] is not present in the list.\n",0
0001b0  666f756e
0001b4  6421205b
0001b8  30782530
0001bc  38785d20
0001c0  6973206e
0001c4  6f742070
0001c8  72657365
0001cc  6e742069
0001d0  6e207468
0001d4  65206c69
0001d8  73742e0a
0001dc  00      
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0
                  |L1.480|
0001e0  666f756e          DCB      "found! [0x%08x] at location %d.: [%s]\n",0
0001e4  6421205b
0001e8  30782530
0001ec  38785d20
0001f0  6174206c
0001f4  6f636174
0001f8  696f6e20
0001fc  25642e3a
000200  205b2573
000204  5d0a00  
000207  00                DCB      0
                  |L1.520|
000208  0d0a00            DCB      "\r\n",0
00020b  00                DCB      0
                  |L1.524|
00020c  0d0a3d3d          DCB      "\r\n====  IPASSKBLNLoad (size = %d, itemDataLen = %d) ="
000210  3d3d2020
000214  49504153
000218  534b424c
00021c  4e4c6f61
000220  64202873
000224  697a6520
000228  3d202564
00022c  2c206974
000230  656d4461
000234  74614c65
000238  6e203d20
00023c  25642920
000240  3d      
000241  3d3d3d0d          DCB      "===\r\n",0
000245  0a00    
000247  00                DCB      0
                  |L1.584|
000248  49504153          DCB      "IPASSKBLNLoad ERROR(maybe empty record):  [%d]\r\n",0
00024c  534b424c
000250  4e4c6f61
000254  64204552
000258  524f5228
00025c  6d617962
000260  6520656d
000264  70747920
000268  7265636f
00026c  7264293a
000270  20205b25
000274  645d0d0a
000278  00      
000279  00                DCB      0
00027a  00                DCB      0
00027b  00                DCB      0
                  |L1.636|
00027c  49504153          DCB      "IPASSKBLNLoad *itemNum = [%d]\r\n",0
000280  534b424c
000284  4e4c6f61
000288  64202a69
00028c  74656d4e
000290  756d203d
000294  205b2564
000298  5d0d0a00
                  |L1.668|
00029c  49504153          DCB      "IPASSKBLNLoad ERROR: *pItem alloc error[%d]\r\n",0
0002a0  534b424c
0002a4  4e4c6f61
0002a8  64204552
0002ac  524f523a
0002b0  202a7049
0002b4  74656d20
0002b8  616c6c6f
0002bc  63206572
0002c0  726f725b
0002c4  25645d0d
0002c8  0a00    
0002ca  00                DCB      0
0002cb  00                DCB      0
                  |L1.716|
0002cc  e3a06000          MOV      r6,#0                 ;115
0002d0  ea000036          B        |L1.944|
                  |L1.724|
0002d4  e59d0008          LDR      r0,[sp,#8]            ;117
0002d8  e02b0796          MLA      r11,r6,r7,r0          ;117
0002dc  e1a0000a          MOV      r0,r10                ;119
0002e0  ebfffffe          BL       strlen
0002e4  e58d0004          STR      r0,[sp,#4]            ;119
0002e8  e1a02000          MOV      r2,r0                 ;119
0002ec  e1a0100a          MOV      r1,r10                ;119
0002f0  e28b0008          ADD      r0,r11,#8             ;119
0002f4  ebfffffe          BL       memcmp
0002f8  e3500000          CMP      r0,#0                 ;119
0002fc  0a000009          BEQ      |L1.808|
000300  e28f0e1b          ADR      r0,|L1.1208|
000304  ebfffffe          BL       sysprintf
000308  e5940000          LDR      r0,[r4,#0]            ;122
00030c  e3500000          CMP      r0,#0                 ;122
000310  0a000001          BEQ      |L1.796|
000314  e5940000          LDR      r0,[r4,#0]            ;123
000318  ebfffffe          BL       vPortFree
                  |L1.796|
00031c  e3a00000          MOV      r0,#0                 ;124
000320  e5850000          STR      r0,[r5,#0]            ;124
000324  eaffff83          B        |L1.312|
                  |L1.808|
000328  e0862106          ADD      r2,r6,r6,LSL #2       ;127
00032c  e0822186          ADD      r2,r2,r6,LSL #3       ;127
000330  e5941000          LDR      r1,[r4,#0]            ;127
000334  e0810002          ADD      r0,r1,r2              ;127
000338  e3a02008          MOV      r2,#8                 ;127
00033c  e1a0100b          MOV      r1,r11                ;127
000340  ebfffffe          BL       __aeabi_memcpy
000344  e3a00000          MOV      r0,#0                 ;128
000348  e0862106          ADD      r2,r6,r6,LSL #2       ;128
00034c  e0822186          ADD      r2,r2,r6,LSL #3       ;128
000350  e5941000          LDR      r1,[r4,#0]            ;128
000354  e0811002          ADD      r1,r1,r2              ;128
000358  e5c10008          STRB     r0,[r1,#8]            ;128
00035c  e0862106          ADD      r2,r6,r6,LSL #2       ;129
000360  e0822186          ADD      r2,r2,r6,LSL #3       ;129
000364  e5941000          LDR      r1,[r4,#0]            ;129
000368  e0810002          ADD      r0,r1,r2              ;129
00036c  ebfffffe          BL       strlen
000370  e58d0000          STR      r0,[sp,#0]            ;129
000374  e0862106          ADD      r2,r6,r6,LSL #2       ;129
000378  e0822186          ADD      r2,r2,r6,LSL #3       ;129
00037c  e5941000          LDR      r1,[r4,#0]            ;129
000380  e0810002          ADD      r0,r1,r2              ;129
000384  e59d1000          LDR      r1,[sp,#0]            ;129
000388  ebfffffe          BL       BlkHexStr2Dec
00038c  e58d0004          STR      r0,[sp,#4]            ;129
000390  e0862106          ADD      r2,r6,r6,LSL #2       ;129
000394  e0822186          ADD      r2,r2,r6,LSL #3       ;129
000398  e5940000          LDR      r0,[r4,#0]            ;129
00039c  e0800002          ADD      r0,r0,r2              ;129
0003a0  e2801009          ADD      r1,r0,#9              ;129
0003a4  e59d0004          LDR      r0,[sp,#4]            ;129
0003a8  ebfffffe          BL       __aeabi_uwrite4
0003ac  e2866001          ADD      r6,r6,#1              ;115
                  |L1.944|
0003b0  e5950000          LDR      r0,[r5,#0]            ;115
0003b4  e1500006          CMP      r0,r6                 ;115
0003b8  caffffc5          BGT      |L1.724|
0003bc  e3a00001          MOV      r0,#1                 ;132
0003c0  eaffff5c          B        |L1.312|
;;;134    /*-----------------------------------------*/
                          ENDP

                  IPASSBLKLoadFile PROC
;;;190    #endif
;;;191    static BOOL IPASSBLKLoadFile(int* index, char* fileName)
0003c4  e92d4070          PUSH     {r4-r6,lr}
;;;192    {
0003c8  e24dd018          SUB      sp,sp,#0x18
0003cc  e1a05000          MOV      r5,r0
0003d0  e1a06001          MOV      r6,r1
;;;193    ////#ifdef _PC_ENV_
;;;194    //    return FALSE;
;;;195    //#else
;;;196        uint8_t* dataTmp;
;;;197        size_t dataTmpLen;
;;;198        BOOL needFree;
;;;199        FileAgentReturn reVal;  
;;;200      
;;;201        if(strlen(fileName) == 0)
0003d4  e1a00006          MOV      r0,r6
0003d8  ebfffffe          BL       strlen
0003dc  e3500000          CMP      r0,#0
0003e0  1a000004          BNE      |L1.1016|
;;;202        {
;;;203            sysprintf(" >> IPASSBLKLoadFile error: strlen(fileName) == 0 ... \n");
0003e4  e28f00f4          ADR      r0,|L1.1248|
0003e8  ebfffffe          BL       sysprintf
;;;204            return FALSE;
0003ec  e3a00000          MOV      r0,#0
                  |L1.1008|
0003f0  e28dd018          ADD      sp,sp,#0x18
;;;205        }
;;;206        sysprintf(" >> IPASSBLKLoadFile[%s] ... \n", fileName);
;;;207    
;;;208        reVal = FileAgentGetData(IPASS_BLK_FILE_SAVE_POSITION, IPASS_BLK_FILE_DIR, fileName, &dataTmp, &dataTmpLen, &needFree, TRUE);
;;;209        if(reVal != FILE_AGENT_RETURN_ERROR)
;;;210        { 
;;;211            sysprintf(" >> IPASSBLKLoadFile FileAgentGetData OK (dataTmpLen = %d)... \n", dataTmpLen);
;;;212            if(IPASSBLKLoad(dataTmp, dataTmpLen, &pIPASSKBLNData[*index], &IPASSBLKItemNumber[*index]))
;;;213            {
;;;214            }
;;;215            else
;;;216            {
;;;217                sysprintf(" >> IPASSBLKLoadFile delete [%s] ... \n", fileName);
;;;218                FileAgentDelFile(ECC_BLK_FILE_SAVE_POSITION, ECC_BLK_FILE_DIR, fileName);
;;;219            }
;;;220            if(needFree)
;;;221            {
;;;222                vPortFree(dataTmp);                            
;;;223            }  
;;;224                    
;;;225        }
;;;226        else
;;;227        {
;;;228             sysprintf(" >> IPASSBLKLoadFile FileAgentGetData return %d... \n", reVal);
;;;229        }
;;;230    
;;;231        return FALSE;
;;;232    //#endif
;;;233    }
0003f4  e8bd8070          POP      {r4-r6,pc}
                  |L1.1016|
0003f8  e1a01006          MOV      r1,r6                 ;206
0003fc  e28f0f45          ADR      r0,|L1.1304|
000400  ebfffffe          BL       sysprintf
000404  e3a00001          MOV      r0,#1                 ;208
000408  e28d100c          ADD      r1,sp,#0xc            ;208
00040c  e28d2010          ADD      r2,sp,#0x10           ;208
000410  e58d0008          STR      r0,[sp,#8]            ;208
000414  e58d1004          STR      r1,[sp,#4]            ;208
000418  e58d2000          STR      r2,[sp,#0]            ;208
00041c  e28d3014          ADD      r3,sp,#0x14           ;208
000420  e1a02006          MOV      r2,r6                 ;208
000424  e28f1f43          ADR      r1,|L1.1336|
000428  e3a00000          MOV      r0,#0                 ;208
00042c  ebfffffe          BL       FileAgentGetData
000430  e1a04000          MOV      r4,r0                 ;208
000434  e3540000          CMP      r4,#0                 ;209
000438  0a000019          BEQ      |L1.1188|
00043c  e28f00f8          ADR      r0,|L1.1340|
000440  e59d1010          LDR      r1,[sp,#0x10]         ;211
000444  ebfffffe          BL       sysprintf
000448  e59f112c          LDR      r1,|L1.1404|
00044c  e5950000          LDR      r0,[r5,#0]            ;212
000450  e0813100          ADD      r3,r1,r0,LSL #2       ;212
000454  e59f1124          LDR      r1,|L1.1408|
000458  e0812100          ADD      r2,r1,r0,LSL #2       ;212
00045c  e59d0014          LDR      r0,[sp,#0x14]         ;212
000460  e59d1010          LDR      r1,[sp,#0x10]         ;212
000464  ebfffffe          BL       IPASSBLKLoad
000468  e3500000          CMP      r0,#0                 ;212
00046c  1a000006          BNE      |L1.1164|
000470  e1a01006          MOV      r1,r6                 ;217
000474  e28f0f42          ADR      r0,|L1.1412|
000478  ebfffffe          BL       sysprintf
00047c  e1a02006          MOV      r2,r6                 ;218
000480  e28f10b0          ADR      r1,|L1.1336|
000484  e3a00000          MOV      r0,#0                 ;218
000488  ebfffffe          BL       FileAgentDelFile
                  |L1.1164|
00048c  e5dd000c          LDRB     r0,[sp,#0xc]          ;220
000490  e3500000          CMP      r0,#0                 ;220
000494  0a000005          BEQ      |L1.1200|
000498  e59d0014          LDR      r0,[sp,#0x14]         ;222
00049c  ebfffffe          BL       vPortFree
0004a0  ea000002          B        |L1.1200|
                  |L1.1188|
0004a4  e1a01004          MOV      r1,r4                 ;228
0004a8  e28f00fc          ADR      r0,|L1.1452|
0004ac  ebfffffe          BL       sysprintf
                  |L1.1200|
0004b0  e3a00000          MOV      r0,#0                 ;231
0004b4  eaffffcd          B        |L1.1008|
                  |L1.1208|
0004b8  49504153          DCB      "IPASSKBLNLoad ERROR: Separator error\r\n",0
0004bc  534b424c
0004c0  4e4c6f61
0004c4  64204552
0004c8  524f523a
0004cc  20536570
0004d0  61726174
0004d4  6f722065
0004d8  72726f72
0004dc  0d0a00  
0004df  00                DCB      0
                  |L1.1248|
0004e0  203e3e20          DCB      " >> IPASSBLKLoadFile error: strlen(fileName) == 0 ... \n"
0004e4  49504153
0004e8  53424c4b
0004ec  4c6f6164
0004f0  46696c65
0004f4  20657272
0004f8  6f723a20
0004fc  7374726c
000500  656e2866
000504  696c654e
000508  616d6529
00050c  203d3d20
000510  30202e2e
000514  2e200a  
000517  00                DCB      0
                  |L1.1304|
000518  203e3e20          DCB      " >> IPASSBLKLoadFile[%s] ... \n",0
00051c  49504153
000520  53424c4b
000524  4c6f6164
000528  46696c65
00052c  5b25735d
000530  202e2e2e
000534  200a00  
000537  00                DCB      0
                  |L1.1336|
000538  313a00            DCB      "1:",0
00053b  00                DCB      0
                  |L1.1340|
00053c  203e3e20          DCB      " >> IPASSBLKLoadFile FileAgentGetData OK (dataTmpLen = "
000540  49504153
000544  53424c4b
000548  4c6f6164
00054c  46696c65
000550  2046696c
000554  65416765
000558  6e744765
00055c  74446174
000560  61204f4b
000564  20286461
000568  7461546d
00056c  704c656e
000570  203d20  
000573  2564292e          DCB      "%d)... \n",0
000577  2e2e200a
00057b  00      
                  |L1.1404|
                          DCD      IPASSBLKItemNumber
                  |L1.1408|
                          DCD      pIPASSKBLNData
                  |L1.1412|
000584  203e3e20          DCB      " >> IPASSBLKLoadFile delete [%s] ... \n",0
000588  49504153
00058c  53424c4b
000590  4c6f6164
000594  46696c65
000598  2064656c
00059c  65746520
0005a0  5b25735d
0005a4  202e2e2e
0005a8  200a00  
0005ab  00                DCB      0
                  |L1.1452|
0005ac  203e3e20          DCB      " >> IPASSBLKLoadFile FileAgentGetData return %d... \n",0
0005b0  49504153
0005b4  53424c4b
0005b8  4c6f6164
0005bc  46696c65
0005c0  2046696c
0005c4  65416765
0005c8  6e744765
0005cc  74446174
0005d0  61207265
0005d4  7475726e
0005d8  2025642e
0005dc  2e2e200a
0005e0  00      
0005e1  00                DCB      0
0005e2  00                DCB      0
0005e3  00                DCB      0
                          ENDP

                  blkCallback PROC
;;;235    #else
;;;236    static BOOL blkCallback(char* dir, char* filename, int fileLen, void* para1, void* para2, void* para3, void* para4, void* para5)
0005e4  e92d5ff0          PUSH     {r4-r12,lr}
;;;237    {   
0005e8  e1a0b000          MOV      r11,r0
0005ec  e1a06001          MOV      r6,r1
0005f0  e1a05003          MOV      r5,r3
0005f4  e28da028          ADD      r10,sp,#0x28
0005f8  e89a0780          LDM      r10,{r7-r10}
;;;238        int* index = (int*)para1;
0005fc  e1a04005          MOV      r4,r5
;;;239        if(*index >= IPASS_BLK_MAX_FILE_NUM)
000600  e5940000          LDR      r0,[r4,#0]
000604  e3500002          CMP      r0,#2
000608  ba000006          BLT      |L1.1576|
;;;240        {
;;;241            sysprintf(" >> [IPASS] blkCallback [%s] ignore: index = %d(%d)... \n", filename, currentDataIndex, *index);
00060c  e59f0128          LDR      r0,|L1.1852|
000610  e5943000          LDR      r3,[r4,#0]
000614  e1a01006          MOV      r1,r6
000618  e5902000          LDR      r2,[r0,#0]  ; currentDataIndex
00061c  e28f0f47          ADR      r0,|L1.1856|
000620  ebfffffe          BL       sysprintf
000624  ea00000b          B        |L1.1624|
                  |L1.1576|
;;;242        }
;;;243        else
;;;244        {
;;;245            sysprintf(" >> [IPASS] blkCallback [%s]: index = %d(%d)... \n", filename, currentDataIndex, *index);
000628  e59f010c          LDR      r0,|L1.1852|
00062c  e5943000          LDR      r3,[r4,#0]
000630  e1a01006          MOV      r1,r6
000634  e5902000          LDR      r2,[r0,#0]  ; currentDataIndex
000638  e28f0f4f          ADR      r0,|L1.1916|
00063c  ebfffffe          BL       sysprintf
;;;246            IPASSBLKLoadFile(index, filename);
000640  e1a01006          MOV      r1,r6
000644  e1a00004          MOV      r0,r4
000648  ebfffffe          BL       IPASSBLKLoadFile
;;;247            *index = *index + 1;
00064c  e5940000          LDR      r0,[r4,#0]
000650  e2800001          ADD      r0,r0,#1
000654  e5840000          STR      r0,[r4,#0]
                  |L1.1624|
;;;248        }
;;;249        
;;;250        return TRUE;
000658  e3a00001          MOV      r0,#1
;;;251    }
00065c  e8bd9ff0          POP      {r4-r12,pc}
;;;252    #endif
                          ENDP

                  IPASSBLKLoadAllFile PROC
;;;253    
;;;254    BOOL IPASSBLKLoadAllFile(void)
000660  e92d4010          PUSH     {r4,lr}
;;;255    {
;;;256        sysprintf(" >> [IPASS] IPASSBLKLoadAllFile... \n");
000664  e28f0f51          ADR      r0,|L1.1968|
000668  ebfffffe          BL       sysprintf
;;;257    
;;;258        currentDataIndex = 0;
00066c  e3a00000          MOV      r0,#0
000670  e59f10c4          LDR      r1,|L1.1852|
000674  e5810000          STR      r0,[r1,#0]  ; currentDataIndex
;;;259        for(int i = 0; i<IPASS_BLK_MAX_FILE_NUM; i++)
000678  e1a00000          MOV      r0,r0
00067c  ea000003          B        |L1.1680|
                  |L1.1664|
;;;260        {
;;;261            //pIPASSKBLNData[i] = NULL;
;;;262            IPASSBLKItemNumber[i] = 0;
000680  e3a01000          MOV      r1,#0
000684  e51f2110          LDR      r2,|L1.1404|
000688  e7821100          STR      r1,[r2,r0,LSL #2]
00068c  e2800001          ADD      r0,r0,#1              ;259
                  |L1.1680|
000690  e3500002          CMP      r0,#2                 ;259
000694  bafffff9          BLT      |L1.1664|
;;;263        }
;;;264    #ifdef _PC_ENV_
;;;265        int index = 0;
;;;266        IPASSBLKLoadFile(&index, ".//KBLN_2017061801.DAT");   
;;;267    #else
;;;268    //    FileAgentGetList(IPASS_BLK_FILE_SAVE_POSITION, IPASS_BLK_FILE_DIR, FILE_EXTENSION_EX(IPASS_BLK_FILE_EXTENSION), NULL, blkCallback, &currentDataIndex, NULL, NULL, NULL, NULL);
;;;269    #endif
;;;270        return TRUE;
000698  e3a00001          MOV      r0,#1
;;;271    
;;;272    }
00069c  e8bd8010          POP      {r4,pc}
;;;273    
                          ENDP

                  IPASSBLKSearchTargetID PROC
;;;274    int IPASSBLKSearchTargetID(uint32_t target)
0006a0  e92d4070          PUSH     {r4-r6,lr}
;;;275    {
0006a4  e1a06000          MOV      r6,r0
;;;276        int i = 0;
0006a8  e3a04000          MOV      r4,#0
;;;277        int reVal = -1;
0006ac  e3e05000          MVN      r5,#0
;;;278        for(i = 0; i<IPASS_BLK_MAX_FILE_NUM; i++)
0006b0  e1a00000          MOV      r0,r0
0006b4  ea000012          B        |L1.1796|
                  |L1.1720|
;;;279        {
;;;280            if((pIPASSKBLNData[i] == NULL) || (IPASSBLKItemNumber[i] == 0))
0006b8  e51f0140          LDR      r0,|L1.1408|
0006bc  e7900104          LDR      r0,[r0,r4,LSL #2]
0006c0  e3500000          CMP      r0,#0
0006c4  0a00000d          BEQ      |L1.1792|
0006c8  e51f0154          LDR      r0,|L1.1404|
0006cc  e7900104          LDR      r0,[r0,r4,LSL #2]
0006d0  e3500000          CMP      r0,#0
0006d4  0a000009          BEQ      |L1.1792|
;;;281            {
;;;282              
;;;283            }
;;;284            else
;;;285            {  
;;;286                reVal = searchTargetID(target, pIPASSKBLNData[i], IPASSBLKItemNumber[i]);
0006d8  e51f0164          LDR      r0,|L1.1404|
0006dc  e7902104          LDR      r2,[r0,r4,LSL #2]
0006e0  e51f0168          LDR      r0,|L1.1408|
0006e4  e7901104          LDR      r1,[r0,r4,LSL #2]
0006e8  e1a00006          MOV      r0,r6
0006ec  ebfffffe          BL       searchTargetID
0006f0  e1a05000          MOV      r5,r0
;;;287                if(reVal != -1)
0006f4  e3750001          CMN      r5,#1
0006f8  0a000000          BEQ      |L1.1792|
;;;288                    break;
0006fc  ea000002          B        |L1.1804|
                  |L1.1792|
000700  e2844001          ADD      r4,r4,#1              ;278
                  |L1.1796|
000704  e3540002          CMP      r4,#2                 ;278
000708  baffffea          BLT      |L1.1720|
                  |L1.1804|
00070c  e1a00000          MOV      r0,r0
;;;289            }
;;;290        }
;;;291        return reVal;
000710  e1a00005          MOV      r0,r5
;;;292    }
000714  e8bd8070          POP      {r4-r6,pc}
;;;293    
                          ENDP

                  IPASSBLKSearchTargetIDByString PROC
;;;294    int IPASSBLKSearchTargetIDByString(uint8_t* str, int size)
000718  e92d4070          PUSH     {r4-r6,lr}
;;;295    {
00071c  e1a04000          MOV      r4,r0
000720  e1a05001          MOV      r5,r1
;;;296        return IPASSBLKSearchTargetID(BlkHexStr2Dec(str, size));
000724  e1a01005          MOV      r1,r5
000728  e1a00004          MOV      r0,r4
00072c  ebfffffe          BL       BlkHexStr2Dec
000730  e1a06000          MOV      r6,r0
000734  ebfffffe          BL       IPASSBLKSearchTargetID
;;;297    }
000738  e8bd8070          POP      {r4-r6,pc}
;;;298    
                          ENDP

                  |L1.1852|
                          DCD      currentDataIndex
                  |L1.1856|
000740  203e3e20          DCB      " >> [IPASS] blkCallback [%s] ignore: index = %d(%d)... "
000744  5b495041
000748  53535d20
00074c  626c6b43
000750  616c6c62
000754  61636b20
000758  5b25735d
00075c  2069676e
000760  6f72653a
000764  20696e64
000768  6578203d
00076c  20256428
000770  2564292e
000774  2e2e20  
000777  0a00              DCB      "\n",0
000779  00                DCB      0
00077a  00                DCB      0
00077b  00                DCB      0
                  |L1.1916|
00077c  203e3e20          DCB      " >> [IPASS] blkCallback [%s]: index = %d(%d)... \n",0
000780  5b495041
000784  53535d20
000788  626c6b43
00078c  616c6c62
000790  61636b20
000794  5b25735d
000798  3a20696e
00079c  64657820
0007a0  3d202564
0007a4  28256429
0007a8  2e2e2e20
0007ac  0a00    
0007ae  00                DCB      0
0007af  00                DCB      0
                  |L1.1968|
0007b0  203e3e20          DCB      " >> [IPASS] IPASSBLKLoadAllFile... \n",0
0007b4  5b495041
0007b8  53535d20
0007bc  49504153
0007c0  53424c4b
0007c4  4c6f6164
0007c8  416c6c46
0007cc  696c652e
0007d0  2e2e200a
0007d4  00      
0007d5  00                DCB      0
0007d6  00                DCB      0
0007d7  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  IPASSBLKItemNumber
                          DCD      0x00000000
                          DCD      0x00000000
                  pIPASSKBLNData
                          DCD      0x00000000
                          DCD      0x00000000
                  currentDataIndex
                          DCD      0x00000000
