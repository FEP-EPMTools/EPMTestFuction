; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_allocator.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_allocator.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_allocator.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_allocator.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  list_add PROC
;;;52     /* Add an element to a list */
;;;53     static __inline void list_add(struct list_head *new_entry,
000000  e5912000          LDR      r2,[r1,#0]
;;;54     				struct list_head *list)
;;;55     {
;;;56     	struct list_head *list_next = list->next;
;;;57     
;;;58     	list->next = new_entry;
000004  e5810000          STR      r0,[r1,#0]
;;;59     	new_entry->prev = list;
000008  e5801004          STR      r1,[r0,#4]
;;;60     	new_entry->next = list_next;
00000c  e5802000          STR      r2,[r0,#0]
;;;61     	list_next->prev = new_entry;
000010  e5820004          STR      r0,[r2,#4]
;;;62     
;;;63     }
000014  e12fff1e          BX       lr
;;;64     
                          ENDP

                  yaffs_deinit_raw_tnodes PROC
;;;58     
;;;59     static void yaffs_deinit_raw_tnodes(struct yaffs_dev *dev)
000018  e92d4070          PUSH     {r4-r6,lr}
;;;60     {
00001c  e1a05000          MOV      r5,r0
;;;61     	struct yaffs_allocator *allocator =
000020  e5954138          LDR      r4,[r5,#0x138]
;;;62     	    (struct yaffs_allocator *)dev->allocator;
;;;63     	struct yaffs_tnode_list *tmp;
;;;64     
;;;65     	if (!allocator) {
000024  e3540000          CMP      r4,#0
000028  1a000006          BNE      |L1.72|
;;;66     		BUG();
00002c  e1a00000          MOV      r0,r0
000030  e3a02042          MOV      r2,#0x42
000034  e28f1e1f          ADR      r1,|L1.556|
000038  e28f0f8a          ADR      r0,|L1.616|
00003c  ebfffffe          BL       sysprintf
000040  e1a00000          MOV      r0,r0
                  |L1.68|
;;;67     		return;
;;;68     	}
;;;69     
;;;70     	while (allocator->alloc_tnode_list) {
;;;71     		tmp = allocator->alloc_tnode_list->next;
;;;72     
;;;73     		yaffs_free(allocator->alloc_tnode_list->tnodes);
;;;74     		yaffs_free(allocator->alloc_tnode_list);
;;;75     		allocator->alloc_tnode_list = tmp;
;;;76     	}
;;;77     
;;;78     	allocator->free_tnodes = NULL;
;;;79     	allocator->n_free_tnodes = 0;
;;;80     	allocator->n_tnodes_created = 0;
;;;81     }
000044  e8bd8070          POP      {r4-r6,pc}
                  |L1.72|
000048  ea000007          B        |L1.108|
                  |L1.76|
00004c  e594000c          LDR      r0,[r4,#0xc]          ;71
000050  e5906000          LDR      r6,[r0,#0]            ;71
000054  e594100c          LDR      r1,[r4,#0xc]          ;73
000058  e5910004          LDR      r0,[r1,#4]            ;73
00005c  ebfffffe          BL       yaffs_free
000060  e594000c          LDR      r0,[r4,#0xc]          ;74
000064  ebfffffe          BL       yaffs_free
000068  e584600c          STR      r6,[r4,#0xc]          ;75
                  |L1.108|
00006c  e594000c          LDR      r0,[r4,#0xc]          ;70
000070  e3500000          CMP      r0,#0                 ;70
000074  1afffff4          BNE      |L1.76|
000078  e3a00000          MOV      r0,#0                 ;78
00007c  e5840004          STR      r0,[r4,#4]            ;78
000080  e5840008          STR      r0,[r4,#8]            ;79
000084  e5840000          STR      r0,[r4,#0]            ;80
000088  e1a00000          MOV      r0,r0
00008c  eaffffec          B        |L1.68|
;;;82     
                          ENDP

                  yaffs_init_raw_tnodes PROC
;;;83     static void yaffs_init_raw_tnodes(struct yaffs_dev *dev)
000090  e92d4070          PUSH     {r4-r6,lr}
;;;84     {
000094  e1a05000          MOV      r5,r0
;;;85     	struct yaffs_allocator *allocator = dev->allocator;
000098  e5954138          LDR      r4,[r5,#0x138]
;;;86     
;;;87     	if (!allocator) {
00009c  e3540000          CMP      r4,#0
0000a0  1a000006          BNE      |L1.192|
;;;88     		BUG();
0000a4  e1a00000          MOV      r0,r0
0000a8  e3a02058          MOV      r2,#0x58
0000ac  e28f1f5e          ADR      r1,|L1.556|
0000b0  e28f0e1b          ADR      r0,|L1.616|
0000b4  ebfffffe          BL       sysprintf
0000b8  e1a00000          MOV      r0,r0
                  |L1.188|
;;;89     		return;
;;;90     	}
;;;91     
;;;92     	allocator->alloc_tnode_list = NULL;
;;;93     	allocator->free_tnodes = NULL;
;;;94     	allocator->n_free_tnodes = 0;
;;;95     	allocator->n_tnodes_created = 0;
;;;96     }
0000bc  e8bd8070          POP      {r4-r6,pc}
                  |L1.192|
0000c0  e3a00000          MOV      r0,#0                 ;92
0000c4  e584000c          STR      r0,[r4,#0xc]          ;92
0000c8  e5840004          STR      r0,[r4,#4]            ;93
0000cc  e5840008          STR      r0,[r4,#8]            ;94
0000d0  e5840000          STR      r0,[r4,#0]            ;95
0000d4  e1a00000          MOV      r0,r0
0000d8  eafffff7          B        |L1.188|
;;;97     
                          ENDP

                  yaffs_create_tnodes PROC
;;;98     static int yaffs_create_tnodes(struct yaffs_dev *dev, int n_tnodes)
0000dc  e92d4ff8          PUSH     {r3-r11,lr}
;;;99     {
0000e0  e1a07000          MOV      r7,r0
0000e4  e1a06001          MOV      r6,r1
;;;100    	struct yaffs_allocator *allocator =
0000e8  e5974138          LDR      r4,[r7,#0x138]
;;;101    	    (struct yaffs_allocator *)dev->allocator;
;;;102    	int i;
;;;103    	struct yaffs_tnode *new_tnodes;
;;;104    	u8 *mem;
;;;105    	struct yaffs_tnode *curr;
;;;106    	struct yaffs_tnode *next;
;;;107    	struct yaffs_tnode_list *tnl;
;;;108    
;;;109    	if (!allocator) {
0000ec  e3540000          CMP      r4,#0
0000f0  1a000007          BNE      |L1.276|
;;;110    		BUG();
0000f4  e1a00000          MOV      r0,r0
0000f8  e3a0206e          MOV      r2,#0x6e
0000fc  e28f1f4a          ADR      r1,|L1.556|
000100  e28f0e16          ADR      r0,|L1.616|
000104  ebfffffe          BL       sysprintf
000108  e1a00000          MOV      r0,r0
;;;111    		return YAFFS_FAIL;
00010c  e3a00000          MOV      r0,#0
                  |L1.272|
;;;112    	}
;;;113    
;;;114    	if (n_tnodes < 1)
;;;115    		return YAFFS_OK;
;;;116    
;;;117    	/* make these things */
;;;118    // 	new_tnodes = kmalloc(n_tnodes * dev->tnode_size, GFP_NOFS);
;;;119    	new_tnodes = yaffs_malloc(n_tnodes * dev->tnode_size);
;;;120    	mem = (u8 *) new_tnodes;
;;;121    
;;;122    	if (!new_tnodes) {
;;;123    		yaffs_trace(YAFFS_TRACE_ERROR,
;;;124    			"yaffs: Could not allocate Tnodes");
;;;125    		return YAFFS_FAIL;
;;;126    	}
;;;127    
;;;128    	/* New hookup for wide tnodes */
;;;129    	for (i = 0; i < n_tnodes - 1; i++) {
;;;130    		curr = (struct yaffs_tnode *)&mem[i * dev->tnode_size];
;;;131    		next = (struct yaffs_tnode *)&mem[(i + 1) * dev->tnode_size];
;;;132    		curr->internal[0] = next;
;;;133    	}
;;;134    
;;;135    	curr = (struct yaffs_tnode *)&mem[(n_tnodes - 1) * dev->tnode_size];
;;;136    	curr->internal[0] = allocator->free_tnodes;
;;;137    	allocator->free_tnodes = (struct yaffs_tnode *)mem;
;;;138    
;;;139    	allocator->n_free_tnodes += n_tnodes;
;;;140    	allocator->n_tnodes_created += n_tnodes;
;;;141    
;;;142    	/* Now add this bunch of tnodes to a list for freeing up.
;;;143    	 * NB If we can't add this to the management list it isn't fatal
;;;144    	 * but it just means we can't free this bunch of tnodes later.
;;;145    	 */
;;;146    //	tnl = kmalloc(sizeof(struct yaffs_tnode_list), GFP_NOFS);
;;;147    	tnl = yaffs_malloc(sizeof(struct yaffs_tnode_list));
;;;148    	if (!tnl) {
;;;149    		yaffs_trace(YAFFS_TRACE_ERROR,
;;;150    			"Could not add tnodes to management list");
;;;151    		return YAFFS_FAIL;
;;;152    	} else {
;;;153    		tnl->tnodes = new_tnodes;
;;;154    		tnl->next = allocator->alloc_tnode_list;
;;;155    		allocator->alloc_tnode_list = tnl;
;;;156    	}
;;;157    
;;;158    	yaffs_trace(YAFFS_TRACE_ALLOCATE, "Tnodes added");
;;;159    
;;;160    	return YAFFS_OK;
;;;161    }
000110  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.276|
000114  e3560001          CMP      r6,#1                 ;114
000118  aa000001          BGE      |L1.292|
00011c  e3a00001          MOV      r0,#1                 ;115
000120  eafffffa          B        |L1.272|
                  |L1.292|
000124  e59710b4          LDR      r1,[r7,#0xb4]         ;119
000128  e0000691          MUL      r0,r1,r6              ;119
00012c  ebfffffe          BL       yaffs_malloc
000130  e1a0a000          MOV      r10,r0                ;119
000134  e1a0500a          MOV      r5,r10                ;120
000138  e35a0000          CMP      r10,#0                ;122
00013c  1a000007          BNE      |L1.352|
000140  e59f0138          LDR      r0,|L1.640|
000144  e5900000          LDR      r0,[r0,#0]            ;123  ; yaffs_trace_mask
000148  e3100101          TST      r0,#0x40000000        ;123
00014c  0a000001          BEQ      |L1.344|
000150  e28f0f4b          ADR      r0,|L1.644|
000154  ebfffffe          BL       sysprintf
                  |L1.344|
000158  e3a00000          MOV      r0,#0                 ;125
00015c  eaffffeb          B        |L1.272|
                  |L1.352|
000160  e3a09000          MOV      r9,#0                 ;129
000164  ea000008          B        |L1.396|
                  |L1.360|
000168  e59700b4          LDR      r0,[r7,#0xb4]         ;130
00016c  e02b5099          MLA      r11,r9,r0,r5          ;130
000170  e2891001          ADD      r1,r9,#1              ;131
000174  e59700b4          LDR      r0,[r7,#0xb4]         ;131
000178  e0205091          MLA      r0,r1,r0,r5           ;131
00017c  e58d0000          STR      r0,[sp,#0]            ;131
000180  e59d0000          LDR      r0,[sp,#0]            ;132
000184  e58b0000          STR      r0,[r11,#0]           ;132
000188  e2899001          ADD      r9,r9,#1              ;129
                  |L1.396|
00018c  e2460001          SUB      r0,r6,#1              ;129
000190  e1500009          CMP      r0,r9                 ;129
000194  cafffff3          BGT      |L1.360|
000198  e2460001          SUB      r0,r6,#1              ;135
00019c  e59710b4          LDR      r1,[r7,#0xb4]         ;135
0001a0  e02b5190          MLA      r11,r0,r1,r5          ;135
0001a4  e5940004          LDR      r0,[r4,#4]            ;136
0001a8  e58b0000          STR      r0,[r11,#0]           ;136
0001ac  e5845004          STR      r5,[r4,#4]            ;137
0001b0  e5940008          LDR      r0,[r4,#8]            ;139
0001b4  e0800006          ADD      r0,r0,r6              ;139
0001b8  e5840008          STR      r0,[r4,#8]            ;139
0001bc  e5940000          LDR      r0,[r4,#0]            ;140
0001c0  e0800006          ADD      r0,r0,r6              ;140
0001c4  e5840000          STR      r0,[r4,#0]            ;140
0001c8  e3a00008          MOV      r0,#8                 ;147
0001cc  ebfffffe          BL       yaffs_malloc
0001d0  e1a08000          MOV      r8,r0                 ;147
0001d4  e3580000          CMP      r8,#0                 ;148
0001d8  1a000007          BNE      |L1.508|
0001dc  e59f009c          LDR      r0,|L1.640|
0001e0  e5900000          LDR      r0,[r0,#0]            ;149  ; yaffs_trace_mask
0001e4  e3100101          TST      r0,#0x40000000        ;149
0001e8  0a000001          BEQ      |L1.500|
0001ec  e28f00bc          ADR      r0,|L1.688|
0001f0  ebfffffe          BL       sysprintf
                  |L1.500|
0001f4  e3a00000          MOV      r0,#0                 ;151
0001f8  eaffffc4          B        |L1.272|
                  |L1.508|
0001fc  e588a004          STR      r10,[r8,#4]           ;153
000200  e594000c          LDR      r0,[r4,#0xc]          ;154
000204  e5880000          STR      r0,[r8,#0]            ;154
000208  e584800c          STR      r8,[r4,#0xc]          ;155
00020c  e59f006c          LDR      r0,|L1.640|
000210  e5d00000          LDRB     r0,[r0,#0]            ;158  ; yaffs_trace_mask
000214  e3100004          TST      r0,#4                 ;158
000218  0a000001          BEQ      |L1.548|
00021c  e28f00bc          ADR      r0,|L1.736|
000220  ebfffffe          BL       sysprintf
                  |L1.548|
000224  e3a00001          MOV      r0,#1                 ;160
000228  eaffffb8          B        |L1.272|
                  |L1.556|
00022c  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_all"
000230  2e5c636f
000234  6d6d6f6e
000238  5c737263
00023c  5c425350
000240  5c546869
000244  72645061
000248  7274795c
00024c  79616666
000250  73325c79
000254  61666673
000258  5f616c6c
00025c  6f636174          DCB      "ocator.c",0
000260  6f722e63
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L1.616|
000268  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
00026c  6f742042
000270  55472061
000274  74202573
000278  3a256421
00027c  0a00    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L1.640|
                          DCD      yaffs_trace_mask
                  |L1.644|
000284  79616666          DCB      "yaffs: yaffs: Could not allocate Tnodes\n",0
000288  733a2079
00028c  61666673
000290  3a20436f
000294  756c6420
000298  6e6f7420
00029c  616c6c6f
0002a0  63617465
0002a4  20546e6f
0002a8  6465730a
0002ac  00      
0002ad  00                DCB      0
0002ae  00                DCB      0
0002af  00                DCB      0
                  |L1.688|
0002b0  79616666          DCB      "yaffs: Could not add tnodes to management list\n",0
0002b4  733a2043
0002b8  6f756c64
0002bc  206e6f74
0002c0  20616464
0002c4  20746e6f
0002c8  64657320
0002cc  746f206d
0002d0  616e6167
0002d4  656d656e
0002d8  74206c69
0002dc  73740a00
                  |L1.736|
0002e0  79616666          DCB      "yaffs: Tnodes added\n",0
0002e4  733a2054
0002e8  6e6f6465
0002ec  73206164
0002f0  6465640a
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                          ENDP

                  yaffs_alloc_raw_tnode PROC
;;;162    
;;;163    struct yaffs_tnode *yaffs_alloc_raw_tnode(struct yaffs_dev *dev)
0002f8  e92d4070          PUSH     {r4-r6,lr}
;;;164    {
0002fc  e1a05000          MOV      r5,r0
;;;165    	struct yaffs_allocator *allocator =
000300  e5954138          LDR      r4,[r5,#0x138]
;;;166    	    (struct yaffs_allocator *)dev->allocator;
;;;167    	struct yaffs_tnode *tn = NULL;
000304  e3a06000          MOV      r6,#0
;;;168    
;;;169    	if (!allocator) {
000308  e3540000          CMP      r4,#0
00030c  1a000007          BNE      |L1.816|
;;;170    		BUG();
000310  e1a00000          MOV      r0,r0
000314  e3a020aa          MOV      r2,#0xaa
000318  e24f10f4          ADR      r1,|L1.556|
00031c  e24f00bc          ADR      r0,|L1.616|
000320  ebfffffe          BL       sysprintf
000324  e1a00000          MOV      r0,r0
;;;171    		return NULL;
000328  e3a00000          MOV      r0,#0
                  |L1.812|
;;;172    	}
;;;173    
;;;174    	/* If there are none left make more */
;;;175    	if (!allocator->free_tnodes)
;;;176    		yaffs_create_tnodes(dev, YAFFS_ALLOCATION_NTNODES);
;;;177    
;;;178    	if (allocator->free_tnodes) {
;;;179    		tn = allocator->free_tnodes;
;;;180    		allocator->free_tnodes = allocator->free_tnodes->internal[0];
;;;181    		allocator->n_free_tnodes--;
;;;182    	}
;;;183    
;;;184    	return tn;
;;;185    }
00032c  e8bd8070          POP      {r4-r6,pc}
                  |L1.816|
000330  e5940004          LDR      r0,[r4,#4]            ;175
000334  e3500000          CMP      r0,#0                 ;175
000338  1a000002          BNE      |L1.840|
00033c  e3a01064          MOV      r1,#0x64              ;176
000340  e1a00005          MOV      r0,r5                 ;176
000344  ebfffffe          BL       yaffs_create_tnodes
                  |L1.840|
000348  e5940004          LDR      r0,[r4,#4]            ;178
00034c  e3500000          CMP      r0,#0                 ;178
000350  0a000006          BEQ      |L1.880|
000354  e5946004          LDR      r6,[r4,#4]            ;179
000358  e5940004          LDR      r0,[r4,#4]            ;180
00035c  e5900000          LDR      r0,[r0,#0]            ;180
000360  e5840004          STR      r0,[r4,#4]            ;180
000364  e5940008          LDR      r0,[r4,#8]            ;181
000368  e2400001          SUB      r0,r0,#1              ;181
00036c  e5840008          STR      r0,[r4,#8]            ;181
                  |L1.880|
000370  e1a00006          MOV      r0,r6                 ;184
000374  eaffffec          B        |L1.812|
;;;186    
                          ENDP

                  yaffs_free_raw_tnode PROC
;;;187    /* FreeTnode frees up a tnode and puts it back on the free list */
;;;188    void yaffs_free_raw_tnode(struct yaffs_dev *dev, struct yaffs_tnode *tn)
000378  e92d4070          PUSH     {r4-r6,lr}
;;;189    {
00037c  e1a06000          MOV      r6,r0
000380  e1a05001          MOV      r5,r1
;;;190    	struct yaffs_allocator *allocator = dev->allocator;
000384  e5964138          LDR      r4,[r6,#0x138]
;;;191    
;;;192    	if (!allocator) {
000388  e3540000          CMP      r4,#0
00038c  1a000006          BNE      |L1.940|
;;;193    		BUG();
000390  e1a00000          MOV      r0,r0
000394  e3a020c1          MOV      r2,#0xc1
000398  e24f1f5d          ADR      r1,|L1.556|
00039c  e24f0f4f          ADR      r0,|L1.616|
0003a0  ebfffffe          BL       sysprintf
0003a4  e1a00000          MOV      r0,r0
                  |L1.936|
;;;194    		return;
;;;195    	}
;;;196    
;;;197    	if (tn) {
;;;198    		tn->internal[0] = allocator->free_tnodes;
;;;199    		allocator->free_tnodes = tn;
;;;200    		allocator->n_free_tnodes++;
;;;201    	}
;;;202    	dev->checkpoint_blocks_required = 0;	/* force recalculation */
;;;203    }
0003a8  e8bd8070          POP      {r4-r6,pc}
                  |L1.940|
0003ac  e3550000          CMP      r5,#0                 ;197
0003b0  0a000005          BEQ      |L1.972|
0003b4  e5940004          LDR      r0,[r4,#4]            ;198
0003b8  e5850000          STR      r0,[r5,#0]            ;198
0003bc  e5845004          STR      r5,[r4,#4]            ;199
0003c0  e5940008          LDR      r0,[r4,#8]            ;200
0003c4  e2800001          ADD      r0,r0,#1              ;200
0003c8  e5840008          STR      r0,[r4,#8]            ;200
                  |L1.972|
0003cc  e3a00000          MOV      r0,#0                 ;202
0003d0  e5860114          STR      r0,[r6,#0x114]        ;202
0003d4  e1a00000          MOV      r0,r0
0003d8  eafffff2          B        |L1.936|
;;;204    
                          ENDP

                  yaffs_init_raw_objs PROC
;;;210    
;;;211    static void yaffs_init_raw_objs(struct yaffs_dev *dev)
0003dc  e92d4070          PUSH     {r4-r6,lr}
;;;212    {
0003e0  e1a05000          MOV      r5,r0
;;;213    	struct yaffs_allocator *allocator = dev->allocator;
0003e4  e5954138          LDR      r4,[r5,#0x138]
;;;214    
;;;215    	if (!allocator) {
0003e8  e3540000          CMP      r4,#0
0003ec  1a000006          BNE      |L1.1036|
;;;216    		BUG();
0003f0  e1a00000          MOV      r0,r0
0003f4  e3a020d8          MOV      r2,#0xd8
0003f8  e24f1f75          ADR      r1,|L1.556|
0003fc  e24f0f67          ADR      r0,|L1.616|
000400  ebfffffe          BL       sysprintf
000404  e1a00000          MOV      r0,r0
                  |L1.1032|
;;;217    		return;
;;;218    	}
;;;219    
;;;220    	allocator->allocated_obj_list = NULL;
;;;221    	INIT_LIST_HEAD(&allocator->free_objs);
;;;222    	allocator->n_free_objects = 0;
;;;223    }
000408  e8bd8070          POP      {r4-r6,pc}
                  |L1.1036|
00040c  e3a00000          MOV      r0,#0                 ;220
000410  e5840020          STR      r0,[r4,#0x20]         ;220
000414  e1a00000          MOV      r0,r0                 ;221
000418  e2840014          ADD      r0,r4,#0x14           ;221
00041c  e5840014          STR      r0,[r4,#0x14]         ;221
000420  e2840014          ADD      r0,r4,#0x14           ;221
000424  e5840018          STR      r0,[r4,#0x18]         ;221
000428  e1a00000          MOV      r0,r0                 ;221
00042c  e3a00000          MOV      r0,#0                 ;222
000430  e584001c          STR      r0,[r4,#0x1c]         ;222
000434  e1a00000          MOV      r0,r0
000438  eafffff2          B        |L1.1032|
;;;224    
                          ENDP

                  yaffs_deinit_raw_objs PROC
;;;225    static void yaffs_deinit_raw_objs(struct yaffs_dev *dev)
00043c  e92d4070          PUSH     {r4-r6,lr}
;;;226    {
000440  e1a05000          MOV      r5,r0
;;;227    	struct yaffs_allocator *allocator = dev->allocator;
000444  e5954138          LDR      r4,[r5,#0x138]
;;;228    	struct yaffs_obj_list *tmp;
;;;229    
;;;230    	if (!allocator) {
000448  e3540000          CMP      r4,#0
00044c  1a000006          BNE      |L1.1132|
;;;231    		BUG();
000450  e1a00000          MOV      r0,r0
000454  e3a020e7          MOV      r2,#0xe7
000458  e24f1f8d          ADR      r1,|L1.556|
00045c  e24f0f7f          ADR      r0,|L1.616|
000460  ebfffffe          BL       sysprintf
000464  e1a00000          MOV      r0,r0
                  |L1.1128|
;;;232    		return;
;;;233    	}
;;;234    
;;;235    	while (allocator->allocated_obj_list) {
;;;236    		tmp = allocator->allocated_obj_list->next;
;;;237    		yaffs_free(allocator->allocated_obj_list->objects);
;;;238    		yaffs_free(allocator->allocated_obj_list);
;;;239    		allocator->allocated_obj_list = tmp;
;;;240    	}
;;;241    
;;;242    	INIT_LIST_HEAD(&allocator->free_objs);
;;;243    	allocator->n_free_objects = 0;
;;;244    	allocator->n_obj_created = 0;
;;;245    }
000468  e8bd8070          POP      {r4-r6,pc}
                  |L1.1132|
00046c  ea000007          B        |L1.1168|
                  |L1.1136|
000470  e5940020          LDR      r0,[r4,#0x20]         ;236
000474  e5906000          LDR      r6,[r0,#0]            ;236
000478  e5941020          LDR      r1,[r4,#0x20]         ;237
00047c  e5910004          LDR      r0,[r1,#4]            ;237
000480  ebfffffe          BL       yaffs_free
000484  e5940020          LDR      r0,[r4,#0x20]         ;238
000488  ebfffffe          BL       yaffs_free
00048c  e5846020          STR      r6,[r4,#0x20]         ;239
                  |L1.1168|
000490  e5940020          LDR      r0,[r4,#0x20]         ;235
000494  e3500000          CMP      r0,#0                 ;235
000498  1afffff4          BNE      |L1.1136|
00049c  e1a00000          MOV      r0,r0                 ;242
0004a0  e2840014          ADD      r0,r4,#0x14           ;242
0004a4  e5840014          STR      r0,[r4,#0x14]         ;242
0004a8  e2840014          ADD      r0,r4,#0x14           ;242
0004ac  e5840018          STR      r0,[r4,#0x18]         ;242
0004b0  e1a00000          MOV      r0,r0                 ;242
0004b4  e3a00000          MOV      r0,#0                 ;243
0004b8  e584001c          STR      r0,[r4,#0x1c]         ;243
0004bc  e5840010          STR      r0,[r4,#0x10]         ;244
0004c0  e1a00000          MOV      r0,r0
0004c4  eaffffe7          B        |L1.1128|
;;;246    
                          ENDP

                  yaffs_create_free_objs PROC
;;;247    static int yaffs_create_free_objs(struct yaffs_dev *dev, int n_obj)
0004c8  e92d47f0          PUSH     {r4-r10,lr}
;;;248    {
0004cc  e1a09000          MOV      r9,r0
0004d0  e1a05001          MOV      r5,r1
;;;249    	struct yaffs_allocator *allocator = dev->allocator;
0004d4  e5994138          LDR      r4,[r9,#0x138]
;;;250    	int i;
;;;251    	struct yaffs_obj *new_objs;
;;;252    	struct yaffs_obj_list *list;
;;;253    
;;;254    	if (!allocator) {
0004d8  e3540000          CMP      r4,#0
0004dc  1a000007          BNE      |L1.1280|
;;;255    		BUG();
0004e0  e1a00000          MOV      r0,r0
0004e4  e3a020ff          MOV      r2,#0xff
0004e8  e24f1fb1          ADR      r1,|L1.556|
0004ec  e24f0fa3          ADR      r0,|L1.616|
0004f0  ebfffffe          BL       sysprintf
0004f4  e1a00000          MOV      r0,r0
;;;256    		return YAFFS_FAIL;
0004f8  e3a00000          MOV      r0,#0
                  |L1.1276|
;;;257    	}
;;;258    
;;;259    	if (n_obj < 1)
;;;260    		return YAFFS_OK;
;;;261    
;;;262    	/* make these things */
;;;263    // 	new_objs = kmalloc(n_obj * sizeof(struct yaffs_obj), GFP_NOFS);
;;;264    // 	list = kmalloc(sizeof(struct yaffs_obj_list), GFP_NOFS);
;;;265    	new_objs = yaffs_malloc(n_obj * sizeof(struct yaffs_obj));
;;;266    	list = yaffs_malloc(sizeof(struct yaffs_obj_list));
;;;267    
;;;268    	if (!new_objs || !list) {
;;;269    		yaffs_free(new_objs);
;;;270    		new_objs = NULL;
;;;271    		yaffs_free(list);
;;;272    		list = NULL;
;;;273    		yaffs_trace(YAFFS_TRACE_ALLOCATE,
;;;274    			"Could not allocate more objects");
;;;275    		return YAFFS_FAIL;
;;;276    	}
;;;277    
;;;278    	/* Hook them into the free list */
;;;279    	for (i = 0; i < n_obj; i++)
;;;280    		list_add(&new_objs[i].siblings, &allocator->free_objs);
;;;281    
;;;282    	allocator->n_free_objects += n_obj;
;;;283    	allocator->n_obj_created += n_obj;
;;;284    
;;;285    	/* Now add this bunch of Objects to a list for freeing up. */
;;;286    
;;;287    	list->objects = new_objs;
;;;288    	list->next = allocator->allocated_obj_list;
;;;289    	allocator->allocated_obj_list = list;
;;;290    
;;;291    	return YAFFS_OK;
;;;292    }
0004fc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1280|
000500  e3550001          CMP      r5,#1                 ;259
000504  aa000001          BGE      |L1.1296|
000508  e3a00001          MOV      r0,#1                 ;260
00050c  eafffffa          B        |L1.1276|
                  |L1.1296|
000510  e0851205          ADD      r1,r5,r5,LSL #4       ;265
000514  e1a00181          LSL      r0,r1,#3              ;265
000518  ebfffffe          BL       yaffs_malloc
00051c  e1a07000          MOV      r7,r0                 ;265
000520  e3a00008          MOV      r0,#8                 ;266
000524  ebfffffe          BL       yaffs_malloc
000528  e1a06000          MOV      r6,r0                 ;266
00052c  e3570000          CMP      r7,#0                 ;268
000530  0a000001          BEQ      |L1.1340|
000534  e3560000          CMP      r6,#0                 ;268
000538  1a00000d          BNE      |L1.1396|
                  |L1.1340|
00053c  e1a00007          MOV      r0,r7                 ;269
000540  ebfffffe          BL       yaffs_free
000544  e3a07000          MOV      r7,#0                 ;270
000548  e1a00006          MOV      r0,r6                 ;271
00054c  ebfffffe          BL       yaffs_free
000550  e3a06000          MOV      r6,#0                 ;272
000554  e51f02dc          LDR      r0,|L1.640|
000558  e5d00000          LDRB     r0,[r0,#0]            ;273  ; yaffs_trace_mask
00055c  e3100004          TST      r0,#4                 ;273
000560  0a000001          BEQ      |L1.1388|
000564  e28f0f85          ADR      r0,|L1.1920|
000568  ebfffffe          BL       sysprintf
                  |L1.1388|
00056c  e3a00000          MOV      r0,#0                 ;275
000570  eaffffe1          B        |L1.1276|
                  |L1.1396|
000574  e3a08000          MOV      r8,#0                 ;279
000578  ea000005          B        |L1.1428|
                  |L1.1404|
00057c  e0881208          ADD      r1,r8,r8,LSL #4       ;280
000580  e0871181          ADD      r1,r7,r1,LSL #3       ;280
000584  e2810020          ADD      r0,r1,#0x20           ;280
000588  e2841014          ADD      r1,r4,#0x14           ;280
00058c  ebfffffe          BL       list_add
000590  e2888001          ADD      r8,r8,#1              ;279
                  |L1.1428|
000594  e1580005          CMP      r8,r5                 ;279
000598  bafffff7          BLT      |L1.1404|
00059c  e594001c          LDR      r0,[r4,#0x1c]         ;282
0005a0  e0800005          ADD      r0,r0,r5              ;282
0005a4  e584001c          STR      r0,[r4,#0x1c]         ;282
0005a8  e5940010          LDR      r0,[r4,#0x10]         ;283
0005ac  e0800005          ADD      r0,r0,r5              ;283
0005b0  e5840010          STR      r0,[r4,#0x10]         ;283
0005b4  e5867004          STR      r7,[r6,#4]            ;287
0005b8  e5940020          LDR      r0,[r4,#0x20]         ;288
0005bc  e5860000          STR      r0,[r6,#0]            ;288
0005c0  e5846020          STR      r6,[r4,#0x20]         ;289
0005c4  e3a00001          MOV      r0,#1                 ;291
0005c8  eaffffcb          B        |L1.1276|
;;;293    
                          ENDP

                  yaffs_alloc_raw_obj PROC
;;;294    struct yaffs_obj *yaffs_alloc_raw_obj(struct yaffs_dev *dev)
0005cc  e92d41f0          PUSH     {r4-r8,lr}
;;;295    {
0005d0  e1a06000          MOV      r6,r0
;;;296    	struct yaffs_obj *obj = NULL;
0005d4  e3a07000          MOV      r7,#0
;;;297    	struct list_head *lh;
;;;298    	struct yaffs_allocator *allocator = dev->allocator;
0005d8  e5965138          LDR      r5,[r6,#0x138]
;;;299    
;;;300    	if (!allocator) {
0005dc  e3550000          CMP      r5,#0
0005e0  1a000007          BNE      |L1.1540|
;;;301    		BUG();
0005e4  e1a00000          MOV      r0,r0
0005e8  e59f21b8          LDR      r2,|L1.1960|
0005ec  e24f1ff2          ADR      r1,|L1.556|
0005f0  e24f0e39          ADR      r0,|L1.616|
0005f4  ebfffffe          BL       sysprintf
0005f8  e1a00000          MOV      r0,r0
;;;302    		return obj;
0005fc  e1a00007          MOV      r0,r7
                  |L1.1536|
;;;303    	}
;;;304    
;;;305    	/* If there are none left make more */
;;;306    	if (list_empty(&allocator->free_objs))
;;;307    		yaffs_create_free_objs(dev, YAFFS_ALLOCATION_NOBJECTS);
;;;308    
;;;309    	if (!list_empty(&allocator->free_objs)) {
;;;310    		lh = allocator->free_objs.next;
;;;311    		obj = list_entry(lh, struct yaffs_obj, siblings);
;;;312    		list_del_init(lh);
;;;313    		allocator->n_free_objects--;
;;;314    	}
;;;315    
;;;316    	return obj;
;;;317    }
000600  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1540|
000604  e2850014          ADD      r0,r5,#0x14           ;306
000608  ebfffffe          BL       list_empty
00060c  e3500000          CMP      r0,#0                 ;306
000610  0a000002          BEQ      |L1.1568|
000614  e3a01064          MOV      r1,#0x64              ;307
000618  e1a00006          MOV      r0,r6                 ;307
00061c  ebfffffe          BL       yaffs_create_free_objs
                  |L1.1568|
000620  e2850014          ADD      r0,r5,#0x14           ;309
000624  ebfffffe          BL       list_empty
000628  e3500000          CMP      r0,#0                 ;309
00062c  1a00000e          BNE      |L1.1644|
000630  e5954014          LDR      r4,[r5,#0x14]         ;310
000634  e2447020          SUB      r7,r4,#0x20           ;311
000638  e1a00000          MOV      r0,r0                 ;312
00063c  e1a00000          MOV      r0,r0                 ;312
000640  e5940000          LDR      r0,[r4,#0]            ;312
000644  e5941004          LDR      r1,[r4,#4]            ;312
000648  e5801004          STR      r1,[r0,#4]            ;312
00064c  e5810000          STR      r0,[r1,#0]            ;312
000650  e1a00000          MOV      r0,r0                 ;312
000654  e5844004          STR      r4,[r4,#4]            ;312
000658  e5844000          STR      r4,[r4,#0]            ;312
00065c  e1a00000          MOV      r0,r0                 ;312
000660  e595001c          LDR      r0,[r5,#0x1c]         ;313
000664  e2400001          SUB      r0,r0,#1              ;313
000668  e585001c          STR      r0,[r5,#0x1c]         ;313
                  |L1.1644|
00066c  e1a00007          MOV      r0,r7                 ;316
000670  eaffffe2          B        |L1.1536|
;;;318    
                          ENDP

                  yaffs_free_raw_obj PROC
;;;319    void yaffs_free_raw_obj(struct yaffs_dev *dev, struct yaffs_obj *obj)
000674  e92d4070          PUSH     {r4-r6,lr}
;;;320    {
000678  e1a05000          MOV      r5,r0
00067c  e1a06001          MOV      r6,r1
;;;321    
;;;322    	struct yaffs_allocator *allocator = dev->allocator;
000680  e5954138          LDR      r4,[r5,#0x138]
;;;323    
;;;324    	if (!allocator) {
000684  e3540000          CMP      r4,#0
000688  1a000006          BNE      |L1.1704|
;;;325    		BUG();
00068c  e1a00000          MOV      r0,r0
000690  e59f2114          LDR      r2,|L1.1964|
000694  e59f1114          LDR      r1,|L1.1968|
000698  e59f0114          LDR      r0,|L1.1972|
00069c  ebfffffe          BL       sysprintf
0006a0  e1a00000          MOV      r0,r0
                  |L1.1700|
;;;326    		return;
;;;327    	}
;;;328    
;;;329    	/* Link into the free list. */
;;;330    	list_add(&obj->siblings, &allocator->free_objs);
;;;331    	allocator->n_free_objects++;
;;;332    }
0006a4  e8bd8070          POP      {r4-r6,pc}
                  |L1.1704|
0006a8  e2841014          ADD      r1,r4,#0x14           ;330
0006ac  e2860020          ADD      r0,r6,#0x20           ;330
0006b0  ebfffffe          BL       list_add
0006b4  e594001c          LDR      r0,[r4,#0x1c]         ;331
0006b8  e2800001          ADD      r0,r0,#1              ;331
0006bc  e584001c          STR      r0,[r4,#0x1c]         ;331
0006c0  e1a00000          MOV      r0,r0
0006c4  eafffff6          B        |L1.1700|
;;;333    
                          ENDP

                  yaffs_deinit_raw_tnodes_and_objs PROC
;;;334    void yaffs_deinit_raw_tnodes_and_objs(struct yaffs_dev *dev)
0006c8  e92d4010          PUSH     {r4,lr}
;;;335    {
0006cc  e1a04000          MOV      r4,r0
;;;336    
;;;337    	if (!dev->allocator) {
0006d0  e5940138          LDR      r0,[r4,#0x138]
0006d4  e3500000          CMP      r0,#0
0006d8  1a000006          BNE      |L1.1784|
;;;338    		BUG();
0006dc  e1a00000          MOV      r0,r0
0006e0  e59f20d0          LDR      r2,|L1.1976|
0006e4  e59f10c4          LDR      r1,|L1.1968|
0006e8  e59f00c4          LDR      r0,|L1.1972|
0006ec  ebfffffe          BL       sysprintf
0006f0  e1a00000          MOV      r0,r0
                  |L1.1780|
;;;339    		return;
;;;340    	}
;;;341    
;;;342    	yaffs_deinit_raw_tnodes(dev);
;;;343    	yaffs_deinit_raw_objs(dev);
;;;344    	yaffs_free(dev->allocator);
;;;345    	dev->allocator = NULL;
;;;346    }
0006f4  e8bd8010          POP      {r4,pc}
                  |L1.1784|
0006f8  e1a00004          MOV      r0,r4                 ;342
0006fc  ebfffffe          BL       yaffs_deinit_raw_tnodes
000700  e1a00004          MOV      r0,r4                 ;343
000704  ebfffffe          BL       yaffs_deinit_raw_objs
000708  e5940138          LDR      r0,[r4,#0x138]        ;344
00070c  ebfffffe          BL       yaffs_free
000710  e3a00000          MOV      r0,#0                 ;345
000714  e5840138          STR      r0,[r4,#0x138]        ;345
000718  e1a00000          MOV      r0,r0
00071c  eafffff4          B        |L1.1780|
;;;347    
                          ENDP

                  yaffs_init_raw_tnodes_and_objs PROC
;;;348    void yaffs_init_raw_tnodes_and_objs(struct yaffs_dev *dev)
000720  e92d4070          PUSH     {r4-r6,lr}
;;;349    {
000724  e1a05000          MOV      r5,r0
;;;350    	struct yaffs_allocator *allocator;
;;;351    
;;;352    	if (dev->allocator) {
000728  e5950138          LDR      r0,[r5,#0x138]
00072c  e3500000          CMP      r0,#0
000730  0a000006          BEQ      |L1.1872|
;;;353    		BUG();
000734  e1a00000          MOV      r0,r0
000738  e59f207c          LDR      r2,|L1.1980|
00073c  e59f106c          LDR      r1,|L1.1968|
000740  e59f006c          LDR      r0,|L1.1972|
000744  ebfffffe          BL       sysprintf
000748  e1a00000          MOV      r0,r0
                  |L1.1868|
;;;354    		return;
;;;355    	}
;;;356    
;;;357    // 	allocator = kmalloc(sizeof(struct yaffs_allocator), GFP_NOFS);
;;;358    	allocator = yaffs_malloc(sizeof(struct yaffs_allocator));
;;;359    	if (allocator) {
;;;360    		dev->allocator = allocator;
;;;361    		yaffs_init_raw_tnodes(dev);
;;;362    		yaffs_init_raw_objs(dev);
;;;363    	}
;;;364    }
00074c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1872|
000750  e3a00024          MOV      r0,#0x24              ;358
000754  ebfffffe          BL       yaffs_malloc
000758  e1a04000          MOV      r4,r0                 ;358
00075c  e3540000          CMP      r4,#0                 ;359
000760  0a000004          BEQ      |L1.1912|
000764  e5854138          STR      r4,[r5,#0x138]        ;360
000768  e1a00005          MOV      r0,r5                 ;361
00076c  ebfffffe          BL       yaffs_init_raw_tnodes
000770  e1a00005          MOV      r0,r5                 ;362
000774  ebfffffe          BL       yaffs_init_raw_objs
                  |L1.1912|
000778  e1a00000          MOV      r0,r0
00077c  eafffff2          B        |L1.1868|
                  |L1.1920|
000780  79616666          DCB      "yaffs: Could not allocate more objects\n",0
000784  733a2043
000788  6f756c64
00078c  206e6f74
000790  20616c6c
000794  6f636174
000798  65206d6f
00079c  7265206f
0007a0  626a6563
0007a4  74730a00
                  |L1.1960|
                          DCD      0x0000012d
                  |L1.1964|
                          DCD      0x00000145
                  |L1.1968|
                          DCD      ||.text||+0x22c
                  |L1.1972|
                          DCD      ||.text||+0x268
                  |L1.1976|
                          DCD      0x00000152
                  |L1.1980|
                          DCD      0x00000161
                          ENDP

                  list_empty PROC
;;;97     /* Test if the list is empty */
;;;98     static __inline int list_empty(struct list_head *entry)
0007c0  e1a01000          MOV      r1,r0
;;;99     {
;;;100    	return (entry->next == entry);
0007c4  e5910000          LDR      r0,[r1,#0]
0007c8  e1500001          CMP      r0,r1
0007cc  1a000001          BNE      |L1.2008|
0007d0  e3a00001          MOV      r0,#1
                  |L1.2004|
;;;101    }
0007d4  e12fff1e          BX       lr
                  |L1.2008|
0007d8  e3a00000          MOV      r0,#0                 ;100
0007dc  eafffffc          B        |L1.2004|
;;;102    
                          ENDP

