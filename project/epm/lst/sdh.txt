; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\sdh.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sdh.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\sdh.crf ..\..\common\src\BSP\Driver\Source\sdh.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SD_CheckRB PROC
;;;60     
;;;61     void SD_CheckRB()
000000  ea00000e          B        |L1.64|
                  |L1.4|
;;;62     {
;;;63         while(1) {
;;;64             outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|SDH_CTL_CLK8OEN_Msk);
000004  e59f0a94          LDR      r0,|L1.2720|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e3800040          ORR      r0,r0,#0x40
000010  e59f1a88          LDR      r1,|L1.2720|
000014  e5810000          STR      r0,[r1,#0]
;;;65             while(inpw(REG_SDH_CTL) & SDH_CTL_CLK8OEN_Msk);
000018  e1a00000          MOV      r0,r0
                  |L1.28|
00001c  e59f0a7c          LDR      r0,|L1.2720|
000020  e5900000          LDR      r0,[r0,#0]
000024  e3100040          TST      r0,#0x40
000028  1afffffb          BNE      |L1.28|
;;;66             if (inpw(REG_SDH_INTSTS) & SDH_INTSTS_DAT0STS_Msk)
00002c  e59f0a70          LDR      r0,|L1.2724|
000030  e5900000          LDR      r0,[r0,#0]
000034  e3100080          TST      r0,#0x80
000038  0a000000          BEQ      |L1.64|
;;;67                 break;
00003c  ea000000          B        |L1.68|
                  |L1.64|
000040  eaffffef          B        |L1.4|
                  |L1.68|
000044  e1a00000          MOV      r0,r0
;;;68         }
;;;69     }
000048  e12fff1e          BX       lr
;;;70     
                          ENDP

                  SD_SDCommand PROC
;;;71     
;;;72     int SD_SDCommand(SD_INFO_T *pSD, unsigned char ucCmd, unsigned int uArg)
00004c  e92d4008          PUSH     {r3,lr}
;;;73     {
000050  e1a03000          MOV      r3,r0
;;;74         volatile int buf;
;;;75     
;;;76         outpw(REG_SDH_CMD, uArg);
000054  e59f0a4c          LDR      r0,|L1.2728|
000058  e5802000          STR      r2,[r0,#0]
;;;77         buf = (inpw(REG_SDH_CTL)&(~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8)|(SDH_CTL_COEN_Msk);
00005c  e2400004          SUB      r0,r0,#4
000060  e5900000          LDR      r0,[r0,#0]
000064  e3c00c3f          BIC      r0,r0,#0x3f00
000068  e1800401          ORR      r0,r0,r1,LSL #8
00006c  e3800001          ORR      r0,r0,#1
000070  e58d0000          STR      r0,[sp,#0]
;;;78         outpw(REG_SDH_CTL, buf);
000074  e59d0000          LDR      r0,[sp,#0]
000078  e59fca20          LDR      r12,|L1.2720|
00007c  e58c0000          STR      r0,[r12,#0]
;;;79     
;;;80         while(inpw(REG_SDH_CTL) & SDH_CTL_COEN_Msk) {
000080  ea000004          B        |L1.152|
                  |L1.132|
;;;81             if (pSD->IsCardInsert == FALSE)
000084  e5d30008          LDRB     r0,[r3,#8]
000088  e3500000          CMP      r0,#0
00008c  1a000001          BNE      |L1.152|
;;;82                 return SD_NO_SD_CARD;
000090  e59f0a14          LDR      r0,|L1.2732|
                  |L1.148|
;;;83         }
;;;84         return 0;
;;;85     }
000094  e8bd8008          POP      {r3,pc}
                  |L1.152|
000098  e59f0a00          LDR      r0,|L1.2720|
00009c  e5900000          LDR      r0,[r0,#0]            ;80
0000a0  e3100001          TST      r0,#1                 ;80
0000a4  1afffff6          BNE      |L1.132|
0000a8  e3a00000          MOV      r0,#0                 ;84
0000ac  eafffff8          B        |L1.148|
;;;86     
                          ENDP

                  SD_SDCmdAndRsp PROC
;;;87     
;;;88     int SD_SDCmdAndRsp(SD_INFO_T *pSD, unsigned char ucCmd, unsigned int uArg, int ntickCount)
0000b0  e92d4018          PUSH     {r3,r4,lr}
;;;89     {
0000b4  e1a0c000          MOV      r12,r0
;;;90         volatile int buf;
;;;91     
;;;92         outpw(REG_SDH_CMD, uArg);
0000b8  e59f09e8          LDR      r0,|L1.2728|
0000bc  e5802000          STR      r2,[r0,#0]
;;;93         buf = (inpw(REG_SDH_CTL)&(~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk);
0000c0  e2400004          SUB      r0,r0,#4
0000c4  e5900000          LDR      r0,[r0,#0]
0000c8  e3c00c3f          BIC      r0,r0,#0x3f00
0000cc  e1800401          ORR      r0,r0,r1,LSL #8
0000d0  e3800003          ORR      r0,r0,#3
0000d4  e58d0000          STR      r0,[sp,#0]
;;;94         outpw(REG_SDH_CTL, buf);
0000d8  e59d0000          LDR      r0,[sp,#0]
0000dc  e59f49bc          LDR      r4,|L1.2720|
0000e0  e5840000          STR      r0,[r4,#0]
;;;95     
;;;96         if (ntickCount > 0) {
0000e4  e3530000          CMP      r3,#0
0000e8  da000014          BLE      |L1.320|
;;;97             while(inpw(REG_SDH_CTL) & SDH_CTL_RIEN_Msk) {
0000ec  ea00000e          B        |L1.300|
                  |L1.240|
;;;98                 if(ntickCount-- == 0) {
0000f0  e1b00003          MOVS     r0,r3
0000f4  e2433001          SUB      r3,r3,#1
0000f8  1a000006          BNE      |L1.280|
;;;99                     outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|SDH_CTL_CTLRST_Msk); // reset SD engine
0000fc  e59f099c          LDR      r0,|L1.2720|
000100  e5900000          LDR      r0,[r0,#0]
000104  e3800901          ORR      r0,r0,#0x4000
000108  e59f4990          LDR      r4,|L1.2720|
00010c  e5840000          STR      r0,[r4,#0]
;;;100                    return 2;
000110  e3a00002          MOV      r0,#2
                  |L1.276|
;;;101                }
;;;102                if (pSD->IsCardInsert == FALSE)
;;;103                    return SD_NO_SD_CARD;
;;;104            }
;;;105        } else {
;;;106            while(inpw(REG_SDH_CTL) & SDH_CTL_RIEN_Msk) {
;;;107                if (pSD->IsCardInsert == FALSE)
;;;108                    return SD_NO_SD_CARD;
;;;109            }
;;;110        }
;;;111    
;;;112        if (_sd_uR7_CMD) {
;;;113            if (((inpw(REG_SDH_RESP1) & 0xff) != 0x55) && ((inpw(REG_SDH_RESP0) & 0xf) != 0x01)) {
;;;114                _sd_uR7_CMD = 0;
;;;115                return SD_CMD8_ERROR;
;;;116            }
;;;117        }
;;;118    
;;;119        if (!_sd_uR3_CMD) {
;;;120            if (inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC7_Msk)     // check CRC7
;;;121                return 0;
;;;122            else
;;;123                return SD_CRC7_ERROR;
;;;124        } else { // ignore CRC error for R3 case
;;;125            _sd_uR3_CMD = 0;
;;;126            outpw(REG_SDH_INTSTS, SDH_INTSTS_CRCIF_Msk);
;;;127            return 0;
;;;128        }
;;;129    }
000114  e8bd8018          POP      {r3,r4,pc}
                  |L1.280|
000118  e5dc0008          LDRB     r0,[r12,#8]           ;102
00011c  e3500000          CMP      r0,#0                 ;102
000120  1a000001          BNE      |L1.300|
000124  e59f0980          LDR      r0,|L1.2732|
000128  eafffff9          B        |L1.276|
                  |L1.300|
00012c  e59f096c          LDR      r0,|L1.2720|
000130  e5900000          LDR      r0,[r0,#0]            ;97
000134  e3100002          TST      r0,#2                 ;97
000138  1affffec          BNE      |L1.240|
00013c  ea000009          B        |L1.360|
                  |L1.320|
000140  ea000004          B        |L1.344|
                  |L1.324|
000144  e5dc0008          LDRB     r0,[r12,#8]           ;107
000148  e3500000          CMP      r0,#0                 ;107
00014c  1a000001          BNE      |L1.344|
000150  e59f0954          LDR      r0,|L1.2732|
000154  eaffffee          B        |L1.276|
                  |L1.344|
000158  e59f0940          LDR      r0,|L1.2720|
00015c  e5900000          LDR      r0,[r0,#0]            ;106
000160  e3100002          TST      r0,#2                 ;106
000164  1afffff6          BNE      |L1.324|
                  |L1.360|
000168  e59f0940          LDR      r0,|L1.2736|
00016c  e5900000          LDR      r0,[r0,#0]            ;112  ; _sd_uR7_CMD
000170  e3500000          CMP      r0,#0                 ;112
000174  0a00000e          BEQ      |L1.436|
000178  e59f0934          LDR      r0,|L1.2740|
00017c  e5900000          LDR      r0,[r0,#0]            ;113
000180  e20000ff          AND      r0,r0,#0xff           ;113
000184  e3500055          CMP      r0,#0x55              ;113
000188  0a000009          BEQ      |L1.436|
00018c  e59f0924          LDR      r0,|L1.2744|
000190  e5900000          LDR      r0,[r0,#0]            ;113
000194  e200000f          AND      r0,r0,#0xf            ;113
000198  e3500001          CMP      r0,#1                 ;113
00019c  0a000004          BEQ      |L1.436|
0001a0  e3a00000          MOV      r0,#0                 ;114
0001a4  e59f4904          LDR      r4,|L1.2736|
0001a8  e5840000          STR      r0,[r4,#0]            ;114  ; _sd_uR7_CMD
0001ac  e59f0908          LDR      r0,|L1.2748|
0001b0  eaffffd7          B        |L1.276|
                  |L1.436|
0001b4  e59f0904          LDR      r0,|L1.2752|
0001b8  e5900000          LDR      r0,[r0,#0]            ;119  ; _sd_uR3_CMD
0001bc  e3500000          CMP      r0,#0                 ;119
0001c0  1a000007          BNE      |L1.484|
0001c4  e59f08d8          LDR      r0,|L1.2724|
0001c8  e5900000          LDR      r0,[r0,#0]            ;120
0001cc  e3100004          TST      r0,#4                 ;120
0001d0  0a000001          BEQ      |L1.476|
0001d4  e3a00000          MOV      r0,#0                 ;121
0001d8  eaffffcd          B        |L1.276|
                  |L1.476|
0001dc  e59f08e0          LDR      r0,|L1.2756|
0001e0  eaffffcb          B        |L1.276|
                  |L1.484|
0001e4  e3a00000          MOV      r0,#0                 ;125
0001e8  e59f48d0          LDR      r4,|L1.2752|
0001ec  e5840000          STR      r0,[r4,#0]            ;125  ; _sd_uR3_CMD
0001f0  e3a00002          MOV      r0,#2                 ;126
0001f4  e59f48a8          LDR      r4,|L1.2724|
0001f8  e5840000          STR      r0,[r4,#0]            ;126
0001fc  e3a00000          MOV      r0,#0                 ;127
000200  eaffffc3          B        |L1.276|
;;;130    
                          ENDP

                  SD_Swap32 PROC
;;;131    int SD_Swap32(int val)
000204  e1a01000          MOV      r1,r0
;;;132    {
;;;133        int buf;
;;;134    
;;;135        buf = val;
;;;136        val <<= 24;
000208  e1a00c00          LSL      r0,r0,#24
;;;137        val |= (buf<<8)&0xff0000;
00020c  e3a028ff          MOV      r2,#0xff0000
000210  e0022401          AND      r2,r2,r1,LSL #8
000214  e1800002          ORR      r0,r0,r2
;;;138        val |= (buf>>8)&0xff00;
000218  e3a02cff          MOV      r2,#0xff00
00021c  e0022441          AND      r2,r2,r1,ASR #8
000220  e1800002          ORR      r0,r0,r2
;;;139        val |= (buf>>24)&0xff;
000224  e1800c21          ORR      r0,r0,r1,LSR #24
;;;140        return val;
;;;141    }
000228  e12fff1e          BX       lr
;;;142    
                          ENDP

                  SD_SDCmdAndRsp2 PROC
;;;143    // Get 16 bytes CID or CSD
;;;144    int SD_SDCmdAndRsp2(SD_INFO_T *pSD, unsigned char ucCmd, unsigned int uArg, unsigned int *puR2ptr)
00022c  e92d41f0          PUSH     {r4-r8,lr}
;;;145    {
000230  e24dd014          SUB      sp,sp,#0x14
000234  e1a05000          MOV      r5,r0
000238  e1a06001          MOV      r6,r1
00023c  e1a07002          MOV      r7,r2
000240  e1a04003          MOV      r4,r3
;;;146        unsigned int i, buf;
;;;147        unsigned int tmpBuf[5];
;;;148    
;;;149        outpw(REG_SDH_CMD, uArg);
000244  e59f085c          LDR      r0,|L1.2728|
000248  e5807000          STR      r7,[r0,#0]
;;;150        buf = (inpw(REG_SDH_CTL)&(~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_R2EN_Msk);
00024c  e2400004          SUB      r0,r0,#4
000250  e5900000          LDR      r0,[r0,#0]
000254  e3c00c3f          BIC      r0,r0,#0x3f00
000258  e1800406          ORR      r0,r0,r6,LSL #8
00025c  e3808011          ORR      r8,r0,#0x11
;;;151        outpw(REG_SDH_CTL, buf);
000260  e59f0838          LDR      r0,|L1.2720|
000264  e5808000          STR      r8,[r0,#0]
;;;152    
;;;153        while(inpw(REG_SDH_CTL) & SDH_CTL_R2EN_Msk) {
000268  ea000005          B        |L1.644|
                  |L1.620|
;;;154            if (pSD->IsCardInsert == FALSE)
00026c  e5d50008          LDRB     r0,[r5,#8]
000270  e3500000          CMP      r0,#0
000274  1a000002          BNE      |L1.644|
;;;155                return SD_NO_SD_CARD;
000278  e59f082c          LDR      r0,|L1.2732|
                  |L1.636|
00027c  e28dd014          ADD      sp,sp,#0x14
;;;156        }
;;;157    
;;;158        if (inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC7_Msk) {
;;;159            for (i=0; i<5; i++)
;;;160                tmpBuf[i] = SD_Swap32(*(int*)(SDH_BA+i*4));
;;;161            for (i=0; i<4; i++)
;;;162                *puR2ptr++ = ((tmpBuf[i] & 0x00ffffff)<<8) | ((tmpBuf[i+1] & 0xff000000)>>24);
;;;163            return 0;
;;;164        } else
;;;165            return SD_CRC7_ERROR;
;;;166    }
000280  e8bd81f0          POP      {r4-r8,pc}
                  |L1.644|
000284  e59f0814          LDR      r0,|L1.2720|
000288  e5900000          LDR      r0,[r0,#0]            ;153
00028c  e3100010          TST      r0,#0x10              ;153
000290  1afffff5          BNE      |L1.620|
000294  e59f0808          LDR      r0,|L1.2724|
000298  e5900000          LDR      r0,[r0,#0]            ;158
00029c  e3100004          TST      r0,#4                 ;158
0002a0  0a000015          BEQ      |L1.764|
0002a4  e3a03000          MOV      r3,#0                 ;159
0002a8  ea000004          B        |L1.704|
                  |L1.684|
0002ac  e59f1814          LDR      r1,|L1.2760|
0002b0  e7910103          LDR      r0,[r1,r3,LSL #2]     ;160
0002b4  ebfffffe          BL       SD_Swap32
0002b8  e78d0103          STR      r0,[sp,r3,LSL #2]     ;160
0002bc  e2833001          ADD      r3,r3,#1              ;159
                  |L1.704|
0002c0  e3530005          CMP      r3,#5                 ;159
0002c4  3afffff8          BCC      |L1.684|
0002c8  e3a03000          MOV      r3,#0                 ;161
0002cc  ea000006          B        |L1.748|
                  |L1.720|
0002d0  e79d0103          LDR      r0,[sp,r3,LSL #2]     ;162
0002d4  e1a01400          LSL      r1,r0,#8              ;162
0002d8  e2832001          ADD      r2,r3,#1              ;162
0002dc  e79d0102          LDR      r0,[sp,r2,LSL #2]     ;162
0002e0  e1810c20          ORR      r0,r1,r0,LSR #24      ;162
0002e4  e4840004          STR      r0,[r4],#4            ;162
0002e8  e2833001          ADD      r3,r3,#1              ;161
                  |L1.748|
0002ec  e3530004          CMP      r3,#4                 ;161
0002f0  3afffff6          BCC      |L1.720|
0002f4  e3a00000          MOV      r0,#0                 ;163
0002f8  eaffffdf          B        |L1.636|
                  |L1.764|
0002fc  e59f07c0          LDR      r0,|L1.2756|
000300  eaffffdd          B        |L1.636|
;;;167    
                          ENDP

                  SD_SDCmdAndRspDataIn PROC
;;;168    
;;;169    int SD_SDCmdAndRspDataIn(SD_INFO_T *pSD, unsigned char ucCmd, unsigned int uArg)
000304  e92d4008          PUSH     {r3,lr}
;;;170    {
000308  e1a03000          MOV      r3,r0
;;;171        volatile int buf;
;;;172    
;;;173        outpw(REG_SDH_CMD, uArg);
00030c  e59f0794          LDR      r0,|L1.2728|
000310  e5802000          STR      r2,[r0,#0]
;;;174        buf = (inpw(REG_SDH_CTL)&(~SDH_CTL_CMDCODE_Msk))|(ucCmd << 8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DIEN_Msk);
000314  e2400004          SUB      r0,r0,#4
000318  e5900000          LDR      r0,[r0,#0]
00031c  e3c00c3f          BIC      r0,r0,#0x3f00
000320  e1800401          ORR      r0,r0,r1,LSL #8
000324  e3800007          ORR      r0,r0,#7
000328  e58d0000          STR      r0,[sp,#0]
;;;175        outpw(REG_SDH_CTL, buf);
00032c  e59d0000          LDR      r0,[sp,#0]
000330  e59fc768          LDR      r12,|L1.2720|
000334  e58c0000          STR      r0,[r12,#0]
;;;176    
;;;177        while (inpw(REG_SDH_CTL) & SDH_CTL_RIEN_Msk) {
000338  ea000004          B        |L1.848|
                  |L1.828|
;;;178            if (pSD->IsCardInsert == FALSE)
00033c  e5d30008          LDRB     r0,[r3,#8]
000340  e3500000          CMP      r0,#0
000344  1a000001          BNE      |L1.848|
;;;179                return SD_NO_SD_CARD;
000348  e59f075c          LDR      r0,|L1.2732|
                  |L1.844|
;;;180        }
;;;181    
;;;182        while (inpw(REG_SDH_CTL) & SDH_CTL_DIEN_Msk) {
;;;183            if (pSD->IsCardInsert == FALSE)
;;;184                return SD_NO_SD_CARD;
;;;185        }
;;;186    
;;;187        if (!(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC7_Msk)) {    // check CRC7
;;;188            return SD_CRC7_ERROR;
;;;189        }
;;;190    
;;;191        if (!(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC16_Msk)) {   // check CRC16
;;;192            return SD_CRC16_ERROR;
;;;193        }
;;;194        return 0;
;;;195    }
00034c  e8bd8008          POP      {r3,pc}
                  |L1.848|
000350  e59f0748          LDR      r0,|L1.2720|
000354  e5900000          LDR      r0,[r0,#0]            ;177
000358  e3100002          TST      r0,#2                 ;177
00035c  1afffff6          BNE      |L1.828|
000360  ea000004          B        |L1.888|
                  |L1.868|
000364  e5d30008          LDRB     r0,[r3,#8]            ;183
000368  e3500000          CMP      r0,#0                 ;183
00036c  1a000001          BNE      |L1.888|
000370  e59f0734          LDR      r0,|L1.2732|
000374  eafffff4          B        |L1.844|
                  |L1.888|
000378  e59f0720          LDR      r0,|L1.2720|
00037c  e5900000          LDR      r0,[r0,#0]            ;182
000380  e3100004          TST      r0,#4                 ;182
000384  1afffff6          BNE      |L1.868|
000388  e59f0714          LDR      r0,|L1.2724|
00038c  e5900000          LDR      r0,[r0,#0]            ;187
000390  e3100004          TST      r0,#4                 ;187
000394  1a000001          BNE      |L1.928|
000398  e59f0724          LDR      r0,|L1.2756|
00039c  eaffffea          B        |L1.844|
                  |L1.928|
0003a0  e59f06fc          LDR      r0,|L1.2724|
0003a4  e5900000          LDR      r0,[r0,#0]            ;191
0003a8  e3100008          TST      r0,#8                 ;191
0003ac  1a000001          BNE      |L1.952|
0003b0  e59f0714          LDR      r0,|L1.2764|
0003b4  eaffffe4          B        |L1.844|
                  |L1.952|
0003b8  e3a00000          MOV      r0,#0                 ;194
0003bc  eaffffe2          B        |L1.844|
;;;196    
                          ENDP

                  SD_Set_clock PROC
;;;201    
;;;202    void SD_Set_clock(unsigned int sd_clock_khz)
0003c0  e92d41f0          PUSH     {r4-r8,lr}
;;;203    {
0003c4  e1a06000          MOV      r6,r0
;;;204        UINT32 rate, div0, div1, i;
;;;205    
;;;206        //--- calculate the rate that 2 divider have to divide
;;;207        // _fmi_uFMIReferenceClock is the input clock with unit KHz like as APLL/UPLL and
;;;208        //      assign by sicIoctl(SIC_SET_CLOCK, , , );
;;;209        if (sd_clock_khz > gSDHReferenceClock) {
0003c8  e59f0700          LDR      r0,|L1.2768|
0003cc  e5900000          LDR      r0,[r0,#0]  ; gSDHReferenceClock
0003d0  e1560000          CMP      r6,r0
0003d4  9a000005          BLS      |L1.1008|
;;;210            sysprintf("ERROR: wrong SD clock %dKHz since it is faster than input clock %dKHz !\n", sd_clock_khz, gSDHReferenceClock);
0003d8  e59f06f0          LDR      r0,|L1.2768|
0003dc  e1a01006          MOV      r1,r6
0003e0  e5902000          LDR      r2,[r0,#0]  ; gSDHReferenceClock
0003e4  e59f06e8          LDR      r0,|L1.2772|
0003e8  ebfffffe          BL       sysprintf
                  |L1.1004|
;;;211            return;
;;;212        }
;;;213        rate = gSDHReferenceClock / sd_clock_khz;
;;;214        // choose slower clock if system clock cannot divisible by wanted clock
;;;215        if (gSDHReferenceClock % sd_clock_khz != 0)
;;;216            rate++;
;;;217    
;;;218        if (rate > (SD_CLK_DIV0_MAX * SD_CLK_DIV1_MAX)) { // the maximum divider for SD_CLK is (SD_CLK_DIV0_MAX * SD_CLK_DIV1_MAX)
;;;219            sysprintf("ERROR: wrong SD clock %dKHz since it is slower than input clock %dKHz/%d !\n", sd_clock_khz, gSDHReferenceClock, SD_CLK_DIV0_MAX * SD_CLK_DIV1_MAX);
;;;220            return;
;;;221        }
;;;222    
;;;223        //--- choose a suitable value for first divider
;;;224        for (div0 = SD_CLK_DIV0_MAX; div0 > 0; div0--) {  // choose the maximum value if can exact division
;;;225            if (rate % div0 == 0)
;;;226                break;
;;;227        }
;;;228        if (div0 == 0) { // cannot exact division
;;;229            // if rate <= SD_CLK_DIV1_MAX, set div0 to 1 since div1 can exactly divide input clock
;;;230            div0 = (rate <= SD_CLK_DIV1_MAX) ? 1 : SD_CLK_DIV0_MAX;
;;;231        }
;;;232    
;;;233        //--- calculate the second divider
;;;234        div1 = rate / div0;
;;;235        div1 &= 0xFF;
;;;236    
;;;237    //     sysprintf("fmiSD_Set_clock(): wanted clock=%d, rate=%d, div0=%d, div1=%d\n", sd_clock_khz, rate, div0, div1);
;;;238    
;;;239        //--- setup register
;;;240        outpw(REG_CLK_DIVCTL9, (inpw(REG_CLK_DIVCTL9) & ~0x18) | (0x3 << 3));       // SD clock from UPLL [4:3]
;;;241        outpw(REG_CLK_DIVCTL9, (inpw(REG_CLK_DIVCTL9) & ~0x7) | (div0-1));          // SD clock divided by CLKDIV3[SD_N] [2:0]
;;;242        outpw(REG_CLK_DIVCTL9, (inpw(REG_CLK_DIVCTL9) & ~0xff00) | ((div1-1) << 8));    // SD clock divided by CLKDIV3[SD_N] [15:8]
;;;243        for(i=0; i<1000; i++);  // waiting for clock become stable
;;;244        return;
;;;245    }
0003ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1008|
0003f0  e1a01006          MOV      r1,r6                 ;213
0003f4  e59f06d4          LDR      r0,|L1.2768|
0003f8  e5900000          LDR      r0,[r0,#0]            ;213  ; gSDHReferenceClock
0003fc  ebfffffe          BL       __aeabi_uidivmod
000400  e1a05000          MOV      r5,r0                 ;213
000404  e1a01006          MOV      r1,r6                 ;215
000408  e59f06c0          LDR      r0,|L1.2768|
00040c  e5900000          LDR      r0,[r0,#0]            ;215  ; gSDHReferenceClock
000410  ebfffffe          BL       __aeabi_uidivmod
000414  e3510000          CMP      r1,#0                 ;215
000418  0a000000          BEQ      |L1.1056|
00041c  e2855001          ADD      r5,r5,#1              ;216
                  |L1.1056|
000420  e3550b02          CMP      r5,#0x800             ;218
000424  9a000006          BLS      |L1.1092|
000428  e3a03b02          MOV      r3,#0x800             ;219
00042c  e59f069c          LDR      r0,|L1.2768|
000430  e1a01006          MOV      r1,r6                 ;219
000434  e5902000          LDR      r2,[r0,#0]            ;219  ; gSDHReferenceClock
000438  e59f0698          LDR      r0,|L1.2776|
00043c  ebfffffe          BL       sysprintf
000440  eaffffe9          B        |L1.1004|
                  |L1.1092|
000444  e3a04008          MOV      r4,#8                 ;224
000448  ea000006          B        |L1.1128|
                  |L1.1100|
00044c  e1a01004          MOV      r1,r4                 ;225
000450  e1a00005          MOV      r0,r5                 ;225
000454  ebfffffe          BL       __aeabi_uidivmod
000458  e3510000          CMP      r1,#0                 ;225
00045c  1a000000          BNE      |L1.1124|
000460  ea000002          B        |L1.1136|
                  |L1.1124|
000464  e2444001          SUB      r4,r4,#1              ;224
                  |L1.1128|
000468  e3540000          CMP      r4,#0                 ;224
00046c  1afffff6          BNE      |L1.1100|
                  |L1.1136|
000470  e1a00000          MOV      r0,r0                 ;226
000474  e3540000          CMP      r4,#0                 ;228
000478  1a000005          BNE      |L1.1172|
00047c  e3550c01          CMP      r5,#0x100             ;230
000480  8a000001          BHI      |L1.1164|
000484  e3a00001          MOV      r0,#1                 ;230
000488  ea000000          B        |L1.1168|
                  |L1.1164|
00048c  e3a00008          MOV      r0,#8                 ;230
                  |L1.1168|
000490  e1a04000          MOV      r4,r0                 ;230
                  |L1.1172|
000494  e1a01004          MOV      r1,r4                 ;234
000498  e1a00005          MOV      r0,r5                 ;234
00049c  ebfffffe          BL       __aeabi_uidivmod
0004a0  e1a08000          MOV      r8,r0                 ;234
0004a4  e20880ff          AND      r8,r8,#0xff           ;235
0004a8  e3a0020b          MOV      r0,#0xb0000000        ;240
0004ac  e5900244          LDR      r0,[r0,#0x244]        ;240
0004b0  e3800018          ORR      r0,r0,#0x18           ;240
0004b4  e3a0120b          MOV      r1,#0xb0000000        ;240
0004b8  e5810244          STR      r0,[r1,#0x244]        ;240
0004bc  e3a0020b          MOV      r0,#0xb0000000        ;241
0004c0  e5900244          LDR      r0,[r0,#0x244]        ;241
0004c4  e3c00007          BIC      r0,r0,#7              ;241
0004c8  e2441001          SUB      r1,r4,#1              ;241
0004cc  e1800001          ORR      r0,r0,r1              ;241
0004d0  e3a0120b          MOV      r1,#0xb0000000        ;241
0004d4  e5810244          STR      r0,[r1,#0x244]        ;241
0004d8  e3a0020b          MOV      r0,#0xb0000000        ;242
0004dc  e5900244          LDR      r0,[r0,#0x244]        ;242
0004e0  e3c00cff          BIC      r0,r0,#0xff00         ;242
0004e4  e2481001          SUB      r1,r8,#1              ;242
0004e8  e1800401          ORR      r0,r0,r1,LSL #8       ;242
0004ec  e3a0120b          MOV      r1,#0xb0000000        ;242
0004f0  e5810244          STR      r0,[r1,#0x244]        ;242
0004f4  e3a07000          MOV      r7,#0                 ;243
0004f8  ea000000          B        |L1.1280|
                  |L1.1276|
0004fc  e2877001          ADD      r7,r7,#1              ;243
                  |L1.1280|
000500  e3570ffa          CMP      r7,#0x3e8             ;243
000504  3afffffc          BCC      |L1.1276|
000508  e1a00000          MOV      r0,r0                 ;244
00050c  eaffffb6          B        |L1.1004|
;;;246    
                          ENDP

                  SD_CardSelect PROC
;;;247    void SD_CardSelect(int cardSel)
000510  e3500000          CMP      r0,#0
;;;248    {
;;;249        if(cardSel == 0)
000514  1a000005          BNE      |L1.1328|
;;;250            outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) & ~SDH_CTL_SDPORT_Msk);
000518  e59f1580          LDR      r1,|L1.2720|
00051c  e5911000          LDR      r1,[r1,#0]
000520  e3c11206          BIC      r1,r1,#0x60000000
000524  e59f2574          LDR      r2,|L1.2720|
000528  e5821000          STR      r1,[r2,#0]
00052c  ea000007          B        |L1.1360|
                  |L1.1328|
;;;251        else if(cardSel == 1)
000530  e3500001          CMP      r0,#1
000534  1a000005          BNE      |L1.1360|
;;;252            outpw(REG_SDH_CTL, (inpw(REG_SDH_CTL)& ~SDH_CTL_SDPORT_Msk)|(1 << SDH_CTL_SDPORT_Pos));
000538  e59f1560          LDR      r1,|L1.2720|
00053c  e5911000          LDR      r1,[r1,#0]
000540  e3c11206          BIC      r1,r1,#0x60000000
000544  e3811202          ORR      r1,r1,#0x20000000
000548  e59f2550          LDR      r2,|L1.2720|
00054c  e5821000          STR      r1,[r2,#0]
                  |L1.1360|
;;;253    }
000550  e12fff1e          BX       lr
;;;254    
                          ENDP

                  SD_Init PROC
;;;256    // Initial
;;;257    int SD_Init(SD_INFO_T *pSD)
000554  e92d4030          PUSH     {r4,r5,lr}
;;;258    {
000558  e24dd01c          SUB      sp,sp,#0x1c
00055c  e1a04000          MOV      r4,r0
;;;259        int volatile i, status;
;;;260        unsigned int resp;
;;;261        unsigned int CIDBuffer[4];
;;;262        unsigned int volatile u32CmdTimeOut;
;;;263    
;;;264        // set the clock to 300KHz
;;;265        SD_Set_clock(300);
000560  e3a00f4b          MOV      r0,#0x12c
000564  ebfffffe          BL       SD_Set_clock
;;;266    
;;;267        // power ON 74 clock
;;;268        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) | SDH_CTL_CLK74OEN_Msk);
000568  e59f0530          LDR      r0,|L1.2720|
00056c  e5900000          LDR      r0,[r0,#0]
000570  e3800020          ORR      r0,r0,#0x20
000574  e59f1524          LDR      r1,|L1.2720|
000578  e5810000          STR      r0,[r1,#0]
;;;269    
;;;270        while(inpw(REG_SDH_CTL) & SDH_CTL_CLK74OEN_Msk) {
00057c  ea000005          B        |L1.1432|
                  |L1.1408|
;;;271            if (pSD->IsCardInsert == FALSE)
000580  e5d40008          LDRB     r0,[r4,#8]
000584  e3500000          CMP      r0,#0
000588  1a000002          BNE      |L1.1432|
;;;272                return SD_NO_SD_CARD;
00058c  e59f0518          LDR      r0,|L1.2732|
                  |L1.1424|
000590  e28dd01c          ADD      sp,sp,#0x1c
;;;273        }
;;;274    
;;;275        SD_SDCommand(pSD, 0, 0);        // reset all cards
;;;276        for (i=0x1000; i>0; i--);
;;;277    
;;;278        // initial SDHC
;;;279        _sd_uR7_CMD = 1;
;;;280        u32CmdTimeOut = 5000;
;;;281    
;;;282        i = SD_SDCmdAndRsp(pSD, 8, 0x00000155, u32CmdTimeOut);
;;;283        if (i == 0) {
;;;284            // SD 2.0
;;;285            SD_SDCmdAndRsp(pSD, 55, 0x00, u32CmdTimeOut);
;;;286            _sd_uR3_CMD = 1;
;;;287            SD_SDCmdAndRsp(pSD, 41, 0x40ff8000, u32CmdTimeOut); // 2.7v-3.6v
;;;288            resp = inpw(REG_SDH_RESP0);
;;;289    
;;;290            while (!(resp & 0x00800000)) {      // check if card is ready
;;;291                SD_SDCmdAndRsp(pSD, 55, 0x00, u32CmdTimeOut);
;;;292                _sd_uR3_CMD = 1;
;;;293                SD_SDCmdAndRsp(pSD, 41, 0x40ff8000, u32CmdTimeOut); // 3.0v-3.4v
;;;294                resp = inpw(REG_SDH_RESP0);
;;;295            }
;;;296            if (resp & 0x00400000)
;;;297                pSD->CardType = SD_TYPE_SD_HIGH;
;;;298            else
;;;299                pSD->CardType = SD_TYPE_SD_LOW;
;;;300        } else {
;;;301            // SD 1.1
;;;302            SD_SDCommand(pSD, 0, 0);        // reset all cards
;;;303            for (i=0x100; i>0; i--);
;;;304    
;;;305            i = SD_SDCmdAndRsp(pSD, 55, 0x00, u32CmdTimeOut);
;;;306            if (i == 2) {   // MMC memory
;;;307    
;;;308                SD_SDCommand(pSD, 0, 0);        // reset
;;;309                for (i=0x100; i>0; i--);
;;;310    
;;;311                _sd_uR3_CMD = 1;
;;;312    
;;;313                if (SD_SDCmdAndRsp(pSD, 1, 0x40ff8000, u32CmdTimeOut) != 2) {  // eMMC memory
;;;314                    resp = inpw(REG_SDH_RESP0);
;;;315                    while (!(resp & 0x00800000)) {      // check if card is ready
;;;316                        _sd_uR3_CMD = 1;
;;;317    
;;;318                        SD_SDCmdAndRsp(pSD, 1, 0x40ff8000, u32CmdTimeOut);      // high voltage
;;;319                        resp = inpw(REG_SDH_RESP0);
;;;320                    }
;;;321    
;;;322                    if(resp & 0x00400000)
;;;323                        pSD->CardType = SD_TYPE_EMMC;
;;;324                    else
;;;325                        pSD->CardType = SD_TYPE_MMC;
;;;326                } else {
;;;327                    pSD->CardType = SD_TYPE_UNKNOWN;
;;;328                    return SD_ERR_DEVICE;
;;;329                }
;;;330            } else if (i == 0) { // SD Memory
;;;331                _sd_uR3_CMD = 1;
;;;332                SD_SDCmdAndRsp(pSD, 41, 0x00ff8000, u32CmdTimeOut); // 3.0v-3.4v
;;;333                resp = inpw(REG_SDH_RESP0);
;;;334                while (!(resp & 0x00800000)) {      // check if card is ready
;;;335                    SD_SDCmdAndRsp(pSD, 55, 0x00,u32CmdTimeOut);
;;;336                    _sd_uR3_CMD = 1;
;;;337                    SD_SDCmdAndRsp(pSD, 41, 0x00ff8000, u32CmdTimeOut); // 3.0v-3.4v
;;;338                    resp = inpw(REG_SDH_RESP0);
;;;339                }
;;;340                pSD->CardType = SD_TYPE_SD_LOW;
;;;341            } else {
;;;342                pSD->CardType = SD_TYPE_UNKNOWN;
;;;343                return SD_INIT_ERROR;
;;;344            }
;;;345        }
;;;346    
;;;347        // CMD2, CMD3
;;;348        if (pSD->CardType != SD_TYPE_UNKNOWN) {
;;;349            SD_SDCmdAndRsp2(pSD, 2, 0x00, CIDBuffer);
;;;350            if ((pSD->CardType == SD_TYPE_MMC) || (pSD->CardType == SD_TYPE_EMMC)) {
;;;351                if ((status = SD_SDCmdAndRsp(pSD, 3, 0x10000, 0)) != 0)        // set RCA
;;;352                    return status;
;;;353                pSD->RCA = 0x10000;
;;;354            } else {
;;;355                if ((status = SD_SDCmdAndRsp(pSD, 3, 0x00, 0)) != 0)       // get RCA
;;;356                    return status;
;;;357                else
;;;358                    pSD->RCA = (inpw(REG_SDH_RESP0) << 8) & 0xffff0000;
;;;359            }
;;;360        }
;;;361    
;;;362        if (pSD->CardType == SD_TYPE_SD_HIGH)
;;;363            sysprintf("This is high capacity SD memory card\n");
;;;364        if (pSD->CardType == SD_TYPE_SD_LOW)
;;;365            sysprintf("This is standard capacity SD memory card\n");
;;;366        if (pSD->CardType == SD_TYPE_MMC)
;;;367            sysprintf("This is MMC memory card\n");
;;;368        return 0;
;;;369    }
000594  e8bd8030          POP      {r4,r5,pc}
                  |L1.1432|
000598  e59f0500          LDR      r0,|L1.2720|
00059c  e5900000          LDR      r0,[r0,#0]            ;270
0005a0  e3100020          TST      r0,#0x20              ;270
0005a4  1afffff5          BNE      |L1.1408|
0005a8  e3a02000          MOV      r2,#0                 ;275
0005ac  e1a01002          MOV      r1,r2                 ;275
0005b0  e1a00004          MOV      r0,r4                 ;275
0005b4  ebfffffe          BL       SD_SDCommand
0005b8  e3a00a01          MOV      r0,#0x1000            ;276
0005bc  e58d0018          STR      r0,[sp,#0x18]         ;276
0005c0  ea000002          B        |L1.1488|
                  |L1.1476|
0005c4  e59d0018          LDR      r0,[sp,#0x18]         ;276
0005c8  e2400001          SUB      r0,r0,#1              ;276
0005cc  e58d0018          STR      r0,[sp,#0x18]         ;276
                  |L1.1488|
0005d0  e59d0018          LDR      r0,[sp,#0x18]         ;276
0005d4  e3500000          CMP      r0,#0                 ;276
0005d8  cafffff9          BGT      |L1.1476|
0005dc  e3a00001          MOV      r0,#1                 ;279
0005e0  e59f14c8          LDR      r1,|L1.2736|
0005e4  e5810000          STR      r0,[r1,#0]            ;279  ; _sd_uR7_CMD
0005e8  e59f04ec          LDR      r0,|L1.2780|
0005ec  e58d0000          STR      r0,[sp,#0]            ;280
0005f0  e59d3000          LDR      r3,[sp,#0]            ;282
0005f4  e59f24e4          LDR      r2,|L1.2784|
0005f8  e3a01008          MOV      r1,#8                 ;282
0005fc  e1a00004          MOV      r0,r4                 ;282
000600  ebfffffe          BL       SD_SDCmdAndRsp
000604  e58d0018          STR      r0,[sp,#0x18]         ;282
000608  e59d0018          LDR      r0,[sp,#0x18]         ;283
00060c  e3500000          CMP      r0,#0                 ;283
000610  1a000028          BNE      |L1.1720|
000614  e3a02000          MOV      r2,#0                 ;285
000618  e3a01037          MOV      r1,#0x37              ;285
00061c  e1a00004          MOV      r0,r4                 ;285
000620  e59d3000          LDR      r3,[sp,#0]            ;285
000624  ebfffffe          BL       SD_SDCmdAndRsp
000628  e3a00001          MOV      r0,#1                 ;286
00062c  e59f148c          LDR      r1,|L1.2752|
000630  e5810000          STR      r0,[r1,#0]            ;286  ; _sd_uR3_CMD
000634  e59d3000          LDR      r3,[sp,#0]            ;287
000638  e59f24a4          LDR      r2,|L1.2788|
00063c  e3a01029          MOV      r1,#0x29              ;287
000640  e1a00004          MOV      r0,r4                 ;287
000644  ebfffffe          BL       SD_SDCmdAndRsp
000648  e59f0468          LDR      r0,|L1.2744|
00064c  e5905000          LDR      r5,[r0,#0]            ;288
000650  ea00000e          B        |L1.1680|
                  |L1.1620|
000654  e3a02000          MOV      r2,#0                 ;291
000658  e3a01037          MOV      r1,#0x37              ;291
00065c  e1a00004          MOV      r0,r4                 ;291
000660  e59d3000          LDR      r3,[sp,#0]            ;291
000664  ebfffffe          BL       SD_SDCmdAndRsp
000668  e3a00001          MOV      r0,#1                 ;292
00066c  e59f144c          LDR      r1,|L1.2752|
000670  e5810000          STR      r0,[r1,#0]            ;292  ; _sd_uR3_CMD
000674  e59d3000          LDR      r3,[sp,#0]            ;293
000678  e59f2464          LDR      r2,|L1.2788|
00067c  e3a01029          MOV      r1,#0x29              ;293
000680  e1a00004          MOV      r0,r4                 ;293
000684  ebfffffe          BL       SD_SDCmdAndRsp
000688  e59f0428          LDR      r0,|L1.2744|
00068c  e5905000          LDR      r5,[r0,#0]            ;294
                  |L1.1680|
000690  e3150502          TST      r5,#0x800000          ;290
000694  0affffee          BEQ      |L1.1620|
000698  e3150501          TST      r5,#0x400000          ;296
00069c  0a000002          BEQ      |L1.1708|
0006a0  e3a00001          MOV      r0,#1                 ;297
0006a4  e5840000          STR      r0,[r4,#0]            ;297
0006a8  ea000070          B        |L1.2160|
                  |L1.1708|
0006ac  e3a00002          MOV      r0,#2                 ;299
0006b0  e5840000          STR      r0,[r4,#0]            ;299
0006b4  ea00006d          B        |L1.2160|
                  |L1.1720|
0006b8  e3a02000          MOV      r2,#0                 ;302
0006bc  e1a01002          MOV      r1,r2                 ;302
0006c0  e1a00004          MOV      r0,r4                 ;302
0006c4  ebfffffe          BL       SD_SDCommand
0006c8  e3a00c01          MOV      r0,#0x100             ;303
0006cc  e58d0018          STR      r0,[sp,#0x18]         ;303
0006d0  ea000002          B        |L1.1760|
                  |L1.1748|
0006d4  e59d0018          LDR      r0,[sp,#0x18]         ;303
0006d8  e2400001          SUB      r0,r0,#1              ;303
0006dc  e58d0018          STR      r0,[sp,#0x18]         ;303
                  |L1.1760|
0006e0  e59d0018          LDR      r0,[sp,#0x18]         ;303
0006e4  e3500000          CMP      r0,#0                 ;303
0006e8  cafffff9          BGT      |L1.1748|
0006ec  e3a02000          MOV      r2,#0                 ;305
0006f0  e3a01037          MOV      r1,#0x37              ;305
0006f4  e1a00004          MOV      r0,r4                 ;305
0006f8  e59d3000          LDR      r3,[sp,#0]            ;305
0006fc  ebfffffe          BL       SD_SDCmdAndRsp
000700  e58d0018          STR      r0,[sp,#0x18]         ;305
000704  e59d0018          LDR      r0,[sp,#0x18]         ;306
000708  e3500002          CMP      r0,#2                 ;306
00070c  1a000031          BNE      |L1.2008|
000710  e3a02000          MOV      r2,#0                 ;308
000714  e1a01002          MOV      r1,r2                 ;308
000718  e1a00004          MOV      r0,r4                 ;308
00071c  ebfffffe          BL       SD_SDCommand
000720  e3a00c01          MOV      r0,#0x100             ;309
000724  e58d0018          STR      r0,[sp,#0x18]         ;309
000728  ea000002          B        |L1.1848|
                  |L1.1836|
00072c  e59d0018          LDR      r0,[sp,#0x18]         ;309
000730  e2400001          SUB      r0,r0,#1              ;309
000734  e58d0018          STR      r0,[sp,#0x18]         ;309
                  |L1.1848|
000738  e59d0018          LDR      r0,[sp,#0x18]         ;309
00073c  e3500000          CMP      r0,#0                 ;309
000740  cafffff9          BGT      |L1.1836|
000744  e3a00001          MOV      r0,#1                 ;311
000748  e59f1370          LDR      r1,|L1.2752|
00074c  e5810000          STR      r0,[r1,#0]            ;311  ; _sd_uR3_CMD
000750  e59d3000          LDR      r3,[sp,#0]            ;313
000754  e59f2388          LDR      r2,|L1.2788|
000758  e3a01001          MOV      r1,#1                 ;313
00075c  e1a00004          MOV      r0,r4                 ;313
000760  ebfffffe          BL       SD_SDCmdAndRsp
000764  e3500002          CMP      r0,#2                 ;313
000768  0a000016          BEQ      |L1.1992|
00076c  e59f0344          LDR      r0,|L1.2744|
000770  e5905000          LDR      r5,[r0,#0]            ;314
000774  ea000009          B        |L1.1952|
                  |L1.1912|
000778  e3a00001          MOV      r0,#1                 ;316
00077c  e59f133c          LDR      r1,|L1.2752|
000780  e5810000          STR      r0,[r1,#0]            ;316  ; _sd_uR3_CMD
000784  e59d3000          LDR      r3,[sp,#0]            ;318
000788  e59f2354          LDR      r2,|L1.2788|
00078c  e3a01001          MOV      r1,#1                 ;318
000790  e1a00004          MOV      r0,r4                 ;318
000794  ebfffffe          BL       SD_SDCmdAndRsp
000798  e59f0318          LDR      r0,|L1.2744|
00079c  e5905000          LDR      r5,[r0,#0]            ;319
                  |L1.1952|
0007a0  e3150502          TST      r5,#0x800000          ;315
0007a4  0afffff3          BEQ      |L1.1912|
0007a8  e3150501          TST      r5,#0x400000          ;322
0007ac  0a000002          BEQ      |L1.1980|
0007b0  e3a00004          MOV      r0,#4                 ;323
0007b4  e5840000          STR      r0,[r4,#0]            ;323
0007b8  ea00002c          B        |L1.2160|
                  |L1.1980|
0007bc  e3a00003          MOV      r0,#3                 ;325
0007c0  e5840000          STR      r0,[r4,#0]            ;325
0007c4  ea000029          B        |L1.2160|
                  |L1.1992|
0007c8  e3a00000          MOV      r0,#0                 ;327
0007cc  e5840000          STR      r0,[r4,#0]            ;327
0007d0  e59f0310          LDR      r0,|L1.2792|
0007d4  eaffff6d          B        |L1.1424|
                  |L1.2008|
0007d8  e59d0018          LDR      r0,[sp,#0x18]         ;330
0007dc  e3500000          CMP      r0,#0                 ;330
0007e0  1a00001e          BNE      |L1.2144|
0007e4  e3a00001          MOV      r0,#1                 ;331
0007e8  e59f12d0          LDR      r1,|L1.2752|
0007ec  e5810000          STR      r0,[r1,#0]            ;331  ; _sd_uR3_CMD
0007f0  e59d3000          LDR      r3,[sp,#0]            ;332
0007f4  e59f22f0          LDR      r2,|L1.2796|
0007f8  e3a01029          MOV      r1,#0x29              ;332
0007fc  e1a00004          MOV      r0,r4                 ;332
000800  ebfffffe          BL       SD_SDCmdAndRsp
000804  e59f02ac          LDR      r0,|L1.2744|
000808  e5905000          LDR      r5,[r0,#0]            ;333
00080c  ea00000e          B        |L1.2124|
                  |L1.2064|
000810  e3a02000          MOV      r2,#0                 ;335
000814  e3a01037          MOV      r1,#0x37              ;335
000818  e1a00004          MOV      r0,r4                 ;335
00081c  e59d3000          LDR      r3,[sp,#0]            ;335
000820  ebfffffe          BL       SD_SDCmdAndRsp
000824  e3a00001          MOV      r0,#1                 ;336
000828  e59f1290          LDR      r1,|L1.2752|
00082c  e5810000          STR      r0,[r1,#0]            ;336  ; _sd_uR3_CMD
000830  e59d3000          LDR      r3,[sp,#0]            ;337
000834  e59f22b0          LDR      r2,|L1.2796|
000838  e3a01029          MOV      r1,#0x29              ;337
00083c  e1a00004          MOV      r0,r4                 ;337
000840  ebfffffe          BL       SD_SDCmdAndRsp
000844  e59f026c          LDR      r0,|L1.2744|
000848  e5905000          LDR      r5,[r0,#0]            ;338
                  |L1.2124|
00084c  e3150502          TST      r5,#0x800000          ;334
000850  0affffee          BEQ      |L1.2064|
000854  e3a00002          MOV      r0,#2                 ;340
000858  e5840000          STR      r0,[r4,#0]            ;340
00085c  ea000003          B        |L1.2160|
                  |L1.2144|
000860  e3a00000          MOV      r0,#0                 ;342
000864  e5840000          STR      r0,[r4,#0]            ;342
000868  e59f0280          LDR      r0,|L1.2800|
00086c  eaffff47          B        |L1.1424|
                  |L1.2160|
000870  e5940000          LDR      r0,[r4,#0]            ;348
000874  e3500000          CMP      r0,#0                 ;348
000878  0a000026          BEQ      |L1.2328|
00087c  e28d3004          ADD      r3,sp,#4              ;349
000880  e3a02000          MOV      r2,#0                 ;349
000884  e3a01002          MOV      r1,#2                 ;349
000888  e1a00004          MOV      r0,r4                 ;349
00088c  ebfffffe          BL       SD_SDCmdAndRsp2
000890  e5940000          LDR      r0,[r4,#0]            ;350
000894  e3500003          CMP      r0,#3                 ;350
000898  0a000002          BEQ      |L1.2216|
00089c  e5940000          LDR      r0,[r4,#0]            ;350
0008a0  e3500004          CMP      r0,#4                 ;350
0008a4  1a00000c          BNE      |L1.2268|
                  |L1.2216|
0008a8  e3a03000          MOV      r3,#0                 ;351
0008ac  e3a02801          MOV      r2,#0x10000           ;351
0008b0  e3a01003          MOV      r1,#3                 ;351
0008b4  e1a00004          MOV      r0,r4                 ;351
0008b8  ebfffffe          BL       SD_SDCmdAndRsp
0008bc  e58d0014          STR      r0,[sp,#0x14]         ;351
0008c0  e3500000          CMP      r0,#0                 ;351
0008c4  0a000001          BEQ      |L1.2256|
0008c8  e59d0014          LDR      r0,[sp,#0x14]         ;352
0008cc  eaffff2f          B        |L1.1424|
                  |L1.2256|
0008d0  e3a00801          MOV      r0,#0x10000           ;353
0008d4  e5840004          STR      r0,[r4,#4]            ;353
0008d8  ea00000e          B        |L1.2328|
                  |L1.2268|
0008dc  e3a03000          MOV      r3,#0                 ;355
0008e0  e1a02003          MOV      r2,r3                 ;355
0008e4  e3a01003          MOV      r1,#3                 ;355
0008e8  e1a00004          MOV      r0,r4                 ;355
0008ec  ebfffffe          BL       SD_SDCmdAndRsp
0008f0  e58d0014          STR      r0,[sp,#0x14]         ;355
0008f4  e3500000          CMP      r0,#0                 ;355
0008f8  0a000001          BEQ      |L1.2308|
0008fc  e59d0014          LDR      r0,[sp,#0x14]         ;356
000900  eaffff22          B        |L1.1424|
                  |L1.2308|
000904  e59f01ac          LDR      r0,|L1.2744|
000908  e5900000          LDR      r0,[r0,#0]            ;358
00090c  e59f11e0          LDR      r1,|L1.2804|
000910  e0010400          AND      r0,r1,r0,LSL #8       ;358
000914  e5840004          STR      r0,[r4,#4]            ;358
                  |L1.2328|
000918  e5940000          LDR      r0,[r4,#0]            ;362
00091c  e3500001          CMP      r0,#1                 ;362
000920  1a000001          BNE      |L1.2348|
000924  e28f0f73          ADR      r0,|L1.2808|
000928  ebfffffe          BL       sysprintf
                  |L1.2348|
00092c  e5940000          LDR      r0,[r4,#0]            ;364
000930  e3500002          CMP      r0,#2                 ;364
000934  1a000001          BNE      |L1.2368|
000938  e28f0e1e          ADR      r0,|L1.2848|
00093c  ebfffffe          BL       sysprintf
                  |L1.2368|
000940  e5940000          LDR      r0,[r4,#0]            ;366
000944  e3500003          CMP      r0,#3                 ;366
000948  1a000001          BNE      |L1.2388|
00094c  e28f0f7e          ADR      r0,|L1.2892|
000950  ebfffffe          BL       sysprintf
                  |L1.2388|
000954  e3a00000          MOV      r0,#0                 ;368
000958  eaffff0c          B        |L1.1424|
;;;370    
                          ENDP

                  SD_SwitchToHighSpeed PROC
;;;371    
;;;372    int SD_SwitchToHighSpeed(SD_INFO_T *pSD)
00095c  e92d4078          PUSH     {r3-r6,lr}
;;;373    {
000960  e1a06000          MOV      r6,r0
;;;374        int volatile status=0;
000964  e3a00000          MOV      r0,#0
000968  e58d0000          STR      r0,[sp,#0]
;;;375        unsigned short current_comsumption, busy_status0;
;;;376    
;;;377        outpw(REG_SDH_DMASA, (unsigned int)_sd_pSDHCBuffer);    // set DMA transfer starting address
00096c  e59f01f4          LDR      r0,|L1.2920|
000970  e5900000          LDR      r0,[r0,#0]  ; _sd_pSDHCBuffer
000974  e59f11f0          LDR      r1,|L1.2924|
000978  e5810000          STR      r0,[r1,#0]
;;;378        outpw(REG_SDH_BLEN, 63);    // 512 bit
00097c  e3a0003f          MOV      r0,#0x3f
000980  e2811e43          ADD      r1,r1,#0x430
000984  e5810000          STR      r0,[r1,#0]
;;;379    
;;;380        if ((status = SD_SDCmdAndRspDataIn(pSD, 6, 0x00ffff01)) != 0)
000988  e59f21e0          LDR      r2,|L1.2928|
00098c  e3a01006          MOV      r1,#6
000990  e1a00006          MOV      r0,r6
000994  ebfffffe          BL       SD_SDCmdAndRspDataIn
000998  e58d0000          STR      r0,[sp,#0]
00099c  e3500000          CMP      r0,#0
0009a0  0a000001          BEQ      |L1.2476|
;;;381            return 1;
0009a4  e3a00001          MOV      r0,#1
                  |L1.2472|
;;;382    
;;;383        current_comsumption = _sd_pSDHCBuffer[0]<<8 | _sd_pSDHCBuffer[1];
;;;384        if (!current_comsumption)
;;;385            return 1;
;;;386    
;;;387        busy_status0 = _sd_pSDHCBuffer[28]<<8 | _sd_pSDHCBuffer[29];
;;;388    
;;;389        if (!busy_status0) { // function ready
;;;390            outpw(REG_SDH_DMASA, (unsigned int)_sd_pSDHCBuffer);        // set DMA transfer starting address
;;;391            outpw(REG_SDH_BLEN, 63);    // 512 bit
;;;392    
;;;393            if ((status = SD_SDCmdAndRspDataIn(pSD, 6, 0x80ffff01)) != 0)
;;;394                return 1;
;;;395    
;;;396            // function change timing: 8 clocks
;;;397            outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)| SDH_CTL_CLK8OEN_Msk);
;;;398            while(inpw(REG_SDH_CTL) & SDH_CTL_CLK8OEN_Msk);
;;;399    
;;;400            current_comsumption = _sd_pSDHCBuffer[0]<<8 | _sd_pSDHCBuffer[1];
;;;401            if (!current_comsumption)
;;;402                return 1;
;;;403    
;;;404            return 0;
;;;405        } else
;;;406            return 1;
;;;407    }
0009a8  e8bd8078          POP      {r3-r6,pc}
                  |L1.2476|
0009ac  e59f01b4          LDR      r0,|L1.2920|
0009b0  e5900000          LDR      r0,[r0,#0]            ;383  ; _sd_pSDHCBuffer
0009b4  e5d00001          LDRB     r0,[r0,#1]            ;383
0009b8  e59f11a8          LDR      r1,|L1.2920|
0009bc  e5911000          LDR      r1,[r1,#0]            ;383  ; _sd_pSDHCBuffer
0009c0  e5d11000          LDRB     r1,[r1,#0]            ;383
0009c4  e1804401          ORR      r4,r0,r1,LSL #8       ;383
0009c8  e3540000          CMP      r4,#0                 ;384
0009cc  1a000001          BNE      |L1.2520|
0009d0  e3a00001          MOV      r0,#1                 ;385
0009d4  eafffff3          B        |L1.2472|
                  |L1.2520|
0009d8  e59f0188          LDR      r0,|L1.2920|
0009dc  e5900000          LDR      r0,[r0,#0]            ;387  ; _sd_pSDHCBuffer
0009e0  e5d0001d          LDRB     r0,[r0,#0x1d]         ;387
0009e4  e59f117c          LDR      r1,|L1.2920|
0009e8  e5911000          LDR      r1,[r1,#0]            ;387  ; _sd_pSDHCBuffer
0009ec  e5d1101c          LDRB     r1,[r1,#0x1c]         ;387
0009f0  e1805401          ORR      r5,r0,r1,LSL #8       ;387
0009f4  e3550000          CMP      r5,#0                 ;389
0009f8  1a000026          BNE      |L1.2712|
0009fc  e59f0164          LDR      r0,|L1.2920|
000a00  e5900000          LDR      r0,[r0,#0]            ;390  ; _sd_pSDHCBuffer
000a04  e59f1160          LDR      r1,|L1.2924|
000a08  e5810000          STR      r0,[r1,#0]            ;390
000a0c  e3a0003f          MOV      r0,#0x3f              ;391
000a10  e2811e43          ADD      r1,r1,#0x430          ;391
000a14  e5810000          STR      r0,[r1,#0]            ;391
000a18  e59f2154          LDR      r2,|L1.2932|
000a1c  e3a01006          MOV      r1,#6                 ;393
000a20  e1a00006          MOV      r0,r6                 ;393
000a24  ebfffffe          BL       SD_SDCmdAndRspDataIn
000a28  e58d0000          STR      r0,[sp,#0]            ;393
000a2c  e3500000          CMP      r0,#0                 ;393
000a30  0a000001          BEQ      |L1.2620|
000a34  e3a00001          MOV      r0,#1                 ;394
000a38  eaffffda          B        |L1.2472|
                  |L1.2620|
000a3c  e59f005c          LDR      r0,|L1.2720|
000a40  e5900000          LDR      r0,[r0,#0]            ;397
000a44  e3800040          ORR      r0,r0,#0x40           ;397
000a48  e59f1050          LDR      r1,|L1.2720|
000a4c  e5810000          STR      r0,[r1,#0]            ;397
000a50  e1a00000          MOV      r0,r0                 ;398
                  |L1.2644|
000a54  e59f0044          LDR      r0,|L1.2720|
000a58  e5900000          LDR      r0,[r0,#0]            ;398
000a5c  e3100040          TST      r0,#0x40              ;398
000a60  1afffffb          BNE      |L1.2644|
000a64  e59f00fc          LDR      r0,|L1.2920|
000a68  e5900000          LDR      r0,[r0,#0]            ;400  ; _sd_pSDHCBuffer
000a6c  e5d00001          LDRB     r0,[r0,#1]            ;400
000a70  e59f10f0          LDR      r1,|L1.2920|
000a74  e5911000          LDR      r1,[r1,#0]            ;400  ; _sd_pSDHCBuffer
000a78  e5d11000          LDRB     r1,[r1,#0]            ;400
000a7c  e1804401          ORR      r4,r0,r1,LSL #8       ;400
000a80  e3540000          CMP      r4,#0                 ;401
000a84  1a000001          BNE      |L1.2704|
000a88  e3a00001          MOV      r0,#1                 ;402
000a8c  eaffffc5          B        |L1.2472|
                  |L1.2704|
000a90  e3a00000          MOV      r0,#0                 ;404
000a94  eaffffc3          B        |L1.2472|
                  |L1.2712|
000a98  e3a00001          MOV      r0,#1                 ;406
000a9c  eaffffc1          B        |L1.2472|
                  |L1.2720|
                          DCD      0xb000c820
                  |L1.2724|
                          DCD      0xb000c82c
                  |L1.2728|
                          DCD      0xb000c824
                  |L1.2732|
                          DCD      0xffff0110
                  |L1.2736|
                          DCD      _sd_uR7_CMD
                  |L1.2740|
                          DCD      0xb000c834
                  |L1.2744|
                          DCD      0xb000c830
                  |L1.2748|
                          DCD      0xffff0119
                  |L1.2752|
                          DCD      _sd_uR3_CMD
                  |L1.2756|
                          DCD      0xffff0116
                  |L1.2760|
                          DCD      0xb000c000
                  |L1.2764|
                          DCD      0xffff0117
                  |L1.2768|
                          DCD      gSDHReferenceClock
                  |L1.2772|
                          DCD      ||.constdata||
                  |L1.2776|
                          DCD      ||.constdata||+0x4c
                  |L1.2780|
                          DCD      0x00001388
                  |L1.2784|
                          DCD      0x00000155
                  |L1.2788|
                          DCD      0x40ff8000
                  |L1.2792|
                          DCD      0xffff0111
                  |L1.2796|
                          DCD      0x00ff8000
                  |L1.2800|
                          DCD      0xffff0115
                  |L1.2804|
                          DCD      0xffff0000
                  |L1.2808|
000af8  54686973          DCB      "This is high capacity SD memory card\n",0
000afc  20697320
000b00  68696768
000b04  20636170
000b08  61636974
000b0c  79205344
000b10  206d656d
000b14  6f727920
000b18  63617264
000b1c  0a00    
000b1e  00                DCB      0
000b1f  00                DCB      0
                  |L1.2848|
000b20  54686973          DCB      "This is standard capacity SD memory card\n",0
000b24  20697320
000b28  7374616e
000b2c  64617264
000b30  20636170
000b34  61636974
000b38  79205344
000b3c  206d656d
000b40  6f727920
000b44  63617264
000b48  0a00    
000b4a  00                DCB      0
000b4b  00                DCB      0
                  |L1.2892|
000b4c  54686973          DCB      "This is MMC memory card\n",0
000b50  20697320
000b54  4d4d4320
000b58  6d656d6f
000b5c  72792063
000b60  6172640a
000b64  00      
000b65  00                DCB      0
000b66  00                DCB      0
000b67  00                DCB      0
                  |L1.2920|
                          DCD      _sd_pSDHCBuffer
                  |L1.2924|
                          DCD      0xb000c408
                  |L1.2928|
                          DCD      0x00ffff01
                  |L1.2932|
                          DCD      0x80ffff01
                          ENDP

                  SD_SelectCardType PROC
;;;409    
;;;410    int SD_SelectCardType(SD_INFO_T *pSD)
000b78  e92d4038          PUSH     {r3-r5,lr}
;;;411    {
000b7c  e1a04000          MOV      r4,r0
;;;412        int volatile status=0;
000b80  e3a00000          MOV      r0,#0
000b84  e58d0000          STR      r0,[sp,#0]
;;;413        unsigned int arg;
;;;414    
;;;415        if ((status = SD_SDCmdAndRsp(pSD, 7, pSD->RCA, 0)) != 0)
000b88  e3a03000          MOV      r3,#0
000b8c  e3a01007          MOV      r1,#7
000b90  e5942004          LDR      r2,[r4,#4]
000b94  e1a00004          MOV      r0,r4
000b98  ebfffffe          BL       SD_SDCmdAndRsp
000b9c  e58d0000          STR      r0,[sp,#0]
000ba0  e3500000          CMP      r0,#0
000ba4  0a000001          BEQ      |L1.2992|
;;;416            return status;
000ba8  e59d0000          LDR      r0,[sp,#0]
                  |L1.2988|
;;;417    
;;;418        SD_CheckRB();
;;;419    
;;;420        // if SD card set 4bit
;;;421        if (pSD->CardType == SD_TYPE_SD_HIGH) {
;;;422            _sd_pSDHCBuffer = (unsigned char *)((unsigned int)_sd_ucSDHCBuffer);
;;;423            outpw(REG_SDH_DMASA, (unsigned int)_sd_pSDHCBuffer);    // set DMA transfer starting address
;;;424            outpw(REG_SDH_BLEN, 0x07);  // 64 bit
;;;425    
;;;426            if ((status = SD_SDCmdAndRsp(pSD, 55, pSD->RCA, 0)) != 0)
;;;427                return status;
;;;428            if ((status = SD_SDCmdAndRspDataIn(pSD, 51, 0x00)) != 0)
;;;429                return status;
;;;430    
;;;431            if ((_sd_ucSDHCBuffer[0] & 0xf) == 0x2) {
;;;432                status = SD_SwitchToHighSpeed(pSD);
;;;433                if (status == 0) {
;;;434                    /* divider */
;;;435                    SD_Set_clock(SDHC_FREQ);
;;;436                }
;;;437            }
;;;438    
;;;439            if ((status = SD_SDCmdAndRsp(pSD, 55, pSD->RCA, 0)) != 0)
;;;440                return status;
;;;441            if ((status = SD_SDCmdAndRsp(pSD, 6, 0x02, 0)) != 0)   // set bus width
;;;442                return status;
;;;443    
;;;444            outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)| SDH_CTL_DBW_Msk);
;;;445        } else if (pSD->CardType == SD_TYPE_SD_LOW) {
;;;446            _sd_pSDHCBuffer = (unsigned char *)((unsigned int)_sd_ucSDHCBuffer);
;;;447            outpw(REG_SDH_DMASA, (unsigned int) _sd_pSDHCBuffer); // set DMA transfer starting address
;;;448            outpw(REG_SDH_BLEN, 0x07);  // 64 bit
;;;449    
;;;450            if ((status = SD_SDCmdAndRsp(pSD, 55, pSD->RCA, 0)) != 0)
;;;451                return status;
;;;452            if ((status = SD_SDCmdAndRspDataIn(pSD, 51, 0x00)) != 0)
;;;453                return status;
;;;454    
;;;455            // set data bus width. ACMD6 for SD card, SDCR_DBW for host.
;;;456            if ((status = SD_SDCmdAndRsp(pSD, 55, pSD->RCA, 0)) != 0)
;;;457                return status;
;;;458    
;;;459            if ((status = SD_SDCmdAndRsp(pSD, 6, 0x02, 0)) != 0)   // set bus width
;;;460                return status;
;;;461    
;;;462            outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)| SDH_CTL_DBW_Msk);
;;;463        } else if ((pSD->CardType == SD_TYPE_MMC) ||(pSD->CardType == SD_TYPE_EMMC)) {
;;;464    
;;;465            if(pSD->CardType == SD_TYPE_MMC)
;;;466                outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) & ~SDH_CTL_DBW_Msk);
;;;467    
;;;468            //--- sent CMD6 to MMC card to set bus width to 4 bits mode
;;;469            // set CMD6 argument Access field to 3, Index to 183, Value to 1 (4-bit mode)
;;;470            arg = (3 << 24) | (183 << 16) | (1 << 8);
;;;471            if ((status = SD_SDCmdAndRsp(pSD, 6, arg, 0)) != 0)
;;;472                return status;
;;;473            SD_CheckRB();
;;;474    
;;;475            outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)| SDH_CTL_DBW_Msk);
;;;476        }
;;;477    
;;;478        if ((status = SD_SDCmdAndRsp(pSD, 16, SD_BLOCK_SIZE, 0)) != 0) // set block length
;;;479            return status;
;;;480        outpw(REG_SDH_BLEN, SD_BLOCK_SIZE - 1);           // set the block size
;;;481    
;;;482        SD_SDCommand(pSD, 7, 0);
;;;483        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|SDH_CTL_CLK8OEN_Msk);
;;;484        while(inpw(REG_SDH_CTL) & SDH_CTL_CLK8OEN_Msk);
;;;485    
;;;486        outpw(REG_SDH_INTEN, inpw(REG_SDH_INTEN)| SDH_INTEN_BLKDIEN_Msk);
;;;487    
;;;488        return 0;
;;;489    }
000bac  e8bd8038          POP      {r3-r5,pc}
                  |L1.2992|
000bb0  ebfffffe          BL       SD_CheckRB
000bb4  e5940000          LDR      r0,[r4,#0]            ;421
000bb8  e3500001          CMP      r0,#1                 ;421
000bbc  1a000043          BNE      |L1.3280|
000bc0  e59f07f0          LDR      r0,|L1.5048|
000bc4  e51f1064          LDR      r1,|L1.2920|
000bc8  e5810000          STR      r0,[r1,#0]            ;422  ; _sd_pSDHCBuffer
000bcc  e2810000          ADD      r0,r1,#0              ;423
000bd0  e5900000          LDR      r0,[r0,#0]            ;423  ; _sd_pSDHCBuffer
000bd4  e51f1070          LDR      r1,|L1.2924|
000bd8  e5810000          STR      r0,[r1,#0]            ;423
000bdc  e3a00007          MOV      r0,#7                 ;424
000be0  e2811e43          ADD      r1,r1,#0x430          ;424
000be4  e5810000          STR      r0,[r1,#0]            ;424
000be8  e3a03000          MOV      r3,#0                 ;426
000bec  e3a01037          MOV      r1,#0x37              ;426
000bf0  e5942004          LDR      r2,[r4,#4]            ;426
000bf4  e1a00004          MOV      r0,r4                 ;426
000bf8  ebfffffe          BL       SD_SDCmdAndRsp
000bfc  e58d0000          STR      r0,[sp,#0]            ;426
000c00  e3500000          CMP      r0,#0                 ;426
000c04  0a000001          BEQ      |L1.3088|
000c08  e59d0000          LDR      r0,[sp,#0]            ;427
000c0c  eaffffe6          B        |L1.2988|
                  |L1.3088|
000c10  e3a02000          MOV      r2,#0                 ;428
000c14  e3a01033          MOV      r1,#0x33              ;428
000c18  e1a00004          MOV      r0,r4                 ;428
000c1c  ebfffffe          BL       SD_SDCmdAndRspDataIn
000c20  e58d0000          STR      r0,[sp,#0]            ;428
000c24  e3500000          CMP      r0,#0                 ;428
000c28  0a000001          BEQ      |L1.3124|
000c2c  e59d0000          LDR      r0,[sp,#0]            ;429
000c30  eaffffdd          B        |L1.2988|
                  |L1.3124|
000c34  e59f077c          LDR      r0,|L1.5048|
000c38  e5d00000          LDRB     r0,[r0,#0]            ;431  ; _sd_ucSDHCBuffer
000c3c  e200000f          AND      r0,r0,#0xf            ;431
000c40  e3500002          CMP      r0,#2                 ;431
000c44  1a000007          BNE      |L1.3176|
000c48  e1a00004          MOV      r0,r4                 ;432
000c4c  ebfffffe          BL       SD_SwitchToHighSpeed
000c50  e58d0000          STR      r0,[sp,#0]            ;432
000c54  e59d0000          LDR      r0,[sp,#0]            ;433
000c58  e3500000          CMP      r0,#0                 ;433
000c5c  1a000001          BNE      |L1.3176|
000c60  e59f0754          LDR      r0,|L1.5052|
000c64  ebfffffe          BL       SD_Set_clock
                  |L1.3176|
000c68  e3a03000          MOV      r3,#0                 ;439
000c6c  e3a01037          MOV      r1,#0x37              ;439
000c70  e5942004          LDR      r2,[r4,#4]            ;439
000c74  e1a00004          MOV      r0,r4                 ;439
000c78  ebfffffe          BL       SD_SDCmdAndRsp
000c7c  e58d0000          STR      r0,[sp,#0]            ;439
000c80  e3500000          CMP      r0,#0                 ;439
000c84  0a000001          BEQ      |L1.3216|
000c88  e59d0000          LDR      r0,[sp,#0]            ;440
000c8c  eaffffc6          B        |L1.2988|
                  |L1.3216|
000c90  e3a03000          MOV      r3,#0                 ;441
000c94  e3a02002          MOV      r2,#2                 ;441
000c98  e3a01006          MOV      r1,#6                 ;441
000c9c  e1a00004          MOV      r0,r4                 ;441
000ca0  ebfffffe          BL       SD_SDCmdAndRsp
000ca4  e58d0000          STR      r0,[sp,#0]            ;441
000ca8  e3500000          CMP      r0,#0                 ;441
000cac  0a000001          BEQ      |L1.3256|
000cb0  e59d0000          LDR      r0,[sp,#0]            ;442
000cb4  eaffffbc          B        |L1.2988|
                  |L1.3256|
000cb8  e51f0220          LDR      r0,|L1.2720|
000cbc  e5900000          LDR      r0,[r0,#0]            ;444
000cc0  e3800902          ORR      r0,r0,#0x8000         ;444
000cc4  e51f122c          LDR      r1,|L1.2720|
000cc8  e5810000          STR      r0,[r1,#0]            ;444
000ccc  ea000058          B        |L1.3636|
                  |L1.3280|
000cd0  e5940000          LDR      r0,[r4,#0]            ;445
000cd4  e3500002          CMP      r0,#2                 ;445
000cd8  1a000036          BNE      |L1.3512|
000cdc  e59f06d4          LDR      r0,|L1.5048|
000ce0  e51f1180          LDR      r1,|L1.2920|
000ce4  e5810000          STR      r0,[r1,#0]            ;446  ; _sd_pSDHCBuffer
000ce8  e2810000          ADD      r0,r1,#0              ;447
000cec  e5900000          LDR      r0,[r0,#0]            ;447  ; _sd_pSDHCBuffer
000cf0  e51f118c          LDR      r1,|L1.2924|
000cf4  e5810000          STR      r0,[r1,#0]            ;447
000cf8  e3a00007          MOV      r0,#7                 ;448
000cfc  e2811e43          ADD      r1,r1,#0x430          ;448
000d00  e5810000          STR      r0,[r1,#0]            ;448
000d04  e3a03000          MOV      r3,#0                 ;450
000d08  e3a01037          MOV      r1,#0x37              ;450
000d0c  e5942004          LDR      r2,[r4,#4]            ;450
000d10  e1a00004          MOV      r0,r4                 ;450
000d14  ebfffffe          BL       SD_SDCmdAndRsp
000d18  e58d0000          STR      r0,[sp,#0]            ;450
000d1c  e3500000          CMP      r0,#0                 ;450
000d20  0a000001          BEQ      |L1.3372|
000d24  e59d0000          LDR      r0,[sp,#0]            ;451
000d28  eaffff9f          B        |L1.2988|
                  |L1.3372|
000d2c  e3a02000          MOV      r2,#0                 ;452
000d30  e3a01033          MOV      r1,#0x33              ;452
000d34  e1a00004          MOV      r0,r4                 ;452
000d38  ebfffffe          BL       SD_SDCmdAndRspDataIn
000d3c  e58d0000          STR      r0,[sp,#0]            ;452
000d40  e3500000          CMP      r0,#0                 ;452
000d44  0a000001          BEQ      |L1.3408|
000d48  e59d0000          LDR      r0,[sp,#0]            ;453
000d4c  eaffff96          B        |L1.2988|
                  |L1.3408|
000d50  e3a03000          MOV      r3,#0                 ;456
000d54  e3a01037          MOV      r1,#0x37              ;456
000d58  e5942004          LDR      r2,[r4,#4]            ;456
000d5c  e1a00004          MOV      r0,r4                 ;456
000d60  ebfffffe          BL       SD_SDCmdAndRsp
000d64  e58d0000          STR      r0,[sp,#0]            ;456
000d68  e3500000          CMP      r0,#0                 ;456
000d6c  0a000001          BEQ      |L1.3448|
000d70  e59d0000          LDR      r0,[sp,#0]            ;457
000d74  eaffff8c          B        |L1.2988|
                  |L1.3448|
000d78  e3a03000          MOV      r3,#0                 ;459
000d7c  e3a02002          MOV      r2,#2                 ;459
000d80  e3a01006          MOV      r1,#6                 ;459
000d84  e1a00004          MOV      r0,r4                 ;459
000d88  ebfffffe          BL       SD_SDCmdAndRsp
000d8c  e58d0000          STR      r0,[sp,#0]            ;459
000d90  e3500000          CMP      r0,#0                 ;459
000d94  0a000001          BEQ      |L1.3488|
000d98  e59d0000          LDR      r0,[sp,#0]            ;460
000d9c  eaffff82          B        |L1.2988|
                  |L1.3488|
000da0  e51f0308          LDR      r0,|L1.2720|
000da4  e5900000          LDR      r0,[r0,#0]            ;462
000da8  e3800902          ORR      r0,r0,#0x8000         ;462
000dac  e51f1314          LDR      r1,|L1.2720|
000db0  e5810000          STR      r0,[r1,#0]            ;462
000db4  ea00001e          B        |L1.3636|
                  |L1.3512|
000db8  e5940000          LDR      r0,[r4,#0]            ;463
000dbc  e3500003          CMP      r0,#3                 ;463
000dc0  0a000002          BEQ      |L1.3536|
000dc4  e5940000          LDR      r0,[r4,#0]            ;463
000dc8  e3500004          CMP      r0,#4                 ;463
000dcc  1a000018          BNE      |L1.3636|
                  |L1.3536|
000dd0  e5940000          LDR      r0,[r4,#0]            ;465
000dd4  e3500003          CMP      r0,#3                 ;465
000dd8  1a000004          BNE      |L1.3568|
000ddc  e51f0344          LDR      r0,|L1.2720|
000de0  e5900000          LDR      r0,[r0,#0]            ;466
000de4  e3c00902          BIC      r0,r0,#0x8000         ;466
000de8  e51f1350          LDR      r1,|L1.2720|
000dec  e5810000          STR      r0,[r1,#0]            ;466
                  |L1.3568|
000df0  e59f55c8          LDR      r5,|L1.5056|
000df4  e3a03000          MOV      r3,#0                 ;471
000df8  e1a02005          MOV      r2,r5                 ;471
000dfc  e3a01006          MOV      r1,#6                 ;471
000e00  e1a00004          MOV      r0,r4                 ;471
000e04  ebfffffe          BL       SD_SDCmdAndRsp
000e08  e58d0000          STR      r0,[sp,#0]            ;471
000e0c  e3500000          CMP      r0,#0                 ;471
000e10  0a000001          BEQ      |L1.3612|
000e14  e59d0000          LDR      r0,[sp,#0]            ;472
000e18  eaffff63          B        |L1.2988|
                  |L1.3612|
000e1c  ebfffffe          BL       SD_CheckRB
000e20  e51f0388          LDR      r0,|L1.2720|
000e24  e5900000          LDR      r0,[r0,#0]            ;475
000e28  e3800902          ORR      r0,r0,#0x8000         ;475
000e2c  e51f1394          LDR      r1,|L1.2720|
000e30  e5810000          STR      r0,[r1,#0]            ;475
                  |L1.3636|
000e34  e3a03000          MOV      r3,#0                 ;478
000e38  e3a02c02          MOV      r2,#0x200             ;478
000e3c  e3a01010          MOV      r1,#0x10              ;478
000e40  e1a00004          MOV      r0,r4                 ;478
000e44  ebfffffe          BL       SD_SDCmdAndRsp
000e48  e58d0000          STR      r0,[sp,#0]            ;478
000e4c  e3500000          CMP      r0,#0                 ;478
000e50  0a000001          BEQ      |L1.3676|
000e54  e59d0000          LDR      r0,[sp,#0]            ;479
000e58  eaffff53          B        |L1.2988|
                  |L1.3676|
000e5c  e59f0560          LDR      r0,|L1.5060|
000e60  e59f1560          LDR      r1,|L1.5064|
000e64  e5810000          STR      r0,[r1,#0]            ;480
000e68  e3a02000          MOV      r2,#0                 ;482
000e6c  e3a01007          MOV      r1,#7                 ;482
000e70  e1a00004          MOV      r0,r4                 ;482
000e74  ebfffffe          BL       SD_SDCommand
000e78  e51f03e0          LDR      r0,|L1.2720|
000e7c  e5900000          LDR      r0,[r0,#0]            ;483
000e80  e3800040          ORR      r0,r0,#0x40           ;483
000e84  e51f13ec          LDR      r1,|L1.2720|
000e88  e5810000          STR      r0,[r1,#0]            ;483
000e8c  e1a00000          MOV      r0,r0                 ;484
                  |L1.3728|
000e90  e51f03f8          LDR      r0,|L1.2720|
000e94  e5900000          LDR      r0,[r0,#0]            ;484
000e98  e3100040          TST      r0,#0x40              ;484
000e9c  1afffffb          BNE      |L1.3728|
000ea0  e59f0524          LDR      r0,|L1.5068|
000ea4  e5900000          LDR      r0,[r0,#0]            ;486
000ea8  e3800001          ORR      r0,r0,#1              ;486
000eac  e59f1518          LDR      r1,|L1.5068|
000eb0  e5810000          STR      r0,[r1,#0]            ;486
000eb4  e3a00000          MOV      r0,#0                 ;488
000eb8  eaffff3b          B        |L1.2988|
;;;490    
                          ENDP

                  SD_Get_SD_info PROC
;;;491    void SD_Get_SD_info(SD_INFO_T *pSD)
000ebc  e92d47ff          PUSH     {r0-r10,lr}
;;;492    {
000ec0  e1a04000          MOV      r4,r0
;;;493        unsigned int R_LEN, C_Size, MULT, size;
;;;494        unsigned int Buffer[4];
;;;495        unsigned char *ptr;
;;;496    
;;;497        SD_SDCmdAndRsp2(pSD, 9, pSD->RCA, Buffer);
000ec4  e1a0300d          MOV      r3,sp
000ec8  e3a01009          MOV      r1,#9
000ecc  e5942004          LDR      r2,[r4,#4]
000ed0  e1a00004          MOV      r0,r4
000ed4  ebfffffe          BL       SD_SDCmdAndRsp2
;;;498    
;;;499        if ((pSD->CardType == SD_TYPE_MMC) || (pSD->CardType == SD_TYPE_EMMC)) {
000ed8  e5940000          LDR      r0,[r4,#0]
000edc  e3500003          CMP      r0,#3
000ee0  0a000002          BEQ      |L1.3824|
000ee4  e5940000          LDR      r0,[r4,#0]
000ee8  e3500004          CMP      r0,#4
000eec  1a000041          BNE      |L1.4088|
                  |L1.3824|
;;;500            // for MMC/eMMC card
;;;501            if ((Buffer[0] & 0xc0000000) == 0xc0000000) {
000ef0  e59d0000          LDR      r0,[sp,#0]
000ef4  e2000103          AND      r0,r0,#0xc0000000
000ef8  e3500103          CMP      r0,#0xc0000000
000efc  1a000025          BNE      |L1.3992|
;;;502                // CSD_STRUCTURE [127:126] is 3
;;;503                // CSD version depend on EXT_CSD register in eMMC v4.4 for card size > 2GB
;;;504                SD_SDCmdAndRsp(pSD, 7, pSD->RCA, 0);
000f00  e3a03000          MOV      r3,#0
000f04  e3a01007          MOV      r1,#7
000f08  e5942004          LDR      r2,[r4,#4]
000f0c  e1a00004          MOV      r0,r4
000f10  ebfffffe          BL       SD_SDCmdAndRsp
;;;505    
;;;506                ptr = (unsigned char *)((unsigned int)_sd_ucSDHCBuffer);
000f14  e59f949c          LDR      r9,|L1.5048|
;;;507                outpw(REG_SDH_DMASA, (unsigned int)ptr);  // set DMA transfer starting address
000f18  e51f03b4          LDR      r0,|L1.2924|
000f1c  e5809000          STR      r9,[r0,#0]
;;;508                outpw(REG_SDH_BLEN, 511);  // read 512 bytes for EXT_CSD
000f20  e59f049c          LDR      r0,|L1.5060|
000f24  e59f149c          LDR      r1,|L1.5064|
000f28  e5810000          STR      r0,[r1,#0]
;;;509    
;;;510                if (SD_SDCmdAndRspDataIn(pSD, 8, 0x00) != 0)
000f2c  e3a02000          MOV      r2,#0
000f30  e3a01008          MOV      r1,#8
000f34  e1a00004          MOV      r0,r4
000f38  ebfffffe          BL       SD_SDCmdAndRspDataIn
000f3c  e3500000          CMP      r0,#0
000f40  0a000000          BEQ      |L1.3912|
                  |L1.3908|
;;;511                    return;
;;;512    
;;;513                SD_SDCommand(pSD, 7, 0);
;;;514                outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|SDH_CTL_CLK8OEN_Msk);
;;;515                while(inpw(REG_SDH_CTL) & SDH_CTL_CLK8OEN_Msk);
;;;516    
;;;517                pSD->totalSectorN = (*(unsigned int *)(ptr+212));
;;;518                pSD->diskSize = pSD->totalSectorN / 2;
;;;519            } else {
;;;520                // CSD version v1.0/1.1/1.2 in eMMC v4.4 spec for card size <= 2GB
;;;521                R_LEN = (Buffer[1] & 0x000f0000) >> 16;
;;;522                C_Size = ((Buffer[1] & 0x000003ff) << 2) | ((Buffer[2] & 0xc0000000) >> 30);
;;;523                MULT = (Buffer[2] & 0x00038000) >> 15;
;;;524                size = (C_Size+1) * (1<<(MULT+2)) * (1<<R_LEN);
;;;525    
;;;526                pSD->diskSize = size / 1024;
;;;527                pSD->totalSectorN = size / 512;
;;;528            }
;;;529        } else {
;;;530            if (Buffer[0] & 0xc0000000) {
;;;531                C_Size = ((Buffer[1] & 0x0000003f) << 16) | ((Buffer[2] & 0xffff0000) >> 16);
;;;532                size = (C_Size+1) * 512;    // Kbytes
;;;533    
;;;534                pSD->diskSize = size;
;;;535                pSD->totalSectorN = size << 1;
;;;536            } else {
;;;537                R_LEN = (Buffer[1] & 0x000f0000) >> 16;
;;;538                C_Size = ((Buffer[1] & 0x000003ff) << 2) | ((Buffer[2] & 0xc0000000) >> 30);
;;;539                MULT = (Buffer[2] & 0x00038000) >> 15;
;;;540                size = (C_Size+1) * (1<<(MULT+2)) * (1<<R_LEN);
;;;541    
;;;542                pSD->diskSize = size / 1024;
;;;543                pSD->totalSectorN = size / 512;
;;;544            }
;;;545        }
;;;546        pSD->sectorSize = 512;
;;;547        sysprintf("The size is %d KB\n", pSD->diskSize);
;;;548    }
000f44  e8bd87ff          POP      {r0-r10,pc}
                  |L1.3912|
000f48  e3a02000          MOV      r2,#0                 ;513
000f4c  e3a01007          MOV      r1,#7                 ;513
000f50  e1a00004          MOV      r0,r4                 ;513
000f54  ebfffffe          BL       SD_SDCommand
000f58  e51f04c0          LDR      r0,|L1.2720|
000f5c  e5900000          LDR      r0,[r0,#0]            ;514
000f60  e3800040          ORR      r0,r0,#0x40           ;514
000f64  e51f14cc          LDR      r1,|L1.2720|
000f68  e5810000          STR      r0,[r1,#0]            ;514
000f6c  e1a00000          MOV      r0,r0                 ;515
                  |L1.3952|
000f70  e51f04d8          LDR      r0,|L1.2720|
000f74  e5900000          LDR      r0,[r0,#0]            ;515
000f78  e3100040          TST      r0,#0x40              ;515
000f7c  1afffffb          BNE      |L1.3952|
000f80  e59900d4          LDR      r0,[r9,#0xd4]         ;517
000f84  e584000c          STR      r0,[r4,#0xc]          ;517
000f88  e594000c          LDR      r0,[r4,#0xc]          ;518
000f8c  e1a000a0          LSR      r0,r0,#1              ;518
000f90  e5840010          STR      r0,[r4,#0x10]         ;518
000f94  ea00003c          B        |L1.4236|
                  |L1.3992|
000f98  e59d0004          LDR      r0,[sp,#4]            ;521
000f9c  e200080f          AND      r0,r0,#0xf0000        ;521
000fa0  e1a07820          LSR      r7,r0,#16             ;521
000fa4  e59d0004          LDR      r0,[sp,#4]            ;522
000fa8  e1a00b00          LSL      r0,r0,#22             ;522
000fac  e1a01a20          LSR      r1,r0,#20             ;522
000fb0  e59d0008          LDR      r0,[sp,#8]            ;522
000fb4  e1816f20          ORR      r6,r1,r0,LSR #30      ;522
000fb8  e59d0008          LDR      r0,[sp,#8]            ;523
000fbc  e200090e          AND      r0,r0,#0x38000        ;523
000fc0  e1a087a0          LSR      r8,r0,#15             ;523
000fc4  e2880002          ADD      r0,r8,#2              ;524
000fc8  e3a01001          MOV      r1,#1                 ;524
000fcc  e1a00011          LSL      r0,r1,r0              ;524
000fd0  e2861001          ADD      r1,r6,#1              ;524
000fd4  e0000091          MUL      r0,r1,r0              ;524
000fd8  e3a01001          MOV      r1,#1                 ;524
000fdc  e1a01711          LSL      r1,r1,r7              ;524
000fe0  e0050190          MUL      r5,r0,r1              ;524
000fe4  e1a00525          LSR      r0,r5,#10             ;526
000fe8  e5840010          STR      r0,[r4,#0x10]         ;526
000fec  e1a004a5          LSR      r0,r5,#9              ;527
000ff0  e584000c          STR      r0,[r4,#0xc]          ;527
000ff4  ea000024          B        |L1.4236|
                  |L1.4088|
000ff8  e59d0000          LDR      r0,[sp,#0]            ;530
000ffc  e3100103          TST      r0,#0xc0000000        ;530
001000  0a00000a          BEQ      |L1.4144|
001004  e59d0004          LDR      r0,[sp,#4]            ;531
001008  e1a00d00          LSL      r0,r0,#26             ;531
00100c  e1a01520          LSR      r1,r0,#10             ;531
001010  e59d0008          LDR      r0,[sp,#8]            ;531
001014  e1816820          ORR      r6,r1,r0,LSR #16      ;531
001018  e2860001          ADD      r0,r6,#1              ;532
00101c  e1a05480          LSL      r5,r0,#9              ;532
001020  e5845010          STR      r5,[r4,#0x10]         ;534
001024  e1a00085          LSL      r0,r5,#1              ;535
001028  e584000c          STR      r0,[r4,#0xc]          ;535
00102c  ea000016          B        |L1.4236|
                  |L1.4144|
001030  e59d0004          LDR      r0,[sp,#4]            ;537
001034  e200080f          AND      r0,r0,#0xf0000        ;537
001038  e1a07820          LSR      r7,r0,#16             ;537
00103c  e59d0004          LDR      r0,[sp,#4]            ;538
001040  e1a00b00          LSL      r0,r0,#22             ;538
001044  e1a01a20          LSR      r1,r0,#20             ;538
001048  e59d0008          LDR      r0,[sp,#8]            ;538
00104c  e1816f20          ORR      r6,r1,r0,LSR #30      ;538
001050  e59d0008          LDR      r0,[sp,#8]            ;539
001054  e200090e          AND      r0,r0,#0x38000        ;539
001058  e1a087a0          LSR      r8,r0,#15             ;539
00105c  e2880002          ADD      r0,r8,#2              ;540
001060  e3a01001          MOV      r1,#1                 ;540
001064  e1a00011          LSL      r0,r1,r0              ;540
001068  e2861001          ADD      r1,r6,#1              ;540
00106c  e0000091          MUL      r0,r1,r0              ;540
001070  e3a01001          MOV      r1,#1                 ;540
001074  e1a01711          LSL      r1,r1,r7              ;540
001078  e0050190          MUL      r5,r0,r1              ;540
00107c  e1a00525          LSR      r0,r5,#10             ;542
001080  e5840010          STR      r0,[r4,#0x10]         ;542
001084  e1a004a5          LSR      r0,r5,#9              ;543
001088  e584000c          STR      r0,[r4,#0xc]          ;543
                  |L1.4236|
00108c  e3a00c02          MOV      r0,#0x200             ;546
001090  e5840014          STR      r0,[r4,#0x14]         ;546
001094  e28f0fcd          ADR      r0,|L1.5072|
001098  e5941010          LDR      r1,[r4,#0x10]         ;547
00109c  ebfffffe          BL       sysprintf
0010a0  e1a00000          MOV      r0,r0
0010a4  eaffffa6          B        |L1.3908|
;;;549    
                          ENDP

                  SD_CardDetection PROC
;;;559     */
;;;560    unsigned int SD_CardDetection(unsigned int u32CardNum)
0010a8  e1a02000          MOV      r2,r0
;;;561    {
;;;562        unsigned int i;
;;;563    
;;;564        if (u32CardNum == SD_PORT0) {
0010ac  e3520001          CMP      r2,#1
0010b0  1a000030          BNE      |L1.4472|
;;;565            if(inpw(REG_SDH_INTEN) & SDH_INTEN_CDSRC0_Msk) { // Card detect pin from GPIO
0010b4  e59f0310          LDR      r0,|L1.5068|
0010b8  e5900000          LDR      r0,[r0,#0]
0010bc  e3100101          TST      r0,#0x40000000
0010c0  0a00000b          BEQ      |L1.4340|
;;;566                if(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CDSTS0_Msk) { // Card remove
0010c4  e51f0628          LDR      r0,|L1.2724|
0010c8  e5900000          LDR      r0,[r0,#0]
0010cc  e3100801          TST      r0,#0x10000
0010d0  0a000003          BEQ      |L1.4324|
;;;567                    SD0.IsCardInsert = FALSE;
0010d4  e3a00000          MOV      r0,#0
0010d8  e59f3304          LDR      r3,|L1.5092|
0010dc  e5c30008          STRB     r0,[r3,#8]  ; SD0
                  |L1.4320|
;;;568                    return FALSE;
;;;569                } else
;;;570                    SD0.IsCardInsert = TRUE;
;;;571            } else if(!(inpw(REG_SDH_INTEN) & SDH_INTEN_CDSRC0_Msk)) {
;;;572                outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) | SDH_CTL_CLKKEEP0_Msk);
;;;573                for(i= 0; i < 5000; i++);
;;;574    
;;;575                if(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CDSTS0_Msk) // Card insert
;;;576                    SD0.IsCardInsert = TRUE;
;;;577                else {
;;;578                    SD0.IsCardInsert = FALSE;
;;;579                    return FALSE;
;;;580                }
;;;581                outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) & ~SDH_CTL_CLKKEEP0_Msk);
;;;582            }
;;;583    
;;;584        } else if (u32CardNum == SD_PORT1) {
;;;585            if(inpw(REG_SDH_INTEN) & SDH_INTEN_CDSRC1_Msk) { // Card detect pin from GPIO
;;;586                if(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CDSTS1_Msk) { // Card remove
;;;587                    SD1.IsCardInsert = FALSE;
;;;588                    return FALSE;
;;;589                } else
;;;590                    SD1.IsCardInsert = TRUE;
;;;591            } else if(!(inpw(REG_SDH_INTEN) & SDH_INTEN_CDSRC1_Msk)) {
;;;592                outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) | SDH_CTL_CLKKEEP1_Msk);
;;;593                for(i= 0; i < 5000; i++);
;;;594    
;;;595                if(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CDSTS1_Msk) // Card insert
;;;596                    SD1.IsCardInsert = TRUE;
;;;597                else {
;;;598                    SD1.IsCardInsert = FALSE;
;;;599                    return FALSE;
;;;600                }
;;;601                outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) & ~SDH_CTL_CLKKEEP1_Msk);
;;;602            }
;;;603        }
;;;604        return TRUE;
;;;605    }
0010e0  e12fff1e          BX       lr
                  |L1.4324|
0010e4  e3a00001          MOV      r0,#1                 ;570
0010e8  e59f32f4          LDR      r3,|L1.5092|
0010ec  e5c30008          STRB     r0,[r3,#8]            ;570  ; SD0
0010f0  ea000052          B        |L1.4672|
                  |L1.4340|
0010f4  e59f02d0          LDR      r0,|L1.5068|
0010f8  e5900000          LDR      r0,[r0,#0]            ;571
0010fc  e3100101          TST      r0,#0x40000000        ;571
001100  1a00004e          BNE      |L1.4672|
001104  e51f066c          LDR      r0,|L1.2720|
001108  e5900000          LDR      r0,[r0,#0]            ;572
00110c  e3800080          ORR      r0,r0,#0x80           ;572
001110  e51f3678          LDR      r3,|L1.2720|
001114  e5830000          STR      r0,[r3,#0]            ;572
001118  e3a01000          MOV      r1,#0                 ;573
00111c  ea000000          B        |L1.4388|
                  |L1.4384|
001120  e2811001          ADD      r1,r1,#1              ;573
                  |L1.4388|
001124  e51f0650          LDR      r0,|L1.2780|
001128  e1510000          CMP      r1,r0                 ;573
00112c  3afffffb          BCC      |L1.4384|
001130  e51f0694          LDR      r0,|L1.2724|
001134  e5900000          LDR      r0,[r0,#0]            ;575
001138  e3100801          TST      r0,#0x10000           ;575
00113c  0a000003          BEQ      |L1.4432|
001140  e3a00001          MOV      r0,#1                 ;576
001144  e59f3298          LDR      r3,|L1.5092|
001148  e5c30008          STRB     r0,[r3,#8]            ;576  ; SD0
00114c  ea000003          B        |L1.4448|
                  |L1.4432|
001150  e3a00000          MOV      r0,#0                 ;578
001154  e59f3288          LDR      r3,|L1.5092|
001158  e5c30008          STRB     r0,[r3,#8]            ;578  ; SD0
00115c  eaffffdf          B        |L1.4320|
                  |L1.4448|
001160  e51f06c8          LDR      r0,|L1.2720|
001164  e5900000          LDR      r0,[r0,#0]            ;581
001168  e3c00080          BIC      r0,r0,#0x80           ;581
00116c  e51f36d4          LDR      r3,|L1.2720|
001170  e5830000          STR      r0,[r3,#0]            ;581
001174  ea000031          B        |L1.4672|
                  |L1.4472|
001178  e3520004          CMP      r2,#4                 ;584
00117c  1a00002f          BNE      |L1.4672|
001180  e59f0244          LDR      r0,|L1.5068|
001184  e5900000          LDR      r0,[r0,#0]            ;585
001188  e3100102          TST      r0,#0x80000000        ;585
00118c  0a00000b          BEQ      |L1.4544|
001190  e51f06f4          LDR      r0,|L1.2724|
001194  e5900000          LDR      r0,[r0,#0]            ;586
001198  e3100802          TST      r0,#0x20000           ;586
00119c  0a000003          BEQ      |L1.4528|
0011a0  e3a00000          MOV      r0,#0                 ;587
0011a4  e59f323c          LDR      r3,|L1.5096|
0011a8  e5c30008          STRB     r0,[r3,#8]            ;587  ; SD1
0011ac  eaffffcb          B        |L1.4320|
                  |L1.4528|
0011b0  e3a00001          MOV      r0,#1                 ;590
0011b4  e59f322c          LDR      r3,|L1.5096|
0011b8  e5c30008          STRB     r0,[r3,#8]            ;590  ; SD1
0011bc  ea00001f          B        |L1.4672|
                  |L1.4544|
0011c0  e59f0204          LDR      r0,|L1.5068|
0011c4  e5900000          LDR      r0,[r0,#0]            ;591
0011c8  e3100102          TST      r0,#0x80000000        ;591
0011cc  1a00001b          BNE      |L1.4672|
0011d0  e51f0738          LDR      r0,|L1.2720|
0011d4  e5900000          LDR      r0,[r0,#0]            ;592
0011d8  e3800102          ORR      r0,r0,#0x80000000     ;592
0011dc  e51f3744          LDR      r3,|L1.2720|
0011e0  e5830000          STR      r0,[r3,#0]            ;592
0011e4  e3a01000          MOV      r1,#0                 ;593
0011e8  ea000000          B        |L1.4592|
                  |L1.4588|
0011ec  e2811001          ADD      r1,r1,#1              ;593
                  |L1.4592|
0011f0  e51f071c          LDR      r0,|L1.2780|
0011f4  e1510000          CMP      r1,r0                 ;593
0011f8  3afffffb          BCC      |L1.4588|
0011fc  e51f0760          LDR      r0,|L1.2724|
001200  e5900000          LDR      r0,[r0,#0]            ;595
001204  e3100802          TST      r0,#0x20000           ;595
001208  0a000003          BEQ      |L1.4636|
00120c  e3a00001          MOV      r0,#1                 ;596
001210  e59f31d0          LDR      r3,|L1.5096|
001214  e5c30008          STRB     r0,[r3,#8]            ;596  ; SD1
001218  ea000003          B        |L1.4652|
                  |L1.4636|
00121c  e3a00000          MOV      r0,#0                 ;598
001220  e59f31c0          LDR      r3,|L1.5096|
001224  e5c30008          STRB     r0,[r3,#8]            ;598  ; SD1
001228  eaffffac          B        |L1.4320|
                  |L1.4652|
00122c  e51f0794          LDR      r0,|L1.2720|
001230  e5900000          LDR      r0,[r0,#0]            ;601
001234  e3c00102          BIC      r0,r0,#0x80000000     ;601
001238  e51f37a0          LDR      r3,|L1.2720|
00123c  e5830000          STR      r0,[r3,#0]            ;601
                  |L1.4672|
001240  e3a00001          MOV      r0,#1                 ;604
001244  eaffffa5          B        |L1.4320|
;;;606    
                          ENDP

                  SD_SetReferenceClock PROC
;;;613     */
;;;614    void SD_SetReferenceClock(unsigned int u32Clock)
001248  e51f1780          LDR      r1,|L1.2768|
;;;615    {
;;;616        gSDHReferenceClock = u32Clock;  // kHz
00124c  e5810000          STR      r0,[r1,#0]  ; gSDHReferenceClock
;;;617    }
001250  e12fff1e          BX       lr
;;;618    
                          ENDP

                  SD_Open PROC
;;;626     */
;;;627    void SD_Open(unsigned int u32CardDetSrc)
001254  e92d4010          PUSH     {r4,lr}
;;;628    {
001258  e1a04000          MOV      r4,r0
;;;629        // enable DMAC
;;;630        outpw(REG_SDH_DMACTL, SDH_DMACTL_DMARST_Msk);
00125c  e3a00002          MOV      r0,#2
001260  e59f1184          LDR      r1,|L1.5100|
001264  e5810000          STR      r0,[r1,#0]
;;;631        while(inpw(REG_SDH_DMACTL) & SDH_DMACTL_DMARST_Msk);
001268  e1a00000          MOV      r0,r0
                  |L1.4716|
00126c  e59f0178          LDR      r0,|L1.5100|
001270  e5900000          LDR      r0,[r0,#0]
001274  e3100002          TST      r0,#2
001278  1afffffb          BNE      |L1.4716|
;;;632    
;;;633        outpw(REG_SDH_DMACTL, SDH_DMACTL_DMAEN_Msk);
00127c  e3a00001          MOV      r0,#1
001280  e59f1164          LDR      r1,|L1.5100|
001284  e5810000          STR      r0,[r1,#0]
;;;634    
;;;635        //Reset Global
;;;636        outpw(REG_SDH_GCTL, SDH_GCTL_GCTLRST_Msk);
001288  e0811500          ADD      r1,r1,r0,LSL #10
00128c  e5810000          STR      r0,[r1,#0]
;;;637        while(inpw(REG_SDH_GCTL) & SDH_GCTL_GCTLRST_Msk);
001290  e1a00000          MOV      r0,r0
                  |L1.4756|
001294  e59f0154          LDR      r0,|L1.5104|
001298  e5900000          LDR      r0,[r0,#0]
00129c  e3100001          TST      r0,#1
0012a0  1afffffb          BNE      |L1.4756|
;;;638    
;;;639        // enable SD
;;;640        outpw(REG_SDH_GCTL, SDH_GCTL_SDEN_Msk);
0012a4  e3a00002          MOV      r0,#2
0012a8  e59f1140          LDR      r1,|L1.5104|
0012ac  e5810000          STR      r0,[r1,#0]
;;;641    
;;;642        if(u32CardDetSrc & SD_PORT0) {
0012b0  e3140001          TST      r4,#1
0012b4  0a000013          BEQ      |L1.4872|
;;;643            outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) & ~SDH_CTL_SDPORT_Msk);
0012b8  e2810020          ADD      r0,r1,#0x20
0012bc  e5900000          LDR      r0,[r0,#0]
0012c0  e3c00206          BIC      r0,r0,#0x60000000
0012c4  e2811020          ADD      r1,r1,#0x20
0012c8  e5810000          STR      r0,[r1,#0]
;;;644    
;;;645            if(u32CardDetSrc & CardDetect_From_DAT3)
0012cc  e3140c02          TST      r4,#0x200
0012d0  0a000005          BEQ      |L1.4844|
;;;646                outpw(REG_SDH_INTEN, inpw(REG_SDH_INTEN) & ~SDH_INTEN_CDSRC0_Msk);
0012d4  e2810008          ADD      r0,r1,#8
0012d8  e5900000          LDR      r0,[r0,#0]
0012dc  e3c00101          BIC      r0,r0,#0x40000000
0012e0  e2811008          ADD      r1,r1,#8
0012e4  e5810000          STR      r0,[r1,#0]
0012e8  ea00001c          B        |L1.4960|
                  |L1.4844|
;;;647            else
;;;648                outpw(REG_SDH_INTEN, inpw(REG_SDH_INTEN) | SDH_INTEN_CDSRC0_Msk | SDH_INTEN_CDIEN0_Msk);
0012ec  e59f00d8          LDR      r0,|L1.5068|
0012f0  e5900000          LDR      r0,[r0,#0]
0012f4  e3800101          ORR      r0,r0,#0x40000000
0012f8  e3800c01          ORR      r0,r0,#0x100
0012fc  e59f10c8          LDR      r1,|L1.5068|
001300  e5810000          STR      r0,[r1,#0]
001304  ea000015          B        |L1.4960|
                  |L1.4872|
;;;649        } else if(u32CardDetSrc & SD_PORT1) {
001308  e3140004          TST      r4,#4
00130c  0a000013          BEQ      |L1.4960|
;;;650            outpw(REG_SDH_CTL, (inpw(REG_SDH_CTL) & ~SDH_CTL_SDPORT_Msk)|(1 << SDH_CTL_SDPORT_Pos));
001310  e51f0878          LDR      r0,|L1.2720|
001314  e5900000          LDR      r0,[r0,#0]
001318  e3c00206          BIC      r0,r0,#0x60000000
00131c  e3800202          ORR      r0,r0,#0x20000000
001320  e51f1888          LDR      r1,|L1.2720|
001324  e5810000          STR      r0,[r1,#0]
;;;651    
;;;652            if(u32CardDetSrc & CardDetect_From_DAT3)
001328  e3140c02          TST      r4,#0x200
00132c  0a000005          BEQ      |L1.4936|
;;;653                outpw(REG_SDH_INTEN, inpw(REG_SDH_INTEN) & ~SDH_INTEN_CDSRC1_Msk);
001330  e2810008          ADD      r0,r1,#8
001334  e5900000          LDR      r0,[r0,#0]
001338  e3c00102          BIC      r0,r0,#0x80000000
00133c  e2811008          ADD      r1,r1,#8
001340  e5810000          STR      r0,[r1,#0]
001344  ea000005          B        |L1.4960|
                  |L1.4936|
;;;654            else
;;;655                outpw(REG_SDH_INTEN, inpw(REG_SDH_INTEN) | SDH_INTEN_CDSRC1_Msk | SDH_INTEN_CDIEN1_Msk);
001348  e59f007c          LDR      r0,|L1.5068|
00134c  e5900000          LDR      r0,[r0,#0]
001350  e3800102          ORR      r0,r0,#0x80000000
001354  e3800c02          ORR      r0,r0,#0x200
001358  e59f106c          LDR      r1,|L1.5068|
00135c  e5810000          STR      r0,[r1,#0]
                  |L1.4960|
;;;656        }
;;;657    
;;;658        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) | SDH_CTL_CTLRST_Msk);     // SD software reset
001360  e51f08c8          LDR      r0,|L1.2720|
001364  e5900000          LDR      r0,[r0,#0]
001368  e3800901          ORR      r0,r0,#0x4000
00136c  e51f18d4          LDR      r1,|L1.2720|
001370  e5810000          STR      r0,[r1,#0]
;;;659        while(inpw(REG_SDH_CTL) & SDH_CTL_CTLRST_Msk);
001374  e1a00000          MOV      r0,r0
                  |L1.4984|
001378  e51f08e0          LDR      r0,|L1.2720|
00137c  e5900000          LDR      r0,[r0,#0]
001380  e3100901          TST      r0,#0x4000
001384  1afffffb          BNE      |L1.4984|
;;;660    
;;;661        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL) & ~(0xFF|SDH_CTL_CLKKEEP1_Msk));    // disable SD clock output
001388  e51f08f0          LDR      r0,|L1.2720|
00138c  e5900000          LDR      r0,[r0,#0]
001390  e3c00102          BIC      r0,r0,#0x80000000
001394  e3c000ff          BIC      r0,r0,#0xff
001398  e51f1900          LDR      r1,|L1.2720|
00139c  e5810000          STR      r0,[r1,#0]
;;;662    
;;;663        if(u32CardDetSrc & SD_PORT0)
0013a0  e3140001          TST      r4,#1
0013a4  0a000012          BEQ      |L1.5108|
;;;664            memset(&SD0, 0, sizeof(SD_INFO_T));
0013a8  e3a01018          MOV      r1,#0x18
0013ac  e59f0030          LDR      r0,|L1.5092|
0013b0  ebfffffe          BL       __aeabi_memclr4
0013b4  ea000013          B        |L1.5128|
                  |L1.5048|
                          DCD      _sd_ucSDHCBuffer
                  |L1.5052|
                          DCD      0x0000c350
                  |L1.5056|
                          DCD      0x03b70100
                  |L1.5060|
                          DCD      0x000001ff
                  |L1.5064|
                          DCD      0xb000c838
                  |L1.5068|
                          DCD      0xb000c828
                  |L1.5072|
0013d0  54686520          DCB      "The size is %d KB\n",0
0013d4  73697a65
0013d8  20697320
0013dc  2564204b
0013e0  420a00  
0013e3  00                DCB      0
                  |L1.5092|
                          DCD      ||SD0||
                  |L1.5096|
                          DCD      ||SD1||
                  |L1.5100|
                          DCD      0xb000c400
                  |L1.5104|
                          DCD      0xb000c800
                  |L1.5108|
;;;665        else if(u32CardDetSrc & SD_PORT1)
0013f4  e3140004          TST      r4,#4
0013f8  0a000002          BEQ      |L1.5128|
;;;666            memset(&SD1, 0, sizeof(SD_INFO_T));
0013fc  e3a01018          MOV      r1,#0x18
001400  e51f0020          LDR      r0,|L1.5096|
001404  ebfffffe          BL       __aeabi_memclr4
                  |L1.5128|
;;;667    }
001408  e8bd8010          POP      {r4,pc}
;;;668    
                          ENDP

                  SD_Probe PROC
;;;675     */
;;;676    int SD_Probe(unsigned int u32CardNum)
00140c  e92d4010          PUSH     {r4,lr}
;;;677    {
001410  e1a04000          MOV      r4,r0
;;;678        // Disable SD host interrupt
;;;679        outpw(REG_SDH_GINTEN, 0);
001414  e3a00000          MOV      r0,#0
001418  e59f1748          LDR      r1,|L1.7016|
00141c  e5810000          STR      r0,[r1,#0]
;;;680    
;;;681        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)& ~(SDH_CTL_SDNWR_Msk|SDH_CTL_BLKCNT_Msk|SDH_CTL_DBW_Msk));
001420  e281001c          ADD      r0,r1,#0x1c
001424  e5900000          LDR      r0,[r0,#0]
001428  e3c0053f          BIC      r0,r0,#0xfc00000
00142c  e3c009fe          BIC      r0,r0,#0x3f8000
001430  e281101c          ADD      r1,r1,#0x1c
001434  e5810000          STR      r0,[r1,#0]
;;;682        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|(0x09 << SDH_CTL_SDNWR_Pos)|(0x01 << SDH_CTL_BLKCNT_Pos));
001438  e1a00001          MOV      r0,r1
00143c  e5900000          LDR      r0,[r0,#0]
001440  e3800409          ORR      r0,r0,#0x9000000
001444  e3800801          ORR      r0,r0,#0x10000
001448  e5810000          STR      r0,[r1,#0]
;;;683    
;;;684        if(!(SD_CardDetection(u32CardNum)))
00144c  e1a00004          MOV      r0,r4
001450  ebfffffe          BL       SD_CardDetection
001454  e3500000          CMP      r0,#0
001458  1a000001          BNE      |L1.5220|
;;;685        {
;;;686            //sysprintf("SD_Probe FALSE!!\n");
;;;687            return FALSE;
00145c  e3a00000          MOV      r0,#0
                  |L1.5216|
;;;688        }
;;;689        else
;;;690        {
;;;691            //sysprintf("SD_Probe TRUE!!\n");
;;;692        }
;;;693    
;;;694        if (u32CardNum == SD_PORT0) 
;;;695        {
;;;696            //sysprintf("SD_Probe 1!!\n");
;;;697            if (SD_Init(&SD0) < 0)
;;;698            {
;;;699                //sysprintf("SD_Probe 1_1!!\n");
;;;700                return FALSE;
;;;701            }
;;;702            //sysprintf("SD_Probe 2!!\n");
;;;703            /* divider */
;;;704            if (SD0.CardType == SD_TYPE_MMC)
;;;705            {
;;;706                //sysprintf("SD_Probe 3!!\n");
;;;707                SD_Set_clock(20000);
;;;708            }
;;;709            else
;;;710            {
;;;711                //sysprintf("SD_Probe 4!!\n");
;;;712                SD_Set_clock(SD_FREQ);
;;;713            }
;;;714    //sysprintf("SD_Probe 5!!\n");
;;;715            SD_Get_SD_info(&SD0);
;;;716    //sysprintf("SD_Probe 6!!\n");
;;;717            if (SD_SelectCardType(&SD0))
;;;718            {
;;;719                //sysprintf("SD_Probe 7!!\n");
;;;720                return FALSE;
;;;721            }
;;;722    //sysprintf("SD_Probe 8!!\n");
;;;723            sd0_ok = 1;
;;;724        } else if (u32CardNum == SD_PORT1) {
;;;725            if (SD_Init(&SD1) < 0)
;;;726                return FALSE;
;;;727    
;;;728            /* divider */
;;;729            if (SD1.CardType == SD_TYPE_MMC)
;;;730                SD_Set_clock(20000);
;;;731            else
;;;732                SD_Set_clock(SD_FREQ);
;;;733    
;;;734            SD_Get_SD_info(&SD1);
;;;735    
;;;736            if (SD_SelectCardType(&SD1))
;;;737                return FALSE;
;;;738    
;;;739            sd1_ok = 1;
;;;740        }
;;;741        return TRUE;
;;;742    }
001460  e8bd8010          POP      {r4,pc}
                  |L1.5220|
001464  e3540001          CMP      r4,#1                 ;694
001468  1a00001a          BNE      |L1.5336|
00146c  e51f0090          LDR      r0,|L1.5092|
001470  ebfffffe          BL       SD_Init
001474  e3500000          CMP      r0,#0                 ;697
001478  aa000001          BGE      |L1.5252|
00147c  e3a00000          MOV      r0,#0                 ;700
001480  eafffff6          B        |L1.5216|
                  |L1.5252|
001484  e51f00a8          LDR      r0,|L1.5092|
001488  e5900000          LDR      r0,[r0,#0]            ;704  ; SD0
00148c  e3500003          CMP      r0,#3                 ;704
001490  1a000002          BNE      |L1.5280|
001494  e59f06d0          LDR      r0,|L1.7020|
001498  ebfffffe          BL       SD_Set_clock
00149c  ea000001          B        |L1.5288|
                  |L1.5280|
0014a0  e59f06c8          LDR      r0,|L1.7024|
0014a4  ebfffffe          BL       SD_Set_clock
                  |L1.5288|
0014a8  e51f00cc          LDR      r0,|L1.5092|
0014ac  ebfffffe          BL       SD_Get_SD_info
0014b0  e51f00d4          LDR      r0,|L1.5092|
0014b4  ebfffffe          BL       SD_SelectCardType
0014b8  e3500000          CMP      r0,#0                 ;717
0014bc  0a000001          BEQ      |L1.5320|
0014c0  e3a00000          MOV      r0,#0                 ;720
0014c4  eaffffe5          B        |L1.5216|
                  |L1.5320|
0014c8  e3a00001          MOV      r0,#1                 ;723
0014cc  e59f16a0          LDR      r1,|L1.7028|
0014d0  e5810000          STR      r0,[r1,#0]            ;723  ; sd0_ok
0014d4  ea00001b          B        |L1.5448|
                  |L1.5336|
0014d8  e3540004          CMP      r4,#4                 ;724
0014dc  1a000019          BNE      |L1.5448|
0014e0  e51f0100          LDR      r0,|L1.5096|
0014e4  ebfffffe          BL       SD_Init
0014e8  e3500000          CMP      r0,#0                 ;725
0014ec  aa000001          BGE      |L1.5368|
0014f0  e3a00000          MOV      r0,#0                 ;726
0014f4  eaffffd9          B        |L1.5216|
                  |L1.5368|
0014f8  e51f0118          LDR      r0,|L1.5096|
0014fc  e5900000          LDR      r0,[r0,#0]            ;729  ; SD1
001500  e3500003          CMP      r0,#3                 ;729
001504  1a000002          BNE      |L1.5396|
001508  e59f065c          LDR      r0,|L1.7020|
00150c  ebfffffe          BL       SD_Set_clock
001510  ea000001          B        |L1.5404|
                  |L1.5396|
001514  e59f0654          LDR      r0,|L1.7024|
001518  ebfffffe          BL       SD_Set_clock
                  |L1.5404|
00151c  e51f013c          LDR      r0,|L1.5096|
001520  ebfffffe          BL       SD_Get_SD_info
001524  e51f0144          LDR      r0,|L1.5096|
001528  ebfffffe          BL       SD_SelectCardType
00152c  e3500000          CMP      r0,#0                 ;736
001530  0a000001          BEQ      |L1.5436|
001534  e3a00000          MOV      r0,#0                 ;737
001538  eaffffc8          B        |L1.5216|
                  |L1.5436|
00153c  e3a00001          MOV      r0,#1                 ;739
001540  e59f1630          LDR      r1,|L1.7032|
001544  e5810000          STR      r0,[r1,#0]            ;739  ; sd1_ok
                  |L1.5448|
001548  e3a00001          MOV      r0,#1                 ;741
00154c  eaffffc3          B        |L1.5216|
;;;743    
                          ENDP

                  SD_Read PROC
;;;753     */
;;;754    unsigned int SD_Read(unsigned int u32CardNum, unsigned char *pu8BufAddr, unsigned int u32StartSec, unsigned int u32SecCount)
001550  e92d43f0          PUSH     {r4-r9,lr}
;;;755    {
001554  e24dd014          SUB      sp,sp,#0x14
001558  e1a07000          MOV      r7,r0
00155c  e1a08001          MOV      r8,r1
001560  e1a05002          MOV      r5,r2
001564  e1a06003          MOV      r6,r3
;;;756        char volatile bIsSendCmd = FALSE;
001568  e3a00000          MOV      r0,#0
00156c  e58d0010          STR      r0,[sp,#0x10]
;;;757        unsigned int volatile reg;
;;;758        int volatile i, loop, status;
;;;759        unsigned int blksize = SD_BLOCK_SIZE;
001570  e3a09c02          MOV      r9,#0x200
;;;760    
;;;761        SD_INFO_T *pSD;
;;;762    
;;;763        if(u32CardNum == SD_PORT0)
001574  e3570001          CMP      r7,#1
001578  1a000001          BNE      |L1.5508|
;;;764            pSD = &SD0;
00157c  e51f41a0          LDR      r4,|L1.5092|
001580  ea000000          B        |L1.5512|
                  |L1.5508|
;;;765        else
;;;766            pSD = &SD1;
001584  e51f41a4          LDR      r4,|L1.5096|
                  |L1.5512|
;;;767    
;;;768        //--- check input parameters
;;;769        if (u32SecCount == 0)
001588  e3560000          CMP      r6,#0
00158c  1a000002          BNE      |L1.5532|
;;;770            return SD_SELECT_ERROR;
001590  e59f05e4          LDR      r0,|L1.7036|
                  |L1.5524|
001594  e28dd014          ADD      sp,sp,#0x14
;;;771    
;;;772        if ((status = SD_SDCmdAndRsp(pSD, 7, pSD->RCA, 0)) != 0)
;;;773            return status;
;;;774        SD_CheckRB();
;;;775    
;;;776        outpw(REG_SDH_BLEN, blksize - 1);       // the actual byte count is equal to (SDBLEN+1)
;;;777    
;;;778        if ( (pSD->CardType == SD_TYPE_SD_HIGH) || (pSD->CardType == SD_TYPE_EMMC) )
;;;779            outpw(REG_SDH_CMD, u32StartSec);
;;;780        else
;;;781            outpw(REG_SDH_CMD, u32StartSec * blksize);
;;;782    
;;;783        outpw(REG_SDH_DMASA, (unsigned int)pu8BufAddr);
;;;784    
;;;785        loop = u32SecCount / 255;
;;;786        for (i=0; i<loop; i++) {
;;;787            _sd_SDDataReady = FALSE;
;;;788    
;;;789            reg = inpw(REG_SDH_CTL) & ~SDH_CTL_CMDCODE_Msk;
;;;790            reg = reg | 0xff0000;   // set BLK_CNT to 255
;;;791            if (bIsSendCmd == FALSE) {
;;;792                outpw(REG_SDH_CTL, reg|(18<<8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DIEN_Msk));
;;;793                bIsSendCmd = TRUE;
;;;794            } else
;;;795                outpw(REG_SDH_CTL, reg | SDH_CTL_DIEN_Msk);
;;;796    
;;;797            while(!_sd_SDDataReady) {
;;;798    //             if ((inpw(REG_SDH_INTSTS) & SDH_INTSTS_BLKDIF_Msk) && (!(inpw(REG_SDH_CTL) & SDH_CTL_DIEN_Msk))) {
;;;799    //                 outpw(REG_SDH_INTSTS, SDH_INTSTS_BLKDIF_Msk);
;;;800    //                 break;
;;;801    //             }
;;;802                if (pSD->IsCardInsert == FALSE)
;;;803                    return SD_NO_SD_CARD;
;;;804            }
;;;805    
;;;806            if (!(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC7_Msk)) {    // check CRC7
;;;807                //sysprintf("sdioSD_Read_in_blksize(): response error!\n");
;;;808                return SD_CRC7_ERROR;
;;;809            }
;;;810    
;;;811            if (!(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC16_Msk)) {   // check CRC16
;;;812                //sysprintf("sdioSD_Read_in_blksize() :read data error!\n");
;;;813                return SD_CRC16_ERROR;
;;;814            }
;;;815        }
;;;816    
;;;817        loop = u32SecCount % 255;
;;;818        if (loop != 0) {
;;;819            _sd_SDDataReady = FALSE;
;;;820    
;;;821            reg = inpw(REG_SDH_CTL) & (~SDH_CTL_CMDCODE_Msk);
;;;822            reg = reg & (~SDH_CTL_BLKCNT_Msk);
;;;823            reg |= (loop << 16);    // setup SDCR_BLKCNT
;;;824    
;;;825            if (bIsSendCmd == FALSE) {
;;;826                outpw(REG_SDH_CTL, reg|(18<<8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DIEN_Msk));
;;;827                bIsSendCmd = TRUE;
;;;828            } else
;;;829                outpw(REG_SDH_CTL, reg | SDH_CTL_DIEN_Msk);
;;;830    
;;;831            while(!_sd_SDDataReady) {
;;;832                if ((inpw(REG_SDH_INTSTS) & SDH_INTSTS_BLKDIF_Msk) && (!(inpw(REG_SDH_CTL) & SDH_CTL_DIEN_Msk))) {
;;;833                    outpw(REG_SDH_INTSTS, SDH_INTSTS_BLKDIF_Msk);
;;;834                    break;
;;;835                }
;;;836                if (pSD->IsCardInsert == FALSE)
;;;837                    return SD_NO_SD_CARD;
;;;838            }
;;;839    
;;;840            if (!(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC7_Msk)) {    // check CRC7
;;;841                //sysprintf("sdioSD_Read_in_blksize(): response error!\n");
;;;842                return SD_CRC7_ERROR;
;;;843            }
;;;844    
;;;845            if (!(inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRC16_Msk)) {   // check CRC16
;;;846                //sysprintf("sdioSD_Read_in_blksize(): read data error!\n");
;;;847                return SD_CRC16_ERROR;
;;;848            }
;;;849        }
;;;850    
;;;851        if (SD_SDCmdAndRsp(pSD, 12, 0, 0)) {    // stop command
;;;852            //sysprintf("stop command fail !!\n");
;;;853            return SD_CRC7_ERROR;
;;;854        }
;;;855        SD_CheckRB();
;;;856    
;;;857        SD_SDCommand(pSD, 7, 0);
;;;858        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|SDH_CTL_CLK8OEN_Msk);
;;;859        while(inpw(REG_SDH_CTL) & SDH_CTL_CLK8OEN_Msk);
;;;860    
;;;861        return 0;
;;;862    }
001598  e8bd83f0          POP      {r4-r9,pc}
                  |L1.5532|
00159c  e3a03000          MOV      r3,#0                 ;772
0015a0  e3a01007          MOV      r1,#7                 ;772
0015a4  e5942004          LDR      r2,[r4,#4]            ;772
0015a8  e1a00004          MOV      r0,r4                 ;772
0015ac  ebfffffe          BL       SD_SDCmdAndRsp
0015b0  e58d0000          STR      r0,[sp,#0]            ;772
0015b4  e3500000          CMP      r0,#0                 ;772
0015b8  0a000001          BEQ      |L1.5572|
0015bc  e59d0000          LDR      r0,[sp,#0]            ;773
0015c0  eafffff3          B        |L1.5524|
                  |L1.5572|
0015c4  ebfffffe          BL       SD_CheckRB
0015c8  e2490001          SUB      r0,r9,#1              ;776
0015cc  e51f120c          LDR      r1,|L1.5064|
0015d0  e5810000          STR      r0,[r1,#0]            ;776
0015d4  e5940000          LDR      r0,[r4,#0]            ;778
0015d8  e3500001          CMP      r0,#1                 ;778
0015dc  0a000002          BEQ      |L1.5612|
0015e0  e5940000          LDR      r0,[r4,#0]            ;778
0015e4  e3500004          CMP      r0,#4                 ;778
0015e8  1a000002          BNE      |L1.5624|
                  |L1.5612|
0015ec  e51f0b4c          LDR      r0,|L1.2728|
0015f0  e5805000          STR      r5,[r0,#0]            ;779
0015f4  ea000002          B        |L1.5636|
                  |L1.5624|
0015f8  e0000995          MUL      r0,r5,r9              ;781
0015fc  e51f1b5c          LDR      r1,|L1.2728|
001600  e5810000          STR      r0,[r1,#0]            ;781
                  |L1.5636|
001604  e51f0aa0          LDR      r0,|L1.2924|
001608  e5808000          STR      r8,[r0,#0]            ;783
00160c  e3a010ff          MOV      r1,#0xff              ;785
001610  e1a00006          MOV      r0,r6                 ;785
001614  ebfffffe          BL       __aeabi_uidivmod
001618  e58d0004          STR      r0,[sp,#4]            ;785
00161c  e3a00000          MOV      r0,#0                 ;786
001620  e58d0008          STR      r0,[sp,#8]            ;786
001624  ea000031          B        |L1.5872|
                  |L1.5672|
001628  e3a00000          MOV      r0,#0                 ;787
00162c  e59f154c          LDR      r1,|L1.7040|
001630  e5c10000          STRB     r0,[r1,#0]            ;787  ; _sd_SDDataReady
001634  e51f0b9c          LDR      r0,|L1.2720|
001638  e5900000          LDR      r0,[r0,#0]            ;789
00163c  e3c00c3f          BIC      r0,r0,#0x3f00         ;789
001640  e58d000c          STR      r0,[sp,#0xc]          ;789
001644  e59d000c          LDR      r0,[sp,#0xc]          ;790
001648  e38008ff          ORR      r0,r0,#0xff0000       ;790
00164c  e58d000c          STR      r0,[sp,#0xc]          ;790
001650  e5dd0010          LDRB     r0,[sp,#0x10]         ;791
001654  e3500000          CMP      r0,#0                 ;791
001658  1a000007          BNE      |L1.5756|
00165c  e59d000c          LDR      r0,[sp,#0xc]          ;792
001660  e3800c12          ORR      r0,r0,#0x1200         ;792
001664  e3800007          ORR      r0,r0,#7              ;792
001668  e51f1bd0          LDR      r1,|L1.2720|
00166c  e5810000          STR      r0,[r1,#0]            ;792
001670  e3a00001          MOV      r0,#1                 ;793
001674  e58d0010          STR      r0,[sp,#0x10]         ;793
001678  ea000003          B        |L1.5772|
                  |L1.5756|
00167c  e59d000c          LDR      r0,[sp,#0xc]          ;795
001680  e3800004          ORR      r0,r0,#4              ;795
001684  e51f1bec          LDR      r1,|L1.2720|
001688  e5810000          STR      r0,[r1,#0]            ;795
                  |L1.5772|
00168c  ea000004          B        |L1.5796|
                  |L1.5776|
001690  e5d40008          LDRB     r0,[r4,#8]            ;802
001694  e3500000          CMP      r0,#0                 ;802
001698  1a000001          BNE      |L1.5796|
00169c  e51f0bf8          LDR      r0,|L1.2732|
0016a0  eaffffbb          B        |L1.5524|
                  |L1.5796|
0016a4  e59f04d4          LDR      r0,|L1.7040|
0016a8  e5d00000          LDRB     r0,[r0,#0]            ;797  ; _sd_SDDataReady
0016ac  e3500000          CMP      r0,#0                 ;797
0016b0  0afffff6          BEQ      |L1.5776|
0016b4  e51f0c18          LDR      r0,|L1.2724|
0016b8  e5900000          LDR      r0,[r0,#0]            ;806
0016bc  e3100004          TST      r0,#4                 ;806
0016c0  1a000001          BNE      |L1.5836|
0016c4  e51f0c08          LDR      r0,|L1.2756|
0016c8  eaffffb1          B        |L1.5524|
                  |L1.5836|
0016cc  e51f0c30          LDR      r0,|L1.2724|
0016d0  e5900000          LDR      r0,[r0,#0]            ;811
0016d4  e3100008          TST      r0,#8                 ;811
0016d8  1a000001          BNE      |L1.5860|
0016dc  e51f0c18          LDR      r0,|L1.2764|
0016e0  eaffffab          B        |L1.5524|
                  |L1.5860|
0016e4  e59d0008          LDR      r0,[sp,#8]            ;786
0016e8  e2800001          ADD      r0,r0,#1              ;786
0016ec  e58d0008          STR      r0,[sp,#8]            ;786
                  |L1.5872|
0016f0  e59d0008          LDR      r0,[sp,#8]            ;786
0016f4  e59d1004          LDR      r1,[sp,#4]            ;786
0016f8  e1500001          CMP      r0,r1                 ;786
0016fc  baffffc9          BLT      |L1.5672|
001700  e3a010ff          MOV      r1,#0xff              ;817
001704  e1a00006          MOV      r0,r6                 ;817
001708  ebfffffe          BL       __aeabi_uidivmod
00170c  e58d1004          STR      r1,[sp,#4]            ;817
001710  e59d0004          LDR      r0,[sp,#4]            ;818
001714  e3500000          CMP      r0,#0                 ;818
001718  0a00003f          BEQ      |L1.6172|
00171c  e3a00000          MOV      r0,#0                 ;819
001720  e59f1458          LDR      r1,|L1.7040|
001724  e5c10000          STRB     r0,[r1,#0]            ;819  ; _sd_SDDataReady
001728  e51f0c90          LDR      r0,|L1.2720|
00172c  e5900000          LDR      r0,[r0,#0]            ;821
001730  e3c00c3f          BIC      r0,r0,#0x3f00         ;821
001734  e58d000c          STR      r0,[sp,#0xc]          ;821
001738  e59d000c          LDR      r0,[sp,#0xc]          ;822
00173c  e3c008ff          BIC      r0,r0,#0xff0000       ;822
001740  e58d000c          STR      r0,[sp,#0xc]          ;822
001744  e59d000c          LDR      r0,[sp,#0xc]          ;823
001748  e59d1004          LDR      r1,[sp,#4]            ;823
00174c  e1800801          ORR      r0,r0,r1,LSL #16      ;823
001750  e58d000c          STR      r0,[sp,#0xc]          ;823
001754  e5dd0010          LDRB     r0,[sp,#0x10]         ;825
001758  e3500000          CMP      r0,#0                 ;825
00175c  1a000007          BNE      |L1.6016|
001760  e59d000c          LDR      r0,[sp,#0xc]          ;826
001764  e3800c12          ORR      r0,r0,#0x1200         ;826
001768  e3800007          ORR      r0,r0,#7              ;826
00176c  e51f1cd4          LDR      r1,|L1.2720|
001770  e5810000          STR      r0,[r1,#0]            ;826
001774  e3a00001          MOV      r0,#1                 ;827
001778  e58d0010          STR      r0,[sp,#0x10]         ;827
00177c  ea000003          B        |L1.6032|
                  |L1.6016|
001780  e59d000c          LDR      r0,[sp,#0xc]          ;829
001784  e3800004          ORR      r0,r0,#4              ;829
001788  e51f1cf0          LDR      r1,|L1.2720|
00178c  e5810000          STR      r0,[r1,#0]            ;829
                  |L1.6032|
001790  ea000010          B        |L1.6104|
                  |L1.6036|
001794  e51f0cf8          LDR      r0,|L1.2724|
001798  e5900000          LDR      r0,[r0,#0]            ;832
00179c  e3100001          TST      r0,#1                 ;832
0017a0  0a000007          BEQ      |L1.6084|
0017a4  e51f0d0c          LDR      r0,|L1.2720|
0017a8  e5900000          LDR      r0,[r0,#0]            ;832
0017ac  e3100004          TST      r0,#4                 ;832
0017b0  1a000003          BNE      |L1.6084|
0017b4  e3a00001          MOV      r0,#1                 ;833
0017b8  e51f1d1c          LDR      r1,|L1.2724|
0017bc  e5810000          STR      r0,[r1,#0]            ;833
0017c0  ea000008          B        |L1.6120|
                  |L1.6084|
0017c4  e5d40008          LDRB     r0,[r4,#8]            ;836
0017c8  e3500000          CMP      r0,#0                 ;836
0017cc  1a000001          BNE      |L1.6104|
0017d0  e51f0d2c          LDR      r0,|L1.2732|
0017d4  eaffff6e          B        |L1.5524|
                  |L1.6104|
0017d8  e59f03a0          LDR      r0,|L1.7040|
0017dc  e5d00000          LDRB     r0,[r0,#0]            ;831  ; _sd_SDDataReady
0017e0  e3500000          CMP      r0,#0                 ;831
0017e4  0affffea          BEQ      |L1.6036|
                  |L1.6120|
0017e8  e1a00000          MOV      r0,r0                 ;834
0017ec  e51f0d50          LDR      r0,|L1.2724|
0017f0  e5900000          LDR      r0,[r0,#0]            ;840
0017f4  e3100004          TST      r0,#4                 ;840
0017f8  1a000001          BNE      |L1.6148|
0017fc  e51f0d40          LDR      r0,|L1.2756|
001800  eaffff63          B        |L1.5524|
                  |L1.6148|
001804  e51f0d68          LDR      r0,|L1.2724|
001808  e5900000          LDR      r0,[r0,#0]            ;845
00180c  e3100008          TST      r0,#8                 ;845
001810  1a000001          BNE      |L1.6172|
001814  e51f0d50          LDR      r0,|L1.2764|
001818  eaffff5d          B        |L1.5524|
                  |L1.6172|
00181c  e3a03000          MOV      r3,#0                 ;851
001820  e1a02003          MOV      r2,r3                 ;851
001824  e3a0100c          MOV      r1,#0xc               ;851
001828  e1a00004          MOV      r0,r4                 ;851
00182c  ebfffffe          BL       SD_SDCmdAndRsp
001830  e3500000          CMP      r0,#0                 ;851
001834  0a000001          BEQ      |L1.6208|
001838  e51f0d7c          LDR      r0,|L1.2756|
00183c  eaffff54          B        |L1.5524|
                  |L1.6208|
001840  ebfffffe          BL       SD_CheckRB
001844  e3a02000          MOV      r2,#0                 ;857
001848  e3a01007          MOV      r1,#7                 ;857
00184c  e1a00004          MOV      r0,r4                 ;857
001850  ebfffffe          BL       SD_SDCommand
001854  e51f0dbc          LDR      r0,|L1.2720|
001858  e5900000          LDR      r0,[r0,#0]            ;858
00185c  e3800040          ORR      r0,r0,#0x40           ;858
001860  e51f1dc8          LDR      r1,|L1.2720|
001864  e5810000          STR      r0,[r1,#0]            ;858
001868  e1a00000          MOV      r0,r0                 ;859
                  |L1.6252|
00186c  e51f0dd4          LDR      r0,|L1.2720|
001870  e5900000          LDR      r0,[r0,#0]            ;859
001874  e3100040          TST      r0,#0x40              ;859
001878  1afffffb          BNE      |L1.6252|
00187c  e3a00000          MOV      r0,#0                 ;861
001880  eaffff43          B        |L1.5524|
;;;863    
                          ENDP

                  SD_Write PROC
;;;877     */
;;;878    unsigned int SD_Write(unsigned int u32CardNum, unsigned char *pu8BufAddr, unsigned int u32StartSec, unsigned int u32SecCount)
001884  e92d41f0          PUSH     {r4-r8,lr}
;;;879    {
001888  e24dd018          SUB      sp,sp,#0x18
00188c  e1a07000          MOV      r7,r0
001890  e1a08001          MOV      r8,r1
001894  e1a05002          MOV      r5,r2
001898  e1a06003          MOV      r6,r3
;;;880        char volatile bIsSendCmd = FALSE;
00189c  e3a00000          MOV      r0,#0
0018a0  e58d0014          STR      r0,[sp,#0x14]
;;;881        unsigned int volatile reg;
;;;882        int volatile i, loop, status;
;;;883    
;;;884        SD_INFO_T *pSD;
;;;885    
;;;886        if(u32CardNum == SD_PORT0)
0018a4  e3570001          CMP      r7,#1
0018a8  1a000001          BNE      |L1.6324|
;;;887            pSD = &SD0;
0018ac  e51f44d0          LDR      r4,|L1.5092|
0018b0  ea000000          B        |L1.6328|
                  |L1.6324|
;;;888        else
;;;889            pSD = &SD1;
0018b4  e51f44d4          LDR      r4,|L1.5096|
                  |L1.6328|
;;;890    
;;;891        //--- check input parameters
;;;892        if (u32SecCount == 0)
0018b8  e3560000          CMP      r6,#0
0018bc  1a000002          BNE      |L1.6348|
;;;893            return SD_SELECT_ERROR;
0018c0  e59f02b4          LDR      r0,|L1.7036|
                  |L1.6340|
0018c4  e28dd018          ADD      sp,sp,#0x18
;;;894    
;;;895        if ((status = SD_SDCmdAndRsp(pSD, 7, pSD->RCA, 0)) != 0)
;;;896            return status;
;;;897    
;;;898        SD_CheckRB();
;;;899    
;;;900        // According to SD Spec v2.0, the write CMD block size MUST be 512, and the start address MUST be 512*n.
;;;901        outpw(REG_SDH_BLEN, SD_BLOCK_SIZE - 1);           // set the block size
;;;902    
;;;903        if ((pSD->CardType == SD_TYPE_SD_HIGH) || (pSD->CardType == SD_TYPE_EMMC))
;;;904            outpw(REG_SDH_CMD, u32StartSec);
;;;905        else
;;;906            outpw(REG_SDH_CMD, u32StartSec * SD_BLOCK_SIZE);  // set start address for SD CMD
;;;907    
;;;908        outpw(REG_SDH_DMASA, (unsigned int)pu8BufAddr);
;;;909        loop = u32SecCount / 255;   // the maximum block count is 0xFF=255 for register SDCR[BLK_CNT]
;;;910        for (i=0; i<loop; i++) {
;;;911            _sd_SDDataReady = FALSE;
;;;912    
;;;913            reg = inpw(REG_SDH_CTL) & 0xff00c080;
;;;914            reg = reg | 0xff0000;   // set BLK_CNT to 0xFF=255
;;;915            if (!bIsSendCmd) {
;;;916                outpw(REG_SDH_CTL, reg|(25<<8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DOEN_Msk));
;;;917                bIsSendCmd = TRUE;
;;;918            } else
;;;919                outpw(REG_SDH_CTL, reg | SDH_CTL_DOEN_Msk);
;;;920    
;;;921            while(!_sd_SDDataReady) {
;;;922    //             if ((inpw(REG_SDH_INTSTS) & SDH_INTSTS_BLKDIF_Msk) && (!(inpw(REG_SDH_CTL) & SDH_CTL_DOEN_Msk))) {
;;;923    //                 outpw(REG_SDH_INTSTS, SDH_INTSTS_BLKDIF_Msk);
;;;924    //                 break;
;;;925    //             }
;;;926                if (pSD->IsCardInsert == FALSE)
;;;927                    return SD_NO_SD_CARD;
;;;928            }
;;;929    
;;;930            if ((inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRCIF_Msk) != 0) {   // check CRC
;;;931                outpw(REG_SDH_INTSTS, SDH_INTSTS_CRCIF_Msk);
;;;932                return SD_CRC_ERROR;
;;;933            }
;;;934        }
;;;935    
;;;936        loop = u32SecCount % 255;
;;;937        if (loop != 0) {
;;;938            _sd_SDDataReady = FALSE;
;;;939    
;;;940            reg = (inpw(REG_SDH_CTL) & 0xff00c080) | (loop << 16);
;;;941            if (!bIsSendCmd) {
;;;942                outpw(REG_SDH_CTL, reg|(25<<8)|(SDH_CTL_COEN_Msk | SDH_CTL_RIEN_Msk | SDH_CTL_DOEN_Msk));
;;;943                bIsSendCmd = TRUE;
;;;944            } else
;;;945                outpw(REG_SDH_CTL, reg | SDH_CTL_DOEN_Msk);
;;;946    
;;;947            while(!_sd_SDDataReady) {
;;;948    //             if ((inpw(REG_SDH_INTSTS) & SDH_INTSTS_BLKDIF_Msk) && (!(inpw(REG_SDH_CTL) & SDH_CTL_DOEN_Msk))) {
;;;949    //                 outpw(REG_SDH_INTSTS, SDH_INTSTS_BLKDIF_Msk);
;;;950    //                 break;
;;;951    //             }
;;;952                if (pSD->IsCardInsert == FALSE)
;;;953                    return SD_NO_SD_CARD;
;;;954            }
;;;955    
;;;956            if ((inpw(REG_SDH_INTSTS) & SDH_INTSTS_CRCIF_Msk) != 0) {   // check CRC
;;;957                outpw(REG_SDH_INTSTS, SDH_INTSTS_CRCIF_Msk);
;;;958                return SD_CRC_ERROR;
;;;959            }
;;;960        }
;;;961        outpw(REG_SDH_INTSTS, SDH_INTSTS_CRCIF_Msk);
;;;962    
;;;963        if (SD_SDCmdAndRsp(pSD, 12, 0, 0)) {    // stop command
;;;964            return SD_CRC7_ERROR;
;;;965        }
;;;966        SD_CheckRB();
;;;967    
;;;968        SD_SDCommand(pSD, 7, 0);
;;;969        outpw(REG_SDH_CTL, inpw(REG_SDH_CTL)|SDH_CTL_CLK8OEN_Msk);
;;;970        while(inpw(REG_SDH_CTL) & SDH_CTL_CLK8OEN_Msk);
;;;971    
;;;972        return 0;
;;;973    }
0018c8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.6348|
0018cc  e3a03000          MOV      r3,#0                 ;895
0018d0  e3a01007          MOV      r1,#7                 ;895
0018d4  e5942004          LDR      r2,[r4,#4]            ;895
0018d8  e1a00004          MOV      r0,r4                 ;895
0018dc  ebfffffe          BL       SD_SDCmdAndRsp
0018e0  e58d0004          STR      r0,[sp,#4]            ;895
0018e4  e3500000          CMP      r0,#0                 ;895
0018e8  0a000001          BEQ      |L1.6388|
0018ec  e59d0004          LDR      r0,[sp,#4]            ;896
0018f0  eafffff3          B        |L1.6340|
                  |L1.6388|
0018f4  ebfffffe          BL       SD_CheckRB
0018f8  e51f053c          LDR      r0,|L1.5060|
0018fc  e51f153c          LDR      r1,|L1.5064|
001900  e5810000          STR      r0,[r1,#0]            ;901
001904  e5940000          LDR      r0,[r4,#0]            ;903
001908  e3500001          CMP      r0,#1                 ;903
00190c  0a000002          BEQ      |L1.6428|
001910  e5940000          LDR      r0,[r4,#0]            ;903
001914  e3500004          CMP      r0,#4                 ;903
001918  1a000002          BNE      |L1.6440|
                  |L1.6428|
00191c  e51f0e7c          LDR      r0,|L1.2728|
001920  e5805000          STR      r5,[r0,#0]            ;904
001924  ea000002          B        |L1.6452|
                  |L1.6440|
001928  e1a00485          LSL      r0,r5,#9              ;906
00192c  e51f1e8c          LDR      r1,|L1.2728|
001930  e5810000          STR      r0,[r1,#0]            ;906
                  |L1.6452|
001934  e51f0dd0          LDR      r0,|L1.2924|
001938  e5808000          STR      r8,[r0,#0]            ;908
00193c  e3a010ff          MOV      r1,#0xff              ;909
001940  e1a00006          MOV      r0,r6                 ;909
001944  ebfffffe          BL       __aeabi_uidivmod
001948  e58d0008          STR      r0,[sp,#8]            ;909
00194c  e3a00000          MOV      r0,#0                 ;910
001950  e58d000c          STR      r0,[sp,#0xc]          ;910
001954  ea00002f          B        |L1.6680|
                  |L1.6488|
001958  e3a00000          MOV      r0,#0                 ;911
00195c  e59f121c          LDR      r1,|L1.7040|
001960  e5c10000          STRB     r0,[r1,#0]            ;911  ; _sd_SDDataReady
001964  e51f0ecc          LDR      r0,|L1.2720|
001968  e5900000          LDR      r0,[r0,#0]            ;913
00196c  e59f1210          LDR      r1,|L1.7044|
001970  e0000001          AND      r0,r0,r1              ;913
001974  e58d0010          STR      r0,[sp,#0x10]         ;913
001978  e59d0010          LDR      r0,[sp,#0x10]         ;914
00197c  e38008ff          ORR      r0,r0,#0xff0000       ;914
001980  e58d0010          STR      r0,[sp,#0x10]         ;914
001984  e5dd0014          LDRB     r0,[sp,#0x14]         ;915
001988  e3500000          CMP      r0,#0                 ;915
00198c  1a000007          BNE      |L1.6576|
001990  e59d0010          LDR      r0,[sp,#0x10]         ;916
001994  e3800c19          ORR      r0,r0,#0x1900         ;916
001998  e380000b          ORR      r0,r0,#0xb            ;916
00199c  e51f1f04          LDR      r1,|L1.2720|
0019a0  e5810000          STR      r0,[r1,#0]            ;916
0019a4  e3a00001          MOV      r0,#1                 ;917
0019a8  e58d0014          STR      r0,[sp,#0x14]         ;917
0019ac  ea000003          B        |L1.6592|
                  |L1.6576|
0019b0  e59d0010          LDR      r0,[sp,#0x10]         ;919
0019b4  e3800008          ORR      r0,r0,#8              ;919
0019b8  e51f1f20          LDR      r1,|L1.2720|
0019bc  e5810000          STR      r0,[r1,#0]            ;919
                  |L1.6592|
0019c0  ea000004          B        |L1.6616|
                  |L1.6596|
0019c4  e5d40008          LDRB     r0,[r4,#8]            ;926
0019c8  e3500000          CMP      r0,#0                 ;926
0019cc  1a000001          BNE      |L1.6616|
0019d0  e51f0f2c          LDR      r0,|L1.2732|
0019d4  eaffffba          B        |L1.6340|
                  |L1.6616|
0019d8  e59f01a0          LDR      r0,|L1.7040|
0019dc  e5d00000          LDRB     r0,[r0,#0]            ;921  ; _sd_SDDataReady
0019e0  e3500000          CMP      r0,#0                 ;921
0019e4  0afffff6          BEQ      |L1.6596|
0019e8  e51f0f4c          LDR      r0,|L1.2724|
0019ec  e5900000          LDR      r0,[r0,#0]            ;930
0019f0  e3100002          TST      r0,#2                 ;930
0019f4  0a000004          BEQ      |L1.6668|
0019f8  e3a00002          MOV      r0,#2                 ;931
0019fc  e51f1f60          LDR      r1,|L1.2724|
001a00  e5810000          STR      r0,[r1,#0]            ;931
001a04  e59f017c          LDR      r0,|L1.7048|
001a08  eaffffad          B        |L1.6340|
                  |L1.6668|
001a0c  e59d000c          LDR      r0,[sp,#0xc]          ;910
001a10  e2800001          ADD      r0,r0,#1              ;910
001a14  e58d000c          STR      r0,[sp,#0xc]          ;910
                  |L1.6680|
001a18  e59d000c          LDR      r0,[sp,#0xc]          ;910
001a1c  e59d1008          LDR      r1,[sp,#8]            ;910
001a20  e1500001          CMP      r0,r1                 ;910
001a24  baffffcb          BLT      |L1.6488|
001a28  e3a010ff          MOV      r1,#0xff              ;936
001a2c  e1a00006          MOV      r0,r6                 ;936
001a30  ebfffffe          BL       __aeabi_uidivmod
001a34  e58d1008          STR      r1,[sp,#8]            ;936
001a38  e59d0008          LDR      r0,[sp,#8]            ;937
001a3c  e3500000          CMP      r0,#0                 ;937
001a40  0a00002b          BEQ      |L1.6900|
001a44  e3a00000          MOV      r0,#0                 ;938
001a48  e59f1130          LDR      r1,|L1.7040|
001a4c  e5c10000          STRB     r0,[r1,#0]            ;938  ; _sd_SDDataReady
001a50  e51f0fb8          LDR      r0,|L1.2720|
001a54  e5900000          LDR      r0,[r0,#0]            ;940
001a58  e59f1124          LDR      r1,|L1.7044|
001a5c  e0000001          AND      r0,r0,r1              ;940
001a60  e59d1008          LDR      r1,[sp,#8]            ;940
001a64  e1800801          ORR      r0,r0,r1,LSL #16      ;940
001a68  e58d0010          STR      r0,[sp,#0x10]         ;940
001a6c  e5dd0014          LDRB     r0,[sp,#0x14]         ;941
001a70  e3500000          CMP      r0,#0                 ;941
001a74  1a000007          BNE      |L1.6808|
001a78  e59d0010          LDR      r0,[sp,#0x10]         ;942
001a7c  e3800c19          ORR      r0,r0,#0x1900         ;942
001a80  e380000b          ORR      r0,r0,#0xb            ;942
001a84  e51f1fec          LDR      r1,|L1.2720|
001a88  e5810000          STR      r0,[r1,#0]            ;942
001a8c  e3a00001          MOV      r0,#1                 ;943
001a90  e58d0014          STR      r0,[sp,#0x14]         ;943
001a94  ea000003          B        |L1.6824|
                  |L1.6808|
001a98  e59d0010          LDR      r0,[sp,#0x10]         ;945
001a9c  e3800008          ORR      r0,r0,#8              ;945
001aa0  e59f10e4          LDR      r1,|L1.7052|
001aa4  e5810000          STR      r0,[r1,#0]            ;945
                  |L1.6824|
001aa8  ea000004          B        |L1.6848|
                  |L1.6828|
001aac  e5d40008          LDRB     r0,[r4,#8]            ;952
001ab0  e3500000          CMP      r0,#0                 ;952
001ab4  1a000001          BNE      |L1.6848|
001ab8  e59f00d0          LDR      r0,|L1.7056|
001abc  eaffff80          B        |L1.6340|
                  |L1.6848|
001ac0  e59f00b8          LDR      r0,|L1.7040|
001ac4  e5d00000          LDRB     r0,[r0,#0]            ;947  ; _sd_SDDataReady
001ac8  e3500000          CMP      r0,#0                 ;947
001acc  0afffff6          BEQ      |L1.6828|
001ad0  e59f00bc          LDR      r0,|L1.7060|
001ad4  e5900000          LDR      r0,[r0,#0]            ;956
001ad8  e3100002          TST      r0,#2                 ;956
001adc  0a000004          BEQ      |L1.6900|
001ae0  e3a00002          MOV      r0,#2                 ;957
001ae4  e59f10a8          LDR      r1,|L1.7060|
001ae8  e5810000          STR      r0,[r1,#0]            ;957
001aec  e59f0094          LDR      r0,|L1.7048|
001af0  eaffff73          B        |L1.6340|
                  |L1.6900|
001af4  e3a00002          MOV      r0,#2                 ;961
001af8  e59f1094          LDR      r1,|L1.7060|
001afc  e5810000          STR      r0,[r1,#0]            ;961
001b00  e3a03000          MOV      r3,#0                 ;963
001b04  e1a02003          MOV      r2,r3                 ;963
001b08  e3a0100c          MOV      r1,#0xc               ;963
001b0c  e1a00004          MOV      r0,r4                 ;963
001b10  ebfffffe          BL       SD_SDCmdAndRsp
001b14  e3500000          CMP      r0,#0                 ;963
001b18  0a000001          BEQ      |L1.6948|
001b1c  e59f0074          LDR      r0,|L1.7064|
001b20  eaffff67          B        |L1.6340|
                  |L1.6948|
001b24  ebfffffe          BL       SD_CheckRB
001b28  e3a02000          MOV      r2,#0                 ;968
001b2c  e3a01007          MOV      r1,#7                 ;968
001b30  e1a00004          MOV      r0,r4                 ;968
001b34  ebfffffe          BL       SD_SDCommand
001b38  e59f004c          LDR      r0,|L1.7052|
001b3c  e5900000          LDR      r0,[r0,#0]            ;969
001b40  e3800040          ORR      r0,r0,#0x40           ;969
001b44  e59f1040          LDR      r1,|L1.7052|
001b48  e5810000          STR      r0,[r1,#0]            ;969
001b4c  e1a00000          MOV      r0,r0                 ;970
                  |L1.6992|
001b50  e59f0034          LDR      r0,|L1.7052|
001b54  e5900000          LDR      r0,[r0,#0]            ;970
001b58  e3100040          TST      r0,#0x40              ;970
001b5c  1afffffb          BNE      |L1.6992|
001b60  e3a00000          MOV      r0,#0                 ;972
001b64  eaffff56          B        |L1.6340|
;;;974    
                          ENDP

                  |L1.7016|
                          DCD      0xb000c804
                  |L1.7020|
                          DCD      0x00004e20
                  |L1.7024|
                          DCD      0x000061a8
                  |L1.7028|
                          DCD      sd0_ok
                  |L1.7032|
                          DCD      sd1_ok
                  |L1.7036|
                          DCD      0xffff0113
                  |L1.7040|
                          DCD      _sd_SDDataReady
                  |L1.7044|
                          DCD      0xff00c080
                  |L1.7048|
                          DCD      0xffff0118
                  |L1.7052|
                          DCD      0xb000c820
                  |L1.7056|
                          DCD      0xffff0110
                  |L1.7060|
                          DCD      0xb000c82c
                  |L1.7064|
                          DCD      0xffff0116

                          AREA ||.bss||, DATA, NOINIT, ALIGN=12

                  _sd_ucSDHCBuffer
                          %        512
                  ||SD0||
                          %        24
                  ||SD1||
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4552524f          DCB      0x45,0x52,0x52,0x4f
000004  523a2077          DCB      0x52,0x3a,0x20,0x77
000008  726f6e67          DCB      0x72,0x6f,0x6e,0x67
00000c  20534420          DCB      0x20,0x53,0x44,0x20
000010  636c6f63          DCB      0x63,0x6c,0x6f,0x63
000014  6b202564          DCB      0x6b,0x20,0x25,0x64
000018  4b487a20          DCB      0x4b,0x48,0x7a,0x20
00001c  73696e63          DCB      0x73,0x69,0x6e,0x63
000020  65206974          DCB      0x65,0x20,0x69,0x74
000024  20697320          DCB      0x20,0x69,0x73,0x20
000028  66617374          DCB      0x66,0x61,0x73,0x74
00002c  65722074          DCB      0x65,0x72,0x20,0x74
000030  68616e20          DCB      0x68,0x61,0x6e,0x20
000034  696e7075          DCB      0x69,0x6e,0x70,0x75
000038  7420636c          DCB      0x74,0x20,0x63,0x6c
00003c  6f636b20          DCB      0x6f,0x63,0x6b,0x20
000040  25644b48          DCB      0x25,0x64,0x4b,0x48
000044  7a20210a          DCB      0x7a,0x20,0x21,0x0a
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  4552524f          DCB      0x45,0x52,0x52,0x4f
000050  523a2077          DCB      0x52,0x3a,0x20,0x77
000054  726f6e67          DCB      0x72,0x6f,0x6e,0x67
000058  20534420          DCB      0x20,0x53,0x44,0x20
00005c  636c6f63          DCB      0x63,0x6c,0x6f,0x63
000060  6b202564          DCB      0x6b,0x20,0x25,0x64
000064  4b487a20          DCB      0x4b,0x48,0x7a,0x20
000068  73696e63          DCB      0x73,0x69,0x6e,0x63
00006c  65206974          DCB      0x65,0x20,0x69,0x74
000070  20697320          DCB      0x20,0x69,0x73,0x20
000074  736c6f77          DCB      0x73,0x6c,0x6f,0x77
000078  65722074          DCB      0x65,0x72,0x20,0x74
00007c  68616e20          DCB      0x68,0x61,0x6e,0x20
000080  696e7075          DCB      0x69,0x6e,0x70,0x75
000084  7420636c          DCB      0x74,0x20,0x63,0x6c
000088  6f636b20          DCB      0x6f,0x63,0x6b,0x20
00008c  25644b48          DCB      0x25,0x64,0x4b,0x48
000090  7a2f2564          DCB      0x7a,0x2f,0x25,0x64
000094  20210a00          DCB      0x20,0x21,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _sd_uR3_CMD
                          DCD      0x00000000
                  _sd_uR7_CMD
                          DCD      0x00000000
                  _sd_SDDataReady
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  sd0_ok
                          DCD      0x00000000
                  sd1_ok
                          DCD      0x00000000
                  pSD0_offset
000014  00                DCB      0x00
                  pSD1_offset
000015  000000            DCB      0x00,0x00,0x00
                  _sd_pSDHCBuffer
                          DCD      0x00000000
                  gSDHReferenceClock
                          DCD      0x00000000
