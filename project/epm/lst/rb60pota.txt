; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\rb60pota.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\rb60pota.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\rb60pota.crf src\userdrv\rb60pOTA.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  charToInt PROC
;;;95     
;;;96     static void charToInt(unsigned int *intOut, char *charLine, unsigned numOfChar) {
000000  e92d4030          PUSH     {r4,r5,lr}
000004  e1a03000          MOV      r3,r0
;;;97       unsigned i;
;;;98       char     tmpChar;
;;;99       
;;;100      *intOut = 0;
000008  e3a04000          MOV      r4,#0
00000c  e5834000          STR      r4,[r3,#0]
;;;101      for (i=0; i < numOfChar; i++) {
000010  e3a00000          MOV      r0,#0
000014  ea00001c          B        |L1.140|
                  |L1.24|
;;;102        if (charLine[i] >= 0x41 && charLine[i] <= 0x46) {
000018  e7d14000          LDRB     r4,[r1,r0]
00001c  e3540041          CMP      r4,#0x41
000020  ba000006          BLT      |L1.64|
000024  e7d14000          LDRB     r4,[r1,r0]
000028  e3540046          CMP      r4,#0x46
00002c  ca000003          BGT      |L1.64|
;;;103          // Check for 0xA - 0xF
;;;104          tmpChar = charLine[i] - 0x37;
000030  e7d14000          LDRB     r4,[r1,r0]
000034  e2444037          SUB      r4,r4,#0x37
000038  e204c0ff          AND      r12,r4,#0xff
00003c  ea00000b          B        |L1.112|
                  |L1.64|
;;;105        } else if (charLine[i] >= 0x61 && charLine[i] <= 0x66) {
000040  e7d14000          LDRB     r4,[r1,r0]
000044  e3540061          CMP      r4,#0x61
000048  ba000006          BLT      |L1.104|
00004c  e7d14000          LDRB     r4,[r1,r0]
000050  e3540066          CMP      r4,#0x66
000054  ca000003          BGT      |L1.104|
;;;106          // Check for 0xa - 0xf
;;;107          tmpChar = charLine[i] - 0x37;
000058  e7d14000          LDRB     r4,[r1,r0]
00005c  e2444037          SUB      r4,r4,#0x37
000060  e204c0ff          AND      r12,r4,#0xff
000064  ea000001          B        |L1.112|
                  |L1.104|
;;;108        } else {
;;;109          tmpChar = charLine[i] & 0xF;
000068  e7d14000          LDRB     r4,[r1,r0]
00006c  e204c00f          AND      r12,r4,#0xf
                  |L1.112|
;;;110        }
;;;111        *intOut |= (tmpChar << (((numOfChar - 1) - i) * 4));
000070  e2425001          SUB      r5,r2,#1
000074  e0455000          SUB      r5,r5,r0
000078  e1a05105          LSL      r5,r5,#2
00007c  e5934000          LDR      r4,[r3,#0]
000080  e184451c          ORR      r4,r4,r12,LSL r5
000084  e5834000          STR      r4,[r3,#0]
000088  e2800001          ADD      r0,r0,#1              ;101
                  |L1.140|
00008c  e1500002          CMP      r0,r2                 ;101
000090  3affffe0          BCC      |L1.24|
;;;112      }
;;;113    }
000094  e8bd8030          POP      {r4,r5,pc}
;;;114    
                          ENDP

                  RB60PStartBootModeFunc PROC
;;;115    
;;;116    static BOOL RB60PStartBootModeFunc(int radarIndex)
000098  e92d4010          PUSH     {r4,lr}
;;;117    {
00009c  e24dd030          SUB      sp,sp,#0x30
0000a0  e1a04000          MOV      r4,r0
;;;118        uint8_t RadarData[22];
;;;119        uint8_t FirstOTACmd[9] = {0x7A, 0xA7, 0x00, 0x09, 0x05, 0x00, 0x0E, 0xD3, 0x3D};
0000a4  e28f2f77          ADR      r2,|L1.648|
0000a8  e8920007          LDM      r2,{r0-r2}
0000ac  e28d300c          ADD      r3,sp,#0xc
0000b0  e8830007          STM      r3,{r0-r2}
;;;120        int ReadDataLen;
;;;121        
;;;122        if(RadarDrvInitEx(radarIndex,115200) == FALSE)
0000b4  e59f11d8          LDR      r1,|L1.660|
0000b8  e1a00004          MOV      r0,r4
0000bc  ebfffffe          BL       RadarDrvInitEx
0000c0  e3500000          CMP      r0,#0
0000c4  1a000004          BNE      |L1.220|
;;;123        {
;;;124            terninalPrintf("NEWradarTest ERROR (initFunc false)!!\n");
0000c8  e28f0f72          ADR      r0,|L1.664|
0000cc  ebfffffe          BL       terninalPrintf
;;;125            return FALSE;
0000d0  e3a00000          MOV      r0,#0
                  |L1.212|
0000d4  e28dd030          ADD      sp,sp,#0x30
;;;126        }
;;;127        newRadarResultPure(radarIndex,NULL,0,RadarData,&ReadDataLen,100);
;;;128        //RadarDrvInit();
;;;129        RadarSetPowerStatus(radarIndex,FALSE);
;;;130        vTaskDelay(500/portTICK_RATE_MS);
;;;131        RadarSetPowerStatus(radarIndex,TRUE);
;;;132        vTaskDelay(500/portTICK_RATE_MS);
;;;133        
;;;134        
;;;135        
;;;136        if(newRadarResultPure(radarIndex,FirstOTACmd,sizeof(FirstOTACmd),RadarData,&ReadDataLen,100) == TRUE)
;;;137        {
;;;138            if(RadarData[0] == 0x00)
;;;139                return TRUE;
;;;140        }
;;;141        terninalPrintf("First OTA return FALSE\n");
;;;142        return FALSE; 
;;;143        
;;;144    }
0000d8  e8bd8010          POP      {r4,pc}
                  |L1.220|
0000dc  e3a00064          MOV      r0,#0x64              ;127
0000e0  e28d1008          ADD      r1,sp,#8              ;127
0000e4  e58d0004          STR      r0,[sp,#4]            ;127
0000e8  e58d1000          STR      r1,[sp,#0]            ;127
0000ec  e28d3018          ADD      r3,sp,#0x18           ;127
0000f0  e3a02000          MOV      r2,#0                 ;127
0000f4  e1a01002          MOV      r1,r2                 ;127
0000f8  e1a00004          MOV      r0,r4                 ;127
0000fc  ebfffffe          BL       newRadarResultPure
000100  e3a01000          MOV      r1,#0                 ;129
000104  e1a00004          MOV      r0,r4                 ;129
000108  ebfffffe          BL       RadarSetPowerStatus
00010c  e3a00032          MOV      r0,#0x32              ;130
000110  ebfffffe          BL       vTaskDelay
000114  e3a01001          MOV      r1,#1                 ;131
000118  e1a00004          MOV      r0,r4                 ;131
00011c  ebfffffe          BL       RadarSetPowerStatus
000120  e3a00032          MOV      r0,#0x32              ;132
000124  ebfffffe          BL       vTaskDelay
000128  e3a00064          MOV      r0,#0x64              ;136
00012c  e28d1008          ADD      r1,sp,#8              ;136
000130  e58d0004          STR      r0,[sp,#4]            ;136
000134  e58d1000          STR      r1,[sp,#0]            ;136
000138  e28d3018          ADD      r3,sp,#0x18           ;136
00013c  e3a02009          MOV      r2,#9                 ;136
000140  e28d100c          ADD      r1,sp,#0xc            ;136
000144  e1a00004          MOV      r0,r4                 ;136
000148  ebfffffe          BL       newRadarResultPure
00014c  e3500001          CMP      r0,#1                 ;136
000150  1a000004          BNE      |L1.360|
000154  e5dd0018          LDRB     r0,[sp,#0x18]         ;138
000158  e3500000          CMP      r0,#0                 ;138
00015c  1a000001          BNE      |L1.360|
000160  e3a00001          MOV      r0,#1                 ;139
000164  eaffffda          B        |L1.212|
                  |L1.360|
000168  e28f0e15          ADR      r0,|L1.704|
00016c  ebfffffe          BL       terninalPrintf
000170  e3a00000          MOV      r0,#0                 ;142
000174  eaffffd6          B        |L1.212|
;;;145    
                          ENDP

                  RB60PQueryVersionFunc PROC
;;;146    static BOOL RB60PQueryVersionFunc(int radarIndex)
000178  e92d4030          PUSH     {r4,r5,lr}
;;;147    {
00017c  e24dd024          SUB      sp,sp,#0x24
000180  e1a04000          MOV      r4,r0
;;;148        uint8_t RadarData[22];
;;;149        uint8_t VersionCmd[9] = {0x7A, 0xA7, 0x00, 0x09, 0x00, 0x00, 0x09, 0xD3, 0x3D};
000184  e28f2f53          ADR      r2,|L1.728|
000188  e8920007          LDM      r2,{r0-r2}
00018c  e88d0007          STM      sp,{r0-r2}
;;;150        int ReadDataLen;
;;;151        uint8_t reFreshPara;
;;;152        
;;;153        if(RadarDrvInitEx(radarIndex,115200) == FALSE)
000190  e59f10fc          LDR      r1,|L1.660|
000194  e1a00004          MOV      r0,r4
000198  ebfffffe          BL       RadarDrvInitEx
00019c  e3500000          CMP      r0,#0
0001a0  1a000004          BNE      |L1.440|
;;;154        {
;;;155            terninalPrintf("NEWradarTest ERROR (initFunc false)!!\n");
0001a4  e28f00ec          ADR      r0,|L1.664|
0001a8  ebfffffe          BL       terninalPrintf
;;;156            return FALSE;
0001ac  e3a00000          MOV      r0,#0
                  |L1.432|
0001b0  e28dd024          ADD      sp,sp,#0x24
;;;157        }
;;;158        //newRadarResultPure(radarIndex,NULL,0,RadarData,&ReadDataLen,100);
;;;159        //RadarDrvInit();
;;;160        RadarSetPowerStatus(radarIndex,FALSE);
;;;161        vTaskDelay(500/portTICK_RATE_MS);
;;;162        RadarSetPowerStatus(radarIndex,TRUE);
;;;163        vTaskDelay(500/portTICK_RATE_MS);
;;;164        
;;;165        
;;;166        
;;;167        if(newRadarResult(radarIndex, 0x00, VersionCmd, RadarData) == TRUE)
;;;168        {
;;;169            if(radarIndex == 0)
;;;170                reFreshPara = GUI_NEW_RADARA_OTA;
;;;171            else if(radarIndex == 1)
;;;172                reFreshPara = GUI_NEW_RADARB_OTA;
;;;173            
;;;174            GuiManagerUpdateMessage(reFreshPara,0xFF,(RadarData[0]<<24) | (RadarData[1]<<16) | (RadarData[2]<<8) | RadarData[3]);        
;;;175            return TRUE;
;;;176        }
;;;177        else
;;;178            return FALSE; 
;;;179        
;;;180    }
0001b4  e8bd8030          POP      {r4,r5,pc}
                  |L1.440|
0001b8  e3a01000          MOV      r1,#0                 ;160
0001bc  e1a00004          MOV      r0,r4                 ;160
0001c0  ebfffffe          BL       RadarSetPowerStatus
0001c4  e3a00032          MOV      r0,#0x32              ;161
0001c8  ebfffffe          BL       vTaskDelay
0001cc  e3a01001          MOV      r1,#1                 ;162
0001d0  e1a00004          MOV      r0,r4                 ;162
0001d4  ebfffffe          BL       RadarSetPowerStatus
0001d8  e3a00032          MOV      r0,#0x32              ;163
0001dc  ebfffffe          BL       vTaskDelay
0001e0  e28d300c          ADD      r3,sp,#0xc            ;167
0001e4  e1a0200d          MOV      r2,sp                 ;167
0001e8  e3a01000          MOV      r1,#0                 ;167
0001ec  e1a00004          MOV      r0,r4                 ;167
0001f0  ebfffffe          BL       newRadarResult
0001f4  e3500001          CMP      r0,#1                 ;167
0001f8  1a000013          BNE      |L1.588|
0001fc  e3540000          CMP      r4,#0                 ;169
000200  1a000001          BNE      |L1.524|
000204  e3a05033          MOV      r5,#0x33              ;170
000208  ea000002          B        |L1.536|
                  |L1.524|
00020c  e3540001          CMP      r4,#1                 ;171
000210  1a000000          BNE      |L1.536|
000214  e3a05034          MOV      r5,#0x34              ;172
                  |L1.536|
000218  e5dd000c          LDRB     r0,[sp,#0xc]          ;174
00021c  e1a00c00          LSL      r0,r0,#24             ;174
000220  e5dd100d          LDRB     r1,[sp,#0xd]          ;174
000224  e1800801          ORR      r0,r0,r1,LSL #16      ;174
000228  e5dd100e          LDRB     r1,[sp,#0xe]          ;174
00022c  e1800401          ORR      r0,r0,r1,LSL #8       ;174
000230  e5dd100f          LDRB     r1,[sp,#0xf]          ;174
000234  e1802001          ORR      r2,r0,r1              ;174
000238  e3a010ff          MOV      r1,#0xff              ;174
00023c  e1a00005          MOV      r0,r5                 ;174
000240  ebfffffe          BL       GuiManagerUpdateMessage
000244  e3a00001          MOV      r0,#1                 ;175
000248  eaffffd8          B        |L1.432|
                  |L1.588|
00024c  e3a00000          MOV      r0,#0                 ;178
000250  eaffffd6          B        |L1.432|
;;;181    
                          ENDP

                  RB60PSetOTABaudFunc PROC
;;;182    static BOOL RB60PSetOTABaudFunc(int radarIndex)
000254  e92d4010          PUSH     {r4,lr}
;;;183    {
000258  e1a04000          MOV      r4,r0
;;;184        if(RadarDrvInitEx(radarIndex ,57600) == FALSE)
00025c  e3a01ce1          MOV      r1,#0xe100
000260  e1a00004          MOV      r0,r4
000264  ebfffffe          BL       RadarDrvInitEx
000268  e3500000          CMP      r0,#0
00026c  1a000003          BNE      |L1.640|
;;;185        {
;;;186            terninalPrintf("NEWradarTest ERROR (initFunc false)!!\n");
000270  e28f0020          ADR      r0,|L1.664|
000274  ebfffffe          BL       terninalPrintf
;;;187            return FALSE;
000278  e3a00000          MOV      r0,#0
                  |L1.636|
;;;188        }
;;;189        return TRUE;
;;;190    }
00027c  e8bd8010          POP      {r4,pc}
                  |L1.640|
000280  e3a00001          MOV      r0,#1                 ;189
000284  eafffffc          B        |L1.636|
                  |L1.648|
000288  7aa700            DCB      "z",167,0
00028b  090500            DCB      "\t",5,0
00028e  0ed33d00          DCB      14,211,"=",0
000292  00                DCB      0
000293  00                DCB      0
                  |L1.660|
                          DCD      0x0001c200
                  |L1.664|
000298  4e455772          DCB      "NEWradarTest ERROR (initFunc false)!!\n",0
00029c  61646172
0002a0  54657374
0002a4  20455252
0002a8  4f522028
0002ac  696e6974
0002b0  46756e63
0002b4  2066616c
0002b8  73652921
0002bc  210a00  
0002bf  00                DCB      0
                  |L1.704|
0002c0  46697273          DCB      "First OTA return FALSE\n",0
0002c4  74204f54
0002c8  41207265
0002cc  7475726e
0002d0  2046414c
0002d4  53450a00
                  |L1.728|
0002d8  7aa700            DCB      "z",167,0
0002db  0900              DCB      "\t",0
0002dd  00                DCB      0
0002de  09d33d00          DCB      "\t",211,"=",0
0002e2  00                DCB      0
0002e3  00                DCB      0
                          ENDP

                  init_ASC_BSL PROC
;;;202    
;;;203    static BOOL init_ASC_BSL(int radarIndex)
0002e4  e92d4010          PUSH     {r4,lr}
;;;204    {
0002e8  e24dd028          SUB      sp,sp,#0x28
0002ec  e1a04000          MOV      r4,r0
;;;205        uint8_t RadarData[22];
;;;206        uint8_t initASCCmd[1] = {0x00};
0002f0  e3a00000          MOV      r0,#0
0002f4  e58d000c          STR      r0,[sp,#0xc]
;;;207        int ReadDataLen;
;;;208        
;;;209        if(newRadarResultPure(radarIndex,initASCCmd,1,RadarData,&ReadDataLen,100) == TRUE)
0002f8  e3a00064          MOV      r0,#0x64
0002fc  e28d1008          ADD      r1,sp,#8
000300  e58d0004          STR      r0,[sp,#4]
000304  e58d1000          STR      r1,[sp,#0]
000308  e28d3010          ADD      r3,sp,#0x10
00030c  e3a02001          MOV      r2,#1
000310  e28d100c          ADD      r1,sp,#0xc
000314  e1a00004          MOV      r0,r4
000318  ebfffffe          BL       newRadarResultPure
00031c  e3500001          CMP      r0,#1
000320  1a000005          BNE      |L1.828|
;;;210        {
;;;211            if(RadarData[0] == 0xD5)
000324  e5dd0010          LDRB     r0,[sp,#0x10]
000328  e35000d5          CMP      r0,#0xd5
00032c  1a000002          BNE      |L1.828|
;;;212                return TRUE;
000330  e3a00001          MOV      r0,#1
                  |L1.820|
000334  e28dd028          ADD      sp,sp,#0x28
;;;213        }
;;;214        terninalPrintf("init_ASC_BSL FALSE,RadarData[0] = 0x%02x\n",RadarData[0]);
;;;215        return FALSE; 
;;;216    
;;;217    }
000338  e8bd8010          POP      {r4,pc}
                  |L1.828|
00033c  e5dd1010          LDRB     r1,[sp,#0x10]         ;214
000340  e28f0fb7          ADR      r0,|L1.1572|
000344  ebfffffe          BL       terninalPrintf
000348  e3a00000          MOV      r0,#0                 ;215
00034c  eafffff8          B        |L1.820|
;;;218    
                          ENDP

                  send_4_length PROC
;;;219    static BOOL send_4_length(int radarIndex , unsigned int appLength)
000350  e92d4030          PUSH     {r4,r5,lr}
;;;220    {
000354  e24dd02c          SUB      sp,sp,#0x2c
000358  e1a05000          MOV      r5,r0
00035c  e1a04001          MOV      r4,r1
;;;221        uint8_t RadarData[22];
;;;222        uint8_t appLengthCmd[4];
;;;223        int ReadDataLen;
;;;224        
;;;225        appLengthCmd[0] = appLength & 0xff; //1. byte
000360  e5cd4010          STRB     r4,[sp,#0x10]
;;;226        appLengthCmd[1] = (appLength>>8) & 0xff; //2. byte
000364  e1a00804          LSL      r0,r4,#16
000368  e1a00c20          LSR      r0,r0,#24
00036c  e5cd0011          STRB     r0,[sp,#0x11]
;;;227        appLengthCmd[2] = (appLength>>16) & 0xff; //3. byte
000370  e1a00404          LSL      r0,r4,#8
000374  e1a00c20          LSR      r0,r0,#24
000378  e5cd0012          STRB     r0,[sp,#0x12]
;;;228        appLengthCmd[3] = (appLength>>24) & 0xff; //3. byte
00037c  e1a00c24          LSR      r0,r4,#24
000380  e5cd0013          STRB     r0,[sp,#0x13]
;;;229        
;;;230        if(newRadarResultPure(radarIndex,appLengthCmd,4,RadarData,&ReadDataLen,100) == TRUE)
000384  e3a00064          MOV      r0,#0x64
000388  e28d100c          ADD      r1,sp,#0xc
00038c  e58d0004          STR      r0,[sp,#4]
000390  e58d1000          STR      r1,[sp,#0]
000394  e28d3014          ADD      r3,sp,#0x14
000398  e3a02004          MOV      r2,#4
00039c  e28d1010          ADD      r1,sp,#0x10
0003a0  e1a00005          MOV      r0,r5
0003a4  ebfffffe          BL       newRadarResultPure
0003a8  e3500001          CMP      r0,#1
0003ac  1a000005          BNE      |L1.968|
;;;231        {
;;;232            if(RadarData[0] == 0x01)
0003b0  e5dd0014          LDRB     r0,[sp,#0x14]
0003b4  e3500001          CMP      r0,#1
0003b8  1a000002          BNE      |L1.968|
;;;233                return TRUE;
0003bc  e3a00001          MOV      r0,#1
                  |L1.960|
0003c0  e28dd02c          ADD      sp,sp,#0x2c
;;;234        }
;;;235        terninalPrintf("send_4_length FALSE\n");
;;;236        return FALSE; 
;;;237    
;;;238    }
0003c4  e8bd8030          POP      {r4,r5,pc}
                  |L1.968|
0003c8  e28f0d0a          ADR      r0,|L1.1616|
0003cc  ebfffffe          BL       terninalPrintf
0003d0  e3a00000          MOV      r0,#0                 ;236
0003d4  eafffff9          B        |L1.960|
;;;239    
                          ENDP

                  make_flash_image PROC
;;;240    
;;;241    static BOOL make_flash_image(char *hexFileName,unsigned char *image,unsigned int max_size, unsigned int *address, unsigned int *num_of_bytes) {
0003d8  e92d5ff0          PUSH     {r4-r12,lr}
0003dc  e24ddd43          SUB      sp,sp,#0x10c0
0003e0  e1a08000          MOV      r8,r0
0003e4  e1a04001          MOV      r4,r1
0003e8  e1a07002          MOV      r7,r2
0003ec  e1a09003          MOV      r9,r3
0003f0  e28d0a01          ADD      r0,sp,#0x1000
0003f4  e59050e8          LDR      r5,[r0,#0xe8]
;;;242    
;;;243        FIL file;
;;;244        UINT br;  
;;;245        
;;;246        char hexLine[80]; 
;;;247        unsigned int hexCount, oldhexCount, hexAddress, oldhexAddress, hexType;  
;;;248        unsigned int intData;
;;;249    
;;;250        char *hexData;
;;;251        unsigned int i;
;;;252        unsigned int temp_addr;
;;;253        BOOL address_set = FALSE;
0003f8  e3a01000          MOV      r1,#0
0003fc  e58d1030          STR      r1,[sp,#0x30]
;;;254        BOOL prev_addressType = FALSE;
000400  e58d102c          STR      r1,[sp,#0x2c]
;;;255        BOOL LinearBaseAddr = FALSE;
000404  e58d1028          STR      r1,[sp,#0x28]
;;;256    
;;;257        if (max_size > 0xFFFF)
000408  e3570801          CMP      r7,#0x10000
00040c  3a000002          BCC      |L1.1052|
;;;258            return  FALSE;   
000410  e3a00000          MOV      r0,#0
                  |L1.1044|
000414  e28ddd43          ADD      sp,sp,#0x10c0
;;;259        
;;;260        if(f_open(&file, hexFileName, FA_OPEN_EXISTING |FA_READ))
;;;261        {
;;;262            terninalPrintf("SD card file %s open fail.\r\n",hexFileName);
;;;263            f_close(&file);
;;;264            return FALSE;
;;;265        }
;;;266    	
;;;267        *num_of_bytes=0;
;;;268    
;;;269        hexAddress = 0;
;;;270        hexCount   = 0;
;;;271    
;;;272        while(f_gets(hexLine, 80, &file)!=NULL) { 
;;;273            
;;;274            oldhexCount = hexCount;
;;;275            oldhexAddress = hexAddress;
;;;276    
;;;277            // Hex Count
;;;278            charToInt(&hexCount, &hexLine[1], 2);
;;;279    
;;;280            // Hex Address		
;;;281            charToInt(&hexAddress, &hexLine[3], 4);
;;;282    
;;;283            if (LinearBaseAddr == FALSE) {
;;;284                for (i=oldhexAddress + oldhexCount; i<hexAddress; i++)
;;;285                    *image++ = 0x00;
;;;286            }
;;;287            else LinearBaseAddr = FALSE;
;;;288    
;;;289            // Hex Type
;;;290            charToInt(&hexType, &hexLine[7], 2);
;;;291            hexData = &hexLine[9];
;;;292    
;;;293            if (hexType == 0) {
;;;294                    if (prev_addressType == TRUE) {
;;;295                        temp_addr|=(hexAddress & 0x0000FFFF);
;;;296                        prev_addressType=FALSE;
;;;297                    }
;;;298              for(i=0; i < hexCount; i++) {
;;;299    
;;;300                charToInt(&intData, &hexData[(2*i)], 2); 
;;;301    
;;;302                        *image++ = intData & 0xFF;			
;;;303              }
;;;304                    *num_of_bytes+=hexCount;
;;;305            }
;;;306                if ((hexType == 4) && (prev_addressType == FALSE) && (address_set == FALSE) ){
;;;307                    charToInt(&temp_addr,&hexLine[9],4);
;;;308                    temp_addr=(temp_addr & 0x0000FFFF)<<16;
;;;309                    address_set = TRUE;
;;;310                    prev_addressType = TRUE;
;;;311                    LinearBaseAddr = TRUE;
;;;312                }
;;;313        }
;;;314        if ((*num_of_bytes > max_size) || (*num_of_bytes == 0))
;;;315            return FALSE;
;;;316    
;;;317        while (*num_of_bytes < 7168){        //fill the minimon to 8kbyte
;;;318          *image = 0x00;
;;;319          image = image++;
;;;320          (*num_of_bytes)++;
;;;321        }
;;;322    
;;;323        *address=temp_addr;
;;;324        f_close(&file);
;;;325    
;;;326      return TRUE;	
;;;327    }
000418  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1052|
00041c  e3a02001          MOV      r2,#1                 ;260
000420  e1a01008          MOV      r1,r8                 ;260
000424  e28d009c          ADD      r0,sp,#0x9c           ;260
000428  ebfffffe          BL       f_open
00042c  e3500000          CMP      r0,#0                 ;260
000430  0a000006          BEQ      |L1.1104|
000434  e1a01008          MOV      r1,r8                 ;262
000438  e28f0f8a          ADR      r0,|L1.1640|
00043c  ebfffffe          BL       terninalPrintf
000440  e28d009c          ADD      r0,sp,#0x9c           ;263
000444  ebfffffe          BL       f_close
000448  e3a00000          MOV      r0,#0                 ;264
00044c  eafffff0          B        |L1.1044|
                  |L1.1104|
000450  e3a01000          MOV      r1,#0                 ;267
000454  e5851000          STR      r1,[r5,#0]            ;267
000458  e58d1044          STR      r1,[sp,#0x44]         ;269
00045c  e58d1048          STR      r1,[sp,#0x48]         ;270
000460  ea000051          B        |L1.1452|
                  |L1.1124|
000464  e59da048          LDR      r10,[sp,#0x48]        ;274
000468  e59d1044          LDR      r1,[sp,#0x44]         ;275
00046c  e58d1040          STR      r1,[sp,#0x40]         ;275
000470  e3a02002          MOV      r2,#2                 ;278
000474  e28d104d          ADD      r1,sp,#0x4d           ;278
000478  e28d0048          ADD      r0,sp,#0x48           ;278
00047c  ebfffffe          BL       charToInt
000480  e3a02004          MOV      r2,#4                 ;281
000484  e28d104f          ADD      r1,sp,#0x4f           ;281
000488  e28d0044          ADD      r0,sp,#0x44           ;281
00048c  ebfffffe          BL       charToInt
000490  e59d0028          LDR      r0,[sp,#0x28]         ;283
000494  e3500000          CMP      r0,#0                 ;283
000498  1a000009          BNE      |L1.1220|
00049c  e59d0040          LDR      r0,[sp,#0x40]         ;284
0004a0  e080600a          ADD      r6,r0,r10             ;284
0004a4  ea000002          B        |L1.1204|
                  |L1.1192|
0004a8  e3a00000          MOV      r0,#0                 ;285
0004ac  e4c40001          STRB     r0,[r4],#1            ;285
0004b0  e2866001          ADD      r6,r6,#1              ;284
                  |L1.1204|
0004b4  e59d0044          LDR      r0,[sp,#0x44]         ;284
0004b8  e1560000          CMP      r6,r0                 ;284
0004bc  3afffff9          BCC      |L1.1192|
0004c0  ea000001          B        |L1.1228|
                  |L1.1220|
0004c4  e3a00000          MOV      r0,#0                 ;287
0004c8  e58d0028          STR      r0,[sp,#0x28]         ;287
                  |L1.1228|
0004cc  e3a02002          MOV      r2,#2                 ;290
0004d0  e28d1053          ADD      r1,sp,#0x53           ;290
0004d4  e28d003c          ADD      r0,sp,#0x3c           ;290
0004d8  ebfffffe          BL       charToInt
0004dc  e28db055          ADD      r11,sp,#0x55          ;291
0004e0  e59d003c          LDR      r0,[sp,#0x3c]         ;293
0004e4  e3500000          CMP      r0,#0                 ;293
0004e8  1a00001b          BNE      |L1.1372|
0004ec  e59d002c          LDR      r0,[sp,#0x2c]         ;294
0004f0  e3500001          CMP      r0,#1                 ;294
0004f4  1a000007          BNE      |L1.1304|
0004f8  e59d0044          LDR      r0,[sp,#0x44]         ;295
0004fc  e1a01800          LSL      r1,r0,#16             ;295
000500  e1a01821          LSR      r1,r1,#16             ;295
000504  e59d0034          LDR      r0,[sp,#0x34]         ;295
000508  e1811000          ORR      r1,r1,r0              ;295
00050c  e58d1034          STR      r1,[sp,#0x34]         ;295
000510  e3a01000          MOV      r1,#0                 ;296
000514  e58d102c          STR      r1,[sp,#0x2c]         ;296
                  |L1.1304|
000518  e3a06000          MOV      r6,#0                 ;298
00051c  ea000007          B        |L1.1344|
                  |L1.1312|
000520  e3a00002          MOV      r0,#2                 ;300
000524  e021b690          MLA      r1,r0,r6,r11          ;300
000528  e1a02000          MOV      r2,r0                 ;300
00052c  e28d0038          ADD      r0,sp,#0x38           ;300
000530  ebfffffe          BL       charToInt
000534  e59d0038          LDR      r0,[sp,#0x38]         ;302
000538  e4c40001          STRB     r0,[r4],#1            ;302
00053c  e2866001          ADD      r6,r6,#1              ;298
                  |L1.1344|
000540  e59d0048          LDR      r0,[sp,#0x48]         ;298
000544  e1560000          CMP      r6,r0                 ;298
000548  3afffff4          BCC      |L1.1312|
00054c  e5951000          LDR      r1,[r5,#0]            ;304
000550  e59d0048          LDR      r0,[sp,#0x48]         ;304
000554  e0811000          ADD      r1,r1,r0              ;304
000558  e5851000          STR      r1,[r5,#0]            ;304
                  |L1.1372|
00055c  e59d003c          LDR      r0,[sp,#0x3c]         ;306
000560  e3500004          CMP      r0,#4                 ;306
000564  1a000010          BNE      |L1.1452|
000568  e59d002c          LDR      r0,[sp,#0x2c]         ;306
00056c  e3500000          CMP      r0,#0                 ;306
000570  1a00000d          BNE      |L1.1452|
000574  e59d0030          LDR      r0,[sp,#0x30]         ;306
000578  e3500000          CMP      r0,#0                 ;306
00057c  1a00000a          BNE      |L1.1452|
000580  e3a02004          MOV      r2,#4                 ;307
000584  e28d1055          ADD      r1,sp,#0x55           ;307
000588  e28d0034          ADD      r0,sp,#0x34           ;307
00058c  ebfffffe          BL       charToInt
000590  e59d0034          LDR      r0,[sp,#0x34]         ;308
000594  e1a01800          LSL      r1,r0,#16             ;308
000598  e58d1034          STR      r1,[sp,#0x34]         ;308
00059c  e3a01001          MOV      r1,#1                 ;309
0005a0  e58d1030          STR      r1,[sp,#0x30]         ;309
0005a4  e58d102c          STR      r1,[sp,#0x2c]         ;310
0005a8  e58d1028          STR      r1,[sp,#0x28]         ;311
                  |L1.1452|
0005ac  e28d209c          ADD      r2,sp,#0x9c           ;272
0005b0  e3a01050          MOV      r1,#0x50              ;272
0005b4  e28d004c          ADD      r0,sp,#0x4c           ;272
0005b8  ebfffffe          BL       f_gets
0005bc  e3500000          CMP      r0,#0                 ;272
0005c0  1affffa7          BNE      |L1.1124|
0005c4  e5950000          LDR      r0,[r5,#0]            ;314
0005c8  e1500007          CMP      r0,r7                 ;314
0005cc  8a000002          BHI      |L1.1500|
0005d0  e5950000          LDR      r0,[r5,#0]            ;314
0005d4  e3500000          CMP      r0,#0                 ;314
0005d8  1a000001          BNE      |L1.1508|
                  |L1.1500|
0005dc  e3a00000          MOV      r0,#0                 ;315
0005e0  eaffff8b          B        |L1.1044|
                  |L1.1508|
0005e4  ea000005          B        |L1.1536|
                  |L1.1512|
0005e8  e3a00000          MOV      r0,#0                 ;318
0005ec  e5c40000          STRB     r0,[r4,#0]            ;318
0005f0  e2844001          ADD      r4,r4,#1              ;319
0005f4  e5950000          LDR      r0,[r5,#0]            ;320
0005f8  e2800001          ADD      r0,r0,#1              ;320
0005fc  e5850000          STR      r0,[r5,#0]            ;320
                  |L1.1536|
000600  e5950000          LDR      r0,[r5,#0]            ;317
000604  e3500b07          CMP      r0,#0x1c00            ;317
000608  3afffff6          BCC      |L1.1512|
00060c  e59d1034          LDR      r1,[sp,#0x34]         ;323
000610  e5891000          STR      r1,[r9,#0]            ;323
000614  e28d009c          ADD      r0,sp,#0x9c           ;324
000618  ebfffffe          BL       f_close
00061c  e3a00001          MOV      r0,#1                 ;326
000620  eaffff7b          B        |L1.1044|
                  |L1.1572|
000624  696e6974          DCB      "init_ASC_BSL FALSE,RadarData[0] = 0x%02x\n",0
000628  5f415343
00062c  5f42534c
000630  2046414c
000634  53452c52
000638  61646172
00063c  44617461
000640  5b305d20
000644  3d203078
000648  25303278
00064c  0a00    
00064e  00                DCB      0
00064f  00                DCB      0
                  |L1.1616|
000650  73656e64          DCB      "send_4_length FALSE\n",0
000654  5f345f6c
000658  656e6774
00065c  68204641
000660  4c53450a
000664  00      
000665  00                DCB      0
000666  00                DCB      0
000667  00                DCB      0
                  |L1.1640|
000668  53442063          DCB      "SD card file %s open fail.\r\n",0
00066c  61726420
000670  66696c65
000674  20257320
000678  6f70656e
00067c  20666169
000680  6c2e0d0a
000684  00      
000685  00                DCB      0
000686  00                DCB      0
000687  00                DCB      0
                          ENDP

                  send_ASCloader PROC
;;;328    
;;;329    static BOOL send_ASCloader(int radarIndex , unsigned char *hexArray, unsigned int size)
000688  e92d4070          PUSH     {r4-r6,lr}
;;;330    {
00068c  e24dd028          SUB      sp,sp,#0x28
000690  e1a04000          MOV      r4,r0
000694  e1a05001          MOV      r5,r1
000698  e1a06002          MOV      r6,r2
;;;331        uint8_t RadarData[22];
;;;332        uint8_t appLengthCmd[4];
;;;333        int ReadDataLen;
;;;334        
;;;335        
;;;336        if(newRadarResultPure(radarIndex,hexArray,size,RadarData,&ReadDataLen,100) == TRUE)
00069c  e3a00064          MOV      r0,#0x64
0006a0  e28d100c          ADD      r1,sp,#0xc
0006a4  e58d0004          STR      r0,[sp,#4]
0006a8  e58d1000          STR      r1,[sp,#0]
0006ac  e28d3010          ADD      r3,sp,#0x10
0006b0  e1a02006          MOV      r2,r6
0006b4  e1a01005          MOV      r1,r5
0006b8  e1a00004          MOV      r0,r4
0006bc  ebfffffe          BL       newRadarResultPure
0006c0  e3500001          CMP      r0,#1
0006c4  1a000005          BNE      |L1.1760|
;;;337        {
;;;338            if(RadarData[0] == 0x01)
0006c8  e5dd0010          LDRB     r0,[sp,#0x10]
0006cc  e3500001          CMP      r0,#1
0006d0  1a000002          BNE      |L1.1760|
;;;339                return TRUE;
0006d4  e3a00001          MOV      r0,#1
                  |L1.1752|
0006d8  e28dd028          ADD      sp,sp,#0x28
;;;340        }
;;;341        terninalPrintf("send_ASCloader FALSE\n");
;;;342        return FALSE; 
;;;343    
;;;344    }
0006dc  e8bd8070          POP      {r4-r6,pc}
                  |L1.1760|
0006e0  e28f0e1f          ADR      r0,|L1.2264|
0006e4  ebfffffe          BL       terninalPrintf
0006e8  e3a00000          MOV      r0,#0                 ;342
0006ec  eafffff9          B        |L1.1752|
;;;345    
                          ENDP

                  bl_send_header PROC
;;;346    
;;;347    static BOOL bl_send_header(int radarIndex , BSL_HEADER bslHeader)
0006f0  e92d000f          PUSH     {r0-r3}
;;;348    {
0006f4  e92d41f0          PUSH     {r4-r8,lr}
0006f8  e24dd038          SUB      sp,sp,#0x38
0006fc  e1a07000          MOV      r7,r0
;;;349        uint8_t RadarData[22];
;;;350        int ReadDataLen;
;;;351        int WaitTime;
;;;352    	unsigned char chWrite[16];
;;;353    	unsigned char chRead[8];
;;;354    	unsigned char chksum = 0;
000700  e3a06000          MOV      r6,#0
;;;355    	unsigned int  i;
;;;356    	DWORD dwNumOfBytes = 0;
000704  e3a08000          MOV      r8,#0
;;;357    
;;;358    	chWrite[0] = 0x00;
000708  e3a00000          MOV      r0,#0
00070c  e5cd000c          STRB     r0,[sp,#0xc]
;;;359    	chWrite[1] = bslHeader.mode;
000710  e5dd0054          LDRB     r0,[sp,#0x54]
000714  e5cd000d          STRB     r0,[sp,#0xd]
;;;360    	chWrite[2] = (bslHeader.startAddress & 0xFF000000) >> 24;
000718  e59d0058          LDR      r0,[sp,#0x58]
00071c  e1a00c20          LSR      r0,r0,#24
000720  e5cd000e          STRB     r0,[sp,#0xe]
;;;361    	chWrite[3] = (bslHeader.startAddress & 0x00FF0000) >> 16;
000724  e59d0058          LDR      r0,[sp,#0x58]
000728  e20008ff          AND      r0,r0,#0xff0000
00072c  e1a00820          LSR      r0,r0,#16
000730  e5cd000f          STRB     r0,[sp,#0xf]
;;;362    	chWrite[4] = (bslHeader.startAddress & 0x0000FF00) >> 8;
000734  e59d0058          LDR      r0,[sp,#0x58]
000738  e2000cff          AND      r0,r0,#0xff00
00073c  e1a00420          LSR      r0,r0,#8
000740  e5cd0010          STRB     r0,[sp,#0x10]
;;;363    	chWrite[5] = (bslHeader.startAddress & 0x000000FF);
000744  e59d0058          LDR      r0,[sp,#0x58]
000748  e5cd0011          STRB     r0,[sp,#0x11]
;;;364    	chWrite[6] = (bslHeader.sectorSize & 0xFF000000) >> 24;
00074c  e59d005c          LDR      r0,[sp,#0x5c]
000750  e1a00c20          LSR      r0,r0,#24
000754  e5cd0012          STRB     r0,[sp,#0x12]
;;;365    	chWrite[7] = (bslHeader.sectorSize & 0x00FF0000) >> 16;
000758  e59d005c          LDR      r0,[sp,#0x5c]
00075c  e20008ff          AND      r0,r0,#0xff0000
000760  e1a00820          LSR      r0,r0,#16
000764  e5cd0013          STRB     r0,[sp,#0x13]
;;;366    	chWrite[8] = (bslHeader.sectorSize & 0x0000FF00) >> 8;
000768  e59d005c          LDR      r0,[sp,#0x5c]
00076c  e2000cff          AND      r0,r0,#0xff00
000770  e1a00420          LSR      r0,r0,#8
000774  e5cd0014          STRB     r0,[sp,#0x14]
;;;367    	chWrite[9] = (bslHeader.sectorSize & 0x000000FF);
000778  e59d005c          LDR      r0,[sp,#0x5c]
00077c  e5cd0015          STRB     r0,[sp,#0x15]
;;;368    	chWrite[10] = 0x00;
000780  e3a00000          MOV      r0,#0
000784  e5cd0016          STRB     r0,[sp,#0x16]
;;;369    	chWrite[11] = 0x00;
000788  e5cd0017          STRB     r0,[sp,#0x17]
;;;370    	chWrite[12] = 0x00;
00078c  e5cd0018          STRB     r0,[sp,#0x18]
;;;371    	chWrite[13] = 0x00;
000790  e5cd0019          STRB     r0,[sp,#0x19]
;;;372    	chWrite[14] = 0x00;
000794  e5cd001a          STRB     r0,[sp,#0x1a]
;;;373    
;;;374    	if (bslHeader.mode == 4) 
000798  e5dd0054          LDRB     r0,[sp,#0x54]
00079c  e3500004          CMP      r0,#4
0007a0  1a000001          BNE      |L1.1964|
;;;375    		chWrite[10] = bslHeader.flashModule; //flash module
0007a4  e5dd0068          LDRB     r0,[sp,#0x68]
0007a8  e5cd0016          STRB     r0,[sp,#0x16]
                  |L1.1964|
;;;376    
;;;377    
;;;378    	for (i=1; i<15; i++)
0007ac  e3a04001          MOV      r4,#1
0007b0  ea000003          B        |L1.1988|
                  |L1.1972|
;;;379    		chksum = chksum ^ chWrite[i];
0007b4  e28d000c          ADD      r0,sp,#0xc
0007b8  e7d00004          LDRB     r0,[r0,r4]
0007bc  e0266000          EOR      r6,r6,r0
0007c0  e2844001          ADD      r4,r4,#1              ;378
                  |L1.1988|
0007c4  e354000f          CMP      r4,#0xf               ;378
0007c8  3afffff9          BCC      |L1.1972|
;;;380    
;;;381    	chWrite[15] = chksum;
0007cc  e5cd601b          STRB     r6,[sp,#0x1b]
;;;382        
;;;383        if(bslHeader.mode == 3)
0007d0  e5dd0054          LDRB     r0,[sp,#0x54]
0007d4  e3500003          CMP      r0,#3
0007d8  1a000001          BNE      |L1.2020|
;;;384            WaitTime = ERASE_FLASH_SECTOR_WAITTIME;
0007dc  e59f510c          LDR      r5,|L1.2288|
0007e0  ea000000          B        |L1.2024|
                  |L1.2020|
;;;385        else
;;;386            WaitTime = OTHER_HEADER_WAITTIME;
0007e4  e3a05064          MOV      r5,#0x64
                  |L1.2024|
;;;387        
;;;388        if(newRadarResultPure(radarIndex,&chWrite[0],16,RadarData,&ReadDataLen,WaitTime) == TRUE)
0007e8  e28d001c          ADD      r0,sp,#0x1c
0007ec  e88d0021          STM      sp,{r0,r5}
0007f0  e28d3020          ADD      r3,sp,#0x20
0007f4  e3a02010          MOV      r2,#0x10
0007f8  e28d100c          ADD      r1,sp,#0xc
0007fc  e1a00007          MOV      r0,r7
000800  ebfffffe          BL       newRadarResultPure
000804  e3500001          CMP      r0,#1
000808  1a000006          BNE      |L1.2088|
;;;389        {
;;;390            if(RadarData[0] == 0x55)
00080c  e5dd0020          LDRB     r0,[sp,#0x20]
000810  e3500055          CMP      r0,#0x55
000814  1a000003          BNE      |L1.2088|
;;;391                return TRUE;
000818  e3a00001          MOV      r0,#1
                  |L1.2076|
00081c  e28dd038          ADD      sp,sp,#0x38
000820  e8bd01f0          POP      {r4-r8}
;;;392        }
;;;393        terninalPrintf("bl_send_header FALSE\n");
;;;394        return FALSE; 
;;;395        
;;;396    }
000824  e49df014          LDR      pc,[sp],#0x14
                  |L1.2088|
000828  e28f00c4          ADR      r0,|L1.2292|
00082c  ebfffffe          BL       terninalPrintf
000830  e3a00000          MOV      r0,#0                 ;394
000834  eafffff8          B        |L1.2076|
;;;397    
                          ENDP

                  bl_send_EOT PROC
;;;398    
;;;399    static BOOL bl_send_EOT(int radarIndex)
000838  e92d40f0          PUSH     {r4-r7,lr}
;;;400    {
00083c  e24dd034          SUB      sp,sp,#0x34
000840  e1a06000          MOV      r6,r0
;;;401        uint8_t RadarData[22];
;;;402        int ReadDataLen;
;;;403        
;;;404    	unsigned char chWrite[16];
;;;405    	unsigned char chRead[8];
;;;406    	unsigned char chksum = 0;
000844  e3a05000          MOV      r5,#0
;;;407    	unsigned int i;
;;;408    	DWORD dwNumOfBytes = 0;
000848  e3a07000          MOV      r7,#0
;;;409    
;;;410    	chWrite[0] = 0x02;
00084c  e3a00002          MOV      r0,#2
000850  e5cd0008          STRB     r0,[sp,#8]
;;;411    	for (i=1; i<15; i++) {
000854  e3a04001          MOV      r4,#1
000858  ea000006          B        |L1.2168|
                  |L1.2140|
;;;412    		chWrite[i] = 0x00; //not used
00085c  e3a00000          MOV      r0,#0
000860  e28d1008          ADD      r1,sp,#8
000864  e7c10004          STRB     r0,[r1,r4]
;;;413    		chksum ^= chWrite[i];
000868  e28d0008          ADD      r0,sp,#8
00086c  e7d00004          LDRB     r0,[r0,r4]
000870  e0255000          EOR      r5,r5,r0
000874  e2844001          ADD      r4,r4,#1              ;411
                  |L1.2168|
000878  e354000f          CMP      r4,#0xf               ;411
00087c  3afffff6          BCC      |L1.2140|
;;;414    	}
;;;415    
;;;416    	chWrite[15] = chksum;
000880  e5cd5017          STRB     r5,[sp,#0x17]
;;;417        
;;;418        if(newRadarResultPure(radarIndex,&chWrite[0],16,RadarData,&ReadDataLen,PROGRAM_FLASH_EOT_WAITTIME) == TRUE)
000884  e3a0000a          MOV      r0,#0xa
000888  e28d1018          ADD      r1,sp,#0x18
00088c  e58d0004          STR      r0,[sp,#4]
000890  e58d1000          STR      r1,[sp,#0]
000894  e28d301c          ADD      r3,sp,#0x1c
000898  e3a02010          MOV      r2,#0x10
00089c  e28d1008          ADD      r1,sp,#8
0008a0  e1a00006          MOV      r0,r6
0008a4  ebfffffe          BL       newRadarResultPure
0008a8  e3500001          CMP      r0,#1
0008ac  1a000005          BNE      |L1.2248|
;;;419        {
;;;420            if(RadarData[0] == 0x55)
0008b0  e5dd001c          LDRB     r0,[sp,#0x1c]
0008b4  e3500055          CMP      r0,#0x55
0008b8  1a000002          BNE      |L1.2248|
;;;421                return TRUE;
0008bc  e3a00001          MOV      r0,#1
                  |L1.2240|
0008c0  e28dd034          ADD      sp,sp,#0x34
;;;422        }
;;;423        terninalPrintf("bl_send_EOT FALSE\n");
;;;424        return FALSE; 
;;;425        
;;;426    }
0008c4  e8bd80f0          POP      {r4-r7,pc}
                  |L1.2248|
0008c8  e28f003c          ADR      r0,|L1.2316|
0008cc  ebfffffe          BL       terninalPrintf
0008d0  e3a00000          MOV      r0,#0                 ;424
0008d4  eafffff9          B        |L1.2240|
                  |L1.2264|
0008d8  73656e64          DCB      "send_ASCloader FALSE\n",0
0008dc  5f415343
0008e0  6c6f6164
0008e4  65722046
0008e8  414c5345
0008ec  0a00    
0008ee  00                DCB      0
0008ef  00                DCB      0
                  |L1.2288|
                          DCD      0x00001388
                  |L1.2292|
0008f4  626c5f73          DCB      "bl_send_header FALSE\n",0
0008f8  656e645f
0008fc  68656164
000900  65722046
000904  414c5345
000908  0a00    
00090a  00                DCB      0
00090b  00                DCB      0
                  |L1.2316|
00090c  626c5f73          DCB      "bl_send_EOT FALSE\n",0
000910  656e645f
000914  454f5420
000918  46414c53
00091c  450a00  
00091f  00                DCB      0
                          ENDP

                  bl_send_data PROC
;;;428    
;;;429    static BOOL bl_send_data(int radarIndex, BSL_DATA bslData)
000920  e92d40f7          PUSH     {r0-r2,r4-r7,lr}
;;;430    {
000924  e24dde13          SUB      sp,sp,#0x130
000928  e1a06000          MOV      r6,r0
;;;431        uint8_t RadarData[22];
;;;432        int ReadDataLen;
;;;433    	unsigned char chWrite[DATA_BYTE_TO_LOAD+8];
;;;434    	unsigned char chRead[4];
;;;435    	unsigned char chksum = 0;
00092c  e3a05000          MOV      r5,#0
;;;436    	unsigned int i;
;;;437    	DWORD dwNumOfBytes = 0;
000930  e3a07000          MOV      r7,#0
;;;438    
;;;439    	chWrite[0] = 0x01;
000934  e3a00001          MOV      r0,#1
000938  e5cd000c          STRB     r0,[sp,#0xc]
;;;440    	chWrite[1] = bslData.verification;
00093c  e5dd0138          LDRB     r0,[sp,#0x138]
000940  e5cd000d          STRB     r0,[sp,#0xd]
;;;441    
;;;442    	for (i=0; i<DATA_BYTE_TO_LOAD; i++) {
000944  e3a04000          MOV      r4,#0
000948  ea000005          B        |L1.2404|
                  |L1.2380|
;;;443    		chWrite[i+2] = bslData.cDataArray[i];		
00094c  e59d0134          LDR      r0,[sp,#0x134]
000950  e7d00004          LDRB     r0,[r0,r4]
000954  e28d100c          ADD      r1,sp,#0xc
000958  e2842002          ADD      r2,r4,#2
00095c  e7c10002          STRB     r0,[r1,r2]
000960  e2844001          ADD      r4,r4,#1              ;442
                  |L1.2404|
000964  e3540c01          CMP      r4,#0x100             ;442
000968  3afffff7          BCC      |L1.2380|
;;;444    	}
;;;445    	for (i=DATA_BYTE_TO_LOAD+2; i<DATA_BYTE_TO_LOAD+7; i++)
00096c  e59f4374          LDR      r4,|L1.3304|
000970  ea000003          B        |L1.2436|
                  |L1.2420|
;;;446    		chWrite[i] = 0x00; //not used
000974  e3a00000          MOV      r0,#0
000978  e28d100c          ADD      r1,sp,#0xc
00097c  e7c10004          STRB     r0,[r1,r4]
000980  e2844001          ADD      r4,r4,#1              ;445
                  |L1.2436|
000984  e59f0360          LDR      r0,|L1.3308|
000988  e1540000          CMP      r4,r0                 ;445
00098c  3afffff8          BCC      |L1.2420|
;;;447    
;;;448    	for (i=1; i<DATA_BYTE_TO_LOAD+7; i++)
000990  e3a04001          MOV      r4,#1
000994  ea000003          B        |L1.2472|
                  |L1.2456|
;;;449    		chksum = chksum ^ chWrite[i];
000998  e28d000c          ADD      r0,sp,#0xc
00099c  e7d00004          LDRB     r0,[r0,r4]
0009a0  e0255000          EOR      r5,r5,r0
0009a4  e2844001          ADD      r4,r4,#1              ;448
                  |L1.2472|
0009a8  e59f033c          LDR      r0,|L1.3308|
0009ac  e1540000          CMP      r4,r0                 ;448
0009b0  3afffff8          BCC      |L1.2456|
;;;450    
;;;451    	chWrite[DATA_BYTE_TO_LOAD+7] = chksum; 
0009b4  e5cd5113          STRB     r5,[sp,#0x113]
;;;452    
;;;453        if(newRadarResultPure(radarIndex,&chWrite[0],DATA_BYTE_TO_LOAD+8,RadarData,&ReadDataLen,PROGRAM_FLASH_DATA_WAITTIME) == TRUE)
0009b8  e3a0000a          MOV      r0,#0xa
0009bc  e28d1f45          ADD      r1,sp,#0x114
0009c0  e58d0004          STR      r0,[sp,#4]
0009c4  e58d1000          STR      r1,[sp,#0]
0009c8  e28d3f46          ADD      r3,sp,#0x118
0009cc  e3a02f42          MOV      r2,#0x108
0009d0  e28d100c          ADD      r1,sp,#0xc
0009d4  e1a00006          MOV      r0,r6
0009d8  ebfffffe          BL       newRadarResultPure
0009dc  e3500001          CMP      r0,#1
0009e0  1a000005          BNE      |L1.2556|
;;;454        {
;;;455            if(RadarData[0] == 0x55)
0009e4  e5dd0118          LDRB     r0,[sp,#0x118]
0009e8  e3500055          CMP      r0,#0x55
0009ec  1a000002          BNE      |L1.2556|
;;;456                return TRUE;
0009f0  e3a00001          MOV      r0,#1
                  |L1.2548|
0009f4  e28ddf4f          ADD      sp,sp,#0x13c
;;;457        }
;;;458        terninalPrintf("bl_send_data FALSE\n");
;;;459        return FALSE; 	
;;;460    }
0009f8  e8bd80f0          POP      {r4-r7,pc}
                  |L1.2556|
0009fc  e28f0fbb          ADR      r0,|L1.3312|
000a00  ebfffffe          BL       terninalPrintf
000a04  e3a00000          MOV      r0,#0                 ;459
000a08  eafffff9          B        |L1.2548|
;;;461    
                          ENDP

                  bl_erase_flash PROC
;;;462    
;;;463    static BOOL bl_erase_flash(int radarIndex, BSL_DOWNLOAD bslDownload)
000a0c  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;464    {
000a10  e24ddd43          SUB      sp,sp,#0x10c0
000a14  e1a08000          MOV      r8,r0
;;;465        FIL file;
;;;466        UINT br;  
;;;467        
;;;468        char hexLine[80];
;;;469        unsigned int hexCount, hexAddress, hexType;  
;;;470        unsigned int temp_addr = 0;
000a18  e3a01000          MOV      r1,#0
000a1c  e58d103c          STR      r1,[sp,#0x3c]
;;;471        unsigned int sectorCounter, erasedSectors;	
;;;472        unsigned int result;
;;;473        const TableEntry *sectorTable;
;;;474        const TableEntry *sectorTableStart;
;;;475        BSL_HEADER bslHeader;
;;;476    
;;;477    
;;;478        if(f_open(&file, bslDownload.hexFileName, FA_OPEN_EXISTING |FA_READ))
000a20  e28d0a01          ADD      r0,sp,#0x1000
000a24  e3a02001          MOV      r2,#1
000a28  e59010c8          LDR      r1,[r0,#0xc8]
000a2c  e28d009c          ADD      r0,sp,#0x9c
000a30  ebfffffe          BL       f_open
000a34  e3500000          CMP      r0,#0
000a38  0a000007          BEQ      |L1.2652|
;;;479        {
;;;480            terninalPrintf("SD card file open fail.\r\n");
000a3c  e28f0d0b          ADR      r0,|L1.3332|
000a40  ebfffffe          BL       terninalPrintf
;;;481            f_close(&file);
000a44  e28d009c          ADD      r0,sp,#0x9c
000a48  ebfffffe          BL       f_close
;;;482            return FALSE;
000a4c  e3a00000          MOV      r0,#0
                  |L1.2640|
000a50  e28dda01          ADD      sp,sp,#0x1000
000a54  e28dd0cc          ADD      sp,sp,#0xcc
;;;483        }
;;;484        
;;;485        sectorCounter = 0;
;;;486    
;;;487        hexAddress = 0;
;;;488        hexCount	 = 0;
;;;489        erasedSectors = 0;	
;;;490    
;;;491        if (bslDownload.pFlash == TRUE)
;;;492            sectorTableStart = &XMC4400_512_PFLASH_SectorTable[0];
;;;493    
;;;494        
;;;495        while(f_gets(hexLine, 80, &file)!=NULL) { 
;;;496            
;;;497        // Hex Count
;;;498        charToInt(&hexCount, &hexLine[1], 2);
;;;499        // Hex Address
;;;500        charToInt(&hexAddress, &hexLine[3], 4);
;;;501    
;;;502        // Hex Type
;;;503        charToInt(&hexType, &hexLine[7], 2);
;;;504    
;;;505        if (hexType == 4){
;;;506            charToInt(&temp_addr,&hexLine[9],4); // get the upper 16 bits of the 32 bit absolute address for all subsequent type 00 records
;;;507            if((temp_addr & ~0xff) == 0x00000800) // if segment belongs to cache area
;;;508                temp_addr = temp_addr + FLASH_OFFS;  //if codes in iCache
;;;509            temp_addr=(temp_addr & 0x0000FFFF)<<16;
;;;510        }
;;;511    
;;;512        if (hexType == 0) {
;;;513                //Address tag in Hexfile
;;;514                temp_addr &= 0xFFFF0000;
;;;515                temp_addr |=(hexAddress & 0x0000FFFF);
;;;516                        
;;;517                //find sector according to hexaddress
;;;518                sectorCounter = 0;
;;;519                sectorTable = sectorTableStart;
;;;520                while (sectorTable->dwStartAddr) {
;;;521                    if ((temp_addr>=sectorTable->dwStartAddr) &&
;;;522                            (temp_addr<sectorTable->dwStartAddr+sectorTable->dwSize))
;;;523                        break;
;;;524                    sectorCounter++;
;;;525                    sectorTable++;
;;;526                }
;;;527                if (sectorTable->dwStartAddr == 0) //no according sector to requested address found
;;;528                    return  FALSE;
;;;529    
;;;530                //sector already erased?
;;;531                if (!(erasedSectors & (1<<sectorCounter))) { //No
;;;532    
;;;533                    //Erase sector this sector
;;;534                    bslHeader.mode				 = 3; //Erase mode
;;;535                    bslHeader.startAddress = sectorTable->dwStartAddr;
;;;536                    bslHeader.sectorSize	 = sectorTable->dwSize;
;;;537    
;;;538                    if (bslDownload.verbose)
;;;539                        terninalPrintf("\nErasing sector 0x%08X (This may take a few seconds)... ",bslHeader.startAddress);
;;;540    
;;;541                    if (bslDownload.ser_interface == ASC_INTERFACE)
;;;542                        result = bl_send_header(radarIndex,bslHeader);
;;;543                    else
;;;544                        return FALSE;
;;;545                
;;;546                    //mark sector as erased
;;;547                    erasedSectors |= (1<<sectorCounter);
;;;548    
;;;549                    if (bslDownload.verbose)
;;;550                        terninalPrintf("done\n");
;;;551                }		
;;;552    
;;;553                //crossing a sector border?
;;;554                if (temp_addr+hexCount > sectorTable->dwStartAddr + sectorTable->dwSize){
;;;555                    sectorCounter++;
;;;556                    sectorTable++;
;;;557                }
;;;558                if (sectorTable->dwStartAddr == 0) //no according sector to requested address found
;;;559                    return  FALSE;
;;;560    
;;;561                //sector already erased?
;;;562                if (!(erasedSectors & (1<<sectorCounter))) { //No
;;;563    
;;;564                    //Erase sector this sector
;;;565                    bslHeader.mode				 = 3; //Erase mode
;;;566                    bslHeader.startAddress = sectorTable->dwStartAddr;
;;;567                    bslHeader.sectorSize	 = sectorTable->dwSize;
;;;568    
;;;569                    if (bslDownload.verbose)
;;;570                        terninalPrintf("\nErasing sector 0x%08X (This may take a few seconds)... ",bslHeader.startAddress);
;;;571    
;;;572                    if (bslDownload.ser_interface == ASC_INTERFACE)
;;;573                        result = bl_send_header(radarIndex,bslHeader);
;;;574                    else
;;;575                        return FALSE;
;;;576                
;;;577                    //mark sector as erased
;;;578                    erasedSectors |= (1<<sectorCounter);
;;;579    
;;;580                    if (bslDownload.verbose)
;;;581                        terninalPrintf("done\n");
;;;582                }
;;;583            }
;;;584        }
;;;585    
;;;586        f_close(&file);
;;;587    
;;;588        return TRUE;
;;;589    	
;;;590    }
000a58  e8bd83f0          POP      {r4-r9,pc}
                  |L1.2652|
000a5c  e3a05000          MOV      r5,#0                 ;485
000a60  e3a01000          MOV      r1,#0                 ;487
000a64  e58d1044          STR      r1,[sp,#0x44]         ;487
000a68  e58d1048          STR      r1,[sp,#0x48]         ;488
000a6c  e3a06000          MOV      r6,#0                 ;489
000a70  e28d0a01          ADD      r0,sp,#0x1000         ;491
000a74  e5d000c7          LDRB     r0,[r0,#0xc7]         ;491
000a78  e3500001          CMP      r0,#1                 ;491
000a7c  1a000000          BNE      |L1.2692|
000a80  e59f7298          LDR      r7,|L1.3360|
                  |L1.2692|
000a84  ea0000c1          B        |L1.3472|
                  |L1.2696|
000a88  e3a02002          MOV      r2,#2                 ;498
000a8c  e28d104d          ADD      r1,sp,#0x4d           ;498
000a90  e28d0048          ADD      r0,sp,#0x48           ;498
000a94  ebfffffe          BL       charToInt
000a98  e3a02004          MOV      r2,#4                 ;500
000a9c  e28d104f          ADD      r1,sp,#0x4f           ;500
000aa0  e28d0044          ADD      r0,sp,#0x44           ;500
000aa4  ebfffffe          BL       charToInt
000aa8  e3a02002          MOV      r2,#2                 ;503
000aac  e28d1053          ADD      r1,sp,#0x53           ;503
000ab0  e28d0040          ADD      r0,sp,#0x40           ;503
000ab4  ebfffffe          BL       charToInt
000ab8  e59d0040          LDR      r0,[sp,#0x40]         ;505
000abc  e3500004          CMP      r0,#4                 ;505
000ac0  1a00000d          BNE      |L1.2812|
000ac4  e3a02004          MOV      r2,#4                 ;506
000ac8  e28d1055          ADD      r1,sp,#0x55           ;506
000acc  e28d003c          ADD      r0,sp,#0x3c           ;506
000ad0  ebfffffe          BL       charToInt
000ad4  e59d003c          LDR      r0,[sp,#0x3c]         ;507
000ad8  e3c000ff          BIC      r0,r0,#0xff           ;507
000adc  e3500b02          CMP      r0,#0x800             ;507
000ae0  1a000002          BNE      |L1.2800|
000ae4  e59d003c          LDR      r0,[sp,#0x3c]         ;508
000ae8  e2801b01          ADD      r1,r0,#0x400          ;508
000aec  e58d103c          STR      r1,[sp,#0x3c]         ;508
                  |L1.2800|
000af0  e59d003c          LDR      r0,[sp,#0x3c]         ;509
000af4  e1a01800          LSL      r1,r0,#16             ;509
000af8  e58d103c          STR      r1,[sp,#0x3c]         ;509
                  |L1.2812|
000afc  e59d0040          LDR      r0,[sp,#0x40]         ;512
000b00  e3500000          CMP      r0,#0                 ;512
000b04  1a0000a1          BNE      |L1.3472|
000b08  e59d003c          LDR      r0,[sp,#0x3c]         ;514
000b0c  e1a01820          LSR      r1,r0,#16             ;514
000b10  e1a01801          LSL      r1,r1,#16             ;514
000b14  e58d103c          STR      r1,[sp,#0x3c]         ;514
000b18  e59d0044          LDR      r0,[sp,#0x44]         ;515
000b1c  e1a01800          LSL      r1,r0,#16             ;515
000b20  e1a01821          LSR      r1,r1,#16             ;515
000b24  e59d003c          LDR      r0,[sp,#0x3c]         ;515
000b28  e1811000          ORR      r1,r1,r0              ;515
000b2c  e58d103c          STR      r1,[sp,#0x3c]         ;515
000b30  e3a05000          MOV      r5,#0                 ;518
000b34  e1a04007          MOV      r4,r7                 ;519
000b38  ea00000b          B        |L1.2924|
                  |L1.2876|
000b3c  e5941000          LDR      r1,[r4,#0]            ;521
000b40  e59d003c          LDR      r0,[sp,#0x3c]         ;521
000b44  e1510000          CMP      r1,r0                 ;521
000b48  8a000005          BHI      |L1.2916|
000b4c  e8940003          LDM      r4,{r0,r1}            ;522
000b50  e0811000          ADD      r1,r1,r0              ;522
000b54  e59d003c          LDR      r0,[sp,#0x3c]         ;522
000b58  e1510000          CMP      r1,r0                 ;522
000b5c  9a000000          BLS      |L1.2916|
000b60  ea000004          B        |L1.2936|
                  |L1.2916|
000b64  e2855001          ADD      r5,r5,#1              ;524
000b68  e2844008          ADD      r4,r4,#8              ;525
                  |L1.2924|
000b6c  e5940000          LDR      r0,[r4,#0]            ;520
000b70  e3500000          CMP      r0,#0                 ;520
000b74  1afffff0          BNE      |L1.2876|
                  |L1.2936|
000b78  e1a00000          MOV      r0,r0                 ;523
000b7c  e5940000          LDR      r0,[r4,#0]            ;527
000b80  e3500000          CMP      r0,#0                 ;527
000b84  1a000001          BNE      |L1.2960|
000b88  e3a00000          MOV      r0,#0                 ;528
000b8c  eaffffaf          B        |L1.2640|
                  |L1.2960|
000b90  e3a00001          MOV      r0,#1                 ;531
000b94  e1160510          TST      r6,r0,LSL r5          ;531
000b98  1a000025          BNE      |L1.3124|
000b9c  e3a01003          MOV      r1,#3                 ;534
000ba0  e5cd1020          STRB     r1,[sp,#0x20]         ;534
000ba4  e5941000          LDR      r1,[r4,#0]            ;535
000ba8  e58d1024          STR      r1,[sp,#0x24]         ;535
000bac  e5941004          LDR      r1,[r4,#4]            ;536
000bb0  e58d1028          STR      r1,[sp,#0x28]         ;536
000bb4  e28d0a01          ADD      r0,sp,#0x1000         ;538
000bb8  e5d000c4          LDRB     r0,[r0,#0xc4]         ;538
000bbc  e3500000          CMP      r0,#0                 ;538
000bc0  0a000002          BEQ      |L1.3024|
000bc4  e28f0f56          ADR      r0,|L1.3364|
000bc8  e59d1024          LDR      r1,[sp,#0x24]         ;539
000bcc  ebfffffe          BL       terninalPrintf
                  |L1.3024|
000bd0  e28d0a01          ADD      r0,sp,#0x1000         ;541
000bd4  e5d000c6          LDRB     r0,[r0,#0xc6]         ;541
000bd8  e3500001          CMP      r0,#1                 ;541
000bdc  1a00000a          BNE      |L1.3084|
000be0  e59d0038          LDR      r0,[sp,#0x38]         ;542
000be4  e28d302c          ADD      r3,sp,#0x2c           ;542
000be8  e893000e          LDM      r3,{r1-r3}            ;542
000bec  e58d000c          STR      r0,[sp,#0xc]          ;542
000bf0  e88d000e          STM      sp,{r1-r3}            ;542
000bf4  e1a00008          MOV      r0,r8                 ;542
000bf8  e28d3020          ADD      r3,sp,#0x20           ;542
000bfc  e893000e          LDM      r3,{r1-r3}            ;542
000c00  ebfffffe          BL       bl_send_header
000c04  e1a09000          MOV      r9,r0                 ;542
000c08  ea000001          B        |L1.3092|
                  |L1.3084|
000c0c  e3a00000          MOV      r0,#0                 ;544
000c10  eaffff8e          B        |L1.2640|
                  |L1.3092|
000c14  e3a00001          MOV      r0,#1                 ;547
000c18  e1866510          ORR      r6,r6,r0,LSL r5       ;547
000c1c  e28d0a01          ADD      r0,sp,#0x1000         ;549
000c20  e5d000c4          LDRB     r0,[r0,#0xc4]         ;549
000c24  e3500000          CMP      r0,#0                 ;549
000c28  0a000001          BEQ      |L1.3124|
000c2c  e28f0f4b          ADR      r0,|L1.3424|
000c30  ebfffffe          BL       terninalPrintf
                  |L1.3124|
000c34  e8940003          LDM      r4,{r0,r1}            ;554
000c38  e0811000          ADD      r1,r1,r0              ;554
000c3c  e59d0048          LDR      r0,[sp,#0x48]         ;554
000c40  e59d203c          LDR      r2,[sp,#0x3c]         ;554
000c44  e0800002          ADD      r0,r0,r2              ;554
000c48  e1510000          CMP      r1,r0                 ;554
000c4c  2a000001          BCS      |L1.3160|
000c50  e2855001          ADD      r5,r5,#1              ;555
000c54  e2844008          ADD      r4,r4,#8              ;556
                  |L1.3160|
000c58  e5940000          LDR      r0,[r4,#0]            ;558
000c5c  e3500000          CMP      r0,#0                 ;558
000c60  1a000001          BNE      |L1.3180|
000c64  e3a00000          MOV      r0,#0                 ;559
000c68  eaffff78          B        |L1.2640|
                  |L1.3180|
000c6c  e3a00001          MOV      r0,#1                 ;562
000c70  e1160510          TST      r6,r0,LSL r5          ;562
000c74  1a000045          BNE      |L1.3472|
000c78  e3a01003          MOV      r1,#3                 ;565
000c7c  e5cd1020          STRB     r1,[sp,#0x20]         ;565
000c80  e5941000          LDR      r1,[r4,#0]            ;566
000c84  e58d1024          STR      r1,[sp,#0x24]         ;566
000c88  e5941004          LDR      r1,[r4,#4]            ;567
000c8c  e58d1028          STR      r1,[sp,#0x28]         ;567
000c90  e28d0a01          ADD      r0,sp,#0x1000         ;569
000c94  e5d000c4          LDRB     r0,[r0,#0xc4]         ;569
000c98  e3500000          CMP      r0,#0                 ;569
000c9c  0a000002          BEQ      |L1.3244|
000ca0  e28f007c          ADR      r0,|L1.3364|
000ca4  e59d1024          LDR      r1,[sp,#0x24]         ;570
000ca8  ebfffffe          BL       terninalPrintf
                  |L1.3244|
000cac  e28d0a01          ADD      r0,sp,#0x1000         ;572
000cb0  e5d000c6          LDRB     r0,[r0,#0xc6]         ;572
000cb4  e3500001          CMP      r0,#1                 ;572
000cb8  1a00002a          BNE      |L1.3432|
000cbc  e59d0038          LDR      r0,[sp,#0x38]         ;573
000cc0  e28d302c          ADD      r3,sp,#0x2c           ;573
000cc4  e893000e          LDM      r3,{r1-r3}            ;573
000cc8  e58d000c          STR      r0,[sp,#0xc]          ;573
000ccc  e88d000e          STM      sp,{r1-r3}            ;573
000cd0  e1a00008          MOV      r0,r8                 ;573
000cd4  e28d3020          ADD      r3,sp,#0x20           ;573
000cd8  e893000e          LDM      r3,{r1-r3}            ;573
000cdc  ebfffffe          BL       bl_send_header
000ce0  e1a09000          MOV      r9,r0                 ;573
000ce4  ea000021          B        |L1.3440|
                  |L1.3304|
                          DCD      0x00000102
                  |L1.3308|
                          DCD      0x00000107
                  |L1.3312|
000cf0  626c5f73          DCB      "bl_send_data FALSE\n",0
000cf4  656e645f
000cf8  64617461
000cfc  2046414c
000d00  53450a00
                  |L1.3332|
000d04  53442063          DCB      "SD card file open fail.\r\n",0
000d08  61726420
000d0c  66696c65
000d10  206f7065
000d14  6e206661
000d18  696c2e0d
000d1c  0a00    
000d1e  00                DCB      0
000d1f  00                DCB      0
                  |L1.3360|
                          DCD      XMC4400_512_PFLASH_SectorTable
                  |L1.3364|
000d24  0a457261          DCB      "\nErasing sector 0x%08X (This may take a few seconds).."
000d28  73696e67
000d2c  20736563
000d30  746f7220
000d34  30782530
000d38  38582028
000d3c  54686973
000d40  206d6179
000d44  2074616b
000d48  65206120
000d4c  66657720
000d50  7365636f
000d54  6e647329
000d58  2e2e    
000d5a  2e2000            DCB      ". ",0
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  646f6e65          DCB      "done\n",0
000d64  0a00    
000d66  00                DCB      0
000d67  00                DCB      0
                  |L1.3432|
000d68  e3a00000          MOV      r0,#0                 ;575
000d6c  eaffff37          B        |L1.2640|
                  |L1.3440|
000d70  e3a00001          MOV      r0,#1                 ;578
000d74  e1866510          ORR      r6,r6,r0,LSL r5       ;578
000d78  e28d0a01          ADD      r0,sp,#0x1000         ;580
000d7c  e5d000c4          LDRB     r0,[r0,#0xc4]         ;580
000d80  e3500000          CMP      r0,#0                 ;580
000d84  0a000001          BEQ      |L1.3472|
000d88  e24f0030          ADR      r0,|L1.3424|
000d8c  ebfffffe          BL       terninalPrintf
                  |L1.3472|
000d90  e28d209c          ADD      r2,sp,#0x9c           ;495
000d94  e3a01050          MOV      r1,#0x50              ;495
000d98  e28d004c          ADD      r0,sp,#0x4c           ;495
000d9c  ebfffffe          BL       f_gets
000da0  e3500000          CMP      r0,#0                 ;495
000da4  1affff37          BNE      |L1.2696|
000da8  e28d009c          ADD      r0,sp,#0x9c           ;586
000dac  ebfffffe          BL       f_close
000db0  e3a00001          MOV      r0,#1                 ;588
000db4  eaffff25          B        |L1.2640|
;;;591    
                          ENDP

                  bl_download_pflash PROC
;;;592    
;;;593    static BOOL bl_download_pflash(int radarIndex, BSL_DOWNLOAD bslDownload)
000db8  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;594    {
000dbc  e24ddc16          SUB      sp,sp,#0x1600
;;;595        FIL file;
;;;596        UINT br;  
;;;597        unsigned int BlockCount;
;;;598        unsigned int BlockIndex = 0;
000dc0  e3a08000          MOV      r8,#0
;;;599        unsigned int milestone;
;;;600        int TotalCostTime;
;;;601        int progress = 0;
000dc4  e3a09000          MOV      r9,#0
;;;602        uint8_t reFreshPara;
;;;603        
;;;604        //FILE *hexFile; /* Declares a file pointer */
;;;605        char hexLine[80];
;;;606        unsigned char hexArray[0x400];
;;;607        unsigned char *hexArrayPtr;
;;;608        unsigned int hexCount, oldhexCount, hexAddress, oldhexAddress, hexType;  
;;;609        unsigned int intData;
;;;610        char *hexData;
;;;611        unsigned int temp_addr, old_temp_addr;
;;;612        unsigned int page_addr;
;;;613        unsigned int offset;
;;;614        unsigned int i,j, result;
;;;615        unsigned int sectorCounter, erasedSectors;
;;;616        BOOL firstTime;
;;;617        unsigned int num_of_bytes;
;;;618        unsigned char writeBuffer[DATA_BYTE_TO_LOAD];
;;;619        BSL_HEADER bslHeader;
;;;620        BSL_DATA bslData;
;;;621        BOOL prev_address_type;
;;;622    
;;;623    
;;;624        bslDownload.pFlash = TRUE;
000dc8  e3a01001          MOV      r1,#1
000dcc  e28d0a01          ADD      r0,sp,#0x1000
000dd0  e5c01607          STRB     r1,[r0,#0x607]
;;;625        
;;;626        if(radarIndex == 0)
000dd4  e28d0a01          ADD      r0,sp,#0x1000
000dd8  e5900600          LDR      r0,[r0,#0x600]
000ddc  e3500000          CMP      r0,#0
000de0  1a000002          BNE      |L1.3568|
;;;627            reFreshPara = GUI_NEW_RADARA_OTA;
000de4  e3a00033          MOV      r0,#0x33
000de8  e58d05cc          STR      r0,[sp,#0x5cc]
000dec  ea000005          B        |L1.3592|
                  |L1.3568|
;;;628        else if(radarIndex == 1)
000df0  e28d0a01          ADD      r0,sp,#0x1000
000df4  e5900600          LDR      r0,[r0,#0x600]
000df8  e3500001          CMP      r0,#1
000dfc  1a000001          BNE      |L1.3592|
;;;629            reFreshPara = GUI_NEW_RADARB_OTA;
000e00  e3a00034          MOV      r0,#0x34
000e04  e58d05cc          STR      r0,[sp,#0x5cc]
                  |L1.3592|
;;;630        
;;;631        GuiManagerUpdateMessage(reFreshPara,progress,0);
000e08  e3a02000          MOV      r2,#0
000e0c  e1a01009          MOV      r1,r9
000e10  e59d05cc          LDR      r0,[sp,#0x5cc]
000e14  ebfffffe          BL       GuiManagerUpdateMessage
;;;632        terninalPrintf("progress = %d%%\r",progress);
000e18  e1a01009          MOV      r1,r9
000e1c  e28f0fb7          ADR      r0,|L1.4352|
000e20  ebfffffe          BL       terninalPrintf
;;;633        //if Hex file is too big, bl_erase_flash will return an error.
;;;634        if ((result=bl_erase_flash(radarIndex,bslDownload)) != TRUE)
000e24  e28d0a01          ADD      r0,sp,#0x1000
000e28  e2802c06          ADD      r2,r0,#0x600
000e2c  e8920007          LDM      r2,{r0-r2}
000e30  ebfffffe          BL       bl_erase_flash
000e34  e58d0154          STR      r0,[sp,#0x154]
000e38  e3500001          CMP      r0,#1
000e3c  0a000004          BEQ      |L1.3668|
;;;635            return result;
000e40  e59d0154          LDR      r0,[sp,#0x154]
000e44  e20000ff          AND      r0,r0,#0xff
                  |L1.3656|
000e48  e28ddb05          ADD      sp,sp,#0x1400
000e4c  e28ddf83          ADD      sp,sp,#0x20c
;;;636    
;;;637        if(f_open(&file, bslDownload.hexFileName, FA_OPEN_EXISTING |FA_READ))
;;;638        {
;;;639            terninalPrintf("SD card file open fail.\r\n");
;;;640            f_close(&file);
;;;641            return FALSE;
;;;642        }
;;;643        
;;;644        //terninalPrintf("file.fsize = %d\r\n",file.fsize);
;;;645        BlockCount = file.fsize * 32 / 45  / 2  /  256 ;
;;;646        //terninalPrintf("BlockCount = %d\r\n",BlockCount);
;;;647        TotalCostTime = ERASE_FLASH_SECTOR_WAITTIME*2 + PROGRAM_FLASH_DATA_WAITTIME*BlockCount;
;;;648        //terninalPrintf("TotalCostTime = %d\r\n",TotalCostTime);
;;;649        
;;;650        milestone = BlockCount/8 ;
;;;651        
;;;652        /* Open the existing file specified for reading */
;;;653        /* Note the use of \\ for path separators in text strings */
;;;654        /*hexFile = fopen(bslDownload.hexFileName, "rt");
;;;655        if (hexFile == NULL)      
;;;656        return  ERROR_HEXFILE; 
;;;657        */
;;;658        num_of_bytes=0;
;;;659        sectorCounter = 0;
;;;660    
;;;661        hexArrayPtr = hexArray;
;;;662    
;;;663        hexAddress = 0;
;;;664        hexCount	 = 0;
;;;665        firstTime = TRUE;
;;;666        erasedSectors = 0;
;;;667        bslData.cDataArray = writeBuffer;
;;;668        bslData.verification = 0x01; //enable verification
;;;669        prev_address_type = FALSE;
;;;670    
;;;671        old_temp_addr = 0;
;;;672        temp_addr	  = 0;
;;;673    
;;;674        while(f_gets(hexLine, 80, &file)!=NULL) { 
;;;675            
;;;676            oldhexCount = hexCount;
;;;677            oldhexAddress = hexAddress;
;;;678    
;;;679            // Hex Count
;;;680            charToInt(&hexCount, &hexLine[1], 2);
;;;681            // Hex Address
;;;682            charToInt(&hexAddress, &hexLine[3], 4);
;;;683    
;;;684            // Hex Type
;;;685            charToInt(&hexType, &hexLine[7], 2);
;;;686            hexData = &hexLine[9];
;;;687    
;;;688                offset = 0;
;;;689                
;;;690            if (hexType == 4){			
;;;691                charToInt(&temp_addr,&hexLine[9],4);
;;;692                if(temp_addr == 0x00000800)
;;;693                     temp_addr = temp_addr + FLASH_OFFS;
;;;694                temp_addr=(temp_addr & 0x0000FFFF)<<16;
;;;695                prev_address_type = TRUE;
;;;696            }
;;;697    
;;;698            if (hexType == 0) {			
;;;699                    //Address tag in Hexfile
;;;700                    temp_addr &= 0xFFFF0000;
;;;701                    temp_addr |= (hexAddress & 0x0000FFFF);
;;;702    
;;;703                    
;;;704                    //Address discontinious?
;;;705                    if (temp_addr - old_temp_addr >= 0x200) { 
;;;706    
;;;707                        if (firstTime==FALSE) {
;;;708    
;;;709                            if (prev_address_type == FALSE) {
;;;710                                        
;;;711                                //send remaining data
;;;712                                for (j=0; j<num_of_bytes; j++)
;;;713                                    writeBuffer[j] = hexArray[j];
;;;714    
;;;715                                for (j=num_of_bytes; j<DATA_BYTE_TO_LOAD; j++)
;;;716                                    writeBuffer[j] = 0x00;
;;;717                                
;;;718    
;;;719                                if((BlockIndex % milestone) == 0)
;;;720                                {
;;;721                                    //sysprintf("80 * BlockIndex / BlockCount = %d\r\n",80 * BlockIndex / BlockCount);
;;;722                                    progress = 80 * BlockIndex / BlockCount +20;
;;;723                                    //progress = progress +20;
;;;724                                    if(progress > 100)
;;;725                                        progress = 100;
;;;726                                    GuiManagerUpdateMessage(reFreshPara,progress,0);
;;;727                                    terninalPrintf("progress = %d%%\r",progress);
;;;728                                }
;;;729                                BlockIndex++;
;;;730                                
;;;731                                if (bslDownload.verbose)
;;;732                                    terninalPrintf("\nProgramming data block to address 0x%08X... ",page_addr);
;;;733                                
;;;734                                if (bslDownload.ser_interface == ASC_INTERFACE)
;;;735                                    result = bl_send_data(radarIndex,bslData);
;;;736                                else
;;;737                                    return FALSE;
;;;738    
;;;739                                page_addr += DATA_BYTE_TO_LOAD;
;;;740    
;;;741                                if (bslDownload.verbose)
;;;742                                    terninalPrintf("done");
;;;743                            }
;;;744    
;;;745                            //send EOT frame
;;;746                            if (bslDownload.ser_interface == ASC_INTERFACE)
;;;747                                result = bl_send_EOT(radarIndex);
;;;748                            else
;;;749                                return FALSE;
;;;750                        }
;;;751                        
;;;752                        //check if address is 256-byte aligned
;;;753                        offset=temp_addr & 0xFF;
;;;754    
;;;755                        if (offset) {
;;;756                            temp_addr -= offset;
;;;757                        }
;;;758                        
;;;759                        //send program header
;;;760                        bslHeader.mode		   = 0;
;;;761                        bslHeader.startAddress = temp_addr;
;;;762    
;;;763                        if (bslDownload.ser_interface == ASC_INTERFACE)
;;;764                            result = bl_send_header(radarIndex,bslHeader);
;;;765                        else
;;;766                            return FALSE;
;;;767    
;;;768                        hexArrayPtr  = &hexArray[0];
;;;769                        num_of_bytes = 0;
;;;770    
;;;771                        if (offset) {
;;;772                            num_of_bytes = offset;
;;;773                            for (j=0; j<offset; j++)
;;;774                                *hexArrayPtr++ = 0x00;
;;;775                        }
;;;776    
;;;777                        page_addr	= temp_addr;
;;;778                        old_temp_addr = temp_addr;
;;;779    
;;;780    
;;;781                        oldhexAddress = hexAddress;
;;;782                        oldhexCount	  = hexCount;
;;;783                        firstTime = FALSE;
;;;784                        
;;;785                    } 
;;;786    
;;;787                    if (prev_address_type == TRUE) {
;;;788                        oldhexCount = hexCount;
;;;789                        oldhexAddress = hexAddress;
;;;790                        prev_address_type = FALSE;
;;;791                    }
;;;792                    
;;;793                    //fill the page
;;;794                    for (i=oldhexAddress + oldhexCount; i<hexAddress; i++) {
;;;795                        *hexArrayPtr++ = 0x00;
;;;796                        num_of_bytes ++;
;;;797                    }
;;;798    
;;;799                    for(i=0; i < hexCount; i++) {
;;;800    
;;;801                        charToInt(&intData, &hexData[(2*i)], 2); 
;;;802                        
;;;803                        *hexArrayPtr++ = intData & 0xFF;
;;;804                    }
;;;805    
;;;806                    num_of_bytes+=hexCount;
;;;807    
;;;808                    //page full?
;;;809                    if (num_of_bytes >= DATA_BYTE_TO_LOAD) {
;;;810    
;;;811                        //send data block
;;;812                        for (j=0; j<DATA_BYTE_TO_LOAD-offset; j++)
;;;813                            writeBuffer[j] = hexArray[j];
;;;814    
;;;815                        if((BlockIndex % milestone) == 0)
;;;816                        {
;;;817                            //terninalPrintf("80 * BlockIndex / BlockCount = %d\r\n",80 * BlockIndex / BlockCount);
;;;818                            progress = 80 * BlockIndex / BlockCount +20;
;;;819                            //progress = progress +20;
;;;820                            if(progress > 100)
;;;821                                progress = 100;
;;;822                            GuiManagerUpdateMessage(reFreshPara,progress,0);
;;;823                            terninalPrintf("progress = %d%%\r",progress);
;;;824                        }
;;;825                        BlockIndex++;
;;;826                        
;;;827                        if (bslDownload.verbose)
;;;828                            terninalPrintf("\nProgramming data block to address 0x%08X... ",page_addr);
;;;829    
;;;830                        if (bslDownload.ser_interface == ASC_INTERFACE)
;;;831                            result = bl_send_data(radarIndex,bslData);
;;;832                        else
;;;833                            return FALSE;
;;;834    
;;;835    
;;;836                        old_temp_addr = page_addr;
;;;837                        page_addr += DATA_BYTE_TO_LOAD;
;;;838                        
;;;839    
;;;840                        if (bslDownload.verbose)
;;;841                            terninalPrintf("done");
;;;842    
;;;843                        //reset number of bytes 
;;;844                        num_of_bytes -= DATA_BYTE_TO_LOAD;
;;;845    
;;;846                        //reset array pointer
;;;847                        hexArrayPtr = &hexArray[0];
;;;848    
;;;849                        //fill beginning of array with remaining bytes
;;;850                        for (i=0; i<num_of_bytes; i++)
;;;851                            *hexArrayPtr++ = hexArray[i+DATA_BYTE_TO_LOAD];
;;;852    
;;;853                    }						
;;;854    
;;;855                } //end of if hexType == 0
;;;856    
;;;857        } //end of while
;;;858    
;;;859        if (num_of_bytes > 0) {
;;;860    
;;;861            //send data block
;;;862            for (j=0; j<num_of_bytes; j++)
;;;863                writeBuffer[j] = hexArray[j];
;;;864    
;;;865            for (j=num_of_bytes; j<DATA_BYTE_TO_LOAD; j++)
;;;866                writeBuffer[j] = 0x00;
;;;867            
;;;868            if((BlockIndex % milestone) == 0)
;;;869            {
;;;870                //sysprintf("80 * BlockIndex / BlockCount = %d\r\n",80 * BlockIndex / BlockCount);
;;;871                progress = 80 * BlockIndex / BlockCount +20;
;;;872                //progress = progress +20;
;;;873                if(progress > 100)
;;;874                    progress = 100;
;;;875                GuiManagerUpdateMessage(reFreshPara,progress,0);
;;;876                terninalPrintf("progress = %d%%\r",progress);
;;;877            }
;;;878            BlockIndex++;       
;;;879            
;;;880            if (bslDownload.verbose)
;;;881                terninalPrintf("\nProgramming data block to address 0x%08X... ",page_addr);
;;;882    
;;;883            if (bslDownload.ser_interface == ASC_INTERFACE)
;;;884                result = bl_send_data(radarIndex,bslData);
;;;885            else
;;;886                return FALSE;
;;;887    
;;;888            page_addr += DATA_BYTE_TO_LOAD;
;;;889    
;;;890            if (bslDownload.verbose)
;;;891                terninalPrintf("done");
;;;892        }
;;;893    
;;;894        //send EOT frame
;;;895        if (bslDownload.ser_interface == ASC_INTERFACE)
;;;896            result = bl_send_EOT(radarIndex);
;;;897        else
;;;898            return FALSE;
;;;899    
;;;900    
;;;901        f_close(&file);
;;;902    
;;;903        if (bslDownload.verbose)
;;;904                terninalPrintf("\n");
;;;905    
;;;906        return TRUE;
;;;907                
;;;908    }
000e50  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3668|
000e54  e28d0a01          ADD      r0,sp,#0x1000         ;637
000e58  e3a02001          MOV      r2,#1                 ;637
000e5c  e5901608          LDR      r1,[r0,#0x608]        ;637
000e60  e28d0b01          ADD      r0,sp,#0x400          ;637
000e64  e2800f77          ADD      r0,r0,#0x1dc          ;637
000e68  ebfffffe          BL       f_open
000e6c  e3500000          CMP      r0,#0                 ;637
000e70  0a000006          BEQ      |L1.3728|
000e74  e24f0f5e          ADR      r0,|L1.3332|
000e78  ebfffffe          BL       terninalPrintf
000e7c  e28d0b01          ADD      r0,sp,#0x400          ;640
000e80  e2800f77          ADD      r0,r0,#0x1dc          ;640
000e84  ebfffffe          BL       f_close
000e88  e3a00000          MOV      r0,#0                 ;641
000e8c  eaffffed          B        |L1.3656|
                  |L1.3728|
000e90  e59d15e8          LDR      r1,[sp,#0x5e8]        ;645
000e94  e1a00281          LSL      r0,r1,#5              ;645
000e98  e3a0102d          MOV      r1,#0x2d              ;645
000e9c  ebfffffe          BL       __aeabi_uidivmod
000ea0  e1a004a0          LSR      r0,r0,#9              ;645
000ea4  e58d05d8          STR      r0,[sp,#0x5d8]        ;645
000ea8  e59d05d8          LDR      r0,[sp,#0x5d8]        ;647
000eac  e0800100          ADD      r0,r0,r0,LSL #2       ;647
000eb0  e1a00080          LSL      r0,r0,#1              ;647
000eb4  e2800a02          ADD      r0,r0,#0x2000         ;647
000eb8  e2800e71          ADD      r0,r0,#0x710          ;647
000ebc  e58d05d0          STR      r0,[sp,#0x5d0]        ;647
000ec0  e59d05d8          LDR      r0,[sp,#0x5d8]        ;650
000ec4  e1a001a0          LSR      r0,r0,#3              ;650
000ec8  e58d05d4          STR      r0,[sp,#0x5d4]        ;650
000ecc  e3a05000          MOV      r5,#0                 ;658
000ed0  e3a00000          MOV      r0,#0                 ;659
000ed4  e58d0150          STR      r0,[sp,#0x150]        ;659
000ed8  e28d6f5f          ADD      r6,sp,#0x17c          ;661
000edc  e58d0170          STR      r0,[sp,#0x170]        ;663
000ee0  e58d0178          STR      r0,[sp,#0x178]        ;664
000ee4  e3a00001          MOV      r0,#1                 ;665
000ee8  e58d0148          STR      r0,[sp,#0x148]        ;665
000eec  e3a00000          MOV      r0,#0                 ;666
000ef0  e58d014c          STR      r0,[sp,#0x14c]        ;666
000ef4  e28d0048          ADD      r0,sp,#0x48           ;667
000ef8  e58d0024          STR      r0,[sp,#0x24]         ;667
000efc  e3a00001          MOV      r0,#1                 ;668
000f00  e5cd0028          STRB     r0,[sp,#0x28]         ;668
000f04  e3a00000          MOV      r0,#0                 ;669
000f08  e58d0020          STR      r0,[sp,#0x20]         ;669
000f0c  e58d0158          STR      r0,[sp,#0x158]        ;671
000f10  e58d015c          STR      r0,[sp,#0x15c]        ;672
000f14  ea00013b          B        |L1.5128|
                  |L1.3864|
000f18  e59d1178          LDR      r1,[sp,#0x178]        ;676
000f1c  e58d1174          STR      r1,[sp,#0x174]        ;676
000f20  e59d1170          LDR      r1,[sp,#0x170]        ;677
000f24  e58d116c          STR      r1,[sp,#0x16c]        ;677
000f28  e3a02002          MOV      r2,#2                 ;680
000f2c  e28d1c05          ADD      r1,sp,#0x500          ;680
000f30  e281107d          ADD      r1,r1,#0x7d           ;680
000f34  e28d0f5e          ADD      r0,sp,#0x178          ;680
000f38  ebfffffe          BL       charToInt
000f3c  e3a02004          MOV      r2,#4                 ;682
000f40  e28d1c05          ADD      r1,sp,#0x500          ;682
000f44  e281107f          ADD      r1,r1,#0x7f           ;682
000f48  e28d0e17          ADD      r0,sp,#0x170          ;682
000f4c  ebfffffe          BL       charToInt
000f50  e3a02002          MOV      r2,#2                 ;685
000f54  e28d1c05          ADD      r1,sp,#0x500          ;685
000f58  e2811083          ADD      r1,r1,#0x83           ;685
000f5c  e28d0f5a          ADD      r0,sp,#0x168          ;685
000f60  ebfffffe          BL       charToInt
000f64  e28d1c05          ADD      r1,sp,#0x500          ;686
000f68  e2811085          ADD      r1,r1,#0x85           ;686
000f6c  e58d1160          STR      r1,[sp,#0x160]        ;686
000f70  e3a0a000          MOV      r10,#0                ;688
000f74  e59d0168          LDR      r0,[sp,#0x168]        ;690
000f78  e3500004          CMP      r0,#4                 ;690
000f7c  1a00000f          BNE      |L1.4032|
000f80  e3a02004          MOV      r2,#4                 ;691
000f84  e28d1c05          ADD      r1,sp,#0x500          ;691
000f88  e2811085          ADD      r1,r1,#0x85           ;691
000f8c  e28d0f57          ADD      r0,sp,#0x15c          ;691
000f90  ebfffffe          BL       charToInt
000f94  e59d015c          LDR      r0,[sp,#0x15c]        ;692
000f98  e3500b02          CMP      r0,#0x800             ;692
000f9c  1a000002          BNE      |L1.4012|
000fa0  e59d015c          LDR      r0,[sp,#0x15c]        ;693
000fa4  e2801b01          ADD      r1,r0,#0x400          ;693
000fa8  e58d115c          STR      r1,[sp,#0x15c]        ;693
                  |L1.4012|
000fac  e59d015c          LDR      r0,[sp,#0x15c]        ;694
000fb0  e1a01800          LSL      r1,r0,#16             ;694
000fb4  e58d115c          STR      r1,[sp,#0x15c]        ;694
000fb8  e3a01001          MOV      r1,#1                 ;695
000fbc  e58d1020          STR      r1,[sp,#0x20]         ;695
                  |L1.4032|
000fc0  e59d0168          LDR      r0,[sp,#0x168]        ;698
000fc4  e3500000          CMP      r0,#0                 ;698
000fc8  1a00010e          BNE      |L1.5128|
000fcc  e59d015c          LDR      r0,[sp,#0x15c]        ;700
000fd0  e1a01820          LSR      r1,r0,#16             ;700
000fd4  e1a01801          LSL      r1,r1,#16             ;700
000fd8  e58d115c          STR      r1,[sp,#0x15c]        ;700
000fdc  e59d0170          LDR      r0,[sp,#0x170]        ;701
000fe0  e1a01800          LSL      r1,r0,#16             ;701
000fe4  e1a01821          LSR      r1,r1,#16             ;701
000fe8  e59d015c          LDR      r0,[sp,#0x15c]        ;701
000fec  e1811000          ORR      r1,r1,r0              ;701
000ff0  e58d115c          STR      r1,[sp,#0x15c]        ;701
000ff4  e59d0158          LDR      r0,[sp,#0x158]        ;705
000ff8  e59d115c          LDR      r1,[sp,#0x15c]        ;705
000ffc  e0410000          SUB      r0,r1,r0              ;705
001000  e3500c02          CMP      r0,#0x200             ;705
001004  3a000094          BCC      |L1.4700|
001008  e59d0148          LDR      r0,[sp,#0x148]        ;707
00100c  e3500000          CMP      r0,#0                 ;707
001010  1a00005f          BNE      |L1.4500|
001014  e59d0020          LDR      r0,[sp,#0x20]         ;709
001018  e3500000          CMP      r0,#0                 ;709
00101c  1a000051          BNE      |L1.4456|
001020  e3a04000          MOV      r4,#0                 ;712
001024  ea000004          B        |L1.4156|
                  |L1.4136|
001028  e28d0f5f          ADD      r0,sp,#0x17c          ;713
00102c  e7d00004          LDRB     r0,[r0,r4]            ;713
001030  e28d1048          ADD      r1,sp,#0x48           ;713
001034  e7c10004          STRB     r0,[r1,r4]            ;713
001038  e2844001          ADD      r4,r4,#1              ;712
                  |L1.4156|
00103c  e1540005          CMP      r4,r5                 ;712
001040  3afffff8          BCC      |L1.4136|
001044  e1a04005          MOV      r4,r5                 ;715
001048  ea000003          B        |L1.4188|
                  |L1.4172|
00104c  e3a00000          MOV      r0,#0                 ;716
001050  e28d1048          ADD      r1,sp,#0x48           ;716
001054  e7c10004          STRB     r0,[r1,r4]            ;716
001058  e2844001          ADD      r4,r4,#1              ;715
                  |L1.4188|
00105c  e3540c01          CMP      r4,#0x100             ;715
001060  3afffff9          BCC      |L1.4172|
001064  e1a00008          MOV      r0,r8                 ;719
001068  e59d15d4          LDR      r1,[sp,#0x5d4]        ;719
00106c  ebfffffe          BL       __aeabi_uidivmod
001070  e3510000          CMP      r1,#0                 ;719
001074  1a00000e          BNE      |L1.4276|
001078  e0881108          ADD      r1,r8,r8,LSL #2       ;722
00107c  e1a00201          LSL      r0,r1,#4              ;722
001080  e59d15d8          LDR      r1,[sp,#0x5d8]        ;722
001084  ebfffffe          BL       __aeabi_uidivmod
001088  e2809014          ADD      r9,r0,#0x14           ;722
00108c  e3590064          CMP      r9,#0x64              ;724
001090  da000000          BLE      |L1.4248|
001094  e3a09064          MOV      r9,#0x64              ;725
                  |L1.4248|
001098  e3a02000          MOV      r2,#0                 ;726
00109c  e1a01009          MOV      r1,r9                 ;726
0010a0  e59d05cc          LDR      r0,[sp,#0x5cc]        ;726
0010a4  ebfffffe          BL       GuiManagerUpdateMessage
0010a8  e1a01009          MOV      r1,r9                 ;727
0010ac  e28f004c          ADR      r0,|L1.4352|
0010b0  ebfffffe          BL       terninalPrintf
                  |L1.4276|
0010b4  e2888001          ADD      r8,r8,#1              ;729
0010b8  e28d0a01          ADD      r0,sp,#0x1000         ;731
0010bc  e5d00604          LDRB     r0,[r0,#0x604]        ;731
0010c0  e3500000          CMP      r0,#0                 ;731
0010c4  0a000002          BEQ      |L1.4308|
0010c8  e1a0100b          MOV      r1,r11                ;732
0010cc  e28f0040          ADR      r0,|L1.4372|
0010d0  ebfffffe          BL       terninalPrintf
                  |L1.4308|
0010d4  e28d0a01          ADD      r0,sp,#0x1000         ;734
0010d8  e5d00606          LDRB     r0,[r0,#0x606]        ;734
0010dc  e3500001          CMP      r0,#1                 ;734
0010e0  1a000017          BNE      |L1.4420|
0010e4  e59d1024          LDR      r1,[sp,#0x24]         ;735
0010e8  e59d2028          LDR      r2,[sp,#0x28]         ;735
0010ec  e28d0a01          ADD      r0,sp,#0x1000         ;735
0010f0  e5900600          LDR      r0,[r0,#0x600]        ;735
0010f4  ebfffffe          BL       bl_send_data
0010f8  e58d0154          STR      r0,[sp,#0x154]        ;735
0010fc  ea000012          B        |L1.4428|
                  |L1.4352|
001100  70726f67          DCB      "progress = %d%%\r",0
001104  72657373
001108  203d2025
00110c  6425250d
001110  00      
001111  00                DCB      0
001112  00                DCB      0
001113  00                DCB      0
                  |L1.4372|
001114  0a50726f          DCB      "\nProgramming data block to address 0x%08X... ",0
001118  6772616d
00111c  6d696e67
001120  20646174
001124  6120626c
001128  6f636b20
00112c  746f2061
001130  64647265
001134  73732030
001138  78253038
00113c  582e2e2e
001140  2000    
001142  00                DCB      0
001143  00                DCB      0
                  |L1.4420|
001144  e3a00000          MOV      r0,#0                 ;737
001148  eaffff3e          B        |L1.3656|
                  |L1.4428|
00114c  e28bbc01          ADD      r11,r11,#0x100        ;739
001150  e28d0a01          ADD      r0,sp,#0x1000         ;741
001154  e5d00604          LDRB     r0,[r0,#0x604]        ;741
001158  e3500000          CMP      r0,#0                 ;741
00115c  0a000001          BEQ      |L1.4456|
001160  e28f0e2d          ADR      r0,|L1.5176|
001164  ebfffffe          BL       terninalPrintf
                  |L1.4456|
001168  e28d0a01          ADD      r0,sp,#0x1000         ;746
00116c  e5d00606          LDRB     r0,[r0,#0x606]        ;746
001170  e3500001          CMP      r0,#1                 ;746
001174  1a000004          BNE      |L1.4492|
001178  e28d1a01          ADD      r1,sp,#0x1000         ;747
00117c  e5910600          LDR      r0,[r1,#0x600]        ;747
001180  ebfffffe          BL       bl_send_EOT
001184  e58d0154          STR      r0,[sp,#0x154]        ;747
001188  ea000001          B        |L1.4500|
                  |L1.4492|
00118c  e3a00000          MOV      r0,#0                 ;749
001190  eaffff2c          B        |L1.3656|
                  |L1.4500|
001194  e59d015c          LDR      r0,[sp,#0x15c]        ;753
001198  e200a0ff          AND      r10,r0,#0xff          ;753
00119c  e35a0000          CMP      r10,#0                ;755
0011a0  0a000002          BEQ      |L1.4528|
0011a4  e59d015c          LDR      r0,[sp,#0x15c]        ;756
0011a8  e040100a          SUB      r1,r0,r10             ;756
0011ac  e58d115c          STR      r1,[sp,#0x15c]        ;756
                  |L1.4528|
0011b0  e3a01000          MOV      r1,#0                 ;760
0011b4  e5cd102c          STRB     r1,[sp,#0x2c]         ;760
0011b8  e59d115c          LDR      r1,[sp,#0x15c]        ;761
0011bc  e58d1030          STR      r1,[sp,#0x30]         ;761
0011c0  e28d0a01          ADD      r0,sp,#0x1000         ;763
0011c4  e5d00606          LDRB     r0,[r0,#0x606]        ;763
0011c8  e3500001          CMP      r0,#1                 ;763
0011cc  1a00000b          BNE      |L1.4608|
0011d0  e59d0044          LDR      r0,[sp,#0x44]         ;764
0011d4  e28d3038          ADD      r3,sp,#0x38           ;764
0011d8  e893000e          LDM      r3,{r1-r3}            ;764
0011dc  e58d000c          STR      r0,[sp,#0xc]          ;764
0011e0  e88d000e          STM      sp,{r1-r3}            ;764
0011e4  e28d302c          ADD      r3,sp,#0x2c           ;764
0011e8  e893000e          LDM      r3,{r1-r3}            ;764
0011ec  e28d0a01          ADD      r0,sp,#0x1000         ;764
0011f0  e5900600          LDR      r0,[r0,#0x600]        ;764
0011f4  ebfffffe          BL       bl_send_header
0011f8  e58d0154          STR      r0,[sp,#0x154]        ;764
0011fc  ea000001          B        |L1.4616|
                  |L1.4608|
001200  e3a00000          MOV      r0,#0                 ;766
001204  eaffff0f          B        |L1.3656|
                  |L1.4616|
001208  e28d6f5f          ADD      r6,sp,#0x17c          ;768
00120c  e3a05000          MOV      r5,#0                 ;769
001210  e35a0000          CMP      r10,#0                ;771
001214  0a000007          BEQ      |L1.4664|
001218  e1a0500a          MOV      r5,r10                ;772
00121c  e3a04000          MOV      r4,#0                 ;773
001220  ea000002          B        |L1.4656|
                  |L1.4644|
001224  e3a00000          MOV      r0,#0                 ;774
001228  e4c60001          STRB     r0,[r6],#1            ;774
00122c  e2844001          ADD      r4,r4,#1              ;773
                  |L1.4656|
001230  e154000a          CMP      r4,r10                ;773
001234  3afffffa          BCC      |L1.4644|
                  |L1.4664|
001238  e59db15c          LDR      r11,[sp,#0x15c]       ;777
00123c  e59d115c          LDR      r1,[sp,#0x15c]        ;778
001240  e58d1158          STR      r1,[sp,#0x158]        ;778
001244  e59d1170          LDR      r1,[sp,#0x170]        ;781
001248  e58d116c          STR      r1,[sp,#0x16c]        ;781
00124c  e59d1178          LDR      r1,[sp,#0x178]        ;782
001250  e58d1174          STR      r1,[sp,#0x174]        ;782
001254  e3a01000          MOV      r1,#0                 ;783
001258  e58d1148          STR      r1,[sp,#0x148]        ;783
                  |L1.4700|
00125c  e59d0020          LDR      r0,[sp,#0x20]         ;787
001260  e3500001          CMP      r0,#1                 ;787
001264  1a000005          BNE      |L1.4736|
001268  e59d1178          LDR      r1,[sp,#0x178]        ;788
00126c  e58d1174          STR      r1,[sp,#0x174]        ;788
001270  e59d1170          LDR      r1,[sp,#0x170]        ;789
001274  e58d116c          STR      r1,[sp,#0x16c]        ;789
001278  e3a01000          MOV      r1,#0                 ;790
00127c  e58d1020          STR      r1,[sp,#0x20]         ;790
                  |L1.4736|
001280  e59d0174          LDR      r0,[sp,#0x174]        ;794
001284  e59d116c          LDR      r1,[sp,#0x16c]        ;794
001288  e0817000          ADD      r7,r1,r0              ;794
00128c  ea000003          B        |L1.4768|
                  |L1.4752|
001290  e3a00000          MOV      r0,#0                 ;795
001294  e4c60001          STRB     r0,[r6],#1            ;795
001298  e2855001          ADD      r5,r5,#1              ;796
00129c  e2877001          ADD      r7,r7,#1              ;794
                  |L1.4768|
0012a0  e59d0170          LDR      r0,[sp,#0x170]        ;794
0012a4  e1570000          CMP      r7,r0                 ;794
0012a8  3afffff8          BCC      |L1.4752|
0012ac  e3a07000          MOV      r7,#0                 ;799
0012b0  ea000007          B        |L1.4820|
                  |L1.4788|
0012b4  e3a02002          MOV      r2,#2                 ;801
0012b8  e59d0160          LDR      r0,[sp,#0x160]        ;801
0012bc  e0210792          MLA      r1,r2,r7,r0           ;801
0012c0  e28d0f59          ADD      r0,sp,#0x164          ;801
0012c4  ebfffffe          BL       charToInt
0012c8  e59d0164          LDR      r0,[sp,#0x164]        ;803
0012cc  e4c60001          STRB     r0,[r6],#1            ;803
0012d0  e2877001          ADD      r7,r7,#1              ;799
                  |L1.4820|
0012d4  e59d0178          LDR      r0,[sp,#0x178]        ;799
0012d8  e1570000          CMP      r7,r0                 ;799
0012dc  3afffff4          BCC      |L1.4788|
0012e0  e59d0178          LDR      r0,[sp,#0x178]        ;806
0012e4  e0855000          ADD      r5,r5,r0              ;806
0012e8  e3550c01          CMP      r5,#0x100             ;809
0012ec  3a000045          BCC      |L1.5128|
0012f0  e3a04000          MOV      r4,#0                 ;812
0012f4  ea000004          B        |L1.4876|
                  |L1.4856|
0012f8  e28d0f5f          ADD      r0,sp,#0x17c          ;813
0012fc  e7d00004          LDRB     r0,[r0,r4]            ;813
001300  e28d1048          ADD      r1,sp,#0x48           ;813
001304  e7c10004          STRB     r0,[r1,r4]            ;813
001308  e2844001          ADD      r4,r4,#1              ;812
                  |L1.4876|
00130c  e26a0c01          RSB      r0,r10,#0x100         ;812
001310  e1500004          CMP      r0,r4                 ;812
001314  8afffff7          BHI      |L1.4856|
001318  e1a00008          MOV      r0,r8                 ;815
00131c  e59d15d4          LDR      r1,[sp,#0x5d4]        ;815
001320  ebfffffe          BL       __aeabi_uidivmod
001324  e3510000          CMP      r1,#0                 ;815
001328  1a00000e          BNE      |L1.4968|
00132c  e0881108          ADD      r1,r8,r8,LSL #2       ;818
001330  e1a00201          LSL      r0,r1,#4              ;818
001334  e59d15d8          LDR      r1,[sp,#0x5d8]        ;818
001338  ebfffffe          BL       __aeabi_uidivmod
00133c  e2809014          ADD      r9,r0,#0x14           ;818
001340  e3590064          CMP      r9,#0x64              ;820
001344  da000000          BLE      |L1.4940|
001348  e3a09064          MOV      r9,#0x64              ;821
                  |L1.4940|
00134c  e3a02000          MOV      r2,#0                 ;822
001350  e1a01009          MOV      r1,r9                 ;822
001354  e59d05cc          LDR      r0,[sp,#0x5cc]        ;822
001358  ebfffffe          BL       GuiManagerUpdateMessage
00135c  e1a01009          MOV      r1,r9                 ;823
001360  e24f0f9a          ADR      r0,|L1.4352|
001364  ebfffffe          BL       terninalPrintf
                  |L1.4968|
001368  e2888001          ADD      r8,r8,#1              ;825
00136c  e28d0a01          ADD      r0,sp,#0x1000         ;827
001370  e5d00604          LDRB     r0,[r0,#0x604]        ;827
001374  e3500000          CMP      r0,#0                 ;827
001378  0a000002          BEQ      |L1.5000|
00137c  e1a0100b          MOV      r1,r11                ;828
001380  e24f0f9d          ADR      r0,|L1.4372|
001384  ebfffffe          BL       terninalPrintf
                  |L1.5000|
001388  e28d0a01          ADD      r0,sp,#0x1000         ;830
00138c  e5d00606          LDRB     r0,[r0,#0x606]        ;830
001390  e3500001          CMP      r0,#1                 ;830
001394  1a000006          BNE      |L1.5044|
001398  e59d1024          LDR      r1,[sp,#0x24]         ;831
00139c  e59d2028          LDR      r2,[sp,#0x28]         ;831
0013a0  e28d0a01          ADD      r0,sp,#0x1000         ;831
0013a4  e5900600          LDR      r0,[r0,#0x600]        ;831
0013a8  ebfffffe          BL       bl_send_data
0013ac  e58d0154          STR      r0,[sp,#0x154]        ;831
0013b0  ea000001          B        |L1.5052|
                  |L1.5044|
0013b4  e3a00000          MOV      r0,#0                 ;833
0013b8  eafffea2          B        |L1.3656|
                  |L1.5052|
0013bc  e58db158          STR      r11,[sp,#0x158]       ;836
0013c0  e28bbc01          ADD      r11,r11,#0x100        ;837
0013c4  e28d0a01          ADD      r0,sp,#0x1000         ;840
0013c8  e5d00604          LDRB     r0,[r0,#0x604]        ;840
0013cc  e3500000          CMP      r0,#0                 ;840
0013d0  0a000001          BEQ      |L1.5084|
0013d4  e28f005c          ADR      r0,|L1.5176|
0013d8  ebfffffe          BL       terninalPrintf
                  |L1.5084|
0013dc  e2455c01          SUB      r5,r5,#0x100          ;844
0013e0  e28d6f5f          ADD      r6,sp,#0x17c          ;847
0013e4  e3a07000          MOV      r7,#0                 ;850
0013e8  ea000004          B        |L1.5120|
                  |L1.5100|
0013ec  e28d0f5f          ADD      r0,sp,#0x17c          ;851
0013f0  e2871c01          ADD      r1,r7,#0x100          ;851
0013f4  e7d00001          LDRB     r0,[r0,r1]            ;851
0013f8  e4c60001          STRB     r0,[r6],#1            ;851
0013fc  e2877001          ADD      r7,r7,#1              ;850
                  |L1.5120|
001400  e1570005          CMP      r7,r5                 ;850
001404  3afffff8          BCC      |L1.5100|
                  |L1.5128|
001408  e28d2b01          ADD      r2,sp,#0x400          ;674
00140c  e2822f77          ADD      r2,r2,#0x1dc          ;674
001410  e3a01050          MOV      r1,#0x50              ;674
001414  e28d0b01          ADD      r0,sp,#0x400          ;674
001418  e2800f5f          ADD      r0,r0,#0x17c          ;674
00141c  ebfffffe          BL       f_gets
001420  e3500000          CMP      r0,#0                 ;674
001424  1afffebb          BNE      |L1.3864|
001428  e3550000          CMP      r5,#0                 ;859
00142c  0a000042          BEQ      |L1.5436|
001430  e3a04000          MOV      r4,#0                 ;862
001434  ea000006          B        |L1.5204|
                  |L1.5176|
001438  646f6e65          DCB      "done",0
00143c  00      
00143d  00                DCB      0
00143e  00                DCB      0
00143f  00                DCB      0
                  |L1.5184|
001440  e28d0f5f          ADD      r0,sp,#0x17c          ;863
001444  e7d00004          LDRB     r0,[r0,r4]            ;863
001448  e28d1048          ADD      r1,sp,#0x48           ;863
00144c  e7c10004          STRB     r0,[r1,r4]            ;863
001450  e2844001          ADD      r4,r4,#1              ;862
                  |L1.5204|
001454  e1540005          CMP      r4,r5                 ;862
001458  3afffff8          BCC      |L1.5184|
00145c  e1a04005          MOV      r4,r5                 ;865
001460  ea000003          B        |L1.5236|
                  |L1.5220|
001464  e3a00000          MOV      r0,#0                 ;866
001468  e28d1048          ADD      r1,sp,#0x48           ;866
00146c  e7c10004          STRB     r0,[r1,r4]            ;866
001470  e2844001          ADD      r4,r4,#1              ;865
                  |L1.5236|
001474  e3540c01          CMP      r4,#0x100             ;865
001478  3afffff9          BCC      |L1.5220|
00147c  e1a00008          MOV      r0,r8                 ;868
001480  e59d15d4          LDR      r1,[sp,#0x5d4]        ;868
001484  ebfffffe          BL       __aeabi_uidivmod
001488  e3510000          CMP      r1,#0                 ;868
00148c  1a00000e          BNE      |L1.5324|
001490  e0881108          ADD      r1,r8,r8,LSL #2       ;871
001494  e1a00201          LSL      r0,r1,#4              ;871
001498  e59d15d8          LDR      r1,[sp,#0x5d8]        ;871
00149c  ebfffffe          BL       __aeabi_uidivmod
0014a0  e2809014          ADD      r9,r0,#0x14           ;871
0014a4  e3590064          CMP      r9,#0x64              ;873
0014a8  da000000          BLE      |L1.5296|
0014ac  e3a09064          MOV      r9,#0x64              ;874
                  |L1.5296|
0014b0  e3a02000          MOV      r2,#0                 ;875
0014b4  e1a01009          MOV      r1,r9                 ;875
0014b8  e59d05cc          LDR      r0,[sp,#0x5cc]        ;875
0014bc  ebfffffe          BL       GuiManagerUpdateMessage
0014c0  e1a01009          MOV      r1,r9                 ;876
0014c4  e24f0ff3          ADR      r0,|L1.4352|
0014c8  ebfffffe          BL       terninalPrintf
                  |L1.5324|
0014cc  e2888001          ADD      r8,r8,#1              ;878
0014d0  e28d0a01          ADD      r0,sp,#0x1000         ;880
0014d4  e5d00604          LDRB     r0,[r0,#0x604]        ;880
0014d8  e3500000          CMP      r0,#0                 ;880
0014dc  0a000002          BEQ      |L1.5356|
0014e0  e1a0100b          MOV      r1,r11                ;881
0014e4  e24f0ff6          ADR      r0,|L1.4372|
0014e8  ebfffffe          BL       terninalPrintf
                  |L1.5356|
0014ec  e28d0a01          ADD      r0,sp,#0x1000         ;883
0014f0  e5d00606          LDRB     r0,[r0,#0x606]        ;883
0014f4  e3500001          CMP      r0,#1                 ;883
0014f8  1a000006          BNE      |L1.5400|
0014fc  e59d1024          LDR      r1,[sp,#0x24]         ;884
001500  e59d2028          LDR      r2,[sp,#0x28]         ;884
001504  e28d0a01          ADD      r0,sp,#0x1000         ;884
001508  e5900600          LDR      r0,[r0,#0x600]        ;884
00150c  ebfffffe          BL       bl_send_data
001510  e58d0154          STR      r0,[sp,#0x154]        ;884
001514  ea000001          B        |L1.5408|
                  |L1.5400|
001518  e3a00000          MOV      r0,#0                 ;886
00151c  eafffe49          B        |L1.3656|
                  |L1.5408|
001520  e28bbc01          ADD      r11,r11,#0x100        ;888
001524  e28d0a01          ADD      r0,sp,#0x1000         ;890
001528  e5d00604          LDRB     r0,[r0,#0x604]        ;890
00152c  e3500000          CMP      r0,#0                 ;890
001530  0a000001          BEQ      |L1.5436|
001534  e24f0f41          ADR      r0,|L1.5176|
001538  ebfffffe          BL       terninalPrintf
                  |L1.5436|
00153c  e28d0a01          ADD      r0,sp,#0x1000         ;895
001540  e5d00606          LDRB     r0,[r0,#0x606]        ;895
001544  e3500001          CMP      r0,#1                 ;895
001548  1a000004          BNE      |L1.5472|
00154c  e28d1a01          ADD      r1,sp,#0x1000         ;896
001550  e5910600          LDR      r0,[r1,#0x600]        ;896
001554  ebfffffe          BL       bl_send_EOT
001558  e58d0154          STR      r0,[sp,#0x154]        ;896
00155c  ea000001          B        |L1.5480|
                  |L1.5472|
001560  e3a00000          MOV      r0,#0                 ;898
001564  eafffe37          B        |L1.3656|
                  |L1.5480|
001568  e28d0b01          ADD      r0,sp,#0x400          ;901
00156c  e2800f77          ADD      r0,r0,#0x1dc          ;901
001570  ebfffffe          BL       f_close
001574  e28d0a01          ADD      r0,sp,#0x1000         ;903
001578  e5d00604          LDRB     r0,[r0,#0x604]        ;903
00157c  e3500000          CMP      r0,#0                 ;903
001580  0a000001          BEQ      |L1.5516|
001584  e28f0f6f          ADR      r0,|L1.5960|
001588  ebfffffe          BL       terninalPrintf
                  |L1.5516|
00158c  e3a00001          MOV      r0,#1                 ;906
001590  eafffe2c          B        |L1.3656|
;;;909    
                          ENDP

                  RB60POTAFunc PROC
;;;914    
;;;915    BOOL RB60POTAFunc(int radarIndex)
001594  e92d401f          PUSH     {r0-r4,lr}
;;;916    {
001598  e1a04000          MOV      r4,r0
;;;917        
;;;918        if(!UserDrvInit(FALSE))
00159c  e3a00000          MOV      r0,#0
0015a0  ebfffffe          BL       UserDrvInit
0015a4  e3500000          CMP      r0,#0
0015a8  1a000004          BNE      |L1.5568|
;;;919        {
;;;920            terninalPrintf("UserDrvInit fail.\r\n");
0015ac  e28f0f66          ADR      r0,|L1.5964|
0015b0  ebfffffe          BL       terninalPrintf
;;;921            return FALSE;
0015b4  e3a00000          MOV      r0,#0
                  |L1.5560|
0015b8  e28dd010          ADD      sp,sp,#0x10
;;;922        }
;;;923        if(!FatfsInit(TRUE))
;;;924        {
;;;925            terninalPrintf("FatfsInit fail.\r\n");
;;;926            return FALSE;
;;;927        }
;;;928        
;;;929        if(RB60PStartBootModeFunc(radarIndex) == FALSE)
;;;930            return FALSE;
;;;931        if(RB60PSetOTABaudFunc(radarIndex) == FALSE)
;;;932            return FALSE;
;;;933        //vTaskDelay(5000/portTICK_RATE_MS);
;;;934        if (init_ASC_BSL(radarIndex) == FALSE)
;;;935            return FALSE;
;;;936        if (send_4_length(radarIndex,appLength) == FALSE)
;;;937            return FALSE;   
;;;938        
;;;939    
;;;940    
;;;941        if (make_flash_image("0:ASCLoader.hex",hexArray,appLength,&hex_address,&num_of_bytes) == FALSE)
;;;942            return FALSE;     
;;;943        if (send_ASCloader(radarIndex,hexArray,appLength) == FALSE)
;;;944            return FALSE;
;;;945        
;;;946        bslHeader.mode = 4;
;;;947    	bslHeader.flashModule = 0x00; //Pflash0 will be protected
;;;948        
;;;949        if(bl_send_header(radarIndex,bslHeader) == TRUE)
;;;950        {
;;;951            bslDownload.hexFileName	 = "0:RB-60.hex";
;;;952            bslDownload.verbose		 = FALSE;
;;;953            bslDownload.device		 = XMC4400_512_DEVICE;
;;;954            bslDownload.ser_interface = ser_interface;
;;;955            if(bl_download_pflash(radarIndex,bslDownload) == FALSE)
;;;956                return FALSE;
;;;957        }
;;;958        else
;;;959            return FALSE;
;;;960            
;;;961        if(RB60PQueryVersionFunc(radarIndex) == FALSE)
;;;962            return FALSE;
;;;963        else
;;;964            return TRUE;
;;;965    }
0015bc  e8bd8010          POP      {r4,pc}
                  |L1.5568|
0015c0  e3a00001          MOV      r0,#1                 ;923
0015c4  ebfffffe          BL       FatfsInit
0015c8  e3500000          CMP      r0,#0                 ;923
0015cc  1a000003          BNE      |L1.5600|
0015d0  e28f0f62          ADR      r0,|L1.5984|
0015d4  ebfffffe          BL       terninalPrintf
0015d8  e3a00000          MOV      r0,#0                 ;926
0015dc  eafffff5          B        |L1.5560|
                  |L1.5600|
0015e0  e1a00004          MOV      r0,r4                 ;929
0015e4  ebfffffe          BL       RB60PStartBootModeFunc
0015e8  e3500000          CMP      r0,#0                 ;929
0015ec  1a000001          BNE      |L1.5624|
0015f0  e3a00000          MOV      r0,#0                 ;930
0015f4  eaffffef          B        |L1.5560|
                  |L1.5624|
0015f8  e1a00004          MOV      r0,r4                 ;931
0015fc  ebfffffe          BL       RB60PSetOTABaudFunc
001600  e3500000          CMP      r0,#0                 ;931
001604  1a000001          BNE      |L1.5648|
001608  e3a00000          MOV      r0,#0                 ;932
00160c  eaffffe9          B        |L1.5560|
                  |L1.5648|
001610  e1a00004          MOV      r0,r4                 ;934
001614  ebfffffe          BL       init_ASC_BSL
001618  e3500000          CMP      r0,#0                 ;934
00161c  1a000001          BNE      |L1.5672|
001620  e3a00000          MOV      r0,#0                 ;935
001624  eaffffe3          B        |L1.5560|
                  |L1.5672|
001628  e59f0144          LDR      r0,|L1.6004|
00162c  e5901000          LDR      r1,[r0,#0]            ;936  ; appLength
001630  e1a00004          MOV      r0,r4                 ;936
001634  ebfffffe          BL       send_4_length
001638  e3500000          CMP      r0,#0                 ;936
00163c  1a000001          BNE      |L1.5704|
001640  e3a00000          MOV      r0,#0                 ;937
001644  eaffffdb          B        |L1.5560|
                  |L1.5704|
001648  e59f0128          LDR      r0,|L1.6008|
00164c  e59f3128          LDR      r3,|L1.6012|
001650  e58d0000          STR      r0,[sp,#0]            ;941
001654  e59f0118          LDR      r0,|L1.6004|
001658  e59f1120          LDR      r1,|L1.6016|
00165c  e5902000          LDR      r2,[r0,#0]            ;941  ; appLength
001660  e28f0f47          ADR      r0,|L1.6020|
001664  ebfffffe          BL       make_flash_image
001668  e3500000          CMP      r0,#0                 ;941
00166c  1a000001          BNE      |L1.5752|
001670  e3a00000          MOV      r0,#0                 ;942
001674  eaffffcf          B        |L1.5560|
                  |L1.5752|
001678  e59f00f4          LDR      r0,|L1.6004|
00167c  e59f10fc          LDR      r1,|L1.6016|
001680  e5902000          LDR      r2,[r0,#0]            ;943  ; appLength
001684  e1a00004          MOV      r0,r4                 ;943
001688  ebfffffe          BL       send_ASCloader
00168c  e3500000          CMP      r0,#0                 ;943
001690  1a000001          BNE      |L1.5788|
001694  e3a00000          MOV      r0,#0                 ;944
001698  eaffffc6          B        |L1.5560|
                  |L1.5788|
00169c  e3a00004          MOV      r0,#4                 ;946
0016a0  e59f10ec          LDR      r1,|L1.6036|
0016a4  e5c10000          STRB     r0,[r1,#0]            ;946  ; bslHeader
0016a8  e3a00000          MOV      r0,#0                 ;947
0016ac  e5c10014          STRB     r0,[r1,#0x14]         ;947  ; bslHeader
0016b0  e2813000          ADD      r3,r1,#0              ;949
0016b4  e283300c          ADD      r3,r3,#0xc            ;949
0016b8  e893000f          LDM      r3,{r0-r3}            ;949  ; bslHeader, bslHeader, bslHeader, bslHeader
0016bc  e88d000f          STM      sp,{r0-r3}            ;949
0016c0  e59f00cc          LDR      r0,|L1.6036|
0016c4  e890000e          LDM      r0,{r1-r3}            ;949  ; bslHeader, bslHeader, bslHeader
0016c8  e1a00004          MOV      r0,r4                 ;949
0016cc  ebfffffe          BL       bl_send_header
0016d0  e3500001          CMP      r0,#1                 ;949
0016d4  1a000011          BNE      |L1.5920|
0016d8  e28f00b8          ADR      r0,|L1.6040|
0016dc  e59f10c0          LDR      r1,|L1.6052|
0016e0  e5810004          STR      r0,[r1,#4]            ;951  ; bslDownload
0016e4  e3a00000          MOV      r0,#0                 ;952
0016e8  e5c10000          STRB     r0,[r1,#0]            ;952  ; bslDownload
0016ec  e3a00004          MOV      r0,#4                 ;953
0016f0  e5c10001          STRB     r0,[r1,#1]            ;953  ; bslDownload
0016f4  e59f00ac          LDR      r0,|L1.6056|
0016f8  e5d00000          LDRB     r0,[r0,#0]            ;954  ; ser_interface
0016fc  e5c10002          STRB     r0,[r1,#2]            ;954  ; bslDownload
001700  e2810000          ADD      r0,r1,#0              ;955
001704  e8900006          LDM      r0,{r1,r2}            ;955  ; bslDownload, bslDownload
001708  e1a00004          MOV      r0,r4                 ;955
00170c  ebfffffe          BL       bl_download_pflash
001710  e3500000          CMP      r0,#0                 ;955
001714  1a000003          BNE      |L1.5928|
001718  e3a00000          MOV      r0,#0                 ;956
00171c  eaffffa5          B        |L1.5560|
                  |L1.5920|
001720  e3a00000          MOV      r0,#0                 ;959
001724  eaffffa3          B        |L1.5560|
                  |L1.5928|
001728  e1a00004          MOV      r0,r4                 ;961
00172c  ebfffffe          BL       RB60PQueryVersionFunc
001730  e3500000          CMP      r0,#0                 ;961
001734  1a000001          BNE      |L1.5952|
001738  e3a00000          MOV      r0,#0                 ;962
00173c  eaffff9d          B        |L1.5560|
                  |L1.5952|
001740  e3a00001          MOV      r0,#1                 ;964
001744  eaffff9b          B        |L1.5560|
;;;966    
                          ENDP

                  |L1.5960|
001748  0a00              DCB      "\n",0
00174a  00                DCB      0
00174b  00                DCB      0
                  |L1.5964|
00174c  55736572          DCB      "UserDrvInit fail.\r\n",0
001750  44727649
001754  6e697420
001758  6661696c
00175c  2e0d0a00
                  |L1.5984|
001760  46617466          DCB      "FatfsInit fail.\r\n",0
001764  73496e69
001768  74206661
00176c  696c2e0d
001770  0a00    
001772  00                DCB      0
001773  00                DCB      0
                  |L1.6004|
                          DCD      appLength
                  |L1.6008|
                          DCD      num_of_bytes
                  |L1.6012|
                          DCD      hex_address
                  |L1.6016|
                          DCD      hexArray
                  |L1.6020|
001784  303a4153          DCB      "0:ASCLoader.hex",0
001788  434c6f61
00178c  6465722e
001790  68657800
                  |L1.6036|
                          DCD      bslHeader
                  |L1.6040|
001798  303a5242          DCB      "0:RB-60.hex",0
00179c  2d36302e
0017a0  68657800
                  |L1.6052|
                          DCD      bslDownload
                  |L1.6056|
                          DCD      ser_interface

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hexArray
                          %        16384
                  bslHeader
                          %        28

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  XMC4400_512_PFLASH_SectorTable
                          DCD      0x0c000000
                          DCD      0x00004000
                          DCD      0x0c004000
                          DCD      0x00004000
                          DCD      0x0c008000
                          DCD      0x00004000
                          DCD      0x0c00c000
                          DCD      0x00004000
                          DCD      0x0c010000
                          DCD      0x00004000
                          DCD      0x0c014000
                          DCD      0x00004000
                          DCD      0x0c018000
                          DCD      0x00004000
                          DCD      0x0c01c000
                          DCD      0x00004000
                          DCD      0x0c020000
                          DCD      0x00020000
                          DCD      0x0c040000
                          DCD      0x00040000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  appLength
                          DCD      0x00001e6f
                  ser_interface
                          DCD      0x00000001
                  hex_address
                          DCD      0x00000000
                  num_of_bytes
                          DCD      0x00000000
                  bslDownload
                          %        8
