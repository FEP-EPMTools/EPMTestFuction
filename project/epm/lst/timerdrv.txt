; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\timerdrv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timerdrv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\timerdrv.crf src\SysHal\timerdrv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTimerDrvTask PROC
;;;43     
;;;44     static void vTimerDrvTask( void *pvparamOuteters )
000000  e1a05000          MOV      r5,r0
;;;45     {
;;;46         int taskIndex = (int)pvparamOuteters;
000004  e1a04005          MOV      r4,r5
;;;47         vTaskDelay(taskIndex*50/portTICK_RATE_MS);
000008  e3a01032          MOV      r1,#0x32
00000c  e0000194          MUL      r0,r4,r1
000010  e3a0100a          MOV      r1,#0xa
000014  ebfffffe          BL       __aeabi_uidivmod
000018  e1a06000          MOV      r6,r0
00001c  ebfffffe          BL       vTaskDelay
;;;48         //sysprintf("vTimerDrvTask[%d] Going...\r\n", taskIndex);   
;;;49         for(;;)
000020  e1a00000          MOV      r0,r0
                  |L1.36|
;;;50         {       
;;;51             BaseType_t reval = xSemaphoreTake(xSemaphore[taskIndex], threadWaitTime[taskIndex]); 
000024  e59f11e4          LDR      r1,|L1.528|
000028  e7912104          LDR      r2,[r1,r4,LSL #2]
00002c  e59f11e0          LDR      r1,|L1.532|
000030  e7910104          LDR      r0,[r1,r4,LSL #2]
000034  e3a03000          MOV      r3,#0
000038  e1a01003          MOV      r1,r3
00003c  ebfffffe          BL       xQueueGenericReceive
000040  e1a06000          MOV      r6,r0
;;;52             
;;;53             if(reval == pdTRUE)
000044  e3560001          CMP      r6,#1
000048  0a000017          BEQ      |L1.172|
;;;54             {
;;;55                 #if(ENABLE_TIMER_DRV_DEBUG)
;;;56                 sysprintf("\r\n ##>> vTimerDrvTask go [%d], threadWaitTime[%d] = %d...\r\n", taskIndex, taskIndex, threadWaitTime[taskIndex]); 
;;;57                 #endif
;;;58             }
;;;59             else
;;;60             {//timeout
;;;61                 #if(ENABLE_TIMER_DRV_DEBUG)
;;;62                 sysprintf("\r\n ##>> vTimerDrvTask timeout [%d], threadWaitTime[%d] = %d, threadWaitTimeBackup[%d] = %d..\r\n", taskIndex, taskIndex, threadWaitTime[taskIndex], taskIndex, threadWaitTimeBackup[taskIndex]); 
;;;63                 #endif
;;;64                 threadWaitTime[taskIndex] = threadWaitTimeBackup[taskIndex];   //for BOOL TimerRun(uint8_t timerIndex)  
00004c  e59f01c4          LDR      r0,|L1.536|
000050  e7900104          LDR      r0,[r0,r4,LSL #2]
000054  e59f11b4          LDR      r1,|L1.528|
000058  e7810104          STR      r0,[r1,r4,LSL #2]
;;;65                 if(mTimerCallbackFunc != NULL)
00005c  e59f01b8          LDR      r0,|L1.540|
000060  e5900000          LDR      r0,[r0,#0]  ; mTimerCallbackFunc
000064  e3500000          CMP      r0,#0
000068  0a00000f          BEQ      |L1.172|
;;;66                 {
;;;67                     #if(ENABLE_TIMER_DRV_DEBUG)
;;;68                     sysprintf("\r\n ##>> ~~wait~~ [%d]!!\n", taskIndex); 
;;;69                     #endif                
;;;70                     xSemaphoreTake(xRunSemaphore, portMAX_DELAY);
00006c  e3a03000          MOV      r3,#0
000070  e3e02000          MVN      r2,#0
000074  e1a01003          MOV      r1,r3
000078  e59f01a0          LDR      r0,|L1.544|
00007c  e5900000          LDR      r0,[r0,#0]  ; xRunSemaphore
000080  ebfffffe          BL       xQueueGenericReceive
;;;71                     #if(ENABLE_TIMER_DRV_DEBUG)
;;;72                     sysprintf("\r\n ##>> ~~go~~ [%d]!!\n", taskIndex); 
;;;73                     #endif
;;;74                     mTimerCallbackFunc(taskIndex);
000084  e20400ff          AND      r0,r4,#0xff
000088  e59f118c          LDR      r1,|L1.540|
00008c  e5911000          LDR      r1,[r1,#0]  ; mTimerCallbackFunc
000090  e12fff31          BLX      r1
;;;75                     xSemaphoreGive(xRunSemaphore);
000094  e3a03000          MOV      r3,#0
000098  e1a02003          MOV      r2,r3
00009c  e1a01003          MOV      r1,r3
0000a0  e59f0178          LDR      r0,|L1.544|
0000a4  e5900000          LDR      r0,[r0,#0]  ; xRunSemaphore
0000a8  ebfffffe          BL       xQueueGenericSend
                  |L1.172|
;;;76                 }
;;;77       
;;;78             }   
;;;79             
;;;80             
;;;81         }
0000ac  eaffffdc          B        |L1.36|
;;;82     }
;;;83     /*-----------------------------------------*/
                          ENDP

                  TimerDrvInit PROC
;;;85     /*-----------------------------------------*/
;;;86     BOOL TimerDrvInit(void)
0000b0  e92d401c          PUSH     {r2-r4,lr}
;;;87     {
;;;88         int i;
;;;89         sysprintf("TimerDrvInit!!\n"); 
0000b4  e28f0f5a          ADR      r0,|L1.548|
0000b8  ebfffffe          BL       sysprintf
;;;90         xRunSemaphore = xSemaphoreCreateMutex();     
0000bc  e3a00001          MOV      r0,#1
0000c0  ebfffffe          BL       xQueueCreateMutex
0000c4  e59f1154          LDR      r1,|L1.544|
0000c8  e5810000          STR      r0,[r1,#0]  ; xRunSemaphore
;;;91         for(i = 0; i<TIME_THREAD_NUM; i++)
0000cc  e3a04000          MOV      r4,#0
0000d0  ea000005          B        |L1.236|
                  |L1.212|
;;;92         {
;;;93             xSemaphore[i] = xSemaphoreCreateCounting(5, 0);//xSemaphoreCreateBinary();
0000d4  e3a01000          MOV      r1,#0
0000d8  e3a00005          MOV      r0,#5
0000dc  ebfffffe          BL       xQueueCreateCountingSemaphore
0000e0  e59f112c          LDR      r1,|L1.532|
0000e4  e7810104          STR      r0,[r1,r4,LSL #2]
0000e8  e2844001          ADD      r4,r4,#1              ;91
                  |L1.236|
0000ec  e3540003          CMP      r4,#3                 ;91
0000f0  bafffff7          BLT      |L1.212|
;;;94             //xSemaphore[i] = xSemaphoreCreateBinary();
;;;95         }
;;;96         
;;;97         xTaskCreate( vTimerDrvTask, "vTimerDrvTask0", 1024*10, (void*)0, TIMER_DRV_0_THREAD_PROI, NULL );
0000f4  e3a00000          MOV      r0,#0
0000f8  e3a0100c          MOV      r1,#0xc
0000fc  e58d0004          STR      r0,[sp,#4]
000100  e1a03000          MOV      r3,r0
000104  e3a02b0a          MOV      r2,#0x2800
000108  e58d1000          STR      r1,[sp,#0]
00010c  e28f1e12          ADR      r1,|L1.564|
000110  e59f012c          LDR      r0,|L1.580|
000114  ebfffffe          BL       xTaskCreate
;;;98         xTaskCreate( vTimerDrvTask, "vTimerDrvTask1", 1024*10, (void*)1, TIMER_DRV_1_THREAD_PROI, NULL );
000118  e3a00000          MOV      r0,#0
00011c  e3a0100b          MOV      r1,#0xb
000120  e3a03001          MOV      r3,#1
000124  e3a02b0a          MOV      r2,#0x2800
000128  e58d1000          STR      r1,[sp,#0]
00012c  e28f1f45          ADR      r1,|L1.584|
000130  e58d0004          STR      r0,[sp,#4]
000134  e59f0108          LDR      r0,|L1.580|
000138  ebfffffe          BL       xTaskCreate
;;;99         xTaskCreate( vTimerDrvTask, "vTimerDrvTask2", 1024*10, (void*)2, TIMER_DRV_2_THREAD_PROI, NULL );
00013c  e3a00000          MOV      r0,#0
000140  e3a0100a          MOV      r1,#0xa
000144  e3a03002          MOV      r3,#2
000148  e3a02b0a          MOV      r2,#0x2800
00014c  e58d1000          STR      r1,[sp,#0]
000150  e28f1c01          ADR      r1,|L1.600|
000154  e58d0004          STR      r0,[sp,#4]
000158  e59f00e4          LDR      r0,|L1.580|
00015c  ebfffffe          BL       xTaskCreate
;;;100        return TRUE;
000160  e3a00001          MOV      r0,#1
;;;101    }
000164  e8bd801c          POP      {r2-r4,pc}
;;;102    BOOL TimerAllStop(void)
                          ENDP

                  TimerSetTimeout PROC
;;;113    }
;;;114    BOOL TimerSetTimeout(uint8_t timerIndex, TickType_t time)
000168  e92d4070          PUSH     {r4-r6,lr}
;;;115    {
00016c  e1a04000          MOV      r4,r0
000170  e1a05001          MOV      r5,r1
;;;116        #if(ENABLE_TIMER_DRV_DEBUG)
;;;117        sysprintf("\r\n ##>> TimerSetTimeout[%d] tick:%d (ori:%d) Going...\r\n", timerIndex, time, threadWaitTime[timerIndex]);
;;;118        #endif
;;;119        threadWaitTime[timerIndex] = time;
000174  e59f0094          LDR      r0,|L1.528|
000178  e7805104          STR      r5,[r0,r4,LSL #2]
;;;120        threadWaitTimeBackup[timerIndex] = time;
00017c  e59f0094          LDR      r0,|L1.536|
000180  e7805104          STR      r5,[r0,r4,LSL #2]
;;;121        xSemaphoreGive(xSemaphore[timerIndex]);
000184  e59f1088          LDR      r1,|L1.532|
000188  e7910104          LDR      r0,[r1,r4,LSL #2]
00018c  e3a03000          MOV      r3,#0
000190  e1a02003          MOV      r2,r3
000194  e1a01003          MOV      r1,r3
000198  ebfffffe          BL       xQueueGenericSend
;;;122        #if(ENABLE_TIMER_DRV_DEBUG)
;;;123        sysprintf("\r\n ##>> TimerSetTimeout[%d] tick:%d (ori:%d) OK...\r\n", timerIndex, time, threadWaitTime[timerIndex]);
;;;124        #endif
;;;125        return TRUE;
00019c  e3a00001          MOV      r0,#1
;;;126    }
0001a0  e8bd8070          POP      {r4-r6,pc}
;;;127    BOOL TimerRun(uint8_t timerIndex)
                          ENDP

                  TimerAllStop PROC
;;;101    }
;;;102    BOOL TimerAllStop(void)
0001a4  e92d4010          PUSH     {r4,lr}
;;;103    {
;;;104        #if(ENABLE_TIMER_DRV_DEBUG)
;;;105        sysprintf("\r\n ##>> TimerAllStop ...\r\n");
;;;106        #endif
;;;107        int i;
;;;108        for(i=0; i< TIME_THREAD_NUM; i++)
0001a8  e3a04000          MOV      r4,#0
0001ac  ea000003          B        |L1.448|
                  |L1.432|
;;;109        {
;;;110            TimerSetTimeout(i, portMAX_DELAY);
0001b0  e20400ff          AND      r0,r4,#0xff
0001b4  e3e01000          MVN      r1,#0
0001b8  ebfffffe          BL       TimerSetTimeout
0001bc  e2844001          ADD      r4,r4,#1              ;108
                  |L1.448|
0001c0  e3540003          CMP      r4,#3                 ;108
0001c4  bafffff9          BLT      |L1.432|
;;;111        }
;;;112        return TRUE;
0001c8  e3a00001          MOV      r0,#1
;;;113    }
0001cc  e8bd8010          POP      {r4,pc}
;;;114    BOOL TimerSetTimeout(uint8_t timerIndex, TickType_t time)
                          ENDP

                  TimerRun PROC
;;;126    }
;;;127    BOOL TimerRun(uint8_t timerIndex)
0001d0  e92d4010          PUSH     {r4,lr}
;;;128    {
0001d4  e1a04000          MOV      r4,r0
;;;129        threadWaitTime[timerIndex] = 0;
0001d8  e3a00000          MOV      r0,#0
0001dc  e59f102c          LDR      r1,|L1.528|
0001e0  e7810104          STR      r0,[r1,r4,LSL #2]
;;;130        xSemaphoreGive(xSemaphore[timerIndex]);
0001e4  e59f1028          LDR      r1,|L1.532|
0001e8  e7910104          LDR      r0,[r1,r4,LSL #2]
0001ec  e3a03000          MOV      r3,#0
0001f0  e1a02003          MOV      r2,r3
0001f4  e1a01003          MOV      r1,r3
0001f8  ebfffffe          BL       xQueueGenericSend
;;;131        #if(ENABLE_TIMER_DRV_DEBUG)
;;;132        sysprintf("\r\n ##>> TimerRun[%d] tick:%d Going...\r\n", timerIndex, threadWaitTime[timerIndex]);   
;;;133        #endif
;;;134        return TRUE;
0001fc  e3a00001          MOV      r0,#1
;;;135    }
000200  e8bd8010          POP      {r4,pc}
;;;136    void TimerSetCallback(timerCallbackFunc callback)
                          ENDP

                  TimerSetCallback PROC
000204  e59f1010          LDR      r1,|L1.540|
;;;137    {
;;;138        //sysprintf("\r\n !!!! TimerSetCallback ...  !!!!\r\n"); 
;;;139        mTimerCallbackFunc = callback;
000208  e5810000          STR      r0,[r1,#0]  ; mTimerCallbackFunc
;;;140    } 
00020c  e12fff1e          BX       lr
;;;141    
                          ENDP

                  |L1.528|
                          DCD      threadWaitTime
                  |L1.532|
                          DCD      xSemaphore
                  |L1.536|
                          DCD      threadWaitTimeBackup
                  |L1.540|
                          DCD      mTimerCallbackFunc
                  |L1.544|
                          DCD      xRunSemaphore
                  |L1.548|
000224  54696d65          DCB      "TimerDrvInit!!\n",0
000228  72447276
00022c  496e6974
000230  21210a00
                  |L1.564|
000234  7654696d          DCB      "vTimerDrvTask0",0
000238  65724472
00023c  76546173
000240  6b3000  
000243  00                DCB      0
                  |L1.580|
                          DCD      vTimerDrvTask
                  |L1.584|
000248  7654696d          DCB      "vTimerDrvTask1",0
00024c  65724472
000250  76546173
000254  6b3100  
000257  00                DCB      0
                  |L1.600|
000258  7654696d          DCB      "vTimerDrvTask2",0
00025c  65724472
000260  76546173
000264  6b3200  
000267  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xSemaphore
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  threadWaitTime
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                  threadWaitTimeBackup
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                  mTimerCallbackFunc
                          DCD      0x00000000
                  xRunSemaphore
                          DCD      0x00000000
