; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_yaffs2.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_yaffs2.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_yaffs2.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_yaffs2.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  list_add PROC
;;;52     /* Add an element to a list */
;;;53     static __inline void list_add(struct list_head *new_entry,
000000  e5912000          LDR      r2,[r1,#0]
;;;54     				struct list_head *list)
;;;55     {
;;;56     	struct list_head *list_next = list->next;
;;;57     
;;;58     	list->next = new_entry;
000004  e5810000          STR      r0,[r1,#0]
;;;59     	new_entry->prev = list;
000008  e5801004          STR      r1,[r0,#4]
;;;60     	new_entry->next = list_next;
00000c  e5802000          STR      r2,[r0,#0]
;;;61     	list_next->prev = new_entry;
000010  e5820004          STR      r0,[r2,#4]
;;;62     
;;;63     }
000014  e12fff1e          BX       lr
;;;64     
                          ENDP

                  yaffs_calc_oldest_dirty_seq PROC
;;;44      */
;;;45     void yaffs_calc_oldest_dirty_seq(struct yaffs_dev *dev)
000018  e92d4030          PUSH     {r4,r5,lr}
;;;46     {
;;;47     	int i;
;;;48     	unsigned seq;
;;;49     	unsigned block_no = 0;
00001c  e3a0c000          MOV      r12,#0
;;;50     	struct yaffs_block_info *b;
;;;51     
;;;52     	if (!dev->param.is_yaffs2)
000020  e5904030          LDR      r4,[r0,#0x30]
000024  e3540000          CMP      r4,#0
000028  1a000000          BNE      |L1.48|
                  |L1.44|
;;;53     		return;
;;;54     
;;;55     	/* Find the oldest dirty sequence number. */
;;;56     	seq = dev->seq_number + 1;
;;;57     	b = dev->block_info;
;;;58     	for (i = dev->internal_start_block; i <= dev->internal_end_block; i++) {
;;;59     		if (b->block_state == YAFFS_BLOCK_STATE_FULL &&
;;;60     		    (b->pages_in_use - b->soft_del_pages) <
;;;61     		    dev->param.chunks_per_block &&
;;;62     		    b->seq_number < seq) {
;;;63     			seq = b->seq_number;
;;;64     			block_no = i;
;;;65     		}
;;;66     		b++;
;;;67     	}
;;;68     
;;;69     	if (block_no) {
;;;70     		dev->oldest_dirty_seq = seq;
;;;71     		dev->oldest_dirty_block = block_no;
;;;72     	}
;;;73     }
00002c  e8bd8030          POP      {r4,r5,pc}
                  |L1.48|
000030  e5904df0          LDR      r4,[r0,#0xdf0]        ;56
000034  e2843001          ADD      r3,r4,#1              ;56
000038  e5901118          LDR      r1,[r0,#0x118]        ;57
00003c  e59020d0          LDR      r2,[r0,#0xd0]         ;58
000040  ea000013          B        |L1.148|
                  |L1.68|
000044  e5914000          LDR      r4,[r1,#0]            ;59
000048  e204460f          AND      r4,r4,#0xf00000       ;59
00004c  e3540605          CMP      r4,#0x500000          ;59
000050  1a00000d          BNE      |L1.140|
000054  e1d140b0          LDRH     r4,[r1,#0]            ;60
000058  e1a04b04          LSL      r4,r4,#22             ;60
00005c  e1a04b24          LSR      r4,r4,#22             ;60
000060  e5915000          LDR      r5,[r1,#0]            ;60
000064  e1a05605          LSL      r5,r5,#12             ;60
000068  e0644b25          RSB      r4,r4,r5,LSR #22      ;60
00006c  e590500c          LDR      r5,[r0,#0xc]          ;60
000070  e1540005          CMP      r4,r5                 ;60
000074  aa000004          BGE      |L1.140|
000078  e5914004          LDR      r4,[r1,#4]            ;62
00007c  e1540003          CMP      r4,r3                 ;62
000080  2a000001          BCS      |L1.140|
000084  e5913004          LDR      r3,[r1,#4]            ;63
000088  e1a0c002          MOV      r12,r2                ;64
                  |L1.140|
00008c  e2811008          ADD      r1,r1,#8              ;66
000090  e2822001          ADD      r2,r2,#1              ;58
                  |L1.148|
000094  e59040d4          LDR      r4,[r0,#0xd4]         ;58
000098  e1540002          CMP      r4,r2                 ;58
00009c  aaffffe8          BGE      |L1.68|
0000a0  e35c0000          CMP      r12,#0                ;69
0000a4  0a000001          BEQ      |L1.176|
0000a8  e5803df4          STR      r3,[r0,#0xdf4]        ;70
0000ac  e580cdf8          STR      r12,[r0,#0xdf8]       ;71
                  |L1.176|
0000b0  e1a00000          MOV      r0,r0
0000b4  eaffffdc          B        |L1.44|
;;;74     
                          ENDP

                  yaffs2_find_oldest_dirty_seq PROC
;;;75     void yaffs2_find_oldest_dirty_seq(struct yaffs_dev *dev)
0000b8  e92d4010          PUSH     {r4,lr}
;;;76     {
0000bc  e1a04000          MOV      r4,r0
;;;77     	if (!dev->param.is_yaffs2)
0000c0  e5940030          LDR      r0,[r4,#0x30]
0000c4  e3500000          CMP      r0,#0
0000c8  1a000000          BNE      |L1.208|
                  |L1.204|
;;;78     		return;
;;;79     
;;;80     	if (!dev->oldest_dirty_seq)
;;;81     		yaffs_calc_oldest_dirty_seq(dev);
;;;82     }
0000cc  e8bd8010          POP      {r4,pc}
                  |L1.208|
0000d0  e5940df4          LDR      r0,[r4,#0xdf4]        ;80
0000d4  e3500000          CMP      r0,#0                 ;80
0000d8  1a000001          BNE      |L1.228|
0000dc  e1a00004          MOV      r0,r4                 ;81
0000e0  ebfffffe          BL       yaffs_calc_oldest_dirty_seq
                  |L1.228|
0000e4  e1a00000          MOV      r0,r0
0000e8  eafffff7          B        |L1.204|
;;;83     
                          ENDP

                  yaffs2_clear_oldest_dirty_seq PROC
;;;89      */
;;;90     void yaffs2_clear_oldest_dirty_seq(struct yaffs_dev *dev,
0000ec  e5902030          LDR      r2,[r0,#0x30]
;;;91     				   struct yaffs_block_info *bi)
;;;92     {
;;;93     
;;;94     	if (!dev->param.is_yaffs2)
0000f0  e3520000          CMP      r2,#0
0000f4  1a000000          BNE      |L1.252|
                  |L1.248|
;;;95     		return;
;;;96     
;;;97     	if (!bi || bi->seq_number == dev->oldest_dirty_seq) {
;;;98     		dev->oldest_dirty_seq = 0;
;;;99     		dev->oldest_dirty_block = 0;
;;;100    	}
;;;101    }
0000f8  e12fff1e          BX       lr
                  |L1.252|
0000fc  e3510000          CMP      r1,#0                 ;97
000100  0a000003          BEQ      |L1.276|
000104  e5912004          LDR      r2,[r1,#4]            ;97
000108  e5903df4          LDR      r3,[r0,#0xdf4]        ;97
00010c  e1520003          CMP      r2,r3                 ;97
000110  1a000002          BNE      |L1.288|
                  |L1.276|
000114  e3a02000          MOV      r2,#0                 ;98
000118  e5802df4          STR      r2,[r0,#0xdf4]        ;98
00011c  e5802df8          STR      r2,[r0,#0xdf8]        ;99
                  |L1.288|
000120  e1a00000          MOV      r0,r0
000124  eafffff3          B        |L1.248|
;;;102    
                          ENDP

                  yaffs2_update_oldest_dirty_seq PROC
;;;107     */
;;;108    void yaffs2_update_oldest_dirty_seq(struct yaffs_dev *dev, unsigned block_no,
000128  e5903030          LDR      r3,[r0,#0x30]
;;;109    				    struct yaffs_block_info *bi)
;;;110    {
;;;111    	if (!dev->param.is_yaffs2)
00012c  e3530000          CMP      r3,#0
000130  1a000000          BNE      |L1.312|
                  |L1.308|
;;;112    		return;
;;;113    
;;;114    	if (dev->oldest_dirty_seq) {
;;;115    		if (dev->oldest_dirty_seq > bi->seq_number) {
;;;116    			dev->oldest_dirty_seq = bi->seq_number;
;;;117    			dev->oldest_dirty_block = block_no;
;;;118    		}
;;;119    	}
;;;120    }
000134  e12fff1e          BX       lr
                  |L1.312|
000138  e5903df4          LDR      r3,[r0,#0xdf4]        ;114
00013c  e3530000          CMP      r3,#0                 ;114
000140  0a000006          BEQ      |L1.352|
000144  e5903df4          LDR      r3,[r0,#0xdf4]        ;115
000148  e592c004          LDR      r12,[r2,#4]           ;115
00014c  e153000c          CMP      r3,r12                ;115
000150  9a000002          BLS      |L1.352|
000154  e5923004          LDR      r3,[r2,#4]            ;116
000158  e5803df4          STR      r3,[r0,#0xdf4]        ;116
00015c  e5801df8          STR      r1,[r0,#0xdf8]        ;117
                  |L1.352|
000160  e1a00000          MOV      r0,r0
000164  eafffff2          B        |L1.308|
;;;121    
                          ENDP

                  yaffs_block_ok_for_gc PROC
;;;122    int yaffs_block_ok_for_gc(struct yaffs_dev *dev, struct yaffs_block_info *bi)
000168  e92d4030          PUSH     {r4,r5,lr}
;;;123    {
00016c  e1a04000          MOV      r4,r0
000170  e1a05001          MOV      r5,r1
;;;124    
;;;125    	if (!dev->param.is_yaffs2)
000174  e5940030          LDR      r0,[r4,#0x30]
000178  e3500000          CMP      r0,#0
00017c  1a000001          BNE      |L1.392|
;;;126    		return 1;	/* disqualification only applies to yaffs2. */
000180  e3a00001          MOV      r0,#1
                  |L1.388|
;;;127    
;;;128    	if (!bi->has_shrink_hdr)
;;;129    		return 1;	/* can gc */
;;;130    
;;;131    	yaffs2_find_oldest_dirty_seq(dev);
;;;132    
;;;133    	/* Can't do gc of this block if there are any blocks older than this
;;;134    	 * one that have discarded pages.
;;;135    	 */
;;;136    	return (bi->seq_number <= dev->oldest_dirty_seq);
;;;137    }
000184  e8bd8030          POP      {r4,r5,pc}
                  |L1.392|
000188  e5950000          LDR      r0,[r5,#0]            ;128
00018c  e1b00fa0          LSRS     r0,r0,#31             ;128
000190  1a000001          BNE      |L1.412|
000194  e3a00001          MOV      r0,#1                 ;129
000198  eafffff9          B        |L1.388|
                  |L1.412|
00019c  e1a00004          MOV      r0,r4                 ;131
0001a0  ebfffffe          BL       yaffs2_find_oldest_dirty_seq
0001a4  e5950004          LDR      r0,[r5,#4]            ;136
0001a8  e5941df4          LDR      r1,[r4,#0xdf4]        ;136
0001ac  e1500001          CMP      r0,r1                 ;136
0001b0  8a000001          BHI      |L1.444|
0001b4  e3a00001          MOV      r0,#1                 ;136
0001b8  eafffff1          B        |L1.388|
                  |L1.444|
0001bc  e3a00000          MOV      r0,#0                 ;136
0001c0  eaffffef          B        |L1.388|
;;;138    
                          ENDP

                  yaffs2_find_refresh_block PROC
;;;143     */
;;;144    u32 yaffs2_find_refresh_block(struct yaffs_dev *dev)
0001c4  e92d41f0          PUSH     {r4-r8,lr}
;;;145    {
0001c8  e1a04000          MOV      r4,r0
;;;146    	u32 b;
;;;147    	u32 oldest = 0;
0001cc  e3a07000          MOV      r7,#0
;;;148    	u32 oldest_seq = 0;
0001d0  e3a08000          MOV      r8,#0
;;;149    	struct yaffs_block_info *bi;
;;;150    
;;;151    	if (!dev->param.is_yaffs2)
0001d4  e5940030          LDR      r0,[r4,#0x30]
0001d8  e3500000          CMP      r0,#0
0001dc  1a000001          BNE      |L1.488|
;;;152    		return oldest;
0001e0  e1a00007          MOV      r0,r7
                  |L1.484|
;;;153    
;;;154    	/*
;;;155    	 * If refresh period < 10 then refreshing is disabled.
;;;156    	 */
;;;157    	if (dev->param.refresh_period < 10)
;;;158    		return oldest;
;;;159    
;;;160    	/*
;;;161    	 * Fix broken values.
;;;162    	 */
;;;163    	if (dev->refresh_skip > dev->param.refresh_period)
;;;164    		dev->refresh_skip = dev->param.refresh_period;
;;;165    
;;;166    	if (dev->refresh_skip > 0)
;;;167    		return oldest;
;;;168    
;;;169    	/*
;;;170    	 * Refresh skip is now zero.
;;;171    	 * We'll do a refresh this time around....
;;;172    	 * Update the refresh skip and find the oldest block.
;;;173    	 */
;;;174    	dev->refresh_skip = dev->param.refresh_period;
;;;175    	dev->refresh_count++;
;;;176    	bi = dev->block_info;
;;;177    	for (b = dev->internal_start_block; b <= dev->internal_end_block; b++) {
;;;178    
;;;179    		if (bi->block_state == YAFFS_BLOCK_STATE_FULL) {
;;;180    
;;;181    			if (oldest < 1 || bi->seq_number < oldest_seq) {
;;;182    				oldest = b;
;;;183    				oldest_seq = bi->seq_number;
;;;184    			}
;;;185    		}
;;;186    		bi++;
;;;187    	}
;;;188    
;;;189    	if (oldest > 0) {
;;;190    		yaffs_trace(YAFFS_TRACE_GC,
;;;191    			"GC refresh count %d selected block %d with seq_number %d",
;;;192    			dev->refresh_count, oldest, oldest_seq);
;;;193    	}
;;;194    
;;;195    	return oldest;
;;;196    }
0001e4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.488|
0001e8  e5940038          LDR      r0,[r4,#0x38]         ;157
0001ec  e350000a          CMP      r0,#0xa               ;157
0001f0  aa000001          BGE      |L1.508|
0001f4  e1a00007          MOV      r0,r7                 ;158
0001f8  eafffff9          B        |L1.484|
                  |L1.508|
0001fc  e5940dfc          LDR      r0,[r4,#0xdfc]        ;163
000200  e5941038          LDR      r1,[r4,#0x38]         ;163
000204  e1500001          CMP      r0,r1                 ;163
000208  da000001          BLE      |L1.532|
00020c  e5940038          LDR      r0,[r4,#0x38]         ;164
000210  e5840dfc          STR      r0,[r4,#0xdfc]        ;164
                  |L1.532|
000214  e5940dfc          LDR      r0,[r4,#0xdfc]        ;166
000218  e3500000          CMP      r0,#0                 ;166
00021c  da000001          BLE      |L1.552|
000220  e1a00007          MOV      r0,r7                 ;167
000224  eaffffee          B        |L1.484|
                  |L1.552|
000228  e5940038          LDR      r0,[r4,#0x38]         ;174
00022c  e5840dfc          STR      r0,[r4,#0xdfc]        ;174
000230  e5940e58          LDR      r0,[r4,#0xe58]        ;175
000234  e2800001          ADD      r0,r0,#1              ;175
000238  e5840e58          STR      r0,[r4,#0xe58]        ;175
00023c  e5945118          LDR      r5,[r4,#0x118]        ;176
000240  e59460d0          LDR      r6,[r4,#0xd0]         ;177
000244  ea00000c          B        |L1.636|
                  |L1.584|
000248  e5950000          LDR      r0,[r5,#0]            ;179
00024c  e200060f          AND      r0,r0,#0xf00000       ;179
000250  e3500605          CMP      r0,#0x500000          ;179
000254  1a000006          BNE      |L1.628|
000258  e3570000          CMP      r7,#0                 ;181
00025c  0a000002          BEQ      |L1.620|
000260  e5950004          LDR      r0,[r5,#4]            ;181
000264  e1500008          CMP      r0,r8                 ;181
000268  2a000001          BCS      |L1.628|
                  |L1.620|
00026c  e1a07006          MOV      r7,r6                 ;182
000270  e5958004          LDR      r8,[r5,#4]            ;183
                  |L1.628|
000274  e2855008          ADD      r5,r5,#8              ;186
000278  e2866001          ADD      r6,r6,#1              ;177
                  |L1.636|
00027c  e59400d4          LDR      r0,[r4,#0xd4]         ;177
000280  e1500006          CMP      r0,r6                 ;177
000284  2affffef          BCS      |L1.584|
000288  e3570000          CMP      r7,#0                 ;189
00028c  0a000008          BEQ      |L1.692|
000290  e59f0ddc          LDR      r0,|L1.4212|
000294  e5d00000          LDRB     r0,[r0,#0]            ;190  ; yaffs_trace_mask
000298  e3100040          TST      r0,#0x40              ;190
00029c  0a000004          BEQ      |L1.692|
0002a0  e1a03008          MOV      r3,r8                 ;190
0002a4  e1a02007          MOV      r2,r7                 ;190
0002a8  e59f0dc8          LDR      r0,|L1.4216|
0002ac  e5941e58          LDR      r1,[r4,#0xe58]        ;190
0002b0  ebfffffe          BL       sysprintf
                  |L1.692|
0002b4  e1a00007          MOV      r0,r7                 ;195
0002b8  eaffffc9          B        |L1.484|
;;;197    
                          ENDP

                  yaffs2_checkpt_required PROC
;;;198    int yaffs2_checkpt_required(struct yaffs_dev *dev)
0002bc  e1a01000          MOV      r1,r0
;;;199    {
;;;200    	int nblocks;
;;;201    
;;;202    	if (!dev->param.is_yaffs2)
0002c0  e5910030          LDR      r0,[r1,#0x30]
0002c4  e3500000          CMP      r0,#0
0002c8  1a000001          BNE      |L1.724|
;;;203    		return 0;
0002cc  e3a00000          MOV      r0,#0
                  |L1.720|
;;;204    
;;;205    	nblocks = dev->internal_end_block - dev->internal_start_block + 1;
;;;206    
;;;207    	return !dev->param.skip_checkpt_wr &&
;;;208    	    !dev->read_only && (nblocks >= YAFFS_CHECKPOINT_MIN_BLOCKS);
;;;209    }
0002d0  e12fff1e          BX       lr
                  |L1.724|
0002d4  e59100d4          LDR      r0,[r1,#0xd4]         ;205
0002d8  e59130d0          LDR      r3,[r1,#0xd0]         ;205
0002dc  e0400003          SUB      r0,r0,r3              ;205
0002e0  e2802001          ADD      r2,r0,#1              ;205
0002e4  e5d1003d          LDRB     r0,[r1,#0x3d]         ;207
0002e8  e3500000          CMP      r0,#0                 ;207
0002ec  1a000006          BNE      |L1.780|
0002f0  e59100c8          LDR      r0,[r1,#0xc8]         ;208
0002f4  e3500000          CMP      r0,#0                 ;208
0002f8  1a000003          BNE      |L1.780|
0002fc  e352003c          CMP      r2,#0x3c              ;208
000300  ba000001          BLT      |L1.780|
000304  e3a00001          MOV      r0,#1                 ;207
000308  eafffff0          B        |L1.720|
                  |L1.780|
00030c  e3a00000          MOV      r0,#0                 ;207
000310  eaffffee          B        |L1.720|
;;;210    
                          ENDP

                  yaffs_calc_checkpt_blocks_required PROC
;;;211    int yaffs_calc_checkpt_blocks_required(struct yaffs_dev *dev)
000314  e92d41f0          PUSH     {r4-r8,lr}
;;;212    {
000318  e1a04000          MOV      r4,r0
;;;213    	int retval;
;;;214    	int n_bytes = 0;
00031c  e3a05000          MOV      r5,#0
;;;215    	int n_blocks;
;;;216    	int dev_blocks;
;;;217    
;;;218    	if (!dev->param.is_yaffs2)
000320  e5940030          LDR      r0,[r4,#0x30]
000324  e3500000          CMP      r0,#0
000328  1a000001          BNE      |L1.820|
;;;219    		return 0;
00032c  e3a00000          MOV      r0,#0
                  |L1.816|
;;;220    
;;;221    	if (!dev->checkpoint_blocks_required && yaffs2_checkpt_required(dev)) {
;;;222    		/* Not a valid value so recalculate */
;;;223    		dev_blocks = dev->param.end_block - dev->param.start_block + 1;
;;;224    		n_bytes += sizeof(struct yaffs_checkpt_validity);
;;;225    		n_bytes += sizeof(struct yaffs_checkpt_dev);
;;;226    		n_bytes += dev_blocks * sizeof(struct yaffs_block_info);
;;;227    		n_bytes += dev_blocks * dev->chunk_bit_stride;
;;;228    		n_bytes +=
;;;229    		    (sizeof(struct yaffs_checkpt_obj) + sizeof(u32)) *
;;;230    		    dev->n_obj;
;;;231    		n_bytes += (dev->tnode_size + sizeof(u32)) * dev->n_tnodes;
;;;232    		n_bytes += sizeof(struct yaffs_checkpt_validity);
;;;233    		n_bytes += sizeof(u32);	/* checksum */
;;;234    
;;;235    		/* Round up and add 2 blocks to allow for some bad blocks,
;;;236    		 * so add 3 */
;;;237    
;;;238    		n_blocks =
;;;239    		    (n_bytes /
;;;240    		     (dev->data_bytes_per_chunk *
;;;241    		      dev->param.chunks_per_block)) + 3;
;;;242    
;;;243    		dev->checkpoint_blocks_required = n_blocks;
;;;244    	}
;;;245    
;;;246    	retval = dev->checkpoint_blocks_required - dev->blocks_in_checkpt;
;;;247    	if (retval < 0)
;;;248    		retval = 0;
;;;249    	return retval;
;;;250    }
000330  e8bd81f0          POP      {r4-r8,pc}
                  |L1.820|
000334  e5940114          LDR      r0,[r4,#0x114]        ;221
000338  e3500000          CMP      r0,#0                 ;221
00033c  1a00001c          BNE      |L1.948|
000340  e1a00004          MOV      r0,r4                 ;221
000344  ebfffffe          BL       yaffs2_checkpt_required
000348  e3500000          CMP      r0,#0                 ;221
00034c  0a000018          BEQ      |L1.948|
000350  e5940018          LDR      r0,[r4,#0x18]         ;223
000354  e5941014          LDR      r1,[r4,#0x14]         ;223
000358  e0400001          SUB      r0,r0,r1              ;223
00035c  e2806001          ADD      r6,r0,#1              ;223
000360  e2855010          ADD      r5,r5,#0x10           ;224
000364  e2855024          ADD      r5,r5,#0x24           ;225
000368  e0855186          ADD      r5,r5,r6,LSL #3       ;226
00036c  e5940124          LDR      r0,[r4,#0x124]        ;227
000370  e0255096          MLA      r5,r6,r0,r5           ;227
000374  e3a01024          MOV      r1,#0x24              ;228
000378  e594013c          LDR      r0,[r4,#0x13c]        ;228
00037c  e0255091          MLA      r5,r1,r0,r5           ;228
000380  e59400b4          LDR      r0,[r4,#0xb4]         ;231
000384  e2800004          ADD      r0,r0,#4              ;231
000388  e5941140          LDR      r1,[r4,#0x140]        ;231
00038c  e0255190          MLA      r5,r0,r1,r5           ;231
000390  e2855010          ADD      r5,r5,#0x10           ;232
000394  e2855004          ADD      r5,r5,#4              ;233
000398  e59400a4          LDR      r0,[r4,#0xa4]         ;238
00039c  e594200c          LDR      r2,[r4,#0xc]          ;238
0003a0  e0010290          MUL      r1,r0,r2              ;238
0003a4  e1a00005          MOV      r0,r5                 ;238
0003a8  ebfffffe          BL       __aeabi_idivmod
0003ac  e2808003          ADD      r8,r0,#3              ;238
0003b0  e5848114          STR      r8,[r4,#0x114]        ;243
                  |L1.948|
0003b4  e5940114          LDR      r0,[r4,#0x114]        ;246
0003b8  e59410f4          LDR      r1,[r4,#0xf4]         ;246
0003bc  e0407001          SUB      r7,r0,r1              ;246
0003c0  e3570000          CMP      r7,#0                 ;247
0003c4  aa000000          BGE      |L1.972|
0003c8  e3a07000          MOV      r7,#0                 ;248
                  |L1.972|
0003cc  e1a00007          MOV      r0,r7                 ;249
0003d0  eaffffd6          B        |L1.816|
;;;251    
                          ENDP

                  yaffs2_wr_checkpt_validity_marker PROC
;;;253    
;;;254    static int yaffs2_wr_checkpt_validity_marker(struct yaffs_dev *dev, int head)
0003d4  e92d407f          PUSH     {r0-r6,lr}
;;;255    {
0003d8  e1a05000          MOV      r5,r0
0003dc  e1a04001          MOV      r4,r1
;;;256    	struct yaffs_checkpt_validity cp;
;;;257    
;;;258    	memset(&cp, 0, sizeof(cp));
0003e0  e3a00000          MOV      r0,#0
0003e4  e58d0000          STR      r0,[sp,#0]
0003e8  e58d0004          STR      r0,[sp,#4]
0003ec  e58d0008          STR      r0,[sp,#8]
0003f0  e58d000c          STR      r0,[sp,#0xc]
;;;259    
;;;260    	cp.struct_type = sizeof(cp);
0003f4  e3a00010          MOV      r0,#0x10
0003f8  e58d0000          STR      r0,[sp,#0]
;;;261    	cp.magic = YAFFS_MAGIC;
0003fc  e59f0c78          LDR      r0,|L1.4220|
000400  e58d0004          STR      r0,[sp,#4]
;;;262    	cp.version = YAFFS_CHECKPOINT_VERSION;
000404  e3a00006          MOV      r0,#6
000408  e58d0008          STR      r0,[sp,#8]
;;;263    	cp.head = (head) ? 1 : 0;
00040c  e3540000          CMP      r4,#0
000410  0a000001          BEQ      |L1.1052|
000414  e3a00001          MOV      r0,#1
000418  ea000000          B        |L1.1056|
                  |L1.1052|
00041c  e3a00000          MOV      r0,#0
                  |L1.1056|
000420  e58d000c          STR      r0,[sp,#0xc]
;;;264    
;;;265    	return (yaffs2_checkpt_wr(dev, &cp, sizeof(cp)) == sizeof(cp)) ? 1 : 0;
000424  e3a02010          MOV      r2,#0x10
000428  e1a0100d          MOV      r1,sp
00042c  e1a00005          MOV      r0,r5
000430  ebfffffe          BL       yaffs2_checkpt_wr
000434  e3500010          CMP      r0,#0x10
000438  1a000002          BNE      |L1.1096|
00043c  e3a00001          MOV      r0,#1
                  |L1.1088|
000440  e28dd010          ADD      sp,sp,#0x10
;;;266    }
000444  e8bd8070          POP      {r4-r6,pc}
                  |L1.1096|
000448  e3a00000          MOV      r0,#0                 ;265
00044c  eafffffb          B        |L1.1088|
;;;267    
                          ENDP

                  yaffs2_rd_checkpt_validity_marker PROC
;;;268    static int yaffs2_rd_checkpt_validity_marker(struct yaffs_dev *dev, int head)
000450  e92d407f          PUSH     {r0-r6,lr}
;;;269    {
000454  e1a06000          MOV      r6,r0
000458  e1a04001          MOV      r4,r1
;;;270    	struct yaffs_checkpt_validity cp;
;;;271    	int ok;
;;;272    
;;;273    	ok = (yaffs2_checkpt_rd(dev, &cp, sizeof(cp)) == sizeof(cp));
00045c  e3a02010          MOV      r2,#0x10
000460  e1a0100d          MOV      r1,sp
000464  e1a00006          MOV      r0,r6
000468  ebfffffe          BL       yaffs2_checkpt_rd
00046c  e3500010          CMP      r0,#0x10
000470  1a000001          BNE      |L1.1148|
000474  e3a00001          MOV      r0,#1
000478  ea000000          B        |L1.1152|
                  |L1.1148|
00047c  e3a00000          MOV      r0,#0
                  |L1.1152|
000480  e1a05000          MOV      r5,r0
;;;274    
;;;275    	if (ok)
000484  e3550000          CMP      r5,#0
000488  0a000015          BEQ      |L1.1252|
;;;276    		ok = (cp.struct_type == sizeof(cp)) &&
00048c  e59d0000          LDR      r0,[sp,#0]
000490  e3500010          CMP      r0,#0x10
000494  1a000010          BNE      |L1.1244|
;;;277    		    (cp.magic == YAFFS_MAGIC) &&
000498  e59d0004          LDR      r0,[sp,#4]
00049c  e59f1bd8          LDR      r1,|L1.4220|
0004a0  e1500001          CMP      r0,r1
0004a4  1a00000c          BNE      |L1.1244|
;;;278    		    (cp.version == YAFFS_CHECKPOINT_VERSION) &&
0004a8  e59d0008          LDR      r0,[sp,#8]
0004ac  e3500006          CMP      r0,#6
0004b0  1a000009          BNE      |L1.1244|
;;;279    		    (cp.head == ((head) ? 1 : 0));
0004b4  e3540000          CMP      r4,#0
0004b8  e59d000c          LDR      r0,[sp,#0xc]
0004bc  0a000001          BEQ      |L1.1224|
0004c0  e3a01001          MOV      r1,#1
0004c4  ea000000          B        |L1.1228|
                  |L1.1224|
0004c8  e3a01000          MOV      r1,#0
                  |L1.1228|
0004cc  e1500001          CMP      r0,r1
0004d0  1a000001          BNE      |L1.1244|
0004d4  e3a00001          MOV      r0,#1
0004d8  ea000000          B        |L1.1248|
                  |L1.1244|
0004dc  e3a00000          MOV      r0,#0
                  |L1.1248|
0004e0  e1a05000          MOV      r5,r0
                  |L1.1252|
;;;280    	return ok ? 1 : 0;
0004e4  e3550000          CMP      r5,#0
0004e8  0a000002          BEQ      |L1.1272|
0004ec  e3a00001          MOV      r0,#1
                  |L1.1264|
0004f0  e28dd010          ADD      sp,sp,#0x10
;;;281    }
0004f4  e8bd8070          POP      {r4-r6,pc}
                  |L1.1272|
0004f8  e3a00000          MOV      r0,#0                 ;280
0004fc  eafffffb          B        |L1.1264|
;;;282    
                          ENDP

                  yaffs2_dev_to_checkpt_dev PROC
;;;283    static void yaffs2_dev_to_checkpt_dev(struct yaffs_checkpt_dev *cp,
000500  e5912128          LDR      r2,[r1,#0x128]
;;;284    				      struct yaffs_dev *dev)
;;;285    {
;;;286    	cp->n_erased_blocks = dev->n_erased_blocks;
000504  e5802004          STR      r2,[r0,#4]
;;;287    	cp->alloc_block = dev->alloc_block;
000508  e591212c          LDR      r2,[r1,#0x12c]
00050c  e5802008          STR      r2,[r0,#8]
;;;288    	cp->alloc_page = dev->alloc_page;
000510  e5912130          LDR      r2,[r1,#0x130]
000514  e580200c          STR      r2,[r0,#0xc]
;;;289    	cp->n_free_chunks = dev->n_free_chunks;
000518  e5912d4c          LDR      r2,[r1,#0xd4c]
00051c  e5802010          STR      r2,[r0,#0x10]
;;;290    
;;;291    	cp->n_deleted_files = dev->n_deleted_files;
000520  e5912da4          LDR      r2,[r1,#0xda4]
000524  e5802014          STR      r2,[r0,#0x14]
;;;292    	cp->n_unlinked_files = dev->n_unlinked_files;
000528  e5912da8          LDR      r2,[r1,#0xda8]
00052c  e5802018          STR      r2,[r0,#0x18]
;;;293    	cp->n_bg_deletions = dev->n_bg_deletions;
000530  e5912dac          LDR      r2,[r1,#0xdac]
000534  e580201c          STR      r2,[r0,#0x1c]
;;;294    	cp->seq_number = dev->seq_number;
000538  e5912df0          LDR      r2,[r1,#0xdf0]
00053c  e5802020          STR      r2,[r0,#0x20]
;;;295    
;;;296    }
000540  e12fff1e          BX       lr
;;;297    
                          ENDP

                  yaffs_checkpt_dev_to_dev PROC
;;;298    static void yaffs_checkpt_dev_to_dev(struct yaffs_dev *dev,
000544  e5912004          LDR      r2,[r1,#4]
;;;299    				     struct yaffs_checkpt_dev *cp)
;;;300    {
;;;301    	dev->n_erased_blocks = cp->n_erased_blocks;
000548  e5802128          STR      r2,[r0,#0x128]
;;;302    	dev->alloc_block = cp->alloc_block;
00054c  e5912008          LDR      r2,[r1,#8]
000550  e580212c          STR      r2,[r0,#0x12c]
;;;303    	dev->alloc_page = cp->alloc_page;
000554  e591200c          LDR      r2,[r1,#0xc]
000558  e5802130          STR      r2,[r0,#0x130]
;;;304    	dev->n_free_chunks = cp->n_free_chunks;
00055c  e5912010          LDR      r2,[r1,#0x10]
000560  e5802d4c          STR      r2,[r0,#0xd4c]
;;;305    
;;;306    	dev->n_deleted_files = cp->n_deleted_files;
000564  e5912014          LDR      r2,[r1,#0x14]
000568  e5802da4          STR      r2,[r0,#0xda4]
;;;307    	dev->n_unlinked_files = cp->n_unlinked_files;
00056c  e5912018          LDR      r2,[r1,#0x18]
000570  e5802da8          STR      r2,[r0,#0xda8]
;;;308    	dev->n_bg_deletions = cp->n_bg_deletions;
000574  e591201c          LDR      r2,[r1,#0x1c]
000578  e5802dac          STR      r2,[r0,#0xdac]
;;;309    	dev->seq_number = cp->seq_number;
00057c  e5912020          LDR      r2,[r1,#0x20]
000580  e5802df0          STR      r2,[r0,#0xdf0]
;;;310    }
000584  e12fff1e          BX       lr
;;;311    
                          ENDP

                  yaffs2_wr_checkpt_dev PROC
;;;312    static int yaffs2_wr_checkpt_dev(struct yaffs_dev *dev)
000588  e92d40f0          PUSH     {r4-r7,lr}
;;;313    {
00058c  e24dd024          SUB      sp,sp,#0x24
000590  e1a04000          MOV      r4,r0
;;;314    	struct yaffs_checkpt_dev cp;
;;;315    	u32 n_bytes;
;;;316    	u32 n_blocks = dev->internal_end_block - dev->internal_start_block + 1;
000594  e59400d4          LDR      r0,[r4,#0xd4]
000598  e59410d0          LDR      r1,[r4,#0xd0]
00059c  e0400001          SUB      r0,r0,r1
0005a0  e2807001          ADD      r7,r0,#1
;;;317    	int ok;
;;;318    
;;;319    	/* Write device runtime values */
;;;320    	yaffs2_dev_to_checkpt_dev(&cp, dev);
0005a4  e1a01004          MOV      r1,r4
0005a8  e1a0000d          MOV      r0,sp
0005ac  ebfffffe          BL       yaffs2_dev_to_checkpt_dev
;;;321    	cp.struct_type = sizeof(cp);
0005b0  e3a00024          MOV      r0,#0x24
0005b4  e58d0000          STR      r0,[sp,#0]
;;;322    
;;;323    	ok = (yaffs2_checkpt_wr(dev, &cp, sizeof(cp)) == sizeof(cp));
0005b8  e3a02024          MOV      r2,#0x24
0005bc  e1a0100d          MOV      r1,sp
0005c0  e1a00004          MOV      r0,r4
0005c4  ebfffffe          BL       yaffs2_checkpt_wr
0005c8  e3500024          CMP      r0,#0x24
0005cc  1a000001          BNE      |L1.1496|
0005d0  e3a00001          MOV      r0,#1
0005d4  ea000000          B        |L1.1500|
                  |L1.1496|
0005d8  e3a00000          MOV      r0,#0
                  |L1.1500|
0005dc  e1a06000          MOV      r6,r0
;;;324    	if (!ok)
0005e0  e3560000          CMP      r6,#0
0005e4  1a000002          BNE      |L1.1524|
;;;325    		return 0;
0005e8  e3a00000          MOV      r0,#0
                  |L1.1516|
0005ec  e28dd024          ADD      sp,sp,#0x24
;;;326    
;;;327    	/* Write block info */
;;;328    	n_bytes = n_blocks * sizeof(struct yaffs_block_info);
;;;329    	ok = (yaffs2_checkpt_wr(dev, dev->block_info, n_bytes) == n_bytes);
;;;330    	if (!ok)
;;;331    		return 0;
;;;332    
;;;333    	/* Write chunk bits */
;;;334    	n_bytes = n_blocks * dev->chunk_bit_stride;
;;;335    	ok = (yaffs2_checkpt_wr(dev, dev->chunk_bits, n_bytes) == n_bytes);
;;;336    
;;;337    	return ok ? 1 : 0;
;;;338    }
0005f0  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1524|
0005f4  e1a05187          LSL      r5,r7,#3              ;328
0005f8  e1a02005          MOV      r2,r5                 ;329
0005fc  e5941118          LDR      r1,[r4,#0x118]        ;329
000600  e1a00004          MOV      r0,r4                 ;329
000604  ebfffffe          BL       yaffs2_checkpt_wr
000608  e1500005          CMP      r0,r5                 ;329
00060c  1a000001          BNE      |L1.1560|
000610  e3a00001          MOV      r0,#1                 ;329
000614  ea000000          B        |L1.1564|
                  |L1.1560|
000618  e3a00000          MOV      r0,#0                 ;329
                  |L1.1564|
00061c  e1a06000          MOV      r6,r0                 ;329
000620  e3560000          CMP      r6,#0                 ;330
000624  1a000001          BNE      |L1.1584|
000628  e3a00000          MOV      r0,#0                 ;331
00062c  eaffffee          B        |L1.1516|
                  |L1.1584|
000630  e5940124          LDR      r0,[r4,#0x124]        ;334
000634  e0050790          MUL      r5,r0,r7              ;334
000638  e1a02005          MOV      r2,r5                 ;335
00063c  e594111c          LDR      r1,[r4,#0x11c]        ;335
000640  e1a00004          MOV      r0,r4                 ;335
000644  ebfffffe          BL       yaffs2_checkpt_wr
000648  e1500005          CMP      r0,r5                 ;335
00064c  1a000001          BNE      |L1.1624|
000650  e3a00001          MOV      r0,#1                 ;335
000654  ea000000          B        |L1.1628|
                  |L1.1624|
000658  e3a00000          MOV      r0,#0                 ;335
                  |L1.1628|
00065c  e1a06000          MOV      r6,r0                 ;335
000660  e3560000          CMP      r6,#0                 ;337
000664  0a000001          BEQ      |L1.1648|
000668  e3a00001          MOV      r0,#1                 ;337
00066c  eaffffde          B        |L1.1516|
                  |L1.1648|
000670  e3a00000          MOV      r0,#0                 ;337
000674  eaffffdc          B        |L1.1516|
;;;339    
                          ENDP

                  yaffs2_rd_checkpt_dev PROC
;;;340    static int yaffs2_rd_checkpt_dev(struct yaffs_dev *dev)
000678  e92d40f0          PUSH     {r4-r7,lr}
;;;341    {
00067c  e24dd024          SUB      sp,sp,#0x24
000680  e1a04000          MOV      r4,r0
;;;342    	struct yaffs_checkpt_dev cp;
;;;343    	u32 n_bytes;
;;;344    	u32 n_blocks =
000684  e59400d4          LDR      r0,[r4,#0xd4]
000688  e59410d0          LDR      r1,[r4,#0xd0]
00068c  e0400001          SUB      r0,r0,r1
000690  e2807001          ADD      r7,r0,#1
;;;345    	    (dev->internal_end_block - dev->internal_start_block + 1);
;;;346    	int ok;
;;;347    
;;;348    	ok = (yaffs2_checkpt_rd(dev, &cp, sizeof(cp)) == sizeof(cp));
000694  e3a02024          MOV      r2,#0x24
000698  e1a0100d          MOV      r1,sp
00069c  e1a00004          MOV      r0,r4
0006a0  ebfffffe          BL       yaffs2_checkpt_rd
0006a4  e3500024          CMP      r0,#0x24
0006a8  1a000001          BNE      |L1.1716|
0006ac  e3a00001          MOV      r0,#1
0006b0  ea000000          B        |L1.1720|
                  |L1.1716|
0006b4  e3a00000          MOV      r0,#0
                  |L1.1720|
0006b8  e1a06000          MOV      r6,r0
;;;349    	if (!ok)
0006bc  e3560000          CMP      r6,#0
0006c0  1a000002          BNE      |L1.1744|
;;;350    		return 0;
0006c4  e3a00000          MOV      r0,#0
                  |L1.1736|
0006c8  e28dd024          ADD      sp,sp,#0x24
;;;351    
;;;352    	if (cp.struct_type != sizeof(cp))
;;;353    		return 0;
;;;354    
;;;355    	yaffs_checkpt_dev_to_dev(dev, &cp);
;;;356    
;;;357    	n_bytes = n_blocks * sizeof(struct yaffs_block_info);
;;;358    
;;;359    	ok = (yaffs2_checkpt_rd(dev, dev->block_info, n_bytes) == n_bytes);
;;;360    
;;;361    	if (!ok)
;;;362    		return 0;
;;;363    
;;;364    	n_bytes = n_blocks * dev->chunk_bit_stride;
;;;365    
;;;366    	ok = (yaffs2_checkpt_rd(dev, dev->chunk_bits, n_bytes) == n_bytes);
;;;367    
;;;368    	return ok ? 1 : 0;
;;;369    }
0006cc  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1744|
0006d0  e59d0000          LDR      r0,[sp,#0]            ;352
0006d4  e3500024          CMP      r0,#0x24              ;352
0006d8  0a000001          BEQ      |L1.1764|
0006dc  e3a00000          MOV      r0,#0                 ;353
0006e0  eafffff8          B        |L1.1736|
                  |L1.1764|
0006e4  e1a0100d          MOV      r1,sp                 ;355
0006e8  e1a00004          MOV      r0,r4                 ;355
0006ec  ebfffffe          BL       yaffs_checkpt_dev_to_dev
0006f0  e1a05187          LSL      r5,r7,#3              ;357
0006f4  e1a02005          MOV      r2,r5                 ;359
0006f8  e5941118          LDR      r1,[r4,#0x118]        ;359
0006fc  e1a00004          MOV      r0,r4                 ;359
000700  ebfffffe          BL       yaffs2_checkpt_rd
000704  e1500005          CMP      r0,r5                 ;359
000708  1a000001          BNE      |L1.1812|
00070c  e3a00001          MOV      r0,#1                 ;359
000710  ea000000          B        |L1.1816|
                  |L1.1812|
000714  e3a00000          MOV      r0,#0                 ;359
                  |L1.1816|
000718  e1a06000          MOV      r6,r0                 ;359
00071c  e3560000          CMP      r6,#0                 ;361
000720  1a000001          BNE      |L1.1836|
000724  e3a00000          MOV      r0,#0                 ;362
000728  eaffffe6          B        |L1.1736|
                  |L1.1836|
00072c  e5940124          LDR      r0,[r4,#0x124]        ;364
000730  e0050790          MUL      r5,r0,r7              ;364
000734  e1a02005          MOV      r2,r5                 ;366
000738  e594111c          LDR      r1,[r4,#0x11c]        ;366
00073c  e1a00004          MOV      r0,r4                 ;366
000740  ebfffffe          BL       yaffs2_checkpt_rd
000744  e1500005          CMP      r0,r5                 ;366
000748  1a000001          BNE      |L1.1876|
00074c  e3a00001          MOV      r0,#1                 ;366
000750  ea000000          B        |L1.1880|
                  |L1.1876|
000754  e3a00000          MOV      r0,#0                 ;366
                  |L1.1880|
000758  e1a06000          MOV      r6,r0                 ;366
00075c  e3560000          CMP      r6,#0                 ;368
000760  0a000001          BEQ      |L1.1900|
000764  e3a00001          MOV      r0,#1                 ;368
000768  eaffffd6          B        |L1.1736|
                  |L1.1900|
00076c  e3a00000          MOV      r0,#0                 ;368
000770  eaffffd4          B        |L1.1736|
;;;370    
                          ENDP

                  yaffs2_obj_checkpt_obj PROC
;;;371    static void yaffs2_obj_checkpt_obj(struct yaffs_checkpt_obj *cp,
000774  e5912030          LDR      r2,[r1,#0x30]
;;;372    				   struct yaffs_obj *obj)
;;;373    {
;;;374    	cp->obj_id = obj->obj_id;
000778  e5802004          STR      r2,[r0,#4]
;;;375    	cp->parent_id = (obj->parent) ? obj->parent->obj_id : 0;
00077c  e591201c          LDR      r2,[r1,#0x1c]
000780  e3520000          CMP      r2,#0
000784  0a000002          BEQ      |L1.1940|
000788  e591201c          LDR      r2,[r1,#0x1c]
00078c  e5922030          LDR      r2,[r2,#0x30]
000790  ea000000          B        |L1.1944|
                  |L1.1940|
000794  e3a02000          MOV      r2,#0
                  |L1.1944|
000798  e5802008          STR      r2,[r0,#8]
;;;376    	cp->hdr_chunk = obj->hdr_chunk;
00079c  e5912028          LDR      r2,[r1,#0x28]
0007a0  e580200c          STR      r2,[r0,#0xc]
;;;377    	cp->variant_type = obj->variant_type;
0007a4  e5d02010          LDRB     r2,[r0,#0x10]
0007a8  e3c22007          BIC      r2,r2,#7
0007ac  e5d13064          LDRB     r3,[r1,#0x64]
0007b0  e2033007          AND      r3,r3,#7
0007b4  e1822003          ORR      r2,r2,r3
0007b8  e5c02010          STRB     r2,[r0,#0x10]
;;;378    	cp->deleted = obj->deleted;
0007bc  e5d02010          LDRB     r2,[r0,#0x10]
0007c0  e3c22008          BIC      r2,r2,#8
0007c4  e5d13000          LDRB     r3,[r1,#0]
0007c8  e3a0c008          MOV      r12,#8
0007cc  e00c3183          AND      r3,r12,r3,LSL #3
0007d0  e1822003          ORR      r2,r2,r3
0007d4  e5c02010          STRB     r2,[r0,#0x10]
;;;379    	cp->soft_del = obj->soft_del;
0007d8  e5d02010          LDRB     r2,[r0,#0x10]
0007dc  e3c22010          BIC      r2,r2,#0x10
0007e0  e5d13000          LDRB     r3,[r1,#0]
0007e4  e1a03f03          LSL      r3,r3,#30
0007e8  e1a03fa3          LSR      r3,r3,#31
0007ec  e3a0c010          MOV      r12,#0x10
0007f0  e00c3203          AND      r3,r12,r3,LSL #4
0007f4  e1822003          ORR      r2,r2,r3
0007f8  e5c02010          STRB     r2,[r0,#0x10]
;;;380    	cp->unlinked = obj->unlinked;
0007fc  e5d02010          LDRB     r2,[r0,#0x10]
000800  e3c22020          BIC      r2,r2,#0x20
000804  e5d13000          LDRB     r3,[r1,#0]
000808  e1a03e83          LSL      r3,r3,#29
00080c  e1a03fa3          LSR      r3,r3,#31
000810  e3a0c020          MOV      r12,#0x20
000814  e00c3283          AND      r3,r12,r3,LSL #5
000818  e1822003          ORR      r2,r2,r3
00081c  e5c02010          STRB     r2,[r0,#0x10]
;;;381    	cp->fake = obj->fake;
000820  e5d02010          LDRB     r2,[r0,#0x10]
000824  e3c22040          BIC      r2,r2,#0x40
000828  e5d13000          LDRB     r3,[r1,#0]
00082c  e1a03e03          LSL      r3,r3,#28
000830  e1a03fa3          LSR      r3,r3,#31
000834  e3a0c040          MOV      r12,#0x40
000838  e00c3303          AND      r3,r12,r3,LSL #6
00083c  e1822003          ORR      r2,r2,r3
000840  e5c02010          STRB     r2,[r0,#0x10]
;;;382    	cp->rename_allowed = obj->rename_allowed;
000844  e5d02010          LDRB     r2,[r0,#0x10]
000848  e3c22080          BIC      r2,r2,#0x80
00084c  e5d13000          LDRB     r3,[r1,#0]
000850  e1a03d83          LSL      r3,r3,#27
000854  e1a03fa3          LSR      r3,r3,#31
000858  e3a0c080          MOV      r12,#0x80
00085c  e00c3383          AND      r3,r12,r3,LSL #7
000860  e1822003          ORR      r2,r2,r3
000864  e5c02010          STRB     r2,[r0,#0x10]
;;;383    	cp->unlink_allowed = obj->unlink_allowed;
000868  e5d12000          LDRB     r2,[r1,#0]
00086c  e1a02d02          LSL      r2,r2,#26
000870  e1a02fa2          LSR      r2,r2,#31
000874  e5c02011          STRB     r2,[r0,#0x11]
;;;384    	cp->serial = obj->serial;
000878  e5d12002          LDRB     r2,[r1,#2]
00087c  e5c02012          STRB     r2,[r0,#0x12]
;;;385    	cp->n_data_chunks = obj->n_data_chunks;
000880  e591202c          LDR      r2,[r1,#0x2c]
000884  e5802014          STR      r2,[r0,#0x14]
;;;386    
;;;387    	if (obj->variant_type == YAFFS_OBJECT_TYPE_FILE)
000888  e5d12064          LDRB     r2,[r1,#0x64]
00088c  e3520001          CMP      r2,#1
000890  1a000002          BNE      |L1.2208|
;;;388    		cp->size_or_equiv_obj = obj->variant.file_variant.file_size;
000894  e1c126d8          LDRD     r2,r3,[r1,#0x68]
000898  e1c021f8          STRD     r2,r3,[r0,#0x18]
00089c  ea000005          B        |L1.2232|
                  |L1.2208|
;;;389    	else if (obj->variant_type == YAFFS_OBJECT_TYPE_HARDLINK)
0008a0  e5d12064          LDRB     r2,[r1,#0x64]
0008a4  e3520004          CMP      r2,#4
0008a8  1a000002          BNE      |L1.2232|
;;;390    		cp->size_or_equiv_obj = obj->variant.hardlink_variant.equiv_id;
0008ac  e3a03000          MOV      r3,#0
0008b0  e591206c          LDR      r2,[r1,#0x6c]
0008b4  e1c021f8          STRD     r2,r3,[r0,#0x18]
                  |L1.2232|
;;;391    }
0008b8  e12fff1e          BX       lr
;;;392    
                          ENDP

                  yaffs2_checkpt_obj_to_obj PROC
;;;393    static int yaffs2_checkpt_obj_to_obj(struct yaffs_obj *obj,
0008bc  e92d407c          PUSH     {r2-r6,lr}
;;;394    				     struct yaffs_checkpt_obj *cp)
;;;395    {
0008c0  e1a04000          MOV      r4,r0
0008c4  e1a05001          MOV      r5,r1
;;;396    	struct yaffs_obj *parent;
;;;397    
;;;398    	if (obj->variant_type != cp->variant_type) {
0008c8  e5d40064          LDRB     r0,[r4,#0x64]
0008cc  e5d51010          LDRB     r1,[r5,#0x10]
0008d0  e2011007          AND      r1,r1,#7
0008d4  e1500001          CMP      r0,r1
0008d8  0a00000d          BEQ      |L1.2324|
;;;399    		yaffs_trace(YAFFS_TRACE_ERROR,
0008dc  e59f0790          LDR      r0,|L1.4212|
0008e0  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
0008e4  e3100101          TST      r0,#0x40000000
0008e8  0a000007          BEQ      |L1.2316|
0008ec  e5d40064          LDRB     r0,[r4,#0x64]
0008f0  e58d0000          STR      r0,[sp,#0]
0008f4  e595300c          LDR      r3,[r5,#0xc]
0008f8  e5d50010          LDRB     r0,[r5,#0x10]
0008fc  e2002007          AND      r2,r0,#7
000900  e59f0778          LDR      r0,|L1.4224|
000904  e5951004          LDR      r1,[r5,#4]
000908  ebfffffe          BL       sysprintf
                  |L1.2316|
;;;400    			"Checkpoint read object %d type %d chunk %d does not match existing object type %d",
;;;401    			cp->obj_id, cp->variant_type, cp->hdr_chunk,
;;;402    			obj->variant_type);
;;;403    		return 0;
00090c  e3a00000          MOV      r0,#0
                  |L1.2320|
;;;404    	}
;;;405    
;;;406    	obj->obj_id = cp->obj_id;
;;;407    
;;;408    	if (cp->parent_id)
;;;409    		parent = yaffs_find_or_create_by_number(obj->my_dev,
;;;410    						cp->parent_id,
;;;411    						YAFFS_OBJECT_TYPE_DIRECTORY);
;;;412    	else
;;;413    		parent = NULL;
;;;414    
;;;415    	if (parent) {
;;;416    		if (parent->variant_type != YAFFS_OBJECT_TYPE_DIRECTORY) {
;;;417    			yaffs_trace(YAFFS_TRACE_ALWAYS,
;;;418    				"Checkpoint read object %d parent %d type %d chunk %d Parent type, %d, not directory",
;;;419    				cp->obj_id, cp->parent_id,
;;;420    				cp->variant_type, cp->hdr_chunk,
;;;421    				parent->variant_type);
;;;422    			return 0;
;;;423    		}
;;;424    		yaffs_add_obj_to_dir(parent, obj);
;;;425    	}
;;;426    
;;;427    	obj->hdr_chunk = cp->hdr_chunk;
;;;428    	obj->variant_type = cp->variant_type;
;;;429    	obj->deleted = cp->deleted;
;;;430    	obj->soft_del = cp->soft_del;
;;;431    	obj->unlinked = cp->unlinked;
;;;432    	obj->fake = cp->fake;
;;;433    	obj->rename_allowed = cp->rename_allowed;
;;;434    	obj->unlink_allowed = cp->unlink_allowed;
;;;435    	obj->serial = cp->serial;
;;;436    	obj->n_data_chunks = cp->n_data_chunks;
;;;437    
;;;438    	if (obj->variant_type == YAFFS_OBJECT_TYPE_FILE)
;;;439    		obj->variant.file_variant.file_size = cp->size_or_equiv_obj;
;;;440    	else if (obj->variant_type == YAFFS_OBJECT_TYPE_HARDLINK)
;;;441    		obj->variant.hardlink_variant.equiv_id = cp->size_or_equiv_obj;
;;;442    
;;;443    	if (obj->hdr_chunk > 0)
;;;444    		obj->lazy_loaded = 1;
;;;445    	return 1;
;;;446    }
000910  e8bd807c          POP      {r2-r6,pc}
                  |L1.2324|
000914  e5950004          LDR      r0,[r5,#4]            ;406
000918  e5840030          STR      r0,[r4,#0x30]         ;406
00091c  e5950008          LDR      r0,[r5,#8]            ;408
000920  e3500000          CMP      r0,#0                 ;408
000924  0a000005          BEQ      |L1.2368|
000928  e5951008          LDR      r1,[r5,#8]            ;409
00092c  e3a02003          MOV      r2,#3                 ;409
000930  e5940008          LDR      r0,[r4,#8]            ;409
000934  ebfffffe          BL       yaffs_find_or_create_by_number
000938  e1a06000          MOV      r6,r0                 ;409
00093c  ea000000          B        |L1.2372|
                  |L1.2368|
000940  e3a06000          MOV      r6,#0                 ;413
                  |L1.2372|
000944  e3560000          CMP      r6,#0                 ;415
000948  0a000014          BEQ      |L1.2464|
00094c  e5d60064          LDRB     r0,[r6,#0x64]         ;416
000950  e3500003          CMP      r0,#3                 ;416
000954  0a00000e          BEQ      |L1.2452|
000958  e59f0714          LDR      r0,|L1.4212|
00095c  e5900000          LDR      r0,[r0,#0]            ;417  ; yaffs_trace_mask
000960  e310020f          TST      r0,#0xf0000000        ;417
000964  0a000008          BEQ      |L1.2444|
000968  e5d60064          LDRB     r0,[r6,#0x64]         ;417
00096c  e595100c          LDR      r1,[r5,#0xc]          ;417
000970  e58d0004          STR      r0,[sp,#4]            ;417
000974  e58d1000          STR      r1,[sp,#0]            ;417
000978  e5d50010          LDRB     r0,[r5,#0x10]         ;417
00097c  e2003007          AND      r3,r0,#7              ;417
000980  e59f06fc          LDR      r0,|L1.4228|
000984  e9950006          LDMIB    r5,{r1,r2}            ;417
000988  ebfffffe          BL       sysprintf
                  |L1.2444|
00098c  e3a00000          MOV      r0,#0                 ;422
000990  eaffffde          B        |L1.2320|
                  |L1.2452|
000994  e1a01004          MOV      r1,r4                 ;424
000998  e1a00006          MOV      r0,r6                 ;424
00099c  ebfffffe          BL       yaffs_add_obj_to_dir
                  |L1.2464|
0009a0  e595000c          LDR      r0,[r5,#0xc]          ;427
0009a4  e5840028          STR      r0,[r4,#0x28]         ;427
0009a8  e5d50010          LDRB     r0,[r5,#0x10]         ;428
0009ac  e2000007          AND      r0,r0,#7              ;428
0009b0  e5c40064          STRB     r0,[r4,#0x64]         ;428
0009b4  e5d40000          LDRB     r0,[r4,#0]            ;429
0009b8  e3c00001          BIC      r0,r0,#1              ;429
0009bc  e5d51010          LDRB     r1,[r5,#0x10]         ;429
0009c0  e1a01e01          LSL      r1,r1,#28             ;429
0009c4  e3a02001          MOV      r2,#1                 ;429
0009c8  e0021fa1          AND      r1,r2,r1,LSR #31      ;429
0009cc  e1800001          ORR      r0,r0,r1              ;429
0009d0  e5c40000          STRB     r0,[r4,#0]            ;429
0009d4  e5d40000          LDRB     r0,[r4,#0]            ;430
0009d8  e3c00002          BIC      r0,r0,#2              ;430
0009dc  e5d51010          LDRB     r1,[r5,#0x10]         ;430
0009e0  e1a01d81          LSL      r1,r1,#27             ;430
0009e4  e1a01fa1          LSR      r1,r1,#31             ;430
0009e8  e3a02002          MOV      r2,#2                 ;430
0009ec  e0021081          AND      r1,r2,r1,LSL #1       ;430
0009f0  e1800001          ORR      r0,r0,r1              ;430
0009f4  e5c40000          STRB     r0,[r4,#0]            ;430
0009f8  e5d40000          LDRB     r0,[r4,#0]            ;431
0009fc  e3c00004          BIC      r0,r0,#4              ;431
000a00  e5d51010          LDRB     r1,[r5,#0x10]         ;431
000a04  e1a01d01          LSL      r1,r1,#26             ;431
000a08  e1a01fa1          LSR      r1,r1,#31             ;431
000a0c  e3a02004          MOV      r2,#4                 ;431
000a10  e0021101          AND      r1,r2,r1,LSL #2       ;431
000a14  e1800001          ORR      r0,r0,r1              ;431
000a18  e5c40000          STRB     r0,[r4,#0]            ;431
000a1c  e5d40000          LDRB     r0,[r4,#0]            ;432
000a20  e3c00008          BIC      r0,r0,#8              ;432
000a24  e5d51010          LDRB     r1,[r5,#0x10]         ;432
000a28  e1a01c81          LSL      r1,r1,#25             ;432
000a2c  e1a01fa1          LSR      r1,r1,#31             ;432
000a30  e3a02008          MOV      r2,#8                 ;432
000a34  e0021181          AND      r1,r2,r1,LSL #3       ;432
000a38  e1800001          ORR      r0,r0,r1              ;432
000a3c  e5c40000          STRB     r0,[r4,#0]            ;432
000a40  e5d40000          LDRB     r0,[r4,#0]            ;433
000a44  e3c00010          BIC      r0,r0,#0x10           ;433
000a48  e5d51010          LDRB     r1,[r5,#0x10]         ;433
000a4c  e1a01c01          LSL      r1,r1,#24             ;433
000a50  e1a01fa1          LSR      r1,r1,#31             ;433
000a54  e3a02010          MOV      r2,#0x10              ;433
000a58  e0021201          AND      r1,r2,r1,LSL #4       ;433
000a5c  e1800001          ORR      r0,r0,r1              ;433
000a60  e5c40000          STRB     r0,[r4,#0]            ;433
000a64  e5d40000          LDRB     r0,[r4,#0]            ;434
000a68  e3c00020          BIC      r0,r0,#0x20           ;434
000a6c  e5d51011          LDRB     r1,[r5,#0x11]         ;434
000a70  e3a02020          MOV      r2,#0x20              ;434
000a74  e0021281          AND      r1,r2,r1,LSL #5       ;434
000a78  e1800001          ORR      r0,r0,r1              ;434
000a7c  e5c40000          STRB     r0,[r4,#0]            ;434
000a80  e5d50012          LDRB     r0,[r5,#0x12]         ;435
000a84  e5c40002          STRB     r0,[r4,#2]            ;435
000a88  e5950014          LDR      r0,[r5,#0x14]         ;436
000a8c  e584002c          STR      r0,[r4,#0x2c]         ;436
000a90  e5d40064          LDRB     r0,[r4,#0x64]         ;438
000a94  e3500001          CMP      r0,#1                 ;438
000a98  1a000002          BNE      |L1.2728|
000a9c  e1c501d8          LDRD     r0,r1,[r5,#0x18]      ;439
000aa0  e1c406f8          STRD     r0,r1,[r4,#0x68]      ;439
000aa4  ea000004          B        |L1.2748|
                  |L1.2728|
000aa8  e5d40064          LDRB     r0,[r4,#0x64]         ;440
000aac  e3500004          CMP      r0,#4                 ;440
000ab0  1a000001          BNE      |L1.2748|
000ab4  e5950018          LDR      r0,[r5,#0x18]         ;441
000ab8  e584006c          STR      r0,[r4,#0x6c]         ;441
                  |L1.2748|
000abc  e5940028          LDR      r0,[r4,#0x28]         ;443
000ac0  e3500000          CMP      r0,#0                 ;443
000ac4  da000002          BLE      |L1.2772|
000ac8  e5d40001          LDRB     r0,[r4,#1]            ;444
000acc  e3800001          ORR      r0,r0,#1              ;444
000ad0  e5c40001          STRB     r0,[r4,#1]            ;444
                  |L1.2772|
000ad4  e3a00001          MOV      r0,#1                 ;445
000ad8  eaffff8c          B        |L1.2320|
;;;447    
                          ENDP

                  yaffs2_checkpt_tnode_worker PROC
;;;448    static int yaffs2_checkpt_tnode_worker(struct yaffs_obj *in,
000adc  e92d4ff8          PUSH     {r3-r11,lr}
;;;449    				       struct yaffs_tnode *tn, u32 level,
;;;450    				       int chunk_offset)
;;;451    {
000ae0  e1a0a000          MOV      r10,r0
000ae4  e1a05001          MOV      r5,r1
000ae8  e1a06002          MOV      r6,r2
000aec  e1a07003          MOV      r7,r3
;;;452    	int i;
;;;453    	struct yaffs_dev *dev = in->my_dev;
000af0  e59a8008          LDR      r8,[r10,#8]
;;;454    	int ok = 1;
000af4  e3a09001          MOV      r9,#1
;;;455    	u32 base_offset;
;;;456    
;;;457    	if (!tn)
000af8  e3550000          CMP      r5,#0
000afc  1a000001          BNE      |L1.2824|
;;;458    		return 1;
000b00  e3a00001          MOV      r0,#1
                  |L1.2820|
;;;459    
;;;460    	if (level > 0) {
;;;461    		for (i = 0; i < YAFFS_NTNODES_INTERNAL && ok; i++) {
;;;462    			if (!tn->internal[i])
;;;463    				continue;
;;;464    			ok = yaffs2_checkpt_tnode_worker(in,
;;;465    				 tn->internal[i],
;;;466    				 level - 1,
;;;467    				 (chunk_offset <<
;;;468    				  YAFFS_TNODES_INTERNAL_BITS) + i);
;;;469    		}
;;;470    		return ok;
;;;471    	}
;;;472    
;;;473    	/* Level 0 tnode */
;;;474    	base_offset = chunk_offset << YAFFS_TNODES_LEVEL0_BITS;
;;;475    	ok = (yaffs2_checkpt_wr(dev, &base_offset, sizeof(base_offset)) ==
;;;476    			sizeof(base_offset));
;;;477    	if (ok)
;;;478    		ok = (yaffs2_checkpt_wr(dev, tn, dev->tnode_size) ==
;;;479    			dev->tnode_size);
;;;480    
;;;481    	return ok;
;;;482    }
000b04  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.2824|
000b08  e3560000          CMP      r6,#0                 ;460
000b0c  0a000013          BEQ      |L1.2912|
000b10  e3a04000          MOV      r4,#0                 ;461
000b14  ea00000b          B        |L1.2888|
                  |L1.2840|
000b18  e7950104          LDR      r0,[r5,r4,LSL #2]     ;462
000b1c  e3500000          CMP      r0,#0                 ;462
000b20  1a000000          BNE      |L1.2856|
000b24  ea000006          B        |L1.2884|
                  |L1.2856|
000b28  e0843187          ADD      r3,r4,r7,LSL #3       ;464
000b2c  e2462001          SUB      r2,r6,#1              ;464
000b30  e7951104          LDR      r1,[r5,r4,LSL #2]     ;464
000b34  e1a0000a          MOV      r0,r10                ;464
000b38  ebfffffe          BL       yaffs2_checkpt_tnode_worker
000b3c  e1a09000          MOV      r9,r0                 ;464
000b40  e1a00000          MOV      r0,r0                 ;463
                  |L1.2884|
000b44  e2844001          ADD      r4,r4,#1              ;461
                  |L1.2888|
000b48  e3540008          CMP      r4,#8                 ;461
000b4c  aa000001          BGE      |L1.2904|
000b50  e3590000          CMP      r9,#0                 ;461
000b54  1affffef          BNE      |L1.2840|
                  |L1.2904|
000b58  e1a00009          MOV      r0,r9                 ;470
000b5c  eaffffe8          B        |L1.2820|
                  |L1.2912|
000b60  e1a00207          LSL      r0,r7,#4              ;474
000b64  e58d0000          STR      r0,[sp,#0]            ;474
000b68  e3a02004          MOV      r2,#4                 ;475
000b6c  e1a0100d          MOV      r1,sp                 ;475
000b70  e1a00008          MOV      r0,r8                 ;475
000b74  ebfffffe          BL       yaffs2_checkpt_wr
000b78  e3500004          CMP      r0,#4                 ;475
000b7c  1a000001          BNE      |L1.2952|
000b80  e3a00001          MOV      r0,#1                 ;475
000b84  ea000000          B        |L1.2956|
                  |L1.2952|
000b88  e3a00000          MOV      r0,#0                 ;475
                  |L1.2956|
000b8c  e1a09000          MOV      r9,r0                 ;475
000b90  e3590000          CMP      r9,#0                 ;477
000b94  0a00000a          BEQ      |L1.3012|
000b98  e1a01005          MOV      r1,r5                 ;478
000b9c  e59820b4          LDR      r2,[r8,#0xb4]         ;478
000ba0  e1a00008          MOV      r0,r8                 ;478
000ba4  ebfffffe          BL       yaffs2_checkpt_wr
000ba8  e59810b4          LDR      r1,[r8,#0xb4]         ;478
000bac  e1500001          CMP      r0,r1                 ;478
000bb0  1a000001          BNE      |L1.3004|
000bb4  e3a00001          MOV      r0,#1                 ;478
000bb8  ea000000          B        |L1.3008|
                  |L1.3004|
000bbc  e3a00000          MOV      r0,#0                 ;478
                  |L1.3008|
000bc0  e1a09000          MOV      r9,r0                 ;478
                  |L1.3012|
000bc4  e1a00009          MOV      r0,r9                 ;481
000bc8  eaffffcd          B        |L1.2820|
;;;483    
                          ENDP

                  yaffs2_wr_checkpt_tnodes PROC
;;;484    static int yaffs2_wr_checkpt_tnodes(struct yaffs_obj *obj)
000bcc  e92d4038          PUSH     {r3-r5,lr}
;;;485    {
000bd0  e1a04000          MOV      r4,r0
;;;486    	u32 end_marker = ~0;
000bd4  e3e00000          MVN      r0,#0
000bd8  e58d0000          STR      r0,[sp,#0]
;;;487    	int ok = 1;
000bdc  e3a05001          MOV      r5,#1
;;;488    
;;;489    	if (obj->variant_type != YAFFS_OBJECT_TYPE_FILE)
000be0  e5d40064          LDRB     r0,[r4,#0x64]
000be4  e3500001          CMP      r0,#1
000be8  0a000001          BEQ      |L1.3060|
;;;490    		return ok;
000bec  e1a00005          MOV      r0,r5
                  |L1.3056|
;;;491    
;;;492    	ok = yaffs2_checkpt_tnode_worker(obj,
;;;493    					 obj->variant.file_variant.top,
;;;494    					 obj->variant.file_variant.
;;;495    					 top_level, 0);
;;;496    	if (ok)
;;;497    		ok = (yaffs2_checkpt_wr(obj->my_dev, &end_marker,
;;;498    				sizeof(end_marker)) == sizeof(end_marker));
;;;499    
;;;500    	return ok ? 1 : 0;
;;;501    }
000bf0  e8bd8038          POP      {r3-r5,pc}
                  |L1.3060|
000bf4  e3a03000          MOV      r3,#0                 ;492
000bf8  e5941084          LDR      r1,[r4,#0x84]         ;492
000bfc  e5942080          LDR      r2,[r4,#0x80]         ;492
000c00  e1a00004          MOV      r0,r4                 ;492
000c04  ebfffffe          BL       yaffs2_checkpt_tnode_worker
000c08  e1a05000          MOV      r5,r0                 ;492
000c0c  e3550000          CMP      r5,#0                 ;496
000c10  0a000009          BEQ      |L1.3132|
000c14  e3a02004          MOV      r2,#4                 ;497
000c18  e1a0100d          MOV      r1,sp                 ;497
000c1c  e5940008          LDR      r0,[r4,#8]            ;497
000c20  ebfffffe          BL       yaffs2_checkpt_wr
000c24  e3500004          CMP      r0,#4                 ;497
000c28  1a000001          BNE      |L1.3124|
000c2c  e3a00001          MOV      r0,#1                 ;497
000c30  ea000000          B        |L1.3128|
                  |L1.3124|
000c34  e3a00000          MOV      r0,#0                 ;497
                  |L1.3128|
000c38  e1a05000          MOV      r5,r0                 ;497
                  |L1.3132|
000c3c  e3550000          CMP      r5,#0                 ;500
000c40  0a000001          BEQ      |L1.3148|
000c44  e3a00001          MOV      r0,#1                 ;500
000c48  eaffffe8          B        |L1.3056|
                  |L1.3148|
000c4c  e3a00000          MOV      r0,#0                 ;500
000c50  eaffffe6          B        |L1.3056|
;;;502    
                          ENDP

                  yaffs2_rd_checkpt_tnodes PROC
;;;503    static int yaffs2_rd_checkpt_tnodes(struct yaffs_obj *obj)
000c54  e92d43f8          PUSH     {r3-r9,lr}
;;;504    {
000c58  e1a06000          MOV      r6,r0
;;;505    	u32 base_chunk;
;;;506    	int ok = 1;
000c5c  e3a05001          MOV      r5,#1
;;;507    	struct yaffs_dev *dev = obj->my_dev;
000c60  e5967008          LDR      r7,[r6,#8]
;;;508    	struct yaffs_file_var *file_stuct_ptr = &obj->variant.file_variant;
000c64  e2869068          ADD      r9,r6,#0x68
;;;509    	struct yaffs_tnode *tn;
;;;510    	int nread = 0;
000c68  e3a08000          MOV      r8,#0
;;;511    
;;;512    	ok = (yaffs2_checkpt_rd(dev, &base_chunk, sizeof(base_chunk)) ==
000c6c  e3a02004          MOV      r2,#4
000c70  e1a0100d          MOV      r1,sp
000c74  e1a00007          MOV      r0,r7
000c78  ebfffffe          BL       yaffs2_checkpt_rd
000c7c  e3500004          CMP      r0,#4
000c80  1a000001          BNE      |L1.3212|
000c84  e3a00001          MOV      r0,#1
000c88  ea000000          B        |L1.3216|
                  |L1.3212|
000c8c  e3a00000          MOV      r0,#0
                  |L1.3216|
000c90  e1a05000          MOV      r5,r0
;;;513    	      sizeof(base_chunk));
;;;514    
;;;515    	while (ok && (~base_chunk)) {
000c94  ea00002d          B        |L1.3408|
                  |L1.3224|
;;;516    		nread++;
000c98  e2888001          ADD      r8,r8,#1
;;;517    		/* Read level 0 tnode */
;;;518    
;;;519    		tn = yaffs_get_tnode(dev);
000c9c  e1a00007          MOV      r0,r7
000ca0  ebfffffe          BL       yaffs_get_tnode
000ca4  e1a04000          MOV      r4,r0
;;;520    		if (tn)
000ca8  e3540000          CMP      r4,#0
000cac  0a00000b          BEQ      |L1.3296|
;;;521    			ok = (yaffs2_checkpt_rd(dev, tn, dev->tnode_size) ==
000cb0  e1a01004          MOV      r1,r4
000cb4  e59720b4          LDR      r2,[r7,#0xb4]
000cb8  e1a00007          MOV      r0,r7
000cbc  ebfffffe          BL       yaffs2_checkpt_rd
000cc0  e59710b4          LDR      r1,[r7,#0xb4]
000cc4  e1500001          CMP      r0,r1
000cc8  1a000001          BNE      |L1.3284|
000ccc  e3a00001          MOV      r0,#1
000cd0  ea000000          B        |L1.3288|
                  |L1.3284|
000cd4  e3a00000          MOV      r0,#0
                  |L1.3288|
000cd8  e1a05000          MOV      r5,r0
000cdc  ea000000          B        |L1.3300|
                  |L1.3296|
;;;522    				dev->tnode_size);
;;;523    		else
;;;524    			ok = 0;
000ce0  e3a05000          MOV      r5,#0
                  |L1.3300|
;;;525    
;;;526    		if (tn && ok)
000ce4  e3540000          CMP      r4,#0
000ce8  0a00000c          BEQ      |L1.3360|
000cec  e3550000          CMP      r5,#0
000cf0  0a00000a          BEQ      |L1.3360|
;;;527    			ok = yaffs_add_find_tnode_0(dev,
000cf4  e1a03004          MOV      r3,r4
000cf8  e1a01009          MOV      r1,r9
000cfc  e1a00007          MOV      r0,r7
000d00  e59d2000          LDR      r2,[sp,#0]
000d04  ebfffffe          BL       yaffs_add_find_tnode_0
000d08  e3500000          CMP      r0,#0
000d0c  0a000001          BEQ      |L1.3352|
;;;528    						    file_stuct_ptr,
;;;529    						    base_chunk, tn) ? 1 : 0;
000d10  e3a00001          MOV      r0,#1
000d14  ea000000          B        |L1.3356|
                  |L1.3352|
000d18  e3a00000          MOV      r0,#0
                  |L1.3356|
000d1c  e1a05000          MOV      r5,r0
                  |L1.3360|
;;;530    
;;;531    		if (ok)
000d20  e3550000          CMP      r5,#0
000d24  0a000009          BEQ      |L1.3408|
;;;532    			ok = (yaffs2_checkpt_rd
000d28  e3a02004          MOV      r2,#4
000d2c  e1a0100d          MOV      r1,sp
000d30  e1a00007          MOV      r0,r7
000d34  ebfffffe          BL       yaffs2_checkpt_rd
000d38  e3500004          CMP      r0,#4
000d3c  1a000001          BNE      |L1.3400|
000d40  e3a00001          MOV      r0,#1
000d44  ea000000          B        |L1.3404|
                  |L1.3400|
000d48  e3a00000          MOV      r0,#0
                  |L1.3404|
000d4c  e1a05000          MOV      r5,r0
                  |L1.3408|
000d50  e3550000          CMP      r5,#0                 ;515
000d54  0a000002          BEQ      |L1.3428|
000d58  e59d0000          LDR      r0,[sp,#0]            ;515
000d5c  e1f00000          MVNS     r0,r0                 ;515
000d60  1affffcc          BNE      |L1.3224|
                  |L1.3428|
;;;533    			      (dev, &base_chunk,
;;;534    			       sizeof(base_chunk)) == sizeof(base_chunk));
;;;535    	}
;;;536    
;;;537    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000d64  e59f0308          LDR      r0,|L1.4212|
000d68  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000d6c  e3100902          TST      r0,#0x8000
000d70  0a000004          BEQ      |L1.3464|
000d74  e1a03005          MOV      r3,r5
000d78  e1a01008          MOV      r1,r8
000d7c  e28f0fc1          ADR      r0,|L1.4232|
000d80  e59d2000          LDR      r2,[sp,#0]
000d84  ebfffffe          BL       sysprintf
                  |L1.3464|
;;;538    		"Checkpoint read tnodes %d records, last %d. ok %d",
;;;539    		nread, base_chunk, ok);
;;;540    
;;;541    	return ok ? 1 : 0;
000d88  e3550000          CMP      r5,#0
000d8c  0a000001          BEQ      |L1.3480|
000d90  e3a00001          MOV      r0,#1
                  |L1.3476|
;;;542    }
000d94  e8bd83f8          POP      {r3-r9,pc}
                  |L1.3480|
000d98  e3a00000          MOV      r0,#0                 ;541
000d9c  eafffffc          B        |L1.3476|
;;;543    
                          ENDP

                  yaffs2_wr_checkpt_objs PROC
;;;544    static int yaffs2_wr_checkpt_objs(struct yaffs_dev *dev)
000da0  e92d41f0          PUSH     {r4-r8,lr}
;;;545    {
000da4  e24dd028          SUB      sp,sp,#0x28
000da8  e1a07000          MOV      r7,r0
;;;546    	struct yaffs_obj *obj;
;;;547    	struct yaffs_checkpt_obj cp;
;;;548    	int i;
;;;549    	int ok = 1;
000dac  e3a06001          MOV      r6,#1
;;;550    	struct list_head *lh;
;;;551    
;;;552    	/* Iterate through the objects in each hash entry,
;;;553    	 * dumping them to the checkpointing stream.
;;;554    	 */
;;;555    
;;;556    	for (i = 0; ok && i < YAFFS_NOBJECT_BUCKETS; i++) {
000db0  e3a05000          MOV      r5,#0
000db4  ea000032          B        |L1.3716|
                  |L1.3512|
;;;557    		list_for_each(lh, &dev->obj_bucket[i].list) {
000db8  e0850085          ADD      r0,r5,r5,LSL #1
000dbc  e2871f52          ADD      r1,r7,#0x148
000dc0  e7918100          LDR      r8,[r1,r0,LSL #2]
000dc4  ea000028          B        |L1.3692|
                  |L1.3528|
;;;558    			obj = list_entry(lh, struct yaffs_obj, hash_link);
000dc8  e248400c          SUB      r4,r8,#0xc
;;;559    			if (!obj->defered_free) {
000dcc  e5d40001          LDRB     r0,[r4,#1]
000dd0  e1a00f00          LSL      r0,r0,#30
000dd4  e1b00fa0          LSRS     r0,r0,#31
000dd8  1a000022          BNE      |L1.3688|
;;;560    				yaffs2_obj_checkpt_obj(&cp, obj);
000ddc  e1a01004          MOV      r1,r4
000de0  e28d0008          ADD      r0,sp,#8
000de4  ebfffffe          BL       yaffs2_obj_checkpt_obj
;;;561    				cp.struct_type = sizeof(cp);
000de8  e3a00020          MOV      r0,#0x20
000dec  e58d0008          STR      r0,[sp,#8]
;;;562    
;;;563    				yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000df0  e59f027c          LDR      r0,|L1.4212|
000df4  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000df8  e3100902          TST      r0,#0x8000
000dfc  0a000007          BEQ      |L1.3616|
000e00  e59d0014          LDR      r0,[sp,#0x14]
000e04  e88d0011          STM      sp,{r0,r4}
000e08  e5dd0018          LDRB     r0,[sp,#0x18]
000e0c  e2003007          AND      r3,r0,#7
000e10  e59f02ac          LDR      r0,|L1.4292|
000e14  e59d100c          LDR      r1,[sp,#0xc]
000e18  e59d2010          LDR      r2,[sp,#0x10]
000e1c  ebfffffe          BL       sysprintf
                  |L1.3616|
;;;564    					"Checkpoint write object %d parent %d type %d chunk %d obj addr %p",
;;;565    					cp.obj_id, cp.parent_id,
;;;566    					cp.variant_type, cp.hdr_chunk, obj);
;;;567    
;;;568    				ok = (yaffs2_checkpt_wr(dev, &cp,
000e20  e3a02020          MOV      r2,#0x20
000e24  e28d1008          ADD      r1,sp,#8
000e28  e1a00007          MOV      r0,r7
000e2c  ebfffffe          BL       yaffs2_checkpt_wr
000e30  e3500020          CMP      r0,#0x20
000e34  1a000001          BNE      |L1.3648|
000e38  e3a00001          MOV      r0,#1
000e3c  ea000000          B        |L1.3652|
                  |L1.3648|
000e40  e3a00000          MOV      r0,#0
                  |L1.3652|
000e44  e1a06000          MOV      r6,r0
;;;569    						sizeof(cp)) == sizeof(cp));
;;;570    
;;;571    				if (ok &&
000e48  e3560000          CMP      r6,#0
000e4c  0a000005          BEQ      |L1.3688|
;;;572    					obj->variant_type ==
000e50  e5d40064          LDRB     r0,[r4,#0x64]
000e54  e3500001          CMP      r0,#1
000e58  1a000002          BNE      |L1.3688|
;;;573    					YAFFS_OBJECT_TYPE_FILE)
;;;574    					ok = yaffs2_wr_checkpt_tnodes(obj);
000e5c  e1a00004          MOV      r0,r4
000e60  ebfffffe          BL       yaffs2_wr_checkpt_tnodes
000e64  e1a06000          MOV      r6,r0
                  |L1.3688|
000e68  e5988000          LDR      r8,[r8,#0]            ;557
                  |L1.3692|
000e6c  e0850085          ADD      r0,r5,r5,LSL #1       ;557
000e70  e2871f52          ADD      r1,r7,#0x148          ;557
000e74  e0810100          ADD      r0,r1,r0,LSL #2       ;557
000e78  e1500008          CMP      r0,r8                 ;557
000e7c  1affffd1          BNE      |L1.3528|
000e80  e2855001          ADD      r5,r5,#1              ;556
                  |L1.3716|
000e84  e3560000          CMP      r6,#0                 ;556
000e88  0a000001          BEQ      |L1.3732|
000e8c  e3550c01          CMP      r5,#0x100             ;556
000e90  baffffc8          BLT      |L1.3512|
                  |L1.3732|
;;;575    			}
;;;576    		}
;;;577    	}
;;;578    
;;;579    	/* Dump end of list */
;;;580    	memset(&cp, 0xff, sizeof(struct yaffs_checkpt_obj));
000e94  e3a020ff          MOV      r2,#0xff
000e98  e3a01020          MOV      r1,#0x20
000e9c  e28d0008          ADD      r0,sp,#8
000ea0  ebfffffe          BL       __aeabi_memset
;;;581    	cp.struct_type = sizeof(cp);
000ea4  e3a00020          MOV      r0,#0x20
000ea8  e58d0008          STR      r0,[sp,#8]
;;;582    
;;;583    	if (ok)
000eac  e3560000          CMP      r6,#0
000eb0  0a000009          BEQ      |L1.3804|
;;;584    		ok = (yaffs2_checkpt_wr(dev, &cp, sizeof(cp)) == sizeof(cp));
000eb4  e3a02020          MOV      r2,#0x20
000eb8  e28d1008          ADD      r1,sp,#8
000ebc  e1a00007          MOV      r0,r7
000ec0  ebfffffe          BL       yaffs2_checkpt_wr
000ec4  e3500020          CMP      r0,#0x20
000ec8  1a000001          BNE      |L1.3796|
000ecc  e3a00001          MOV      r0,#1
000ed0  ea000000          B        |L1.3800|
                  |L1.3796|
000ed4  e3a00000          MOV      r0,#0
                  |L1.3800|
000ed8  e1a06000          MOV      r6,r0
                  |L1.3804|
;;;585    
;;;586    	return ok ? 1 : 0;
000edc  e3560000          CMP      r6,#0
000ee0  0a000002          BEQ      |L1.3824|
000ee4  e3a00001          MOV      r0,#1
                  |L1.3816|
000ee8  e28dd028          ADD      sp,sp,#0x28
;;;587    }
000eec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3824|
000ef0  e3a00000          MOV      r0,#0                 ;586
000ef4  eafffffb          B        |L1.3816|
;;;588    
                          ENDP

                  yaffs2_rd_checkpt_objs PROC
;;;590    
;;;591    static int yaffs2_rd_checkpt_objs(struct yaffs_dev *dev)
000ef8  e92d40f0          PUSH     {r4-r7,lr}
;;;592    {
000efc  e24dd02c          SUB      sp,sp,#0x2c
000f00  e1a06000          MOV      r6,r0
;;;593    	struct yaffs_obj *obj;
;;;594    	struct yaffs_checkpt_obj cp;
;;;595    	int ok = 1;
000f04  e3a04001          MOV      r4,#1
;;;596    	int done = 0;
000f08  e3a07000          MOV      r7,#0
;;;597    // 	LIST_HEAD(hard_list);
;;;598    
;;;599    	while (ok && !done) {
000f0c  ea000049          B        |L1.4152|
                  |L1.3856|
;;;600    		ok = (yaffs2_checkpt_rd(dev, &cp, sizeof(cp)) == sizeof(cp));
000f10  e3a02020          MOV      r2,#0x20
000f14  e28d1008          ADD      r1,sp,#8
000f18  e1a00006          MOV      r0,r6
000f1c  ebfffffe          BL       yaffs2_checkpt_rd
000f20  e3500020          CMP      r0,#0x20
000f24  1a000001          BNE      |L1.3888|
000f28  e3a00001          MOV      r0,#1
000f2c  ea000000          B        |L1.3892|
                  |L1.3888|
000f30  e3a00000          MOV      r0,#0
                  |L1.3892|
000f34  e1a04000          MOV      r4,r0
;;;601    		if (cp.struct_type != sizeof(cp)) {
000f38  e59d0008          LDR      r0,[sp,#8]
000f3c  e3500020          CMP      r0,#0x20
000f40  0a000009          BEQ      |L1.3948|
;;;602    			yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000f44  e59f0128          LDR      r0,|L1.4212|
000f48  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000f4c  e3100902          TST      r0,#0x8000
000f50  0a000004          BEQ      |L1.3944|
000f54  e1a03004          MOV      r3,r4
000f58  e3a02020          MOV      r2,#0x20
000f5c  e28f0f59          ADR      r0,|L1.4296|
000f60  e59d1008          LDR      r1,[sp,#8]
000f64  ebfffffe          BL       sysprintf
                  |L1.3944|
;;;603    				"struct size %d instead of %d ok %d",
;;;604    				cp.struct_type, (int)sizeof(cp), ok);
;;;605    			ok = 0;
000f68  e3a04000          MOV      r4,#0
                  |L1.3948|
;;;606    		}
;;;607    
;;;608    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
000f6c  e59f0100          LDR      r0,|L1.4212|
000f70  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000f74  e3100902          TST      r0,#0x8000
000f78  0a000007          BEQ      |L1.3996|
000f7c  e59d0014          LDR      r0,[sp,#0x14]
000f80  e58d0000          STR      r0,[sp,#0]
000f84  e5dd0018          LDRB     r0,[sp,#0x18]
000f88  e2003007          AND      r3,r0,#7
000f8c  e28f0e16          ADR      r0,|L1.4340|
000f90  e59d100c          LDR      r1,[sp,#0xc]
000f94  e59d2010          LDR      r2,[sp,#0x10]
000f98  ebfffffe          BL       sysprintf
                  |L1.3996|
;;;609    			"Checkpoint read object %d parent %d type %d chunk %d ",
;;;610    			cp.obj_id, cp.parent_id, cp.variant_type,
;;;611    			cp.hdr_chunk);
;;;612    
;;;613    		if (ok && cp.obj_id == ~0) {
000f9c  e3540000          CMP      r4,#0
000fa0  0a000004          BEQ      |L1.4024|
000fa4  e59d000c          LDR      r0,[sp,#0xc]
000fa8  e3700001          CMN      r0,#1
000fac  1a000001          BNE      |L1.4024|
;;;614    			done = 1;
000fb0  e3a07001          MOV      r7,#1
000fb4  ea00001f          B        |L1.4152|
                  |L1.4024|
;;;615    		} else if (ok) {
000fb8  e3540000          CMP      r4,#0
000fbc  0a00001d          BEQ      |L1.4152|
;;;616    			obj =
000fc0  e5dd0018          LDRB     r0,[sp,#0x18]
000fc4  e2002007          AND      r2,r0,#7
000fc8  e1a00006          MOV      r0,r6
000fcc  e59d100c          LDR      r1,[sp,#0xc]
000fd0  ebfffffe          BL       yaffs_find_or_create_by_number
000fd4  e1a05000          MOV      r5,r0
;;;617    			    yaffs_find_or_create_by_number(dev, cp.obj_id,
;;;618    							   cp.variant_type);
;;;619    			if (obj) {
000fd8  e3550000          CMP      r5,#0
000fdc  0a000014          BEQ      |L1.4148|
;;;620    				ok = yaffs2_checkpt_obj_to_obj(obj, &cp);
000fe0  e28d1008          ADD      r1,sp,#8
000fe4  e1a00005          MOV      r0,r5
000fe8  ebfffffe          BL       yaffs2_checkpt_obj_to_obj
000fec  e1a04000          MOV      r4,r0
;;;621    				if (!ok)
000ff0  e3540000          CMP      r4,#0
000ff4  1a000000          BNE      |L1.4092|
;;;622    					break;
000ff8  ea000012          B        |L1.4168|
                  |L1.4092|
;;;623    				if (obj->variant_type ==
000ffc  e5d50064          LDRB     r0,[r5,#0x64]
001000  e3500001          CMP      r0,#1
001004  1a000003          BNE      |L1.4120|
;;;624    					YAFFS_OBJECT_TYPE_FILE) {
;;;625    					ok = yaffs2_rd_checkpt_tnodes(obj);
001008  e1a00005          MOV      r0,r5
00100c  ebfffffe          BL       yaffs2_rd_checkpt_tnodes
001010  e1a04000          MOV      r4,r0
001014  ea000007          B        |L1.4152|
                  |L1.4120|
;;;626    				} else if (obj->variant_type ==
001018  e5d50064          LDRB     r0,[r5,#0x64]
00101c  e3500004          CMP      r0,#4
001020  1a000004          BNE      |L1.4152|
;;;627    					YAFFS_OBJECT_TYPE_HARDLINK) {
;;;628    					list_add(&obj->hard_links, &hard_list);
001024  e59f1108          LDR      r1,|L1.4404|
001028  e2850014          ADD      r0,r5,#0x14
00102c  ebfffffe          BL       list_add
001030  ea000000          B        |L1.4152|
                  |L1.4148|
;;;629    				}
;;;630    			} else {
;;;631    				ok = 0;
001034  e3a04000          MOV      r4,#0
                  |L1.4152|
001038  e3540000          CMP      r4,#0                 ;599
00103c  0a000001          BEQ      |L1.4168|
001040  e3570000          CMP      r7,#0                 ;599
001044  0affffb1          BEQ      |L1.3856|
                  |L1.4168|
001048  e1a00000          MOV      r0,r0                 ;622
;;;632    			}
;;;633    		}
;;;634    	}
;;;635    
;;;636    	if (ok)
00104c  e3540000          CMP      r4,#0
001050  0a000002          BEQ      |L1.4192|
;;;637    		yaffs_link_fixup(dev, &hard_list);
001054  e59f10d8          LDR      r1,|L1.4404|
001058  e1a00006          MOV      r0,r6
00105c  ebfffffe          BL       yaffs_link_fixup
                  |L1.4192|
;;;638    
;;;639    	return ok ? 1 : 0;
001060  e3540000          CMP      r4,#0
001064  0a000033          BEQ      |L1.4408|
001068  e3a00001          MOV      r0,#1
                  |L1.4204|
00106c  e28dd02c          ADD      sp,sp,#0x2c
;;;640    }
001070  e8bd80f0          POP      {r4-r7,pc}
                  |L1.4212|
                          DCD      yaffs_trace_mask
                  |L1.4216|
                          DCD      ||.constdata||
                  |L1.4220|
                          DCD      0x5941ff53
                  |L1.4224|
                          DCD      ||.constdata||+0x44
                  |L1.4228|
                          DCD      ||.constdata||+0xa0
                  |L1.4232|
001088  79616666          DCB      "yaffs: Checkpoint read tnodes %d records, last %d. ok %"
00108c  733a2043
001090  6865636b
001094  706f696e
001098  74207265
00109c  61642074
0010a0  6e6f6465
0010a4  73202564
0010a8  20726563
0010ac  6f726473
0010b0  2c206c61
0010b4  73742025
0010b8  642e206f
0010bc  6b2025  
0010bf  640a00            DCB      "d\n",0
0010c2  00                DCB      0
0010c3  00                DCB      0
                  |L1.4292|
                          DCD      ||.constdata||+0xfc
                  |L1.4296|
0010c8  79616666          DCB      "yaffs: struct size %d instead of %d ok %d\n",0
0010cc  733a2073
0010d0  74727563
0010d4  74207369
0010d8  7a652025
0010dc  6420696e
0010e0  73746561
0010e4  64206f66
0010e8  20256420
0010ec  6f6b2025
0010f0  640a00  
0010f3  00                DCB      0
                  |L1.4340|
0010f4  79616666          DCB      "yaffs: Checkpoint read object %d parent %d type %d chun"
0010f8  733a2043
0010fc  6865636b
001100  706f696e
001104  74207265
001108  6164206f
00110c  626a6563
001110  74202564
001114  20706172
001118  656e7420
00111c  25642074
001120  79706520
001124  25642063
001128  68756e  
00112b  6b202564          DCB      "k %d \n",0
00112f  200a00  
001132  00                DCB      0
001133  00                DCB      0
                  |L1.4404|
                          DCD      hard_list
                  |L1.4408|
001138  e3a00000          MOV      r0,#0                 ;639
00113c  eaffffca          B        |L1.4204|
;;;641    
                          ENDP

                  yaffs2_wr_checkpt_sum PROC
;;;642    static int yaffs2_wr_checkpt_sum(struct yaffs_dev *dev)
001140  e92d4038          PUSH     {r3-r5,lr}
;;;643    {
001144  e1a04000          MOV      r4,r0
;;;644    	u32 checkpt_sum;
;;;645    	int ok;
;;;646    
;;;647    	yaffs2_get_checkpt_sum(dev, &checkpt_sum);
001148  e1a0100d          MOV      r1,sp
00114c  e1a00004          MOV      r0,r4
001150  ebfffffe          BL       yaffs2_get_checkpt_sum
;;;648    
;;;649    	ok = (yaffs2_checkpt_wr(dev, &checkpt_sum, sizeof(checkpt_sum)) ==
001154  e3a02004          MOV      r2,#4
001158  e1a0100d          MOV      r1,sp
00115c  e1a00004          MOV      r0,r4
001160  ebfffffe          BL       yaffs2_checkpt_wr
001164  e3500004          CMP      r0,#4
001168  1a000001          BNE      |L1.4468|
00116c  e3a00001          MOV      r0,#1
001170  ea000000          B        |L1.4472|
                  |L1.4468|
001174  e3a00000          MOV      r0,#0
                  |L1.4472|
001178  e1a05000          MOV      r5,r0
;;;650    		sizeof(checkpt_sum));
;;;651    
;;;652    	if (!ok)
00117c  e3550000          CMP      r5,#0
001180  1a000001          BNE      |L1.4492|
;;;653    		return 0;
001184  e3a00000          MOV      r0,#0
                  |L1.4488|
;;;654    
;;;655    	return 1;
;;;656    }
001188  e8bd8038          POP      {r3-r5,pc}
                  |L1.4492|
00118c  e3a00001          MOV      r0,#1                 ;655
001190  eafffffc          B        |L1.4488|
;;;657    
                          ENDP

                  yaffs2_rd_checkpt_sum PROC
;;;658    static int yaffs2_rd_checkpt_sum(struct yaffs_dev *dev)
001194  e92d407c          PUSH     {r2-r6,lr}
;;;659    {
001198  e1a04000          MOV      r4,r0
;;;660    	u32 checkpt_sum0;
;;;661    	u32 checkpt_sum1;
;;;662    	int ok;
;;;663    
;;;664    	yaffs2_get_checkpt_sum(dev, &checkpt_sum0);
00119c  e28d1004          ADD      r1,sp,#4
0011a0  e1a00004          MOV      r0,r4
0011a4  ebfffffe          BL       yaffs2_get_checkpt_sum
;;;665    
;;;666    	ok = (yaffs2_checkpt_rd(dev, &checkpt_sum1, sizeof(checkpt_sum1)) ==
0011a8  e3a02004          MOV      r2,#4
0011ac  e1a0100d          MOV      r1,sp
0011b0  e1a00004          MOV      r0,r4
0011b4  ebfffffe          BL       yaffs2_checkpt_rd
0011b8  e3500004          CMP      r0,#4
0011bc  1a000001          BNE      |L1.4552|
0011c0  e3a00001          MOV      r0,#1
0011c4  ea000000          B        |L1.4556|
                  |L1.4552|
0011c8  e3a00000          MOV      r0,#0
                  |L1.4556|
0011cc  e1a05000          MOV      r5,r0
;;;667    		sizeof(checkpt_sum1));
;;;668    
;;;669    	if (!ok)
0011d0  e3550000          CMP      r5,#0
0011d4  1a000001          BNE      |L1.4576|
;;;670    		return 0;
0011d8  e3a00000          MOV      r0,#0
                  |L1.4572|
;;;671    
;;;672    	if (checkpt_sum0 != checkpt_sum1)
;;;673    		return 0;
;;;674    
;;;675    	return 1;
;;;676    }
0011dc  e8bd807c          POP      {r2-r6,pc}
                  |L1.4576|
0011e0  e59d0004          LDR      r0,[sp,#4]            ;672
0011e4  e59d1000          LDR      r1,[sp,#0]            ;672
0011e8  e1500001          CMP      r0,r1                 ;672
0011ec  0a000001          BEQ      |L1.4600|
0011f0  e3a00000          MOV      r0,#0                 ;673
0011f4  eafffff8          B        |L1.4572|
                  |L1.4600|
0011f8  e3a00001          MOV      r0,#1                 ;675
0011fc  eafffff6          B        |L1.4572|
;;;677    
                          ENDP

                  yaffs2_wr_checkpt_data PROC
;;;678    static int yaffs2_wr_checkpt_data(struct yaffs_dev *dev)
001200  e92d4070          PUSH     {r4-r6,lr}
;;;679    {
001204  e1a05000          MOV      r5,r0
;;;680    	int ok = 1;
001208  e3a04001          MOV      r4,#1
;;;681    
;;;682    	if (!yaffs2_checkpt_required(dev)) {
00120c  e1a00005          MOV      r0,r5
001210  ebfffffe          BL       yaffs2_checkpt_required
001214  e3500000          CMP      r0,#0
001218  1a000006          BNE      |L1.4664|
;;;683    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
00121c  e51f01b0          LDR      r0,|L1.4212|
001220  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
001224  e3100902          TST      r0,#0x8000
001228  0a000001          BEQ      |L1.4660|
00122c  e28f0fa5          ADR      r0,|L1.5320|
001230  ebfffffe          BL       sysprintf
                  |L1.4660|
;;;684    			"skipping checkpoint write");
;;;685    		ok = 0;
001234  e3a04000          MOV      r4,#0
                  |L1.4664|
;;;686    	}
;;;687    
;;;688    	if (ok)
001238  e3540000          CMP      r4,#0
00123c  0a000003          BEQ      |L1.4688|
;;;689    		ok = yaffs2_checkpt_open(dev, 1);
001240  e3a01001          MOV      r1,#1
001244  e1a00005          MOV      r0,r5
001248  ebfffffe          BL       yaffs2_checkpt_open
00124c  e1a04000          MOV      r4,r0
                  |L1.4688|
;;;690    
;;;691    	if (ok) {
001250  e3540000          CMP      r4,#0
001254  0a000009          BEQ      |L1.4736|
;;;692    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001258  e51f01ec          LDR      r0,|L1.4212|
00125c  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
001260  e3100902          TST      r0,#0x8000
001264  0a000001          BEQ      |L1.4720|
001268  e28f0f9f          ADR      r0,|L1.5356|
00126c  ebfffffe          BL       sysprintf
                  |L1.4720|
;;;693    			"write checkpoint validity");
;;;694    		ok = yaffs2_wr_checkpt_validity_marker(dev, 1);
001270  e3a01001          MOV      r1,#1
001274  e1a00005          MOV      r0,r5
001278  ebfffffe          BL       yaffs2_wr_checkpt_validity_marker
00127c  e1a04000          MOV      r4,r0
                  |L1.4736|
;;;695    	}
;;;696    	if (ok) {
001280  e3540000          CMP      r4,#0
001284  0a000008          BEQ      |L1.4780|
;;;697    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001288  e51f021c          LDR      r0,|L1.4212|
00128c  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
001290  e3100902          TST      r0,#0x8000
001294  0a000001          BEQ      |L1.4768|
001298  e28f0e27          ADR      r0,|L1.5392|
00129c  ebfffffe          BL       sysprintf
                  |L1.4768|
;;;698    			"write checkpoint device");
;;;699    		ok = yaffs2_wr_checkpt_dev(dev);
0012a0  e1a00005          MOV      r0,r5
0012a4  ebfffffe          BL       yaffs2_wr_checkpt_dev
0012a8  e1a04000          MOV      r4,r0
                  |L1.4780|
;;;700    	}
;;;701    	if (ok) {
0012ac  e3540000          CMP      r4,#0
0012b0  0a000008          BEQ      |L1.4824|
;;;702    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0012b4  e51f0248          LDR      r0,|L1.4212|
0012b8  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0012bc  e3100902          TST      r0,#0x8000
0012c0  0a000001          BEQ      |L1.4812|
0012c4  e28f0f99          ADR      r0,|L1.5424|
0012c8  ebfffffe          BL       sysprintf
                  |L1.4812|
;;;703    			"write checkpoint objects");
;;;704    		ok = yaffs2_wr_checkpt_objs(dev);
0012cc  e1a00005          MOV      r0,r5
0012d0  ebfffffe          BL       yaffs2_wr_checkpt_objs
0012d4  e1a04000          MOV      r4,r0
                  |L1.4824|
;;;705    	}
;;;706    	if (ok) {
0012d8  e3540000          CMP      r4,#0
0012dc  0a000009          BEQ      |L1.4872|
;;;707    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0012e0  e51f0274          LDR      r0,|L1.4212|
0012e4  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0012e8  e3100902          TST      r0,#0x8000
0012ec  0a000001          BEQ      |L1.4856|
0012f0  e28f0f7d          ADR      r0,|L1.5356|
0012f4  ebfffffe          BL       sysprintf
                  |L1.4856|
;;;708    			"write checkpoint validity");
;;;709    		ok = yaffs2_wr_checkpt_validity_marker(dev, 0);
0012f8  e3a01000          MOV      r1,#0
0012fc  e1a00005          MOV      r0,r5
001300  ebfffffe          BL       yaffs2_wr_checkpt_validity_marker
001304  e1a04000          MOV      r4,r0
                  |L1.4872|
;;;710    	}
;;;711    
;;;712    	if (ok)
001308  e3540000          CMP      r4,#0
00130c  0a000002          BEQ      |L1.4892|
;;;713    		ok = yaffs2_wr_checkpt_sum(dev);
001310  e1a00005          MOV      r0,r5
001314  ebfffffe          BL       yaffs2_wr_checkpt_sum
001318  e1a04000          MOV      r4,r0
                  |L1.4892|
;;;714    
;;;715    	if (!yaffs_checkpt_close(dev))
00131c  e1a00005          MOV      r0,r5
001320  ebfffffe          BL       yaffs_checkpt_close
001324  e3500000          CMP      r0,#0
001328  1a000000          BNE      |L1.4912|
;;;716    		ok = 0;
00132c  e3a04000          MOV      r4,#0
                  |L1.4912|
;;;717    
;;;718    	if (ok)
001330  e3540000          CMP      r4,#0
001334  0a000002          BEQ      |L1.4932|
;;;719    		dev->is_checkpointed = 1;
001338  e3a00001          MOV      r0,#1
00133c  e58500cc          STR      r0,[r5,#0xcc]
001340  ea000001          B        |L1.4940|
                  |L1.4932|
;;;720    	else
;;;721    		dev->is_checkpointed = 0;
001344  e3a00000          MOV      r0,#0
001348  e58500cc          STR      r0,[r5,#0xcc]
                  |L1.4940|
;;;722    
;;;723    	return dev->is_checkpointed;
00134c  e59500cc          LDR      r0,[r5,#0xcc]
;;;724    }
001350  e8bd8070          POP      {r4-r6,pc}
;;;725    
                          ENDP

                  yaffs2_rd_checkpt_data PROC
;;;726    static int yaffs2_rd_checkpt_data(struct yaffs_dev *dev)
001354  e92d4070          PUSH     {r4-r6,lr}
;;;727    {
001358  e1a05000          MOV      r5,r0
;;;728    	int ok = 1;
00135c  e3a04001          MOV      r4,#1
;;;729    
;;;730    	if (!dev->param.is_yaffs2)
001360  e5950030          LDR      r0,[r5,#0x30]
001364  e3500000          CMP      r0,#0
001368  1a000000          BNE      |L1.4976|
;;;731    		ok = 0;
00136c  e3a04000          MOV      r4,#0
                  |L1.4976|
;;;732    
;;;733    	if (ok && dev->param.skip_checkpt_rd) {
001370  e3540000          CMP      r4,#0
001374  0a000009          BEQ      |L1.5024|
001378  e5d5003c          LDRB     r0,[r5,#0x3c]
00137c  e3500000          CMP      r0,#0
001380  0a000006          BEQ      |L1.5024|
;;;734    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001384  e51f0318          LDR      r0,|L1.4212|
001388  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
00138c  e3100902          TST      r0,#0x8000
001390  0a000001          BEQ      |L1.5020|
001394  e28f0f6e          ADR      r0,|L1.5460|
001398  ebfffffe          BL       sysprintf
                  |L1.5020|
;;;735    			"skipping checkpoint read");
;;;736    		ok = 0;
00139c  e3a04000          MOV      r4,#0
                  |L1.5024|
;;;737    	}
;;;738    
;;;739    	if (ok)
0013a0  e3540000          CMP      r4,#0
0013a4  0a000003          BEQ      |L1.5048|
;;;740    		ok = yaffs2_checkpt_open(dev, 0); /* open for read */
0013a8  e3a01000          MOV      r1,#0
0013ac  e1a00005          MOV      r0,r5
0013b0  ebfffffe          BL       yaffs2_checkpt_open
0013b4  e1a04000          MOV      r4,r0
                  |L1.5048|
;;;741    
;;;742    	if (ok) {
0013b8  e3540000          CMP      r4,#0
0013bc  0a000009          BEQ      |L1.5096|
;;;743    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0013c0  e51f0354          LDR      r0,|L1.4212|
0013c4  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0013c8  e3100902          TST      r0,#0x8000
0013cc  0a000001          BEQ      |L1.5080|
0013d0  e28f0e1a          ADR      r0,|L1.5496|
0013d4  ebfffffe          BL       sysprintf
                  |L1.5080|
;;;744    			"read checkpoint validity");
;;;745    		ok = yaffs2_rd_checkpt_validity_marker(dev, 1);
0013d8  e3a01001          MOV      r1,#1
0013dc  e1a00005          MOV      r0,r5
0013e0  ebfffffe          BL       yaffs2_rd_checkpt_validity_marker
0013e4  e1a04000          MOV      r4,r0
                  |L1.5096|
;;;746    	}
;;;747    	if (ok) {
0013e8  e3540000          CMP      r4,#0
0013ec  0a000008          BEQ      |L1.5140|
;;;748    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0013f0  e51f0384          LDR      r0,|L1.4212|
0013f4  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0013f8  e3100902          TST      r0,#0x8000
0013fc  0a000001          BEQ      |L1.5128|
001400  e28f0f65          ADR      r0,|L1.5532|
001404  ebfffffe          BL       sysprintf
                  |L1.5128|
;;;749    			"read checkpoint device");
;;;750    		ok = yaffs2_rd_checkpt_dev(dev);
001408  e1a00005          MOV      r0,r5
00140c  ebfffffe          BL       yaffs2_rd_checkpt_dev
001410  e1a04000          MOV      r4,r0
                  |L1.5140|
;;;751    	}
;;;752    	if (ok) {
001414  e3540000          CMP      r4,#0
001418  0a000008          BEQ      |L1.5184|
;;;753    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
00141c  e51f03b0          LDR      r0,|L1.4212|
001420  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
001424  e3100902          TST      r0,#0x8000
001428  0a000001          BEQ      |L1.5172|
00142c  e28f0f62          ADR      r0,|L1.5564|
001430  ebfffffe          BL       sysprintf
                  |L1.5172|
;;;754    			"read checkpoint objects");
;;;755    		ok = yaffs2_rd_checkpt_objs(dev);
001434  e1a00005          MOV      r0,r5
001438  ebfffffe          BL       yaffs2_rd_checkpt_objs
00143c  e1a04000          MOV      r4,r0
                  |L1.5184|
;;;756    	}
;;;757    	if (ok) {
001440  e3540000          CMP      r4,#0
001444  0a000009          BEQ      |L1.5232|
;;;758    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001448  e51f03dc          LDR      r0,|L1.4212|
00144c  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
001450  e3100902          TST      r0,#0x8000
001454  0a000001          BEQ      |L1.5216|
001458  e28f0f46          ADR      r0,|L1.5496|
00145c  ebfffffe          BL       sysprintf
                  |L1.5216|
;;;759    			"read checkpoint validity");
;;;760    		ok = yaffs2_rd_checkpt_validity_marker(dev, 0);
001460  e3a01000          MOV      r1,#0
001464  e1a00005          MOV      r0,r5
001468  ebfffffe          BL       yaffs2_rd_checkpt_validity_marker
00146c  e1a04000          MOV      r4,r0
                  |L1.5232|
;;;761    	}
;;;762    
;;;763    	if (ok) {
001470  e3540000          CMP      r4,#0
001474  0a000009          BEQ      |L1.5280|
;;;764    		ok = yaffs2_rd_checkpt_sum(dev);
001478  e1a00005          MOV      r0,r5
00147c  ebfffffe          BL       yaffs2_rd_checkpt_sum
001480  e1a04000          MOV      r4,r0
;;;765    		yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001484  e51f0418          LDR      r0,|L1.4212|
001488  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
00148c  e3100902          TST      r0,#0x8000
001490  0a000002          BEQ      |L1.5280|
001494  e1a01004          MOV      r1,r4
001498  e28f0f4f          ADR      r0,|L1.5596|
00149c  ebfffffe          BL       sysprintf
                  |L1.5280|
;;;766    			"read checkpoint checksum %d", ok);
;;;767    	}
;;;768    
;;;769    	if (!yaffs_checkpt_close(dev))
0014a0  e1a00005          MOV      r0,r5
0014a4  ebfffffe          BL       yaffs_checkpt_close
0014a8  e3500000          CMP      r0,#0
0014ac  1a000000          BNE      |L1.5300|
;;;770    		ok = 0;
0014b0  e3a04000          MOV      r4,#0
                  |L1.5300|
;;;771    
;;;772    	if (ok)
0014b4  e3540000          CMP      r4,#0
0014b8  0a000050          BEQ      |L1.5632|
;;;773    		dev->is_checkpointed = 1;
0014bc  e3a00001          MOV      r0,#1
0014c0  e58500cc          STR      r0,[r5,#0xcc]
0014c4  ea00004f          B        |L1.5640|
                  |L1.5320|
0014c8  79616666          DCB      "yaffs: skipping checkpoint write\n",0
0014cc  733a2073
0014d0  6b697070
0014d4  696e6720
0014d8  63686563
0014dc  6b706f69
0014e0  6e742077
0014e4  72697465
0014e8  0a00    
0014ea  00                DCB      0
0014eb  00                DCB      0
                  |L1.5356|
0014ec  79616666          DCB      "yaffs: write checkpoint validity\n",0
0014f0  733a2077
0014f4  72697465
0014f8  20636865
0014fc  636b706f
001500  696e7420
001504  76616c69
001508  64697479
00150c  0a00    
00150e  00                DCB      0
00150f  00                DCB      0
                  |L1.5392|
001510  79616666          DCB      "yaffs: write checkpoint device\n",0
001514  733a2077
001518  72697465
00151c  20636865
001520  636b706f
001524  696e7420
001528  64657669
00152c  63650a00
                  |L1.5424|
001530  79616666          DCB      "yaffs: write checkpoint objects\n",0
001534  733a2077
001538  72697465
00153c  20636865
001540  636b706f
001544  696e7420
001548  6f626a65
00154c  6374730a
001550  00      
001551  00                DCB      0
001552  00                DCB      0
001553  00                DCB      0
                  |L1.5460|
001554  79616666          DCB      "yaffs: skipping checkpoint read\n",0
001558  733a2073
00155c  6b697070
001560  696e6720
001564  63686563
001568  6b706f69
00156c  6e742072
001570  6561640a
001574  00      
001575  00                DCB      0
001576  00                DCB      0
001577  00                DCB      0
                  |L1.5496|
001578  79616666          DCB      "yaffs: read checkpoint validity\n",0
00157c  733a2072
001580  65616420
001584  63686563
001588  6b706f69
00158c  6e742076
001590  616c6964
001594  6974790a
001598  00      
001599  00                DCB      0
00159a  00                DCB      0
00159b  00                DCB      0
                  |L1.5532|
00159c  79616666          DCB      "yaffs: read checkpoint device\n",0
0015a0  733a2072
0015a4  65616420
0015a8  63686563
0015ac  6b706f69
0015b0  6e742064
0015b4  65766963
0015b8  650a00  
0015bb  00                DCB      0
                  |L1.5564|
0015bc  79616666          DCB      "yaffs: read checkpoint objects\n",0
0015c0  733a2072
0015c4  65616420
0015c8  63686563
0015cc  6b706f69
0015d0  6e74206f
0015d4  626a6563
0015d8  74730a00
                  |L1.5596|
0015dc  79616666          DCB      "yaffs: read checkpoint checksum %d\n",0
0015e0  733a2072
0015e4  65616420
0015e8  63686563
0015ec  6b706f69
0015f0  6e742063
0015f4  6865636b
0015f8  73756d20
0015fc  25640a00
                  |L1.5632|
;;;774    	else
;;;775    		dev->is_checkpointed = 0;
001600  e3a00000          MOV      r0,#0
001604  e58500cc          STR      r0,[r5,#0xcc]
                  |L1.5640|
;;;776    
;;;777    	return ok ? 1 : 0;
001608  e3540000          CMP      r4,#0
00160c  0a000001          BEQ      |L1.5656|
001610  e3a00001          MOV      r0,#1
                  |L1.5652|
;;;778    }
001614  e8bd8070          POP      {r4-r6,pc}
                  |L1.5656|
001618  e3a00000          MOV      r0,#0                 ;777
00161c  eafffffc          B        |L1.5652|
;;;779    
                          ENDP

                  yaffs2_checkpt_invalidate PROC
;;;780    void yaffs2_checkpt_invalidate(struct yaffs_dev *dev)
001620  e92d4010          PUSH     {r4,lr}
;;;781    {
001624  e1a04000          MOV      r4,r0
;;;782    	if (dev->is_checkpointed || dev->blocks_in_checkpt > 0) {
001628  e59400cc          LDR      r0,[r4,#0xcc]
00162c  e3500000          CMP      r0,#0
001630  1a000002          BNE      |L1.5696|
001634  e59400f4          LDR      r0,[r4,#0xf4]
001638  e3500000          CMP      r0,#0
00163c  da000003          BLE      |L1.5712|
                  |L1.5696|
;;;783    		dev->is_checkpointed = 0;
001640  e3a00000          MOV      r0,#0
001644  e58400cc          STR      r0,[r4,#0xcc]
;;;784    		yaffs2_checkpt_invalidate_stream(dev);
001648  e1a00004          MOV      r0,r4
00164c  ebfffffe          BL       yaffs2_checkpt_invalidate_stream
                  |L1.5712|
;;;785    	}
;;;786    	if (dev->param.sb_dirty_fn)
001650  e594006c          LDR      r0,[r4,#0x6c]
001654  e3500000          CMP      r0,#0
001658  0a000002          BEQ      |L1.5736|
;;;787    		dev->param.sb_dirty_fn(dev);
00165c  e594106c          LDR      r1,[r4,#0x6c]
001660  e1a00004          MOV      r0,r4
001664  e12fff31          BLX      r1
                  |L1.5736|
;;;788    }
001668  e8bd8010          POP      {r4,pc}
;;;789    
                          ENDP

                  yaffs_checkpoint_save PROC
;;;790    int yaffs_checkpoint_save(struct yaffs_dev *dev)
00166c  e92d4010          PUSH     {r4,lr}
;;;791    {
001670  e1a04000          MOV      r4,r0
;;;792    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001674  e51f0608          LDR      r0,|L1.4212|
001678  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
00167c  e3100902          TST      r0,#0x8000
001680  0a000002          BEQ      |L1.5776|
001684  e28f0fbf          ADR      r0,|L1.6536|
001688  e59410cc          LDR      r1,[r4,#0xcc]
00168c  ebfffffe          BL       sysprintf
                  |L1.5776|
;;;793    		"save entry: is_checkpointed %d",
;;;794    		dev->is_checkpointed);
;;;795    
;;;796    	yaffs_verify_objects(dev);
001690  e1a00004          MOV      r0,r4
001694  ebfffffe          BL       yaffs_verify_objects
;;;797    	yaffs_verify_blocks(dev);
001698  e1a00004          MOV      r0,r4
00169c  ebfffffe          BL       yaffs_verify_blocks
;;;798    	yaffs_verify_free_chunks(dev);
0016a0  e1a00004          MOV      r0,r4
0016a4  ebfffffe          BL       yaffs_verify_free_chunks
;;;799    
;;;800    	if (!dev->is_checkpointed) {
0016a8  e59400cc          LDR      r0,[r4,#0xcc]
0016ac  e3500000          CMP      r0,#0
0016b0  1a000003          BNE      |L1.5828|
;;;801    		yaffs2_checkpt_invalidate(dev);
0016b4  e1a00004          MOV      r0,r4
0016b8  ebfffffe          BL       yaffs2_checkpt_invalidate
;;;802    		yaffs2_wr_checkpt_data(dev);
0016bc  e1a00004          MOV      r0,r4
0016c0  ebfffffe          BL       yaffs2_wr_checkpt_data
                  |L1.5828|
;;;803    	}
;;;804    
;;;805    	yaffs_trace(YAFFS_TRACE_CHECKPOINT | YAFFS_TRACE_MOUNT,
0016c4  e51f0658          LDR      r0,|L1.4212|
0016c8  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
0016cc  e59f12dc          LDR      r1,|L1.6576|
0016d0  e1100001          TST      r0,r1
0016d4  0a000002          BEQ      |L1.5860|
0016d8  e28f0fb5          ADR      r0,|L1.6580|
0016dc  e59410cc          LDR      r1,[r4,#0xcc]
0016e0  ebfffffe          BL       sysprintf
                  |L1.5860|
;;;806    		"save exit: is_checkpointed %d",
;;;807    		dev->is_checkpointed);
;;;808    
;;;809    	return dev->is_checkpointed;
0016e4  e59400cc          LDR      r0,[r4,#0xcc]
;;;810    }
0016e8  e8bd8010          POP      {r4,pc}
;;;811    
                          ENDP

                  yaffs2_checkpt_restore PROC
;;;812    int yaffs2_checkpt_restore(struct yaffs_dev *dev)
0016ec  e92d4070          PUSH     {r4-r6,lr}
;;;813    {
0016f0  e1a04000          MOV      r4,r0
;;;814    	int retval;
;;;815    
;;;816    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
0016f4  e51f0688          LDR      r0,|L1.4212|
0016f8  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0016fc  e3100902          TST      r0,#0x8000
001700  0a000002          BEQ      |L1.5904|
001704  e28f0e2d          ADR      r0,|L1.6620|
001708  e59410cc          LDR      r1,[r4,#0xcc]
00170c  ebfffffe          BL       sysprintf
                  |L1.5904|
;;;817    		"restore entry: is_checkpointed %d",
;;;818    		dev->is_checkpointed);
;;;819    
;;;820    	retval = yaffs2_rd_checkpt_data(dev);
001710  e1a00004          MOV      r0,r4
001714  ebfffffe          BL       yaffs2_rd_checkpt_data
001718  e1a05000          MOV      r5,r0
;;;821    
;;;822    	if (dev->is_checkpointed) {
00171c  e59400cc          LDR      r0,[r4,#0xcc]
001720  e3500000          CMP      r0,#0
001724  0a000005          BEQ      |L1.5952|
;;;823    		yaffs_verify_objects(dev);
001728  e1a00004          MOV      r0,r4
00172c  ebfffffe          BL       yaffs_verify_objects
;;;824    		yaffs_verify_blocks(dev);
001730  e1a00004          MOV      r0,r4
001734  ebfffffe          BL       yaffs_verify_blocks
;;;825    		yaffs_verify_free_chunks(dev);
001738  e1a00004          MOV      r0,r4
00173c  ebfffffe          BL       yaffs_verify_free_chunks
                  |L1.5952|
;;;826    	}
;;;827    
;;;828    	yaffs_trace(YAFFS_TRACE_CHECKPOINT,
001740  e51f06d4          LDR      r0,|L1.4212|
001744  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
001748  e3100902          TST      r0,#0x8000
00174c  0a000002          BEQ      |L1.5980|
001750  e28f0e2b          ADR      r0,|L1.6664|
001754  e59410cc          LDR      r1,[r4,#0xcc]
001758  ebfffffe          BL       sysprintf
                  |L1.5980|
;;;829    		"restore exit: is_checkpointed %d",
;;;830    		dev->is_checkpointed);
;;;831    
;;;832    	return retval;
00175c  e1a00005          MOV      r0,r5
;;;833    }
001760  e8bd8070          POP      {r4-r6,pc}
;;;834    
                          ENDP

                  yaffs2_handle_hole PROC
;;;835    int yaffs2_handle_hole(struct yaffs_obj *obj, loff_t new_size)
001764  e92d5fff          PUSH     {r0-r12,lr}
;;;836    {
001768  e24dd020          SUB      sp,sp,#0x20
00176c  e1a09000          MOV      r9,r0
;;;837    	/* if new_size > old_file_size.
;;;838    	 * We're going to be writing a hole.
;;;839    	 * If the hole is small then write zeros otherwise write a start
;;;840    	 * of hole marker.
;;;841    	 */
;;;842    	loff_t old_file_size;
;;;843    	loff_t increase;
;;;844    	int small_hole;
;;;845    	int result = YAFFS_OK;
001770  e3a00001          MOV      r0,#1
001774  e58d0018          STR      r0,[sp,#0x18]
;;;846    	struct yaffs_dev *dev = NULL;
001778  e3a0a000          MOV      r10,#0
;;;847    	u8 *local_buffer = NULL;
00177c  e3a00000          MOV      r0,#0
001780  e58d0014          STR      r0,[sp,#0x14]
;;;848    	int small_increase_ok = 0;
001784  e58d0010          STR      r0,[sp,#0x10]
;;;849    
;;;850    	if (!obj)
001788  e3590000          CMP      r9,#0
00178c  1a000001          BNE      |L1.6040|
                  |L1.6032|
;;;851    		return YAFFS_FAIL;
001790  e28dd030          ADD      sp,sp,#0x30
;;;852    
;;;853    	if (obj->variant_type != YAFFS_OBJECT_TYPE_FILE)
;;;854    		return YAFFS_FAIL;
;;;855    
;;;856    	dev = obj->my_dev;
;;;857    
;;;858    	/* Bail out if not yaffs2 mode */
;;;859    	if (!dev->param.is_yaffs2)
;;;860    		return YAFFS_OK;
;;;861    
;;;862    	old_file_size = obj->variant.file_variant.file_size;
;;;863    
;;;864    	if (new_size <= old_file_size)
;;;865    		return YAFFS_OK;
;;;866    
;;;867    	increase = new_size - old_file_size;
;;;868    
;;;869    	if (increase < YAFFS_SMALL_HOLE_THRESHOLD * dev->data_bytes_per_chunk &&
;;;870    	    yaffs_check_alloc_available(dev, YAFFS_SMALL_HOLE_THRESHOLD + 1))
;;;871    		small_hole = 1;
;;;872    	else
;;;873    		small_hole = 0;
;;;874    
;;;875    	if (small_hole)
;;;876    		local_buffer = yaffs_get_temp_buffer(dev);
;;;877    
;;;878    	if (local_buffer) {
;;;879    		/* fill hole with zero bytes */
;;;880    		loff_t pos = old_file_size;
;;;881    		int this_write;
;;;882    		int written;
;;;883    		memset(local_buffer, 0, dev->data_bytes_per_chunk);
;;;884    		small_increase_ok = 1;
;;;885    
;;;886    		while (increase > 0 && small_increase_ok) {
;;;887    			this_write = increase;
;;;888    			if (this_write > dev->data_bytes_per_chunk)
;;;889    				this_write = dev->data_bytes_per_chunk;
;;;890    			written =
;;;891    			    yaffs_do_file_wr(obj, local_buffer, pos, this_write,
;;;892    					     0);
;;;893    			if (written == this_write) {
;;;894    				pos += this_write;
;;;895    				increase -= this_write;
;;;896    			} else {
;;;897    				small_increase_ok = 0;
;;;898    			}
;;;899    		}
;;;900    
;;;901    		yaffs_release_temp_buffer(dev, local_buffer);
;;;902    
;;;903    		/* If out of space then reverse any chunks we've added */
;;;904    		if (!small_increase_ok)
;;;905    			yaffs_resize_file_down(obj, old_file_size);
;;;906    	}
;;;907    
;;;908    	if (!small_increase_ok &&
;;;909    	    obj->parent &&
;;;910    	    obj->parent->obj_id != YAFFS_OBJECTID_UNLINKED &&
;;;911    	    obj->parent->obj_id != YAFFS_OBJECTID_DELETED) {
;;;912    		/* Write a hole start header with the old file size */
;;;913    		yaffs_update_oh(obj, NULL, 0, 1, 0, NULL);
;;;914    	}
;;;915    
;;;916    	return result;
;;;917    }
001794  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.6040|
001798  e5d90064          LDRB     r0,[r9,#0x64]         ;853
00179c  e3500001          CMP      r0,#1                 ;853
0017a0  0a000001          BEQ      |L1.6060|
0017a4  e3a00000          MOV      r0,#0                 ;854
0017a8  eafffff8          B        |L1.6032|
                  |L1.6060|
0017ac  e599a008          LDR      r10,[r9,#8]           ;856
0017b0  e59a0030          LDR      r0,[r10,#0x30]        ;859
0017b4  e3500000          CMP      r0,#0                 ;859
0017b8  1a000001          BNE      |L1.6084|
0017bc  e3a00001          MOV      r0,#1                 ;860
0017c0  eafffff2          B        |L1.6032|
                  |L1.6084|
0017c4  e5997068          LDR      r7,[r9,#0x68]         ;862
0017c8  e599806c          LDR      r8,[r9,#0x6c]         ;862
0017cc  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;864
0017d0  e0570000          SUBS     r0,r7,r0              ;864
0017d4  e0d80001          SBCS     r0,r8,r1              ;864
0017d8  ba000001          BLT      |L1.6116|
0017dc  e3a00001          MOV      r0,#1                 ;865
0017e0  eaffffea          B        |L1.6032|
                  |L1.6116|
0017e4  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;867
0017e8  e0504007          SUBS     r4,r0,r7              ;867
0017ec  e0c15008          SBC      r5,r1,r8              ;867
0017f0  e59a00a4          LDR      r0,[r10,#0xa4]        ;869
0017f4  e1a00100          LSL      r0,r0,#2              ;869
0017f8  e1a01fc0          ASR      r1,r0,#31             ;869
0017fc  e0540000          SUBS     r0,r4,r0              ;869
001800  e0d50001          SBCS     r0,r5,r1              ;869
001804  aa000007          BGE      |L1.6184|
001808  e3a01005          MOV      r1,#5                 ;870
00180c  e1a0000a          MOV      r0,r10                ;870
001810  ebfffffe          BL       yaffs_check_alloc_available
001814  e3500000          CMP      r0,#0                 ;870
001818  0a000002          BEQ      |L1.6184|
00181c  e3a00001          MOV      r0,#1                 ;871
001820  e58d001c          STR      r0,[sp,#0x1c]         ;871
001824  ea000001          B        |L1.6192|
                  |L1.6184|
001828  e3a00000          MOV      r0,#0                 ;873
00182c  e58d001c          STR      r0,[sp,#0x1c]         ;873
                  |L1.6192|
001830  e59d001c          LDR      r0,[sp,#0x1c]         ;875
001834  e3500000          CMP      r0,#0                 ;875
001838  0a000002          BEQ      |L1.6216|
00183c  e1a0000a          MOV      r0,r10                ;876
001840  ebfffffe          BL       yaffs_get_temp_buffer
001844  e58d0014          STR      r0,[sp,#0x14]         ;876
                  |L1.6216|
001848  e59d0014          LDR      r0,[sp,#0x14]         ;878
00184c  e3500000          CMP      r0,#0                 ;878
001850  0a000034          BEQ      |L1.6440|
001854  e58d7008          STR      r7,[sp,#8]            ;880
001858  e58d800c          STR      r8,[sp,#0xc]          ;880
00185c  e59a10a4          LDR      r1,[r10,#0xa4]        ;883
001860  e59d0014          LDR      r0,[sp,#0x14]         ;883
001864  ebfffffe          BL       __aeabi_memclr
001868  e3a00001          MOV      r0,#1                 ;884
00186c  e58d0010          STR      r0,[sp,#0x10]         ;884
001870  ea000019          B        |L1.6364|
                  |L1.6260|
001874  e1a06004          MOV      r6,r4                 ;887
001878  e59a00a4          LDR      r0,[r10,#0xa4]        ;888
00187c  e1500006          CMP      r0,r6                 ;888
001880  aa000000          BGE      |L1.6280|
001884  e59a60a4          LDR      r6,[r10,#0xa4]        ;889
                  |L1.6280|
001888  e3a00000          MOV      r0,#0                 ;890
00188c  e58d0004          STR      r0,[sp,#4]            ;890
001890  e58d6000          STR      r6,[sp,#0]            ;890
001894  e1a00009          MOV      r0,r9                 ;890
001898  e59d1014          LDR      r1,[sp,#0x14]         ;890
00189c  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;890
0018a0  ebfffffe          BL       yaffs_do_file_wr
0018a4  e1a0b000          MOV      r11,r0                ;890
0018a8  e15b0006          CMP      r11,r6                ;893
0018ac  1a000008          BNE      |L1.6356|
0018b0  e59d1008          LDR      r1,[sp,#8]            ;894
0018b4  e0911006          ADDS     r1,r1,r6              ;894
0018b8  e59d000c          LDR      r0,[sp,#0xc]          ;894
0018bc  e0a00fc6          ADC      r0,r0,r6,ASR #31      ;894
0018c0  e58d000c          STR      r0,[sp,#0xc]          ;894
0018c4  e58d1008          STR      r1,[sp,#8]            ;894
0018c8  e0544006          SUBS     r4,r4,r6              ;894
0018cc  e0c55fc6          SBC      r5,r5,r6,ASR #31      ;894
0018d0  ea000001          B        |L1.6364|
                  |L1.6356|
0018d4  e3a00000          MOV      r0,#0                 ;897
0018d8  e58d0010          STR      r0,[sp,#0x10]         ;897
                  |L1.6364|
0018dc  e3a00000          MOV      r0,#0                 ;897
0018e0  e1a01000          MOV      r1,r0                 ;897
0018e4  e0500004          SUBS     r0,r0,r4              ;897
0018e8  e0d10005          SBCS     r0,r1,r5              ;897
0018ec  aa000002          BGE      |L1.6396|
0018f0  e59d0010          LDR      r0,[sp,#0x10]         ;886
0018f4  e3500000          CMP      r0,#0                 ;886
0018f8  1affffdd          BNE      |L1.6260|
                  |L1.6396|
0018fc  e1a0000a          MOV      r0,r10                ;901
001900  e59d1014          LDR      r1,[sp,#0x14]         ;901
001904  ebfffffe          BL       yaffs_release_temp_buffer
001908  e59d0010          LDR      r0,[sp,#0x10]         ;904
00190c  e3500000          CMP      r0,#0                 ;904
001910  1a000003          BNE      |L1.6436|
001914  e1a02007          MOV      r2,r7                 ;905
001918  e1a03008          MOV      r3,r8                 ;905
00191c  e1a00009          MOV      r0,r9                 ;905
001920  ebfffffe          BL       yaffs_resize_file_down
                  |L1.6436|
001924  e1a00000          MOV      r0,r0                 ;906
                  |L1.6440|
001928  e59d0010          LDR      r0,[sp,#0x10]         ;908
00192c  e3500000          CMP      r0,#0                 ;908
001930  1a000012          BNE      |L1.6528|
001934  e599001c          LDR      r0,[r9,#0x1c]         ;909
001938  e3500000          CMP      r0,#0                 ;909
00193c  0a00000f          BEQ      |L1.6528|
001940  e599001c          LDR      r0,[r9,#0x1c]         ;910
001944  e5900030          LDR      r0,[r0,#0x30]         ;910
001948  e3500003          CMP      r0,#3                 ;910
00194c  0a00000b          BEQ      |L1.6528|
001950  e599001c          LDR      r0,[r9,#0x1c]         ;911
001954  e5900030          LDR      r0,[r0,#0x30]         ;911
001958  e3500004          CMP      r0,#4                 ;911
00195c  0a000007          BEQ      |L1.6528|
001960  e3a00000          MOV      r0,#0                 ;913
001964  e58d0000          STR      r0,[sp,#0]            ;913
001968  e3a03001          MOV      r3,#1                 ;913
00196c  e58d0004          STR      r0,[sp,#4]            ;913
001970  e1a02000          MOV      r2,r0                 ;913
001974  e1a01000          MOV      r1,r0                 ;913
001978  e1a00009          MOV      r0,r9                 ;913
00197c  ebfffffe          BL       yaffs_update_oh
                  |L1.6528|
001980  e59d0018          LDR      r0,[sp,#0x18]         ;916
001984  eaffff81          B        |L1.6032|
                  |L1.6536|
001988  79616666          DCB      "yaffs: save entry: is_checkpointed %d\n",0
00198c  733a2073
001990  61766520
001994  656e7472
001998  793a2069
00199c  735f6368
0019a0  65636b70
0019a4  6f696e74
0019a8  65642025
0019ac  640a00  
0019af  00                DCB      0
                  |L1.6576|
                          DCD      0x00808000
                  |L1.6580|
0019b4  79616666          DCB      "yaffs: save exit: is_checkpointed %d\n",0
0019b8  733a2073
0019bc  61766520
0019c0  65786974
0019c4  3a206973
0019c8  5f636865
0019cc  636b706f
0019d0  696e7465
0019d4  64202564
0019d8  0a00    
0019da  00                DCB      0
0019db  00                DCB      0
                  |L1.6620|
0019dc  79616666          DCB      "yaffs: restore entry: is_checkpointed %d\n",0
0019e0  733a2072
0019e4  6573746f
0019e8  72652065
0019ec  6e747279
0019f0  3a206973
0019f4  5f636865
0019f8  636b706f
0019fc  696e7465
001a00  64202564
001a04  0a00    
001a06  00                DCB      0
001a07  00                DCB      0
                  |L1.6664|
001a08  79616666          DCB      "yaffs: restore exit: is_checkpointed %d\n",0
001a0c  733a2072
001a10  6573746f
001a14  72652065
001a18  7869743a
001a1c  2069735f
001a20  63686563
001a24  6b706f69
001a28  6e746564
001a2c  2025640a
001a30  00      
001a31  00                DCB      0
001a32  00                DCB      0
001a33  00                DCB      0
                          ENDP

                  yaffs2_ybicmp PROC
;;;923    
;;;924    static int yaffs2_ybicmp(const void *a, const void *b)
001a34  e92d4030          PUSH     {r4,r5,lr}
;;;925    {
001a38  e1a02000          MOV      r2,r0
;;;926    	int aseq = ((struct yaffs_block_index *)a)->seq;
001a3c  e5923000          LDR      r3,[r2,#0]
;;;927    	int bseq = ((struct yaffs_block_index *)b)->seq;
001a40  e591c000          LDR      r12,[r1,#0]
;;;928    	int ablock = ((struct yaffs_block_index *)a)->block;
001a44  e5924004          LDR      r4,[r2,#4]
;;;929    	int bblock = ((struct yaffs_block_index *)b)->block;
001a48  e5915004          LDR      r5,[r1,#4]
;;;930    
;;;931    	if (aseq == bseq)
001a4c  e153000c          CMP      r3,r12
001a50  1a000001          BNE      |L1.6748|
;;;932    		return ablock - bblock;
001a54  e0440005          SUB      r0,r4,r5
                  |L1.6744|
;;;933    
;;;934    	return aseq - bseq;
;;;935    }
001a58  e8bd8030          POP      {r4,r5,pc}
                  |L1.6748|
001a5c  e043000c          SUB      r0,r3,r12             ;934
001a60  eafffffc          B        |L1.6744|
;;;936    
                          ENDP

                  yaffs2_scan_chunk PROC
;;;937    static __inline int yaffs2_scan_chunk(struct yaffs_dev *dev,
001a64  e92d4fff          PUSH     {r0-r11,lr}
;;;938    		struct yaffs_block_info *bi,
;;;939    		int blk, int chunk_in_block,
;;;940    		int *found_chunks,
;;;941    		u8 *chunk_data,
;;;942    		struct list_head *hard_list,
;;;943    		int summary_available)
;;;944    {
001a68  e24dd074          SUB      sp,sp,#0x74
001a6c  e1a06000          MOV      r6,r0
001a70  e1a09001          MOV      r9,r1
;;;945    	struct yaffs_obj_hdr *oh;
;;;946    	struct yaffs_obj *in;
;;;947    	struct yaffs_obj *parent;
;;;948    	int equiv_id;
;;;949    	loff_t file_size;
;;;950    	int is_shrink;
;;;951    	int is_unlinked;
;;;952    	struct yaffs_ext_tags tags;
;;;953    	int alloc_failed = 0;
001a74  e3a00000          MOV      r0,#0
001a78  e58d001c          STR      r0,[sp,#0x1c]
;;;954    	int chunk = blk * dev->param.chunks_per_block + chunk_in_block;
001a7c  e596200c          LDR      r2,[r6,#0xc]
001a80  e59d0080          LDR      r0,[sp,#0x80]
001a84  e59d107c          LDR      r1,[sp,#0x7c]
001a88  e0200291          MLA      r0,r1,r2,r0
001a8c  e58d0018          STR      r0,[sp,#0x18]
;;;955    	struct yaffs_file_var *file_var;
;;;956    	struct yaffs_hardlink_var *hl_var;
;;;957    	struct yaffs_symlink_var *sl_var;
;;;958    
;;;959    	if (summary_available) {
001a90  e59d00b4          LDR      r0,[sp,#0xb4]
001a94  e3500000          CMP      r0,#0
001a98  0a000005          BEQ      |L1.6836|
;;;960    		yaffs_summary_fetch(dev, &tags, chunk_in_block);
001a9c  e59d2080          LDR      r2,[sp,#0x80]
001aa0  e28d1020          ADD      r1,sp,#0x20
001aa4  e1a00006          MOV      r0,r6
001aa8  ebfffffe          BL       yaffs_summary_fetch
;;;961    		tags.seq_number = bi->seq_number;
001aac  e5990004          LDR      r0,[r9,#4]
001ab0  e58d0040          STR      r0,[sp,#0x40]
                  |L1.6836|
;;;962    	}
;;;963    
;;;964    	if (!summary_available || tags.obj_id == 0) {
001ab4  e59d00b4          LDR      r0,[sp,#0xb4]
001ab8  e3500000          CMP      r0,#0
001abc  0a000002          BEQ      |L1.6860|
001ac0  e59d0024          LDR      r0,[sp,#0x24]
001ac4  e3500000          CMP      r0,#0
001ac8  1a000008          BNE      |L1.6896|
                  |L1.6860|
;;;965    		yaffs_rd_chunk_tags_nand(dev, chunk, NULL, &tags);
001acc  e28d3020          ADD      r3,sp,#0x20
001ad0  e3a02000          MOV      r2,#0
001ad4  e1a00006          MOV      r0,r6
001ad8  e59d1018          LDR      r1,[sp,#0x18]
001adc  ebfffffe          BL       yaffs_rd_chunk_tags_nand
;;;966    		dev->tags_used++;
001ae0  e5960e60          LDR      r0,[r6,#0xe60]
001ae4  e2800001          ADD      r0,r0,#1
001ae8  e5860e60          STR      r0,[r6,#0xe60]
001aec  ea000002          B        |L1.6908|
                  |L1.6896|
;;;967    	} else {
;;;968    		dev->summary_used++;
001af0  e5960e64          LDR      r0,[r6,#0xe64]
001af4  e2800001          ADD      r0,r0,#1
001af8  e5860e64          STR      r0,[r6,#0xe64]
                  |L1.6908|
;;;969    	}
;;;970    
;;;971    	/* Let's have a good look at this chunk... */
;;;972    
;;;973    	if (!tags.chunk_used) {
001afc  e59d0020          LDR      r0,[sp,#0x20]
001b00  e3500000          CMP      r0,#0
001b04  1a000038          BNE      |L1.7148|
;;;974    		/* An unassigned chunk in the block.
;;;975    		 * If there are used chunks after this one, then
;;;976    		 * it is a chunk that was skipped due to failing
;;;977    		 * the erased check. Just skip it so that it can
;;;978    		 * be deleted.
;;;979    		 * But, more typically, We get here when this is
;;;980    		 * an unallocated chunk and his means that
;;;981    		 * either the block is empty or this is the one
;;;982    		 * being allocated from
;;;983    		 */
;;;984    
;;;985    		if (*found_chunks) {
001b08  e59d00a8          LDR      r0,[sp,#0xa8]
001b0c  e5900000          LDR      r0,[r0,#0]
001b10  e3500000          CMP      r0,#0
001b14  1a000030          BNE      |L1.7132|
;;;986    			/* This is a chunk that was skipped due
;;;987    			 * to failing the erased check */
;;;988    		} else if (chunk_in_block == 0) {
001b18  e59d0080          LDR      r0,[sp,#0x80]
001b1c  e3500000          CMP      r0,#0
001b20  1a000007          BNE      |L1.6980|
;;;989    			/* We're looking at the first chunk in
;;;990    			 * the block so the block is unused */
;;;991    			bi->block_state = YAFFS_BLOCK_STATE_EMPTY;
001b24  e5990000          LDR      r0,[r9,#0]
001b28  e3c0060f          BIC      r0,r0,#0xf00000
001b2c  e3800603          ORR      r0,r0,#0x300000
001b30  e5890000          STR      r0,[r9,#0]
;;;992    			dev->n_erased_blocks++;
001b34  e5960128          LDR      r0,[r6,#0x128]
001b38  e2800001          ADD      r0,r0,#1
001b3c  e5860128          STR      r0,[r6,#0x128]
001b40  ea000025          B        |L1.7132|
                  |L1.6980|
;;;993    		} else {
;;;994    			if (bi->block_state == YAFFS_BLOCK_STATE_NEEDS_SCAN ||
001b44  e5990000          LDR      r0,[r9,#0]
001b48  e200060f          AND      r0,r0,#0xf00000
001b4c  e3500602          CMP      r0,#0x200000
001b50  0a000003          BEQ      |L1.7012|
;;;995    			    bi->block_state == YAFFS_BLOCK_STATE_ALLOCATING) {
001b54  e5990000          LDR      r0,[r9,#0]
001b58  e200060f          AND      r0,r0,#0xf00000
001b5c  e3500501          CMP      r0,#0x400000
001b60  1a00001d          BNE      |L1.7132|
                  |L1.7012|
;;;996    				if (dev->seq_number == bi->seq_number) {
001b64  e5960df0          LDR      r0,[r6,#0xdf0]
001b68  e5991004          LDR      r1,[r9,#4]
001b6c  e1500001          CMP      r0,r1
001b70  1a000012          BNE      |L1.7104|
;;;997    					/* Allocating from this block*/
;;;998    					yaffs_trace(YAFFS_TRACE_SCAN,
001b74  e51f0b08          LDR      r0,|L1.4212|
001b78  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
001b7c  e3100008          TST      r0,#8
001b80  0a000003          BEQ      |L1.7060|
001b84  e28f0fea          ADR      r0,|L1.7988|
001b88  e59d107c          LDR      r1,[sp,#0x7c]
001b8c  e59d2080          LDR      r2,[sp,#0x80]
001b90  ebfffffe          BL       sysprintf
                  |L1.7060|
;;;999    					    " Allocating from %d %d",
;;;1000   					    blk, chunk_in_block);
;;;1001   
;;;1002   					bi->block_state =
001b94  e5990000          LDR      r0,[r9,#0]
001b98  e3c0060f          BIC      r0,r0,#0xf00000
001b9c  e3800501          ORR      r0,r0,#0x400000
001ba0  e5890000          STR      r0,[r9,#0]
;;;1003   						YAFFS_BLOCK_STATE_ALLOCATING;
;;;1004   					dev->alloc_block = blk;
001ba4  e59d007c          LDR      r0,[sp,#0x7c]
001ba8  e586012c          STR      r0,[r6,#0x12c]
;;;1005   					dev->alloc_page = chunk_in_block;
001bac  e59d0080          LDR      r0,[sp,#0x80]
001bb0  e5860130          STR      r0,[r6,#0x130]
;;;1006   					dev->alloc_block_finder = blk;
001bb4  e59d007c          LDR      r0,[sp,#0x7c]
001bb8  e5860134          STR      r0,[r6,#0x134]
001bbc  ea000006          B        |L1.7132|
                  |L1.7104|
;;;1007   				} else {
;;;1008   					/* This is a partially written block
;;;1009   					 * that is not the current
;;;1010   					 * allocation block.
;;;1011   					 */
;;;1012   					yaffs_trace(YAFFS_TRACE_SCAN,
001bc0  e51f0b54          LDR      r0,|L1.4212|
001bc4  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
001bc8  e3100008          TST      r0,#8
001bcc  0a000002          BEQ      |L1.7132|
001bd0  e28f0fdf          ADR      r0,|L1.8020|
001bd4  e59d107c          LDR      r1,[sp,#0x7c]
001bd8  ebfffffe          BL       sysprintf
                  |L1.7132|
;;;1013   						"Partially written block %d detected. gc will fix this.",
;;;1014   						blk);
;;;1015   				}
;;;1016   			}
;;;1017   		}
;;;1018   
;;;1019   		dev->n_free_chunks++;
001bdc  e5960d4c          LDR      r0,[r6,#0xd4c]
001be0  e2800001          ADD      r0,r0,#1
001be4  e5860d4c          STR      r0,[r6,#0xd4c]
001be8  ea000231          B        |L1.9396|
                  |L1.7148|
;;;1020   
;;;1021   	} else if (tags.ecc_result ==
001bec  e5dd0030          LDRB     r0,[sp,#0x30]
001bf0  e3500003          CMP      r0,#3
001bf4  1a00000b          BNE      |L1.7208|
;;;1022   		YAFFS_ECC_RESULT_UNFIXED) {
;;;1023   		yaffs_trace(YAFFS_TRACE_SCAN,
001bf8  e51f0b8c          LDR      r0,|L1.4212|
001bfc  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
001c00  e3100008          TST      r0,#8
001c04  0a000003          BEQ      |L1.7192|
001c08  e28f0fe1          ADR      r0,|L1.8084|
001c0c  e59d107c          LDR      r1,[sp,#0x7c]
001c10  e59d2080          LDR      r2,[sp,#0x80]
001c14  ebfffffe          BL       sysprintf
                  |L1.7192|
;;;1024   			" Unfixed ECC in chunk(%d:%d), chunk ignored",
;;;1025   			blk, chunk_in_block);
;;;1026   			dev->n_free_chunks++;
001c18  e5960d4c          LDR      r0,[r6,#0xd4c]
001c1c  e2800001          ADD      r0,r0,#1
001c20  e5860d4c          STR      r0,[r6,#0xd4c]
001c24  ea000222          B        |L1.9396|
                  |L1.7208|
;;;1027   	} else if (tags.obj_id > YAFFS_MAX_OBJECT_ID ||
001c28  e59d0024          LDR      r0,[sp,#0x24]
001c2c  e3500701          CMP      r0,#0x40000
001c30  2a000010          BCS      |L1.7288|
;;;1028   		   tags.chunk_id > YAFFS_MAX_CHUNK_ID ||
001c34  e59d0028          LDR      r0,[sp,#0x28]
001c38  e370021f          CMN      r0,#0xf0000001
001c3c  8a00000d          BHI      |L1.7288|
;;;1029   		   tags.obj_id == YAFFS_OBJECTID_SUMMARY ||
001c40  e59d0024          LDR      r0,[sp,#0x24]
001c44  e3500010          CMP      r0,#0x10
001c48  0a00000a          BEQ      |L1.7288|
;;;1030   		   (tags.chunk_id > 0 &&
001c4c  e59d0028          LDR      r0,[sp,#0x28]
001c50  e3500000          CMP      r0,#0
001c54  0a000003          BEQ      |L1.7272|
;;;1031   		     tags.n_bytes > dev->data_bytes_per_chunk) ||
001c58  e59d002c          LDR      r0,[sp,#0x2c]
001c5c  e59610a4          LDR      r1,[r6,#0xa4]
001c60  e1500001          CMP      r0,r1
001c64  8a000003          BHI      |L1.7288|
                  |L1.7272|
;;;1032   		   tags.seq_number != bi->seq_number) {
001c68  e59d0040          LDR      r0,[sp,#0x40]
001c6c  e5991004          LDR      r1,[r9,#4]
001c70  e1500001          CMP      r0,r1
001c74  0a00000e          BEQ      |L1.7348|
                  |L1.7288|
;;;1033   		yaffs_trace(YAFFS_TRACE_SCAN,
001c78  e51f0c0c          LDR      r0,|L1.4212|
001c7c  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
001c80  e3100008          TST      r0,#8
001c84  0a000006          BEQ      |L1.7332|
001c88  e1cd02d8          LDRD     r0,r1,[sp,#0x28]
001c8c  e1cd00f0          STRD     r0,r1,[sp,#0]
001c90  e59f0330          LDR      r0,|L1.8136|
001c94  e59d107c          LDR      r1,[sp,#0x7c]
001c98  e59d2080          LDR      r2,[sp,#0x80]
001c9c  e59d3024          LDR      r3,[sp,#0x24]
001ca0  ebfffffe          BL       sysprintf
                  |L1.7332|
;;;1034   			"Chunk (%d:%d) with bad tags:obj = %d, chunk_id = %d, n_bytes = %d, ignored",
;;;1035   			blk, chunk_in_block, tags.obj_id,
;;;1036   			tags.chunk_id, tags.n_bytes);
;;;1037   		dev->n_free_chunks++;
001ca4  e5960d4c          LDR      r0,[r6,#0xd4c]
001ca8  e2800001          ADD      r0,r0,#1
001cac  e5860d4c          STR      r0,[r6,#0xd4c]
001cb0  ea0001ff          B        |L1.9396|
                  |L1.7348|
;;;1038   	} else if (tags.chunk_id > 0) {
001cb4  e59d0028          LDR      r0,[sp,#0x28]
001cb8  e3500000          CMP      r0,#0
001cbc  0a000050          BEQ      |L1.7684|
;;;1039   		/* chunk_id > 0 so it is a data chunk... */
;;;1040   		loff_t endpos;
;;;1041   		loff_t chunk_base = (tags.chunk_id - 1) *
001cc0  e59d0028          LDR      r0,[sp,#0x28]
001cc4  e2400001          SUB      r0,r0,#1
001cc8  e59610a4          LDR      r1,[r6,#0xa4]
001ccc  e0000091          MUL      r0,r1,r0
001cd0  e3a01000          MOV      r1,#0
001cd4  e1cd00f0          STRD     r0,r1,[sp,#0]
;;;1042   					dev->data_bytes_per_chunk;
;;;1043   
;;;1044   		*found_chunks = 1;
001cd8  e3a01001          MOV      r1,#1
001cdc  e59d00a8          LDR      r0,[sp,#0xa8]
001ce0  e5801000          STR      r1,[r0,#0]
;;;1045   
;;;1046   		yaffs_set_chunk_bit(dev, blk, chunk_in_block);
001ce4  e1a00006          MOV      r0,r6
001ce8  e59d107c          LDR      r1,[sp,#0x7c]
001cec  e59d2080          LDR      r2,[sp,#0x80]
001cf0  ebfffffe          BL       yaffs_set_chunk_bit
;;;1047   		bi->pages_in_use++;
001cf4  e5990000          LDR      r0,[r9,#0]
001cf8  e3c00703          BIC      r0,r0,#0xc0000
001cfc  e3c00bff          BIC      r0,r0,#0x3fc00
001d00  e5991000          LDR      r1,[r9,#0]
001d04  e1a01601          LSL      r1,r1,#12
001d08  e3a02001          MOV      r2,#1
001d0c  e0821b21          ADD      r1,r2,r1,LSR #22
001d10  e59f22b4          LDR      r2,|L1.8140|
001d14  e0021501          AND      r1,r2,r1,LSL #10
001d18  e1800001          ORR      r0,r0,r1
001d1c  e5890000          STR      r0,[r9,#0]
;;;1048   
;;;1049   		in = yaffs_find_or_create_by_number(dev,
001d20  e3a02001          MOV      r2,#1
001d24  e1a00006          MOV      r0,r6
001d28  e59d1024          LDR      r1,[sp,#0x24]
001d2c  ebfffffe          BL       yaffs_find_or_create_by_number
001d30  e1a04000          MOV      r4,r0
;;;1050   					tags.obj_id,
;;;1051   					YAFFS_OBJECT_TYPE_FILE);
;;;1052   		if (!in)
001d34  e3540000          CMP      r4,#0
001d38  1a000001          BNE      |L1.7492|
;;;1053   			/* Out of memory */
;;;1054   			alloc_failed = 1;
001d3c  e3a00001          MOV      r0,#1
001d40  e58d001c          STR      r0,[sp,#0x1c]
                  |L1.7492|
;;;1055   
;;;1056   		if (in &&
001d44  e3540000          CMP      r4,#0
001d48  0a000025          BEQ      |L1.7652|
;;;1057   		    in->variant_type == YAFFS_OBJECT_TYPE_FILE &&
001d4c  e5d40064          LDRB     r0,[r4,#0x64]
001d50  e3500001          CMP      r0,#1
001d54  1a000022          BNE      |L1.7652|
;;;1058   		    chunk_base < in->variant.file_variant.shrink_size) {
001d58  e1c427d8          LDRD     r2,r3,[r4,#0x78]
001d5c  e59d1000          LDR      r1,[sp,#0]
001d60  e0511002          SUBS     r1,r1,r2
001d64  e59d0004          LDR      r0,[sp,#4]
001d68  e0d00003          SBCS     r0,r0,r3
001d6c  aa00001c          BGE      |L1.7652|
;;;1059   			/* This has not been invalidated by
;;;1060   			 * a resize */
;;;1061   			if (!yaffs_put_chunk_in_file(in, tags.chunk_id,
001d70  e3e03000          MVN      r3,#0
001d74  e1a00004          MOV      r0,r4
001d78  e59d1028          LDR      r1,[sp,#0x28]
001d7c  e59d2018          LDR      r2,[sp,#0x18]
001d80  ebfffffe          BL       yaffs_put_chunk_in_file
001d84  e3500000          CMP      r0,#0
001d88  1a000001          BNE      |L1.7572|
;;;1062   								chunk, -1))
;;;1063   				alloc_failed = 1;
001d8c  e3a00001          MOV      r0,#1
001d90  e58d001c          STR      r0,[sp,#0x1c]
                  |L1.7572|
;;;1064   
;;;1065   			/* File size is calculated by looking at
;;;1066   			 * the data chunks if we have not
;;;1067   			 * seen an object header yet.
;;;1068   			 * Stop this practice once we find an
;;;1069   			 * object header.
;;;1070   			 */
;;;1071   			endpos = chunk_base + tags.n_bytes;
001d94  e59d002c          LDR      r0,[sp,#0x2c]
001d98  e89d0006          LDM      sp,{r1,r2}
001d9c  e0900001          ADDS     r0,r0,r1
001da0  e2a21000          ADC      r1,r2,#0
001da4  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;1072   
;;;1073   			if (!in->valid &&
001da8  e5d40000          LDRB     r0,[r4,#0]
001dac  e1b003a0          LSRS     r0,r0,#7
001db0  1a000012          BNE      |L1.7680|
;;;1074   			    in->variant.file_variant.scanned_size < endpos) {
001db4  e1c427d0          LDRD     r2,r3,[r4,#0x70]
001db8  e1cd00d8          LDRD     r0,r1,[sp,#8]
001dbc  e0520000          SUBS     r0,r2,r0
001dc0  e0d30001          SBCS     r0,r3,r1
001dc4  aa00000d          BGE      |L1.7680|
;;;1075   				in->variant.file_variant.
001dc8  e59d000c          LDR      r0,[sp,#0xc]
001dcc  e59d1008          LDR      r1,[sp,#8]
001dd0  e5840074          STR      r0,[r4,#0x74]
001dd4  e5841070          STR      r1,[r4,#0x70]
;;;1076   				    scanned_size = endpos;
;;;1077   				in->variant.file_variant.
001dd8  e1cd00d8          LDRD     r0,r1,[sp,#8]
001ddc  e1c406f8          STRD     r0,r1,[r4,#0x68]
001de0  ea000006          B        |L1.7680|
                  |L1.7652|
;;;1078   				    file_size = endpos;
;;;1079   			}
;;;1080   		} else if (in) {
001de4  e3540000          CMP      r4,#0
001de8  0a000004          BEQ      |L1.7680|
;;;1081   			/* This chunk has been invalidated by a
;;;1082   			 * resize, or a past file deletion
;;;1083   			 * so delete the chunk*/
;;;1084   			yaffs_chunk_del(dev, chunk, 1, __LINE__);
001dec  e59f31dc          LDR      r3,|L1.8144|
001df0  e3a02001          MOV      r2,#1
001df4  e1a00006          MOV      r0,r6
001df8  e59d1018          LDR      r1,[sp,#0x18]
001dfc  ebfffffe          BL       yaffs_chunk_del
                  |L1.7680|
;;;1085   		}
;;;1086   	} else {
001e00  ea0001ab          B        |L1.9396|
                  |L1.7684|
;;;1087   		/* chunk_id == 0, so it is an ObjectHeader.
;;;1088   		 * Thus, we read in the object header and make
;;;1089   		 * the object
;;;1090   		 */
;;;1091   		*found_chunks = 1;
001e04  e3a01001          MOV      r1,#1
001e08  e59d00a8          LDR      r0,[sp,#0xa8]
001e0c  e5801000          STR      r1,[r0,#0]
;;;1092   
;;;1093   		yaffs_set_chunk_bit(dev, blk, chunk_in_block);
001e10  e1a00006          MOV      r0,r6
001e14  e59d107c          LDR      r1,[sp,#0x7c]
001e18  e59d2080          LDR      r2,[sp,#0x80]
001e1c  ebfffffe          BL       yaffs_set_chunk_bit
;;;1094   		bi->pages_in_use++;
001e20  e5990000          LDR      r0,[r9,#0]
001e24  e3c00703          BIC      r0,r0,#0xc0000
001e28  e3c00bff          BIC      r0,r0,#0x3fc00
001e2c  e5991000          LDR      r1,[r9,#0]
001e30  e1a01601          LSL      r1,r1,#12
001e34  e3a02001          MOV      r2,#1
001e38  e0821b21          ADD      r1,r2,r1,LSR #22
001e3c  e59f2188          LDR      r2,|L1.8140|
001e40  e0021501          AND      r1,r2,r1,LSL #10
001e44  e1800001          ORR      r0,r0,r1
001e48  e5890000          STR      r0,[r9,#0]
;;;1095   
;;;1096   		oh = NULL;
001e4c  e3a05000          MOV      r5,#0
;;;1097   		in = NULL;
001e50  e3a04000          MOV      r4,#0
;;;1098   
;;;1099   		if (tags.extra_available) {
001e54  e59d0044          LDR      r0,[sp,#0x44]
001e58  e3500000          CMP      r0,#0
001e5c  0a000008          BEQ      |L1.7812|
;;;1100   			in = yaffs_find_or_create_by_number(dev,
001e60  e5dd2054          LDRB     r2,[sp,#0x54]
001e64  e1a00006          MOV      r0,r6
001e68  e59d1024          LDR      r1,[sp,#0x24]
001e6c  ebfffffe          BL       yaffs_find_or_create_by_number
001e70  e1a04000          MOV      r4,r0
;;;1101   					tags.obj_id,
;;;1102   					tags.extra_obj_type);
;;;1103   			if (!in)
001e74  e3540000          CMP      r4,#0
001e78  1a000001          BNE      |L1.7812|
;;;1104   				alloc_failed = 1;
001e7c  e3a00001          MOV      r0,#1
001e80  e58d001c          STR      r0,[sp,#0x1c]
                  |L1.7812|
;;;1105   		}
;;;1106   
;;;1107   		if (!in ||
001e84  e3540000          CMP      r4,#0
001e88  0a000011          BEQ      |L1.7892|
;;;1108   		    (!in->valid && dev->param.disable_lazy_load) ||
001e8c  e5d40000          LDRB     r0,[r4,#0]
001e90  e1b003a0          LSRS     r0,r0,#7
001e94  1a000002          BNE      |L1.7844|
001e98  e5960078          LDR      r0,[r6,#0x78]
001e9c  e3500000          CMP      r0,#0
001ea0  1a00000b          BNE      |L1.7892|
                  |L1.7844|
;;;1109   		    tags.extra_shadows ||
001ea4  e59d0050          LDR      r0,[sp,#0x50]
001ea8  e3500000          CMP      r0,#0
001eac  1a000008          BNE      |L1.7892|
;;;1110   		    (!in->valid && (tags.obj_id == YAFFS_OBJECTID_ROOT ||
001eb0  e5d40000          LDRB     r0,[r4,#0]
001eb4  e1b003a0          LSRS     r0,r0,#7
001eb8  1a000046          BNE      |L1.8152|
001ebc  e59d0024          LDR      r0,[sp,#0x24]
001ec0  e3500001          CMP      r0,#1
001ec4  0a000002          BEQ      |L1.7892|
;;;1111   				 tags.obj_id == YAFFS_OBJECTID_LOSTNFOUND))) {
001ec8  e59d0024          LDR      r0,[sp,#0x24]
001ecc  e3500002          CMP      r0,#2
001ed0  1a000040          BNE      |L1.8152|
                  |L1.7892|
;;;1112   
;;;1113   			/* If we don't have  valid info then we
;;;1114   			 * need to read the chunk
;;;1115   			 * TODO In future we can probably defer
;;;1116   			 * reading the chunk and living with
;;;1117   			 * invalid data until needed.
;;;1118   			 */
;;;1119   
;;;1120   			yaffs_rd_chunk_tags_nand(dev, chunk, chunk_data, NULL);
001ed4  e3a03000          MOV      r3,#0
001ed8  e1a00006          MOV      r0,r6
001edc  e59d1018          LDR      r1,[sp,#0x18]
001ee0  e59d20ac          LDR      r2,[sp,#0xac]
001ee4  ebfffffe          BL       yaffs_rd_chunk_tags_nand
;;;1121   
;;;1122   			oh = (struct yaffs_obj_hdr *)chunk_data;
001ee8  e59d50ac          LDR      r5,[sp,#0xac]
;;;1123   
;;;1124   			if (dev->param.inband_tags) {
001eec  e5960004          LDR      r0,[r6,#4]
001ef0  e3500000          CMP      r0,#0
001ef4  0a000003          BEQ      |L1.7944|
;;;1125   				/* Fix up the header if they got
;;;1126   				 * corrupted by inband tags */
;;;1127   				oh->shadows_obj =
001ef8  e59501e8          LDR      r0,[r5,#0x1e8]
001efc  e58501f8          STR      r0,[r5,#0x1f8]
;;;1128   				    oh->inband_shadowed_obj_id;
;;;1129   				oh->is_shrink =
001f00  e59501ec          LDR      r0,[r5,#0x1ec]
001f04  e58501fc          STR      r0,[r5,#0x1fc]
                  |L1.7944|
;;;1130   				    oh->inband_is_shrink;
;;;1131   			}
;;;1132   
;;;1133   			if (!in) {
001f08  e3540000          CMP      r4,#0
001f0c  1a000031          BNE      |L1.8152|
;;;1134   				in = yaffs_find_or_create_by_number(dev,
001f10  e5d52000          LDRB     r2,[r5,#0]
001f14  e1a00006          MOV      r0,r6
001f18  e59d1024          LDR      r1,[sp,#0x24]
001f1c  ebfffffe          BL       yaffs_find_or_create_by_number
001f20  e1a04000          MOV      r4,r0
;;;1135   							tags.obj_id, oh->type);
;;;1136   				if (!in)
001f24  e3540000          CMP      r4,#0
001f28  1a00002a          BNE      |L1.8152|
;;;1137   					alloc_failed = 1;
001f2c  e3a00001          MOV      r0,#1
001f30  ea000027          B        |L1.8148|
                  |L1.7988|
001f34  79616666          DCB      "yaffs:  Allocating from %d %d\n",0
001f38  733a2020
001f3c  416c6c6f
001f40  63617469
001f44  6e672066
001f48  726f6d20
001f4c  25642025
001f50  640a00  
001f53  00                DCB      0
                  |L1.8020|
001f54  79616666          DCB      "yaffs: Partially written block %d detected. gc will fix"
001f58  733a2050
001f5c  61727469
001f60  616c6c79
001f64  20777269
001f68  7474656e
001f6c  20626c6f
001f70  636b2025
001f74  64206465
001f78  74656374
001f7c  65642e20
001f80  67632077
001f84  696c6c20
001f88  666978  
001f8b  20746869          DCB      " this.\n",0
001f8f  732e0a00
001f93  00                DCB      0
                  |L1.8084|
001f94  79616666          DCB      "yaffs:  Unfixed ECC in chunk(%d:%d), chunk ignored\n",0
001f98  733a2020
001f9c  556e6669
001fa0  78656420
001fa4  45434320
001fa8  696e2063
001fac  68756e6b
001fb0  2825643a
001fb4  2564292c
001fb8  20636875
001fbc  6e6b2069
001fc0  676e6f72
001fc4  65640a00
                  |L1.8136|
                          DCD      ||.constdata||+0x148
                  |L1.8140|
                          DCD      0x000ffc00
                  |L1.8144|
                          DCD      0x0000043c
                  |L1.8148|
001fd4  e58d001c          STR      r0,[sp,#0x1c]
                  |L1.8152|
;;;1138   			}
;;;1139   		}
;;;1140   
;;;1141   		if (!in) {
001fd8  e3540000          CMP      r4,#0
001fdc  1a00000a          BNE      |L1.8204|
;;;1142   			/* TODO Hoosterman we have a problem! */
;;;1143   			yaffs_trace(YAFFS_TRACE_ERROR,
001fe0  e51f0f74          LDR      r0,|L1.4212|
001fe4  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
001fe8  e3100101          TST      r0,#0x40000000
001fec  0a000003          BEQ      |L1.8192|
001ff0  e59f082c          LDR      r0,|L1.10276|
001ff4  e59d1024          LDR      r1,[sp,#0x24]
001ff8  e59d2018          LDR      r2,[sp,#0x18]
001ffc  ebfffffe          BL       sysprintf
                  |L1.8192|
;;;1144   				"yaffs tragedy: Could not make object for object  %d at chunk %d during scan",
;;;1145   				tags.obj_id, chunk);
;;;1146   			return YAFFS_FAIL;
002000  e3a00000          MOV      r0,#0
                  |L1.8196|
002004  e28dd084          ADD      sp,sp,#0x84
;;;1147   		}
;;;1148   
;;;1149   		if (in->valid) {
;;;1150   			/* We have already filled this one.
;;;1151   			 * We have a duplicate that will be
;;;1152   			 * discarded, but we first have to suck
;;;1153   			 * out resize info if it is a file.
;;;1154   			 */
;;;1155   			if ((in->variant_type == YAFFS_OBJECT_TYPE_FILE) &&
;;;1156   				((oh && oh->type == YAFFS_OBJECT_TYPE_FILE) ||
;;;1157   				 (tags.extra_available &&
;;;1158   				  tags.extra_obj_type == YAFFS_OBJECT_TYPE_FILE)
;;;1159   				)) {
;;;1160   				loff_t this_size = (oh) ?
;;;1161   					yaffs_oh_to_size(oh) :
;;;1162   					tags.extra_file_size;
;;;1163   				u32 parent_obj_id = (oh) ?
;;;1164   					oh->parent_obj_id :
;;;1165   					tags.extra_parent_id;
;;;1166   
;;;1167   				is_shrink = (oh) ?
;;;1168   					oh->is_shrink :
;;;1169   					tags.extra_is_shrink;
;;;1170   
;;;1171   				/* If it is deleted (unlinked
;;;1172   				 * at start also means deleted)
;;;1173   				 * we treat the file size as
;;;1174   				 * being zeroed at this point.
;;;1175   				 */
;;;1176   				if (parent_obj_id == YAFFS_OBJECTID_DELETED ||
;;;1177   				    parent_obj_id == YAFFS_OBJECTID_UNLINKED) {
;;;1178   					this_size = 0;
;;;1179   					is_shrink = 1;
;;;1180   				}
;;;1181   
;;;1182   				if (is_shrink &&
;;;1183   				    in->variant.file_variant.shrink_size >
;;;1184   				    this_size)
;;;1185   					in->variant.file_variant.shrink_size =
;;;1186   					this_size;
;;;1187   
;;;1188   				if (is_shrink)
;;;1189   					bi->has_shrink_hdr = 1;
;;;1190   			}
;;;1191   			/* Use existing - destroy this one. */
;;;1192   			yaffs_chunk_del(dev, chunk, 1, __LINE__);
;;;1193   		}
;;;1194   
;;;1195   		if (!in->valid && in->variant_type !=
;;;1196   		    (oh ? oh->type : tags.extra_obj_type))
;;;1197   			yaffs_trace(YAFFS_TRACE_ERROR,
;;;1198   				"yaffs tragedy: Bad object type, %d != %d, for object %d at chunk %d during scan",
;;;1199   				oh ? oh->type : tags.extra_obj_type,
;;;1200   				in->variant_type, tags.obj_id,
;;;1201   				chunk);
;;;1202   
;;;1203   		if (!in->valid &&
;;;1204   		    (tags.obj_id == YAFFS_OBJECTID_ROOT ||
;;;1205   		     tags.obj_id == YAFFS_OBJECTID_LOSTNFOUND)) {
;;;1206   			/* We only load some info, don't fiddle
;;;1207   			 * with directory structure */
;;;1208   			in->valid = 1;
;;;1209   
;;;1210   			if (oh) {
;;;1211   				in->yst_mode = oh->yst_mode;
;;;1212   				yaffs_load_attribs(in, oh);
;;;1213   				in->lazy_loaded = 0;
;;;1214   			} else {
;;;1215   				in->lazy_loaded = 1;
;;;1216   			}
;;;1217   			in->hdr_chunk = chunk;
;;;1218   
;;;1219   		} else if (!in->valid) {
;;;1220   			/* we need to load this info */
;;;1221   			in->valid = 1;
;;;1222   			in->hdr_chunk = chunk;
;;;1223   			if (oh) {
;;;1224   				in->variant_type = oh->type;
;;;1225   				in->yst_mode = oh->yst_mode;
;;;1226   				yaffs_load_attribs(in, oh);
;;;1227   
;;;1228   				if (oh->shadows_obj > 0)
;;;1229   					yaffs_handle_shadowed_obj(dev,
;;;1230   					     oh->shadows_obj, 1);
;;;1231   
;;;1232   				yaffs_set_obj_name_from_oh(in, oh);
;;;1233   				parent = yaffs_find_or_create_by_number(dev,
;;;1234   						oh->parent_obj_id,
;;;1235   						YAFFS_OBJECT_TYPE_DIRECTORY);
;;;1236   				file_size = yaffs_oh_to_size(oh);
;;;1237   				is_shrink = oh->is_shrink;
;;;1238   				equiv_id = oh->equiv_id;
;;;1239   			} else {
;;;1240   				in->variant_type = tags.extra_obj_type;
;;;1241   				parent = yaffs_find_or_create_by_number(dev,
;;;1242   						tags.extra_parent_id,
;;;1243   						YAFFS_OBJECT_TYPE_DIRECTORY);
;;;1244   				file_size = tags.extra_file_size;
;;;1245   				is_shrink = tags.extra_is_shrink;
;;;1246   				equiv_id = tags.extra_equiv_id;
;;;1247   				in->lazy_loaded = 1;
;;;1248   			}
;;;1249   			in->dirty = 0;
;;;1250   
;;;1251   			if (!parent)
;;;1252   				alloc_failed = 1;
;;;1253   
;;;1254   			/* directory stuff...
;;;1255   			 * hook up to parent
;;;1256   			 */
;;;1257   
;;;1258   			if (parent &&
;;;1259   			    parent->variant_type == YAFFS_OBJECT_TYPE_UNKNOWN) {
;;;1260   				/* Set up as a directory */
;;;1261   				parent->variant_type =
;;;1262   					YAFFS_OBJECT_TYPE_DIRECTORY;
;;;1263   				INIT_LIST_HEAD(&parent->
;;;1264   						variant.dir_variant.children);
;;;1265   			} else if (!parent ||
;;;1266   				   parent->variant_type !=
;;;1267   					YAFFS_OBJECT_TYPE_DIRECTORY) {
;;;1268   				/* Hoosterman, another problem....
;;;1269   				 * Trying to use a non-directory as a directory
;;;1270   				 */
;;;1271   
;;;1272   				yaffs_trace(YAFFS_TRACE_ERROR,
;;;1273   					"yaffs tragedy: attempting to use non-directory as a directory in scan. Put in lost+found."
;;;1274   					);
;;;1275   				parent = dev->lost_n_found;
;;;1276   			}
;;;1277   			yaffs_add_obj_to_dir(parent, in);
;;;1278   
;;;1279   			is_unlinked = (parent == dev->del_dir) ||
;;;1280   					(parent == dev->unlinked_dir);
;;;1281   
;;;1282   			if (is_shrink)
;;;1283   				/* Mark the block */
;;;1284   				bi->has_shrink_hdr = 1;
;;;1285   
;;;1286   			/* Note re hardlinks.
;;;1287   			 * Since we might scan a hardlink before its equivalent
;;;1288   			 * object is scanned we put them all in a list.
;;;1289   			 * After scanning is complete, we should have all the
;;;1290   			 * objects, so we run through this list and fix up all
;;;1291   			 * the chains.
;;;1292   			 */
;;;1293   
;;;1294   			switch (in->variant_type) {
;;;1295   			case YAFFS_OBJECT_TYPE_UNKNOWN:
;;;1296   				/* Todo got a problem */
;;;1297   				break;
;;;1298   			case YAFFS_OBJECT_TYPE_FILE:
;;;1299   				file_var = &in->variant.file_variant;
;;;1300   				if (file_var->scanned_size < file_size) {
;;;1301   					/* This covers the case where the file
;;;1302   					 * size is greater than the data held.
;;;1303   					 * This will happen if the file is
;;;1304   					 * resized to be larger than its
;;;1305   					 * current data extents.
;;;1306   					 */
;;;1307   					file_var->file_size = file_size;
;;;1308   					file_var->scanned_size = file_size;
;;;1309   				}
;;;1310   
;;;1311   				if (file_var->shrink_size > file_size)
;;;1312   					file_var->shrink_size = file_size;
;;;1313   
;;;1314   				break;
;;;1315   			case YAFFS_OBJECT_TYPE_HARDLINK:
;;;1316   				hl_var = &in->variant.hardlink_variant;
;;;1317   				if (!is_unlinked) {
;;;1318   					hl_var->equiv_id = equiv_id;
;;;1319   					list_add(&in->hard_links, hard_list);
;;;1320   				}
;;;1321   				break;
;;;1322   			case YAFFS_OBJECT_TYPE_DIRECTORY:
;;;1323   				/* Do nothing */
;;;1324   				break;
;;;1325   			case YAFFS_OBJECT_TYPE_SPECIAL:
;;;1326   				/* Do nothing */
;;;1327   				break;
;;;1328   			case YAFFS_OBJECT_TYPE_SYMLINK:
;;;1329   				sl_var = &in->variant.symlink_variant;
;;;1330   				if (oh) {
;;;1331   					sl_var->alias =
;;;1332   					    yaffs_clone_str(oh->alias);
;;;1333   					if (!sl_var->alias)
;;;1334   						alloc_failed = 1;
;;;1335   				}
;;;1336   				break;
;;;1337   			}
;;;1338   		}
;;;1339   	}
;;;1340   	return alloc_failed ? YAFFS_FAIL : YAFFS_OK;
;;;1341   }
002008  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.8204|
00200c  e5d40000          LDRB     r0,[r4,#0]            ;1149
002010  e1b003a0          LSRS     r0,r0,#7              ;1149
002014  0a000044          BEQ      |L1.8492|
002018  e5d40064          LDRB     r0,[r4,#0x64]         ;1155
00201c  e3500001          CMP      r0,#1                 ;1155
002020  1a00003c          BNE      |L1.8472|
002024  e3550000          CMP      r5,#0                 ;1156
002028  0a000002          BEQ      |L1.8248|
00202c  e5d50000          LDRB     r0,[r5,#0]            ;1156
002030  e3500001          CMP      r0,#1                 ;1156
002034  0a000005          BEQ      |L1.8272|
                  |L1.8248|
002038  e59d0044          LDR      r0,[sp,#0x44]         ;1157
00203c  e3500000          CMP      r0,#0                 ;1157
002040  0a000034          BEQ      |L1.8472|
002044  e5dd0054          LDRB     r0,[sp,#0x54]         ;1158
002048  e3500001          CMP      r0,#1                 ;1158
00204c  1a000031          BNE      |L1.8472|
                  |L1.8272|
002050  e3550000          CMP      r5,#0                 ;1160
002054  0a000002          BEQ      |L1.8292|
002058  e1a00005          MOV      r0,r5                 ;1161
00205c  ebfffffe          BL       yaffs_oh_to_size
002060  ea000000          B        |L1.8296|
                  |L1.8292|
002064  e1cd05d8          LDRD     r0,r1,[sp,#0x58]      ;1162
                  |L1.8296|
002068  e1cd00f8          STRD     r0,r1,[sp,#8]         ;1162
00206c  e3550000          CMP      r5,#0                 ;1163
002070  0a000001          BEQ      |L1.8316|
002074  e5950004          LDR      r0,[r5,#4]            ;1164
002078  ea000000          B        |L1.8320|
                  |L1.8316|
00207c  e59d0048          LDR      r0,[sp,#0x48]         ;1165
                  |L1.8320|
002080  e58d0004          STR      r0,[sp,#4]            ;1165
002084  e3550000          CMP      r5,#0                 ;1167
002088  0a000001          BEQ      |L1.8340|
00208c  e59501fc          LDR      r0,[r5,#0x1fc]        ;1168
002090  ea000000          B        |L1.8344|
                  |L1.8340|
002094  e59d004c          LDR      r0,[sp,#0x4c]         ;1169
                  |L1.8344|
002098  e58d006c          STR      r0,[sp,#0x6c]         ;1169
00209c  e59d0004          LDR      r0,[sp,#4]            ;1176
0020a0  e3500004          CMP      r0,#4                 ;1176
0020a4  0a000002          BEQ      |L1.8372|
0020a8  e59d0004          LDR      r0,[sp,#4]            ;1177
0020ac  e3500003          CMP      r0,#3                 ;1177
0020b0  1a000004          BNE      |L1.8392|
                  |L1.8372|
0020b4  e3a01000          MOV      r1,#0                 ;1177
0020b8  e58d1008          STR      r1,[sp,#8]            ;1178
0020bc  e58d100c          STR      r1,[sp,#0xc]          ;1178
0020c0  e3a00001          MOV      r0,#1                 ;1179
0020c4  e58d006c          STR      r0,[sp,#0x6c]         ;1179
                  |L1.8392|
0020c8  e59d006c          LDR      r0,[sp,#0x6c]         ;1182
0020cc  e3500000          CMP      r0,#0                 ;1182
0020d0  0a000009          BEQ      |L1.8444|
0020d4  e1c427d8          LDRD     r2,r3,[r4,#0x78]      ;1183
0020d8  e59d1008          LDR      r1,[sp,#8]            ;1183
0020dc  e0511002          SUBS     r1,r1,r2              ;1183
0020e0  e59d000c          LDR      r0,[sp,#0xc]          ;1183
0020e4  e0d00003          SBCS     r0,r0,r3              ;1183
0020e8  aa000003          BGE      |L1.8444|
0020ec  e59d000c          LDR      r0,[sp,#0xc]          ;1185
0020f0  e59d1008          LDR      r1,[sp,#8]            ;1185
0020f4  e584007c          STR      r0,[r4,#0x7c]         ;1185
0020f8  e5841078          STR      r1,[r4,#0x78]         ;1185
                  |L1.8444|
0020fc  e59d006c          LDR      r0,[sp,#0x6c]         ;1188
002100  e3500000          CMP      r0,#0                 ;1188
002104  0a000002          BEQ      |L1.8468|
002108  e5990000          LDR      r0,[r9,#0]            ;1189
00210c  e3800102          ORR      r0,r0,#0x80000000     ;1189
002110  e5890000          STR      r0,[r9,#0]            ;1189
                  |L1.8468|
002114  e1a00000          MOV      r0,r0                 ;1190
                  |L1.8472|
002118  e59f3708          LDR      r3,|L1.10280|
00211c  e3a02001          MOV      r2,#1                 ;1192
002120  e1a00006          MOV      r0,r6                 ;1192
002124  e59d1018          LDR      r1,[sp,#0x18]         ;1192
002128  ebfffffe          BL       yaffs_chunk_del
                  |L1.8492|
00212c  e5d40000          LDRB     r0,[r4,#0]            ;1195
002130  e1b003a0          LSRS     r0,r0,#7              ;1195
002134  1a000017          BNE      |L1.8600|
002138  e5d41064          LDRB     r1,[r4,#0x64]         ;1195
00213c  e3550000          CMP      r5,#0                 ;1195
002140  0a000001          BEQ      |L1.8524|
002144  e5d50000          LDRB     r0,[r5,#0]            ;1196
002148  ea000000          B        |L1.8528|
                  |L1.8524|
00214c  e5dd0054          LDRB     r0,[sp,#0x54]         ;1196
                  |L1.8528|
002150  e1510000          CMP      r1,r0                 ;1196
002154  0a00000f          BEQ      |L1.8600|
002158  e59f06cc          LDR      r0,|L1.10284|
00215c  e5900000          LDR      r0,[r0,#0]            ;1197  ; yaffs_trace_mask
002160  e3100101          TST      r0,#0x40000000        ;1197
002164  0a00000b          BEQ      |L1.8600|
002168  e59d0018          LDR      r0,[sp,#0x18]         ;1197
00216c  e58d0000          STR      r0,[sp,#0]            ;1197
002170  e59d3024          LDR      r3,[sp,#0x24]         ;1197
002174  e5d42064          LDRB     r2,[r4,#0x64]         ;1197
002178  e3550000          CMP      r5,#0                 ;1197
00217c  0a000001          BEQ      |L1.8584|
002180  e5d50000          LDRB     r0,[r5,#0]            ;1197
002184  ea000000          B        |L1.8588|
                  |L1.8584|
002188  e5dd0054          LDRB     r0,[sp,#0x54]         ;1197
                  |L1.8588|
00218c  e1a01000          MOV      r1,r0                 ;1197
002190  e59f0698          LDR      r0,|L1.10288|
002194  ebfffffe          BL       sysprintf
                  |L1.8600|
002198  e5d40000          LDRB     r0,[r4,#0]            ;1203
00219c  e1b003a0          LSRS     r0,r0,#7              ;1203
0021a0  1a000019          BNE      |L1.8716|
0021a4  e59d0024          LDR      r0,[sp,#0x24]         ;1204
0021a8  e3500001          CMP      r0,#1                 ;1204
0021ac  0a000002          BEQ      |L1.8636|
0021b0  e59d0024          LDR      r0,[sp,#0x24]         ;1205
0021b4  e3500002          CMP      r0,#2                 ;1205
0021b8  1a000013          BNE      |L1.8716|
                  |L1.8636|
0021bc  e5d40000          LDRB     r0,[r4,#0]            ;1208
0021c0  e3800080          ORR      r0,r0,#0x80           ;1208
0021c4  e5c40000          STRB     r0,[r4,#0]            ;1208
0021c8  e3550000          CMP      r5,#0                 ;1210
0021cc  0a000008          BEQ      |L1.8692|
0021d0  e595010c          LDR      r0,[r5,#0x10c]        ;1211
0021d4  e5840034          STR      r0,[r4,#0x34]         ;1211
0021d8  e1a01005          MOV      r1,r5                 ;1212
0021dc  e1a00004          MOV      r0,r4                 ;1212
0021e0  ebfffffe          BL       yaffs_load_attribs
0021e4  e5d40001          LDRB     r0,[r4,#1]            ;1213
0021e8  e3c00001          BIC      r0,r0,#1              ;1213
0021ec  e5c40001          STRB     r0,[r4,#1]            ;1213
0021f0  ea000002          B        |L1.8704|
                  |L1.8692|
0021f4  e5d40001          LDRB     r0,[r4,#1]            ;1215
0021f8  e3800001          ORR      r0,r0,#1              ;1215
0021fc  e5c40001          STRB     r0,[r4,#1]            ;1215
                  |L1.8704|
002200  e59d0018          LDR      r0,[sp,#0x18]         ;1217
002204  e5840028          STR      r0,[r4,#0x28]         ;1217
002208  ea0000a9          B        |L1.9396|
                  |L1.8716|
00220c  e5d40000          LDRB     r0,[r4,#0]            ;1219
002210  e1b003a0          LSRS     r0,r0,#7              ;1219
002214  1a0000a6          BNE      |L1.9396|
002218  e5d40000          LDRB     r0,[r4,#0]            ;1221
00221c  e3800080          ORR      r0,r0,#0x80           ;1221
002220  e5c40000          STRB     r0,[r4,#0]            ;1221
002224  e59d0018          LDR      r0,[sp,#0x18]         ;1222
002228  e5840028          STR      r0,[r4,#0x28]         ;1222
00222c  e3550000          CMP      r5,#0                 ;1223
002230  0a00001e          BEQ      |L1.8880|
002234  e5d50000          LDRB     r0,[r5,#0]            ;1224
002238  e5c40064          STRB     r0,[r4,#0x64]         ;1224
00223c  e595010c          LDR      r0,[r5,#0x10c]        ;1225
002240  e5840034          STR      r0,[r4,#0x34]         ;1225
002244  e1a01005          MOV      r1,r5                 ;1226
002248  e1a00004          MOV      r0,r4                 ;1226
00224c  ebfffffe          BL       yaffs_load_attribs
002250  e59501f8          LDR      r0,[r5,#0x1f8]        ;1228
002254  e3500000          CMP      r0,#0                 ;1228
002258  da000003          BLE      |L1.8812|
00225c  e3a02001          MOV      r2,#1                 ;1229
002260  e1a00006          MOV      r0,r6                 ;1229
002264  e59511f8          LDR      r1,[r5,#0x1f8]        ;1229
002268  ebfffffe          BL       yaffs_handle_shadowed_obj
                  |L1.8812|
00226c  e1a01005          MOV      r1,r5                 ;1232
002270  e1a00004          MOV      r0,r4                 ;1232
002274  ebfffffe          BL       yaffs_set_obj_name_from_oh
002278  e3a02003          MOV      r2,#3                 ;1233
00227c  e1a00006          MOV      r0,r6                 ;1233
002280  e5951004          LDR      r1,[r5,#4]            ;1233
002284  ebfffffe          BL       yaffs_find_or_create_by_number
002288  e1a0a000          MOV      r10,r0                ;1233
00228c  e1a00005          MOV      r0,r5                 ;1236
002290  ebfffffe          BL       yaffs_oh_to_size
002294  e1a07000          MOV      r7,r0                 ;1236
002298  e1a08001          MOV      r8,r1                 ;1236
00229c  e59501fc          LDR      r0,[r5,#0x1fc]        ;1237
0022a0  e58d006c          STR      r0,[sp,#0x6c]         ;1237
0022a4  e5950128          LDR      r0,[r5,#0x128]        ;1238
0022a8  e58d0070          STR      r0,[sp,#0x70]         ;1238
0022ac  ea00000f          B        |L1.8944|
                  |L1.8880|
0022b0  e5dd0054          LDRB     r0,[sp,#0x54]         ;1240
0022b4  e5c40064          STRB     r0,[r4,#0x64]         ;1240
0022b8  e3a02003          MOV      r2,#3                 ;1241
0022bc  e1a00006          MOV      r0,r6                 ;1241
0022c0  e59d1048          LDR      r1,[sp,#0x48]         ;1241
0022c4  ebfffffe          BL       yaffs_find_or_create_by_number
0022c8  e1a0a000          MOV      r10,r0                ;1241
0022cc  e59d7058          LDR      r7,[sp,#0x58]         ;1244
0022d0  e59d805c          LDR      r8,[sp,#0x5c]         ;1244
0022d4  e59d004c          LDR      r0,[sp,#0x4c]         ;1245
0022d8  e58d006c          STR      r0,[sp,#0x6c]         ;1245
0022dc  e59d0060          LDR      r0,[sp,#0x60]         ;1246
0022e0  e58d0070          STR      r0,[sp,#0x70]         ;1246
0022e4  e5d40001          LDRB     r0,[r4,#1]            ;1247
0022e8  e3800001          ORR      r0,r0,#1              ;1247
0022ec  e5c40001          STRB     r0,[r4,#1]            ;1247
                  |L1.8944|
0022f0  e5d40000          LDRB     r0,[r4,#0]            ;1249
0022f4  e3c00040          BIC      r0,r0,#0x40           ;1249
0022f8  e5c40000          STRB     r0,[r4,#0]            ;1249
0022fc  e35a0000          CMP      r10,#0                ;1251
002300  1a000001          BNE      |L1.8972|
002304  e3a00001          MOV      r0,#1                 ;1252
002308  e58d001c          STR      r0,[sp,#0x1c]         ;1252
                  |L1.8972|
00230c  e35a0000          CMP      r10,#0                ;1258
002310  0a00000a          BEQ      |L1.9024|
002314  e5da0064          LDRB     r0,[r10,#0x64]        ;1259
002318  e3500000          CMP      r0,#0                 ;1259
00231c  1a000007          BNE      |L1.9024|
002320  e3a00003          MOV      r0,#3                 ;1261
002324  e5ca0064          STRB     r0,[r10,#0x64]        ;1261
002328  e1a00000          MOV      r0,r0                 ;1263
00232c  e28a0068          ADD      r0,r10,#0x68          ;1263
002330  e58a0068          STR      r0,[r10,#0x68]        ;1263
002334  e28a0068          ADD      r0,r10,#0x68          ;1263
002338  e58a006c          STR      r0,[r10,#0x6c]        ;1263
00233c  ea00000b          B        |L1.9072|
                  |L1.9024|
002340  e35a0000          CMP      r10,#0                ;1265
002344  0a000002          BEQ      |L1.9044|
002348  e5da0064          LDRB     r0,[r10,#0x64]        ;1266
00234c  e3500003          CMP      r0,#3                 ;1266
002350  0a000006          BEQ      |L1.9072|
                  |L1.9044|
002354  e59f04d0          LDR      r0,|L1.10284|
002358  e5900000          LDR      r0,[r0,#0]            ;1272  ; yaffs_trace_mask
00235c  e3100101          TST      r0,#0x40000000        ;1272
002360  0a000001          BEQ      |L1.9068|
002364  e59f04c8          LDR      r0,|L1.10292|
002368  ebfffffe          BL       sysprintf
                  |L1.9068|
00236c  e596ad84          LDR      r10,[r6,#0xd84]       ;1275
                  |L1.9072|
002370  e1a01004          MOV      r1,r4                 ;1277
002374  e1a0000a          MOV      r0,r10                ;1277
002378  ebfffffe          BL       yaffs_add_obj_to_dir
00237c  e5960d9c          LDR      r0,[r6,#0xd9c]        ;1279
002380  e150000a          CMP      r0,r10                ;1279
002384  0a000002          BEQ      |L1.9108|
002388  e5960d98          LDR      r0,[r6,#0xd98]        ;1280
00238c  e150000a          CMP      r0,r10                ;1280
002390  1a000001          BNE      |L1.9116|
                  |L1.9108|
002394  e3a00001          MOV      r0,#1                 ;1280
002398  ea000000          B        |L1.9120|
                  |L1.9116|
00239c  e3a00000          MOV      r0,#0                 ;1280
                  |L1.9120|
0023a0  e58d0068          STR      r0,[sp,#0x68]         ;1280
0023a4  e59d006c          LDR      r0,[sp,#0x6c]         ;1282
0023a8  e3500000          CMP      r0,#0                 ;1282
0023ac  0a000002          BEQ      |L1.9148|
0023b0  e5990000          LDR      r0,[r9,#0]            ;1284
0023b4  e3800102          ORR      r0,r0,#0x80000000     ;1284
0023b8  e5890000          STR      r0,[r9,#0]            ;1284
                  |L1.9148|
0023bc  e5d40064          LDRB     r0,[r4,#0x64]         ;1294
0023c0  e3500006          CMP      r0,#6                 ;1294
0023c4  308ff100          ADDCC    pc,pc,r0,LSL #2       ;1294
0023c8  ea000038          B        |L1.9392|
0023cc  ea000004          B        |L1.9188|
0023d0  ea000005          B        |L1.9196|
0023d4  ea000025          B        |L1.9328|
0023d8  ea000020          B        |L1.9312|
0023dc  ea000012          B        |L1.9260|
0023e0  ea000020          B        |L1.9320|
                  |L1.9188|
0023e4  e1a00000          MOV      r0,r0                 ;1295
0023e8  ea000030          B        |L1.9392|
                  |L1.9196|
0023ec  e1a00000          MOV      r0,r0                 ;1298
0023f0  e284b068          ADD      r11,r4,#0x68          ;1299
0023f4  e1cb00d8          LDRD     r0,r1,[r11,#8]        ;1300
0023f8  e0500007          SUBS     r0,r0,r7              ;1300
0023fc  e0d10008          SBCS     r0,r1,r8              ;1300
002400  aa000002          BGE      |L1.9232|
002404  e88b0180          STM      r11,{r7,r8}           ;1307
002408  e58b7008          STR      r7,[r11,#8]           ;1308
00240c  e58b800c          STR      r8,[r11,#0xc]         ;1308
                  |L1.9232|
002410  e1cb01d0          LDRD     r0,r1,[r11,#0x10]     ;1311
002414  e0570000          SUBS     r0,r7,r0              ;1311
002418  e0d80001          SBCS     r0,r8,r1              ;1311
00241c  aa000001          BGE      |L1.9256|
002420  e58b7010          STR      r7,[r11,#0x10]        ;1312
002424  e58b8014          STR      r8,[r11,#0x14]        ;1312
                  |L1.9256|
002428  ea000020          B        |L1.9392|
                  |L1.9260|
00242c  e1a00000          MOV      r0,r0                 ;1315
002430  e2840068          ADD      r0,r4,#0x68           ;1316
002434  e58d0014          STR      r0,[sp,#0x14]         ;1316
002438  e59d0068          LDR      r0,[sp,#0x68]         ;1317
00243c  e3500000          CMP      r0,#0                 ;1317
002440  1a000005          BNE      |L1.9308|
002444  e59d0070          LDR      r0,[sp,#0x70]         ;1318
002448  e59d1014          LDR      r1,[sp,#0x14]         ;1318
00244c  e5810004          STR      r0,[r1,#4]            ;1318
002450  e2840014          ADD      r0,r4,#0x14           ;1319
002454  e59d10b0          LDR      r1,[sp,#0xb0]         ;1319
002458  ebfffffe          BL       list_add
                  |L1.9308|
00245c  ea000013          B        |L1.9392|
                  |L1.9312|
002460  e1a00000          MOV      r0,r0                 ;1322
002464  ea000011          B        |L1.9392|
                  |L1.9320|
002468  e1a00000          MOV      r0,r0                 ;1325
00246c  ea00000f          B        |L1.9392|
                  |L1.9328|
002470  e1a00000          MOV      r0,r0                 ;1328
002474  e2840068          ADD      r0,r4,#0x68           ;1329
002478  e58d0010          STR      r0,[sp,#0x10]         ;1329
00247c  e3550000          CMP      r5,#0                 ;1330
002480  0a000009          BEQ      |L1.9388|
002484  e2850f4b          ADD      r0,r5,#0x12c          ;1331
002488  ebfffffe          BL       yaffs_clone_str
00248c  e59d1010          LDR      r1,[sp,#0x10]         ;1331
002490  e5810000          STR      r0,[r1,#0]            ;1331
002494  e59d0010          LDR      r0,[sp,#0x10]         ;1333
002498  e5900000          LDR      r0,[r0,#0]            ;1333
00249c  e3500000          CMP      r0,#0                 ;1333
0024a0  1a000001          BNE      |L1.9388|
0024a4  e3a00001          MOV      r0,#1                 ;1334
0024a8  e58d001c          STR      r0,[sp,#0x1c]         ;1334
                  |L1.9388|
0024ac  e1a00000          MOV      r0,r0                 ;1336
                  |L1.9392|
0024b0  e1a00000          MOV      r0,r0                 ;1297
                  |L1.9396|
0024b4  e59d001c          LDR      r0,[sp,#0x1c]         ;1340
0024b8  e3500000          CMP      r0,#0                 ;1340
0024bc  1a000001          BNE      |L1.9416|
0024c0  e3a00001          MOV      r0,#1                 ;1340
0024c4  eafffece          B        |L1.8196|
                  |L1.9416|
0024c8  e3a00000          MOV      r0,#0                 ;1340
0024cc  eafffecc          B        |L1.8196|
;;;1342   
                          ENDP

                  yaffs2_scan_backwards PROC
;;;1343   int yaffs2_scan_backwards(struct yaffs_dev *dev)
0024d0  e92d4ff0          PUSH     {r4-r11,lr}
;;;1344   {
0024d4  e24dd03c          SUB      sp,sp,#0x3c
0024d8  e1a05000          MOV      r5,r0
;;;1345   	int blk;
;;;1346   	int block_iter;
;;;1347   	int start_iter;
;;;1348   	int end_iter;
;;;1349   	int n_to_scan = 0;
0024dc  e3a08000          MOV      r8,#0
;;;1350   	enum yaffs_block_state state;
;;;1351   	int c;
;;;1352   // 	LIST_HEAD(hard_list);
;;;1353   	struct yaffs_block_info *bi;
;;;1354   	u32 seq_number;
;;;1355   	int n_blocks = dev->internal_end_block - dev->internal_start_block + 1;
0024e0  e59500d4          LDR      r0,[r5,#0xd4]
0024e4  e59510d0          LDR      r1,[r5,#0xd0]
0024e8  e0400001          SUB      r0,r0,r1
0024ec  e2800001          ADD      r0,r0,#1
0024f0  e58d0024          STR      r0,[sp,#0x24]
;;;1356   	u8 *chunk_data;
;;;1357   	int found_chunks;
;;;1358   	int alloc_failed = 0;
0024f4  e3a00000          MOV      r0,#0
0024f8  e58d001c          STR      r0,[sp,#0x1c]
;;;1359   	struct yaffs_block_index *block_index = NULL;
0024fc  e3a07000          MOV      r7,#0
;;;1360   	int alt_block_index = 0;
002500  e58d0018          STR      r0,[sp,#0x18]
;;;1361   	int summary_available;
;;;1362   
;;;1363   	yaffs_trace(YAFFS_TRACE_SCAN,
002504  e59f0320          LDR      r0,|L1.10284|
002508  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
00250c  e3100008          TST      r0,#8
002510  0a000003          BEQ      |L1.9508|
002514  e59f031c          LDR      r0,|L1.10296|
002518  e59510d0          LDR      r1,[r5,#0xd0]
00251c  e59520d4          LDR      r2,[r5,#0xd4]
002520  ebfffffe          BL       sysprintf
                  |L1.9508|
;;;1364   		"yaffs2_scan_backwards starts  intstartblk %d intendblk %d...",
;;;1365   		dev->internal_start_block, dev->internal_end_block);
;;;1366   
;;;1367   	dev->seq_number = YAFFS_LOWEST_SEQUENCE_NUMBER;
002524  e3a00a01          MOV      r0,#0x1000
002528  e5850df0          STR      r0,[r5,#0xdf0]
;;;1368   
;;;1369   // 	block_index = kmalloc(n_blocks * sizeof(struct yaffs_block_index), GFP_NOFS);
;;;1370   	block_index = yaffs_malloc(n_blocks * sizeof(struct yaffs_block_index));
00252c  e59d1024          LDR      r1,[sp,#0x24]
002530  e1a00181          LSL      r0,r1,#3
002534  ebfffffe          BL       yaffs_malloc
002538  e1a07000          MOV      r7,r0
;;;1371   
;;;1372   	if (!block_index) {
00253c  e3570000          CMP      r7,#0
002540  1a000005          BNE      |L1.9564|
;;;1373   // 		block_index = vmalloc(n_blocks * sizeof(struct yaffs_block_index));
;;;1374   		block_index = yaffs_malloc(n_blocks * sizeof(struct yaffs_block_index));
002544  e59d1024          LDR      r1,[sp,#0x24]
002548  e1a00181          LSL      r0,r1,#3
00254c  ebfffffe          BL       yaffs_malloc
002550  e1a07000          MOV      r7,r0
;;;1375   		alt_block_index = 1;
002554  e3a00001          MOV      r0,#1
002558  e58d0018          STR      r0,[sp,#0x18]
                  |L1.9564|
;;;1376   	}
;;;1377   
;;;1378   	if (!block_index) {
00255c  e3570000          CMP      r7,#0
002560  1a000008          BNE      |L1.9608|
;;;1379   		yaffs_trace(YAFFS_TRACE_SCAN,
002564  e59f02c0          LDR      r0,|L1.10284|
002568  e5d00000          LDRB     r0,[r0,#0]  ; yaffs_trace_mask
00256c  e3100008          TST      r0,#8
002570  0a000001          BEQ      |L1.9596|
002574  e28f0d0b          ADR      r0,|L1.10300|
002578  ebfffffe          BL       sysprintf
                  |L1.9596|
;;;1380   			"yaffs2_scan_backwards() could not allocate block index!"
;;;1381   			);
;;;1382   		return YAFFS_FAIL;
00257c  e3a00000          MOV      r0,#0
                  |L1.9600|
002580  e28dd03c          ADD      sp,sp,#0x3c
;;;1383   	}
;;;1384   
;;;1385   	dev->blocks_in_checkpt = 0;
;;;1386   
;;;1387   	chunk_data = yaffs_get_temp_buffer(dev);
;;;1388   
;;;1389   	/* Scan all the blocks to determine their state */
;;;1390   	bi = dev->block_info;
;;;1391   	for (blk = dev->internal_start_block; blk <= dev->internal_end_block;
;;;1392   	     blk++) {
;;;1393   		yaffs_clear_chunk_bits(dev, blk);
;;;1394   		bi->pages_in_use = 0;
;;;1395   		bi->soft_del_pages = 0;
;;;1396   
;;;1397   		yaffs_query_init_block_state(dev, blk, &state, &seq_number);
;;;1398   
;;;1399   		bi->block_state = state;
;;;1400   		bi->seq_number = seq_number;
;;;1401   
;;;1402   		if (bi->seq_number == YAFFS_SEQUENCE_CHECKPOINT_DATA)
;;;1403   			bi->block_state = YAFFS_BLOCK_STATE_CHECKPOINT;
;;;1404   		if (bi->seq_number == YAFFS_SEQUENCE_BAD_BLOCK)
;;;1405   			bi->block_state = YAFFS_BLOCK_STATE_DEAD;
;;;1406   
;;;1407   		yaffs_trace(YAFFS_TRACE_SCAN_DEBUG,
;;;1408   			"Block scanning block %d state %d seq %d",
;;;1409   			blk, bi->block_state, seq_number);
;;;1410   
;;;1411   		if (bi->block_state == YAFFS_BLOCK_STATE_CHECKPOINT) {
;;;1412   			dev->blocks_in_checkpt++;
;;;1413   
;;;1414   		} else if (bi->block_state == YAFFS_BLOCK_STATE_DEAD) {
;;;1415   			yaffs_trace(YAFFS_TRACE_BAD_BLOCKS,
;;;1416   				"block %d is bad", blk);
;;;1417   		} else if (bi->block_state == YAFFS_BLOCK_STATE_EMPTY) {
;;;1418   			yaffs_trace(YAFFS_TRACE_SCAN_DEBUG, "Block empty ");
;;;1419   			dev->n_erased_blocks++;
;;;1420   			dev->n_free_chunks += dev->param.chunks_per_block;
;;;1421   		} else if (bi->block_state ==
;;;1422   				YAFFS_BLOCK_STATE_NEEDS_SCAN) {
;;;1423   			/* Determine the highest sequence number */
;;;1424   			if (seq_number >= YAFFS_LOWEST_SEQUENCE_NUMBER &&
;;;1425   			    seq_number < YAFFS_HIGHEST_SEQUENCE_NUMBER) {
;;;1426   				block_index[n_to_scan].seq = seq_number;
;;;1427   				block_index[n_to_scan].block = blk;
;;;1428   				n_to_scan++;
;;;1429   				if (seq_number >= dev->seq_number)
;;;1430   					dev->seq_number = seq_number;
;;;1431   			} else {
;;;1432   				/* TODO: Nasty sequence number! */
;;;1433   				yaffs_trace(YAFFS_TRACE_SCAN,
;;;1434   					"Block scanning block %d has bad sequence number %d",
;;;1435   					blk, seq_number);
;;;1436   			}
;;;1437   		}
;;;1438   		bi++;
;;;1439   	}
;;;1440   
;;;1441   	yaffs_trace(YAFFS_TRACE_SCAN, "%d blocks to be sorted...", n_to_scan);
;;;1442   
;;;1443   	cond_resched();
;;;1444   
;;;1445   	/* Sort the blocks by sequence number */
;;;1446   	sort(block_index, n_to_scan, sizeof(struct yaffs_block_index),
;;;1447   		   yaffs2_ybicmp, NULL);
;;;1448   
;;;1449   	cond_resched();
;;;1450   
;;;1451   	yaffs_trace(YAFFS_TRACE_SCAN, "...done");
;;;1452   
;;;1453   	/* Now scan the blocks looking at the data. */
;;;1454   	start_iter = 0;
;;;1455   	end_iter = n_to_scan - 1;
;;;1456   	yaffs_trace(YAFFS_TRACE_SCAN_DEBUG, "%d blocks to scan", n_to_scan);
;;;1457   
;;;1458   	/* For each block.... backwards */
;;;1459   	for (block_iter = end_iter;
;;;1460   	     !alloc_failed && block_iter >= start_iter;
;;;1461   	     block_iter--) {
;;;1462   		/* Cooperative multitasking! This loop can run for so
;;;1463   		   long that watchdog timers expire. */
;;;1464   		cond_resched();
;;;1465   
;;;1466   		/* get the block to scan in the correct order */
;;;1467   		blk = block_index[block_iter].block;
;;;1468   		bi = yaffs_get_block_info(dev, blk);
;;;1469   
;;;1470   		summary_available = yaffs_summary_read(dev, dev->sum_tags, blk);
;;;1471   
;;;1472   		/* For each chunk in each block that needs scanning.... */
;;;1473   		found_chunks = 0;
;;;1474   		if (summary_available)
;;;1475   			c = dev->chunks_per_summary - 1;
;;;1476   		else
;;;1477   			c = dev->param.chunks_per_block - 1;
;;;1478   
;;;1479   		for (/* c is already initialised */;
;;;1480   		     !alloc_failed && c >= 0 &&
;;;1481   		     (bi->block_state == YAFFS_BLOCK_STATE_NEEDS_SCAN ||
;;;1482   		      bi->block_state == YAFFS_BLOCK_STATE_ALLOCATING);
;;;1483   		      c--) {
;;;1484   			/* Scan backwards...
;;;1485   			 * Read the tags and decide what to do
;;;1486   			 */
;;;1487   			if (yaffs2_scan_chunk(dev, bi, blk, c,
;;;1488   					&found_chunks, chunk_data,
;;;1489   					&hard_list, summary_available) ==
;;;1490   					YAFFS_FAIL)
;;;1491   				alloc_failed = 1;
;;;1492   		}
;;;1493   
;;;1494   		if (bi->block_state == YAFFS_BLOCK_STATE_NEEDS_SCAN) {
;;;1495   			/* If we got this far while scanning, then the block
;;;1496   			 * is fully allocated. */
;;;1497   			bi->block_state = YAFFS_BLOCK_STATE_FULL;
;;;1498   		}
;;;1499   
;;;1500   		/* Now let's see if it was dirty */
;;;1501   		if (bi->pages_in_use == 0 &&
;;;1502   		    !bi->has_shrink_hdr &&
;;;1503   		    bi->block_state == YAFFS_BLOCK_STATE_FULL) {
;;;1504   			yaffs_block_became_dirty(dev, blk);
;;;1505   		}
;;;1506   	}
;;;1507   
;;;1508   	yaffs_skip_rest_of_block(dev);
;;;1509   
;;;1510   	if (alt_block_index)
;;;1511   		yaffs_free(block_index);
;;;1512   	else
;;;1513   		yaffs_free(block_index);
;;;1514   
;;;1515   	/* Ok, we've done all the scanning.
;;;1516   	 * Fix up the hard link chains.
;;;1517   	 * We have scanned all the objects, now it's time to add these
;;;1518   	 * hardlinks.
;;;1519   	 */
;;;1520   	yaffs_link_fixup(dev, &hard_list);
;;;1521   
;;;1522   	yaffs_release_temp_buffer(dev, chunk_data);
;;;1523   
;;;1524   	if (alloc_failed)
;;;1525   		return YAFFS_FAIL;
;;;1526   
;;;1527   	yaffs_trace(YAFFS_TRACE_SCAN, "yaffs2_scan_backwards ends");
;;;1528   
;;;1529   	return YAFFS_OK;
;;;1530   }
002584  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.9608|
002588  e3a00000          MOV      r0,#0                 ;1385
00258c  e58500f4          STR      r0,[r5,#0xf4]         ;1385
002590  e1a00005          MOV      r0,r5                 ;1387
002594  ebfffffe          BL       yaffs_get_temp_buffer
002598  e1a0b000          MOV      r11,r0                ;1387
00259c  e5954118          LDR      r4,[r5,#0x118]        ;1390
0025a0  e59560d0          LDR      r6,[r5,#0xd0]         ;1391
0025a4  ea000078          B        |L1.10124|
                  |L1.9640|
0025a8  e1a01006          MOV      r1,r6                 ;1393
0025ac  e1a00005          MOV      r0,r5                 ;1393
0025b0  ebfffffe          BL       yaffs_clear_chunk_bits
0025b4  e5940000          LDR      r0,[r4,#0]            ;1394
0025b8  e3c00703          BIC      r0,r0,#0xc0000        ;1394
0025bc  e3c00bff          BIC      r0,r0,#0x3fc00        ;1394
0025c0  e5840000          STR      r0,[r4,#0]            ;1394
0025c4  e5940000          LDR      r0,[r4,#0]            ;1395
0025c8  e1a00520          LSR      r0,r0,#10             ;1395
0025cc  e1a00500          LSL      r0,r0,#10             ;1395
0025d0  e5840000          STR      r0,[r4,#0]            ;1395
0025d4  e28d3028          ADD      r3,sp,#0x28           ;1397
0025d8  e28d2030          ADD      r2,sp,#0x30           ;1397
0025dc  e1a01006          MOV      r1,r6                 ;1397
0025e0  e1a00005          MOV      r0,r5                 ;1397
0025e4  ebfffffe          BL       yaffs_query_init_block_state
0025e8  e5940000          LDR      r0,[r4,#0]            ;1399
0025ec  e3c0060f          BIC      r0,r0,#0xf00000       ;1399
0025f0  e5dd1030          LDRB     r1,[sp,#0x30]         ;1399
0025f4  e3a0260f          MOV      r2,#0xf00000          ;1399
0025f8  e0021a01          AND      r1,r2,r1,LSL #20      ;1399
0025fc  e1800001          ORR      r0,r0,r1              ;1399
002600  e5840000          STR      r0,[r4,#0]            ;1399
002604  e59d0028          LDR      r0,[sp,#0x28]         ;1400
002608  e5840004          STR      r0,[r4,#4]            ;1400
00260c  e5940004          LDR      r0,[r4,#4]            ;1402
002610  e3500021          CMP      r0,#0x21              ;1402
002614  1a000003          BNE      |L1.9768|
002618  e5940000          LDR      r0,[r4,#0]            ;1403
00261c  e3c0060f          BIC      r0,r0,#0xf00000       ;1403
002620  e3800607          ORR      r0,r0,#0x700000       ;1403
002624  e5840000          STR      r0,[r4,#0]            ;1403
                  |L1.9768|
002628  e5940004          LDR      r0,[r4,#4]            ;1404
00262c  e3700801          CMN      r0,#0x10000           ;1404
002630  1a000003          BNE      |L1.9796|
002634  e5940000          LDR      r0,[r4,#0]            ;1405
002638  e3c0060f          BIC      r0,r0,#0xf00000       ;1405
00263c  e3800609          ORR      r0,r0,#0x900000       ;1405
002640  e5840000          STR      r0,[r4,#0]            ;1405
                  |L1.9796|
002644  e59f01e0          LDR      r0,|L1.10284|
002648  e1d000b0          LDRH     r0,[r0,#0]            ;1407  ; yaffs_trace_mask
00264c  e3100a02          TST      r0,#0x2000            ;1407
002650  0a000006          BEQ      |L1.9840|
002654  e5940000          LDR      r0,[r4,#0]            ;1407
002658  e1a00400          LSL      r0,r0,#8              ;1407
00265c  e1a02e20          LSR      r2,r0,#28             ;1407
002660  e1a01006          MOV      r1,r6                 ;1407
002664  e28f0e21          ADR      r0,|L1.10364|
002668  e59d3028          LDR      r3,[sp,#0x28]         ;1407
00266c  ebfffffe          BL       sysprintf
                  |L1.9840|
002670  e5940000          LDR      r0,[r4,#0]            ;1411
002674  e200060f          AND      r0,r0,#0xf00000       ;1411
002678  e3500607          CMP      r0,#0x700000          ;1411
00267c  1a000003          BNE      |L1.9872|
002680  e59500f4          LDR      r0,[r5,#0xf4]         ;1412
002684  e2800001          ADD      r0,r0,#1              ;1412
002688  e58500f4          STR      r0,[r5,#0xf4]         ;1412
00268c  ea00003c          B        |L1.10116|
                  |L1.9872|
002690  e5940000          LDR      r0,[r4,#0]            ;1414
002694  e200060f          AND      r0,r0,#0xf00000       ;1414
002698  e3500609          CMP      r0,#0x900000          ;1414
00269c  1a000007          BNE      |L1.9920|
0026a0  e59f0184          LDR      r0,|L1.10284|
0026a4  e5d00000          LDRB     r0,[r0,#0]            ;1415  ; yaffs_trace_mask
0026a8  e3100010          TST      r0,#0x10              ;1415
0026ac  0a000034          BEQ      |L1.10116|
0026b0  e1a01006          MOV      r1,r6                 ;1415
0026b4  e28f0e1f          ADR      r0,|L1.10412|
0026b8  ebfffffe          BL       sysprintf
0026bc  ea000030          B        |L1.10116|
                  |L1.9920|
0026c0  e5940000          LDR      r0,[r4,#0]            ;1417
0026c4  e200060f          AND      r0,r0,#0xf00000       ;1417
0026c8  e3500603          CMP      r0,#0x300000          ;1417
0026cc  1a00000d          BNE      |L1.9992|
0026d0  e59f0154          LDR      r0,|L1.10284|
0026d4  e1d000b0          LDRH     r0,[r0,#0]            ;1418  ; yaffs_trace_mask
0026d8  e3100a02          TST      r0,#0x2000            ;1418
0026dc  0a000001          BEQ      |L1.9960|
0026e0  e28f0f77          ADR      r0,|L1.10436|
0026e4  ebfffffe          BL       sysprintf
                  |L1.9960|
0026e8  e5950128          LDR      r0,[r5,#0x128]        ;1419
0026ec  e2800001          ADD      r0,r0,#1              ;1419
0026f0  e5850128          STR      r0,[r5,#0x128]        ;1419
0026f4  e5950d4c          LDR      r0,[r5,#0xd4c]        ;1420
0026f8  e595100c          LDR      r1,[r5,#0xc]          ;1420
0026fc  e0800001          ADD      r0,r0,r1              ;1420
002700  e5850d4c          STR      r0,[r5,#0xd4c]        ;1420
002704  ea00001e          B        |L1.10116|
                  |L1.9992|
002708  e5940000          LDR      r0,[r4,#0]            ;1421
00270c  e200060f          AND      r0,r0,#0xf00000       ;1421
002710  e3500602          CMP      r0,#0x200000          ;1421
002714  1a00001a          BNE      |L1.10116|
002718  e59d0028          LDR      r0,[sp,#0x28]         ;1424
00271c  e3500a01          CMP      r0,#0x1000            ;1424
002720  3a00000f          BCC      |L1.10084|
002724  e59d0028          LDR      r0,[sp,#0x28]         ;1425
002728  e59f11ac          LDR      r1,|L1.10460|
00272c  e1500001          CMP      r0,r1                 ;1425
002730  2a00000b          BCS      |L1.10084|
002734  e59d0028          LDR      r0,[sp,#0x28]         ;1426
002738  e7870188          STR      r0,[r7,r8,LSL #3]     ;1426
00273c  e0870188          ADD      r0,r7,r8,LSL #3       ;1427
002740  e5806004          STR      r6,[r0,#4]            ;1427
002744  e2888001          ADD      r8,r8,#1              ;1428
002748  e5950df0          LDR      r0,[r5,#0xdf0]        ;1429
00274c  e59d1028          LDR      r1,[sp,#0x28]         ;1429
002750  e1500001          CMP      r0,r1                 ;1429
002754  8a00000a          BHI      |L1.10116|
002758  e59d0028          LDR      r0,[sp,#0x28]         ;1430
00275c  e5850df0          STR      r0,[r5,#0xdf0]        ;1430
002760  ea000007          B        |L1.10116|
                  |L1.10084|
002764  e59f00c0          LDR      r0,|L1.10284|
002768  e5d00000          LDRB     r0,[r0,#0]            ;1433  ; yaffs_trace_mask
00276c  e3100008          TST      r0,#8                 ;1433
002770  0a000003          BEQ      |L1.10116|
002774  e1a01006          MOV      r1,r6                 ;1433
002778  e28f0e16          ADR      r0,|L1.10464|
00277c  e59d2028          LDR      r2,[sp,#0x28]         ;1433
002780  ebfffffe          BL       sysprintf
                  |L1.10116|
002784  e2844008          ADD      r4,r4,#8              ;1438
002788  e2866001          ADD      r6,r6,#1              ;1392
                  |L1.10124|
00278c  e59500d4          LDR      r0,[r5,#0xd4]         ;1391
002790  e1500006          CMP      r0,r6                 ;1391
002794  aaffff83          BGE      |L1.9640|
002798  e59f008c          LDR      r0,|L1.10284|
00279c  e5d00000          LDRB     r0,[r0,#0]            ;1441  ; yaffs_trace_mask
0027a0  e3100008          TST      r0,#8                 ;1441
0027a4  0a000002          BEQ      |L1.10164|
0027a8  e1a01008          MOV      r1,r8                 ;1441
0027ac  e28f0f5a          ADR      r0,|L1.10524|
0027b0  ebfffffe          BL       sysprintf
                  |L1.10164|
0027b4  e1a00000          MOV      r0,r0                 ;1443
0027b8  e1a00000          MOV      r0,r0                 ;1443
0027bc  e59f317c          LDR      r3,|L1.10560|
0027c0  e3a02008          MOV      r2,#8                 ;1446
0027c4  e1a01008          MOV      r1,r8                 ;1446
0027c8  e1a00007          MOV      r0,r7                 ;1446
0027cc  ebfffffe          BL       yaffs_qsort
0027d0  e1a00000          MOV      r0,r0                 ;1449
0027d4  e1a00000          MOV      r0,r0                 ;1449
0027d8  e59f004c          LDR      r0,|L1.10284|
0027dc  e5d00000          LDRB     r0,[r0,#0]            ;1451  ; yaffs_trace_mask
0027e0  e3100008          TST      r0,#8                 ;1451
0027e4  0a000001          BEQ      |L1.10224|
0027e8  e28f0f55          ADR      r0,|L1.10564|
0027ec  ebfffffe          BL       sysprintf
                  |L1.10224|
0027f0  e3a00000          MOV      r0,#0                 ;1454
0027f4  e58d0038          STR      r0,[sp,#0x38]         ;1454
0027f8  e2480001          SUB      r0,r8,#1              ;1455
0027fc  e58d0034          STR      r0,[sp,#0x34]         ;1455
002800  e59f0024          LDR      r0,|L1.10284|
002804  e1d000b0          LDRH     r0,[r0,#0]            ;1456  ; yaffs_trace_mask
002808  e3100a02          TST      r0,#0x2000            ;1456
00280c  0a000002          BEQ      |L1.10268|
002810  e1a01008          MOV      r1,r8                 ;1456
002814  e28f0f4e          ADR      r0,|L1.10580|
002818  ebfffffe          BL       sysprintf
                  |L1.10268|
00281c  e59da034          LDR      r10,[sp,#0x34]        ;1459
002820  ea0000b8          B        |L1.11016|
                  |L1.10276|
                          DCD      ||.constdata||+0x19c
                  |L1.10280|
                          DCD      0x000004a8
                  |L1.10284|
                          DCD      yaffs_trace_mask
                  |L1.10288|
                          DCD      ||.constdata||+0x1f0
                  |L1.10292|
                          DCD      ||.constdata||+0x248
                  |L1.10296|
                          DCD      ||.constdata||+0x2ac
                  |L1.10300|
00283c  79616666          DCB      "yaffs: yaffs2_scan_backwards() could not allocate block"
002840  733a2079
002844  61666673
002848  325f7363
00284c  616e5f62
002850  61636b77
002854  61726473
002858  28292063
00285c  6f756c64
002860  206e6f74
002864  20616c6c
002868  6f636174
00286c  6520626c
002870  6f636b  
002873  20696e64          DCB      " index!\n",0
002877  6578210a
00287b  00      
                  |L1.10364|
00287c  79616666          DCB      "yaffs: Block scanning block %d state %d seq %d\n",0
002880  733a2042
002884  6c6f636b
002888  20736361
00288c  6e6e696e
002890  6720626c
002894  6f636b20
002898  25642073
00289c  74617465
0028a0  20256420
0028a4  73657120
0028a8  25640a00
                  |L1.10412|
0028ac  79616666          DCB      "yaffs: block %d is bad\n",0
0028b0  733a2062
0028b4  6c6f636b
0028b8  20256420
0028bc  69732062
0028c0  61640a00
                  |L1.10436|
0028c4  79616666          DCB      "yaffs: Block empty \n",0
0028c8  733a2042
0028cc  6c6f636b
0028d0  20656d70
0028d4  7479200a
0028d8  00      
0028d9  00                DCB      0
0028da  00                DCB      0
0028db  00                DCB      0
                  |L1.10460|
                          DCD      0xefffff00
                  |L1.10464|
0028e0  79616666          DCB      "yaffs: Block scanning block %d has bad sequence number "
0028e4  733a2042
0028e8  6c6f636b
0028ec  20736361
0028f0  6e6e696e
0028f4  6720626c
0028f8  6f636b20
0028fc  25642068
002900  61732062
002904  61642073
002908  65717565
00290c  6e636520
002910  6e756d62
002914  657220  
002917  25640a00          DCB      "%d\n",0
00291b  00                DCB      0
                  |L1.10524|
00291c  79616666          DCB      "yaffs: %d blocks to be sorted...\n",0
002920  733a2025
002924  6420626c
002928  6f636b73
00292c  20746f20
002930  62652073
002934  6f727465
002938  642e2e2e
00293c  0a00    
00293e  00                DCB      0
00293f  00                DCB      0
                  |L1.10560|
                          DCD      yaffs2_ybicmp
                  |L1.10564|
002944  79616666          DCB      "yaffs: ...done\n",0
002948  733a202e
00294c  2e2e646f
002950  6e650a00
                  |L1.10580|
002954  79616666          DCB      "yaffs: %d blocks to scan\n",0
002958  733a2025
00295c  6420626c
002960  6f636b73
002964  20746f20
002968  7363616e
00296c  0a00    
00296e  00                DCB      0
00296f  00                DCB      0
                  |L1.10608|
002970  e1a00000          MOV      r0,r0                 ;1464
002974  e1a00000          MOV      r0,r0                 ;1464
002978  e087018a          ADD      r0,r7,r10,LSL #3      ;1467
00297c  e5906004          LDR      r6,[r0,#4]            ;1467
002980  e1a09006          MOV      r9,r6                 ;1468
002984  e59500d0          LDR      r0,[r5,#0xd0]         ;1468
002988  e1500009          CMP      r0,r9                 ;1468
00298c  ca000002          BGT      |L1.10652|
002990  e59500d4          LDR      r0,[r5,#0xd4]         ;1468
002994  e1500009          CMP      r0,r9                 ;1468
002998  aa00000c          BGE      |L1.10704|
                  |L1.10652|
00299c  e51f0178          LDR      r0,|L1.10284|
0029a0  e5900000          LDR      r0,[r0,#0]            ;1468  ; yaffs_trace_mask
0029a4  e3100101          TST      r0,#0x40000000        ;1468
0029a8  0a000002          BEQ      |L1.10680|
0029ac  e1a01009          MOV      r1,r9                 ;1468
0029b0  e28f0f77          ADR      r0,|L1.11156|
0029b4  ebfffffe          BL       sysprintf
                  |L1.10680|
0029b8  e1a00000          MOV      r0,r0                 ;1468
0029bc  e3a0201f          MOV      r2,#0x1f              ;1468
0029c0  e28f1f82          ADR      r1,|L1.11216|
0029c4  e28f0d09          ADR      r0,|L1.11276|
0029c8  ebfffffe          BL       sysprintf
0029cc  e1a00000          MOV      r0,r0                 ;1468
                  |L1.10704|
0029d0  e1a00000          MOV      r0,r0                 ;1468
0029d4  e59510d0          LDR      r1,[r5,#0xd0]         ;1468
0029d8  e0491001          SUB      r1,r9,r1              ;1468
0029dc  e5950118          LDR      r0,[r5,#0x118]        ;1468
0029e0  e0804181          ADD      r4,r0,r1,LSL #3       ;1468
0029e4  e1a02006          MOV      r2,r6                 ;1470
0029e8  e5951e0c          LDR      r1,[r5,#0xe0c]        ;1470
0029ec  e1a00005          MOV      r0,r5                 ;1470
0029f0  ebfffffe          BL       yaffs_summary_read
0029f4  e58d0014          STR      r0,[sp,#0x14]         ;1470
0029f8  e3a00000          MOV      r0,#0                 ;1473
0029fc  e58d0020          STR      r0,[sp,#0x20]         ;1473
002a00  e59d0014          LDR      r0,[sp,#0x14]         ;1474
002a04  e3500000          CMP      r0,#0                 ;1474
002a08  0a000003          BEQ      |L1.10780|
002a0c  e5950e08          LDR      r0,[r5,#0xe08]        ;1475
002a10  e2400001          SUB      r0,r0,#1              ;1475
002a14  e58d002c          STR      r0,[sp,#0x2c]         ;1475
002a18  ea000002          B        |L1.10792|
                  |L1.10780|
002a1c  e595000c          LDR      r0,[r5,#0xc]          ;1477
002a20  e2400001          SUB      r0,r0,#1              ;1477
002a24  e58d002c          STR      r0,[sp,#0x2c]         ;1477
                  |L1.10792|
002a28  ea000011          B        |L1.10868|
                  |L1.10796|
002a2c  e59f11f0          LDR      r1,|L1.11300|
002a30  e59d0014          LDR      r0,[sp,#0x14]         ;1487
002a34  e28d2020          ADD      r2,sp,#0x20           ;1487
002a38  e58d000c          STR      r0,[sp,#0xc]          ;1487
002a3c  e58d1008          STR      r1,[sp,#8]            ;1487
002a40  e88d0804          STM      sp,{r2,r11}           ;1487
002a44  e1a02006          MOV      r2,r6                 ;1487
002a48  e1a01004          MOV      r1,r4                 ;1487
002a4c  e1a00005          MOV      r0,r5                 ;1487
002a50  e59d302c          LDR      r3,[sp,#0x2c]         ;1487
002a54  ebfffffe          BL       yaffs2_scan_chunk
002a58  e3500000          CMP      r0,#0                 ;1487
002a5c  1a000001          BNE      |L1.10856|
002a60  e3a00001          MOV      r0,#1                 ;1491
002a64  e58d001c          STR      r0,[sp,#0x1c]         ;1491
                  |L1.10856|
002a68  e59d002c          LDR      r0,[sp,#0x2c]         ;1483
002a6c  e2400001          SUB      r0,r0,#1              ;1483
002a70  e58d002c          STR      r0,[sp,#0x2c]         ;1483
                  |L1.10868|
002a74  e59d001c          LDR      r0,[sp,#0x1c]         ;1480
002a78  e3500000          CMP      r0,#0                 ;1480
002a7c  1a00000a          BNE      |L1.10924|
002a80  e59d002c          LDR      r0,[sp,#0x2c]         ;1480
002a84  e3500000          CMP      r0,#0                 ;1480
002a88  ba000007          BLT      |L1.10924|
002a8c  e5940000          LDR      r0,[r4,#0]            ;1481
002a90  e200060f          AND      r0,r0,#0xf00000       ;1481
002a94  e3500602          CMP      r0,#0x200000          ;1481
002a98  0affffe3          BEQ      |L1.10796|
002a9c  e5940000          LDR      r0,[r4,#0]            ;1482
002aa0  e200060f          AND      r0,r0,#0xf00000       ;1482
002aa4  e3500501          CMP      r0,#0x400000          ;1482
002aa8  0affffdf          BEQ      |L1.10796|
                  |L1.10924|
002aac  e5940000          LDR      r0,[r4,#0]            ;1494
002ab0  e200060f          AND      r0,r0,#0xf00000       ;1494
002ab4  e3500602          CMP      r0,#0x200000          ;1494
002ab8  1a000003          BNE      |L1.10956|
002abc  e5940000          LDR      r0,[r4,#0]            ;1497
002ac0  e3c0060f          BIC      r0,r0,#0xf00000       ;1497
002ac4  e3800605          ORR      r0,r0,#0x500000       ;1497
002ac8  e5840000          STR      r0,[r4,#0]            ;1497
                  |L1.10956|
002acc  e5940000          LDR      r0,[r4,#0]            ;1501
002ad0  e1a00600          LSL      r0,r0,#12             ;1501
002ad4  e1b00b20          LSRS     r0,r0,#22             ;1501
002ad8  1a000009          BNE      |L1.11012|
002adc  e5940000          LDR      r0,[r4,#0]            ;1502
002ae0  e1b00fa0          LSRS     r0,r0,#31             ;1502
002ae4  1a000006          BNE      |L1.11012|
002ae8  e5940000          LDR      r0,[r4,#0]            ;1503
002aec  e200060f          AND      r0,r0,#0xf00000       ;1503
002af0  e3500605          CMP      r0,#0x500000          ;1503
002af4  1a000002          BNE      |L1.11012|
002af8  e1a01006          MOV      r1,r6                 ;1504
002afc  e1a00005          MOV      r0,r5                 ;1504
002b00  ebfffffe          BL       yaffs_block_became_dirty
                  |L1.11012|
002b04  e24aa001          SUB      r10,r10,#1            ;1461
                  |L1.11016|
002b08  e59d001c          LDR      r0,[sp,#0x1c]         ;1460
002b0c  e3500000          CMP      r0,#0                 ;1460
002b10  1a000002          BNE      |L1.11040|
002b14  e59d0038          LDR      r0,[sp,#0x38]         ;1460
002b18  e15a0000          CMP      r10,r0                ;1460
002b1c  aaffff93          BGE      |L1.10608|
                  |L1.11040|
002b20  e1a00005          MOV      r0,r5                 ;1508
002b24  ebfffffe          BL       yaffs_skip_rest_of_block
002b28  e59d0018          LDR      r0,[sp,#0x18]         ;1510
002b2c  e3500000          CMP      r0,#0                 ;1510
002b30  0a000002          BEQ      |L1.11072|
002b34  e1a00007          MOV      r0,r7                 ;1511
002b38  ebfffffe          BL       yaffs_free
002b3c  ea000001          B        |L1.11080|
                  |L1.11072|
002b40  e1a00007          MOV      r0,r7                 ;1513
002b44  ebfffffe          BL       yaffs_free
                  |L1.11080|
002b48  e59f10d4          LDR      r1,|L1.11300|
002b4c  e1a00005          MOV      r0,r5                 ;1520
002b50  ebfffffe          BL       yaffs_link_fixup
002b54  e1a0100b          MOV      r1,r11                ;1522
002b58  e1a00005          MOV      r0,r5                 ;1522
002b5c  ebfffffe          BL       yaffs_release_temp_buffer
002b60  e59d001c          LDR      r0,[sp,#0x1c]         ;1524
002b64  e3500000          CMP      r0,#0                 ;1524
002b68  0a000001          BEQ      |L1.11124|
002b6c  e3a00000          MOV      r0,#0                 ;1525
002b70  eafffe82          B        |L1.9600|
                  |L1.11124|
002b74  e51f0350          LDR      r0,|L1.10284|
002b78  e5d00000          LDRB     r0,[r0,#0]            ;1527  ; yaffs_trace_mask
002b7c  e3100008          TST      r0,#8                 ;1527
002b80  0a000001          BEQ      |L1.11148|
002b84  e28f009c          ADR      r0,|L1.11304|
002b88  ebfffffe          BL       sysprintf
                  |L1.11148|
002b8c  e3a00001          MOV      r0,#1                 ;1529
002b90  eafffe7a          B        |L1.9600|
                  |L1.11156|
002b94  79616666          DCB      "yaffs: **>> yaffs: get_block_info block %d is not valid"
002b98  733a202a
002b9c  2a3e3e20
002ba0  79616666
002ba4  733a2067
002ba8  65745f62
002bac  6c6f636b
002bb0  5f696e66
002bb4  6f20626c
002bb8  6f636b20
002bbc  25642069
002bc0  73206e6f
002bc4  74207661
002bc8  6c6964  
002bcb  0a00              DCB      "\n",0
002bcd  00                DCB      0
002bce  00                DCB      0
002bcf  00                DCB      0
                  |L1.11216|
002bd0  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_get"
002bd4  2e5c636f
002bd8  6d6d6f6e
002bdc  5c737263
002be0  5c425350
002be4  5c546869
002be8  72645061
002bec  7274795c
002bf0  79616666
002bf4  73325c79
002bf8  61666673
002bfc  5f676574
002c00  626c6f63          DCB      "blockinfo.h",0
002c04  6b696e66
002c08  6f2e6800
                  |L1.11276|
002c0c  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
002c10  6f742042
002c14  55472061
002c18  74202573
002c1c  3a256421
002c20  0a00    
002c22  00                DCB      0
002c23  00                DCB      0
                  |L1.11300|
                          DCD      hard_list
                  |L1.11304|
002c28  79616666          DCB      "yaffs: yaffs2_scan_backwards ends\n",0
002c2c  733a2079
002c30  61666673
002c34  325f7363
002c38  616e5f62
002c3c  61636b77
002c40  61726473
002c44  20656e64
002c48  730a00  
002c4b  00                DCB      0
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  79616666          DCB      0x79,0x61,0x66,0x66
000004  733a2047          DCB      0x73,0x3a,0x20,0x47
000008  43207265          DCB      0x43,0x20,0x72,0x65
00000c  66726573          DCB      0x66,0x72,0x65,0x73
000010  6820636f          DCB      0x68,0x20,0x63,0x6f
000014  756e7420          DCB      0x75,0x6e,0x74,0x20
000018  25642073          DCB      0x25,0x64,0x20,0x73
00001c  656c6563          DCB      0x65,0x6c,0x65,0x63
000020  74656420          DCB      0x74,0x65,0x64,0x20
000024  626c6f63          DCB      0x62,0x6c,0x6f,0x63
000028  6b202564          DCB      0x6b,0x20,0x25,0x64
00002c  20776974          DCB      0x20,0x77,0x69,0x74
000030  68207365          DCB      0x68,0x20,0x73,0x65
000034  715f6e75          DCB      0x71,0x5f,0x6e,0x75
000038  6d626572          DCB      0x6d,0x62,0x65,0x72
00003c  2025640a          DCB      0x20,0x25,0x64,0x0a
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  79616666          DCB      0x79,0x61,0x66,0x66
000048  733a2043          DCB      0x73,0x3a,0x20,0x43
00004c  6865636b          DCB      0x68,0x65,0x63,0x6b
000050  706f696e          DCB      0x70,0x6f,0x69,0x6e
000054  74207265          DCB      0x74,0x20,0x72,0x65
000058  6164206f          DCB      0x61,0x64,0x20,0x6f
00005c  626a6563          DCB      0x62,0x6a,0x65,0x63
000060  74202564          DCB      0x74,0x20,0x25,0x64
000064  20747970          DCB      0x20,0x74,0x79,0x70
000068  65202564          DCB      0x65,0x20,0x25,0x64
00006c  20636875          DCB      0x20,0x63,0x68,0x75
000070  6e6b2025          DCB      0x6e,0x6b,0x20,0x25
000074  6420646f          DCB      0x64,0x20,0x64,0x6f
000078  6573206e          DCB      0x65,0x73,0x20,0x6e
00007c  6f74206d          DCB      0x6f,0x74,0x20,0x6d
000080  61746368          DCB      0x61,0x74,0x63,0x68
000084  20657869          DCB      0x20,0x65,0x78,0x69
000088  7374696e          DCB      0x73,0x74,0x69,0x6e
00008c  67206f62          DCB      0x67,0x20,0x6f,0x62
000090  6a656374          DCB      0x6a,0x65,0x63,0x74
000094  20747970          DCB      0x20,0x74,0x79,0x70
000098  65202564          DCB      0x65,0x20,0x25,0x64
00009c  0a000000          DCB      0x0a,0x00,0x00,0x00
0000a0  79616666          DCB      0x79,0x61,0x66,0x66
0000a4  733a2043          DCB      0x73,0x3a,0x20,0x43
0000a8  6865636b          DCB      0x68,0x65,0x63,0x6b
0000ac  706f696e          DCB      0x70,0x6f,0x69,0x6e
0000b0  74207265          DCB      0x74,0x20,0x72,0x65
0000b4  6164206f          DCB      0x61,0x64,0x20,0x6f
0000b8  626a6563          DCB      0x62,0x6a,0x65,0x63
0000bc  74202564          DCB      0x74,0x20,0x25,0x64
0000c0  20706172          DCB      0x20,0x70,0x61,0x72
0000c4  656e7420          DCB      0x65,0x6e,0x74,0x20
0000c8  25642074          DCB      0x25,0x64,0x20,0x74
0000cc  79706520          DCB      0x79,0x70,0x65,0x20
0000d0  25642063          DCB      0x25,0x64,0x20,0x63
0000d4  68756e6b          DCB      0x68,0x75,0x6e,0x6b
0000d8  20256420          DCB      0x20,0x25,0x64,0x20
0000dc  50617265          DCB      0x50,0x61,0x72,0x65
0000e0  6e742074          DCB      0x6e,0x74,0x20,0x74
0000e4  7970652c          DCB      0x79,0x70,0x65,0x2c
0000e8  2025642c          DCB      0x20,0x25,0x64,0x2c
0000ec  206e6f74          DCB      0x20,0x6e,0x6f,0x74
0000f0  20646972          DCB      0x20,0x64,0x69,0x72
0000f4  6563746f          DCB      0x65,0x63,0x74,0x6f
0000f8  72790a00          DCB      0x72,0x79,0x0a,0x00
0000fc  79616666          DCB      0x79,0x61,0x66,0x66
000100  733a2043          DCB      0x73,0x3a,0x20,0x43
000104  6865636b          DCB      0x68,0x65,0x63,0x6b
000108  706f696e          DCB      0x70,0x6f,0x69,0x6e
00010c  74207772          DCB      0x74,0x20,0x77,0x72
000110  69746520          DCB      0x69,0x74,0x65,0x20
000114  6f626a65          DCB      0x6f,0x62,0x6a,0x65
000118  63742025          DCB      0x63,0x74,0x20,0x25
00011c  64207061          DCB      0x64,0x20,0x70,0x61
000120  72656e74          DCB      0x72,0x65,0x6e,0x74
000124  20256420          DCB      0x20,0x25,0x64,0x20
000128  74797065          DCB      0x74,0x79,0x70,0x65
00012c  20256420          DCB      0x20,0x25,0x64,0x20
000130  6368756e          DCB      0x63,0x68,0x75,0x6e
000134  6b202564          DCB      0x6b,0x20,0x25,0x64
000138  206f626a          DCB      0x20,0x6f,0x62,0x6a
00013c  20616464          DCB      0x20,0x61,0x64,0x64
000140  72202570          DCB      0x72,0x20,0x25,0x70
000144  0a000000          DCB      0x0a,0x00,0x00,0x00
000148  79616666          DCB      0x79,0x61,0x66,0x66
00014c  733a2043          DCB      0x73,0x3a,0x20,0x43
000150  68756e6b          DCB      0x68,0x75,0x6e,0x6b
000154  20282564          DCB      0x20,0x28,0x25,0x64
000158  3a256429          DCB      0x3a,0x25,0x64,0x29
00015c  20776974          DCB      0x20,0x77,0x69,0x74
000160  68206261          DCB      0x68,0x20,0x62,0x61
000164  64207461          DCB      0x64,0x20,0x74,0x61
000168  67733a6f          DCB      0x67,0x73,0x3a,0x6f
00016c  626a203d          DCB      0x62,0x6a,0x20,0x3d
000170  2025642c          DCB      0x20,0x25,0x64,0x2c
000174  20636875          DCB      0x20,0x63,0x68,0x75
000178  6e6b5f69          DCB      0x6e,0x6b,0x5f,0x69
00017c  64203d20          DCB      0x64,0x20,0x3d,0x20
000180  25642c20          DCB      0x25,0x64,0x2c,0x20
000184  6e5f6279          DCB      0x6e,0x5f,0x62,0x79
000188  74657320          DCB      0x74,0x65,0x73,0x20
00018c  3d202564          DCB      0x3d,0x20,0x25,0x64
000190  2c206967          DCB      0x2c,0x20,0x69,0x67
000194  6e6f7265          DCB      0x6e,0x6f,0x72,0x65
000198  640a0000          DCB      0x64,0x0a,0x00,0x00
00019c  79616666          DCB      0x79,0x61,0x66,0x66
0001a0  733a2079          DCB      0x73,0x3a,0x20,0x79
0001a4  61666673          DCB      0x61,0x66,0x66,0x73
0001a8  20747261          DCB      0x20,0x74,0x72,0x61
0001ac  67656479          DCB      0x67,0x65,0x64,0x79
0001b0  3a20436f          DCB      0x3a,0x20,0x43,0x6f
0001b4  756c6420          DCB      0x75,0x6c,0x64,0x20
0001b8  6e6f7420          DCB      0x6e,0x6f,0x74,0x20
0001bc  6d616b65          DCB      0x6d,0x61,0x6b,0x65
0001c0  206f626a          DCB      0x20,0x6f,0x62,0x6a
0001c4  65637420          DCB      0x65,0x63,0x74,0x20
0001c8  666f7220          DCB      0x66,0x6f,0x72,0x20
0001cc  6f626a65          DCB      0x6f,0x62,0x6a,0x65
0001d0  63742020          DCB      0x63,0x74,0x20,0x20
0001d4  25642061          DCB      0x25,0x64,0x20,0x61
0001d8  74206368          DCB      0x74,0x20,0x63,0x68
0001dc  756e6b20          DCB      0x75,0x6e,0x6b,0x20
0001e0  25642064          DCB      0x25,0x64,0x20,0x64
0001e4  7572696e          DCB      0x75,0x72,0x69,0x6e
0001e8  67207363          DCB      0x67,0x20,0x73,0x63
0001ec  616e0a00          DCB      0x61,0x6e,0x0a,0x00
0001f0  79616666          DCB      0x79,0x61,0x66,0x66
0001f4  733a2079          DCB      0x73,0x3a,0x20,0x79
0001f8  61666673          DCB      0x61,0x66,0x66,0x73
0001fc  20747261          DCB      0x20,0x74,0x72,0x61
000200  67656479          DCB      0x67,0x65,0x64,0x79
000204  3a204261          DCB      0x3a,0x20,0x42,0x61
000208  64206f62          DCB      0x64,0x20,0x6f,0x62
00020c  6a656374          DCB      0x6a,0x65,0x63,0x74
000210  20747970          DCB      0x20,0x74,0x79,0x70
000214  652c2025          DCB      0x65,0x2c,0x20,0x25
000218  6420213d          DCB      0x64,0x20,0x21,0x3d
00021c  2025642c          DCB      0x20,0x25,0x64,0x2c
000220  20666f72          DCB      0x20,0x66,0x6f,0x72
000224  206f626a          DCB      0x20,0x6f,0x62,0x6a
000228  65637420          DCB      0x65,0x63,0x74,0x20
00022c  25642061          DCB      0x25,0x64,0x20,0x61
000230  74206368          DCB      0x74,0x20,0x63,0x68
000234  756e6b20          DCB      0x75,0x6e,0x6b,0x20
000238  25642064          DCB      0x25,0x64,0x20,0x64
00023c  7572696e          DCB      0x75,0x72,0x69,0x6e
000240  67207363          DCB      0x67,0x20,0x73,0x63
000244  616e0a00          DCB      0x61,0x6e,0x0a,0x00
000248  79616666          DCB      0x79,0x61,0x66,0x66
00024c  733a2079          DCB      0x73,0x3a,0x20,0x79
000250  61666673          DCB      0x61,0x66,0x66,0x73
000254  20747261          DCB      0x20,0x74,0x72,0x61
000258  67656479          DCB      0x67,0x65,0x64,0x79
00025c  3a206174          DCB      0x3a,0x20,0x61,0x74
000260  74656d70          DCB      0x74,0x65,0x6d,0x70
000264  74696e67          DCB      0x74,0x69,0x6e,0x67
000268  20746f20          DCB      0x20,0x74,0x6f,0x20
00026c  75736520          DCB      0x75,0x73,0x65,0x20
000270  6e6f6e2d          DCB      0x6e,0x6f,0x6e,0x2d
000274  64697265          DCB      0x64,0x69,0x72,0x65
000278  63746f72          DCB      0x63,0x74,0x6f,0x72
00027c  79206173          DCB      0x79,0x20,0x61,0x73
000280  20612064          DCB      0x20,0x61,0x20,0x64
000284  69726563          DCB      0x69,0x72,0x65,0x63
000288  746f7279          DCB      0x74,0x6f,0x72,0x79
00028c  20696e20          DCB      0x20,0x69,0x6e,0x20
000290  7363616e          DCB      0x73,0x63,0x61,0x6e
000294  2e205075          DCB      0x2e,0x20,0x50,0x75
000298  7420696e          DCB      0x74,0x20,0x69,0x6e
00029c  206c6f73          DCB      0x20,0x6c,0x6f,0x73
0002a0  742b666f          DCB      0x74,0x2b,0x66,0x6f
0002a4  756e642e          DCB      0x75,0x6e,0x64,0x2e
0002a8  0a000000          DCB      0x0a,0x00,0x00,0x00
0002ac  79616666          DCB      0x79,0x61,0x66,0x66
0002b0  733a2079          DCB      0x73,0x3a,0x20,0x79
0002b4  61666673          DCB      0x61,0x66,0x66,0x73
0002b8  325f7363          DCB      0x32,0x5f,0x73,0x63
0002bc  616e5f62          DCB      0x61,0x6e,0x5f,0x62
0002c0  61636b77          DCB      0x61,0x63,0x6b,0x77
0002c4  61726473          DCB      0x61,0x72,0x64,0x73
0002c8  20737461          DCB      0x20,0x73,0x74,0x61
0002cc  72747320          DCB      0x72,0x74,0x73,0x20
0002d0  20696e74          DCB      0x20,0x69,0x6e,0x74
0002d4  73746172          DCB      0x73,0x74,0x61,0x72
0002d8  74626c6b          DCB      0x74,0x62,0x6c,0x6b
0002dc  20256420          DCB      0x20,0x25,0x64,0x20
0002e0  696e7465          DCB      0x69,0x6e,0x74,0x65
0002e4  6e64626c          DCB      0x6e,0x64,0x62,0x6c
0002e8  6b202564          DCB      0x6b,0x20,0x25,0x64
0002ec  2e2e2e0a          DCB      0x2e,0x2e,0x2e,0x0a
0002f0  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  hard_list
                          DCD      hard_list
                          DCD      hard_list
