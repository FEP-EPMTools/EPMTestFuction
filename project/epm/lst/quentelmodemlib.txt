; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\quentelmodemlib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\quentelmodemlib.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\quentelmodemlib.crf src\syshal\modemlib\quentelmodemlib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  printfBuffData PROC
;;;363    //#if(ENABLE_MODEM_CMD_DEBUG)
;;;364    static void printfBuffData(char* str, uint8_t* data, int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;365    {
000004  e1a07000          MOV      r7,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a06002          MOV      r6,r2
;;;366        int i;
;;;367        sysprintf("\r\n %s: len = %d...\r\n   -%02d:-> ", str, len, len);
000010  e1a03006          MOV      r3,r6
000014  e1a02006          MOV      r2,r6
000018  e1a01007          MOV      r1,r7
00001c  e28f0f9a          ADR      r0,|L1.652|
000020  ebfffffe          BL       sysprintf
;;;368        if(len>72)
000024  e3560048          CMP      r6,#0x48
000028  da000000          BLE      |L1.48|
;;;369            len = 72;
00002c  e3a06048          MOV      r6,#0x48
                  |L1.48|
;;;370        
;;;371        for(i = 0; i<len; i++)
000030  e3a04000          MOV      r4,#0
000034  ea000010          B        |L1.124|
                  |L1.56|
;;;372        { 
;;;373            if((data[i]>=0x20)&&(data[i]<=0x7e))
000038  e7d50004          LDRB     r0,[r5,r4]
00003c  e3500020          CMP      r0,#0x20
000040  ba000008          BLT      |L1.104|
000044  e7d50004          LDRB     r0,[r5,r4]
000048  e350007e          CMP      r0,#0x7e
00004c  ca000005          BGT      |L1.104|
;;;374                sysprintf("[%02d]:0x%02x(%c)\r\n", i, (unsigned char)data[i], (unsigned char)data[i]);
000050  e7d53004          LDRB     r3,[r5,r4]
000054  e7d52004          LDRB     r2,[r5,r4]
000058  e1a01004          MOV      r1,r4
00005c  e28f0f93          ADR      r0,|L1.688|
000060  ebfffffe          BL       sysprintf
000064  ea000003          B        |L1.120|
                  |L1.104|
;;;375            else
;;;376                sysprintf("[%02d]:0x%02x\r\n", i, (unsigned char)data[i]);
000068  e7d52004          LDRB     r2,[r5,r4]
00006c  e1a01004          MOV      r1,r4
000070  e28f0f93          ADR      r0,|L1.708|
000074  ebfffffe          BL       sysprintf
                  |L1.120|
000078  e2844001          ADD      r4,r4,#1              ;371
                  |L1.124|
00007c  e1540006          CMP      r4,r6                 ;371
000080  baffffec          BLT      |L1.56|
;;;377        }
;;;378        sysprintf("\r\n");
000084  e28f0f92          ADR      r0,|L1.724|
000088  ebfffffe          BL       sysprintf
;;;379        
;;;380    }
00008c  e8bd81f0          POP      {r4-r8,pc}
;;;381    //#endif
                          ENDP

                  parserString PROC
;;;382    static char* parserString(char* str, char* startStr, char* endStr, int* destLen)
000090  e92d47f0          PUSH     {r4-r10,lr}
;;;383    {
000094  e1a05000          MOV      r5,r0
000098  e1a09001          MOV      r9,r1
00009c  e1a06002          MOV      r6,r2
0000a0  e1a07003          MOV      r7,r3
;;;384        int i;
;;;385        char* startIndex = NULL;
0000a4  e3a08000          MOV      r8,#0
;;;386        *destLen = 0;
0000a8  e3a00000          MOV      r0,#0
0000ac  e5870000          STR      r0,[r7,#0]
;;;387        for (i = 0; i < (strlen(str) - strlen(endStr))+1; i++)
0000b0  e3a04000          MOV      r4,#0
0000b4  ea00001c          B        |L1.300|
                  |L1.184|
;;;388        {
;;;389            if(startIndex == 0)
0000b8  e3580000          CMP      r8,#0
0000bc  1a00000d          BNE      |L1.248|
;;;390            {
;;;391                if(memcmp(str+i, startStr, strlen(startStr)) == 0)
0000c0  e1a00009          MOV      r0,r9
0000c4  ebfffffe          BL       strlen
0000c8  e1a0a000          MOV      r10,r0
0000cc  e0850004          ADD      r0,r5,r4
0000d0  e1a0200a          MOV      r2,r10
0000d4  e1a01009          MOV      r1,r9
0000d8  ebfffffe          BL       memcmp
0000dc  e3500000          CMP      r0,#0
0000e0  1a000010          BNE      |L1.296|
;;;392                {
;;;393                    startIndex = str+i + strlen(startStr);
0000e4  e1a00009          MOV      r0,r9
0000e8  ebfffffe          BL       strlen
0000ec  e0851004          ADD      r1,r5,r4
0000f0  e0808001          ADD      r8,r0,r1
0000f4  ea00000b          B        |L1.296|
                  |L1.248|
;;;394                }
;;;395            }
;;;396            else
;;;397            {
;;;398                if(memcmp(str+i, endStr, strlen(endStr)) == 0)
0000f8  e1a00006          MOV      r0,r6
0000fc  ebfffffe          BL       strlen
000100  e1a0a000          MOV      r10,r0
000104  e0850004          ADD      r0,r5,r4
000108  e1a0200a          MOV      r2,r10
00010c  e1a01006          MOV      r1,r6
000110  ebfffffe          BL       memcmp
000114  e3500000          CMP      r0,#0
000118  1a000002          BNE      |L1.296|
;;;399                {
;;;400                    *destLen = str+i - startIndex;
00011c  e0850004          ADD      r0,r5,r4
000120  e0400008          SUB      r0,r0,r8
000124  e5870000          STR      r0,[r7,#0]
                  |L1.296|
000128  e2844001          ADD      r4,r4,#1              ;387
                  |L1.300|
00012c  e1a00005          MOV      r0,r5                 ;387
000130  ebfffffe          BL       strlen
000134  e1a0a000          MOV      r10,r0                ;387
000138  e1a00006          MOV      r0,r6                 ;387
00013c  ebfffffe          BL       strlen
000140  e04a0000          SUB      r0,r10,r0             ;387
000144  e2800001          ADD      r0,r0,#1              ;387
000148  e1500004          CMP      r0,r4                 ;387
00014c  8affffd9          BHI      |L1.184|
;;;401                }
;;;402            }
;;;403        }
;;;404        return startIndex;
000150  e1a00008          MOV      r0,r8
;;;405    }
000154  e8bd87f0          POP      {r4-r10,pc}
;;;406    
                          ENDP

                  QModemWrite PROC
;;;407    static INT32 QModemWrite(PUINT8 pucBuf, UINT32 uLen)
000158  e92d4070          PUSH     {r4-r6,lr}
;;;408    {
00015c  e1a04000          MOV      r4,r0
000160  e1a05001          MOV      r5,r1
;;;409        //sysprintf("QModemWrite %d...\r\n", uLen); 
;;;410        if(pUartInterface == NULL)
000164  e59f016c          LDR      r0,|L1.728|
000168  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
00016c  e3500000          CMP      r0,#0
000170  1a000001          BNE      |L1.380|
;;;411            return 0 ;   
000174  e3a00000          MOV      r0,#0
                  |L1.376|
;;;412        //#if(ENABLE_MODEM_CMD_DEBUG)
;;;413        if(ATCmdGetReceiveDebugFlag())
;;;414        {
;;;415            printfBuffData("QModemWrite", pucBuf, uLen);
;;;416        }
;;;417        //#endif
;;;418        return pUartInterface->writeFunc(pucBuf, uLen);
;;;419    }
000178  e8bd8070          POP      {r4-r6,pc}
                  |L1.380|
00017c  ebfffffe          BL       ATCmdGetReceiveDebugFlag
000180  e3500000          CMP      r0,#0                 ;413
000184  0a000003          BEQ      |L1.408|
000188  e1a02005          MOV      r2,r5                 ;415
00018c  e1a01004          MOV      r1,r4                 ;415
000190  e28f0f51          ADR      r0,|L1.732|
000194  ebfffffe          BL       printfBuffData
                  |L1.408|
000198  e59f0138          LDR      r0,|L1.728|
00019c  e5900000          LDR      r0,[r0,#0]            ;418  ; pUartInterface
0001a0  e1a01005          MOV      r1,r5                 ;418
0001a4  e5902004          LDR      r2,[r0,#4]            ;418
0001a8  e1a00004          MOV      r0,r4                 ;418
0001ac  e12fff32          BLX      r2                    ;418
0001b0  eafffff0          B        |L1.376|
;;;420    static INT32 QModemRead(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  QModemRead PROC
0001b4  e92d4070          PUSH     {r4-r6,lr}
;;;421    {
0001b8  e1a04000          MOV      r4,r0
0001bc  e1a05001          MOV      r5,r1
;;;422        if(pUartInterface == NULL)
0001c0  e59f0110          LDR      r0,|L1.728|
0001c4  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
0001c8  e3500000          CMP      r0,#0
0001cc  1a000001          BNE      |L1.472|
;;;423            return 0 ;
0001d0  e3a00000          MOV      r0,#0
                  |L1.468|
;;;424        return pUartInterface->readFunc(pucBuf, uLen);
;;;425    }
0001d4  e8bd8070          POP      {r4-r6,pc}
                  |L1.472|
0001d8  e59f00f8          LDR      r0,|L1.728|
0001dc  e5900000          LDR      r0,[r0,#0]            ;424  ; pUartInterface
0001e0  e1a01005          MOV      r1,r5                 ;424
0001e4  e5902008          LDR      r2,[r0,#8]            ;424
0001e8  e1a00004          MOV      r0,r4                 ;424
0001ec  e12fff32          BLX      r2                    ;424
0001f0  eafffff7          B        |L1.468|
;;;426    
                          ENDP

                  QModemReadEx PROC
;;;427    static INT32 QModemReadEx(PUINT8 pucBuf, UINT32 uLen,UINT32 readtime)
0001f4  e92d47f0          PUSH     {r4-r10,lr}
;;;428    {
0001f8  e1a06000          MOV      r6,r0
0001fc  e1a07001          MOV      r7,r1
000200  e1a08002          MOV      r8,r2
;;;429        int index = 0;
000204  e3a04000          MOV      r4,#0
;;;430        int counter = 0;
000208  e3a09000          MOV      r9,#0
;;;431        INT32 reVal;
;;;432        if(pUartInterface == NULL)
00020c  e59f00c4          LDR      r0,|L1.728|
000210  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000214  e3500000          CMP      r0,#0
000218  1a000001          BNE      |L1.548|
;;;433            return 0 ;
00021c  e3a00000          MOV      r0,#0
                  |L1.544|
;;;434        vTaskDelay(10/portTICK_RATE_MS);
;;;435        memset(pucBuf, 0x0, uLen);
;;;436        while(counter < (readtime/10))
;;;437        {
;;;438            vTaskDelay(10/portTICK_RATE_MS);
;;;439            reVal = pUartInterface->readFunc(pucBuf + index, uLen-index);
;;;440            if(reVal > 0)
;;;441                index = index + reVal;
;;;442            counter++;
;;;443        }
;;;444        return index;
;;;445    }
000220  e8bd87f0          POP      {r4-r10,pc}
                  |L1.548|
000224  e3a00001          MOV      r0,#1                 ;434
000228  ebfffffe          BL       vTaskDelay
00022c  e1a01007          MOV      r1,r7                 ;435
000230  e1a00006          MOV      r0,r6                 ;435
000234  ebfffffe          BL       __aeabi_memclr
000238  ea00000c          B        |L1.624|
                  |L1.572|
00023c  e3a00001          MOV      r0,#1                 ;438
000240  ebfffffe          BL       vTaskDelay
000244  e0471004          SUB      r1,r7,r4              ;439
000248  e0860004          ADD      r0,r6,r4              ;439
00024c  e59f3084          LDR      r3,|L1.728|
000250  e5933000          LDR      r3,[r3,#0]            ;439  ; pUartInterface
000254  e5932008          LDR      r2,[r3,#8]            ;439
000258  e12fff32          BLX      r2                    ;439
00025c  e1a05000          MOV      r5,r0                 ;439
000260  e3550000          CMP      r5,#0                 ;440
000264  da000000          BLE      |L1.620|
000268  e0844005          ADD      r4,r4,r5              ;441
                  |L1.620|
00026c  e2899001          ADD      r9,r9,#1              ;442
                  |L1.624|
000270  e3a0100a          MOV      r1,#0xa               ;436
000274  e1a00008          MOV      r0,r8                 ;436
000278  ebfffffe          BL       __aeabi_uidivmod
00027c  e1500009          CMP      r0,r9                 ;436
000280  8affffed          BHI      |L1.572|
000284  e1a00004          MOV      r0,r4                 ;444
000288  eaffffe4          B        |L1.544|
                  |L1.652|
00028c  0d0a2025          DCB      "\r\n %s: len = %d...\r\n   -%02d:-> ",0
000290  733a206c
000294  656e203d
000298  2025642e
00029c  2e2e0d0a
0002a0  2020202d
0002a4  25303264
0002a8  3a2d3e20
0002ac  00      
0002ad  00                DCB      0
0002ae  00                DCB      0
0002af  00                DCB      0
                  |L1.688|
0002b0  5b253032          DCB      "[%02d]:0x%02x(%c)\r\n",0
0002b4  645d3a30
0002b8  78253032
0002bc  78282563
0002c0  290d0a00
                  |L1.708|
0002c4  5b253032          DCB      "[%02d]:0x%02x\r\n",0
0002c8  645d3a30
0002cc  78253032
0002d0  780d0a00
                  |L1.724|
0002d4  0d0a00            DCB      "\r\n",0
0002d7  00                DCB      0
                  |L1.728|
                          DCD      pUartInterface
                  |L1.732|
0002dc  514d6f64          DCB      "QModemWrite",0
0002e0  656d5772
0002e4  69746500
                          ENDP

                  QModemSetPower PROC
;;;448    //static BOOL QModemSetPower(BOOL flag)
;;;449    BOOL QModemSetPower(BOOL flag)
0002e8  e92d4010          PUSH     {r4,lr}
;;;450    {
0002ec  e1a04000          MOV      r4,r0
;;;451        if(pUartInterface == NULL)
0002f0  e51f0020          LDR      r0,|L1.728|
0002f4  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
0002f8  e3500000          CMP      r0,#0
0002fc  1a000001          BNE      |L1.776|
;;;452            return FALSE ;
000300  e3a00000          MOV      r0,#0
                  |L1.772|
;;;453        return pUartInterface->setPowerFunc(flag);
;;;454    }
000304  e8bd8010          POP      {r4,pc}
                  |L1.776|
000308  e51f0038          LDR      r0,|L1.728|
00030c  e5900000          LDR      r0,[r0,#0]            ;453  ; pUartInterface
000310  e5901010          LDR      r1,[r0,#0x10]         ;453
000314  e1a00004          MOV      r0,r4                 ;453
000318  e12fff31          BLX      r1                    ;453
00031c  eafffff8          B        |L1.772|
;;;455    #endif
                          ENDP

                  QModemIoctl PROC
;;;456    //static INT QModemIoctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
;;;457    INT QModemIoctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
000320  e92d4070          PUSH     {r4-r6,lr}
;;;458    {
000324  e1a04000          MOV      r4,r0
000328  e1a05001          MOV      r5,r1
00032c  e1a06002          MOV      r6,r2
;;;459        if(pUartInterface == NULL)
000330  e51f0060          LDR      r0,|L1.728|
000334  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000338  e3500000          CMP      r0,#0
00033c  1a000001          BNE      |L1.840|
;;;460            return 0 ;
000340  e3a00000          MOV      r0,#0
                  |L1.836|
;;;461        return pUartInterface->ioctlFunc(uCmd, uArg0, uArg1);
;;;462    }
000344  e8bd8070          POP      {r4-r6,pc}
                  |L1.840|
000348  e51f0078          LDR      r0,|L1.728|
00034c  e5900000          LDR      r0,[r0,#0]            ;461  ; pUartInterface
000350  e1a02006          MOV      r2,r6                 ;461
000354  e1a01005          MOV      r1,r5                 ;461
000358  e5903018          LDR      r3,[r0,#0x18]         ;461
00035c  e1a00004          MOV      r0,r4                 ;461
000360  e12fff33          BLX      r3                    ;461
000364  eafffff6          B        |L1.836|
;;;463    
                          ENDP

                  QModemFlushBuffer PROC
;;;464    void QModemFlushBuffer(void)
000368  e92d4010          PUSH     {r4,lr}
;;;465    {
;;;466        //sysprintf(" --> CardFlushBuffer\n");
;;;467        //if (pUartInterface->ioctlFunc(UART_IOC_FLUSH_TX_BUFFER, 0, 0) != 0) {
;;;468        //    sysprintf("Set TX Flush fail!\n");
;;;469        //    return;
;;;470        //}
;;;471        if (QModemIoctl(UART_IOC_FLUSH_RX_BUFFER, 0, 0) != 0) {
00036c  e3a02000          MOV      r2,#0
000370  e1a01002          MOV      r1,r2
000374  e3a00019          MOV      r0,#0x19
000378  ebfffffe          BL       QModemIoctl
00037c  e3500000          CMP      r0,#0
000380  0a000002          BEQ      |L1.912|
;;;472            sysprintf("Set RX Flush fail!\n");
000384  e28f0fb2          ADR      r0,|L1.1620|
000388  ebfffffe          BL       sysprintf
                  |L1.908|
;;;473            return;
;;;474        }
;;;475    }
00038c  e8bd8010          POP      {r4,pc}
                  |L1.912|
000390  e1a00000          MOV      r0,r0
000394  eafffffc          B        |L1.908|
;;;476    void QModemAbortDataMode(void)
                          ENDP

                  QModemAbortDataMode PROC
000398  e92d4010          PUSH     {r4,lr}
;;;477    {
;;;478        /*
;;;479        sysprintf(" --> QModemAbortDataMode\n");
;;;480        QModemWrite((uint8_t*)"+++\r\n", strlen((char*)"+++\r\n"));
;;;481        vTaskDelay(1000/portTICK_RATE_MS); 
;;;482        */
;;;483        sysprintf(" --> QModemAbortDataMode\n");
00039c  e28f0fb1          ADR      r0,|L1.1640|
0003a0  ebfffffe          BL       sysprintf
;;;484        QModemWrite((uint8_t*)"+++\r\n", strlen((char*)"+++\r\n"));
0003a4  e3a01005          MOV      r1,#5
0003a8  e28f0fb5          ADR      r0,|L1.1668|
0003ac  ebfffffe          BL       QModemWrite
;;;485        QModemWrite((uint8_t*)"+++\r\n", strlen((char*)"+++\r\n"));
0003b0  e3a01005          MOV      r1,#5
0003b4  e28f0fb2          ADR      r0,|L1.1668|
0003b8  ebfffffe          BL       QModemWrite
;;;486        QModemWrite((uint8_t*)"+++\r\n", strlen((char*)"+++\r\n"));
0003bc  e3a01005          MOV      r1,#5
0003c0  e28f0faf          ADR      r0,|L1.1668|
0003c4  ebfffffe          BL       QModemWrite
;;;487        //vTaskDelay(1000/portTICK_RATE_MS); 
;;;488        vTaskDelay(3000/portTICK_RATE_MS);
0003c8  e3a00f4b          MOV      r0,#0x12c
0003cc  ebfffffe          BL       vTaskDelay
;;;489    }
0003d0  e8bd8010          POP      {r4,pc}
;;;490    
                          ENDP

                  resetRetryTimes PROC
;;;491    static void resetRetryTimes(ModemStageItem* pModemStageItem)
0003d4  e3a01000          MOV      r1,#0
;;;492    {
;;;493        int i;
;;;494        for(i = 0;;i++)
0003d8  e1a00000          MOV      r0,r0
                  |L1.988|
;;;495        {
;;;496            if(pModemStageItem[i].stageIndex == MODEM_NULL_STAGE_INDEX)
0003dc  e0812081          ADD      r2,r1,r1,LSL #1
0003e0  e7d02182          LDRB     r2,[r0,r2,LSL #3]
0003e4  e35200ff          CMP      r2,#0xff
0003e8  1a000000          BNE      |L1.1008|
;;;497            {
;;;498                break;
0003ec  ea000005          B        |L1.1032|
                  |L1.1008|
;;;499            }
;;;500            else
;;;501            {
;;;502                pModemStageItem[i].retryTimes = 0; 
0003f0  e3a02000          MOV      r2,#0
0003f4  e0813081          ADD      r3,r1,r1,LSL #1
0003f8  e0803183          ADD      r3,r0,r3,LSL #3
0003fc  e5c32014          STRB     r2,[r3,#0x14]
000400  e2811001          ADD      r1,r1,#1              ;494
000404  eafffff4          B        |L1.988|
                  |L1.1032|
000408  e1a00000          MOV      r0,r0                 ;498
;;;503            }
;;;504        }
;;;505    
;;;506    }
00040c  e12fff1e          BX       lr
;;;507    static ModemStageItem* fineModemStageItem(ModemStageIndex index, ModemStageItem* pModemStageItem)
                          ENDP

                  fineModemStageItem PROC
000410  e1a03000          MOV      r3,r0
;;;508    {
;;;509        int i;
;;;510        ModemStageItem* reVal = NULL;
000414  e3a00000          MOV      r0,#0
;;;511        for(i = 0;;i++)
000418  e3a02000          MOV      r2,#0
00041c  e1a00000          MOV      r0,r0
                  |L1.1056|
;;;512        {
;;;513            if(pModemStageItem[i].stageIndex == MODEM_NULL_STAGE_INDEX)
000420  e082c082          ADD      r12,r2,r2,LSL #1
000424  e7d1c18c          LDRB     r12,[r1,r12,LSL #3]
000428  e35c00ff          CMP      r12,#0xff
00042c  1a000000          BNE      |L1.1076|
;;;514            {
;;;515                break;
000430  ea000008          B        |L1.1112|
                  |L1.1076|
;;;516            }
;;;517            else
;;;518            {
;;;519                if(pModemStageItem[i].stageIndex == index)
000434  e082c082          ADD      r12,r2,r2,LSL #1
000438  e7d1c18c          LDRB     r12,[r1,r12,LSL #3]
00043c  e15c0003          CMP      r12,r3
000440  1a000002          BNE      |L1.1104|
;;;520                {
;;;521                    reVal = &pModemStageItem[i];
000444  e082c082          ADD      r12,r2,r2,LSL #1
000448  e081018c          ADD      r0,r1,r12,LSL #3
;;;522                    //sysprintf("fineModemStageItem get it:%d\r\n", i);
;;;523                    break;
00044c  ea000001          B        |L1.1112|
                  |L1.1104|
000450  e2822001          ADD      r2,r2,#1              ;511
000454  eafffff1          B        |L1.1056|
                  |L1.1112|
000458  e1a00000          MOV      r0,r0                 ;515
;;;524                }
;;;525                    
;;;526                
;;;527            }
;;;528        }
;;;529        //sysprintf("fineModemStageItem %d:%d\r\n", index, reVal->stageIndex);
;;;530        return reVal;
;;;531    }
00045c  e12fff1e          BX       lr
;;;532    
                          ENDP

                  processCmdReqAction PROC
;;;533    static ModemStageIndex processCmdReqAction(ModemStageItem* pStageItem, CmdReq cmdReq)
000460  e1a02000          MOV      r2,r0
;;;534    {
000464  e1a03001          MOV      r3,r1
;;;535        int i;
;;;536        ModemStageIndex reVal = MODEM_NULL_STAGE_INDEX;
000468  e3a000ff          MOV      r0,#0xff
;;;537        for(i = 0;i<MODEM_STAGE_CMD_REG_ACTION_NUM;i++)
00046c  e3a01000          MOV      r1,#0
000470  ea00000f          B        |L1.1204|
                  |L1.1140|
;;;538        {
;;;539            if(pStageItem->cmdRegAction[i].cmdReg == CMD_REQ_NULL)
000474  e592c008          LDR      r12,[r2,#8]
000478  e08cc101          ADD      r12,r12,r1,LSL #2
00047c  e1dcc0b0          LDRH     r12,[r12,#0]
000480  e35c0000          CMP      r12,#0
000484  1a000000          BNE      |L1.1164|
;;;540            {
;;;541                break;
000488  ea00000b          B        |L1.1212|
                  |L1.1164|
;;;542            }
;;;543            else
;;;544            {
;;;545                if(pStageItem->cmdRegAction[i].cmdReg == cmdReq)
00048c  e592c008          LDR      r12,[r2,#8]
000490  e08cc101          ADD      r12,r12,r1,LSL #2
000494  e1dcc0b0          LDRH     r12,[r12,#0]
000498  e15c0003          CMP      r12,r3
00049c  1a000003          BNE      |L1.1200|
;;;546                {
;;;547                    reVal = pStageItem->cmdRegAction[i].nextStage;
0004a0  e592c008          LDR      r12,[r2,#8]
0004a4  e08cc101          ADD      r12,r12,r1,LSL #2
0004a8  e5dc0002          LDRB     r0,[r12,#2]
;;;548                    //sysprintf("processCmdReqAction get it:%d\r\n", i);
;;;549                    break;
0004ac  ea000002          B        |L1.1212|
                  |L1.1200|
0004b0  e2811001          ADD      r1,r1,#1              ;537
                  |L1.1204|
0004b4  e3510004          CMP      r1,#4                 ;537
0004b8  baffffed          BLT      |L1.1140|
                  |L1.1212|
0004bc  e1a00000          MOV      r0,r0                 ;541
;;;550                }
;;;551                    
;;;552                
;;;553            }
;;;554        }
;;;555        //sysprintf("processCmdReqAction %d \r\n", reVal);
;;;556        return reVal;
;;;557    }
0004c0  e12fff1e          BX       lr
;;;558    
                          ENDP

                  processCmdReqActionPure PROC
;;;559    static CmdActionValue processCmdReqActionPure(ModemCmdItem* pModemCmdItem, CmdReq cmdReq)
0004c4  e1a02000          MOV      r2,r0
;;;560    {
0004c8  e1a03001          MOV      r3,r1
;;;561        int i;
;;;562        CmdActionValue reVal = CMD_ACTION_IGNORE;
0004cc  e3a00002          MOV      r0,#2
;;;563        for(i = 0;i<MODEM_STAGE_CMD_REG_ACTION_NUM;i++)
0004d0  e3a01000          MOV      r1,#0
0004d4  ea000014          B        |L1.1324|
                  |L1.1240|
;;;564        {
;;;565            if(pModemCmdItem->cmdRegAction[i].cmdReg == CMD_REQ_NULL)
0004d8  e592c004          LDR      r12,[r2,#4]
0004dc  e08cc101          ADD      r12,r12,r1,LSL #2
0004e0  e1dcc0b0          LDRH     r12,[r12,#0]
0004e4  e35c0000          CMP      r12,#0
0004e8  1a000000          BNE      |L1.1264|
;;;566            {
;;;567                break;
0004ec  ea000010          B        |L1.1332|
                  |L1.1264|
;;;568            }
;;;569            else
;;;570            {
;;;571                //sysprintf("processCmdReqActionPure compare:%d : %d\r\n", pModemCmdItem->cmdRegAction[i].cmdReg, cmdReq);
;;;572                if(pModemCmdItem->cmdRegAction[i].cmdReg == cmdReq)
0004f0  e592c004          LDR      r12,[r2,#4]
0004f4  e08cc101          ADD      r12,r12,r1,LSL #2
0004f8  e1dcc0b0          LDRH     r12,[r12,#0]
0004fc  e15c0003          CMP      r12,r3
000500  1a000008          BNE      |L1.1320|
;;;573                {
;;;574                    //sysprintf("processCmdReqActionPure get it:%d\r\n", i);
;;;575                    if(pModemCmdItem->cmdRegAction[i].returnValue)
000504  e592c004          LDR      r12,[r2,#4]
000508  e08cc101          ADD      r12,r12,r1,LSL #2
00050c  e5dcc002          LDRB     r12,[r12,#2]
000510  e35c0000          CMP      r12,#0
000514  0a000001          BEQ      |L1.1312|
;;;576                        reVal = CMD_ACTION_OK;
000518  e3a00001          MOV      r0,#1
00051c  ea000000          B        |L1.1316|
                  |L1.1312|
;;;577                    else
;;;578                        reVal = CMD_ACTION_ERROR;
000520  e3a00003          MOV      r0,#3
                  |L1.1316|
;;;579                    
;;;580                    break;
000524  ea000002          B        |L1.1332|
                  |L1.1320|
000528  e2811001          ADD      r1,r1,#1              ;563
                  |L1.1324|
00052c  e3510004          CMP      r1,#4                 ;563
000530  baffffe8          BLT      |L1.1240|
                  |L1.1332|
000534  e1a00000          MOV      r0,r0                 ;567
;;;581                }
;;;582                    
;;;583                
;;;584            }
;;;585        }
;;;586        //sysprintf("processCmdReqActionPure %d \r\n", reVal);
;;;587        return reVal;
;;;588    }
000538  e12fff1e          BX       lr
;;;589    #if(0)
                          ENDP

                  actionCmd PROC
;;;608    
;;;609    static ModemReturnValue actionCmd(ModemStageItem* pModemStageItemTmp, ModemStageIndex* stageIndex, ModemStageIndex exitStageIndex, ParserType parserType) 
00053c  e92d4ff8          PUSH     {r3-r11,lr}
;;;610    {
000540  e1a04000          MOV      r4,r0
000544  e1a06001          MOV      r6,r1
000548  e1a08002          MOV      r8,r2
00054c  e1a09003          MOV      r9,r3
;;;611        CmdReq cmdReq = CMD_REQ_NULL;
000550  e3a0a000          MOV      r10,#0
;;;612        ModemStageIndex stageIndexTmp = MODEM_NULL_STAGE_INDEX;
000554  e3a0b0ff          MOV      r11,#0xff
;;;613        int waitTimes = (pModemStageItemTmp->waitTime) / (pModemStageItemTmp->checkIntervalTime);
000558  e5940010          LDR      r0,[r4,#0x10]
00055c  e594100c          LDR      r1,[r4,#0xc]
000560  ebfffffe          BL       __aeabi_uidivmod
000564  e1a07000          MOV      r7,r0
;;;614        if (pModemStageItemTmp->cmd != NULL)
000568  e5940004          LDR      r0,[r4,#4]
00056c  e3500000          CMP      r0,#0
000570  0a000006          BEQ      |L1.1424|
;;;615        {
;;;616            QModemFlushBuffer();
000574  ebfffffe          BL       QModemFlushBuffer
;;;617            QModemWrite(pModemStageItemTmp->cmd, strlen((char*) pModemStageItemTmp->cmd));
000578  e5940004          LDR      r0,[r4,#4]
00057c  ebfffffe          BL       strlen
000580  e1a05000          MOV      r5,r0
000584  e1a01005          MOV      r1,r5
000588  e5940004          LDR      r0,[r4,#4]
00058c  ebfffffe          BL       QModemWrite
                  |L1.1424|
;;;618        }
;;;619        while (waitTimes > 0) 
000590  ea000028          B        |L1.1592|
                  |L1.1428|
;;;620        {
;;;621            if((*stageIndex == exitStageIndex) || cmdActionBreakFlag)
000594  e5d60000          LDRB     r0,[r6,#0]
000598  e1500008          CMP      r0,r8
00059c  0a000003          BEQ      |L1.1456|
0005a0  e59f00e4          LDR      r0,|L1.1676|
0005a4  e5d00000          LDRB     r0,[r0,#0]  ; cmdActionBreakFlag
0005a8  e3500000          CMP      r0,#0
0005ac  0a000003          BEQ      |L1.1472|
                  |L1.1456|
;;;622            {
;;;623                sysprintf("\r\n !!! actionCmd MODEM_RETURN_BREAK !!!\n");
0005b0  e28f00d8          ADR      r0,|L1.1680|
0005b4  ebfffffe          BL       sysprintf
;;;624                return MODEM_RETURN_BREAK;
0005b8  e3a00003          MOV      r0,#3
                  |L1.1468|
;;;625            }
;;;626            vTaskDelay((pModemStageItemTmp->checkIntervalTime)/portTICK_RATE_MS);
;;;627    
;;;628            int n = QModemRead(readBuff, sizeof (readBuff));
;;;629    
;;;630            if (n > 0) 
;;;631            {
;;;632                cmdReq = atCmdProcessReadData(readBuff, n, parserType);
;;;633                if (cmdReq != CMD_REQ_NULL)
;;;634                {
;;;635                    //sysprintf("\r\n !!! get cmeReq = %d !!!\n", cmdReq);
;;;636                    stageIndexTmp = processCmdReqAction(pModemStageItemTmp, cmdReq);
;;;637                    if (stageIndexTmp != MODEM_NULL_STAGE_INDEX) 
;;;638                    {
;;;639                        *stageIndex = stageIndexTmp;
;;;640                        break;
;;;641                    }
;;;642                }
;;;643            }
;;;644            else
;;;645            {
;;;646                sysprintf("-");
;;;647            }
;;;648            waitTimes--;
;;;649        }
;;;650        if(waitTimes == 0)
;;;651            return MODEM_RETURN_ERROR;
;;;652        else
;;;653            return MODEM_RETURN_OK;
;;;654    }
0005bc  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1472|
0005c0  e3a0100a          MOV      r1,#0xa               ;626
0005c4  e594000c          LDR      r0,[r4,#0xc]          ;626
0005c8  ebfffffe          BL       __aeabi_uidivmod
0005cc  e58d0000          STR      r0,[sp,#0]            ;626
0005d0  ebfffffe          BL       vTaskDelay
0005d4  e3a01802          MOV      r1,#0x20000           ;628
0005d8  e59f00dc          LDR      r0,|L1.1724|
0005dc  ebfffffe          BL       QModemRead
0005e0  e1a05000          MOV      r5,r0                 ;628
0005e4  e3550000          CMP      r5,#0                 ;630
0005e8  da00000e          BLE      |L1.1576|
0005ec  e1a02009          MOV      r2,r9                 ;632
0005f0  e1a01005          MOV      r1,r5                 ;632
0005f4  e59f00c0          LDR      r0,|L1.1724|
0005f8  ebfffffe          BL       atCmdProcessReadData
0005fc  e1a0a000          MOV      r10,r0                ;632
000600  e35a0000          CMP      r10,#0                ;633
000604  0a000009          BEQ      |L1.1584|
000608  e1a0100a          MOV      r1,r10                ;636
00060c  e1a00004          MOV      r0,r4                 ;636
000610  ebfffffe          BL       processCmdReqAction
000614  e1a0b000          MOV      r11,r0                ;636
000618  e35b00ff          CMP      r11,#0xff             ;637
00061c  0a000003          BEQ      |L1.1584|
000620  e5c6b000          STRB     r11,[r6,#0]           ;639
000624  ea000005          B        |L1.1600|
                  |L1.1576|
000628  e28f0090          ADR      r0,|L1.1728|
00062c  ebfffffe          BL       sysprintf
                  |L1.1584|
000630  e2477001          SUB      r7,r7,#1              ;648
000634  e1a00000          MOV      r0,r0                 ;649
                  |L1.1592|
000638  e3570000          CMP      r7,#0                 ;619
00063c  caffffd4          BGT      |L1.1428|
                  |L1.1600|
000640  e1a00000          MOV      r0,r0                 ;640
000644  e3570000          CMP      r7,#0                 ;650
000648  1a00001d          BNE      |L1.1732|
00064c  e3a00002          MOV      r0,#2                 ;651
000650  eaffffd9          B        |L1.1468|
                  |L1.1620|
000654  53657420          DCB      "Set RX Flush fail!\n",0
000658  52582046
00065c  6c757368
000660  20666169
000664  6c210a00
                  |L1.1640|
000668  202d2d3e          DCB      " --> QModemAbortDataMode\n",0
00066c  20514d6f
000670  64656d41
000674  626f7274
000678  44617461
00067c  4d6f6465
000680  0a00    
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  2b2b2b0d          DCB      "+++\r\n",0
000688  0a00    
00068a  00                DCB      0
00068b  00                DCB      0
                  |L1.1676|
                          DCD      cmdActionBreakFlag
                  |L1.1680|
000690  0d0a2021          DCB      "\r\n !!! actionCmd MODEM_RETURN_BREAK !!!\n",0
000694  21212061
000698  6374696f
00069c  6e436d64
0006a0  204d4f44
0006a4  454d5f52
0006a8  45545552
0006ac  4e5f4252
0006b0  45414b20
0006b4  2121210a
0006b8  00      
0006b9  00                DCB      0
0006ba  00                DCB      0
0006bb  00                DCB      0
                  |L1.1724|
                          DCD      readBuff
                  |L1.1728|
0006c0  2d00              DCB      "-",0
0006c2  00                DCB      0
0006c3  00                DCB      0
                  |L1.1732|
0006c4  e3a00001          MOV      r0,#1                 ;653
0006c8  eaffffbb          B        |L1.1468|
;;;655    
                          ENDP

                  actionCmdPureEx PROC
;;;656    
;;;657    static ModemReturnValue actionCmdPureEx(ModemCmdItem* pModemCmdItemTmp, ParserType parserType) 
0006cc  e92d4ff0          PUSH     {r4-r11,lr}
;;;658    {
0006d0  e24ddf81          SUB      sp,sp,#0x204
0006d4  e1a04000          MOV      r4,r0
0006d8  e1a07001          MOV      r7,r1
;;;659        BOOL reVal =FALSE;
0006dc  e3a08000          MOV      r8,#0
;;;660        CmdActionValue actionValue;
;;;661        CmdReq cmdReq = CMD_REQ_NULL;
0006e0  e3a0a000          MOV      r10,#0
;;;662        TickType_t tickLocalStart = xTaskGetTickCount();
0006e4  ebfffffe          BL       xTaskGetTickCount
0006e8  e1a09000          MOV      r9,r0
;;;663        int waitTimes = (pModemCmdItemTmp->waitTime) / (pModemCmdItemTmp->checkIntervalTime);
0006ec  e594000c          LDR      r0,[r4,#0xc]
0006f0  e5941008          LDR      r1,[r4,#8]
0006f4  ebfffffe          BL       __aeabi_uidivmod
0006f8  e1a06000          MOV      r6,r0
;;;664        if (pModemCmdItemTmp->cmd != NULL) 
0006fc  e5940000          LDR      r0,[r4,#0]
000700  e3500000          CMP      r0,#0
000704  0a000008          BEQ      |L1.1836|
;;;665        {
;;;666            QModemFlushBuffer();
000708  ebfffffe          BL       QModemFlushBuffer
;;;667            
;;;668            tickLocalStart = xTaskGetTickCount();
00070c  ebfffffe          BL       xTaskGetTickCount
000710  e1a09000          MOV      r9,r0
;;;669            //sysprintf("\r\n !!! [WARNING]  actionCmdPure SEND %d (waitTimes = %d, waitTime = %d, checkIntervalTime = %d )!!!\n", tickLocalStart, waitTimes, pModemCmdItemTmp->waitTime, pModemCmdItemTmp->checkIntervalTime);
;;;670            
;;;671            //ATCmdSetReceiveDebugFlag(TRUE);
;;;672            QModemWrite(pModemCmdItemTmp->cmd, strlen((char*) pModemCmdItemTmp->cmd));
000714  e5940000          LDR      r0,[r4,#0]
000718  ebfffffe          BL       strlen
00071c  e1a05000          MOV      r5,r0
000720  e1a01005          MOV      r1,r5
000724  e5940000          LDR      r0,[r4,#0]
000728  ebfffffe          BL       QModemWrite
                  |L1.1836|
;;;673            //QModemFlushBuffer();
;;;674            //ATCmdSetReceiveDebugFlag(FALSE);
;;;675            
;;;676        }
;;;677        while (waitTimes > 0) 
00072c  ea000032          B        |L1.2044|
                  |L1.1840|
;;;678        {
;;;679            if(cmdActionBreakFlag)
000730  e51f00ac          LDR      r0,|L1.1676|
000734  e5d00000          LDRB     r0,[r0,#0]  ; cmdActionBreakFlag
000738  e3500000          CMP      r0,#0
00073c  0a000004          BEQ      |L1.1876|
;;;680            {
;;;681                sysprintf("\r\n !!! actionCmdPure MODEM_RETURN_BREAK !!!\n");
000740  e28f0e27          ADR      r0,|L1.2488|
000744  ebfffffe          BL       sysprintf
;;;682                return MODEM_RETURN_BREAK;
000748  e3a00003          MOV      r0,#3
                  |L1.1868|
00074c  e28ddf81          ADD      sp,sp,#0x204
;;;683            }
;;;684            int n = QModemRead(readBuff, sizeof (readBuff));      
;;;685            if (n > 0) {
;;;686                cmdReq = atCmdProcessReadData(readBuff, n, parserType);
;;;687    
;;;688                /* DEBUG LED *///terninalPrintf("n >=");
;;;689                /* DEBUG LED *///for(int i=0;i<n;i++)
;;;690                /* DEBUG LED *///terninalPrintf("%02x ",readBuff[i]);
;;;691                /* DEBUG LED *///terninalPrintf("\n  ");
;;;692                
;;;693                if((readBuff[n-4] == 'O') && (readBuff[n-3] == 'K') && (readBuff[n-2] == 0x0D) && (readBuff[n-1] == 0x0A))
;;;694                    reVal = TRUE;
;;;695                else
;;;696                    reVal = FALSE;
;;;697                break;
;;;698                if (cmdReq != CMD_REQ_NULL) 
;;;699                {
;;;700    
;;;701                    //sysprintf("\r\n !!! get cmeReq = %d !!!\n", cmdReq);
;;;702                    actionValue = processCmdReqActionPure(pModemCmdItemTmp, cmdReq);
;;;703                    if(actionValue == CMD_ACTION_OK)
;;;704                    {
;;;705                        reVal = TRUE;
;;;706                        break;
;;;707                    }
;;;708                    else if(actionValue == CMD_ACTION_ERROR)
;;;709                    {
;;;710                        break;
;;;711                    }
;;;712                    else
;;;713                    {
;;;714                        //sysprintf("\r\n !!! ++> re get cmeReq !!!\n");
;;;715                    }
;;;716                    
;;;717                }
;;;718            }
;;;719            else {
;;;720                //sysprintf("\r\n~[%d]~\r\n", xTaskGetTickCount() - tickLocalStart);
;;;721                sysprintf("~");
;;;722            }
;;;723            vTaskDelay((pModemCmdItemTmp->checkIntervalTime)/portTICK_RATE_MS);
;;;724            waitTimes--;
;;;725        }
;;;726        if(waitTimes == 0)
;;;727        {
;;;728            sysprintf("\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%d)\r\n", xTaskGetTickCount() - tickLocalStart);
;;;729            {
;;;730                char str[512];
;;;731                sprintf(str, "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%s)\r\n", pModemCmdItemTmp->cmd);
;;;732                LoglibPrintf(LOG_TYPE_ERROR, str);
;;;733            }
;;;734            QModemAbortDataMode();
;;;735            return MODEM_RETURN_ERROR;
;;;736        }
;;;737        else
;;;738        {
;;;739            if(reVal)
;;;740                return MODEM_RETURN_OK;
;;;741            else
;;;742                return MODEM_RETURN_ERROR;
;;;743        }
;;;744    }
000750  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1876|
000754  e3a01802          MOV      r1,#0x20000           ;684
000758  e51f00a4          LDR      r0,|L1.1724|
00075c  ebfffffe          BL       QModemRead
000760  e1a05000          MOV      r5,r0                 ;684
000764  e3550000          CMP      r5,#0                 ;685
000768  da000019          BLE      |L1.2004|
00076c  e1a02007          MOV      r2,r7                 ;686
000770  e1a01005          MOV      r1,r5                 ;686
000774  e51f00c0          LDR      r0,|L1.1724|
000778  ebfffffe          BL       atCmdProcessReadData
00077c  e1a0a000          MOV      r10,r0                ;686
000780  e2450004          SUB      r0,r5,#4              ;693
000784  e51f10d0          LDR      r1,|L1.1724|
000788  e7d10000          LDRB     r0,[r1,r0]            ;693
00078c  e350004f          CMP      r0,#0x4f              ;693
000790  1a00000d          BNE      |L1.1996|
000794  e2450003          SUB      r0,r5,#3              ;693
000798  e7d10000          LDRB     r0,[r1,r0]            ;693
00079c  e350004b          CMP      r0,#0x4b              ;693
0007a0  1a000009          BNE      |L1.1996|
0007a4  e2450002          SUB      r0,r5,#2              ;693
0007a8  e7d10000          LDRB     r0,[r1,r0]            ;693
0007ac  e350000d          CMP      r0,#0xd               ;693
0007b0  1a000005          BNE      |L1.1996|
0007b4  e2450001          SUB      r0,r5,#1              ;693
0007b8  e7d10000          LDRB     r0,[r1,r0]            ;693
0007bc  e350000a          CMP      r0,#0xa               ;693
0007c0  1a000001          BNE      |L1.1996|
0007c4  e3a08001          MOV      r8,#1                 ;694
0007c8  ea000000          B        |L1.2000|
                  |L1.1996|
0007cc  e3a08000          MOV      r8,#0                 ;696
                  |L1.2000|
0007d0  ea00000b          B        |L1.2052|
                  |L1.2004|
0007d4  e1a00000          MOV      r0,r0                 ;710
0007d8  e28f0f82          ADR      r0,|L1.2536|
0007dc  ebfffffe          BL       sysprintf
0007e0  e3a0100a          MOV      r1,#0xa               ;723
0007e4  e5940008          LDR      r0,[r4,#8]            ;723
0007e8  ebfffffe          BL       __aeabi_uidivmod
0007ec  e1a0b000          MOV      r11,r0                ;723
0007f0  ebfffffe          BL       vTaskDelay
0007f4  e2466001          SUB      r6,r6,#1              ;724
0007f8  e1a00000          MOV      r0,r0                 ;725
                  |L1.2044|
0007fc  e3560000          CMP      r6,#0                 ;677
000800  caffffca          BGT      |L1.1840|
                  |L1.2052|
000804  e1a00000          MOV      r0,r0                 ;697
000808  e3560000          CMP      r6,#0                 ;726
00080c  1a00000e          BNE      |L1.2124|
000810  ebfffffe          BL       xTaskGetTickCount
000814  e0405009          SUB      r5,r0,r9              ;728
000818  e1a01005          MOV      r1,r5                 ;728
00081c  e28f0f72          ADR      r0,|L1.2540|
000820  ebfffffe          BL       sysprintf
000824  e28f1f7f          ADR      r1,|L1.2600|
000828  e28d0004          ADD      r0,sp,#4              ;731
00082c  e5942000          LDR      r2,[r4,#0]            ;731
000830  ebfffffe          BL       __2sprintf
000834  e28d1004          ADD      r1,sp,#4              ;732
000838  e3a00002          MOV      r0,#2                 ;732
00083c  ebfffffe          BL       LoglibPrintf
000840  ebfffffe          BL       QModemAbortDataMode
000844  e3a00002          MOV      r0,#2                 ;735
000848  eaffffbf          B        |L1.1868|
                  |L1.2124|
00084c  e3580000          CMP      r8,#0                 ;739
000850  0a000001          BEQ      |L1.2140|
000854  e3a00001          MOV      r0,#1                 ;740
000858  eaffffbb          B        |L1.1868|
                  |L1.2140|
00085c  e3a00002          MOV      r0,#2                 ;742
000860  eaffffb9          B        |L1.1868|
;;;745    
                          ENDP

                  actionCmdPurePro PROC
;;;746    static ModemReturnValue actionCmdPurePro(ModemCmdItem* pModemCmdItemTmp, ParserType parserType,char* rbuff,int rlen,int* retunlen,UINT32 readtime) 
000864  e92d4ff0          PUSH     {r4-r11,lr}
;;;747    {
000868  e24ddf83          SUB      sp,sp,#0x20c
00086c  e1a04000          MOV      r4,r0
000870  e1a07002          MOV      r7,r2
000874  e1a08003          MOV      r8,r3
000878  e59d9230          LDR      r9,[sp,#0x230]
00087c  e59da234          LDR      r10,[sp,#0x234]
;;;748        BOOL reVal =FALSE;
000880  e3a0b000          MOV      r11,#0
;;;749        CmdActionValue actionValue;
;;;750        CmdReq cmdReq = CMD_REQ_NULL;
000884  e3a00000          MOV      r0,#0
000888  e58d0208          STR      r0,[sp,#0x208]
;;;751        TickType_t tickLocalStart = xTaskGetTickCount();
00088c  ebfffffe          BL       xTaskGetTickCount
000890  e58d0204          STR      r0,[sp,#0x204]
;;;752        int waitTimes = (pModemCmdItemTmp->waitTime) / (pModemCmdItemTmp->checkIntervalTime);
000894  e594000c          LDR      r0,[r4,#0xc]
000898  e5941008          LDR      r1,[r4,#8]
00089c  ebfffffe          BL       __aeabi_uidivmod
0008a0  e1a06000          MOV      r6,r0
;;;753        if (pModemCmdItemTmp->cmd != NULL) 
0008a4  e5940000          LDR      r0,[r4,#0]
0008a8  e3500000          CMP      r0,#0
0008ac  0a000008          BEQ      |L1.2260|
;;;754        {
;;;755            QModemFlushBuffer();
0008b0  ebfffffe          BL       QModemFlushBuffer
;;;756            
;;;757            tickLocalStart = xTaskGetTickCount();
0008b4  ebfffffe          BL       xTaskGetTickCount
0008b8  e58d0204          STR      r0,[sp,#0x204]
;;;758    
;;;759            QModemWrite(pModemCmdItemTmp->cmd, strlen((char*) pModemCmdItemTmp->cmd));
0008bc  e5940000          LDR      r0,[r4,#0]
0008c0  ebfffffe          BL       strlen
0008c4  e1a05000          MOV      r5,r0
0008c8  e1a01005          MOV      r1,r5
0008cc  e5940000          LDR      r0,[r4,#0]
0008d0  ebfffffe          BL       QModemWrite
                  |L1.2260|
;;;760            
;;;761        }
;;;762        while (waitTimes > 0) 
0008d4  ea00001c          B        |L1.2380|
                  |L1.2264|
;;;763        {
;;;764            if(cmdActionBreakFlag)
0008d8  e51f0254          LDR      r0,|L1.1676|
0008dc  e5d00000          LDRB     r0,[r0,#0]  ; cmdActionBreakFlag
0008e0  e3500000          CMP      r0,#0
0008e4  0a000004          BEQ      |L1.2300|
;;;765            {
;;;766                sysprintf("\r\n !!! actionCmdPure MODEM_RETURN_BREAK !!!\n");
0008e8  e28f00c8          ADR      r0,|L1.2488|
0008ec  ebfffffe          BL       sysprintf
;;;767                return MODEM_RETURN_BREAK;
0008f0  e3a00003          MOV      r0,#3
                  |L1.2292|
0008f4  e28ddf83          ADD      sp,sp,#0x20c
;;;768            }
;;;769            //terninalPrintf("sizeof (rbuff) = %d",sizeof (rbuff));
;;;770            int n = QModemReadEx((PUINT8)rbuff, rlen,readtime);
;;;771            if (n > 0) {
;;;772                *retunlen = n;
;;;773                //cmdReq = atCmdProcessReadData(rbuff, n, parserType);
;;;774                /*
;;;775                terninalPrintf("rbuff=%s\r\n",rbuff);
;;;776                terninalPrintf("rbuff=");
;;;777                for(int i=0;i<50;i++)
;;;778                {
;;;779                  terninalPrintf("%02x ",rbuff[i]);
;;;780                }
;;;781                terninalPrintf("\r\n");  
;;;782                */
;;;783                //ATCmdSetReceiveDebugFlag(FALSE);
;;;784                //sysprintf("\r\n --TEST---  !!! get cmeReq = %d !!!\n", cmdReq);
;;;785                reVal = TRUE;
;;;786                break;
;;;787                if (cmdReq != CMD_REQ_NULL) 
;;;788                {
;;;789    
;;;790                    //sysprintf("\r\n !!! get cmeReq = %d !!!\n", cmdReq);
;;;791                    actionValue = processCmdReqActionPure(pModemCmdItemTmp, cmdReq);
;;;792                    if(actionValue == CMD_ACTION_OK)
;;;793                    {
;;;794                        reVal = TRUE;
;;;795                        break;
;;;796                    }
;;;797                    else if(actionValue == CMD_ACTION_ERROR)
;;;798                    {
;;;799                        break;
;;;800                    }
;;;801                    else
;;;802                    {
;;;803                        //sysprintf("\r\n !!! ++> re get cmeReq !!!\n");
;;;804                    }
;;;805                    
;;;806                }
;;;807            }
;;;808            else {
;;;809                //sysprintf("\r\n~[%d]~\r\n", xTaskGetTickCount() - tickLocalStart);
;;;810                sysprintf("~");
;;;811            }
;;;812            vTaskDelay((pModemCmdItemTmp->checkIntervalTime)/portTICK_RATE_MS);
;;;813            waitTimes--;
;;;814        }
;;;815        if(waitTimes == 0)
;;;816        {
;;;817            sysprintf("\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%d)\r\n", xTaskGetTickCount() - tickLocalStart);
;;;818            {
;;;819                char str[512];
;;;820                sprintf(str, "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%s)\r\n", pModemCmdItemTmp->cmd);
;;;821                LoglibPrintf(LOG_TYPE_ERROR, str);
;;;822            }
;;;823            QModemAbortDataMode();
;;;824            return MODEM_RETURN_ERROR;
;;;825        }
;;;826        else
;;;827        {
;;;828            if(reVal)
;;;829                return MODEM_RETURN_OK;
;;;830            else
;;;831                return MODEM_RETURN_ERROR;
;;;832        }
;;;833    }
0008f8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2300|
0008fc  e1a0200a          MOV      r2,r10                ;770
000900  e1a01008          MOV      r1,r8                 ;770
000904  e1a00007          MOV      r0,r7                 ;770
000908  ebfffffe          BL       QModemReadEx
00090c  e1a05000          MOV      r5,r0                 ;770
000910  e3550000          CMP      r5,#0                 ;771
000914  da000002          BLE      |L1.2340|
000918  e5895000          STR      r5,[r9,#0]            ;772
00091c  e3a0b001          MOV      r11,#1                ;785
000920  ea00000b          B        |L1.2388|
                  |L1.2340|
000924  e1a00000          MOV      r0,r0                 ;799
000928  e28f00b8          ADR      r0,|L1.2536|
00092c  ebfffffe          BL       sysprintf
000930  e3a0100a          MOV      r1,#0xa               ;812
000934  e5940008          LDR      r0,[r4,#8]            ;812
000938  ebfffffe          BL       __aeabi_uidivmod
00093c  e58d0200          STR      r0,[sp,#0x200]        ;812
000940  ebfffffe          BL       vTaskDelay
000944  e2466001          SUB      r6,r6,#1              ;813
000948  e1a00000          MOV      r0,r0                 ;814
                  |L1.2380|
00094c  e3560000          CMP      r6,#0                 ;762
000950  caffffe0          BGT      |L1.2264|
                  |L1.2388|
000954  e1a00000          MOV      r0,r0                 ;786
000958  e3560000          CMP      r6,#0                 ;815
00095c  1a00000f          BNE      |L1.2464|
000960  ebfffffe          BL       xTaskGetTickCount
000964  e59d1204          LDR      r1,[sp,#0x204]        ;817
000968  e0405001          SUB      r5,r0,r1              ;817
00096c  e1a01005          MOV      r1,r5                 ;817
000970  e28f0074          ADR      r0,|L1.2540|
000974  ebfffffe          BL       sysprintf
000978  e28f10a8          ADR      r1,|L1.2600|
00097c  e28d0004          ADD      r0,sp,#4              ;820
000980  e5942000          LDR      r2,[r4,#0]            ;820
000984  ebfffffe          BL       __2sprintf
000988  e28d1004          ADD      r1,sp,#4              ;821
00098c  e3a00002          MOV      r0,#2                 ;821
000990  ebfffffe          BL       LoglibPrintf
000994  ebfffffe          BL       QModemAbortDataMode
000998  e3a00002          MOV      r0,#2                 ;824
00099c  eaffffd4          B        |L1.2292|
                  |L1.2464|
0009a0  e35b0000          CMP      r11,#0                ;828
0009a4  0a000001          BEQ      |L1.2480|
0009a8  e3a00001          MOV      r0,#1                 ;829
0009ac  eaffffd0          B        |L1.2292|
                  |L1.2480|
0009b0  e3a00002          MOV      r0,#2                 ;831
0009b4  eaffffce          B        |L1.2292|
                  |L1.2488|
0009b8  0d0a2021          DCB      "\r\n !!! actionCmdPure MODEM_RETURN_BREAK !!!\n",0
0009bc  21212061
0009c0  6374696f
0009c4  6e436d64
0009c8  50757265
0009cc  204d4f44
0009d0  454d5f52
0009d4  45545552
0009d8  4e5f4252
0009dc  45414b20
0009e0  2121210a
0009e4  00      
0009e5  00                DCB      0
0009e6  00                DCB      0
0009e7  00                DCB      0
                  |L1.2536|
0009e8  7e00              DCB      "~",0
0009ea  00                DCB      0
0009eb  00                DCB      0
                  |L1.2540|
0009ec  0d0a205b          DCB      "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout ("
0009f0  2d2d2d2d
0009f4  20455252
0009f8  4f52202d
0009fc  2d2d2d5d
000a00  202d2061
000a04  6374696f
000a08  6e436d64
000a0c  50757265
000a10  20455252
000a14  4f522d20
000a18  74696d65
000a1c  6f757420
000a20  28      
000a21  2564290d          DCB      "%d)\r\n",0
000a25  0a00    
000a27  00                DCB      0
                  |L1.2600|
000a28  0d0a205b          DCB      "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout ("
000a2c  2d2d2d2d
000a30  20455252
000a34  4f52202d
000a38  2d2d2d5d
000a3c  202d2061
000a40  6374696f
000a44  6e436d64
000a48  50757265
000a4c  20455252
000a50  4f522d20
000a54  74696d65
000a58  6f757420
000a5c  28      
000a5d  2573290d          DCB      "%s)\r\n",0
000a61  0a00    
000a63  00                DCB      0
                          ENDP

                  actionCmdPureFTP PROC
;;;835    
;;;836    static ModemReturnValue actionCmdPureFTP(ModemCmdItem* pModemCmdItemTmp, ParserType parserType,char* rbuff,int rlen,int* retunlen,UINT32 readtime) 
000a64  e92d4ff0          PUSH     {r4-r11,lr}
;;;837    {
000a68  e24ddf83          SUB      sp,sp,#0x20c
000a6c  e1a04000          MOV      r4,r0
000a70  e1a07002          MOV      r7,r2
000a74  e1a08003          MOV      r8,r3
000a78  e59d9230          LDR      r9,[sp,#0x230]
000a7c  e59da234          LDR      r10,[sp,#0x234]
;;;838        BOOL reVal =FALSE;
000a80  e3a0b000          MOV      r11,#0
;;;839        CmdActionValue actionValue;
;;;840        CmdReq cmdReq = CMD_REQ_NULL;
000a84  e3a00000          MOV      r0,#0
000a88  e58d0208          STR      r0,[sp,#0x208]
;;;841        TickType_t tickLocalStart = xTaskGetTickCount();
000a8c  ebfffffe          BL       xTaskGetTickCount
000a90  e58d0204          STR      r0,[sp,#0x204]
;;;842        int waitTimes = (pModemCmdItemTmp->waitTime) / (pModemCmdItemTmp->checkIntervalTime);
000a94  e594000c          LDR      r0,[r4,#0xc]
000a98  e5941008          LDR      r1,[r4,#8]
000a9c  ebfffffe          BL       __aeabi_uidivmod
000aa0  e1a06000          MOV      r6,r0
;;;843        if (pModemCmdItemTmp->cmd != NULL) 
000aa4  e5940000          LDR      r0,[r4,#0]
000aa8  e3500000          CMP      r0,#0
000aac  0a000008          BEQ      |L1.2772|
;;;844        {
;;;845            QModemFlushBuffer();
000ab0  ebfffffe          BL       QModemFlushBuffer
;;;846            
;;;847            tickLocalStart = xTaskGetTickCount();
000ab4  ebfffffe          BL       xTaskGetTickCount
000ab8  e58d0204          STR      r0,[sp,#0x204]
;;;848    
;;;849            QModemWrite(pModemCmdItemTmp->cmd, strlen((char*) pModemCmdItemTmp->cmd));
000abc  e5940000          LDR      r0,[r4,#0]
000ac0  ebfffffe          BL       strlen
000ac4  e1a05000          MOV      r5,r0
000ac8  e1a01005          MOV      r1,r5
000acc  e5940000          LDR      r0,[r4,#0]
000ad0  ebfffffe          BL       QModemWrite
                  |L1.2772|
;;;850            
;;;851        }
;;;852        while (waitTimes > 0) 
000ad4  ea00001c          B        |L1.2892|
                  |L1.2776|
;;;853        {
;;;854            if(cmdActionBreakFlag)
000ad8  e51f0454          LDR      r0,|L1.1676|
000adc  e5d00000          LDRB     r0,[r0,#0]  ; cmdActionBreakFlag
000ae0  e3500000          CMP      r0,#0
000ae4  0a000004          BEQ      |L1.2812|
;;;855            {
;;;856                sysprintf("\r\n !!! actionCmdPure MODEM_RETURN_BREAK !!!\n");
000ae8  e24f0f4e          ADR      r0,|L1.2488|
000aec  ebfffffe          BL       sysprintf
;;;857                return MODEM_RETURN_BREAK;
000af0  e3a00003          MOV      r0,#3
                  |L1.2804|
000af4  e28ddf83          ADD      sp,sp,#0x20c
;;;858            }
;;;859            //terninalPrintf("sizeof (rbuff) = %d",sizeof (rbuff));
;;;860            int n = QModemReadEx((PUINT8)rbuff, rlen,readtime);
;;;861            if (n > 0) {
;;;862                *retunlen = n;
;;;863                //cmdReq = atCmdProcessReadData(rbuff, n, parserType);
;;;864                /*
;;;865                terninalPrintf("rbuff=%s\r\n",rbuff);
;;;866                terninalPrintf("rbuff=");
;;;867                for(int i=0;i<50;i++)
;;;868                {
;;;869                  terninalPrintf("%02x ",rbuff[i]);
;;;870                }
;;;871                terninalPrintf("\r\n");  
;;;872                */
;;;873                //ATCmdSetReceiveDebugFlag(FALSE);
;;;874                //sysprintf("\r\n --TEST---  !!! get cmeReq = %d !!!\n", cmdReq);
;;;875                reVal = TRUE;
;;;876                break;
;;;877                if (cmdReq != CMD_REQ_NULL) 
;;;878                {
;;;879    
;;;880                    //sysprintf("\r\n !!! get cmeReq = %d !!!\n", cmdReq);
;;;881                    actionValue = processCmdReqActionPure(pModemCmdItemTmp, cmdReq);
;;;882                    if(actionValue == CMD_ACTION_OK)
;;;883                    {
;;;884                        reVal = TRUE;
;;;885                        break;
;;;886                    }
;;;887                    else if(actionValue == CMD_ACTION_ERROR)
;;;888                    {
;;;889                        break;
;;;890                    }
;;;891                    else
;;;892                    {
;;;893                        //sysprintf("\r\n !!! ++> re get cmeReq !!!\n");
;;;894                    }
;;;895                    
;;;896                }
;;;897            }
;;;898            else {
;;;899                //sysprintf("\r\n~[%d]~\r\n", xTaskGetTickCount() - tickLocalStart);
;;;900                sysprintf("~");
;;;901            }
;;;902            vTaskDelay((pModemCmdItemTmp->checkIntervalTime)/portTICK_RATE_MS);
;;;903            waitTimes--;
;;;904        }
;;;905        if(waitTimes == 0)
;;;906        {
;;;907            sysprintf("\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%d)\r\n", xTaskGetTickCount() - tickLocalStart);
;;;908            {
;;;909                char str[512];
;;;910                sprintf(str, "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%s)\r\n", pModemCmdItemTmp->cmd);
;;;911                LoglibPrintf(LOG_TYPE_ERROR, str);
;;;912            }
;;;913            //QModemAbortDataMode();
;;;914            return MODEM_RETURN_ERROR;
;;;915        }
;;;916        else
;;;917        {
;;;918            if(reVal)
;;;919                return MODEM_RETURN_OK;
;;;920            else
;;;921                return MODEM_RETURN_ERROR;
;;;922        }
;;;923    }
000af8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2812|
000afc  e1a0200a          MOV      r2,r10                ;860
000b00  e1a01008          MOV      r1,r8                 ;860
000b04  e1a00007          MOV      r0,r7                 ;860
000b08  ebfffffe          BL       QModemReadEx
000b0c  e1a05000          MOV      r5,r0                 ;860
000b10  e3550000          CMP      r5,#0                 ;861
000b14  da000002          BLE      |L1.2852|
000b18  e5895000          STR      r5,[r9,#0]            ;862
000b1c  e3a0b001          MOV      r11,#1                ;875
000b20  ea00000b          B        |L1.2900|
                  |L1.2852|
000b24  e1a00000          MOV      r0,r0                 ;889
000b28  e24f0f52          ADR      r0,|L1.2536|
000b2c  ebfffffe          BL       sysprintf
000b30  e3a0100a          MOV      r1,#0xa               ;902
000b34  e5940008          LDR      r0,[r4,#8]            ;902
000b38  ebfffffe          BL       __aeabi_uidivmod
000b3c  e58d0200          STR      r0,[sp,#0x200]        ;902
000b40  ebfffffe          BL       vTaskDelay
000b44  e2466001          SUB      r6,r6,#1              ;903
000b48  e1a00000          MOV      r0,r0                 ;904
                  |L1.2892|
000b4c  e3560000          CMP      r6,#0                 ;852
000b50  caffffe0          BGT      |L1.2776|
                  |L1.2900|
000b54  e1a00000          MOV      r0,r0                 ;876
000b58  e3560000          CMP      r6,#0                 ;905
000b5c  1a00000e          BNE      |L1.2972|
000b60  ebfffffe          BL       xTaskGetTickCount
000b64  e59d1204          LDR      r1,[sp,#0x204]        ;907
000b68  e0405001          SUB      r5,r0,r1              ;907
000b6c  e1a01005          MOV      r1,r5                 ;907
000b70  e24f0f63          ADR      r0,|L1.2540|
000b74  ebfffffe          BL       sysprintf
000b78  e24f1f56          ADR      r1,|L1.2600|
000b7c  e28d0004          ADD      r0,sp,#4              ;910
000b80  e5942000          LDR      r2,[r4,#0]            ;910
000b84  ebfffffe          BL       __2sprintf
000b88  e28d1004          ADD      r1,sp,#4              ;911
000b8c  e3a00002          MOV      r0,#2                 ;911
000b90  ebfffffe          BL       LoglibPrintf
000b94  e3a00002          MOV      r0,#2                 ;914
000b98  eaffffd5          B        |L1.2804|
                  |L1.2972|
000b9c  e35b0000          CMP      r11,#0                ;918
000ba0  0a000001          BEQ      |L1.2988|
000ba4  e3a00001          MOV      r0,#1                 ;919
000ba8  eaffffd1          B        |L1.2804|
                  |L1.2988|
000bac  e3a00002          MOV      r0,#2                 ;921
000bb0  eaffffcf          B        |L1.2804|
;;;924    
                          ENDP

                  actionCmdPure PROC
;;;925    static ModemReturnValue actionCmdPure(ModemCmdItem* pModemCmdItemTmp, ParserType parserType) 
000bb4  e92d4ff0          PUSH     {r4-r11,lr}
;;;926    {
000bb8  e24ddf81          SUB      sp,sp,#0x204
000bbc  e1a04000          MOV      r4,r0
000bc0  e1a07001          MOV      r7,r1
;;;927        BOOL reVal =FALSE;
000bc4  e3a08000          MOV      r8,#0
;;;928        CmdActionValue actionValue;
;;;929        CmdReq cmdReq = CMD_REQ_NULL;
000bc8  e3a0a000          MOV      r10,#0
;;;930        TickType_t tickLocalStart = xTaskGetTickCount();
000bcc  ebfffffe          BL       xTaskGetTickCount
000bd0  e1a09000          MOV      r9,r0
;;;931        int waitTimes = (pModemCmdItemTmp->waitTime) / (pModemCmdItemTmp->checkIntervalTime);
000bd4  e594000c          LDR      r0,[r4,#0xc]
000bd8  e5941008          LDR      r1,[r4,#8]
000bdc  ebfffffe          BL       __aeabi_uidivmod
000be0  e1a06000          MOV      r6,r0
;;;932        if (pModemCmdItemTmp->cmd != NULL) 
000be4  e5940000          LDR      r0,[r4,#0]
000be8  e3500000          CMP      r0,#0
000bec  0a000008          BEQ      |L1.3092|
;;;933        {
;;;934            QModemFlushBuffer();
000bf0  ebfffffe          BL       QModemFlushBuffer
;;;935            
;;;936            tickLocalStart = xTaskGetTickCount();
000bf4  ebfffffe          BL       xTaskGetTickCount
000bf8  e1a09000          MOV      r9,r0
;;;937            //sysprintf("\r\n !!! [WARNING]  actionCmdPure SEND %d (waitTimes = %d, waitTime = %d, checkIntervalTime = %d )!!!\n", tickLocalStart, waitTimes, pModemCmdItemTmp->waitTime, pModemCmdItemTmp->checkIntervalTime);
;;;938            
;;;939            //ATCmdSetReceiveDebugFlag(TRUE);
;;;940            QModemWrite(pModemCmdItemTmp->cmd, strlen((char*) pModemCmdItemTmp->cmd));
000bfc  e5940000          LDR      r0,[r4,#0]
000c00  ebfffffe          BL       strlen
000c04  e1a05000          MOV      r5,r0
000c08  e1a01005          MOV      r1,r5
000c0c  e5940000          LDR      r0,[r4,#0]
000c10  ebfffffe          BL       QModemWrite
                  |L1.3092|
;;;941            //QModemFlushBuffer();
;;;942            //ATCmdSetReceiveDebugFlag(FALSE);
;;;943            
;;;944        }
;;;945        while (waitTimes > 0) 
000c14  ea00001f          B        |L1.3224|
                  |L1.3096|
;;;946        {
;;;947            if(cmdActionBreakFlag)
000c18  e51f0594          LDR      r0,|L1.1676|
000c1c  e5d00000          LDRB     r0,[r0,#0]  ; cmdActionBreakFlag
000c20  e3500000          CMP      r0,#0
000c24  0a000004          BEQ      |L1.3132|
;;;948            {
;;;949                sysprintf("\r\n !!! actionCmdPure MODEM_RETURN_BREAK !!!\n");
000c28  e24f0f9e          ADR      r0,|L1.2488|
000c2c  ebfffffe          BL       sysprintf
;;;950                return MODEM_RETURN_BREAK;
000c30  e3a00003          MOV      r0,#3
                  |L1.3124|
000c34  e28ddf81          ADD      sp,sp,#0x204
;;;951            }
;;;952            int n = QModemRead(readBuff, sizeof (readBuff));      
;;;953            if (n > 0) {
;;;954                //ATCmdSetReceiveDebugFlag(TRUE);
;;;955                cmdReq = atCmdProcessReadData(readBuff, n, parserType);
;;;956                /*
;;;957                terninalPrintf("readBuff=%s\r\n",readBuff);
;;;958                terninalPrintf("readBuff=");
;;;959                for(int i=0;i<50;i++)
;;;960                {
;;;961                  terninalPrintf("%02x ",readBuff[i]);
;;;962                }
;;;963                terninalPrintf("\r\n");  */
;;;964                //ATCmdSetReceiveDebugFlag(FALSE);
;;;965                //sysprintf("\r\n --TEST---  !!! get cmeReq = %d !!!\n", cmdReq);
;;;966                reVal = TRUE;
;;;967                break;
;;;968                if (cmdReq != CMD_REQ_NULL) 
;;;969                {
;;;970    
;;;971                    //sysprintf("\r\n !!! get cmeReq = %d !!!\n", cmdReq);
;;;972                    actionValue = processCmdReqActionPure(pModemCmdItemTmp, cmdReq);
;;;973                    if(actionValue == CMD_ACTION_OK)
;;;974                    {
;;;975                        reVal = TRUE;
;;;976                        break;
;;;977                    }
;;;978                    else if(actionValue == CMD_ACTION_ERROR)
;;;979                    {
;;;980                        break;
;;;981                    }
;;;982                    else
;;;983                    {
;;;984                        //sysprintf("\r\n !!! ++> re get cmeReq !!!\n");
;;;985                    }
;;;986                    
;;;987                }
;;;988            }
;;;989            else {
;;;990                //sysprintf("\r\n~[%d]~\r\n", xTaskGetTickCount() - tickLocalStart);
;;;991                sysprintf("~");
;;;992            }
;;;993            vTaskDelay((pModemCmdItemTmp->checkIntervalTime)/portTICK_RATE_MS);
;;;994            waitTimes--;
;;;995        }
;;;996        if(waitTimes == 0)
;;;997        {
;;;998            sysprintf("\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%d)\r\n", xTaskGetTickCount() - tickLocalStart);
;;;999            {
;;;1000               char str[512];
;;;1001               sprintf(str, "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%s)\r\n", pModemCmdItemTmp->cmd);
;;;1002               LoglibPrintf(LOG_TYPE_ERROR, str);
;;;1003           }
;;;1004           QModemAbortDataMode();
;;;1005           return MODEM_RETURN_ERROR;
;;;1006       }
;;;1007       else
;;;1008       {
;;;1009           if(reVal)
;;;1010               return MODEM_RETURN_OK;
;;;1011           else
;;;1012               return MODEM_RETURN_ERROR;
;;;1013       }
;;;1014   }
000c38  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3132|
000c3c  e3a01802          MOV      r1,#0x20000           ;952
000c40  e51f058c          LDR      r0,|L1.1724|
000c44  ebfffffe          BL       QModemRead
000c48  e1a05000          MOV      r5,r0                 ;952
000c4c  e3550000          CMP      r5,#0                 ;953
000c50  da000006          BLE      |L1.3184|
000c54  e1a02007          MOV      r2,r7                 ;955
000c58  e1a01005          MOV      r1,r5                 ;955
000c5c  e51f05a8          LDR      r0,|L1.1724|
000c60  ebfffffe          BL       atCmdProcessReadData
000c64  e1a0a000          MOV      r10,r0                ;955
000c68  e3a08001          MOV      r8,#1                 ;966
000c6c  ea00000b          B        |L1.3232|
                  |L1.3184|
000c70  e1a00000          MOV      r0,r0                 ;980
000c74  e24f0fa5          ADR      r0,|L1.2536|
000c78  ebfffffe          BL       sysprintf
000c7c  e3a0100a          MOV      r1,#0xa               ;993
000c80  e5940008          LDR      r0,[r4,#8]            ;993
000c84  ebfffffe          BL       __aeabi_uidivmod
000c88  e1a0b000          MOV      r11,r0                ;993
000c8c  ebfffffe          BL       vTaskDelay
000c90  e2466001          SUB      r6,r6,#1              ;994
000c94  e1a00000          MOV      r0,r0                 ;995
                  |L1.3224|
000c98  e3560000          CMP      r6,#0                 ;945
000c9c  caffffdd          BGT      |L1.3096|
                  |L1.3232|
000ca0  e1a00000          MOV      r0,r0                 ;967
000ca4  e3560000          CMP      r6,#0                 ;996
000ca8  1a00000e          BNE      |L1.3304|
000cac  ebfffffe          BL       xTaskGetTickCount
000cb0  e0405009          SUB      r5,r0,r9              ;998
000cb4  e1a01005          MOV      r1,r5                 ;998
000cb8  e24f0fb5          ADR      r0,|L1.2540|
000cbc  ebfffffe          BL       sysprintf
000cc0  e24f1e2a          ADR      r1,|L1.2600|
000cc4  e28d0004          ADD      r0,sp,#4              ;1001
000cc8  e5942000          LDR      r2,[r4,#0]            ;1001
000ccc  ebfffffe          BL       __2sprintf
000cd0  e28d1004          ADD      r1,sp,#4              ;1002
000cd4  e3a00002          MOV      r0,#2                 ;1002
000cd8  ebfffffe          BL       LoglibPrintf
000cdc  ebfffffe          BL       QModemAbortDataMode
000ce0  e3a00002          MOV      r0,#2                 ;1005
000ce4  eaffffd2          B        |L1.3124|
                  |L1.3304|
000ce8  e3580000          CMP      r8,#0                 ;1009
000cec  0a000001          BEQ      |L1.3320|
000cf0  e3a00001          MOV      r0,#1                 ;1010
000cf4  eaffffce          B        |L1.3124|
                  |L1.3320|
000cf8  e3a00002          MOV      r0,#2                 ;1012
000cfc  eaffffcc          B        |L1.3124|
;;;1015   
                          ENDP

                  cmdProcess PROC
;;;1016   static CmdReturnValue cmdProcess(char* processName, ModemStageIndex* stageIndex, ModemStageIndex targetStageIndex, ModemStageIndex exitStageIndex, ModemStageItem* pModemStageItem)
000d00  e92d4ff8          PUSH     {r3-r11,lr}
;;;1017   {
000d04  e1a07000          MOV      r7,r0
000d08  e1a05001          MOV      r5,r1
000d0c  e1a08002          MOV      r8,r2
000d10  e1a06003          MOV      r6,r3
000d14  e59db028          LDR      r11,[sp,#0x28]
;;;1018       ModemStageItem* pModemStageItemTmp = fineModemStageItem(*stageIndex, pModemStageItem);
000d18  e5d50000          LDRB     r0,[r5,#0]
000d1c  e1a0100b          MOV      r1,r11
000d20  ebfffffe          BL       fineModemStageItem
000d24  e1a04000          MOV      r4,r0
;;;1019   //    CmdReq cmdReq = CMD_REQ_NULL;
;;;1020       ModemStageIndex stageIndexTmp = MODEM_NULL_STAGE_INDEX;
000d28  e3a090ff          MOV      r9,#0xff
;;;1021       //sysprintf("\r\n  !! %s !!  <<< CURRENT STAGE :[0x%02x] >>>\r\n", processName, *stageIndex);
;;;1022       if(targetStageIndex == *stageIndex)
000d2c  e5d50000          LDRB     r0,[r5,#0]
000d30  e1500008          CMP      r0,r8
000d34  1a000004          BNE      |L1.3404|
;;;1023       {
;;;1024           sysprintf("\r\n   ======= [%s] SUCCESS!!!  =======\r\n ", processName);
000d38  e1a01007          MOV      r1,r7
000d3c  e28f0f59          ADR      r0,|L1.3752|
000d40  ebfffffe          BL       sysprintf
;;;1025           return CMD_RETURN_OK;
000d44  e3a00001          MOV      r0,#1
                  |L1.3400|
;;;1026       }
;;;1027       if((exitStageIndex == *stageIndex) || cmdActionBreakFlag)
;;;1028       {
;;;1029           sysprintf("\r\n   ======= [%s] Break!!!  =======\r\n ", processName);
;;;1030           return CMD_RETURN_BREAK;
;;;1031       }
;;;1032       if(pModemStageItemTmp == NULL)
;;;1033       {
;;;1034           sysprintf("\r\n === [%s] pModemStageItemTmp == NULL!!!  ====\r\n ", processName);
;;;1035           return CMD_RETURN_ERROR;
;;;1036       }
;;;1037       else
;;;1038       {
;;;1039           
;;;1040           if((pModemStageItemTmp->cmdRegAction) == nullModemCmdRegAction)
;;;1041           {
;;;1042               vTaskDelay((pModemStageItemTmp->waitTime)/portTICK_RATE_MS);
;;;1043           }
;;;1044           else
;;;1045           {
;;;1046               vTaskDelay(1000/portTICK_RATE_MS);
;;;1047               ModemReturnValue modemReval = actionCmd(pModemStageItemTmp, stageIndex, exitStageIndex, PARSER_TYPE_NORMAL);
;;;1048               if(modemReval == MODEM_RETURN_ERROR)
;;;1049               {
;;;1050                   sysprintf("\r\n [---- ERROR ----] timeout (waittime:%d, retryTimes:%d) -- *stageIndex = %d [%s] \r\n", pModemStageItemTmp->waitTime, pModemStageItemTmp->retryTimes, *stageIndex,  pModemStageItemTmp->cmd);
;;;1051                   //sysprintf("*");
;;;1052                   if((pModemStageItemTmp->retryTimes++) > MODEM_CMD_RETRY_TIMES)
;;;1053                   {
;;;1054                       //{
;;;1055                       //    char str[1024];
;;;1056                       //    sprintf(str, "!!! modem cmdProcess retry error: stageIndex = %d...\r\n", pModemStageItemTmp->stageIndex);
;;;1057                       //    LoglibPrintf(LOG_TYPE_ERROR, str);
;;;1058                       //}
;;;1059                       return CMD_RETURN_ERROR;
;;;1060                   }
;;;1061                   stageIndexTmp = processCmdReqAction(pModemStageItemTmp, CMD_REQ_ERROR);
;;;1062                   if(stageIndexTmp != MODEM_NULL_STAGE_INDEX)
;;;1063                   {
;;;1064                       *stageIndex = stageIndexTmp;                
;;;1065                   }
;;;1066               }
;;;1067               else if(modemReval == MODEM_RETURN_BREAK)
;;;1068               {
;;;1069                   sysprintf("\r\n   ======= [%s] Break _2!!!  =======\r\n ", processName);
;;;1070                   return CMD_RETURN_BREAK;
;;;1071               }
;;;1072           }
;;;1073       }
;;;1074       return CMD_RETURN_PROCESSING;
;;;1075   
;;;1076   }
000d48  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.3404|
000d4c  e5d50000          LDRB     r0,[r5,#0]            ;1027
000d50  e1500006          CMP      r0,r6                 ;1027
000d54  0a000003          BEQ      |L1.3432|
000d58  e51f06d4          LDR      r0,|L1.1676|
000d5c  e5d00000          LDRB     r0,[r0,#0]            ;1027  ; cmdActionBreakFlag
000d60  e3500000          CMP      r0,#0                 ;1027
000d64  0a000004          BEQ      |L1.3452|
                  |L1.3432|
000d68  e1a01007          MOV      r1,r7                 ;1029
000d6c  e28f0e16          ADR      r0,|L1.3796|
000d70  ebfffffe          BL       sysprintf
000d74  e3a00003          MOV      r0,#3                 ;1030
000d78  eafffff2          B        |L1.3400|
                  |L1.3452|
000d7c  e3540000          CMP      r4,#0                 ;1032
000d80  1a000004          BNE      |L1.3480|
000d84  e1a01007          MOV      r1,r7                 ;1034
000d88  e28f0f5b          ADR      r0,|L1.3836|
000d8c  ebfffffe          BL       sysprintf
000d90  e3a00004          MOV      r0,#4                 ;1035
000d94  eaffffeb          B        |L1.3400|
                  |L1.3480|
000d98  e59f1190          LDR      r1,|L1.3888|
000d9c  e5940008          LDR      r0,[r4,#8]            ;1040
000da0  e1500001          CMP      r0,r1                 ;1040
000da4  1a000005          BNE      |L1.3520|
000da8  e3a0100a          MOV      r1,#0xa               ;1042
000dac  e5940010          LDR      r0,[r4,#0x10]         ;1042
000db0  ebfffffe          BL       __aeabi_uidivmod
000db4  e1a0a000          MOV      r10,r0                ;1042
000db8  ebfffffe          BL       vTaskDelay
000dbc  ea000027          B        |L1.3680|
                  |L1.3520|
000dc0  e3a00064          MOV      r0,#0x64              ;1046
000dc4  ebfffffe          BL       vTaskDelay
000dc8  e3a03001          MOV      r3,#1                 ;1047
000dcc  e1a02006          MOV      r2,r6                 ;1047
000dd0  e1a01005          MOV      r1,r5                 ;1047
000dd4  e1a00004          MOV      r0,r4                 ;1047
000dd8  ebfffffe          BL       actionCmd
000ddc  e1a0a000          MOV      r10,r0                ;1047
000de0  e35a0002          CMP      r10,#2                ;1048
000de4  1a000015          BNE      |L1.3648|
000de8  e5940004          LDR      r0,[r4,#4]            ;1050
000dec  e58d0000          STR      r0,[sp,#0]            ;1050
000df0  e5d53000          LDRB     r3,[r5,#0]            ;1050
000df4  e5d42014          LDRB     r2,[r4,#0x14]         ;1050
000df8  e59f0134          LDR      r0,|L1.3892|
000dfc  e5941010          LDR      r1,[r4,#0x10]         ;1050
000e00  ebfffffe          BL       sysprintf
000e04  e5d40014          LDRB     r0,[r4,#0x14]         ;1052
000e08  e2801001          ADD      r1,r0,#1              ;1052
000e0c  e5c41014          STRB     r1,[r4,#0x14]         ;1052
000e10  e3500005          CMP      r0,#5                 ;1052
000e14  da000001          BLE      |L1.3616|
000e18  e3a00004          MOV      r0,#4                 ;1059
000e1c  eaffffc9          B        |L1.3400|
                  |L1.3616|
000e20  e3a010c8          MOV      r1,#0xc8              ;1061
000e24  e1a00004          MOV      r0,r4                 ;1061
000e28  ebfffffe          BL       processCmdReqAction
000e2c  e1a09000          MOV      r9,r0                 ;1061
000e30  e35900ff          CMP      r9,#0xff              ;1062
000e34  0a000008          BEQ      |L1.3676|
000e38  e5c59000          STRB     r9,[r5,#0]            ;1064
000e3c  ea000006          B        |L1.3676|
                  |L1.3648|
000e40  e35a0003          CMP      r10,#3                ;1067
000e44  1a000004          BNE      |L1.3676|
000e48  e1a01007          MOV      r1,r7                 ;1069
000e4c  e28f00e4          ADR      r0,|L1.3896|
000e50  ebfffffe          BL       sysprintf
000e54  e3a00003          MOV      r0,#3                 ;1070
000e58  eaffffba          B        |L1.3400|
                  |L1.3676|
000e5c  e1a00000          MOV      r0,r0                 ;1072
                  |L1.3680|
000e60  e3a00002          MOV      r0,#2                 ;1074
000e64  eaffffb7          B        |L1.3400|
;;;1077   
                          ENDP

                  QModemLibInit PROC
;;;1080   /*-----------------------------------------*/
;;;1081   BOOL QModemLibInit(UINT32 baudRate)
000e68  e92d4010          PUSH     {r4,lr}
;;;1082   {
000e6c  e1a04000          MOV      r4,r0
;;;1083       sysprintf("QModemLibInit!!\n");
000e70  e28f00ec          ADR      r0,|L1.3940|
000e74  ebfffffe          BL       sysprintf
;;;1084       pUartInterface = UartGetInterface(QUENTEL_MODEM_UART);
000e78  e3a00003          MOV      r0,#3
000e7c  ebfffffe          BL       UartGetInterface
000e80  e51f1bb0          LDR      r1,|L1.728|
000e84  e5810000          STR      r0,[r1,#0]  ; pUartInterface
;;;1085       if(pUartInterface == NULL)
000e88  e2810000          ADD      r0,r1,#0
000e8c  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000e90  e3500000          CMP      r0,#0
000e94  1a000043          BNE      |L1.4008|
;;;1086       {
;;;1087           sysprintf("QModemLibInit ERROR (pUartInterface == NULL)!!\n");
000e98  e28f00d8          ADR      r0,|L1.3960|
000e9c  ebfffffe          BL       sysprintf
;;;1088           return FALSE;
000ea0  e3a00000          MOV      r0,#0
                  |L1.3748|
;;;1089       }
;;;1090       if(pUartInterface->initFunc(baudRate) == FALSE)
;;;1091       {
;;;1092           sysprintf("QModemLibInit ERROR (initFunc false)!!\n");
;;;1093           return FALSE;
;;;1094       }
;;;1095       if(pUartInterface->setPowerFunc(TRUE) == FALSE)
;;;1096       {
;;;1097           sysprintf("QModemLibInit ERROR (setPowerFunc false)!!\n");
;;;1098           return FALSE;
;;;1099       }
;;;1100       #if(ENABLE_MODEM_FLOW_CONTROL)
;;;1101       if(pUartInterface->ioctlFunc(UART_IOC_ENABLEHWFLOWCONTROL, 0, 0))
;;;1102       {
;;;1103           sysprintf("QModemLibInit ERROR (ioctlFunc UART_IOC_ENABLEHWFLOWCONTROL false)!!\n");
;;;1104           return FALSE;
;;;1105       }
;;;1106       #endif
;;;1107       //QModemTotalStop();
;;;1108       return TRUE;
;;;1109   }
000ea4  e8bd8010          POP      {r4,pc}
                  |L1.3752|
000ea8  0d0a2020          DCB      "\r\n   ======= [%s] SUCCESS!!!  =======\r\n ",0
000eac  203d3d3d
000eb0  3d3d3d3d
000eb4  205b2573
000eb8  5d205355
000ebc  43434553
000ec0  53212121
000ec4  20203d3d
000ec8  3d3d3d3d
000ecc  3d0d0a20
000ed0  00      
000ed1  00                DCB      0
000ed2  00                DCB      0
000ed3  00                DCB      0
                  |L1.3796|
000ed4  0d0a2020          DCB      "\r\n   ======= [%s] Break!!!  =======\r\n ",0
000ed8  203d3d3d
000edc  3d3d3d3d
000ee0  205b2573
000ee4  5d204272
000ee8  65616b21
000eec  21212020
000ef0  3d3d3d3d
000ef4  3d3d3d0d
000ef8  0a2000  
000efb  00                DCB      0
                  |L1.3836|
000efc  0d0a203d          DCB      "\r\n === [%s] pModemStageItemTmp == NULL!!!  ====\r\n ",0
000f00  3d3d205b
000f04  25735d20
000f08  704d6f64
000f0c  656d5374
000f10  61676549
000f14  74656d54
000f18  6d70203d
000f1c  3d204e55
000f20  4c4c2121
000f24  2120203d
000f28  3d3d3d0d
000f2c  0a2000  
000f2f  00                DCB      0
                  |L1.3888|
                          DCD      nullModemCmdRegAction
                  |L1.3892|
                          DCD      ||.constdata||+0x60
                  |L1.3896|
000f38  0d0a2020          DCB      "\r\n   ======= [%s] Break _2!!!  =======\r\n ",0
000f3c  203d3d3d
000f40  3d3d3d3d
000f44  205b2573
000f48  5d204272
000f4c  65616b20
000f50  5f322121
000f54  2120203d
000f58  3d3d3d3d
000f5c  3d3d0d0a
000f60  2000    
000f62  00                DCB      0
000f63  00                DCB      0
                  |L1.3940|
000f64  514d6f64          DCB      "QModemLibInit!!\n",0
000f68  656d4c69
000f6c  62496e69
000f70  7421210a
000f74  00      
000f75  00                DCB      0
000f76  00                DCB      0
000f77  00                DCB      0
                  |L1.3960|
000f78  514d6f64          DCB      "QModemLibInit ERROR (pUartInterface == NULL)!!\n",0
000f7c  656d4c69
000f80  62496e69
000f84  74204552
000f88  524f5220
000f8c  28705561
000f90  7274496e
000f94  74657266
000f98  61636520
000f9c  3d3d204e
000fa0  554c4c29
000fa4  21210a00
                  |L1.4008|
000fa8  e51f0cd8          LDR      r0,|L1.728|
000fac  e5900000          LDR      r0,[r0,#0]            ;1090  ; pUartInterface
000fb0  e5901000          LDR      r1,[r0,#0]            ;1090
000fb4  e1a00004          MOV      r0,r4                 ;1090
000fb8  e12fff31          BLX      r1                    ;1090
000fbc  e3500000          CMP      r0,#0                 ;1090
000fc0  1a000003          BNE      |L1.4052|
000fc4  e28f0fa3          ADR      r0,|L1.4696|
000fc8  ebfffffe          BL       sysprintf
000fcc  e3a00000          MOV      r0,#0                 ;1093
000fd0  eaffffb3          B        |L1.3748|
                  |L1.4052|
000fd4  e51f0d04          LDR      r0,|L1.728|
000fd8  e5900000          LDR      r0,[r0,#0]            ;1095  ; pUartInterface
000fdc  e5901010          LDR      r1,[r0,#0x10]         ;1095
000fe0  e3a00001          MOV      r0,#1                 ;1095
000fe4  e12fff31          BLX      r1                    ;1095
000fe8  e3500000          CMP      r0,#0                 ;1095
000fec  1a000003          BNE      |L1.4096|
000ff0  e28f0fa2          ADR      r0,|L1.4736|
000ff4  ebfffffe          BL       sysprintf
000ff8  e3a00000          MOV      r0,#0                 ;1098
000ffc  eaffffa8          B        |L1.3748|
                  |L1.4096|
001000  e3a00001          MOV      r0,#1                 ;1108
001004  eaffffa6          B        |L1.3748|
;;;1110   
                          ENDP

                  QModemDialupStart PROC
;;;1111   void QModemDialupStart(void)
001008  e92d4010          PUSH     {r4,lr}
;;;1112   {
;;;1113       sysprintf(" --> QModemDialupStart!!\n\r");
00100c  e28f0fa6          ADR      r0,|L1.4780|
001010  ebfffffe          BL       sysprintf
;;;1114       if(pUartInterface == NULL)
001014  e51f0d44          LDR      r0,|L1.728|
001018  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
00101c  e3500000          CMP      r0,#0
001020  1a000000          BNE      |L1.4136|
                  |L1.4132|
;;;1115           return ;
;;;1116       /*
;;;1117       if(BatteryCheckPowerDownCondition())
;;;1118       {
;;;1119           sysprintf(" --> QModemDialupStart!! (BatteryCheckPowerDownCondition)\n\r");
;;;1120           QModemTotalStop();
;;;1121           return ;
;;;1122       }
;;;1123       */
;;;1124       pUartInterface->setPowerFunc(TRUE);
;;;1125       resetRetryTimes(dialupStageItem);
;;;1126       
;;;1127       //firstTimeCmd = TRUE;
;;;1128       
;;;1129       if(firstTimeCmd)
;;;1130       {
;;;1131           currentDialupStageIndex = DIALUP_FLOW_CTL_ON_STAGE_INDEX;//DIALUP_ECHO_OFF_STAGE_INDEX;
;;;1132           firstTimeCmd = FALSE;
;;;1133       }
;;;1134       else
;;;1135       {
;;;1136           currentDialupStageIndex = DIALUP_ECHO_OFF_STAGE_INDEX;
;;;1137       }
;;;1138   
;;;1139       cmdActionBreakFlag = FALSE;
;;;1140       
;;;1141       firstTimeFtpCmd = TRUE;
;;;1142       
;;;1143   }
001024  e8bd8010          POP      {r4,pc}
                  |L1.4136|
001028  e51f0d58          LDR      r0,|L1.728|
00102c  e5900000          LDR      r0,[r0,#0]            ;1124  ; pUartInterface
001030  e5901010          LDR      r1,[r0,#0x10]         ;1124
001034  e3a00001          MOV      r0,#1                 ;1124
001038  e12fff31          BLX      r1                    ;1124
00103c  e59f0284          LDR      r0,|L1.4808|
001040  ebfffffe          BL       resetRetryTimes
001044  e59f0280          LDR      r0,|L1.4812|
001048  e5d00000          LDRB     r0,[r0,#0]            ;1129  ; firstTimeCmd
00104c  e3500000          CMP      r0,#0                 ;1129
001050  0a000006          BEQ      |L1.4208|
001054  e3a00001          MOV      r0,#1                 ;1131
001058  e59f1270          LDR      r1,|L1.4816|
00105c  e5c10000          STRB     r0,[r1,#0]            ;1131  ; currentDialupStageIndex
001060  e3a00000          MOV      r0,#0                 ;1132
001064  e59f1260          LDR      r1,|L1.4812|
001068  e5c10000          STRB     r0,[r1,#0]            ;1132  ; firstTimeCmd
00106c  ea000002          B        |L1.4220|
                  |L1.4208|
001070  e3a00002          MOV      r0,#2                 ;1136
001074  e59f1254          LDR      r1,|L1.4816|
001078  e5c10000          STRB     r0,[r1,#0]            ;1136  ; currentDialupStageIndex
                  |L1.4220|
00107c  e3a00000          MOV      r0,#0                 ;1139
001080  e51f19fc          LDR      r1,|L1.1676|
001084  e5c10000          STRB     r0,[r1,#0]            ;1139  ; cmdActionBreakFlag
001088  e3a00001          MOV      r0,#1                 ;1141
00108c  e59f1240          LDR      r1,|L1.4820|
001090  e5c10000          STRB     r0,[r1,#0]            ;1141  ; firstTimeFtpCmd
001094  e1a00000          MOV      r0,r0
001098  eaffffe1          B        |L1.4132|
;;;1144   void QModemFtpClientStart(void)
                          ENDP

                  QModemFtpClientStart PROC
00109c  e92d4010          PUSH     {r4,lr}
;;;1145   {
;;;1146       /*
;;;1147       if(BatteryCheckPowerDownCondition())
;;;1148       {
;;;1149           sysprintf(" --> QModemDialupStart!! (BatteryCheckPowerDownCondition)\n\r");
;;;1150           QModemTotalStop();
;;;1151           return ;
;;;1152       }
;;;1153       */
;;;1154       resetRetryTimes(ftpClientStageItem);
0010a0  e59f0230          LDR      r0,|L1.4824|
0010a4  ebfffffe          BL       resetRetryTimes
;;;1155       cmdActionBreakFlag = FALSE;
0010a8  e3a00000          MOV      r0,#0
0010ac  e51f1a28          LDR      r1,|L1.1676|
0010b0  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
;;;1156       
;;;1157       if(firstTimeFtpCmd)
0010b4  e59f0218          LDR      r0,|L1.4820|
0010b8  e5d00000          LDRB     r0,[r0,#0]  ; firstTimeFtpCmd
0010bc  e3500000          CMP      r0,#0
0010c0  0a000008          BEQ      |L1.4328|
;;;1158       {
;;;1159           currentFtpStageIndex = FTP_SET_PDP_STAGE_INDEX;
0010c4  e3a00011          MOV      r0,#0x11
0010c8  e59f120c          LDR      r1,|L1.4828|
0010cc  e5c10000          STRB     r0,[r1,#0]  ; currentFtpStageIndex
;;;1160           firstTimeFtpCmd = FALSE;
0010d0  e3a00000          MOV      r0,#0
0010d4  e59f11f8          LDR      r1,|L1.4820|
0010d8  e5c10000          STRB     r0,[r1,#0]  ; firstTimeFtpCmd
;;;1161           sysprintf("\r\n [INFORMATION] --> QModemFtpClientStart [FTP_SET_PDP_STAGE_INDEX]!!\n\r");
0010dc  e59f01fc          LDR      r0,|L1.4832|
0010e0  ebfffffe          BL       sysprintf
0010e4  ea000004          B        |L1.4348|
                  |L1.4328|
;;;1162       }
;;;1163       else
;;;1164       {
;;;1165           currentFtpStageIndex = FTP_CONNECTING_STAGE_INDEX;
0010e8  e3a00016          MOV      r0,#0x16
0010ec  e59f11e8          LDR      r1,|L1.4828|
0010f0  e5c10000          STRB     r0,[r1,#0]  ; currentFtpStageIndex
;;;1166           sysprintf("\r\n [INFORMATION] --> QModemFtpClientStart [FTP_CONNECTING_STAGE_INDEX]!!\n\r");
0010f4  e59f01e8          LDR      r0,|L1.4836|
0010f8  ebfffffe          BL       sysprintf
                  |L1.4348|
;;;1167       }
;;;1168   }
0010fc  e8bd8010          POP      {r4,pc}
;;;1169   void QModemTotalStop(void)
                          ENDP

                  QModemTotalStop PROC
001100  e92d4010          PUSH     {r4,lr}
;;;1170   {
;;;1171       sysprintf(" --> QModemTotalStop!!\n\r");
001104  e28f0f77          ADR      r0,|L1.4840|
001108  ebfffffe          BL       sysprintf
;;;1172       if(pUartInterface == NULL)
00110c  e51f0e3c          LDR      r0,|L1.728|
001110  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
001114  e3500000          CMP      r0,#0
001118  1a000000          BNE      |L1.4384|
                  |L1.4380|
;;;1173           return ;
;;;1174       pUartInterface->setPowerFunc(FALSE);
;;;1175       resetRetryTimes(dialupStageItem);
;;;1176       resetRetryTimes(ftpClientStageItem);
;;;1177       
;;;1178       currentDialupStageIndex = DIALUP_IDLE_STAGE_INDEX;
;;;1179       currentFtpStageIndex = FTP_IDLE_STAGE_INDEX; 
;;;1180       cmdActionBreakFlag = TRUE;    		
;;;1181       sysprintf(" --> QModemTotalStop OK!!\n\r");
;;;1182   }
00111c  e8bd8010          POP      {r4,pc}
                  |L1.4384|
001120  e51f0e50          LDR      r0,|L1.728|
001124  e5900000          LDR      r0,[r0,#0]            ;1174  ; pUartInterface
001128  e5901010          LDR      r1,[r0,#0x10]         ;1174
00112c  e3a00000          MOV      r0,#0                 ;1174
001130  e12fff31          BLX      r1                    ;1174
001134  e59f018c          LDR      r0,|L1.4808|
001138  ebfffffe          BL       resetRetryTimes
00113c  e59f0194          LDR      r0,|L1.4824|
001140  ebfffffe          BL       resetRetryTimes
001144  e3a00000          MOV      r0,#0                 ;1178
001148  e59f1180          LDR      r1,|L1.4816|
00114c  e5c10000          STRB     r0,[r1,#0]            ;1178  ; currentDialupStageIndex
001150  e3a00010          MOV      r0,#0x10              ;1179
001154  e59f1180          LDR      r1,|L1.4828|
001158  e5c10000          STRB     r0,[r1,#0]            ;1179  ; currentFtpStageIndex
00115c  e3a00001          MOV      r0,#1                 ;1180
001160  e51f1adc          LDR      r1,|L1.1676|
001164  e5c10000          STRB     r0,[r1,#0]            ;1180  ; cmdActionBreakFlag
001168  e28f0f65          ADR      r0,|L1.4868|
00116c  ebfffffe          BL       sysprintf
001170  e1a00000          MOV      r0,r0
001174  eaffffe8          B        |L1.4380|
;;;1183   
                          ENDP

                  QModemDialupProcess PROC
;;;1184   BOOL QModemDialupProcess(void)
001178  e92d4038          PUSH     {r3-r5,lr}
;;;1185   {
;;;1186       int waitCounter = 0;
00117c  e3a05000          MOV      r5,#0
;;;1187       sysprintf(" --> QModemDialupProcess!!\n\r");
001180  e28f0f66          ADR      r0,|L1.4896|
001184  ebfffffe          BL       sysprintf
;;;1188           
;;;1189       //LedSetColor(modemColorAllGreen, 0x04, TRUE);
;;;1190       
;;;1191               //LedSetAliveStatusLightFlush(40,8);
;;;1192               //LedSetAliveStatusLightFlush(0xff,8);
;;;1193               //vTaskDelay(1000/portTICK_RATE_MS);
;;;1194               //LedSetColor(modemColorAllGreen, 0x04, TRUE);
;;;1195       
;;;1196               LedSetStatusLightFlush(50,10);  // solve LED board bug
001188  e3a0100a          MOV      r1,#0xa
00118c  e3a00032          MOV      r0,#0x32
001190  ebfffffe          BL       LedSetStatusLightFlush
;;;1197       LedSetColor(modemColorAllOff, 0x04, TRUE);
001194  e3a02001          MOV      r2,#1
001198  e3a01004          MOV      r1,#4
00119c  e59f019c          LDR      r0,|L1.4928|
0011a0  ebfffffe          BL       LedSetColor
;;;1198       //vTaskDelay(100/portTICK_RATE_MS);
;;;1199       LedSetBayLightFlush(0xff,8);
0011a4  e3a01008          MOV      r1,#8
0011a8  e3a000ff          MOV      r0,#0xff
0011ac  ebfffffe          BL       LedSetBayLightFlush
;;;1200       vTaskDelay(100/portTICK_RATE_MS);
0011b0  e3a0000a          MOV      r0,#0xa
0011b4  ebfffffe          BL       vTaskDelay
;;;1201       LedSetColor(modemColorAllGreen, 0x04, TRUE);    
0011b8  e3a02001          MOV      r2,#1
0011bc  e3a01004          MOV      r1,#4
0011c0  e59f017c          LDR      r0,|L1.4932|
0011c4  ebfffffe          BL       LedSetColor
;;;1202       LedSetAliveStatusLightFlush(0xff,8);
0011c8  e3a01008          MOV      r1,#8
0011cc  e3a000ff          MOV      r0,#0xff
0011d0  ebfffffe          BL       LedSetAliveStatusLightFlush
;;;1203       vTaskDelay(2000/portTICK_RATE_MS);
0011d4  e3a000c8          MOV      r0,#0xc8
0011d8  ebfffffe          BL       vTaskDelay
;;;1204      
;;;1205       LedSetColor(modemColorAllRed, 0x08, TRUE);
0011dc  e3a02001          MOV      r2,#1
0011e0  e3a01008          MOV      r1,#8
0011e4  e59f015c          LDR      r0,|L1.4936|
0011e8  ebfffffe          BL       LedSetColor
;;;1206       vTaskDelay(2000/portTICK_RATE_MS);
0011ec  e3a000c8          MOV      r0,#0xc8
0011f0  ebfffffe          BL       vTaskDelay
;;;1207       LedSetColor(modemColorAllOff, 0x08, TRUE);
0011f4  e3a02001          MOV      r2,#1
0011f8  e3a01008          MOV      r1,#8
0011fc  e59f013c          LDR      r0,|L1.4928|
001200  ebfffffe          BL       LedSetColor
;;;1208       
;;;1209   
;;;1210       LedSetAliveStatusLightFlush(40,8);
001204  e3a01008          MOV      r1,#8
001208  e3a00028          MOV      r0,#0x28
00120c  ebfffffe          BL       LedSetAliveStatusLightFlush
;;;1211           LedSetStatusLightFlush(0,10);  // solve LED board bug
001210  e3a0100a          MOV      r1,#0xa
001214  e3a00000          MOV      r0,#0
001218  ebfffffe          BL       LedSetStatusLightFlush
;;;1212       
;;;1213       //terninalPrintf("Stop.\r\n");
;;;1214       //LedSendFactoryTest();
;;;1215       //while(1);
;;;1216       /*
;;;1217           if(flag)
;;;1218           {
;;;1219               pUartInterface->ioctlFunc(UART_IOC_SETRTSSIGNAL, UART_RTS_HIGH, 0); // wale
;;;1220               
;;;1221           }
;;;1222           else
;;;1223           {
;;;1224               pUartInterface->ioctlFunc(UART_IOC_SETRTSSIGNAL, UART_RTS_LOW, 0); // sleep
;;;1225           }
;;;1226       */
;;;1227       
;;;1228       while(1)
00121c  ea000063          B        |L1.5040|
                  |L1.4640|
;;;1229       {
;;;1230           terninalPrintf(".");
001220  e28f0f49          ADR      r0,|L1.4940|
001224  ebfffffe          BL       terninalPrintf
;;;1231           /*
;;;1232           if(changeLEDColorFlag)
;;;1233           {
;;;1234               changeLEDColorFlag = FALSE;
;;;1235               //LedSetColor(modemColorAllRed, 0x04, TRUE);
;;;1236           }
;;;1237           else
;;;1238           {
;;;1239               changeLEDColorFlag = TRUE;
;;;1240               //LedSetColor(modemColorAllGreen, 0x08, TRUE);
;;;1241           }
;;;1242           */
;;;1243           CmdReturnValue reval= cmdProcess(" = DIAL_UP PROCESS = ", &currentDialupStageIndex, DIALUP_CONNECTED_STAGE_INDEX, DIALUP_IDLE_STAGE_INDEX, dialupStageItem);
001228  e59f0098          LDR      r0,|L1.4808|
00122c  e3a03000          MOV      r3,#0
001230  e3a0200f          MOV      r2,#0xf
001234  e59f1094          LDR      r1,|L1.4816|
001238  e58d0000          STR      r0,[sp,#0]
00123c  e28f0f43          ADR      r0,|L1.4944|
001240  ebfffffe          BL       cmdProcess
001244  e1a04000          MOV      r4,r0
;;;1244           if(reval == CMD_RETURN_OK)
001248  e3540001          CMP      r4,#1
00124c  1a000045          BNE      |L1.4968|
;;;1245           {
;;;1246               return TRUE;
001250  e3a00001          MOV      r0,#1
                  |L1.4692|
;;;1247           }
;;;1248           else if(reval == CMD_RETURN_PROCESSING)
;;;1249           {
;;;1250               waitCounter++;
;;;1251               if(waitCounter > 30)
;;;1252                   return FALSE;
;;;1253           }
;;;1254           else if(reval == CMD_RETURN_BREAK)
;;;1255           {
;;;1256               return FALSE;
;;;1257           }
;;;1258           else if(reval == CMD_RETURN_ERROR)
;;;1259           {
;;;1260               return FALSE;
;;;1261           }
;;;1262           else
;;;1263           {
;;;1264               return FALSE;
;;;1265           }
;;;1266       }   
;;;1267   }
001254  e8bd8038          POP      {r3-r5,pc}
                  |L1.4696|
001258  514d6f64          DCB      "QModemLibInit ERROR (initFunc false)!!\n",0
00125c  656d4c69
001260  62496e69
001264  74204552
001268  524f5220
00126c  28696e69
001270  7446756e
001274  63206661
001278  6c736529
00127c  21210a00
                  |L1.4736|
001280  514d6f64          DCB      "QModemLibInit ERROR (setPowerFunc false)!!\n",0
001284  656d4c69
001288  62496e69
00128c  74204552
001290  524f5220
001294  28736574
001298  506f7765
00129c  7246756e
0012a0  63206661
0012a4  6c736529
0012a8  21210a00
                  |L1.4780|
0012ac  202d2d3e          DCB      " --> QModemDialupStart!!\n\r",0
0012b0  20514d6f
0012b4  64656d44
0012b8  69616c75
0012bc  70537461
0012c0  72742121
0012c4  0a0d00  
0012c7  00                DCB      0
                  |L1.4808|
                          DCD      dialupStageItem
                  |L1.4812|
                          DCD      firstTimeCmd
                  |L1.4816|
                          DCD      currentDialupStageIndex
                  |L1.4820|
                          DCD      firstTimeFtpCmd
                  |L1.4824|
                          DCD      ftpClientStageItem
                  |L1.4828|
                          DCD      currentFtpStageIndex
                  |L1.4832|
                          DCD      ||.constdata||+0xb8
                  |L1.4836|
                          DCD      ||.constdata||+0x100
                  |L1.4840|
0012e8  202d2d3e          DCB      " --> QModemTotalStop!!\n\r",0
0012ec  20514d6f
0012f0  64656d54
0012f4  6f74616c
0012f8  53746f70
0012fc  21210a0d
001300  00      
001301  00                DCB      0
001302  00                DCB      0
001303  00                DCB      0
                  |L1.4868|
001304  202d2d3e          DCB      " --> QModemTotalStop OK!!\n\r",0
001308  20514d6f
00130c  64656d54
001310  6f74616c
001314  53746f70
001318  204f4b21
00131c  210a0d00
                  |L1.4896|
001320  202d2d3e          DCB      " --> QModemDialupProcess!!\n\r",0
001324  20514d6f
001328  64656d44
00132c  69616c75
001330  7050726f
001334  63657373
001338  21210a0d
00133c  00      
00133d  00                DCB      0
00133e  00                DCB      0
00133f  00                DCB      0
                  |L1.4928|
                          DCD      modemColorAllOff
                  |L1.4932|
                          DCD      modemColorAllGreen
                  |L1.4936|
                          DCD      modemColorAllRed
                  |L1.4940|
00134c  2e00              DCB      ".",0
00134e  00                DCB      0
00134f  00                DCB      0
                  |L1.4944|
001350  203d2044          DCB      " = DIAL_UP PROCESS = ",0
001354  49414c5f
001358  55502050
00135c  524f4345
001360  5353203d
001364  2000    
001366  00                DCB      0
001367  00                DCB      0
                  |L1.4968|
001368  e3540002          CMP      r4,#2                 ;1248
00136c  1a000004          BNE      |L1.4996|
001370  e2855001          ADD      r5,r5,#1              ;1250
001374  e355001e          CMP      r5,#0x1e              ;1251
001378  da00000b          BLE      |L1.5036|
00137c  e3a00000          MOV      r0,#0                 ;1252
001380  eaffffb3          B        |L1.4692|
                  |L1.4996|
001384  e3540003          CMP      r4,#3                 ;1254
001388  1a000001          BNE      |L1.5012|
00138c  e3a00000          MOV      r0,#0                 ;1256
001390  eaffffaf          B        |L1.4692|
                  |L1.5012|
001394  e3540004          CMP      r4,#4                 ;1258
001398  1a000001          BNE      |L1.5028|
00139c  e3a00000          MOV      r0,#0                 ;1260
0013a0  eaffffab          B        |L1.4692|
                  |L1.5028|
0013a4  e3a00000          MOV      r0,#0                 ;1264
0013a8  eaffffa9          B        |L1.4692|
                  |L1.5036|
0013ac  e1a00000          MOV      r0,r0                 ;1266
                  |L1.5040|
0013b0  eaffff9a          B        |L1.4640|
;;;1268   
                          ENDP

                  QModemFtpClientProcess PROC
;;;1269   BOOL QModemFtpClientProcess(void)
0013b4  e92d4038          PUSH     {r3-r5,lr}
;;;1270   {
;;;1271       
;;;1272       sysprintf(" --> QModemFtpClientProcess!!\n\r");
0013b8  e28f0fb1          ADR      r0,|L1.5764|
0013bc  ebfffffe          BL       sysprintf
;;;1273       while(1)
0013c0  ea000018          B        |L1.5160|
                  |L1.5060|
;;;1274       {
;;;1275           CmdReturnValue reval= cmdProcess(" ~ FTP_CONNECT PROCESS ~ ", &currentFtpStageIndex, FTP_CONNECTED_STAGE_INDEX, FTP_IDLE_STAGE_INDEX, ftpClientStageItem);
0013c4  e51f00f4          LDR      r0,|L1.4824|
0013c8  e3a03010          MOV      r3,#0x10
0013cc  e3a0201f          MOV      r2,#0x1f
0013d0  e51f10fc          LDR      r1,|L1.4828|
0013d4  e58d0000          STR      r0,[sp,#0]
0013d8  e28f0fb1          ADR      r0,|L1.5796|
0013dc  ebfffffe          BL       cmdProcess
0013e0  e1a04000          MOV      r4,r0
;;;1276           if(reval == CMD_RETURN_OK)
0013e4  e3540001          CMP      r4,#1
0013e8  1a000001          BNE      |L1.5108|
;;;1277           {
;;;1278               return TRUE;
0013ec  e3a00001          MOV      r0,#1
                  |L1.5104|
;;;1279           }
;;;1280           else if(reval == CMD_RETURN_PROCESSING)
;;;1281           {
;;;1282           }
;;;1283           else if(reval == CMD_RETURN_BREAK)
;;;1284           {
;;;1285               return FALSE;
;;;1286           }
;;;1287           else if(reval == CMD_RETURN_ERROR)
;;;1288           {
;;;1289               return FALSE;
;;;1290           }
;;;1291           else
;;;1292           {
;;;1293               return FALSE;
;;;1294           }
;;;1295       } 
;;;1296   }
0013f0  e8bd8038          POP      {r3-r5,pc}
                  |L1.5108|
0013f4  e3540002          CMP      r4,#2                 ;1280
0013f8  0a000009          BEQ      |L1.5156|
0013fc  e3540003          CMP      r4,#3                 ;1283
001400  1a000001          BNE      |L1.5132|
001404  e3a00000          MOV      r0,#0                 ;1285
001408  eafffff8          B        |L1.5104|
                  |L1.5132|
00140c  e3540004          CMP      r4,#4                 ;1287
001410  1a000001          BNE      |L1.5148|
001414  e3a00000          MOV      r0,#0                 ;1289
001418  eafffff4          B        |L1.5104|
                  |L1.5148|
00141c  e3a00000          MOV      r0,#0                 ;1293
001420  eafffff2          B        |L1.5104|
                  |L1.5156|
001424  e1a00000          MOV      r0,r0                 ;1295
                  |L1.5160|
001428  eaffffe5          B        |L1.5060|
;;;1297   ModemStageIndex QModemDialupStageIndex(void)
                          ENDP

                  QModemDialupStageIndex PROC
00142c  e51f0164          LDR      r0,|L1.4816|
;;;1298   {
;;;1299       return currentDialupStageIndex;
001430  e5d00000          LDRB     r0,[r0,#0]  ; currentDialupStageIndex
;;;1300   }
001434  e12fff1e          BX       lr
;;;1301   ModemStageIndex QModemFtpStageIndex(void)
                          ENDP

                  QModemFtpStageIndex PROC
001438  e51f0164          LDR      r0,|L1.4828|
;;;1302   {
;;;1303       return currentFtpStageIndex;
00143c  e5d00000          LDRB     r0,[r0,#0]  ; currentFtpStageIndex
;;;1304   }
001440  e12fff1e          BX       lr
;;;1305   
                          ENDP

                  FtpClientSendFile PROC
;;;1306   BOOL FtpClientSendFile(BOOL needChdirFlag, char* preDirName, char* dirName, char* fileName, uint8_t* buff, int len)
001444  e92d4fff          PUSH     {r0-r11,lr}
;;;1307   {
001448  e24ddf65          SUB      sp,sp,#0x194
00144c  e1a0b000          MOV      r11,r0
001450  e59d41cc          LDR      r4,[sp,#0x1cc]
;;;1308       BOOL needMkdirFlag = FALSE;
001454  e3a00000          MOV      r0,#0
001458  e58d0190          STR      r0,[sp,#0x190]
;;;1309       //BOOL needChdirFlag = TRUE;
;;;1310       uint8_t cmdFtpSendInit[256];
;;;1311       ModemReturnValue modemReval;
;;;1312       if(len == 0)
00145c  e3540000          CMP      r4,#0
001460  1a000005          BNE      |L1.5244|
;;;1313       {
;;;1314           sysprintf(" == FtpClientSendFile return false len = %d\r\n", len);
001464  e1a01004          MOV      r1,r4
001468  e28f0e25          ADR      r0,|L1.5824|
00146c  ebfffffe          BL       sysprintf
;;;1315           return FALSE;
001470  e3a00000          MOV      r0,#0
                  |L1.5236|
001474  e28ddf69          ADD      sp,sp,#0x1a4
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319           sysprintf(" == FtpClientSendFile [%s][%s][%s] len = %d (needChdirFlag = %d)\r\n", preDirName, dirName, fileName, len, needChdirFlag);
;;;1320       }
;;;1321       #if(0)
;;;1322       sprintf((char*)cmdFtpSendInit, "AT+QFTPPWD\r\n");  
;;;1323       ftpGetDirCmdItem.cmd = cmdFtpSendInit;
;;;1324       modemReval = actionCmdPure(&ftpGetDirCmdItem, PARSER_TYPE_NORMAL);
;;;1325       if(modemReval == MODEM_RETURN_ERROR)
;;;1326       {
;;;1327           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(1)-- cmdFtpSendInit[%s]\r\n", ftpGetDirCmdItem.cmd);
;;;1328       }
;;;1329       else if(modemReval == MODEM_RETURN_BREAK)
;;;1330       {
;;;1331   
;;;1332          
;;;1333       }
;;;1334       else
;;;1335       {
;;;1336           int destLen;
;;;1337           //sysprintf(" == Web Get Current dir OK [%s]\r\n", ATCmdDataTempBuffer(NULL));                         
;;;1338           char* str = parserString((char*)ATCmdDataTempBuffer(NULL), "0,/", "\r\n", &destLen);                        
;;;1339           if(str != NULL)
;;;1340           {
;;;1341               str[destLen] = 0x0;
;;;1342                
;;;1343               sysprintf(" == compare [%s:%d] [%s:%d]\r\n", str, strlen(str), dirName, strlen(dirName));  
;;;1344               if(strcmp(str, dirName) == 0)
;;;1345               {
;;;1346                   needChdirFlag = FALSE;
;;;1347                   sysprintf("  == Web Get Current Real dir OK [%s], ignore need change directory\r\n", str);   
;;;1348               }    
;;;1349               else
;;;1350               {
;;;1351                   sysprintf("  == Web Get Current Real dir OK [%s], need change directory\r\n", str);  
;;;1352               }                
;;;1353           }
;;;1354       }
;;;1355       #else
;;;1356       //needChdirFlag = TRUE;
;;;1357       #endif
;;;1358       
;;;1359       if(needChdirFlag)
;;;1360       {
;;;1361           sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
;;;1362           //sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1363           ftpChDirCmdItem.cmd = cmdFtpSendInit;
;;;1364           modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
;;;1365           if(modemReval == MODEM_RETURN_ERROR)
;;;1366           {
;;;1367               sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(2)-- cmdFtpSendInit[%s]\r\n", ftpChDirCmdItem.cmd);
;;;1368               needMkdirFlag = TRUE;
;;;1369           }
;;;1370           else if(modemReval == MODEM_RETURN_BREAK)
;;;1371           {
;;;1372   
;;;1373              return FALSE;
;;;1374           }
;;;1375           
;;;1376           if(needMkdirFlag)
;;;1377           {
;;;1378               sysprintf("\r\n == FtpClientSendFile Create Directory [%s][%s][%s]\r\n", preDirName, dirName, fileName);
;;;1379               
;;;1380               sprintf((char*)cmdFtpSendInit, "AT+QFTPMKDIR=\"/%s\"\r\n", preDirName);  
;;;1381               ftpMkDirCmdItem.cmd = cmdFtpSendInit;
;;;1382               ModemReturnValue modemReval = actionCmdPure(&ftpMkDirCmdItem, PARSER_TYPE_NORMAL);
;;;1383               if(modemReval == MODEM_RETURN_ERROR)
;;;1384               {
;;;1385                   sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(3)-- cmdFtpSendInit[%s]\r\n", ftpMkDirCmdItem.cmd);
;;;1386                   return FALSE;
;;;1387   
;;;1388               }
;;;1389               else if(modemReval == MODEM_RETURN_BREAK)
;;;1390               {
;;;1391   
;;;1392                   return FALSE;
;;;1393               }
;;;1394               else
;;;1395               {
;;;1396                   sprintf((char*)cmdFtpSendInit, "AT+QFTPMKDIR=\"/%s\"\r\n", dirName);  
;;;1397                   ftpMkDirCmdItem.cmd = cmdFtpSendInit;
;;;1398                   ModemReturnValue modemReval = actionCmdPure(&ftpMkDirCmdItem, PARSER_TYPE_NORMAL);
;;;1399                   if(modemReval == MODEM_RETURN_ERROR)
;;;1400                   {
;;;1401                       sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(4)-- cmdFtpSendInit[%s]\r\n", ftpMkDirCmdItem.cmd);
;;;1402                       return FALSE;
;;;1403   
;;;1404                   }
;;;1405                   else if(modemReval == MODEM_RETURN_BREAK)
;;;1406                   {
;;;1407   
;;;1408                       return FALSE;
;;;1409                   }
;;;1410                   else
;;;1411                   {
;;;1412                       sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
;;;1413                       //sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1414                       ftpChDirCmdItem.cmd = cmdFtpSendInit;
;;;1415                       ModemReturnValue modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
;;;1416                       if(modemReval == MODEM_RETURN_ERROR)
;;;1417                       {
;;;1418                           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(5)-- cmdFtpSendInit[%s]\r\n", ftpChDirCmdItem.cmd);
;;;1419                           return FALSE;
;;;1420   
;;;1421                       }
;;;1422                       else if(modemReval == MODEM_RETURN_BREAK)
;;;1423                       {
;;;1424   
;;;1425                           return FALSE;
;;;1426                       }
;;;1427                   }
;;;1428               }
;;;1429           }
;;;1430           else
;;;1431           {
;;;1432               //sysprintf("\r\n == FtpClientSendFile Ignore Create Directory [%s][%s][%s]\r\n", preDirName, dirName, fileName);
;;;1433           }
;;;1434       }
;;;1435               
;;;1436       sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\", \"COM:\",0, %d, 1\r\n", fileName, len); //last data package , auto close ftp socket 
;;;1437       //sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\", \"COM:\",0, %d, 0\r\n", fileName, len);   
;;;1438       //sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\",\"COM:\"\r\n", fileName);       
;;;1439       ftpSendInitCmdItem.cmd = cmdFtpSendInit;
;;;1440       modemReval = actionCmdPure(&ftpSendInitCmdItem, PARSER_TYPE_NORMAL);
;;;1441       if(modemReval == MODEM_RETURN_ERROR)
;;;1442       {
;;;1443           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(6)-- cmdFtpSendInit[%s]\r\n", ftpSendInitCmdItem.cmd);
;;;1444           //QModemAbortDataMode();
;;;1445           return FALSE;
;;;1446       
;;;1447       }
;;;1448       else if(modemReval == MODEM_RETURN_BREAK)
;;;1449       {
;;;1450       
;;;1451           return FALSE;
;;;1452       }
;;;1453       else
;;;1454       {
;;;1455           //sysprintf(" == init Ftp Client init OK\r\n");
;;;1456           int i = 0;
;;;1457           int total = 0;
;;;1458           int leftLen = 0;
;;;1459           int n;
;;;1460           for(i = 0; i< len/FTP_UART_WRITE_SIZE; i++)
;;;1461           {
;;;1462               if(cmdActionBreakFlag)
;;;1463               {
;;;1464                   sysprintf("\r\n !!! FtpClientSendFile MODEM_RETURN_BREAK !!!\n");
;;;1465                   return FALSE;
;;;1466               }
;;;1467               n = QModemWrite(buff + i*FTP_UART_WRITE_SIZE, FTP_UART_WRITE_SIZE);
;;;1468               if(n != FTP_UART_WRITE_SIZE)
;;;1469               {
;;;1470                   sysprintf(" == Ftp Client write error 1\r\n");
;;;1471                   return FALSE;
;;;1472               }
;;;1473               else
;;;1474               {
;;;1475                   total = total + n;
;;;1476                   sysprintf("%08d (%d:%d)\r", total, n, i*FTP_UART_WRITE_SIZE);
;;;1477               }
;;;1478           }
;;;1479           if(cmdActionBreakFlag)
;;;1480           {
;;;1481               sysprintf("\r\n !!! FtpClientSendFile MODEM_RETURN_BREAK_2 !!!\n");
;;;1482               return FALSE;
;;;1483           }
;;;1484           //sysprintf("\r\n== [%d:%d] ==\r\n", len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE, len-(len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE));
;;;1485           leftLen = len-(len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE);
;;;1486           if(leftLen > 0)
;;;1487           {
;;;1488               n = QModemWrite(buff + len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE, leftLen);
;;;1489               if(n != leftLen)
;;;1490               {
;;;1491                   sysprintf(" == Ftp Client write error 2\r\n");
;;;1492                   return 0;
;;;1493               }
;;;1494               else
;;;1495               {
;;;1496                   total = total + n;
;;;1497                   //sysprintf("\r\n%08d _2 (%d:%d)\r", total, n, leftLen);
;;;1498               }
;;;1499           }
;;;1500           //QModemAbortDataMode();
;;;1501           //sysprintf("\r\n == QModemWrite %d/%d\r\n", total, len);
;;;1502           
;;;1503           char rbuff[100];
;;;1504           int retnlen;
;;;1505           int rindex;
;;;1506           int rindexend;
;;;1507           char numStr[10];
;;;1508           int rnum;
;;;1509           //terninalPrintf("FTP send datasize = %d\r\n",len);  
;;;1510           if (len > 0)
;;;1511           {
;;;1512               //modemReval = actionCmdPure(&ftpSendDataCmdItem, PARSER_TYPE_NORMAL);
;;;1513               modemReval = actionCmdPurePro(&ftpSendDataCmdItem, PARSER_TYPE_NORMAL,rbuff,sizeof(rbuff),&retnlen, 100);
;;;1514               if(modemReval == MODEM_RETURN_ERROR)
;;;1515               {
;;;1516                   sysprintf(" == Send Ftp Client Data Error\r\n");
;;;1517                   //QModemAbortDataMode();
;;;1518                   return FALSE;
;;;1519               }
;;;1520               else if(modemReval == MODEM_RETURN_BREAK)
;;;1521               {
;;;1522                   sysprintf(" == Send Ftp Client Data Break\r\n");
;;;1523                   return FALSE;
;;;1524               }
;;;1525               else
;;;1526               {
;;;1527                   /*
;;;1528                   terninalPrintf("rbuff = ");
;;;1529                   for(int m=0;m<retnlen;m++)
;;;1530                       terninalPrintf("%02x ",rbuff[m]);
;;;1531                   terninalPrintf("\r\n");
;;;1532                   */
;;;1533                   for(int i=0;i<retnlen;i++)
;;;1534                   {
;;;1535                       if(rbuff[i] == ',')
;;;1536                       {
;;;1537                           rindex = i;
;;;1538                           for(int j=(rindex+1);j<retnlen;j++)
;;;1539                           {
;;;1540                               if((rbuff[j] > 0x39) || (rbuff[j] < 0x30) || (j == (retnlen-1)))
;;;1541                               {
;;;1542                                   rindexend = j;
;;;1543                                   //terninalPrintf("rindex = %d\r\n",rindex);
;;;1544                                   //terninalPrintf("rindexend = %d\r\n",rindexend);
;;;1545                                   memcpy(numStr,(char*)rbuff + rindex + 1,rindexend - rindex -1);
;;;1546                                   /*
;;;1547                                   terninalPrintf("FTP feedback numStr = ");
;;;1548                                   for(int k=0;k<(rindexend - rindex -1);k++)
;;;1549                                       terninalPrintf("%02x ",numStr[k]);
;;;1550                                   terninalPrintf("\r\n");
;;;1551                                   */
;;;1552                                   rnum = atoi(numStr);
;;;1553                                   //terninalPrintf("FTP feedback datasize = %d\r\n",rnum);
;;;1554                                   //break;
;;;1555                                   if(rnum == len)
;;;1556                                       return TRUE;
;;;1557                                   else
;;;1558                                   {
;;;1559                                       //terninalPrintf("EPM send datasize = %d\r\n",len);
;;;1560                                       //terninalPrintf("FTP feedback datasize = %d  ERROR\r\n",rnum);
;;;1561                                       return FALSE;
;;;1562                                   }
;;;1563                               } 
;;;1564                           }
;;;1565                       }
;;;1566                       else if(i == (retnlen-2))
;;;1567                       {
;;;1568                           //terninalPrintf("FTP feedback cmd ERROR\r\n");
;;;1569                           return FALSE;
;;;1570                       }
;;;1571                   }
;;;1572                   
;;;1573                   
;;;1574                   sysprintf(" == Send Ftp Client Data OK[%s]\r\n", ATCmdDataTempBuffer(NULL));
;;;1575                   return TRUE;
;;;1576               }
;;;1577           }        
;;;1578       }  
;;;1579       return FALSE;
;;;1580   }
001478  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.5244|
00147c  e88d0810          STM      sp,{r4,r11}           ;1319
001480  e59f0268          LDR      r0,|L1.5872|
001484  e28d3f66          ADD      r3,sp,#0x198          ;1319
001488  e893000e          LDM      r3,{r1-r3}            ;1319
00148c  ebfffffe          BL       sysprintf
001490  e35b0000          CMP      r11,#0                ;1359
001494  0a000066          BEQ      |L1.5684|
001498  e28f1f95          ADR      r1,|L1.5876|
00149c  e59d219c          LDR      r2,[sp,#0x19c]        ;1361
0014a0  e28d0090          ADD      r0,sp,#0x90           ;1361
0014a4  ebfffffe          BL       __2sprintf
0014a8  e28d0090          ADD      r0,sp,#0x90           ;1363
0014ac  e59f1254          LDR      r1,|L1.5896|
0014b0  e5810000          STR      r0,[r1,#0]            ;1363  ; ftpChDirCmdItem
0014b4  e3a01001          MOV      r1,#1                 ;1364
0014b8  e59f0248          LDR      r0,|L1.5896|
0014bc  ebfffffe          BL       actionCmdPure
0014c0  e1a05000          MOV      r5,r0                 ;1364
0014c4  e3550002          CMP      r5,#2                 ;1365
0014c8  1a000006          BNE      |L1.5352|
0014cc  e59f0234          LDR      r0,|L1.5896|
0014d0  e5901000          LDR      r1,[r0,#0]            ;1367  ; ftpChDirCmdItem
0014d4  e59f0230          LDR      r0,|L1.5900|
0014d8  ebfffffe          BL       sysprintf
0014dc  e3a00001          MOV      r0,#1                 ;1368
0014e0  e58d0190          STR      r0,[sp,#0x190]        ;1368
0014e4  ea000003          B        |L1.5368|
                  |L1.5352|
0014e8  e3550003          CMP      r5,#3                 ;1370
0014ec  1a000001          BNE      |L1.5368|
0014f0  e3a00000          MOV      r0,#0                 ;1373
0014f4  eaffffde          B        |L1.5236|
                  |L1.5368|
0014f8  e59d0190          LDR      r0,[sp,#0x190]        ;1376
0014fc  e3500000          CMP      r0,#0                 ;1376
001500  0a00004b          BEQ      |L1.5684|
001504  e28f0f81          ADR      r0,|L1.5904|
001508  e28d3f66          ADD      r3,sp,#0x198          ;1378
00150c  e893000e          LDM      r3,{r1-r3}            ;1378
001510  ebfffffe          BL       sysprintf
001514  e28f1f8b          ADR      r1,|L1.5960|
001518  e59d2198          LDR      r2,[sp,#0x198]        ;1380
00151c  e28d0090          ADD      r0,sp,#0x90           ;1380
001520  ebfffffe          BL       __2sprintf
001524  e28d0090          ADD      r0,sp,#0x90           ;1381
001528  e59f1230          LDR      r1,|L1.5984|
00152c  e5810000          STR      r0,[r1,#0]            ;1381  ; ftpMkDirCmdItem
001530  e3a01001          MOV      r1,#1                 ;1382
001534  e59f0224          LDR      r0,|L1.5984|
001538  ebfffffe          BL       actionCmdPure
00153c  e1a06000          MOV      r6,r0                 ;1382
001540  e3560002          CMP      r6,#2                 ;1383
001544  1a000005          BNE      |L1.5472|
001548  e59f0210          LDR      r0,|L1.5984|
00154c  e5901000          LDR      r1,[r0,#0]            ;1385  ; ftpMkDirCmdItem
001550  e59f020c          LDR      r0,|L1.5988|
001554  ebfffffe          BL       sysprintf
001558  e3a00000          MOV      r0,#0                 ;1386
00155c  eaffffc4          B        |L1.5236|
                  |L1.5472|
001560  e3560003          CMP      r6,#3                 ;1389
001564  1a000001          BNE      |L1.5488|
001568  e3a00000          MOV      r0,#0                 ;1392
00156c  eaffffc0          B        |L1.5236|
                  |L1.5488|
001570  e28f1e1d          ADR      r1,|L1.5960|
001574  e59d219c          LDR      r2,[sp,#0x19c]        ;1396
001578  e28d0090          ADD      r0,sp,#0x90           ;1396
00157c  ebfffffe          BL       __2sprintf
001580  e28d0090          ADD      r0,sp,#0x90           ;1397
001584  e59f11d4          LDR      r1,|L1.5984|
001588  e5810000          STR      r0,[r1,#0]            ;1397  ; ftpMkDirCmdItem
00158c  e3a01001          MOV      r1,#1                 ;1398
001590  e59f01c8          LDR      r0,|L1.5984|
001594  ebfffffe          BL       actionCmdPure
001598  e1a07000          MOV      r7,r0                 ;1398
00159c  e3570002          CMP      r7,#2                 ;1399
0015a0  1a000005          BNE      |L1.5564|
0015a4  e59f01b4          LDR      r0,|L1.5984|
0015a8  e5901000          LDR      r1,[r0,#0]            ;1401  ; ftpMkDirCmdItem
0015ac  e59f01b4          LDR      r0,|L1.5992|
0015b0  ebfffffe          BL       sysprintf
0015b4  e3a00000          MOV      r0,#0                 ;1402
0015b8  eaffffad          B        |L1.5236|
                  |L1.5564|
0015bc  e3570003          CMP      r7,#3                 ;1405
0015c0  1a000001          BNE      |L1.5580|
0015c4  e3a00000          MOV      r0,#0                 ;1408
0015c8  eaffffa9          B        |L1.5236|
                  |L1.5580|
0015cc  e28f1e12          ADR      r1,|L1.5876|
0015d0  e59d219c          LDR      r2,[sp,#0x19c]        ;1412
0015d4  e28d0090          ADD      r0,sp,#0x90           ;1412
0015d8  ebfffffe          BL       __2sprintf
0015dc  e28d0090          ADD      r0,sp,#0x90           ;1414
0015e0  e59f1120          LDR      r1,|L1.5896|
0015e4  e5810000          STR      r0,[r1,#0]            ;1414  ; ftpChDirCmdItem
0015e8  e3a01001          MOV      r1,#1                 ;1415
0015ec  e59f0114          LDR      r0,|L1.5896|
0015f0  ebfffffe          BL       actionCmdPure
0015f4  e1a08000          MOV      r8,r0                 ;1415
0015f8  e3580002          CMP      r8,#2                 ;1416
0015fc  1a000005          BNE      |L1.5656|
001600  e59f0100          LDR      r0,|L1.5896|
001604  e5901000          LDR      r1,[r0,#0]            ;1418  ; ftpChDirCmdItem
001608  e59f015c          LDR      r0,|L1.5996|
00160c  ebfffffe          BL       sysprintf
001610  e3a00000          MOV      r0,#0                 ;1419
001614  eaffff96          B        |L1.5236|
                  |L1.5656|
001618  e3580003          CMP      r8,#3                 ;1422
00161c  1a000001          BNE      |L1.5672|
001620  e3a00000          MOV      r0,#0                 ;1425
001624  eaffff92          B        |L1.5236|
                  |L1.5672|
001628  e1a00000          MOV      r0,r0                 ;1427
00162c  e1a00000          MOV      r0,r0                 ;1428
001630  e1a00000          MOV      r0,r0                 ;1429
                  |L1.5684|
001634  e1a03004          MOV      r3,r4                 ;1436
001638  e28f1e13          ADR      r1,|L1.6000|
00163c  e59d21a0          LDR      r2,[sp,#0x1a0]        ;1436
001640  e28d0090          ADD      r0,sp,#0x90           ;1436
001644  ebfffffe          BL       __2sprintf
001648  e28d0090          ADD      r0,sp,#0x90           ;1439
00164c  e59f1140          LDR      r1,|L1.6036|
001650  e5810000          STR      r0,[r1,#0]            ;1439  ; ftpSendInitCmdItem
001654  e3a01001          MOV      r1,#1                 ;1440
001658  e59f0134          LDR      r0,|L1.6036|
00165c  ebfffffe          BL       actionCmdPure
001660  e1a05000          MOV      r5,r0                 ;1440
001664  e3550002          CMP      r5,#2                 ;1441
001668  1a00004b          BNE      |L1.6044|
00166c  e59f0120          LDR      r0,|L1.6036|
001670  e5901000          LDR      r1,[r0,#0]            ;1443  ; ftpSendInitCmdItem
001674  e59f011c          LDR      r0,|L1.6040|
001678  ebfffffe          BL       sysprintf
00167c  e3a00000          MOV      r0,#0                 ;1445
001680  eaffff7b          B        |L1.5236|
                  |L1.5764|
001684  202d2d3e          DCB      " --> QModemFtpClientProcess!!\n\r",0
001688  20514d6f
00168c  64656d46
001690  7470436c
001694  69656e74
001698  50726f63
00169c  65737321
0016a0  210a0d00
                  |L1.5796|
0016a4  207e2046          DCB      " ~ FTP_CONNECT PROCESS ~ ",0
0016a8  54505f43
0016ac  4f4e4e45
0016b0  43542050
0016b4  524f4345
0016b8  5353207e
0016bc  2000    
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  203d3d20          DCB      " == FtpClientSendFile return false len = %d\r\n",0
0016c4  46747043
0016c8  6c69656e
0016cc  7453656e
0016d0  6446696c
0016d4  65207265
0016d8  7475726e
0016dc  2066616c
0016e0  7365206c
0016e4  656e203d
0016e8  2025640d
0016ec  0a00    
0016ee  00                DCB      0
0016ef  00                DCB      0
                  |L1.5872|
                          DCD      ||.constdata||+0x14c
                  |L1.5876|
0016f4  41542b51          DCB      "AT+QFTPCWD=""/%s""\r\n",0
0016f8  46545043
0016fc  57443d22
001700  2f257322
001704  0d0a00  
001707  00                DCB      0
                  |L1.5896|
                          DCD      ftpChDirCmdItem
                  |L1.5900|
                          DCD      ||.constdata||+0x190
                  |L1.5904|
001710  0d0a203d          DCB      "\r\n == FtpClientSendFile Create Directory [%s][%s][%s]"
001714  3d204674
001718  70436c69
00171c  656e7453
001720  656e6446
001724  696c6520
001728  43726561
00172c  74652044
001730  69726563
001734  746f7279
001738  205b2573
00173c  5d5b2573
001740  5d5b2573
001744  5d      
001745  0d0a00            DCB      "\r\n",0
                  |L1.5960|
001748  41542b51          DCB      "AT+QFTPMKDIR=""/%s""\r\n",0
00174c  4654504d
001750  4b444952
001754  3d222f25
001758  73220d0a
00175c  00      
00175d  00                DCB      0
00175e  00                DCB      0
00175f  00                DCB      0
                  |L1.5984|
                          DCD      ftpMkDirCmdItem
                  |L1.5988|
                          DCD      ||.constdata||+0x1d8
                  |L1.5992|
                          DCD      ||.constdata||+0x220
                  |L1.5996|
                          DCD      ||.constdata||+0x268
                  |L1.6000|
001770  41542b51          DCB      "AT+QFTPPUT=""%s"", ""COM:"",0, %d, 1\r\n",0
001774  46545050
001778  55543d22
00177c  2573222c
001780  2022434f
001784  4d3a222c
001788  302c2025
00178c  642c2031
001790  0d0a00  
001793  00                DCB      0
                  |L1.6036|
                          DCD      ftpSendInitCmdItem
                  |L1.6040|
                          DCD      ||.constdata||+0x2b0
                  |L1.6044|
00179c  e3550003          CMP      r5,#3                 ;1448
0017a0  1a000001          BNE      |L1.6060|
0017a4  e3a00000          MOV      r0,#0                 ;1451
0017a8  eaffff31          B        |L1.5236|
                  |L1.6060|
0017ac  e3a09000          MOV      r9,#0                 ;1456
0017b0  e3a00000          MOV      r0,#0                 ;1457
0017b4  e58d008c          STR      r0,[sp,#0x8c]         ;1457
0017b8  e58d0088          STR      r0,[sp,#0x88]         ;1458
0017bc  e1a00000          MOV      r0,r0                 ;1460
0017c0  ea00001b          B        |L1.6196|
                  |L1.6084|
0017c4  e59f0168          LDR      r0,|L1.6452|
0017c8  e5d00000          LDRB     r0,[r0,#0]            ;1462  ; cmdActionBreakFlag
0017cc  e3500000          CMP      r0,#0                 ;1462
0017d0  0a000003          BEQ      |L1.6116|
0017d4  e28f0f57          ADR      r0,|L1.6456|
0017d8  ebfffffe          BL       sysprintf
0017dc  e3a00000          MOV      r0,#0                 ;1465
0017e0  eaffff23          B        |L1.5236|
                  |L1.6116|
0017e4  e59d11c8          LDR      r1,[sp,#0x1c8]        ;1467
0017e8  e0810509          ADD      r0,r1,r9,LSL #10      ;1467
0017ec  e3a01b01          MOV      r1,#0x400             ;1467
0017f0  ebfffffe          BL       QModemWrite
0017f4  e1a06000          MOV      r6,r0                 ;1467
0017f8  e3560b01          CMP      r6,#0x400             ;1468
0017fc  0a000003          BEQ      |L1.6160|
001800  e28f0f59          ADR      r0,|L1.6508|
001804  ebfffffe          BL       sysprintf
001808  e3a00000          MOV      r0,#0                 ;1471
00180c  eaffff18          B        |L1.5236|
                  |L1.6160|
001810  e59d008c          LDR      r0,[sp,#0x8c]         ;1475
001814  e0800006          ADD      r0,r0,r6              ;1475
001818  e58d008c          STR      r0,[sp,#0x8c]         ;1475
00181c  e1a03509          LSL      r3,r9,#10             ;1476
001820  e1a02006          MOV      r2,r6                 ;1476
001824  e28f0e16          ADR      r0,|L1.6540|
001828  e59d108c          LDR      r1,[sp,#0x8c]         ;1476
00182c  ebfffffe          BL       sysprintf
001830  e2899001          ADD      r9,r9,#1              ;1460
                  |L1.6196|
001834  e1a01fc4          ASR      r1,r4,#31             ;1460
001838  e0841b21          ADD      r1,r4,r1,LSR #22      ;1460
00183c  e1590541          CMP      r9,r1,ASR #10         ;1460
001840  baffffdf          BLT      |L1.6084|
001844  e59f00e8          LDR      r0,|L1.6452|
001848  e5d00000          LDRB     r0,[r0,#0]            ;1479  ; cmdActionBreakFlag
00184c  e3500000          CMP      r0,#0                 ;1479
001850  0a000003          BEQ      |L1.6244|
001854  e28f0d05          ADR      r0,|L1.6556|
001858  ebfffffe          BL       sysprintf
00185c  e3a00000          MOV      r0,#0                 ;1482
001860  eaffff03          B        |L1.5236|
                  |L1.6244|
001864  e1a00004          MOV      r0,r4                 ;1485
001868  e1a01fc4          ASR      r1,r4,#31             ;1485
00186c  e0841b21          ADD      r1,r4,r1,LSR #22      ;1485
001870  e1a01541          ASR      r1,r1,#10             ;1485
001874  e0441501          SUB      r1,r4,r1,LSL #10      ;1485
001878  e58d1088          STR      r1,[sp,#0x88]         ;1485
00187c  e59d0088          LDR      r0,[sp,#0x88]         ;1486
001880  e3500000          CMP      r0,#0                 ;1486
001884  da000012          BLE      |L1.6356|
001888  e1a07004          MOV      r7,r4                 ;1488
00188c  e1a01fc4          ASR      r1,r4,#31             ;1488
001890  e0841b21          ADD      r1,r4,r1,LSR #22      ;1488
001894  e1a01541          ASR      r1,r1,#10             ;1488
001898  e59d21c8          LDR      r2,[sp,#0x1c8]        ;1488
00189c  e0820501          ADD      r0,r2,r1,LSL #10      ;1488
0018a0  e59d1088          LDR      r1,[sp,#0x88]         ;1488
0018a4  ebfffffe          BL       QModemWrite
0018a8  e1a06000          MOV      r6,r0                 ;1488
0018ac  e59d0088          LDR      r0,[sp,#0x88]         ;1489
0018b0  e1560000          CMP      r6,r0                 ;1489
0018b4  0a000003          BEQ      |L1.6344|
0018b8  e28f0e11          ADR      r0,|L1.6608|
0018bc  ebfffffe          BL       sysprintf
0018c0  e3a00000          MOV      r0,#0                 ;1492
0018c4  eafffeea          B        |L1.5236|
                  |L1.6344|
0018c8  e59d008c          LDR      r0,[sp,#0x8c]         ;1496
0018cc  e0800006          ADD      r0,r0,r6              ;1496
0018d0  e58d008c          STR      r0,[sp,#0x8c]         ;1496
                  |L1.6356|
0018d4  e3540000          CMP      r4,#0                 ;1510
0018d8  da000096          BLE      |L1.6968|
0018dc  e3a00064          MOV      r0,#0x64              ;1513
0018e0  e28d1020          ADD      r1,sp,#0x20           ;1513
0018e4  e58d0004          STR      r0,[sp,#4]            ;1513
0018e8  e1a03000          MOV      r3,r0                 ;1513
0018ec  e58d1000          STR      r1,[sp,#0]            ;1513
0018f0  e28d2024          ADD      r2,sp,#0x24           ;1513
0018f4  e3a01001          MOV      r1,#1                 ;1513
0018f8  e59f00f0          LDR      r0,|L1.6640|
0018fc  ebfffffe          BL       actionCmdPurePro
001900  e1a05000          MOV      r5,r0                 ;1513
001904  e3550002          CMP      r5,#2                 ;1514
001908  1a000003          BNE      |L1.6428|
00190c  e28f00e0          ADR      r0,|L1.6644|
001910  ebfffffe          BL       sysprintf
001914  e3a00000          MOV      r0,#0                 ;1518
001918  eafffed5          B        |L1.5236|
                  |L1.6428|
00191c  e3550003          CMP      r5,#3                 ;1520
001920  1a000045          BNE      |L1.6716|
001924  e28f00ec          ADR      r0,|L1.6680|
001928  ebfffffe          BL       sysprintf
00192c  e3a00000          MOV      r0,#0                 ;1523
001930  eafffecf          B        |L1.5236|
                  |L1.6452|
                          DCD      cmdActionBreakFlag
                  |L1.6456|
001938  0d0a2021          DCB      "\r\n !!! FtpClientSendFile MODEM_RETURN_BREAK !!!\n",0
00193c  21212046
001940  7470436c
001944  69656e74
001948  53656e64
00194c  46696c65
001950  204d4f44
001954  454d5f52
001958  45545552
00195c  4e5f4252
001960  45414b20
001964  2121210a
001968  00      
001969  00                DCB      0
00196a  00                DCB      0
00196b  00                DCB      0
                  |L1.6508|
00196c  203d3d20          DCB      " == Ftp Client write error 1\r\n",0
001970  46747020
001974  436c6965
001978  6e742077
00197c  72697465
001980  20657272
001984  6f722031
001988  0d0a00  
00198b  00                DCB      0
                  |L1.6540|
00198c  25303864          DCB      "%08d (%d:%d)\r",0
001990  20282564
001994  3a256429
001998  0d00    
00199a  00                DCB      0
00199b  00                DCB      0
                  |L1.6556|
00199c  0d0a2021          DCB      "\r\n !!! FtpClientSendFile MODEM_RETURN_BREAK_2 !!!\n",0
0019a0  21212046
0019a4  7470436c
0019a8  69656e74
0019ac  53656e64
0019b0  46696c65
0019b4  204d4f44
0019b8  454d5f52
0019bc  45545552
0019c0  4e5f4252
0019c4  45414b5f
0019c8  32202121
0019cc  210a00  
0019cf  00                DCB      0
                  |L1.6608|
0019d0  203d3d20          DCB      " == Ftp Client write error 2\r\n",0
0019d4  46747020
0019d8  436c6965
0019dc  6e742077
0019e0  72697465
0019e4  20657272
0019e8  6f722032
0019ec  0d0a00  
0019ef  00                DCB      0
                  |L1.6640|
                          DCD      ftpSendDataCmdItem
                  |L1.6644|
0019f4  203d3d20          DCB      " == Send Ftp Client Data Error\r\n",0
0019f8  53656e64
0019fc  20467470
001a00  20436c69
001a04  656e7420
001a08  44617461
001a0c  20457272
001a10  6f720d0a
001a14  00      
001a15  00                DCB      0
001a16  00                DCB      0
001a17  00                DCB      0
                  |L1.6680|
001a18  203d3d20          DCB      " == Send Ftp Client Data Break\r\n",0
001a1c  53656e64
001a20  20467470
001a24  20436c69
001a28  656e7420
001a2c  44617461
001a30  20427265
001a34  616b0d0a
001a38  00      
001a39  00                DCB      0
001a3a  00                DCB      0
001a3b  00                DCB      0
                  |L1.6716|
001a3c  e3a08000          MOV      r8,#0                 ;1533
001a40  ea000031          B        |L1.6924|
                  |L1.6724|
001a44  e28d0024          ADD      r0,sp,#0x24           ;1535
001a48  e7d00008          LDRB     r0,[r0,r8]            ;1535
001a4c  e350002c          CMP      r0,#0x2c              ;1535
001a50  1a000026          BNE      |L1.6896|
001a54  e1a0a008          MOV      r10,r8                ;1537
001a58  e28a7001          ADD      r7,r10,#1             ;1538
001a5c  ea00001f          B        |L1.6880|
                  |L1.6752|
001a60  e28d0024          ADD      r0,sp,#0x24           ;1540
001a64  e7d00007          LDRB     r0,[r0,r7]            ;1540
001a68  e3500039          CMP      r0,#0x39              ;1540
001a6c  ca000007          BGT      |L1.6800|
001a70  e28d0024          ADD      r0,sp,#0x24           ;1540
001a74  e7d00007          LDRB     r0,[r0,r7]            ;1540
001a78  e3500030          CMP      r0,#0x30              ;1540
001a7c  ba000003          BLT      |L1.6800|
001a80  e59d0020          LDR      r0,[sp,#0x20]         ;1540
001a84  e2400001          SUB      r0,r0,#1              ;1540
001a88  e1500007          CMP      r0,r7                 ;1540
001a8c  1a000012          BNE      |L1.6876|
                  |L1.6800|
001a90  e58d701c          STR      r7,[sp,#0x1c]         ;1542
001a94  e59d701c          LDR      r7,[sp,#0x1c]         ;1545
001a98  e047000a          SUB      r0,r7,r10             ;1545
001a9c  e2402001          SUB      r2,r0,#1              ;1545
001aa0  e28d0024          ADD      r0,sp,#0x24           ;1545
001aa4  e080000a          ADD      r0,r0,r10             ;1545
001aa8  e2801001          ADD      r1,r0,#1              ;1545
001aac  e28d0010          ADD      r0,sp,#0x10           ;1545
001ab0  ebfffffe          BL       __aeabi_memcpy
001ab4  e28d0010          ADD      r0,sp,#0x10           ;1552
001ab8  ebfffffe          BL       atoi
001abc  e58d000c          STR      r0,[sp,#0xc]          ;1552
001ac0  e59d000c          LDR      r0,[sp,#0xc]          ;1555
001ac4  e1500004          CMP      r0,r4                 ;1555
001ac8  1a000001          BNE      |L1.6868|
001acc  e3a00001          MOV      r0,#1                 ;1556
001ad0  eafffe67          B        |L1.5236|
                  |L1.6868|
001ad4  e3a00000          MOV      r0,#0                 ;1561
001ad8  eafffe65          B        |L1.5236|
                  |L1.6876|
001adc  e2877001          ADD      r7,r7,#1              ;1538
                  |L1.6880|
001ae0  e59d0020          LDR      r0,[sp,#0x20]         ;1538
001ae4  e1570000          CMP      r7,r0                 ;1538
001ae8  baffffdc          BLT      |L1.6752|
001aec  ea000005          B        |L1.6920|
                  |L1.6896|
001af0  e59d0020          LDR      r0,[sp,#0x20]         ;1566
001af4  e2400002          SUB      r0,r0,#2              ;1566
001af8  e1500008          CMP      r0,r8                 ;1566
001afc  1a000001          BNE      |L1.6920|
001b00  e3a00000          MOV      r0,#0                 ;1569
001b04  eafffe5a          B        |L1.5236|
                  |L1.6920|
001b08  e2888001          ADD      r8,r8,#1              ;1533
                  |L1.6924|
001b0c  e59d0020          LDR      r0,[sp,#0x20]         ;1533
001b10  e1580000          CMP      r8,r0                 ;1533
001b14  baffffca          BLT      |L1.6724|
001b18  e3a00000          MOV      r0,#0                 ;1574
001b1c  ebfffffe          BL       ATCmdDataTempBuffer
001b20  e1a07000          MOV      r7,r0                 ;1574
001b24  e1a01007          MOV      r1,r7                 ;1574
001b28  e28f0fb6          ADR      r0,|L1.7688|
001b2c  ebfffffe          BL       sysprintf
001b30  e3a00001          MOV      r0,#1                 ;1575
001b34  eafffe4e          B        |L1.5236|
                  |L1.6968|
001b38  e1a00000          MOV      r0,r0                 ;1578
001b3c  e3a00000          MOV      r0,#0                 ;1579
001b40  eafffe4b          B        |L1.5236|
;;;1581   
                          ENDP

                  FtpClientSendFileEx PROC
;;;1582   BOOL FtpClientSendFileEx(BOOL needChdirFlag, char* preDirName, char* dirName, char* fileName, uint8_t* buff, int len,
001b44  e92d4fff          PUSH     {r0-r11,lr}
;;;1583                          int* err1,int* err2)
;;;1584   {
001b48  e24ddf65          SUB      sp,sp,#0x194
001b4c  e59d41cc          LDR      r4,[sp,#0x1cc]
001b50  e59d51d0          LDR      r5,[sp,#0x1d0]
;;;1585       BOOL needMkdirFlag = FALSE;
001b54  e3a00000          MOV      r0,#0
001b58  e58d0190          STR      r0,[sp,#0x190]
;;;1586       //BOOL needChdirFlag = TRUE;
;;;1587       uint8_t cmdFtpSendInit[256];
;;;1588       ModemReturnValue modemReval;
;;;1589       if(len == 0)
001b5c  e3540000          CMP      r4,#0
001b60  1a000007          BNE      |L1.7044|
;;;1590       {
;;;1591           sysprintf(" == FtpClientSendFile return false len = %d\r\n", len);
001b64  e1a01004          MOV      r1,r4
001b68  e59f02bc          LDR      r0,|L1.7724|
001b6c  ebfffffe          BL       sysprintf
;;;1592           *err1 =1;
001b70  e3a00001          MOV      r0,#1
001b74  e5850000          STR      r0,[r5,#0]
;;;1593           return FALSE;
001b78  e3a00000          MOV      r0,#0
                  |L1.7036|
001b7c  e28ddf69          ADD      sp,sp,#0x1a4
;;;1594       }
;;;1595       else
;;;1596       {
;;;1597           sysprintf(" == FtpClientSendFile [%s][%s][%s] len = %d (needChdirFlag = %d)\r\n", preDirName, dirName, fileName, len, needChdirFlag);
;;;1598       }
;;;1599       #if(0)
;;;1600       sprintf((char*)cmdFtpSendInit, "AT+QFTPPWD\r\n");  
;;;1601       ftpGetDirCmdItem.cmd = cmdFtpSendInit;
;;;1602       modemReval = actionCmdPure(&ftpGetDirCmdItem, PARSER_TYPE_NORMAL);
;;;1603       if(modemReval == MODEM_RETURN_ERROR)
;;;1604       {
;;;1605           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(1)-- cmdFtpSendInit[%s]\r\n", ftpGetDirCmdItem.cmd);
;;;1606       }
;;;1607       else if(modemReval == MODEM_RETURN_BREAK)
;;;1608       {
;;;1609   
;;;1610          
;;;1611       }
;;;1612       else
;;;1613       {
;;;1614           int destLen;
;;;1615           //sysprintf(" == Web Get Current dir OK [%s]\r\n", ATCmdDataTempBuffer(NULL));                         
;;;1616           char* str = parserString((char*)ATCmdDataTempBuffer(NULL), "0,/", "\r\n", &destLen);                        
;;;1617           if(str != NULL)
;;;1618           {
;;;1619               str[destLen] = 0x0;
;;;1620                
;;;1621               sysprintf(" == compare [%s:%d] [%s:%d]\r\n", str, strlen(str), dirName, strlen(dirName));  
;;;1622               if(strcmp(str, dirName) == 0)
;;;1623               {
;;;1624                   needChdirFlag = FALSE;
;;;1625                   sysprintf("  == Web Get Current Real dir OK [%s], ignore need change directory\r\n", str);   
;;;1626               }    
;;;1627               else
;;;1628               {
;;;1629                   sysprintf("  == Web Get Current Real dir OK [%s], need change directory\r\n", str);  
;;;1630               }                
;;;1631           }
;;;1632       }
;;;1633       #else
;;;1634       //needChdirFlag = TRUE;
;;;1635       #endif
;;;1636       
;;;1637       if(needChdirFlag)
;;;1638       {
;;;1639           sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
;;;1640           //sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1641           ftpChDirCmdItem.cmd = cmdFtpSendInit;
;;;1642           modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
;;;1643           if(modemReval == MODEM_RETURN_ERROR)
;;;1644           {
;;;1645               sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(2)-- cmdFtpSendInit[%s]\r\n", ftpChDirCmdItem.cmd);
;;;1646               needMkdirFlag = TRUE;
;;;1647           }
;;;1648           else if(modemReval == MODEM_RETURN_BREAK)
;;;1649           {
;;;1650              *err1 =2;
;;;1651              return FALSE;
;;;1652           }
;;;1653           
;;;1654           if(needMkdirFlag)
;;;1655           {
;;;1656               sysprintf("\r\n == FtpClientSendFile Create Directory [%s][%s][%s]\r\n", preDirName, dirName, fileName);
;;;1657               
;;;1658               sprintf((char*)cmdFtpSendInit, "AT+QFTPMKDIR=\"/%s\"\r\n", preDirName);  
;;;1659               ftpMkDirCmdItem.cmd = cmdFtpSendInit;
;;;1660               ModemReturnValue modemReval = actionCmdPure(&ftpMkDirCmdItem, PARSER_TYPE_NORMAL);
;;;1661               if(modemReval == MODEM_RETURN_ERROR)
;;;1662               {
;;;1663                   sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(3)-- cmdFtpSendInit[%s]\r\n", ftpMkDirCmdItem.cmd);
;;;1664                   *err1 =3;
;;;1665                   return FALSE;
;;;1666   
;;;1667               }
;;;1668               else if(modemReval == MODEM_RETURN_BREAK)
;;;1669               {
;;;1670                   *err1 =4;
;;;1671                   return FALSE;
;;;1672               }
;;;1673               else
;;;1674               {
;;;1675                   sprintf((char*)cmdFtpSendInit, "AT+QFTPMKDIR=\"/%s\"\r\n", dirName);  
;;;1676                   ftpMkDirCmdItem.cmd = cmdFtpSendInit;
;;;1677                   ModemReturnValue modemReval = actionCmdPure(&ftpMkDirCmdItem, PARSER_TYPE_NORMAL);
;;;1678                   if(modemReval == MODEM_RETURN_ERROR)
;;;1679                   {
;;;1680                       sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(4)-- cmdFtpSendInit[%s]\r\n", ftpMkDirCmdItem.cmd);
;;;1681                       *err1 =5;
;;;1682                       return FALSE;
;;;1683   
;;;1684                   }
;;;1685                   else if(modemReval == MODEM_RETURN_BREAK)
;;;1686                   {
;;;1687                       *err1 =6;
;;;1688                       return FALSE;
;;;1689                   }
;;;1690                   else
;;;1691                   {
;;;1692                       sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
;;;1693                       //sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1694                       ftpChDirCmdItem.cmd = cmdFtpSendInit;
;;;1695                       ModemReturnValue modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
;;;1696                       if(modemReval == MODEM_RETURN_ERROR)
;;;1697                       {
;;;1698                           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(5)-- cmdFtpSendInit[%s]\r\n", ftpChDirCmdItem.cmd);
;;;1699                           *err1 =7;
;;;1700                           return FALSE;
;;;1701   
;;;1702                       }
;;;1703                       else if(modemReval == MODEM_RETURN_BREAK)
;;;1704                       {
;;;1705                           *err1 =8;
;;;1706                           return FALSE;
;;;1707                       }
;;;1708                   }
;;;1709               }
;;;1710           }
;;;1711           else
;;;1712           {
;;;1713               //sysprintf("\r\n == FtpClientSendFile Ignore Create Directory [%s][%s][%s]\r\n", preDirName, dirName, fileName);
;;;1714           }
;;;1715       }
;;;1716       /*
;;;1717       if(GPIO_ReadBit(GPIOJ, BIT3))       
;;;1718           sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\", \"COM:\",0, %d, 1\r\n", fileName, len); //last data package , auto close ftp socket 
;;;1719       else
;;;1720           sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\", \"COM:\",0, %d, 1\r\n", fileName, len+100); //last data package , auto close ftp socket 
;;;1721       */
;;;1722       sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\", \"COM:\",0, %d, 1\r\n", fileName, len); //last data package , auto close ftp socket 
;;;1723       
;;;1724       
;;;1725       //sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\", \"COM:\",0, %d, 0\r\n", fileName, len);   
;;;1726       //sprintf((char*)cmdFtpSendInit, "AT+QFTPPUT=\"%s\",\"COM:\"\r\n", fileName);       
;;;1727       ftpSendInitCmdItem.cmd = cmdFtpSendInit;
;;;1728       modemReval = actionCmdPure(&ftpSendInitCmdItem, PARSER_TYPE_NORMAL);
;;;1729       if(modemReval == MODEM_RETURN_ERROR)
;;;1730       {
;;;1731           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(6)-- cmdFtpSendInit[%s]\r\n", ftpSendInitCmdItem.cmd);
;;;1732           //QModemAbortDataMode();
;;;1733           *err1 =9;
;;;1734           return FALSE;
;;;1735       
;;;1736       }
;;;1737       else if(modemReval == MODEM_RETURN_BREAK)
;;;1738       {
;;;1739           *err1 =10;
;;;1740           return FALSE;
;;;1741       }
;;;1742       else
;;;1743       {
;;;1744           //sysprintf(" == init Ftp Client init OK\r\n");
;;;1745           int i = 0;
;;;1746           int total = 0;
;;;1747           int leftLen = 0;
;;;1748           int n;
;;;1749           for(i = 0; i< len/FTP_UART_WRITE_SIZE; i++)
;;;1750           {
;;;1751               if(cmdActionBreakFlag)
;;;1752               {
;;;1753                   sysprintf("\r\n !!! FtpClientSendFile MODEM_RETURN_BREAK !!!\n");
;;;1754                   *err1 =11;
;;;1755                   return FALSE;
;;;1756               }
;;;1757               n = QModemWrite(buff + i*FTP_UART_WRITE_SIZE, FTP_UART_WRITE_SIZE);
;;;1758               if(n != FTP_UART_WRITE_SIZE)
;;;1759               {
;;;1760                   sysprintf(" == Ftp Client write error 1\r\n");
;;;1761                   *err1 =12;
;;;1762                   return FALSE;
;;;1763               }
;;;1764               else
;;;1765               {
;;;1766                   total = total + n;
;;;1767                   sysprintf("%08d (%d:%d)\r", total, n, i*FTP_UART_WRITE_SIZE);
;;;1768               }
;;;1769           }
;;;1770           if(cmdActionBreakFlag)
;;;1771           {
;;;1772               sysprintf("\r\n !!! FtpClientSendFile MODEM_RETURN_BREAK_2 !!!\n");
;;;1773               *err1 =13;
;;;1774               return FALSE;
;;;1775           }
;;;1776           //sysprintf("\r\n== [%d:%d] ==\r\n", len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE, len-(len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE));
;;;1777           leftLen = len-(len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE);
;;;1778           if(leftLen > 0)
;;;1779           {
;;;1780               n = QModemWrite(buff + len/FTP_UART_WRITE_SIZE*FTP_UART_WRITE_SIZE, leftLen);
;;;1781               if(n != leftLen)
;;;1782               {
;;;1783                   sysprintf(" == Ftp Client write error 2\r\n");
;;;1784                   *err1 =14;
;;;1785                   return 0;
;;;1786               }
;;;1787               else
;;;1788               {
;;;1789                   total = total + n;
;;;1790                   //sysprintf("\r\n%08d _2 (%d:%d)\r", total, n, leftLen);
;;;1791               }
;;;1792           }
;;;1793           //QModemAbortDataMode();
;;;1794           //sysprintf("\r\n == QModemWrite %d/%d\r\n", total, len);
;;;1795           
;;;1796           char rbuff[100];
;;;1797           int retnlen;
;;;1798           int rindex;
;;;1799           int rindexend;
;;;1800           char numStr[10];
;;;1801           int rnum;
;;;1802           //terninalPrintf("FTP send datasize = %d\r\n",len);  
;;;1803           if (len > 0)
;;;1804           {
;;;1805               //modemReval = actionCmdPure(&ftpSendDataCmdItem, PARSER_TYPE_NORMAL);
;;;1806               modemReval = actionCmdPureFTP(&ftpSendDataCmdItem, PARSER_TYPE_NORMAL,rbuff,sizeof(rbuff),&retnlen, 100);
;;;1807               if(modemReval == MODEM_RETURN_ERROR)
;;;1808               {
;;;1809                   sysprintf(" == Send Ftp Client Data Error\r\n");
;;;1810                   //QModemAbortDataMode();
;;;1811                   *err1 =15;
;;;1812                   return FALSE;
;;;1813               }
;;;1814               else if(modemReval == MODEM_RETURN_BREAK)
;;;1815               {
;;;1816                   sysprintf(" == Send Ftp Client Data Break\r\n");
;;;1817                   *err1 =16;
;;;1818                   return FALSE;
;;;1819               }
;;;1820               else
;;;1821               {
;;;1822                   /*
;;;1823                   terninalPrintf("rbuff = ");
;;;1824                   for(int m=0;m<retnlen;m++)
;;;1825                       terninalPrintf("%02x ",rbuff[m]);
;;;1826                   terninalPrintf("\r\n");
;;;1827                   */
;;;1828                   for(int i=0;i<retnlen;i++)
;;;1829                   {
;;;1830                       if(rbuff[i] == ',')
;;;1831                       {
;;;1832                           rindex = i;
;;;1833                           for(int j=(rindex+1);j<retnlen;j++)
;;;1834                           {
;;;1835                               if((rbuff[j] > 0x39) || (rbuff[j] < 0x30) || (j == (retnlen-1)))
;;;1836                               {
;;;1837                                   rindexend = j;
;;;1838                                   //terninalPrintf("rindex = %d\r\n",rindex);
;;;1839                                   //terninalPrintf("rindexend = %d\r\n",rindexend);
;;;1840                                   memcpy(numStr,(char*)rbuff + rindex + 1,rindexend - rindex -1);
;;;1841                                   /*
;;;1842                                   terninalPrintf("FTP feedback numStr = ");
;;;1843                                   for(int k=0;k<(rindexend - rindex -1);k++)
;;;1844                                       terninalPrintf("%02x ",numStr[k]);
;;;1845                                   terninalPrintf("\r\n");
;;;1846                                   */
;;;1847                                   rnum = atoi(numStr);
;;;1848                                   //terninalPrintf("FTP feedback datasize = %d\r\n",rnum);
;;;1849                                   //break;
;;;1850                                   if(rnum == len)
;;;1851                                       return TRUE;
;;;1852                                   else
;;;1853                                   {
;;;1854                                       //terninalPrintf("EPM send datasize = %d\r\n",len);
;;;1855                                       //terninalPrintf("FTP feedback datasize = %d  ERROR\r\n",rnum);
;;;1856                                       *err2 =1;
;;;1857                                       return FALSE;
;;;1858                                   }
;;;1859                               } 
;;;1860                           }
;;;1861                       }
;;;1862                       else if(i == (retnlen-2))
;;;1863                       {
;;;1864                           //terninalPrintf("FTP feedback cmd ERROR\r\n");
;;;1865                           *err2 =2;
;;;1866                           return FALSE;
;;;1867                       }
;;;1868                   }
;;;1869                   
;;;1870                   
;;;1871                   sysprintf(" == Send Ftp Client Data OK[%s]\r\n", ATCmdDataTempBuffer(NULL));
;;;1872                   return TRUE;
;;;1873               }
;;;1874           }        
;;;1875       }  
;;;1876       return FALSE;
;;;1877   }
001b80  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.7044|
001b84  e59d0194          LDR      r0,[sp,#0x194]        ;1597
001b88  e58d0004          STR      r0,[sp,#4]            ;1597
001b8c  e58d4000          STR      r4,[sp,#0]            ;1597
001b90  e51f04a8          LDR      r0,|L1.5872|
001b94  e28d3f66          ADD      r3,sp,#0x198          ;1597
001b98  e893000e          LDM      r3,{r1-r3}            ;1597
001b9c  ebfffffe          BL       sysprintf
001ba0  e59d0194          LDR      r0,[sp,#0x194]        ;1637
001ba4  e3500000          CMP      r0,#0                 ;1637
001ba8  0a000074          BEQ      |L1.7552|
001bac  e59f127c          LDR      r1,|L1.7728|
001bb0  e59d219c          LDR      r2,[sp,#0x19c]        ;1639
001bb4  e28d0090          ADD      r0,sp,#0x90           ;1639
001bb8  ebfffffe          BL       __2sprintf
001bbc  e28d0090          ADD      r0,sp,#0x90           ;1641
001bc0  e51f14c0          LDR      r1,|L1.5896|
001bc4  e5810000          STR      r0,[r1,#0]            ;1641  ; ftpChDirCmdItem
001bc8  e3a01001          MOV      r1,#1                 ;1642
001bcc  e51f04cc          LDR      r0,|L1.5896|
001bd0  ebfffffe          BL       actionCmdPure
001bd4  e1a06000          MOV      r6,r0                 ;1642
001bd8  e3560002          CMP      r6,#2                 ;1643
001bdc  1a000006          BNE      |L1.7164|
001be0  e51f04e0          LDR      r0,|L1.5896|
001be4  e5901000          LDR      r1,[r0,#0]            ;1645  ; ftpChDirCmdItem
001be8  e51f04e4          LDR      r0,|L1.5900|
001bec  ebfffffe          BL       sysprintf
001bf0  e3a00001          MOV      r0,#1                 ;1646
001bf4  e58d0190          STR      r0,[sp,#0x190]        ;1646
001bf8  ea000005          B        |L1.7188|
                  |L1.7164|
001bfc  e3560003          CMP      r6,#3                 ;1648
001c00  1a000003          BNE      |L1.7188|
001c04  e3a00002          MOV      r0,#2                 ;1650
001c08  e5850000          STR      r0,[r5,#0]            ;1650
001c0c  e3a00000          MOV      r0,#0                 ;1651
001c10  eaffffd9          B        |L1.7036|
                  |L1.7188|
001c14  e59d0190          LDR      r0,[sp,#0x190]        ;1654
001c18  e3500000          CMP      r0,#0                 ;1654
001c1c  0a000057          BEQ      |L1.7552|
001c20  e59f020c          LDR      r0,|L1.7732|
001c24  e28d3f66          ADD      r3,sp,#0x198          ;1656
001c28  e893000e          LDM      r3,{r1-r3}            ;1656
001c2c  ebfffffe          BL       sysprintf
001c30  e59f1200          LDR      r1,|L1.7736|
001c34  e59d2198          LDR      r2,[sp,#0x198]        ;1658
001c38  e28d0090          ADD      r0,sp,#0x90           ;1658
001c3c  ebfffffe          BL       __2sprintf
001c40  e28d0090          ADD      r0,sp,#0x90           ;1659
001c44  e51f14ec          LDR      r1,|L1.5984|
001c48  e5810000          STR      r0,[r1,#0]            ;1659  ; ftpMkDirCmdItem
001c4c  e3a01001          MOV      r1,#1                 ;1660
001c50  e51f04f8          LDR      r0,|L1.5984|
001c54  ebfffffe          BL       actionCmdPure
001c58  e1a07000          MOV      r7,r0                 ;1660
001c5c  e3570002          CMP      r7,#2                 ;1661
001c60  1a000007          BNE      |L1.7300|
001c64  e51f050c          LDR      r0,|L1.5984|
001c68  e5901000          LDR      r1,[r0,#0]            ;1663  ; ftpMkDirCmdItem
001c6c  e51f0510          LDR      r0,|L1.5988|
001c70  ebfffffe          BL       sysprintf
001c74  e3a00003          MOV      r0,#3                 ;1664
001c78  e5850000          STR      r0,[r5,#0]            ;1664
001c7c  e3a00000          MOV      r0,#0                 ;1665
001c80  eaffffbd          B        |L1.7036|
                  |L1.7300|
001c84  e3570003          CMP      r7,#3                 ;1668
001c88  1a000003          BNE      |L1.7324|
001c8c  e3a00004          MOV      r0,#4                 ;1670
001c90  e5850000          STR      r0,[r5,#0]            ;1670
001c94  e3a00000          MOV      r0,#0                 ;1671
001c98  eaffffb7          B        |L1.7036|
                  |L1.7324|
001c9c  e59f1194          LDR      r1,|L1.7736|
001ca0  e59d219c          LDR      r2,[sp,#0x19c]        ;1675
001ca4  e28d0090          ADD      r0,sp,#0x90           ;1675
001ca8  ebfffffe          BL       __2sprintf
001cac  e28d0090          ADD      r0,sp,#0x90           ;1676
001cb0  e51f1558          LDR      r1,|L1.5984|
001cb4  e5810000          STR      r0,[r1,#0]            ;1676  ; ftpMkDirCmdItem
001cb8  e3a01001          MOV      r1,#1                 ;1677
001cbc  e51f0564          LDR      r0,|L1.5984|
001cc0  ebfffffe          BL       actionCmdPure
001cc4  e1a08000          MOV      r8,r0                 ;1677
001cc8  e3580002          CMP      r8,#2                 ;1678
001ccc  1a000007          BNE      |L1.7408|
001cd0  e51f0578          LDR      r0,|L1.5984|
001cd4  e5901000          LDR      r1,[r0,#0]            ;1680  ; ftpMkDirCmdItem
001cd8  e51f0578          LDR      r0,|L1.5992|
001cdc  ebfffffe          BL       sysprintf
001ce0  e3a00005          MOV      r0,#5                 ;1681
001ce4  e5850000          STR      r0,[r5,#0]            ;1681
001ce8  e3a00000          MOV      r0,#0                 ;1682
001cec  eaffffa2          B        |L1.7036|
                  |L1.7408|
001cf0  e3580003          CMP      r8,#3                 ;1685
001cf4  1a000003          BNE      |L1.7432|
001cf8  e3a00006          MOV      r0,#6                 ;1687
001cfc  e5850000          STR      r0,[r5,#0]            ;1687
001d00  e3a00000          MOV      r0,#0                 ;1688
001d04  eaffff9c          B        |L1.7036|
                  |L1.7432|
001d08  e59f1120          LDR      r1,|L1.7728|
001d0c  e59d219c          LDR      r2,[sp,#0x19c]        ;1692
001d10  e28d0090          ADD      r0,sp,#0x90           ;1692
001d14  ebfffffe          BL       __2sprintf
001d18  e28d0090          ADD      r0,sp,#0x90           ;1694
001d1c  e51f161c          LDR      r1,|L1.5896|
001d20  e5810000          STR      r0,[r1,#0]            ;1694  ; ftpChDirCmdItem
001d24  e3a01001          MOV      r1,#1                 ;1695
001d28  e51f0628          LDR      r0,|L1.5896|
001d2c  ebfffffe          BL       actionCmdPure
001d30  e1a09000          MOV      r9,r0                 ;1695
001d34  e3590002          CMP      r9,#2                 ;1696
001d38  1a000007          BNE      |L1.7516|
001d3c  e51f063c          LDR      r0,|L1.5896|
001d40  e5901000          LDR      r1,[r0,#0]            ;1698  ; ftpChDirCmdItem
001d44  e51f05e0          LDR      r0,|L1.5996|
001d48  ebfffffe          BL       sysprintf
001d4c  e3a00007          MOV      r0,#7                 ;1699
001d50  e5850000          STR      r0,[r5,#0]            ;1699
001d54  e3a00000          MOV      r0,#0                 ;1700
001d58  eaffff87          B        |L1.7036|
                  |L1.7516|
001d5c  e3590003          CMP      r9,#3                 ;1703
001d60  1a000003          BNE      |L1.7540|
001d64  e3a00008          MOV      r0,#8                 ;1705
001d68  e5850000          STR      r0,[r5,#0]            ;1705
001d6c  e3a00000          MOV      r0,#0                 ;1706
001d70  eaffff81          B        |L1.7036|
                  |L1.7540|
001d74  e1a00000          MOV      r0,r0                 ;1708
001d78  e1a00000          MOV      r0,r0                 ;1709
001d7c  e1a00000          MOV      r0,r0                 ;1710
                  |L1.7552|
001d80  e1a03004          MOV      r3,r4                 ;1722
001d84  e59f10b0          LDR      r1,|L1.7740|
001d88  e59d21a0          LDR      r2,[sp,#0x1a0]        ;1722
001d8c  e28d0090          ADD      r0,sp,#0x90           ;1722
001d90  ebfffffe          BL       __2sprintf
001d94  e28d0090          ADD      r0,sp,#0x90           ;1727
001d98  e51f160c          LDR      r1,|L1.6036|
001d9c  e5810000          STR      r0,[r1,#0]            ;1727  ; ftpSendInitCmdItem
001da0  e3a01001          MOV      r1,#1                 ;1728
001da4  e51f0618          LDR      r0,|L1.6036|
001da8  ebfffffe          BL       actionCmdPure
001dac  e1a06000          MOV      r6,r0                 ;1728
001db0  e3560002          CMP      r6,#2                 ;1729
001db4  1a000007          BNE      |L1.7640|
001db8  e51f062c          LDR      r0,|L1.6036|
001dbc  e5901000          LDR      r1,[r0,#0]            ;1731  ; ftpSendInitCmdItem
001dc0  e51f0630          LDR      r0,|L1.6040|
001dc4  ebfffffe          BL       sysprintf
001dc8  e3a00009          MOV      r0,#9                 ;1733
001dcc  e5850000          STR      r0,[r5,#0]            ;1733
001dd0  e3a00000          MOV      r0,#0                 ;1734
001dd4  eaffff68          B        |L1.7036|
                  |L1.7640|
001dd8  e3560003          CMP      r6,#3                 ;1737
001ddc  1a000003          BNE      |L1.7664|
001de0  e3a0000a          MOV      r0,#0xa               ;1739
001de4  e5850000          STR      r0,[r5,#0]            ;1739
001de8  e3a00000          MOV      r0,#0                 ;1740
001dec  eaffff62          B        |L1.7036|
                  |L1.7664|
001df0  e3a0a000          MOV      r10,#0                ;1745
001df4  e3a00000          MOV      r0,#0                 ;1746
001df8  e58d008c          STR      r0,[sp,#0x8c]         ;1746
001dfc  e58d0088          STR      r0,[sp,#0x88]         ;1747
001e00  e1a00000          MOV      r0,r0                 ;1749
001e04  ea00002d          B        |L1.7872|
                  |L1.7688|
001e08  203d3d20          DCB      " == Send Ftp Client Data OK[%s]\r\n",0
001e0c  53656e64
001e10  20467470
001e14  20436c69
001e18  656e7420
001e1c  44617461
001e20  204f4b5b
001e24  25735d0d
001e28  0a00    
001e2a  00                DCB      0
001e2b  00                DCB      0
                  |L1.7724|
                          DCD      ||.text||+0x16c0
                  |L1.7728|
                          DCD      ||.text||+0x16f4
                  |L1.7732|
                          DCD      ||.text||+0x1710
                  |L1.7736|
                          DCD      ||.text||+0x1748
                  |L1.7740|
                          DCD      ||.text||+0x1770
                  |L1.7744|
001e40  e51f0514          LDR      r0,|L1.6452|
001e44  e5d00000          LDRB     r0,[r0,#0]            ;1751  ; cmdActionBreakFlag
001e48  e3500000          CMP      r0,#0                 ;1751
001e4c  0a000005          BEQ      |L1.7784|
001e50  e59f04d4          LDR      r0,|L1.9004|
001e54  ebfffffe          BL       sysprintf
001e58  e3a0000b          MOV      r0,#0xb               ;1754
001e5c  e5850000          STR      r0,[r5,#0]            ;1754
001e60  e3a00000          MOV      r0,#0                 ;1755
001e64  eaffff44          B        |L1.7036|
                  |L1.7784|
001e68  e59d11c8          LDR      r1,[sp,#0x1c8]        ;1757
001e6c  e081050a          ADD      r0,r1,r10,LSL #10     ;1757
001e70  e3a01b01          MOV      r1,#0x400             ;1757
001e74  ebfffffe          BL       QModemWrite
001e78  e1a07000          MOV      r7,r0                 ;1757
001e7c  e3570b01          CMP      r7,#0x400             ;1758
001e80  0a000005          BEQ      |L1.7836|
001e84  e59f04a4          LDR      r0,|L1.9008|
001e88  ebfffffe          BL       sysprintf
001e8c  e3a0000c          MOV      r0,#0xc               ;1761
001e90  e5850000          STR      r0,[r5,#0]            ;1761
001e94  e3a00000          MOV      r0,#0                 ;1762
001e98  eaffff37          B        |L1.7036|
                  |L1.7836|
001e9c  e59d008c          LDR      r0,[sp,#0x8c]         ;1766
001ea0  e0800007          ADD      r0,r0,r7              ;1766
001ea4  e58d008c          STR      r0,[sp,#0x8c]         ;1766
001ea8  e1a0350a          LSL      r3,r10,#10            ;1767
001eac  e1a02007          MOV      r2,r7                 ;1767
001eb0  e59f047c          LDR      r0,|L1.9012|
001eb4  e59d108c          LDR      r1,[sp,#0x8c]         ;1767
001eb8  ebfffffe          BL       sysprintf
001ebc  e28aa001          ADD      r10,r10,#1            ;1749
                  |L1.7872|
001ec0  e1a01fc4          ASR      r1,r4,#31             ;1749
001ec4  e0841b21          ADD      r1,r4,r1,LSR #22      ;1749
001ec8  e15a0541          CMP      r10,r1,ASR #10        ;1749
001ecc  baffffdb          BLT      |L1.7744|
001ed0  e51f05a4          LDR      r0,|L1.6452|
001ed4  e5d00000          LDRB     r0,[r0,#0]            ;1770  ; cmdActionBreakFlag
001ed8  e3500000          CMP      r0,#0                 ;1770
001edc  0a000005          BEQ      |L1.7928|
001ee0  e59f0450          LDR      r0,|L1.9016|
001ee4  ebfffffe          BL       sysprintf
001ee8  e3a0000d          MOV      r0,#0xd               ;1773
001eec  e5850000          STR      r0,[r5,#0]            ;1773
001ef0  e3a00000          MOV      r0,#0                 ;1774
001ef4  eaffff20          B        |L1.7036|
                  |L1.7928|
001ef8  e1a00004          MOV      r0,r4                 ;1777
001efc  e1a01fc4          ASR      r1,r4,#31             ;1777
001f00  e0841b21          ADD      r1,r4,r1,LSR #22      ;1777
001f04  e1a01541          ASR      r1,r1,#10             ;1777
001f08  e0441501          SUB      r1,r4,r1,LSL #10      ;1777
001f0c  e58d1088          STR      r1,[sp,#0x88]         ;1777
001f10  e59d0088          LDR      r0,[sp,#0x88]         ;1778
001f14  e3500000          CMP      r0,#0                 ;1778
001f18  da000014          BLE      |L1.8048|
001f1c  e1a08004          MOV      r8,r4                 ;1780
001f20  e1a01fc4          ASR      r1,r4,#31             ;1780
001f24  e0841b21          ADD      r1,r4,r1,LSR #22      ;1780
001f28  e1a01541          ASR      r1,r1,#10             ;1780
001f2c  e59d21c8          LDR      r2,[sp,#0x1c8]        ;1780
001f30  e0820501          ADD      r0,r2,r1,LSL #10      ;1780
001f34  e59d1088          LDR      r1,[sp,#0x88]         ;1780
001f38  ebfffffe          BL       QModemWrite
001f3c  e1a07000          MOV      r7,r0                 ;1780
001f40  e59d0088          LDR      r0,[sp,#0x88]         ;1781
001f44  e1570000          CMP      r7,r0                 ;1781
001f48  0a000005          BEQ      |L1.8036|
001f4c  e59f03e8          LDR      r0,|L1.9020|
001f50  ebfffffe          BL       sysprintf
001f54  e3a0000e          MOV      r0,#0xe               ;1784
001f58  e5850000          STR      r0,[r5,#0]            ;1784
001f5c  e3a00000          MOV      r0,#0                 ;1785
001f60  eaffff05          B        |L1.7036|
                  |L1.8036|
001f64  e59d008c          LDR      r0,[sp,#0x8c]         ;1789
001f68  e0800007          ADD      r0,r0,r7              ;1789
001f6c  e58d008c          STR      r0,[sp,#0x8c]         ;1789
                  |L1.8048|
001f70  e3540000          CMP      r4,#0                 ;1803
001f74  da00005e          BLE      |L1.8436|
001f78  e3a00064          MOV      r0,#0x64              ;1806
001f7c  e28d1020          ADD      r1,sp,#0x20           ;1806
001f80  e58d0004          STR      r0,[sp,#4]            ;1806
001f84  e1a03000          MOV      r3,r0                 ;1806
001f88  e58d1000          STR      r1,[sp,#0]            ;1806
001f8c  e28d2024          ADD      r2,sp,#0x24           ;1806
001f90  e3a01001          MOV      r1,#1                 ;1806
001f94  e51f05ac          LDR      r0,|L1.6640|
001f98  ebfffffe          BL       actionCmdPureFTP
001f9c  e1a06000          MOV      r6,r0                 ;1806
001fa0  e3560002          CMP      r6,#2                 ;1807
001fa4  1a000005          BNE      |L1.8128|
001fa8  e59f0390          LDR      r0,|L1.9024|
001fac  ebfffffe          BL       sysprintf
001fb0  e3a0000f          MOV      r0,#0xf               ;1811
001fb4  e5850000          STR      r0,[r5,#0]            ;1811
001fb8  e3a00000          MOV      r0,#0                 ;1812
001fbc  eafffeee          B        |L1.7036|
                  |L1.8128|
001fc0  e3560003          CMP      r6,#3                 ;1814
001fc4  1a000005          BNE      |L1.8160|
001fc8  e59f0374          LDR      r0,|L1.9028|
001fcc  ebfffffe          BL       sysprintf
001fd0  e3a00010          MOV      r0,#0x10              ;1817
001fd4  e5850000          STR      r0,[r5,#0]            ;1817
001fd8  e3a00000          MOV      r0,#0                 ;1818
001fdc  eafffee6          B        |L1.7036|
                  |L1.8160|
001fe0  e3a09000          MOV      r9,#0                 ;1828
001fe4  ea000037          B        |L1.8392|
                  |L1.8168|
001fe8  e28d0024          ADD      r0,sp,#0x24           ;1830
001fec  e7d00009          LDRB     r0,[r0,r9]            ;1830
001ff0  e350002c          CMP      r0,#0x2c              ;1830
001ff4  1a000029          BNE      |L1.8352|
001ff8  e1a0b009          MOV      r11,r9                ;1832
001ffc  e28b8001          ADD      r8,r11,#1             ;1833
002000  ea000022          B        |L1.8336|
                  |L1.8196|
002004  e28d0024          ADD      r0,sp,#0x24           ;1835
002008  e7d00008          LDRB     r0,[r0,r8]            ;1835
00200c  e3500039          CMP      r0,#0x39              ;1835
002010  ca000007          BGT      |L1.8244|
002014  e28d0024          ADD      r0,sp,#0x24           ;1835
002018  e7d00008          LDRB     r0,[r0,r8]            ;1835
00201c  e3500030          CMP      r0,#0x30              ;1835
002020  ba000003          BLT      |L1.8244|
002024  e59d0020          LDR      r0,[sp,#0x20]         ;1835
002028  e2400001          SUB      r0,r0,#1              ;1835
00202c  e1500008          CMP      r0,r8                 ;1835
002030  1a000015          BNE      |L1.8332|
                  |L1.8244|
002034  e58d801c          STR      r8,[sp,#0x1c]         ;1837
002038  e59d801c          LDR      r8,[sp,#0x1c]         ;1840
00203c  e048000b          SUB      r0,r8,r11             ;1840
002040  e2402001          SUB      r2,r0,#1              ;1840
002044  e28d0024          ADD      r0,sp,#0x24           ;1840
002048  e080000b          ADD      r0,r0,r11             ;1840
00204c  e2801001          ADD      r1,r0,#1              ;1840
002050  e28d0010          ADD      r0,sp,#0x10           ;1840
002054  ebfffffe          BL       __aeabi_memcpy
002058  e28d0010          ADD      r0,sp,#0x10           ;1847
00205c  ebfffffe          BL       atoi
002060  e58d000c          STR      r0,[sp,#0xc]          ;1847
002064  e59d000c          LDR      r0,[sp,#0xc]          ;1850
002068  e1500004          CMP      r0,r4                 ;1850
00206c  1a000001          BNE      |L1.8312|
002070  e3a00001          MOV      r0,#1                 ;1851
002074  eafffec0          B        |L1.7036|
                  |L1.8312|
002078  e3a01001          MOV      r1,#1                 ;1856
00207c  e59d01d4          LDR      r0,[sp,#0x1d4]        ;1856
002080  e5801000          STR      r1,[r0,#0]            ;1856
002084  e3a00000          MOV      r0,#0                 ;1857
002088  eafffebb          B        |L1.7036|
                  |L1.8332|
00208c  e2888001          ADD      r8,r8,#1              ;1833
                  |L1.8336|
002090  e59d0020          LDR      r0,[sp,#0x20]         ;1833
002094  e1580000          CMP      r8,r0                 ;1833
002098  baffffd9          BLT      |L1.8196|
00209c  ea000008          B        |L1.8388|
                  |L1.8352|
0020a0  e59d0020          LDR      r0,[sp,#0x20]         ;1862
0020a4  e2400002          SUB      r0,r0,#2              ;1862
0020a8  e1500009          CMP      r0,r9                 ;1862
0020ac  1a000004          BNE      |L1.8388|
0020b0  e3a01002          MOV      r1,#2                 ;1865
0020b4  e59d01d4          LDR      r0,[sp,#0x1d4]        ;1865
0020b8  e5801000          STR      r1,[r0,#0]            ;1865
0020bc  e3a00000          MOV      r0,#0                 ;1866
0020c0  eafffead          B        |L1.7036|
                  |L1.8388|
0020c4  e2899001          ADD      r9,r9,#1              ;1828
                  |L1.8392|
0020c8  e59d0020          LDR      r0,[sp,#0x20]         ;1828
0020cc  e1590000          CMP      r9,r0                 ;1828
0020d0  baffffc4          BLT      |L1.8168|
0020d4  e3a00000          MOV      r0,#0                 ;1871
0020d8  ebfffffe          BL       ATCmdDataTempBuffer
0020dc  e1a08000          MOV      r8,r0                 ;1871
0020e0  e1a01008          MOV      r1,r8                 ;1871
0020e4  e24f0fb9          ADR      r0,|L1.7688|
0020e8  ebfffffe          BL       sysprintf
0020ec  e3a00001          MOV      r0,#1                 ;1872
0020f0  eafffea1          B        |L1.7036|
                  |L1.8436|
0020f4  e1a00000          MOV      r0,r0                 ;1875
0020f8  e3a00000          MOV      r0,#0                 ;1876
0020fc  eafffe9e          B        |L1.7036|
;;;1878   
                          ENDP

                  FtpDeleteFile PROC
;;;2490   
;;;2491   BOOL FtpDeleteFile(char* filename)
002100  e92d4038          PUSH     {r3-r5,lr}
;;;2492   {
002104  e1a04000          MOV      r4,r0
;;;2493       //memcpy(DeleteFileName,filename,sizeof(DeleteFileName));
;;;2494       sprintf((char*)DeleteFileName,"%s%s%s",FTP_DEL_FIL_FRONT,filename,FTP_DEL_FIL_END);
002108  e28f0f8e          ADR      r0,|L1.9032|
00210c  e1a03004          MOV      r3,r4
002110  e28f2f8d          ADR      r2,|L1.9036|
002114  e28f1d09          ADR      r1,|L1.9052|
002118  e58d0000          STR      r0,[sp,#0]
00211c  e59f0240          LDR      r0,|L1.9060|
002120  ebfffffe          BL       __2sprintf
;;;2495       ftpDeleteFileCmdItem.cmd = DeleteFileName;
002124  e59f0238          LDR      r0,|L1.9060|
002128  e59f1238          LDR      r1,|L1.9064|
00212c  e5810000          STR      r0,[r1,#0]  ; ftpDeleteFileCmdItem
;;;2496       if(actionCmdPure(&ftpDeleteFileCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
002130  e3a01001          MOV      r1,#1
002134  e59f022c          LDR      r0,|L1.9064|
002138  ebfffffe          BL       actionCmdPure
00213c  e3500001          CMP      r0,#1
002140  1a000003          BNE      |L1.8532|
;;;2497       {
;;;2498           sysprintf(" == FtpDeleteFile OK\r\n"); 
002144  e28f0e22          ADR      r0,|L1.9068|
002148  ebfffffe          BL       sysprintf
;;;2499           return TRUE;
00214c  e3a00001          MOV      r0,#1
                  |L1.8528|
;;;2500       }
;;;2501       else
;;;2502       {
;;;2503           sysprintf(" == FtpDeleteFile ERROR\r\n"); 
;;;2504           return FALSE;
;;;2505       }
;;;2506   }
002150  e8bd8038          POP      {r3-r5,pc}
                  |L1.8532|
002154  e28f0f8a          ADR      r0,|L1.9092|
002158  ebfffffe          BL       sysprintf
00215c  e3a00000          MOV      r0,#0                 ;2504
002160  eafffffa          B        |L1.8528|
;;;2507   
                          ENDP

                  FtpClientDeleteFile PROC
;;;1878   
;;;1879   BOOL FtpClientDeleteFile(BOOL needChdirFlag, char* preDirName, char* dirName, char* fileName)
002164  e92d4fff          PUSH     {r0-r11,lr}
;;;1880   {
002168  e24ddf41          SUB      sp,sp,#0x104
00216c  e1a05000          MOV      r5,r0
002170  e1a06001          MOV      r6,r1
002174  e1a07003          MOV      r7,r3
;;;1881       BOOL needMkdirFlag = FALSE;
002178  e3a0b000          MOV      r11,#0
;;;1882       //BOOL needChdirFlag = TRUE;
;;;1883       uint8_t cmdFtpSendInit[256];
;;;1884       ModemReturnValue modemReval;
;;;1885   
;;;1886       
;;;1887       if(needChdirFlag)
00217c  e3550000          CMP      r5,#0
002180  0a000066          BEQ      |L1.8992|
;;;1888       {
;;;1889           sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
002184  e51f135c          LDR      r1,|L1.7728|
002188  e59d210c          LDR      r2,[sp,#0x10c]
00218c  e28d0004          ADD      r0,sp,#4
002190  ebfffffe          BL       __2sprintf
;;;1890           //sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1891           ftpChDirCmdItem.cmd = cmdFtpSendInit;
002194  e28d0004          ADD      r0,sp,#4
002198  e51f1a98          LDR      r1,|L1.5896|
00219c  e5810000          STR      r0,[r1,#0]  ; ftpChDirCmdItem
;;;1892           modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
0021a0  e3a01001          MOV      r1,#1
0021a4  e51f0aa4          LDR      r0,|L1.5896|
0021a8  ebfffffe          BL       actionCmdPure
0021ac  e1a04000          MOV      r4,r0
;;;1893           if(modemReval == MODEM_RETURN_ERROR)
0021b0  e3540002          CMP      r4,#2
0021b4  1a000005          BNE      |L1.8656|
;;;1894           {
;;;1895               sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(2)-- cmdFtpSendInit[%s]\r\n", ftpChDirCmdItem.cmd);
0021b8  e51f0ab8          LDR      r0,|L1.5896|
0021bc  e5901000          LDR      r1,[r0,#0]  ; ftpChDirCmdItem
0021c0  e51f0abc          LDR      r0,|L1.5900|
0021c4  ebfffffe          BL       sysprintf
;;;1896               needMkdirFlag = TRUE;
0021c8  e3a0b001          MOV      r11,#1
0021cc  ea000004          B        |L1.8676|
                  |L1.8656|
;;;1897           }
;;;1898           else if(modemReval == MODEM_RETURN_BREAK)
0021d0  e3540003          CMP      r4,#3
0021d4  1a000002          BNE      |L1.8676|
;;;1899           {
;;;1900              return FALSE;
0021d8  e3a00000          MOV      r0,#0
                  |L1.8668|
0021dc  e28ddf45          ADD      sp,sp,#0x114
;;;1901           }
;;;1902           
;;;1903           if(needMkdirFlag)
;;;1904           {
;;;1905               sysprintf("\r\n == FtpClientSendFile Create Directory [%s][%s][%s]\r\n", preDirName, dirName, fileName);
;;;1906               
;;;1907               sprintf((char*)cmdFtpSendInit, "AT+QFTPMKDIR=\"/%s\"\r\n", preDirName);  
;;;1908               ftpMkDirCmdItem.cmd = cmdFtpSendInit;
;;;1909               ModemReturnValue modemReval = actionCmdPure(&ftpMkDirCmdItem, PARSER_TYPE_NORMAL);
;;;1910               if(modemReval == MODEM_RETURN_ERROR)
;;;1911               {
;;;1912                   sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(3)-- cmdFtpSendInit[%s]\r\n", ftpMkDirCmdItem.cmd);
;;;1913                   return FALSE;
;;;1914   
;;;1915               }
;;;1916               else if(modemReval == MODEM_RETURN_BREAK)
;;;1917               {
;;;1918                   return FALSE;
;;;1919               }
;;;1920               else
;;;1921               {
;;;1922                   sprintf((char*)cmdFtpSendInit, "AT+QFTPMKDIR=\"/%s\"\r\n", dirName);  
;;;1923                   ftpMkDirCmdItem.cmd = cmdFtpSendInit;
;;;1924                   ModemReturnValue modemReval = actionCmdPure(&ftpMkDirCmdItem, PARSER_TYPE_NORMAL);
;;;1925                   if(modemReval == MODEM_RETURN_ERROR)
;;;1926                   {
;;;1927                       sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(4)-- cmdFtpSendInit[%s]\r\n", ftpMkDirCmdItem.cmd);
;;;1928                       return FALSE;
;;;1929   
;;;1930                   }
;;;1931                   else if(modemReval == MODEM_RETURN_BREAK)
;;;1932                   {
;;;1933                       return FALSE;
;;;1934                   }
;;;1935                   else
;;;1936                   {
;;;1937                       sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
;;;1938                       //sprintf((char*)cmdFtpSendInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1939                       ftpChDirCmdItem.cmd = cmdFtpSendInit;
;;;1940                       ModemReturnValue modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
;;;1941                       if(modemReval == MODEM_RETURN_ERROR)
;;;1942                       {
;;;1943                           sysprintf("\r\n -- FtpClientSendFile MODEM_RETURN_ERROR(5)-- cmdFtpSendInit[%s]\r\n", ftpChDirCmdItem.cmd);
;;;1944                           return FALSE;
;;;1945   
;;;1946                       }
;;;1947                       else if(modemReval == MODEM_RETURN_BREAK)
;;;1948                       {
;;;1949                           return FALSE;
;;;1950                       }
;;;1951                   }
;;;1952               }
;;;1953           }
;;;1954           else
;;;1955           {
;;;1956               //sysprintf("\r\n == FtpClientSendFile Ignore Create Directory [%s][%s][%s]\r\n", preDirName, dirName, fileName);
;;;1957           }
;;;1958       }
;;;1959       
;;;1960       return FtpDeleteFile(fileName);
;;;1961       
;;;1962   }
0021e0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.8676|
0021e4  e35b0000          CMP      r11,#0                ;1903
0021e8  0a00004c          BEQ      |L1.8992|
0021ec  e1a03007          MOV      r3,r7                 ;1905
0021f0  e1a01006          MOV      r1,r6                 ;1905
0021f4  e51f03c8          LDR      r0,|L1.7732|
0021f8  e59d210c          LDR      r2,[sp,#0x10c]        ;1905
0021fc  ebfffffe          BL       sysprintf
002200  e1a02006          MOV      r2,r6                 ;1907
002204  e51f13d4          LDR      r1,|L1.7736|
002208  e28d0004          ADD      r0,sp,#4              ;1907
00220c  ebfffffe          BL       __2sprintf
002210  e28d0004          ADD      r0,sp,#4              ;1908
002214  e51f1abc          LDR      r1,|L1.5984|
002218  e5810000          STR      r0,[r1,#0]            ;1908  ; ftpMkDirCmdItem
00221c  e3a01001          MOV      r1,#1                 ;1909
002220  e51f0ac8          LDR      r0,|L1.5984|
002224  ebfffffe          BL       actionCmdPure
002228  e1a08000          MOV      r8,r0                 ;1909
00222c  e3580002          CMP      r8,#2                 ;1910
002230  1a000005          BNE      |L1.8780|
002234  e51f0adc          LDR      r0,|L1.5984|
002238  e5901000          LDR      r1,[r0,#0]            ;1912  ; ftpMkDirCmdItem
00223c  e51f0ae0          LDR      r0,|L1.5988|
002240  ebfffffe          BL       sysprintf
002244  e3a00000          MOV      r0,#0                 ;1913
002248  eaffffe3          B        |L1.8668|
                  |L1.8780|
00224c  e3580003          CMP      r8,#3                 ;1916
002250  1a000001          BNE      |L1.8796|
002254  e3a00000          MOV      r0,#0                 ;1918
002258  eaffffdf          B        |L1.8668|
                  |L1.8796|
00225c  e51f142c          LDR      r1,|L1.7736|
002260  e59d210c          LDR      r2,[sp,#0x10c]        ;1922
002264  e28d0004          ADD      r0,sp,#4              ;1922
002268  ebfffffe          BL       __2sprintf
00226c  e28d0004          ADD      r0,sp,#4              ;1923
002270  e51f1b18          LDR      r1,|L1.5984|
002274  e5810000          STR      r0,[r1,#0]            ;1923  ; ftpMkDirCmdItem
002278  e3a01001          MOV      r1,#1                 ;1924
00227c  e51f0b24          LDR      r0,|L1.5984|
002280  ebfffffe          BL       actionCmdPure
002284  e1a09000          MOV      r9,r0                 ;1924
002288  e3590002          CMP      r9,#2                 ;1925
00228c  1a000005          BNE      |L1.8872|
002290  e51f0b38          LDR      r0,|L1.5984|
002294  e5901000          LDR      r1,[r0,#0]            ;1927  ; ftpMkDirCmdItem
002298  e51f0b38          LDR      r0,|L1.5992|
00229c  ebfffffe          BL       sysprintf
0022a0  e3a00000          MOV      r0,#0                 ;1928
0022a4  eaffffcc          B        |L1.8668|
                  |L1.8872|
0022a8  e3590003          CMP      r9,#3                 ;1931
0022ac  1a000001          BNE      |L1.8888|
0022b0  e3a00000          MOV      r0,#0                 ;1933
0022b4  eaffffc8          B        |L1.8668|
                  |L1.8888|
0022b8  e51f1490          LDR      r1,|L1.7728|
0022bc  e59d210c          LDR      r2,[sp,#0x10c]        ;1937
0022c0  e28d0004          ADD      r0,sp,#4              ;1937
0022c4  ebfffffe          BL       __2sprintf
0022c8  e28d0004          ADD      r0,sp,#4              ;1939
0022cc  e51f1bcc          LDR      r1,|L1.5896|
0022d0  e5810000          STR      r0,[r1,#0]            ;1939  ; ftpChDirCmdItem
0022d4  e3a01001          MOV      r1,#1                 ;1940
0022d8  e51f0bd8          LDR      r0,|L1.5896|
0022dc  ebfffffe          BL       actionCmdPure
0022e0  e1a0a000          MOV      r10,r0                ;1940
0022e4  e35a0002          CMP      r10,#2                ;1941
0022e8  1a000005          BNE      |L1.8964|
0022ec  e51f0bec          LDR      r0,|L1.5896|
0022f0  e5901000          LDR      r1,[r0,#0]            ;1943  ; ftpChDirCmdItem
0022f4  e51f0b90          LDR      r0,|L1.5996|
0022f8  ebfffffe          BL       sysprintf
0022fc  e3a00000          MOV      r0,#0                 ;1944
002300  eaffffb5          B        |L1.8668|
                  |L1.8964|
002304  e35a0003          CMP      r10,#3                ;1947
002308  1a000001          BNE      |L1.8980|
00230c  e3a00000          MOV      r0,#0                 ;1949
002310  eaffffb1          B        |L1.8668|
                  |L1.8980|
002314  e1a00000          MOV      r0,r0                 ;1951
002318  e1a00000          MOV      r0,r0                 ;1952
00231c  e1a00000          MOV      r0,r0                 ;1953
                  |L1.8992|
002320  e1a00007          MOV      r0,r7                 ;1960
002324  ebfffffe          BL       FtpDeleteFile
002328  eaffffab          B        |L1.8668|
                  |L1.9004|
                          DCD      ||.text||+0x1938
                  |L1.9008|
                          DCD      ||.text||+0x196c
                  |L1.9012|
                          DCD      ||.text||+0x198c
                  |L1.9016|
                          DCD      ||.text||+0x199c
                  |L1.9020|
                          DCD      ||.text||+0x19d0
                  |L1.9024|
                          DCD      ||.text||+0x19f4
                  |L1.9028|
                          DCD      ||.text||+0x1a18
                  |L1.9032|
002348  220d0a00          DCB      """\r\n",0
                  |L1.9036|
00234c  41542b51          DCB      "AT+QFTPDEL=""",0
002350  46545044
002354  454c3d22
002358  00      
002359  00                DCB      0
00235a  00                DCB      0
00235b  00                DCB      0
                  |L1.9052|
00235c  25732573          DCB      "%s%s%s",0
002360  257300  
002363  00                DCB      0
                  |L1.9060|
                          DCD      DeleteFileName
                  |L1.9064|
                          DCD      ftpDeleteFileCmdItem
                  |L1.9068|
00236c  203d3d20          DCB      " == FtpDeleteFile OK\r\n",0
002370  46747044
002374  656c6574
002378  6546696c
00237c  65204f4b
002380  0d0a00  
002383  00                DCB      0
                  |L1.9092|
002384  203d3d20          DCB      " == FtpDeleteFile ERROR\r\n",0
002388  46747044
00238c  656c6574
002390  6546696c
002394  65204552
002398  524f520d
00239c  0a00    
00239e  00                DCB      0
00239f  00                DCB      0
                          ENDP

                  FtpClientGetFile PROC
;;;1965   
;;;1966   BOOL FtpClientGetFile(char* dirName, char* fileName)
0023a0  e92d43f0          PUSH     {r4-r9,lr}
;;;1967   {
0023a4  e24ddf47          SUB      sp,sp,#0x11c
0023a8  e1a04000          MOV      r4,r0
0023ac  e1a05001          MOV      r5,r1
;;;1968       uint8_t cmdFtpGetInit[256];
;;;1969       
;;;1970       sysprintf(" == FtpClientGetFile [%s][%s]\r\n", dirName, fileName);
0023b0  e1a02005          MOV      r2,r5
0023b4  e1a01004          MOV      r1,r4
0023b8  e28f0f7e          ADR      r0,|L1.9656|
0023bc  ebfffffe          BL       sysprintf
;;;1971   
;;;1972       sprintf((char*)cmdFtpGetInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
0023c0  e1a02004          MOV      r2,r4
0023c4  e51f159c          LDR      r1,|L1.7728|
0023c8  e28d001c          ADD      r0,sp,#0x1c
0023cc  ebfffffe          BL       __2sprintf
;;;1973       //sprintf((char*)cmdFtpGetInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;1974       
;;;1975       //sysprintf(" == init Ftp change dir..., we send [%s]\r\n", cmdFtpGetInit);     
;;;1976       ftpChDirCmdItem.cmd = cmdFtpGetInit;
0023d0  e28d001c          ADD      r0,sp,#0x1c
0023d4  e51f1cd4          LDR      r1,|L1.5896|
0023d8  e5810000          STR      r0,[r1,#0]  ; ftpChDirCmdItem
;;;1977       ModemReturnValue modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
0023dc  e3a01001          MOV      r1,#1
0023e0  e51f0ce0          LDR      r0,|L1.5896|
0023e4  ebfffffe          BL       actionCmdPure
0023e8  e1a06000          MOV      r6,r0
;;;1978       if(modemReval == MODEM_RETURN_ERROR)
0023ec  e3560002          CMP      r6,#2
0023f0  1a000002          BNE      |L1.9216|
;;;1979       {
;;;1980           //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;1981           return FALSE;
0023f4  e3a00000          MOV      r0,#0
                  |L1.9208|
0023f8  e28ddf47          ADD      sp,sp,#0x11c
;;;1982   
;;;1983       }
;;;1984       else if(modemReval == MODEM_RETURN_BREAK)
;;;1985       {
;;;1986   
;;;1987           return FALSE;
;;;1988       }
;;;1989       else
;;;1990       {
;;;1991           
;;;1992           //AT+QFTPGET=\"%s\", "COM:"        
;;;1993           sprintf((char*)cmdFtpGetInit, "AT+QFTPGET=\"%s\", \"COM:\"\r\n", fileName);
;;;1994           //sysprintf(" == init Ftp change dir OK, we send [%s]\r\n", cmdFtpGetInit);  
;;;1995           ftpGetDataCmdItem.cmd = cmdFtpGetInit;
;;;1996           ModemReturnValue modemReval = actionCmdPure(&ftpGetDataCmdItem, PARSER_TYPE_FTP);
;;;1997           if(modemReval == MODEM_RETURN_ERROR)
;;;1998           {
;;;1999               //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;2000               return FALSE;
;;;2001   
;;;2002           }
;;;2003           else if(modemReval == MODEM_RETURN_BREAK)
;;;2004           {
;;;2005   
;;;2006               return FALSE;
;;;2007           }
;;;2008           else
;;;2009           {
;;;2010               //sysprintf(" == Web Get FTP contain OK [%s]\r\n", ATCmdDataTempBuffer(NULL));
;;;2011               uint32_t destLen;
;;;2012               char* str = parserString((char*)ATCmdDataTempBuffer(NULL), "\r\nCONNECT\r\n", "\r\nOK\r\n", &destLen);
;;;2013               if(FileAgentAddData(TARIFF_FILE_SAVE_POSITION, TARIFF_FILE_DIR, fileName, (uint8_t*)str, destLen, FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, FALSE, TRUE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
;;;2014               {
;;;2015                    return TRUE;           
;;;2016               }
;;;2017               return FALSE;
;;;2018           }
;;;2019           
;;;2020       }
;;;2021   }
0023fc  e8bd83f0          POP      {r4-r9,pc}
                  |L1.9216|
002400  e3560003          CMP      r6,#3                 ;1984
002404  1a000001          BNE      |L1.9232|
002408  e3a00000          MOV      r0,#0                 ;1987
00240c  eafffff9          B        |L1.9208|
                  |L1.9232|
002410  e1a02005          MOV      r2,r5                 ;1993
002414  e28f1f6f          ADR      r1,|L1.9688|
002418  e28d001c          ADD      r0,sp,#0x1c           ;1993
00241c  ebfffffe          BL       __2sprintf
002420  e28d001c          ADD      r0,sp,#0x1c           ;1995
002424  e59f11c8          LDR      r1,|L1.9716|
002428  e5810000          STR      r0,[r1,#0]            ;1995  ; ftpGetDataCmdItem
00242c  e3a01003          MOV      r1,#3                 ;1996
002430  e59f01bc          LDR      r0,|L1.9716|
002434  ebfffffe          BL       actionCmdPure
002438  e1a07000          MOV      r7,r0                 ;1996
00243c  e3570002          CMP      r7,#2                 ;1997
002440  1a000001          BNE      |L1.9292|
002444  e3a00000          MOV      r0,#0                 ;2000
002448  eaffffea          B        |L1.9208|
                  |L1.9292|
00244c  e3570003          CMP      r7,#3                 ;2003
002450  1a000001          BNE      |L1.9308|
002454  e3a00000          MOV      r0,#0                 ;2006
002458  eaffffe6          B        |L1.9208|
                  |L1.9308|
00245c  e3a00000          MOV      r0,#0                 ;2012
002460  ebfffffe          BL       ATCmdDataTempBuffer
002464  e1a09000          MOV      r9,r0                 ;2012
002468  e28d3018          ADD      r3,sp,#0x18           ;2012
00246c  e28f2f61          ADR      r2,|L1.9720|
002470  e28f1f62          ADR      r1,|L1.9728|
002474  ebfffffe          BL       parserString
002478  e1a08000          MOV      r8,r0                 ;2012
00247c  e3a00001          MOV      r0,#1                 ;2013
002480  e3a02000          MOV      r2,#0                 ;2013
002484  e58d2004          STR      r2,[sp,#4]            ;2013
002488  e58d000c          STR      r0,[sp,#0xc]          ;2013
00248c  e58d2008          STR      r2,[sp,#8]            ;2013
002490  e58d0010          STR      r0,[sp,#0x10]         ;2013
002494  e59d0018          LDR      r0,[sp,#0x18]         ;2013
002498  e1a03008          MOV      r3,r8                 ;2013
00249c  e1a02005          MOV      r2,r5                 ;2013
0024a0  e28f1f59          ADR      r1,|L1.9740|
0024a4  e58d0000          STR      r0,[sp,#0]            ;2013
0024a8  e3a00000          MOV      r0,#0                 ;2013
0024ac  ebfffffe          BL       FileAgentAddData
0024b0  e3500000          CMP      r0,#0                 ;2013
0024b4  0a000001          BEQ      |L1.9408|
0024b8  e3a00001          MOV      r0,#1                 ;2015
0024bc  eaffffcd          B        |L1.9208|
                  |L1.9408|
0024c0  e3a00000          MOV      r0,#0                 ;2017
0024c4  eaffffcb          B        |L1.9208|
;;;2022   
                          ENDP

                  FtpClientGetFileLite PROC
;;;2023   BOOL FtpClientGetFileLite(char* dirName, char* fileName)
0024c8  e92d43f0          PUSH     {r4-r9,lr}
;;;2024   {
0024cc  e24ddf41          SUB      sp,sp,#0x104
0024d0  e1a04000          MOV      r4,r0
0024d4  e1a05001          MOV      r5,r1
;;;2025       uint8_t cmdFtpGetInit[256];
;;;2026       
;;;2027       sysprintf(" == FtpClientGetFile [%s][%s]\r\n", dirName, fileName);
0024d8  e1a02005          MOV      r2,r5
0024dc  e1a01004          MOV      r1,r4
0024e0  e28f00d0          ADR      r0,|L1.9656|
0024e4  ebfffffe          BL       sysprintf
;;;2028   
;;;2029       sprintf((char*)cmdFtpGetInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
0024e8  e1a02004          MOV      r2,r4
0024ec  e51f16c4          LDR      r1,|L1.7728|
0024f0  e28d0004          ADD      r0,sp,#4
0024f4  ebfffffe          BL       __2sprintf
;;;2030       //sprintf((char*)cmdFtpGetInit, "AT+QFTPCWD=\"/\"\r\n"); 
;;;2031       
;;;2032       //sysprintf(" == init Ftp change dir..., we send [%s]\r\n", cmdFtpGetInit);     
;;;2033       ftpChDirCmdItem.cmd = cmdFtpGetInit;
0024f8  e28d0004          ADD      r0,sp,#4
0024fc  e51f1dfc          LDR      r1,|L1.5896|
002500  e5810000          STR      r0,[r1,#0]  ; ftpChDirCmdItem
;;;2034       ModemReturnValue modemReval = actionCmdPure(&ftpChDirCmdItem, PARSER_TYPE_NORMAL);
002504  e3a01001          MOV      r1,#1
002508  e51f0e08          LDR      r0,|L1.5896|
00250c  ebfffffe          BL       actionCmdPure
002510  e1a06000          MOV      r6,r0
;;;2035       if(modemReval == MODEM_RETURN_ERROR)
002514  e3560002          CMP      r6,#2
002518  1a000002          BNE      |L1.9512|
;;;2036       {
;;;2037           //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;2038           return FALSE;
00251c  e3a00000          MOV      r0,#0
                  |L1.9504|
002520  e28ddf41          ADD      sp,sp,#0x104
;;;2039   
;;;2040       }
;;;2041       else if(modemReval == MODEM_RETURN_BREAK)
;;;2042       {
;;;2043   
;;;2044           return FALSE;
;;;2045       }
;;;2046       else
;;;2047       {
;;;2048           
;;;2049           //AT+QFTPGET=\"%s\", "COM:"        
;;;2050           sprintf((char*)cmdFtpGetInit, "AT+QFTPGET=\"%s\", \"COM:\"\r\n", fileName);
;;;2051           //sysprintf(" == init Ftp change dir OK, we send [%s]\r\n", cmdFtpGetInit);  
;;;2052           ftpGetDataCmdItem.cmd = cmdFtpGetInit;
;;;2053           ModemReturnValue modemReval = actionCmdPure(&ftpGetDataCmdItem, PARSER_TYPE_FTP);
;;;2054           if(modemReval == MODEM_RETURN_ERROR)
;;;2055           {
;;;2056               //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;2057               return FALSE;
;;;2058   
;;;2059           }
;;;2060           else if(modemReval == MODEM_RETURN_BREAK)
;;;2061           {
;;;2062   
;;;2063               return FALSE;
;;;2064           }
;;;2065           else
;;;2066           {
;;;2067               //sysprintf(" == Web Get FTP contain OK [%s]\r\n", ATCmdDataTempBuffer(NULL));
;;;2068               uint32_t destLen;
;;;2069               char* str = parserString((char*)ATCmdDataTempBuffer(NULL), "\r\nCONNECT\r\n", "\r\nOK\r\n", &destLen);
;;;2070               
;;;2071               callFileContent(str,destLen);
;;;2072               
;;;2073               return TRUE;
;;;2074               /*
;;;2075               if(FileAgentAddData(TARIFF_FILE_SAVE_POSITION, TARIFF_FILE_DIR, fileName, (uint8_t*)str, destLen, FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, FALSE, TRUE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
;;;2076               {
;;;2077                    return TRUE;           
;;;2078               }
;;;2079               return FALSE;
;;;2080               */
;;;2081           }
;;;2082           
;;;2083       }
;;;2084   }
002524  e8bd83f0          POP      {r4-r9,pc}
                  |L1.9512|
002528  e3560003          CMP      r6,#3                 ;2041
00252c  1a000001          BNE      |L1.9528|
002530  e3a00000          MOV      r0,#0                 ;2044
002534  eafffff9          B        |L1.9504|
                  |L1.9528|
002538  e1a02005          MOV      r2,r5                 ;2050
00253c  e28f1094          ADR      r1,|L1.9688|
002540  e28d0004          ADD      r0,sp,#4              ;2050
002544  ebfffffe          BL       __2sprintf
002548  e28d0004          ADD      r0,sp,#4              ;2052
00254c  e59f10a0          LDR      r1,|L1.9716|
002550  e5810000          STR      r0,[r1,#0]            ;2052  ; ftpGetDataCmdItem
002554  e3a01003          MOV      r1,#3                 ;2053
002558  e59f0094          LDR      r0,|L1.9716|
00255c  ebfffffe          BL       actionCmdPure
002560  e1a07000          MOV      r7,r0                 ;2053
002564  e3570002          CMP      r7,#2                 ;2054
002568  1a000001          BNE      |L1.9588|
00256c  e3a00000          MOV      r0,#0                 ;2057
002570  eaffffea          B        |L1.9504|
                  |L1.9588|
002574  e3570003          CMP      r7,#3                 ;2060
002578  1a000001          BNE      |L1.9604|
00257c  e3a00000          MOV      r0,#0                 ;2063
002580  eaffffe6          B        |L1.9504|
                  |L1.9604|
002584  e3a00000          MOV      r0,#0                 ;2069
002588  ebfffffe          BL       ATCmdDataTempBuffer
00258c  e1a09000          MOV      r9,r0                 ;2069
002590  e1a0300d          MOV      r3,sp                 ;2069
002594  e28f205c          ADR      r2,|L1.9720|
002598  e28f1060          ADR      r1,|L1.9728|
00259c  ebfffffe          BL       parserString
0025a0  e1a08000          MOV      r8,r0                 ;2069
0025a4  e1a00008          MOV      r0,r8                 ;2071
0025a8  e59d1000          LDR      r1,[sp,#0]            ;2071
0025ac  ebfffffe          BL       callFileContent
0025b0  e3a00001          MOV      r0,#1                 ;2073
0025b4  eaffffd9          B        |L1.9504|
                  |L1.9656|
0025b8  203d3d20          DCB      " == FtpClientGetFile [%s][%s]\r\n",0
0025bc  46747043
0025c0  6c69656e
0025c4  74476574
0025c8  46696c65
0025cc  205b2573
0025d0  5d5b2573
0025d4  5d0d0a00
                  |L1.9688|
0025d8  41542b51          DCB      "AT+QFTPGET=""%s"", ""COM:""\r\n",0
0025dc  46545047
0025e0  45543d22
0025e4  2573222c
0025e8  2022434f
0025ec  4d3a220d
0025f0  0a00    
0025f2  00                DCB      0
0025f3  00                DCB      0
                  |L1.9716|
                          DCD      ftpGetDataCmdItem
                  |L1.9720|
0025f8  0d0a4f4b          DCB      "\r\nOK\r\n",0
0025fc  0d0a00  
0025ff  00                DCB      0
                  |L1.9728|
002600  0d0a434f          DCB      "\r\nCONNECT\r\n",0
002604  4e4e4543
002608  540d0a00
                  |L1.9740|
00260c  313a00            DCB      "1:",0
00260f  00                DCB      0
                          ENDP

                  actionCmdPure2 PROC
;;;2095   
;;;2096   static ModemReturnValue actionCmdPure2(ModemCmdItem* pModemCmdItemTmp, ParserType parserType, int atLeastSize) 
002610  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2097   {
002614  e24dde41          SUB      sp,sp,#0x410
002618  e1a05000          MOV      r5,r0
00261c  e1a0a001          MOV      r10,r1
;;;2098       BOOL reVal =FALSE;
002620  e3a00000          MOV      r0,#0
002624  e58d040c          STR      r0,[sp,#0x40c]
;;;2099       CmdActionValue actionValue;
;;;2100       CmdReq cmdReq = CMD_REQ_NULL;
002628  e58d0408          STR      r0,[sp,#0x408]
;;;2101       TickType_t tickLocalStart = xTaskGetTickCount();
00262c  ebfffffe          BL       xTaskGetTickCount
002630  e58d0404          STR      r0,[sp,#0x404]
;;;2102       int waitTimes = (pModemCmdItemTmp->waitTime) / (pModemCmdItemTmp->checkIntervalTime);
002634  e595000c          LDR      r0,[r5,#0xc]
002638  e5951008          LDR      r1,[r5,#8]
00263c  ebfffffe          BL       __aeabi_uidivmod
002640  e1a09000          MOV      r9,r0
;;;2103       if (pModemCmdItemTmp->cmd != NULL) 
002644  e5950000          LDR      r0,[r5,#0]
002648  e3500000          CMP      r0,#0
00264c  0a000041          BEQ      |L1.10072|
;;;2104       {
;;;2105           QModemFlushBuffer();
002650  ebfffffe          BL       QModemFlushBuffer
;;;2106           
;;;2107           tickLocalStart = xTaskGetTickCount();
002654  ebfffffe          BL       xTaskGetTickCount
002658  e58d0404          STR      r0,[sp,#0x404]
;;;2108           //sysprintf("\r\n !!! [WARNING]  actionCmdPure SEND %d (waitTimes = %d, waitTime = %d, checkIntervalTime = %d )!!!\n", tickLocalStart, waitTimes, pModemCmdItemTmp->waitTime, pModemCmdItemTmp->checkIntervalTime);
;;;2109           #if(0)
;;;2110           //ATCmdSetReceiveDebugFlag(TRUE);
;;;2111           QModemWrite(pModemCmdItemTmp->cmd, strlen((char*) pModemCmdItemTmp->cmd));
;;;2112           //QModemFlushBuffer();
;;;2113           //ATCmdSetReceiveDebugFlag(FALSE);
;;;2114           #else
;;;2115           BOOL continueFlag = TRUE;
00265c  e3a00001          MOV      r0,#1
002660  e58d0400          STR      r0,[sp,#0x400]
;;;2116           uint8_t* buff;
;;;2117           int len;
;;;2118   //        int i = 0;
;;;2119           int total = 0;
002664  e3a00000          MOV      r0,#0
002668  e58d03f8          STR      r0,[sp,#0x3f8]
;;;2120           int leftLen = 0;
00266c  e3a0b000          MOV      r11,#0
;;;2121           int n;
;;;2122           buff = pModemCmdItemTmp->cmd; 
002670  e5950000          LDR      r0,[r5,#0]
002674  e58d03fc          STR      r0,[sp,#0x3fc]
;;;2123           len = strlen((char*) pModemCmdItemTmp->cmd);
002678  e5950000          LDR      r0,[r5,#0]
00267c  ebfffffe          BL       strlen
002680  e1a04000          MOV      r4,r0
;;;2124           for(int i = 0; i< len/WEBPOST_UART_WRITE_SIZE; i++)
002684  e3a08000          MOV      r8,#0
002688  ea000011          B        |L1.9940|
                  |L1.9868|
;;;2125           {
;;;2126               n = QModemWrite(buff + i*WEBPOST_UART_WRITE_SIZE, WEBPOST_UART_WRITE_SIZE);
00268c  e59d13fc          LDR      r1,[sp,#0x3fc]
002690  e0810408          ADD      r0,r1,r8,LSL #8
002694  e3a01c01          MOV      r1,#0x100
002698  ebfffffe          BL       QModemWrite
00269c  e1a06000          MOV      r6,r0
;;;2127               if(n != WEBPOST_UART_WRITE_SIZE)
0026a0  e3560c01          CMP      r6,#0x100
0026a4  0a000004          BEQ      |L1.9916|
;;;2128               {
;;;2129                   sysprintf(" == WEBPOST Client write error 1\r\n");
0026a8  e28f0e1f          ADR      r0,|L1.10400|
0026ac  ebfffffe          BL       sysprintf
;;;2130                   continueFlag = FALSE;
0026b0  e3a00000          MOV      r0,#0
0026b4  e58d0400          STR      r0,[sp,#0x400]
;;;2131                   break;
0026b8  ea000009          B        |L1.9956|
                  |L1.9916|
;;;2132               }
;;;2133               else
;;;2134               {
;;;2135                   total = total + n;
0026bc  e59d03f8          LDR      r0,[sp,#0x3f8]
0026c0  e0800006          ADD      r0,r0,r6
0026c4  e58d03f8          STR      r0,[sp,#0x3f8]
;;;2136                   //sysprintf("\r\n-WP%08d (%d:%d)-\r", total, n, i*WEBPOST_UART_WRITE_SIZE);
;;;2137                   ///*
;;;2138                   //if((i%5) == 0)
;;;2139                   //{//????WDT AND ??? MODEM????
;;;2140                       //sysprintf("\r\n - DELAY - \r\n");
;;;2141                       vTaskDelay(500/portTICK_RATE_MS);
0026c8  e3a00032          MOV      r0,#0x32
0026cc  ebfffffe          BL       vTaskDelay
0026d0  e2888001          ADD      r8,r8,#1              ;2124
                  |L1.9940|
0026d4  e1a01fc4          ASR      r1,r4,#31             ;2124
0026d8  e0841c21          ADD      r1,r4,r1,LSR #24      ;2124
0026dc  e1580441          CMP      r8,r1,ASR #8          ;2124
0026e0  baffffe9          BLT      |L1.9868|
                  |L1.9956|
0026e4  e1a00000          MOV      r0,r0                 ;2131
;;;2142                   //}
;;;2143                   //*/
;;;2144               }
;;;2145           }
;;;2146           //sysprintf("\r\n== [%d:%d] ==\r\n", len/WEBPOST_UART_WRITE_SIZE*WEBPOST_UART_WRITE_SIZE, len-(len/WEBPOST_UART_WRITE_SIZE*WEBPOST_UART_WRITE_SIZE));
;;;2147           if(continueFlag)
0026e8  e59d0400          LDR      r0,[sp,#0x400]
0026ec  e3500000          CMP      r0,#0
0026f0  0a000017          BEQ      |L1.10068|
;;;2148           {
;;;2149               leftLen = len-(len/WEBPOST_UART_WRITE_SIZE*WEBPOST_UART_WRITE_SIZE);
0026f4  e1a00004          MOV      r0,r4
0026f8  e1a01fc4          ASR      r1,r4,#31
0026fc  e0841c21          ADD      r1,r4,r1,LSR #24
002700  e1a01441          ASR      r1,r1,#8
002704  e044b401          SUB      r11,r4,r1,LSL #8
;;;2150               if(leftLen > 0)
002708  e35b0000          CMP      r11,#0
00270c  da000010          BLE      |L1.10068|
;;;2151               {
;;;2152                   n = QModemWrite(buff + len/WEBPOST_UART_WRITE_SIZE*WEBPOST_UART_WRITE_SIZE, leftLen);
002710  e1a08004          MOV      r8,r4
002714  e1a01fc4          ASR      r1,r4,#31
002718  e0841c21          ADD      r1,r4,r1,LSR #24
00271c  e1a01441          ASR      r1,r1,#8
002720  e59d23fc          LDR      r2,[sp,#0x3fc]
002724  e0820401          ADD      r0,r2,r1,LSL #8
002728  e1a0100b          MOV      r1,r11
00272c  ebfffffe          BL       QModemWrite
002730  e1a06000          MOV      r6,r0
;;;2153                   if(n != leftLen)
002734  e156000b          CMP      r6,r11
002738  0a000002          BEQ      |L1.10056|
;;;2154                   {
;;;2155                       sysprintf(" == WEBPOST Client write error 2\r\n");
00273c  e28f0d06          ADR      r0,|L1.10436|
002740  ebfffffe          BL       sysprintf
002744  ea000002          B        |L1.10068|
                  |L1.10056|
;;;2156                       //break;
;;;2157                   }
;;;2158                   else
;;;2159                   {
;;;2160                       total = total + n;
002748  e59d03f8          LDR      r0,[sp,#0x3f8]
00274c  e0800006          ADD      r0,r0,r6
002750  e58d03f8          STR      r0,[sp,#0x3f8]
                  |L1.10068|
;;;2161                       //sysprintf("\r\n-WP%08d (%d:%d)-\r", total, n, leftLen);
;;;2162                   }
;;;2163               }
;;;2164           }
;;;2165           #endif
;;;2166           
;;;2167       }
002754  e1a00000          MOV      r0,r0
                  |L1.10072|
;;;2168       while (waitTimes > 0) 
002758  ea000030          B        |L1.10272|
                  |L1.10076|
;;;2169       {
;;;2170           if(cmdActionBreakFlag)
00275c  e51f0e30          LDR      r0,|L1.6452|
002760  e5d00000          LDRB     r0,[r0,#0]  ; cmdActionBreakFlag
002764  e3500000          CMP      r0,#0
002768  0a000005          BEQ      |L1.10116|
;;;2171           {
;;;2172               sysprintf("\r\n !!! actionCmdPure MODEM_RETURN_BREAK !!!\n");
00276c  e59f0174          LDR      r0,|L1.10472|
002770  ebfffffe          BL       sysprintf
;;;2173               return MODEM_RETURN_BREAK;
002774  e3a00003          MOV      r0,#3
                  |L1.10104|
002778  e28ddb01          ADD      sp,sp,#0x400
00277c  e28dd01c          ADD      sp,sp,#0x1c
;;;2174           }
;;;2175           vTaskDelay((pModemCmdItemTmp->checkIntervalTime)/portTICK_RATE_MS);
;;;2176           int n = QModemRead(readBuff, sizeof (readBuff));      
;;;2177           if (n > 0) 
;;;2178           {
;;;2179               //ATCmdSetReceiveDebugFlag(TRUE);
;;;2180               cmdReq = atCmdProcessReadData2(readBuff, n, parserType, atLeastSize);
;;;2181               //ATCmdSetReceiveDebugFlag(FALSE);
;;;2182               sysprintf("\r\n --TEST---  !!! get cmeReq = %d !!!\n", cmdReq);
;;;2183               if (cmdReq != CMD_REQ_NULL) 
;;;2184               {
;;;2185                   //sysprintf("\r\n !!! get cmeReq = %d !!!\n", cmdReq);
;;;2186                   actionValue = processCmdReqActionPure(pModemCmdItemTmp, cmdReq);
;;;2187                   if(actionValue == CMD_ACTION_OK)
;;;2188                   {
;;;2189                       reVal = TRUE;
;;;2190                       break;
;;;2191                   }
;;;2192                   else if(actionValue == CMD_ACTION_ERROR)
;;;2193                   {
;;;2194                       break;
;;;2195                   }
;;;2196                   else
;;;2197                   {
;;;2198                       //sysprintf("\r\n !!! ++> re get cmeReq !!!\n");
;;;2199                   }
;;;2200                   
;;;2201               }
;;;2202           }
;;;2203           else {
;;;2204               //sysprintf("\r\n~[%d]~\r\n", xTaskGetTickCount() - tickLocalStart);
;;;2205               sysprintf("~");
;;;2206           }        
;;;2207           waitTimes--;
;;;2208       }
;;;2209       
;;;2210       #if(SHOW_ACTION_COMMAND_INFO)
;;;2211       if(strlen((char*) pModemCmdItemTmp->cmd) < 128)
;;;2212       {
;;;2213           sysprintf("\r\n [---- TICK -- (%d)--] - actionCmdPure [%s] -\r\n",  (xTaskGetTickCount() - tickLocalStart)*portTICK_RATE_MS, pModemCmdItemTmp->cmd);
;;;2214       }
;;;2215       else
;;;2216       {
;;;2217           sysprintf("\r\n [---- TICK --(%d)--] - actionCmdPure -\r\n", xTaskGetTickCount() - tickLocalStart);
;;;2218       }
;;;2219       #endif
;;;2220       
;;;2221       if(waitTimes == 0)
;;;2222       {
;;;2223           //terninalPrintf("\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (%d)\r\n", xTaskGetTickCount() - tickLocalStart);
;;;2224           {
;;;2225               char str[1024];
;;;2226               if(strlen((char*)pModemCmdItemTmp->cmd) < (sizeof(str) - strlen("\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (cmd: %s)\r\n")) - 10)
;;;2227               {
;;;2228                   sprintf(str, "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout (cmd: %s)\r\n", pModemCmdItemTmp->cmd);
;;;2229               }
;;;2230               else
;;;2231               {
;;;2232                   sprintf(str, "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout \r\n");
;;;2233               }
;;;2234               terninalPrintf(str);
;;;2235               LoglibPrintf(LOG_TYPE_ERROR, str);
;;;2236           }
;;;2237           //QModemAbortDataMode();
;;;2238           return MODEM_RETURN_ERROR;
;;;2239       }
;;;2240       else
;;;2241       {
;;;2242           if(reVal)
;;;2243               return MODEM_RETURN_OK;
;;;2244           else
;;;2245               return MODEM_RETURN_ERROR;
;;;2246       }
;;;2247   }
002780  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.10116|
002784  e3a0100a          MOV      r1,#0xa               ;2175
002788  e5950008          LDR      r0,[r5,#8]            ;2175
00278c  ebfffffe          BL       __aeabi_uidivmod
002790  e1a06000          MOV      r6,r0                 ;2175
002794  ebfffffe          BL       vTaskDelay
002798  e3a01802          MOV      r1,#0x20000           ;2176
00279c  e59f0148          LDR      r0,|L1.10476|
0027a0  ebfffffe          BL       QModemRead
0027a4  e1a04000          MOV      r4,r0                 ;2176
0027a8  e3540000          CMP      r4,#0                 ;2177
0027ac  da000017          BLE      |L1.10256|
0027b0  e1a0200a          MOV      r2,r10                ;2180
0027b4  e1a01004          MOV      r1,r4                 ;2180
0027b8  e59f012c          LDR      r0,|L1.10476|
0027bc  e59d3418          LDR      r3,[sp,#0x418]        ;2180
0027c0  ebfffffe          BL       atCmdProcessReadData2
0027c4  e58d0408          STR      r0,[sp,#0x408]        ;2180
0027c8  e28f0e12          ADR      r0,|L1.10480|
0027cc  e59d1408          LDR      r1,[sp,#0x408]        ;2182
0027d0  ebfffffe          BL       sysprintf
0027d4  e59d0408          LDR      r0,[sp,#0x408]        ;2183
0027d8  e3500000          CMP      r0,#0                 ;2183
0027dc  0a00000d          BEQ      |L1.10264|
0027e0  e1a00005          MOV      r0,r5                 ;2186
0027e4  e59d1408          LDR      r1,[sp,#0x408]        ;2186
0027e8  ebfffffe          BL       processCmdReqActionPure
0027ec  e1a07000          MOV      r7,r0                 ;2186
0027f0  e3570001          CMP      r7,#1                 ;2187
0027f4  1a000002          BNE      |L1.10244|
0027f8  e3a00001          MOV      r0,#1                 ;2189
0027fc  e58d040c          STR      r0,[sp,#0x40c]        ;2189
002800  ea000008          B        |L1.10280|
                  |L1.10244|
002804  e3570003          CMP      r7,#3                 ;2192
002808  1a000002          BNE      |L1.10264|
00280c  ea000005          B        |L1.10280|
                  |L1.10256|
002810  e28f0c01          ADR      r0,|L1.10520|
002814  ebfffffe          BL       sysprintf
                  |L1.10264|
002818  e2499001          SUB      r9,r9,#1              ;2207
00281c  e1a00000          MOV      r0,r0                 ;2208
                  |L1.10272|
002820  e3590000          CMP      r9,#0                 ;2168
002824  caffffcc          BGT      |L1.10076|
                  |L1.10280|
002828  e1a00000          MOV      r0,r0                 ;2190
00282c  e3590000          CMP      r9,#0                 ;2221
002830  1a000013          BNE      |L1.10372|
002834  e5950000          LDR      r0,[r5,#0]            ;2226
002838  ebfffffe          BL       strlen
00283c  e59f10d8          LDR      r1,|L1.10524|
002840  e1500001          CMP      r0,r1                 ;2226
002844  2a000004          BCS      |L1.10332|
002848  e28f10d0          ADR      r1,|L1.10528|
00284c  e28d0004          ADD      r0,sp,#4              ;2228
002850  e5952000          LDR      r2,[r5,#0]            ;2228
002854  ebfffffe          BL       __2sprintf
002858  ea000002          B        |L1.10344|
                  |L1.10332|
00285c  e28f10fc          ADR      r1,|L1.10592|
002860  e28d0004          ADD      r0,sp,#4              ;2232
002864  ebfffffe          BL       __2sprintf
                  |L1.10344|
002868  e28d0004          ADD      r0,sp,#4              ;2234
00286c  ebfffffe          BL       terninalPrintf
002870  e28d1004          ADD      r1,sp,#4              ;2235
002874  e3a00002          MOV      r0,#2                 ;2235
002878  ebfffffe          BL       LoglibPrintf
00287c  e3a00002          MOV      r0,#2                 ;2238
002880  eaffffbc          B        |L1.10104|
                  |L1.10372|
002884  e59d040c          LDR      r0,[sp,#0x40c]        ;2242
002888  e3500000          CMP      r0,#0                 ;2242
00288c  0a000001          BEQ      |L1.10392|
002890  e3a00001          MOV      r0,#1                 ;2243
002894  eaffffb7          B        |L1.10104|
                  |L1.10392|
002898  e3a00002          MOV      r0,#2                 ;2245
00289c  eaffffb5          B        |L1.10104|
                  |L1.10400|
0028a0  203d3d20          DCB      " == WEBPOST Client write error 1\r\n",0
0028a4  57454250
0028a8  4f535420
0028ac  436c6965
0028b0  6e742077
0028b4  72697465
0028b8  20657272
0028bc  6f722031
0028c0  0d0a00  
0028c3  00                DCB      0
                  |L1.10436|
0028c4  203d3d20          DCB      " == WEBPOST Client write error 2\r\n",0
0028c8  57454250
0028cc  4f535420
0028d0  436c6965
0028d4  6e742077
0028d8  72697465
0028dc  20657272
0028e0  6f722032
0028e4  0d0a00  
0028e7  00                DCB      0
                  |L1.10472|
                          DCD      ||.text||+0x9b8
                  |L1.10476|
                          DCD      readBuff
                  |L1.10480|
0028f0  0d0a202d          DCB      "\r\n --TEST---  !!! get cmeReq = %d !!!\n",0
0028f4  2d544553
0028f8  542d2d2d
0028fc  20202121
002900  21206765
002904  7420636d
002908  65526571
00290c  203d2025
002910  64202121
002914  210a00  
002917  00                DCB      0
                  |L1.10520|
002918  7e00              DCB      "~",0
00291a  00                DCB      0
00291b  00                DCB      0
                  |L1.10524|
                          DCD      0x000003b7
                  |L1.10528|
002920  0d0a205b          DCB      "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout ("
002924  2d2d2d2d
002928  20455252
00292c  4f52202d
002930  2d2d2d5d
002934  202d2061
002938  6374696f
00293c  6e436d64
002940  50757265
002944  20455252
002948  4f522d20
00294c  74696d65
002950  6f757420
002954  28      
002955  636d643a          DCB      "cmd: %s)\r\n",0
002959  20257329
00295d  0d0a00  
                  |L1.10592|
002960  0d0a205b          DCB      "\r\n [---- ERROR ----] - actionCmdPure ERROR- timeout \r"
002964  2d2d2d2d
002968  20455252
00296c  4f52202d
002970  2d2d2d5d
002974  202d2061
002978  6374696f
00297c  6e436d64
002980  50757265
002984  20455252
002988  4f522d20
00298c  74696d65
002990  6f757420
002994  0d      
002995  0a00              DCB      "\n",0
002997  00                DCB      0
                          ENDP

                  parserString2 PROC
;;;2248   static char* parserString2(char* str, uint32_t strRealLen, char* startStr, char* endStr, uint32_t* destLen, int exitType)
002998  e92d4ffe          PUSH     {r1-r11,lr}
;;;2249   {
00299c  e1a05000          MOV      r5,r0
0029a0  e1a08001          MOV      r8,r1
0029a4  e1a06002          MOV      r6,r2
0029a8  e1a07003          MOV      r7,r3
0029ac  e59da030          LDR      r10,[sp,#0x30]
;;;2250       int i;
;;;2251       char* startIndex = NULL;
0029b0  e3a09000          MOV      r9,#0
;;;2252       *destLen = 0;
0029b4  e3a00000          MOV      r0,#0
0029b8  e58a0000          STR      r0,[r10,#0]
;;;2253       sysprintf("parserString : strRealLen = %d, startStr(len=%d) = [%s], endStr(len=%d) = [%s]\r\n", strRealLen, strlen(startStr), startStr, strlen(endStr), endStr);
0029bc  e1a00007          MOV      r0,r7
0029c0  ebfffffe          BL       strlen
0029c4  e1a0b000          MOV      r11,r0
0029c8  e1a00006          MOV      r0,r6
0029cc  ebfffffe          BL       strlen
0029d0  e1a03006          MOV      r3,r6
0029d4  e58d0008          STR      r0,[sp,#8]
0029d8  e1a02000          MOV      r2,r0
0029dc  e1a01008          MOV      r1,r8
0029e0  e59f02a0          LDR      r0,|L1.11400|
0029e4  e58d7004          STR      r7,[sp,#4]
0029e8  e58db000          STR      r11,[sp,#0]
0029ec  ebfffffe          BL       sysprintf
;;;2254       if(strRealLen == 0)
0029f0  e3580000          CMP      r8,#0
0029f4  1a000002          BNE      |L1.10756|
;;;2255           strRealLen = strlen(str);
0029f8  e1a00005          MOV      r0,r5
0029fc  ebfffffe          BL       strlen
002a00  e1a08000          MOV      r8,r0
                  |L1.10756|
;;;2256       
;;;2257       for (i = 0; i < (strRealLen - strlen(endStr))+1; i++)
002a04  e3a04000          MOV      r4,#0
002a08  ea000029          B        |L1.10932|
                  |L1.10764|
;;;2258       {
;;;2259           //sysprintf("parserString [%d]: CHECK\r\n", i);
;;;2260           if(startIndex == 0)
002a0c  e3590000          CMP      r9,#0
002a10  1a000013          BNE      |L1.10852|
;;;2261           {
;;;2262               if(memcmp(str+i, startStr, strlen(startStr)) == 0)
002a14  e1a00006          MOV      r0,r6
002a18  ebfffffe          BL       strlen
002a1c  e1a0b000          MOV      r11,r0
002a20  e0850004          ADD      r0,r5,r4
002a24  e1a0200b          MOV      r2,r11
002a28  e1a01006          MOV      r1,r6
002a2c  ebfffffe          BL       memcmp
002a30  e3500000          CMP      r0,#0
002a34  1a00001d          BNE      |L1.10928|
;;;2263               {
;;;2264                   startIndex = str + i + strlen(startStr);
002a38  e1a00006          MOV      r0,r6
002a3c  ebfffffe          BL       strlen
002a40  e0851004          ADD      r1,r5,r4
002a44  e0809001          ADD      r9,r0,r1
;;;2265                   sysprintf("parserString [%d]: GET START\r\n", i);
002a48  e1a01004          MOV      r1,r4
002a4c  e28f0f8e          ADR      r0,|L1.11404|
002a50  ebfffffe          BL       sysprintf
;;;2266                   i = i + strlen(startStr);
002a54  e1a00006          MOV      r0,r6
002a58  ebfffffe          BL       strlen
002a5c  e0844000          ADD      r4,r4,r0
002a60  ea000012          B        |L1.10928|
                  |L1.10852|
;;;2267               }
;;;2268           }
;;;2269           else
;;;2270           {
;;;2271               if(memcmp(str+i, endStr, strlen(endStr)) == 0)
002a64  e1a00007          MOV      r0,r7
002a68  ebfffffe          BL       strlen
002a6c  e1a0b000          MOV      r11,r0
002a70  e0850004          ADD      r0,r5,r4
002a74  e1a0200b          MOV      r2,r11
002a78  e1a01007          MOV      r1,r7
002a7c  ebfffffe          BL       memcmp
002a80  e3500000          CMP      r0,#0
002a84  1a000009          BNE      |L1.10928|
;;;2272               {
;;;2273                   *destLen = str + i - startIndex;
002a88  e0850004          ADD      r0,r5,r4
002a8c  e0400009          SUB      r0,r0,r9
002a90  e58a0000          STR      r0,[r10,#0]
;;;2274                   sysprintf("parserString [%d]: GET END\r\n", i);
002a94  e1a01004          MOV      r1,r4
002a98  e28f0f83          ADR      r0,|L1.11436|
002a9c  ebfffffe          BL       sysprintf
;;;2275                   if(exitType == 1)
002aa0  e59d0034          LDR      r0,[sp,#0x34]
002aa4  e3500001          CMP      r0,#1
002aa8  1a000000          BNE      |L1.10928|
;;;2276                   {
;;;2277                       break;
002aac  ea000006          B        |L1.10956|
                  |L1.10928|
002ab0  e2844001          ADD      r4,r4,#1              ;2257
                  |L1.10932|
002ab4  e1a00007          MOV      r0,r7                 ;2257
002ab8  ebfffffe          BL       strlen
002abc  e0480000          SUB      r0,r8,r0              ;2257
002ac0  e2800001          ADD      r0,r0,#1              ;2257
002ac4  e1500004          CMP      r0,r4                 ;2257
002ac8  8affffcf          BHI      |L1.10764|
                  |L1.10956|
002acc  e1a00000          MOV      r0,r0
;;;2278                   }
;;;2279               }
;;;2280           }
;;;2281       }
;;;2282       return startIndex;
002ad0  e1a00009          MOV      r0,r9
;;;2283   }
002ad4  e8bd8ffe          POP      {r1-r11,pc}
;;;2284   BOOL FtpClientGetFilePure(char* dirName, char* fileName, uint8_t** dataBuff, uint32_t* dataLen, uint32_t waitTime)
                          ENDP

                  FtpClientGetFilePure PROC
002ad8  e92d4ff0          PUSH     {r4-r11,lr}
;;;2285   {
002adc  e24ddf87          SUB      sp,sp,#0x21c
002ae0  e1a04000          MOV      r4,r0
002ae4  e1a06001          MOV      r6,r1
002ae8  e1a07002          MOV      r7,r2
002aec  e1a08003          MOV      r8,r3
;;;2286       uint8_t cmdFtpGetInit[512];
;;;2287       
;;;2288       terninalPrintf(" == FtpClientGetFilePure [%s][%s]\r\n", dirName, fileName);
002af0  e1a02006          MOV      r2,r6
002af4  e1a01004          MOV      r1,r4
002af8  e28f0f73          ADR      r0,|L1.11468|
002afc  ebfffffe          BL       terninalPrintf
;;;2289   
;;;2290       sprintf((char*)cmdFtpGetInit, "AT+QFTPCWD=\"/%s\"\r\n", dirName);  
002b00  e1a02004          MOV      r2,r4
002b04  e51f1cdc          LDR      r1,|L1.7728|
002b08  e28d001c          ADD      r0,sp,#0x1c
002b0c  ebfffffe          BL       __2sprintf
;;;2291     
;;;2292       ftpChDirCmdItem.cmd = cmdFtpGetInit;
002b10  e28d001c          ADD      r0,sp,#0x1c
002b14  e59f11d4          LDR      r1,|L1.11504|
002b18  e5810000          STR      r0,[r1,#0]  ; ftpChDirCmdItem
;;;2293       ModemReturnValue modemReval = actionCmdPure2(&ftpChDirCmdItem, PARSER_TYPE_NORMAL, 0);
002b1c  e3a02000          MOV      r2,#0
002b20  e3a01001          MOV      r1,#1
002b24  e59f01c4          LDR      r0,|L1.11504|
002b28  ebfffffe          BL       actionCmdPure2
002b2c  e1a09000          MOV      r9,r0
;;;2294       if(modemReval == MODEM_RETURN_ERROR)
002b30  e3590002          CMP      r9,#2
002b34  1a000002          BNE      |L1.11076|
;;;2295       {
;;;2296           //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;2297           return FALSE;
002b38  e3a00000          MOV      r0,#0
                  |L1.11068|
002b3c  e28ddf87          ADD      sp,sp,#0x21c
;;;2298   
;;;2299       }
;;;2300       else if(modemReval == MODEM_RETURN_BREAK)
;;;2301       {
;;;2302   
;;;2303           return FALSE;
;;;2304       }
;;;2305       else
;;;2306       {
;;;2307           sprintf((char*)cmdFtpGetInit, "AT+QFTPSIZE=\"%s\"\r\n", fileName);
;;;2308           sysprintf(" == FtpClientGetFilePure change dir OK, we send [%s]\r\n", cmdFtpGetInit);  
;;;2309           ftpGetSizeCmdItem.cmd = cmdFtpGetInit;
;;;2310           ModemReturnValue modemReval = actionCmdPure2(&ftpGetSizeCmdItem, PARSER_TYPE_NORMAL, 0);
;;;2311           if(modemReval == MODEM_RETURN_ERROR)
;;;2312           {
;;;2313               //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;2314               //QModemAbortDataMode();
;;;2315               return FALSE;
;;;2316   
;;;2317           }
;;;2318           else if(modemReval == MODEM_RETURN_BREAK)
;;;2319           {
;;;2320               //QModemAbortDataMode();
;;;2321               return FALSE;
;;;2322           }
;;;2323           else
;;;2324           {
;;;2325               uint32_t destLen;
;;;2326               int fileSize;
;;;2327               sysprintf(" == FtpClientGetFilePure get size OK [%s]\r\n", ATCmdDataTempBuffer(NULL));                         
;;;2328               char* str = parserString2((char*)ATCmdDataTempBuffer(NULL), 0, "+QFTPSIZE: 0,", "\r\n", &destLen, 0);                        
;;;2329               if(str != NULL)
;;;2330               {
;;;2331                   str[destLen] = 0x0;
;;;2332                   fileSize = atoi (str);
;;;2333                   //sysprintf(" == Get File size: [%s] [%d]\r\n", str, fileSize); 
;;;2334                   terninalPrintf(" == FtpClientGetFilePure [%s][%s] (len = %d) Start download...\r\n", dirName, fileName, fileSize);
;;;2335                   //AT+QFTPGET=\"%s\", "COM:"        
;;;2336                   sprintf((char*)cmdFtpGetInit, "AT+QFTPGET=\"%s\", \"COM:\"\r\n", fileName);
;;;2337                   sysprintf(" == get size OK, we send [%s]\r\n", cmdFtpGetInit);  
;;;2338                   ftpGetDataCmdItem.cmd = cmdFtpGetInit;
;;;2339                   ftpGetDataCmdItem.waitTime = waitTime;
;;;2340                   ModemReturnValue modemReval = actionCmdPure2(&ftpGetDataCmdItem, PARSER_TYPE_FTP, fileSize);
;;;2341                   if(modemReval == MODEM_RETURN_ERROR)
;;;2342                   {
;;;2343                       //sysprintf("\r\n -- timeout (%d) -- *stageIndex = %d \r\n", pModemStageItemTmp->waitTime, *stageIndex);
;;;2344                       QModemAbortDataMode();
;;;2345                       return FALSE;
;;;2346   
;;;2347                   }
;;;2348                   else if(modemReval == MODEM_RETURN_BREAK)
;;;2349                   {
;;;2350                       QModemAbortDataMode();
;;;2351                       return FALSE;
;;;2352                   }
;;;2353                   else
;;;2354                   {
;;;2355                       //sysprintf(" == Web Get FTP contain OK [%s]\r\n", ATCmdDataTempBuffer(NULL));
;;;2356                       uint32_t destLen;
;;;2357                       char* atBuff = (char*)ATCmdDataTempBuffer(&destLen);
;;;2358                       sysprintf(" == Web Get FTP contain OK [ATCmdDataTempBuffer len = %d, strlen = %d]\r\n", destLen, strlen(atBuff));
;;;2359                       char* str = parserString2(atBuff, destLen, "\r\nCONNECT\r\n", "\r\nOK\r\n", &destLen, 0);
;;;2360                       sysprintf(" == Web Get FTP contain OK [parserString len = %d]\r\n", destLen);
;;;2361                       *dataLen = destLen;
;;;2362                       *dataBuff = (uint8_t*)str;
;;;2363                       return TRUE;
;;;2364                   }              
;;;2365               }
;;;2366               else
;;;2367               {
;;;2368                   return FALSE;
;;;2369               }
;;;2370               
;;;2371           }
;;;2372           
;;;2373       }
;;;2374   }
002b40  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.11076|
002b44  e3590003          CMP      r9,#3                 ;2300
002b48  1a000001          BNE      |L1.11092|
002b4c  e3a00000          MOV      r0,#0                 ;2303
002b50  eafffff9          B        |L1.11068|
                  |L1.11092|
002b54  e1a02006          MOV      r2,r6                 ;2307
002b58  e28f1f65          ADR      r1,|L1.11508|
002b5c  e28d001c          ADD      r0,sp,#0x1c           ;2307
002b60  ebfffffe          BL       __2sprintf
002b64  e28d101c          ADD      r1,sp,#0x1c           ;2308
002b68  e28f0f66          ADR      r0,|L1.11528|
002b6c  ebfffffe          BL       sysprintf
002b70  e28d001c          ADD      r0,sp,#0x1c           ;2309
002b74  e59f11c4          LDR      r1,|L1.11584|
002b78  e5810000          STR      r0,[r1,#0]            ;2309  ; ftpGetSizeCmdItem
002b7c  e3a02000          MOV      r2,#0                 ;2310
002b80  e3a01001          MOV      r1,#1                 ;2310
002b84  e59f01b4          LDR      r0,|L1.11584|
002b88  ebfffffe          BL       actionCmdPure2
002b8c  e1a0a000          MOV      r10,r0                ;2310
002b90  e35a0002          CMP      r10,#2                ;2311
002b94  1a000001          BNE      |L1.11168|
002b98  e3a00000          MOV      r0,#0                 ;2315
002b9c  eaffffe6          B        |L1.11068|
                  |L1.11168|
002ba0  e35a0003          CMP      r10,#3                ;2318
002ba4  1a000001          BNE      |L1.11184|
002ba8  e3a00000          MOV      r0,#0                 ;2321
002bac  eaffffe2          B        |L1.11068|
                  |L1.11184|
002bb0  e3a00000          MOV      r0,#0                 ;2327
002bb4  ebfffffe          BL       ATCmdDataTempBuffer
002bb8  e1a0b000          MOV      r11,r0                ;2327
002bbc  e1a0100b          MOV      r1,r11                ;2327
002bc0  e28f0f5f          ADR      r0,|L1.11588|
002bc4  ebfffffe          BL       sysprintf
002bc8  e3a00000          MOV      r0,#0                 ;2328
002bcc  ebfffffe          BL       ATCmdDataTempBuffer
002bd0  e1a0b000          MOV      r11,r0                ;2328
002bd4  e3a00000          MOV      r0,#0                 ;2328
002bd8  e28d1018          ADD      r1,sp,#0x18           ;2328
002bdc  e28f30c4          ADR      r3,|L1.11432|
002be0  e28f2f62          ADR      r2,|L1.11632|
002be4  e58d0004          STR      r0,[sp,#4]            ;2328
002be8  e58d1000          STR      r1,[sp,#0]            ;2328
002bec  e1a01000          MOV      r1,r0                 ;2328
002bf0  e1a0000b          MOV      r0,r11                ;2328
002bf4  ebfffffe          BL       parserString2
002bf8  e1a05000          MOV      r5,r0                 ;2328
002bfc  e3550000          CMP      r5,#0                 ;2329
002c00  0a00008a          BEQ      |L1.11824|
002c04  e3a00000          MOV      r0,#0                 ;2331
002c08  e59d1018          LDR      r1,[sp,#0x18]         ;2331
002c0c  e7c50001          STRB     r0,[r5,r1]            ;2331
002c10  e1a00005          MOV      r0,r5                 ;2332
002c14  ebfffffe          BL       atoi
002c18  e58d0014          STR      r0,[sp,#0x14]         ;2332
002c1c  e1a02006          MOV      r2,r6                 ;2334
002c20  e1a01004          MOV      r1,r4                 ;2334
002c24  e59f0154          LDR      r0,|L1.11648|
002c28  e59d3014          LDR      r3,[sp,#0x14]         ;2334
002c2c  ebfffffe          BL       terninalPrintf
002c30  e1a02006          MOV      r2,r6                 ;2336
002c34  e59f1148          LDR      r1,|L1.11652|
002c38  e28d001c          ADD      r0,sp,#0x1c           ;2336
002c3c  ebfffffe          BL       __2sprintf
002c40  e28d101c          ADD      r1,sp,#0x1c           ;2337
002c44  e28f0f4f          ADR      r0,|L1.11656|
002c48  ebfffffe          BL       sysprintf
002c4c  e28d001c          ADD      r0,sp,#0x1c           ;2338
002c50  e51f1664          LDR      r1,|L1.9716|
002c54  e5810000          STR      r0,[r1,#0]            ;2338  ; ftpGetDataCmdItem
002c58  e59d0240          LDR      r0,[sp,#0x240]        ;2339
002c5c  e581000c          STR      r0,[r1,#0xc]          ;2339  ; ftpGetDataCmdItem
002c60  e3a01003          MOV      r1,#3                 ;2340
002c64  e51f0678          LDR      r0,|L1.9716|
002c68  e59d2014          LDR      r2,[sp,#0x14]         ;2340
002c6c  ebfffffe          BL       actionCmdPure2
002c70  e1a0b000          MOV      r11,r0                ;2340
002c74  e35b0002          CMP      r11,#2                ;2341
002c78  1a00004a          BNE      |L1.11688|
002c7c  ebfffffe          BL       QModemAbortDataMode
002c80  e3a00000          MOV      r0,#0                 ;2345
002c84  eaffffac          B        |L1.11068|
                  |L1.11400|
                          DCD      ||.constdata||+0x2f8
                  |L1.11404|
002c8c  70617273          DCB      "parserString [%d]: GET START"
002c90  65725374
002c94  72696e67
002c98  205b2564
002c9c  5d3a2047
002ca0  45542053
002ca4  54415254
                  |L1.11432|
002ca8  0d0a00            DCB      "\r\n",0
002cab  00                DCB      0
                  |L1.11436|
002cac  70617273          DCB      "parserString [%d]: GET END\r\n",0
002cb0  65725374
002cb4  72696e67
002cb8  205b2564
002cbc  5d3a2047
002cc0  45542045
002cc4  4e440d0a
002cc8  00      
002cc9  00                DCB      0
002cca  00                DCB      0
002ccb  00                DCB      0
                  |L1.11468|
002ccc  203d3d20          DCB      " == FtpClientGetFilePure [%s][%s]\r\n",0
002cd0  46747043
002cd4  6c69656e
002cd8  74476574
002cdc  46696c65
002ce0  50757265
002ce4  205b2573
002ce8  5d5b2573
002cec  5d0d0a00
                  |L1.11504|
                          DCD      ftpChDirCmdItem
                  |L1.11508|
002cf4  41542b51          DCB      "AT+QFTPSIZE=""%s""\r\n",0
002cf8  46545053
002cfc  495a453d
002d00  22257322
002d04  0d0a00  
002d07  00                DCB      0
                  |L1.11528|
002d08  203d3d20          DCB      " == FtpClientGetFilePure change dir OK, we send [%s]\r\n"
002d0c  46747043
002d10  6c69656e
002d14  74476574
002d18  46696c65
002d1c  50757265
002d20  20636861
002d24  6e676520
002d28  64697220
002d2c  4f4b2c20
002d30  77652073
002d34  656e6420
002d38  5b25735d
002d3c  0d0a    
002d3e  00                DCB      0
002d3f  00                DCB      0
                  |L1.11584|
                          DCD      ftpGetSizeCmdItem
                  |L1.11588|
002d44  203d3d20          DCB      " == FtpClientGetFilePure get size OK [%s]\r\n",0
002d48  46747043
002d4c  6c69656e
002d50  74476574
002d54  46696c65
002d58  50757265
002d5c  20676574
002d60  2073697a
002d64  65204f4b
002d68  205b2573
002d6c  5d0d0a00
                  |L1.11632|
002d70  2b514654          DCB      "+QFTPSIZE: 0"
002d74  5053495a
002d78  453a2030
                  |L1.11644|
002d7c  2c00              DCB      ",",0
002d7e  00                DCB      0
002d7f  00                DCB      0
                  |L1.11648|
                          DCD      ||.constdata||+0x34c
                  |L1.11652|
                          DCD      ||.text||+0x25d8
                  |L1.11656|
002d88  203d3d20          DCB      " == get size OK, we send [%s]\r\n",0
002d8c  67657420
002d90  73697a65
002d94  204f4b2c
002d98  20776520
002d9c  73656e64
002da0  205b2573
002da4  5d0d0a00
                  |L1.11688|
002da8  e35b0003          CMP      r11,#3                ;2348
002dac  1a000002          BNE      |L1.11708|
002db0  ebfffffe          BL       QModemAbortDataMode
002db4  e3a00000          MOV      r0,#0                 ;2351
002db8  eaffff5f          B        |L1.11068|
                  |L1.11708|
002dbc  e28d0010          ADD      r0,sp,#0x10           ;2357
002dc0  ebfffffe          BL       ATCmdDataTempBuffer
002dc4  e58d000c          STR      r0,[sp,#0xc]          ;2357
002dc8  e59d000c          LDR      r0,[sp,#0xc]          ;2358
002dcc  ebfffffe          BL       strlen
002dd0  e58d0004          STR      r0,[sp,#4]            ;2358
002dd4  e1a02000          MOV      r2,r0                 ;2358
002dd8  e59f0260          LDR      r0,|L1.12352|
002ddc  e59d1010          LDR      r1,[sp,#0x10]         ;2358
002de0  ebfffffe          BL       sysprintf
002de4  e3a00000          MOV      r0,#0                 ;2359
002de8  e28d1010          ADD      r1,sp,#0x10           ;2359
002dec  e59f3250          LDR      r3,|L1.12356|
002df0  e59f2250          LDR      r2,|L1.12360|
002df4  e58d0004          STR      r0,[sp,#4]            ;2359
002df8  e58d1000          STR      r1,[sp,#0]            ;2359
002dfc  e59d000c          LDR      r0,[sp,#0xc]          ;2359
002e00  e59d1010          LDR      r1,[sp,#0x10]         ;2359
002e04  ebfffffe          BL       parserString2
002e08  e58d0008          STR      r0,[sp,#8]            ;2359
002e0c  e28f0f8e          ADR      r0,|L1.12364|
002e10  e59d1010          LDR      r1,[sp,#0x10]         ;2360
002e14  ebfffffe          BL       sysprintf
002e18  e59d0010          LDR      r0,[sp,#0x10]         ;2361
002e1c  e5880000          STR      r0,[r8,#0]            ;2361
002e20  e59d0008          LDR      r0,[sp,#8]            ;2362
002e24  e5870000          STR      r0,[r7,#0]            ;2362
002e28  e3a00001          MOV      r0,#1                 ;2363
002e2c  eaffff42          B        |L1.11068|
                  |L1.11824|
002e30  e1a00000          MOV      r0,r0                 ;2365
002e34  e3a00000          MOV      r0,#0                 ;2368
002e38  eaffff3f          B        |L1.11068|
;;;2375   
                          ENDP

                  WebPostMessage PROC
;;;2376   
;;;2377   BOOL WebPostMessage(char* url, uint8_t* buff)
002e3c  e92d4ff0          PUSH     {r4-r11,lr}
;;;2378   {
002e40  e24dd08c          SUB      sp,sp,#0x8c
002e44  e1a06000          MOV      r6,r0
002e48  e1a04001          MOV      r4,r1
;;;2379       char cmdWebUrlBuff[64];
;;;2380       uint8_t cmdWebPostBuff[64];
;;;2381       cmdActionBreakFlag = FALSE;
002e4c  e3a00000          MOV      r0,#0
002e50  e59f122c          LDR      r1,|L1.12420|
002e54  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
;;;2382       sprintf((char*)cmdWebUrlBuff, "%sjsonlen=%d", url, strlen((char*)buff));
002e58  e1a00004          MOV      r0,r4
002e5c  ebfffffe          BL       strlen
002e60  e1a05000          MOV      r5,r0
002e64  e1a03005          MOV      r3,r5
002e68  e1a02006          MOV      r2,r6
002e6c  e28f1f85          ADR      r1,|L1.12424|
002e70  e28d004c          ADD      r0,sp,#0x4c
002e74  ebfffffe          BL       __2sprintf
;;;2383       sprintf((char*)cmdWebPostBuff, "AT+QHTTPURL=%d,10\r\n", strlen(cmdWebUrlBuff));    
002e78  e28d004c          ADD      r0,sp,#0x4c
002e7c  ebfffffe          BL       strlen
002e80  e1a05000          MOV      r5,r0
002e84  e1a02005          MOV      r2,r5
002e88  e28f1f82          ADR      r1,|L1.12440|
002e8c  e28d000c          ADD      r0,sp,#0xc
002e90  ebfffffe          BL       __2sprintf
;;;2384       //sysprintf(" == WebPostMessage url = %s(%s): [%s], send [%s]\r\n", url, cmdWebUrlBuff, buff, cmdWebPostBuff);
;;;2385       
;;;2386       webSetUrlInfoCmdItem.cmd = cmdWebPostBuff;
002e94  e28d000c          ADD      r0,sp,#0xc
002e98  e59f120c          LDR      r1,|L1.12460|
002e9c  e5810000          STR      r0,[r1,#0]  ; webSetUrlInfoCmdItem
;;;2387       ModemReturnValue modemReval = actionCmdPure(&webSetUrlInfoCmdItem, PARSER_TYPE_NORMAL);
002ea0  e3a01001          MOV      r1,#1
002ea4  e59f0200          LDR      r0,|L1.12460|
002ea8  ebfffffe          BL       actionCmdPure
002eac  e1a07000          MOV      r7,r0
;;;2388       if(modemReval == MODEM_RETURN_ERROR)
002eb0  e3570002          CMP      r7,#2
002eb4  1a000002          BNE      |L1.11972|
;;;2389       {
;;;2390           return FALSE;
002eb8  e3a00000          MOV      r0,#0
                  |L1.11964|
002ebc  e28dd08c          ADD      sp,sp,#0x8c
;;;2391       }
;;;2392       else if(modemReval == MODEM_RETURN_BREAK)
;;;2393       {
;;;2394           return FALSE;
;;;2395       }
;;;2396       else
;;;2397       {
;;;2398           //sysprintf(" == Web set url info OK\r\n");
;;;2399           webSetUrlContainCmdItem.cmd = (uint8_t*)cmdWebUrlBuff;
;;;2400           ModemReturnValue modemReval = actionCmdPure(&webSetUrlContainCmdItem, PARSER_TYPE_NORMAL);
;;;2401           if(modemReval == MODEM_RETURN_ERROR)
;;;2402           {            
;;;2403               return FALSE;
;;;2404           }
;;;2405           else if(modemReval == MODEM_RETURN_BREAK)
;;;2406           {
;;;2407               return FALSE;
;;;2408           }
;;;2409           else
;;;2410           {
;;;2411               sprintf((char*)cmdWebPostBuff, "AT+QHTTPPOST=%d,10,10\r\n", strlen((char*)buff));   
;;;2412               //sysprintf(" == Web set url contain OK, send [%s]\r\n", cmdWebPostBuff);            
;;;2413               webSetPostInfoCmdItem.cmd = cmdWebPostBuff;
;;;2414               ModemReturnValue modemReval = actionCmdPure(&webSetPostInfoCmdItem, PARSER_TYPE_NORMAL);
;;;2415               if(modemReval == MODEM_RETURN_ERROR)
;;;2416               {
;;;2417                   //QModemAbortDataMode();
;;;2418                   return FALSE;
;;;2419   
;;;2420               }
;;;2421               else if(modemReval == MODEM_RETURN_BREAK)
;;;2422               {
;;;2423                   return FALSE;
;;;2424               }
;;;2425               else
;;;2426               {
;;;2427                  // sysprintf(" == Web set Post Info OK\r\n");
;;;2428                   webSetPostContainCmdItem.cmd = buff;
;;;2429                   ModemReturnValue modemReval = actionCmdPure(&webSetPostContainCmdItem, PARSER_TYPE_NORMAL);
;;;2430                   if(modemReval == MODEM_RETURN_ERROR)
;;;2431                   {
;;;2432                       //QModemAbortDataMode();
;;;2433                       return FALSE;
;;;2434   
;;;2435                   }
;;;2436                   else if(modemReval == MODEM_RETURN_BREAK)
;;;2437                   {
;;;2438                       return FALSE;
;;;2439                   }
;;;2440                   else
;;;2441                   {
;;;2442                       //sysprintf(" == Web set Post contain OK [%s]\r\n", ATCmdDataTempBuffer(NULL)); 
;;;2443                       sprintf((char*)cmdWebPostBuff, "AT+QHTTPREAD=%d\r\n", 100); 
;;;2444                       webGetPostContainCmdItem.cmd = cmdWebPostBuff;
;;;2445                       ModemReturnValue modemReval = actionCmdPure(&webGetPostContainCmdItem, PARSER_TYPE_WEB_POST);
;;;2446                       if(modemReval == MODEM_RETURN_ERROR)
;;;2447                       {
;;;2448                           //QModemAbortDataMode();
;;;2449                           return FALSE;
;;;2450                       }
;;;2451                       else if(modemReval == MODEM_RETURN_BREAK)
;;;2452                       {
;;;2453   
;;;2454                           return FALSE;
;;;2455                       }
;;;2456                       else
;;;2457                       {
;;;2458                           int destLen;
;;;2459                           //sysprintf(" == Web Get Post contain OK [%s]\r\n", ATCmdDataTempBuffer(NULL));                         
;;;2460                           char* str = parserString((char*)ATCmdDataTempBuffer(NULL), "\r\nCONNECT\r\n", "\r\nOK\r\n", &destLen);
;;;2461                           
;;;2462                           if(str != NULL)
;;;2463                           {
;;;2464                               str[destLen] = 0x0;
;;;2465                               if(DataParserWebPostReturnData(str))
;;;2466                               {
;;;2467                               }
;;;2468                           }
;;;2469                       }
;;;2470                   }
;;;2471               }
;;;2472           }
;;;2473       }
;;;2474       return TRUE;
;;;2475   }
002ec0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.11972|
002ec4  e3570003          CMP      r7,#3                 ;2392
002ec8  1a000001          BNE      |L1.11988|
002ecc  e3a00000          MOV      r0,#0                 ;2394
002ed0  eafffff9          B        |L1.11964|
                  |L1.11988|
002ed4  e28d004c          ADD      r0,sp,#0x4c           ;2399
002ed8  e59f11d0          LDR      r1,|L1.12464|
002edc  e5810000          STR      r0,[r1,#0]            ;2399  ; webSetUrlContainCmdItem
002ee0  e3a01001          MOV      r1,#1                 ;2400
002ee4  e59f01c4          LDR      r0,|L1.12464|
002ee8  ebfffffe          BL       actionCmdPure
002eec  e1a08000          MOV      r8,r0                 ;2400
002ef0  e3580002          CMP      r8,#2                 ;2401
002ef4  1a000001          BNE      |L1.12032|
002ef8  e3a00000          MOV      r0,#0                 ;2403
002efc  eaffffee          B        |L1.11964|
                  |L1.12032|
002f00  e3580003          CMP      r8,#3                 ;2405
002f04  1a000001          BNE      |L1.12048|
002f08  e3a00000          MOV      r0,#0                 ;2407
002f0c  eaffffea          B        |L1.11964|
                  |L1.12048|
002f10  e1a00004          MOV      r0,r4                 ;2411
002f14  ebfffffe          BL       strlen
002f18  e1a05000          MOV      r5,r0                 ;2411
002f1c  e1a02005          MOV      r2,r5                 ;2411
002f20  e28f1f63          ADR      r1,|L1.12468|
002f24  e28d000c          ADD      r0,sp,#0xc            ;2411
002f28  ebfffffe          BL       __2sprintf
002f2c  e28d000c          ADD      r0,sp,#0xc            ;2413
002f30  e59f1194          LDR      r1,|L1.12492|
002f34  e5810000          STR      r0,[r1,#0]            ;2413  ; webSetPostInfoCmdItem
002f38  e3a01001          MOV      r1,#1                 ;2414
002f3c  e59f0188          LDR      r0,|L1.12492|
002f40  ebfffffe          BL       actionCmdPure
002f44  e1a09000          MOV      r9,r0                 ;2414
002f48  e3590002          CMP      r9,#2                 ;2415
002f4c  1a000001          BNE      |L1.12120|
002f50  e3a00000          MOV      r0,#0                 ;2418
002f54  eaffffd8          B        |L1.11964|
                  |L1.12120|
002f58  e3590003          CMP      r9,#3                 ;2421
002f5c  1a000001          BNE      |L1.12136|
002f60  e3a00000          MOV      r0,#0                 ;2423
002f64  eaffffd4          B        |L1.11964|
                  |L1.12136|
002f68  e59f0160          LDR      r0,|L1.12496|
002f6c  e5804000          STR      r4,[r0,#0]            ;2428  ; webSetPostContainCmdItem
002f70  e3a01001          MOV      r1,#1                 ;2429
002f74  ebfffffe          BL       actionCmdPure
002f78  e1a0a000          MOV      r10,r0                ;2429
002f7c  e35a0002          CMP      r10,#2                ;2430
002f80  1a000001          BNE      |L1.12172|
002f84  e3a00000          MOV      r0,#0                 ;2433
002f88  eaffffcb          B        |L1.11964|
                  |L1.12172|
002f8c  e35a0003          CMP      r10,#3                ;2436
002f90  1a000001          BNE      |L1.12188|
002f94  e3a00000          MOV      r0,#0                 ;2438
002f98  eaffffc7          B        |L1.11964|
                  |L1.12188|
002f9c  e3a02064          MOV      r2,#0x64              ;2443
002fa0  e28f1f4b          ADR      r1,|L1.12500|
002fa4  e28d000c          ADD      r0,sp,#0xc            ;2443
002fa8  ebfffffe          BL       __2sprintf
002fac  e28d000c          ADD      r0,sp,#0xc            ;2444
002fb0  e59f1130          LDR      r1,|L1.12520|
002fb4  e5810000          STR      r0,[r1,#0]            ;2444  ; webGetPostContainCmdItem
002fb8  e3a01002          MOV      r1,#2                 ;2445
002fbc  e59f0124          LDR      r0,|L1.12520|
002fc0  ebfffffe          BL       actionCmdPure
002fc4  e1a0b000          MOV      r11,r0                ;2445
002fc8  e35b0002          CMP      r11,#2                ;2446
002fcc  1a000001          BNE      |L1.12248|
002fd0  e3a00000          MOV      r0,#0                 ;2449
002fd4  eaffffb8          B        |L1.11964|
                  |L1.12248|
002fd8  e35b0003          CMP      r11,#3                ;2451
002fdc  1a000001          BNE      |L1.12264|
002fe0  e3a00000          MOV      r0,#0                 ;2454
002fe4  eaffffb4          B        |L1.11964|
                  |L1.12264|
002fe8  e3a00000          MOV      r0,#0                 ;2460
002fec  ebfffffe          BL       ATCmdDataTempBuffer
002ff0  e58d0004          STR      r0,[sp,#4]            ;2460
002ff4  e28d3008          ADD      r3,sp,#8              ;2460
002ff8  e59f2044          LDR      r2,|L1.12356|
002ffc  e59f1044          LDR      r1,|L1.12360|
003000  ebfffffe          BL       parserString
003004  e1a05000          MOV      r5,r0                 ;2460
003008  e3550000          CMP      r5,#0                 ;2462
00300c  0a000004          BEQ      |L1.12324|
003010  e3a00000          MOV      r0,#0                 ;2464
003014  e59d1008          LDR      r1,[sp,#8]            ;2464
003018  e7c50001          STRB     r0,[r5,r1]            ;2464
00301c  e1a00005          MOV      r0,r5                 ;2465
003020  ebfffffe          BL       DataParserWebPostReturnData
                  |L1.12324|
003024  e1a00000          MOV      r0,r0                 ;2469
003028  e1a00000          MOV      r0,r0                 ;2470
00302c  e1a00000          MOV      r0,r0                 ;2471
003030  e1a00000          MOV      r0,r0                 ;2472
003034  e1a00000          MOV      r0,r0                 ;2473
003038  e3a00001          MOV      r0,#1                 ;2474
00303c  eaffff9e          B        |L1.11964|
                  |L1.12352|
                          DCD      ||.constdata||+0x390
                  |L1.12356|
                          DCD      ||.text||+0x25f8
                  |L1.12360|
                          DCD      ||.text||+0x2600
                  |L1.12364|
00304c  203d3d20          DCB      " == Web Get FTP contain OK [parserString len = %d]\r\n",0
003050  57656220
003054  47657420
003058  46545020
00305c  636f6e74
003060  61696e20
003064  4f4b205b
003068  70617273
00306c  65725374
003070  72696e67
003074  206c656e
003078  203d2025
00307c  645d0d0a
003080  00      
003081  00                DCB      0
003082  00                DCB      0
003083  00                DCB      0
                  |L1.12420|
                          DCD      cmdActionBreakFlag
                  |L1.12424|
003088  25736a73          DCB      "%sjsonlen=%d",0
00308c  6f6e6c65
003090  6e3d2564
003094  00      
003095  00                DCB      0
003096  00                DCB      0
003097  00                DCB      0
                  |L1.12440|
003098  41542b51          DCB      "AT+QHTTPURL=%d,10\r\n",0
00309c  48545450
0030a0  55524c3d
0030a4  25642c31
0030a8  300d0a00
                  |L1.12460|
                          DCD      webSetUrlInfoCmdItem
                  |L1.12464|
                          DCD      webSetUrlContainCmdItem
                  |L1.12468|
0030b4  41542b51          DCB      "AT+QHTTPPOST=%d,10,10\r\n",0
0030b8  48545450
0030bc  504f5354
0030c0  3d25642c
0030c4  31302c31
0030c8  300d0a00
                  |L1.12492|
                          DCD      webSetPostInfoCmdItem
                  |L1.12496|
                          DCD      webSetPostContainCmdItem
                  |L1.12500|
0030d4  41542b51          DCB      "AT+QHTTPREAD=%d\r\n",0
0030d8  48545450
0030dc  52454144
0030e0  3d25640d
0030e4  0a00    
0030e6  00                DCB      0
0030e7  00                DCB      0
                  |L1.12520|
                          DCD      webGetPostContainCmdItem
                          ENDP

                  FtpClientClose PROC
;;;2476   
;;;2477   BOOL FtpClientClose(void)
0030ec  e92d4010          PUSH     {r4,lr}
;;;2478   {
;;;2479       if(actionCmdPure(&ftpCloseCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
0030f0  e3a01001          MOV      r1,#1
0030f4  e59f0140          LDR      r0,|L1.12860|
0030f8  ebfffffe          BL       actionCmdPure
0030fc  e3500001          CMP      r0,#1
003100  1a000003          BNE      |L1.12564|
;;;2480       {
;;;2481           sysprintf(" == FtpClientClose OK\r\n"); 
003104  e28f0f4d          ADR      r0,|L1.12864|
003108  ebfffffe          BL       sysprintf
;;;2482           return TRUE;
00310c  e3a00001          MOV      r0,#1
                  |L1.12560|
;;;2483       }
;;;2484       else
;;;2485       {
;;;2486           sysprintf(" == FtpClientClose ERROR\r\n"); 
;;;2487           return FALSE;
;;;2488       }
;;;2489   }
003110  e8bd8010          POP      {r4,pc}
                  |L1.12564|
003114  e28f0f4f          ADR      r0,|L1.12888|
003118  ebfffffe          BL       sysprintf
00311c  e3a00000          MOV      r0,#0                 ;2487
003120  eafffffa          B        |L1.12560|
;;;2490   
                          ENDP

                  FtpQueryCsq PROC
;;;2507   
;;;2508   char* FtpQueryCsq(void)
003124  e92d4038          PUSH     {r3-r5,lr}
;;;2509   {
;;;2510       if(actionCmdPure(&networkQueryCsqCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
003128  e3a01001          MOV      r1,#1
00312c  e59f0140          LDR      r0,|L1.12916|
003130  ebfffffe          BL       actionCmdPure
003134  e3500001          CMP      r0,#1
003138  1a000018          BNE      |L1.12704|
;;;2511       {
;;;2512           sysprintf(" == FtpQueryCsq OK [%s]\r\n", ATCmdDataTempBuffer2); 
00313c  e59f1134          LDR      r1,|L1.12920|
003140  e28f0f4d          ADR      r0,|L1.12924|
003144  ebfffffe          BL       sysprintf
;;;2513           int destLen;
;;;2514           char* str = parserString((char*)ATCmdDataTempBuffer2(NULL), "+CSQ: ", ",", &destLen);
003148  e3a00000          MOV      r0,#0
00314c  ebfffffe          BL       ATCmdDataTempBuffer2
003150  e1a05000          MOV      r5,r0
003154  e1a0300d          MOV      r3,sp
003158  e24f2ff9          ADR      r2,|L1.11644|
00315c  e28f1f4d          ADR      r1,|L1.12952|
003160  ebfffffe          BL       parserString
003164  e1a04000          MOV      r4,r0
;;;2515           if(str != NULL)
003168  e3540000          CMP      r4,#0
00316c  0a000007          BEQ      |L1.12688|
;;;2516           {
;;;2517               str[destLen] = 0x0;
003170  e3a00000          MOV      r0,#0
003174  e59d1000          LDR      r1,[sp,#0]
003178  e7c40001          STRB     r0,[r4,r1]
;;;2518               sysprintf(" == FtpQueryCsq RSSI [%s]\r\n", str); 
00317c  e1a01004          MOV      r1,r4
003180  e28f0f46          ADR      r0,|L1.12960|
003184  ebfffffe          BL       sysprintf
;;;2519               return str;                            
003188  e1a00004          MOV      r0,r4
                  |L1.12684|
;;;2520           }        
;;;2521           sysprintf(" == FtpQueryCsq RSSI parser error\r\n"); 
;;;2522           return NULL;
;;;2523       }
;;;2524       else
;;;2525       {
;;;2526           sysprintf(" == FtpQueryCsq ERROR\r\n"); 
;;;2527           return NULL;
;;;2528       }
;;;2529   }
00318c  e8bd8038          POP      {r3-r5,pc}
                  |L1.12688|
003190  e28f0f49          ADR      r0,|L1.12988|
003194  ebfffffe          BL       sysprintf
003198  e3a00000          MOV      r0,#0                 ;2522
00319c  eafffffa          B        |L1.12684|
                  |L1.12704|
0031a0  e1a00000          MOV      r0,r0                 ;2523
0031a4  e28f0f4d          ADR      r0,|L1.13024|
0031a8  ebfffffe          BL       sysprintf
0031ac  e3a00000          MOV      r0,#0                 ;2527
0031b0  eafffff5          B        |L1.12684|
;;;2530   
                          ENDP

                  QModemQueryIPAddress PROC
;;;2531   
;;;2532   BOOL QModemQueryIPAddress(char* ipBuffer)
0031b4  e92d40f8          PUSH     {r3-r7,lr}
;;;2533   {
0031b8  e1a04000          MOV      r4,r0
;;;2534       if (actionCmdPure(&networkQueryIPAddressItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
0031bc  e3a01001          MOV      r1,#1
0031c0  e59f0130          LDR      r0,|L1.13048|
0031c4  ebfffffe          BL       actionCmdPure
0031c8  e3500001          CMP      r0,#1
0031cc  1a00005e          BNE      |L1.13132|
;;;2535       {
;;;2536           sysprintf(" == QModemQueryIPAddress OK [%s]\r\n", ATCmdDataTempBuffer2(NULL));
0031d0  e3a00000          MOV      r0,#0
0031d4  ebfffffe          BL       ATCmdDataTempBuffer2
0031d8  e1a06000          MOV      r6,r0
0031dc  e1a01006          MOV      r1,r6
0031e0  e28f0f45          ADR      r0,|L1.13052|
0031e4  ebfffffe          BL       sysprintf
;;;2537           int destLen;
;;;2538           char* str = parserString((char*)ATCmdDataTempBuffer2(NULL), "\"", "\"", &destLen);
0031e8  e3a00000          MOV      r0,#0
0031ec  ebfffffe          BL       ATCmdDataTempBuffer2
0031f0  e1a06000          MOV      r6,r0
0031f4  e1a0300d          MOV      r3,sp
0031f8  e28f2e12          ADR      r2,|L1.13088|
0031fc  e28f1f47          ADR      r1,|L1.13088|
003200  ebfffffe          BL       parserString
003204  e1a05000          MOV      r5,r0
;;;2539           sysprintf(" == IP Address = [%s], destLen=%d\r\n", str, destLen);
003208  e1a01005          MOV      r1,r5
00320c  e28f0e11          ADR      r0,|L1.13092|
003210  e59d2000          LDR      r2,[sp,#0]
003214  ebfffffe          BL       sysprintf
;;;2540           if (destLen > 0)
003218  e59d0000          LDR      r0,[sp,#0]
00321c  e3500000          CMP      r0,#0
003220  da000048          BLE      |L1.13128|
;;;2541           {
;;;2542               memcpy(ipBuffer, str, destLen);
003224  e1a01005          MOV      r1,r5
003228  e1a00004          MOV      r0,r4
00322c  e59d2000          LDR      r2,[sp,#0]
003230  ebfffffe          BL       __aeabi_memcpy
;;;2543               return TRUE;
003234  e3a00001          MOV      r0,#1
                  |L1.12856|
;;;2544           }
;;;2545       }
;;;2546       return FALSE;
;;;2547   }
003238  e8bd80f8          POP      {r3-r7,pc}
                  |L1.12860|
                          DCD      ftpCloseCmdItem
                  |L1.12864|
003240  203d3d20          DCB      " == FtpClientClose OK\r\n",0
003244  46747043
003248  6c69656e
00324c  74436c6f
003250  7365204f
003254  4b0d0a00
                  |L1.12888|
003258  203d3d20          DCB      " == FtpClientClose ERROR\r\n",0
00325c  46747043
003260  6c69656e
003264  74436c6f
003268  73652045
00326c  52524f52
003270  0d0a00  
003273  00                DCB      0
                  |L1.12916|
                          DCD      networkQueryCsqCmdItem
                  |L1.12920|
                          DCD      ATCmdDataTempBuffer2
                  |L1.12924|
00327c  203d3d20          DCB      " == FtpQueryCsq OK [%s]\r\n",0
003280  46747051
003284  75657279
003288  43737120
00328c  4f4b205b
003290  25735d0d
003294  0a00    
003296  00                DCB      0
003297  00                DCB      0
                  |L1.12952|
003298  2b435351          DCB      "+CSQ: ",0
00329c  3a2000  
00329f  00                DCB      0
                  |L1.12960|
0032a0  203d3d20          DCB      " == FtpQueryCsq RSSI [%s]\r\n",0
0032a4  46747051
0032a8  75657279
0032ac  43737120
0032b0  52535349
0032b4  205b2573
0032b8  5d0d0a00
                  |L1.12988|
0032bc  203d3d20          DCB      " == FtpQueryCsq RSSI parser error\r\n",0
0032c0  46747051
0032c4  75657279
0032c8  43737120
0032cc  52535349
0032d0  20706172
0032d4  73657220
0032d8  6572726f
0032dc  720d0a00
                  |L1.13024|
0032e0  203d3d20          DCB      " == FtpQueryCsq ERROR\r\n",0
0032e4  46747051
0032e8  75657279
0032ec  43737120
0032f0  4552524f
0032f4  520d0a00
                  |L1.13048|
                          DCD      networkQueryIPAddressItem
                  |L1.13052|
0032fc  203d3d20          DCB      " == QModemQueryIPAddress OK [%s]\r\n",0
003300  514d6f64
003304  656d5175
003308  65727949
00330c  50416464
003310  72657373
003314  204f4b20
003318  5b25735d
00331c  0d0a00  
00331f  00                DCB      0
                  |L1.13088|
003320  2200              DCB      """",0
003322  00                DCB      0
003323  00                DCB      0
                  |L1.13092|
003324  203d3d20          DCB      " == IP Address = [%s], destLen=%d\r\n",0
003328  49502041
00332c  64647265
003330  7373203d
003334  205b2573
003338  5d2c2064
00333c  6573744c
003340  656e3d25
003344  640d0a00
                  |L1.13128|
003348  e1a00000          MOV      r0,r0                 ;2545
                  |L1.13132|
00334c  e3a00000          MOV      r0,#0                 ;2546
003350  eaffffb8          B        |L1.12856|
;;;2548   
                          ENDP

                  QModemATCmdTest PROC
;;;2551   
;;;2552   BOOL QModemATCmdTest(void)
003354  e92d4070          PUSH     {r4-r6,lr}
;;;2553   {
;;;2554       BOOL timeOut = 10;//per
003358  e3a0400a          MOV      r4,#0xa
;;;2555       int index = 0;
00335c  e3a05000          MOV      r5,#0
;;;2556       INT32 reVal;
;;;2557       uint8_t buff[54];
;;;2558       cmdActionBreakFlag = FALSE;
003360  e3a00000          MOV      r0,#0
003364  e51f12e8          LDR      r1,|L1.12420|
003368  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
;;;2559       //pUartInterface->setPowerFunc(TRUE);
;;;2560       //vTaskDelay(1000/portTICK_RATE_MS);
;;;2561       sysprintf(" Finish power on\r\n");
00336c  e28f0e2a          ADR      r0,|L1.13844|
003370  ebfffffe          BL       sysprintf
;;;2562       //char retval[100];
;;;2563       while(timeOut > 0)
003374  ea000016          B        |L1.13268|
                  |L1.13176|
;;;2564       {
;;;2565           sysprintf(" timeOut == %d\r\n",timeOut); 
003378  e1a01004          MOV      r1,r4
00337c  e28f0fa9          ADR      r0,|L1.13864|
003380  ebfffffe          BL       sysprintf
;;;2566           if(actionCmdPure(&networkAtTestCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
003384  e3a01001          MOV      r1,#1
003388  e59f02ac          LDR      r0,|L1.13884|
00338c  ebfffffe          BL       actionCmdPure
003390  e3500001          CMP      r0,#1
003394  1a000001          BNE      |L1.13216|
;;;2567           {
;;;2568               return TRUE;
003398  e3a00001          MOV      r0,#1
                  |L1.13212|
;;;2569           }
;;;2570           else
;;;2571           {
;;;2572               timeOut--;
;;;2573           }
;;;2574   #if (ENABLE_BURNIN_TESTER)
;;;2575           if (!EnabledBurninTestMode())
;;;2576   #endif
;;;2577           {
;;;2578               EPDDrawString(TRUE,".",X_POS_MSG+150+(9-timeOut)*25,Y_POS_MSG);
;;;2579           }
;;;2580       }
;;;2581       sysprintf(" == QModemATCmdTest ERROR\r\n"); 
;;;2582       //pUartInterface->setPowerFunc(FALSE);
;;;2583       cmdActionBreakFlag = TRUE;
;;;2584       return FALSE;
;;;2585   }
00339c  e8bd8070          POP      {r4-r6,pc}
                  |L1.13216|
0033a0  e2440001          SUB      r0,r4,#1              ;2572
0033a4  e20040ff          AND      r4,r0,#0xff           ;2572
0033a8  ebfffffe          BL       EnabledBurninTestMode
0033ac  e3500000          CMP      r0,#0                 ;2575
0033b0  1a000007          BNE      |L1.13268|
0033b4  e2640009          RSB      r0,r4,#9              ;2578
0033b8  e0801180          ADD      r1,r0,r0,LSL #3       ;2578
0033bc  e0810200          ADD      r0,r1,r0,LSL #4       ;2578
0033c0  e2802faf          ADD      r2,r0,#0x2bc          ;2578
0033c4  e59f3274          LDR      r3,|L1.13888|
0033c8  e28f1f9d          ADR      r1,|L1.13892|
0033cc  e3a00001          MOV      r0,#1                 ;2578
0033d0  ebfffffe          BL       EPDDrawString
                  |L1.13268|
0033d4  e3540000          CMP      r4,#0                 ;2563
0033d8  caffffe6          BGT      |L1.13176|
0033dc  e28f0f99          ADR      r0,|L1.13896|
0033e0  ebfffffe          BL       sysprintf
0033e4  e3a00001          MOV      r0,#1                 ;2583
0033e8  e51f136c          LDR      r1,|L1.12420|
0033ec  e5c10000          STRB     r0,[r1,#0]            ;2583  ; cmdActionBreakFlag
0033f0  e3a00000          MOV      r0,#0                 ;2584
0033f4  eaffffe8          B        |L1.13212|
;;;2586   
                          ENDP

                  QModemGetVer PROC
;;;2587   BOOL QModemGetVer(char* reStr)
0033f8  e92d47f0          PUSH     {r4-r10,lr}
;;;2588   {
0033fc  e1a08000          MOV      r8,r0
;;;2589       BOOL time = 2;//10;
003400  e3a05002          MOV      r5,#2
;;;2590       char* pch1= malloc(100);
003404  e3a00064          MOV      r0,#0x64
003408  ebfffffe          BL       malloc
00340c  e1a09000          MOV      r9,r0
;;;2591       char* pch2;
;;;2592       char tempchr[100] ;  //= malloc(100);
;;;2593       int charCounter;
;;;2594       int tryCounter = 0;
003410  e3a07000          MOV      r7,#0
;;;2595       //int pchindex;
;;;2596       cmdActionBreakFlag = FALSE;
003414  e3a00000          MOV      r0,#0
003418  e51f139c          LDR      r1,|L1.12420|
00341c  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
;;;2597           while(time > 0)
003420  ea00002e          B        |L1.13536|
                  |L1.13348|
;;;2598       {
;;;2599           //terninalPrintf(" timeOut == %d\r\n",time); 
;;;2600           if(actionCmdPure(&readVersionCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
003424  e3a01001          MOV      r1,#1
003428  e59f0234          LDR      r0,|L1.13924|
00342c  ebfffffe          BL       actionCmdPure
003430  e3500001          CMP      r0,#1
003434  1a000027          BNE      |L1.13528|
;;;2601           {   
;;;2602               /*
;;;2603               memcpy(tempchr,readBuff,100);
;;;2604               //terninalPrintf("tempchr=%s\r\n",tempchr); 
;;;2605               pch1 = (char*) memchr(tempchr,'\n',100);
;;;2606               //terninalPrintf("pch1=%s\r\npch1AD=%d\r\n",pch1,pch1);
;;;2607               memcpy(tempchr,pch1+1,99);
;;;2608               //terninalPrintf("tempchr=%s\r\ntempchrAD=%d\r\n",tempchr,tempchr);
;;;2609               pch2 = (char*) memchr(tempchr,'\n',100);
;;;2610               //terninalPrintf("pch2=%s\r\npch2AD=%d\r\n",pch2,pch2);
;;;2611               memset (pch2,'\0',1);
;;;2612               memcpy(reStr,tempchr,pch2-tempchr);
;;;2613               //terninalPrintf("reStr=%s\r\n",reStr);
;;;2614               free(pch1);*/
;;;2615               int j = 0;
003438  e3a04000          MOV      r4,#0
;;;2616               charCounter=0;
00343c  e3a06000          MOV      r6,#0
;;;2617               for(int i=0;i<50;i++)
003440  e3a00000          MOV      r0,#0
003444  ea00000a          B        |L1.13428|
                  |L1.13384|
;;;2618               {
;;;2619                   
;;;2620                   if(readBuff[j++] == 0x0A)
003448  e1a01004          MOV      r1,r4
00344c  e2844001          ADD      r4,r4,#1
003450  e51f2b6c          LDR      r2,|L1.10476|
003454  e7d21001          LDRB     r1,[r2,r1]
003458  e351000a          CMP      r1,#0xa
00345c  1a000003          BNE      |L1.13424|
;;;2621                   {   
;;;2622                       charCounter++;
003460  e2866001          ADD      r6,r6,#1
;;;2623                       if(charCounter == 2)
003464  e3560002          CMP      r6,#2
003468  1a000000          BNE      |L1.13424|
;;;2624                           break;
00346c  ea000002          B        |L1.13436|
                  |L1.13424|
003470  e2800001          ADD      r0,r0,#1              ;2617
                  |L1.13428|
003474  e3500032          CMP      r0,#0x32              ;2617
003478  bafffff2          BLT      |L1.13384|
                  |L1.13436|
00347c  e1a00000          MOV      r0,r0
;;;2625                   }
;;;2626                      
;;;2627               }
;;;2628               
;;;2629   
;;;2630               //terninalPrintf("readBuff[%d]=%02x=%c\r\n",j+2,readBuff[j+2],readBuff[j+2]);
;;;2631               //terninalPrintf("readBuff[%d]=%02x=%c\r\n",j+3,readBuff[j+3],readBuff[j+3]);
;;;2632               tryCounter++;
003480  e2877001          ADD      r7,r7,#1
;;;2633               if((readBuff[j+2] == 'O') && (readBuff[j+3] == 'K'))
003484  e51f0ba0          LDR      r0,|L1.10476|
003488  e2841002          ADD      r1,r4,#2
00348c  e7d00001          LDRB     r0,[r0,r1]
003490  e350004f          CMP      r0,#0x4f
003494  1a00000a          BNE      |L1.13508|
003498  e51f0bb4          LDR      r0,|L1.10476|
00349c  e2841003          ADD      r1,r4,#3
0034a0  e7d00001          LDRB     r0,[r0,r1]
0034a4  e350004b          CMP      r0,#0x4b
0034a8  1a000005          BNE      |L1.13508|
;;;2634               {
;;;2635                   
;;;2636                   memcpy(reStr,readBuff,100);
0034ac  e3a02064          MOV      r2,#0x64
0034b0  e51f1bcc          LDR      r1,|L1.10476|
0034b4  e1a00008          MOV      r0,r8
0034b8  ebfffffe          BL       __aeabi_memcpy
;;;2637                   return TRUE;
0034bc  e3a00001          MOV      r0,#1
                  |L1.13504|
;;;2638               }
;;;2639               else if(tryCounter == 5)
;;;2640               {
;;;2641                  return FALSE; 
;;;2642               }
;;;2643           }
;;;2644           else
;;;2645           {
;;;2646               time--;
;;;2647           }
;;;2648       }
;;;2649       cmdActionBreakFlag = TRUE;
;;;2650       return FALSE;
;;;2651       
;;;2652       
;;;2653       
;;;2654       
;;;2655       
;;;2656       
;;;2657       
;;;2658       uint8_t buff[100];
;;;2659       int index = 0;
;;;2660       QModemWrite((uint8_t*)"AT+GMR\r\n",strlen((char*)"AT+GMR\r\n"));
;;;2661       int timeOut = 3000;
;;;2662       int reVal = 0;
;;;2663       while(timeOut > 0)
;;;2664       {
;;;2665           //pUartInterface->setPowerFunc(FALSE);
;;;2666           //memcpy(retval,buff,16);
;;;2667           reVal = pUartInterface->readFunc((uint8_t*)buff + index, sizeof(buff)-index);
;;;2668           index = index + reVal;
;;;2669           if(index >= 33)
;;;2670           {
;;;2671               /*
;;;2672               for(int i=0;i<index;i++)
;;;2673                   terninalPrintf("%c",buff[i]);
;;;2674               terninalPrintf("\n");*/
;;;2675               int destLen = 0;
;;;2676               char* tmp = parserString((char*)buff, "AT+GMR\r\r\n", "\r\n\r\nOK\r\n", &destLen);
;;;2677               tmp[destLen] = 0x0;
;;;2678               //memcpy(reStr,tmp,34);
;;;2679               for(int i=0;i<=destLen;i++)
;;;2680               {
;;;2681                   *(reStr+i) = *(tmp + i);
;;;2682               }
;;;2683               sysprintf(">%s< %p %p %p\n",reStr,reStr,tmp,buff);
;;;2684               return TRUE;
;;;2685               /*
;;;2686               sysprintf(" == QModemATCmdTest OK\r\n"); 
;;;2687               
;;;2688               if(index>=32)
;;;2689               {
;;;2690                   memcpy(reStr,buff,32);
;;;2691                   terninalPrintf("[%d]\n",(reVal));
;;;2692                   for(int i=0;i<sizeof(reStr);i++)
;;;2693                       terninalPrintf("%c",reStr[i]);
;;;2694                   terninalPrintf("\n");
;;;2695                   return TRUE;
;;;2696               }
;;;2697               */
;;;2698               vTaskDelay(2000/portTICK_RATE_MS);
;;;2699           }
;;;2700           vTaskDelay(10/portTICK_RATE_MS);
;;;2701           timeOut--;
;;;2702       }
;;;2703       sysprintf("timeout\n");
;;;2704       return FALSE;
;;;2705   }
0034c0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.13508|
0034c4  e3570005          CMP      r7,#5                 ;2639
0034c8  1a000001          BNE      |L1.13524|
0034cc  e3a00000          MOV      r0,#0                 ;2641
0034d0  eafffffa          B        |L1.13504|
                  |L1.13524|
0034d4  ea000001          B        |L1.13536|
                  |L1.13528|
0034d8  e2450001          SUB      r0,r5,#1              ;2646
0034dc  e20050ff          AND      r5,r0,#0xff           ;2646
                  |L1.13536|
0034e0  e3550000          CMP      r5,#0                 ;2597
0034e4  caffffce          BGT      |L1.13348|
0034e8  e3a00001          MOV      r0,#1                 ;2649
0034ec  e51f1470          LDR      r1,|L1.12420|
0034f0  e5c10000          STRB     r0,[r1,#0]            ;2649  ; cmdActionBreakFlag
0034f4  e3a00000          MOV      r0,#0                 ;2650
0034f8  eafffff0          B        |L1.13504|
;;;2706   
                          ENDP

                  QModemGetSIMNumber PROC
;;;2707   
;;;2708   BOOL QModemGetSIMNumber(char* SIMStr)
0034fc  e92d47f0          PUSH     {r4-r10,lr}
;;;2709   {
003500  e1a08000          MOV      r8,r0
;;;2710       BOOL time = 2;//10;
003504  e3a06002          MOV      r6,#2
;;;2711       //char* pch1= malloc(100);
;;;2712       //char* pch2;
;;;2713       char tempchr[100] ;  //= malloc(100);
;;;2714       int charCounter;
;;;2715       int tryCounter = 0;
003508  e3a07000          MOV      r7,#0
;;;2716       //int pchindex;
;;;2717       cmdActionBreakFlag = FALSE;
00350c  e3a00000          MOV      r0,#0
003510  e51f1494          LDR      r1,|L1.12420|
003514  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
;;;2718       while(time > 0)
003518  ea000036          B        |L1.13816|
                  |L1.13596|
;;;2719       {
;;;2720           //terninalPrintf(" timeOut == %d\r\n",time); 
;;;2721          // if(actionCmdPure(&readVersionCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
;;;2722           if(actionCmdPure(&readSIMNumberCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
00351c  e3a01001          MOV      r1,#1
003520  e59f0140          LDR      r0,|L1.13928|
003524  ebfffffe          BL       actionCmdPure
003528  e3500001          CMP      r0,#1
00352c  1a00002f          BNE      |L1.13808|
;;;2723           
;;;2724           {
;;;2725   
;;;2726               int j = 0;
003530  e3a05000          MOV      r5,#0
;;;2727               charCounter=0;
003534  e3a09000          MOV      r9,#0
;;;2728               for(int i=0;i<50;i++)
003538  e3a00000          MOV      r0,#0
00353c  ea00000e          B        |L1.13692|
                  |L1.13632|
;;;2729               {
;;;2730                   
;;;2731                   if(readBuff[i] == 0x2B)  // Real Plus
003540  e51f1c5c          LDR      r1,|L1.10476|
003544  e7d11000          LDRB     r1,[r1,r0]
003548  e351002b          CMP      r1,#0x2b
00354c  1a000002          BNE      |L1.13660|
;;;2732                       readBuff[i] = 0xD3;
003550  e3a010d3          MOV      r1,#0xd3
003554  e51f2c70          LDR      r2,|L1.10476|
003558  e7c21000          STRB     r1,[r2,r0]
                  |L1.13660|
;;;2733                   
;;;2734                   //if(readBuff[j++] == 0x0A)
;;;2735                   if(readBuff[j++] == 0x00)
00355c  e1a01005          MOV      r1,r5
003560  e2855001          ADD      r5,r5,#1
003564  e51f2c80          LDR      r2,|L1.10476|
003568  e7d21001          LDRB     r1,[r2,r1]
00356c  e3510000          CMP      r1,#0
003570  1a000000          BNE      |L1.13688|
;;;2736                   {   
;;;2737                       //charCounter++;
;;;2738                       //if(charCounter == 2)
;;;2739                           break;
003574  ea000002          B        |L1.13700|
                  |L1.13688|
003578  e2800001          ADD      r0,r0,#1              ;2728
                  |L1.13692|
00357c  e3500032          CMP      r0,#0x32              ;2728
003580  baffffee          BLT      |L1.13632|
                  |L1.13700|
003584  e1a00000          MOV      r0,r0
;;;2740                   }
;;;2741                      
;;;2742               }
;;;2743               
;;;2744   
;;;2745               //terninalPrintf("readBuff[%d]=%02x=%c\r\n",j+2,readBuff[j+2],readBuff[j+2]);
;;;2746               //terninalPrintf("readBuff[%d]=%02x=%c\r\n",j+3,readBuff[j+3],readBuff[j+3]);
;;;2747               tryCounter++;
003588  e2877001          ADD      r7,r7,#1
;;;2748               for(int k=6;k>0;k--)
00358c  e3a04006          MOV      r4,#6
003590  ea000013          B        |L1.13796|
                  |L1.13716|
;;;2749               {
;;;2750                   //if((readBuff[j+2] == 'O') && (readBuff[j+3] == 'K'))
;;;2751                       //terninalPrintf("readBuff[%d]=%02x=%c\r\n",j-k,readBuff[j-k],readBuff[j-k]);
;;;2752                       //terninalPrintf("readBuff[%d]=%02x=%c\r\n",j-k+1,readBuff[j-k+1],readBuff[j-k+1]);
;;;2753                   //if((readBuff[j-k] == 'O') && (readBuff[j-k+1] == 'K'))
;;;2754                   if((readBuff[j-k] == 0x0D) && (readBuff[j-k+1] == 0x0A))
003594  e0450004          SUB      r0,r5,r4
003598  e51f1cb4          LDR      r1,|L1.10476|
00359c  e7d10000          LDRB     r0,[r1,r0]
0035a0  e350000d          CMP      r0,#0xd
0035a4  1a000009          BNE      |L1.13776|
0035a8  e0450004          SUB      r0,r5,r4
0035ac  e2800001          ADD      r0,r0,#1
0035b0  e7d10000          LDRB     r0,[r1,r0]
0035b4  e350000a          CMP      r0,#0xa
0035b8  1a000004          BNE      |L1.13776|
;;;2755                   {
;;;2756   
;;;2757    
;;;2758                       memcpy(SIMStr,readBuff,100);
0035bc  e3a02064          MOV      r2,#0x64
0035c0  e1a00008          MOV      r0,r8
0035c4  ebfffffe          BL       __aeabi_memcpy
;;;2759                       return TRUE;
0035c8  e3a00001          MOV      r0,#1
                  |L1.13772|
;;;2760                   }
;;;2761                   else if(tryCounter == 5)
;;;2762                   {
;;;2763                      return FALSE; 
;;;2764                   }
;;;2765               }
;;;2766           }
;;;2767           else
;;;2768           {
;;;2769               time--;
;;;2770           }
;;;2771       }
;;;2772       cmdActionBreakFlag = TRUE;
;;;2773       return FALSE;
;;;2774   }
0035cc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.13776|
0035d0  e3570005          CMP      r7,#5                 ;2761
0035d4  1a000001          BNE      |L1.13792|
0035d8  e3a00000          MOV      r0,#0                 ;2763
0035dc  eafffffa          B        |L1.13772|
                  |L1.13792|
0035e0  e2444001          SUB      r4,r4,#1              ;2748
                  |L1.13796|
0035e4  e3540000          CMP      r4,#0                 ;2748
0035e8  caffffe9          BGT      |L1.13716|
0035ec  ea000001          B        |L1.13816|
                  |L1.13808|
0035f0  e2460001          SUB      r0,r6,#1              ;2769
0035f4  e20060ff          AND      r6,r0,#0xff           ;2769
                  |L1.13816|
0035f8  e3560000          CMP      r6,#0                 ;2718
0035fc  caffffc6          BGT      |L1.13596|
003600  e3a00001          MOV      r0,#1                 ;2772
003604  e51f1588          LDR      r1,|L1.12420|
003608  e5c10000          STRB     r0,[r1,#0]            ;2772  ; cmdActionBreakFlag
00360c  e3a00000          MOV      r0,#0                 ;2773
003610  eaffffed          B        |L1.13772|
                  |L1.13844|
003614  2046696e          DCB      " Finish power on\r\n",0
003618  69736820
00361c  706f7765
003620  72206f6e
003624  0d0a00  
003627  00                DCB      0
                  |L1.13864|
003628  2074696d          DCB      " timeOut == %d\r\n",0
00362c  654f7574
003630  203d3d20
003634  25640d0a
003638  00      
003639  00                DCB      0
00363a  00                DCB      0
00363b  00                DCB      0
                  |L1.13884|
                          DCD      networkAtTestCmdItem
                  |L1.13888|
                          DCD      0x00000162
                  |L1.13892|
003644  2e00              DCB      ".",0
003646  00                DCB      0
003647  00                DCB      0
                  |L1.13896|
003648  203d3d20          DCB      " == QModemATCmdTest ERROR\r\n",0
00364c  514d6f64
003650  656d4154
003654  436d6454
003658  65737420
00365c  4552524f
003660  520d0a00
                  |L1.13924|
                          DCD      readVersionCmdItem
                  |L1.13928|
                          DCD      readSIMNumberCmdItem
                          ENDP

                  QModemSetHighSpeed PROC
;;;2775   
;;;2776   BOOL QModemSetHighSpeed(void)
00366c  e92d4010          PUSH     {r4,lr}
;;;2777   {
;;;2778       cmdActionBreakFlag = FALSE;
003670  e3a00000          MOV      r0,#0
003674  e51f15f8          LDR      r1,|L1.12420|
003678  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
;;;2779       pUartInterface->setPowerFunc(TRUE);
00367c  e59f03a0          LDR      r0,|L1.14884|
003680  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
003684  e5901010          LDR      r1,[r0,#0x10]
003688  e3a00001          MOV      r0,#1
00368c  e12fff31          BLX      r1
;;;2780       vTaskDelay(10000/portTICK_RATE_MS);
003690  e3a00ffa          MOV      r0,#0x3e8
003694  ebfffffe          BL       vTaskDelay
;;;2781       if(actionCmdPure(&networkSetHighSpeedCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
003698  e3a01001          MOV      r1,#1
00369c  e59f0384          LDR      r0,|L1.14888|
0036a0  ebfffffe          BL       actionCmdPure
0036a4  e3500001          CMP      r0,#1
0036a8  1a000005          BNE      |L1.14020|
;;;2782       {
;;;2783           sysprintf(" == QModemSetHighSpeed OK\r\n"); 
0036ac  e28f0fde          ADR      r0,|L1.14892|
0036b0  ebfffffe          BL       sysprintf
;;;2784           //QModemSetPower(FALSE);
;;;2785           cmdActionBreakFlag = TRUE;
0036b4  e3a00001          MOV      r0,#1
0036b8  e51f163c          LDR      r1,|L1.12420|
0036bc  e5c10000          STRB     r0,[r1,#0]  ; cmdActionBreakFlag
                  |L1.14016|
;;;2786           return TRUE;
;;;2787       }
;;;2788       else
;;;2789       {
;;;2790           sysprintf(" == QModemSetHighSpeed ERROR\r\n"); 
;;;2791           //QModemSetPower(FALSE);
;;;2792           cmdActionBreakFlag = TRUE;
;;;2793           return FALSE;
;;;2794       }
;;;2795   }
0036c0  e8bd8010          POP      {r4,pc}
                  |L1.14020|
0036c4  e28f0fdf          ADR      r0,|L1.14920|
0036c8  ebfffffe          BL       sysprintf
0036cc  e3a00001          MOV      r0,#1                 ;2792
0036d0  e51f1654          LDR      r1,|L1.12420|
0036d4  e5c10000          STRB     r0,[r1,#0]            ;2792  ; cmdActionBreakFlag
0036d8  e3a00000          MOV      r0,#0                 ;2793
0036dc  eafffff7          B        |L1.14016|
;;;2796   
                          ENDP

                  QModemSetSleep PROC
;;;2797   BOOL QModemSetSleep(void)
0036e0  e92d4010          PUSH     {r4,lr}
;;;2798   {
;;;2799       if(actionCmdPureEx(&sleepCmdItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
0036e4  e3a01001          MOV      r1,#1
0036e8  e59f0378          LDR      r0,|L1.14952|
0036ec  ebfffffe          BL       actionCmdPureEx
0036f0  e3500001          CMP      r0,#1
0036f4  1a000001          BNE      |L1.14080|
;;;2800           return TRUE;
0036f8  e3a00001          MOV      r0,#1
                  |L1.14076|
;;;2801       else
;;;2802           return FALSE;
;;;2803   }
0036fc  e8bd8010          POP      {r4,pc}
                  |L1.14080|
003700  e3a00000          MOV      r0,#0                 ;2802
003704  eafffffc          B        |L1.14076|
;;;2804   
                          ENDP

                  QModemSetQurccfg PROC
;;;2805   void QModemSetQurccfg(void)
003708  e92d4010          PUSH     {r4,lr}
;;;2806   {
;;;2807       actionCmdPure(&qurccfgCmdItem, PARSER_TYPE_NORMAL);
00370c  e3a01001          MOV      r1,#1
003710  e59f0354          LDR      r0,|L1.14956|
003714  ebfffffe          BL       actionCmdPure
;;;2808   }
003718  e8bd8010          POP      {r4,pc}
;;;2809   void QModemSetTestCmd(void)
                          ENDP

                  QModemSetTestCmd PROC
00371c  e52de004          PUSH     {lr}
;;;2810   {
003720  e24dd054          SUB      sp,sp,#0x54
;;;2811       ModemCmdItem CmdItem1 = {(uint8_t*)CHECK_FLOW_CTL_ON_CMD,    networkAtTestCmdRegAction, 500, 2000}; 
003724  e59f0344          LDR      r0,|L1.14960|
003728  e890000e          LDM      r0,{r1-r3}  ; <Data15>, <Data15>, <Data15>, <Data15>
00372c  e590000c          LDR      r0,[r0,#0xc]
003730  e58d0050          STR      r0,[sp,#0x50]
003734  e28d0044          ADD      r0,sp,#0x44
003738  e880000e          STM      r0,{r1-r3}
;;;2812       ModemCmdItem CmdItem2 = {(uint8_t*)CHECK_ECHO_OFF_CMD,    networkAtTestCmdRegAction, 500, 2000};
00373c  e59f1330          LDR      r1,|L1.14964|
003740  e891000c          LDM      r1,{r2,r3}  ; <Data16>, <Data16>, <Data16>, <Data16>
003744  e5910008          LDR      r0,[r1,#8]
003748  e591100c          LDR      r1,[r1,#0xc]
00374c  e58d003c          STR      r0,[sp,#0x3c]
003750  e58d1040          STR      r1,[sp,#0x40]
003754  e58d2034          STR      r2,[sp,#0x34]
003758  e58d3038          STR      r3,[sp,#0x38]
;;;2813       ModemCmdItem CmdItem3 = {(uint8_t*)CHECK_EXIST_CMD,    networkAtTestCmdRegAction, 500, 2000};
00375c  e59f3314          LDR      r3,|L1.14968|
003760  e8930006          LDM      r3,{r1,r2}  ; <Data17>, <Data17>, <Data17>, <Data17>
003764  e5930008          LDR      r0,[r3,#8]
003768  e593300c          LDR      r3,[r3,#0xc]
00376c  e58d002c          STR      r0,[sp,#0x2c]
003770  e58d3030          STR      r3,[sp,#0x30]
003774  e58d1024          STR      r1,[sp,#0x24]
003778  e58d2028          STR      r2,[sp,#0x28]
;;;2814       ModemCmdItem CmdItem4 = {(uint8_t*)CHECK_PIN_CMD,    networkAtTestCmdRegAction, 500, 2000};
00377c  e59f32f8          LDR      r3,|L1.14972|
003780  e893000f          LDM      r3,{r0-r3}  ; <Data18>, <Data18>, <Data18>, <Data18>
003784  e28dc014          ADD      r12,sp,#0x14
003788  e88c000f          STM      r12,{r0-r3}
;;;2815       ModemCmdItem CmdItem5 = {(uint8_t*)CFUN_CMD,    networkAtTestCmdRegAction, 500, 2000};
00378c  e59f32ec          LDR      r3,|L1.14976|
003790  e8930006          LDM      r3,{r1,r2}  ; <Data19>, <Data19>, <Data19>, <Data19>
003794  e5930008          LDR      r0,[r3,#8]
003798  e593300c          LDR      r3,[r3,#0xc]
00379c  e58d000c          STR      r0,[sp,#0xc]
0037a0  e58d3010          STR      r3,[sp,#0x10]
0037a4  e98d0006          STMIB    sp,{r1,r2}
;;;2816   /*
;;;2817                                               {DIALUP_FLOW_CTL_ON_STAGE_INDEX,    (uint8_t*)CHECK_FLOW_CTL_ON_CMD,           flowCtlOnCmdRegAction,        500, 10*1000, 30},
;;;2818                                               {DIALUP_ECHO_OFF_STAGE_INDEX,       (uint8_t*)CHECK_ECHO_OFF_CMD,               echooffCmdRegAction,        500, 2000, 30},
;;;2819                                               {DIALUP_EXIST_STAGE_INDEX,          (uint8_t*)CHECK_EXIST_CMD,                  existCmdRegAction,          1000, 2000, 30},
;;;2820                                               {DIALUP_PIN_STAGE_INDEX,            (uint8_t*)CHECK_PIN_CMD,                    pinCmdRegAction,            2000, 2000,  2},
;;;2821       */
;;;2822       
;;;2823       //actionCmdPure(&CmdItem1 , PARSER_TYPE_NORMAL);
;;;2824       //actionCmdPure(&CmdItem2 , PARSER_TYPE_NORMAL);
;;;2825       //actionCmdPure(&CmdItem3 , PARSER_TYPE_NORMAL);
;;;2826       //actionCmdPure(&CmdItem4 , PARSER_TYPE_NORMAL);
;;;2827       actionCmdPure(&CmdItem5 , PARSER_TYPE_NORMAL);
0037a8  e3a01001          MOV      r1,#1
0037ac  e28d0004          ADD      r0,sp,#4
0037b0  ebfffffe          BL       actionCmdPure
;;;2828   }
0037b4  e28dd054          ADD      sp,sp,#0x54
0037b8  e49df004          POP      {pc}
;;;2829   
                          ENDP

                  QModemQuerySIMInitStatus PROC
;;;2830   
;;;2831   BOOL QModemQuerySIMInitStatus(int* para)
0037bc  e92d4010          PUSH     {r4,lr}
;;;2832   {
0037c0  e24dd040          SUB      sp,sp,#0x40
0037c4  e1a04000          MOV      r4,r0
;;;2833       char rbuff[50];
;;;2834       int retnlen;
;;;2835       
;;;2836       //if (actionCmdPure(&networkQuerySIMInitStatusItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
;;;2837       if (actionCmdPurePro(&networkQuerySIMInitStatusItem, PARSER_TYPE_NORMAL,rbuff,sizeof(rbuff),&retnlen,10) == MODEM_RETURN_OK) 
0037c8  e3a0000a          MOV      r0,#0xa
0037cc  e28d1008          ADD      r1,sp,#8
0037d0  e3a03032          MOV      r3,#0x32
0037d4  e58d0004          STR      r0,[sp,#4]
0037d8  e58d1000          STR      r1,[sp,#0]
0037dc  e28d200c          ADD      r2,sp,#0xc
0037e0  e3a01001          MOV      r1,#1
0037e4  e59f0298          LDR      r0,|L1.14980|
0037e8  ebfffffe          BL       actionCmdPurePro
0037ec  e3500001          CMP      r0,#1
0037f0  1a000017          BNE      |L1.14420|
;;;2838       {    
;;;2839           if(retnlen>10)
0037f4  e59d0008          LDR      r0,[sp,#8]
0037f8  e350000a          CMP      r0,#0xa
0037fc  da000014          BLE      |L1.14420|
;;;2840           {
;;;2841               if((rbuff[retnlen-3] == 'K') && (rbuff[retnlen-4] == 'O') )
003800  e59d0008          LDR      r0,[sp,#8]
003804  e2400003          SUB      r0,r0,#3
003808  e28d100c          ADD      r1,sp,#0xc
00380c  e7d10000          LDRB     r0,[r1,r0]
003810  e350004b          CMP      r0,#0x4b
003814  1a00000e          BNE      |L1.14420|
003818  e59d0008          LDR      r0,[sp,#8]
00381c  e2400004          SUB      r0,r0,#4
003820  e28d100c          ADD      r1,sp,#0xc
003824  e7d10000          LDRB     r0,[r1,r0]
003828  e350004f          CMP      r0,#0x4f
00382c  1a000008          BNE      |L1.14420|
;;;2842               {
;;;2843                   *para = rbuff[retnlen-9] & 0x07;
003830  e59d0008          LDR      r0,[sp,#8]
003834  e2400009          SUB      r0,r0,#9
003838  e28d100c          ADD      r1,sp,#0xc
00383c  e7d10000          LDRB     r0,[r1,r0]
003840  e2000007          AND      r0,r0,#7
003844  e5840000          STR      r0,[r4,#0]
;;;2844                   return TRUE;
003848  e3a00001          MOV      r0,#1
                  |L1.14412|
00384c  e28dd040          ADD      sp,sp,#0x40
;;;2845               }
;;;2846           }
;;;2847   
;;;2848       }
;;;2849       return FALSE;
;;;2850   }
003850  e8bd8010          POP      {r4,pc}
                  |L1.14420|
003854  e3a00000          MOV      r0,#0                 ;2849
003858  eafffffb          B        |L1.14412|
;;;2851   
                          ENDP

                  QModemQueryNTP PROC
;;;2852   
;;;2853   BOOL QModemQueryNTP(UINT32* rYear,UINT32* rMonth,UINT32* rDay,UINT32* rHour,UINT32* rMinute,UINT32* rSecond)
00385c  e92d43f0          PUSH     {r4-r9,lr}
;;;2854   {
003860  e24dd074          SUB      sp,sp,#0x74
003864  e1a04000          MOV      r4,r0
003868  e1a05001          MOV      r5,r1
00386c  e1a06002          MOV      r6,r2
003870  e1a07003          MOV      r7,r3
003874  e1cd89d0          LDRD     r8,r9,[sp,#0x90]
;;;2855       char rbuff[100];
;;;2856       int retnlen;
;;;2857       
;;;2858       //actionCmdPure(&networkNTPEnableWriteItem, PARSER_TYPE_NORMAL);
;;;2859       //actionCmdPure(&networkNTPEnableReadItem, PARSER_TYPE_NORMAL);
;;;2860       //if (actionCmdPure(&networkQueryNTPWriteItem, PARSER_TYPE_NORMAL) == MODEM_RETURN_OK)
;;;2861       //{
;;;2862           //if (actionCmdPurePro(&networkQueryNTPReadItem, PARSER_TYPE_NORMAL,rbuff,sizeof(rbuff),&retnlen, 100) == MODEM_RETURN_OK)
;;;2863           if (actionCmdPurePro(&networkQueryNTPItem, PARSER_TYPE_NORMAL,rbuff,sizeof(rbuff),&retnlen, 100) == MODEM_RETURN_OK)    
003878  e3a00064          MOV      r0,#0x64
00387c  e28d100c          ADD      r1,sp,#0xc
003880  e58d0004          STR      r0,[sp,#4]
003884  e1a03000          MOV      r3,r0
003888  e58d1000          STR      r1,[sp,#0]
00388c  e28d2010          ADD      r2,sp,#0x10
003890  e3a01001          MOV      r1,#1
003894  e59f01ec          LDR      r0,|L1.14984|
003898  ebfffffe          BL       actionCmdPurePro
00389c  e3500001          CMP      r0,#1
0038a0  1a000079          BNE      |L1.14988|
;;;2864           { 
;;;2865               //actionCmdPurePro(&networkQueryNTPReadItem, PARSER_TYPE_NORMAL,rbuff,sizeof(rbuff),&retnlen, 50);
;;;2866               if(retnlen>32)
0038a4  e59d000c          LDR      r0,[sp,#0xc]
0038a8  e3500020          CMP      r0,#0x20
0038ac  da000076          BLE      |L1.14988|
;;;2867               {
;;;2868                   if((rbuff[retnlen-3] == 'K') && (rbuff[retnlen-4] == 'O') )
0038b0  e59d000c          LDR      r0,[sp,#0xc]
0038b4  e2400003          SUB      r0,r0,#3
0038b8  e28d1010          ADD      r1,sp,#0x10
0038bc  e7d10000          LDRB     r0,[r1,r0]
0038c0  e350004b          CMP      r0,#0x4b
0038c4  1a000070          BNE      |L1.14988|
0038c8  e59d000c          LDR      r0,[sp,#0xc]
0038cc  e2400004          SUB      r0,r0,#4
0038d0  e28d1010          ADD      r1,sp,#0x10
0038d4  e7d10000          LDRB     r0,[r1,r0]
0038d8  e350004f          CMP      r0,#0x4f
0038dc  1a00006a          BNE      |L1.14988|
;;;2869                   {
;;;2870                       *rYear      = (rbuff[retnlen-31] & 0x0F)*10 + (rbuff[retnlen-30] & 0x0F);
0038e0  e59d000c          LDR      r0,[sp,#0xc]
0038e4  e240001e          SUB      r0,r0,#0x1e
0038e8  e28d1010          ADD      r1,sp,#0x10
0038ec  e7d10000          LDRB     r0,[r1,r0]
0038f0  e200000f          AND      r0,r0,#0xf
0038f4  e59d100c          LDR      r1,[sp,#0xc]
0038f8  e241101f          SUB      r1,r1,#0x1f
0038fc  e28d2010          ADD      r2,sp,#0x10
003900  e7d21001          LDRB     r1,[r2,r1]
003904  e201100f          AND      r1,r1,#0xf
003908  e0811101          ADD      r1,r1,r1,LSL #2
00390c  e0800081          ADD      r0,r0,r1,LSL #1
003910  e5840000          STR      r0,[r4,#0]
;;;2871                       *rMonth     = (rbuff[retnlen-28] & 0x0F)*10 + (rbuff[retnlen-27] & 0x0F);
003914  e59d000c          LDR      r0,[sp,#0xc]
003918  e240001b          SUB      r0,r0,#0x1b
00391c  e28d1010          ADD      r1,sp,#0x10
003920  e7d10000          LDRB     r0,[r1,r0]
003924  e200000f          AND      r0,r0,#0xf
003928  e59d100c          LDR      r1,[sp,#0xc]
00392c  e241101c          SUB      r1,r1,#0x1c
003930  e28d2010          ADD      r2,sp,#0x10
003934  e7d21001          LDRB     r1,[r2,r1]
003938  e201100f          AND      r1,r1,#0xf
00393c  e0811101          ADD      r1,r1,r1,LSL #2
003940  e0800081          ADD      r0,r0,r1,LSL #1
003944  e5850000          STR      r0,[r5,#0]
;;;2872                       *rDay       = (rbuff[retnlen-25] & 0x0F)*10 + (rbuff[retnlen-24] & 0x0F);
003948  e59d000c          LDR      r0,[sp,#0xc]
00394c  e2400018          SUB      r0,r0,#0x18
003950  e28d1010          ADD      r1,sp,#0x10
003954  e7d10000          LDRB     r0,[r1,r0]
003958  e200000f          AND      r0,r0,#0xf
00395c  e59d100c          LDR      r1,[sp,#0xc]
003960  e2411019          SUB      r1,r1,#0x19
003964  e28d2010          ADD      r2,sp,#0x10
003968  e7d21001          LDRB     r1,[r2,r1]
00396c  e201100f          AND      r1,r1,#0xf
003970  e0811101          ADD      r1,r1,r1,LSL #2
003974  e0800081          ADD      r0,r0,r1,LSL #1
003978  e5860000          STR      r0,[r6,#0]
;;;2873                       *rHour      = (rbuff[retnlen-22] & 0x0F)*10 + (rbuff[retnlen-21] & 0x0F);
00397c  e59d000c          LDR      r0,[sp,#0xc]
003980  e2400015          SUB      r0,r0,#0x15
003984  e28d1010          ADD      r1,sp,#0x10
003988  e7d10000          LDRB     r0,[r1,r0]
00398c  e200000f          AND      r0,r0,#0xf
003990  e59d100c          LDR      r1,[sp,#0xc]
003994  e2411016          SUB      r1,r1,#0x16
003998  e28d2010          ADD      r2,sp,#0x10
00399c  e7d21001          LDRB     r1,[r2,r1]
0039a0  e201100f          AND      r1,r1,#0xf
0039a4  e0811101          ADD      r1,r1,r1,LSL #2
0039a8  e0800081          ADD      r0,r0,r1,LSL #1
0039ac  e5870000          STR      r0,[r7,#0]
;;;2874                       *rMinute    = (rbuff[retnlen-19] & 0x0F)*10 + (rbuff[retnlen-18] & 0x0F);
0039b0  e59d000c          LDR      r0,[sp,#0xc]
0039b4  e2400012          SUB      r0,r0,#0x12
0039b8  e28d1010          ADD      r1,sp,#0x10
0039bc  e7d10000          LDRB     r0,[r1,r0]
0039c0  e200000f          AND      r0,r0,#0xf
0039c4  e59d100c          LDR      r1,[sp,#0xc]
0039c8  e2411013          SUB      r1,r1,#0x13
0039cc  e28d2010          ADD      r2,sp,#0x10
0039d0  e7d21001          LDRB     r1,[r2,r1]
0039d4  e201100f          AND      r1,r1,#0xf
0039d8  e0811101          ADD      r1,r1,r1,LSL #2
0039dc  e0800081          ADD      r0,r0,r1,LSL #1
0039e0  e5880000          STR      r0,[r8,#0]
;;;2875                       *rSecond    = (rbuff[retnlen-16] & 0x0F)*10 + (rbuff[retnlen-15] & 0x0F);
0039e4  e59d000c          LDR      r0,[sp,#0xc]
0039e8  e240000f          SUB      r0,r0,#0xf
0039ec  e28d1010          ADD      r1,sp,#0x10
0039f0  e7d10000          LDRB     r0,[r1,r0]
0039f4  e200000f          AND      r0,r0,#0xf
0039f8  e59d100c          LDR      r1,[sp,#0xc]
0039fc  e2411010          SUB      r1,r1,#0x10
003a00  e28d2010          ADD      r2,sp,#0x10
003a04  e7d21001          LDRB     r1,[r2,r1]
003a08  e201100f          AND      r1,r1,#0xf
003a0c  e0811101          ADD      r1,r1,r1,LSL #2
003a10  e0800081          ADD      r0,r0,r1,LSL #1
003a14  e5890000          STR      r0,[r9,#0]
;;;2876                       return TRUE;
003a18  e3a00001          MOV      r0,#1
                  |L1.14876|
003a1c  e28dd074          ADD      sp,sp,#0x74
;;;2877                   }
;;;2878               }
;;;2879           }
;;;2880       //}
;;;2881       return FALSE;
;;;2882   }
003a20  e8bd83f0          POP      {r4-r9,pc}
                  |L1.14884|
                          DCD      pUartInterface
                  |L1.14888|
                          DCD      networkSetHighSpeedCmdItem
                  |L1.14892|
003a2c  203d3d20          DCB      " == QModemSetHighSpeed OK\r\n",0
003a30  514d6f64
003a34  656d5365
003a38  74486967
003a3c  68537065
003a40  6564204f
003a44  4b0d0a00
                  |L1.14920|
003a48  203d3d20          DCB      " == QModemSetHighSpeed ERROR\r\n",0
003a4c  514d6f64
003a50  656d5365
003a54  74486967
003a58  68537065
003a5c  65642045
003a60  52524f52
003a64  0d0a00  
003a67  00                DCB      0
                  |L1.14952|
                          DCD      sleepCmdItem
                  |L1.14956|
                          DCD      qurccfgCmdItem
                  |L1.14960|
                          DCD      ||.constdata||
                  |L1.14964|
                          DCD      ||.constdata||+0x10
                  |L1.14968|
                          DCD      ||.constdata||+0x20
                  |L1.14972|
                          DCD      ||.constdata||+0x30
                  |L1.14976|
                          DCD      ||.constdata||+0x40
                  |L1.14980|
                          DCD      networkQuerySIMInitStatusItem
                  |L1.14984|
                          DCD      networkQueryNTPItem
                  |L1.14988|
003a8c  e3a00000          MOV      r0,#0                 ;2881
003a90  eaffffe1          B        |L1.14876|
;;;2883   
                          ENDP

                  QModemTerminal PROC
;;;2884   
;;;2885   BOOL QModemTerminal(char* CmdString,char* FBCmdStr,int FBCmdSize,int* retlen,int waitime)
003a94  e92d41f0          PUSH     {r4-r8,lr}
;;;2886   {
003a98  e24dd018          SUB      sp,sp,#0x18
003a9c  e1a04000          MOV      r4,r0
003aa0  e1a05001          MOV      r5,r1
003aa4  e1a06002          MOV      r6,r2
003aa8  e1a07003          MOV      r7,r3
003aac  e59d8030          LDR      r8,[sp,#0x30]
;;;2887       
;;;2888       ModemCmdItem tempCmdItem = {(uint8_t*)CmdString, networkQueryIPAddressRegAction, 300, 1500};
003ab0  e59f302c          LDR      r3,|L1.15076|
003ab4  e893000f          LDM      r3,{r0-r3}  ; <Data20>, <Data20>, <Data20>, <Data20>
003ab8  e1cd00f8          STRD     r0,r1,[sp,#8]
003abc  e1cd21f0          STRD     r2,r3,[sp,#0x10]
003ac0  e58d4008          STR      r4,[sp,#8]
;;;2889       actionCmdPurePro(&tempCmdItem, PARSER_TYPE_NORMAL,FBCmdStr,FBCmdSize,retlen, waitime);
003ac4  e1a03006          MOV      r3,r6
003ac8  e1a02005          MOV      r2,r5
003acc  e3a01001          MOV      r1,#1
003ad0  e88d0180          STM      sp,{r7,r8}
003ad4  e28d0008          ADD      r0,sp,#8
003ad8  ebfffffe          BL       actionCmdPurePro
003adc  e28dd018          ADD      sp,sp,#0x18
;;;2890       
;;;2891   }
003ae0  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.15076|
                          DCD      ||.constdata||+0x50

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  readBuff
                          %        131072
                  DeleteFileName
                          %        100

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      ||.conststring||
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                          DCD      ||.conststring||+0xd
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                          DCD      ||.conststring||+0x14
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                          DCD      ||.conststring||+0x1f
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                          DCD      ||.conststring||+0x217
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                          DCD      0x00000000
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
000060  0d0a205b          DCB      0x0d,0x0a,0x20,0x5b
000064  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000068  20455252          DCB      0x20,0x45,0x52,0x52
00006c  4f52202d          DCB      0x4f,0x52,0x20,0x2d
000070  2d2d2d5d          DCB      0x2d,0x2d,0x2d,0x5d
000074  2074696d          DCB      0x20,0x74,0x69,0x6d
000078  656f7574          DCB      0x65,0x6f,0x75,0x74
00007c  20287761          DCB      0x20,0x28,0x77,0x61
000080  69747469          DCB      0x69,0x74,0x74,0x69
000084  6d653a25          DCB      0x6d,0x65,0x3a,0x25
000088  642c2072          DCB      0x64,0x2c,0x20,0x72
00008c  65747279          DCB      0x65,0x74,0x72,0x79
000090  54696d65          DCB      0x54,0x69,0x6d,0x65
000094  733a2564          DCB      0x73,0x3a,0x25,0x64
000098  29202d2d          DCB      0x29,0x20,0x2d,0x2d
00009c  202a7374          DCB      0x20,0x2a,0x73,0x74
0000a0  61676549          DCB      0x61,0x67,0x65,0x49
0000a4  6e646578          DCB      0x6e,0x64,0x65,0x78
0000a8  203d2025          DCB      0x20,0x3d,0x20,0x25
0000ac  64205b25          DCB      0x64,0x20,0x5b,0x25
0000b0  735d200d          DCB      0x73,0x5d,0x20,0x0d
0000b4  0a000000          DCB      0x0a,0x00,0x00,0x00
0000b8  0d0a205b          DCB      0x0d,0x0a,0x20,0x5b
0000bc  494e464f          DCB      0x49,0x4e,0x46,0x4f
0000c0  524d4154          DCB      0x52,0x4d,0x41,0x54
0000c4  494f4e5d          DCB      0x49,0x4f,0x4e,0x5d
0000c8  202d2d3e          DCB      0x20,0x2d,0x2d,0x3e
0000cc  20514d6f          DCB      0x20,0x51,0x4d,0x6f
0000d0  64656d46          DCB      0x64,0x65,0x6d,0x46
0000d4  7470436c          DCB      0x74,0x70,0x43,0x6c
0000d8  69656e74          DCB      0x69,0x65,0x6e,0x74
0000dc  53746172          DCB      0x53,0x74,0x61,0x72
0000e0  74205b46          DCB      0x74,0x20,0x5b,0x46
0000e4  54505f53          DCB      0x54,0x50,0x5f,0x53
0000e8  45545f50          DCB      0x45,0x54,0x5f,0x50
0000ec  44505f53          DCB      0x44,0x50,0x5f,0x53
0000f0  54414745          DCB      0x54,0x41,0x47,0x45
0000f4  5f494e44          DCB      0x5f,0x49,0x4e,0x44
0000f8  45585d21          DCB      0x45,0x58,0x5d,0x21
0000fc  210a0d00          DCB      0x21,0x0a,0x0d,0x00
000100  0d0a205b          DCB      0x0d,0x0a,0x20,0x5b
000104  494e464f          DCB      0x49,0x4e,0x46,0x4f
000108  524d4154          DCB      0x52,0x4d,0x41,0x54
00010c  494f4e5d          DCB      0x49,0x4f,0x4e,0x5d
000110  202d2d3e          DCB      0x20,0x2d,0x2d,0x3e
000114  20514d6f          DCB      0x20,0x51,0x4d,0x6f
000118  64656d46          DCB      0x64,0x65,0x6d,0x46
00011c  7470436c          DCB      0x74,0x70,0x43,0x6c
000120  69656e74          DCB      0x69,0x65,0x6e,0x74
000124  53746172          DCB      0x53,0x74,0x61,0x72
000128  74205b46          DCB      0x74,0x20,0x5b,0x46
00012c  54505f43          DCB      0x54,0x50,0x5f,0x43
000130  4f4e4e45          DCB      0x4f,0x4e,0x4e,0x45
000134  4354494e          DCB      0x43,0x54,0x49,0x4e
000138  475f5354          DCB      0x47,0x5f,0x53,0x54
00013c  4147455f          DCB      0x41,0x47,0x45,0x5f
000140  494e4445          DCB      0x49,0x4e,0x44,0x45
000144  585d2121          DCB      0x58,0x5d,0x21,0x21
000148  0a0d0000          DCB      0x0a,0x0d,0x00,0x00
00014c  203d3d20          DCB      0x20,0x3d,0x3d,0x20
000150  46747043          DCB      0x46,0x74,0x70,0x43
000154  6c69656e          DCB      0x6c,0x69,0x65,0x6e
000158  7453656e          DCB      0x74,0x53,0x65,0x6e
00015c  6446696c          DCB      0x64,0x46,0x69,0x6c
000160  65205b25          DCB      0x65,0x20,0x5b,0x25
000164  735d5b25          DCB      0x73,0x5d,0x5b,0x25
000168  735d5b25          DCB      0x73,0x5d,0x5b,0x25
00016c  735d206c          DCB      0x73,0x5d,0x20,0x6c
000170  656e203d          DCB      0x65,0x6e,0x20,0x3d
000174  20256420          DCB      0x20,0x25,0x64,0x20
000178  286e6565          DCB      0x28,0x6e,0x65,0x65
00017c  64436864          DCB      0x64,0x43,0x68,0x64
000180  6972466c          DCB      0x69,0x72,0x46,0x6c
000184  6167203d          DCB      0x61,0x67,0x20,0x3d
000188  20256429          DCB      0x20,0x25,0x64,0x29
00018c  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000190  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
000194  2d204674          DCB      0x2d,0x20,0x46,0x74
000198  70436c69          DCB      0x70,0x43,0x6c,0x69
00019c  656e7453          DCB      0x65,0x6e,0x74,0x53
0001a0  656e6446          DCB      0x65,0x6e,0x64,0x46
0001a4  696c6520          DCB      0x69,0x6c,0x65,0x20
0001a8  4d4f4445          DCB      0x4d,0x4f,0x44,0x45
0001ac  4d5f5245          DCB      0x4d,0x5f,0x52,0x45
0001b0  5455524e          DCB      0x54,0x55,0x52,0x4e
0001b4  5f455252          DCB      0x5f,0x45,0x52,0x52
0001b8  4f522832          DCB      0x4f,0x52,0x28,0x32
0001bc  292d2d20          DCB      0x29,0x2d,0x2d,0x20
0001c0  636d6446          DCB      0x63,0x6d,0x64,0x46
0001c4  74705365          DCB      0x74,0x70,0x53,0x65
0001c8  6e64496e          DCB      0x6e,0x64,0x49,0x6e
0001cc  69745b25          DCB      0x69,0x74,0x5b,0x25
0001d0  735d0d0a          DCB      0x73,0x5d,0x0d,0x0a
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
0001dc  2d204674          DCB      0x2d,0x20,0x46,0x74
0001e0  70436c69          DCB      0x70,0x43,0x6c,0x69
0001e4  656e7453          DCB      0x65,0x6e,0x74,0x53
0001e8  656e6446          DCB      0x65,0x6e,0x64,0x46
0001ec  696c6520          DCB      0x69,0x6c,0x65,0x20
0001f0  4d4f4445          DCB      0x4d,0x4f,0x44,0x45
0001f4  4d5f5245          DCB      0x4d,0x5f,0x52,0x45
0001f8  5455524e          DCB      0x54,0x55,0x52,0x4e
0001fc  5f455252          DCB      0x5f,0x45,0x52,0x52
000200  4f522833          DCB      0x4f,0x52,0x28,0x33
000204  292d2d20          DCB      0x29,0x2d,0x2d,0x20
000208  636d6446          DCB      0x63,0x6d,0x64,0x46
00020c  74705365          DCB      0x74,0x70,0x53,0x65
000210  6e64496e          DCB      0x6e,0x64,0x49,0x6e
000214  69745b25          DCB      0x69,0x74,0x5b,0x25
000218  735d0d0a          DCB      0x73,0x5d,0x0d,0x0a
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
000224  2d204674          DCB      0x2d,0x20,0x46,0x74
000228  70436c69          DCB      0x70,0x43,0x6c,0x69
00022c  656e7453          DCB      0x65,0x6e,0x74,0x53
000230  656e6446          DCB      0x65,0x6e,0x64,0x46
000234  696c6520          DCB      0x69,0x6c,0x65,0x20
000238  4d4f4445          DCB      0x4d,0x4f,0x44,0x45
00023c  4d5f5245          DCB      0x4d,0x5f,0x52,0x45
000240  5455524e          DCB      0x54,0x55,0x52,0x4e
000244  5f455252          DCB      0x5f,0x45,0x52,0x52
000248  4f522834          DCB      0x4f,0x52,0x28,0x34
00024c  292d2d20          DCB      0x29,0x2d,0x2d,0x20
000250  636d6446          DCB      0x63,0x6d,0x64,0x46
000254  74705365          DCB      0x74,0x70,0x53,0x65
000258  6e64496e          DCB      0x6e,0x64,0x49,0x6e
00025c  69745b25          DCB      0x69,0x74,0x5b,0x25
000260  735d0d0a          DCB      0x73,0x5d,0x0d,0x0a
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
00026c  2d204674          DCB      0x2d,0x20,0x46,0x74
000270  70436c69          DCB      0x70,0x43,0x6c,0x69
000274  656e7453          DCB      0x65,0x6e,0x74,0x53
000278  656e6446          DCB      0x65,0x6e,0x64,0x46
00027c  696c6520          DCB      0x69,0x6c,0x65,0x20
000280  4d4f4445          DCB      0x4d,0x4f,0x44,0x45
000284  4d5f5245          DCB      0x4d,0x5f,0x52,0x45
000288  5455524e          DCB      0x54,0x55,0x52,0x4e
00028c  5f455252          DCB      0x5f,0x45,0x52,0x52
000290  4f522835          DCB      0x4f,0x52,0x28,0x35
000294  292d2d20          DCB      0x29,0x2d,0x2d,0x20
000298  636d6446          DCB      0x63,0x6d,0x64,0x46
00029c  74705365          DCB      0x74,0x70,0x53,0x65
0002a0  6e64496e          DCB      0x6e,0x64,0x49,0x6e
0002a4  69745b25          DCB      0x69,0x74,0x5b,0x25
0002a8  735d0d0a          DCB      0x73,0x5d,0x0d,0x0a
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
0002b4  2d204674          DCB      0x2d,0x20,0x46,0x74
0002b8  70436c69          DCB      0x70,0x43,0x6c,0x69
0002bc  656e7453          DCB      0x65,0x6e,0x74,0x53
0002c0  656e6446          DCB      0x65,0x6e,0x64,0x46
0002c4  696c6520          DCB      0x69,0x6c,0x65,0x20
0002c8  4d4f4445          DCB      0x4d,0x4f,0x44,0x45
0002cc  4d5f5245          DCB      0x4d,0x5f,0x52,0x45
0002d0  5455524e          DCB      0x54,0x55,0x52,0x4e
0002d4  5f455252          DCB      0x5f,0x45,0x52,0x52
0002d8  4f522836          DCB      0x4f,0x52,0x28,0x36
0002dc  292d2d20          DCB      0x29,0x2d,0x2d,0x20
0002e0  636d6446          DCB      0x63,0x6d,0x64,0x46
0002e4  74705365          DCB      0x74,0x70,0x53,0x65
0002e8  6e64496e          DCB      0x6e,0x64,0x49,0x6e
0002ec  69745b25          DCB      0x69,0x74,0x5b,0x25
0002f0  735d0d0a          DCB      0x73,0x5d,0x0d,0x0a
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  70617273          DCB      0x70,0x61,0x72,0x73
0002fc  65725374          DCB      0x65,0x72,0x53,0x74
000300  72696e67          DCB      0x72,0x69,0x6e,0x67
000304  203a2073          DCB      0x20,0x3a,0x20,0x73
000308  74725265          DCB      0x74,0x72,0x52,0x65
00030c  616c4c65          DCB      0x61,0x6c,0x4c,0x65
000310  6e203d20          DCB      0x6e,0x20,0x3d,0x20
000314  25642c20          DCB      0x25,0x64,0x2c,0x20
000318  73746172          DCB      0x73,0x74,0x61,0x72
00031c  74537472          DCB      0x74,0x53,0x74,0x72
000320  286c656e          DCB      0x28,0x6c,0x65,0x6e
000324  3d256429          DCB      0x3d,0x25,0x64,0x29
000328  203d205b          DCB      0x20,0x3d,0x20,0x5b
00032c  25735d2c          DCB      0x25,0x73,0x5d,0x2c
000330  20656e64          DCB      0x20,0x65,0x6e,0x64
000334  53747228          DCB      0x53,0x74,0x72,0x28
000338  6c656e3d          DCB      0x6c,0x65,0x6e,0x3d
00033c  25642920          DCB      0x25,0x64,0x29,0x20
000340  3d205b25          DCB      0x3d,0x20,0x5b,0x25
000344  735d0d0a          DCB      0x73,0x5d,0x0d,0x0a
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  203d3d20          DCB      0x20,0x3d,0x3d,0x20
000350  46747043          DCB      0x46,0x74,0x70,0x43
000354  6c69656e          DCB      0x6c,0x69,0x65,0x6e
000358  74476574          DCB      0x74,0x47,0x65,0x74
00035c  46696c65          DCB      0x46,0x69,0x6c,0x65
000360  50757265          DCB      0x50,0x75,0x72,0x65
000364  205b2573          DCB      0x20,0x5b,0x25,0x73
000368  5d5b2573          DCB      0x5d,0x5b,0x25,0x73
00036c  5d20286c          DCB      0x5d,0x20,0x28,0x6c
000370  656e203d          DCB      0x65,0x6e,0x20,0x3d
000374  20256429          DCB      0x20,0x25,0x64,0x29
000378  20537461          DCB      0x20,0x53,0x74,0x61
00037c  72742064          DCB      0x72,0x74,0x20,0x64
000380  6f776e6c          DCB      0x6f,0x77,0x6e,0x6c
000384  6f61642e          DCB      0x6f,0x61,0x64,0x2e
000388  2e2e0d0a          DCB      0x2e,0x2e,0x0d,0x0a
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  203d3d20          DCB      0x20,0x3d,0x3d,0x20
000394  57656220          DCB      0x57,0x65,0x62,0x20
000398  47657420          DCB      0x47,0x65,0x74,0x20
00039c  46545020          DCB      0x46,0x54,0x50,0x20
0003a0  636f6e74          DCB      0x63,0x6f,0x6e,0x74
0003a4  61696e20          DCB      0x61,0x69,0x6e,0x20
0003a8  4f4b205b          DCB      0x4f,0x4b,0x20,0x5b
0003ac  4154436d          DCB      0x41,0x54,0x43,0x6d
0003b0  64446174          DCB      0x64,0x44,0x61,0x74
0003b4  6154656d          DCB      0x61,0x54,0x65,0x6d
0003b8  70427566          DCB      0x70,0x42,0x75,0x66
0003bc  66657220          DCB      0x66,0x65,0x72,0x20
0003c0  6c656e20          DCB      0x6c,0x65,0x6e,0x20
0003c4  3d202564          DCB      0x3d,0x20,0x25,0x64
0003c8  2c207374          DCB      0x2c,0x20,0x73,0x74
0003cc  726c656e          DCB      0x72,0x6c,0x65,0x6e
0003d0  203d2025          DCB      0x20,0x3d,0x20,0x25
0003d4  645d0d0a          DCB      0x64,0x5d,0x0d,0x0a
0003d8  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  41542b49          DCB      "AT+IFC=0,0\r\n",0
000004  46433d30
000008  2c300d0a
00000c  00      
00000d  41544530          DCB      "ATE0\r\n",0
000011  0d0a00  
000014  41542b43          DCB      "AT+CPIN?\r\n",0
000018  50494e3f
00001c  0d0a00  
00001f  41542b43          DCB      "AT+CPIN=0000\r\n",0
000023  50494e3d
000027  30303030
00002b  0d0a00  
00002e  41542b43          DCB      "AT+CREG?\r\n",0
000032  5245473f
000036  0d0a00  
000039  41542b43          DCB      "AT+CGATT?\r\n",0
00003d  47415454
000041  3f0d0a00
000045  41542b43          DCB      "AT+CGREG?\r\n",0
000049  47524547
00004d  3f0d0a00
000051  41542b51          DCB      "AT+QICSGP=1,1,""internet"","""","""",0\r\n",0
000055  49435347
000059  503d312c
00005d  312c2269
000061  6e746572
000065  6e657422
000069  2c22222c
00006d  22222c30
000071  0d0a00  
000074  41542b51          DCB      "AT+QIACT=1\r\n",0
000078  49414354
00007c  3d310d0a
000080  00      
000081  41542b51          DCB      "AT+QIDEACT=1\r\n",0
000085  49444541
000089  43543d31
00008d  0d0a00  
000090  41542b51          DCB      "AT+QIACT?\r\n",0
000094  49414354
000098  3f0d0a00
00009c  41542b51          DCB      "AT+QFTPCFG=""contextid"",1\r\n",0
0000a0  46545043
0000a4  46473d22
0000a8  636f6e74
0000ac  65787469
0000b0  64222c31
0000b4  0d0a00  
0000b7  41542b51          DCB      "AT+QFTPCFG=""account"",""parking"",""git123456""\r\n",0
0000bb  46545043
0000bf  46473d22
0000c3  6163636f
0000c7  756e7422
0000cb  2c227061
0000cf  726b696e
0000d3  67222c22
0000d7  67697431
0000db  32333435
0000df  36220d0a
0000e3  00      
0000e4  41542b51          DCB      "AT+QFTPCFG=""filetype"",0\r\n",0
0000e8  46545043
0000ec  46473d22
0000f0  66696c65
0000f4  74797065
0000f8  222c300d
0000fc  0a00    
0000fe  41542b51          DCB      "AT+QFTPCFG=""transmode"",1\r\n",0
000102  46545043
000106  46473d22
00010a  7472616e
00010e  736d6f64
000112  65222c31
000116  0d0a00  
000119  41542b51          DCB      "AT+QFTPCFG=""rsptimeout"",90\r\n",0
00011d  46545043
000121  46473d22
000125  72737074
000129  696d656f
00012d  7574222c
000131  39300d0a
000135  00      
000136  41542b51          DCB      "AT+QFTPOPEN=""ftp.green-ideas.com.tw"",21\r\n",0
00013a  4654504f
00013e  50454e3d
000142  22667470
000146  2e677265
00014a  656e2d69
00014e  64656173
000152  2e636f6d
000156  2e747722
00015a  2c32310d
00015e  0a00    
000160  41542b51          DCB      "AT+QFTPCLOSE\r\n",0
000164  46545043
000168  4c4f5345
00016c  0d0a00  
00016f  41542b43          DCB      "AT+CSQ\r\n",0
000173  53510d0a
000177  00      
000178  41540d0a          DCB      "AT\r\n",0
00017c  00      
00017d  41542b49          DCB      "AT+IPR=921600;&W\r\n",0
000181  50523d39
000185  32313630
000189  303b2657
00018d  0d0a00  
000190  41542b47          DCB      "AT+GMR\r\n",0
000194  4d520d0a
000198  00      
000199  41542b43          DCB      "AT+CIMI\r\n",0
00019d  494d490d
0001a1  0a00    
0001a3  41542b51          DCB      "AT+QSCLK=1\r\n",0
0001a7  53434c4b
0001ab  3d310d0a
0001af  00      
0001b0  41542b51          DCB      "AT+QURCCFG=""urcport"",""uart1""\r\n",0
0001b4  55524343
0001b8  46473d22
0001bc  75726370
0001c0  6f727422
0001c4  2c227561
0001c8  72743122
0001cc  0d0a00  
0001cf  41542b51          DCB      "AT+QINISTAT\r\n",0
0001d3  494e4953
0001d7  5441540d
0001db  0a00    
0001dd  41542b43          DCB      "AT+CTZR=1\r\n",0
0001e1  545a523d
0001e5  310d0a00
0001e9  41542b43          DCB      "AT+CTZU?\r\n",0
0001ed  545a553f
0001f1  0d0a00  
0001f4  41542b43          DCB      "AT+CTZR=2\r\n",0
0001f8  545a523d
0001fc  320d0a00
000200  41542b43          DCB      "AT+CTZR?\r\n",0
000204  545a523f
000208  0d0a00  
00020b  41542b51          DCB      "AT+QLTS=2\r\n",0
00020f  4c54533d
000213  320d0a00
000217  41542b43          DCB      "AT+CFUN?\r\n",0
00021b  46554e3f
00021f  0d0a00  

                          AREA ||.data||, DATA, ALIGN=2

                  pUartInterface
                          DCD      0x00000000
                  cmdActionBreakFlag
000004  00                DCB      0x00
                  firstTimeCmd
000005  01                DCB      0x01
                  firstTimeFtpCmd
000006  0100              DCB      0x01,0x00
                  nullModemCmdRegAction
000008  0000              DCW      0x0000
00000a  ff00              DCB      0xff,0x00
00000c  0000              DCW      0x0000
00000e  ff00              DCB      0xff,0x00
000010  0000              DCW      0x0000
000012  ff00              DCB      0xff,0x00
000014  0000              DCW      0x0000
000016  ff00              DCB      0xff,0x00
                  flowCtlOnCmdRegAction
000018  0064              DCW      0x0064
00001a  0200              DCB      0x02,0x00
00001c  0000              DCW      0x0000
00001e  ff00              DCB      0xff,0x00
000020  0000              DCW      0x0000
000022  ff00              DCB      0xff,0x00
000024  0000              DCW      0x0000
000026  ff00              DCB      0xff,0x00
                  echooffCmdRegAction
000028  0064              DCW      0x0064
00002a  0300              DCB      0x03,0x00
00002c  0000              DCW      0x0000
00002e  ff00              DCB      0xff,0x00
000030  0000              DCW      0x0000
000032  ff00              DCB      0xff,0x00
000034  0000              DCW      0x0000
000036  ff00              DCB      0xff,0x00
                  existCmdRegAction
000038  0065              DCW      0x0065
00003a  0400              DCB      0x04,0x00
00003c  00c8              DCW      0x00c8
00003e  0300              DCB      0x03,0x00
000040  012c              DCW      0x012c
000042  0300              DCB      0x03,0x00
000044  0079              DCW      0x0079
000046  0b00              DCB      0x0b,0x00
                  pinCmdRegAction
000048  0064              DCW      0x0064
00004a  0300              DCB      0x03,0x00
00004c  012c              DCW      0x012c
00004e  0300              DCB      0x03,0x00
000050  0000              DCW      0x0000
000052  ff00              DCB      0xff,0x00
000054  0000              DCW      0x0000
000056  ff00              DCB      0xff,0x00
                  regCmdRegAction
000058  0066              DCW      0x0066
00005a  0500              DCB      0x05,0x00
00005c  0000              DCW      0x0000
00005e  ff00              DCB      0xff,0x00
000060  0000              DCW      0x0000
000062  ff00              DCB      0xff,0x00
000064  0000              DCW      0x0000
000066  ff00              DCB      0xff,0x00
                  gattCmdRegAction
000068  0067              DCW      0x0067
00006a  0600              DCB      0x06,0x00
00006c  0000              DCW      0x0000
00006e  ff00              DCB      0xff,0x00
000070  0000              DCW      0x0000
000072  ff00              DCB      0xff,0x00
000074  0000              DCW      0x0000
000076  ff00              DCB      0xff,0x00
                  gregCmdRegAction
000078  0068              DCW      0x0068
00007a  0700              DCB      0x07,0x00
00007c  0000              DCW      0x0000
00007e  ff00              DCB      0xff,0x00
000080  0000              DCW      0x0000
000082  ff00              DCB      0xff,0x00
000084  0000              DCW      0x0000
000086  ff00              DCB      0xff,0x00
                  contextSettingCmdRegAction
000088  0064              DCW      0x0064
00008a  0800              DCB      0x08,0x00
00008c  00c8              DCW      0x00c8
00008e  0900              DCB      0x09,0x00
000090  0000              DCW      0x0000
000092  ff00              DCB      0xff,0x00
000094  0000              DCW      0x0000
000096  ff00              DCB      0xff,0x00
                  connectingCmdRegAction
000098  0064              DCW      0x0064
00009a  0a00              DCB      0x0a,0x00
00009c  00c8              DCW      0x00c8
00009e  0900              DCB      0x09,0x00
0000a0  0000              DCW      0x0000
0000a2  ff00              DCB      0xff,0x00
0000a4  0000              DCW      0x0000
0000a6  ff00              DCB      0xff,0x00
                  disconnectCmdRegAction
0000a8  0064              DCW      0x0064
0000aa  0700              DCB      0x07,0x00
0000ac  0000              DCW      0x0000
0000ae  ff00              DCB      0xff,0x00
0000b0  0000              DCW      0x0000
0000b2  ff00              DCB      0xff,0x00
0000b4  0000              DCW      0x0000
0000b6  ff00              DCB      0xff,0x00
                  queryConnectCmdRegAction
0000b8  0069              DCW      0x0069
0000ba  0f00              DCB      0x0f,0x00
0000bc  00c8              DCW      0x00c8
0000be  0300              DCB      0x03,0x00
0000c0  0000              DCW      0x0000
0000c2  ff00              DCB      0xff,0x00
0000c4  0000              DCW      0x0000
0000c6  ff00              DCB      0xff,0x00
                  dialupStageItem
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      nullModemCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
0000dc  1e000000          DCB      0x1e,0x00,0x00,0x00
0000e0  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      ||.conststring||
                          DCD      flowCtlOnCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
0000f4  1e000000          DCB      0x1e,0x00,0x00,0x00
0000f8  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      ||.conststring||+0xd
                          DCD      echooffCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
00010c  1e000000          DCB      0x1e,0x00,0x00,0x00
000110  03000000          DCB      0x03,0x00,0x00,0x00
                          DCD      ||.conststring||+0x14
                          DCD      existCmdRegAction
                          DCD      0x000003e8
                          DCD      0x000007d0
000124  1e000000          DCB      0x1e,0x00,0x00,0x00
000128  0b000000          DCB      0x0b,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1f
                          DCD      pinCmdRegAction
                          DCD      0x000007d0
                          DCD      0x000007d0
00013c  02000000          DCB      0x02,0x00,0x00,0x00
000140  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2e
                          DCD      regCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
000154  1e000000          DCB      0x1e,0x00,0x00,0x00
000158  05000000          DCB      0x05,0x00,0x00,0x00
                          DCD      ||.conststring||+0x39
                          DCD      gattCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
00016c  1e000000          DCB      0x1e,0x00,0x00,0x00
000170  06000000          DCB      0x06,0x00,0x00,0x00
                          DCD      ||.conststring||+0x45
                          DCD      gregCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
000184  1e000000          DCB      0x1e,0x00,0x00,0x00
000188  07000000          DCB      0x07,0x00,0x00,0x00
                          DCD      ||.conststring||+0x51
                          DCD      contextSettingCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
00019c  1e000000          DCB      0x1e,0x00,0x00,0x00
0001a0  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      ||.conststring||+0x74
                          DCD      connectingCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00003a98
0001b4  1e000000          DCB      0x1e,0x00,0x00,0x00
0001b8  09000000          DCB      0x09,0x00,0x00,0x00
                          DCD      ||.conststring||+0x81
                          DCD      disconnectCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
0001cc  1e000000          DCB      0x1e,0x00,0x00,0x00
0001d0  0a000000          DCB      0x0a,0x00,0x00,0x00
                          DCD      ||.conststring||+0x90
                          DCD      queryConnectCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
0001e4  1e000000          DCB      0x1e,0x00,0x00,0x00
0001e8  0f000000          DCB      0x0f,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      nullModemCmdRegAction
                          DCD      0x00000bb8
                          DCD      0x00000bb8
0001fc  1e000000          DCB      0x1e,0x00,0x00,0x00
000200  ff000000          DCB      0xff,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      nullModemCmdRegAction
                          DCD      0x00000064
                          DCD      0x00000000
000214  1e000000          DCB      0x1e,0x00,0x00,0x00
                  ftpSetPDPCmdRegAction
000218  0064              DCW      0x0064
00021a  1200              DCB      0x12,0x00
00021c  012c              DCW      0x012c
00021e  1700              DCB      0x17,0x00
000220  0000              DCW      0x0000
000222  ff00              DCB      0xff,0x00
000224  0000              DCW      0x0000
000226  ff00              DCB      0xff,0x00
                  ftpSetUserInfoCmdRegAction
000228  0064              DCW      0x0064
00022a  1300              DCB      0x13,0x00
00022c  012c              DCW      0x012c
00022e  1700              DCB      0x17,0x00
000230  0000              DCW      0x0000
000232  ff00              DCB      0xff,0x00
000234  0000              DCW      0x0000
000236  ff00              DCB      0xff,0x00
                  ftpSetFileTypeCmdRegAction
000238  0064              DCW      0x0064
00023a  1400              DCB      0x14,0x00
00023c  012c              DCW      0x012c
00023e  1700              DCB      0x17,0x00
000240  0000              DCW      0x0000
000242  ff00              DCB      0xff,0x00
000244  0000              DCW      0x0000
000246  ff00              DCB      0xff,0x00
                  ftpSetTransferModeCmdRegAction
000248  0064              DCW      0x0064
00024a  1500              DCB      0x15,0x00
00024c  012c              DCW      0x012c
00024e  1700              DCB      0x17,0x00
000250  0000              DCW      0x0000
000252  ff00              DCB      0xff,0x00
000254  0000              DCW      0x0000
000256  ff00              DCB      0xff,0x00
                  ftpSetTimeoutCmdRegAction
000258  0064              DCW      0x0064
00025a  1600              DCB      0x16,0x00
00025c  012c              DCW      0x012c
00025e  1700              DCB      0x17,0x00
000260  0000              DCW      0x0000
000262  ff00              DCB      0xff,0x00
000264  0000              DCW      0x0000
000266  ff00              DCB      0xff,0x00
                  ftpConnectingCmdRegAction
000268  006a              DCW      0x006a
00026a  1f00              DCB      0x1f,0x00
00026c  00c8              DCW      0x00c8
00026e  1100              DCB      0x11,0x00
000270  012c              DCW      0x012c
000272  1700              DCB      0x17,0x00
000274  0000              DCW      0x0000
000276  ff00              DCB      0xff,0x00
                  ftpDisconnectCmdRegAction
000278  0064              DCW      0x0064
00027a  1100              DCB      0x11,0x00
00027c  00c8              DCW      0x00c8
00027e  1100              DCB      0x11,0x00
000280  012c              DCW      0x012c
000282  1100              DCB      0x11,0x00
000284  0000              DCW      0x0000
000286  ff00              DCB      0xff,0x00
                  ftpClientStageItem
000288  10000000          DCB      0x10,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      nullModemCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
00029c  1e000000          DCB      0x1e,0x00,0x00,0x00
0002a0  11000000          DCB      0x11,0x00,0x00,0x00
                          DCD      ||.conststring||+0x9c
                          DCD      ftpSetPDPCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
0002b4  1e000000          DCB      0x1e,0x00,0x00,0x00
0002b8  12000000          DCB      0x12,0x00,0x00,0x00
                          DCD      ||.conststring||+0xb7
                          DCD      ftpSetUserInfoCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
0002cc  1e000000          DCB      0x1e,0x00,0x00,0x00
0002d0  13000000          DCB      0x13,0x00,0x00,0x00
                          DCD      ||.conststring||+0xe4
                          DCD      ftpSetFileTypeCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
0002e4  1e000000          DCB      0x1e,0x00,0x00,0x00
0002e8  14000000          DCB      0x14,0x00,0x00,0x00
                          DCD      ||.conststring||+0xfe
                          DCD      ftpSetTransferModeCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
0002fc  1e000000          DCB      0x1e,0x00,0x00,0x00
000300  15000000          DCB      0x15,0x00,0x00,0x00
                          DCD      ||.conststring||+0x119
                          DCD      ftpSetTimeoutCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
000314  1e000000          DCB      0x1e,0x00,0x00,0x00
000318  16000000          DCB      0x16,0x00,0x00,0x00
                          DCD      ||.conststring||+0x136
                          DCD      ftpConnectingCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
00032c  1e000000          DCB      0x1e,0x00,0x00,0x00
000330  17000000          DCB      0x17,0x00,0x00,0x00
                          DCD      ||.conststring||+0x160
                          DCD      ftpDisconnectCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
000344  1e000000          DCB      0x1e,0x00,0x00,0x00
000348  1f000000          DCB      0x1f,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      nullModemCmdRegAction
                          DCD      0x00000bb8
                          DCD      0x00001388
00035c  1e000000          DCB      0x1e,0x00,0x00,0x00
000360  ff000000          DCB      0xff,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      nullModemCmdRegAction
                          DCD      0x00000190
                          DCD      0x00000000
000374  1e000000          DCB      0x1e,0x00,0x00,0x00
                  webSetUrlInfoCmdRegAction
000378  006b              DCW      0x006b
00037a  0100              DCB      0x01,0x00
00037c  012c              DCW      0x012c
00037e  0000              DCB      0x00,0x00
000380  0000              DCW      0x0000
000382  0000              DCB      0x00,0x00
000384  0000              DCW      0x0000
000386  0000              DCB      0x00,0x00
                  webSetUrlInfoCmdItem
                          DCD      0x00000000
                          DCD      webSetUrlInfoCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  webSetUrlContainCmdRegAction
000398  0064              DCW      0x0064
00039a  0100              DCB      0x01,0x00
00039c  012c              DCW      0x012c
00039e  0000              DCB      0x00,0x00
0003a0  0000              DCW      0x0000
0003a2  0000              DCB      0x00,0x00
0003a4  0000              DCW      0x0000
0003a6  0000              DCB      0x00,0x00
                  webSetUrlContainCmdItem
                          DCD      0x00000000
                          DCD      webSetUrlContainCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  webSetPostInfoCmdRegAction
0003b8  006b              DCW      0x006b
0003ba  0100              DCB      0x01,0x00
0003bc  012c              DCW      0x012c
0003be  0000              DCB      0x00,0x00
0003c0  0000              DCW      0x0000
0003c2  0000              DCB      0x00,0x00
0003c4  0000              DCW      0x0000
0003c6  0000              DCB      0x00,0x00
                  webSetPostInfoCmdItem
                          DCD      0x00000000
                          DCD      webSetPostInfoCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
                  webSetPostContainCmdRegAction
0003d8  006f              DCW      0x006f
0003da  0100              DCB      0x01,0x00
0003dc  012c              DCW      0x012c
0003de  0000              DCB      0x00,0x00
0003e0  0000              DCW      0x0000
0003e2  0000              DCB      0x00,0x00
0003e4  0000              DCW      0x0000
0003e6  0000              DCB      0x00,0x00
                  webSetPostContainCmdItem
                          DCD      0x00000000
                          DCD      webSetPostContainCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
                  webGetPostContainCmdRegAction
0003f8  0070              DCW      0x0070
0003fa  0100              DCB      0x01,0x00
0003fc  012c              DCW      0x012c
0003fe  0000              DCB      0x00,0x00
000400  0000              DCW      0x0000
000402  0000              DCB      0x00,0x00
000404  0000              DCW      0x0000
000406  0000              DCB      0x00,0x00
                  webGetPostContainCmdItem
                          DCD      0x00000000
                          DCD      webGetPostContainCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  ftpSendInitCmdRegAction
000418  006b              DCW      0x006b
00041a  0100              DCB      0x01,0x00
00041c  012c              DCW      0x012c
00041e  0000              DCB      0x00,0x00
000420  0000              DCW      0x0000
000422  0000              DCB      0x00,0x00
000424  0000              DCW      0x0000
000426  0000              DCB      0x00,0x00
                  ftpSendInitCmdItem
                          DCD      0x00000000
                          DCD      ftpSendInitCmdRegAction
                          DCD      0x000003e8
                          DCD      0x00002710
                  ftpSendDataCmdRegAction
000438  006c              DCW      0x006c
00043a  0100              DCB      0x01,0x00
00043c  012c              DCW      0x012c
00043e  0000              DCB      0x00,0x00
000440  006d              DCW      0x006d
000442  0000              DCB      0x00,0x00
000444  0064              DCW      0x0064
000446  0100              DCB      0x01,0x00
                  ftpSendDataCmdItem
                          DCD      0x00000000
                          DCD      ftpSendDataCmdRegAction
                          DCD      0x000003e8
                          DCD      0x0000ea60
                  ftpChDirCmdRegAction
000458  0071              DCW      0x0071
00045a  0100              DCB      0x01,0x00
00045c  012c              DCW      0x012c
00045e  0000              DCB      0x00,0x00
000460  0072              DCW      0x0072
000462  0000              DCB      0x00,0x00
000464  0000              DCW      0x0000
000466  0000              DCB      0x00,0x00
                  ftpChDirCmdItem
                          DCD      0x00000000
                          DCD      ftpChDirCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
                  ftpMkDirCmdRegAction
000478  0074              DCW      0x0074
00047a  0100              DCB      0x01,0x00
00047c  012c              DCW      0x012c
00047e  0000              DCB      0x00,0x00
000480  0000              DCW      0x0000
000482  0000              DCB      0x00,0x00
000484  0000              DCW      0x0000
000486  0000              DCB      0x00,0x00
                  ftpMkDirCmdItem
                          DCD      0x00000000
                          DCD      ftpMkDirCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00002710
                  ftpGetDataCmdRegAction
000498  0073              DCW      0x0073
00049a  0100              DCB      0x01,0x00
00049c  012c              DCW      0x012c
00049e  0000              DCB      0x00,0x00
0004a0  0000              DCW      0x0000
0004a2  0000              DCB      0x00,0x00
0004a4  0000              DCW      0x0000
0004a6  0000              DCB      0x00,0x00
                  ftpGetDataCmdItem
                          DCD      0x00000000
                          DCD      ftpGetDataCmdRegAction
                          DCD      0x000003e8
                          DCD      0x00003a98
                  ftpCloseCmdRegAction
0004b8  0064              DCW      0x0064
0004ba  0100              DCB      0x01,0x00
0004bc  012c              DCW      0x012c
0004be  0000              DCB      0x00,0x00
0004c0  006e              DCW      0x006e
0004c2  0100              DCB      0x01,0x00
0004c4  0000              DCW      0x0000
0004c6  0000              DCB      0x00,0x00
                  ftpCloseCmdItem
                          DCD      ||.conststring||+0x160
                          DCD      ftpCloseCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  ftpDeleteFileCmdRegAction
0004d8  0064              DCW      0x0064
0004da  0100              DCB      0x01,0x00
0004dc  012c              DCW      0x012c
0004de  0000              DCB      0x00,0x00
0004e0  006e              DCW      0x006e
0004e2  0100              DCB      0x01,0x00
0004e4  0000              DCW      0x0000
0004e6  0000              DCB      0x00,0x00
                  ftpDeleteFileCmdItem
                          DCD      0x00000000
                          DCD      ftpDeleteFileCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  networkQueryCsqCmdRegAction
0004f8  0078              DCW      0x0078
0004fa  0100              DCB      0x01,0x00
0004fc  012c              DCW      0x012c
0004fe  0000              DCB      0x00,0x00
000500  0000              DCW      0x0000
000502  0000              DCB      0x00,0x00
000504  0000              DCW      0x0000
000506  0000              DCB      0x00,0x00
                  networkQueryCsqCmdItem
                          DCD      ||.conststring||+0x16f
                          DCD      networkQueryCsqCmdRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  networkAtTestCmdRegAction
000518  0064              DCW      0x0064
00051a  0100              DCB      0x01,0x00
00051c  0000              DCW      0x0000
00051e  0000              DCB      0x00,0x00
000520  0000              DCW      0x0000
000522  0000              DCB      0x00,0x00
000524  0000              DCW      0x0000
000526  0000              DCB      0x00,0x00
                  networkAtTestCmdItem
                          DCD      ||.conststring||+0x178
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000003e8
                  networkSetHighSpeedCmdItem
                          DCD      ||.conststring||+0x17d
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                  readVersionCmdItem
                          DCD      ||.conststring||+0x190
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                  readSIMNumberCmdItem
                          DCD      ||.conststring||+0x199
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                  sleepCmdItem
                          DCD      ||.conststring||+0x1a3
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                  qurccfgCmdItem
                          DCD      ||.conststring||+0x1b0
                          DCD      networkAtTestCmdRegAction
                          DCD      0x000001f4
                          DCD      0x000007d0
                  networkQueryIPAddressRegAction
000588  0064              DCW      0x0064
00058a  0100              DCB      0x01,0x00
00058c  0000              DCW      0x0000
00058e  0000              DCB      0x00,0x00
000590  0000              DCW      0x0000
000592  0000              DCB      0x00,0x00
000594  0000              DCW      0x0000
000596  0000              DCB      0x00,0x00
                  networkQueryIPAddressItem
                          DCD      ||.conststring||+0x90
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x000001f4
                          DCD      0x00001388
                  networkQuerySIMInitStatusItem
                          DCD      ||.conststring||+0x1cf
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
                  networkNTPEnableWriteItem
                          DCD      ||.conststring||+0x1dd
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
                  networkNTPEnableReadItem
                          DCD      ||.conststring||+0x1e9
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
                  networkQueryNTPWriteItem
                          DCD      ||.conststring||+0x1f4
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
                  networkQueryNTPReadItem
                          DCD      ||.conststring||+0x200
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
                  networkQueryNTPItem
                          DCD      ||.conststring||+0x20b
                          DCD      networkQueryIPAddressRegAction
                          DCD      0x0000012c
                          DCD      0x000005dc
                  currentDialupStageIndex
000608  00                DCB      0x00
                  currentFtpStageIndex
000609  10                DCB      0x10
                  modemColorAllGreen
00060a  0000              DCB      0x00,0x00
00060c  00000000          DCB      0x00,0x00,0x00,0x00
000610  0101              DCB      0x01,0x01
                  modemColorAllRed
000612  0000              DCB      0x00,0x00
000614  00000000          DCB      0x00,0x00,0x00,0x00
000618  0202              DCB      0x02,0x02
                  modemColorAllOff
00061a  0000              DCB      0x00,0x00
00061c  00000000          DCB      0x00,0x00,0x00,0x00
000620  0000              DCB      0x00,0x00
                  changeLEDColorFlag
000622  0100              DCB      0x01,0x00
                  ftpGetSizeCmdRegAction
000624  007a              DCW      0x007a
000626  0100              DCB      0x01,0x00
000628  012c              DCW      0x012c
00062a  0000              DCB      0x00,0x00
00062c  0000              DCW      0x0000
00062e  0000              DCB      0x00,0x00
000630  0000              DCW      0x0000
000632  0000              DCB      0x00,0x00
                  ftpGetSizeCmdItem
                          DCD      0x00000000
                          DCD      ftpGetSizeCmdRegAction
                          DCD      0x00000064
                          DCD      0x00001388
