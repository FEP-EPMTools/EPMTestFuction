; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\sys_timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_timer.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\sys_timer.crf ..\..\common\src\BSP\Driver\Source\sys_timer.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sysTimer0ISR PROC
                  |L1.0|
;;;67     /* Interrupt service routine */
;;;68     void sysTimer0ISR()
000000  e92d4008          PUSH     {r3,lr}
;;;69     {
;;;70         int volatile i;
;;;71         /*----- check channel 0 -----*/
;;;72         if (inpw(REG_TMR_TISR) & 0x00000001) {
000004  e59f0cf8          LDR      r0,|L1.3332|
000008  e5900060          LDR      r0,[r0,#0x60]
00000c  e3100001          TST      r0,#1
000010  0a00003a          BEQ      |L1.256|
;;;73             _sys_uTimer0Count++;
000014  e59f0cec          LDR      r0,|L1.3336|
000018  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
00001c  e2800001          ADD      r0,r0,#1
000020  e59f1ce0          LDR      r1,|L1.3336|
000024  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer0Count
;;;74             outpw(REG_TMR_TISR, 0x01); /* clear TIF0 */
000028  e3a00001          MOV      r0,#1
00002c  e59f1cd0          LDR      r1,|L1.3332|
000030  e5810060          STR      r0,[r1,#0x60]
;;;75             if (_sys_uTimer0Count >= 0xfffffff)
000034  e59f0ccc          LDR      r0,|L1.3336|
000038  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
00003c  e370021f          CMN      r0,#0xf0000001
000040  3a000002          BCC      |L1.80|
;;;76                 _sys_uTimer0Count = 0;
000044  e3a00000          MOV      r0,#0
000048  e59f1cb8          LDR      r1,|L1.3336|
00004c  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer0Count
                  |L1.80|
;;;77     
;;;78             if (_sys_bIsSetTime0Event) {
000050  e59f0cb4          LDR      r0,|L1.3340|
000054  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime0Event
000058  e3500000          CMP      r0,#0
00005c  0a000027          BEQ      |L1.256|
;;;79                 for (i=0; i<TimerEventCount; i++) {
000060  e3a00000          MOV      r0,#0
000064  e58d0000          STR      r0,[sp,#0]
000068  ea000021          B        |L1.244|
                  |L1.108|
;;;80                     if (tTime0Event[i].active) {
00006c  e59f0c9c          LDR      r0,|L1.3344|
000070  e59d1000          LDR      r1,[sp,#0]
000074  e7900201          LDR      r0,[r0,r1,LSL #4]
000078  e3500000          CMP      r0,#0
00007c  0a000019          BEQ      |L1.232|
;;;81                         tTime0Event[i].curTick--;
000080  e59f1c88          LDR      r1,|L1.3344|
000084  e59d2000          LDR      r2,[sp,#0]
000088  e0811202          ADD      r1,r1,r2,LSL #4
00008c  e2810008          ADD      r0,r1,#8
000090  e5911008          LDR      r1,[r1,#8]
000094  e2411001          SUB      r1,r1,#1
000098  e5801000          STR      r1,[r0,#0]
;;;82                         if (tTime0Event[i].curTick == 0) {
00009c  e59f0c6c          LDR      r0,|L1.3344|
0000a0  e59d1000          LDR      r1,[sp,#0]
0000a4  e0800201          ADD      r0,r0,r1,LSL #4
0000a8  e5900008          LDR      r0,[r0,#8]
0000ac  e3500000          CMP      r0,#0
0000b0  1a00000c          BNE      |L1.232|
;;;83                             (*tTime0Event[i].funPtr)();
0000b4  e59f1c54          LDR      r1,|L1.3344|
0000b8  e59d2000          LDR      r2,[sp,#0]
0000bc  e0811202          ADD      r1,r1,r2,LSL #4
0000c0  e591000c          LDR      r0,[r1,#0xc]
0000c4  e12fff30          BLX      r0
;;;84                             tTime0Event[i].curTick = tTime0Event[i].initTick;
0000c8  e59f0c40          LDR      r0,|L1.3344|
0000cc  e59d1000          LDR      r1,[sp,#0]
0000d0  e0800201          ADD      r0,r0,r1,LSL #4
0000d4  e5900004          LDR      r0,[r0,#4]
0000d8  e59f1c30          LDR      r1,|L1.3344|
0000dc  e59d2000          LDR      r2,[sp,#0]
0000e0  e0811202          ADD      r1,r1,r2,LSL #4
0000e4  e5810008          STR      r0,[r1,#8]
                  |L1.232|
0000e8  e59d0000          LDR      r0,[sp,#0]            ;79
0000ec  e2800001          ADD      r0,r0,#1              ;79
0000f0  e58d0000          STR      r0,[sp,#0]            ;79
                  |L1.244|
0000f4  e59d0000          LDR      r0,[sp,#0]            ;79
0000f8  e350000a          CMP      r0,#0xa               ;79
0000fc  baffffda          BLT      |L1.108|
                  |L1.256|
;;;85                         }
;;;86                     }
;;;87                 }
;;;88             }
;;;89         }
;;;90     }
000100  e8bd8008          POP      {r3,pc}
;;;91     
                          ENDP

                  sysTimer1ISR PROC
                  |L1.260|
;;;92     void sysTimer1ISR()
000104  e92d4008          PUSH     {r3,lr}
;;;93     {
;;;94         int volatile i;
;;;95     
;;;96         /*----- check channel 1 -----*/
;;;97         if (inpw(REG_TMR_TISR) & 0x00000002) {
000108  e59f0bf4          LDR      r0,|L1.3332|
00010c  e5900060          LDR      r0,[r0,#0x60]
000110  e3100002          TST      r0,#2
000114  0a00003a          BEQ      |L1.516|
;;;98             _sys_uTimer1Count++;
000118  e59f0bf4          LDR      r0,|L1.3348|
00011c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer1Count
000120  e2800001          ADD      r0,r0,#1
000124  e59f1be8          LDR      r1,|L1.3348|
000128  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer1Count
;;;99             outpw(REG_TMR_TISR, 0x02); /* clear TIF1 */
00012c  e3a00002          MOV      r0,#2
000130  e59f1bcc          LDR      r1,|L1.3332|
000134  e5810060          STR      r0,[r1,#0x60]
;;;100            if (_sys_uTimer1Count >= 0xfffffff)
000138  e59f0bd4          LDR      r0,|L1.3348|
00013c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer1Count
000140  e370021f          CMN      r0,#0xf0000001
000144  3a000002          BCC      |L1.340|
;;;101                _sys_uTimer1Count = 0;
000148  e3a00000          MOV      r0,#0
00014c  e59f1bc0          LDR      r1,|L1.3348|
000150  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer1Count
                  |L1.340|
;;;102    
;;;103            if (_sys_bIsSetTime1Event) {
000154  e59f0bbc          LDR      r0,|L1.3352|
000158  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime1Event
00015c  e3500000          CMP      r0,#0
000160  0a000027          BEQ      |L1.516|
;;;104                for (i=0; i<TimerEventCount; i++) {
000164  e3a00000          MOV      r0,#0
000168  e58d0000          STR      r0,[sp,#0]
00016c  ea000021          B        |L1.504|
                  |L1.368|
;;;105                    if (tTime1Event[i].active) {
000170  e59f0ba4          LDR      r0,|L1.3356|
000174  e59d1000          LDR      r1,[sp,#0]
000178  e7900201          LDR      r0,[r0,r1,LSL #4]
00017c  e3500000          CMP      r0,#0
000180  0a000019          BEQ      |L1.492|
;;;106                        tTime1Event[i].curTick--;
000184  e59f1b90          LDR      r1,|L1.3356|
000188  e59d2000          LDR      r2,[sp,#0]
00018c  e0811202          ADD      r1,r1,r2,LSL #4
000190  e2810008          ADD      r0,r1,#8
000194  e5911008          LDR      r1,[r1,#8]
000198  e2411001          SUB      r1,r1,#1
00019c  e5801000          STR      r1,[r0,#0]
;;;107                        if (tTime1Event[i].curTick == 0) {
0001a0  e59f0b74          LDR      r0,|L1.3356|
0001a4  e59d1000          LDR      r1,[sp,#0]
0001a8  e0800201          ADD      r0,r0,r1,LSL #4
0001ac  e5900008          LDR      r0,[r0,#8]
0001b0  e3500000          CMP      r0,#0
0001b4  1a00000c          BNE      |L1.492|
;;;108                            (*tTime1Event[i].funPtr)();
0001b8  e59f1b5c          LDR      r1,|L1.3356|
0001bc  e59d2000          LDR      r2,[sp,#0]
0001c0  e0811202          ADD      r1,r1,r2,LSL #4
0001c4  e591000c          LDR      r0,[r1,#0xc]
0001c8  e12fff30          BLX      r0
;;;109                            tTime1Event[i].curTick = tTime1Event[i].initTick;
0001cc  e59f0b48          LDR      r0,|L1.3356|
0001d0  e59d1000          LDR      r1,[sp,#0]
0001d4  e0800201          ADD      r0,r0,r1,LSL #4
0001d8  e5900004          LDR      r0,[r0,#4]
0001dc  e59f1b38          LDR      r1,|L1.3356|
0001e0  e59d2000          LDR      r2,[sp,#0]
0001e4  e0811202          ADD      r1,r1,r2,LSL #4
0001e8  e5810008          STR      r0,[r1,#8]
                  |L1.492|
0001ec  e59d0000          LDR      r0,[sp,#0]            ;104
0001f0  e2800001          ADD      r0,r0,#1              ;104
0001f4  e58d0000          STR      r0,[sp,#0]            ;104
                  |L1.504|
0001f8  e59d0000          LDR      r0,[sp,#0]            ;104
0001fc  e350000a          CMP      r0,#0xa               ;104
000200  baffffda          BLT      |L1.368|
                  |L1.516|
;;;110                        }
;;;111                    }
;;;112                }
;;;113            }
;;;114        }
;;;115    }
000204  e8bd8008          POP      {r3,pc}
;;;116    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysGetTicks PROC
;;;127     */
;;;128    UINT32 sysGetTicks(INT32 nTimeNo)
000208  e1a01000          MOV      r1,r0
;;;129    {
;;;130        switch (nTimeNo) {
00020c  e3510000          CMP      r1,#0
000210  0a000002          BEQ      |L1.544|
000214  e3510001          CMP      r1,#1
000218  1a000008          BNE      |L1.576|
00021c  ea000003          B        |L1.560|
                  |L1.544|
;;;131        case TIMER0:
000220  e1a00000          MOV      r0,r0
;;;132            return _sys_uTimer0Count;
000224  e59f0adc          LDR      r0,|L1.3336|
000228  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
                  |L1.556|
;;;133    
;;;134        case TIMER1:
;;;135            return _sys_uTimer1Count;
;;;136    
;;;137        default:
;;;138            ;
;;;139        }
;;;140        return 0;
;;;141    }
00022c  e12fff1e          BX       lr
                  |L1.560|
000230  e1a00000          MOV      r0,r0                 ;134
000234  e59f0ad8          LDR      r0,|L1.3348|
000238  e5900000          LDR      r0,[r0,#0]            ;135  ; _sys_uTimer1Count
00023c  eafffffa          B        |L1.556|
                  |L1.576|
000240  e1a00000          MOV      r0,r0                 ;137
000244  e1a00000          MOV      r0,r0                 ;130
000248  e1a00000          MOV      r0,r0                 ;130
00024c  e3a00000          MOV      r0,#0                 ;140
000250  eafffff5          B        |L1.556|
;;;142    
                          ENDP

                  sysResetTicks PROC
;;;149     */
;;;150    INT32 sysResetTicks(INT32 nTimeNo)
000254  e1a01000          MOV      r1,r0
;;;151    {
;;;152        switch (nTimeNo) {
000258  e3510000          CMP      r1,#0
00025c  0a000002          BEQ      |L1.620|
000260  e3510001          CMP      r1,#1
000264  1a00000a          BNE      |L1.660|
000268  ea000004          B        |L1.640|
                  |L1.620|
;;;153        case TIMER0:
00026c  e1a00000          MOV      r0,r0
;;;154            _sys_uTimer0Count = 0;
000270  e3a00000          MOV      r0,#0
000274  e59f2a8c          LDR      r2,|L1.3336|
000278  e5820000          STR      r0,[r2,#0]  ; _sys_uTimer0Count
;;;155            break;
00027c  ea000006          B        |L1.668|
                  |L1.640|
;;;156    
;;;157        case TIMER1:
000280  e1a00000          MOV      r0,r0
;;;158            _sys_uTimer1Count = 0;
000284  e3a00000          MOV      r0,#0
000288  e59f2a84          LDR      r2,|L1.3348|
00028c  e5820000          STR      r0,[r2,#0]  ; _sys_uTimer1Count
;;;159            break;
000290  ea000001          B        |L1.668|
                  |L1.660|
;;;160    
;;;161        default:
000294  e1a00000          MOV      r0,r0
000298  e1a00000          MOV      r0,r0                 ;152
                  |L1.668|
00029c  e1a00000          MOV      r0,r0                 ;155
;;;162            ;
;;;163        }
;;;164        return 0;
0002a0  e3a00000          MOV      r0,#0
;;;165    }
0002a4  e12fff1e          BX       lr
;;;166    
                          ENDP

                  sysUpdateTickCount PROC
;;;174     */
;;;175    INT32 sysUpdateTickCount(INT32 nTimeNo, UINT32 uCount)
0002a8  e1a02000          MOV      r2,r0
;;;176    {
;;;177        switch (nTimeNo) {
0002ac  e3520000          CMP      r2,#0
0002b0  0a000002          BEQ      |L1.704|
0002b4  e3520001          CMP      r2,#1
0002b8  1a000008          BNE      |L1.736|
0002bc  ea000003          B        |L1.720|
                  |L1.704|
;;;178        case TIMER0:
0002c0  e1a00000          MOV      r0,r0
;;;179            _sys_uTimer0Count = uCount;
0002c4  e59f0a3c          LDR      r0,|L1.3336|
0002c8  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer0Count
;;;180            break;
0002cc  ea000005          B        |L1.744|
                  |L1.720|
;;;181    
;;;182        case TIMER1:
0002d0  e1a00000          MOV      r0,r0
;;;183            _sys_uTimer1Count = uCount;
0002d4  e59f0a38          LDR      r0,|L1.3348|
0002d8  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer1Count
;;;184            break;
0002dc  ea000001          B        |L1.744|
                  |L1.736|
;;;185    
;;;186        default:
0002e0  e1a00000          MOV      r0,r0
0002e4  e1a00000          MOV      r0,r0                 ;177
                  |L1.744|
0002e8  e1a00000          MOV      r0,r0                 ;180
;;;187            ;
;;;188        }
;;;189        return 0;
0002ec  e3a00000          MOV      r0,#0
;;;190    }
0002f0  e12fff1e          BX       lr
;;;191    
                          ENDP

                  sysSetTimerReferenceClock PROC
;;;199     */
;;;200    INT32 sysSetTimerReferenceClock(INT32 nTimeNo, UINT32 uClockRate)
0002f4  e1a02000          MOV      r2,r0
;;;201    {
;;;202        switch (nTimeNo) {
0002f8  e3520000          CMP      r2,#0
0002fc  0a000002          BEQ      |L1.780|
000300  e3520001          CMP      r2,#1
000304  1a000008          BNE      |L1.812|
000308  ea000003          B        |L1.796|
                  |L1.780|
;;;203        case TIMER0:
00030c  e1a00000          MOV      r0,r0
;;;204            _sys_uTimer0ClockRate = uClockRate;
000310  e59f0a08          LDR      r0,|L1.3360|
000314  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer0ClockRate
;;;205            break;
000318  ea000005          B        |L1.820|
                  |L1.796|
;;;206    
;;;207        case TIMER1:
00031c  e1a00000          MOV      r0,r0
;;;208            _sys_uTimer1ClockRate = uClockRate;
000320  e59f09fc          LDR      r0,|L1.3364|
000324  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer1ClockRate
;;;209            break;
000328  ea000001          B        |L1.820|
                  |L1.812|
;;;210    
;;;211        default:
00032c  e1a00000          MOV      r0,r0
000330  e1a00000          MOV      r0,r0                 ;202
                  |L1.820|
000334  e1a00000          MOV      r0,r0                 ;205
;;;212            ;
;;;213        }
;;;214        return 0;
000338  e3a00000          MOV      r0,#0
;;;215    }
00033c  e12fff1e          BX       lr
;;;216    
                          ENDP

                  sysStartTimer PROC
;;;225     */
;;;226    INT32 sysStartTimer(INT32 nTimeNo, UINT32 uTicksPerSecond, INT32 nOpMode)
000340  e92d43f8          PUSH     {r3-r9,lr}
;;;227    {
000344  e1a05000          MOV      r5,r0
000348  e1a06001          MOV      r6,r1
00034c  e1a07002          MOV      r7,r2
;;;228        int volatile i;
;;;229        UINT32 _mTicr, _mTcr;
;;;230    
;;;231        _mTcr = 0x60000000 | (nOpMode << 27);
000350  e3a00206          MOV      r0,#0x60000000
000354  e1808d87          ORR      r8,r0,r7,LSL #27
;;;232    
;;;233        switch (nTimeNo) {
000358  e3550000          CMP      r5,#0
00035c  0a000002          BEQ      |L1.876|
000360  e3550001          CMP      r5,#1
000364  1a00005d          BNE      |L1.1248|
000368  ea000030          B        |L1.1072|
                  |L1.876|
;;;234        case TIMER0:
00036c  e1a00000          MOV      r0,r0
;;;235            outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x100);
000370  e3a0020b          MOV      r0,#0xb0000000
000374  e5900218          LDR      r0,[r0,#0x218]
000378  e3800c01          ORR      r0,r0,#0x100
00037c  e3a0120b          MOV      r1,#0xb0000000
000380  e5810218          STR      r0,[r1,#0x218]
;;;236            _sys_bIsTimer0Initial = TRUE;
000384  e3a00001          MOV      r0,#1
000388  e59f1998          LDR      r1,|L1.3368|
00038c  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsTimer0Initial
;;;237            _sys_uTimer0TickPerSecond = uTicksPerSecond;
000390  e59f0994          LDR      r0,|L1.3372|
000394  e5806000          STR      r6,[r0,#0]  ; _sys_uTimer0TickPerSecond
;;;238    
;;;239            outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000398  e3a00000          MOV      r0,#0
00039c  e59f1960          LDR      r1,|L1.3332|
0003a0  e5810000          STR      r0,[r1,#0]
;;;240            outpw(REG_TMR_TISR, 1);           /* clear for safety */
0003a4  e3a00001          MOV      r0,#1
0003a8  e5810060          STR      r0,[r1,#0x60]
;;;241    
;;;242            for (i=0; i<TimerEventCount; i++)
0003ac  e3a00000          MOV      r0,#0
0003b0  e58d0000          STR      r0,[sp,#0]
0003b4  ea000006          B        |L1.980|
                  |L1.952|
;;;243                tTime0Event[i].active = FALSE;
0003b8  e3a00000          MOV      r0,#0
0003bc  e59f194c          LDR      r1,|L1.3344|
0003c0  e59d2000          LDR      r2,[sp,#0]
0003c4  e7810202          STR      r0,[r1,r2,LSL #4]
0003c8  e59d0000          LDR      r0,[sp,#0]            ;242
0003cc  e2800001          ADD      r0,r0,#1              ;242
0003d0  e58d0000          STR      r0,[sp,#0]            ;242
                  |L1.980|
0003d4  e59d0000          LDR      r0,[sp,#0]            ;242
0003d8  e350000a          CMP      r0,#0xa               ;242
0003dc  bafffff5          BLT      |L1.952|
;;;244    
;;;245            _sys_pvOldTimer0Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, (PVOID)sysTimer0ISR);
0003e0  e24f2ffa          ADR      r2,|L1.0|
0003e4  e3a01010          MOV      r1,#0x10
0003e8  e3a00041          MOV      r0,#0x41
0003ec  ebfffffe          BL       sysInstallISR
0003f0  e59f1938          LDR      r1,|L1.3376|
0003f4  e5810000          STR      r0,[r1,#0]  ; _sys_pvOldTimer0Vect
;;;246            sysEnableInterrupt(TMR0_IRQn);
0003f8  e3a00010          MOV      r0,#0x10
0003fc  ebfffffe          BL       sysEnableInterrupt
;;;247    
;;;248            _sys_uTimer0Count = 0;
000400  e3a00000          MOV      r0,#0
000404  e59f18fc          LDR      r1,|L1.3336|
000408  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer0Count
;;;249            _mTicr = _sys_uTimer0ClockRate / uTicksPerSecond;
00040c  e1a01006          MOV      r1,r6
000410  e59f0908          LDR      r0,|L1.3360|
000414  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0ClockRate
000418  ebfffffe          BL       __aeabi_uidivmod
00041c  e1a04000          MOV      r4,r0
;;;250            outpw(REG_TMR0_TICR, _mTicr);
000420  e59f08dc          LDR      r0,|L1.3332|
000424  e5804004          STR      r4,[r0,#4]
;;;251            outpw(REG_TMR0_TCSR, _mTcr);
000428  e5808000          STR      r8,[r0,#0]
;;;252            break;
00042c  ea00002d          B        |L1.1256|
                  |L1.1072|
;;;253    
;;;254        case TIMER1:
000430  e1a00000          MOV      r0,r0
;;;255            outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x200);
000434  e3a0020b          MOV      r0,#0xb0000000
000438  e5900218          LDR      r0,[r0,#0x218]
00043c  e3800c02          ORR      r0,r0,#0x200
000440  e3a0120b          MOV      r1,#0xb0000000
000444  e5810218          STR      r0,[r1,#0x218]
;;;256            outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000448  e3a00000          MOV      r0,#0
00044c  e59f18b0          LDR      r1,|L1.3332|
000450  e5810010          STR      r0,[r1,#0x10]
;;;257            outpw(REG_TMR_TISR, 2);           /* clear for safety */
000454  e3a00002          MOV      r0,#2
000458  e5810060          STR      r0,[r1,#0x60]
;;;258    
;;;259            for (i=0; i<TimerEventCount; i++)
00045c  e3a00000          MOV      r0,#0
000460  e58d0000          STR      r0,[sp,#0]
000464  ea000006          B        |L1.1156|
                  |L1.1128|
;;;260                tTime1Event[i].active = FALSE;
000468  e3a00000          MOV      r0,#0
00046c  e59f18a8          LDR      r1,|L1.3356|
000470  e59d2000          LDR      r2,[sp,#0]
000474  e7810202          STR      r0,[r1,r2,LSL #4]
000478  e59d0000          LDR      r0,[sp,#0]            ;259
00047c  e2800001          ADD      r0,r0,#1              ;259
000480  e58d0000          STR      r0,[sp,#0]            ;259
                  |L1.1156|
000484  e59d0000          LDR      r0,[sp,#0]            ;259
000488  e350000a          CMP      r0,#0xa               ;259
00048c  bafffff5          BLT      |L1.1128|
;;;261    
;;;262            _sys_pvOldTimer1Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR1_IRQn, (PVOID)sysTimer1ISR);
000490  e24f2fe5          ADR      r2,|L1.260|
000494  e3a01011          MOV      r1,#0x11
000498  e3a00041          MOV      r0,#0x41
00049c  ebfffffe          BL       sysInstallISR
0004a0  e59f188c          LDR      r1,|L1.3380|
0004a4  e5810000          STR      r0,[r1,#0]  ; _sys_pvOldTimer1Vect
;;;263            sysEnableInterrupt(TMR1_IRQn);
0004a8  e3a00011          MOV      r0,#0x11
0004ac  ebfffffe          BL       sysEnableInterrupt
;;;264    
;;;265            _sys_uTimer1Count = 0;
0004b0  e3a00000          MOV      r0,#0
0004b4  e59f1858          LDR      r1,|L1.3348|
0004b8  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer1Count
;;;266            _mTicr = _sys_uTimer1ClockRate / uTicksPerSecond;
0004bc  e1a01006          MOV      r1,r6
0004c0  e59f085c          LDR      r0,|L1.3364|
0004c4  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer1ClockRate
0004c8  ebfffffe          BL       __aeabi_uidivmod
0004cc  e1a04000          MOV      r4,r0
;;;267            outpw(REG_TMR1_TICR, _mTicr);
0004d0  e59f082c          LDR      r0,|L1.3332|
0004d4  e5804014          STR      r4,[r0,#0x14]
;;;268            outpw(REG_TMR1_TCSR, _mTcr);
0004d8  e5808010          STR      r8,[r0,#0x10]
;;;269            break;
0004dc  ea000001          B        |L1.1256|
                  |L1.1248|
;;;270    
;;;271        default:
0004e0  e1a00000          MOV      r0,r0
0004e4  e1a00000          MOV      r0,r0                 ;233
                  |L1.1256|
0004e8  e1a00000          MOV      r0,r0                 ;252
;;;272            ;
;;;273        }
;;;274        sysSetLocalInterrupt(ENABLE_IRQ);
0004ec  e3a0007f          MOV      r0,#0x7f
0004f0  ebfffffe          BL       sysSetLocalInterrupt
;;;275        return 0;
0004f4  e3a00000          MOV      r0,#0
;;;276    }
0004f8  e8bd83f8          POP      {r3-r9,pc}
;;;277    
                          ENDP

                  sysStopTimer PROC
;;;284     */
;;;285    INT32 sysStopTimer(INT32 nTimeNo)
0004fc  e92d4010          PUSH     {r4,lr}
;;;286    {
000500  e1a04000          MOV      r4,r0
;;;287        switch (nTimeNo) {
000504  e3540000          CMP      r4,#0
000508  0a000002          BEQ      |L1.1304|
00050c  e3540001          CMP      r4,#1
000510  1a000029          BNE      |L1.1468|
000514  ea000015          B        |L1.1392|
                  |L1.1304|
;;;288        case TIMER0:
000518  e1a00000          MOV      r0,r0
;;;289            _sys_bIsTimer0Initial = FALSE;
00051c  e3a00000          MOV      r0,#0
000520  e59f1800          LDR      r1,|L1.3368|
000524  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsTimer0Initial
;;;290            sysDisableInterrupt(TMR0_IRQn);
000528  e3a00010          MOV      r0,#0x10
00052c  ebfffffe          BL       sysDisableInterrupt
;;;291            sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, _sys_pvOldTimer0Vect);
000530  e59f07f8          LDR      r0,|L1.3376|
000534  e3a01010          MOV      r1,#0x10
000538  e5902000          LDR      r2,[r0,#0]  ; _sys_pvOldTimer0Vect
00053c  e3a00041          MOV      r0,#0x41
000540  ebfffffe          BL       sysInstallISR
;;;292    
;;;293            outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000544  e3a00000          MOV      r0,#0
000548  e59f17b4          LDR      r1,|L1.3332|
00054c  e5810000          STR      r0,[r1,#0]
;;;294            outpw(REG_TMR_TISR, 1);           /* clear for safety */
000550  e3a00001          MOV      r0,#1
000554  e5810060          STR      r0,[r1,#0x60]
;;;295    
;;;296            _sys_uTime0EventCount = 0;
000558  e3a00000          MOV      r0,#0
00055c  e59f17d4          LDR      r1,|L1.3384|
000560  e5810000          STR      r0,[r1,#0]  ; _sys_uTime0EventCount
;;;297            _sys_bIsSetTime0Event = FALSE;
000564  e59f17a0          LDR      r1,|L1.3340|
000568  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsSetTime0Event
;;;298            break;
00056c  ea000014          B        |L1.1476|
                  |L1.1392|
;;;299    
;;;300        case TIMER1:
000570  e1a00000          MOV      r0,r0
;;;301            sysDisableInterrupt(TMR1_IRQn);
000574  e3a00011          MOV      r0,#0x11
000578  ebfffffe          BL       sysDisableInterrupt
;;;302            sysInstallISR(HIGH_LEVEL_SENSITIVE| IRQ_LEVEL_1, TMR1_IRQn, _sys_pvOldTimer1Vect);
00057c  e59f07b0          LDR      r0,|L1.3380|
000580  e3a01011          MOV      r1,#0x11
000584  e5902000          LDR      r2,[r0,#0]  ; _sys_pvOldTimer1Vect
000588  e3a00041          MOV      r0,#0x41
00058c  ebfffffe          BL       sysInstallISR
;;;303    
;;;304    
;;;305            outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000590  e3a00000          MOV      r0,#0
000594  e59f1768          LDR      r1,|L1.3332|
000598  e5810010          STR      r0,[r1,#0x10]
;;;306            outpw(REG_TMR_TISR, 2);           /* clear for safety */
00059c  e3a00002          MOV      r0,#2
0005a0  e5810060          STR      r0,[r1,#0x60]
;;;307    
;;;308            _sys_uTime1EventCount = 0;
0005a4  e3a00000          MOV      r0,#0
0005a8  e59f178c          LDR      r1,|L1.3388|
0005ac  e5810000          STR      r0,[r1,#0]  ; _sys_uTime1EventCount
;;;309            _sys_bIsSetTime1Event = FALSE;
0005b0  e59f1760          LDR      r1,|L1.3352|
0005b4  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsSetTime1Event
;;;310            break;
0005b8  ea000001          B        |L1.1476|
                  |L1.1468|
;;;311    
;;;312        default:
0005bc  e1a00000          MOV      r0,r0
0005c0  e1a00000          MOV      r0,r0                 ;287
                  |L1.1476|
0005c4  e1a00000          MOV      r0,r0                 ;298
;;;313            ;
;;;314        }
;;;315    
;;;316        return 0;
0005c8  e3a00000          MOV      r0,#0
;;;317    }
0005cc  e8bd8010          POP      {r4,pc}
;;;318    
                          ENDP

                  sysClearWatchDogTimerCount PROC
;;;323     */
;;;324    void sysClearWatchDogTimerCount(void)
0005d0  e92d4008          PUSH     {r3,lr}
;;;325    {
;;;326        UINT32 volatile _mWtcr;
;;;327    
;;;328        _mWtcr = inpw(REG_WDT_CTL);
0005d4  e59f0764          LDR      r0,|L1.3392|
0005d8  e5900000          LDR      r0,[r0,#0]
0005dc  e58d0000          STR      r0,[sp,#0]
;;;329        _mWtcr |= 0x01;             /* write WTR */
0005e0  e59d0000          LDR      r0,[sp,#0]
0005e4  e3800001          ORR      r0,r0,#1
0005e8  e58d0000          STR      r0,[sp,#0]
;;;330        outpw(REG_WDT_CTL, _mWtcr);
0005ec  e59d0000          LDR      r0,[sp,#0]
0005f0  e59f1748          LDR      r1,|L1.3392|
0005f4  e5810000          STR      r0,[r1,#0]
;;;331    }
0005f8  e8bd8008          POP      {r3,pc}
;;;332    
                          ENDP

                  sysClearWatchDogTimerInterruptStatus PROC
;;;337     */
;;;338    void sysClearWatchDogTimerInterruptStatus(void)
0005fc  e92d4008          PUSH     {r3,lr}
;;;339    {
;;;340        UINT32 volatile _mWtcr;
;;;341    
;;;342        _mWtcr = inpw(REG_WDT_CTL);
000600  e59f0738          LDR      r0,|L1.3392|
000604  e5900000          LDR      r0,[r0,#0]
000608  e58d0000          STR      r0,[sp,#0]
;;;343        _mWtcr |= 0x08;       /* clear WTIF */
00060c  e59d0000          LDR      r0,[sp,#0]
000610  e3800008          ORR      r0,r0,#8
000614  e58d0000          STR      r0,[sp,#0]
;;;344        outpw(REG_WDT_CTL, _mWtcr);
000618  e59d0000          LDR      r0,[sp,#0]
00061c  e59f171c          LDR      r1,|L1.3392|
000620  e5810000          STR      r0,[r1,#0]
;;;345    }
000624  e8bd8008          POP      {r3,pc}
;;;346    
                          ENDP

                  sysDisableWatchDogTimer PROC
;;;351     */
;;;352    void sysDisableWatchDogTimer(void)
000628  e92d4008          PUSH     {r3,lr}
;;;353    {
;;;354        UINT32 volatile _mWtcr;
;;;355    
;;;356        _mWtcr = inpw(REG_WDT_CTL);
00062c  e59f070c          LDR      r0,|L1.3392|
000630  e5900000          LDR      r0,[r0,#0]
000634  e58d0000          STR      r0,[sp,#0]
;;;357        _mWtcr &= 0xFFFFFF7F;
000638  e59d0000          LDR      r0,[sp,#0]
00063c  e3c00080          BIC      r0,r0,#0x80
000640  e58d0000          STR      r0,[sp,#0]
;;;358        outpw(REG_WDT_CTL, _mWtcr);
000644  e59d0000          LDR      r0,[sp,#0]
000648  e59f16f0          LDR      r1,|L1.3392|
00064c  e5810000          STR      r0,[r1,#0]
;;;359    }
000650  e8bd8008          POP      {r3,pc}
;;;360    
                          ENDP

                  sysDisableWatchDogTimerReset PROC
;;;365     */
;;;366    void sysDisableWatchDogTimerReset(void)
000654  e92d4008          PUSH     {r3,lr}
;;;367    {
;;;368        UINT32 volatile _mWtcr;
;;;369    
;;;370        _mWtcr = inpw(REG_WDT_CTL);
000658  e59f06e0          LDR      r0,|L1.3392|
00065c  e5900000          LDR      r0,[r0,#0]
000660  e58d0000          STR      r0,[sp,#0]
;;;371        _mWtcr &= 0xFFFFFFFD;
000664  e59d0000          LDR      r0,[sp,#0]
000668  e3c00002          BIC      r0,r0,#2
00066c  e58d0000          STR      r0,[sp,#0]
;;;372        outpw(REG_WDT_CTL, _mWtcr);
000670  e59d0000          LDR      r0,[sp,#0]
000674  e59f16c4          LDR      r1,|L1.3392|
000678  e5810000          STR      r0,[r1,#0]
;;;373    }
00067c  e8bd8008          POP      {r3,pc}
;;;374    
                          ENDP

                  sysEnableWatchDogTimer PROC
;;;379     */
;;;380    void sysEnableWatchDogTimer(void)
000680  e92d4008          PUSH     {r3,lr}
;;;381    {
;;;382        UINT32 volatile _mWtcr;
;;;383    
;;;384        _mWtcr = inpw(REG_WDT_CTL);
000684  e59f06b4          LDR      r0,|L1.3392|
000688  e5900000          LDR      r0,[r0,#0]
00068c  e58d0000          STR      r0,[sp,#0]
;;;385        _mWtcr |= 0x80;
000690  e59d0000          LDR      r0,[sp,#0]
000694  e3800080          ORR      r0,r0,#0x80
000698  e58d0000          STR      r0,[sp,#0]
;;;386        outpw(REG_WDT_CTL, _mWtcr);
00069c  e59d0000          LDR      r0,[sp,#0]
0006a0  e59f1698          LDR      r1,|L1.3392|
0006a4  e5810000          STR      r0,[r1,#0]
;;;387    }
0006a8  e8bd8008          POP      {r3,pc}
;;;388    
                          ENDP

                  sysEnableWatchDogTimerReset PROC
;;;393     */
;;;394    void sysEnableWatchDogTimerReset(void)
0006ac  e92d4008          PUSH     {r3,lr}
;;;395    {
;;;396        UINT32 volatile _mWtcr;
;;;397    
;;;398        _mWtcr = inpw(REG_WDT_CTL);
0006b0  e59f0688          LDR      r0,|L1.3392|
0006b4  e5900000          LDR      r0,[r0,#0]
0006b8  e58d0000          STR      r0,[sp,#0]
;;;399        _mWtcr |= 0x02;
0006bc  e59d0000          LDR      r0,[sp,#0]
0006c0  e3800002          ORR      r0,r0,#2
0006c4  e58d0000          STR      r0,[sp,#0]
;;;400        outpw(REG_WDT_CTL, _mWtcr);
0006c8  e59d0000          LDR      r0,[sp,#0]
0006cc  e59f166c          LDR      r1,|L1.3392|
0006d0  e5810000          STR      r0,[r1,#0]
;;;401    }
0006d4  e8bd8008          POP      {r3,pc}
;;;402    
                          ENDP

                  sysInstallWatchDogTimerISR PROC
;;;411     */
;;;412    PVOID sysInstallWatchDogTimerISR(INT32 nIntTypeLevel, PVOID pvNewISR)
0006d8  e92d40f8          PUSH     {r3-r7,lr}
;;;413    {
0006dc  e1a05000          MOV      r5,r0
0006e0  e1a04001          MOV      r4,r1
;;;414        PVOID _mOldVect = NULL;
0006e4  e3a06000          MOV      r6,#0
;;;415        UINT32 volatile _mWtcr;
;;;416    
;;;417        _mWtcr = inpw(REG_WDT_CTL);
0006e8  e59f0650          LDR      r0,|L1.3392|
0006ec  e5900000          LDR      r0,[r0,#0]
0006f0  e58d0000          STR      r0,[sp,#0]
;;;418        _mWtcr |= 0x40;
0006f4  e59d0000          LDR      r0,[sp,#0]
0006f8  e3800040          ORR      r0,r0,#0x40
0006fc  e58d0000          STR      r0,[sp,#0]
;;;419        outpw(REG_WDT_CTL, _mWtcr);
000700  e59d0000          LDR      r0,[sp,#0]
000704  e59f1634          LDR      r1,|L1.3392|
000708  e5810000          STR      r0,[r1,#0]
;;;420        _mOldVect = sysInstallISR(nIntTypeLevel, WDT_IRQn, pvNewISR);
00070c  e1a02004          MOV      r2,r4
000710  e3a01001          MOV      r1,#1
000714  e1a00005          MOV      r0,r5
000718  ebfffffe          BL       sysInstallISR
00071c  e1a06000          MOV      r6,r0
;;;421        sysEnableInterrupt(WDT_IRQn);
000720  e3a00001          MOV      r0,#1
000724  ebfffffe          BL       sysEnableInterrupt
;;;422        sysSetLocalInterrupt(ENABLE_IRQ);
000728  e3a0007f          MOV      r0,#0x7f
00072c  ebfffffe          BL       sysSetLocalInterrupt
;;;423    
;;;424        return _mOldVect;
000730  e1a00006          MOV      r0,r6
;;;425    }
000734  e8bd80f8          POP      {r3-r7,pc}
;;;426    
                          ENDP

                  sysSetWatchDogTimerInterval PROC
;;;433     */
;;;434    INT32 sysSetWatchDogTimerInterval(INT32 nWdtInterval)
000738  e92d4008          PUSH     {r3,lr}
;;;435    {
00073c  e1a01000          MOV      r1,r0
;;;436        UINT32 volatile _mWtcr;
;;;437    
;;;438        _mWtcr = inpw(REG_WDT_CTL) & ~0x700;
000740  e59f05f8          LDR      r0,|L1.3392|
000744  e5900000          LDR      r0,[r0,#0]
000748  e3c00c07          BIC      r0,r0,#0x700
00074c  e58d0000          STR      r0,[sp,#0]
;;;439        _mWtcr = _mWtcr | (nWdtInterval << 8);
000750  e59d0000          LDR      r0,[sp,#0]
000754  e1800401          ORR      r0,r0,r1,LSL #8
000758  e58d0000          STR      r0,[sp,#0]
;;;440        outpw(REG_WDT_CTL, _mWtcr);
00075c  e59d0000          LDR      r0,[sp,#0]
000760  e59f25d8          LDR      r2,|L1.3392|
000764  e5820000          STR      r0,[r2,#0]
;;;441    
;;;442        return 0;
000768  e3a00000          MOV      r0,#0
;;;443    }
00076c  e8bd8008          POP      {r3,pc}
;;;444    
                          ENDP

                  sysSetTimerEvent PROC
;;;453     */
;;;454    INT32 sysSetTimerEvent(INT32 nTimeNo, UINT32 uTimeTick, PVOID pvFun)
000770  e92d4038          PUSH     {r3-r5,lr}
;;;455    {
000774  e1a03000          MOV      r3,r0
;;;456        int volatile i;
;;;457        int val=0;
000778  e3a00000          MOV      r0,#0
;;;458    
;;;459        switch (nTimeNo) {
00077c  e3530000          CMP      r3,#0
000780  0a000002          BEQ      |L1.1936|
000784  e3530001          CMP      r3,#1
000788  1a000058          BNE      |L1.2288|
00078c  ea00002b          B        |L1.2112|
                  |L1.1936|
;;;460        case TIMER0:
000790  e1a00000          MOV      r0,r0
;;;461            _sys_bIsSetTime0Event = TRUE;
000794  e3a0c001          MOV      r12,#1
000798  e59f456c          LDR      r4,|L1.3340|
00079c  e5c4c000          STRB     r12,[r4,#0]  ; _sys_bIsSetTime0Event
;;;462            _sys_uTime0EventCount++;
0007a0  e59fc590          LDR      r12,|L1.3384|
0007a4  e59cc000          LDR      r12,[r12,#0]  ; _sys_uTime0EventCount
0007a8  e28cc001          ADD      r12,r12,#1
0007ac  e59f4584          LDR      r4,|L1.3384|
0007b0  e584c000          STR      r12,[r4,#0]  ; _sys_uTime0EventCount
;;;463            for (i=0; i<TimerEventCount; i++) {
0007b4  e3a0c000          MOV      r12,#0
0007b8  e58dc000          STR      r12,[sp,#0]
0007bc  ea00001a          B        |L1.2092|
                  |L1.1984|
;;;464                if (tTime0Event[i].active == FALSE) {
0007c0  e59fc548          LDR      r12,|L1.3344|
0007c4  e59d4000          LDR      r4,[sp,#0]
0007c8  e79cc204          LDR      r12,[r12,r4,LSL #4]
0007cc  e35c0000          CMP      r12,#0
0007d0  1a000012          BNE      |L1.2080|
;;;465                    tTime0Event[i].active = TRUE;
0007d4  e3a0c001          MOV      r12,#1
0007d8  e59f4530          LDR      r4,|L1.3344|
0007dc  e59d5000          LDR      r5,[sp,#0]
0007e0  e784c205          STR      r12,[r4,r5,LSL #4]
;;;466                    tTime0Event[i].initTick = uTimeTick;
0007e4  e284c000          ADD      r12,r4,#0
0007e8  e59d4000          LDR      r4,[sp,#0]
0007ec  e08cc204          ADD      r12,r12,r4,LSL #4
0007f0  e58c1004          STR      r1,[r12,#4]
;;;467                    tTime0Event[i].curTick = uTimeTick;
0007f4  e59fc514          LDR      r12,|L1.3344|
0007f8  e59d4000          LDR      r4,[sp,#0]
0007fc  e08cc204          ADD      r12,r12,r4,LSL #4
000800  e58c1008          STR      r1,[r12,#8]
;;;468                    tTime0Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
000804  e59fc504          LDR      r12,|L1.3344|
000808  e59d4000          LDR      r4,[sp,#0]
00080c  e08cc204          ADD      r12,r12,r4,LSL #4
000810  e58c200c          STR      r2,[r12,#0xc]
;;;469                    val = i+1;
000814  e59dc000          LDR      r12,[sp,#0]
000818  e28c0001          ADD      r0,r12,#1
;;;470                    break;
00081c  ea000005          B        |L1.2104|
                  |L1.2080|
000820  e59dc000          LDR      r12,[sp,#0]           ;463
000824  e28cc001          ADD      r12,r12,#1            ;463
000828  e58dc000          STR      r12,[sp,#0]           ;463
                  |L1.2092|
00082c  e59dc000          LDR      r12,[sp,#0]           ;463
000830  e35c000a          CMP      r12,#0xa              ;463
000834  baffffe1          BLT      |L1.1984|
                  |L1.2104|
000838  e1a00000          MOV      r0,r0
;;;471                }
;;;472            }
;;;473            break;
00083c  ea00002d          B        |L1.2296|
                  |L1.2112|
;;;474    
;;;475        case TIMER1:
000840  e1a00000          MOV      r0,r0
;;;476            _sys_bIsSetTime1Event = TRUE;
000844  e3a0c001          MOV      r12,#1
000848  e59f44c8          LDR      r4,|L1.3352|
00084c  e5c4c000          STRB     r12,[r4,#0]  ; _sys_bIsSetTime1Event
;;;477            _sys_uTime1EventCount++;
000850  e59fc4e4          LDR      r12,|L1.3388|
000854  e59cc000          LDR      r12,[r12,#0]  ; _sys_uTime1EventCount
000858  e28cc001          ADD      r12,r12,#1
00085c  e59f44d8          LDR      r4,|L1.3388|
000860  e584c000          STR      r12,[r4,#0]  ; _sys_uTime1EventCount
;;;478            for (i=0; i<TimerEventCount; i++) {
000864  e3a0c000          MOV      r12,#0
000868  e58dc000          STR      r12,[sp,#0]
00086c  ea00001a          B        |L1.2268|
                  |L1.2160|
;;;479                if (tTime1Event[i].active == FALSE) {
000870  e59fc4a4          LDR      r12,|L1.3356|
000874  e59d4000          LDR      r4,[sp,#0]
000878  e79cc204          LDR      r12,[r12,r4,LSL #4]
00087c  e35c0000          CMP      r12,#0
000880  1a000012          BNE      |L1.2256|
;;;480                    tTime1Event[i].active = TRUE;
000884  e3a0c001          MOV      r12,#1
000888  e59f448c          LDR      r4,|L1.3356|
00088c  e59d5000          LDR      r5,[sp,#0]
000890  e784c205          STR      r12,[r4,r5,LSL #4]
;;;481                    tTime1Event[i].initTick = uTimeTick;
000894  e284c000          ADD      r12,r4,#0
000898  e59d4000          LDR      r4,[sp,#0]
00089c  e08cc204          ADD      r12,r12,r4,LSL #4
0008a0  e58c1004          STR      r1,[r12,#4]
;;;482                    tTime1Event[i].curTick = uTimeTick;
0008a4  e59fc470          LDR      r12,|L1.3356|
0008a8  e59d4000          LDR      r4,[sp,#0]
0008ac  e08cc204          ADD      r12,r12,r4,LSL #4
0008b0  e58c1008          STR      r1,[r12,#8]
;;;483                    tTime1Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
0008b4  e59fc460          LDR      r12,|L1.3356|
0008b8  e59d4000          LDR      r4,[sp,#0]
0008bc  e08cc204          ADD      r12,r12,r4,LSL #4
0008c0  e58c200c          STR      r2,[r12,#0xc]
;;;484                    val = i+1;
0008c4  e59dc000          LDR      r12,[sp,#0]
0008c8  e28c0001          ADD      r0,r12,#1
;;;485                    break;
0008cc  ea000005          B        |L1.2280|
                  |L1.2256|
0008d0  e59dc000          LDR      r12,[sp,#0]           ;478
0008d4  e28cc001          ADD      r12,r12,#1            ;478
0008d8  e58dc000          STR      r12,[sp,#0]           ;478
                  |L1.2268|
0008dc  e59dc000          LDR      r12,[sp,#0]           ;478
0008e0  e35c000a          CMP      r12,#0xa              ;478
0008e4  baffffe1          BLT      |L1.2160|
                  |L1.2280|
0008e8  e1a00000          MOV      r0,r0
;;;486                }
;;;487            }
;;;488            break;
0008ec  ea000001          B        |L1.2296|
                  |L1.2288|
;;;489    
;;;490        default:
0008f0  e1a00000          MOV      r0,r0
0008f4  e1a00000          MOV      r0,r0                 ;459
                  |L1.2296|
0008f8  e1a00000          MOV      r0,r0                 ;473
;;;491            ;
;;;492        }
;;;493    
;;;494        return val;
;;;495    }
0008fc  e8bd8038          POP      {r3-r5,pc}
;;;496    
                          ENDP

                  sysClearTimerEvent PROC
;;;504     */
;;;505    void sysClearTimerEvent(INT32 nTimeNo, UINT32 uTimeEventNo)
000900  e3500000          CMP      r0,#0
;;;506    {
;;;507        switch (nTimeNo) {
000904  0a000002          BEQ      |L1.2324|
000908  e3500001          CMP      r0,#1
00090c  1a000024          BNE      |L1.2468|
000910  ea000011          B        |L1.2396|
                  |L1.2324|
;;;508        case TIMER0:
000914  e1a00000          MOV      r0,r0
;;;509            tTime0Event[uTimeEventNo-1].active = FALSE;
000918  e3a02000          MOV      r2,#0
00091c  e2413001          SUB      r3,r1,#1
000920  e59fc3e8          LDR      r12,|L1.3344|
000924  e78c2203          STR      r2,[r12,r3,LSL #4]
;;;510            _sys_uTime0EventCount--;
000928  e59f2408          LDR      r2,|L1.3384|
00092c  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime0EventCount
000930  e2422001          SUB      r2,r2,#1
000934  e59f33fc          LDR      r3,|L1.3384|
000938  e5832000          STR      r2,[r3,#0]  ; _sys_uTime0EventCount
;;;511            if (_sys_uTime0EventCount == 0)
00093c  e2832000          ADD      r2,r3,#0
000940  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime0EventCount
000944  e3520000          CMP      r2,#0
000948  1a000002          BNE      |L1.2392|
;;;512                _sys_bIsSetTime0Event = FALSE;
00094c  e3a02000          MOV      r2,#0
000950  e59f33b4          LDR      r3,|L1.3340|
000954  e5c32000          STRB     r2,[r3,#0]  ; _sys_bIsSetTime0Event
                  |L1.2392|
;;;513            break;
000958  ea000013          B        |L1.2476|
                  |L1.2396|
;;;514    
;;;515        case TIMER1:
00095c  e1a00000          MOV      r0,r0
;;;516            tTime1Event[uTimeEventNo-1].active = FALSE;
000960  e3a02000          MOV      r2,#0
000964  e2413001          SUB      r3,r1,#1
000968  e59fc3ac          LDR      r12,|L1.3356|
00096c  e78c2203          STR      r2,[r12,r3,LSL #4]
;;;517            _sys_uTime1EventCount--;
000970  e59f23c4          LDR      r2,|L1.3388|
000974  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime1EventCount
000978  e2422001          SUB      r2,r2,#1
00097c  e59f33b8          LDR      r3,|L1.3388|
000980  e5832000          STR      r2,[r3,#0]  ; _sys_uTime1EventCount
;;;518            if (_sys_uTime1EventCount == 0)
000984  e2832000          ADD      r2,r3,#0
000988  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime1EventCount
00098c  e3520000          CMP      r2,#0
000990  1a000002          BNE      |L1.2464|
;;;519                _sys_bIsSetTime1Event = FALSE;
000994  e3a02000          MOV      r2,#0
000998  e59f3378          LDR      r3,|L1.3352|
00099c  e5c32000          STRB     r2,[r3,#0]  ; _sys_bIsSetTime1Event
                  |L1.2464|
;;;520            break;
0009a0  ea000001          B        |L1.2476|
                  |L1.2468|
;;;521    
;;;522        default:
0009a4  e1a00000          MOV      r0,r0
0009a8  e1a00000          MOV      r0,r0                 ;507
                  |L1.2476|
0009ac  e1a00000          MOV      r0,r0                 ;513
;;;523            ;
;;;524        }
;;;525    }
0009b0  e12fff1e          BX       lr
;;;526    
                          ENDP

                  sysDOS_Time_To_UTC PROC
;;;536    
;;;537    UINT32 sysDOS_Time_To_UTC(DateTime_T ltime)
0009b4  e92d000f          PUSH     {r0-r3}
;;;538    {
;;;539        int     i, leap_year_cnt;
;;;540        UINT32  utc;
;;;541    
;;;542        if ((ltime.mon < 1) || (ltime.mon > 12) || (ltime.day < 1) || (ltime.day > 31) ||
0009b8  e59d0004          LDR      r0,[sp,#4]
0009bc  e3500000          CMP      r0,#0
0009c0  0a000011          BEQ      |L1.2572|
0009c4  e59d0004          LDR      r0,[sp,#4]
0009c8  e350000c          CMP      r0,#0xc
0009cc  8a00000e          BHI      |L1.2572|
0009d0  e59d0008          LDR      r0,[sp,#8]
0009d4  e3500000          CMP      r0,#0
0009d8  0a00000b          BEQ      |L1.2572|
0009dc  e59d0008          LDR      r0,[sp,#8]
0009e0  e350001f          CMP      r0,#0x1f
0009e4  8a000008          BHI      |L1.2572|
;;;543                (ltime.hour > 23) || (ltime.min > 59) || (ltime.sec > 59)) {
0009e8  e59d000c          LDR      r0,[sp,#0xc]
0009ec  e3500017          CMP      r0,#0x17
0009f0  8a000005          BHI      |L1.2572|
0009f4  e59d0010          LDR      r0,[sp,#0x10]
0009f8  e350003b          CMP      r0,#0x3b
0009fc  8a000002          BHI      |L1.2572|
000a00  e59d0014          LDR      r0,[sp,#0x14]
000a04  e350003b          CMP      r0,#0x3b
000a08  9a000002          BLS      |L1.2584|
                  |L1.2572|
;;;544            //_debug_msg("DOS_Time_To_UTC - illegal time!! %d-%d-%d %d:%d:%d\n", year, month, day, hour, minute, second);
;;;545            return 1;
000a0c  e3a00001          MOV      r0,#1
                  |L1.2576|
000a10  e28dd010          ADD      sp,sp,#0x10
;;;546        }
;;;547    
;;;548        ltime.year = ltime.year - 1970;     /* DOS is 1980 started, UTC is 1970 started */
;;;549    
;;;550        leap_year_cnt = (ltime.year + 1) / 4;
;;;551    
;;;552        utc = ltime.year * SECONDS_365_DAY + leap_year_cnt * SECONDS_PER_DAY;
;;;553    
;;;554        if ((ltime.year + 2) % 4 == 0)
;;;555            month_seconds[1] = 29 * SECONDS_PER_DAY;    /* leap year */
;;;556        else
;;;557            month_seconds[1] = 28 * SECONDS_PER_DAY;    /* non-leap year */
;;;558    
;;;559        for (i = 0; i < ltime.mon - 1; i++)
;;;560            utc += month_seconds[i];
;;;561    
;;;562        utc += (ltime.day - 1) * SECONDS_PER_DAY;
;;;563    
;;;564        utc += ltime.hour * SECONDS_PER_HOUR + ltime.min * 60 + ltime.sec;
;;;565    
;;;566        return utc;
;;;567    }
000a14  e12fff1e          BX       lr
                  |L1.2584|
000a18  e59d0000          LDR      r0,[sp,#0]            ;548
000a1c  e2400c07          SUB      r0,r0,#0x700          ;548
000a20  e24000b2          SUB      r0,r0,#0xb2           ;548
000a24  e58d0000          STR      r0,[sp,#0]            ;548
000a28  e59d0000          LDR      r0,[sp,#0]            ;550
000a2c  e2800001          ADD      r0,r0,#1              ;550
000a30  e1a03120          LSR      r3,r0,#2              ;550
000a34  e59d0000          LDR      r0,[sp,#0]            ;552
000a38  e59fc304          LDR      r12,|L1.3396|
000a3c  e000009c          MUL      r0,r12,r0             ;552
000a40  e59fc300          LDR      r12,|L1.3400|
000a44  e00c0c93          MUL      r12,r3,r12            ;552
000a48  e080138c          ADD      r1,r0,r12,LSL #7      ;552
000a4c  e59d0000          LDR      r0,[sp,#0]            ;554
000a50  e2800002          ADD      r0,r0,#2              ;554
000a54  e3100003          TST      r0,#3                 ;554
000a58  1a000003          BNE      |L1.2668|
000a5c  e59f02e8          LDR      r0,|L1.3404|
000a60  e59fc2e8          LDR      r12,|L1.3408|
000a64  e58c0004          STR      r0,[r12,#4]           ;555  ; month_seconds
000a68  ea000002          B        |L1.2680|
                  |L1.2668|
000a6c  e59f02e0          LDR      r0,|L1.3412|
000a70  e59fc2d8          LDR      r12,|L1.3408|
000a74  e58c0004          STR      r0,[r12,#4]           ;557  ; month_seconds
                  |L1.2680|
000a78  e3a02000          MOV      r2,#0                 ;559
000a7c  ea000003          B        |L1.2704|
                  |L1.2688|
000a80  e59f02c8          LDR      r0,|L1.3408|
000a84  e7900102          LDR      r0,[r0,r2,LSL #2]     ;560
000a88  e0811000          ADD      r1,r1,r0              ;560
000a8c  e2822001          ADD      r2,r2,#1              ;559
                  |L1.2704|
000a90  e59d0004          LDR      r0,[sp,#4]            ;559
000a94  e2400001          SUB      r0,r0,#1              ;559
000a98  e1500002          CMP      r0,r2                 ;559
000a9c  8afffff7          BHI      |L1.2688|
000aa0  e59d0008          LDR      r0,[sp,#8]            ;562
000aa4  e2400001          SUB      r0,r0,#1              ;562
000aa8  e59fc298          LDR      r12,|L1.3400|
000aac  e000009c          MUL      r0,r12,r0             ;562
000ab0  e0811380          ADD      r1,r1,r0,LSL #7       ;562
000ab4  e3a0cee1          MOV      r12,#0xe10            ;564
000ab8  e59d000c          LDR      r0,[sp,#0xc]          ;564
000abc  e000009c          MUL      r0,r12,r0             ;564
000ac0  e59dc010          LDR      r12,[sp,#0x10]        ;564
000ac4  e06cc20c          RSB      r12,r12,r12,LSL #4    ;564
000ac8  e080010c          ADD      r0,r0,r12,LSL #2      ;564
000acc  e59dc014          LDR      r12,[sp,#0x14]        ;564
000ad0  e080000c          ADD      r0,r0,r12             ;564
000ad4  e0811000          ADD      r1,r1,r0              ;564
000ad8  e1a00001          MOV      r0,r1                 ;566
000adc  eaffffcb          B        |L1.2576|
;;;568    
                          ENDP

                  sysUTC_To_DOS_Time PROC
;;;569    
;;;570    void  sysUTC_To_DOS_Time(UINT32 utc, DateTime_T *dos_tm)
000ae0  e92d41f0          PUSH     {r4-r8,lr}
;;;571    {
000ae4  e1a06000          MOV      r6,r0
000ae8  e1a05001          MOV      r5,r1
;;;572        int     the_year = 1970;
000aec  e59f4264          LDR      r4,|L1.3416|
;;;573        int     i, seconds;
;;;574    
;;;575        while (1) {
000af0  ea00000d          B        |L1.2860|
                  |L1.2804|
;;;576            if (the_year % 4 == 0)
000af4  e1a01fc4          ASR      r1,r4,#31
000af8  e0841f21          ADD      r1,r4,r1,LSR #30
000afc  e1a01141          ASR      r1,r1,#2
000b00  e0541101          SUBS     r1,r4,r1,LSL #2
000b04  1a000001          BNE      |L1.2832|
;;;577                seconds = SECONDS_366_DAY;
000b08  e59f824c          LDR      r8,|L1.3420|
000b0c  ea000000          B        |L1.2836|
                  |L1.2832|
;;;578            else
;;;579                seconds = SECONDS_365_DAY;
000b10  e59f822c          LDR      r8,|L1.3396|
                  |L1.2836|
;;;580            if (utc >= seconds) {
000b14  e1560008          CMP      r6,r8
000b18  3a000002          BCC      |L1.2856|
;;;581                utc -= seconds;
000b1c  e0466008          SUB      r6,r6,r8
;;;582                the_year++;
000b20  e2844001          ADD      r4,r4,#1
000b24  ea000000          B        |L1.2860|
                  |L1.2856|
;;;583            } else
;;;584                break;
000b28  ea000000          B        |L1.2864|
                  |L1.2860|
000b2c  eafffff0          B        |L1.2804|
                  |L1.2864|
000b30  e1a00000          MOV      r0,r0
;;;585        }
;;;586    
;;;587        dos_tm->year = the_year;
000b34  e5854000          STR      r4,[r5,#0]
;;;588    
;;;589        if (the_year % 4 == 0)
000b38  e1a01fc4          ASR      r1,r4,#31
000b3c  e0841f21          ADD      r1,r4,r1,LSR #30
000b40  e1a01141          ASR      r1,r1,#2
000b44  e0541101          SUBS     r1,r4,r1,LSL #2
000b48  1a000003          BNE      |L1.2908|
;;;590            month_seconds[1] = 29 * SECONDS_PER_DAY;
000b4c  e59f01f8          LDR      r0,|L1.3404|
000b50  e59f11f8          LDR      r1,|L1.3408|
000b54  e5810004          STR      r0,[r1,#4]  ; month_seconds
000b58  ea000002          B        |L1.2920|
                  |L1.2908|
;;;591        else
;;;592            month_seconds[1] = 28 * SECONDS_PER_DAY;
000b5c  e59f01f0          LDR      r0,|L1.3412|
000b60  e59f11e8          LDR      r1,|L1.3408|
000b64  e5810004          STR      r0,[r1,#4]  ; month_seconds
                  |L1.2920|
;;;593    
;;;594        dos_tm->mon = 1;
000b68  e3a00001          MOV      r0,#1
000b6c  e5850004          STR      r0,[r5,#4]
;;;595        for (i = 0; i < 11; i++) {
000b70  e3a07000          MOV      r7,#0
000b74  ea00000c          B        |L1.2988|
                  |L1.2936|
;;;596            if (utc >= month_seconds[i]) {
000b78  e59f01d0          LDR      r0,|L1.3408|
000b7c  e7900107          LDR      r0,[r0,r7,LSL #2]
000b80  e1500006          CMP      r0,r6
000b84  8a000006          BHI      |L1.2980|
;;;597                utc -= month_seconds[i];
000b88  e59f01c0          LDR      r0,|L1.3408|
000b8c  e7900107          LDR      r0,[r0,r7,LSL #2]
000b90  e0466000          SUB      r6,r6,r0
;;;598                dos_tm->mon++;
000b94  e5950004          LDR      r0,[r5,#4]
000b98  e2800001          ADD      r0,r0,#1
000b9c  e5850004          STR      r0,[r5,#4]
000ba0  ea000000          B        |L1.2984|
                  |L1.2980|
;;;599            } else
;;;600                break;
000ba4  ea000002          B        |L1.2996|
                  |L1.2984|
000ba8  e2877001          ADD      r7,r7,#1              ;595
                  |L1.2988|
000bac  e357000b          CMP      r7,#0xb               ;595
000bb0  bafffff0          BLT      |L1.2936|
                  |L1.2996|
000bb4  e1a00000          MOV      r0,r0
;;;601        }
;;;602    
;;;603        dos_tm->day = 1 + (utc / SECONDS_PER_DAY);
000bb8  e59f11a0          LDR      r1,|L1.3424|
000bbc  e1a00006          MOV      r0,r6
000bc0  ebfffffe          BL       __aeabi_uidivmod
000bc4  e2800001          ADD      r0,r0,#1
000bc8  e5850008          STR      r0,[r5,#8]
;;;604        utc %= SECONDS_PER_DAY;
000bcc  e59f118c          LDR      r1,|L1.3424|
000bd0  e1a00006          MOV      r0,r6
000bd4  ebfffffe          BL       __aeabi_uidivmod
000bd8  e1a06001          MOV      r6,r1
;;;605    
;;;606        dos_tm->hour = utc / SECONDS_PER_HOUR;
000bdc  e3a01ee1          MOV      r1,#0xe10
000be0  e1a00006          MOV      r0,r6
000be4  ebfffffe          BL       __aeabi_uidivmod
000be8  e585000c          STR      r0,[r5,#0xc]
;;;607        utc %= SECONDS_PER_HOUR;
000bec  e3a01ee1          MOV      r1,#0xe10
000bf0  e1a00006          MOV      r0,r6
000bf4  ebfffffe          BL       __aeabi_uidivmod
000bf8  e1a06001          MOV      r6,r1
;;;608    
;;;609        dos_tm->min = utc / 60;
000bfc  e3a0103c          MOV      r1,#0x3c
000c00  e1a00006          MOV      r0,r6
000c04  ebfffffe          BL       __aeabi_uidivmod
000c08  e5850010          STR      r0,[r5,#0x10]
;;;610        dos_tm->sec = utc % 60;
000c0c  e3a0103c          MOV      r1,#0x3c
000c10  e1a00006          MOV      r0,r6
000c14  ebfffffe          BL       __aeabi_uidivmod
000c18  e5851014          STR      r1,[r5,#0x14]
;;;611    }
000c1c  e8bd81f0          POP      {r4-r8,pc}
;;;612    
                          ENDP

                  sysSetLocalTime PROC
;;;613    
;;;614    void sysSetLocalTime(DateTime_T ltime)
000c20  e92d000f          PUSH     {r0-r3}
;;;615    {
000c24  e92d400c          PUSH     {r2,r3,lr}
;;;616        _sys_ReferenceTime_Clock = _sys_uTimer0Count;
000c28  e59f00d8          LDR      r0,|L1.3336|
000c2c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
000c30  e59f112c          LDR      r1,|L1.3428|
000c34  e5810000          STR      r0,[r1,#0]  ; _sys_ReferenceTime_Clock
;;;617        _sys_ReferenceTime_UTC = sysDOS_Time_To_UTC(ltime);
000c38  e59d001c          LDR      r0,[sp,#0x1c]
000c3c  e59d1020          LDR      r1,[sp,#0x20]
000c40  e88d0003          STM      sp,{r0,r1}
000c44  e28d300c          ADD      r3,sp,#0xc
000c48  e893000f          LDM      r3,{r0-r3}
000c4c  ebfffffe          BL       sysDOS_Time_To_UTC
000c50  e59f1110          LDR      r1,|L1.3432|
000c54  e5810000          STR      r0,[r1,#0]  ; _sys_ReferenceTime_UTC
;;;618    }
000c58  e28dd008          ADD      sp,sp,#8
000c5c  e49df014          LDR      pc,[sp],#0x14
;;;619    
                          ENDP

                  sysGetCurrentTime PROC
;;;620    void sysGetCurrentTime(DateTime_T *curTime)
000c60  e92d4070          PUSH     {r4-r6,lr}
;;;621    {
000c64  e1a04000          MOV      r4,r0
;;;622        UINT32 clock, utc_time;
;;;623    
;;;624        clock = _sys_uTimer0Count;
000c68  e59f0098          LDR      r0,|L1.3336|
000c6c  e5905000          LDR      r5,[r0,#0]  ; _sys_uTimer0Count
;;;625        utc_time = _sys_ReferenceTime_UTC + (clock - _sys_ReferenceTime_Clock) / _sys_uTimer0TickPerSecond;
000c70  e59f10ec          LDR      r1,|L1.3428|
000c74  e5911000          LDR      r1,[r1,#0]  ; _sys_ReferenceTime_Clock
000c78  e0450001          SUB      r0,r5,r1
000c7c  e59f10a8          LDR      r1,|L1.3372|
000c80  e5911000          LDR      r1,[r1,#0]  ; _sys_uTimer0TickPerSecond
000c84  ebfffffe          BL       __aeabi_uidivmod
000c88  e59f10d8          LDR      r1,|L1.3432|
000c8c  e5911000          LDR      r1,[r1,#0]  ; _sys_ReferenceTime_UTC
000c90  e0806001          ADD      r6,r0,r1
;;;626    
;;;627        sysUTC_To_DOS_Time(utc_time, curTime);
000c94  e1a01004          MOV      r1,r4
000c98  e1a00006          MOV      r0,r6
000c9c  ebfffffe          BL       sysUTC_To_DOS_Time
;;;628    }
000ca0  e8bd8070          POP      {r4-r6,pc}
;;;629    
                          ENDP

                  sysDelay PROC
;;;638     */
;;;639    void sysDelay(UINT32 uTicks)
000ca4  e92d4038          PUSH     {r3-r5,lr}
;;;640    {
000ca8  e1a04000          MOV      r4,r0
;;;641        UINT32 volatile btime;
;;;642    
;;;643        if(!_sys_bIsTimer0Initial) {
000cac  e59f0074          LDR      r0,|L1.3368|
000cb0  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsTimer0Initial
000cb4  e3500000          CMP      r0,#0
000cb8  1a000003          BNE      |L1.3276|
;;;644            sysStartTimer(TIMER0, 100, PERIODIC_MODE);
000cbc  e3a02001          MOV      r2,#1
000cc0  e3a01064          MOV      r1,#0x64
000cc4  e3a00000          MOV      r0,#0
000cc8  ebfffffe          BL       sysStartTimer
                  |L1.3276|
;;;645        }
;;;646    
;;;647        btime = sysGetTicks(TIMER0);
000ccc  e3a00000          MOV      r0,#0
000cd0  ebfffffe          BL       sysGetTicks
000cd4  e58d0000          STR      r0,[sp,#0]
;;;648        while(1) {
000cd8  ea000006          B        |L1.3320|
                  |L1.3292|
;;;649            if((sysGetTicks(TIMER0) - btime) > uTicks) {
000cdc  e3a00000          MOV      r0,#0
000ce0  ebfffffe          BL       sysGetTicks
000ce4  e59d1000          LDR      r1,[sp,#0]
000ce8  e0400001          SUB      r0,r0,r1
000cec  e1500004          CMP      r0,r4
000cf0  9a000000          BLS      |L1.3320|
;;;650                break;
000cf4  ea000000          B        |L1.3324|
                  |L1.3320|
000cf8  eafffff7          B        |L1.3292|
                  |L1.3324|
000cfc  e1a00000          MOV      r0,r0
;;;651            }
;;;652        }
;;;653    }
000d00  e8bd8038          POP      {r3-r5,pc}
;;;654    
                          ENDP

                  |L1.3332|
                          DCD      0xb8001000
                  |L1.3336|
                          DCD      _sys_uTimer0Count
                  |L1.3340|
                          DCD      _sys_bIsSetTime0Event
                  |L1.3344|
                          DCD      tTime0Event
                  |L1.3348|
                          DCD      _sys_uTimer1Count
                  |L1.3352|
                          DCD      _sys_bIsSetTime1Event
                  |L1.3356|
                          DCD      tTime1Event
                  |L1.3360|
                          DCD      _sys_uTimer0ClockRate
                  |L1.3364|
                          DCD      _sys_uTimer1ClockRate
                  |L1.3368|
                          DCD      _sys_bIsTimer0Initial
                  |L1.3372|
                          DCD      _sys_uTimer0TickPerSecond
                  |L1.3376|
                          DCD      _sys_pvOldTimer0Vect
                  |L1.3380|
                          DCD      _sys_pvOldTimer1Vect
                  |L1.3384|
                          DCD      _sys_uTime0EventCount
                  |L1.3388|
                          DCD      _sys_uTime1EventCount
                  |L1.3392|
                          DCD      0xb8001800
                  |L1.3396|
                          DCD      0x01e13380
                  |L1.3400|
                          DCD      0x000002a3
                  |L1.3404|
                          DCD      0x00263b80
                  |L1.3408|
                          DCD      month_seconds
                  |L1.3412|
                          DCD      0x0024ea00
                  |L1.3416|
                          DCD      0x000007b2
                  |L1.3420|
                          DCD      0x01e28500
                  |L1.3424|
                          DCD      0x00015180
                  |L1.3428|
                          DCD      _sys_ReferenceTime_Clock
                  |L1.3432|
                          DCD      _sys_ReferenceTime_UTC

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        160
                  tTime1Event
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_uTimer0ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer1ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer0Count
                          DCD      0x00000000
                  _sys_uTimer1Count
                          DCD      0x00000000
                  _sys_uTime0EventCount
                          DCD      0x00000000
                  _sys_uTime1EventCount
                          DCD      0x00000000
                  _sys_bIsSetTime0Event
000018  00                DCB      0x00
                  _sys_bIsSetTime1Event
000019  00                DCB      0x00
                  _sys_bIsTimer0Initial
00001a  0000              DCB      0x00,0x00
                  _sys_ReferenceTime_Clock
                          DCD      0x00000000
                  month_seconds
                          DCD      0x0028de80
                          DCD      0x0024ea00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                  _sys_pvOldTimer0Vect
                          DCD      0x00000000
                  _sys_pvOldTimer1Vect
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_ReferenceTime_UTC
                          DCD      0x00000000
