; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_ecc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_ecc.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_ecc.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_ecc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  generic_hweight32 PROC
;;;82     
;;;83     static __inline unsigned int generic_hweight32(unsigned int w)
000000  e1a02000          MOV      r2,r0
;;;84     {
;;;85     	unsigned int res = (w & 0x55555555) + ((w >> 1) & 0x55555555);
000004  e59f04bc          LDR      r0,|L1.1224|
000008  e0000002          AND      r0,r0,r2
00000c  e59f34b4          LDR      r3,|L1.1224|
000010  e00330a2          AND      r3,r3,r2,LSR #1
000014  e0801003          ADD      r1,r0,r3
;;;86     	res = (res & 0x33333333) + ((res >> 2) & 0x33333333);
000018  e59f04ac          LDR      r0,|L1.1228|
00001c  e0000001          AND      r0,r0,r1
000020  e59f34a4          LDR      r3,|L1.1228|
000024  e0033121          AND      r3,r3,r1,LSR #2
000028  e0801003          ADD      r1,r0,r3
;;;87     	res = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);
00002c  e59f049c          LDR      r0,|L1.1232|
000030  e0000001          AND      r0,r0,r1
000034  e59f3494          LDR      r3,|L1.1232|
000038  e0033221          AND      r3,r3,r1,LSR #4
00003c  e0801003          ADD      r1,r0,r3
;;;88     	res = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);
000040  e3c104ff          BIC      r0,r1,#0xff000000
000044  e3c00cff          BIC      r0,r0,#0xff00
000048  e59f3484          LDR      r3,|L1.1236|
00004c  e0033421          AND      r3,r3,r1,LSR #8
000050  e0801003          ADD      r1,r0,r3
;;;89     	return (res & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);
000054  e1a00801          LSL      r0,r1,#16
000058  e1a00820          LSR      r0,r0,#16
00005c  e59f3474          LDR      r3,|L1.1240|
000060  e0033821          AND      r3,r3,r1,LSR #16
000064  e0800003          ADD      r0,r0,r3
;;;90     }
000068  e12fff1e          BX       lr
;;;91     
                          ENDP

                  generic_hweight8 PROC
;;;99     
;;;100    static __inline unsigned int generic_hweight8(unsigned int w)
00006c  e1a02000          MOV      r2,r0
;;;101    {
;;;102    	unsigned int res = (w & 0x55) + ((w >> 1) & 0x55);
000070  e2020055          AND      r0,r2,#0x55
000074  e3a03055          MOV      r3,#0x55
000078  e00330a2          AND      r3,r3,r2,LSR #1
00007c  e0801003          ADD      r1,r0,r3
;;;103    	res = (res & 0x33) + ((res >> 2) & 0x33);
000080  e2010033          AND      r0,r1,#0x33
000084  e3a03033          MOV      r3,#0x33
000088  e0033121          AND      r3,r3,r1,LSR #2
00008c  e0801003          ADD      r1,r0,r3
;;;104    	return (res & 0x0F) + ((res >> 4) & 0x0F);
000090  e201000f          AND      r0,r1,#0xf
000094  e3a0300f          MOV      r3,#0xf
000098  e0033221          AND      r3,r3,r1,LSR #4
00009c  e0800003          ADD      r0,r0,r3
;;;105    }
0000a0  e12fff1e          BX       lr
;;;106    
                          ENDP

                  yaffs_ecc_calc PROC
;;;74     /* Calculate the ECC for a 256-byte block of data */
;;;75     void yaffs_ecc_calc(const unsigned char *data, unsigned char *ecc)
0000a4  e92d41f0          PUSH     {r4-r8,lr}
;;;76     {
0000a8  e1a04000          MOV      r4,r0
0000ac  e1a03001          MOV      r3,r1
;;;77     	unsigned int i;
;;;78     	unsigned char col_parity = 0;
0000b0  e3a06000          MOV      r6,#0
;;;79     	unsigned char line_parity = 0;
0000b4  e3a01000          MOV      r1,#0
;;;80     	unsigned char line_parity_prime = 0;
0000b8  e3a02000          MOV      r2,#0
;;;81     	unsigned char t;
;;;82     	unsigned char b;
;;;83     
;;;84     	for (i = 0; i < 256; i++) {
0000bc  e3a0c000          MOV      r12,#0
0000c0  ea00000b          B        |L1.244|
                  |L1.196|
;;;85     		b = column_parity_table[*data++];
0000c4  e4d47001          LDRB     r7,[r4],#1
0000c8  e59f840c          LDR      r8,|L1.1244|
0000cc  e7d85007          LDRB     r5,[r8,r7]
;;;86     		col_parity ^= b;
0000d0  e0266005          EOR      r6,r6,r5
;;;87     
;;;88     		if (b & 0x01) {	/* odd number of bits in the byte */
0000d4  e3150001          TST      r5,#1
0000d8  0a000004          BEQ      |L1.240|
;;;89     			line_parity ^= i;
0000dc  e021700c          EOR      r7,r1,r12
0000e0  e20710ff          AND      r1,r7,#0xff
;;;90     			line_parity_prime ^= ~i;
0000e4  e1e0700c          MVN      r7,r12
0000e8  e0277002          EOR      r7,r7,r2
0000ec  e20720ff          AND      r2,r7,#0xff
                  |L1.240|
0000f0  e28cc001          ADD      r12,r12,#1            ;84
                  |L1.244|
0000f4  e35c0c01          CMP      r12,#0x100            ;84
0000f8  3afffff1          BCC      |L1.196|
;;;91     		}
;;;92     	}
;;;93     
;;;94     	ecc[2] = (~col_parity) | 0x03;
0000fc  e1e07006          MVN      r7,r6
000100  e20770ff          AND      r7,r7,#0xff
000104  e3877003          ORR      r7,r7,#3
000108  e5c37002          STRB     r7,[r3,#2]
;;;95     
;;;96     	t = 0;
00010c  e3a00000          MOV      r0,#0
;;;97     	if (line_parity & 0x80)
000110  e3110080          TST      r1,#0x80
000114  0a000000          BEQ      |L1.284|
;;;98     		t |= 0x80;
000118  e3800080          ORR      r0,r0,#0x80
                  |L1.284|
;;;99     	if (line_parity_prime & 0x80)
00011c  e3120080          TST      r2,#0x80
000120  0a000000          BEQ      |L1.296|
;;;100    		t |= 0x40;
000124  e3800040          ORR      r0,r0,#0x40
                  |L1.296|
;;;101    	if (line_parity & 0x40)
000128  e3110040          TST      r1,#0x40
00012c  0a000000          BEQ      |L1.308|
;;;102    		t |= 0x20;
000130  e3800020          ORR      r0,r0,#0x20
                  |L1.308|
;;;103    	if (line_parity_prime & 0x40)
000134  e3120040          TST      r2,#0x40
000138  0a000000          BEQ      |L1.320|
;;;104    		t |= 0x10;
00013c  e3800010          ORR      r0,r0,#0x10
                  |L1.320|
;;;105    	if (line_parity & 0x20)
000140  e3110020          TST      r1,#0x20
000144  0a000000          BEQ      |L1.332|
;;;106    		t |= 0x08;
000148  e3800008          ORR      r0,r0,#8
                  |L1.332|
;;;107    	if (line_parity_prime & 0x20)
00014c  e3120020          TST      r2,#0x20
000150  0a000000          BEQ      |L1.344|
;;;108    		t |= 0x04;
000154  e3800004          ORR      r0,r0,#4
                  |L1.344|
;;;109    	if (line_parity & 0x10)
000158  e3110010          TST      r1,#0x10
00015c  0a000000          BEQ      |L1.356|
;;;110    		t |= 0x02;
000160  e3800002          ORR      r0,r0,#2
                  |L1.356|
;;;111    	if (line_parity_prime & 0x10)
000164  e3120010          TST      r2,#0x10
000168  0a000000          BEQ      |L1.368|
;;;112    		t |= 0x01;
00016c  e3800001          ORR      r0,r0,#1
                  |L1.368|
;;;113    	ecc[1] = ~t;
000170  e1e07000          MVN      r7,r0
000174  e5c37001          STRB     r7,[r3,#1]
;;;114    
;;;115    	t = 0;
000178  e3a00000          MOV      r0,#0
;;;116    	if (line_parity & 0x08)
00017c  e3110008          TST      r1,#8
000180  0a000000          BEQ      |L1.392|
;;;117    		t |= 0x80;
000184  e3800080          ORR      r0,r0,#0x80
                  |L1.392|
;;;118    	if (line_parity_prime & 0x08)
000188  e3120008          TST      r2,#8
00018c  0a000000          BEQ      |L1.404|
;;;119    		t |= 0x40;
000190  e3800040          ORR      r0,r0,#0x40
                  |L1.404|
;;;120    	if (line_parity & 0x04)
000194  e3110004          TST      r1,#4
000198  0a000000          BEQ      |L1.416|
;;;121    		t |= 0x20;
00019c  e3800020          ORR      r0,r0,#0x20
                  |L1.416|
;;;122    	if (line_parity_prime & 0x04)
0001a0  e3120004          TST      r2,#4
0001a4  0a000000          BEQ      |L1.428|
;;;123    		t |= 0x10;
0001a8  e3800010          ORR      r0,r0,#0x10
                  |L1.428|
;;;124    	if (line_parity & 0x02)
0001ac  e3110002          TST      r1,#2
0001b0  0a000000          BEQ      |L1.440|
;;;125    		t |= 0x08;
0001b4  e3800008          ORR      r0,r0,#8
                  |L1.440|
;;;126    	if (line_parity_prime & 0x02)
0001b8  e3120002          TST      r2,#2
0001bc  0a000000          BEQ      |L1.452|
;;;127    		t |= 0x04;
0001c0  e3800004          ORR      r0,r0,#4
                  |L1.452|
;;;128    	if (line_parity & 0x01)
0001c4  e3110001          TST      r1,#1
0001c8  0a000000          BEQ      |L1.464|
;;;129    		t |= 0x02;
0001cc  e3800002          ORR      r0,r0,#2
                  |L1.464|
;;;130    	if (line_parity_prime & 0x01)
0001d0  e3120001          TST      r2,#1
0001d4  0a000000          BEQ      |L1.476|
;;;131    		t |= 0x01;
0001d8  e3800001          ORR      r0,r0,#1
                  |L1.476|
;;;132    	ecc[0] = ~t;
0001dc  e1e07000          MVN      r7,r0
0001e0  e5c37000          STRB     r7,[r3,#0]
;;;133    
;;;134    }
0001e4  e8bd81f0          POP      {r4-r8,pc}
;;;135    
                          ENDP

                  yaffs_ecc_correct PROC
;;;137    
;;;138    int yaffs_ecc_correct(unsigned char *data, unsigned char *read_ecc,
0001e8  e92d47f0          PUSH     {r4-r10,lr}
;;;139    		      const unsigned char *test_ecc)
;;;140    {
0001ec  e1a09000          MOV      r9,r0
0001f0  e1a04001          MOV      r4,r1
0001f4  e1a05002          MOV      r5,r2
;;;141    	unsigned char d0, d1, d2;	/* deltas */
;;;142    
;;;143    	d0 = read_ecc[0] ^ test_ecc[0];
0001f8  e5d40000          LDRB     r0,[r4,#0]
0001fc  e5d51000          LDRB     r1,[r5,#0]
000200  e0206001          EOR      r6,r0,r1
;;;144    	d1 = read_ecc[1] ^ test_ecc[1];
000204  e5d40001          LDRB     r0,[r4,#1]
000208  e5d51001          LDRB     r1,[r5,#1]
00020c  e0207001          EOR      r7,r0,r1
;;;145    	d2 = read_ecc[2] ^ test_ecc[2];
000210  e5d40002          LDRB     r0,[r4,#2]
000214  e5d51002          LDRB     r1,[r5,#2]
000218  e0208001          EOR      r8,r0,r1
;;;146    
;;;147    	if ((d0 | d1 | d2) == 0)
00021c  e1860007          ORR      r0,r6,r7
000220  e1900008          ORRS     r0,r0,r8
000224  1a000001          BNE      |L1.560|
;;;148    		return 0;	/* no error */
000228  e3a00000          MOV      r0,#0
                  |L1.556|
;;;149    
;;;150    	if (((d0 ^ (d0 >> 1)) & 0x55) == 0x55 &&
;;;151    	    ((d1 ^ (d1 >> 1)) & 0x55) == 0x55 &&
;;;152    	    ((d2 ^ (d2 >> 1)) & 0x54) == 0x54) {
;;;153    		/* Single bit (recoverable) error in data */
;;;154    
;;;155    		unsigned byte;
;;;156    		unsigned bit;
;;;157    
;;;158    		bit = byte = 0;
;;;159    
;;;160    		if (d1 & 0x80)
;;;161    			byte |= 0x80;
;;;162    		if (d1 & 0x20)
;;;163    			byte |= 0x40;
;;;164    		if (d1 & 0x08)
;;;165    			byte |= 0x20;
;;;166    		if (d1 & 0x02)
;;;167    			byte |= 0x10;
;;;168    		if (d0 & 0x80)
;;;169    			byte |= 0x08;
;;;170    		if (d0 & 0x20)
;;;171    			byte |= 0x04;
;;;172    		if (d0 & 0x08)
;;;173    			byte |= 0x02;
;;;174    		if (d0 & 0x02)
;;;175    			byte |= 0x01;
;;;176    
;;;177    		if (d2 & 0x80)
;;;178    			bit |= 0x04;
;;;179    		if (d2 & 0x20)
;;;180    			bit |= 0x02;
;;;181    		if (d2 & 0x08)
;;;182    			bit |= 0x01;
;;;183    
;;;184    		data[byte] ^= (1 << bit);
;;;185    
;;;186    		return 1;	/* Corrected the error */
;;;187    	}
;;;188    
;;;189    	if ((hweight8(d0) + hweight8(d1) + hweight8(d2)) == 1) {
;;;190    		/* Reccoverable error in ecc */
;;;191    
;;;192    		read_ecc[0] = test_ecc[0];
;;;193    		read_ecc[1] = test_ecc[1];
;;;194    		read_ecc[2] = test_ecc[2];
;;;195    
;;;196    		return 1;	/* Corrected the error */
;;;197    	}
;;;198    
;;;199    	/* Unrecoverable error */
;;;200    
;;;201    	return -1;
;;;202    
;;;203    }
00022c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.560|
000230  e02600c6          EOR      r0,r6,r6,ASR #1       ;150
000234  e2000055          AND      r0,r0,#0x55           ;150
000238  e3500055          CMP      r0,#0x55              ;150
00023c  1a000031          BNE      |L1.776|
000240  e02700c7          EOR      r0,r7,r7,ASR #1       ;151
000244  e2000055          AND      r0,r0,#0x55           ;151
000248  e3500055          CMP      r0,#0x55              ;151
00024c  1a00002d          BNE      |L1.776|
000250  e02800c8          EOR      r0,r8,r8,ASR #1       ;152
000254  e2000054          AND      r0,r0,#0x54           ;152
000258  e3500054          CMP      r0,#0x54              ;152
00025c  1a000029          BNE      |L1.776|
000260  e3a00000          MOV      r0,#0                 ;158
000264  e1a01000          MOV      r1,r0                 ;158
000268  e1a02000          MOV      r2,r0                 ;158
00026c  e3170080          TST      r7,#0x80              ;160
000270  0a000000          BEQ      |L1.632|
000274  e3811080          ORR      r1,r1,#0x80           ;161
                  |L1.632|
000278  e3170020          TST      r7,#0x20              ;162
00027c  0a000000          BEQ      |L1.644|
000280  e3811040          ORR      r1,r1,#0x40           ;163
                  |L1.644|
000284  e3170008          TST      r7,#8                 ;164
000288  0a000000          BEQ      |L1.656|
00028c  e3811020          ORR      r1,r1,#0x20           ;165
                  |L1.656|
000290  e3170002          TST      r7,#2                 ;166
000294  0a000000          BEQ      |L1.668|
000298  e3811010          ORR      r1,r1,#0x10           ;167
                  |L1.668|
00029c  e3160080          TST      r6,#0x80              ;168
0002a0  0a000000          BEQ      |L1.680|
0002a4  e3811008          ORR      r1,r1,#8              ;169
                  |L1.680|
0002a8  e3160020          TST      r6,#0x20              ;170
0002ac  0a000000          BEQ      |L1.692|
0002b0  e3811004          ORR      r1,r1,#4              ;171
                  |L1.692|
0002b4  e3160008          TST      r6,#8                 ;172
0002b8  0a000000          BEQ      |L1.704|
0002bc  e3811002          ORR      r1,r1,#2              ;173
                  |L1.704|
0002c0  e3160002          TST      r6,#2                 ;174
0002c4  0a000000          BEQ      |L1.716|
0002c8  e3811001          ORR      r1,r1,#1              ;175
                  |L1.716|
0002cc  e3180080          TST      r8,#0x80              ;177
0002d0  0a000000          BEQ      |L1.728|
0002d4  e3822004          ORR      r2,r2,#4              ;178
                  |L1.728|
0002d8  e3180020          TST      r8,#0x20              ;179
0002dc  0a000000          BEQ      |L1.740|
0002e0  e3822002          ORR      r2,r2,#2              ;180
                  |L1.740|
0002e4  e3180008          TST      r8,#8                 ;181
0002e8  0a000000          BEQ      |L1.752|
0002ec  e3822001          ORR      r2,r2,#1              ;182
                  |L1.752|
0002f0  e7d90001          LDRB     r0,[r9,r1]            ;184
0002f4  e3a03001          MOV      r3,#1                 ;184
0002f8  e0200213          EOR      r0,r0,r3,LSL r2       ;184
0002fc  e7c90001          STRB     r0,[r9,r1]            ;184
000300  e3a00001          MOV      r0,#1                 ;186
000304  eaffffc8          B        |L1.556|
                  |L1.776|
000308  e1a00000          MOV      r0,r0                 ;187
00030c  e1a00006          MOV      r0,r6                 ;189
000310  ebfffffe          BL       generic_hweight8
000314  e1a0a000          MOV      r10,r0                ;189
000318  e1a00007          MOV      r0,r7                 ;189
00031c  ebfffffe          BL       generic_hweight8
000320  e08aa000          ADD      r10,r10,r0            ;189
000324  e1a00008          MOV      r0,r8                 ;189
000328  ebfffffe          BL       generic_hweight8
00032c  e080000a          ADD      r0,r0,r10             ;189
000330  e3500001          CMP      r0,#1                 ;189
000334  1a000007          BNE      |L1.856|
000338  e5d50000          LDRB     r0,[r5,#0]            ;192
00033c  e5c40000          STRB     r0,[r4,#0]            ;192
000340  e5d50001          LDRB     r0,[r5,#1]            ;193
000344  e5c40001          STRB     r0,[r4,#1]            ;193
000348  e5d50002          LDRB     r0,[r5,#2]            ;194
00034c  e5c40002          STRB     r0,[r4,#2]            ;194
000350  e3a00001          MOV      r0,#1                 ;196
000354  eaffffb4          B        |L1.556|
                  |L1.856|
000358  e3e00000          MVN      r0,#0                 ;201
00035c  eaffffb2          B        |L1.556|
;;;204    
                          ENDP

                  yaffs_ecc_calc_other PROC
;;;207     */
;;;208    void yaffs_ecc_calc_other(const unsigned char *data, unsigned n_bytes,
000360  e92d41f0          PUSH     {r4-r8,lr}
;;;209    			  struct yaffs_ecc_other *ecc_other)
;;;210    {
000364  e1a03000          MOV      r3,r0
000368  e1a0c001          MOV      r12,r1
;;;211    	unsigned int i;
;;;212    	unsigned char col_parity = 0;
00036c  e3a04000          MOV      r4,#0
;;;213    	unsigned line_parity = 0;
000370  e3a05000          MOV      r5,#0
;;;214    	unsigned line_parity_prime = 0;
000374  e3a06000          MOV      r6,#0
;;;215    	unsigned char b;
;;;216    
;;;217    	for (i = 0; i < n_bytes; i++) {
000378  e3a00000          MOV      r0,#0
00037c  ea000009          B        |L1.936|
                  |L1.896|
;;;218    		b = column_parity_table[*data++];
000380  e4d37001          LDRB     r7,[r3],#1
000384  e59f8150          LDR      r8,|L1.1244|
000388  e7d81007          LDRB     r1,[r8,r7]
;;;219    		col_parity ^= b;
00038c  e0244001          EOR      r4,r4,r1
;;;220    
;;;221    		if (b & 0x01) {
000390  e3110001          TST      r1,#1
000394  0a000002          BEQ      |L1.932|
;;;222    			/* odd number of bits in the byte */
;;;223    			line_parity ^= i;
000398  e0255000          EOR      r5,r5,r0
;;;224    			line_parity_prime ^= ~i;
00039c  e1e07000          MVN      r7,r0
0003a0  e0266007          EOR      r6,r6,r7
                  |L1.932|
0003a4  e2800001          ADD      r0,r0,#1              ;217
                  |L1.936|
0003a8  e150000c          CMP      r0,r12                ;217
0003ac  3afffff3          BCC      |L1.896|
;;;225    		}
;;;226    
;;;227    	}
;;;228    
;;;229    	ecc_other->col_parity = (col_parity >> 2) & 0x3f;
0003b0  e3a0703f          MOV      r7,#0x3f
0003b4  e0077144          AND      r7,r7,r4,ASR #2
0003b8  e5c27000          STRB     r7,[r2,#0]
;;;230    	ecc_other->line_parity = line_parity;
0003bc  e5825004          STR      r5,[r2,#4]
;;;231    	ecc_other->line_parity_prime = line_parity_prime;
0003c0  e5826008          STR      r6,[r2,#8]
;;;232    }
0003c4  e8bd81f0          POP      {r4-r8,pc}
;;;233    
                          ENDP

                  yaffs_ecc_correct_other PROC
;;;234    int yaffs_ecc_correct_other(unsigned char *data, unsigned n_bytes,
0003c8  e92d5fff          PUSH     {r0-r12,lr}
;;;235    			    struct yaffs_ecc_other *read_ecc,
;;;236    			    const struct yaffs_ecc_other *test_ecc)
;;;237    {
0003cc  e1a09000          MOV      r9,r0
0003d0  e1a06002          MOV      r6,r2
0003d4  e1a07003          MOV      r7,r3
;;;238    	unsigned char delta_col;	/* column parity delta */
;;;239    	unsigned delta_line;	/* line parity delta */
;;;240    	unsigned delta_line_prime;	/* line parity delta */
;;;241    	unsigned bit;
;;;242    
;;;243    	delta_col = read_ecc->col_parity ^ test_ecc->col_parity;
0003d8  e5d60000          LDRB     r0,[r6,#0]
0003dc  e5d71000          LDRB     r1,[r7,#0]
0003e0  e0204001          EOR      r4,r0,r1
;;;244    	delta_line = read_ecc->line_parity ^ test_ecc->line_parity;
0003e4  e5960004          LDR      r0,[r6,#4]
0003e8  e5971004          LDR      r1,[r7,#4]
0003ec  e0205001          EOR      r5,r0,r1
;;;245    	delta_line_prime =
0003f0  e5960008          LDR      r0,[r6,#8]
0003f4  e5971008          LDR      r1,[r7,#8]
0003f8  e020a001          EOR      r10,r0,r1
;;;246    	    read_ecc->line_parity_prime ^ test_ecc->line_parity_prime;
;;;247    
;;;248    	if ((delta_col | delta_line | delta_line_prime) == 0)
0003fc  e1840005          ORR      r0,r4,r5
000400  e190000a          ORRS     r0,r0,r10
000404  1a000002          BNE      |L1.1044|
;;;249    		return 0;	/* no error */
000408  e3a00000          MOV      r0,#0
                  |L1.1036|
00040c  e28dd010          ADD      sp,sp,#0x10
;;;250    
;;;251    	if (delta_line == ~delta_line_prime &&
;;;252    	    (((delta_col ^ (delta_col >> 1)) & 0x15) == 0x15)) {
;;;253    		/* Single bit (recoverable) error in data */
;;;254    
;;;255    		bit = 0;
;;;256    
;;;257    		if (delta_col & 0x20)
;;;258    			bit |= 0x04;
;;;259    		if (delta_col & 0x08)
;;;260    			bit |= 0x02;
;;;261    		if (delta_col & 0x02)
;;;262    			bit |= 0x01;
;;;263    
;;;264    		if (delta_line >= n_bytes)
;;;265    			return -1;
;;;266    
;;;267    		data[delta_line] ^= (1 << bit);
;;;268    
;;;269    		return 1;	/* corrected */
;;;270    	}
;;;271    
;;;272    	if ((hweight32(delta_line) +
;;;273    	     hweight32(delta_line_prime) +
;;;274    	     hweight8(delta_col)) == 1) {
;;;275    		/* Reccoverable error in ecc */
;;;276    
;;;277    		*read_ecc = *test_ecc;
;;;278    		return 1;	/* corrected */
;;;279    	}
;;;280    
;;;281    	/* Unrecoverable error */
;;;282    
;;;283    	return -1;
;;;284    }
000410  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1044|
000414  e1e0000a          MVN      r0,r10                ;251
000418  e1550000          CMP      r5,r0                 ;251
00041c  1a000018          BNE      |L1.1156|
000420  e02400c4          EOR      r0,r4,r4,ASR #1       ;252
000424  e2000015          AND      r0,r0,#0x15           ;252
000428  e3500015          CMP      r0,#0x15              ;252
00042c  1a000014          BNE      |L1.1156|
000430  e3a08000          MOV      r8,#0                 ;255
000434  e3140020          TST      r4,#0x20              ;257
000438  0a000000          BEQ      |L1.1088|
00043c  e3888004          ORR      r8,r8,#4              ;258
                  |L1.1088|
000440  e3140008          TST      r4,#8                 ;259
000444  0a000000          BEQ      |L1.1100|
000448  e3888002          ORR      r8,r8,#2              ;260
                  |L1.1100|
00044c  e3140002          TST      r4,#2                 ;261
000450  0a000000          BEQ      |L1.1112|
000454  e3888001          ORR      r8,r8,#1              ;262
                  |L1.1112|
000458  e59d0004          LDR      r0,[sp,#4]            ;264
00045c  e1550000          CMP      r5,r0                 ;264
000460  3a000001          BCC      |L1.1132|
000464  e3e00000          MVN      r0,#0                 ;265
000468  eaffffe7          B        |L1.1036|
                  |L1.1132|
00046c  e7d90005          LDRB     r0,[r9,r5]            ;267
000470  e3a01001          MOV      r1,#1                 ;267
000474  e0200811          EOR      r0,r0,r1,LSL r8       ;267
000478  e7c90005          STRB     r0,[r9,r5]            ;267
00047c  e3a00001          MOV      r0,#1                 ;269
000480  eaffffe1          B        |L1.1036|
                  |L1.1156|
000484  e1a00005          MOV      r0,r5                 ;272
000488  ebfffffe          BL       generic_hweight32
00048c  e1a0b000          MOV      r11,r0                ;272
000490  e1a0000a          MOV      r0,r10                ;272
000494  ebfffffe          BL       generic_hweight32
000498  e08bb000          ADD      r11,r11,r0            ;272
00049c  e1a00004          MOV      r0,r4                 ;272
0004a0  ebfffffe          BL       generic_hweight8
0004a4  e080000b          ADD      r0,r0,r11             ;272
0004a8  e3500001          CMP      r0,#1                 ;272
0004ac  1a000003          BNE      |L1.1216|
0004b0  e8970007          LDM      r7,{r0-r2}            ;277
0004b4  e8860007          STM      r6,{r0-r2}            ;277
0004b8  e3a00001          MOV      r0,#1                 ;278
0004bc  eaffffd2          B        |L1.1036|
                  |L1.1216|
0004c0  e3e00000          MVN      r0,#0                 ;283
0004c4  eaffffd0          B        |L1.1036|
                          ENDP

                  |L1.1224|
                          DCD      0x55555555
                  |L1.1228|
                          DCD      0x33333333
                  |L1.1232|
                          DCD      0x0f0f0f0f
                  |L1.1236|
                          DCD      0x00ff00ff
                  |L1.1240|
                          DCD      0x0000ffff
                  |L1.1244|
                          DCD      column_parity_table

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  column_parity_table
000000  0055590c          DCB      0x00,0x55,0x59,0x0c
000004  65303c69          DCB      0x65,0x30,0x3c,0x69
000008  693c3065          DCB      0x69,0x3c,0x30,0x65
00000c  0c595500          DCB      0x0c,0x59,0x55,0x00
000010  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
000014  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
000018  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
00001c  99ccc095          DCB      0x99,0xcc,0xc0,0x95
000020  99ccc095          DCB      0x99,0xcc,0xc0,0x95
000024  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
000028  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
00002c  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
000030  0c595500          DCB      0x0c,0x59,0x55,0x00
000034  693c3065          DCB      0x69,0x3c,0x30,0x65
000038  65303c69          DCB      0x65,0x30,0x3c,0x69
00003c  0055590c          DCB      0x00,0x55,0x59,0x0c
000040  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
000044  c09599cc          DCB      0xc0,0x95,0x99,0xcc
000048  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
00004c  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
000050  3065693c          DCB      0x30,0x65,0x69,0x3c
000054  55000c59          DCB      0x55,0x00,0x0c,0x59
000058  590c0055          DCB      0x59,0x0c,0x00,0x55
00005c  3c696530          DCB      0x3c,0x69,0x65,0x30
000060  3c696530          DCB      0x3c,0x69,0x65,0x30
000064  590c0055          DCB      0x59,0x0c,0x00,0x55
000068  55000c59          DCB      0x55,0x00,0x0c,0x59
00006c  3065693c          DCB      0x30,0x65,0x69,0x3c
000070  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
000074  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
000078  c09599cc          DCB      0xc0,0x95,0x99,0xcc
00007c  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
000080  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
000084  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
000088  c09599cc          DCB      0xc0,0x95,0x99,0xcc
00008c  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
000090  3c696530          DCB      0x3c,0x69,0x65,0x30
000094  590c0055          DCB      0x59,0x0c,0x00,0x55
000098  55000c59          DCB      0x55,0x00,0x0c,0x59
00009c  3065693c          DCB      0x30,0x65,0x69,0x3c
0000a0  3065693c          DCB      0x30,0x65,0x69,0x3c
0000a4  55000c59          DCB      0x55,0x00,0x0c,0x59
0000a8  590c0055          DCB      0x59,0x0c,0x00,0x55
0000ac  3c696530          DCB      0x3c,0x69,0x65,0x30
0000b0  a5f0fca9          DCB      0xa5,0xf0,0xfc,0xa9
0000b4  c09599cc          DCB      0xc0,0x95,0x99,0xcc
0000b8  cc9995c0          DCB      0xcc,0x99,0x95,0xc0
0000bc  a9fcf0a5          DCB      0xa9,0xfc,0xf0,0xa5
0000c0  0c595500          DCB      0x0c,0x59,0x55,0x00
0000c4  693c3065          DCB      0x69,0x3c,0x30,0x65
0000c8  65303c69          DCB      0x65,0x30,0x3c,0x69
0000cc  0055590c          DCB      0x00,0x55,0x59,0x0c
0000d0  99ccc095          DCB      0x99,0xcc,0xc0,0x95
0000d4  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
0000d8  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
0000dc  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
0000e0  95c0cc99          DCB      0x95,0xc0,0xcc,0x99
0000e4  f0a5a9fc          DCB      0xf0,0xa5,0xa9,0xfc
0000e8  fca9a5f0          DCB      0xfc,0xa9,0xa5,0xf0
0000ec  99ccc095          DCB      0x99,0xcc,0xc0,0x95
0000f0  0055590c          DCB      0x00,0x55,0x59,0x0c
0000f4  65303c69          DCB      0x65,0x30,0x3c,0x69
0000f8  693c3065          DCB      0x69,0x3c,0x30,0x65
0000fc  0c595500          DCB      0x0c,0x59,0x55,0x00
