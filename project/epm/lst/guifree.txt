; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guifree.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guifree.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guifree.crf src\user\guifree.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;52     /*-----------------------------------------*/
;;;53     static void updateBG(void)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;54     {
;;;55         TickType_t tickLocalStart = xTaskGetTickCount();
000004  ebfffffe          BL       xTaskGetTickCount
000008  e1a04000          MOV      r4,r0
;;;56         //sysprintf(" [INFO GUI] <Free> updateBG enter: cost ticks = [%d]\n", xTaskGetTickCount() - tickStart);  
;;;57         EPDShowBGScreen(EPD_PICT_INDEX_FREE, TRUE); 
00000c  e3a01001          MOV      r1,#1
000010  e3a000b1          MOV      r0,#0xb1
000014  ebfffffe          BL       EPDShowBGScreen
;;;58         sysprintf(" [INFO GUI] <Free> updateBG: **Local:[%d]**, **[%d]**\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - tickStart);    
000018  ebfffffe          BL       xTaskGetTickCount
00001c  e59f11fc          LDR      r1,|L1.544|
000020  e5911000          LDR      r1,[r1,#0]  ; tickStart
000024  e0405001          SUB      r5,r0,r1
000028  ebfffffe          BL       xTaskGetTickCount
00002c  e0406004          SUB      r6,r0,r4
000030  e1a02005          MOV      r2,r5
000034  e1a01006          MOV      r1,r6
000038  e28f0f79          ADR      r0,|L1.548|
00003c  ebfffffe          BL       sysprintf
;;;59      
;;;60     }
000040  e8bd8070          POP      {r4-r6,pc}
;;;61     static void updateData(void)
                          ENDP

                  updateData PROC
000044  e92d4010          PUSH     {r4,lr}
;;;62     {
;;;63         TickType_t tickLocalStart = xTaskGetTickCount();
000048  ebfffffe          BL       xTaskGetTickCount
00004c  e1a04000          MOV      r4,r0
;;;64         //sysprintf(" [INFO GUI] <Free> updateData enter: cost ticks = [%d]\n", xTaskGetTickCount() - tickStart);  
;;;65         
;;;66         //sysprintf(" [INFO GUI] <Free> updateData: [%d]. Key tick = ![%d]!\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - keyStart);
;;;67         //sysDelay(100);
;;;68     
;;;69     }
000050  e8bd8010          POP      {r4,pc}
;;;70     
                          ENDP

                  GuiFreeOnDraw PROC
;;;73     /*-----------------------------------------*/
;;;74     BOOL GuiFreeOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int para2, int para3)
000054  e92d40f8          PUSH     {r3-r7,lr}
;;;75     {
000058  e1a04000          MOV      r4,r0
00005c  e1a05001          MOV      r5,r1
000060  e1a06002          MOV      r6,r2
000064  e1a07003          MOV      r7,r3
;;;76         tickStart = xTaskGetTickCount();
000068  ebfffffe          BL       xTaskGetTickCount
00006c  e59f11ac          LDR      r1,|L1.544|
000070  e5810000          STR      r0,[r1,#0]  ; tickStart
;;;77         sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
000074  e1a03006          MOV      r3,r6
000078  e1a02005          MOV      r2,r5
00007c  e1a01004          MOV      r1,r4
000080  e59f01d4          LDR      r0,|L1.604|
000084  e58d7000          STR      r7,[sp,#0]
000088  ebfffffe          BL       sysprintf
;;;78         powerStatus = TRUE;
00008c  e3a00001          MOV      r0,#1
000090  e59f11c8          LDR      r1,|L1.608|
000094  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;79         pGuiGetInterface = GuiGetInterface();
000098  ebfffffe          BL       GuiGetInterface
00009c  e59f11c0          LDR      r1,|L1.612|
0000a0  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;80         pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
0000a4  e2810000          ADD      r0,r1,#0
0000a8  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000ac  e3e01000          MVN      r1,#0
0000b0  e590200c          LDR      r2,[r0,#0xc]
0000b4  e3a00000          MOV      r0,#0
0000b8  e12fff32          BLX      r2
;;;81         pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
0000bc  e59f01a0          LDR      r0,|L1.612|
0000c0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000c4  e3a010c8          MOV      r1,#0xc8
0000c8  e590200c          LDR      r2,[r0,#0xc]
0000cc  e3a00001          MOV      r0,#1
0000d0  e12fff32          BLX      r2
;;;82         
;;;83         pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
0000d4  e59f0188          LDR      r0,|L1.612|
0000d8  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000dc  e5901010          LDR      r1,[r0,#0x10]
0000e0  e3a00000          MOV      r0,#0
0000e4  e12fff31          BLX      r1
;;;84         //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;85         return TRUE;
0000e8  e3a00001          MOV      r0,#1
;;;86     }
0000ec  e8bd80f8          POP      {r3-r7,pc}
;;;87     BOOL GuiFreeKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiFreeKeyCallback PROC
0000f0  e92d4070          PUSH     {r4-r6,lr}
;;;88     {
0000f4  e1a04000          MOV      r4,r0
0000f8  e1a05001          MOV      r5,r1
;;;89         //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;90         BOOL reVal = FALSE; 
0000fc  e3a06000          MOV      r6,#0
;;;91         if(keyIgnoreFlag)
000100  e59f0160          LDR      r0,|L1.616|
000104  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
000108  e3500000          CMP      r0,#0
00010c  0a000003          BEQ      |L1.288|
;;;92         {
;;;93             sysprintf(" [INFO GUI] <Free> Key:  ignore...\n"); 
000110  e28f0f55          ADR      r0,|L1.620|
000114  ebfffffe          BL       sysprintf
;;;94             return reVal;
000118  e1a00006          MOV      r0,r6
                  |L1.284|
;;;95         }
;;;96         //pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
;;;97         if(GUI_KEY_DOWN_INDEX == downUp)
;;;98         {
;;;99             switch(keyId)
;;;100            {
;;;101                case GUI_KEYPAD_LEFT_ID:
;;;102                   
;;;103                    break;
;;;104                case GUI_KEYPAD_RIGHT_ID:
;;;105                    
;;;106                    break;
;;;107                case GUI_KEYPAD_ADD_ID:
;;;108                   
;;;109                    break;
;;;110                case GUI_KEYPAD_MINUS_ID:
;;;111                    
;;;112                    break;
;;;113                case GUI_KEYPAD_CONFIRM_ID:
;;;114                    
;;;115                    break;
;;;116                case GUI_KEYPAD_REPLACE_BP_ID:
;;;117                    EPDReSetBacklightTimeout(portMAX_DELAY);
;;;118                    GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;119                    reVal = TRUE;
;;;120                    break;
;;;121                
;;;122                case GUI_KEYPAD_TESTER_ID:
;;;123                    EPDReSetBacklightTimeout(portMAX_DELAY);
;;;124                    GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;125                    reVal = TRUE;
;;;126                    break;
;;;127                
;;;128                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;129                    EPDReSetBacklightTimeout(portMAX_DELAY);
;;;130                    GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;131                    reVal = TRUE;
;;;132                    break;
;;;133            }
;;;134        }
;;;135        else
;;;136        {
;;;137            
;;;138        }
;;;139        return reVal;
;;;140    }
00011c  e8bd8070          POP      {r4-r6,pc}
                  |L1.288|
000120  e3550001          CMP      r5,#1                 ;97
000124  1a00003b          BNE      |L1.536|
000128  e3540004          CMP      r4,#4                 ;99
00012c  0a000014          BEQ      |L1.388|
000130  ca000008          BGT      |L1.344|
000134  e3540000          CMP      r4,#0                 ;99
000138  0a000015          BEQ      |L1.404|
00013c  e3540001          CMP      r4,#1                 ;99
000140  0a000011          BEQ      |L1.396|
000144  e3540002          CMP      r4,#2                 ;99
000148  0a00000b          BEQ      |L1.380|
00014c  e3540003          CMP      r4,#3                 ;99
000150  1a00002f          BNE      |L1.532|
000154  ea000006          B        |L1.372|
                  |L1.344|
000158  e3540011          CMP      r4,#0x11              ;99
00015c  0a00000e          BEQ      |L1.412|
000160  e3540013          CMP      r4,#0x13              ;99
000164  0a000020          BEQ      |L1.492|
000168  e3540014          CMP      r4,#0x14              ;99
00016c  1a000028          BNE      |L1.532|
000170  ea000013          B        |L1.452|
                  |L1.372|
000174  e1a00000          MOV      r0,r0                 ;101
000178  ea000025          B        |L1.532|
                  |L1.380|
00017c  e1a00000          MOV      r0,r0                 ;104
000180  ea000023          B        |L1.532|
                  |L1.388|
000184  e1a00000          MOV      r0,r0                 ;107
000188  ea000021          B        |L1.532|
                  |L1.396|
00018c  e1a00000          MOV      r0,r0                 ;110
000190  ea00001f          B        |L1.532|
                  |L1.404|
000194  e1a00000          MOV      r0,r0                 ;113
000198  ea00001d          B        |L1.532|
                  |L1.412|
00019c  e1a00000          MOV      r0,r0                 ;116
0001a0  e3e00000          MVN      r0,#0                 ;117
0001a4  ebfffffe          BL       EPDReSetBacklightTimeout
0001a8  e3a03000          MOV      r3,#0                 ;118
0001ac  e1a02003          MOV      r2,r3                 ;118
0001b0  e3a01003          MOV      r1,#3                 ;118
0001b4  e3a00008          MOV      r0,#8                 ;118
0001b8  ebfffffe          BL       GuiManagerShowScreen
0001bc  e3a06001          MOV      r6,#1                 ;119
0001c0  ea000013          B        |L1.532|
                  |L1.452|
0001c4  e1a00000          MOV      r0,r0                 ;122
0001c8  e3e00000          MVN      r0,#0                 ;123
0001cc  ebfffffe          BL       EPDReSetBacklightTimeout
0001d0  e3a03000          MOV      r3,#0                 ;124
0001d4  e1a02003          MOV      r2,r3                 ;124
0001d8  e3a01003          MOV      r1,#3                 ;124
0001dc  e3a00009          MOV      r0,#9                 ;124
0001e0  ebfffffe          BL       GuiManagerShowScreen
0001e4  e3a06001          MOV      r6,#1                 ;125
0001e8  ea000009          B        |L1.532|
                  |L1.492|
0001ec  e1a00000          MOV      r0,r0                 ;128
0001f0  e3e00000          MVN      r0,#0                 ;129
0001f4  ebfffffe          BL       EPDReSetBacklightTimeout
0001f8  e3a03000          MOV      r3,#0                 ;130
0001fc  e1a02003          MOV      r2,r3                 ;130
000200  e3a01003          MOV      r1,#3                 ;130
000204  e3a0000a          MOV      r0,#0xa               ;130
000208  ebfffffe          BL       GuiManagerShowScreen
00020c  e3a06001          MOV      r6,#1                 ;131
000210  e1a00000          MOV      r0,r0                 ;132
                  |L1.532|
000214  e1a00000          MOV      r0,r0                 ;103
                  |L1.536|
000218  e1a00006          MOV      r0,r6                 ;139
00021c  eaffffbe          B        |L1.284|
                  |L1.544|
                          DCD      tickStart
                  |L1.548|
000224  205b494e          DCB      " [INFO GUI] <Free> updateBG: **Local:[%d]**, **[%d]**\n"
000228  464f2047
00022c  55495d20
000230  3c467265
000234  653e2075
000238  70646174
00023c  6542473a
000240  202a2a4c
000244  6f63616c
000248  3a5b2564
00024c  5d2a2a2c
000250  202a2a5b
000254  25645d2a
000258  2a0a    
00025a  00                DCB      0
00025b  00                DCB      0
                  |L1.604|
                          DCD      ||.constdata||
                  |L1.608|
                          DCD      powerStatus
                  |L1.612|
                          DCD      pGuiGetInterface
                  |L1.616|
                          DCD      keyIgnoreFlag
                  |L1.620|
00026c  205b494e          DCB      " [INFO GUI] <Free> Key:  ignore...\n",0
000270  464f2047
000274  55495d20
000278  3c467265
00027c  653e204b
000280  65793a20
000284  2069676e
000288  6f72652e
00028c  2e2e0a00
                          ENDP

                  GuiFreeTimerCallback PROC
;;;141    BOOL GuiFreeTimerCallback(uint8_t timerIndex)
000290  e92d4010          PUSH     {r4,lr}
;;;142    {
000294  e1a04000          MOV      r4,r0
;;;143        //sysprintf(" [INFO GUI] <Free> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;144        keyIgnoreFlag = TRUE;
000298  e3a00001          MOV      r0,#1
00029c  e51f103c          LDR      r1,|L1.616|
0002a0  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;145        switch(timerIndex)
0002a4  e3540000          CMP      r4,#0
0002a8  0a000004          BEQ      |L1.704|
0002ac  e3540001          CMP      r4,#1
0002b0  0a000005          BEQ      |L1.716|
0002b4  e3540002          CMP      r4,#2
0002b8  1a000008          BNE      |L1.736|
0002bc  ea000005          B        |L1.728|
                  |L1.704|
;;;146        {
;;;147            case UPDATE_BG_TIMER:
0002c0  e1a00000          MOV      r0,r0
;;;148                updateBG();
0002c4  ebfffffe          BL       updateBG
;;;149                break;
0002c8  ea000004          B        |L1.736|
                  |L1.716|
;;;150            case UPDATE_DATA_TIMER:
0002cc  e1a00000          MOV      r0,r0
;;;151                updateData();
0002d0  ebfffffe          BL       updateData
;;;152                break;
0002d4  ea000001          B        |L1.736|
                  |L1.728|
;;;153            case EXIT_TIMER:
0002d8  e1a00000          MOV      r0,r0
;;;154                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);        
;;;155                break;
0002dc  e1a00000          MOV      r0,r0
                  |L1.736|
0002e0  e1a00000          MOV      r0,r0                 ;149
;;;156    
;;;157        }
;;;158        keyIgnoreFlag = FALSE;
0002e4  e3a00000          MOV      r0,#0
0002e8  e51f1088          LDR      r1,|L1.616|
0002ec  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;159        return TRUE;
0002f0  e3a00001          MOV      r0,#1
;;;160    }
0002f4  e8bd8010          POP      {r4,pc}
;;;161    
                          ENDP

                  GuiFreePowerCallbackFunc PROC
;;;162    BOOL GuiFreePowerCallbackFunc(uint8_t type, int flag)
0002f8  e1a02000          MOV      r2,r0
;;;163    {
;;;164        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;165        switch(type)
0002fc  e3520001          CMP      r2,#1
000300  0a000006          BEQ      |L1.800|
000304  e3520002          CMP      r2,#2
000308  0a000008          BEQ      |L1.816|
00030c  e3520003          CMP      r2,#3
000310  0a000008          BEQ      |L1.824|
000314  e3520004          CMP      r2,#4
000318  1a00000a          BNE      |L1.840|
00031c  ea000007          B        |L1.832|
                  |L1.800|
;;;166        {
;;;167            case GUI_POWER_STATUS_INDEX:
000320  e1a00000          MOV      r0,r0
;;;168                return powerStatus;
000324  e51f00cc          LDR      r0,|L1.608|
000328  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.812|
;;;169            case GUI_POWER_ON_INDEX:
;;;170                break;
;;;171            case GUI_POWER_OFF_INDEX:
;;;172                break;
;;;173            case GUI_POWER_PREV_OFF_INDEX:
;;;174                break;
;;;175        }
;;;176        return TRUE;
;;;177    }
00032c  e12fff1e          BX       lr
                  |L1.816|
000330  e1a00000          MOV      r0,r0                 ;169
000334  ea000003          B        |L1.840|
                  |L1.824|
000338  e1a00000          MOV      r0,r0                 ;171
00033c  ea000001          B        |L1.840|
                  |L1.832|
000340  e1a00000          MOV      r0,r0                 ;173
000344  e1a00000          MOV      r0,r0                 ;174
                  |L1.840|
000348  e1a00000          MOV      r0,r0                 ;170
00034c  e3a00001          MOV      r0,#1                 ;176
000350  eafffff5          B        |L1.812|
;;;178    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c467265          DCB      0x3c,0x46,0x72,0x65
000010  653e204f          DCB      0x65,0x3e,0x20,0x4f
000014  6e447261          DCB      0x6e,0x44,0x72,0x61
000018  77202866          DCB      0x77,0x20,0x28,0x66
00001c  726f6d20          DCB      0x72,0x6f,0x6d,0x20
000020  47756949          DCB      0x47,0x75,0x69,0x49
000024  64203d20          DCB      0x64,0x20,0x3d,0x20
000028  25642c20          DCB      0x25,0x64,0x2c,0x20
00002c  72654672          DCB      0x72,0x65,0x46,0x72
000030  65736850          DCB      0x65,0x73,0x68,0x50
000034  61726120          DCB      0x61,0x72,0x61,0x20
000038  3d202564          DCB      0x3d,0x20,0x25,0x64
00003c  2c207061          DCB      0x2c,0x20,0x70,0x61
000040  72613220          DCB      0x72,0x61,0x32,0x20
000044  3d202564          DCB      0x3d,0x20,0x25,0x64
000048  2c207061          DCB      0x2c,0x20,0x70,0x61
00004c  72613320          DCB      0x72,0x61,0x33,0x20
000050  3d202564          DCB      0x3d,0x20,0x25,0x64
000054  290a00            DCB      0x29,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  01000000          DCB      0x01,0x00,0x00,0x00
                  tickStart
                          DCD      0x00000000
                  keyIgnoreFlag
00000c  00                DCB      0x00
