; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ecclib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ecclib.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\ecclib.crf src\syshal\cardlib\ecclib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  parserMessage PROC
;;;96     
;;;97     static uint16_t parserMessage(uint8_t msgType, uint8_t* receiveData, uint16_t receiveDataLen, uint16_t* returnCode, uint16_t* resultStatus)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;98     {    
000004  e1a0a000          MOV      r10,r0
000008  e1a04001          MOV      r4,r1
00000c  e1a07002          MOV      r7,r2
000010  e1a08003          MOV      r8,r3
000014  e59d6030          LDR      r6,[sp,#0x30]
;;;99         uint16_t returnInfo = CARD_MESSAGE_RETURN_SUCCESS;
000018  e3a00002          MOV      r0,#2
00001c  e58d0008          STR      r0,[sp,#8]
;;;100        
;;;101        uint16_t dataLen;
;;;102        uint8_t lrcValue;
;;;103        uint8_t targetType1, targetType2;
;;;104        if(returnCode == NULL)
000020  e3580000          CMP      r8,#0
000024  1a000004          BNE      |L1.60|
;;;105        {
;;;106            sysprintf("\r\n~~~ parserMessage(ECC) receiveDataLen = %d error (returnCode == NULL)~~~>\r\n", receiveDataLen);
000028  e1a01007          MOV      r1,r7
00002c  e59f02f4          LDR      r0,|L1.808|
000030  ebfffffe          BL       sysprintf
;;;107            return CARD_MESSAGE_RETURN_PARSER_ERROR;
000034  e3a00003          MOV      r0,#3
                  |L1.56|
;;;108        }
;;;109        *returnCode = CARD_MESSAGE_CODE_NO_USE; 
;;;110        #if(ENABLE_RX_PRINT)
;;;111        int i;    
;;;112        sysprintf("\r\n~~~ parserMessage(ECC) [Len: %d] ~~~>\r\n", receiveDataLen);
;;;113        for(i = 0; i<receiveDataLen; i++)
;;;114        {
;;;115            sysprintf("0x%02x, ", receiveData[i]);
;;;116            if(i%10 == 9)
;;;117                sysprintf("\r\n");
;;;118    
;;;119        }
;;;120        sysprintf("\r\n<~~~ parserMessage(ECC) ~~~\r\n");
;;;121        #endif
;;;122        
;;;123        if(receiveData[0] != 0xEA)
;;;124        {
;;;125            sysprintf("parserMessage(ECC): header err [0x%02x: 0xEA]\n", receiveData[0]);
;;;126            return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;127        }
;;;128        if((receiveData[receiveDataLen-2] != 0x90) || (receiveData[receiveDataLen-1] != 0x0))
;;;129        {
;;;130            sysprintf("parserMessage(ECC): end flag err [0x%02x: 0x%02x]\n", receiveData[receiveDataLen-2], receiveData[receiveDataLen-1]);
;;;131            return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;132        }
;;;133        targetType1 = 0x04;
;;;134        targetType2 = 0x01;    
;;;135        
;;;136        
;;;137        if((receiveData[1] != targetType1) || (receiveData[2] != targetType2))
;;;138        {
;;;139            sysprintf("parserMessage(ECC): type err [0x%02x, 0x%02x : 0x%02x, 0x%02x]\n", receiveData[1], receiveData[2], targetType1, targetType2);
;;;140            
;;;141            #if(ENABLE_SHOW_RETURN_DATA)
;;;142            {
;;;143                int i;
;;;144                sysprintf("\r\n--- Raw Data [%d] --->\r\n", receiveDataLen);
;;;145                for(i = 0; i<receiveDataLen; i++)
;;;146                {
;;;147                     sysprintf("0x%02x, ", receiveData[i]);
;;;148                    if(i%10 == 9)
;;;149                        sysprintf("\r\n");
;;;150    
;;;151                }
;;;152                sysprintf("\r\n<--- Raw Data ---\r\n");   
;;;153            }   
;;;154            #endif
;;;155            return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;156        }
;;;157        dataLen = receiveData[4]|(receiveData[3]<<8);    
;;;158        //lrcValue = EPMReaderLRC(receiveData, 5, dataLen-1);  
;;;159        
;;;160        if(receiveDataLen != dataLen + 7)//扣掉 FEP 封包
;;;161        {
;;;162            sysprintf("parserMessage(ECC): len error \n");
;;;163            return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;164        }
;;;165        else
;;;166        {                
;;;167            lrcValue = EPMReaderLRC(receiveData, 5, dataLen-1);//Body 最後是LRC, 所以要扣掉
;;;168            // ...      -5  -4  -3  -2  -1
;;;169            // ...    | status|LRC|0x90|0x00
;;;170            if(lrcValue != receiveData[(receiveDataLen-3)])
;;;171            {
;;;172                sysprintf("parserMessage(ECC): EPMReaderLRC error [0x%02x]  compare 0x%02x \r\n", lrcValue, receiveData[(receiveDataLen-3)]);
;;;173        
;;;174                *returnCode = 0x0;
;;;175                return CARD_MESSAGE_TYPE_ECC_RETURN_LRC_ERROR;
;;;176            }
;;;177            else
;;;178            {                 
;;;179                //#if(ENABLE_SHOW_RETURN_DATA)
;;;180                #if(0)
;;;181                sysprintf("\r\n--- receiveData [%d] --->\r\n", dataLen);
;;;182                for(int i = 0; i<dataLen; i++)
;;;183                {
;;;184                    //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;185                    sysprintf("0x%02x, ", receiveData[i+5]);
;;;186                    if(i%10 == 9)
;;;187                        sysprintf("\r\n");
;;;188        
;;;189                }
;;;190                sysprintf("\r\n<--- receiveData ---\r\n");
;;;191                #endif  
;;;192                *resultStatus = receiveData[receiveDataLen-4]|(receiveData[receiveDataLen-5]<<8);  
;;;193                switch(msgType)
;;;194                {
;;;195                    case CARD_MESSAGE_TYPE_ECC_PPR_RESET:
;;;196                        #if(ENABLE_ECC_LOG_MESSAGE)
;;;197                        //#if(0)
;;;198                        {
;;;199                            char str[512];
;;;200                            sprintf(str, "\r\n<--- CARD_MESSAGE_TYPE_ECC_PPR_RESET:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;201                            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);                        
;;;202                            sprintf(str, "pprreset(0x%04X)", *resultStatus);   
;;;203                            DataProcessSendStatusData(0, str, WEB_POST_EVENT_NORMAL);
;;;204                        }
;;;205                        #else
;;;206                        sysprintf("\r\n<--- CARD_MESSAGE_TYPE_ECC_PPR_RESET:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;207                        #endif
;;;208                        //just for test
;;;209                        //*resultStatus = 0x6303;
;;;210    
;;;211                        switch(*resultStatus)
;;;212                        {
;;;213                            case ECC_CMD_RESET_SUCCESS_ID:
;;;214                                //20180801 for socket signon  
;;;215                                serialNumber = 1;
;;;216                            
;;;217                                //serialNumber = 0;
;;;218    
;;;219                                if(sizeof(eccCmdPPRResetResponseData) != (dataLen - 3)) //扣掉 LRC, status
;;;220                                {
;;;221                                    return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;222                                }
;;;223                                else
;;;224                                {
;;;225                                    memcpy((uint8_t*)&eccCmdPPRResetResponseData, receiveData+5, sizeof(eccCmdPPRResetResponseData));
;;;226                                }
;;;227                                break;
;;;228                            
;;;229                            default: 
;;;230                                return CARD_MESSAGE_TYPE_ECC_RETURN_PPRRESET_ERROR;
;;;231                        }
;;;232                        break;
;;;233                    case CARD_MESSAGE_TYPE_ECC_DCA_READ:
;;;234                        #if(ENABLE_ECC_LOG_MESSAGE)
;;;235                        //#if(0)
;;;236                        {
;;;237                            char str[512];
;;;238                            sprintf(str, "\r\n<--- CARD_MESSAGE_TYPE_ECC_DCA_READ:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1 /*扣掉LRC, 有包含status */);
;;;239                            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;240                        }
;;;241                        #else
;;;242                        sysprintf("\r\n<--- CARD_MESSAGE_TYPE_ECC_DCA_READ:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1 /*扣掉LRC, 有包含status */);
;;;243                        #endif
;;;244                        
;;;245                        switch(*resultStatus)
;;;246                        {
;;;247                            case ECC_CMD_READ_SUCCESS_ID:
;;;248                                if(sizeof(eccCmdDCAReadResponseSuccessData) != (dataLen - 3)) //扣掉 LRC, status
;;;249                                {
;;;250                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;251                                }
;;;252                                else
;;;253                                {
;;;254                                    memcpy(&eccCmdDCAReadResponseSuccessData, receiveData + 5 , sizeof(eccCmdDCAReadResponseSuccessData));
;;;255                                }
;;;256                                break;
;;;257                            //0x640E(餘額異常) or 0x6418(通路限制)
;;;258                            case ECC_CMD_READ_ERROR_1_ID_1:// 0x640E(餘額異常)   
;;;259                            case ECC_CMD_READ_ERROR_1_ID_2://0x6418(通路限制)
;;;260                                if(sizeof(eccCmdDCAReadResponseError1Data) != (dataLen - 3)) //扣掉 LRC, status
;;;261                                {
;;;262                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;263                                }
;;;264                                else
;;;265                                {
;;;266                                    memcpy(&eccCmdDCAReadResponseError1Data, receiveData + 5 , sizeof(eccCmdDCAReadResponseError1Data));
;;;267                                }
;;;268                                break;
;;;269    
;;;270    
;;;271                            case ECC_CMD_READ_ERROR_2_ID_1://0x6103(CPD檢查異常)
;;;272                                if(sizeof(eccCmdDCAReadResponseError2Data) != (dataLen - 3)) //扣掉 LRC, status
;;;273                                {
;;;274                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;275                                }
;;;276                                else
;;;277                                {
;;;278                                    memcpy(&eccCmdDCAReadResponseError2Data, receiveData + 5 , sizeof(eccCmdDCAReadResponseError2Data));
;;;279                                }
;;;280                                break;
;;;281                        }
;;;282                        break;
;;;283                    case CARD_MESSAGE_TYPE_ECC_EDCA_DEDUCT:
;;;284                        #if(ENABLE_ECC_LOG_MESSAGE)
;;;285                        //#if(0)
;;;286                        {
;;;287                            char str[512];
;;;288                            sprintf(str, "\r\n<--- CARD_MESSAGE_TYPE_ECC_EDCA_DEDUCT:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;289                            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;290                        }
;;;291                        #else
;;;292                        sysprintf("\r\n<--- CARD_MESSAGE_TYPE_ECC_EDCA_DEDUCT:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;293                        #endif
;;;294                        
;;;295                        switch(*resultStatus)
;;;296                        {
;;;297                            case ECC_CMD_EDCA_DEDUCT_SUCCESS_ID:
;;;298                                if(sizeof(eccCmdEDCADeductResponseData) != (dataLen - 3)) //扣掉 LRC, status
;;;299                                {
;;;300                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;301                                }
;;;302                                else
;;;303                                {
;;;304                                    memcpy(&eccCmdEDCADeductResponseData, receiveData + 5, sizeof(eccCmdEDCADeductResponseData));
;;;305                                }
;;;306                                break;
;;;307                        }
;;;308                        break;
;;;309    
;;;310                    case CARD_MESSAGE_TYPE_ECC_LOCK_CARD:
;;;311                        #if(ENABLE_ECC_LOG_MESSAGE)
;;;312                        //#if(0)
;;;313                        {
;;;314                            char str[512];
;;;315                            sprintf(str, "\r\n<--- CARD_MESSAGE_TYPE_ECC_LOCK_CARD:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;316                            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;317                        }
;;;318                        #else
;;;319                        sysprintf("\r\n<--- CARD_MESSAGE_TYPE_ECC_LOCK_CARD:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;320                        #endif
;;;321                        switch(*resultStatus)
;;;322                        {
;;;323                            case ECC_CMD_LOCK_CARD_SUCCESS_ID:
;;;324                                if(sizeof(eccCmdLockCardResponseData) != (dataLen - 3)) //扣掉 LRC, status
;;;325                                {
;;;326                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;327                                }
;;;328                                else
;;;329                                {
;;;330                                    memcpy(&eccCmdLockCardResponseData, receiveData + 5, sizeof(eccCmdLockCardResponseData));
;;;331                                }
;;;332                                break;
;;;333                        }
;;;334                        break;
;;;335                    case CARD_MESSAGE_TYPE_ECC_SIGN_ON_QUERY:
;;;336                        #if(ENABLE_ECC_LOG_MESSAGE)
;;;337                        //#if(0)
;;;338                        {
;;;339                            char str[512];
;;;340                            sprintf(str, "\r\n<--- CARD_MESSAGE_TYPE_ECC_SIGN_ON_QUERY:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;341                            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;342                        }
;;;343                        #else
;;;344                        sysprintf("\r\n<--- CARD_MESSAGE_TYPE_ECC_SIGN_ON_QUERY:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;345                        #endif
;;;346                        switch(*resultStatus)
;;;347                        {
;;;348                            case ECC_CMD_SIGN_ON_QUERY_SUCCESS_ID_1:
;;;349                            case ECC_CMD_SIGN_ON_QUERY_SUCCESS_ID_2:
;;;350                            case ECC_CMD_SIGN_ON_QUERY_SUCCESS_ID_3:
;;;351                                if(sizeof(eccCmdPPRSignOnQueryResponseData) != (dataLen - 3)) //扣掉 LRC, status
;;;352                                {
;;;353                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;354                                }
;;;355                                else
;;;356                                {
;;;357                                    memcpy(&eccCmdPPRSignOnQueryResponseData, receiveData + 5, sizeof(eccCmdPPRSignOnQueryResponseData));
;;;358                                }
;;;359                                break;
;;;360                        }
;;;361                        break;
;;;362                        
;;;363                    case CARD_MESSAGE_TYPE_ECC_SIGN_ON:
;;;364                        #if(ENABLE_ECC_LOG_MESSAGE)
;;;365                        //#if(0)
;;;366                        {
;;;367                            char str[512];
;;;368                            sprintf(str, "\r\n<--- CARD_MESSAGE_TYPE_ECC_SIGN_ON:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;369                            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;370                        }
;;;371                        #else
;;;372                        sysprintf("\r\n<--- CARD_MESSAGE_TYPE_ECC_SIGN_ON:  resultStatus = 0x%04x, real ecc data len = %d---\r\n", *resultStatus, dataLen - 1/*扣掉LRC, 有包含status */);
;;;373                        #endif
;;;374                        switch(*resultStatus)
;;;375                        {
;;;376                            case ECC_CMD_SIGN_ON_SUCCESS_ID:
;;;377                            case ECC_CMD_SIGN_ON_NEED_UPDATE_ID:
;;;378                                if(sizeof(eccCmdPPRSignOnResponseData) != (dataLen - 3)) //扣掉 LRC, status
;;;379                                {
;;;380                                     return CARD_MESSAGE_TYPE_ECC_RETURN_LEN_ERROR;
;;;381                                }
;;;382                                else
;;;383                                {
;;;384                                    memcpy(&eccCmdPPRSignOnResponseData, receiveData + 5, sizeof(eccCmdPPRSignOnResponseData));
;;;385                                }
;;;386                                break;
;;;387                        }
;;;388                        break;
;;;389    
;;;390    
;;;391                        
;;;392                    default:
;;;393                        return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;394                        //break;
;;;395                }
;;;396                          
;;;397            }
;;;398        } 
;;;399    
;;;400        return returnInfo;
;;;401    }
000038  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.60|
00003c  e3a000ff          MOV      r0,#0xff              ;109
000040  e1c800b0          STRH     r0,[r8,#0]            ;109
000044  e5d40000          LDRB     r0,[r4,#0]            ;123
000048  e35000ea          CMP      r0,#0xea              ;123
00004c  0a000004          BEQ      |L1.100|
000050  e5d41000          LDRB     r1,[r4,#0]            ;125
000054  e28f0e2d          ADR      r0,|L1.812|
000058  ebfffffe          BL       sysprintf
00005c  e3a00003          MOV      r0,#3                 ;126
000060  eafffff4          B        |L1.56|
                  |L1.100|
000064  e2470002          SUB      r0,r7,#2              ;128
000068  e7d40000          LDRB     r0,[r4,r0]            ;128
00006c  e3500090          CMP      r0,#0x90              ;128
000070  1a000003          BNE      |L1.132|
000074  e2470001          SUB      r0,r7,#1              ;128
000078  e7d40000          LDRB     r0,[r4,r0]            ;128
00007c  e3500000          CMP      r0,#0                 ;128
000080  0a000007          BEQ      |L1.164|
                  |L1.132|
000084  e2470001          SUB      r0,r7,#1              ;130
000088  e7d42000          LDRB     r2,[r4,r0]            ;130
00008c  e2470002          SUB      r0,r7,#2              ;130
000090  e7d41000          LDRB     r1,[r4,r0]            ;130
000094  e28f0d0b          ADR      r0,|L1.860|
000098  ebfffffe          BL       sysprintf
00009c  e3a00003          MOV      r0,#3                 ;131
0000a0  eaffffe4          B        |L1.56|
                  |L1.164|
0000a4  e3a0b004          MOV      r11,#4                ;133
0000a8  e3a00001          MOV      r0,#1                 ;134
0000ac  e58d0004          STR      r0,[sp,#4]            ;134
0000b0  e5d40001          LDRB     r0,[r4,#1]            ;137
0000b4  e150000b          CMP      r0,r11                ;137
0000b8  1a000003          BNE      |L1.204|
0000bc  e5d41002          LDRB     r1,[r4,#2]            ;137
0000c0  e59d0004          LDR      r0,[sp,#4]            ;137
0000c4  e1510000          CMP      r1,r0                 ;137
0000c8  0a000008          BEQ      |L1.240|
                  |L1.204|
0000cc  e59d0004          LDR      r0,[sp,#4]            ;139
0000d0  e58d0000          STR      r0,[sp,#0]            ;139
0000d4  e5d42002          LDRB     r2,[r4,#2]            ;139
0000d8  e5d41001          LDRB     r1,[r4,#1]            ;139
0000dc  e1a0300b          MOV      r3,r11                ;139
0000e0  e28f0faa          ADR      r0,|L1.912|
0000e4  ebfffffe          BL       sysprintf
0000e8  e3a00003          MOV      r0,#3                 ;155
0000ec  eaffffd1          B        |L1.56|
                  |L1.240|
0000f0  e5d40004          LDRB     r0,[r4,#4]            ;157
0000f4  e5d41003          LDRB     r1,[r4,#3]            ;157
0000f8  e1805401          ORR      r5,r0,r1,LSL #8       ;157
0000fc  e2850007          ADD      r0,r5,#7              ;160
000100  e1570000          CMP      r7,r0                 ;160
000104  0a000003          BEQ      |L1.280|
000108  e28f0d0b          ADR      r0,|L1.976|
00010c  ebfffffe          BL       sysprintf
000110  e3a00030          MOV      r0,#0x30              ;163
000114  eaffffc7          B        |L1.56|
                  |L1.280|
000118  e2452001          SUB      r2,r5,#1              ;167
00011c  e3a01005          MOV      r1,#5                 ;167
000120  e1a00004          MOV      r0,r4                 ;167
000124  ebfffffe          BL       EPMReaderLRC
000128  e1a09000          MOV      r9,r0                 ;167
00012c  e2470003          SUB      r0,r7,#3              ;170
000130  e7d41000          LDRB     r1,[r4,r0]            ;170
000134  e1510009          CMP      r1,r9                 ;170
000138  0a000008          BEQ      |L1.352|
00013c  e2470003          SUB      r0,r7,#3              ;172
000140  e7d42000          LDRB     r2,[r4,r0]            ;172
000144  e1a01009          MOV      r1,r9                 ;172
000148  e59f02a0          LDR      r0,|L1.1008|
00014c  ebfffffe          BL       sysprintf
000150  e3a00000          MOV      r0,#0                 ;174
000154  e1c800b0          STRH     r0,[r8,#0]            ;174
000158  e3a00031          MOV      r0,#0x31              ;175
00015c  eaffffb5          B        |L1.56|
                  |L1.352|
000160  e2470004          SUB      r0,r7,#4              ;192
000164  e7d40000          LDRB     r0,[r4,r0]            ;192
000168  e2471005          SUB      r1,r7,#5              ;192
00016c  e7d41001          LDRB     r1,[r4,r1]            ;192
000170  e1800401          ORR      r0,r0,r1,LSL #8       ;192
000174  e1c600b0          STRH     r0,[r6,#0]            ;192
000178  e35a0007          CMP      r10,#7                ;193
00017c  308ff10a          ADDCC    pc,pc,r10,LSL #2      ;193
000180  ea0000ed          B        |L1.1340|
000184  ea0000ec          B        |L1.1340|
000188  ea000004          B        |L1.416|
00018c  ea00001d          B        |L1.520|
000190  ea000050          B        |L1.728|
000194  ea00009f          B        |L1.1048|
000198  ea0000b2          B        |L1.1128|
00019c  ea0000cd          B        |L1.1240|
                  |L1.416|
0001a0  e1a00000          MOV      r0,r0                 ;195
0001a4  e2452001          SUB      r2,r5,#1              ;206
0001a8  e1d610b0          LDRH     r1,[r6,#0]            ;206
0001ac  e59f0240          LDR      r0,|L1.1012|
0001b0  ebfffffe          BL       sysprintf
0001b4  e1d600b0          LDRH     r0,[r6,#0]            ;211
0001b8  e3500a09          CMP      r0,#0x9000            ;211
0001bc  1a00000c          BNE      |L1.500|
0001c0  e3a00001          MOV      r0,#1                 ;215
0001c4  e59f122c          LDR      r1,|L1.1016|
0001c8  e5810000          STR      r0,[r1,#0]            ;215  ; serialNumber
0001cc  e2450003          SUB      r0,r5,#3              ;219
0001d0  e35000fa          CMP      r0,#0xfa              ;219
0001d4  0a000001          BEQ      |L1.480|
0001d8  e3a00030          MOV      r0,#0x30              ;221
0001dc  eaffff95          B        |L1.56|
                  |L1.480|
0001e0  e3a020fa          MOV      r2,#0xfa              ;225
0001e4  e2841005          ADD      r1,r4,#5              ;225
0001e8  e59f020c          LDR      r0,|L1.1020|
0001ec  ebfffffe          BL       __aeabi_memcpy
0001f0  ea000002          B        |L1.512|
                  |L1.500|
0001f4  e1a00000          MOV      r0,r0                 ;229
0001f8  e3a00036          MOV      r0,#0x36              ;230
0001fc  eaffff8d          B        |L1.56|
                  |L1.512|
000200  e1a00000          MOV      r0,r0                 ;227
000204  ea0000cf          B        |L1.1352|
                  |L1.520|
000208  e1a00000          MOV      r0,r0                 ;233
00020c  e2452001          SUB      r2,r5,#1              ;242
000210  e1d610b0          LDRH     r1,[r6,#0]            ;242
000214  e59f01e4          LDR      r0,|L1.1024|
000218  ebfffffe          BL       sysprintf
00021c  e1d600b0          LDRH     r0,[r6,#0]            ;245
000220  e2400c61          SUB      r0,r0,#0x6100         ;245
000224  e2500003          SUBS     r0,r0,#3              ;245
000228  0a00001d          BEQ      |L1.676|
00022c  e2400c03          SUB      r0,r0,#0x300          ;245
000230  e250000b          SUBS     r0,r0,#0xb            ;245
000234  0a00000e          BEQ      |L1.628|
000238  e350000a          CMP      r0,#0xa               ;245
00023c  0a00000e          BEQ      |L1.636|
000240  e2400c2b          SUB      r0,r0,#0x2b00         ;245
000244  e25000f2          SUBS     r0,r0,#0xf2           ;245
000248  1a000020          BNE      |L1.720|
00024c  e2450003          SUB      r0,r5,#3              ;248
000250  e35000a0          CMP      r0,#0xa0              ;248
000254  0a000001          BEQ      |L1.608|
000258  e3a00030          MOV      r0,#0x30              ;250
00025c  eaffff75          B        |L1.56|
                  |L1.608|
000260  e3a020a0          MOV      r2,#0xa0              ;254
000264  e2841005          ADD      r1,r4,#5              ;254
000268  e59f0194          LDR      r0,|L1.1028|
00026c  ebfffffe          BL       __aeabi_memcpy
000270  ea000016          B        |L1.720|
                  |L1.628|
000274  e1a00000          MOV      r0,r0                 ;258
000278  e1a00000          MOV      r0,r0                 ;259
                  |L1.636|
00027c  e2450003          SUB      r0,r5,#3              ;260
000280  e3500078          CMP      r0,#0x78              ;260
000284  0a000001          BEQ      |L1.656|
000288  e3a00030          MOV      r0,#0x30              ;262
00028c  eaffff69          B        |L1.56|
                  |L1.656|
000290  e3a02078          MOV      r2,#0x78              ;266
000294  e2841005          ADD      r1,r4,#5              ;266
000298  e59f0168          LDR      r0,|L1.1032|
00029c  ebfffffe          BL       __aeabi_memcpy
0002a0  ea00000a          B        |L1.720|
                  |L1.676|
0002a4  e1a00000          MOV      r0,r0                 ;271
0002a8  e2450003          SUB      r0,r5,#3              ;272
0002ac  e3500028          CMP      r0,#0x28              ;272
0002b0  0a000001          BEQ      |L1.700|
0002b4  e3a00030          MOV      r0,#0x30              ;274
0002b8  eaffff5e          B        |L1.56|
                  |L1.700|
0002bc  e3a02028          MOV      r2,#0x28              ;278
0002c0  e2841005          ADD      r1,r4,#5              ;278
0002c4  e59f0140          LDR      r0,|L1.1036|
0002c8  ebfffffe          BL       __aeabi_memcpy
0002cc  e1a00000          MOV      r0,r0                 ;280
                  |L1.720|
0002d0  e1a00000          MOV      r0,r0                 ;256
0002d4  ea00009b          B        |L1.1352|
                  |L1.728|
0002d8  e1a00000          MOV      r0,r0                 ;283
0002dc  e2452001          SUB      r2,r5,#1              ;292
0002e0  e1d610b0          LDRH     r1,[r6,#0]            ;292
0002e4  e59f0124          LDR      r0,|L1.1040|
0002e8  ebfffffe          BL       sysprintf
0002ec  e1d600b0          LDRH     r0,[r6,#0]            ;295
0002f0  e3500a09          CMP      r0,#0x9000            ;295
0002f4  1a000009          BNE      |L1.800|
0002f8  e2450003          SUB      r0,r5,#3              ;298
0002fc  e350007a          CMP      r0,#0x7a              ;298
000300  0a000001          BEQ      |L1.780|
000304  e3a00030          MOV      r0,#0x30              ;300
000308  eaffff4a          B        |L1.56|
                  |L1.780|
00030c  e3a0207a          MOV      r2,#0x7a              ;304
000310  e2841005          ADD      r1,r4,#5              ;304
000314  e59f00f8          LDR      r0,|L1.1044|
000318  ebfffffe          BL       __aeabi_memcpy
00031c  e1a00000          MOV      r0,r0                 ;306
                  |L1.800|
000320  e1a00000          MOV      r0,r0                 ;306
000324  ea000087          B        |L1.1352|
                  |L1.808|
                          DCD      ||.constdata||
                  |L1.812|
00032c  70617273          DCB      "parserMessage(ECC): header err [0x%02x: 0xEA]\n",0
000330  65724d65
000334  73736167
000338  65284543
00033c  43293a20
000340  68656164
000344  65722065
000348  7272205b
00034c  30782530
000350  32783a20
000354  30784541
000358  5d0a00  
00035b  00                DCB      0
                  |L1.860|
00035c  70617273          DCB      "parserMessage(ECC): end flag err [0x%02x: 0x%02x]\n",0
000360  65724d65
000364  73736167
000368  65284543
00036c  43293a20
000370  656e6420
000374  666c6167
000378  20657272
00037c  205b3078
000380  25303278
000384  3a203078
000388  25303278
00038c  5d0a00  
00038f  00                DCB      0
                  |L1.912|
000390  70617273          DCB      "parserMessage(ECC): type err [0x%02x, 0x%02x : 0x%02x, "
000394  65724d65
000398  73736167
00039c  65284543
0003a0  43293a20
0003a4  74797065
0003a8  20657272
0003ac  205b3078
0003b0  25303278
0003b4  2c203078
0003b8  25303278
0003bc  203a2030
0003c0  78253032
0003c4  782c20  
0003c7  30782530          DCB      "0x%02x]\n",0
0003cb  32785d0a
0003cf  00      
                  |L1.976|
0003d0  70617273          DCB      "parserMessage(ECC): len error \n",0
0003d4  65724d65
0003d8  73736167
0003dc  65284543
0003e0  43293a20
0003e4  6c656e20
0003e8  6572726f
0003ec  72200a00
                  |L1.1008|
                          DCD      ||.constdata||+0x50
                  |L1.1012|
                          DCD      ||.constdata||+0x94
                  |L1.1016|
                          DCD      serialNumber
                  |L1.1020|
                          DCD      eccCmdPPRResetResponseData
                  |L1.1024|
                          DCD      ||.constdata||+0xf0
                  |L1.1028|
                          DCD      eccCmdDCAReadResponseSuccessData
                  |L1.1032|
                          DCD      eccCmdDCAReadResponseError1Data
                  |L1.1036|
                          DCD      eccCmdDCAReadResponseError2Data
                  |L1.1040|
                          DCD      ||.constdata||+0x14c
                  |L1.1044|
                          DCD      eccCmdEDCADeductResponseData
                  |L1.1048|
000418  e1a00000          MOV      r0,r0                 ;310
00041c  e2452001          SUB      r2,r5,#1              ;319
000420  e1d610b0          LDRH     r1,[r6,#0]            ;319
000424  e59f033c          LDR      r0,|L1.1896|
000428  ebfffffe          BL       sysprintf
00042c  e1d600b0          LDRH     r0,[r6,#0]            ;321
000430  e3500a09          CMP      r0,#0x9000            ;321
000434  1a000009          BNE      |L1.1120|
000438  e2450003          SUB      r0,r5,#3              ;324
00043c  e3500028          CMP      r0,#0x28              ;324
000440  0a000001          BEQ      |L1.1100|
000444  e3a00030          MOV      r0,#0x30              ;326
000448  eafffefa          B        |L1.56|
                  |L1.1100|
00044c  e3a02028          MOV      r2,#0x28              ;330
000450  e2841005          ADD      r1,r4,#5              ;330
000454  e59f0310          LDR      r0,|L1.1900|
000458  ebfffffe          BL       __aeabi_memcpy
00045c  e1a00000          MOV      r0,r0                 ;332
                  |L1.1120|
000460  e1a00000          MOV      r0,r0                 ;332
000464  ea000037          B        |L1.1352|
                  |L1.1128|
000468  e1a00000          MOV      r0,r0                 ;335
00046c  e2452001          SUB      r2,r5,#1              ;344
000470  e1d610b0          LDRH     r1,[r6,#0]            ;344
000474  e59f02f4          LDR      r0,|L1.1904|
000478  ebfffffe          BL       sysprintf
00047c  e1d600b0          LDRH     r0,[r6,#0]            ;346
000480  e2400a06          SUB      r0,r0,#0x6000         ;346
000484  e2500fc1          SUBS     r0,r0,#0x304          ;346
000488  0a000005          BEQ      |L1.1188|
00048c  e3500001          CMP      r0,#1                 ;346
000490  0a000004          BEQ      |L1.1192|
000494  e2400b0b          SUB      r0,r0,#0x2c00         ;346
000498  e25000fc          SUBS     r0,r0,#0xfc           ;346
00049c  1a00000b          BNE      |L1.1232|
0004a0  e1a00000          MOV      r0,r0                 ;349
                  |L1.1188|
0004a4  e1a00000          MOV      r0,r0                 ;350
                  |L1.1192|
0004a8  e2450003          SUB      r0,r5,#3              ;351
0004ac  e3500028          CMP      r0,#0x28              ;351
0004b0  0a000001          BEQ      |L1.1212|
0004b4  e3a00030          MOV      r0,#0x30              ;353
0004b8  eafffede          B        |L1.56|
                  |L1.1212|
0004bc  e3a02028          MOV      r2,#0x28              ;357
0004c0  e2841005          ADD      r1,r4,#5              ;357
0004c4  e59f02a8          LDR      r0,|L1.1908|
0004c8  ebfffffe          BL       __aeabi_memcpy
0004cc  e1a00000          MOV      r0,r0                 ;359
                  |L1.1232|
0004d0  e1a00000          MOV      r0,r0                 ;359
0004d4  ea00001b          B        |L1.1352|
                  |L1.1240|
0004d8  e1a00000          MOV      r0,r0                 ;363
0004dc  e2452001          SUB      r2,r5,#1              ;372
0004e0  e1d610b0          LDRH     r1,[r6,#0]            ;372
0004e4  e59f028c          LDR      r0,|L1.1912|
0004e8  ebfffffe          BL       sysprintf
0004ec  e1d600b0          LDRH     r0,[r6,#0]            ;374
0004f0  e2400a06          SUB      r0,r0,#0x6000         ;374
0004f4  e2500fc2          SUBS     r0,r0,#0x308          ;374
0004f8  0a000003          BEQ      |L1.1292|
0004fc  e2400b0b          SUB      r0,r0,#0x2c00         ;374
000500  e25000f8          SUBS     r0,r0,#0xf8           ;374
000504  1a00000a          BNE      |L1.1332|
000508  e1a00000          MOV      r0,r0                 ;377
                  |L1.1292|
00050c  e2450003          SUB      r0,r5,#3              ;378
000510  e350001d          CMP      r0,#0x1d              ;378
000514  0a000001          BEQ      |L1.1312|
000518  e3a00030          MOV      r0,#0x30              ;380
00051c  eafffec5          B        |L1.56|
                  |L1.1312|
000520  e3a0201d          MOV      r2,#0x1d              ;384
000524  e2841005          ADD      r1,r4,#5              ;384
000528  e59f024c          LDR      r0,|L1.1916|
00052c  ebfffffe          BL       __aeabi_memcpy
000530  e1a00000          MOV      r0,r0                 ;386
                  |L1.1332|
000534  e1a00000          MOV      r0,r0                 ;386
000538  ea000002          B        |L1.1352|
                  |L1.1340|
00053c  e1a00000          MOV      r0,r0                 ;392
000540  e3a00003          MOV      r0,#3                 ;393
000544  eafffebb          B        |L1.56|
                  |L1.1352|
000548  e1a00000          MOV      r0,r0                 ;232
00054c  e59d0008          LDR      r0,[sp,#8]            ;400
000550  eafffeb8          B        |L1.56|
;;;402    
                          ENDP

                  getLenData PROC
;;;403    static uint16_t getLenData(uint16_t data)
000554  e1a01000          MOV      r1,r0
;;;404    {
;;;405        uint16_t reval = ((data>>8)&0xff) |((data&0xff)<<8);
000558  e1a02801          LSL      r2,r1,#16
00055c  e1a02c22          LSR      r2,r2,#24
000560  e20130ff          AND      r3,r1,#0xff
000564  e1820403          ORR      r0,r2,r3,LSL #8
;;;406        return reval;
;;;407    }
000568  e12fff1e          BX       lr
;;;408    
                          ENDP

                  getECCCmdUint32ToASCIIStr PROC
;;;409    #define MAX_ASCII_STR_LEN 16
;;;410    static void getECCCmdUint32ToASCIIStr(uint32_t number, uint8_t* data, uint8_t dataLen)
00056c  e92d4070          PUSH     {r4-r6,lr}
;;;411    {
000570  e24dd018          SUB      sp,sp,#0x18
000574  e1a05000          MOV      r5,r0
000578  e1a06001          MOV      r6,r1
00057c  e1a04002          MOV      r4,r2
;;;412        char tmp[MAX_ASCII_STR_LEN+1];  
;;;413        if(dataLen > MAX_ASCII_STR_LEN)
000580  e3540010          CMP      r4,#0x10
000584  da000001          BLE      |L1.1424|
                  |L1.1416|
;;;414            return;
;;;415    
;;;416        sprintf(tmp, "%016d", number);  
;;;417        //sysprintf("getECCCmdUint32ToASCIIStr :[%d, %X][%s]\r\n", number, number, tmp);  
;;;418        memcpy(data, &tmp[MAX_ASCII_STR_LEN-dataLen], dataLen*sizeof(char));//只有cpy 最後的幾格字元
;;;419    }
000588  e28dd018          ADD      sp,sp,#0x18
00058c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1424|
000590  e1a02005          MOV      r2,r5                 ;416
000594  e28f1f79          ADR      r1,|L1.1920|
000598  e28d0004          ADD      r0,sp,#4              ;416
00059c  ebfffffe          BL       __2sprintf
0005a0  e1a02004          MOV      r2,r4                 ;418
0005a4  e2640010          RSB      r0,r4,#0x10           ;418
0005a8  e28d3004          ADD      r3,sp,#4              ;418
0005ac  e0801003          ADD      r1,r0,r3              ;418
0005b0  e1a00006          MOV      r0,r6                 ;418
0005b4  ebfffffe          BL       __aeabi_memcpy
0005b8  e1a00000          MOV      r0,r0
0005bc  eafffff1          B        |L1.1416|
;;;420    
                          ENDP

                  getECCCmdDataTimeData PROC
;;;421    static void getECCCmdDataTimeData(uint32_t time, ECCCmdDataTime* eccCmdDataTime)
0005c0  e1a02000          MOV      r2,r0
;;;422    {
;;;423        //sysprintf("getECCCmdDataTimeData :[%d, %X]\r\n", time, time);  
;;;424        for(int i = 0; i < sizeof(ECCCmdDataTime); i++)
0005c4  e3a00000          MOV      r0,#0
0005c8  ea000003          B        |L1.1500|
                  |L1.1484|
;;;425        {
;;;426            eccCmdDataTime->value[i] = (time>>(8*i))&0xff;
0005cc  e1a03180          LSL      r3,r0,#3
0005d0  e1a03332          LSR      r3,r2,r3
0005d4  e7c13000          STRB     r3,[r1,r0]
0005d8  e2800001          ADD      r0,r0,#1              ;424
                  |L1.1500|
0005dc  e3500004          CMP      r0,#4                 ;424
0005e0  3afffff9          BCC      |L1.1484|
;;;427        }
;;;428    }
0005e4  e12fff1e          BX       lr
;;;429    
                          ENDP

                  getECCCmdSerialNumber PROC
;;;430    static void getECCCmdSerialNumber(uint32_t number, ECCCmdSerialNumber* eccCmdSerialNumber)
0005e8  e92d407c          PUSH     {r2-r6,lr}
;;;431    {
0005ec  e1a04000          MOV      r4,r0
0005f0  e1a05001          MOV      r5,r1
;;;432        char tmp[6+1];     
;;;433        sprintf(tmp, "%06d", number);  
0005f4  e1a02004          MOV      r2,r4
0005f8  e28f1f62          ADR      r1,|L1.1928|
0005fc  e1a0000d          MOV      r0,sp
000600  ebfffffe          BL       __2sprintf
;;;434        //sysprintf("getECCCmdSerialNumber :[%d, %X][%s]\r\n", number, number, tmp);  
;;;435        memcpy(eccCmdSerialNumber->value, tmp, 6);
000604  e3a02006          MOV      r2,#6
000608  e1a0100d          MOV      r1,sp
00060c  e1a00005          MOV      r0,r5
000610  ebfffffe          BL       __aeabi_memcpy
;;;436    }
000614  e8bd807c          POP      {r2-r6,pc}
;;;437    
                          ENDP

                  getECCCmdUTCTimeStr PROC
;;;438    static void getECCCmdUTCTimeStr(uint32_t utcTime, uint8_t* data, uint8_t dataLen)
000618  e92d4070          PUSH     {r4-r6,lr}
;;;439    {
00061c  e24dd050          SUB      sp,sp,#0x50
000620  e1a06000          MOV      r6,r0
000624  e1a04001          MOV      r4,r1
000628  e1a05002          MOV      r5,r2
;;;440        char tmp[15];   
;;;441        if(dataLen != 14)
00062c  e355000e          CMP      r5,#0xe
000630  0a000001          BEQ      |L1.1596|
                  |L1.1588|
;;;442            return;
;;;443        RTC_TIME_DATA_T time;
;;;444        Time2RTC(utcTime, &time);  
;;;445        sprintf(tmp, "%04d%02d%02d%02d%02d%02d", time.u32Year, time.u32cMonth, time.u32cDay, time.u32cHour, time.u32cMinute, time.u32cSecond);
;;;446        //sysprintf("getECCCmdUTCTimeStr :[%d, %X][%s]\r\n", utcTime, utcTime, tmp);  
;;;447        memcpy(data, tmp, 14);
;;;448    }
000634  e28dd050          ADD      sp,sp,#0x50
000638  e8bd8070          POP      {r4-r6,pc}
                  |L1.1596|
00063c  e28d1010          ADD      r1,sp,#0x10           ;444
000640  e1a00006          MOV      r0,r6                 ;444
000644  ebfffffe          BL       Time2RTC
000648  e28d3014          ADD      r3,sp,#0x14           ;445
00064c  e893000b          LDM      r3,{r0,r1,r3}         ;445
000650  e59d2024          LDR      r2,[sp,#0x24]         ;445
000654  e58d000c          STR      r0,[sp,#0xc]          ;445
000658  e58d1008          STR      r1,[sp,#8]            ;445
00065c  e1cd20f0          STRD     r2,r3,[sp,#0]         ;445
000660  e28f1f4a          ADR      r1,|L1.1936|
000664  e59d202c          LDR      r2,[sp,#0x2c]         ;445
000668  e59d3028          LDR      r3,[sp,#0x28]         ;445
00066c  e28d0040          ADD      r0,sp,#0x40           ;445
000670  ebfffffe          BL       __2sprintf
000674  e3a0200e          MOV      r2,#0xe               ;447
000678  e28d1040          ADD      r1,sp,#0x40           ;447
00067c  e1a00004          MOV      r0,r4                 ;447
000680  ebfffffe          BL       __aeabi_memcpy
000684  e1a00000          MOV      r0,r0
000688  eaffffe9          B        |L1.1588|
;;;449    static int32_t uint8ToInt32(uint8_t* data, uint8_t dataLen)
                          ENDP

                  uint8ToInt32 PROC
00068c  e92d4010          PUSH     {r4,lr}
;;;450    {
000690  e1a03000          MOV      r3,r0
;;;451        int32_t reVal = 0;
000694  e3a02000          MOV      r2,#0
;;;452        if(dataLen > sizeof(int32_t))
000698  e3510004          CMP      r1,#4
00069c  9a000001          BLS      |L1.1704|
;;;453            return 0;
0006a0  e3a00000          MOV      r0,#0
                  |L1.1700|
;;;454        for(int i = 0; i < sizeof(int32_t); i++)
;;;455        {
;;;456            if(i<dataLen)
;;;457            {
;;;458                reVal = reVal | ((int32_t)(data[i])<<(8*i));
;;;459            }
;;;460            else
;;;461            {
;;;462                reVal = reVal | ((int32_t)(0xff)<<(8*i));
;;;463            }
;;;464        }
;;;465        return reVal;
;;;466    }
0006a4  e8bd8010          POP      {r4,pc}
                  |L1.1704|
0006a8  e3a00000          MOV      r0,#0                 ;454
0006ac  ea000009          B        |L1.1752|
                  |L1.1712|
0006b0  e1500001          CMP      r0,r1                 ;456
0006b4  aa000003          BGE      |L1.1736|
0006b8  e7d3c000          LDRB     r12,[r3,r0]           ;458
0006bc  e1a04180          LSL      r4,r0,#3              ;458
0006c0  e182241c          ORR      r2,r2,r12,LSL r4      ;458
0006c4  ea000002          B        |L1.1748|
                  |L1.1736|
0006c8  e1a0c180          LSL      r12,r0,#3             ;462
0006cc  e3a040ff          MOV      r4,#0xff              ;462
0006d0  e1822c14          ORR      r2,r2,r4,LSL r12      ;462
                  |L1.1748|
0006d4  e2800001          ADD      r0,r0,#1              ;454
                  |L1.1752|
0006d8  e3500004          CMP      r0,#4                 ;454
0006dc  3afffff3          BCC      |L1.1712|
0006e0  e1a00002          MOV      r0,r2                 ;465
0006e4  eaffffee          B        |L1.1700|
;;;467    static uint32_t uint8ToUint32(uint8_t* data, uint8_t dataLen)
                          ENDP

                  uint8ToUint32 PROC
0006e8  e92d4010          PUSH     {r4,lr}
;;;468    {
0006ec  e1a02000          MOV      r2,r0
;;;469        uint32_t reVal = 0;
0006f0  e3a03000          MOV      r3,#0
;;;470        if(dataLen > sizeof(uint32_t))
0006f4  e3510004          CMP      r1,#4
0006f8  9a000001          BLS      |L1.1796|
;;;471            return 0;
0006fc  e3a00000          MOV      r0,#0
                  |L1.1792|
;;;472        for(int i = 0; i<dataLen; i++)
;;;473        {
;;;474            reVal = reVal | ((uint32_t)(data[i])<<(8*i));
;;;475        }
;;;476        return reVal;
;;;477    }
000700  e8bd8010          POP      {r4,pc}
                  |L1.1796|
000704  e3a00000          MOV      r0,#0                 ;472
000708  ea000003          B        |L1.1820|
                  |L1.1804|
00070c  e7d2c000          LDRB     r12,[r2,r0]           ;474
000710  e1a04180          LSL      r4,r0,#3              ;474
000714  e183341c          ORR      r3,r3,r12,LSL r4      ;474
000718  e2800001          ADD      r0,r0,#1              ;472
                  |L1.1820|
00071c  e1500001          CMP      r0,r1                 ;472
000720  bafffff9          BLT      |L1.1804|
000724  e1a00003          MOV      r0,r3                 ;476
000728  eafffff4          B        |L1.1792|
;;;478    
                          ENDP

                  uint32ToUint8 PROC
;;;479    static uint8_t uint32ToUint8(uint32_t src, uint8_t* data, uint8_t dataLen)
00072c  e1a03000          MOV      r3,r0
;;;480    {
;;;481        if(dataLen > sizeof(uint32_t))
000730  e3520004          CMP      r2,#4
000734  9a000001          BLS      |L1.1856|
;;;482            return 0;
000738  e3a00000          MOV      r0,#0
                  |L1.1852|
;;;483        for(int i = 0; i < dataLen; i++)
;;;484        {
;;;485            data[i] = (src>>(8*i))&0xff;
;;;486        }
;;;487        return dataLen;
;;;488    }
00073c  e12fff1e          BX       lr
                  |L1.1856|
000740  e3a00000          MOV      r0,#0                 ;483
000744  ea000003          B        |L1.1880|
                  |L1.1864|
000748  e1a0c180          LSL      r12,r0,#3             ;485
00074c  e1a0cc33          LSR      r12,r3,r12            ;485
000750  e7c1c000          STRB     r12,[r1,r0]           ;485
000754  e2800001          ADD      r0,r0,#1              ;483
                  |L1.1880|
000758  e1500002          CMP      r0,r2                 ;483
00075c  bafffff9          BLT      |L1.1864|
000760  e1a00002          MOV      r0,r2                 ;487
000764  eafffff4          B        |L1.1852|
                  |L1.1896|
                          DCD      ||.constdata||+0x1ac
                  |L1.1900|
                          DCD      eccCmdLockCardResponseData
                  |L1.1904|
                          DCD      ||.constdata||+0x208
                  |L1.1908|
                          DCD      eccCmdPPRSignOnQueryResponseData
                  |L1.1912|
                          DCD      ||.constdata||+0x268
                  |L1.1916|
                          DCD      eccCmdPPRSignOnResponseData
                  |L1.1920|
000780  25303136          DCB      "%016d",0
000784  6400    
000786  00                DCB      0
000787  00                DCB      0
                  |L1.1928|
000788  25303664          DCB      "%06d",0
00078c  00      
00078d  00                DCB      0
00078e  00                DCB      0
00078f  00                DCB      0
                  |L1.1936|
000790  25303464          DCB      "%04d%02d%02d%02d%02d%02d",0
000794  25303264
000798  25303264
00079c  25303264
0007a0  25303264
0007a4  25303264
0007a8  00      
0007a9  00                DCB      0
0007aa  00                DCB      0
0007ab  00                DCB      0
                          ENDP

                  getMoneyToUint8 PROC
;;;489    static uint8_t getMoneyToUint8(uint32_t src, uint8_t* data, uint8_t dataLen)
0007ac  e92d4070          PUSH     {r4-r6,lr}
;;;490    {
0007b0  e1a04000          MOV      r4,r0
0007b4  e1a05001          MOV      r5,r1
0007b8  e1a06002          MOV      r6,r2
;;;491        return uint32ToUint8(src, data, dataLen);
0007bc  e1a02006          MOV      r2,r6
0007c0  e1a01005          MOV      r1,r5
0007c4  e1a00004          MOV      r0,r4
0007c8  ebfffffe          BL       uint32ToUint8
;;;492    }
0007cc  e8bd8070          POP      {r4-r6,pc}
;;;493    
                          ENDP

                  pprReset PROC
;;;494    
;;;495    static uint16_t pprReset(uint16_t* returnCode, uint16_t* resultStatus, uint32_t utcTime, uint32_t epmUTCTime, BOOL SignOnFlag)
0007d0  e92d4ff0          PUSH     {r4-r11,lr}
;;;496    {
0007d4  e24dd014          SUB      sp,sp,#0x14
0007d8  e1a07000          MOV      r7,r0
0007dc  e1a05001          MOV      r5,r1
0007e0  e1a08002          MOV      r8,r2
0007e4  e1a09003          MOV      r9,r3
;;;497        static ECCCmdPPRResetRequestPack eccCmdPPRResetRequestPack;
;;;498        uint16_t returnInfo;
;;;499        uint8_t* receiveData;
;;;500        uint16_t receiveDataLen;
;;;501        serialNumber = 1;
0007e8  e3a00001          MOV      r0,#1
0007ec  e51f13fc          LDR      r1,|L1.1016|
0007f0  e5810000          STR      r0,[r1,#0]  ; serialNumber
;;;502        sysprintf("ECCLibInit(pprReset): utcTime = %d, epmUTCTime = %d, serialNumber = %d...\r\n", utcTime, epmUTCTime, serialNumber);  
0007f4  e2810000          ADD      r0,r1,#0
0007f8  e1a02009          MOV      r2,r9
0007fc  e1a01008          MOV      r1,r8
000800  e5903000          LDR      r3,[r0,#0]  ; serialNumber
000804  e59f0398          LDR      r0,|L1.2980|
000808  ebfffffe          BL       sysprintf
;;;503        eccCmdPPRResetRequestPack.header = 0xEA;
00080c  e3a000ea          MOV      r0,#0xea
000810  e59f1390          LDR      r1,|L1.2984|
000814  e5c10000          STRB     r0,[r1,#0]  ; eccCmdPPRResetRequestPack
;;;504        eccCmdPPRResetRequestPack.cmd1   = 0x04;
000818  e3a00004          MOV      r0,#4
00081c  e5c10001          STRB     r0,[r1,#1]  ; eccCmdPPRResetRequestPack
;;;505        eccCmdPPRResetRequestPack.cmd2   = 0x01;
000820  e3a00001          MOV      r0,#1
000824  e5c10002          STRB     r0,[r1,#2]  ; eccCmdPPRResetRequestPack
;;;506        eccCmdPPRResetRequestPack.len    = getLenData(sizeof(ECCCmdPPRResetRequest) + 1); // add LRC byte
000828  e3a00047          MOV      r0,#0x47
00082c  ebfffffe          BL       getLenData
000830  e59f1370          LDR      r1,|L1.2984|
000834  e5c10003          STRB     r0,[r1,#3]  ; eccCmdPPRResetRequestPack
000838  e1a00420          LSR      r0,r0,#8
00083c  e5c10004          STRB     r0,[r1,#4]  ; eccCmdPPRResetRequestPack
;;;507    
;;;508        eccCmdPPRResetRequestPack.body.CLA = 0x80;
000840  e3a00080          MOV      r0,#0x80
000844  e5c10005          STRB     r0,[r1,#5]  ; eccCmdPPRResetRequestPack
;;;509        eccCmdPPRResetRequestPack.body.INS = 0x01;
000848  e3a00001          MOV      r0,#1
00084c  e5c10006          STRB     r0,[r1,#6]
;;;510        eccCmdPPRResetRequestPack.body.P1 = 0x00;
000850  e3a00000          MOV      r0,#0
000854  e5c10007          STRB     r0,[r1,#7]
;;;511        #if(ENABLE_ECC_AUTO_LOAD)
;;;512        if(SignOnFlag)
;;;513        {
;;;514            eccCmdPPRResetRequestPack.body.P2 = 0x00;//※ P2=0x00：PPR_Reset 用於授權取額度設備
;;;515        }
;;;516        else
;;;517        {
;;;518            eccCmdPPRResetRequestPack.body.P2 = 0x01;//※ P2=0x01：PPR_Reset_Offline
;;;519        }
;;;520        #else
;;;521        eccCmdPPRResetRequestPack.body.P2 = 0x01;//※ P2=0x01：PPR_Reset_Offline
000858  e3a00001          MOV      r0,#1
00085c  e5c10008          STRB     r0,[r1,#8]
;;;522        #endif
;;;523        eccCmdPPRResetRequestPack.body.Lc = 0x40;
000860  e3a00040          MOV      r0,#0x40
000864  e5c10009          STRB     r0,[r1,#9]
;;;524    
;;;525        //data
;;;526        getECCCmdUint32ToASCIIStr(TM_LOCATION_ID, eccCmdPPRResetRequestPack.body.data.TMLocationID, sizeof(eccCmdPPRResetRequestPack.body.data.TMLocationID));  //TM Location ID 10 TM 終端機(TM)店號，ASCII(右靠左補 0)
000868  e3a0200a          MOV      r2,#0xa
00086c  e281100a          ADD      r1,r1,#0xa
000870  e3a00001          MOV      r0,#1
000874  ebfffffe          BL       getECCCmdUint32ToASCIIStr
;;;527        getECCCmdUint32ToASCIIStr(TM_ID, eccCmdPPRResetRequestPack.body.data.TMID, sizeof(eccCmdPPRResetRequestPack.body.data.TMID));  //TM Location ID 10 TM 終端機(TM)店號，ASCII(右靠左補 0)
000878  e3a02002          MOV      r2,#2
00087c  e59f1328          LDR      r1,|L1.2988|
000880  e3a00001          MOV      r0,#1
000884  ebfffffe          BL       getECCCmdUint32ToASCIIStr
;;;528    
;;;529        getECCCmdUTCTimeStr(epmUTCTime, eccCmdPPRResetRequestPack.body.data.TMTXNDateTime, sizeof(eccCmdPPRResetRequestPack.body.data.TMTXNDateTime));  //TM TXN Date Time 14 TM 終端機(TM)交易日期時間，ASCII (YYYYMMDDhhmmss)
000888  e3a0200e          MOV      r2,#0xe
00088c  e59f131c          LDR      r1,|L1.2992|
000890  e1a00009          MOV      r0,r9
000894  ebfffffe          BL       getECCCmdUTCTimeStr
;;;530        getECCCmdSerialNumber(serialNumber, &(eccCmdPPRResetRequestPack.body.data.TMSerialNumber)); //TM Serial Number 6 TM 終端機(TM)交易序號，ASCII (右靠左補 0，值須為 0~9) 交易成功時進號，失敗時不進號
000898  e59f1314          LDR      r1,|L1.2996|
00089c  e51f04ac          LDR      r0,|L1.1016|
0008a0  e5900000          LDR      r0,[r0,#0]  ; serialNumber
0008a4  ebfffffe          BL       getECCCmdSerialNumber
;;;531        getECCCmdUint32ToASCIIStr(TM_AGENT_NUMBER, eccCmdPPRResetRequestPack.body.data.TMAgentNumber, sizeof(eccCmdPPRResetRequestPack.body.data.TMAgentNumber)); //TM Agent Number 4 TM 終端機(TM)收銀員代號，ASCII (右靠左補 0，值須為 0~9)
0008a8  e3a02004          MOV      r2,#4
0008ac  e59f1304          LDR      r1,|L1.3000|
0008b0  e3a00001          MOV      r0,#1
0008b4  ebfffffe          BL       getECCCmdUint32ToASCIIStr
;;;532        sysprintf("ECCLibInit(pprReset): TMAgentNumber [0x%02x, 0x%02x, 0x%02x, 0x%02x] ...\r\n", 
0008b8  e59f02e8          LDR      r0,|L1.2984|
0008bc  e5d0002d          LDRB     r0,[r0,#0x2d]
0008c0  e58d0000          STR      r0,[sp,#0]
0008c4  e59f02dc          LDR      r0,|L1.2984|
0008c8  e5d0302c          LDRB     r3,[r0,#0x2c]
0008cc  e5d0202b          LDRB     r2,[r0,#0x2b]
0008d0  e5d0102a          LDRB     r1,[r0,#0x2a]
0008d4  e59f02e0          LDR      r0,|L1.3004|
0008d8  ebfffffe          BL       sysprintf
;;;533                                                        eccCmdPPRResetRequestPack.body.data.TMAgentNumber[0], 
;;;534                                                        eccCmdPPRResetRequestPack.body.data.TMAgentNumber[1], 
;;;535                                                        eccCmdPPRResetRequestPack.body.data.TMAgentNumber[2], 
;;;536                                                        eccCmdPPRResetRequestPack.body.data.TMAgentNumber[3] );  
;;;537        getECCCmdDataTimeData(utcTime, &(eccCmdPPRResetRequestPack.body.data.TXNDateTime)); // //TXN Date Time 4 TM 交易日期時間 Unsigned and LSB First (UnixDateTime)
0008dc  e59f12dc          LDR      r1,|L1.3008|
0008e0  e1a00008          MOV      r0,r8
0008e4  ebfffffe          BL       getECCCmdDataTimeData
;;;538                    
;;;539        eccCmdPPRResetRequestPack.body.data.LocationID = 0x32;                     //Location ID 1 定值 舊場站代碼 (由悠遊卡公司指定)
0008e8  e3a00032          MOV      r0,#0x32
0008ec  e59f12b4          LDR      r1,|L1.2984|
0008f0  e5c10032          STRB     r0,[r1,#0x32]
;;;540        eccCmdPPRResetRequestPack.body.data.NewLocationID[0] = 0x32;               //New Location ID 2 定值 新場站代碼 Unsigned and LSB First (由悠遊卡公司指定)
0008f4  e5c10033          STRB     r0,[r1,#0x33]
;;;541        eccCmdPPRResetRequestPack.body.data.NewLocationID[1] = 0x00;
0008f8  e3a00000          MOV      r0,#0
0008fc  e5c10034          STRB     r0,[r1,#0x34]
;;;542        eccCmdPPRResetRequestPack.body.data.ServiceProviderID = 0x00;              //Service Provider ID 1 定值  服務業者代碼，補 0x00，1bytes 若設定 0x00 後續 Response 會帶出正確值
000900  e5c10035          STRB     r0,[r1,#0x35]
;;;543        memset(eccCmdPPRResetRequestPack.body.data.NewServiceProviderID, 0x00, sizeof(eccCmdPPRResetRequestPack.body.data.NewServiceProviderID));        //New Service Provider ID 3 定值 新服務業者代碼，補 0x00，3bytes Unsigned and LSB First 若設定 0x00 後續 Response 會帶出正確值
000904  e3a01003          MOV      r1,#3
000908  e59f02b4          LDR      r0,|L1.3012|
00090c  ebfffffe          BL       __aeabi_memclr
;;;544        eccCmdPPRResetRequestPack.body.data.PaymentType = 0x08;//0x73;                    //小額設定參數 1 TM 小額消費設定旗標  使用於第一類交易
000910  e3a00008          MOV      r0,#8
000914  e59f128c          LDR      r1,|L1.2984|
000918  e5c10039          STRB     r0,[r1,#0x39]
;;;545                                                                                            //固定填 0x08
;;;546                                                                                            //使用於第二類交易
;;;547                                                                                            //固定填 0x73
;;;548        eccCmdPPRResetRequestPack.body.data.OneDayQuota[0] = 0x00;//0xB8;                 //One Day Quota For Micro Payment 2 TM 小額消費日限額額度 Unsigned and LSB First 
00091c  e3a00000          MOV      r0,#0
000920  e5c1003a          STRB     r0,[r1,#0x3a]
;;;549        eccCmdPPRResetRequestPack.body.data.OneDayQuota[1] = 0x00;//0x0B;                                 //使用於第一類交易
000924  e5c1003b          STRB     r0,[r1,#0x3b]
;;;550                                                                                                 //固定填 0x00 0x00
;;;551                                                                                                 //使用於第二類交易
;;;552                                                                                                 //固定填 0xB8 x0B 即為 3000
;;;553        eccCmdPPRResetRequestPack.body.data.OnceQuota[0] = 0x00;//0xE8;                   //Once Quota For Micro Payment 2 TM小額消費次限額額度 Unsigned and LSB First
000928  e5c1003c          STRB     r0,[r1,#0x3c]
;;;554        eccCmdPPRResetRequestPack.body.data.OnceQuota[1] = 0x00;//0x03;                                //使用於第一類交易
00092c  e5c1003d          STRB     r0,[r1,#0x3d]
;;;555                                                                                               //固定填 0x00 0x00
;;;556                                                                                               //使用於第二類交易
;;;557                                                                                               //固定填 0xE8 x03 即為 1000
;;;558        eccCmdPPRResetRequestPack.body.data.SAMSlotControlFlag = 0x11;             //SAM Slot Control Flag 1 TM SAM 卡位置控制旗標
000930  e3a00011          MOV      r0,#0x11
000934  e5c1003e          STRB     r0,[r1,#0x3e]
;;;559                                                                                         //Bit 4 ~7：一代 SAM Slot 位置
;;;560                                                                                         //0000 xxxxb ：預設值，SAM Slot 1
;;;561                                                                                         //0001 xxxx b：SAM Slot 1
;;;562                                                                                         //0010 xxxxb ：SAM Slot 2
;;;563                                                                                         //……
;;;564                                                                                         //1111 xxxxb ：SAM Slot 15
;;;565                                                                                         //Bit 0 ~3：二代 SAM Slot 位置
;;;566                                                                                         //xxxx 0000 b：預設值，SAM Slot 2
;;;567                                                                                         //xxxx 0001 b：SAM Slot 1
;;;568                                                                                         //xxxx 0010 b：SAM Slot 2
;;;569                                                                                         //……
;;;570                                                                                         //xxxx 1111 b：SAM Slot 15
;;;571                                                                                         //使用二合一 SAM 固定填 0x11，其餘請用預設值 0x00
;;;572        memset(eccCmdPPRResetRequestPack.body.data.RFU, 0x00, sizeof(eccCmdPPRResetRequestPack.body.data.RFU));     //RFU(Reserved For Use) 11 TM 保留，補 0x00，11bytes
000938  e3a0100b          MOV      r1,#0xb
00093c  e59f0284          LDR      r0,|L1.3016|
000940  ebfffffe          BL       __aeabi_memclr
;;;573        //data
;;;574    
;;;575        eccCmdPPRResetRequestPack.body.Le = 0xFA;
000944  e3a000fa          MOV      r0,#0xfa
000948  e59f1258          LDR      r1,|L1.2984|
00094c  e5c1004a          STRB     r0,[r1,#0x4a]
;;;576    
;;;577        eccCmdPPRResetRequestPack.LRC = EPMReaderLRC((uint8_t*)&eccCmdPPRResetRequestPack, 5, sizeof(eccCmdPPRResetRequestPack.body));
000950  e3a02046          MOV      r2,#0x46
000954  e3a01005          MOV      r1,#5
000958  e59f0248          LDR      r0,|L1.2984|
00095c  ebfffffe          BL       EPMReaderLRC
000960  e59f1240          LDR      r1,|L1.2984|
000964  e5c1004b          STRB     r0,[r1,#0x4b]  ; eccCmdPPRResetRequestPack
;;;578        eccCmdPPRResetRequestPack.tail1 = 0x90;  
000968  e3a00090          MOV      r0,#0x90
00096c  e5c1004c          STRB     r0,[r1,#0x4c]  ; eccCmdPPRResetRequestPack
;;;579        eccCmdPPRResetRequestPack.tail2 = 0x00;  
000970  e3a00000          MOV      r0,#0
000974  e5c1004d          STRB     r0,[r1,#0x4d]  ; eccCmdPPRResetRequestPack
;;;580    
;;;581        
;;;582        *returnCode = CARD_MESSAGE_CODE_NO_USE;
000978  e3a000ff          MOV      r0,#0xff
00097c  e1c700b0          STRH     r0,[r7,#0]
;;;583        EPMReaderFlushBuffer();
000980  ebfffffe          BL       EPMReaderFlushBuffer
;;;584        int nret = EPMReaderSendCmd((uint8_t*)&eccCmdPPRResetRequestPack,sizeof(eccCmdPPRResetRequestPack));
000984  e3a0104e          MOV      r1,#0x4e
000988  e59f0218          LDR      r0,|L1.2984|
00098c  ebfffffe          BL       EPMReaderSendCmd
000990  e58d0008          STR      r0,[sp,#8]
;;;585        if(nret != sizeof(eccCmdPPRResetRequestPack))
000994  e59d0008          LDR      r0,[sp,#8]
000998  e350004e          CMP      r0,#0x4e
00099c  0a000005          BEQ      |L1.2488|
;;;586        {
;;;587            sysprintf("pprReset() EPMReaderSendCmd size error [%d: %d]\n", nret, sizeof(eccCmdPPRResetRequestPack));
0009a0  e3a0204e          MOV      r2,#0x4e
0009a4  e28f0e22          ADR      r0,|L1.3020|
0009a8  e59d1008          LDR      r1,[sp,#8]
0009ac  ebfffffe          BL       sysprintf
;;;588            returnInfo = CARD_MESSAGE_RETURN_SEND_ERROR;
0009b0  e3a04004          MOV      r4,#4
0009b4  ea000034          B        |L1.2700|
                  |L1.2488|
;;;589        }
;;;590        else
;;;591        {
;;;592            int count=EPMReaderReceiveCmd(3000, &receiveData, &receiveDataLen);
0009b8  e28d200c          ADD      r2,sp,#0xc
0009bc  e28d1010          ADD      r1,sp,#0x10
0009c0  e59f0238          LDR      r0,|L1.3072|
0009c4  ebfffffe          BL       EPMReaderReceiveCmd
0009c8  e58d0004          STR      r0,[sp,#4]
;;;593            //sysprintf("we get %d char!@ count\n",count);
;;;594            if(count == 0)
0009cc  e59d0004          LDR      r0,[sp,#4]
0009d0  e3500000          CMP      r0,#0
0009d4  1a000003          BNE      |L1.2536|
;;;595            {
;;;596                sysprintf("pprReset() receiveReaderCmd error\n");
0009d8  e28f0f89          ADR      r0,|L1.3076|
0009dc  ebfffffe          BL       sysprintf
;;;597                returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;              
0009e0  e3a04001          MOV      r4,#1
0009e4  ea000027          B        |L1.2696|
                  |L1.2536|
;;;598            }
;;;599            else
;;;600            {            
;;;601                returnInfo = parserMessage(CARD_MESSAGE_TYPE_ECC_PPR_RESET, receiveData, receiveDataLen, returnCode, resultStatus);
0009e8  e1a03007          MOV      r3,r7
0009ec  e58d5000          STR      r5,[sp,#0]
0009f0  e1dd20bc          LDRH     r2,[sp,#0xc]
0009f4  e3a00001          MOV      r0,#1
0009f8  e59d1010          LDR      r1,[sp,#0x10]
0009fc  ebfffffe          BL       parserMessage
000a00  e1a04000          MOV      r4,r0
;;;602                
;;;603                #if(0)
;;;604                //just for test
;;;605                returnInfo = CARD_MESSAGE_RETURN_SUCCESS;
;;;606                #endif
;;;607                
;;;608                #if(1)
;;;609                if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
000a04  e3540002          CMP      r4,#2
000a08  1a00001e          BNE      |L1.2696|
;;;610                {
;;;611                    sysprintf("\r\n--- pprReset : status 0x%04x,", *resultStatus);
000a0c  e1d510b0          LDRH     r1,[r5,#0]
000a10  e28f0e21          ADR      r0,|L1.3112|
000a14  ebfffffe          BL       sysprintf
;;;612                    uint8_t* prData; 
;;;613                    uint32_t prDataLen;
;;;614                    switch(*resultStatus)
000a18  e1d500b0          LDRH     r0,[r5,#0]
000a1c  e3500a09          CMP      r0,#0x9000
000a20  1a000016          BNE      |L1.2688|
;;;615                    {
;;;616                        case ECC_CMD_RESET_SUCCESS_ID:
;;;617                            prData = (uint8_t*)&eccCmdPPRResetResponseData;
000a24  e51fb630          LDR      r11,|L1.1020|
;;;618                            prDataLen = sizeof(eccCmdPPRResetResponseData);
000a28  e3a0a0fa          MOV      r10,#0xfa
;;;619                            sysprintf(" len = %d --->\r\n", prDataLen);
000a2c  e1a0100a          MOV      r1,r10
000a30  e28f0e21          ADR      r0,|L1.3144|
000a34  ebfffffe          BL       sysprintf
;;;620                            for(int i = 0; i<prDataLen; i++)
000a38  e3a06000          MOV      r6,#0
000a3c  ea00000a          B        |L1.2668|
                  |L1.2624|
;;;621                            {
;;;622                                //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;623                                sysprintf("0x%02x, ", prData[i]);
000a40  e7db1006          LDRB     r1,[r11,r6]
000a44  e28f0e21          ADR      r0,|L1.3164|
000a48  ebfffffe          BL       sysprintf
;;;624                                if(i%10 == 9)
000a4c  e3a0100a          MOV      r1,#0xa
000a50  e1a00006          MOV      r0,r6
000a54  ebfffffe          BL       __aeabi_idivmod
000a58  e3510009          CMP      r1,#9
000a5c  1a000001          BNE      |L1.2664|
;;;625                                    sysprintf("\r\n");
000a60  e28f0c02          ADR      r0,|L1.3176|
000a64  ebfffffe          BL       sysprintf
                  |L1.2664|
000a68  e2866001          ADD      r6,r6,#1              ;620
                  |L1.2668|
000a6c  e156000a          CMP      r6,r10                ;620
000a70  3afffff2          BCC      |L1.2624|
;;;626    
;;;627                            }
;;;628                            sysprintf("\r\n<--- pprReset ---\r\n");
000a74  e28f0e1f          ADR      r0,|L1.3180|
000a78  ebfffffe          BL       sysprintf
;;;629                            break;
000a7c  e1a00000          MOV      r0,r0
                  |L1.2688|
000a80  e1a00000          MOV      r0,r0
;;;630                    }     
;;;631                }
000a84  e1a00000          MOV      r0,r0
                  |L1.2696|
;;;632                #endif  
;;;633            }    
;;;634        }
000a88  e1a00000          MOV      r0,r0
                  |L1.2700|
;;;635    
;;;636        return returnInfo;
000a8c  e1a00004          MOV      r0,r4
000a90  e28dd014          ADD      sp,sp,#0x14
;;;637    }
000a94  e8bd8ff0          POP      {r4-r11,pc}
;;;638    
                          ENDP

                  edcaRead PROC
;;;639    
;;;640    static uint16_t edcaRead(uint16_t* returnCode, uint16_t* resultStatus, uint32_t utcTime)
000a98  e92d43fe          PUSH     {r1-r9,lr}
;;;641    {
000a9c  e1a05000          MOV      r5,r0
000aa0  e1a06001          MOV      r6,r1
000aa4  e1a07002          MOV      r7,r2
;;;642        static ECCCmdDCAReadRequestPack eccCmdDCAReadRequestPack;
;;;643        uint16_t returnInfo;
;;;644        uint8_t* receiveData;
;;;645        uint16_t receiveDataLen;
;;;646         
;;;647        eccCmdDCAReadRequestPack.header = 0xEA;
000aa8  e3a000ea          MOV      r0,#0xea
000aac  e59f11d0          LDR      r1,|L1.3204|
000ab0  e5c10000          STRB     r0,[r1,#0]  ; eccCmdDCAReadRequestPack
;;;648        eccCmdDCAReadRequestPack.cmd1   = 0x04;
000ab4  e3a00004          MOV      r0,#4
000ab8  e5c10001          STRB     r0,[r1,#1]  ; eccCmdDCAReadRequestPack
;;;649        eccCmdDCAReadRequestPack.cmd2   = 0x01;
000abc  e3a00001          MOV      r0,#1
000ac0  e5c10002          STRB     r0,[r1,#2]  ; eccCmdDCAReadRequestPack
;;;650        eccCmdDCAReadRequestPack.len    = getLenData(sizeof(ECCCmdDCAReadRequest) + 1); // add LRC byte
000ac4  e3a00017          MOV      r0,#0x17
000ac8  ebfffffe          BL       getLenData
000acc  e59f11b0          LDR      r1,|L1.3204|
000ad0  e5c10003          STRB     r0,[r1,#3]  ; eccCmdDCAReadRequestPack
000ad4  e1a00420          LSR      r0,r0,#8
000ad8  e5c10004          STRB     r0,[r1,#4]  ; eccCmdDCAReadRequestPack
;;;651    
;;;652        eccCmdDCAReadRequestPack.body.CLA = 0x80;
000adc  e3a00080          MOV      r0,#0x80
000ae0  e5c10005          STRB     r0,[r1,#5]  ; eccCmdDCAReadRequestPack
;;;653        eccCmdDCAReadRequestPack.body.INS = 0x01;
000ae4  e3a00001          MOV      r0,#1
000ae8  e5c10006          STRB     r0,[r1,#6]
;;;654        eccCmdDCAReadRequestPack.body.P1 = 0x01;
000aec  e5c10007          STRB     r0,[r1,#7]
;;;655        eccCmdDCAReadRequestPack.body.P2 = 0x00;
000af0  e3a00000          MOV      r0,#0
000af4  e5c10008          STRB     r0,[r1,#8]
;;;656        eccCmdDCAReadRequestPack.body.Lc = 0x10;
000af8  e3a00010          MOV      r0,#0x10
000afc  e5c10009          STRB     r0,[r1,#9]
;;;657    
;;;658        //data
;;;659        eccCmdDCAReadRequestPack.body.data.lcdControlFlag = 0x00;
000b00  e3a00000          MOV      r0,#0
000b04  e5c1000a          STRB     r0,[r1,#0xa]
;;;660        getECCCmdSerialNumber(serialNumber, &(eccCmdDCAReadRequestPack.body.data.tmSerialNumber));
000b08  e281100b          ADD      r1,r1,#0xb
000b0c  e51f071c          LDR      r0,|L1.1016|
000b10  e5900000          LDR      r0,[r0,#0]  ; serialNumber
000b14  ebfffffe          BL       getECCCmdSerialNumber
;;;661        getECCCmdDataTimeData(utcTime, &(eccCmdDCAReadRequestPack.body.data.txnDateTime));
000b18  e59f1168          LDR      r1,|L1.3208|
000b1c  e1a00007          MOV      r0,r7
000b20  ebfffffe          BL       getECCCmdDataTimeData
;;;662        memset(eccCmdDCAReadRequestPack.body.data.RFU, 0x20, sizeof(eccCmdDCAReadRequestPack.body.data.RFU));
000b24  e3a02020          MOV      r2,#0x20
000b28  e3a01005          MOV      r1,#5
000b2c  e59f0158          LDR      r0,|L1.3212|
000b30  ebfffffe          BL       __aeabi_memset
;;;663        //data
;;;664    
;;;665        eccCmdDCAReadRequestPack.body.Le = 0xA0;
000b34  e3a000a0          MOV      r0,#0xa0
000b38  e59f1144          LDR      r1,|L1.3204|
000b3c  e5c1001a          STRB     r0,[r1,#0x1a]
;;;666    
;;;667        eccCmdDCAReadRequestPack.LRC = EPMReaderLRC((uint8_t*)&eccCmdDCAReadRequestPack, 5, sizeof(eccCmdDCAReadRequestPack.body));
000b40  e3a02016          MOV      r2,#0x16
000b44  e3a01005          MOV      r1,#5
000b48  e59f0134          LDR      r0,|L1.3204|
000b4c  ebfffffe          BL       EPMReaderLRC
000b50  e59f112c          LDR      r1,|L1.3204|
000b54  e5c1001b          STRB     r0,[r1,#0x1b]  ; eccCmdDCAReadRequestPack
;;;668        eccCmdDCAReadRequestPack.tail1 = 0x90;  
000b58  e3a00090          MOV      r0,#0x90
000b5c  e5c1001c          STRB     r0,[r1,#0x1c]  ; eccCmdDCAReadRequestPack
;;;669        eccCmdDCAReadRequestPack.tail2 = 0x00;  
000b60  e3a00000          MOV      r0,#0
000b64  e5c1001d          STRB     r0,[r1,#0x1d]  ; eccCmdDCAReadRequestPack
;;;670    
;;;671        
;;;672        *returnCode = CARD_MESSAGE_CODE_NO_USE;
000b68  e3a000ff          MOV      r0,#0xff
000b6c  e1c500b0          STRH     r0,[r5,#0]
;;;673        EPMReaderFlushBuffer();
000b70  ebfffffe          BL       EPMReaderFlushBuffer
;;;674        int nret = EPMReaderSendCmd((uint8_t*)&eccCmdDCAReadRequestPack,sizeof(eccCmdDCAReadRequestPack));
000b74  e3a0101e          MOV      r1,#0x1e
000b78  e59f0104          LDR      r0,|L1.3204|
000b7c  ebfffffe          BL       EPMReaderSendCmd
000b80  e1a08000          MOV      r8,r0
;;;675        if(nret != sizeof(eccCmdDCAReadRequestPack))
000b84  e358001e          CMP      r8,#0x1e
000b88  0a00004d          BEQ      |L1.3268|
;;;676        {
;;;677            sysprintf("edcaRead() EPMReaderSendCmd size error [%d: %d]\n", nret, sizeof(eccCmdDCAReadRequestPack));
000b8c  e3a0201e          MOV      r2,#0x1e
000b90  e1a01008          MOV      r1,r8
000b94  e28f00f4          ADR      r0,|L1.3216|
000b98  ebfffffe          BL       sysprintf
;;;678            returnInfo = CARD_MESSAGE_RETURN_SEND_ERROR;
000b9c  e3a04004          MOV      r4,#4
000ba0  ea00005a          B        |L1.3344|
                  |L1.2980|
                          DCD      ||.constdata||+0x2c4
                  |L1.2984|
                          DCD      eccCmdPPRResetRequestPack
                  |L1.2988|
                          DCD      eccCmdPPRResetRequestPack+0x14
                  |L1.2992|
                          DCD      eccCmdPPRResetRequestPack+0x16
                  |L1.2996|
                          DCD      eccCmdPPRResetRequestPack+0x24
                  |L1.3000|
                          DCD      eccCmdPPRResetRequestPack+0x2a
                  |L1.3004|
                          DCD      ||.constdata||+0x310
                  |L1.3008|
                          DCD      eccCmdPPRResetRequestPack+0x2e
                  |L1.3012|
                          DCD      eccCmdPPRResetRequestPack+0x36
                  |L1.3016|
                          DCD      eccCmdPPRResetRequestPack+0x3f
                  |L1.3020|
000bcc  70707252          DCB      "pprReset() EPMReaderSendCmd size error [%d: %d]\n",0
000bd0  65736574
000bd4  28292045
000bd8  504d5265
000bdc  61646572
000be0  53656e64
000be4  436d6420
000be8  73697a65
000bec  20657272
000bf0  6f72205b
000bf4  25643a20
000bf8  25645d0a
000bfc  00      
000bfd  00                DCB      0
000bfe  00                DCB      0
000bff  00                DCB      0
                  |L1.3072|
                          DCD      0x00000bb8
                  |L1.3076|
000c04  70707252          DCB      "pprReset() receiveReaderCmd error\n",0
000c08  65736574
000c0c  28292072
000c10  65636569
000c14  76655265
000c18  61646572
000c1c  436d6420
000c20  6572726f
000c24  720a00  
000c27  00                DCB      0
                  |L1.3112|
000c28  0d0a2d2d          DCB      "\r\n--- pprReset : status 0x%04x,",0
000c2c  2d207070
000c30  72526573
000c34  6574203a
000c38  20737461
000c3c  74757320
000c40  30782530
000c44  34782c00
                  |L1.3144|
000c48  206c656e          DCB      " len = %d --->\r\n",0
000c4c  203d2025
000c50  64202d2d
000c54  2d3e0d0a
000c58  00      
000c59  00                DCB      0
000c5a  00                DCB      0
000c5b  00                DCB      0
                  |L1.3164|
000c5c  30782530          DCB      "0x%02x, ",0
000c60  32782c20
000c64  00      
000c65  00                DCB      0
000c66  00                DCB      0
000c67  00                DCB      0
                  |L1.3176|
000c68  0d0a00            DCB      "\r\n",0
000c6b  00                DCB      0
                  |L1.3180|
000c6c  0d0a3c2d          DCB      "\r\n<--- pprReset ---\r\n",0
000c70  2d2d2070
000c74  70725265
000c78  73657420
000c7c  2d2d2d0d
000c80  0a00    
000c82  00                DCB      0
000c83  00                DCB      0
                  |L1.3204|
                          DCD      eccCmdDCAReadRequestPack
                  |L1.3208|
                          DCD      eccCmdDCAReadRequestPack+0x11
                  |L1.3212|
                          DCD      eccCmdDCAReadRequestPack+0x15
                  |L1.3216|
000c90  65646361          DCB      "edcaRead() EPMReaderSendCmd size error [%d: %d]\n",0
000c94  52656164
000c98  28292045
000c9c  504d5265
000ca0  61646572
000ca4  53656e64
000ca8  436d6420
000cac  73697a65
000cb0  20657272
000cb4  6f72205b
000cb8  25643a20
000cbc  25645d0a
000cc0  00      
000cc1  00                DCB      0
000cc2  00                DCB      0
000cc3  00                DCB      0
                  |L1.3268|
;;;679        }
;;;680        else
;;;681        {
;;;682            int count=EPMReaderReceiveCmd(600, &receiveData, &receiveDataLen);
000cc4  e28d2004          ADD      r2,sp,#4
000cc8  e28d1008          ADD      r1,sp,#8
000ccc  e3a00f96          MOV      r0,#0x258
000cd0  ebfffffe          BL       EPMReaderReceiveCmd
000cd4  e1a09000          MOV      r9,r0
;;;683            //sysprintf("we get %d char!@ readICD\n",count);
;;;684            if(count == 0)
000cd8  e3590000          CMP      r9,#0
000cdc  1a000003          BNE      |L1.3312|
;;;685            {
;;;686                sysprintf("edcaRead() receiveReaderCmd error\n");
000ce0  e28f0e22          ADR      r0,|L1.3848|
000ce4  ebfffffe          BL       sysprintf
;;;687                returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;              
000ce8  e3a04001          MOV      r4,#1
000cec  ea000006          B        |L1.3340|
                  |L1.3312|
;;;688            }
;;;689            else
;;;690            {            
;;;691                returnInfo = parserMessage(CARD_MESSAGE_TYPE_ECC_DCA_READ, receiveData, receiveDataLen, returnCode, resultStatus);
000cf0  e1a03005          MOV      r3,r5
000cf4  e58d6000          STR      r6,[sp,#0]
000cf8  e1dd20b4          LDRH     r2,[sp,#4]
000cfc  e3a00002          MOV      r0,#2
000d00  e59d1008          LDR      r1,[sp,#8]
000d04  ebfffffe          BL       parserMessage
000d08  e1a04000          MOV      r4,r0
                  |L1.3340|
;;;692                #if(0)
;;;693                if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;694                {
;;;695                    uint8_t* prData;
;;;696                    uint32_t prDataLen;
;;;697                    sysprintf("\r\n--- edcaRead : status 0x%04x,", *resultStatus);
;;;698                    switch(*resultStatus)
;;;699                    {
;;;700                        case ECC_CMD_READ_SUCCESS_ID:
;;;701                            prData = (uint8_t*)&eccCmdDCAReadResponseSuccessData;
;;;702                            prDataLen = sizeof(eccCmdDCAReadResponseSuccessData);
;;;703                            sysprintf(" len = %d --->\r\n", prDataLen);
;;;704                            for(int i = 0; i<prDataLen; i++)
;;;705                            {
;;;706                                //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;707                                sysprintf("0x%02x, ", prData[i]);
;;;708                                if(i%10 == 9)
;;;709                                    sysprintf("\r\n");
;;;710    
;;;711                            }
;;;712                            sysprintf("\r\n<--- edcaRead ---\r\n");
;;;713                            break;
;;;714    
;;;715                            //0x640E(餘額異常) or 0x6418(通路限制)
;;;716                        case ECC_CMD_READ_ERROR_1_ID_1:// 0x640E(餘額異常)   
;;;717                        case ECC_CMD_READ_ERROR_1_ID_2://0x6418(通路限制)
;;;718                            prData = (uint8_t*)&eccCmdDCAReadResponseError1Data;
;;;719                            prDataLen = sizeof(eccCmdDCAReadResponseError1Data);
;;;720                            sysprintf(" len = %d --->\r\n", prDataLen);
;;;721                            for(int i = 0; i<prDataLen; i++)
;;;722                            {
;;;723                                //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;724                                sysprintf("0x%02x, ", prData[i]);
;;;725                                if(i%10 == 9)
;;;726                                    sysprintf("\r\n");
;;;727    
;;;728                            }
;;;729                            sysprintf("\r\n<--- edcaRead ---\r\n");
;;;730                            break;
;;;731    
;;;732    
;;;733                        case ECC_CMD_READ_ERROR_2_ID_1://0x6103(CPD檢查異常)
;;;734                            prData = (uint8_t*)&eccCmdDCAReadResponseError2Data;
;;;735                            prDataLen = sizeof(eccCmdDCAReadResponseError2Data);
;;;736                            sysprintf(" len = %d --->\r\n", prDataLen);
;;;737                            for(int i = 0; i<prDataLen; i++)
;;;738                            {
;;;739                                //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;740                                sysprintf("0x%02x, ", prData[i]);
;;;741                                if(i%10 == 9)
;;;742                                    sysprintf("\r\n");
;;;743    
;;;744                            }
;;;745                            sysprintf("\r\n<--- edcaRead ---\r\n");
;;;746                            break;
;;;747    
;;;748    
;;;749                    }                
;;;750                    
;;;751                }
;;;752                #endif
;;;753            }    
;;;754        }
000d0c  e1a00000          MOV      r0,r0
                  |L1.3344|
;;;755    
;;;756        return returnInfo;
000d10  e1a00004          MOV      r0,r4
;;;757    }
000d14  e8bd83fe          POP      {r1-r9,pc}
;;;758    
                          ENDP

                  edcaDeduct PROC
;;;759    static uint16_t edcaDeduct(uint16_t* returnCode, uint16_t* resultStatus, uint32_t deductValue, uint32_t utcTime, uint32_t epmUTCTime, BOOL AutoLoadFlag)
000d18  e92d4ffe          PUSH     {r1-r11,lr}
;;;760    {
000d1c  e1a05000          MOV      r5,r0
000d20  e1a06001          MOV      r6,r1
000d24  e1a07002          MOV      r7,r2
000d28  e1a08003          MOV      r8,r3
000d2c  e59da030          LDR      r10,[sp,#0x30]
;;;761        static ECCCmdEDCADeductPack eccCmdEDCADeductPack;
;;;762        uint16_t returnInfo;
;;;763        uint8_t* receiveData;
;;;764        uint16_t receiveDataLen;
;;;765        
;;;766        sysprintf("\r\n --> edcaDeduct() AutoLoadFlag = %d...\n", AutoLoadFlag);
000d30  e28f0f7d          ADR      r0,|L1.3884|
000d34  e59d1034          LDR      r1,[sp,#0x34]
000d38  ebfffffe          BL       sysprintf
;;;767         
;;;768        eccCmdEDCADeductPack.header = 0xEA;
000d3c  e3a000ea          MOV      r0,#0xea
000d40  e59f1210          LDR      r1,|L1.3928|
000d44  e5c10000          STRB     r0,[r1,#0]  ; eccCmdEDCADeductPack
;;;769        eccCmdEDCADeductPack.cmd1   = 0x04;
000d48  e3a00004          MOV      r0,#4
000d4c  e5c10001          STRB     r0,[r1,#1]  ; eccCmdEDCADeductPack
;;;770        eccCmdEDCADeductPack.cmd2   = 0x01;
000d50  e3a00001          MOV      r0,#1
000d54  e5c10002          STRB     r0,[r1,#2]  ; eccCmdEDCADeductPack
;;;771        eccCmdEDCADeductPack.len    = getLenData(sizeof(ECCCmdEDCADeductRequest) + 1); // add LRC byte
000d58  e3a00047          MOV      r0,#0x47
000d5c  ebfffffe          BL       getLenData
000d60  e59f11f0          LDR      r1,|L1.3928|
000d64  e5c10003          STRB     r0,[r1,#3]  ; eccCmdEDCADeductPack
000d68  e1a00420          LSR      r0,r0,#8
000d6c  e5c10004          STRB     r0,[r1,#4]  ; eccCmdEDCADeductPack
;;;772    
;;;773        eccCmdEDCADeductPack.body.CLA = 0x80;
000d70  e3a00080          MOV      r0,#0x80
000d74  e5c10005          STRB     r0,[r1,#5]  ; eccCmdEDCADeductPack
;;;774        eccCmdEDCADeductPack.body.INS = 0x01;
000d78  e3a00001          MOV      r0,#1
000d7c  e5c10006          STRB     r0,[r1,#6]
;;;775        eccCmdEDCADeductPack.body.P1 = 0x02;
000d80  e3a00002          MOV      r0,#2
000d84  e5c10007          STRB     r0,[r1,#7]
;;;776        eccCmdEDCADeductPack.body.P2 = 0x00;
000d88  e3a00000          MOV      r0,#0
000d8c  e5c10008          STRB     r0,[r1,#8]
;;;777        eccCmdEDCADeductPack.body.Lc = 0x40;
000d90  e3a00040          MOV      r0,#0x40
000d94  e5c10009          STRB     r0,[r1,#9]
;;;778    
;;;779        //data
;;;780        eccCmdEDCADeductPack.body.data.MsgType = 0x01;                                //Msg Type 1 TM 0x01 扣款
000d98  e3a00001          MOV      r0,#1
000d9c  e5c1000a          STRB     r0,[r1,#0xa]
;;;781        eccCmdEDCADeductPack.body.data.NewSubtype = 0x00;                             //New_Subtype 1 TM 0x00 default
000da0  e3a00000          MOV      r0,#0
000da4  e5c1000b          STRB     r0,[r1,#0xb]
;;;782        getECCCmdUint32ToASCIIStr(TM_LOCATION_ID, eccCmdEDCADeductPack.body.data.TMLocationID, sizeof(eccCmdEDCADeductPack.body.data.TMLocationID));  //TM Location ID 10 TM 終端機(TM)店號，ASCII (右靠左補 0)
000da8  e3a0200a          MOV      r2,#0xa
000dac  e281100c          ADD      r1,r1,#0xc
000db0  e3a00001          MOV      r0,#1
000db4  ebfffffe          BL       getECCCmdUint32ToASCIIStr
;;;783        getECCCmdUint32ToASCIIStr(TM_ID, eccCmdEDCADeductPack.body.data.TMID, sizeof(eccCmdEDCADeductPack.body.data.TMID));  //TM ID 2 TM 終端機(TM)機號，ASCII (右靠左補 0)
000db8  e3a02002          MOV      r2,#2
000dbc  e59f1198          LDR      r1,|L1.3932|
000dc0  e3a00001          MOV      r0,#1
000dc4  ebfffffe          BL       getECCCmdUint32ToASCIIStr
;;;784        
;;;785        getECCCmdUTCTimeStr(epmUTCTime, eccCmdEDCADeductPack.body.data.TMTXNDateTime, sizeof(eccCmdEDCADeductPack.body.data.TMTXNDateTime));  //TM TXN Date Time 14 TM 終端機(TM)交易日期時間 (YYYYMMDDhhmmss)
000dc8  e3a0200e          MOV      r2,#0xe
000dcc  e59f118c          LDR      r1,|L1.3936|
000dd0  e1a0000a          MOV      r0,r10
000dd4  ebfffffe          BL       getECCCmdUTCTimeStr
;;;786        getECCCmdSerialNumber(serialNumber, &(eccCmdEDCADeductPack.body.data.TMSerialNumber));     //TM Serial Number 6 TM 終端機(TM)交易序號，ASCII (右靠左補 0，值須為 0~9)交易成功時進號，失敗時不進號
000dd8  e59f1184          LDR      r1,|L1.3940|
000ddc  e51f09ec          LDR      r0,|L1.1016|
000de0  e5900000          LDR      r0,[r0,#0]  ; serialNumber
000de4  ebfffffe          BL       getECCCmdSerialNumber
;;;787        getECCCmdUint32ToASCIIStr(TM_AGENT_NUMBER, eccCmdEDCADeductPack.body.data.TMAgentNumber, sizeof(eccCmdEDCADeductPack.body.data.TMAgentNumber));                       //TM Agent Number 4 TM 終端機(TM)收銀員代號，ASCII (右靠左補 0，值須為 0~9)
000de8  e3a02004          MOV      r2,#4
000dec  e59f1174          LDR      r1,|L1.3944|
000df0  e3a00001          MOV      r0,#1
000df4  ebfffffe          BL       getECCCmdUint32ToASCIIStr
;;;788        getECCCmdDataTimeData(utcTime, &(eccCmdEDCADeductPack.body.data.TXNDateTime));     //TXN Date Time 4 TM 交易日期時間 Unsigned and LSB First (UnixDateTime)
000df8  e59f116c          LDR      r1,|L1.3948|
000dfc  e1a00008          MOV      r0,r8
000e00  ebfffffe          BL       getECCCmdDataTimeData
;;;789        
;;;790        getMoneyToUint8(deductValue, eccCmdEDCADeductPack.body.data.TXNAMT, sizeof(eccCmdEDCADeductPack.body.data.TXNAMT));  //TXN AMT 3 TM 交易金額 Signed and LSB First (使用特種票時補 0x00)
000e04  e3a02003          MOV      r2,#3
000e08  e59f1160          LDR      r1,|L1.3952|
000e0c  e1a00007          MOV      r0,r7
000e10  ebfffffe          BL       getMoneyToUint8
;;;791        #if(ENABLE_ECC_AUTO_LOAD)
;;;792        if(AutoLoadFlag)
;;;793            eccCmdEDCADeductPack.body.data.AutoLoad = 0x01;              //Auto-Load 1 TM 是否進行自動加值
;;;794        else                                                                    //- 0x00：否
;;;795            eccCmdEDCADeductPack.body.data.AutoLoad = 0x00;                     //- 0x01：是
;;;796        #else
;;;797            eccCmdEDCADeductPack.body.data.AutoLoad = 0x00;
000e14  e3a00000          MOV      r0,#0
000e18  e59f1138          LDR      r1,|L1.3928|
000e1c  e5c10037          STRB     r0,[r1,#0x37]
;;;798        #endif
;;;799    
;;;800        eccCmdEDCADeductPack.body.data.TXNType = 0x20;                  //TXN Type 1 TM 交易方式 
000e20  e3a00020          MOV      r0,#0x20
000e24  e5c10038          STRB     r0,[r1,#0x38]
;;;801                                                                            //- 0x20：小額扣款
;;;802        //2018.07.09 modify in ECC
;;;803        eccCmdEDCADeductPack.body.data.TransferGroupCode = 0x06;//0x00;         //Transfer Group Code 1 TM 本運具之轉乘群組代碼
000e28  e3a00006          MOV      r0,#6
000e2c  e5c10039          STRB     r0,[r1,#0x39]
;;;804                                                                            //0x06：小額扣款型進出站停車場
;;;805                                                                            //0x00：其它無需寫入轉乘資訊
;;;806        memset(eccCmdEDCADeductPack.body.data.RFU, 0x00, sizeof(eccCmdEDCADeductPack.body.data.RFU));   //RFU(Reserved For Use) 15 TM 保留，補 0x00，15 bytes
000e30  e3a0100f          MOV      r1,#0xf
000e34  e59f0138          LDR      r0,|L1.3956|
000e38  ebfffffe          BL       __aeabi_memclr
;;;807        eccCmdEDCADeductPack.body.data.LCDControlFlag = 0x00;          //LCD Control Flag 1 TM 用於控制交易完成後之 LCD 顯示
000e3c  e3a00000          MOV      r0,#0
000e40  e59f1110          LDR      r1,|L1.3928|
000e44  e5c10049          STRB     r0,[r1,#0x49]
;;;808                                                                            //0x00：顯示【交易完成 請取卡】(default)
;;;809                                                                            //0x01：顯示【（請勿移動票卡）】
;;;810        //data
;;;811    
;;;812        eccCmdEDCADeductPack.body.Le = 0x7A;
000e48  e3a0007a          MOV      r0,#0x7a
000e4c  e5c1004a          STRB     r0,[r1,#0x4a]
;;;813    
;;;814        eccCmdEDCADeductPack.LRC = EPMReaderLRC((uint8_t*)&eccCmdEDCADeductPack, 5, sizeof(eccCmdEDCADeductPack.body));
000e50  e3a02046          MOV      r2,#0x46
000e54  e3a01005          MOV      r1,#5
000e58  e59f00f8          LDR      r0,|L1.3928|
000e5c  ebfffffe          BL       EPMReaderLRC
000e60  e59f10f0          LDR      r1,|L1.3928|
000e64  e5c1004b          STRB     r0,[r1,#0x4b]  ; eccCmdEDCADeductPack
;;;815        eccCmdEDCADeductPack.tail1 = 0x90;  
000e68  e3a00090          MOV      r0,#0x90
000e6c  e5c1004c          STRB     r0,[r1,#0x4c]  ; eccCmdEDCADeductPack
;;;816        eccCmdEDCADeductPack.tail2 = 0x00;  
000e70  e3a00000          MOV      r0,#0
000e74  e5c1004d          STRB     r0,[r1,#0x4d]  ; eccCmdEDCADeductPack
;;;817    
;;;818        
;;;819        *returnCode = CARD_MESSAGE_CODE_NO_USE;
000e78  e3a000ff          MOV      r0,#0xff
000e7c  e1c500b0          STRH     r0,[r5,#0]
;;;820        EPMReaderFlushBuffer();
000e80  ebfffffe          BL       EPMReaderFlushBuffer
;;;821        int nret = EPMReaderSendCmd((uint8_t*)&eccCmdEDCADeductPack,sizeof(eccCmdEDCADeductPack));
000e84  e3a0104e          MOV      r1,#0x4e
000e88  e59f00c8          LDR      r0,|L1.3928|
000e8c  ebfffffe          BL       EPMReaderSendCmd
000e90  e1a09000          MOV      r9,r0
;;;822        if(nret != sizeof(eccCmdEDCADeductPack))
000e94  e359004e          CMP      r9,#0x4e
000e98  0a000005          BEQ      |L1.3764|
;;;823        {
;;;824            sysprintf("edcaDeduct() EPMReaderSendCmd size error [%d: %d]\n", nret, sizeof(eccCmdEDCADeductPack));
000e9c  e3a0204e          MOV      r2,#0x4e
000ea0  e1a01009          MOV      r1,r9
000ea4  e28f00cc          ADR      r0,|L1.3960|
000ea8  ebfffffe          BL       sysprintf
;;;825            returnInfo = CARD_MESSAGE_RETURN_SEND_ERROR;
000eac  e3a04004          MOV      r4,#4
000eb0  ea000012          B        |L1.3840|
                  |L1.3764|
;;;826        }
;;;827        else
;;;828        {
;;;829            int count=EPMReaderReceiveCmd(500, &receiveData, &receiveDataLen);
000eb4  e28d2004          ADD      r2,sp,#4
000eb8  e28d1008          ADD      r1,sp,#8
000ebc  e3a00f7d          MOV      r0,#0x1f4
000ec0  ebfffffe          BL       EPMReaderReceiveCmd
000ec4  e1a0b000          MOV      r11,r0
;;;830            //sysprintf("we get %d char!@ readICD\n",count);
;;;831            if(count == 0)
000ec8  e35b0000          CMP      r11,#0
000ecc  1a000003          BNE      |L1.3808|
;;;832            {
;;;833                sysprintf("edcaDeduct() receiveReaderCmd error\n");
000ed0  e28f00d4          ADR      r0,|L1.4012|
000ed4  ebfffffe          BL       sysprintf
;;;834                returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;              
000ed8  e3a04001          MOV      r4,#1
000edc  ea000006          B        |L1.3836|
                  |L1.3808|
;;;835            }
;;;836            else
;;;837            {            
;;;838                returnInfo = parserMessage(CARD_MESSAGE_TYPE_ECC_EDCA_DEDUCT, receiveData, receiveDataLen, returnCode, resultStatus);
000ee0  e1a03005          MOV      r3,r5
000ee4  e58d6000          STR      r6,[sp,#0]
000ee8  e1dd20b4          LDRH     r2,[sp,#4]
000eec  e3a00003          MOV      r0,#3
000ef0  e59d1008          LDR      r1,[sp,#8]
000ef4  ebfffffe          BL       parserMessage
000ef8  e1a04000          MOV      r4,r0
                  |L1.3836|
;;;839                #if(0)
;;;840                if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;841                {
;;;842                    uint8_t* prData;
;;;843                    uint32_t prDataLen;
;;;844                    sysprintf("\r\n--- edcaDeduct : status 0x%04x,", *resultStatus);
;;;845                    switch(*resultStatus)
;;;846                    {
;;;847                        case ECC_CMD_EDCA_DEDUCT_SUCCESS_ID:
;;;848                            prData = (uint8_t*)&eccCmdEDCADeductResponseData;
;;;849                            prDataLen = sizeof(eccCmdEDCADeductResponseData);
;;;850                            sysprintf(" len = %d --->\r\n", prDataLen);
;;;851                            for(int i = 0; i<prDataLen; i++)
;;;852                            {
;;;853                                //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;854                                sysprintf("0x%02x, ", prData[i]);
;;;855                                if(i%10 == 9)
;;;856                                    sysprintf("\r\n");
;;;857    
;;;858                            }
;;;859                            sysprintf("\r\n<--- edcaDeduct ---\r\n");
;;;860                            break;
;;;861                    }                
;;;862                    
;;;863                }
;;;864                #endif
;;;865            }    
;;;866        }
000efc  e1a00000          MOV      r0,r0
                  |L1.3840|
;;;867    
;;;868        return returnInfo;
000f00  e1a00004          MOV      r0,r4
;;;869    }
000f04  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.3848|
000f08  65646361          DCB      "edcaRead() receiveReaderCmd error\n",0
000f0c  52656164
000f10  28292072
000f14  65636569
000f18  76655265
000f1c  61646572
000f20  436d6420
000f24  6572726f
000f28  720a00  
000f2b  00                DCB      0
                  |L1.3884|
000f2c  0d0a202d          DCB      "\r\n --> edcaDeduct() AutoLoadFlag = %d...\n",0
000f30  2d3e2065
000f34  64636144
000f38  65647563
000f3c  74282920
000f40  4175746f
000f44  4c6f6164
000f48  466c6167
000f4c  203d2025
000f50  642e2e2e
000f54  0a00    
000f56  00                DCB      0
000f57  00                DCB      0
                  |L1.3928|
                          DCD      eccCmdEDCADeductPack
                  |L1.3932|
                          DCD      eccCmdEDCADeductPack+0x16
                  |L1.3936|
                          DCD      eccCmdEDCADeductPack+0x18
                  |L1.3940|
                          DCD      eccCmdEDCADeductPack+0x26
                  |L1.3944|
                          DCD      eccCmdEDCADeductPack+0x2c
                  |L1.3948|
                          DCD      eccCmdEDCADeductPack+0x30
                  |L1.3952|
                          DCD      eccCmdEDCADeductPack+0x34
                  |L1.3956|
                          DCD      eccCmdEDCADeductPack+0x3a
                  |L1.3960|
000f78  65646361          DCB      "edcaDeduct() EPMReaderSendCmd size error [%d: %d]\n",0
000f7c  44656475
000f80  63742829
000f84  2045504d
000f88  52656164
000f8c  65725365
000f90  6e64436d
000f94  64207369
000f98  7a652065
000f9c  72726f72
000fa0  205b2564
000fa4  3a202564
000fa8  5d0a00  
000fab  00                DCB      0
                  |L1.4012|
000fac  65646361          DCB      "edcaDeduct() receiveReaderCmd error\n",0
000fb0  44656475
000fb4  63742829
000fb8  20726563
000fbc  65697665
000fc0  52656164
000fc4  6572436d
000fc8  64206572
000fcc  726f720a
000fd0  00      
000fd1  00                DCB      0
000fd2  00                DCB      0
000fd3  00                DCB      0
                          ENDP

                  eccLockCard PROC
;;;870    static uint16_t eccLockCard(uint16_t* returnCode, uint16_t* resultStatus, uint8_t* cardId, uint32_t utcTime)
000fd4  e92d5ff0          PUSH     {r4-r12,lr}
;;;871    {
000fd8  e1a06000          MOV      r6,r0
000fdc  e1a05001          MOV      r5,r1
000fe0  e1a07002          MOV      r7,r2
000fe4  e1a08003          MOV      r8,r3
;;;872        static ECCCmdLockCardPack eccCmdLockCardPack;
;;;873        uint16_t returnInfo;
;;;874    #if(ENABLE_ECC_LOCK_CARD)
;;;875        uint8_t* receiveData;
;;;876        uint16_t receiveDataLen;
;;;877    #endif
;;;878        eccCmdLockCardPack.header = 0xEA;
000fe8  e3a000ea          MOV      r0,#0xea
000fec  e59f12a4          LDR      r1,|L1.4760|
000ff0  e5c10000          STRB     r0,[r1,#0]  ; eccCmdLockCardPack
;;;879        eccCmdLockCardPack.cmd1   = 0x04;
000ff4  e3a00004          MOV      r0,#4
000ff8  e5c10001          STRB     r0,[r1,#1]  ; eccCmdLockCardPack
;;;880        eccCmdLockCardPack.cmd2   = 0x01;
000ffc  e3a00001          MOV      r0,#1
001000  e5c10002          STRB     r0,[r1,#2]  ; eccCmdLockCardPack
;;;881        eccCmdLockCardPack.len    = getLenData(sizeof(ECCCmdLockCardRequest) + 1); // add LRC byte
001004  e3a00015          MOV      r0,#0x15
001008  ebfffffe          BL       getLenData
00100c  e59f1284          LDR      r1,|L1.4760|
001010  e5c10003          STRB     r0,[r1,#3]  ; eccCmdLockCardPack
001014  e1a00420          LSR      r0,r0,#8
001018  e5c10004          STRB     r0,[r1,#4]  ; eccCmdLockCardPack
;;;882    
;;;883        eccCmdLockCardPack.body.CLA = 0x80;
00101c  e3a00080          MOV      r0,#0x80
001020  e5c10005          STRB     r0,[r1,#5]  ; eccCmdLockCardPack
;;;884        eccCmdLockCardPack.body.INS = 0x41;
001024  e3a00041          MOV      r0,#0x41
001028  e5c10006          STRB     r0,[r1,#6]
;;;885        eccCmdLockCardPack.body.P1 = 0x01;
00102c  e3a00001          MOV      r0,#1
001030  e5c10007          STRB     r0,[r1,#7]
;;;886        eccCmdLockCardPack.body.P2 = 0x00;
001034  e3a00000          MOV      r0,#0
001038  e5c10008          STRB     r0,[r1,#8]
;;;887        eccCmdLockCardPack.body.Lc = 0x0E;
00103c  e3a0000e          MOV      r0,#0xe
001040  e5c10009          STRB     r0,[r1,#9]
;;;888    
;;;889        //data
;;;890        eccCmdLockCardPack.body.data.MsgType = 0x22;                                //Msg Type 1 API 0x22 鎖卡
001044  e3a00022          MOV      r0,#0x22
001048  e5c1000a          STRB     r0,[r1,#0xa]
;;;891        eccCmdLockCardPack.body.data.Subtype = 0x00;                                //Subtype 1 API 0x00 default
00104c  e3a00000          MOV      r0,#0
001050  e5c1000b          STRB     r0,[r1,#0xb]
;;;892        memcpy(eccCmdLockCardPack.body.data.CardPhysicalID, cardId, sizeof(eccCmdLockCardPack.body.data.CardPhysicalID));    //Card Physical ID 7 API Mifare 卡號
001054  e3a02007          MOV      r2,#7
001058  e1a01007          MOV      r1,r7
00105c  e59f0238          LDR      r0,|L1.4764|
001060  ebfffffe          BL       __aeabi_memcpy
;;;893        getECCCmdDataTimeData(utcTime, &(eccCmdLockCardPack.body.data.TXNDateTime)); //TXN Date Time 4 API 交易日期時間 Unsigned and LSB First (UnixDateTime)
001064  e59f1234          LDR      r1,|L1.4768|
001068  e1a00008          MOV      r0,r8
00106c  ebfffffe          BL       getECCCmdDataTimeData
;;;894        eccCmdLockCardPack.body.data.BlockingReason = 0x01;                         //Blocking Reason 1 API 鎖卡原因 定值 0x01
001070  e3a00001          MOV      r0,#1
001074  e59f121c          LDR      r1,|L1.4760|
001078  e5c10017          STRB     r0,[r1,#0x17]
;;;895        //data
;;;896    
;;;897        eccCmdLockCardPack.body.Le = 0x28;
00107c  e3a00028          MOV      r0,#0x28
001080  e5c10018          STRB     r0,[r1,#0x18]
;;;898    
;;;899        eccCmdLockCardPack.LRC = EPMReaderLRC((uint8_t*)&eccCmdLockCardPack, 5, sizeof(eccCmdLockCardPack.body));
001084  e3a02014          MOV      r2,#0x14
001088  e3a01005          MOV      r1,#5
00108c  e59f0204          LDR      r0,|L1.4760|
001090  ebfffffe          BL       EPMReaderLRC
001094  e59f11fc          LDR      r1,|L1.4760|
001098  e5c10019          STRB     r0,[r1,#0x19]  ; eccCmdLockCardPack
;;;900        eccCmdLockCardPack.tail1 = 0x90;  
00109c  e3a00090          MOV      r0,#0x90
0010a0  e5c1001a          STRB     r0,[r1,#0x1a]  ; eccCmdLockCardPack
;;;901        eccCmdLockCardPack.tail2 = 0x00;  
0010a4  e3a00000          MOV      r0,#0
0010a8  e5c1001b          STRB     r0,[r1,#0x1b]  ; eccCmdLockCardPack
;;;902    
;;;903    
;;;904        *returnCode = CARD_MESSAGE_CODE_NO_USE;
0010ac  e3a000ff          MOV      r0,#0xff
0010b0  e1c600b0          STRH     r0,[r6,#0]
;;;905    #if(!ENABLE_ECC_LOCK_CARD)
;;;906        uint8_t* prData;
;;;907        uint32_t prDataLen;
;;;908        prData = (uint8_t*)&eccCmdLockCardPack;
0010b4  e281b000          ADD      r11,r1,#0
;;;909        prDataLen = sizeof(eccCmdLockCardPack);
0010b8  e3a0a01c          MOV      r10,#0x1c
;;;910        sysprintf("\r\n~~~ eccCmdLockCardPack : status 0x%04x,", *resultStatus);
0010bc  e1d510b0          LDRH     r1,[r5,#0]
0010c0  e28f0f77          ADR      r0,|L1.4772|
0010c4  ebfffffe          BL       sysprintf
;;;911        sysprintf(" len = %d ~~~>\r\n", prDataLen);
0010c8  e1a0100a          MOV      r1,r10
0010cc  e28f0f7f          ADR      r0,|L1.4816|
0010d0  ebfffffe          BL       sysprintf
;;;912        for(int i = 0; i<prDataLen; i++)
0010d4  e3a04000          MOV      r4,#0
0010d8  ea00000a          B        |L1.4360|
                  |L1.4316|
;;;913        {
;;;914            //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;915            sysprintf("0x%02x, ", prData[i]);
0010dc  e7db1004          LDRB     r1,[r11,r4]
0010e0  e59f01fc          LDR      r0,|L1.4836|
0010e4  ebfffffe          BL       sysprintf
;;;916            if(i%10 == 9)
0010e8  e3a0100a          MOV      r1,#0xa
0010ec  e1a00004          MOV      r0,r4
0010f0  ebfffffe          BL       __aeabi_idivmod
0010f4  e3510009          CMP      r1,#9
0010f8  1a000001          BNE      |L1.4356|
;;;917                sysprintf("\r\n");
0010fc  e28f0f79          ADR      r0,|L1.4840|
001100  ebfffffe          BL       sysprintf
                  |L1.4356|
001104  e2844001          ADD      r4,r4,#1              ;912
                  |L1.4360|
001108  e154000a          CMP      r4,r10                ;912
00110c  3afffff2          BCC      |L1.4316|
;;;918    
;;;919        }
;;;920        sysprintf("\r\n<~~~ eccCmdLockCardPack ~~~\r\n");
001110  e28f0f75          ADR      r0,|L1.4844|
001114  ebfffffe          BL       sysprintf
;;;921        returnInfo = CARD_MESSAGE_RETURN_SUCCESS;
001118  e3a09002          MOV      r9,#2
;;;922        *resultStatus = ECC_CMD_LOCK_CARD_SUCCESS_ID;
00111c  e3a00a09          MOV      r0,#0x9000
001120  e1c500b0          STRH     r0,[r5,#0]
;;;923    #else
;;;924        EPMReaderFlushBuffer();
;;;925        int nret = EPMReaderSendCmd((uint8_t*)&eccCmdLockCardPack,sizeof(eccCmdLockCardPack));
;;;926        if(nret != sizeof(eccCmdLockCardPack))
;;;927        {
;;;928            sysprintf("eccLockCard() EPMReaderSendCmd size error [%d: %d]\n", nret, sizeof(eccCmdLockCardPack));
;;;929            returnInfo = CARD_MESSAGE_RETURN_SEND_ERROR;
;;;930        }
;;;931        else
;;;932        {
;;;933            int count=EPMReaderReceiveCmd(500, &receiveData, &receiveDataLen);
;;;934            //sysprintf("we get %d char!@ readICD\n",count);
;;;935            if(count == 0)
;;;936            {
;;;937                sysprintf("eccLockCard() receiveReaderCmd error\n");
;;;938                returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;              
;;;939            }
;;;940            else
;;;941            {            
;;;942                returnInfo = parserMessage(CARD_MESSAGE_TYPE_ECC_LOCK_CARD, receiveData, receiveDataLen, returnCode, resultStatus);
;;;943                #if(0)
;;;944                if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;945                {
;;;946                    uint8_t* prData;
;;;947                    uint32_t prDataLen;
;;;948                    sysprintf("\r\n--- eccLockCard : status 0x%04x,", *resultStatus);
;;;949                    switch(*resultStatus)
;;;950                    {
;;;951                        case ECC_CMD_LOCK_CARD_SUCCESS_ID:
;;;952                            prData = (uint8_t*)&eccCmdLockCardResponseData;
;;;953                            prDataLen = sizeof(eccCmdLockCardResponseData);
;;;954                            sysprintf(" len = %d --->\r\n", prDataLen);
;;;955                            for(int i = 0; i<prDataLen; i++)
;;;956                            {
;;;957                                //sysprintf(" [%03d] : 0x%02x \r\n", i, receiveData[5+i]);
;;;958                                sysprintf("0x%02x, ", prData[i]);
;;;959                                if(i%10 == 9)
;;;960                                    sysprintf("\r\n");
;;;961    
;;;962                            }
;;;963                            sysprintf("\r\n<--- eccLockCard ---\r\n");
;;;964                            break;
;;;965                    }                
;;;966                    
;;;967                }
;;;968                #endif
;;;969            }    
;;;970        }
;;;971    #endif
;;;972        return returnInfo;
001124  e1a00009          MOV      r0,r9
;;;973    }
001128  e8bd9ff0          POP      {r4-r12,pc}
;;;974    #if(ENABLE_ECC_AUTO_LOAD)
                          ENDP

                  eccSaveLockCardLog PROC
;;;1623   #endif
;;;1624   static void eccSaveLockCardLog(uint32_t lockType, uint8_t newSpID, uint8_t svceLocID, char* blkFileName, uint32_t utcTime, uint8_t* DCAReadData, ECCCmdLockCardResponseData* LockCardResponseData)
00112c  e92d4ff0          PUSH     {r4-r11,lr}
;;;1625   {
001130  e24ddf47          SUB      sp,sp,#0x11c
001134  e1a04000          MOV      r4,r0
001138  e1a05001          MOV      r5,r1
00113c  e1a06002          MOV      r6,r2
001140  e1a07003          MOV      r7,r3
001144  e28dad05          ADD      r10,sp,#0x140
001148  e89a0700          LDM      r10,{r8-r10}
;;;1626       uint8_t* eccLockCardLogBody = (uint8_t*)pvPortMalloc(sizeof(ECCLockCardLogBody));;    
00114c  e3a00086          MOV      r0,#0x86
001150  ebfffffe          BL       pvPortMalloc
001154  e1a0b000          MOV      r11,r0
;;;1627       ECCLockCardLogContainInit((ECCLockCardLogBody*)eccLockCardLogBody, lockType, newSpID, svceLocID, blkFileName, utcTime, DCAReadData, LockCardResponseData);
001158  e1a03006          MOV      r3,r6
00115c  e1a02005          MOV      r2,r5
001160  e1a01004          MOV      r1,r4
001164  e1a0000b          MOV      r0,r11
001168  e88d0780          STM      sp,{r7-r10}
00116c  ebfffffe          BL       ECCLockCardLogContainInit
;;;1628   #ifdef _PC_ENV_    
;;;1629       MiscSaveToFile(ECCLockCardLogGetFileName(), (uint8_t*)eccLockCardLogBody, sizeof(ECCLockCardLogBody));
;;;1630   #else
;;;1631       char targetLogFileName[_MAX_LFN];
;;;1632       sprintf(targetLogFileName,"%ss", ECCLockCardLogGetFileName()); 
001170  ebfffffe          BL       ECCLockCardLogGetFileName
001174  e58d0018          STR      r0,[sp,#0x18]
001178  e1a02000          MOV      r2,r0
00117c  e28f1f62          ADR      r1,|L1.4876|
001180  e28d001c          ADD      r0,sp,#0x1c
001184  ebfffffe          BL       __2sprintf
;;;1633   
;;;1634       SFlashAppendRecord(targetLogFileName, SFLASH_RECORD_TYPE_ECC, (uint8_t*)eccLockCardLogBody, sizeof(ECCLockCardLogBody));
001188  e3a03086          MOV      r3,#0x86
00118c  e1a0200b          MOV      r2,r11
001190  e3a01001          MOV      r1,#1
001194  e28d001c          ADD      r0,sp,#0x1c
001198  ebfffffe          BL       SFlashAppendRecord
;;;1635   
;;;1636       if(FileAgentAddData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCLockCardLogGetFileName(), (uint8_t*)eccLockCardLogBody, sizeof(ECCLockCardLogBody), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
00119c  ebfffffe          BL       ECCLockCardLogGetFileName
0011a0  e58d0018          STR      r0,[sp,#0x18]
0011a4  e3a00001          MOV      r0,#1
0011a8  e3a01000          MOV      r1,#0
0011ac  e58d0008          STR      r0,[sp,#8]
0011b0  e58d1004          STR      r1,[sp,#4]
0011b4  e58d0010          STR      r0,[sp,#0x10]
0011b8  e3a00086          MOV      r0,#0x86
0011bc  e1a0300b          MOV      r3,r11
0011c0  e58d0000          STR      r0,[sp,#0]
0011c4  e58d100c          STR      r1,[sp,#0xc]
0011c8  e28f1d05          ADR      r1,|L1.4880|
0011cc  e3a00000          MOV      r0,#0
0011d0  e59d2018          LDR      r2,[sp,#0x18]
0011d4  ebfffffe          BL       FileAgentAddData
;;;1637       {
;;;1638   
;;;1639       }   
;;;1640       #if(USE_SAM_ENCRYPT)
;;;1641       if(SCEncryptSAMData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCLockCardLogGetFileName(), (uint8_t*)eccLockCardLogBody, sizeof(ECCLockCardLogBody)))
;;;1642       {
;;;1643       }
;;;1644       #endif
;;;1645   #endif
;;;1646   }
0011d8  e28ddf47          ADD      sp,sp,#0x11c
0011dc  e8bd8ff0          POP      {r4-r11,pc}
;;;1647   
                          ENDP

                  eccSaveAutoLoadLog PROC
;;;1648   static void eccSaveAutoLoadLog(uint8_t newSpID, uint32_t utcTime, uint8_t* DCAReadData, ECCCmdLockCardResponseData* LockCardResponseData)
0011e0  e92d43f0          PUSH     {r4-r9,lr}
;;;1649   {
0011e4  e24ddf45          SUB      sp,sp,#0x114
0011e8  e1a04000          MOV      r4,r0
0011ec  e1a05001          MOV      r5,r1
0011f0  e1a08002          MOV      r8,r2
0011f4  e1a09003          MOV      r9,r3
;;;1650       uint8_t* eccAutoLoadLogBody = (uint8_t*)pvPortMalloc(sizeof(ECCAutoLoadLogBody));
0011f8  e3a000cb          MOV      r0,#0xcb
0011fc  ebfffffe          BL       pvPortMalloc
001200  e1a06000          MOV      r6,r0
;;;1651       
;;;1652       ECCAutoLoadLogContainInit((ECCAutoLoadLogBody*)eccAutoLoadLogBody, TM_AGENT_NUMBER, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData), newSpID, utcTime);
001204  e3a0007a          MOV      r0,#0x7a
001208  e51f1dfc          LDR      r1,|L1.1044|
00120c  e3a030a0          MOV      r3,#0xa0
001210  e51f2e14          LDR      r2,|L1.1028|
001214  e58d1000          STR      r1,[sp,#0]
001218  e3a01001          MOV      r1,#1
00121c  e98d0031          STMIB    sp,{r0,r4,r5}
001220  e1a00006          MOV      r0,r6
001224  ebfffffe          BL       ECCAutoLoadLogContainInit
;;;1653   
;;;1654   #ifdef _PC_ENV_    
;;;1655       MiscSaveToFile(ECCAutoLoadLogGetFileName(), (uint8_t*)eccAutoLoadLogBody, sizeof(ECCAutoLoadLogBody));
;;;1656   #else
;;;1657       char targetLogFileName[_MAX_LFN];
;;;1658       sprintf(targetLogFileName,"%ss", ECCAutoLoadLogGetFileName()); 
001228  ebfffffe          BL       ECCAutoLoadLogGetFileName
00122c  e1a07000          MOV      r7,r0
001230  e1a02007          MOV      r2,r7
001234  e28f10d0          ADR      r1,|L1.4876|
001238  e28d0014          ADD      r0,sp,#0x14
00123c  ebfffffe          BL       __2sprintf
;;;1659   
;;;1660       SFlashAppendRecord(targetLogFileName, SFLASH_RECORD_TYPE_ECC, (uint8_t*)eccAutoLoadLogBody, sizeof(ECCAutoLoadLogBody));
001240  e3a030cb          MOV      r3,#0xcb
001244  e1a02006          MOV      r2,r6
001248  e3a01001          MOV      r1,#1
00124c  e28d0014          ADD      r0,sp,#0x14
001250  ebfffffe          BL       SFlashAppendRecord
;;;1661   
;;;1662       if(FileAgentAddData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCAutoLoadLogGetFileName(), (uint8_t*)eccAutoLoadLogBody, sizeof(ECCAutoLoadLogBody), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
001254  ebfffffe          BL       ECCAutoLoadLogGetFileName
001258  e1a07000          MOV      r7,r0
00125c  e3a00001          MOV      r0,#1
001260  e3a01000          MOV      r1,#0
001264  e58d0008          STR      r0,[sp,#8]
001268  e58d1004          STR      r1,[sp,#4]
00126c  e58d0010          STR      r0,[sp,#0x10]
001270  e3a000cb          MOV      r0,#0xcb
001274  e1a03006          MOV      r3,r6
001278  e1a02007          MOV      r2,r7
00127c  e58d100c          STR      r1,[sp,#0xc]
001280  e28f1088          ADR      r1,|L1.4880|
001284  e58d0000          STR      r0,[sp,#0]
001288  e3a00000          MOV      r0,#0
00128c  ebfffffe          BL       FileAgentAddData
;;;1663       {
;;;1664   
;;;1665       }   
;;;1666       #if(USE_SAM_ENCRYPT)
;;;1667       if(SCEncryptSAMData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCAutoLoadLogGetFileName(), (uint8_t*)eccAutoLoadLogBody, sizeof(ECCAutoLoadLogBody)))
;;;1668       {
;;;1669       }
;;;1670       #endif
;;;1671   #endif
;;;1672   }
001290  e28ddf45          ADD      sp,sp,#0x114
001294  e8bd83f0          POP      {r4-r9,pc}
                  |L1.4760|
                          DCD      eccCmdLockCardPack
                  |L1.4764|
                          DCD      eccCmdLockCardPack+0xc
                  |L1.4768|
                          DCD      eccCmdLockCardPack+0x13
                  |L1.4772|
0012a4  0d0a7e7e          DCB      "\r\n~~~ eccCmdLockCardPack : status 0x%04x,",0
0012a8  7e206563
0012ac  63436d64
0012b0  4c6f636b
0012b4  43617264
0012b8  5061636b
0012bc  203a2073
0012c0  74617475
0012c4  73203078
0012c8  25303478
0012cc  2c00    
0012ce  00                DCB      0
0012cf  00                DCB      0
                  |L1.4816|
0012d0  206c656e          DCB      " len = %d ~~~>\r\n"
0012d4  203d2025
0012d8  64207e7e
0012dc  7e3e0d0a
                  |L1.4832|
0012e0  00                DCB      0
0012e1  00                DCB      0
0012e2  00                DCB      0
0012e3  00                DCB      0
                  |L1.4836|
                          DCD      ||.text||+0xc5c
                  |L1.4840|
0012e8  0d0a00            DCB      "\r\n",0
0012eb  00                DCB      0
                  |L1.4844|
0012ec  0d0a3c7e          DCB      "\r\n<~~~ eccCmdLockCardPack ~~~\r\n",0
0012f0  7e7e2065
0012f4  6363436d
0012f8  644c6f63
0012fc  6b436172
001300  64506163
001304  6b207e7e
001308  7e0d0a00
                  |L1.4876|
00130c  25737300          DCB      "%ss",0
                  |L1.4880|
001310  313a00            DCB      "1:",0
001313  00                DCB      0
                          ENDP

                  ECCLibInit PROC
;;;1676   /*-----------------------------------------*/
;;;1677   void ECCLibInit(void)
001314  e92d4010          PUSH     {r4,lr}
;;;1678   {
;;;1679       sysprintf("ECCLibInit(Command):     sizeof(ECCCmdPPRResetRequestData)            = %d (%d)!!\n", sizeof(ECCCmdPPRResetRequestData), ECC_CMD_PPR_RESET_REQUEST_DATA_LEN);
001318  e3a02040          MOV      r2,#0x40
00131c  e1a01002          MOV      r1,r2
001320  e59f05d8          LDR      r0,|L1.6400|
001324  ebfffffe          BL       sysprintf
;;;1680       sysprintf("                         sizeof(ECCCmdPPRResetResponseData)           = %d (%d)!!\n", sizeof(ECCCmdPPRResetResponseData), ECC_CMD_PPR_RESET_RESPONSE_DATA_LEN);
001328  e3a020fa          MOV      r2,#0xfa
00132c  e1a01002          MOV      r1,r2
001330  e59f05cc          LDR      r0,|L1.6404|
001334  ebfffffe          BL       sysprintf
;;;1681       
;;;1682       sysprintf("                         sizeof(ECCCmdDCAReadRequestData)            = %d (%d)!!\n", sizeof(ECCCmdDCAReadRequestData), ECC_CMD_DCAR_READ_REQUEST_DATA_LEN);
001338  e3a02010          MOV      r2,#0x10
00133c  e1a01002          MOV      r1,r2
001340  e59f05c0          LDR      r0,|L1.6408|
001344  ebfffffe          BL       sysprintf
;;;1683       sysprintf("                         sizeof(ECCCmdDCAReadResponseSuccessData)    = %d (%d)!!\n", sizeof(ECCCmdDCAReadResponseSuccessData), ECC_CMD_DCAR_READ_RESPONSE_SUCCESS_DATA_LEN );
001348  e3a020a0          MOV      r2,#0xa0
00134c  e1a01002          MOV      r1,r2
001350  e59f05b4          LDR      r0,|L1.6412|
001354  ebfffffe          BL       sysprintf
;;;1684       sysprintf("                         sizeof(ECCCmdDCAReadResponseError1Data)     = %d (%d)!!\n", sizeof(ECCCmdDCAReadResponseError1Data), ECC_CMD_DCAR_READ_RESPONSE_ERROR_1_DATA_LEN );
001358  e3a02078          MOV      r2,#0x78
00135c  e1a01002          MOV      r1,r2
001360  e59f05a8          LDR      r0,|L1.6416|
001364  ebfffffe          BL       sysprintf
;;;1685       sysprintf("                         sizeof(ECCCmdDCAReadResponseError2Data)     = %d (%d)!!\n", sizeof(ECCCmdDCAReadResponseError2Data), ECC_CMD_DCAR_READ_RESPONSE_ERROR_2_DATA_LEN );
001368  e3a02028          MOV      r2,#0x28
00136c  e1a01002          MOV      r1,r2
001370  e59f059c          LDR      r0,|L1.6420|
001374  ebfffffe          BL       sysprintf
;;;1686       
;;;1687       sysprintf("                         sizeof(ECCCmdEDCADeductRequestData)         = %d (%d)!!\n", sizeof(ECCCmdEDCADeductRequestData), ECC_CMD_EDCA_DEDUCT_REQUEST_DATA_LEN );
001378  e3a02040          MOV      r2,#0x40
00137c  e1a01002          MOV      r1,r2
001380  e59f0590          LDR      r0,|L1.6424|
001384  ebfffffe          BL       sysprintf
;;;1688       sysprintf("                         sizeof(ECCCmdEDCADeductResponseData)        = %d (%d)!!\n", sizeof(ECCCmdEDCADeductResponseData), ECC_CMD_EDCA_DEDUCT_RESPONSE_DATA_LEN );
001388  e3a0207a          MOV      r2,#0x7a
00138c  e1a01002          MOV      r1,r2
001390  e59f0584          LDR      r0,|L1.6428|
001394  ebfffffe          BL       sysprintf
;;;1689       
;;;1690       sysprintf("                         sizeof(ECCCmdLockCardRequestData)           = %d (%d)!!\n", sizeof(ECCCmdLockCardRequestData), ECC_CMD_LOCK_CARD_REQUEST_DATA_LEN );
001398  e3a0200e          MOV      r2,#0xe
00139c  e1a01002          MOV      r1,r2
0013a0  e59f0578          LDR      r0,|L1.6432|
0013a4  ebfffffe          BL       sysprintf
;;;1691       sysprintf("                         sizeof(ECCCmdLockCardResponseData)          = %d (%d)!!\n", sizeof(ECCCmdLockCardResponseData), ECC_CMD_LOCK_CARD_RESPONSE_DATA_LEN );
0013a8  e3a02028          MOV      r2,#0x28
0013ac  e1a01002          MOV      r1,r2
0013b0  e59f056c          LDR      r0,|L1.6436|
0013b4  ebfffffe          BL       sysprintf
;;;1692       
;;;1693       sysprintf("                         sizeof(ECCCmdPPRSignOnRequestData)           = %d (%d)!!\n", sizeof(ECCCmdPPRSignOnRequestData), ECC_CMD_PPR_SIGN_ON_REQUEST_DATA_LEN );
0013b8  e3a02080          MOV      r2,#0x80
0013bc  e1a01002          MOV      r1,r2
0013c0  e59f0560          LDR      r0,|L1.6440|
0013c4  ebfffffe          BL       sysprintf
;;;1694       sysprintf("                         sizeof(ECCCmdPPRSignOnResponseData)          = %d (%d)!!\n", sizeof(ECCCmdPPRSignOnResponseData), ECC_CMD_PPR_SIGN_ON_RESPONSE_DATA_LEN );
0013c8  e3a0201d          MOV      r2,#0x1d
0013cc  e1a01002          MOV      r1,r2
0013d0  e59f0554          LDR      r0,|L1.6444|
0013d4  ebfffffe          BL       sysprintf
;;;1695       
;;;1696       
;;;1697       
;;;1698       sysprintf("ECCLibInit(Log):         sizeof(ECCLogHeader)                        = %d (%d)!!\n", sizeof(ECCLogHeader), TOTAL_ECC_LOG_HEADER_SIZE);
0013d8  e3a02042          MOV      r2,#0x42
0013dc  e1a01002          MOV      r1,r2
0013e0  e59f0548          LDR      r0,|L1.6448|
0013e4  ebfffffe          BL       sysprintf
;;;1699       sysprintf("                         sizeof(ECCLogTail)                          = %d (%d)!!\n", sizeof(ECCLogTail), TOTAL_ECC_LOG_TAIL_SIZE);
0013e8  e3a02024          MOV      r2,#0x24
0013ec  e1a01002          MOV      r1,r2
0013f0  e59f053c          LDR      r0,|L1.6452|
0013f4  ebfffffe          BL       sysprintf
;;;1700       sysprintf("                         sizeof(ECCDeductLogBody)                    = %d (%d)!!\n", sizeof(ECCDeductLogBody), TOTAL_ECC_DEDUCT_LOG_BODY_SIZE);
0013f8  e3a020d4          MOV      r2,#0xd4
0013fc  e1a01002          MOV      r1,r2
001400  e59f0530          LDR      r0,|L1.6456|
001404  ebfffffe          BL       sysprintf
;;;1701       sysprintf("                         sizeof(ECCReSendLogBody)                    = %d (%d)!!\n", sizeof(ECCReSendLogBody), TOTAL_ECC_RESEND_LOG_BODY_SIZE);
001408  e3a02040          MOV      r2,#0x40
00140c  e1a01002          MOV      r1,r2
001410  e59f0524          LDR      r0,|L1.6460|
001414  ebfffffe          BL       sysprintf
;;;1702       sysprintf("                         sizeof(ECCLockCardLogBody)                  = %d (%d)!!\n", sizeof(ECCLockCardLogBody), TOTAL_ECC_LOCK_CARD_LOG_BODY_SIZE);
001418  e3a02086          MOV      r2,#0x86
00141c  e1a01002          MOV      r1,r2
001420  e59f0518          LDR      r0,|L1.6464|
001424  ebfffffe          BL       sysprintf
;;;1703       sysprintf("                         sizeof(ECCBlkFeedbackLogBody)               = %d (%d)!!\n", sizeof(ECCBlkFeedbackLogBody), TOTAL_ECC_BLK_FEEDBACK_LOG_BODY_SIZE);
001428  e3a02068          MOV      r2,#0x68
00142c  e1a01002          MOV      r1,r2
001430  e59f050c          LDR      r0,|L1.6468|
001434  ebfffffe          BL       sysprintf
;;;1704       sysprintf("                         sizeof(ECCAutoLoadLogBody)                  = %d (%d)!!\n", sizeof(ECCAutoLoadLogBody), TOTAL_ECC_AUTO_LOAD_LOG_BODY_SIZE);
001438  e3a020cb          MOV      r2,#0xcb
00143c  e1a01002          MOV      r1,r2
001440  e59f0500          LDR      r0,|L1.6472|
001444  ebfffffe          BL       sysprintf
;;;1705       
;;;1706       sysprintf("ECCLibInit(Sign On Socket):  sizeof(ECCCmdSignOnRequestSocketData)           = %d (%d)!!\n", sizeof(ECCCmdSignOnRequestSocketData), ECC_CMD_SIGN_ON_REQUEST_SOCKET_LEN);
001448  e59f24fc          LDR      r2,|L1.6476|
00144c  e1a01002          MOV      r1,r2
001450  e59f04f8          LDR      r0,|L1.6480|
001454  ebfffffe          BL       sysprintf
;;;1707       sysprintf("                             sizeof(ECCCmdSignOnResponseSocketData)          = %d (%d)!!\n", sizeof(ECCCmdSignOnResponseSocketData), ECC_CMD_SIGN_ON_RESPONSE_SOCKET_LEN);
001458  e3a020cb          MOV      r2,#0xcb
00145c  e1a01002          MOV      r1,r2
001460  e59f04ec          LDR      r0,|L1.6484|
001464  ebfffffe          BL       sysprintf
;;;1708       sysprintf("                             sizeof(ECCCmdSignOnConfirmRequestSocketData)    = %d (%d)!!\n", sizeof(ECCCmdSignOnConfirmRequestSocketData), ECC_CMD_SIGN_ON_CONFIRM_REQUEST_SOCKET_LEN);
001468  e3a02045          MOV      r2,#0x45
00146c  e1a01002          MOV      r1,r2
001470  e59f04e0          LDR      r0,|L1.6488|
001474  ebfffffe          BL       sysprintf
;;;1709       sysprintf("                             sizeof(ECCCmdSignOnConfirmResponseSocketData)   = %d (%d)!!\n", sizeof(ECCCmdSignOnConfirmResponseSocketData), ECC_CMD_SIGN_ON_CONFIRM_RESPONSE_SOCKET_LEN);
001478  e3a02002          MOV      r2,#2
00147c  e1a01002          MOV      r1,r2
001480  e59f04d4          LDR      r0,|L1.6492|
001484  ebfffffe          BL       sysprintf
;;;1710   
;;;1711   }
001488  e8bd8010          POP      {r4,pc}
;;;1712   
                          ENDP

                  ECCPPRReset PROC
;;;1713   
;;;1714   uint16_t ECCPPRReset(uint16_t* returnInfo, uint16_t* returnCode, uint32_t utcTime, uint32_t epmUTCTime, BOOL SignOnMode)
00148c  e92d41fc          PUSH     {r2-r8,lr}
;;;1715   {
001490  e1a08000          MOV      r8,r0
001494  e1a04001          MOV      r4,r1
001498  e1a05002          MOV      r5,r2
00149c  e1a06003          MOV      r6,r3
0014a0  e59d7020          LDR      r7,[sp,#0x20]
;;;1716   #if(ENABLE_ECC_AUTO_LOAD)
;;;1717       uint32_t authCreditBalance;
;;;1718       uint32_t remainderAddQuota;
;;;1719       uint16_t resultStatus;
;;;1720       *returnInfo =  pprReset(returnCode, &resultStatus, utcTime, epmUTCTime, FALSE);
;;;1721    
;;;1722       sysprintf("ECCPPRReset:  pprReset retun --> *returnInfo = 0x%04X, resultStatus = 0x%04X!!\n", *returnInfo, resultStatus);
;;;1723       if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;1724       {  
;;;1725           switch(resultStatus)
;;;1726           {
;;;1727               case ECC_CMD_RESET_SUCCESS_ID:
;;;1728   reCheck:
;;;1729                   sysprintf("ECCPPRReset:  RUN eccSignOnQuery --> *returnInfo = 0x%04X, resultStatus = 0x%04X!!\n", *returnInfo, resultStatus);
;;;1730                   *returnInfo =  eccSignOnQuery(returnCode, &resultStatus, utcTime);
;;;1731                   if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;1732                   {
;;;1733                       switch(resultStatus)
;;;1734                       {
;;;1735                           case ECC_CMD_SIGN_ON_QUERY_SUCCESS_ID_1:    //0x9000
;;;1736                           case ECC_CMD_SIGN_ON_QUERY_SUCCESS_ID_2:    //0x6304
;;;1737                               break;
;;;1738                           case ECC_CMD_SIGN_ON_QUERY_SUCCESS_ID_3:    //0x6305
;;;1739                               authCreditBalance = uint8ToUint32(eccCmdPPRSignOnQueryResponseData.authCreditBalance, sizeof(eccCmdPPRSignOnQueryResponseData.authCreditBalance));
;;;1740                               remainderAddQuota = uint8ToUint32(eccCmdPPRSignOnQueryResponseData.remainderAddQuota, sizeof(eccCmdPPRSignOnQueryResponseData.remainderAddQuota));
;;;1741                               #if(ENABLE_ECC_LOG_MESSAGE)
;;;1742                               //#if(0)
;;;1743                               {
;;;1744                                   char str[512];
;;;1745                                   sprintf(str, "ECCPPRReset:  authCreditBalance= %d, remainderAddQuota = %d!!\n", authCreditBalance, remainderAddQuota);
;;;1746                                   LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;1747                               }
;;;1748                               #else                                                        
;;;1749                               sysprintf("ECCPPRReset:  authCreditBalance= %d, remainderAddQuota = %d!!\n", authCreditBalance, remainderAddQuota);
;;;1750                               #endif
;;;1751                               if(remainderAddQuota > (authCreditBalance/2))
;;;1752                               //if(remainderAddQuota != authCreditBalance)  //just for test  
;;;1753                               {//額度足夠
;;;1754                                   sysprintf("ECCPPRReset:  quota available!!\n");
;;;1755                                   #if(ENABLE_ECC_AUTO_LOAD)
;;;1756                                   eccRemaiderAmt = TRUE;
;;;1757                                   #endif
;;;1758                               }
;;;1759                               else
;;;1760                               {
;;;1761                                   
;;;1762                                   #if(ENABLE_ECC_AUTO_LOAD)
;;;1763                                   if(SignOnMode)
;;;1764                                   {
;;;1765                                       sysprintf("ECCPPRReset:  need signon quota, go go go... !!\n");
;;;1766                                       *returnInfo =  eccSignOnProcess(returnCode, &resultStatus, utcTime, epmUTCTime);
;;;1767                                       if((*returnInfo == CARD_MESSAGE_RETURN_SUCCESS) && (resultStatus == ECC_CMD_RESET_SUCCESS_ID))
;;;1768                                       {// 取額度授權成功                                        
;;;1769                                           sysprintf("ECCPPRReset:  eccSignOnProcess OK, goto reCheck;... !!\n");
;;;1770                                           DataProcessSetEccNeedSignOnFlag(FALSE);
;;;1771                                           goto reCheck;
;;;1772                                       }
;;;1773                                       else
;;;1774                                       {// 取額度授權失敗
;;;1775                                           sysprintf("ECCPPRReset:  eccSignOnProcess ERROR (*returnInfo = 0x%04x, resultStatus = 0x%04x)... !!\n", *returnInfo, resultStatus);
;;;1776                                           *returnInfo =  pprReset(returnCode, &resultStatus, utcTime, epmUTCTime, FALSE);
;;;1777                                       }
;;;1778                                   }
;;;1779                                   else
;;;1780                                   {
;;;1781                                       //#warning add flag (for dataprocesslib)
;;;1782                                       sysprintf("ECCPPRReset:  need signon quota, but ignore (call DataProcessSetEccNeedSignOnFlag)... !!\n");
;;;1783                                       DataProcessSetEccNeedSignOnFlag(TRUE);
;;;1784                                   }
;;;1785                                   #else
;;;1786                                       sysprintf("ECCPPRReset:  need signon quota, but ignore(not support sign on mode)... !!\n");
;;;1787                                   #endif
;;;1788                               }
;;;1789                               break;               
;;;1790                       }
;;;1791                       
;;;1792                   }
;;;1793                   break;
;;;1794           }
;;;1795          
;;;1796       }
;;;1797       return *returnInfo;
;;;1798   #else
;;;1799       uint16_t resultStatus;
;;;1800       return pprReset(returnCode, &resultStatus, utcTime, epmUTCTime, FALSE);
0014a4  e3a00000          MOV      r0,#0
0014a8  e1a03006          MOV      r3,r6
0014ac  e1a02005          MOV      r2,r5
0014b0  e58d0000          STR      r0,[sp,#0]
0014b4  e28d1004          ADD      r1,sp,#4
0014b8  e1a00004          MOV      r0,r4
0014bc  ebfffffe          BL       pprReset
;;;1801   #endif
;;;1802       //return edcaDeduct(returnCode, resultStatus, 1,  utcTime, epmUTCTime);
;;;1803   }
0014c0  e8bd81fc          POP      {r2-r8,pc}
;;;1804   BOOL ECCLibProcess(uint16_t* returnInfo, uint16_t* returnCode, uint16_t targetDeduct, tsreaderDepositResultCallback callback, uint8_t* cnData, uint32_t utcTime, uint8_t* machineNo)
                          ENDP

                  ECCLibProcess PROC
0014c4  e92d4ff0          PUSH     {r4-r11,lr}
;;;1805   {
0014c8  e24dd044          SUB      sp,sp,#0x44
0014cc  e1a04000          MOV      r4,r0
0014d0  e1a06001          MOV      r6,r1
0014d4  e1a0b002          MOV      r11,r2
0014d8  e1a05003          MOV      r5,r3
0014dc  e59d706c          LDR      r7,[sp,#0x6c]
;;;1806       uint16_t resultStatus;
;;;1807       
;;;1808       //BOOL retval = FALSE;
;;;1809       // for temp 測試時只做一次
;;;1810       BOOL retval = TRUE;
0014e0  e3a00001          MOV      r0,#1
0014e4  e58d003c          STR      r0,[sp,#0x3c]
;;;1811   
;;;1812       char* blkFileName = "";
0014e8  e24f0e21          ADR      r0,|L1.4832|
0014ec  e58d0038          STR      r0,[sp,#0x38]
;;;1813       
;;;1814       //2018.08.14  --> A. 【SEQ_NO_BEF_TXN】交易前序號：扣款兼自動加值，應填自動加值後的序號，卻填自動加值前序號。
;;;1815       //2018.08.14  --> B. 【EV_BEF_TXN】交易前卡片金額：扣款兼自動加值，應填自動加值後的餘額，卻填自動加值前餘額。     
;;;1816       cardAutoloadAvailable = FALSE;
0014f0  e3a00000          MOV      r0,#0
0014f4  e59f1464          LDR      r1,|L1.6496|
0014f8  e5c10000          STRB     r0,[r1,#0]  ; cardAutoloadAvailable
;;;1817       
;;;1818       *returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;
0014fc  e3a00001          MOV      r0,#1
001500  e1c400b0          STRH     r0,[r4,#0]
;;;1819       *returnCode = CARD_MESSAGE_CODE_NO_USE;
001504  e3a000ff          MOV      r0,#0xff
001508  e1c600b0          STRH     r0,[r6,#0]
;;;1820       //*returnInfo = pprReset(returnCode, &resultStatus, utcTime, utcTime);
;;;1821       //if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;1822       {  
;;;1823           *returnInfo = edcaRead(returnCode, &resultStatus, utcTime);
00150c  e1a02007          MOV      r2,r7
001510  e28d1040          ADD      r1,sp,#0x40
001514  e1a00006          MOV      r0,r6
001518  ebfffffe          BL       edcaRead
00151c  e1c400b0          STRH     r0,[r4,#0]
;;;1824           //just for test
;;;1825           //resultStatus = ECC_CMD_READ_ERROR_1_ID_1;
;;;1826           if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
001520  e1d400b0          LDRH     r0,[r4,#0]
001524  e3500002          CMP      r0,#2
001528  1a00026f          BNE      |L1.7916|
;;;1827           {  
;;;1828               switch(resultStatus)
00152c  e1dd04b0          LDRH     r0,[sp,#0x40]
001530  e59f242c          LDR      r2,|L1.6500|
001534  e0401002          SUB      r1,r0,r2
001538  e1500002          CMP      r0,r2
00153c  0a00001a          BEQ      |L1.5548|
001540  ca000005          BGT      |L1.5468|
001544  e3500000          CMP      r0,#0
001548  0a000009          BEQ      |L1.5492|
00154c  e2400c61          SUB      r0,r0,#0x6100
001550  e2500003          SUBS     r0,r0,#3
001554  1a000255          BNE      |L1.7856|
001558  ea00002b          B        |L1.5644|
                  |L1.5468|
00155c  e351000a          CMP      r1,#0xa
001560  0a000041          BEQ      |L1.5740|
001564  e2410c2b          SUB      r0,r1,#0x2b00
001568  e25000f2          SUBS     r0,r0,#0xf2
00156c  1a00024f          BNE      |L1.7856|
001570  ea00004b          B        |L1.5796|
                  |L1.5492|
;;;1829               {
;;;1830                   case 0://???
001574  e1a00000          MOV      r0,r0
;;;1831                       *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
001578  e3a00034          MOV      r0,#0x34
00157c  e1c400b0          STRH     r0,[r4,#0]
;;;1832                       *returnCode = resultStatus;
001580  e1dd04b0          LDRH     r0,[sp,#0x40]
001584  e1c600b0          STRH     r0,[r6,#0]
;;;1833                       if(callback != NULL)
001588  e3550000          CMP      r5,#0
00158c  0a000003          BEQ      |L1.5536|
;;;1834                       {
;;;1835                           callback(FALSE, *returnInfo, *returnCode);
001590  e1d620b0          LDRH     r2,[r6,#0]
001594  e1d410b0          LDRH     r1,[r4,#0]
001598  e3a00000          MOV      r0,#0
00159c  e12fff35          BLX      r5
                  |L1.5536|
;;;1836                       }
;;;1837                       retval = TRUE;
0015a0  e3a00001          MOV      r0,#1
0015a4  e58d003c          STR      r0,[sp,#0x3c]
;;;1838                       break;
0015a8  ea00024e          B        |L1.7912|
                  |L1.5548|
;;;1839   
;;;1840                   //0x640E(餘額異常) or 0x6418(通路限制)
;;;1841                   case ECC_CMD_READ_ERROR_1_ID_1:// 0x640E(餘額異常) 
0015ac  e1a00000          MOV      r0,r0
;;;1842                       *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
0015b0  e3a00034          MOV      r0,#0x34
0015b4  e1c400b0          STRH     r0,[r4,#0]
;;;1843                       *returnCode = resultStatus;
0015b8  e1dd04b0          LDRH     r0,[sp,#0x40]
0015bc  e1c600b0          STRH     r0,[r6,#0]
;;;1844                       //寫入鎖卡檔
;;;1845                       //#warning need check this, there is no "blkFileName" & eccCmdLockCardResponseData in this situation
;;;1846                       //eccSaveLockCardLog(resultStatus, NEW_SP_ID, SVCE_LOC_ID, NULL, utcTime, (uint8_t*)&eccCmdDCAReadResponseError1Data, NULL);
;;;1847                       eccSaveLockCardLog(resultStatus, NEW_SP_ID, SVCE_LOC_ID, blkFileName, utcTime, (uint8_t*)&eccCmdDCAReadResponseError1Data, &eccCmdLockCardResponseData);
0015c0  e51f0e5c          LDR      r0,|L1.1900|
0015c4  e59f139c          LDR      r1,|L1.6504|
0015c8  e58d0008          STR      r0,[sp,#8]
0015cc  e58d1004          STR      r1,[sp,#4]
0015d0  e58d7000          STR      r7,[sp,#0]
0015d4  e3a02032          MOV      r2,#0x32
0015d8  e3a01082          MOV      r1,#0x82
0015dc  e59d3038          LDR      r3,[sp,#0x38]
0015e0  e1dd04b0          LDRH     r0,[sp,#0x40]
0015e4  ebfffffe          BL       eccSaveLockCardLog
;;;1848                       if(callback != NULL)
0015e8  e3550000          CMP      r5,#0
0015ec  0a000003          BEQ      |L1.5632|
;;;1849                       {
;;;1850                           callback(FALSE, *returnInfo, *returnCode);
0015f0  e1d620b0          LDRH     r2,[r6,#0]
0015f4  e1d410b0          LDRH     r1,[r4,#0]
0015f8  e3a00000          MOV      r0,#0
0015fc  e12fff35          BLX      r5
                  |L1.5632|
;;;1851                       }
;;;1852                       retval = TRUE;
001600  e3a00001          MOV      r0,#1
001604  e58d003c          STR      r0,[sp,#0x3c]
;;;1853                       break;
001608  ea000236          B        |L1.7912|
                  |L1.5644|
;;;1854   
;;;1855                   case ECC_CMD_READ_ERROR_2_ID_1://0x6103(CPD檢查異常)
00160c  e1a00000          MOV      r0,r0
;;;1856                       *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
001610  e3a00034          MOV      r0,#0x34
001614  e1c400b0          STRH     r0,[r4,#0]
;;;1857                       *returnCode = resultStatus;
001618  e1dd04b0          LDRH     r0,[sp,#0x40]
00161c  e1c600b0          STRH     r0,[r6,#0]
;;;1858                       //寫入鎖卡檔
;;;1859                       //#warning need check this, there is no "blkFileName" & eccCmdLockCardResponseData in this situation
;;;1860                       //eccSaveLockCardLog(resultStatus, NEW_SP_ID, SVCE_LOC_ID, NULL, utcTime, (uint8_t*)&eccCmdDCAReadResponseError2Data, NULL);
;;;1861                       eccSaveLockCardLog(resultStatus, NEW_SP_ID, SVCE_LOC_ID, blkFileName, utcTime, (uint8_t*)&eccCmdDCAReadResponseError2Data, &eccCmdLockCardResponseData);
001620  e51f0ebc          LDR      r0,|L1.1900|
001624  e59f1340          LDR      r1,|L1.6508|
001628  e58d0008          STR      r0,[sp,#8]
00162c  e58d1004          STR      r1,[sp,#4]
001630  e58d7000          STR      r7,[sp,#0]
001634  e3a02032          MOV      r2,#0x32
001638  e3a01082          MOV      r1,#0x82
00163c  e59d3038          LDR      r3,[sp,#0x38]
001640  e1dd04b0          LDRH     r0,[sp,#0x40]
001644  ebfffffe          BL       eccSaveLockCardLog
;;;1862                       if(callback != NULL)
001648  e3550000          CMP      r5,#0
00164c  0a000003          BEQ      |L1.5728|
;;;1863                       {
;;;1864                           callback(FALSE, *returnInfo, *returnCode);
001650  e1d620b0          LDRH     r2,[r6,#0]
001654  e1d410b0          LDRH     r1,[r4,#0]
001658  e3a00000          MOV      r0,#0
00165c  e12fff35          BLX      r5
                  |L1.5728|
;;;1865                       }
;;;1866                       retval = TRUE;
001660  e3a00001          MOV      r0,#1
001664  e58d003c          STR      r0,[sp,#0x3c]
;;;1867                       break;
001668  ea00021e          B        |L1.7912|
                  |L1.5740|
;;;1868   
;;;1869                   //0x6418(通路限制)
;;;1870                   case ECC_CMD_READ_ERROR_1_ID_2://0x6418(通路限制)
00166c  e1a00000          MOV      r0,r0
;;;1871                       *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
001670  e3a00034          MOV      r0,#0x34
001674  e1c400b0          STRH     r0,[r4,#0]
;;;1872                       *returnCode = resultStatus;
001678  e1dd04b0          LDRH     r0,[sp,#0x40]
00167c  e1c600b0          STRH     r0,[r6,#0]
;;;1873                       //#warning need check here
;;;1874                       //??
;;;1875                       if(callback != NULL)
001680  e3550000          CMP      r5,#0
001684  0a000003          BEQ      |L1.5784|
;;;1876                       {
;;;1877                           callback(FALSE, *returnInfo, *returnCode);
001688  e1d620b0          LDRH     r2,[r6,#0]
00168c  e1d410b0          LDRH     r1,[r4,#0]
001690  e3a00000          MOV      r0,#0
001694  e12fff35          BLX      r5
                  |L1.5784|
;;;1878                       }
;;;1879                       retval = TRUE;
001698  e3a00001          MOV      r0,#1
00169c  e58d003c          STR      r0,[sp,#0x3c]
;;;1880                       break;
0016a0  ea000210          B        |L1.7912|
                  |L1.5796|
;;;1881   
;;;1882                   case ECC_CMD_READ_SUCCESS_ID:
0016a4  e1a00000          MOV      r0,r0
;;;1883                   {
;;;1884                       /*
;;;1885                       0x00, 
;;;1886                       0x19, --> (1) purseUsageControl 
;;;1887                       0xf4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;1888                       0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x53, 0x35, 0x5e, 
;;;1889                       0xbf, 0x12, 0x00, --> (19) CardMoney
;;;1890                       0xc3, 0x05, 0x00, 
;;;1891                       0x08, --> (25) cardType
;;;1892                       0x00, 0x80, 0xbf, 0x34, 
;;;1893                       0x5e, 0x01, 
;;;1894                       0xf0, 0xde, 0x7a, 0x57, --> (32) cardID  0x00, 0x00, 0x00, 
;;;1895                       0x04, --> (39) cardIDBytes
;;;1896                       0xc1, 0x30, 0x7c, 0x00, 0x8d, 0x10, 0x03, 0x7c, 0x00, 0x00, 
;;;1897                       0x7c, 0x7c, 0x00, 0x00, 0x32, 0x32, 0x00, 0x02, 0x32, 0x00, 
;;;1898                       0x00, 0x00, 0xb4, 0x00, 0x00, 0x4b, 0x61, 0x80, 0x59, 0x30, 
;;;1899                       0x88, 0x13, 0x00, 0x88, 0x13, 0x00, 0x62, 0x00, 0x00, 0x01, 
;;;1900                       0x00, 0x4c, 0x3d, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;1901                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
;;;1902                       0x23, 0x4c, 0xc2, 0x00, 0x00, 0x8a, 0xc3, 0x32, 0x5a, 0x02, 
;;;1903                       0x00, 0x00, 0x00, 0xc0, 0x12, 0x00, 0x25, 0x25, 0x02, 0x00, 
;;;1904                       0x6c, 0x30, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;1905                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;1906                       0x00, 0x00, 0xfc, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;1907                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;1908                        */
;;;1909                       uint8_t cardIDBytes;
;;;1910                       uint8_t CardNo[7];
;;;1911                       char    CardNoStr[7*2+1];
;;;1912                       
;;;1913                       //2018.08.14 處理負值
;;;1914                       //uint32_t CardMoney;
;;;1915                       int32_t CardMoney;
;;;1916                       
;;;1917                       uint8_t purseUsageControl;
;;;1918                       uint8_t cardType;
;;;1919                       #if(ENABLE_ECC_AUTO_LOAD)
;;;1920                       BOOL condition1 = FALSE;
;;;1921                       BOOL condition2 = FALSE;
;;;1922                       #endif
;;;1923                       //prData = (uint8_t*)&eccCmdDCAReadResponseSuccessData;
;;;1924                       //prDataLen = sizeof(eccCmdDCAReadResponseSuccessData);
;;;1925                       memset(CardNo, 0x00, sizeof(CardNo));
0016a8  e3a00000          MOV      r0,#0
0016ac  e58d002c          STR      r0,[sp,#0x2c]
0016b0  e58d0030          STR      r0,[sp,#0x30]
;;;1926                       if(eccCmdDCAReadResponseSuccessData.CardPhysicalIDLength == 0x04)
0016b4  e59f02b4          LDR      r0,|L1.6512|
0016b8  e5d00027          LDRB     r0,[r0,#0x27]  ; eccCmdDCAReadResponseSuccessData
0016bc  e3500004          CMP      r0,#4
0016c0  1a00000e          BNE      |L1.5888|
;;;1927                       {                        
;;;1928                           cardIDBytes = 4;
0016c4  e3a00004          MOV      r0,#4
0016c8  e58d0034          STR      r0,[sp,#0x34]
;;;1929                           sprintf(CardNoStr, "%02X%02X%02X%02X", eccCmdDCAReadResponseSuccessData.CardPhysicalID[0],
0016cc  e59f029c          LDR      r0,|L1.6512|
0016d0  e5d00023          LDRB     r0,[r0,#0x23]
0016d4  e59f1294          LDR      r1,|L1.6512|
0016d8  e5d11022          LDRB     r1,[r1,#0x22]
0016dc  e58d0004          STR      r0,[sp,#4]
0016e0  e59f0288          LDR      r0,|L1.6512|
0016e4  e58d1000          STR      r1,[sp,#0]
0016e8  e5d03021          LDRB     r3,[r0,#0x21]
0016ec  e5d02020          LDRB     r2,[r0,#0x20]  ; eccCmdDCAReadResponseSuccessData
0016f0  e28f1f9f          ADR      r1,|L1.6516|
0016f4  e28d001c          ADD      r0,sp,#0x1c
0016f8  ebfffffe          BL       __2sprintf
0016fc  ea000016          B        |L1.5980|
                  |L1.5888|
;;;1930                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[1],
;;;1931                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[2], 
;;;1932                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[3]);
;;;1933                       }
;;;1934                       else
;;;1935                       {
;;;1936                           cardIDBytes = 7;
001700  e3a00007          MOV      r0,#7
001704  e58d0034          STR      r0,[sp,#0x34]
;;;1937                           sprintf(CardNoStr, "%02X%02X%02X%02X%02X%02X%02X", eccCmdDCAReadResponseSuccessData.CardPhysicalID[0],
001708  e59f0260          LDR      r0,|L1.6512|
00170c  e5d00026          LDRB     r0,[r0,#0x26]
001710  e59f1258          LDR      r1,|L1.6512|
001714  e5d11025          LDRB     r1,[r1,#0x25]
001718  e59f2250          LDR      r2,|L1.6512|
00171c  e5d22024          LDRB     r2,[r2,#0x24]
001720  e59f3248          LDR      r3,|L1.6512|
001724  e5d33023          LDRB     r3,[r3,#0x23]
001728  e58d0010          STR      r0,[sp,#0x10]
00172c  e59f023c          LDR      r0,|L1.6512|
001730  e58d100c          STR      r1,[sp,#0xc]
001734  e58d2008          STR      r2,[sp,#8]
001738  e58d3004          STR      r3,[sp,#4]
00173c  e5d00022          LDRB     r0,[r0,#0x22]
001740  e58d0000          STR      r0,[sp,#0]
001744  e59f0224          LDR      r0,|L1.6512|
001748  e5d03021          LDRB     r3,[r0,#0x21]
00174c  e5d02020          LDRB     r2,[r0,#0x20]  ; eccCmdDCAReadResponseSuccessData
001750  e28f1e23          ADR      r1,|L1.6536|
001754  e28d001c          ADD      r0,sp,#0x1c
001758  ebfffffe          BL       __2sprintf
                  |L1.5980|
;;;1938                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[1],
;;;1939                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[2], 
;;;1940                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[3],
;;;1941                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[4],
;;;1942                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[5], 
;;;1943                                                       eccCmdDCAReadResponseSuccessData.CardPhysicalID[6]);
;;;1944                       }
;;;1945                       memcpy(CardNo, eccCmdDCAReadResponseSuccessData.CardPhysicalID, cardIDBytes);
00175c  e59f1244          LDR      r1,|L1.6568|
001760  e59d2034          LDR      r2,[sp,#0x34]
001764  e28d002c          ADD      r0,sp,#0x2c
001768  ebfffffe          BL       __aeabi_memcpy
;;;1946                       
;;;1947                       //### edcaRead: cardIDBytes = 4 (F0DE7A57) [0xF0, 0xDE, 0x7A, 0x57, 0x00, 0x00, 0x00]
;;;1948                       sysprintf(" ### ECCLibProcess [edcaRead]: cardIDBytes = %d (%s) [0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X]\n", cardIDBytes, CardNoStr, CardNo[0], CardNo[1], CardNo[2], CardNo[3], CardNo[4], CardNo[5], CardNo[6]);
00176c  e5dd1032          LDRB     r1,[sp,#0x32]
001770  e5dd0031          LDRB     r0,[sp,#0x31]
001774  e5dd2030          LDRB     r2,[sp,#0x30]
001778  e5dd302f          LDRB     r3,[sp,#0x2f]
00177c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
001780  e58d200c          STR      r2,[sp,#0xc]
001784  e58d3008          STR      r3,[sp,#8]
001788  e5dd002e          LDRB     r0,[sp,#0x2e]
00178c  e5dd102d          LDRB     r1,[sp,#0x2d]
001790  e58d0004          STR      r0,[sp,#4]
001794  e58d1000          STR      r1,[sp,#0]
001798  e5dd302c          LDRB     r3,[sp,#0x2c]
00179c  e28d201c          ADD      r2,sp,#0x1c
0017a0  e59f0204          LDR      r0,|L1.6572|
0017a4  e59d1034          LDR      r1,[sp,#0x34]
0017a8  ebfffffe          BL       sysprintf
;;;1949    
;;;1950                       //CardMoney = uint8ToInt32(eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN, sizeof(eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN));
;;;1951                       CardMoney = uint8ToUint32(eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN, sizeof(eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN));
0017ac  e3a01003          MOV      r1,#3
0017b0  e59f01f8          LDR      r0,|L1.6576|
0017b4  ebfffffe          BL       uint8ToUint32
0017b8  e1a08000          MOV      r8,r0
;;;1952                       sysprintf(" ### ECCLibProcess [edcaRead]: CardMoney = %d [0x%02X, 0x%02X, 0x%02X]\n", CardMoney, 
0017bc  e59f01ac          LDR      r0,|L1.6512|
0017c0  e5d00015          LDRB     r0,[r0,#0x15]
0017c4  e58d0000          STR      r0,[sp,#0]
0017c8  e59f01a0          LDR      r0,|L1.6512|
0017cc  e5d03014          LDRB     r3,[r0,#0x14]
0017d0  e5d02013          LDRB     r2,[r0,#0x13]  ; eccCmdDCAReadResponseSuccessData
0017d4  e1a01008          MOV      r1,r8
0017d8  e59f01d4          LDR      r0,|L1.6580|
0017dc  ebfffffe          BL       sysprintf
;;;1953                                                                   eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN[0], 
;;;1954                                                                   eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN[1], 
;;;1955                                                                   eccCmdDCAReadResponseSuccessData.PurseBalanceBeforeTXN[2]);                    
;;;1956   
;;;1957                       #if(ENABLE_ECC_LOG_MESSAGE)                    
;;;1958                       {
;;;1959                       char str[128];
;;;1960                       sprintf(str, " ### ECCLibProcess [edcaRead]: CardMoney = %d  ###\r\n", CardMoney);
;;;1961                       LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;1962                       }
;;;1963                       #endif
;;;1964                           
;;;1965                       //2018.08.14  --> (5) 負值票卡應拒絕交易，畫面無法顯示，設備 Timeout。
;;;1966                       if(CardMoney < 0)
0017e0  e3580000          CMP      r8,#0
0017e4  aa00000c          BGE      |L1.6172|
;;;1967                       {
;;;1968                           sysprintf(" ###  ECCLibProcess (CardMoney < 0), Break... !!!\n"); 
0017e8  e28f0f72          ADR      r0,|L1.6584|
0017ec  ebfffffe          BL       sysprintf
;;;1969                           *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_INSUFFICIENT_MONEY_ERROR;
0017f0  e3a00035          MOV      r0,#0x35
0017f4  e1c400b0          STRH     r0,[r4,#0]
;;;1970                           if(callback != NULL)
0017f8  e3550000          CMP      r5,#0
0017fc  0a000003          BEQ      |L1.6160|
;;;1971                           {
;;;1972                               callback(FALSE, *returnInfo, *returnCode);
001800  e1d620b0          LDRH     r2,[r6,#0]
001804  e1d410b0          LDRH     r1,[r4,#0]
001808  e3a00000          MOV      r0,#0
00180c  e12fff35          BLX      r5
                  |L1.6160|
;;;1973                           }
;;;1974                           retval = TRUE;
001810  e3a00001          MOV      r0,#1
001814  e58d003c          STR      r0,[sp,#0x3c]
;;;1975                           break;
001818  ea0001b2          B        |L1.7912|
                  |L1.6172|
;;;1976                       }
;;;1977                       
;;;1978   #if(ENABLE_ECC_LOCK_CARD)
;;;1979                       //if (TSCC_IS_BlackCard_2G(tempBlackCard))
;;;1980                       if(ECCBLKSearchTargetIDByArray(CardNo, cardIDBytes, &blkFileName) != -1)
;;;1981                       {
;;;1982                           *returnInfo = eccLockCard(returnCode, &resultStatus, eccCmdDCAReadResponseSuccessData.CardPhysicalID, utcTime);
;;;1983                           sysprintf(" ### ECCLibProcess [eccLockCard] [%s]: *returnInfo = 0x%02X, resultStatus = 0x%04X\n", blkFileName, *returnInfo, resultStatus);
;;;1984                           if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;1985                           {  
;;;1986                               switch(resultStatus)
;;;1987                               {
;;;1988                                   case ECC_CMD_LOCK_CARD_SUCCESS_ID:
;;;1989                                       eccSaveLockCardLog(resultStatus, NEW_SP_ID, SVCE_LOC_ID, blkFileName, utcTime, (uint8_t*)&eccCmdDCAReadResponseSuccessData, &eccCmdLockCardResponseData);
;;;1990                                       *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_FAILURE_ERROR; ////卡片失效   
;;;1991                                       if(callback != NULL)
;;;1992                                       {
;;;1993                                           callback(FALSE, *returnInfo, *returnCode);
;;;1994                                       }
;;;1995                                       retval = TRUE;
;;;1996                                       return TRUE;
;;;1997                                       //break;
;;;1998                               }
;;;1999                           }
;;;2000                           else
;;;2001                           {
;;;2002                               //#warning NEED CHECK HERE
;;;2003                               *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_FAILURE_ERROR; ////卡片失效   
;;;2004                               if(callback != NULL)
;;;2005                               {
;;;2006                                   callback(FALSE, *returnInfo, *returnCode);
;;;2007                               }
;;;2008                               retval = TRUE;
;;;2009                               return TRUE;
;;;2010                           }
;;;2011                       }                    
;;;2012                       //retval = TRUE;
;;;2013                       //return TRUE;
;;;2014                                                                  
;;;2015   #endif
;;;2016                       
;;;2017                       purseUsageControl = eccCmdDCAReadResponseSuccessData.PurseUsageControl;
00181c  e59f014c          LDR      r0,|L1.6512|
001820  e5d09001          LDRB     r9,[r0,#1]  ; eccCmdDCAReadResponseSuccessData
;;;2018                       cardType = eccCmdDCAReadResponseSuccessData.CardType;
001824  e5d0a019          LDRB     r10,[r0,#0x19]  ; eccCmdDCAReadResponseSuccessData
;;;2019                       sysprintf(" ### ECCLibProcess [edcaRead]: purseUsageControl = 0x%02X, cardType = 0x%02X\n", purseUsageControl, cardType);
001828  e1a0200a          MOV      r2,r10
00182c  e1a01009          MOV      r1,r9
001830  e59f01b4          LDR      r0,|L1.6636|
001834  ebfffffe          BL       sysprintf
;;;2020                       //0x19  1 1001
;;;2021                       //bit0：是否 Activated；
;;;2022                       if(purseUsageControl & (0x01<<0)) 
001838  e3190001          TST      r9,#1
00183c  0a000002          BEQ      |L1.6220|
;;;2023                       {//票卡不適用
;;;2024                            sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit0): Activated\n");
001840  e59f01a8          LDR      r0,|L1.6640|
001844  ebfffffe          BL       sysprintf
001848  ea00000c          B        |L1.6272|
                  |L1.6220|
;;;2025                       }
;;;2026                       else
;;;2027                       {
;;;2028                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit0): not Activated CANT_USE_ERROR\n"); 
00184c  e59f01a0          LDR      r0,|L1.6644|
001850  ebfffffe          BL       sysprintf
;;;2029                           *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_CANT_USE_ERROR;
001854  e3a00032          MOV      r0,#0x32
001858  e1c400b0          STRH     r0,[r4,#0]
;;;2030                           if(callback != NULL)
00185c  e3550000          CMP      r5,#0
001860  0a000003          BEQ      |L1.6260|
;;;2031                           {                            
;;;2032                               callback(FALSE, *returnInfo, *returnCode);
001864  e1d620b0          LDRH     r2,[r6,#0]
001868  e1d410b0          LDRH     r1,[r4,#0]
00186c  e3a00000          MOV      r0,#0
001870  e12fff35          BLX      r5
                  |L1.6260|
;;;2033                           }
;;;2034                           retval = TRUE;
001874  e3a00001          MOV      r0,#1
001878  e58d003c          STR      r0,[sp,#0x3c]
;;;2035                           break;
00187c  ea000199          B        |L1.7912|
                  |L1.6272|
;;;2036                       }
;;;2037   
;;;2038                       //bit1：是否 Lock
;;;2039                       if(purseUsageControl & (0x01<<1)) 
001880  e3190002          TST      r9,#2
001884  0a00000c          BEQ      |L1.6332|
;;;2040                       {//票卡失效
;;;2041                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit1): Locked FAILURE_ERROR\n");
001888  e59f0168          LDR      r0,|L1.6648|
00188c  ebfffffe          BL       sysprintf
;;;2042                           *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_FAILURE_ERROR;
001890  e3a00033          MOV      r0,#0x33
001894  e1c400b0          STRH     r0,[r4,#0]
;;;2043                           if(callback != NULL)
001898  e3550000          CMP      r5,#0
00189c  0a000003          BEQ      |L1.6320|
;;;2044                           {
;;;2045                               callback(FALSE, *returnInfo, *returnCode);
0018a0  e1d620b0          LDRH     r2,[r6,#0]
0018a4  e1d410b0          LDRH     r1,[r4,#0]
0018a8  e3a00000          MOV      r0,#0
0018ac  e12fff35          BLX      r5
                  |L1.6320|
;;;2046                           }
;;;2047                           retval = TRUE;
0018b0  e3a00001          MOV      r0,#1
0018b4  e58d003c          STR      r0,[sp,#0x3c]
;;;2048                           break;
0018b8  ea00018a          B        |L1.7912|
                  |L1.6332|
;;;2049                       }
;;;2050                       else
;;;2051                       {
;;;2052                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit1): not Lock\n");
0018bc  e59f0138          LDR      r0,|L1.6652|
0018c0  ebfffffe          BL       sysprintf
;;;2053                       }
;;;2054   
;;;2055                       //bit2：是否 Refunded(退卡)；
;;;2056                       if(purseUsageControl & (0x01<<2)) 
0018c4  e3190004          TST      r9,#4
0018c8  0a00004d          BEQ      |L1.6660|
;;;2057                       {//票卡不適用
;;;2058                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit2): Refunded CANT_USE_ERROR\n"); 
0018cc  e59f012c          LDR      r0,|L1.6656|
0018d0  ebfffffe          BL       sysprintf
;;;2059                           *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_CANT_USE_ERROR;
0018d4  e3a00032          MOV      r0,#0x32
0018d8  e1c400b0          STRH     r0,[r4,#0]
;;;2060                           if(callback != NULL)
0018dc  e3550000          CMP      r5,#0
0018e0  0a000003          BEQ      |L1.6388|
;;;2061                           {
;;;2062                               callback(FALSE, *returnInfo, *returnCode);
0018e4  e1d620b0          LDRH     r2,[r6,#0]
0018e8  e1d410b0          LDRH     r1,[r4,#0]
0018ec  e3a00000          MOV      r0,#0
0018f0  e12fff35          BLX      r5
                  |L1.6388|
;;;2063                           }
;;;2064                           retval = TRUE;
0018f4  e3a00001          MOV      r0,#1
0018f8  e58d003c          STR      r0,[sp,#0x3c]
;;;2065                           break;
0018fc  ea000179          B        |L1.7912|
                  |L1.6400|
                          DCD      ||.constdata||+0x35c
                  |L1.6404|
                          DCD      ||.constdata||+0x3b0
                  |L1.6408|
                          DCD      ||.constdata||+0x404
                  |L1.6412|
                          DCD      ||.constdata||+0x458
                  |L1.6416|
                          DCD      ||.constdata||+0x4ac
                  |L1.6420|
                          DCD      ||.constdata||+0x500
                  |L1.6424|
                          DCD      ||.constdata||+0x554
                  |L1.6428|
                          DCD      ||.constdata||+0x5a8
                  |L1.6432|
                          DCD      ||.constdata||+0x5fc
                  |L1.6436|
                          DCD      ||.constdata||+0x650
                  |L1.6440|
                          DCD      ||.constdata||+0x6a4
                  |L1.6444|
                          DCD      ||.constdata||+0x6f8
                  |L1.6448|
                          DCD      ||.constdata||+0x74c
                  |L1.6452|
                          DCD      ||.constdata||+0x7a0
                  |L1.6456|
                          DCD      ||.constdata||+0x7f4
                  |L1.6460|
                          DCD      ||.constdata||+0x848
                  |L1.6464|
                          DCD      ||.constdata||+0x89c
                  |L1.6468|
                          DCD      ||.constdata||+0x8f0
                  |L1.6472|
                          DCD      ||.constdata||+0x944
                  |L1.6476|
                          DCD      0x0000016a
                  |L1.6480|
                          DCD      ||.constdata||+0x998
                  |L1.6484|
                          DCD      ||.constdata||+0x9f4
                  |L1.6488|
                          DCD      ||.constdata||+0xa50
                  |L1.6492|
                          DCD      ||.constdata||+0xaac
                  |L1.6496|
                          DCD      cardAutoloadAvailable
                  |L1.6500|
                          DCD      0x0000640e
                  |L1.6504|
                          DCD      eccCmdDCAReadResponseError1Data
                  |L1.6508|
                          DCD      eccCmdDCAReadResponseError2Data
                  |L1.6512|
                          DCD      eccCmdDCAReadResponseSuccessData
                  |L1.6516|
001974  25303258          DCB      "%02X%02X%02X%02X",0
001978  25303258
00197c  25303258
001980  25303258
001984  00      
001985  00                DCB      0
001986  00                DCB      0
001987  00                DCB      0
                  |L1.6536|
001988  25303258          DCB      "%02X%02X%02X%02X%02X%02X%02X",0
00198c  25303258
001990  25303258
001994  25303258
001998  25303258
00199c  25303258
0019a0  25303258
0019a4  00      
0019a5  00                DCB      0
0019a6  00                DCB      0
0019a7  00                DCB      0
                  |L1.6568|
                          DCD      eccCmdDCAReadResponseSuccessData+0x20
                  |L1.6572|
                          DCD      ||.constdata||+0xb08
                  |L1.6576|
                          DCD      eccCmdDCAReadResponseSuccessData+0x13
                  |L1.6580|
                          DCD      ||.constdata||+0xb78
                  |L1.6584|
0019b8  20232323          DCB      " ###  ECCLibProcess (CardMoney < 0), Break... !!!\n",0
0019bc  20204543
0019c0  434c6962
0019c4  50726f63
0019c8  65737320
0019cc  28436172
0019d0  644d6f6e
0019d4  6579203c
0019d8  2030292c
0019dc  20427265
0019e0  616b2e2e
0019e4  2e202121
0019e8  210a00  
0019eb  00                DCB      0
                  |L1.6636|
                          DCD      ||.constdata||+0xbc0
                  |L1.6640|
                          DCD      ||.constdata||+0xc10
                  |L1.6644|
                          DCD      ||.constdata||+0xc58
                  |L1.6648|
                          DCD      ||.constdata||+0xcb0
                  |L1.6652|
                          DCD      ||.constdata||+0xd00
                  |L1.6656|
                          DCD      ||.constdata||+0xd44
                  |L1.6660|
;;;2066                       }
;;;2067                       else
;;;2068                       {
;;;2069                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit2): not Refunded\n");
001a04  e59f0158          LDR      r0,|L1.7012|
001a08  ebfffffe          BL       sysprintf
;;;2070                       }
;;;2071                       
;;;2072                       //bit3：是否允許 Autoload；
;;;2073                       if(purseUsageControl & (0x01<<3)) 
001a0c  e3190008          TST      r9,#8
001a10  0a000002          BEQ      |L1.6688|
;;;2074                       {
;;;2075                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit3): Autoload\n");                        
001a14  e59f014c          LDR      r0,|L1.7016|
001a18  ebfffffe          BL       sysprintf
001a1c  ea000001          B        |L1.6696|
                  |L1.6688|
;;;2076                       }
;;;2077                       else
;;;2078                       {
;;;2079                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit3): can`t Autoload\n");
001a20  e59f0144          LDR      r0,|L1.7020|
001a24  ebfffffe          BL       sysprintf
                  |L1.6696|
;;;2080                       }
;;;2081   
;;;2082                       //bit4：是否允許 Credit；
;;;2083                       if(purseUsageControl & (0x01<<4)) 
001a28  e3190010          TST      r9,#0x10
001a2c  0a000002          BEQ      |L1.6716|
;;;2084                       {
;;;2085                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit4): Credit\n");
001a30  e59f0138          LDR      r0,|L1.7024|
001a34  ebfffffe          BL       sysprintf
001a38  ea00000c          B        |L1.6768|
                  |L1.6716|
;;;2086                       }
;;;2087                       else
;;;2088                       {//票卡不適用
;;;2089                           sysprintf(" ### ECCLibProcess [edcaRead] (purseUsageControl : bit4): not Credit CANT_USE_ERROR\n");  
001a3c  e59f0130          LDR      r0,|L1.7028|
001a40  ebfffffe          BL       sysprintf
;;;2090                           *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_CANT_USE_ERROR;
001a44  e3a00032          MOV      r0,#0x32
001a48  e1c400b0          STRH     r0,[r4,#0]
;;;2091                           if(callback != NULL)
001a4c  e3550000          CMP      r5,#0
001a50  0a000003          BEQ      |L1.6756|
;;;2092                           {
;;;2093                               callback(FALSE, *returnInfo, *returnCode);
001a54  e1d620b0          LDRH     r2,[r6,#0]
001a58  e1d410b0          LDRH     r1,[r4,#0]
001a5c  e3a00000          MOV      r0,#0
001a60  e12fff35          BLX      r5
                  |L1.6756|
;;;2094                           }
;;;2095                           retval = TRUE;
001a64  e3a00001          MOV      r0,#1
001a68  e58d003c          STR      r0,[sp,#0x3c]
;;;2096                           break;
001a6c  ea00011d          B        |L1.7912|
                  |L1.6768|
;;;2097                       }
;;;2098                       //bit5~bit7：保留
;;;2099                       
;;;2100                       if (cardType == 0x09 || cardType == 0x0B || cardType == 0x0C)
001a70  e35a0009          CMP      r10,#9
001a74  0a000003          BEQ      |L1.6792|
001a78  e35a000b          CMP      r10,#0xb
001a7c  0a000001          BEQ      |L1.6792|
001a80  e35a000c          CMP      r10,#0xc
001a84  1a00000c          BNE      |L1.6844|
                  |L1.6792|
;;;2101                       {// 卡別檢查要不為 09, 0B, 0C
;;;2102                           sysprintf(" ### ECCLibProcess [edcaRead] (cardType : 0x%02x):  CANT_USE_ERROR !!!\n"); 
001a88  e59f00e8          LDR      r0,|L1.7032|
001a8c  ebfffffe          BL       sysprintf
;;;2103                           *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_CANT_USE_ERROR;
001a90  e3a00032          MOV      r0,#0x32
001a94  e1c400b0          STRH     r0,[r4,#0]
;;;2104                           if(callback != NULL)
001a98  e3550000          CMP      r5,#0
001a9c  0a000003          BEQ      |L1.6832|
;;;2105                           {
;;;2106                               callback(FALSE, *returnInfo, *returnCode);
001aa0  e1d620b0          LDRH     r2,[r6,#0]
001aa4  e1d410b0          LDRH     r1,[r4,#0]
001aa8  e3a00000          MOV      r0,#0
001aac  e12fff35          BLX      r5
                  |L1.6832|
;;;2107                           }
;;;2108                           retval = TRUE;
001ab0  e3a00001          MOV      r0,#1
001ab4  e58d003c          STR      r0,[sp,#0x3c]
;;;2109                           break;
001ab8  ea00010a          B        |L1.7912|
                  |L1.6844|
;;;2110                       }
;;;2111                       else
;;;2112                       {
;;;2113                       
;;;2114                       }
;;;2115                       #if(ENABLE_ECC_AUTO_LOAD)
;;;2116                       /**************************************************/
;;;2117                       /****************  自動加值部分  ******************/
;;;2118                       // 如果開啟自動加值功能，要檢查卡片是否可加值
;;;2119                       // === Condition1 票卡的自動加值日限次未超出 (Autoload Date 在當日不可超過日限次數，1次) ===
;;;2120                       int autoLoadCount = eccCmdDCAReadResponseSuccessData.AutoloadCounter;
;;;2121                       uint16_t autoloadTimeTemp = ((uint16_t)eccCmdDCAReadResponseSuccessData.AutoloadDate[1] << 8) | eccCmdDCAReadResponseSuccessData.AutoloadDate[0];
;;;2122                       uint32_t day = (autoloadTimeTemp>>0)&0x1F; //bit 0 - 4 (5 bits)
;;;2123                       uint32_t month = (autoloadTimeTemp>>5)&0xF; //bit 5 - 8 (4 bits)
;;;2124                       uint32_t year = ((autoloadTimeTemp>>9)&0x7F)  + 1980;   //bit 9 - 15 (7 bits)                  
;;;2125                       RTC_TIME_DATA_T time;
;;;2126                       Time2RTC(utcTime, &time);
;;;2127                       sysprintf(" ### ECCLibProcess : autoLoadCount = %d [0x%02x, 0x%02x: 0x%04x] (AutoloadDate: %d_%d_%d <-> utcTime: %d_%d_%d) !!!\n", 
;;;2128                                       autoLoadCount, 
;;;2129                                       eccCmdDCAReadResponseSuccessData.AutoloadDate[0], eccCmdDCAReadResponseSuccessData.AutoloadDate[1], autoloadTimeTemp, 
;;;2130                                       year, month, day, time.u32Year, time.u32cMonth, time.u32cDay); 
;;;2131                       if((year == time.u32Year) && (month == time.u32cMonth) && (day == time.u32cDay))
;;;2132                       {//上次autoload是今天
;;;2133                           //2018.08.10 add , autoload 次數 只能一次
;;;2134                           //if(autoLoadCount <= 0X01)
;;;2135                           if(autoLoadCount < 0X01)
;;;2136                           {
;;;2137                               condition1 = TRUE;
;;;2138                               sysprintf(" ### ECCLibProcess [condition1 = TRUE] !!!\n");
;;;2139                           }
;;;2140                       }
;;;2141                       else
;;;2142                       {//上次autoload不是今天
;;;2143                           #if(1)
;;;2144                           //2018.08.14  --> 3) 跨日離線自動加值應要能交易。
;;;2145                           condition1 = TRUE;
;;;2146                           #else
;;;2147                           //if(autoLoadCount <= 0X01)
;;;2148                           if(autoLoadCount < 0X01)
;;;2149                           {
;;;2150                               condition1 = TRUE;
;;;2151                               sysprintf(" ### ECCLibProcess [condition1 = TRUE] !!!\n");
;;;2152                           }
;;;2153                           #endif
;;;2154                       }
;;;2155                       
;;;2156                       
;;;2157                       
;;;2158                       // === Condition2 票卡最後一次加值紀錄未非當日捷運設備的自動加值交易 ===
;;;2159                       condition2 = TRUE; // 2017/05/22 ECC 說不用判斷
;;;2160                       
;;;2161                       // 票卡可否加值判斷
;;;2162                       if( (purseUsageControl & (0x01<<3)) && (cardType == 0x08) && eccRemaiderAmt && condition1 && condition2)
;;;2163                       {
;;;2164                           sysprintf(" ### ECCLibProcess [cardAutoloadAvailable = TRUE] !!!\n");
;;;2165                           cardAutoloadAvailable = TRUE;
;;;2166                       }
;;;2167                       else
;;;2168                       {
;;;2169                           sysprintf(" ### ECCLibProcess [cardAutoloadAvailable = FALSE] !!!\n");
;;;2170                           cardAutoloadAvailable = FALSE;
;;;2171                       }
;;;2172                       
;;;2173                       /**************************************************/
;;;2174                       #endif
;;;2175                       /** 
;;;2176                        * 說明 : 檢查扣款餘額是否大於扣款金額
;;;2177                        * 先前檢查的是卡片有沒有自動加值的能力以 card_autoload_available 參數
;;;2178                        * 以下邏輯是卡片有自動加值功能但是是否真的需要自動加值
;;;2179                        */
;;;2180                       if(cardAutoloadAvailable)
001abc  e51f0164          LDR      r0,|L1.6496|
001ac0  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001ac4  e3500000          CMP      r0,#0
001ac8  0a00000d          BEQ      |L1.6916|
;;;2181                       {
;;;2182                           if (targetDeduct > CardMoney)
001acc  e15b0008          CMP      r11,r8
001ad0  da000005          BLE      |L1.6892|
;;;2183                           {
;;;2184                               sysprintf(" ###  ECCLibProcess INSUFFICIENT MONEY (AutoLoad) !!!\n"); 
001ad4  e28f00a0          ADR      r0,|L1.7036|
001ad8  ebfffffe          BL       sysprintf
;;;2185                               cardAutoloadAvailable = TRUE;
001adc  e3a00001          MOV      r0,#1
001ae0  e51f1188          LDR      r1,|L1.6496|
001ae4  e5c10000          STRB     r0,[r1,#0]  ; cardAutoloadAvailable
001ae8  ea000016          B        |L1.6984|
                  |L1.6892|
;;;2186                           }
;;;2187                           else
;;;2188                           {
;;;2189                               sysprintf(" ###  ECCLibProcess SUFFICIENT MONEY (AutoLoad) !!!\n"); 
001aec  e28f00c0          ADR      r0,|L1.7092|
001af0  ebfffffe          BL       sysprintf
;;;2190                               cardAutoloadAvailable = FALSE;
001af4  e3a00000          MOV      r0,#0
001af8  e51f11a0          LDR      r1,|L1.6496|
001afc  e5c10000          STRB     r0,[r1,#0]  ; cardAutoloadAvailable
001b00  ea000010          B        |L1.6984|
                  |L1.6916|
;;;2191                           }
;;;2192                       }
;;;2193                       else
;;;2194                       {
;;;2195                           //檢查扣款餘額是否大於扣款金額
;;;2196                           if (targetDeduct > CardMoney)
001b04  e15b0008          CMP      r11,r8
001b08  da00000c          BLE      |L1.6976|
;;;2197                           {
;;;2198                               sysprintf(" ###  ECCLibProcess INSUFFICIENT_MONEY_ERROR (NON AutoLoad) !!!\n"); 
001b0c  e59f00d8          LDR      r0,|L1.7148|
001b10  ebfffffe          BL       sysprintf
;;;2199                               *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_INSUFFICIENT_MONEY_ERROR;
001b14  e3a00035          MOV      r0,#0x35
001b18  e1c400b0          STRH     r0,[r4,#0]
;;;2200                               if(callback != NULL)
001b1c  e3550000          CMP      r5,#0
001b20  0a000003          BEQ      |L1.6964|
;;;2201                               {
;;;2202                                   callback(FALSE, *returnInfo, *returnCode);
001b24  e1d620b0          LDRH     r2,[r6,#0]
001b28  e1d410b0          LDRH     r1,[r4,#0]
001b2c  e3a00000          MOV      r0,#0
001b30  e12fff35          BLX      r5
                  |L1.6964|
;;;2203                               }
;;;2204                               retval = TRUE;
001b34  e3a00001          MOV      r0,#1
001b38  e58d003c          STR      r0,[sp,#0x3c]
;;;2205                               break;
001b3c  ea0000e9          B        |L1.7912|
                  |L1.6976|
;;;2206                           }
;;;2207                           sysprintf(" ###  ECCLibProcess SUFFICIENT MONEY (NON AutoLoad) !!!\n"); 
001b40  e28f00a8          ADR      r0,|L1.7152|
001b44  ebfffffe          BL       sysprintf
                  |L1.6984|
;;;2208                       }
;;;2209                       if(cardAutoloadAvailable)
001b48  e51f01f0          LDR      r0,|L1.6496|
001b4c  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001b50  e3500000          CMP      r0,#0
001b54  0a000044          BEQ      |L1.7276|
;;;2210                       {
;;;2211                           sysprintf(" ### ECCLibProcess FINALLY [cardAutoloadAvailable = TRUE] !!!\n");
001b58  e28f00cc          ADR      r0,|L1.7212|
001b5c  ebfffffe          BL       sysprintf
001b60  ea000043          B        |L1.7284|
                  |L1.7012|
                          DCD      ||.constdata||+0xd98
                  |L1.7016|
                          DCD      ||.constdata||+0xde0
                  |L1.7020|
                          DCD      ||.constdata||+0xe24
                  |L1.7024|
                          DCD      ||.constdata||+0xe70
                  |L1.7028|
                          DCD      ||.constdata||+0xeb4
                  |L1.7032|
                          DCD      ||.constdata||+0xf0c
                  |L1.7036|
001b7c  20232323          DCB      " ###  ECCLibProcess INSUFFICIENT MONEY (AutoLoad) !!!\n"
001b80  20204543
001b84  434c6962
001b88  50726f63
001b8c  65737320
001b90  494e5355
001b94  46464943
001b98  49454e54
001b9c  204d4f4e
001ba0  45592028
001ba4  4175746f
001ba8  4c6f6164
001bac  29202121
001bb0  210a    
001bb2  00                DCB      0
001bb3  00                DCB      0
                  |L1.7092|
001bb4  20232323          DCB      " ###  ECCLibProcess SUFFICIENT MONEY (AutoLoad) !!!\n",0
001bb8  20204543
001bbc  434c6962
001bc0  50726f63
001bc4  65737320
001bc8  53554646
001bcc  49434945
001bd0  4e54204d
001bd4  4f4e4559
001bd8  20284175
001bdc  746f4c6f
001be0  61642920
001be4  2121210a
001be8  00      
001be9  00                DCB      0
001bea  00                DCB      0
001beb  00                DCB      0
                  |L1.7148|
                          DCD      ||.constdata||+0xf54
                  |L1.7152|
001bf0  20232323          DCB      " ###  ECCLibProcess SUFFICIENT MONEY (NON AutoLoad) !!!"
001bf4  20204543
001bf8  434c6962
001bfc  50726f63
001c00  65737320
001c04  53554646
001c08  49434945
001c0c  4e54204d
001c10  4f4e4559
001c14  20284e4f
001c18  4e204175
001c1c  746f4c6f
001c20  61642920
001c24  212121  
001c27  0a00              DCB      "\n",0
001c29  00                DCB      0
001c2a  00                DCB      0
001c2b  00                DCB      0
                  |L1.7212|
001c2c  20232323          DCB      " ### ECCLibProcess FINALLY [cardAutoloadAvailable = TRU"
001c30  20454343
001c34  4c696250
001c38  726f6365
001c3c  73732046
001c40  494e414c
001c44  4c59205b
001c48  63617264
001c4c  4175746f
001c50  6c6f6164
001c54  41766169
001c58  6c61626c
001c5c  65203d20
001c60  545255  
001c63  455d2021          DCB      "E] !!!\n",0
001c67  21210a00
001c6b  00                DCB      0
                  |L1.7276|
;;;2212                       }
;;;2213                       else
;;;2214                       {
;;;2215                           sysprintf(" ### ECCLibProcess FINALLY [cardAutoloadAvailable = FALSE] !!!\n");
001c6c  e28f0fa1          ADR      r0,|L1.7928|
001c70  ebfffffe          BL       sysprintf
                  |L1.7284|
;;;2216                       }
;;;2217                       
;;;2218                       #if(0)//不正式扣款
;;;2219                       if(callback != NULL)
;;;2220                       {
;;;2221                           *returnCode = 5478;
;;;2222                           callback(TRUE, *returnInfo, *returnCode);
;;;2223                       }
;;;2224                       retval = TRUE;
;;;2225                       return TRUE;
;;;2226                       #endif
;;;2227   
;;;2228   
;;;2229                       *returnInfo = edcaDeduct(returnCode, &resultStatus, targetDeduct, utcTime, utcTime, cardAutoloadAvailable);
001c74  e51f031c          LDR      r0,|L1.6496|
001c78  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001c7c  e58d7000          STR      r7,[sp,#0]
001c80  e1a03007          MOV      r3,r7
001c84  e1a0200b          MOV      r2,r11
001c88  e58d0004          STR      r0,[sp,#4]
001c8c  e28d1040          ADD      r1,sp,#0x40
001c90  e1a00006          MOV      r0,r6
001c94  ebfffffe          BL       edcaDeduct
001c98  e1c400b0          STRH     r0,[r4,#0]
;;;2230                       if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
001c9c  e1d400b0          LDRH     r0,[r4,#0]
001ca0  e3500002          CMP      r0,#2
001ca4  1a000080          BNE      |L1.7852|
;;;2231                       {  
;;;2232                           BOOL write02Log_OK = FALSE;
001ca8  e3a00000          MOV      r0,#0
001cac  e58d0018          STR      r0,[sp,#0x18]
;;;2233                           if((resultStatus == ECC_CMD_EDCA_DEDUCT_ERROR_ID_1) || //0x6088
001cb0  e1dd04b0          LDRH     r0,[sp,#0x40]
001cb4  e2401a06          SUB      r1,r0,#0x6000
001cb8  e2511088          SUBS     r1,r1,#0x88
001cbc  0a000003          BEQ      |L1.7376|
;;;2234                               (resultStatus == ECC_CMD_EDCA_DEDUCT_ERROR_ID_2))  //0x6424
001cc0  e1dd04b0          LDRH     r0,[sp,#0x40]
001cc4  e2401b19          SUB      r1,r0,#0x6400
001cc8  e2511024          SUBS     r1,r1,#0x24
001ccc  1a000016          BNE      |L1.7468|
                  |L1.7376|
;;;2235                           {
;;;2236                               if(resultStatus == ECC_CMD_EDCA_DEDUCT_ERROR_ID_2) //0x6424
001cd0  e1dd04b0          LDRH     r0,[sp,#0x40]
001cd4  e2401b19          SUB      r1,r0,#0x6400
001cd8  e2511024          SUBS     r1,r1,#0x24
001cdc  1a000006          BNE      |L1.7420|
;;;2237                               {
;;;2238                                   //寫交易 LOG 02-加值交易
;;;2239                                   write02Log_OK = TRUE;
001ce0  e3a00001          MOV      r0,#1
001ce4  e58d0018          STR      r0,[sp,#0x18]
;;;2240                                   eccSaveAutoLoadLog(NEW_SP_ID, utcTime, (uint8_t*)&eccCmdDCAReadResponseError1Data, &eccCmdLockCardResponseData);
001ce8  e59f3248          LDR      r3,|L1.7992|
001cec  e51f238c          LDR      r2,|L1.6504|
001cf0  e1a01007          MOV      r1,r7
001cf4  e3a00082          MOV      r0,#0x82
001cf8  ebfffffe          BL       eccSaveAutoLoadLog
                  |L1.7420|
;;;2241                               }
;;;2242                               // 重做 edcaDeduct
;;;2243                               utcTime = GetCurrentUTCTime();
001cfc  ebfffffe          BL       GetCurrentUTCTime
001d00  e1a07000          MOV      r7,r0
;;;2244                               *returnInfo = edcaDeduct(returnCode, &resultStatus, targetDeduct, utcTime, utcTime, cardAutoloadAvailable);
001d04  e51f03ac          LDR      r0,|L1.6496|
001d08  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001d0c  e58d7000          STR      r7,[sp,#0]
001d10  e1a03007          MOV      r3,r7
001d14  e1a0200b          MOV      r2,r11
001d18  e58d0004          STR      r0,[sp,#4]
001d1c  e28d1040          ADD      r1,sp,#0x40
001d20  e1a00006          MOV      r0,r6
001d24  ebfffffe          BL       edcaDeduct
001d28  e1c400b0          STRH     r0,[r4,#0]
                  |L1.7468|
;;;2245                           }
;;;2246   
;;;2247   
;;;2248                           if(resultStatus == ECC_CMD_EDCA_DEDUCT_SUCCESS_ID)//0x9000
001d2c  e1dd04b0          LDRH     r0,[sp,#0x40]
001d30  e3500a09          CMP      r0,#0x9000
001d34  1a00002d          BNE      |L1.7664|
;;;2249                           {
;;;2250                               serialNumber++;
001d38  e59f01fc          LDR      r0,|L1.7996|
001d3c  e5900000          LDR      r0,[r0,#0]  ; serialNumber
001d40  e2800001          ADD      r0,r0,#1
001d44  e59f11f0          LDR      r1,|L1.7996|
001d48  e5810000          STR      r0,[r1,#0]  ; serialNumber
;;;2251                               //CardMoney = uint8ToUint32(eccCmdEDCADeductResponseData.PurseBalance, sizeof(eccCmdEDCADeductResponseData.PurseBalance));
;;;2252                               CardMoney = uint8ToUint32(eccCmdEDCADeductResponseData.PurseBalance, sizeof(eccCmdEDCADeductResponseData.PurseBalance));
001d4c  e3a01003          MOV      r1,#3
001d50  e59f01e8          LDR      r0,|L1.8000|
001d54  ebfffffe          BL       uint8ToUint32
001d58  e1a08000          MOV      r8,r0
;;;2253                               sysprintf(" ### ECCLibProcess [edcaDeduct]: targetDeduct = %d, CardMoney = %d, serialNumber = %d [0x%02X, 0x%02X, 0x%02X]\n", 
001d5c  e59f01e0          LDR      r0,|L1.8004|
001d60  e5d00063          LDRB     r0,[r0,#0x63]
001d64  e59f11d8          LDR      r1,|L1.8004|
001d68  e5d11062          LDRB     r1,[r1,#0x62]
001d6c  e59f21d0          LDR      r2,|L1.8004|
001d70  e5d22061          LDRB     r2,[r2,#0x61]  ; eccCmdEDCADeductResponseData
001d74  e58d0008          STR      r0,[sp,#8]
001d78  e59f01bc          LDR      r0,|L1.7996|
001d7c  e58d1004          STR      r1,[sp,#4]
001d80  e58d2000          STR      r2,[sp,#0]
001d84  e1a02008          MOV      r2,r8
001d88  e1a0100b          MOV      r1,r11
001d8c  e5903000          LDR      r3,[r0,#0]  ; serialNumber
001d90  e59f01b0          LDR      r0,|L1.8008|
001d94  ebfffffe          BL       sysprintf
;;;2254                                                                           targetDeduct, CardMoney, serialNumber, 
;;;2255                                                                           eccCmdEDCADeductResponseData.PurseBalance[0], 
;;;2256                                                                           eccCmdEDCADeductResponseData.PurseBalance[1], 
;;;2257                                                                           eccCmdEDCADeductResponseData.PurseBalance[2]);
;;;2258                               
;;;2259                               
;;;2260                               //寫交易 LOG 01-扣款  (callback 呼叫 ECCSaveFilePure)          
;;;2261                               //寫交易 LOG 12-加值重送  (callback 呼叫 ECCSaveFilePure) 
;;;2262                               if (cardAutoloadAvailable && write02Log_OK == FALSE)
001d98  e51f0440          LDR      r0,|L1.6496|
001d9c  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001da0  e3500000          CMP      r0,#0
001da4  0a000007          BEQ      |L1.7624|
001da8  e59d0018          LDR      r0,[sp,#0x18]
001dac  e3500000          CMP      r0,#0
001db0  1a000004          BNE      |L1.7624|
;;;2263                               {
;;;2264                                   //寫交易 LOG 02-加值交易
;;;2265                                   eccSaveAutoLoadLog(NEW_SP_ID, utcTime, (uint8_t*)&eccCmdDCAReadResponseError1Data, &eccCmdLockCardResponseData);
001db4  e59f317c          LDR      r3,|L1.7992|
001db8  e51f2458          LDR      r2,|L1.6504|
001dbc  e1a01007          MOV      r1,r7
001dc0  e3a00082          MOV      r0,#0x82
001dc4  ebfffffe          BL       eccSaveAutoLoadLog
                  |L1.7624|
;;;2266                               }
;;;2267                               if(callback != NULL)
001dc8  e3550000          CMP      r5,#0
001dcc  0a000004          BEQ      |L1.7652|
;;;2268                               {
;;;2269                                   *returnCode = CardMoney;
001dd0  e1c680b0          STRH     r8,[r6,#0]
;;;2270                                   callback(TRUE, *returnInfo, *returnCode);
001dd4  e1d620b0          LDRH     r2,[r6,#0]
001dd8  e1d410b0          LDRH     r1,[r4,#0]
001ddc  e3a00001          MOV      r0,#1
001de0  e12fff35          BLX      r5
                  |L1.7652|
;;;2271                               }
;;;2272                               retval = TRUE;
001de4  e3a00001          MOV      r0,#1
001de8  e58d003c          STR      r0,[sp,#0x3c]
001dec  ea00002d          B        |L1.7848|
                  |L1.7664|
;;;2273                           }
;;;2274                           //2018.08.10 add , autoload後無法再autoload
;;;2275                           else if(resultStatus == ECC_CMD_EDCA_DEDUCT_ERROR_ID_3)
001df0  e1dd04b0          LDRH     r0,[sp,#0x40]
001df4  e2401b19          SUB      r1,r0,#0x6400
001df8  e2511002          SUBS     r1,r1,#2
001dfc  1a00000c          BNE      |L1.7732|
;;;2276                           {
;;;2277                               *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
001e00  e3a00034          MOV      r0,#0x34
001e04  e1c400b0          STRH     r0,[r4,#0]
;;;2278                               *returnCode = resultStatus;
001e08  e1dd04b0          LDRH     r0,[sp,#0x40]
001e0c  e1c600b0          STRH     r0,[r6,#0]
;;;2279                               if(callback != NULL)
001e10  e3550000          CMP      r5,#0
001e14  0a000003          BEQ      |L1.7720|
;;;2280                               {
;;;2281                                   callback(FALSE, *returnInfo, *returnCode);
001e18  e1d620b0          LDRH     r2,[r6,#0]
001e1c  e1d410b0          LDRH     r1,[r4,#0]
001e20  e3a00000          MOV      r0,#0
001e24  e12fff35          BLX      r5
                  |L1.7720|
;;;2282                               }
;;;2283                               retval = TRUE;
001e28  e3a00001          MOV      r0,#1
001e2c  e58d003c          STR      r0,[sp,#0x3c]
001e30  ea00001c          B        |L1.7848|
                  |L1.7732|
;;;2284                           }
;;;2285                           //2018.10.17 餘額不足
;;;2286                           else if(resultStatus == 0x6403)
001e34  e1dd04b0          LDRH     r0,[sp,#0x40]
001e38  e2401b19          SUB      r1,r0,#0x6400
001e3c  e2511003          SUBS     r1,r1,#3
001e40  1a00000c          BNE      |L1.7800|
;;;2287                           {                            
;;;2288                               *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_INSUFFICIENT_MONEY_ERROR;  
001e44  e3a00035          MOV      r0,#0x35
001e48  e1c400b0          STRH     r0,[r4,#0]
;;;2289                               *returnCode = resultStatus;
001e4c  e1dd04b0          LDRH     r0,[sp,#0x40]
001e50  e1c600b0          STRH     r0,[r6,#0]
;;;2290                               if(callback != NULL)
001e54  e3550000          CMP      r5,#0
001e58  0a000003          BEQ      |L1.7788|
;;;2291                               {
;;;2292                                   callback(FALSE, *returnInfo, *returnCode);
001e5c  e1d620b0          LDRH     r2,[r6,#0]
001e60  e1d410b0          LDRH     r1,[r4,#0]
001e64  e3a00000          MOV      r0,#0
001e68  e12fff35          BLX      r5
                  |L1.7788|
;;;2293                               }
;;;2294                               retval = TRUE;
001e6c  e3a00001          MOV      r0,#1
001e70  e58d003c          STR      r0,[sp,#0x3c]
001e74  ea00000b          B        |L1.7848|
                  |L1.7800|
;;;2295                           }
;;;2296                           
;;;2297                           else //2018.08.14 其他錯誤都直接回應錯誤值
;;;2298                           {
;;;2299                               *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
001e78  e3a00034          MOV      r0,#0x34
001e7c  e1c400b0          STRH     r0,[r4,#0]
;;;2300                               *returnCode = resultStatus;
001e80  e1dd04b0          LDRH     r0,[sp,#0x40]
001e84  e1c600b0          STRH     r0,[r6,#0]
;;;2301                               if(callback != NULL)
001e88  e3550000          CMP      r5,#0
001e8c  0a000003          BEQ      |L1.7840|
;;;2302                               {
;;;2303                                   callback(FALSE, *returnInfo, *returnCode);
001e90  e1d620b0          LDRH     r2,[r6,#0]
001e94  e1d410b0          LDRH     r1,[r4,#0]
001e98  e3a00000          MOV      r0,#0
001e9c  e12fff35          BLX      r5
                  |L1.7840|
;;;2304                               }
;;;2305                               retval = TRUE;
001ea0  e3a00001          MOV      r0,#1
001ea4  e58d003c          STR      r0,[sp,#0x3c]
                  |L1.7848|
;;;2306                           }
;;;2307                       }
001ea8  e1a00000          MOV      r0,r0
                  |L1.7852|
;;;2308                       
;;;2309                   }
;;;2310                   break; //case ECC_CMD_READ_SUCCESS_ID:
001eac  ea00000d          B        |L1.7912|
                  |L1.7856|
;;;2311               
;;;2312               default:
001eb0  e1a00000          MOV      r0,r0
;;;2313                   *returnInfo = CARD_MESSAGE_TYPE_ECC_RETURN_READ_ERROR;  
001eb4  e3a00034          MOV      r0,#0x34
001eb8  e1c400b0          STRH     r0,[r4,#0]
;;;2314                   *returnCode = resultStatus;
001ebc  e1dd04b0          LDRH     r0,[sp,#0x40]
001ec0  e1c600b0          STRH     r0,[r6,#0]
;;;2315                   //#warning need check here
;;;2316                   //??
;;;2317                   if(callback != NULL)
001ec4  e3550000          CMP      r5,#0
001ec8  0a000003          BEQ      |L1.7900|
;;;2318                   {
;;;2319                       callback(FALSE, *returnInfo, *returnCode);
001ecc  e1d620b0          LDRH     r2,[r6,#0]
001ed0  e1d410b0          LDRH     r1,[r4,#0]
001ed4  e3a00000          MOV      r0,#0
001ed8  e12fff35          BLX      r5
                  |L1.7900|
;;;2320                   }
;;;2321                   retval = TRUE;
001edc  e3a00001          MOV      r0,#1
001ee0  e58d003c          STR      r0,[sp,#0x3c]
;;;2322                   break;
001ee4  e1a00000          MOV      r0,r0
                  |L1.7912|
001ee8  e1a00000          MOV      r0,r0                 ;1838
                  |L1.7916|
;;;2323   
;;;2324               }  
;;;2325           }// READ // if(*returnInfo == CARD_MESSAGE_RETURN_SUCCESS) 
;;;2326       
;;;2327       }    
;;;2328       return retval;
001eec  e59d003c          LDR      r0,[sp,#0x3c]
001ef0  e28dd044          ADD      sp,sp,#0x44
;;;2329   }
001ef4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.7928|
001ef8  20232323          DCB      " ### ECCLibProcess FINALLY [cardAutoloadAvailable = FAL"
001efc  20454343
001f00  4c696250
001f04  726f6365
001f08  73732046
001f0c  494e414c
001f10  4c59205b
001f14  63617264
001f18  4175746f
001f1c  6c6f6164
001f20  41766169
001f24  6c61626c
001f28  65203d20
001f2c  46414c  
001f2f  53455d20          DCB      "SE] !!!\n",0
001f33  2121210a
001f37  00      
                  |L1.7992|
                          DCD      eccCmdLockCardResponseData
                  |L1.7996|
                          DCD      serialNumber
                  |L1.8000|
                          DCD      eccCmdEDCADeductResponseData+0x61
                  |L1.8004|
                          DCD      eccCmdEDCADeductResponseData
                  |L1.8008|
                          DCD      ||.constdata||+0xf98
                          ENDP

                  ECCSaveFile PROC
;;;2330   void ECCSaveFile(uint16_t currentTargetDeduct, time_t epmUTCTime)
001f4c  e92d41f0          PUSH     {r4-r8,lr}
;;;2331   {     
001f50  e24ddf46          SUB      sp,sp,#0x118
001f54  e1a04000          MOV      r4,r0
001f58  e1a05001          MOV      r5,r1
;;;2332       uint8_t* eccDeductLogBody = (uint8_t*)pvPortMalloc(sizeof(ECCDeductLogBody));  
001f5c  e3a000d4          MOV      r0,#0xd4
001f60  ebfffffe          BL       pvPortMalloc
001f64  e1a06000          MOV      r6,r0
;;;2333       //2018.08.14  --> A. 【SEQ_NO_BEF_TXN】交易前序號：扣款兼自動加值，應填自動加值後的序號，卻填自動加值前序號。
;;;2334       //2018.08.14  --> B. 【EV_BEF_TXN】交易前卡片金額：扣款兼自動加值，應填自動加值後的餘額，卻填自動加值前餘額。 
;;;2335       //ECCDeductLogContainInit((ECCDeductLogBody*)eccDeductLogBody, currentTargetDeduct, 1, epmUTCTime, FALSE, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData));
;;;2336       ECCDeductLogContainInit((ECCDeductLogBody*)eccDeductLogBody, currentTargetDeduct, TM_AGENT_NUMBER, epmUTCTime, cardAutoloadAvailable, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData));
001f68  e3a0007a          MOV      r0,#0x7a
001f6c  e51f1030          LDR      r1,|L1.8004|
001f70  e3a020a0          MOV      r2,#0xa0
001f74  e51f360c          LDR      r3,|L1.6512|
001f78  e58d0010          STR      r0,[sp,#0x10]
001f7c  e51f0624          LDR      r0,|L1.6496|
001f80  e58d100c          STR      r1,[sp,#0xc]
001f84  e58d2008          STR      r2,[sp,#8]
001f88  e58d3004          STR      r3,[sp,#4]
001f8c  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001f90  e1a03005          MOV      r3,r5
001f94  e3a02001          MOV      r2,#1
001f98  e1a01004          MOV      r1,r4
001f9c  e58d0000          STR      r0,[sp,#0]
001fa0  e1a00006          MOV      r0,r6
001fa4  ebfffffe          BL       ECCDeductLogContainInit
;;;2337       
;;;2338       uint8_t* eccReSendLogBody = (uint8_t*)pvPortMalloc(sizeof(ECCReSendLogBody));
001fa8  e3a00040          MOV      r0,#0x40
001fac  ebfffffe          BL       pvPortMalloc
001fb0  e1a07000          MOV      r7,r0
;;;2339       //2018.08.14  --> A. 【SEQ_NO_BEF_TXN】交易前序號：扣款兼自動加值，應填自動加值後的序號，卻填自動加值前序號。
;;;2340       //2018.08.14  --> B. 【EV_BEF_TXN】交易前卡片金額：扣款兼自動加值，應填自動加值後的餘額，卻填自動加值前餘額。 
;;;2341       //ECCReSendLogContainInit((ECCReSendLogBody*)eccReSendLogBody, currentTargetDeduct, 1, epmUTCTime, FALSE, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData));
;;;2342       ECCReSendLogContainInit((ECCReSendLogBody*)eccReSendLogBody, currentTargetDeduct, TM_AGENT_NUMBER, epmUTCTime, cardAutoloadAvailable, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData));
001fb4  e3a0007a          MOV      r0,#0x7a
001fb8  e51f107c          LDR      r1,|L1.8004|
001fbc  e3a020a0          MOV      r2,#0xa0
001fc0  e51f3658          LDR      r3,|L1.6512|
001fc4  e58d0010          STR      r0,[sp,#0x10]
001fc8  e51f0670          LDR      r0,|L1.6496|
001fcc  e58d100c          STR      r1,[sp,#0xc]
001fd0  e58d2008          STR      r2,[sp,#8]
001fd4  e58d3004          STR      r3,[sp,#4]
001fd8  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
001fdc  e1a03005          MOV      r3,r5
001fe0  e3a02001          MOV      r2,#1
001fe4  e1a01004          MOV      r1,r4
001fe8  e58d0000          STR      r0,[sp,#0]
001fec  e1a00007          MOV      r0,r7
001ff0  ebfffffe          BL       ECCReSendLogContainInit
;;;2343       
;;;2344   #ifdef _PC_ENV_
;;;2345       MiscSaveToFile(ECCDeductLogGetFileName(), (uint8_t*)eccDeductLogBody, sizeof(ECCDeductLogBody));
;;;2346       MiscSaveToFile(ECCReSendLogGetFileName(), (uint8_t*)eccReSendLogBody, sizeof(ECCReSendLogBody));
;;;2347   #else
;;;2348       uint8_t* pData;
;;;2349       char targetLogFileName[_MAX_LFN];
;;;2350       
;;;2351       sprintf(targetLogFileName,"%ss", ECCDeductLogGetFileName()); 
001ff4  ebfffffe          BL       ECCDeductLogGetFileName
001ff8  e1a08000          MOV      r8,r0
001ffc  e1a02008          MOV      r2,r8
002000  e59f1184          LDR      r1,|L1.8588|
002004  e28d0018          ADD      r0,sp,#0x18
002008  ebfffffe          BL       __2sprintf
;;;2352       SFlashAppendRecord(targetLogFileName, SFLASH_RECORD_TYPE_ECC, (uint8_t*)eccDeductLogBody, sizeof(ECCDeductLogBody));
00200c  e3a030d4          MOV      r3,#0xd4
002010  e1a02006          MOV      r2,r6
002014  e3a01001          MOV      r1,#1
002018  e28d0018          ADD      r0,sp,#0x18
00201c  ebfffffe          BL       SFlashAppendRecord
;;;2353       if(FileAgentAddData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCDeductLogGetFileName(), (uint8_t*)eccDeductLogBody, sizeof(ECCDeductLogBody), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
002020  ebfffffe          BL       ECCDeductLogGetFileName
002024  e1a08000          MOV      r8,r0
002028  e3a00001          MOV      r0,#1
00202c  e3a01000          MOV      r1,#0
002030  e58d0008          STR      r0,[sp,#8]
002034  e58d1004          STR      r1,[sp,#4]
002038  e58d0010          STR      r0,[sp,#0x10]
00203c  e3a000d4          MOV      r0,#0xd4
002040  e1a03006          MOV      r3,r6
002044  e1a02008          MOV      r2,r8
002048  e58d100c          STR      r1,[sp,#0xc]
00204c  e28f1f4f          ADR      r1,|L1.8592|
002050  e58d0000          STR      r0,[sp,#0]
002054  e3a00000          MOV      r0,#0
002058  ebfffffe          BL       FileAgentAddData
;;;2354       {
;;;2355   
;;;2356       }    
;;;2357       #if(USE_SAM_ENCRYPT)
;;;2358       if(SCEncryptSAMData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCDeductLogGetFileName(), (uint8_t*)eccDeductLogBody, sizeof(ECCDeductLogBody)))
;;;2359       {
;;;2360       }
;;;2361       #endif
;;;2362       
;;;2363       sprintf(targetLogFileName,"%ss", ECCReSendLogGetFileName()); 
00205c  ebfffffe          BL       ECCReSendLogGetFileName
002060  e1a08000          MOV      r8,r0
002064  e1a02008          MOV      r2,r8
002068  e59f111c          LDR      r1,|L1.8588|
00206c  e28d0018          ADD      r0,sp,#0x18
002070  ebfffffe          BL       __2sprintf
;;;2364       SFlashAppendRecord(targetLogFileName, SFLASH_RECORD_TYPE_ECC, (uint8_t*)eccReSendLogBody, sizeof(ECCReSendLogBody));
002074  e3a03040          MOV      r3,#0x40
002078  e1a02007          MOV      r2,r7
00207c  e3a01001          MOV      r1,#1
002080  e28d0018          ADD      r0,sp,#0x18
002084  ebfffffe          BL       SFlashAppendRecord
;;;2365       
;;;2366       if(FileAgentAddData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCReSendLogGetFileName(), (uint8_t*)eccReSendLogBody, sizeof(ECCReSendLogBody), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
002088  ebfffffe          BL       ECCReSendLogGetFileName
00208c  e1a08000          MOV      r8,r0
002090  e3a00001          MOV      r0,#1
002094  e3a01000          MOV      r1,#0
002098  e58d0008          STR      r0,[sp,#8]
00209c  e58d1004          STR      r1,[sp,#4]
0020a0  e58d0010          STR      r0,[sp,#0x10]
0020a4  e3a00040          MOV      r0,#0x40
0020a8  e1a03007          MOV      r3,r7
0020ac  e1a02008          MOV      r2,r8
0020b0  e58d100c          STR      r1,[sp,#0xc]
0020b4  e28f10d4          ADR      r1,|L1.8592|
0020b8  e58d0000          STR      r0,[sp,#0]
0020bc  e3a00000          MOV      r0,#0
0020c0  ebfffffe          BL       FileAgentAddData
;;;2367       {
;;;2368   
;;;2369       }   
;;;2370       #if(USE_SAM_ENCRYPT)
;;;2371       if(SCEncryptSAMData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, ECCReSendLogGetFileName(), (uint8_t*)eccReSendLogBody, sizeof(ECCReSendLogBody)))
;;;2372       {
;;;2373       }
;;;2374       #endif
;;;2375   #if(0)
;;;2376       //ReadResponse
;;;2377       pData = (uint8_t*)pvPortMalloc(sizeof(ECCCmdDCAReadResponseSuccessData));
;;;2378       memcpy(pData, &eccCmdDCAReadResponseSuccessData, sizeof(ECCCmdDCAReadResponseSuccessData));
;;;2379       sprintf(targetLogFileName,"%s.%s", ECCDeductLogGetFileName(), DSF_FILE_EXTENSION);     
;;;2380       if(FileAgentAddData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, targetLogFileName, (uint8_t*)pData, sizeof(ECCCmdDCAReadResponseSuccessData), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
;;;2381       {
;;;2382   
;;;2383       }  
;;;2384       
;;;2385       //DeductResponse
;;;2386       pData = (uint8_t*)pvPortMalloc(sizeof(ECCCmdEDCADeductResponseData));
;;;2387       memcpy(pData, &eccCmdEDCADeductResponseData, sizeof(ECCCmdEDCADeductResponseData));
;;;2388       sprintf(targetLogFileName,"%s.%s", ECCDeductLogGetFileName(), DCF_FILE_EXTENSION);     
;;;2389       if(FileAgentAddData(ECC_LOG_FILE_SAVE_POSITION, ECC_LOG_FILE_DIR, targetLogFileName, (uint8_t*)pData, sizeof(ECCCmdEDCADeductResponseData), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
;;;2390       {
;;;2391   
;;;2392       } 
;;;2393   #endif   
;;;2394   #endif //#if(ENABLE_CARD_LOG_SAVE)
;;;2395   }
0020c4  e28ddf46          ADD      sp,sp,#0x118
0020c8  e8bd81f0          POP      {r4-r8,pc}
;;;2396   void ECCSaveFilePure(uint16_t currentTargetDeduct, time_t epmUTCTime)
                          ENDP

                  ECCSaveFilePure PROC
0020cc  e92d40f0          PUSH     {r4-r7,lr}
;;;2397   {
0020d0  e24dd014          SUB      sp,sp,#0x14
0020d4  e1a04000          MOV      r4,r0
0020d8  e1a05001          MOV      r5,r1
;;;2398       uint8_t* eccDeductLogBody = (uint8_t*)pvPortMalloc(sizeof(ECCDeductLogBody));  
0020dc  e3a000d4          MOV      r0,#0xd4
0020e0  ebfffffe          BL       pvPortMalloc
0020e4  e1a06000          MOV      r6,r0
;;;2399       ECCDeductLogContainInit((ECCDeductLogBody*)eccDeductLogBody, currentTargetDeduct, TM_AGENT_NUMBER, epmUTCTime, cardAutoloadAvailable, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData));
0020e8  e3a0007a          MOV      r0,#0x7a
0020ec  e51f11b0          LDR      r1,|L1.8004|
0020f0  e3a020a0          MOV      r2,#0xa0
0020f4  e51f378c          LDR      r3,|L1.6512|
0020f8  e58d0010          STR      r0,[sp,#0x10]
0020fc  e51f07a4          LDR      r0,|L1.6496|
002100  e58d100c          STR      r1,[sp,#0xc]
002104  e58d2008          STR      r2,[sp,#8]
002108  e58d3004          STR      r3,[sp,#4]
00210c  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
002110  e1a03005          MOV      r3,r5
002114  e3a02001          MOV      r2,#1
002118  e1a01004          MOV      r1,r4
00211c  e58d0000          STR      r0,[sp,#0]
002120  e1a00006          MOV      r0,r6
002124  ebfffffe          BL       ECCDeductLogContainInit
;;;2400       #ifdef _PC_ENV_
;;;2401       MiscSaveToFile(ECCDeductLogGetFileName(), (uint8_t*)eccDeductLogBody, sizeof(ECCDeductLogBody));
;;;2402       #else
;;;2403       vPortFree(eccDeductLogBody);  
002128  e1a00006          MOV      r0,r6
00212c  ebfffffe          BL       vPortFree
;;;2404       #endif
;;;2405       
;;;2406       uint8_t* eccReSendLogBody = (uint8_t*)pvPortMalloc(sizeof(ECCReSendLogBody));
002130  e3a00040          MOV      r0,#0x40
002134  ebfffffe          BL       pvPortMalloc
002138  e1a07000          MOV      r7,r0
;;;2407       ECCReSendLogContainInit((ECCReSendLogBody*)eccReSendLogBody, currentTargetDeduct, TM_AGENT_NUMBER, epmUTCTime, cardAutoloadAvailable, &eccCmdDCAReadResponseSuccessData, sizeof(eccCmdDCAReadResponseSuccessData), &eccCmdEDCADeductResponseData, sizeof(eccCmdEDCADeductResponseData));
00213c  e3a0007a          MOV      r0,#0x7a
002140  e51f1204          LDR      r1,|L1.8004|
002144  e3a020a0          MOV      r2,#0xa0
002148  e51f37e0          LDR      r3,|L1.6512|
00214c  e58d0010          STR      r0,[sp,#0x10]
002150  e51f07f8          LDR      r0,|L1.6496|
002154  e58d100c          STR      r1,[sp,#0xc]
002158  e58d2008          STR      r2,[sp,#8]
00215c  e58d3004          STR      r3,[sp,#4]
002160  e5d00000          LDRB     r0,[r0,#0]  ; cardAutoloadAvailable
002164  e1a03005          MOV      r3,r5
002168  e3a02001          MOV      r2,#1
00216c  e1a01004          MOV      r1,r4
002170  e58d0000          STR      r0,[sp,#0]
002174  e1a00007          MOV      r0,r7
002178  ebfffffe          BL       ECCReSendLogContainInit
;;;2408       #ifdef _PC_ENV_
;;;2409       MiscSaveToFile(ECCReSendLogGetFileName(), (uint8_t*)eccReSendLogBody, sizeof(ECCReSendLogBody));
;;;2410       #else
;;;2411       vPortFree(eccReSendLogBody);  
00217c  e1a00007          MOV      r0,r7
002180  ebfffffe          BL       vPortFree
;;;2412       #endif
;;;2413   }
002184  e28dd014          ADD      sp,sp,#0x14
002188  e8bd80f0          POP      {r4-r7,pc}
;;;2414   
                          ENDP

                  |L1.8588|
                          DCD      ||.text||+0x130c
                  |L1.8592|
002190  313a00            DCB      "1:",0
002193  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  eccCmdPPRResetRequestPack
                          %        78
                  eccCmdDCAReadRequestPack
                          %        30
                  eccCmdEDCADeductPack
                          %        78
                  eccCmdLockCardPack
                          %        28
                  eccCmdPPRResetResponseData
                          %        250
                  eccCmdDCAReadResponseSuccessData
                          %        160
                  eccCmdDCAReadResponseError1Data
                          %        120
                  eccCmdDCAReadResponseError2Data
                          %        40
                  eccCmdEDCADeductResponseData
                          %        122
                  eccCmdLockCardResponseData
                          %        40
                  eccCmdPPRSignOnQueryResponseData
                          %        40
                  eccCmdPPRSignOnResponseData
                          %        29

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0d0a7e7e          DCB      0x0d,0x0a,0x7e,0x7e
000004  7e207061          DCB      0x7e,0x20,0x70,0x61
000008  72736572          DCB      0x72,0x73,0x65,0x72
00000c  4d657373          DCB      0x4d,0x65,0x73,0x73
000010  61676528          DCB      0x61,0x67,0x65,0x28
000014  45434329          DCB      0x45,0x43,0x43,0x29
000018  20726563          DCB      0x20,0x72,0x65,0x63
00001c  65697665          DCB      0x65,0x69,0x76,0x65
000020  44617461          DCB      0x44,0x61,0x74,0x61
000024  4c656e20          DCB      0x4c,0x65,0x6e,0x20
000028  3d202564          DCB      0x3d,0x20,0x25,0x64
00002c  20657272          DCB      0x20,0x65,0x72,0x72
000030  6f722028          DCB      0x6f,0x72,0x20,0x28
000034  72657475          DCB      0x72,0x65,0x74,0x75
000038  726e436f          DCB      0x72,0x6e,0x43,0x6f
00003c  6465203d          DCB      0x64,0x65,0x20,0x3d
000040  3d204e55          DCB      0x3d,0x20,0x4e,0x55
000044  4c4c297e          DCB      0x4c,0x4c,0x29,0x7e
000048  7e7e3e0d          DCB      0x7e,0x7e,0x3e,0x0d
00004c  0a000000          DCB      0x0a,0x00,0x00,0x00
000050  70617273          DCB      0x70,0x61,0x72,0x73
000054  65724d65          DCB      0x65,0x72,0x4d,0x65
000058  73736167          DCB      0x73,0x73,0x61,0x67
00005c  65284543          DCB      0x65,0x28,0x45,0x43
000060  43293a20          DCB      0x43,0x29,0x3a,0x20
000064  45504d52          DCB      0x45,0x50,0x4d,0x52
000068  65616465          DCB      0x65,0x61,0x64,0x65
00006c  724c5243          DCB      0x72,0x4c,0x52,0x43
000070  20657272          DCB      0x20,0x65,0x72,0x72
000074  6f72205b          DCB      0x6f,0x72,0x20,0x5b
000078  30782530          DCB      0x30,0x78,0x25,0x30
00007c  32785d20          DCB      0x32,0x78,0x5d,0x20
000080  20636f6d          DCB      0x20,0x63,0x6f,0x6d
000084  70617265          DCB      0x70,0x61,0x72,0x65
000088  20307825          DCB      0x20,0x30,0x78,0x25
00008c  30327820          DCB      0x30,0x32,0x78,0x20
000090  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000094  0d0a3c2d          DCB      0x0d,0x0a,0x3c,0x2d
000098  2d2d2043          DCB      0x2d,0x2d,0x20,0x43
00009c  4152445f          DCB      0x41,0x52,0x44,0x5f
0000a0  4d455353          DCB      0x4d,0x45,0x53,0x53
0000a4  4147455f          DCB      0x41,0x47,0x45,0x5f
0000a8  54595045          DCB      0x54,0x59,0x50,0x45
0000ac  5f454343          DCB      0x5f,0x45,0x43,0x43
0000b0  5f505052          DCB      0x5f,0x50,0x50,0x52
0000b4  5f524553          DCB      0x5f,0x52,0x45,0x53
0000b8  45543a20          DCB      0x45,0x54,0x3a,0x20
0000bc  20726573          DCB      0x20,0x72,0x65,0x73
0000c0  756c7453          DCB      0x75,0x6c,0x74,0x53
0000c4  74617475          DCB      0x74,0x61,0x74,0x75
0000c8  73203d20          DCB      0x73,0x20,0x3d,0x20
0000cc  30782530          DCB      0x30,0x78,0x25,0x30
0000d0  34782c20          DCB      0x34,0x78,0x2c,0x20
0000d4  7265616c          DCB      0x72,0x65,0x61,0x6c
0000d8  20656363          DCB      0x20,0x65,0x63,0x63
0000dc  20646174          DCB      0x20,0x64,0x61,0x74
0000e0  61206c65          DCB      0x61,0x20,0x6c,0x65
0000e4  6e203d20          DCB      0x6e,0x20,0x3d,0x20
0000e8  25642d2d          DCB      0x25,0x64,0x2d,0x2d
0000ec  2d0d0a00          DCB      0x2d,0x0d,0x0a,0x00
0000f0  0d0a3c2d          DCB      0x0d,0x0a,0x3c,0x2d
0000f4  2d2d2043          DCB      0x2d,0x2d,0x20,0x43
0000f8  4152445f          DCB      0x41,0x52,0x44,0x5f
0000fc  4d455353          DCB      0x4d,0x45,0x53,0x53
000100  4147455f          DCB      0x41,0x47,0x45,0x5f
000104  54595045          DCB      0x54,0x59,0x50,0x45
000108  5f454343          DCB      0x5f,0x45,0x43,0x43
00010c  5f444341          DCB      0x5f,0x44,0x43,0x41
000110  5f524541          DCB      0x5f,0x52,0x45,0x41
000114  443a2020          DCB      0x44,0x3a,0x20,0x20
000118  72657375          DCB      0x72,0x65,0x73,0x75
00011c  6c745374          DCB      0x6c,0x74,0x53,0x74
000120  61747573          DCB      0x61,0x74,0x75,0x73
000124  203d2030          DCB      0x20,0x3d,0x20,0x30
000128  78253034          DCB      0x78,0x25,0x30,0x34
00012c  782c2072          DCB      0x78,0x2c,0x20,0x72
000130  65616c20          DCB      0x65,0x61,0x6c,0x20
000134  65636320          DCB      0x65,0x63,0x63,0x20
000138  64617461          DCB      0x64,0x61,0x74,0x61
00013c  206c656e          DCB      0x20,0x6c,0x65,0x6e
000140  203d2025          DCB      0x20,0x3d,0x20,0x25
000144  642d2d2d          DCB      0x64,0x2d,0x2d,0x2d
000148  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
00014c  0d0a3c2d          DCB      0x0d,0x0a,0x3c,0x2d
000150  2d2d2043          DCB      0x2d,0x2d,0x20,0x43
000154  4152445f          DCB      0x41,0x52,0x44,0x5f
000158  4d455353          DCB      0x4d,0x45,0x53,0x53
00015c  4147455f          DCB      0x41,0x47,0x45,0x5f
000160  54595045          DCB      0x54,0x59,0x50,0x45
000164  5f454343          DCB      0x5f,0x45,0x43,0x43
000168  5f454443          DCB      0x5f,0x45,0x44,0x43
00016c  415f4445          DCB      0x41,0x5f,0x44,0x45
000170  44554354          DCB      0x44,0x55,0x43,0x54
000174  3a202072          DCB      0x3a,0x20,0x20,0x72
000178  6573756c          DCB      0x65,0x73,0x75,0x6c
00017c  74537461          DCB      0x74,0x53,0x74,0x61
000180  74757320          DCB      0x74,0x75,0x73,0x20
000184  3d203078          DCB      0x3d,0x20,0x30,0x78
000188  25303478          DCB      0x25,0x30,0x34,0x78
00018c  2c207265          DCB      0x2c,0x20,0x72,0x65
000190  616c2065          DCB      0x61,0x6c,0x20,0x65
000194  63632064          DCB      0x63,0x63,0x20,0x64
000198  61746120          DCB      0x61,0x74,0x61,0x20
00019c  6c656e20          DCB      0x6c,0x65,0x6e,0x20
0001a0  3d202564          DCB      0x3d,0x20,0x25,0x64
0001a4  2d2d2d0d          DCB      0x2d,0x2d,0x2d,0x0d
0001a8  0a000000          DCB      0x0a,0x00,0x00,0x00
0001ac  0d0a3c2d          DCB      0x0d,0x0a,0x3c,0x2d
0001b0  2d2d2043          DCB      0x2d,0x2d,0x20,0x43
0001b4  4152445f          DCB      0x41,0x52,0x44,0x5f
0001b8  4d455353          DCB      0x4d,0x45,0x53,0x53
0001bc  4147455f          DCB      0x41,0x47,0x45,0x5f
0001c0  54595045          DCB      0x54,0x59,0x50,0x45
0001c4  5f454343          DCB      0x5f,0x45,0x43,0x43
0001c8  5f4c4f43          DCB      0x5f,0x4c,0x4f,0x43
0001cc  4b5f4341          DCB      0x4b,0x5f,0x43,0x41
0001d0  52443a20          DCB      0x52,0x44,0x3a,0x20
0001d4  20726573          DCB      0x20,0x72,0x65,0x73
0001d8  756c7453          DCB      0x75,0x6c,0x74,0x53
0001dc  74617475          DCB      0x74,0x61,0x74,0x75
0001e0  73203d20          DCB      0x73,0x20,0x3d,0x20
0001e4  30782530          DCB      0x30,0x78,0x25,0x30
0001e8  34782c20          DCB      0x34,0x78,0x2c,0x20
0001ec  7265616c          DCB      0x72,0x65,0x61,0x6c
0001f0  20656363          DCB      0x20,0x65,0x63,0x63
0001f4  20646174          DCB      0x20,0x64,0x61,0x74
0001f8  61206c65          DCB      0x61,0x20,0x6c,0x65
0001fc  6e203d20          DCB      0x6e,0x20,0x3d,0x20
000200  25642d2d          DCB      0x25,0x64,0x2d,0x2d
000204  2d0d0a00          DCB      0x2d,0x0d,0x0a,0x00
000208  0d0a3c2d          DCB      0x0d,0x0a,0x3c,0x2d
00020c  2d2d2043          DCB      0x2d,0x2d,0x20,0x43
000210  4152445f          DCB      0x41,0x52,0x44,0x5f
000214  4d455353          DCB      0x4d,0x45,0x53,0x53
000218  4147455f          DCB      0x41,0x47,0x45,0x5f
00021c  54595045          DCB      0x54,0x59,0x50,0x45
000220  5f454343          DCB      0x5f,0x45,0x43,0x43
000224  5f534947          DCB      0x5f,0x53,0x49,0x47
000228  4e5f4f4e          DCB      0x4e,0x5f,0x4f,0x4e
00022c  5f515545          DCB      0x5f,0x51,0x55,0x45
000230  52593a20          DCB      0x52,0x59,0x3a,0x20
000234  20726573          DCB      0x20,0x72,0x65,0x73
000238  756c7453          DCB      0x75,0x6c,0x74,0x53
00023c  74617475          DCB      0x74,0x61,0x74,0x75
000240  73203d20          DCB      0x73,0x20,0x3d,0x20
000244  30782530          DCB      0x30,0x78,0x25,0x30
000248  34782c20          DCB      0x34,0x78,0x2c,0x20
00024c  7265616c          DCB      0x72,0x65,0x61,0x6c
000250  20656363          DCB      0x20,0x65,0x63,0x63
000254  20646174          DCB      0x20,0x64,0x61,0x74
000258  61206c65          DCB      0x61,0x20,0x6c,0x65
00025c  6e203d20          DCB      0x6e,0x20,0x3d,0x20
000260  25642d2d          DCB      0x25,0x64,0x2d,0x2d
000264  2d0d0a00          DCB      0x2d,0x0d,0x0a,0x00
000268  0d0a3c2d          DCB      0x0d,0x0a,0x3c,0x2d
00026c  2d2d2043          DCB      0x2d,0x2d,0x20,0x43
000270  4152445f          DCB      0x41,0x52,0x44,0x5f
000274  4d455353          DCB      0x4d,0x45,0x53,0x53
000278  4147455f          DCB      0x41,0x47,0x45,0x5f
00027c  54595045          DCB      0x54,0x59,0x50,0x45
000280  5f454343          DCB      0x5f,0x45,0x43,0x43
000284  5f534947          DCB      0x5f,0x53,0x49,0x47
000288  4e5f4f4e          DCB      0x4e,0x5f,0x4f,0x4e
00028c  3a202072          DCB      0x3a,0x20,0x20,0x72
000290  6573756c          DCB      0x65,0x73,0x75,0x6c
000294  74537461          DCB      0x74,0x53,0x74,0x61
000298  74757320          DCB      0x74,0x75,0x73,0x20
00029c  3d203078          DCB      0x3d,0x20,0x30,0x78
0002a0  25303478          DCB      0x25,0x30,0x34,0x78
0002a4  2c207265          DCB      0x2c,0x20,0x72,0x65
0002a8  616c2065          DCB      0x61,0x6c,0x20,0x65
0002ac  63632064          DCB      0x63,0x63,0x20,0x64
0002b0  61746120          DCB      0x61,0x74,0x61,0x20
0002b4  6c656e20          DCB      0x6c,0x65,0x6e,0x20
0002b8  3d202564          DCB      0x3d,0x20,0x25,0x64
0002bc  2d2d2d0d          DCB      0x2d,0x2d,0x2d,0x0d
0002c0  0a000000          DCB      0x0a,0x00,0x00,0x00
0002c4  4543434c          DCB      0x45,0x43,0x43,0x4c
0002c8  6962496e          DCB      0x69,0x62,0x49,0x6e
0002cc  69742870          DCB      0x69,0x74,0x28,0x70
0002d0  70725265          DCB      0x70,0x72,0x52,0x65
0002d4  73657429          DCB      0x73,0x65,0x74,0x29
0002d8  3a207574          DCB      0x3a,0x20,0x75,0x74
0002dc  6354696d          DCB      0x63,0x54,0x69,0x6d
0002e0  65203d20          DCB      0x65,0x20,0x3d,0x20
0002e4  25642c20          DCB      0x25,0x64,0x2c,0x20
0002e8  65706d55          DCB      0x65,0x70,0x6d,0x55
0002ec  54435469          DCB      0x54,0x43,0x54,0x69
0002f0  6d65203d          DCB      0x6d,0x65,0x20,0x3d
0002f4  2025642c          DCB      0x20,0x25,0x64,0x2c
0002f8  20736572          DCB      0x20,0x73,0x65,0x72
0002fc  69616c4e          DCB      0x69,0x61,0x6c,0x4e
000300  756d6265          DCB      0x75,0x6d,0x62,0x65
000304  72203d20          DCB      0x72,0x20,0x3d,0x20
000308  25642e2e          DCB      0x25,0x64,0x2e,0x2e
00030c  2e0d0a00          DCB      0x2e,0x0d,0x0a,0x00
000310  4543434c          DCB      0x45,0x43,0x43,0x4c
000314  6962496e          DCB      0x69,0x62,0x49,0x6e
000318  69742870          DCB      0x69,0x74,0x28,0x70
00031c  70725265          DCB      0x70,0x72,0x52,0x65
000320  73657429          DCB      0x73,0x65,0x74,0x29
000324  3a20544d          DCB      0x3a,0x20,0x54,0x4d
000328  4167656e          DCB      0x41,0x67,0x65,0x6e
00032c  744e756d          DCB      0x74,0x4e,0x75,0x6d
000330  62657220          DCB      0x62,0x65,0x72,0x20
000334  5b307825          DCB      0x5b,0x30,0x78,0x25
000338  3032782c          DCB      0x30,0x32,0x78,0x2c
00033c  20307825          DCB      0x20,0x30,0x78,0x25
000340  3032782c          DCB      0x30,0x32,0x78,0x2c
000344  20307825          DCB      0x20,0x30,0x78,0x25
000348  3032782c          DCB      0x30,0x32,0x78,0x2c
00034c  20307825          DCB      0x20,0x30,0x78,0x25
000350  3032785d          DCB      0x30,0x32,0x78,0x5d
000354  202e2e2e          DCB      0x20,0x2e,0x2e,0x2e
000358  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
00035c  4543434c          DCB      0x45,0x43,0x43,0x4c
000360  6962496e          DCB      0x69,0x62,0x49,0x6e
000364  69742843          DCB      0x69,0x74,0x28,0x43
000368  6f6d6d61          DCB      0x6f,0x6d,0x6d,0x61
00036c  6e64293a          DCB      0x6e,0x64,0x29,0x3a
000370  20202020          DCB      0x20,0x20,0x20,0x20
000374  2073697a          DCB      0x20,0x73,0x69,0x7a
000378  656f6628          DCB      0x65,0x6f,0x66,0x28
00037c  45434343          DCB      0x45,0x43,0x43,0x43
000380  6d645050          DCB      0x6d,0x64,0x50,0x50
000384  52526573          DCB      0x52,0x52,0x65,0x73
000388  65745265          DCB      0x65,0x74,0x52,0x65
00038c  71756573          DCB      0x71,0x75,0x65,0x73
000390  74446174          DCB      0x74,0x44,0x61,0x74
000394  61292020          DCB      0x61,0x29,0x20,0x20
000398  20202020          DCB      0x20,0x20,0x20,0x20
00039c  20202020          DCB      0x20,0x20,0x20,0x20
0003a0  20203d20          DCB      0x20,0x20,0x3d,0x20
0003a4  25642028          DCB      0x25,0x64,0x20,0x28
0003a8  25642921          DCB      0x25,0x64,0x29,0x21
0003ac  210a0000          DCB      0x21,0x0a,0x00,0x00
0003b0  20202020          DCB      0x20,0x20,0x20,0x20
0003b4  20202020          DCB      0x20,0x20,0x20,0x20
0003b8  20202020          DCB      0x20,0x20,0x20,0x20
0003bc  20202020          DCB      0x20,0x20,0x20,0x20
0003c0  20202020          DCB      0x20,0x20,0x20,0x20
0003c4  20202020          DCB      0x20,0x20,0x20,0x20
0003c8  2073697a          DCB      0x20,0x73,0x69,0x7a
0003cc  656f6628          DCB      0x65,0x6f,0x66,0x28
0003d0  45434343          DCB      0x45,0x43,0x43,0x43
0003d4  6d645050          DCB      0x6d,0x64,0x50,0x50
0003d8  52526573          DCB      0x52,0x52,0x65,0x73
0003dc  65745265          DCB      0x65,0x74,0x52,0x65
0003e0  73706f6e          DCB      0x73,0x70,0x6f,0x6e
0003e4  73654461          DCB      0x73,0x65,0x44,0x61
0003e8  74612920          DCB      0x74,0x61,0x29,0x20
0003ec  20202020          DCB      0x20,0x20,0x20,0x20
0003f0  20202020          DCB      0x20,0x20,0x20,0x20
0003f4  20203d20          DCB      0x20,0x20,0x3d,0x20
0003f8  25642028          DCB      0x25,0x64,0x20,0x28
0003fc  25642921          DCB      0x25,0x64,0x29,0x21
000400  210a0000          DCB      0x21,0x0a,0x00,0x00
000404  20202020          DCB      0x20,0x20,0x20,0x20
000408  20202020          DCB      0x20,0x20,0x20,0x20
00040c  20202020          DCB      0x20,0x20,0x20,0x20
000410  20202020          DCB      0x20,0x20,0x20,0x20
000414  20202020          DCB      0x20,0x20,0x20,0x20
000418  20202020          DCB      0x20,0x20,0x20,0x20
00041c  2073697a          DCB      0x20,0x73,0x69,0x7a
000420  656f6628          DCB      0x65,0x6f,0x66,0x28
000424  45434343          DCB      0x45,0x43,0x43,0x43
000428  6d644443          DCB      0x6d,0x64,0x44,0x43
00042c  41526561          DCB      0x41,0x52,0x65,0x61
000430  64526571          DCB      0x64,0x52,0x65,0x71
000434  75657374          DCB      0x75,0x65,0x73,0x74
000438  44617461          DCB      0x44,0x61,0x74,0x61
00043c  29202020          DCB      0x29,0x20,0x20,0x20
000440  20202020          DCB      0x20,0x20,0x20,0x20
000444  20202020          DCB      0x20,0x20,0x20,0x20
000448  203d2025          DCB      0x20,0x3d,0x20,0x25
00044c  64202825          DCB      0x64,0x20,0x28,0x25
000450  64292121          DCB      0x64,0x29,0x21,0x21
000454  0a000000          DCB      0x0a,0x00,0x00,0x00
000458  20202020          DCB      0x20,0x20,0x20,0x20
00045c  20202020          DCB      0x20,0x20,0x20,0x20
000460  20202020          DCB      0x20,0x20,0x20,0x20
000464  20202020          DCB      0x20,0x20,0x20,0x20
000468  20202020          DCB      0x20,0x20,0x20,0x20
00046c  20202020          DCB      0x20,0x20,0x20,0x20
000470  2073697a          DCB      0x20,0x73,0x69,0x7a
000474  656f6628          DCB      0x65,0x6f,0x66,0x28
000478  45434343          DCB      0x45,0x43,0x43,0x43
00047c  6d644443          DCB      0x6d,0x64,0x44,0x43
000480  41526561          DCB      0x41,0x52,0x65,0x61
000484  64526573          DCB      0x64,0x52,0x65,0x73
000488  706f6e73          DCB      0x70,0x6f,0x6e,0x73
00048c  65537563          DCB      0x65,0x53,0x75,0x63
000490  63657373          DCB      0x63,0x65,0x73,0x73
000494  44617461          DCB      0x44,0x61,0x74,0x61
000498  29202020          DCB      0x29,0x20,0x20,0x20
00049c  203d2025          DCB      0x20,0x3d,0x20,0x25
0004a0  64202825          DCB      0x64,0x20,0x28,0x25
0004a4  64292121          DCB      0x64,0x29,0x21,0x21
0004a8  0a000000          DCB      0x0a,0x00,0x00,0x00
0004ac  20202020          DCB      0x20,0x20,0x20,0x20
0004b0  20202020          DCB      0x20,0x20,0x20,0x20
0004b4  20202020          DCB      0x20,0x20,0x20,0x20
0004b8  20202020          DCB      0x20,0x20,0x20,0x20
0004bc  20202020          DCB      0x20,0x20,0x20,0x20
0004c0  20202020          DCB      0x20,0x20,0x20,0x20
0004c4  2073697a          DCB      0x20,0x73,0x69,0x7a
0004c8  656f6628          DCB      0x65,0x6f,0x66,0x28
0004cc  45434343          DCB      0x45,0x43,0x43,0x43
0004d0  6d644443          DCB      0x6d,0x64,0x44,0x43
0004d4  41526561          DCB      0x41,0x52,0x65,0x61
0004d8  64526573          DCB      0x64,0x52,0x65,0x73
0004dc  706f6e73          DCB      0x70,0x6f,0x6e,0x73
0004e0  65457272          DCB      0x65,0x45,0x72,0x72
0004e4  6f723144          DCB      0x6f,0x72,0x31,0x44
0004e8  61746129          DCB      0x61,0x74,0x61,0x29
0004ec  20202020          DCB      0x20,0x20,0x20,0x20
0004f0  203d2025          DCB      0x20,0x3d,0x20,0x25
0004f4  64202825          DCB      0x64,0x20,0x28,0x25
0004f8  64292121          DCB      0x64,0x29,0x21,0x21
0004fc  0a000000          DCB      0x0a,0x00,0x00,0x00
000500  20202020          DCB      0x20,0x20,0x20,0x20
000504  20202020          DCB      0x20,0x20,0x20,0x20
000508  20202020          DCB      0x20,0x20,0x20,0x20
00050c  20202020          DCB      0x20,0x20,0x20,0x20
000510  20202020          DCB      0x20,0x20,0x20,0x20
000514  20202020          DCB      0x20,0x20,0x20,0x20
000518  2073697a          DCB      0x20,0x73,0x69,0x7a
00051c  656f6628          DCB      0x65,0x6f,0x66,0x28
000520  45434343          DCB      0x45,0x43,0x43,0x43
000524  6d644443          DCB      0x6d,0x64,0x44,0x43
000528  41526561          DCB      0x41,0x52,0x65,0x61
00052c  64526573          DCB      0x64,0x52,0x65,0x73
000530  706f6e73          DCB      0x70,0x6f,0x6e,0x73
000534  65457272          DCB      0x65,0x45,0x72,0x72
000538  6f723244          DCB      0x6f,0x72,0x32,0x44
00053c  61746129          DCB      0x61,0x74,0x61,0x29
000540  20202020          DCB      0x20,0x20,0x20,0x20
000544  203d2025          DCB      0x20,0x3d,0x20,0x25
000548  64202825          DCB      0x64,0x20,0x28,0x25
00054c  64292121          DCB      0x64,0x29,0x21,0x21
000550  0a000000          DCB      0x0a,0x00,0x00,0x00
000554  20202020          DCB      0x20,0x20,0x20,0x20
000558  20202020          DCB      0x20,0x20,0x20,0x20
00055c  20202020          DCB      0x20,0x20,0x20,0x20
000560  20202020          DCB      0x20,0x20,0x20,0x20
000564  20202020          DCB      0x20,0x20,0x20,0x20
000568  20202020          DCB      0x20,0x20,0x20,0x20
00056c  2073697a          DCB      0x20,0x73,0x69,0x7a
000570  656f6628          DCB      0x65,0x6f,0x66,0x28
000574  45434343          DCB      0x45,0x43,0x43,0x43
000578  6d644544          DCB      0x6d,0x64,0x45,0x44
00057c  43414465          DCB      0x43,0x41,0x44,0x65
000580  64756374          DCB      0x64,0x75,0x63,0x74
000584  52657175          DCB      0x52,0x65,0x71,0x75
000588  65737444          DCB      0x65,0x73,0x74,0x44
00058c  61746129          DCB      0x61,0x74,0x61,0x29
000590  20202020          DCB      0x20,0x20,0x20,0x20
000594  20202020          DCB      0x20,0x20,0x20,0x20
000598  203d2025          DCB      0x20,0x3d,0x20,0x25
00059c  64202825          DCB      0x64,0x20,0x28,0x25
0005a0  64292121          DCB      0x64,0x29,0x21,0x21
0005a4  0a000000          DCB      0x0a,0x00,0x00,0x00
0005a8  20202020          DCB      0x20,0x20,0x20,0x20
0005ac  20202020          DCB      0x20,0x20,0x20,0x20
0005b0  20202020          DCB      0x20,0x20,0x20,0x20
0005b4  20202020          DCB      0x20,0x20,0x20,0x20
0005b8  20202020          DCB      0x20,0x20,0x20,0x20
0005bc  20202020          DCB      0x20,0x20,0x20,0x20
0005c0  2073697a          DCB      0x20,0x73,0x69,0x7a
0005c4  656f6628          DCB      0x65,0x6f,0x66,0x28
0005c8  45434343          DCB      0x45,0x43,0x43,0x43
0005cc  6d644544          DCB      0x6d,0x64,0x45,0x44
0005d0  43414465          DCB      0x43,0x41,0x44,0x65
0005d4  64756374          DCB      0x64,0x75,0x63,0x74
0005d8  52657370          DCB      0x52,0x65,0x73,0x70
0005dc  6f6e7365          DCB      0x6f,0x6e,0x73,0x65
0005e0  44617461          DCB      0x44,0x61,0x74,0x61
0005e4  29202020          DCB      0x29,0x20,0x20,0x20
0005e8  20202020          DCB      0x20,0x20,0x20,0x20
0005ec  203d2025          DCB      0x20,0x3d,0x20,0x25
0005f0  64202825          DCB      0x64,0x20,0x28,0x25
0005f4  64292121          DCB      0x64,0x29,0x21,0x21
0005f8  0a000000          DCB      0x0a,0x00,0x00,0x00
0005fc  20202020          DCB      0x20,0x20,0x20,0x20
000600  20202020          DCB      0x20,0x20,0x20,0x20
000604  20202020          DCB      0x20,0x20,0x20,0x20
000608  20202020          DCB      0x20,0x20,0x20,0x20
00060c  20202020          DCB      0x20,0x20,0x20,0x20
000610  20202020          DCB      0x20,0x20,0x20,0x20
000614  2073697a          DCB      0x20,0x73,0x69,0x7a
000618  656f6628          DCB      0x65,0x6f,0x66,0x28
00061c  45434343          DCB      0x45,0x43,0x43,0x43
000620  6d644c6f          DCB      0x6d,0x64,0x4c,0x6f
000624  636b4361          DCB      0x63,0x6b,0x43,0x61
000628  72645265          DCB      0x72,0x64,0x52,0x65
00062c  71756573          DCB      0x71,0x75,0x65,0x73
000630  74446174          DCB      0x74,0x44,0x61,0x74
000634  61292020          DCB      0x61,0x29,0x20,0x20
000638  20202020          DCB      0x20,0x20,0x20,0x20
00063c  20202020          DCB      0x20,0x20,0x20,0x20
000640  203d2025          DCB      0x20,0x3d,0x20,0x25
000644  64202825          DCB      0x64,0x20,0x28,0x25
000648  64292121          DCB      0x64,0x29,0x21,0x21
00064c  0a000000          DCB      0x0a,0x00,0x00,0x00
000650  20202020          DCB      0x20,0x20,0x20,0x20
000654  20202020          DCB      0x20,0x20,0x20,0x20
000658  20202020          DCB      0x20,0x20,0x20,0x20
00065c  20202020          DCB      0x20,0x20,0x20,0x20
000660  20202020          DCB      0x20,0x20,0x20,0x20
000664  20202020          DCB      0x20,0x20,0x20,0x20
000668  2073697a          DCB      0x20,0x73,0x69,0x7a
00066c  656f6628          DCB      0x65,0x6f,0x66,0x28
000670  45434343          DCB      0x45,0x43,0x43,0x43
000674  6d644c6f          DCB      0x6d,0x64,0x4c,0x6f
000678  636b4361          DCB      0x63,0x6b,0x43,0x61
00067c  72645265          DCB      0x72,0x64,0x52,0x65
000680  73706f6e          DCB      0x73,0x70,0x6f,0x6e
000684  73654461          DCB      0x73,0x65,0x44,0x61
000688  74612920          DCB      0x74,0x61,0x29,0x20
00068c  20202020          DCB      0x20,0x20,0x20,0x20
000690  20202020          DCB      0x20,0x20,0x20,0x20
000694  203d2025          DCB      0x20,0x3d,0x20,0x25
000698  64202825          DCB      0x64,0x20,0x28,0x25
00069c  64292121          DCB      0x64,0x29,0x21,0x21
0006a0  0a000000          DCB      0x0a,0x00,0x00,0x00
0006a4  20202020          DCB      0x20,0x20,0x20,0x20
0006a8  20202020          DCB      0x20,0x20,0x20,0x20
0006ac  20202020          DCB      0x20,0x20,0x20,0x20
0006b0  20202020          DCB      0x20,0x20,0x20,0x20
0006b4  20202020          DCB      0x20,0x20,0x20,0x20
0006b8  20202020          DCB      0x20,0x20,0x20,0x20
0006bc  2073697a          DCB      0x20,0x73,0x69,0x7a
0006c0  656f6628          DCB      0x65,0x6f,0x66,0x28
0006c4  45434343          DCB      0x45,0x43,0x43,0x43
0006c8  6d645050          DCB      0x6d,0x64,0x50,0x50
0006cc  52536967          DCB      0x52,0x53,0x69,0x67
0006d0  6e4f6e52          DCB      0x6e,0x4f,0x6e,0x52
0006d4  65717565          DCB      0x65,0x71,0x75,0x65
0006d8  73744461          DCB      0x73,0x74,0x44,0x61
0006dc  74612920          DCB      0x74,0x61,0x29,0x20
0006e0  20202020          DCB      0x20,0x20,0x20,0x20
0006e4  20202020          DCB      0x20,0x20,0x20,0x20
0006e8  20203d20          DCB      0x20,0x20,0x3d,0x20
0006ec  25642028          DCB      0x25,0x64,0x20,0x28
0006f0  25642921          DCB      0x25,0x64,0x29,0x21
0006f4  210a0000          DCB      0x21,0x0a,0x00,0x00
0006f8  20202020          DCB      0x20,0x20,0x20,0x20
0006fc  20202020          DCB      0x20,0x20,0x20,0x20
000700  20202020          DCB      0x20,0x20,0x20,0x20
000704  20202020          DCB      0x20,0x20,0x20,0x20
000708  20202020          DCB      0x20,0x20,0x20,0x20
00070c  20202020          DCB      0x20,0x20,0x20,0x20
000710  2073697a          DCB      0x20,0x73,0x69,0x7a
000714  656f6628          DCB      0x65,0x6f,0x66,0x28
000718  45434343          DCB      0x45,0x43,0x43,0x43
00071c  6d645050          DCB      0x6d,0x64,0x50,0x50
000720  52536967          DCB      0x52,0x53,0x69,0x67
000724  6e4f6e52          DCB      0x6e,0x4f,0x6e,0x52
000728  6573706f          DCB      0x65,0x73,0x70,0x6f
00072c  6e736544          DCB      0x6e,0x73,0x65,0x44
000730  61746129          DCB      0x61,0x74,0x61,0x29
000734  20202020          DCB      0x20,0x20,0x20,0x20
000738  20202020          DCB      0x20,0x20,0x20,0x20
00073c  20203d20          DCB      0x20,0x20,0x3d,0x20
000740  25642028          DCB      0x25,0x64,0x20,0x28
000744  25642921          DCB      0x25,0x64,0x29,0x21
000748  210a0000          DCB      0x21,0x0a,0x00,0x00
00074c  4543434c          DCB      0x45,0x43,0x43,0x4c
000750  6962496e          DCB      0x69,0x62,0x49,0x6e
000754  6974284c          DCB      0x69,0x74,0x28,0x4c
000758  6f67293a          DCB      0x6f,0x67,0x29,0x3a
00075c  20202020          DCB      0x20,0x20,0x20,0x20
000760  20202020          DCB      0x20,0x20,0x20,0x20
000764  2073697a          DCB      0x20,0x73,0x69,0x7a
000768  656f6628          DCB      0x65,0x6f,0x66,0x28
00076c  4543434c          DCB      0x45,0x43,0x43,0x4c
000770  6f674865          DCB      0x6f,0x67,0x48,0x65
000774  61646572          DCB      0x61,0x64,0x65,0x72
000778  29202020          DCB      0x29,0x20,0x20,0x20
00077c  20202020          DCB      0x20,0x20,0x20,0x20
000780  20202020          DCB      0x20,0x20,0x20,0x20
000784  20202020          DCB      0x20,0x20,0x20,0x20
000788  20202020          DCB      0x20,0x20,0x20,0x20
00078c  20202020          DCB      0x20,0x20,0x20,0x20
000790  203d2025          DCB      0x20,0x3d,0x20,0x25
000794  64202825          DCB      0x64,0x20,0x28,0x25
000798  64292121          DCB      0x64,0x29,0x21,0x21
00079c  0a000000          DCB      0x0a,0x00,0x00,0x00
0007a0  20202020          DCB      0x20,0x20,0x20,0x20
0007a4  20202020          DCB      0x20,0x20,0x20,0x20
0007a8  20202020          DCB      0x20,0x20,0x20,0x20
0007ac  20202020          DCB      0x20,0x20,0x20,0x20
0007b0  20202020          DCB      0x20,0x20,0x20,0x20
0007b4  20202020          DCB      0x20,0x20,0x20,0x20
0007b8  2073697a          DCB      0x20,0x73,0x69,0x7a
0007bc  656f6628          DCB      0x65,0x6f,0x66,0x28
0007c0  4543434c          DCB      0x45,0x43,0x43,0x4c
0007c4  6f675461          DCB      0x6f,0x67,0x54,0x61
0007c8  696c2920          DCB      0x69,0x6c,0x29,0x20
0007cc  20202020          DCB      0x20,0x20,0x20,0x20
0007d0  20202020          DCB      0x20,0x20,0x20,0x20
0007d4  20202020          DCB      0x20,0x20,0x20,0x20
0007d8  20202020          DCB      0x20,0x20,0x20,0x20
0007dc  20202020          DCB      0x20,0x20,0x20,0x20
0007e0  20202020          DCB      0x20,0x20,0x20,0x20
0007e4  203d2025          DCB      0x20,0x3d,0x20,0x25
0007e8  64202825          DCB      0x64,0x20,0x28,0x25
0007ec  64292121          DCB      0x64,0x29,0x21,0x21
0007f0  0a000000          DCB      0x0a,0x00,0x00,0x00
0007f4  20202020          DCB      0x20,0x20,0x20,0x20
0007f8  20202020          DCB      0x20,0x20,0x20,0x20
0007fc  20202020          DCB      0x20,0x20,0x20,0x20
000800  20202020          DCB      0x20,0x20,0x20,0x20
000804  20202020          DCB      0x20,0x20,0x20,0x20
000808  20202020          DCB      0x20,0x20,0x20,0x20
00080c  2073697a          DCB      0x20,0x73,0x69,0x7a
000810  656f6628          DCB      0x65,0x6f,0x66,0x28
000814  45434344          DCB      0x45,0x43,0x43,0x44
000818  65647563          DCB      0x65,0x64,0x75,0x63
00081c  744c6f67          DCB      0x74,0x4c,0x6f,0x67
000820  426f6479          DCB      0x42,0x6f,0x64,0x79
000824  29202020          DCB      0x29,0x20,0x20,0x20
000828  20202020          DCB      0x20,0x20,0x20,0x20
00082c  20202020          DCB      0x20,0x20,0x20,0x20
000830  20202020          DCB      0x20,0x20,0x20,0x20
000834  20202020          DCB      0x20,0x20,0x20,0x20
000838  203d2025          DCB      0x20,0x3d,0x20,0x25
00083c  64202825          DCB      0x64,0x20,0x28,0x25
000840  64292121          DCB      0x64,0x29,0x21,0x21
000844  0a000000          DCB      0x0a,0x00,0x00,0x00
000848  20202020          DCB      0x20,0x20,0x20,0x20
00084c  20202020          DCB      0x20,0x20,0x20,0x20
000850  20202020          DCB      0x20,0x20,0x20,0x20
000854  20202020          DCB      0x20,0x20,0x20,0x20
000858  20202020          DCB      0x20,0x20,0x20,0x20
00085c  20202020          DCB      0x20,0x20,0x20,0x20
000860  2073697a          DCB      0x20,0x73,0x69,0x7a
000864  656f6628          DCB      0x65,0x6f,0x66,0x28
000868  45434352          DCB      0x45,0x43,0x43,0x52
00086c  6553656e          DCB      0x65,0x53,0x65,0x6e
000870  644c6f67          DCB      0x64,0x4c,0x6f,0x67
000874  426f6479          DCB      0x42,0x6f,0x64,0x79
000878  29202020          DCB      0x29,0x20,0x20,0x20
00087c  20202020          DCB      0x20,0x20,0x20,0x20
000880  20202020          DCB      0x20,0x20,0x20,0x20
000884  20202020          DCB      0x20,0x20,0x20,0x20
000888  20202020          DCB      0x20,0x20,0x20,0x20
00088c  203d2025          DCB      0x20,0x3d,0x20,0x25
000890  64202825          DCB      0x64,0x20,0x28,0x25
000894  64292121          DCB      0x64,0x29,0x21,0x21
000898  0a000000          DCB      0x0a,0x00,0x00,0x00
00089c  20202020          DCB      0x20,0x20,0x20,0x20
0008a0  20202020          DCB      0x20,0x20,0x20,0x20
0008a4  20202020          DCB      0x20,0x20,0x20,0x20
0008a8  20202020          DCB      0x20,0x20,0x20,0x20
0008ac  20202020          DCB      0x20,0x20,0x20,0x20
0008b0  20202020          DCB      0x20,0x20,0x20,0x20
0008b4  2073697a          DCB      0x20,0x73,0x69,0x7a
0008b8  656f6628          DCB      0x65,0x6f,0x66,0x28
0008bc  4543434c          DCB      0x45,0x43,0x43,0x4c
0008c0  6f636b43          DCB      0x6f,0x63,0x6b,0x43
0008c4  6172644c          DCB      0x61,0x72,0x64,0x4c
0008c8  6f67426f          DCB      0x6f,0x67,0x42,0x6f
0008cc  64792920          DCB      0x64,0x79,0x29,0x20
0008d0  20202020          DCB      0x20,0x20,0x20,0x20
0008d4  20202020          DCB      0x20,0x20,0x20,0x20
0008d8  20202020          DCB      0x20,0x20,0x20,0x20
0008dc  20202020          DCB      0x20,0x20,0x20,0x20
0008e0  203d2025          DCB      0x20,0x3d,0x20,0x25
0008e4  64202825          DCB      0x64,0x20,0x28,0x25
0008e8  64292121          DCB      0x64,0x29,0x21,0x21
0008ec  0a000000          DCB      0x0a,0x00,0x00,0x00
0008f0  20202020          DCB      0x20,0x20,0x20,0x20
0008f4  20202020          DCB      0x20,0x20,0x20,0x20
0008f8  20202020          DCB      0x20,0x20,0x20,0x20
0008fc  20202020          DCB      0x20,0x20,0x20,0x20
000900  20202020          DCB      0x20,0x20,0x20,0x20
000904  20202020          DCB      0x20,0x20,0x20,0x20
000908  2073697a          DCB      0x20,0x73,0x69,0x7a
00090c  656f6628          DCB      0x65,0x6f,0x66,0x28
000910  45434342          DCB      0x45,0x43,0x43,0x42
000914  6c6b4665          DCB      0x6c,0x6b,0x46,0x65
000918  65646261          DCB      0x65,0x64,0x62,0x61
00091c  636b4c6f          DCB      0x63,0x6b,0x4c,0x6f
000920  67426f64          DCB      0x67,0x42,0x6f,0x64
000924  79292020          DCB      0x79,0x29,0x20,0x20
000928  20202020          DCB      0x20,0x20,0x20,0x20
00092c  20202020          DCB      0x20,0x20,0x20,0x20
000930  20202020          DCB      0x20,0x20,0x20,0x20
000934  203d2025          DCB      0x20,0x3d,0x20,0x25
000938  64202825          DCB      0x64,0x20,0x28,0x25
00093c  64292121          DCB      0x64,0x29,0x21,0x21
000940  0a000000          DCB      0x0a,0x00,0x00,0x00
000944  20202020          DCB      0x20,0x20,0x20,0x20
000948  20202020          DCB      0x20,0x20,0x20,0x20
00094c  20202020          DCB      0x20,0x20,0x20,0x20
000950  20202020          DCB      0x20,0x20,0x20,0x20
000954  20202020          DCB      0x20,0x20,0x20,0x20
000958  20202020          DCB      0x20,0x20,0x20,0x20
00095c  2073697a          DCB      0x20,0x73,0x69,0x7a
000960  656f6628          DCB      0x65,0x6f,0x66,0x28
000964  45434341          DCB      0x45,0x43,0x43,0x41
000968  75746f4c          DCB      0x75,0x74,0x6f,0x4c
00096c  6f61644c          DCB      0x6f,0x61,0x64,0x4c
000970  6f67426f          DCB      0x6f,0x67,0x42,0x6f
000974  64792920          DCB      0x64,0x79,0x29,0x20
000978  20202020          DCB      0x20,0x20,0x20,0x20
00097c  20202020          DCB      0x20,0x20,0x20,0x20
000980  20202020          DCB      0x20,0x20,0x20,0x20
000984  20202020          DCB      0x20,0x20,0x20,0x20
000988  203d2025          DCB      0x20,0x3d,0x20,0x25
00098c  64202825          DCB      0x64,0x20,0x28,0x25
000990  64292121          DCB      0x64,0x29,0x21,0x21
000994  0a000000          DCB      0x0a,0x00,0x00,0x00
000998  4543434c          DCB      0x45,0x43,0x43,0x4c
00099c  6962496e          DCB      0x69,0x62,0x49,0x6e
0009a0  69742853          DCB      0x69,0x74,0x28,0x53
0009a4  69676e20          DCB      0x69,0x67,0x6e,0x20
0009a8  4f6e2053          DCB      0x4f,0x6e,0x20,0x53
0009ac  6f636b65          DCB      0x6f,0x63,0x6b,0x65
0009b0  74293a20          DCB      0x74,0x29,0x3a,0x20
0009b4  2073697a          DCB      0x20,0x73,0x69,0x7a
0009b8  656f6628          DCB      0x65,0x6f,0x66,0x28
0009bc  45434343          DCB      0x45,0x43,0x43,0x43
0009c0  6d645369          DCB      0x6d,0x64,0x53,0x69
0009c4  676e4f6e          DCB      0x67,0x6e,0x4f,0x6e
0009c8  52657175          DCB      0x52,0x65,0x71,0x75
0009cc  65737453          DCB      0x65,0x73,0x74,0x53
0009d0  6f636b65          DCB      0x6f,0x63,0x6b,0x65
0009d4  74446174          DCB      0x74,0x44,0x61,0x74
0009d8  61292020          DCB      0x61,0x29,0x20,0x20
0009dc  20202020          DCB      0x20,0x20,0x20,0x20
0009e0  20202020          DCB      0x20,0x20,0x20,0x20
0009e4  203d2025          DCB      0x20,0x3d,0x20,0x25
0009e8  64202825          DCB      0x64,0x20,0x28,0x25
0009ec  64292121          DCB      0x64,0x29,0x21,0x21
0009f0  0a000000          DCB      0x0a,0x00,0x00,0x00
0009f4  20202020          DCB      0x20,0x20,0x20,0x20
0009f8  20202020          DCB      0x20,0x20,0x20,0x20
0009fc  20202020          DCB      0x20,0x20,0x20,0x20
000a00  20202020          DCB      0x20,0x20,0x20,0x20
000a04  20202020          DCB      0x20,0x20,0x20,0x20
000a08  20202020          DCB      0x20,0x20,0x20,0x20
000a0c  20202020          DCB      0x20,0x20,0x20,0x20
000a10  2073697a          DCB      0x20,0x73,0x69,0x7a
000a14  656f6628          DCB      0x65,0x6f,0x66,0x28
000a18  45434343          DCB      0x45,0x43,0x43,0x43
000a1c  6d645369          DCB      0x6d,0x64,0x53,0x69
000a20  676e4f6e          DCB      0x67,0x6e,0x4f,0x6e
000a24  52657370          DCB      0x52,0x65,0x73,0x70
000a28  6f6e7365          DCB      0x6f,0x6e,0x73,0x65
000a2c  536f636b          DCB      0x53,0x6f,0x63,0x6b
000a30  65744461          DCB      0x65,0x74,0x44,0x61
000a34  74612920          DCB      0x74,0x61,0x29,0x20
000a38  20202020          DCB      0x20,0x20,0x20,0x20
000a3c  20202020          DCB      0x20,0x20,0x20,0x20
000a40  203d2025          DCB      0x20,0x3d,0x20,0x25
000a44  64202825          DCB      0x64,0x20,0x28,0x25
000a48  64292121          DCB      0x64,0x29,0x21,0x21
000a4c  0a000000          DCB      0x0a,0x00,0x00,0x00
000a50  20202020          DCB      0x20,0x20,0x20,0x20
000a54  20202020          DCB      0x20,0x20,0x20,0x20
000a58  20202020          DCB      0x20,0x20,0x20,0x20
000a5c  20202020          DCB      0x20,0x20,0x20,0x20
000a60  20202020          DCB      0x20,0x20,0x20,0x20
000a64  20202020          DCB      0x20,0x20,0x20,0x20
000a68  20202020          DCB      0x20,0x20,0x20,0x20
000a6c  2073697a          DCB      0x20,0x73,0x69,0x7a
000a70  656f6628          DCB      0x65,0x6f,0x66,0x28
000a74  45434343          DCB      0x45,0x43,0x43,0x43
000a78  6d645369          DCB      0x6d,0x64,0x53,0x69
000a7c  676e4f6e          DCB      0x67,0x6e,0x4f,0x6e
000a80  436f6e66          DCB      0x43,0x6f,0x6e,0x66
000a84  69726d52          DCB      0x69,0x72,0x6d,0x52
000a88  65717565          DCB      0x65,0x71,0x75,0x65
000a8c  7374536f          DCB      0x73,0x74,0x53,0x6f
000a90  636b6574          DCB      0x63,0x6b,0x65,0x74
000a94  44617461          DCB      0x44,0x61,0x74,0x61
000a98  29202020          DCB      0x29,0x20,0x20,0x20
000a9c  203d2025          DCB      0x20,0x3d,0x20,0x25
000aa0  64202825          DCB      0x64,0x20,0x28,0x25
000aa4  64292121          DCB      0x64,0x29,0x21,0x21
000aa8  0a000000          DCB      0x0a,0x00,0x00,0x00
000aac  20202020          DCB      0x20,0x20,0x20,0x20
000ab0  20202020          DCB      0x20,0x20,0x20,0x20
000ab4  20202020          DCB      0x20,0x20,0x20,0x20
000ab8  20202020          DCB      0x20,0x20,0x20,0x20
000abc  20202020          DCB      0x20,0x20,0x20,0x20
000ac0  20202020          DCB      0x20,0x20,0x20,0x20
000ac4  20202020          DCB      0x20,0x20,0x20,0x20
000ac8  2073697a          DCB      0x20,0x73,0x69,0x7a
000acc  656f6628          DCB      0x65,0x6f,0x66,0x28
000ad0  45434343          DCB      0x45,0x43,0x43,0x43
000ad4  6d645369          DCB      0x6d,0x64,0x53,0x69
000ad8  676e4f6e          DCB      0x67,0x6e,0x4f,0x6e
000adc  436f6e66          DCB      0x43,0x6f,0x6e,0x66
000ae0  69726d52          DCB      0x69,0x72,0x6d,0x52
000ae4  6573706f          DCB      0x65,0x73,0x70,0x6f
000ae8  6e736553          DCB      0x6e,0x73,0x65,0x53
000aec  6f636b65          DCB      0x6f,0x63,0x6b,0x65
000af0  74446174          DCB      0x74,0x44,0x61,0x74
000af4  61292020          DCB      0x61,0x29,0x20,0x20
000af8  203d2025          DCB      0x20,0x3d,0x20,0x25
000afc  64202825          DCB      0x64,0x20,0x28,0x25
000b00  64292121          DCB      0x64,0x29,0x21,0x21
000b04  0a000000          DCB      0x0a,0x00,0x00,0x00
000b08  20232323          DCB      0x20,0x23,0x23,0x23
000b0c  20454343          DCB      0x20,0x45,0x43,0x43
000b10  4c696250          DCB      0x4c,0x69,0x62,0x50
000b14  726f6365          DCB      0x72,0x6f,0x63,0x65
000b18  7373205b          DCB      0x73,0x73,0x20,0x5b
000b1c  65646361          DCB      0x65,0x64,0x63,0x61
000b20  52656164          DCB      0x52,0x65,0x61,0x64
000b24  5d3a2063          DCB      0x5d,0x3a,0x20,0x63
000b28  61726449          DCB      0x61,0x72,0x64,0x49
000b2c  44427974          DCB      0x44,0x42,0x79,0x74
000b30  6573203d          DCB      0x65,0x73,0x20,0x3d
000b34  20256420          DCB      0x20,0x25,0x64,0x20
000b38  28257329          DCB      0x28,0x25,0x73,0x29
000b3c  205b3078          DCB      0x20,0x5b,0x30,0x78
000b40  25303258          DCB      0x25,0x30,0x32,0x58
000b44  2c203078          DCB      0x2c,0x20,0x30,0x78
000b48  25303258          DCB      0x25,0x30,0x32,0x58
000b4c  2c203078          DCB      0x2c,0x20,0x30,0x78
000b50  25303258          DCB      0x25,0x30,0x32,0x58
000b54  2c203078          DCB      0x2c,0x20,0x30,0x78
000b58  25303258          DCB      0x25,0x30,0x32,0x58
000b5c  2c203078          DCB      0x2c,0x20,0x30,0x78
000b60  25303258          DCB      0x25,0x30,0x32,0x58
000b64  2c203078          DCB      0x2c,0x20,0x30,0x78
000b68  25303258          DCB      0x25,0x30,0x32,0x58
000b6c  2c203078          DCB      0x2c,0x20,0x30,0x78
000b70  25303258          DCB      0x25,0x30,0x32,0x58
000b74  5d0a0000          DCB      0x5d,0x0a,0x00,0x00
000b78  20232323          DCB      0x20,0x23,0x23,0x23
000b7c  20454343          DCB      0x20,0x45,0x43,0x43
000b80  4c696250          DCB      0x4c,0x69,0x62,0x50
000b84  726f6365          DCB      0x72,0x6f,0x63,0x65
000b88  7373205b          DCB      0x73,0x73,0x20,0x5b
000b8c  65646361          DCB      0x65,0x64,0x63,0x61
000b90  52656164          DCB      0x52,0x65,0x61,0x64
000b94  5d3a2043          DCB      0x5d,0x3a,0x20,0x43
000b98  6172644d          DCB      0x61,0x72,0x64,0x4d
000b9c  6f6e6579          DCB      0x6f,0x6e,0x65,0x79
000ba0  203d2025          DCB      0x20,0x3d,0x20,0x25
000ba4  64205b30          DCB      0x64,0x20,0x5b,0x30
000ba8  78253032          DCB      0x78,0x25,0x30,0x32
000bac  582c2030          DCB      0x58,0x2c,0x20,0x30
000bb0  78253032          DCB      0x78,0x25,0x30,0x32
000bb4  582c2030          DCB      0x58,0x2c,0x20,0x30
000bb8  78253032          DCB      0x78,0x25,0x30,0x32
000bbc  585d0a00          DCB      0x58,0x5d,0x0a,0x00
000bc0  20232323          DCB      0x20,0x23,0x23,0x23
000bc4  20454343          DCB      0x20,0x45,0x43,0x43
000bc8  4c696250          DCB      0x4c,0x69,0x62,0x50
000bcc  726f6365          DCB      0x72,0x6f,0x63,0x65
000bd0  7373205b          DCB      0x73,0x73,0x20,0x5b
000bd4  65646361          DCB      0x65,0x64,0x63,0x61
000bd8  52656164          DCB      0x52,0x65,0x61,0x64
000bdc  5d3a2070          DCB      0x5d,0x3a,0x20,0x70
000be0  75727365          DCB      0x75,0x72,0x73,0x65
000be4  55736167          DCB      0x55,0x73,0x61,0x67
000be8  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000bec  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000bf0  203d2030          DCB      0x20,0x3d,0x20,0x30
000bf4  78253032          DCB      0x78,0x25,0x30,0x32
000bf8  582c2063          DCB      0x58,0x2c,0x20,0x63
000bfc  61726454          DCB      0x61,0x72,0x64,0x54
000c00  79706520          DCB      0x79,0x70,0x65,0x20
000c04  3d203078          DCB      0x3d,0x20,0x30,0x78
000c08  25303258          DCB      0x25,0x30,0x32,0x58
000c0c  0a000000          DCB      0x0a,0x00,0x00,0x00
000c10  20232323          DCB      0x20,0x23,0x23,0x23
000c14  20454343          DCB      0x20,0x45,0x43,0x43
000c18  4c696250          DCB      0x4c,0x69,0x62,0x50
000c1c  726f6365          DCB      0x72,0x6f,0x63,0x65
000c20  7373205b          DCB      0x73,0x73,0x20,0x5b
000c24  65646361          DCB      0x65,0x64,0x63,0x61
000c28  52656164          DCB      0x52,0x65,0x61,0x64
000c2c  5d202870          DCB      0x5d,0x20,0x28,0x70
000c30  75727365          DCB      0x75,0x72,0x73,0x65
000c34  55736167          DCB      0x55,0x73,0x61,0x67
000c38  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000c3c  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000c40  203a2062          DCB      0x20,0x3a,0x20,0x62
000c44  69743029          DCB      0x69,0x74,0x30,0x29
000c48  3a204163          DCB      0x3a,0x20,0x41,0x63
000c4c  74697661          DCB      0x74,0x69,0x76,0x61
000c50  7465640a          DCB      0x74,0x65,0x64,0x0a
000c54  00000000          DCB      0x00,0x00,0x00,0x00
000c58  20232323          DCB      0x20,0x23,0x23,0x23
000c5c  20454343          DCB      0x20,0x45,0x43,0x43
000c60  4c696250          DCB      0x4c,0x69,0x62,0x50
000c64  726f6365          DCB      0x72,0x6f,0x63,0x65
000c68  7373205b          DCB      0x73,0x73,0x20,0x5b
000c6c  65646361          DCB      0x65,0x64,0x63,0x61
000c70  52656164          DCB      0x52,0x65,0x61,0x64
000c74  5d202870          DCB      0x5d,0x20,0x28,0x70
000c78  75727365          DCB      0x75,0x72,0x73,0x65
000c7c  55736167          DCB      0x55,0x73,0x61,0x67
000c80  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000c84  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000c88  203a2062          DCB      0x20,0x3a,0x20,0x62
000c8c  69743029          DCB      0x69,0x74,0x30,0x29
000c90  3a206e6f          DCB      0x3a,0x20,0x6e,0x6f
000c94  74204163          DCB      0x74,0x20,0x41,0x63
000c98  74697661          DCB      0x74,0x69,0x76,0x61
000c9c  74656420          DCB      0x74,0x65,0x64,0x20
000ca0  43414e54          DCB      0x43,0x41,0x4e,0x54
000ca4  5f555345          DCB      0x5f,0x55,0x53,0x45
000ca8  5f455252          DCB      0x5f,0x45,0x52,0x52
000cac  4f520a00          DCB      0x4f,0x52,0x0a,0x00
000cb0  20232323          DCB      0x20,0x23,0x23,0x23
000cb4  20454343          DCB      0x20,0x45,0x43,0x43
000cb8  4c696250          DCB      0x4c,0x69,0x62,0x50
000cbc  726f6365          DCB      0x72,0x6f,0x63,0x65
000cc0  7373205b          DCB      0x73,0x73,0x20,0x5b
000cc4  65646361          DCB      0x65,0x64,0x63,0x61
000cc8  52656164          DCB      0x52,0x65,0x61,0x64
000ccc  5d202870          DCB      0x5d,0x20,0x28,0x70
000cd0  75727365          DCB      0x75,0x72,0x73,0x65
000cd4  55736167          DCB      0x55,0x73,0x61,0x67
000cd8  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000cdc  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000ce0  203a2062          DCB      0x20,0x3a,0x20,0x62
000ce4  69743129          DCB      0x69,0x74,0x31,0x29
000ce8  3a204c6f          DCB      0x3a,0x20,0x4c,0x6f
000cec  636b6564          DCB      0x63,0x6b,0x65,0x64
000cf0  20464149          DCB      0x20,0x46,0x41,0x49
000cf4  4c555245          DCB      0x4c,0x55,0x52,0x45
000cf8  5f455252          DCB      0x5f,0x45,0x52,0x52
000cfc  4f520a00          DCB      0x4f,0x52,0x0a,0x00
000d00  20232323          DCB      0x20,0x23,0x23,0x23
000d04  20454343          DCB      0x20,0x45,0x43,0x43
000d08  4c696250          DCB      0x4c,0x69,0x62,0x50
000d0c  726f6365          DCB      0x72,0x6f,0x63,0x65
000d10  7373205b          DCB      0x73,0x73,0x20,0x5b
000d14  65646361          DCB      0x65,0x64,0x63,0x61
000d18  52656164          DCB      0x52,0x65,0x61,0x64
000d1c  5d202870          DCB      0x5d,0x20,0x28,0x70
000d20  75727365          DCB      0x75,0x72,0x73,0x65
000d24  55736167          DCB      0x55,0x73,0x61,0x67
000d28  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000d2c  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000d30  203a2062          DCB      0x20,0x3a,0x20,0x62
000d34  69743129          DCB      0x69,0x74,0x31,0x29
000d38  3a206e6f          DCB      0x3a,0x20,0x6e,0x6f
000d3c  74204c6f          DCB      0x74,0x20,0x4c,0x6f
000d40  636b0a00          DCB      0x63,0x6b,0x0a,0x00
000d44  20232323          DCB      0x20,0x23,0x23,0x23
000d48  20454343          DCB      0x20,0x45,0x43,0x43
000d4c  4c696250          DCB      0x4c,0x69,0x62,0x50
000d50  726f6365          DCB      0x72,0x6f,0x63,0x65
000d54  7373205b          DCB      0x73,0x73,0x20,0x5b
000d58  65646361          DCB      0x65,0x64,0x63,0x61
000d5c  52656164          DCB      0x52,0x65,0x61,0x64
000d60  5d202870          DCB      0x5d,0x20,0x28,0x70
000d64  75727365          DCB      0x75,0x72,0x73,0x65
000d68  55736167          DCB      0x55,0x73,0x61,0x67
000d6c  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000d70  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000d74  203a2062          DCB      0x20,0x3a,0x20,0x62
000d78  69743229          DCB      0x69,0x74,0x32,0x29
000d7c  3a205265          DCB      0x3a,0x20,0x52,0x65
000d80  66756e64          DCB      0x66,0x75,0x6e,0x64
000d84  65642043          DCB      0x65,0x64,0x20,0x43
000d88  414e545f          DCB      0x41,0x4e,0x54,0x5f
000d8c  5553455f          DCB      0x55,0x53,0x45,0x5f
000d90  4552524f          DCB      0x45,0x52,0x52,0x4f
000d94  520a0000          DCB      0x52,0x0a,0x00,0x00
000d98  20232323          DCB      0x20,0x23,0x23,0x23
000d9c  20454343          DCB      0x20,0x45,0x43,0x43
000da0  4c696250          DCB      0x4c,0x69,0x62,0x50
000da4  726f6365          DCB      0x72,0x6f,0x63,0x65
000da8  7373205b          DCB      0x73,0x73,0x20,0x5b
000dac  65646361          DCB      0x65,0x64,0x63,0x61
000db0  52656164          DCB      0x52,0x65,0x61,0x64
000db4  5d202870          DCB      0x5d,0x20,0x28,0x70
000db8  75727365          DCB      0x75,0x72,0x73,0x65
000dbc  55736167          DCB      0x55,0x73,0x61,0x67
000dc0  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000dc4  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000dc8  203a2062          DCB      0x20,0x3a,0x20,0x62
000dcc  69743229          DCB      0x69,0x74,0x32,0x29
000dd0  3a206e6f          DCB      0x3a,0x20,0x6e,0x6f
000dd4  74205265          DCB      0x74,0x20,0x52,0x65
000dd8  66756e64          DCB      0x66,0x75,0x6e,0x64
000ddc  65640a00          DCB      0x65,0x64,0x0a,0x00
000de0  20232323          DCB      0x20,0x23,0x23,0x23
000de4  20454343          DCB      0x20,0x45,0x43,0x43
000de8  4c696250          DCB      0x4c,0x69,0x62,0x50
000dec  726f6365          DCB      0x72,0x6f,0x63,0x65
000df0  7373205b          DCB      0x73,0x73,0x20,0x5b
000df4  65646361          DCB      0x65,0x64,0x63,0x61
000df8  52656164          DCB      0x52,0x65,0x61,0x64
000dfc  5d202870          DCB      0x5d,0x20,0x28,0x70
000e00  75727365          DCB      0x75,0x72,0x73,0x65
000e04  55736167          DCB      0x55,0x73,0x61,0x67
000e08  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000e0c  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000e10  203a2062          DCB      0x20,0x3a,0x20,0x62
000e14  69743329          DCB      0x69,0x74,0x33,0x29
000e18  3a204175          DCB      0x3a,0x20,0x41,0x75
000e1c  746f6c6f          DCB      0x74,0x6f,0x6c,0x6f
000e20  61640a00          DCB      0x61,0x64,0x0a,0x00
000e24  20232323          DCB      0x20,0x23,0x23,0x23
000e28  20454343          DCB      0x20,0x45,0x43,0x43
000e2c  4c696250          DCB      0x4c,0x69,0x62,0x50
000e30  726f6365          DCB      0x72,0x6f,0x63,0x65
000e34  7373205b          DCB      0x73,0x73,0x20,0x5b
000e38  65646361          DCB      0x65,0x64,0x63,0x61
000e3c  52656164          DCB      0x52,0x65,0x61,0x64
000e40  5d202870          DCB      0x5d,0x20,0x28,0x70
000e44  75727365          DCB      0x75,0x72,0x73,0x65
000e48  55736167          DCB      0x55,0x73,0x61,0x67
000e4c  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000e50  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000e54  203a2062          DCB      0x20,0x3a,0x20,0x62
000e58  69743329          DCB      0x69,0x74,0x33,0x29
000e5c  3a206361          DCB      0x3a,0x20,0x63,0x61
000e60  6e607420          DCB      0x6e,0x60,0x74,0x20
000e64  4175746f          DCB      0x41,0x75,0x74,0x6f
000e68  6c6f6164          DCB      0x6c,0x6f,0x61,0x64
000e6c  0a000000          DCB      0x0a,0x00,0x00,0x00
000e70  20232323          DCB      0x20,0x23,0x23,0x23
000e74  20454343          DCB      0x20,0x45,0x43,0x43
000e78  4c696250          DCB      0x4c,0x69,0x62,0x50
000e7c  726f6365          DCB      0x72,0x6f,0x63,0x65
000e80  7373205b          DCB      0x73,0x73,0x20,0x5b
000e84  65646361          DCB      0x65,0x64,0x63,0x61
000e88  52656164          DCB      0x52,0x65,0x61,0x64
000e8c  5d202870          DCB      0x5d,0x20,0x28,0x70
000e90  75727365          DCB      0x75,0x72,0x73,0x65
000e94  55736167          DCB      0x55,0x73,0x61,0x67
000e98  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000e9c  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000ea0  203a2062          DCB      0x20,0x3a,0x20,0x62
000ea4  69743429          DCB      0x69,0x74,0x34,0x29
000ea8  3a204372          DCB      0x3a,0x20,0x43,0x72
000eac  65646974          DCB      0x65,0x64,0x69,0x74
000eb0  0a000000          DCB      0x0a,0x00,0x00,0x00
000eb4  20232323          DCB      0x20,0x23,0x23,0x23
000eb8  20454343          DCB      0x20,0x45,0x43,0x43
000ebc  4c696250          DCB      0x4c,0x69,0x62,0x50
000ec0  726f6365          DCB      0x72,0x6f,0x63,0x65
000ec4  7373205b          DCB      0x73,0x73,0x20,0x5b
000ec8  65646361          DCB      0x65,0x64,0x63,0x61
000ecc  52656164          DCB      0x52,0x65,0x61,0x64
000ed0  5d202870          DCB      0x5d,0x20,0x28,0x70
000ed4  75727365          DCB      0x75,0x72,0x73,0x65
000ed8  55736167          DCB      0x55,0x73,0x61,0x67
000edc  65436f6e          DCB      0x65,0x43,0x6f,0x6e
000ee0  74726f6c          DCB      0x74,0x72,0x6f,0x6c
000ee4  203a2062          DCB      0x20,0x3a,0x20,0x62
000ee8  69743429          DCB      0x69,0x74,0x34,0x29
000eec  3a206e6f          DCB      0x3a,0x20,0x6e,0x6f
000ef0  74204372          DCB      0x74,0x20,0x43,0x72
000ef4  65646974          DCB      0x65,0x64,0x69,0x74
000ef8  2043414e          DCB      0x20,0x43,0x41,0x4e
000efc  545f5553          DCB      0x54,0x5f,0x55,0x53
000f00  455f4552          DCB      0x45,0x5f,0x45,0x52
000f04  524f520a          DCB      0x52,0x4f,0x52,0x0a
000f08  00000000          DCB      0x00,0x00,0x00,0x00
000f0c  20232323          DCB      0x20,0x23,0x23,0x23
000f10  20454343          DCB      0x20,0x45,0x43,0x43
000f14  4c696250          DCB      0x4c,0x69,0x62,0x50
000f18  726f6365          DCB      0x72,0x6f,0x63,0x65
000f1c  7373205b          DCB      0x73,0x73,0x20,0x5b
000f20  65646361          DCB      0x65,0x64,0x63,0x61
000f24  52656164          DCB      0x52,0x65,0x61,0x64
000f28  5d202863          DCB      0x5d,0x20,0x28,0x63
000f2c  61726454          DCB      0x61,0x72,0x64,0x54
000f30  79706520          DCB      0x79,0x70,0x65,0x20
000f34  3a203078          DCB      0x3a,0x20,0x30,0x78
000f38  25303278          DCB      0x25,0x30,0x32,0x78
000f3c  293a2020          DCB      0x29,0x3a,0x20,0x20
000f40  43414e54          DCB      0x43,0x41,0x4e,0x54
000f44  5f555345          DCB      0x5f,0x55,0x53,0x45
000f48  5f455252          DCB      0x5f,0x45,0x52,0x52
000f4c  4f522021          DCB      0x4f,0x52,0x20,0x21
000f50  21210a00          DCB      0x21,0x21,0x0a,0x00
000f54  20232323          DCB      0x20,0x23,0x23,0x23
000f58  20204543          DCB      0x20,0x20,0x45,0x43
000f5c  434c6962          DCB      0x43,0x4c,0x69,0x62
000f60  50726f63          DCB      0x50,0x72,0x6f,0x63
000f64  65737320          DCB      0x65,0x73,0x73,0x20
000f68  494e5355          DCB      0x49,0x4e,0x53,0x55
000f6c  46464943          DCB      0x46,0x46,0x49,0x43
000f70  49454e54          DCB      0x49,0x45,0x4e,0x54
000f74  5f4d4f4e          DCB      0x5f,0x4d,0x4f,0x4e
000f78  45595f45          DCB      0x45,0x59,0x5f,0x45
000f7c  52524f52          DCB      0x52,0x52,0x4f,0x52
000f80  20284e4f          DCB      0x20,0x28,0x4e,0x4f
000f84  4e204175          DCB      0x4e,0x20,0x41,0x75
000f88  746f4c6f          DCB      0x74,0x6f,0x4c,0x6f
000f8c  61642920          DCB      0x61,0x64,0x29,0x20
000f90  2121210a          DCB      0x21,0x21,0x21,0x0a
000f94  00000000          DCB      0x00,0x00,0x00,0x00
000f98  20232323          DCB      0x20,0x23,0x23,0x23
000f9c  20454343          DCB      0x20,0x45,0x43,0x43
000fa0  4c696250          DCB      0x4c,0x69,0x62,0x50
000fa4  726f6365          DCB      0x72,0x6f,0x63,0x65
000fa8  7373205b          DCB      0x73,0x73,0x20,0x5b
000fac  65646361          DCB      0x65,0x64,0x63,0x61
000fb0  44656475          DCB      0x44,0x65,0x64,0x75
000fb4  63745d3a          DCB      0x63,0x74,0x5d,0x3a
000fb8  20746172          DCB      0x20,0x74,0x61,0x72
000fbc  67657444          DCB      0x67,0x65,0x74,0x44
000fc0  65647563          DCB      0x65,0x64,0x75,0x63
000fc4  74203d20          DCB      0x74,0x20,0x3d,0x20
000fc8  25642c20          DCB      0x25,0x64,0x2c,0x20
000fcc  43617264          DCB      0x43,0x61,0x72,0x64
000fd0  4d6f6e65          DCB      0x4d,0x6f,0x6e,0x65
000fd4  79203d20          DCB      0x79,0x20,0x3d,0x20
000fd8  25642c20          DCB      0x25,0x64,0x2c,0x20
000fdc  73657269          DCB      0x73,0x65,0x72,0x69
000fe0  616c4e75          DCB      0x61,0x6c,0x4e,0x75
000fe4  6d626572          DCB      0x6d,0x62,0x65,0x72
000fe8  203d2025          DCB      0x20,0x3d,0x20,0x25
000fec  64205b30          DCB      0x64,0x20,0x5b,0x30
000ff0  78253032          DCB      0x78,0x25,0x30,0x32
000ff4  582c2030          DCB      0x58,0x2c,0x20,0x30
000ff8  78253032          DCB      0x78,0x25,0x30,0x32
000ffc  582c2030          DCB      0x58,0x2c,0x20,0x30
001000  78253032          DCB      0x78,0x25,0x30,0x32
001004  585d0a00          DCB      0x58,0x5d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  serialNumber
                          DCD      0x00000001
                  cardAutoloadAvailable
000004  00                DCB      0x00
