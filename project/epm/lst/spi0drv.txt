; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\spi0drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi0drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\spi0drv.crf src\UserDrv\spi0drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Spi0SetPin PROC
;;;99     }
;;;100    void Spi0SetPin(void)
000000  e92d4010          PUSH     {r4,lr}
;;;101    {
;;;102        /* Configure multi function pins to SPI0 */
;;;103        outpw(REG_SYS_GPI_MFPH,(inpw(REG_SYS_GPI_MFPH) & ~(0xF<<8)) | (0x0<<8));//GPI10 SS0
000004  e3a0020b          MOV      r0,#0xb0000000
000008  e59000b4          LDR      r0,[r0,#0xb4]
00000c  e3c00c0f          BIC      r0,r0,#0xf00
000010  e3a0120b          MOV      r1,#0xb0000000
000014  e58100b4          STR      r0,[r1,#0xb4]
;;;104        GPIO_OpenBit(CS_PORT, CS_PIN, DIR_OUTPUT, NO_PULL_UP); 
000018  e3a03000          MOV      r3,#0
00001c  e3a02001          MOV      r2,#1
000020  e3a01b01          MOV      r1,#0x400
000024  e3a00c02          MOV      r0,#0x200
000028  ebfffffe          BL       GPIO_OpenBit
;;;105        
;;;106        outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xFu<<28)) | (0xBu<<28));//GPB7 CLK
00002c  e3a0020b          MOV      r0,#0xb0000000
000030  e5900078          LDR      r0,[r0,#0x78]
000034  e3c0020f          BIC      r0,r0,#0xf0000000
000038  e380020b          ORR      r0,r0,#0xb0000000
00003c  e3a0120b          MOV      r1,#0xb0000000
000040  e5810078          STR      r0,[r1,#0x78]
;;;107        outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<0)) | (0xB<<0));//GPB8 DATAO
000044  e3a0020b          MOV      r0,#0xb0000000
000048  e590007c          LDR      r0,[r0,#0x7c]
00004c  e3c0000f          BIC      r0,r0,#0xf
000050  e380000b          ORR      r0,r0,#0xb
000054  e581007c          STR      r0,[r1,#0x7c]
;;;108        outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<4)) | (0xB<<4));//GPB9 DATAI 
000058  e3a0020b          MOV      r0,#0xb0000000
00005c  e590007c          LDR      r0,[r0,#0x7c]
000060  e3c000f0          BIC      r0,r0,#0xf0
000064  e38000b0          ORR      r0,r0,#0xb0
000068  e581007c          STR      r0,[r1,#0x7c]
;;;109    }
00006c  e8bd8010          POP      {r4,pc}
;;;110    
                          ENDP

                  hwInit PROC
;;;41     /*-----------------------------------------*/
;;;42     static BOOL hwInit(void)
000070  e92d4010          PUSH     {r4,lr}
;;;43     {
;;;44         outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
000074  e3a0020b          MOV      r0,#0xb0000000
000078  e5900218          LDR      r0,[r0,#0x218]
00007c  e3800008          ORR      r0,r0,#8
000080  e3a0120b          MOV      r1,#0xb0000000
000084  e5810218          STR      r0,[r1,#0x218]
;;;45         
;;;46         Spi0SetPin();
000088  ebfffffe          BL       Spi0SetPin
;;;47         
;;;48         spiInit(SPI_PORT);
00008c  e3a00000          MOV      r0,#0
000090  ebfffffe          BL       spiInit
;;;49         spiOpen(SPI_PORT);
000094  e3a00000          MOV      r0,#0
000098  ebfffffe          BL       spiOpen
;;;50     
;;;51         // set spi interface speed to 1.2MHz
;;;52         spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 4800000, 0);
00009c  e3a03000          MOV      r3,#0
0000a0  e59f2184          LDR      r2,|L1.556|
0000a4  e3a01002          MOV      r1,#2
0000a8  e1a00003          MOV      r0,r3
0000ac  ebfffffe          BL       spiIoctl
;;;53         // set spi interface speed to 2MHz
;;;54         //spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 2000000, 0);
;;;55         //spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 1000000, 0);
;;;56         // set transfer length to 8-bit
;;;57         spiIoctl(SPI_PORT, SPI_IOC_SET_TX_BITLEN, 8, 0);
0000b0  e3a03000          MOV      r3,#0
0000b4  e3a02008          MOV      r2,#8
0000b8  e3a01007          MOV      r1,#7
0000bc  e1a00003          MOV      r0,r3
0000c0  ebfffffe          BL       spiIoctl
;;;58         // set transfer mode
;;;59         spiIoctl(SPI_PORT, SPI_IOC_SET_MODE, SPI_MODE_0, 0);
0000c4  e3a03000          MOV      r3,#0
0000c8  e1a02003          MOV      r2,r3
0000cc  e3a01008          MOV      r1,#8
0000d0  e1a00003          MOV      r0,r3
0000d4  ebfffffe          BL       spiIoctl
;;;60     
;;;61         spiIoctl(SPI_PORT, SPI_IOC_SET_SS_ACTIVE_LEVEL, SPI_SS_ACTIVE_LOW, 0);
0000d8  e3a03000          MOV      r3,#0
0000dc  e1a02003          MOV      r2,r3
0000e0  e3a0100c          MOV      r1,#0xc
0000e4  e1a00003          MOV      r0,r3
0000e8  ebfffffe          BL       spiIoctl
;;;62     
;;;63         spiIoctl(SPI_PORT, SPI_IOC_SET_TX_NUM, 0, 0);
0000ec  e3a03000          MOV      r3,#0
0000f0  e1a02003          MOV      r2,r3
0000f4  e3a01006          MOV      r1,#6
0000f8  e1a00003          MOV      r0,r3
0000fc  ebfffffe          BL       spiIoctl
;;;64     
;;;65         spiIoctl(SPI_PORT, SPI_IOC_SET_LSB_MSB, SPI_MSB, 0);
000100  e3a03000          MOV      r3,#0
000104  e1a02003          MOV      r2,r3
000108  e3a01005          MOV      r1,#5
00010c  e1a00003          MOV      r0,r3
000110  ebfffffe          BL       spiIoctl
;;;66         
;;;67         return TRUE;
000114  e3a00001          MOV      r0,#1
;;;68     }
000118  e8bd8010          POP      {r4,pc}
;;;69     /*-----------------------------------------*/
                          ENDP

                  Spi0DrvInit PROC
;;;71     /*-----------------------------------------*/
;;;72     BOOL Spi0DrvInit(void)
00011c  e92d4010          PUSH     {r4,lr}
;;;73     {
;;;74         BOOL retval;
;;;75         sysprintf("SPI0DrvInit!!\n");
000120  e28f0f42          ADR      r0,|L1.560|
000124  ebfffffe          BL       sysprintf
;;;76         retval = hwInit();
000128  ebfffffe          BL       hwInit
00012c  e1a04000          MOV      r4,r0
;;;77         return retval;
000130  e1a00004          MOV      r0,r4
;;;78     }
000134  e8bd8010          POP      {r4,pc}
;;;79     void Spi0Write(uint8_t buff_id, uint32_t data)
                          ENDP

                  Spi0Write PROC
000138  e92d4070          PUSH     {r4-r6,lr}
;;;80     {
00013c  e1a04000          MOV      r4,r0
000140  e1a05001          MOV      r5,r1
;;;81         spiWrite(SPI_PORT, buff_id, data);
000144  e1a02005          MOV      r2,r5
000148  e1a01004          MOV      r1,r4
00014c  e3a00000          MOV      r0,#0
000150  ebfffffe          BL       spiWrite
;;;82         spiIoctl(SPI_PORT, SPI_IOC_TRIGGER, 0, 0);
000154  e3a03000          MOV      r3,#0
000158  e1a02003          MOV      r2,r3
00015c  e1a01003          MOV      r1,r3
000160  e1a00003          MOV      r0,r3
000164  ebfffffe          BL       spiIoctl
;;;83         while(spiGetBusyStatus(SPI_PORT));
000168  e1a00000          MOV      r0,r0
                  |L1.364|
00016c  e3a00000          MOV      r0,#0
000170  ebfffffe          BL       spiGetBusyStatus
000174  e3500000          CMP      r0,#0
000178  1afffffb          BNE      |L1.364|
;;;84     }
00017c  e8bd8070          POP      {r4-r6,pc}
;;;85     uint32_t Spi0Read(uint8_t buff_id)
                          ENDP

                  Spi0Read PROC
000180  e92d4010          PUSH     {r4,lr}
;;;86     {
000184  e1a04000          MOV      r4,r0
;;;87         return spiRead(SPI_PORT, buff_id);
000188  e1a01004          MOV      r1,r4
00018c  e3a00000          MOV      r0,#0
000190  ebfffffe          BL       spiRead
;;;88     }
000194  e8bd8010          POP      {r4,pc}
;;;89     void Spi0ActiveCS(BOOL active)
                          ENDP

                  Spi0ActiveCS PROC
000198  e92d4010          PUSH     {r4,lr}
;;;90     {
00019c  e1a04000          MOV      r4,r0
;;;91         if(active)
0001a0  e3540000          CMP      r4,#0
0001a4  0a000003          BEQ      |L1.440|
;;;92         {// /CS: active
;;;93             GPIO_ClrBit(CS_PORT, CS_PIN);
0001a8  e3a01b01          MOV      r1,#0x400
0001ac  e3a00c02          MOV      r0,#0x200
0001b0  ebfffffe          BL       GPIO_ClrBit
0001b4  ea000002          B        |L1.452|
                  |L1.440|
;;;94         }
;;;95         else
;;;96         {
;;;97             GPIO_SetBit(CS_PORT, CS_PIN);
0001b8  e3a01b01          MOV      r1,#0x400
0001bc  e3a00c02          MOV      r0,#0x200
0001c0  ebfffffe          BL       GPIO_SetBit
                  |L1.452|
;;;98         }
;;;99     }
0001c4  e8bd8010          POP      {r4,pc}
;;;100    void Spi0SetPin(void)
                          ENDP

                  Spi0ResetPin PROC
;;;110    
;;;111    void Spi0ResetPin(void)
0001c8  e92d4010          PUSH     {r4,lr}
;;;112    {
;;;113        /* Configure multi function pins to SPI0 */
;;;114        outpw(REG_SYS_GPI_MFPH,(inpw(REG_SYS_GPI_MFPH) & ~(0xF<<8)) | (0x0<<8));//GPI10 SS0
0001cc  e3a0020b          MOV      r0,#0xb0000000
0001d0  e59000b4          LDR      r0,[r0,#0xb4]
0001d4  e3c00c0f          BIC      r0,r0,#0xf00
0001d8  e3a0120b          MOV      r1,#0xb0000000
0001dc  e58100b4          STR      r0,[r1,#0xb4]
;;;115        GPIO_OpenBit(CS_PORT, CS_PIN, DIR_INPUT, NO_PULL_UP); 
0001e0  e3a03000          MOV      r3,#0
0001e4  e1a02003          MOV      r2,r3
0001e8  e3a01b01          MOV      r1,#0x400
0001ec  e3a00c02          MOV      r0,#0x200
0001f0  ebfffffe          BL       GPIO_OpenBit
;;;116        
;;;117        outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xFu<<28)) | (0x0<<28));//GPB7 input
0001f4  e3a0020b          MOV      r0,#0xb0000000
0001f8  e5900078          LDR      r0,[r0,#0x78]
0001fc  e3c0020f          BIC      r0,r0,#0xf0000000
000200  e3a0120b          MOV      r1,#0xb0000000
000204  e5810078          STR      r0,[r1,#0x78]
;;;118        outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<0)) | (0x0<<0));//GPB8 input
000208  e3a0020b          MOV      r0,#0xb0000000
00020c  e590007c          LDR      r0,[r0,#0x7c]
000210  e3c0000f          BIC      r0,r0,#0xf
000214  e581007c          STR      r0,[r1,#0x7c]
;;;119        outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<4)) | (0x0<<4));//GPB9 input 
000218  e3a0020b          MOV      r0,#0xb0000000
00021c  e590007c          LDR      r0,[r0,#0x7c]
000220  e3c000f0          BIC      r0,r0,#0xf0
000224  e581007c          STR      r0,[r1,#0x7c]
;;;120    }
000228  e8bd8010          POP      {r4,pc}
;;;121    
                          ENDP

                  |L1.556|
                          DCD      0x00493e00
                  |L1.560|
000230  53504930          DCB      "SPI0DrvInit!!\n",0
000234  44727649
000238  6e697421
00023c  210a00  
00023f  00                DCB      0
