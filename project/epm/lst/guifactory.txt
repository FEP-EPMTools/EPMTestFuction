; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guifactory.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guifactory.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guifactory.crf src\user\guifactory.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;83     /*-----------------------------------------*/
;;;84     static void updateBG(void)
000000  e92d4010          PUSH     {r4,lr}
;;;85     {
;;;86         EPDDrawString(TRUE,"please connect to computer and test with terminal",100,200);
000004  e3a030c8          MOV      r3,#0xc8
000008  e3a02064          MOV      r2,#0x64
00000c  e28f1f8b          ADR      r1,|L1.576|
000010  e3a00001          MOV      r0,#1
000014  ebfffffe          BL       EPDDrawString
;;;87     }
000018  e8bd8010          POP      {r4,pc}
;;;88     static void updateData(void){
                          ENDP

                  updateData PROC
00001c  e12fff1e          BX       lr
;;;89         
;;;90     }
;;;91     /*-----------------------------------------*/
                          ENDP

                  GuiFactoryOnDraw PROC
;;;93     /*-----------------------------------------*/
;;;94     BOOL GuiFactoryOnDraw(uint8_t oriGuiId, uint8_t para, int para2, int para3){ 
000020  e92d41f0          PUSH     {r4-r8,lr}
000024  e1a05000          MOV      r5,r0
000028  e1a04001          MOV      r4,r1
00002c  e1a06002          MOV      r6,r2
000030  e1a07003          MOV      r7,r3
;;;95         
;;;96         powerStatus = FALSE;     
000034  e3a00000          MOV      r0,#0
000038  e59f1234          LDR      r1,|L1.628|
00003c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;97         pGuiGetInterface = GuiGetInterface();
000040  ebfffffe          BL       GuiGetInterface
000044  e59f122c          LDR      r1,|L1.632|
000048  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;98         pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
00004c  e2810000          ADD      r0,r1,#0
000050  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000054  e3e01000          MVN      r1,#0
000058  e590200c          LDR      r2,[r0,#0xc]
00005c  e3a00000          MOV      r0,#0
000060  e12fff32          BLX      r2
;;;99         pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
000064  e59f020c          LDR      r0,|L1.632|
000068  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00006c  e3a01032          MOV      r1,#0x32
000070  e590200c          LDR      r2,[r0,#0xc]
000074  e3a00001          MOV      r0,#1
000078  e12fff32          BLX      r2
;;;100        pGuiGetInterface->setTimeoutFunc(UPDATE_SPACE_DETECT_TIMER, UPDATE_SPACE_DETECT_INTERVAL);      
00007c  e59f01f4          LDR      r0,|L1.632|
000080  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000084  e3a01ffa          MOV      r1,#0x3e8
000088  e590200c          LDR      r2,[r0,#0xc]
00008c  e3a00002          MOV      r0,#2
000090  e12fff32          BLX      r2
;;;101        
;;;102        PowerDrvSetEnable(TRUE);
000094  e3a00001          MOV      r0,#1
000098  ebfffffe          BL       PowerDrvSetEnable
;;;103        EPDSetSleepFunction(FALSE);
00009c  e3a00000          MOV      r0,#0
0000a0  ebfffffe          BL       EPDSetSleepFunction
;;;104        
;;;105        refreshType = para;
0000a4  e59f01d0          LDR      r0,|L1.636|
0000a8  e5c04000          STRB     r4,[r0,#0]  ; refreshType
;;;106        
;;;107        pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//§óupdateScreen
0000ac  e59f01c4          LDR      r0,|L1.632|
0000b0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000b4  e5901010          LDR      r1,[r0,#0x10]
0000b8  e3a00000          MOV      r0,#0
0000bc  e12fff31          BLX      r1
;;;108        
;;;109        //CardReaderSetPower(EPM_READER_CTRL_ID_GUI, FALSE);
;;;110        updateBG();
0000c0  ebfffffe          BL       updateBG
;;;111        return TRUE;
0000c4  e3a00001          MOV      r0,#1
;;;112    }
0000c8  e8bd81f0          POP      {r4-r8,pc}
;;;113    BOOL GuiFactoryUpdateData(void)
                          ENDP

                  GuiFactoryUpdateData PROC
0000cc  e92d4010          PUSH     {r4,lr}
;;;114    {    
;;;115        //tickStart = xTaskGetTickCount();
;;;116        sysprintf(" [INFO GUI] <Stand By> UpdateData\n");
0000d0  e28f0f6a          ADR      r0,|L1.640|
0000d4  ebfffffe          BL       sysprintf
;;;117        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//§óupdateScreen
0000d8  e59f0198          LDR      r0,|L1.632|
0000dc  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000e0  e5901010          LDR      r1,[r0,#0x10]
0000e4  e3a00001          MOV      r0,#1
0000e8  e12fff31          BLX      r1
;;;118        return TRUE;
0000ec  e3a00001          MOV      r0,#1
;;;119    }
0000f0  e8bd8010          POP      {r4,pc}
;;;120    
                          ENDP

                  GuiFactoryKeyCallback PROC
;;;121    
;;;122    BOOL GuiFactoryKeyCallback(uint8_t keyId, uint8_t downUp)
0000f4  e92d4070          PUSH     {r4-r6,lr}
;;;123    {   
0000f8  e1a04000          MOV      r4,r0
0000fc  e1a05001          MOV      r5,r1
;;;124        BOOL reVal = FALSE; 
000100  e3a06000          MOV      r6,#0
;;;125        //sysprintf(" [INFO GUI] <Stand By> Key:  keyId = %d, downUp = %d\n", keyId, downUp);
;;;126        //if(keyIgnoreFlag)
;;;127        if(keyIgnoreFlag && (keyId < GUI_KEYPAD_NORMAL_ID))
000104  e59f0198          LDR      r0,|L1.676|
000108  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
00010c  e3500000          CMP      r0,#0
000110  0a000005          BEQ      |L1.300|
000114  e3540010          CMP      r4,#0x10
000118  aa000003          BGE      |L1.300|
;;;128        {
;;;129            sysprintf(" [INFO GUI] <Stand By> Key:  ignore...\n"); 
00011c  e28f0f61          ADR      r0,|L1.680|
000120  ebfffffe          BL       sysprintf
;;;130            return reVal;
000124  e1a00006          MOV      r0,r6
                  |L1.296|
;;;131        }
;;;132        else if((GUI_KEY_DOWN_INDEX == downUp)&!keyIgnoreFlag)
;;;133        {
;;;134            switch(keyId)
;;;135            {
;;;136        #if(SUPPORT_HK_10_HW)
;;;137            case GUI_KEYPAD_QRCODE_ID:
;;;138        #else
;;;139            case GUI_KEYPAD_CONFIRM_ID:
;;;140        #endif
;;;141                reVal = TRUE;
;;;142                break;
;;;143            case GUI_KEYPAD_LEFT_ID:
;;;144                reVal = TRUE;
;;;145                break;
;;;146            case GUI_KEYPAD_RIGHT_ID:
;;;147                break;
;;;148            case GUI_KEYPAD_ADD_ID:
;;;149                reVal = TRUE;
;;;150                break;
;;;151            case GUI_KEYPAD_MINUS_ID:
;;;152                reVal = TRUE;
;;;153                break;
;;;154            case GUI_KEYPAD_NORMAL_ID:
;;;155                reVal = TRUE;
;;;156                break;
;;;157            case GUI_KEYPAD_REPLACE_BP_ID:
;;;158                reVal = TRUE;
;;;159                break;
;;;160            case GUI_KEYPAD_TESTER_ID:
;;;161                reVal = TRUE;
;;;162                break;
;;;163             case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;164                reVal = TRUE;
;;;165                break;
;;;166            default:
;;;167                sysprintf(" [INFO GUI] <Stand By> Key:  not support keyId 0x%02x...\n", keyId); 
;;;168                break;
;;;169            }
;;;170        }
;;;171        else
;;;172        {
;;;173            
;;;174        }    
;;;175        //if(reVal)
;;;176        //    EPDReSetBacklightTimeout(5000);
;;;177        return reVal;
;;;178    }
000128  e8bd8070          POP      {r4-r6,pc}
                  |L1.300|
00012c  e3550001          CMP      r5,#1                 ;132
000130  1a000001          BNE      |L1.316|
000134  e3a00001          MOV      r0,#1                 ;132
000138  ea000000          B        |L1.320|
                  |L1.316|
00013c  e3a00000          MOV      r0,#0                 ;132
                  |L1.320|
000140  e59f115c          LDR      r1,|L1.676|
000144  e5d11000          LDRB     r1,[r1,#0]            ;132  ; keyIgnoreFlag
000148  e3510000          CMP      r1,#0                 ;132
00014c  1a000001          BNE      |L1.344|
000150  e3a01001          MOV      r1,#1                 ;132
000154  ea000000          B        |L1.348|
                  |L1.344|
000158  e3a01000          MOV      r1,#0                 ;132
                  |L1.348|
00015c  e1100001          TST      r0,r1                 ;132
000160  0a000034          BEQ      |L1.568|
000164  e3540004          CMP      r4,#4                 ;134
000168  0a00001a          BEQ      |L1.472|
00016c  ca000008          BGT      |L1.404|
000170  e3540000          CMP      r4,#0                 ;134
000174  0a00000f          BEQ      |L1.440|
000178  e3540001          CMP      r4,#1                 ;134
00017c  0a000018          BEQ      |L1.484|
000180  e3540002          CMP      r4,#2                 ;134
000184  0a000011          BEQ      |L1.464|
000188  e3540003          CMP      r4,#3                 ;134
00018c  1a000023          BNE      |L1.544|
000190  ea00000b          B        |L1.452|
                  |L1.404|
000194  e3540010          CMP      r4,#0x10              ;134
000198  0a000014          BEQ      |L1.496|
00019c  e3540011          CMP      r4,#0x11              ;134
0001a0  0a000015          BEQ      |L1.508|
0001a4  e3540013          CMP      r4,#0x13              ;134
0001a8  0a000019          BEQ      |L1.532|
0001ac  e3540014          CMP      r4,#0x14              ;134
0001b0  1a00001a          BNE      |L1.544|
0001b4  ea000013          B        |L1.520|
                  |L1.440|
0001b8  e1a00000          MOV      r0,r0                 ;137
0001bc  e3a06001          MOV      r6,#1                 ;141
0001c0  ea00001b          B        |L1.564|
                  |L1.452|
0001c4  e1a00000          MOV      r0,r0                 ;143
0001c8  e3a06001          MOV      r6,#1                 ;144
0001cc  ea000018          B        |L1.564|
                  |L1.464|
0001d0  e1a00000          MOV      r0,r0                 ;146
0001d4  ea000016          B        |L1.564|
                  |L1.472|
0001d8  e1a00000          MOV      r0,r0                 ;148
0001dc  e3a06001          MOV      r6,#1                 ;149
0001e0  ea000013          B        |L1.564|
                  |L1.484|
0001e4  e1a00000          MOV      r0,r0                 ;151
0001e8  e3a06001          MOV      r6,#1                 ;152
0001ec  ea000010          B        |L1.564|
                  |L1.496|
0001f0  e1a00000          MOV      r0,r0                 ;154
0001f4  e3a06001          MOV      r6,#1                 ;155
0001f8  ea00000d          B        |L1.564|
                  |L1.508|
0001fc  e1a00000          MOV      r0,r0                 ;157
000200  e3a06001          MOV      r6,#1                 ;158
000204  ea00000a          B        |L1.564|
                  |L1.520|
000208  e1a00000          MOV      r0,r0                 ;160
00020c  e3a06001          MOV      r6,#1                 ;161
000210  ea000007          B        |L1.564|
                  |L1.532|
000214  e1a00000          MOV      r0,r0                 ;163
000218  e3a06001          MOV      r6,#1                 ;164
00021c  ea000004          B        |L1.564|
                  |L1.544|
000220  e1a00000          MOV      r0,r0                 ;166
000224  e1a01004          MOV      r1,r4                 ;167
000228  e28f00a0          ADR      r0,|L1.720|
00022c  ebfffffe          BL       sysprintf
000230  e1a00000          MOV      r0,r0                 ;168
                  |L1.564|
000234  e1a00000          MOV      r0,r0                 ;142
                  |L1.568|
000238  e1a00006          MOV      r0,r6                 ;177
00023c  eaffffb9          B        |L1.296|
                  |L1.576|
000240  706c6561          DCB      "please connect to computer and test with terminal",0
000244  73652063
000248  6f6e6e65
00024c  63742074
000250  6f20636f
000254  6d707574
000258  65722061
00025c  6e642074
000260  65737420
000264  77697468
000268  20746572
00026c  6d696e61
000270  6c00    
000272  00                DCB      0
000273  00                DCB      0
                  |L1.628|
                          DCD      powerStatus
                  |L1.632|
                          DCD      pGuiGetInterface
                  |L1.636|
                          DCD      refreshType
                  |L1.640|
000280  205b494e          DCB      " [INFO GUI] <Stand By> UpdateData\n",0
000284  464f2047
000288  55495d20
00028c  3c537461
000290  6e642042
000294  793e2055
000298  70646174
00029c  65446174
0002a0  610a00  
0002a3  00                DCB      0
                  |L1.676|
                          DCD      keyIgnoreFlag
                  |L1.680|
0002a8  205b494e          DCB      " [INFO GUI] <Stand By> Key:  ignore...\n",0
0002ac  464f2047
0002b0  55495d20
0002b4  3c537461
0002b8  6e642042
0002bc  793e204b
0002c0  65793a20
0002c4  2069676e
0002c8  6f72652e
0002cc  2e2e0a00
                  |L1.720|
0002d0  205b494e          DCB      " [INFO GUI] <Stand By> Key:  not support keyId 0x%02x.."
0002d4  464f2047
0002d8  55495d20
0002dc  3c537461
0002e0  6e642042
0002e4  793e204b
0002e8  65793a20
0002ec  206e6f74
0002f0  20737570
0002f4  706f7274
0002f8  206b6579
0002fc  49642030
000300  78253032
000304  782e2e  
000307  2e0a00            DCB      ".\n",0
00030a  00                DCB      0
00030b  00                DCB      0
                          ENDP

                  GuiFactoryTimerCallback PROC
;;;179    BOOL GuiFactoryTimerCallback(uint8_t timerIndex)
00030c  e1a01000          MOV      r1,r0
;;;180    {
;;;181        keyIgnoreFlag = TRUE;
000310  e3a00001          MOV      r0,#1
000314  e51f2078          LDR      r2,|L1.676|
000318  e5c20000          STRB     r0,[r2,#0]  ; keyIgnoreFlag
;;;182        //sysprintf(" [INFO GUI] <Stand By> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;183        powerStatus = FALSE;  
00031c  e3a00000          MOV      r0,#0
000320  e51f20b4          LDR      r2,|L1.628|
000324  e5c20000          STRB     r0,[r2,#0]  ; powerStatus
;;;184        if(powerStatusFlag == FALSE)
000328  e59f0114          LDR      r0,|L1.1092|
00032c  e5d00000          LDRB     r0,[r0,#0]  ; powerStatusFlag
000330  e3500000          CMP      r0,#0
000334  1a00000d          BNE      |L1.880|
;;;185        {
;;;186            switch(timerIndex)
000338  e3510000          CMP      r1,#0
00033c  0a000004          BEQ      |L1.852|
000340  e3510001          CMP      r1,#1
000344  0a000004          BEQ      |L1.860|
000348  e3510002          CMP      r1,#2
00034c  1a000006          BNE      |L1.876|
000350  ea000003          B        |L1.868|
                  |L1.852|
;;;187            {
;;;188                case UPDATE_BG_TIMER:
000354  e1a00000          MOV      r0,r0
;;;189                    //updateBG();
;;;190                    break;
000358  ea000003          B        |L1.876|
                  |L1.860|
;;;191                case UPDATE_DATA_TIMER:
00035c  e1a00000          MOV      r0,r0
;;;192                    break;
000360  ea000001          B        |L1.876|
                  |L1.868|
;;;193                case UPDATE_SPACE_DETECT_TIMER:
000364  e1a00000          MOV      r0,r0
;;;194    //                StartSpaceDrv();
;;;195                    break;
000368  e1a00000          MOV      r0,r0
                  |L1.876|
00036c  e1a00000          MOV      r0,r0                 ;190
                  |L1.880|
;;;196            }
;;;197        }
;;;198        keyIgnoreFlag = FALSE;
000370  e3a00000          MOV      r0,#0
000374  e51f20d8          LDR      r2,|L1.676|
000378  e5c20000          STRB     r0,[r2,#0]  ; keyIgnoreFlag
;;;199        powerStatus = TRUE;  
00037c  e3a00001          MOV      r0,#1
000380  e51f2114          LDR      r2,|L1.628|
000384  e5c20000          STRB     r0,[r2,#0]  ; powerStatus
;;;200        return TRUE;
;;;201    }
000388  e12fff1e          BX       lr
;;;202    
                          ENDP

                  GuiFactoryPowerCallbackFunc PROC
;;;203    BOOL GuiFactoryPowerCallbackFunc(uint8_t type, int flag)
00038c  e92d4070          PUSH     {r4-r6,lr}
;;;204    {
000390  e1a04000          MOV      r4,r0
000394  e1a05001          MOV      r5,r1
;;;205        //sysprintf(" [INFO GUI] Standby power [%d] : flag = %d!!\n", type, flag);
;;;206        switch(type)
000398  e3540001          CMP      r4,#1
00039c  0a000006          BEQ      |L1.956|
0003a0  e3540002          CMP      r4,#2
0003a4  0a000008          BEQ      |L1.972|
0003a8  e3540003          CMP      r4,#3
0003ac  0a00001a          BEQ      |L1.1052|
0003b0  e3540004          CMP      r4,#4
0003b4  1a00001f          BNE      |L1.1080|
0003b8  ea000019          B        |L1.1060|
                  |L1.956|
;;;207        {
;;;208            case GUI_POWER_STATUS_INDEX:
0003bc  e1a00000          MOV      r0,r0
;;;209                return powerStatus;
0003c0  e51f0154          LDR      r0,|L1.628|
0003c4  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.968|
;;;210            case GUI_POWER_ON_INDEX:      
;;;211                if(flag == WAKEUP_SOURCE_RTC)  
;;;212                {               
;;;213                    sysprintf(" [INFO GUI] <Stand By> PowerCallbackFunc UPDATE_DATA_TIMER\n");
;;;214                    powerStatus = FALSE;                 
;;;215                    pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);
;;;216                }
;;;217                else
;;;218                {
;;;219                    sysprintf(" [INFO GUI] <Stand By> PowerCallbackFunc ignore\n");  
;;;220                }
;;;221                powerStatusFlag = FALSE;
;;;222                break;
;;;223            case GUI_POWER_OFF_INDEX:
;;;224                break;
;;;225            case GUI_POWER_PREV_OFF_INDEX:
;;;226                powerStatusFlag = TRUE;
;;;227                break;
;;;228        }
;;;229        return TRUE;
;;;230    }
0003c8  e8bd8070          POP      {r4-r6,pc}
                  |L1.972|
0003cc  e1a00000          MOV      r0,r0                 ;210
0003d0  e3550001          CMP      r5,#1                 ;211
0003d4  1a00000a          BNE      |L1.1028|
0003d8  e28f0068          ADR      r0,|L1.1096|
0003dc  ebfffffe          BL       sysprintf
0003e0  e3a00000          MOV      r0,#0                 ;214
0003e4  e51f1178          LDR      r1,|L1.628|
0003e8  e5c10000          STRB     r0,[r1,#0]            ;214  ; powerStatus
0003ec  e51f017c          LDR      r0,|L1.632|
0003f0  e5900000          LDR      r0,[r0,#0]            ;215  ; pGuiGetInterface
0003f4  e5901010          LDR      r1,[r0,#0x10]         ;215
0003f8  e3a00001          MOV      r0,#1                 ;215
0003fc  e12fff31          BLX      r1                    ;215
000400  ea000001          B        |L1.1036|
                  |L1.1028|
000404  e28f0078          ADR      r0,|L1.1156|
000408  ebfffffe          BL       sysprintf
                  |L1.1036|
00040c  e3a00000          MOV      r0,#0                 ;221
000410  e59f102c          LDR      r1,|L1.1092|
000414  e5c10000          STRB     r0,[r1,#0]            ;221  ; powerStatusFlag
000418  ea000006          B        |L1.1080|
                  |L1.1052|
00041c  e1a00000          MOV      r0,r0                 ;223
000420  ea000004          B        |L1.1080|
                  |L1.1060|
000424  e1a00000          MOV      r0,r0                 ;225
000428  e3a00001          MOV      r0,#1                 ;226
00042c  e59f1010          LDR      r1,|L1.1092|
000430  e5c10000          STRB     r0,[r1,#0]            ;226  ; powerStatusFlag
000434  e1a00000          MOV      r0,r0                 ;227
                  |L1.1080|
000438  e1a00000          MOV      r0,r0                 ;222
00043c  e3a00001          MOV      r0,#1                 ;229
000440  eaffffe0          B        |L1.968|
;;;231    
                          ENDP

                  |L1.1092|
                          DCD      powerStatusFlag
                  |L1.1096|
000448  205b494e          DCB      " [INFO GUI] <Stand By> PowerCallbackFunc UPDATE_DATA_TI"
00044c  464f2047
000450  55495d20
000454  3c537461
000458  6e642042
00045c  793e2050
000460  6f776572
000464  43616c6c
000468  6261636b
00046c  46756e63
000470  20555044
000474  4154455f
000478  44415441
00047c  5f5449  
00047f  4d45520a          DCB      "MER\n",0
000483  00      
                  |L1.1156|
000484  205b494e          DCB      " [INFO GUI] <Stand By> PowerCallbackFunc ignore\n",0
000488  464f2047
00048c  55495d20
000490  3c537461
000494  6e642042
000498  793e2050
00049c  6f776572
0004a0  43616c6c
0004a4  6261636b
0004a8  46756e63
0004ac  2069676e
0004b0  6f72650a
0004b4  00      
0004b5  00                DCB      0
0004b6  00                DCB      0
0004b7  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  00                DCB      0x00
                  powerStatusFlag
000005  000000            DCB      0x00,0x00,0x00
                  tickStart
                          DCD      0x00000000
                  keyIgnoreFlag
00000c  00                DCB      0x00
                  refreshType
00000d  010000            DCB      0x01,0x00,0x00
                  nowIndex
                          DCD      0x00000000
                  oldIndex
                          DCD      0x00000000
                  statusStage
                          DCD      0x00000000
                  changeMsg
00001c  00                DCB      0x00
                  testing
00001d  00                DCB      0x00
                  keyTest
00001e  0000              DCB      0x00,0x00
                  keyTestTime
                          DCD      0x00000000
