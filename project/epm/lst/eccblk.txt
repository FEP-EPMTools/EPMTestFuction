; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\eccblk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\eccblk.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\eccblk.crf src\syshal\blk\eccblk.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  getUint64IDFromArray PROC
;;;62     /*-----------------------------------------*/
;;;63     static uint64_t getUint64IDFromArray(uint8_t* idArray, int idLen)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;64     {
000004  e1a09000          MOV      r9,r0
000008  e1a0a001          MOV      r10,r1
00000c  e3a01000          MOV      r1,#0
;;;65         uint64_t targetID = 0;
000010  e1a07001          MOV      r7,r1
000014  e1a08001          MOV      r8,r1
;;;66         for(int i = 0; i < idLen; i++)
000018  e3a04000          MOV      r4,#0
00001c  ea000008          B        |L1.68|
                  |L1.32|
;;;67         {            
;;;68             targetID = targetID | ((uint64_t)(idArray[i])<<(8*i));
000020  e7d95004          LDRB     r5,[r9,r4]
000024  e3a06000          MOV      r6,#0
000028  e1a02184          LSL      r2,r4,#3
00002c  e1a00005          MOV      r0,r5
000030  e1a01006          MOV      r1,r6
000034  ebfffffe          BL       __aeabi_llsl
000038  e1877000          ORR      r7,r7,r0
00003c  e1888001          ORR      r8,r8,r1
000040  e2844001          ADD      r4,r4,#1              ;66
                  |L1.68|
000044  e154000a          CMP      r4,r10                ;66
000048  bafffff4          BLT      |L1.32|
;;;69         }
;;;70         return targetID;
00004c  e1a00007          MOV      r0,r7
000050  e1a01008          MOV      r1,r8
;;;71     }
000054  e8bd87f0          POP      {r4-r10,pc}
;;;72     
                          ENDP

                  getItemNumFromString PROC
;;;73     static int getItemNumFromString(uint8_t* strArray, int strLen)
000058  e92d4ff0          PUSH     {r4-r11,lr}
;;;74     {
00005c  e24dd024          SUB      sp,sp,#0x24
000060  e1a0a000          MOV      r10,r0
000064  e1a09001          MOV      r9,r1
;;;75         int targetItemNum = 0;
000068  e3a0b000          MOV      r11,#0
;;;76         for(int i = 0; i < strLen; i++)
00006c  e3a04000          MOV      r4,#0
000070  ea000019          B        |L1.220|
                  |L1.116|
;;;77         {            
;;;78             targetItemNum = targetItemNum + (strArray[i]-'0') * pow(10, strLen - 1 - i);
000074  e2491001          SUB      r1,r9,#1
000078  e0410004          SUB      r0,r1,r4
00007c  ebfffffe          BL       __aeabi_i2d
000080  e1a07000          MOV      r7,r0
000084  e1a02007          MOV      r2,r7
000088  e1a03001          MOV      r3,r1
00008c  e3a00000          MOV      r0,#0
000090  e59f12b0          LDR      r1,|L1.840|
000094  ebfffffe          BL       pow
000098  e1cd00f0          STRD     r0,r1,[sp,#0]
00009c  e7da1004          LDRB     r1,[r10,r4]
0000a0  e2410030          SUB      r0,r1,#0x30
0000a4  ebfffffe          BL       __aeabi_i2d
0000a8  e1a05000          MOV      r5,r0
0000ac  e1cd20d0          LDRD     r2,r3,[sp,#0]
0000b0  ebfffffe          BL       __aeabi_dmul
0000b4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
0000b8  e1a0000b          MOV      r0,r11
0000bc  ebfffffe          BL       __aeabi_i2d
0000c0  e1cd00f8          STRD     r0,r1,[sp,#8]
0000c4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
0000c8  ebfffffe          BL       __aeabi_dadd
0000cc  e1cd01f8          STRD     r0,r1,[sp,#0x18]
0000d0  ebfffffe          BL       __aeabi_d2iz
0000d4  e1a0b000          MOV      r11,r0
0000d8  e2844001          ADD      r4,r4,#1              ;76
                  |L1.220|
0000dc  e1540009          CMP      r4,r9                 ;76
0000e0  baffffe3          BLT      |L1.116|
;;;79             //sysprintf(" getItemNumFromString[%d:%02x]: %08d\r\n", i, strArray[i], targetItemNum); 
;;;80         }
;;;81         return targetItemNum;
0000e4  e1a0000b          MOV      r0,r11
0000e8  e28dd024          ADD      sp,sp,#0x24
;;;82     }
0000ec  e8bd8ff0          POP      {r4-r11,pc}
;;;83     static int searchTargetID(uint64_t target, EccBLKItem* pEccKBItem, int itemSize)
                          ENDP

                  searchTargetID PROC
0000f0  e92d47ff          PUSH     {r0-r10,lr}
;;;84     {
0000f4  e24dd020          SUB      sp,sp,#0x20
0000f8  e1a06002          MOV      r6,r2
0000fc  e1a09003          MOV      r9,r3
;;;85         int first = 0;
000100  e3a07000          MOV      r7,#0
;;;86         int last = itemSize - 1;
000104  e2498001          SUB      r8,r9,#1
;;;87         int middle = (first+last)/2;
000108  e0870008          ADD      r0,r7,r8
00010c  e0801fa0          ADD      r1,r0,r0,LSR #31
000110  e1a050c1          ASR      r5,r1,#1
;;;88         #ifdef _PC_ENV_
;;;89         sysprintf(" searchTargetID: [0x%016llX]\r\n", target); 
;;;90         #else
;;;91         uint8_t* pUint8 = (uint8_t*)&target;
000114  e28d4020          ADD      r4,sp,#0x20
;;;92         sysprintf(" searchTargetID: [0x%02X %02X %02X %02X %02X %02X %02X %02X]\r\n", pUint8[7], pUint8[6], pUint8[5], pUint8[4], pUint8[3], pUint8[2], pUint8[1], pUint8[0]);
000118  e5d40000          LDRB     r0,[r4,#0]
00011c  e5d42001          LDRB     r2,[r4,#1]
000120  e5d41002          LDRB     r1,[r4,#2]
000124  e5d43003          LDRB     r3,[r4,#3]
000128  e58d0010          STR      r0,[sp,#0x10]
00012c  e58d1008          STR      r1,[sp,#8]
000130  e58d200c          STR      r2,[sp,#0xc]
000134  e58d3004          STR      r3,[sp,#4]
000138  e5d40004          LDRB     r0,[r4,#4]
00013c  e58d0000          STR      r0,[sp,#0]
000140  e5d43005          LDRB     r3,[r4,#5]
000144  e5d42006          LDRB     r2,[r4,#6]
000148  e5d41007          LDRB     r1,[r4,#7]
00014c  e28f0f7e          ADR      r0,|L1.844|
000150  ebfffffe          BL       sysprintf
;;;93         #endif
;;;94         while (first <= last) 
000154  ea00001a          B        |L1.452|
                  |L1.344|
;;;95         {
;;;96             if (pEccKBItem[middle].value < target)
000158  e0851105          ADD      r1,r5,r5,LSL #2
00015c  e0811185          ADD      r1,r1,r5,LSL #3
000160  e0861081          ADD      r1,r6,r1,LSL #1
000164  e2810011          ADD      r0,r1,#0x11
000168  ebfffffe          BL       __aeabi_uread8
00016c  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
000170  e0500002          SUBS     r0,r0,r2
000174  e0d10003          SBCS     r0,r1,r3
000178  2a000001          BCS      |L1.388|
;;;97             {
;;;98                 first = middle + 1;    
00017c  e2857001          ADD      r7,r5,#1
000180  ea00000c          B        |L1.440|
                  |L1.388|
;;;99             }
;;;100            else if (pEccKBItem[middle].value == target) 
000184  e0851105          ADD      r1,r5,r5,LSL #2
000188  e0811185          ADD      r1,r1,r5,LSL #3
00018c  e0861081          ADD      r1,r6,r1,LSL #1
000190  e2810011          ADD      r0,r1,#0x11
000194  ebfffffe          BL       __aeabi_uread8
000198  e59d3020          LDR      r3,[sp,#0x20]
00019c  e0200003          EOR      r0,r0,r3
0001a0  e59d2024          LDR      r2,[sp,#0x24]
0001a4  e0211002          EOR      r1,r1,r2
0001a8  e1900001          ORRS     r0,r0,r1
0001ac  1a000000          BNE      |L1.436|
;;;101            {
;;;102                
;;;103                break;
0001b0  ea000005          B        |L1.460|
                  |L1.436|
;;;104            }
;;;105            else
;;;106            {
;;;107                last = middle - 1;
0001b4  e2458001          SUB      r8,r5,#1
                  |L1.440|
;;;108            }
;;;109     
;;;110            middle = (first + last)/2;
0001b8  e0870008          ADD      r0,r7,r8
0001bc  e0801fa0          ADD      r1,r0,r0,LSR #31
0001c0  e1a050c1          ASR      r5,r1,#1
                  |L1.452|
0001c4  e1570008          CMP      r7,r8                 ;94
0001c8  daffffe2          BLE      |L1.344|
                  |L1.460|
0001cc  e1a00000          MOV      r0,r0                 ;103
;;;111        }
;;;112        if (first > last)
0001d0  e1570008          CMP      r7,r8
0001d4  da000011          BLE      |L1.544|
;;;113        {
;;;114            #ifdef _PC_ENV_
;;;115            sysprintf("Not found! [0x%016llX] is not present in the list.\n", target);
;;;116            #else
;;;117            sysprintf("Not found! [0x%02X %02X %02X %02X %02X %02X %02X %02X] is not present in the list.\n", pUint8[7], pUint8[6], pUint8[5], pUint8[4], pUint8[3], pUint8[2], pUint8[1], pUint8[0]);
0001d8  e5d40000          LDRB     r0,[r4,#0]
0001dc  e5d41001          LDRB     r1,[r4,#1]
0001e0  e5d42002          LDRB     r2,[r4,#2]
0001e4  e5d43003          LDRB     r3,[r4,#3]
0001e8  e58d0010          STR      r0,[sp,#0x10]
0001ec  e58d100c          STR      r1,[sp,#0xc]
0001f0  e58d2008          STR      r2,[sp,#8]
0001f4  e58d3004          STR      r3,[sp,#4]
0001f8  e5d40004          LDRB     r0,[r4,#4]
0001fc  e58d0000          STR      r0,[sp,#0]
000200  e5d43005          LDRB     r3,[r4,#5]
000204  e5d42006          LDRB     r2,[r4,#6]
000208  e5d41007          LDRB     r1,[r4,#7]
00020c  e59f0178          LDR      r0,|L1.908|
000210  ebfffffe          BL       sysprintf
;;;118            #endif
;;;119            return -1;
000214  e3e00000          MVN      r0,#0
                  |L1.536|
000218  e28dd030          ADD      sp,sp,#0x30
;;;120        }
;;;121        else
;;;122        {
;;;123            #ifdef _PC_ENV_
;;;124            sysprintf("found! [0x%016llX] at location %d.: [%s]\n", target, middle+1, pEccKBItem[middle].str);
;;;125            #else
;;;126            sysprintf("found! [0x%02X %02X %02X %02X %02X %02X %02X %02X] at location %d.: [%s]\n", pUint8[7], pUint8[6], pUint8[5], pUint8[4], pUint8[3], pUint8[2], pUint8[1], pUint8[0], middle+1, pEccKBItem[middle].str);
;;;127            #endif
;;;128            return middle+1;
;;;129        }
;;;130    }
00021c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.544|
000220  e0850105          ADD      r0,r5,r5,LSL #2       ;126
000224  e0800185          ADD      r0,r0,r5,LSL #3       ;126
000228  e0860080          ADD      r0,r6,r0,LSL #1       ;126
00022c  e2853001          ADD      r3,r5,#1              ;126
000230  e5d41000          LDRB     r1,[r4,#0]            ;126
000234  e5d42001          LDRB     r2,[r4,#1]            ;126
000238  e58d0018          STR      r0,[sp,#0x18]         ;126
00023c  e58d1010          STR      r1,[sp,#0x10]         ;126
000240  e58d3014          STR      r3,[sp,#0x14]         ;126
000244  e58d200c          STR      r2,[sp,#0xc]          ;126
000248  e5d40002          LDRB     r0,[r4,#2]            ;126
00024c  e5d41003          LDRB     r1,[r4,#3]            ;126
000250  e5d42004          LDRB     r2,[r4,#4]            ;126
000254  e58d0008          STR      r0,[sp,#8]            ;126
000258  e58d1004          STR      r1,[sp,#4]            ;126
00025c  e58d2000          STR      r2,[sp,#0]            ;126
000260  e5d43005          LDRB     r3,[r4,#5]            ;126
000264  e5d42006          LDRB     r2,[r4,#6]            ;126
000268  e5d41007          LDRB     r1,[r4,#7]            ;126
00026c  e59f011c          LDR      r0,|L1.912|
000270  ebfffffe          BL       sysprintf
000274  e2850001          ADD      r0,r5,#1              ;128
000278  eaffffe6          B        |L1.536|
;;;131    
                          ENDP

                  ECCBLKLoad PROC
;;;132    static BOOL ECCBLKLoad(uint8_t* data, int size, EccBLKItem** pItem, int* itemNum)
00027c  e92d4ff0          PUSH     {r4-r11,lr}
;;;133    {
000280  e24dd02c          SUB      sp,sp,#0x2c
000284  e1a09000          MOV      r9,r0
000288  e1a0a001          MOV      r10,r1
00028c  e1a05002          MOV      r5,r2
000290  e1a07003          MOV      r7,r3
;;;134        uint8_t* pStart = data + 25;
000294  e2890019          ADD      r0,r9,#0x19
000298  e58d0028          STR      r0,[sp,#0x28]
;;;135        int      TargetItemNum = 0;
00029c  e3a00000          MOV      r0,#0
0002a0  e58d0024          STR      r0,[sp,#0x24]
;;;136        uint8_t  itemDataLen = ECC_BLK_ITEM_BYTE_LEN;
0002a4  e3a00009          MOV      r0,#9
0002a8  e58d0020          STR      r0,[sp,#0x20]
;;;137        int oriSize = size;
0002ac  e1a0b00a          MOV      r11,r10
;;;138        size = size - (25 + 32);
0002b0  e24aa039          SUB      r10,r10,#0x39
;;;139        int index = 0;
0002b4  e3a06000          MOV      r6,#0
;;;140        //__SHOW_FREE_HEAP_SIZE__
;;;141        sysprintf("\r\n====  ECCKBLNLoad (size = %d, itemDataLen = %d) ====\r\n", size, itemDataLen);
0002b8  e1a0100a          MOV      r1,r10
0002bc  e28f00d0          ADR      r0,|L1.916|
0002c0  e59d2020          LDR      r2,[sp,#0x20]
0002c4  ebfffffe          BL       sysprintf
;;;142        if((size%itemDataLen) != 0)
0002c8  e1a0000a          MOV      r0,r10
0002cc  e59d1020          LDR      r1,[sp,#0x20]
0002d0  ebfffffe          BL       __aeabi_idivmod
0002d4  e3510000          CMP      r1,#0
0002d8  0a000005          BEQ      |L1.756|
;;;143        {
;;;144            sysprintf("ECCKBLNLoad ERROR(maybe empty record):  [%d]\r\n", ECC_BLK_ITEM_BYTE_LEN);
0002dc  e3a01009          MOV      r1,#9
0002e0  e28f00e8          ADR      r0,|L1.976|
0002e4  ebfffffe          BL       sysprintf
;;;145            return FALSE;
0002e8  e3a00000          MOV      r0,#0
                  |L1.748|
0002ec  e28dd02c          ADD      sp,sp,#0x2c
;;;146        }
;;;147        *itemNum = size/itemDataLen;
;;;148        TargetItemNum = getItemNumFromString(data + oriSize - 11, 8);
;;;149        sysprintf("ECCKBLNLoad *itemNum = [%d : %d]\r\n", *itemNum, TargetItemNum);
;;;150        if(TargetItemNum != *itemNum)
;;;151        {
;;;152            sysprintf("ECCKBLNLoad TargetItemNum ERROR\r\n");
;;;153            return FALSE;
;;;154        }
;;;155        if(memcmp(data + oriSize - 3, "END", 3) == 0)
;;;156        {
;;;157            sysprintf("ECCKBLNLoad tail END OK\r\n");
;;;158        }
;;;159        else
;;;160        {
;;;161            sysprintf("ECCKBLNLoad tail END[%d] ERROR [%s]\r\n", sizeof("END"), data + oriSize - 3);
;;;162            return FALSE;
;;;163        }
;;;164        //__SHOW_FREE_HEAP_SIZE__
;;;165        if(*pItem != NULL)
;;;166        {
;;;167            sysprintf("ECCKBLNLoad FREE memory\r\n");
;;;168            //__SHOW_FREE_HEAP_SIZE__
;;;169            vPortFree(*pItem);
;;;170        }
;;;171        else
;;;172        {
;;;173            sysprintf("ECCKBLNLoad ignore FREE memory\r\n");
;;;174        }
;;;175        //__SHOW_FREE_HEAP_SIZE__
;;;176        *pItem  = (EccBLKItem*)pvPortMalloc(*itemNum * sizeof(EccBLKItem));
;;;177        if(*pItem == NULL)
;;;178        {
;;;179            sysprintf("ECCKBLNLoad ERROR: *pItem alloc error[%d]\r\n", *itemNum * sizeof(EccBLKItem));
;;;180            *itemNum = 0;
;;;181            return FALSE;
;;;182        }
;;;183        sysprintf("ECCKBLNLoad alloc size: %d bytes \r\n", *itemNum * sizeof(EccBLKItem));
;;;184        //__SHOW_FREE_HEAP_SIZE__
;;;185        for(index = 0; index < *itemNum; index++)
;;;186        {
;;;187            uint8_t* pTarget = pStart + index*itemDataLen;
;;;188            sprintf((char*)((*pItem)[index].str), "%02x%02x%02x%02x%02x%02x%02x%02x", pTarget[7], pTarget[6], pTarget[5], pTarget[4], pTarget[3], pTarget[2], pTarget[1], pTarget[0]);
;;;189    #if(1)
;;;190            (*pItem)[index].value = getUint64IDFromArray(pTarget, 8);
;;;191    #else
;;;192            (*pItem)[index].value = 0;        
;;;193            for(int i = 0; i<8; i++)
;;;194            {            
;;;195                (*pItem)[index].value = (*pItem)[index].value | ((uint64_t)(pTarget[i])<<(8*i));
;;;196                //sysprintf("  --> <%08d>: %d [%d, 0x%llx ]\r\n", index, i, (*pItem)[index].value, (*pItem)[index].value);  
;;;197            }
;;;198    #endif
;;;199            (*pItem)[index].lockFlag = pTarget[8];
;;;200            
;;;201    #if(1)
;;;202            if((pTarget[3] == 0x57) && (pTarget[2] == 0x7a)&& (pTarget[1] == 0xde))
;;;203            {
;;;204                #ifdef _PC_ENV_
;;;205                sysprintf("\r\n!!!!!!!!! <%08d>:[%s (%d) : %lld, 0x%016llX]!!!!!!!!! \r\n", index, (char*)((*pItem)[index].str), (*pItem)[index].lockFlag, (*pItem)[index].value,  (*pItem)[index].value);  
;;;206                #else
;;;207                uint8_t* pUint8 = (uint8_t*)&(*pItem)[index].value;
;;;208                sysprintf("\r\n!!!!!!!!! <%08d>:[%s (%d) : [0x%02X %02X %02X %02X %02X %02X %02X %02X]]!!!!!!!!! \r\n", index, (char*)((*pItem)[index].str), (*pItem)[index].lockFlag, pUint8[7], pUint8[6], pUint8[5], pUint8[4], pUint8[3], pUint8[2], pUint8[1], pUint8[0]);  
;;;209                #endif            
;;;210            }
;;;211    #else
;;;212            /*
;;;213             *  <00000000>:[000000000009e5c5 (1) : 648645, 0x000000000009E5C5]
;;;214                <00000001>:[00000000000a8645 (2) : 689733, 0x00000000000A8645]
;;;215                <00000002>:[00000000000a93d5 (2) : 693205, 0x00000000000A93D5]
;;;216                <00000003>:[00000000000a9555 (1) : 693589, 0x00000000000A9555]
;;;217                <00000004>:[00000000000ab2e5 (1) : 701157, 0x00000000000AB2E5]
;;;218                <00000005>:[00000000000af095 (1) : 716949, 0x00000000000AF095]
;;;219             */
;;;220            if(index > 4)
;;;221                break;
;;;222            sysprintf(" <%08d>:[%s (%d) : %lld, 0x%016llX]\r\n", index, (char*)((*pItem)[index].str), (*pItem)[index].lockFlag, (*pItem)[index].value,  (*pItem)[index].value);   
;;;223            
;;;224    #endif
;;;225       
;;;226        }  
;;;227        return TRUE;
;;;228    }
0002f0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.756|
0002f4  e1a0000a          MOV      r0,r10                ;147
0002f8  e59d1020          LDR      r1,[sp,#0x20]         ;147
0002fc  ebfffffe          BL       __aeabi_idivmod
000300  e5870000          STR      r0,[r7,#0]            ;147
000304  e089100b          ADD      r1,r9,r11             ;148
000308  e241000b          SUB      r0,r1,#0xb            ;148
00030c  e3a01008          MOV      r1,#8                 ;148
000310  ebfffffe          BL       getItemNumFromString
000314  e58d0024          STR      r0,[sp,#0x24]         ;148
000318  e5971000          LDR      r1,[r7,#0]            ;149
00031c  e28f00dc          ADR      r0,|L1.1024|
000320  e59d2024          LDR      r2,[sp,#0x24]         ;149
000324  ebfffffe          BL       sysprintf
000328  e5971000          LDR      r1,[r7,#0]            ;150
00032c  e59d0024          LDR      r0,[sp,#0x24]         ;150
000330  e1510000          CMP      r1,r0                 ;150
000334  0a000043          BEQ      |L1.1096|
000338  e28f00e4          ADR      r0,|L1.1060|
00033c  ebfffffe          BL       sysprintf
000340  e3a00000          MOV      r0,#0                 ;153
000344  eaffffe8          B        |L1.748|
                  |L1.840|
                          DCD      0x40240000
                  |L1.844|
00034c  20736561          DCB      " searchTargetID: [0x%02X %02X %02X %02X %02X %02X %02X "
000350  72636854
000354  61726765
000358  7449443a
00035c  205b3078
000360  25303258
000364  20253032
000368  58202530
00036c  32582025
000370  30325820
000374  25303258
000378  20253032
00037c  58202530
000380  325820  
000383  25303258          DCB      "%02X]\r\n",0
000387  5d0d0a00
00038b  00                DCB      0
                  |L1.908|
                          DCD      ||.constdata||
                  |L1.912|
                          DCD      ||.constdata||+0x54
                  |L1.916|
000394  0d0a3d3d          DCB      "\r\n====  ECCKBLNLoad (size = %d, itemDataLen = %d) ==="
000398  3d3d2020
00039c  4543434b
0003a0  424c4e4c
0003a4  6f616420
0003a8  2873697a
0003ac  65203d20
0003b0  25642c20
0003b4  6974656d
0003b8  44617461
0003bc  4c656e20
0003c0  3d202564
0003c4  29203d3d
0003c8  3d      
0003c9  3d0d0a00          DCB      "=\r\n",0
0003cd  00                DCB      0
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L1.976|
0003d0  4543434b          DCB      "ECCKBLNLoad ERROR(maybe empty record):  [%d]\r\n",0
0003d4  424c4e4c
0003d8  6f616420
0003dc  4552524f
0003e0  52286d61
0003e4  79626520
0003e8  656d7074
0003ec  79207265
0003f0  636f7264
0003f4  293a2020
0003f8  5b25645d
0003fc  0d0a00  
0003ff  00                DCB      0
                  |L1.1024|
000400  4543434b          DCB      "ECCKBLNLoad *itemNum = [%d : %d]\r\n",0
000404  424c4e4c
000408  6f616420
00040c  2a697465
000410  6d4e756d
000414  203d205b
000418  2564203a
00041c  2025645d
000420  0d0a00  
000423  00                DCB      0
                  |L1.1060|
000424  4543434b          DCB      "ECCKBLNLoad TargetItemNum ERROR\r\n",0
000428  424c4e4c
00042c  6f616420
000430  54617267
000434  65744974
000438  656d4e75
00043c  6d204552
000440  524f520d
000444  0a00    
000446  00                DCB      0
000447  00                DCB      0
                  |L1.1096|
000448  e089100b          ADD      r1,r9,r11             ;155
00044c  e2410003          SUB      r0,r1,#3              ;155
000450  e3a02003          MOV      r2,#3                 ;155
000454  e28f1f85          ADR      r1,|L1.1648|
000458  ebfffffe          BL       memcmp
00045c  e3500000          CMP      r0,#0                 ;155
000460  1a000002          BNE      |L1.1136|
000464  e28f0f82          ADR      r0,|L1.1652|
000468  ebfffffe          BL       sysprintf
00046c  ea000006          B        |L1.1164|
                  |L1.1136|
000470  e089000b          ADD      r0,r9,r11             ;161
000474  e2402003          SUB      r2,r0,#3              ;161
000478  e3a01004          MOV      r1,#4                 ;161
00047c  e28f0f83          ADR      r0,|L1.1680|
000480  ebfffffe          BL       sysprintf
000484  e3a00000          MOV      r0,#0                 ;162
000488  eaffff97          B        |L1.748|
                  |L1.1164|
00048c  e5950000          LDR      r0,[r5,#0]            ;165
000490  e3500000          CMP      r0,#0                 ;165
000494  0a000004          BEQ      |L1.1196|
000498  e28f0f86          ADR      r0,|L1.1720|
00049c  ebfffffe          BL       sysprintf
0004a0  e5950000          LDR      r0,[r5,#0]            ;169
0004a4  ebfffffe          BL       vPortFree
0004a8  ea000001          B        |L1.1204|
                  |L1.1196|
0004ac  e28f0e22          ADR      r0,|L1.1748|
0004b0  ebfffffe          BL       sysprintf
                  |L1.1204|
0004b4  e3a0201a          MOV      r2,#0x1a              ;176
0004b8  e5971000          LDR      r1,[r7,#0]            ;176
0004bc  e0000291          MUL      r0,r1,r2              ;176
0004c0  ebfffffe          BL       pvPortMalloc
0004c4  e5850000          STR      r0,[r5,#0]            ;176
0004c8  e5950000          LDR      r0,[r5,#0]            ;177
0004cc  e3500000          CMP      r0,#0                 ;177
0004d0  1a000007          BNE      |L1.1268|
0004d4  e3a0201a          MOV      r2,#0x1a              ;179
0004d8  e5970000          LDR      r0,[r7,#0]            ;179
0004dc  e0010290          MUL      r1,r0,r2              ;179
0004e0  e28f0e21          ADR      r0,|L1.1784|
0004e4  ebfffffe          BL       sysprintf
0004e8  e3a00000          MOV      r0,#0                 ;180
0004ec  e5870000          STR      r0,[r7,#0]            ;180
0004f0  eaffff7d          B        |L1.748|
                  |L1.1268|
0004f4  e3a0201a          MOV      r2,#0x1a              ;183
0004f8  e5970000          LDR      r0,[r7,#0]            ;183
0004fc  e0010290          MUL      r1,r0,r2              ;183
000500  e28f0f87          ADR      r0,|L1.1828|
000504  ebfffffe          BL       sysprintf
000508  e3a06000          MOV      r6,#0                 ;185
00050c  ea000052          B        |L1.1628|
                  |L1.1296|
000510  e59d0028          LDR      r0,[sp,#0x28]         ;187
000514  e59d1020          LDR      r1,[sp,#0x20]         ;187
000518  e0240196          MLA      r4,r6,r1,r0           ;187
00051c  e5d40000          LDRB     r0,[r4,#0]            ;188
000520  e5d41001          LDRB     r1,[r4,#1]            ;188
000524  e5d42002          LDRB     r2,[r4,#2]            ;188
000528  e5d43003          LDRB     r3,[r4,#3]            ;188
00052c  e58d0014          STR      r0,[sp,#0x14]         ;188
000530  e58d1010          STR      r1,[sp,#0x10]         ;188
000534  e58d200c          STR      r2,[sp,#0xc]          ;188
000538  e58d3008          STR      r3,[sp,#8]            ;188
00053c  e5d40004          LDRB     r0,[r4,#4]            ;188
000540  e5d41005          LDRB     r1,[r4,#5]            ;188
000544  e58d0004          STR      r0,[sp,#4]            ;188
000548  e58d1000          STR      r1,[sp,#0]            ;188
00054c  e086c106          ADD      r12,r6,r6,LSL #2      ;188
000550  e08cc186          ADD      r12,r12,r6,LSL #3     ;188
000554  e5951000          LDR      r1,[r5,#0]            ;188
000558  e081008c          ADD      r0,r1,r12,LSL #1      ;188
00055c  e5d43006          LDRB     r3,[r4,#6]            ;188
000560  e5d42007          LDRB     r2,[r4,#7]            ;188
000564  e28f1f77          ADR      r1,|L1.1864|
000568  ebfffffe          BL       __2sprintf
00056c  e3a01008          MOV      r1,#8                 ;190
000570  e1a00004          MOV      r0,r4                 ;190
000574  ebfffffe          BL       getUint64IDFromArray
000578  e1cd01f8          STRD     r0,r1,[sp,#0x18]      ;190
00057c  e0860106          ADD      r0,r6,r6,LSL #2       ;190
000580  e0800186          ADD      r0,r0,r6,LSL #3       ;190
000584  e5951000          LDR      r1,[r5,#0]            ;190
000588  e0810080          ADD      r0,r1,r0,LSL #1       ;190
00058c  e2802011          ADD      r2,r0,#0x11           ;190
000590  e1cd01d8          LDRD     r0,r1,[sp,#0x18]      ;190
000594  ebfffffe          BL       __aeabi_uwrite8
000598  e5d40008          LDRB     r0,[r4,#8]            ;199
00059c  e0862106          ADD      r2,r6,r6,LSL #2       ;199
0005a0  e0822186          ADD      r2,r2,r6,LSL #3       ;199
0005a4  e5951000          LDR      r1,[r5,#0]            ;199
0005a8  e0811082          ADD      r1,r1,r2,LSL #1       ;199
0005ac  e5c10019          STRB     r0,[r1,#0x19]         ;199
0005b0  e5d40003          LDRB     r0,[r4,#3]            ;202
0005b4  e3500057          CMP      r0,#0x57              ;202
0005b8  1a000026          BNE      |L1.1624|
0005bc  e5d40002          LDRB     r0,[r4,#2]            ;202
0005c0  e350007a          CMP      r0,#0x7a              ;202
0005c4  1a000023          BNE      |L1.1624|
0005c8  e5d40001          LDRB     r0,[r4,#1]            ;202
0005cc  e35000de          CMP      r0,#0xde              ;202
0005d0  1a000020          BNE      |L1.1624|
0005d4  e0861106          ADD      r1,r6,r6,LSL #2       ;207
0005d8  e0811186          ADD      r1,r1,r6,LSL #3       ;207
0005dc  e5950000          LDR      r0,[r5,#0]            ;207
0005e0  e0800081          ADD      r0,r0,r1,LSL #1       ;207
0005e4  e2808011          ADD      r8,r0,#0x11           ;207
0005e8  e5d80000          LDRB     r0,[r8,#0]            ;208
0005ec  e5d81001          LDRB     r1,[r8,#1]            ;208
0005f0  e5d82002          LDRB     r2,[r8,#2]            ;208
0005f4  e5d83003          LDRB     r3,[r8,#3]            ;208
0005f8  e58d001c          STR      r0,[sp,#0x1c]         ;208
0005fc  e58d1018          STR      r1,[sp,#0x18]         ;208
000600  e58d2014          STR      r2,[sp,#0x14]         ;208
000604  e58d3010          STR      r3,[sp,#0x10]         ;208
000608  e5d80004          LDRB     r0,[r8,#4]            ;208
00060c  e5d82005          LDRB     r2,[r8,#5]            ;208
000610  e5d81006          LDRB     r1,[r8,#6]            ;208
000614  e5d83007          LDRB     r3,[r8,#7]            ;208
000618  e58d000c          STR      r0,[sp,#0xc]          ;208
00061c  e98d0006          STMIB    sp,{r1,r2}            ;208
000620  e58d3000          STR      r3,[sp,#0]            ;208
000624  e0861106          ADD      r1,r6,r6,LSL #2       ;208
000628  e0811186          ADD      r1,r1,r6,LSL #3       ;208
00062c  e5950000          LDR      r0,[r5,#0]            ;208
000630  e0800081          ADD      r0,r0,r1,LSL #1       ;208
000634  e5d03019          LDRB     r3,[r0,#0x19]         ;208
000638  e0861106          ADD      r1,r6,r6,LSL #2       ;208
00063c  e0811186          ADD      r1,r1,r6,LSL #3       ;208
000640  e5950000          LDR      r0,[r5,#0]            ;208
000644  e0802081          ADD      r2,r0,r1,LSL #1       ;208
000648  e1a01006          MOV      r1,r6                 ;208
00064c  e59f0118          LDR      r0,|L1.1900|
000650  ebfffffe          BL       sysprintf
000654  e1a00000          MOV      r0,r0                 ;210
                  |L1.1624|
000658  e2866001          ADD      r6,r6,#1              ;185
                  |L1.1628|
00065c  e5970000          LDR      r0,[r7,#0]            ;185
000660  e1500006          CMP      r0,r6                 ;185
000664  caffffa9          BGT      |L1.1296|
000668  e3a00001          MOV      r0,#1                 ;227
00066c  eaffff1e          B        |L1.748|
                  |L1.1648|
000670  454e4400          DCB      "END",0
                  |L1.1652|
000674  4543434b          DCB      "ECCKBLNLoad tail END OK\r\n",0
000678  424c4e4c
00067c  6f616420
000680  7461696c
000684  20454e44
000688  204f4b0d
00068c  0a00    
00068e  00                DCB      0
00068f  00                DCB      0
                  |L1.1680|
000690  4543434b          DCB      "ECCKBLNLoad tail END[%d] ERROR [%s]\r\n",0
000694  424c4e4c
000698  6f616420
00069c  7461696c
0006a0  20454e44
0006a4  5b25645d
0006a8  20455252
0006ac  4f52205b
0006b0  25735d0d
0006b4  0a00    
0006b6  00                DCB      0
0006b7  00                DCB      0
                  |L1.1720|
0006b8  4543434b          DCB      "ECCKBLNLoad FREE memory\r\n",0
0006bc  424c4e4c
0006c0  6f616420
0006c4  46524545
0006c8  206d656d
0006cc  6f72790d
0006d0  0a00    
0006d2  00                DCB      0
0006d3  00                DCB      0
                  |L1.1748|
0006d4  4543434b          DCB      "ECCKBLNLoad ignore FREE memory\r\n",0
0006d8  424c4e4c
0006dc  6f616420
0006e0  69676e6f
0006e4  72652046
0006e8  52454520
0006ec  6d656d6f
0006f0  72790d0a
0006f4  00      
0006f5  00                DCB      0
0006f6  00                DCB      0
0006f7  00                DCB      0
                  |L1.1784|
0006f8  4543434b          DCB      "ECCKBLNLoad ERROR: *pItem alloc error[%d]\r\n",0
0006fc  424c4e4c
000700  6f616420
000704  4552524f
000708  523a202a
00070c  70497465
000710  6d20616c
000714  6c6f6320
000718  6572726f
00071c  725b2564
000720  5d0d0a00
                  |L1.1828|
000724  4543434b          DCB      "ECCKBLNLoad alloc size: %d bytes \r\n",0
000728  424c4e4c
00072c  6f616420
000730  616c6c6f
000734  63207369
000738  7a653a20
00073c  25642062
000740  79746573
000744  200d0a00
                  |L1.1864|
000748  25303278          DCB      "%02x%02x%02x%02x%02x%02x%02x%02x",0
00074c  25303278
000750  25303278
000754  25303278
000758  25303278
00075c  25303278
000760  25303278
000764  25303278
000768  00      
000769  00                DCB      0
00076a  00                DCB      0
00076b  00                DCB      0
                  |L1.1900|
                          DCD      ||.constdata||+0xa0
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4e6f7420          DCB      0x4e,0x6f,0x74,0x20
000004  666f756e          DCB      0x66,0x6f,0x75,0x6e
000008  6421205b          DCB      0x64,0x21,0x20,0x5b
00000c  30782530          DCB      0x30,0x78,0x25,0x30
000010  32582025          DCB      0x32,0x58,0x20,0x25
000014  30325820          DCB      0x30,0x32,0x58,0x20
000018  25303258          DCB      0x25,0x30,0x32,0x58
00001c  20253032          DCB      0x20,0x25,0x30,0x32
000020  58202530          DCB      0x58,0x20,0x25,0x30
000024  32582025          DCB      0x32,0x58,0x20,0x25
000028  30325820          DCB      0x30,0x32,0x58,0x20
00002c  25303258          DCB      0x25,0x30,0x32,0x58
000030  20253032          DCB      0x20,0x25,0x30,0x32
000034  585d2069          DCB      0x58,0x5d,0x20,0x69
000038  73206e6f          DCB      0x73,0x20,0x6e,0x6f
00003c  74207072          DCB      0x74,0x20,0x70,0x72
000040  6573656e          DCB      0x65,0x73,0x65,0x6e
000044  7420696e          DCB      0x74,0x20,0x69,0x6e
000048  20746865          DCB      0x20,0x74,0x68,0x65
00004c  206c6973          DCB      0x20,0x6c,0x69,0x73
000050  742e0a00          DCB      0x74,0x2e,0x0a,0x00
000054  666f756e          DCB      0x66,0x6f,0x75,0x6e
000058  6421205b          DCB      0x64,0x21,0x20,0x5b
00005c  30782530          DCB      0x30,0x78,0x25,0x30
000060  32582025          DCB      0x32,0x58,0x20,0x25
000064  30325820          DCB      0x30,0x32,0x58,0x20
000068  25303258          DCB      0x25,0x30,0x32,0x58
00006c  20253032          DCB      0x20,0x25,0x30,0x32
000070  58202530          DCB      0x58,0x20,0x25,0x30
000074  32582025          DCB      0x32,0x58,0x20,0x25
000078  30325820          DCB      0x30,0x32,0x58,0x20
00007c  25303258          DCB      0x25,0x30,0x32,0x58
000080  20253032          DCB      0x20,0x25,0x30,0x32
000084  585d2061          DCB      0x58,0x5d,0x20,0x61
000088  74206c6f          DCB      0x74,0x20,0x6c,0x6f
00008c  63617469          DCB      0x63,0x61,0x74,0x69
000090  6f6e2025          DCB      0x6f,0x6e,0x20,0x25
000094  642e3a20          DCB      0x64,0x2e,0x3a,0x20
000098  5b25735d          DCB      0x5b,0x25,0x73,0x5d
00009c  0a000000          DCB      0x0a,0x00,0x00,0x00
0000a0  0d0a2121          DCB      0x0d,0x0a,0x21,0x21
0000a4  21212121          DCB      0x21,0x21,0x21,0x21
0000a8  21212120          DCB      0x21,0x21,0x21,0x20
0000ac  3c253038          DCB      0x3c,0x25,0x30,0x38
0000b0  643e3a5b          DCB      0x64,0x3e,0x3a,0x5b
0000b4  25732028          DCB      0x25,0x73,0x20,0x28
0000b8  25642920          DCB      0x25,0x64,0x29,0x20
0000bc  3a205b30          DCB      0x3a,0x20,0x5b,0x30
0000c0  78253032          DCB      0x78,0x25,0x30,0x32
0000c4  58202530          DCB      0x58,0x20,0x25,0x30
0000c8  32582025          DCB      0x32,0x58,0x20,0x25
0000cc  30325820          DCB      0x30,0x32,0x58,0x20
0000d0  25303258          DCB      0x25,0x30,0x32,0x58
0000d4  20253032          DCB      0x20,0x25,0x30,0x32
0000d8  58202530          DCB      0x58,0x20,0x25,0x30
0000dc  32582025          DCB      0x32,0x58,0x20,0x25
0000e0  30325820          DCB      0x30,0x32,0x58,0x20
0000e4  25303258          DCB      0x25,0x30,0x32,0x58
0000e8  5d5d2121          DCB      0x5d,0x5d,0x21,0x21
0000ec  21212121          DCB      0x21,0x21,0x21,0x21
0000f0  21212120          DCB      0x21,0x21,0x21,0x20
0000f4  0d0a00            DCB      0x0d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  currentDataIndex
                          DCD      0x00000000
