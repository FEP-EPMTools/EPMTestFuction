; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\pwm.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\pwm.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\pwm.crf ..\..\common\src\BSP\Driver\Source\pwm.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pwmISR PROC
                  |L1.0|
;;;312      */
;;;313    VOID pwmISR(PVOID pvParam)
000000  e1a02000          MOV      r2,r0
;;;314    {
;;;315        INT i;
;;;316    
;;;317        UINT32 uRegisterValue = 0;
000004  e3a01000          MOV      r1,#0
;;;318        uRegisterValue = inpw(REG_PWM_PIIR);// Get PIIR value
000008  e59f3e44          LDR      r3,|L1.3668|
00000c  e5931040          LDR      r1,[r3,#0x40]
;;;319        for(i = 0; i < PWM_TIMER_NUM ; i++) {
000010  e3a00000          MOV      r0,#0
000014  ea000009          B        |L1.64|
                  |L1.24|
;;;320            if(uRegisterValue & (1 << i)) {
000018  e3a03001          MOV      r3,#1
00001c  e1110013          TST      r1,r3,LSL r0
000020  0a000005          BEQ      |L1.60|
;;;321                bPWMIntFlag[i] = 1;
000024  e3a03001          MOV      r3,#1
000028  e59fce28          LDR      r12,|L1.3672|
00002c  e7cc3000          STRB     r3,[r12,r0]
;;;322                outpw(REG_PWM_PIIR, (1 << i));
000030  e1a03013          LSL      r3,r3,r0
000034  e59fce18          LDR      r12,|L1.3668|
000038  e58c3040          STR      r3,[r12,#0x40]
                  |L1.60|
00003c  e2800001          ADD      r0,r0,#1              ;319
                  |L1.64|
000040  e3500004          CMP      r0,#4                 ;319
000044  bafffff3          BLT      |L1.24|
;;;323            }
;;;324        }
;;;325    }
000048  e12fff1e          BX       lr
;;;326    
                          ENDP

                  pwmInit PROC
;;;62       */
;;;63     INT pwmInit(void)
00004c  e92d4010          PUSH     {r4,lr}
;;;64     {
;;;65         UINT temp;
;;;66         // Enable PWM clock
;;;67         temp = inpw(REG_CLK_PCLKEN1);
000050  e3a0020b          MOV      r0,#0xb0000000
000054  e590421c          LDR      r4,[r0,#0x21c]
;;;68         temp = temp | 0x8000000;
000058  e3844302          ORR      r4,r4,#0x8000000
;;;69         outpw(REG_CLK_PCLKEN1, temp);
00005c  e580421c          STR      r4,[r0,#0x21c]
;;;70     
;;;71         sysInstallISR(IRQ_LEVEL_1, PWM_IRQn, (PVOID)pwmISR);
000060  e24f2068          ADR      r2,|L1.0|
000064  e3a0103c          MOV      r1,#0x3c
000068  e3a00001          MOV      r0,#1
00006c  ebfffffe          BL       sysInstallISR
;;;72         sysSetLocalInterrupt(ENABLE_IRQ);  // Enable CPSR I bit
000070  e3a0007f          MOV      r0,#0x7f
000074  ebfffffe          BL       sysSetLocalInterrupt
;;;73     
;;;74         return 0;
000078  e3a00000          MOV      r0,#0
;;;75     }
00007c  e8bd8010          POP      {r4,pc}
;;;76     
                          ENDP

                  pwmExit PROC
;;;79       */
;;;80     INT pwmExit(void)
000080  e3a00000          MOV      r0,#0
;;;81     {
;;;82         return 0;
;;;83     }
000084  e12fff1e          BX       lr
;;;84     
                          ENDP

                  pwmCleanPIIR PROC
;;;966      */
;;;967    static INT pwmCleanPIIR(const INT nTimerIdentity)
000088  e1a01000          MOV      r1,r0
;;;968    {
;;;969        UINT uRegisterValue=0;
00008c  e3a02000          MOV      r2,#0
;;;970        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000090  e3510000          CMP      r1,#0
000094  ba000001          BLT      |L1.160|
000098  e3510003          CMP      r1,#3
00009c  da000001          BLE      |L1.168|
                  |L1.160|
;;;971            return pwmInvalidTimerChannel;// nTimerIdentity value error
0000a0  e59f0db4          LDR      r0,|L1.3676|
                  |L1.164|
;;;972        }
;;;973        uRegisterValue=(UINT)inpw(REG_PWM_PIIR);
;;;974        uRegisterValue=uRegisterValue&~(1<<nTimerIdentity);
;;;975        outpw(REG_PWM_PIIR,uRegisterValue);
;;;976    
;;;977        return Successful;
;;;978    }
0000a4  e12fff1e          BX       lr
                  |L1.168|
0000a8  e59f0da4          LDR      r0,|L1.3668|
0000ac  e5902040          LDR      r2,[r0,#0x40]         ;973
0000b0  e3a00001          MOV      r0,#1                 ;974
0000b4  e1c22110          BIC      r2,r2,r0,LSL r1       ;974
0000b8  e59f0d94          LDR      r0,|L1.3668|
0000bc  e5802040          STR      r2,[r0,#0x40]         ;975
0000c0  e3a00000          MOV      r0,#0                 ;977
0000c4  eafffff6          B        |L1.164|
;;;979    
                          ENDP

                  pwmSetPIER PROC
;;;941      */
;;;942    static INT pwmSetPIER(const INT nTimerIdentity, INT nValue)
0000c8  e1a02000          MOV      r2,r0
;;;943    {
0000cc  e1a03001          MOV      r3,r1
;;;944        UINT uRegisterValue=0;;
0000d0  e3a01000          MOV      r1,#0
;;;945        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
0000d4  e3520000          CMP      r2,#0
0000d8  ba000001          BLT      |L1.228|
0000dc  e3520003          CMP      r2,#3
0000e0  da000001          BLE      |L1.236|
                  |L1.228|
;;;946            return pwmInvalidTimerChannel;// Timer_num value error
0000e4  e59f0d70          LDR      r0,|L1.3676|
                  |L1.232|
;;;947        } else {
;;;948            uRegisterValue=(UINT)inpw(REG_PWM_PIER);
;;;949            if(nValue==PWM_ENABLE) {
;;;950                uRegisterValue=uRegisterValue|(1<<nTimerIdentity);// Set PIER
;;;951            } else {
;;;952                uRegisterValue=uRegisterValue&(0<<nTimerIdentity);// Clear PIER
;;;953            }
;;;954            outpw(REG_PWM_PIER, uRegisterValue);// Write value to PIER
;;;955    
;;;956            return Successful;
;;;957        }
;;;958    }
0000e8  e12fff1e          BX       lr
                  |L1.236|
0000ec  e59f0d60          LDR      r0,|L1.3668|
0000f0  e590103c          LDR      r1,[r0,#0x3c]         ;948
0000f4  e3530001          CMP      r3,#1                 ;949
0000f8  1a000002          BNE      |L1.264|
0000fc  e3a00001          MOV      r0,#1                 ;950
000100  e1811210          ORR      r1,r1,r0,LSL r2       ;950
000104  ea000001          B        |L1.272|
                  |L1.264|
000108  e3a00000          MOV      r0,#0                 ;952
00010c  e0011210          AND      r1,r1,r0,LSL r2       ;952
                  |L1.272|
000110  e59f0d3c          LDR      r0,|L1.3668|
000114  e580103c          STR      r1,[r0,#0x3c]         ;954
000118  e3a00000          MOV      r0,#0                 ;956
00011c  eafffff1          B        |L1.232|
;;;959    
                          ENDP

                  pwmSetCNR PROC
;;;880      */
;;;881    static INT pwmSetCNR(const INT nTimerIdentity, INT nValue)
000120  e92d4008          PUSH     {r3,lr}
;;;882    {
000124  e1a02000          MOV      r2,r0
;;;883        typeCNR PWMCNR;
;;;884        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000128  e3520000          CMP      r2,#0
00012c  ba000001          BLT      |L1.312|
000130  e3520003          CMP      r2,#3
000134  da000001          BLE      |L1.320|
                  |L1.312|
;;;885            return pwmInvalidTimerChannel;// Timer_num value error
000138  e59f0d1c          LDR      r0,|L1.3676|
                  |L1.316|
;;;886        }
;;;887        if(nValue < CNR_MIN || nValue > CNR_MAX) {
;;;888            return pwmInvalidCNRValue;// PCR inverter value error
;;;889        }
;;;890        PWMCNR.field.cnr=nValue;
;;;891        outpw(REG_PWM_CNR0+(PWM_OFFSET*nTimerIdentity), PWMCNR.value);
;;;892    
;;;893        return Successful;
;;;894    }
00013c  e8bd8008          POP      {r3,pc}
                  |L1.320|
000140  e3510000          CMP      r1,#0                 ;887
000144  ba000001          BLT      |L1.336|
000148  e3510801          CMP      r1,#0x10000           ;887
00014c  ba000001          BLT      |L1.344|
                  |L1.336|
000150  e59f0d08          LDR      r0,|L1.3680|
000154  eafffff8          B        |L1.316|
                  |L1.344|
000158  e59d0000          LDR      r0,[sp,#0]            ;890
00015c  e1a00820          LSR      r0,r0,#16             ;890
000160  e1a00800          LSL      r0,r0,#16             ;890
000164  e1a03801          LSL      r3,r1,#16             ;890
000168  e1a03823          LSR      r3,r3,#16             ;890
00016c  e1800003          ORR      r0,r0,r3              ;890
000170  e58d0000          STR      r0,[sp,#0]            ;890
000174  e59d0000          LDR      r0,[sp,#0]            ;891
000178  e59f3cd4          LDR      r3,|L1.3668|
00017c  e3a0c00c          MOV      r12,#0xc              ;891
000180  e023329c          MLA      r3,r12,r2,r3          ;891
000184  e583000c          STR      r0,[r3,#0xc]          ;891
000188  e3a00000          MOV      r0,#0                 ;893
00018c  eaffffea          B        |L1.316|
;;;895    
                          ENDP

                  pwmSetCMR PROC
;;;903      */
;;;904    static INT pwmSetCMR(const INT nTimerIdentity, INT nValue)
000190  e92d4008          PUSH     {r3,lr}
;;;905    {
000194  e1a02000          MOV      r2,r0
;;;906        typeCMR PWMCMR;
;;;907        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000198  e3520000          CMP      r2,#0
00019c  ba000001          BLT      |L1.424|
0001a0  e3520003          CMP      r2,#3
0001a4  da000001          BLE      |L1.432|
                  |L1.424|
;;;908            return pwmInvalidTimerChannel;// Timer_num value error
0001a8  e59f0cac          LDR      r0,|L1.3676|
                  |L1.428|
;;;909        }
;;;910        if(nValue < CMR_MIN || nValue > CMR_MAX) {
;;;911            return pwmInvalidCMRValue;// CMR value error
;;;912        }
;;;913        PWMCMR.field.cmr=nValue;
;;;914        outpw(REG_PWM_CMR0+(PWM_OFFSET*nTimerIdentity), PWMCMR.value);
;;;915    
;;;916        return Successful;
;;;917    }
0001ac  e8bd8008          POP      {r3,pc}
                  |L1.432|
0001b0  e3510000          CMP      r1,#0                 ;910
0001b4  ba000001          BLT      |L1.448|
0001b8  e3510801          CMP      r1,#0x10000           ;910
0001bc  ba000001          BLT      |L1.456|
                  |L1.448|
0001c0  e59f0c9c          LDR      r0,|L1.3684|
0001c4  eafffff8          B        |L1.428|
                  |L1.456|
0001c8  e59d0000          LDR      r0,[sp,#0]            ;913
0001cc  e1a00820          LSR      r0,r0,#16             ;913
0001d0  e1a00800          LSL      r0,r0,#16             ;913
0001d4  e1a03801          LSL      r3,r1,#16             ;913
0001d8  e1a03823          LSR      r3,r3,#16             ;913
0001dc  e1800003          ORR      r0,r0,r3              ;913
0001e0  e58d0000          STR      r0,[sp,#0]            ;913
0001e4  e59d0000          LDR      r0,[sp,#0]            ;914
0001e8  e59f3c64          LDR      r3,|L1.3668|
0001ec  e3a0c00c          MOV      r12,#0xc              ;914
0001f0  e023329c          MLA      r3,r12,r2,r3          ;914
0001f4  e5830010          STR      r0,[r3,#0x10]         ;914
0001f8  e3a00000          MOV      r0,#0                 ;916
0001fc  eaffffea          B        |L1.428|
;;;918    
                          ENDP

                  pwmSetMode PROC
;;;837      */
;;;838    static INT pwmSetMode(const INT nTimerIdentity, INT nStatus)
000200  e92d4008          PUSH     {r3,lr}
;;;839    {
000204  e1a02000          MOV      r2,r0
;;;840        typePCR PWMPCR;
;;;841        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000208  e3520000          CMP      r2,#0
00020c  ba000001          BLT      |L1.536|
000210  e3520003          CMP      r2,#3
000214  da000001          BLE      |L1.544|
                  |L1.536|
;;;842            return pwmInvalidTimerChannel;// Timer_num value error
000218  e59f0c3c          LDR      r0,|L1.3676|
                  |L1.540|
;;;843        }
;;;844        if(nStatus != PWM_TOGGLE && nStatus != PWM_ONESHOT) {
;;;845            return pwmInvalidModeStatus;// PCR inverter value error
;;;846        }
;;;847        PWMPCR.value=(UINT)inpw(REG_PWM_PCR);
;;;848        switch(nTimerIdentity) {
;;;849        case PWM_TIMER0: {
;;;850            PWMPCR.field.ch0_mode=nStatus;
;;;851            break;
;;;852        }
;;;853        case PWM_TIMER1: {
;;;854            PWMPCR.field.ch1_mode=nStatus;
;;;855            break;
;;;856        }
;;;857        case PWM_TIMER2: {
;;;858            PWMPCR.field.ch2_mode=nStatus;
;;;859            break;
;;;860        }
;;;861        case PWM_TIMER3: {
;;;862            PWMPCR.field.ch3_mode=nStatus;
;;;863            break;
;;;864        }
;;;865        }
;;;866        outpw(REG_PWM_PCR, PWMPCR.value);
;;;867        bPWMTimerMode[nTimerIdentity] = nStatus;
;;;868    
;;;869        return Successful;
;;;870    }
00021c  e8bd8008          POP      {r3,pc}
                  |L1.544|
000220  e3510001          CMP      r1,#1                 ;844
000224  0a000003          BEQ      |L1.568|
000228  e3510000          CMP      r1,#0                 ;844
00022c  0a000001          BEQ      |L1.568|
000230  e59f0c30          LDR      r0,|L1.3688|
000234  eafffff8          B        |L1.540|
                  |L1.568|
000238  e59f0c14          LDR      r0,|L1.3668|
00023c  e5900008          LDR      r0,[r0,#8]            ;847
000240  e58d0000          STR      r0,[sp,#0]            ;847
000244  e3520000          CMP      r2,#0                 ;848
000248  0a000006          BEQ      |L1.616|
00024c  e3520001          CMP      r2,#1                 ;848
000250  0a00000c          BEQ      |L1.648|
000254  e3520002          CMP      r2,#2                 ;848
000258  0a000012          BEQ      |L1.680|
00025c  e3520003          CMP      r2,#3                 ;848
000260  1a000020          BNE      |L1.744|
000264  ea000017          B        |L1.712|
                  |L1.616|
000268  e1a00000          MOV      r0,r0                 ;849
00026c  e59d0000          LDR      r0,[sp,#0]            ;850
000270  e3c00008          BIC      r0,r0,#8              ;850
000274  e3a03008          MOV      r3,#8                 ;850
000278  e0033181          AND      r3,r3,r1,LSL #3       ;850
00027c  e1800003          ORR      r0,r0,r3              ;850
000280  e58d0000          STR      r0,[sp,#0]            ;850
000284  ea000017          B        |L1.744|
                  |L1.648|
000288  e1a00000          MOV      r0,r0                 ;853
00028c  e59d0000          LDR      r0,[sp,#0]            ;854
000290  e3c00b02          BIC      r0,r0,#0x800          ;854
000294  e3a03b02          MOV      r3,#0x800             ;854
000298  e0033581          AND      r3,r3,r1,LSL #11      ;854
00029c  e1800003          ORR      r0,r0,r3              ;854
0002a0  e58d0000          STR      r0,[sp,#0]            ;854
0002a4  ea00000f          B        |L1.744|
                  |L1.680|
0002a8  e1a00000          MOV      r0,r0                 ;857
0002ac  e59d0000          LDR      r0,[sp,#0]            ;858
0002b0  e3c00902          BIC      r0,r0,#0x8000         ;858
0002b4  e3a03902          MOV      r3,#0x8000            ;858
0002b8  e0033781          AND      r3,r3,r1,LSL #15      ;858
0002bc  e1800003          ORR      r0,r0,r3              ;858
0002c0  e58d0000          STR      r0,[sp,#0]            ;858
0002c4  ea000007          B        |L1.744|
                  |L1.712|
0002c8  e1a00000          MOV      r0,r0                 ;861
0002cc  e59d0000          LDR      r0,[sp,#0]            ;862
0002d0  e3c00702          BIC      r0,r0,#0x80000        ;862
0002d4  e3a03702          MOV      r3,#0x80000           ;862
0002d8  e0033981          AND      r3,r3,r1,LSL #19      ;862
0002dc  e1800003          ORR      r0,r0,r3              ;862
0002e0  e58d0000          STR      r0,[sp,#0]            ;862
0002e4  e1a00000          MOV      r0,r0                 ;863
                  |L1.744|
0002e8  e1a00000          MOV      r0,r0                 ;851
0002ec  e59d0000          LDR      r0,[sp,#0]            ;866
0002f0  e59f3b5c          LDR      r3,|L1.3668|
0002f4  e5830008          STR      r0,[r3,#8]            ;866
0002f8  e59f3b6c          LDR      r3,|L1.3692|
0002fc  e7c31002          STRB     r1,[r3,r2]            ;867
000300  e3a00000          MOV      r0,#0                 ;869
000304  eaffffc4          B        |L1.540|
;;;871    
                          ENDP

                  pwmSetCP PROC
;;;588      */
;;;589    static INT pwmSetCP(const INT nTimerIdentity, const INT nValue)
000308  e92d4008          PUSH     {r3,lr}
;;;590    {
00030c  e1a02000          MOV      r2,r0
;;;591        typePPR PWMPPR;
;;;592        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000310  e3520000          CMP      r2,#0
000314  ba000001          BLT      |L1.800|
000318  e3520003          CMP      r2,#3
00031c  da000001          BLE      |L1.808|
                  |L1.800|
;;;593            return pwmInvalidTimerChannel;// Timer_num value error
000320  e59f0b34          LDR      r0,|L1.3676|
                  |L1.804|
;;;594        }
;;;595        if(nValue<CP_MIN || nValue>CP_MAX) {
;;;596            return pwmInvalidCPValue;// CP value error
;;;597        }
;;;598        PWMPPR.value=(UINT)inpw(REG_PWM_PPR);
;;;599        switch(nTimerIdentity) {
;;;600        case PWM_TIMER0: {
;;;601            PWMPPR.field.cp0=nValue;
;;;602            break;
;;;603        }
;;;604        case PWM_TIMER1: {
;;;605            PWMPPR.field.cp0=nValue;
;;;606            break;
;;;607        }
;;;608        case PWM_TIMER2: {
;;;609            PWMPPR.field.cp1=nValue;
;;;610            break;
;;;611        }
;;;612        case PWM_TIMER3: {
;;;613            PWMPPR.field.cp1=nValue;
;;;614            break;
;;;615        }
;;;616        }
;;;617        outpw(REG_PWM_PPR, PWMPPR.value);
;;;618    
;;;619        return Successful;
;;;620    }
000324  e8bd8008          POP      {r3,pc}
                  |L1.808|
000328  e3510000          CMP      r1,#0                 ;595
00032c  ba000001          BLT      |L1.824|
000330  e35100ff          CMP      r1,#0xff              ;595
000334  da000001          BLE      |L1.832|
                  |L1.824|
000338  e59f0b30          LDR      r0,|L1.3696|
00033c  eafffff8          B        |L1.804|
                  |L1.832|
000340  e59f0b0c          LDR      r0,|L1.3668|
000344  e5900000          LDR      r0,[r0,#0]            ;598
000348  e58d0000          STR      r0,[sp,#0]            ;598
00034c  e3520000          CMP      r2,#0                 ;599
000350  0a000006          BEQ      |L1.880|
000354  e3520001          CMP      r2,#1                 ;599
000358  0a00000b          BEQ      |L1.908|
00035c  e3520002          CMP      r2,#2                 ;599
000360  0a000010          BEQ      |L1.936|
000364  e3520003          CMP      r2,#3                 ;599
000368  1a00001e          BNE      |L1.1000|
00036c  ea000015          B        |L1.968|
                  |L1.880|
000370  e1a00000          MOV      r0,r0                 ;600
000374  e59d0000          LDR      r0,[sp,#0]            ;601
000378  e3c000ff          BIC      r0,r0,#0xff           ;601
00037c  e20130ff          AND      r3,r1,#0xff           ;601
000380  e1800003          ORR      r0,r0,r3              ;601
000384  e58d0000          STR      r0,[sp,#0]            ;601
000388  ea000016          B        |L1.1000|
                  |L1.908|
00038c  e1a00000          MOV      r0,r0                 ;604
000390  e59d0000          LDR      r0,[sp,#0]            ;605
000394  e3c000ff          BIC      r0,r0,#0xff           ;605
000398  e20130ff          AND      r3,r1,#0xff           ;605
00039c  e1800003          ORR      r0,r0,r3              ;605
0003a0  e58d0000          STR      r0,[sp,#0]            ;605
0003a4  ea00000f          B        |L1.1000|
                  |L1.936|
0003a8  e1a00000          MOV      r0,r0                 ;608
0003ac  e59d0000          LDR      r0,[sp,#0]            ;609
0003b0  e3c00cff          BIC      r0,r0,#0xff00         ;609
0003b4  e3a03cff          MOV      r3,#0xff00            ;609
0003b8  e0033401          AND      r3,r3,r1,LSL #8       ;609
0003bc  e1800003          ORR      r0,r0,r3              ;609
0003c0  e58d0000          STR      r0,[sp,#0]            ;609
0003c4  ea000007          B        |L1.1000|
                  |L1.968|
0003c8  e1a00000          MOV      r0,r0                 ;612
0003cc  e59d0000          LDR      r0,[sp,#0]            ;613
0003d0  e3c00cff          BIC      r0,r0,#0xff00         ;613
0003d4  e3a03cff          MOV      r3,#0xff00            ;613
0003d8  e0033401          AND      r3,r3,r1,LSL #8       ;613
0003dc  e1800003          ORR      r0,r0,r3              ;613
0003e0  e58d0000          STR      r0,[sp,#0]            ;613
0003e4  e1a00000          MOV      r0,r0                 ;614
                  |L1.1000|
0003e8  e1a00000          MOV      r0,r0                 ;602
0003ec  e59d0000          LDR      r0,[sp,#0]            ;617
0003f0  e59f3a5c          LDR      r3,|L1.3668|
0003f4  e5830000          STR      r0,[r3,#0]            ;617
0003f8  e3a00000          MOV      r0,#0                 ;619
0003fc  eaffffc8          B        |L1.804|
;;;621    
                          ENDP

                  pwmSetCSR PROC
;;;669      */
;;;670    static INT pwmSetCSR(const INT nTimerIdentity, const INT nValue)
000400  e92d4008          PUSH     {r3,lr}
;;;671    {
000404  e1a02000          MOV      r2,r0
;;;672        typeCSR PWMCSR;
;;;673        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000408  e3520000          CMP      r2,#0
00040c  ba000001          BLT      |L1.1048|
000410  e3520003          CMP      r2,#3
000414  da000001          BLE      |L1.1056|
                  |L1.1048|
;;;674            return pwmInvalidTimerChannel;// Timer_num value error
000418  e59f0a3c          LDR      r0,|L1.3676|
                  |L1.1052|
;;;675        }
;;;676        if(nValue<CSR_MIN || nValue>CSR_MAX) {
;;;677            return pwmInvalidCSRValue;// CSR value error
;;;678        }
;;;679        PWMCSR.value=(UINT)inpw(REG_PWM_CSR);
;;;680        switch(nTimerIdentity) {
;;;681        case PWM_TIMER0: {
;;;682            PWMCSR.field.csr0=nValue;
;;;683            break;
;;;684        }
;;;685        case PWM_TIMER1: {
;;;686            PWMCSR.field.csr1=nValue;
;;;687            break;
;;;688        }
;;;689        case PWM_TIMER2: {
;;;690            PWMCSR.field.csr2=nValue;
;;;691            break;
;;;692        }
;;;693        case PWM_TIMER3: {
;;;694            PWMCSR.field.csr3=nValue;
;;;695            break;
;;;696        }
;;;697        }
;;;698        outpw(REG_PWM_CSR, PWMCSR.value);
;;;699    
;;;700        return Successful;
;;;701    }
00041c  e8bd8008          POP      {r3,pc}
                  |L1.1056|
000420  e3510000          CMP      r1,#0                 ;676
000424  ba000001          BLT      |L1.1072|
000428  e3510004          CMP      r1,#4                 ;676
00042c  da000001          BLE      |L1.1080|
                  |L1.1072|
000430  e59f0a3c          LDR      r0,|L1.3700|
000434  eafffff8          B        |L1.1052|
                  |L1.1080|
000438  e59f0a14          LDR      r0,|L1.3668|
00043c  e5900004          LDR      r0,[r0,#4]            ;679
000440  e58d0000          STR      r0,[sp,#0]            ;679
000444  e3520000          CMP      r2,#0                 ;680
000448  0a000006          BEQ      |L1.1128|
00044c  e3520001          CMP      r2,#1                 ;680
000450  0a00000b          BEQ      |L1.1156|
000454  e3520002          CMP      r2,#2                 ;680
000458  0a000011          BEQ      |L1.1188|
00045c  e3520003          CMP      r2,#3                 ;680
000460  1a00001f          BNE      |L1.1252|
000464  ea000016          B        |L1.1220|
                  |L1.1128|
000468  e1a00000          MOV      r0,r0                 ;681
00046c  e59d0000          LDR      r0,[sp,#0]            ;682
000470  e3c00007          BIC      r0,r0,#7              ;682
000474  e2013007          AND      r3,r1,#7              ;682
000478  e1800003          ORR      r0,r0,r3              ;682
00047c  e58d0000          STR      r0,[sp,#0]            ;682
000480  ea000017          B        |L1.1252|
                  |L1.1156|
000484  e1a00000          MOV      r0,r0                 ;685
000488  e59d0000          LDR      r0,[sp,#0]            ;686
00048c  e3c00070          BIC      r0,r0,#0x70           ;686
000490  e3a03070          MOV      r3,#0x70              ;686
000494  e0033201          AND      r3,r3,r1,LSL #4       ;686
000498  e1800003          ORR      r0,r0,r3              ;686
00049c  e58d0000          STR      r0,[sp,#0]            ;686
0004a0  ea00000f          B        |L1.1252|
                  |L1.1188|
0004a4  e1a00000          MOV      r0,r0                 ;689
0004a8  e59d0000          LDR      r0,[sp,#0]            ;690
0004ac  e3c00c07          BIC      r0,r0,#0x700          ;690
0004b0  e3a03c07          MOV      r3,#0x700             ;690
0004b4  e0033401          AND      r3,r3,r1,LSL #8       ;690
0004b8  e1800003          ORR      r0,r0,r3              ;690
0004bc  e58d0000          STR      r0,[sp,#0]            ;690
0004c0  ea000007          B        |L1.1252|
                  |L1.1220|
0004c4  e1a00000          MOV      r0,r0                 ;693
0004c8  e59d0000          LDR      r0,[sp,#0]            ;694
0004cc  e3c00a07          BIC      r0,r0,#0x7000         ;694
0004d0  e3a03a07          MOV      r3,#0x7000            ;694
0004d4  e0033601          AND      r3,r3,r1,LSL #12      ;694
0004d8  e1800003          ORR      r0,r0,r3              ;694
0004dc  e58d0000          STR      r0,[sp,#0]            ;694
0004e0  e1a00000          MOV      r0,r0                 ;695
                  |L1.1252|
0004e4  e1a00000          MOV      r0,r0                 ;683
0004e8  e59d0000          LDR      r0,[sp,#0]            ;698
0004ec  e59f3960          LDR      r3,|L1.3668|
0004f0  e5830004          STR      r0,[r3,#4]            ;698
0004f4  e3a00000          MOV      r0,#0                 ;700
0004f8  eaffffc7          B        |L1.1052|
;;;702    
                          ENDP

                  pwmInitTimer PROC
;;;419      */
;;;420    static INT pwmInitTimer(const INT nTimerIdentity)
0004fc  e92d4038          PUSH     {r3-r5,lr}
;;;421    {
000500  e1a05000          MOV      r5,r0
;;;422        typePPR PWMPPR;
;;;423        INT nStatus;
;;;424        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000504  e3550000          CMP      r5,#0
000508  ba000001          BLT      |L1.1300|
00050c  e3550003          CMP      r5,#3
000510  da000001          BLE      |L1.1308|
                  |L1.1300|
;;;425            return pwmInvalidTimerChannel;// nTimerIdentity value error
000514  e59f0940          LDR      r0,|L1.3676|
                  |L1.1304|
;;;426        }
;;;427    
;;;428        //Set CSR
;;;429        nStatus=pwmSetCSR(nTimerIdentity, DEFAULT_CSR);
;;;430    
;;;431        if(nStatus != Successful) {
;;;432            return nStatus;
;;;433        }
;;;434    
;;;435        //Set PPR
;;;436        PWMPPR.value=(UINT)inpw(REG_PWM_PPR);
;;;437        switch(nTimerIdentity) {
;;;438        case PWM_TIMER0: {
;;;439            if(PWMPPR.field.cp0 == 0) {
;;;440                pwmSetCP(nTimerIdentity, DEFAULT_CP);
;;;441            }
;;;442            break;
;;;443        }
;;;444        case PWM_TIMER1: {
;;;445            if(PWMPPR.field.cp0 == 0) {
;;;446                pwmSetCP(nTimerIdentity, DEFAULT_CP);
;;;447            }
;;;448            break;
;;;449        }
;;;450        case PWM_TIMER2: {
;;;451            if(PWMPPR.field.cp1 == 0) {
;;;452                pwmSetCP(nTimerIdentity, DEFAULT_CP);
;;;453            }
;;;454            break;
;;;455        }
;;;456        case PWM_TIMER3: {
;;;457            if(PWMPPR.field.cp1 == 0) {
;;;458                pwmSetCP(nTimerIdentity, DEFAULT_CP);
;;;459            }
;;;460            break;
;;;461        }
;;;462        }
;;;463    
;;;464        //Set PCR
;;;465        nStatus=pwmSetMode(nTimerIdentity, DEFAULT_MODE);
;;;466    
;;;467        if(nStatus != Successful) {
;;;468            return nStatus;
;;;469        }
;;;470        bPWMTimerMode[nTimerIdentity] = DEFAULT_MODE;
;;;471    
;;;472        //Set CMR
;;;473        nStatus=pwmSetCMR(nTimerIdentity, DEFAULT_CMR);
;;;474    
;;;475        if(nStatus != Successful) {
;;;476            return nStatus;
;;;477        }
;;;478    
;;;479        //Set CNR
;;;480        nStatus=pwmSetCNR(nTimerIdentity, DEFAULT_CNR);
;;;481    
;;;482        if(nStatus != Successful) {
;;;483            return nStatus;
;;;484        }
;;;485    
;;;486        return Successful;
;;;487    
;;;488    }
000518  e8bd8038          POP      {r3-r5,pc}
                  |L1.1308|
00051c  e3a01003          MOV      r1,#3                 ;429
000520  e1a00005          MOV      r0,r5                 ;429
000524  ebfffffe          BL       pwmSetCSR
000528  e1a04000          MOV      r4,r0                 ;429
00052c  e3540000          CMP      r4,#0                 ;431
000530  0a000001          BEQ      |L1.1340|
000534  e1a00004          MOV      r0,r4                 ;432
000538  eafffff6          B        |L1.1304|
                  |L1.1340|
00053c  e59f0910          LDR      r0,|L1.3668|
000540  e5900000          LDR      r0,[r0,#0]            ;436
000544  e58d0000          STR      r0,[sp,#0]            ;436
000548  e3550000          CMP      r5,#0                 ;437
00054c  0a000006          BEQ      |L1.1388|
000550  e3550001          CMP      r5,#1                 ;437
000554  0a00000c          BEQ      |L1.1420|
000558  e3550002          CMP      r5,#2                 ;437
00055c  0a000012          BEQ      |L1.1452|
000560  e3550003          CMP      r5,#3                 ;437
000564  1a000022          BNE      |L1.1524|
000568  ea000018          B        |L1.1488|
                  |L1.1388|
00056c  e1a00000          MOV      r0,r0                 ;438
000570  e59d0000          LDR      r0,[sp,#0]            ;439
000574  e31000ff          TST      r0,#0xff              ;439
000578  1a000002          BNE      |L1.1416|
00057c  e3a010ff          MOV      r1,#0xff              ;440
000580  e1a00005          MOV      r0,r5                 ;440
000584  ebfffffe          BL       pwmSetCP
                  |L1.1416|
000588  ea000019          B        |L1.1524|
                  |L1.1420|
00058c  e1a00000          MOV      r0,r0                 ;444
000590  e59d0000          LDR      r0,[sp,#0]            ;445
000594  e31000ff          TST      r0,#0xff              ;445
000598  1a000002          BNE      |L1.1448|
00059c  e3a010ff          MOV      r1,#0xff              ;446
0005a0  e1a00005          MOV      r0,r5                 ;446
0005a4  ebfffffe          BL       pwmSetCP
                  |L1.1448|
0005a8  ea000011          B        |L1.1524|
                  |L1.1452|
0005ac  e1a00000          MOV      r0,r0                 ;450
0005b0  e59d0000          LDR      r0,[sp,#0]            ;451
0005b4  e1a00800          LSL      r0,r0,#16             ;451
0005b8  e1b00c20          LSRS     r0,r0,#24             ;451
0005bc  1a000002          BNE      |L1.1484|
0005c0  e3a010ff          MOV      r1,#0xff              ;452
0005c4  e1a00005          MOV      r0,r5                 ;452
0005c8  ebfffffe          BL       pwmSetCP
                  |L1.1484|
0005cc  ea000008          B        |L1.1524|
                  |L1.1488|
0005d0  e1a00000          MOV      r0,r0                 ;456
0005d4  e59d0000          LDR      r0,[sp,#0]            ;457
0005d8  e1a00800          LSL      r0,r0,#16             ;457
0005dc  e1b00c20          LSRS     r0,r0,#24             ;457
0005e0  1a000002          BNE      |L1.1520|
0005e4  e3a010ff          MOV      r1,#0xff              ;458
0005e8  e1a00005          MOV      r0,r5                 ;458
0005ec  ebfffffe          BL       pwmSetCP
                  |L1.1520|
0005f0  e1a00000          MOV      r0,r0                 ;460
                  |L1.1524|
0005f4  e1a00000          MOV      r0,r0                 ;442
0005f8  e3a01001          MOV      r1,#1                 ;465
0005fc  e1a00005          MOV      r0,r5                 ;465
000600  ebfffffe          BL       pwmSetMode
000604  e1a04000          MOV      r4,r0                 ;465
000608  e3540000          CMP      r4,#0                 ;467
00060c  0a000001          BEQ      |L1.1560|
000610  e1a00004          MOV      r0,r4                 ;468
000614  eaffffbf          B        |L1.1304|
                  |L1.1560|
000618  e3a00001          MOV      r0,#1                 ;470
00061c  e59f1848          LDR      r1,|L1.3692|
000620  e7c10005          STRB     r0,[r1,r5]            ;470
000624  e59f184c          LDR      r1,|L1.3704|
000628  e1a00005          MOV      r0,r5                 ;473
00062c  ebfffffe          BL       pwmSetCMR
000630  e1a04000          MOV      r4,r0                 ;473
000634  e3540000          CMP      r4,#0                 ;475
000638  0a000001          BEQ      |L1.1604|
00063c  e1a00004          MOV      r0,r4                 ;476
000640  eaffffb4          B        |L1.1304|
                  |L1.1604|
000644  e59f1830          LDR      r1,|L1.3708|
000648  e1a00005          MOV      r0,r5                 ;480
00064c  ebfffffe          BL       pwmSetCNR
000650  e1a04000          MOV      r4,r0                 ;480
000654  e3540000          CMP      r4,#0                 ;482
000658  0a000001          BEQ      |L1.1636|
00065c  e1a00004          MOV      r0,r4                 ;483
000660  eaffffac          B        |L1.1304|
                  |L1.1636|
000664  e3a00000          MOV      r0,#0                 ;486
000668  eaffffaa          B        |L1.1304|
;;;489    
                          ENDP

                  pwmOpen PROC
;;;91       */
;;;92     INT pwmOpen(const INT nTimerIdentity)
00066c  e92d4010          PUSH     {r4,lr}
;;;93     {
000670  e1a04000          MOV      r4,r0
;;;94         if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000674  e3540000          CMP      r4,#0
000678  ba000001          BLT      |L1.1668|
00067c  e3540003          CMP      r4,#3
000680  da000001          BLE      |L1.1676|
                  |L1.1668|
;;;95             return pwmInvalidTimerChannel;// nTimerIdentity value error
000684  e59f07d0          LDR      r0,|L1.3676|
                  |L1.1672|
;;;96         }
;;;97         if(bPWMTimerOpenStatus[nTimerIdentity] == TRUE) {
;;;98             return pwmTimerBusy;
;;;99         }
;;;100        if(bPWMIRQFlag == FALSE) {
;;;101    
;;;102            sysEnableInterrupt(PWM_IRQn);
;;;103    
;;;104            bPWMIRQFlag=TRUE;
;;;105        }
;;;106        bPWMTimerOpenStatus[nTimerIdentity]=TRUE;
;;;107    
;;;108        // Set PWM timer default value(CSR->PPR->PCR->CMR->CNR)
;;;109        pwmInitTimer(nTimerIdentity);
;;;110    
;;;111        //Enable PIER
;;;112        pwmSetPIER(nTimerIdentity, PWM_ENABLE);
;;;113    
;;;114        //Reset PIIR
;;;115        pwmCleanPIIR(nTimerIdentity);
;;;116    
;;;117        //Reset PWM timer start count flag
;;;118        bPWMTimerStartStatus[nTimerIdentity] = FALSE;
;;;119    
;;;120        return Successful;
;;;121    
;;;122    }
000688  e8bd8010          POP      {r4,pc}
                  |L1.1676|
00068c  e59f07ec          LDR      r0,|L1.3712|
000690  e7d00004          LDRB     r0,[r0,r4]            ;97
000694  e3500001          CMP      r0,#1                 ;97
000698  1a000001          BNE      |L1.1700|
00069c  e59f07e0          LDR      r0,|L1.3716|
0006a0  eafffff8          B        |L1.1672|
                  |L1.1700|
0006a4  e59f07dc          LDR      r0,|L1.3720|
0006a8  e5d00000          LDRB     r0,[r0,#0]            ;100  ; bPWMIRQFlag
0006ac  e3500000          CMP      r0,#0                 ;100
0006b0  1a000004          BNE      |L1.1736|
0006b4  e3a0003c          MOV      r0,#0x3c              ;102
0006b8  ebfffffe          BL       sysEnableInterrupt
0006bc  e3a00001          MOV      r0,#1                 ;104
0006c0  e59f17c0          LDR      r1,|L1.3720|
0006c4  e5c10000          STRB     r0,[r1,#0]            ;104  ; bPWMIRQFlag
                  |L1.1736|
0006c8  e3a00001          MOV      r0,#1                 ;106
0006cc  e59f17ac          LDR      r1,|L1.3712|
0006d0  e7c10004          STRB     r0,[r1,r4]            ;106
0006d4  e1a00004          MOV      r0,r4                 ;109
0006d8  ebfffffe          BL       pwmInitTimer
0006dc  e3a01001          MOV      r1,#1                 ;112
0006e0  e1a00004          MOV      r0,r4                 ;112
0006e4  ebfffffe          BL       pwmSetPIER
0006e8  e1a00004          MOV      r0,r4                 ;115
0006ec  ebfffffe          BL       pwmCleanPIIR
0006f0  e3a00000          MOV      r0,#0                 ;118
0006f4  e59f1790          LDR      r1,|L1.3724|
0006f8  e7c10004          STRB     r0,[r1,r4]            ;118
0006fc  e1a00000          MOV      r0,r0                 ;120
000700  eaffffe0          B        |L1.1672|
;;;123    
                          ENDP

                  pwmClose PROC
;;;130      */
;;;131    INT pwmClose(const INT nTimerIdentity)
000704  e92d4070          PUSH     {r4-r6,lr}
;;;132    {
000708  e1a04000          MOV      r4,r0
;;;133        INT nLoop;
;;;134        BOOL uAllTimerClose=TRUE;
00070c  e3a06001          MOV      r6,#1
;;;135        if( nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX ) {
000710  e3540000          CMP      r4,#0
000714  ba000001          BLT      |L1.1824|
000718  e3540003          CMP      r4,#3
00071c  da000001          BLE      |L1.1832|
                  |L1.1824|
;;;136            return pwmInvalidTimerChannel;// nTimerIdentity value error
000720  e59f0734          LDR      r0,|L1.3676|
                  |L1.1828|
;;;137        }
;;;138        if(bPWMTimerOpenStatus[nTimerIdentity] == FALSE) {
;;;139            return pwmTimerNotOpen;
;;;140        }
;;;141        bPWMTimerOpenStatus[nTimerIdentity] = FALSE;
;;;142        //Check if all timer stop, IRQ can be disable
;;;143        for(nLoop=PWM_TIMER_MIN; nLoop<PWM_TIMER_NUM; nLoop++) {
;;;144            if(bPWMTimerOpenStatus[nLoop] == TRUE) {
;;;145                uAllTimerClose=FALSE;
;;;146            }
;;;147        }
;;;148        //All timer stop, disable IRQs
;;;149        if(uAllTimerClose == TRUE) {
;;;150    
;;;151            sysDisableInterrupt(PWM_IRQn);
;;;152            bPWMIRQFlag=FALSE;
;;;153        }
;;;154    
;;;155        pwmSetPIER(nTimerIdentity, PWM_DISABLE);
;;;156        pwmCleanPIIR(nTimerIdentity);
;;;157    
;;;158    
;;;159        return Successful;
;;;160    
;;;161    }
000724  e8bd8070          POP      {r4-r6,pc}
                  |L1.1832|
000728  e59f0750          LDR      r0,|L1.3712|
00072c  e7d00004          LDRB     r0,[r0,r4]            ;138
000730  e3500000          CMP      r0,#0                 ;138
000734  1a000001          BNE      |L1.1856|
000738  e59f0750          LDR      r0,|L1.3728|
00073c  eafffff8          B        |L1.1828|
                  |L1.1856|
000740  e3a00000          MOV      r0,#0                 ;141
000744  e59f1734          LDR      r1,|L1.3712|
000748  e7c10004          STRB     r0,[r1,r4]            ;141
00074c  e3a05000          MOV      r5,#0                 ;143
000750  ea000005          B        |L1.1900|
                  |L1.1876|
000754  e59f0724          LDR      r0,|L1.3712|
000758  e7d00005          LDRB     r0,[r0,r5]            ;144
00075c  e3500001          CMP      r0,#1                 ;144
000760  1a000000          BNE      |L1.1896|
000764  e3a06000          MOV      r6,#0                 ;145
                  |L1.1896|
000768  e2855001          ADD      r5,r5,#1              ;143
                  |L1.1900|
00076c  e3550004          CMP      r5,#4                 ;143
000770  bafffff7          BLT      |L1.1876|
000774  e3560001          CMP      r6,#1                 ;149
000778  1a000004          BNE      |L1.1936|
00077c  e3a0003c          MOV      r0,#0x3c              ;151
000780  ebfffffe          BL       sysDisableInterrupt
000784  e3a00000          MOV      r0,#0                 ;152
000788  e59f16f8          LDR      r1,|L1.3720|
00078c  e5c10000          STRB     r0,[r1,#0]            ;152  ; bPWMIRQFlag
                  |L1.1936|
000790  e3a01000          MOV      r1,#0                 ;155
000794  e1a00004          MOV      r0,r4                 ;155
000798  ebfffffe          BL       pwmSetPIER
00079c  e1a00004          MOV      r0,r4                 ;156
0007a0  ebfffffe          BL       pwmCleanPIIR
0007a4  e3a00000          MOV      r0,#0                 ;159
0007a8  eaffffdd          B        |L1.1828|
;;;162    
                          ENDP

                  pwmGetPDR PROC
;;;924      */
;;;925    static UINT pwmGetPDR(const INT nTimerIdentity)
0007ac  e1a01000          MOV      r1,r0
;;;926    {
;;;927        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
0007b0  e3510000          CMP      r1,#0
0007b4  ba000001          BLT      |L1.1984|
0007b8  e3510003          CMP      r1,#3
0007bc  da000001          BLE      |L1.1992|
                  |L1.1984|
;;;928            return pwmInvalidTimerChannel;// Timer_num value error
0007c0  e59f0694          LDR      r0,|L1.3676|
                  |L1.1988|
;;;929        } else {
;;;930            return (UINT)inpw(REG_PWM_PDR0+(PWM_OFFSET*nTimerIdentity));// Return PDR value
;;;931        }
;;;932    }
0007c4  e12fff1e          BX       lr
                  |L1.1992|
0007c8  e59f0684          LDR      r0,|L1.3668|
0007cc  e3a0200c          MOV      r2,#0xc               ;930
0007d0  e0200192          MLA      r0,r2,r1,r0           ;930
0007d4  e5900014          LDR      r0,[r0,#0x14]         ;930
0007d8  eafffff9          B        |L1.1988|
;;;933    
                          ENDP

                  pwmRead PROC
;;;172      */
;;;173    INT pwmRead(const INT nTimerIdentity, PUCHAR pucStatusValue, const UINT uLength)
0007dc  e92d4070          PUSH     {r4-r6,lr}
;;;174    {
0007e0  e1a04000          MOV      r4,r0
0007e4  e1a05001          MOV      r5,r1
0007e8  e1a06002          MOV      r6,r2
;;;175        if( nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX ) {
0007ec  e3540000          CMP      r4,#0
0007f0  ba000001          BLT      |L1.2044|
0007f4  e3540003          CMP      r4,#3
0007f8  da000001          BLE      |L1.2052|
                  |L1.2044|
;;;176            return pwmInvalidTimerChannel;// nTimerIdentity value error
0007fc  e59f0658          LDR      r0,|L1.3676|
                  |L1.2048|
;;;177        }
;;;178        if(bPWMTimerOpenStatus[nTimerIdentity] == FALSE) {
;;;179            return pwmTimerNotOpen;
;;;180        }
;;;181        if(uLength != sizeof(typePWMSTATUS)) {
;;;182            return pwmInvalidStructLength;// Struct length error(struct type error)
;;;183        }
;;;184        if( sizeof(*((typePWMSTATUS *)pucStatusValue)) != sizeof(typePWMSTATUS) ) {
;;;185            return pwmInvalidStructLength;// Struct length error(struct type error)
;;;186        }
;;;187        ((typePWMSTATUS *)pucStatusValue)->PDR=pwmGetPDR(nTimerIdentity);
;;;188        if(bPWMIntFlag[nTimerIdentity] == TRUE) {
;;;189            bPWMIntFlag[nTimerIdentity]=FALSE;
;;;190            ((typePWMSTATUS *)pucStatusValue)->InterruptFlag=TRUE;
;;;191        } else {
;;;192            ((typePWMSTATUS *)pucStatusValue)->InterruptFlag=FALSE;
;;;193        }
;;;194    
;;;195        return Successful;
;;;196    
;;;197    }
000800  e8bd8070          POP      {r4-r6,pc}
                  |L1.2052|
000804  e59f0674          LDR      r0,|L1.3712|
000808  e7d00004          LDRB     r0,[r0,r4]            ;178
00080c  e3500000          CMP      r0,#0                 ;178
000810  1a000001          BNE      |L1.2076|
000814  e59f0674          LDR      r0,|L1.3728|
000818  eafffff8          B        |L1.2048|
                  |L1.2076|
00081c  e3560008          CMP      r6,#8                 ;181
000820  0a000001          BEQ      |L1.2092|
000824  e59f0668          LDR      r0,|L1.3732|
000828  eafffff4          B        |L1.2048|
                  |L1.2092|
00082c  e1a00004          MOV      r0,r4                 ;187
000830  ebfffffe          BL       pwmGetPDR
000834  e5850000          STR      r0,[r5,#0]            ;187
000838  e59f0618          LDR      r0,|L1.3672|
00083c  e7d00004          LDRB     r0,[r0,r4]            ;188
000840  e3500001          CMP      r0,#1                 ;188
000844  1a000005          BNE      |L1.2144|
000848  e3a00000          MOV      r0,#0                 ;189
00084c  e59f1604          LDR      r1,|L1.3672|
000850  e7c10004          STRB     r0,[r1,r4]            ;189
000854  e3a00001          MOV      r0,#1                 ;190
000858  e5c50004          STRB     r0,[r5,#4]            ;190
00085c  ea000001          B        |L1.2152|
                  |L1.2144|
000860  e3a00000          MOV      r0,#0                 ;192
000864  e5c50004          STRB     r0,[r5,#4]            ;192
                  |L1.2152|
000868  e3a00000          MOV      r0,#0                 ;195
00086c  eaffffe3          B        |L1.2048|
;;;198    
                          ENDP

                  pwmWrite PROC
;;;207      */
;;;208    INT pwmWrite(const INT nTimerIdentity, PUCHAR pucCNRCMRValue, const UINT uLength)
000870  e92d40f8          PUSH     {r3-r7,lr}
;;;209    {
000874  e1a04000          MOV      r4,r0
000878  e1a06001          MOV      r6,r1
00087c  e1a07002          MOV      r7,r2
;;;210        typePWMVALUE pwmvalue;
;;;211        INT nStatus;
;;;212        if( nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX ) {
000880  e3540000          CMP      r4,#0
000884  ba000001          BLT      |L1.2192|
000888  e3540003          CMP      r4,#3
00088c  da000001          BLE      |L1.2200|
                  |L1.2192|
;;;213            return pwmInvalidTimerChannel;// nTimerIdentity value error
000890  e59f05c4          LDR      r0,|L1.3676|
                  |L1.2196|
;;;214        }
;;;215        if(bPWMTimerOpenStatus[nTimerIdentity] == FALSE) {
;;;216            return pwmTimerNotOpen;
;;;217        }
;;;218        if(uLength != sizeof(typePWMVALUE)) {
;;;219            return pwmInvalidStructLength;// Struct length error(struct type error)
;;;220        }
;;;221        pwmvalue.value=((typePWMVALUE *)pucCNRCMRValue)->value;
;;;222        nStatus=pwmSetCNR(nTimerIdentity, pwmvalue.field.cnr);
;;;223    
;;;224        if(nStatus != Successful) {
;;;225            return nStatus;
;;;226        }
;;;227        nStatus=pwmSetCMR(nTimerIdentity, pwmvalue.field.cmr);
;;;228    
;;;229        if(nStatus != Successful) {
;;;230            return nStatus;
;;;231        }
;;;232        return Successful;
;;;233    
;;;234    }
000894  e8bd80f8          POP      {r3-r7,pc}
                  |L1.2200|
000898  e59f05e0          LDR      r0,|L1.3712|
00089c  e7d00004          LDRB     r0,[r0,r4]            ;215
0008a0  e3500000          CMP      r0,#0                 ;215
0008a4  1a000001          BNE      |L1.2224|
0008a8  e59f05e0          LDR      r0,|L1.3728|
0008ac  eafffff8          B        |L1.2196|
                  |L1.2224|
0008b0  e3570004          CMP      r7,#4                 ;218
0008b4  0a000001          BEQ      |L1.2240|
0008b8  e59f05d4          LDR      r0,|L1.3732|
0008bc  eafffff4          B        |L1.2196|
                  |L1.2240|
0008c0  e5960000          LDR      r0,[r6,#0]            ;221
0008c4  e58d0000          STR      r0,[sp,#0]            ;221
0008c8  e59d0000          LDR      r0,[sp,#0]            ;222
0008cc  e1a01800          LSL      r1,r0,#16             ;222
0008d0  e1a01821          LSR      r1,r1,#16             ;222
0008d4  e1a00004          MOV      r0,r4                 ;222
0008d8  ebfffffe          BL       pwmSetCNR
0008dc  e1a05000          MOV      r5,r0                 ;222
0008e0  e3550000          CMP      r5,#0                 ;224
0008e4  0a000001          BEQ      |L1.2288|
0008e8  e1a00005          MOV      r0,r5                 ;225
0008ec  eaffffe8          B        |L1.2196|
                  |L1.2288|
0008f0  e59d0000          LDR      r0,[sp,#0]            ;227
0008f4  e1a01820          LSR      r1,r0,#16             ;227
0008f8  e1a00004          MOV      r0,r4                 ;227
0008fc  ebfffffe          BL       pwmSetCMR
000900  e1a05000          MOV      r5,r0                 ;227
000904  e3550000          CMP      r5,#0                 ;229
000908  0a000001          BEQ      |L1.2324|
00090c  e1a00005          MOV      r0,r5                 ;230
000910  eaffffdf          B        |L1.2196|
                  |L1.2324|
000914  e3a00000          MOV      r0,#0                 ;232
000918  eaffffdd          B        |L1.2196|
;;;235    
                          ENDP

                  pwmInitGPIO PROC
;;;334      */
;;;335    static INT pwmInitGPIO(const INT nTimerIdentity, const INT nValue)
00091c  e1a03000          MOV      r3,r0
;;;336    {
000920  e1a02001          MOV      r2,r1
;;;337        UINT temp=0;
000924  e3a01000          MOV      r1,#0
;;;338    
;;;339        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000928  e3530000          CMP      r3,#0
00092c  ba000001          BLT      |L1.2360|
000930  e3530003          CMP      r3,#3
000934  da000001          BLE      |L1.2368|
                  |L1.2360|
;;;340            return pwmInvalidTimerChannel;// Timer_num value error
000938  e59f051c          LDR      r0,|L1.3676|
                  |L1.2364|
;;;341        }
;;;342    
;;;343        if(nTimerIdentity == PWM_TIMER0) {
;;;344            if(nValue == PWM0_GPA12) {
;;;345                temp = inpw(REG_SYS_GPA_MFPH);
;;;346                temp = (temp & ~0x000F0000) | 0xD0000;
;;;347                outpw(REG_SYS_GPA_MFPH, temp);
;;;348            } else if(nValue == PWM0_GPB2) {
;;;349                temp = inpw(REG_SYS_GPB_MFPL);
;;;350                temp = (temp & ~0xF00) | 0xD00;
;;;351                outpw(REG_SYS_GPB_MFPL, temp);
;;;352            } else if(nValue == PWM0_GPC14) {
;;;353                temp = inpw(REG_SYS_GPC_MFPH);
;;;354                temp = (temp & ~0x0F000000) | 0xD000000;
;;;355                outpw(REG_SYS_GPC_MFPH, temp);
;;;356            } else if(nValue == PWM0_GPD12) {
;;;357                temp = inpw(REG_SYS_GPD_MFPH);
;;;358                temp = (temp & ~0x000F0000) | 0xD0000;
;;;359                outpw(REG_SYS_GPD_MFPH, temp);
;;;360            } else
;;;361                return pwmInvalidPin;
;;;362        } else if(nTimerIdentity == PWM_TIMER1) {
;;;363            if(nValue == PWM1_GPA13) {
;;;364                temp = inpw(REG_SYS_GPA_MFPH);
;;;365                temp = (temp & ~0x00F00000) | 0xD00000;
;;;366                outpw(REG_SYS_GPA_MFPH, temp);
;;;367            } else if(nValue == PWM1_GPB3) {
;;;368                temp = inpw(REG_SYS_GPB_MFPL);
;;;369                temp = (temp & ~0xF000) | 0xD000;
;;;370                outpw(REG_SYS_GPB_MFPL, temp);
;;;371            } else if(nValue == PWM1_GPD13) {
;;;372                temp = inpw(REG_SYS_GPD_MFPH);
;;;373                temp = (temp & ~0x00F00000) | 0xD00000;
;;;374                outpw(REG_SYS_GPD_MFPH, temp);
;;;375            } else
;;;376                return pwmInvalidPin;
;;;377        } else if(nTimerIdentity == PWM_TIMER2) {
;;;378            if(nValue == PWM2_GPA14) {
;;;379                temp = inpw(REG_SYS_GPA_MFPH);
;;;380                temp = (temp & ~0x0F000000) | 0xD000000;
;;;381                outpw(REG_SYS_GPA_MFPH, temp);
;;;382            } else if(nValue == PWM2_GPD14) {
;;;383                temp = inpw(REG_SYS_GPD_MFPH);
;;;384                temp = (temp & ~0x0F000000) | 0xD000000;
;;;385                outpw(REG_SYS_GPD_MFPH, temp);
;;;386            } else if(nValue == PWM2_GPH2) {
;;;387                temp = inpw(REG_SYS_GPB_MFPL);
;;;388                temp = (temp & ~0xF00) | 0xD00;
;;;389                outpw(REG_SYS_GPB_MFPL, temp);
;;;390            } else
;;;391                return pwmInvalidPin;
;;;392        } else {
;;;393            if(nValue == PWM3_GPA15) {
;;;394                temp = inpw(REG_SYS_GPA_MFPH);
;;;395                temp = (temp & ~0xF0000000) | 0xD0000000;
;;;396                outpw(REG_SYS_GPA_MFPH, temp);
;;;397            } else if(nValue == PWM3_GPD15) {
;;;398                temp = inpw(REG_SYS_GPD_MFPH);
;;;399                temp = (temp & ~0xF0000000) | 0xD0000000;
;;;400                outpw(REG_SYS_GPD_MFPH, temp);
;;;401            } else if(nValue == PWM3_GPH3) {
;;;402                temp = inpw(REG_SYS_GPH_MFPL);
;;;403                temp = (temp & ~0xF000) | 0xD000;
;;;404                outpw(REG_SYS_GPH_MFPL, temp);
;;;405            } else
;;;406                return pwmInvalidPin;
;;;407        }
;;;408    
;;;409        return Successful;
;;;410    }
00093c  e12fff1e          BX       lr
                  |L1.2368|
000940  e3530000          CMP      r3,#0                 ;343
000944  1a000025          BNE      |L1.2528|
000948  e3520000          CMP      r2,#0                 ;344
00094c  1a000006          BNE      |L1.2412|
000950  e3a0020b          MOV      r0,#0xb0000000        ;345
000954  e5901074          LDR      r1,[r0,#0x74]         ;345
000958  e3c1080f          BIC      r0,r1,#0xf0000        ;346
00095c  e380180d          ORR      r1,r0,#0xd0000        ;346
000960  e3a0020b          MOV      r0,#0xb0000000        ;347
000964  e5801074          STR      r1,[r0,#0x74]         ;347
000968  ea000077          B        |L1.2892|
                  |L1.2412|
00096c  e3520001          CMP      r2,#1                 ;348
000970  1a000006          BNE      |L1.2448|
000974  e3a0020b          MOV      r0,#0xb0000000        ;349
000978  e5901078          LDR      r1,[r0,#0x78]         ;349
00097c  e3c10c0f          BIC      r0,r1,#0xf00          ;350
000980  e3801c0d          ORR      r1,r0,#0xd00          ;350
000984  e3a0020b          MOV      r0,#0xb0000000        ;351
000988  e5801078          STR      r1,[r0,#0x78]         ;351
00098c  ea00006e          B        |L1.2892|
                  |L1.2448|
000990  e3520002          CMP      r2,#2                 ;352
000994  1a000006          BNE      |L1.2484|
000998  e3a0020b          MOV      r0,#0xb0000000        ;353
00099c  e5901084          LDR      r1,[r0,#0x84]         ;353
0009a0  e3c1040f          BIC      r0,r1,#0xf000000      ;354
0009a4  e380140d          ORR      r1,r0,#0xd000000      ;354
0009a8  e3a0020b          MOV      r0,#0xb0000000        ;355
0009ac  e5801084          STR      r1,[r0,#0x84]         ;355
0009b0  ea000065          B        |L1.2892|
                  |L1.2484|
0009b4  e3520003          CMP      r2,#3                 ;356
0009b8  1a000006          BNE      |L1.2520|
0009bc  e3a0020b          MOV      r0,#0xb0000000        ;357
0009c0  e590108c          LDR      r1,[r0,#0x8c]         ;357
0009c4  e3c1080f          BIC      r0,r1,#0xf0000        ;358
0009c8  e380180d          ORR      r1,r0,#0xd0000        ;358
0009cc  e3a0020b          MOV      r0,#0xb0000000        ;359
0009d0  e580108c          STR      r1,[r0,#0x8c]         ;359
0009d4  ea00005c          B        |L1.2892|
                  |L1.2520|
0009d8  e59f04b8          LDR      r0,|L1.3736|
0009dc  eaffffd6          B        |L1.2364|
                  |L1.2528|
0009e0  e3530001          CMP      r3,#1                 ;362
0009e4  1a00001c          BNE      |L1.2652|
0009e8  e3520004          CMP      r2,#4                 ;363
0009ec  1a000006          BNE      |L1.2572|
0009f0  e3a0020b          MOV      r0,#0xb0000000        ;364
0009f4  e5901074          LDR      r1,[r0,#0x74]         ;364
0009f8  e3c1060f          BIC      r0,r1,#0xf00000       ;365
0009fc  e380160d          ORR      r1,r0,#0xd00000       ;365
000a00  e3a0020b          MOV      r0,#0xb0000000        ;366
000a04  e5801074          STR      r1,[r0,#0x74]         ;366
000a08  ea00004f          B        |L1.2892|
                  |L1.2572|
000a0c  e3520005          CMP      r2,#5                 ;367
000a10  1a000006          BNE      |L1.2608|
000a14  e3a0020b          MOV      r0,#0xb0000000        ;368
000a18  e5901078          LDR      r1,[r0,#0x78]         ;368
000a1c  e3c10a0f          BIC      r0,r1,#0xf000         ;369
000a20  e3801a0d          ORR      r1,r0,#0xd000         ;369
000a24  e3a0020b          MOV      r0,#0xb0000000        ;370
000a28  e5801078          STR      r1,[r0,#0x78]         ;370
000a2c  ea000046          B        |L1.2892|
                  |L1.2608|
000a30  e3520006          CMP      r2,#6                 ;371
000a34  1a000006          BNE      |L1.2644|
000a38  e3a0020b          MOV      r0,#0xb0000000        ;372
000a3c  e590108c          LDR      r1,[r0,#0x8c]         ;372
000a40  e3c1060f          BIC      r0,r1,#0xf00000       ;373
000a44  e380160d          ORR      r1,r0,#0xd00000       ;373
000a48  e3a0020b          MOV      r0,#0xb0000000        ;374
000a4c  e580108c          STR      r1,[r0,#0x8c]         ;374
000a50  ea00003d          B        |L1.2892|
                  |L1.2644|
000a54  e59f043c          LDR      r0,|L1.3736|
000a58  eaffffb7          B        |L1.2364|
                  |L1.2652|
000a5c  e3530002          CMP      r3,#2                 ;377
000a60  1a00001c          BNE      |L1.2776|
000a64  e3520007          CMP      r2,#7                 ;378
000a68  1a000006          BNE      |L1.2696|
000a6c  e3a0020b          MOV      r0,#0xb0000000        ;379
000a70  e5901074          LDR      r1,[r0,#0x74]         ;379
000a74  e3c1040f          BIC      r0,r1,#0xf000000      ;380
000a78  e380140d          ORR      r1,r0,#0xd000000      ;380
000a7c  e3a0020b          MOV      r0,#0xb0000000        ;381
000a80  e5801074          STR      r1,[r0,#0x74]         ;381
000a84  ea000030          B        |L1.2892|
                  |L1.2696|
000a88  e3520008          CMP      r2,#8                 ;382
000a8c  1a000006          BNE      |L1.2732|
000a90  e3a0020b          MOV      r0,#0xb0000000        ;383
000a94  e590108c          LDR      r1,[r0,#0x8c]         ;383
000a98  e3c1040f          BIC      r0,r1,#0xf000000      ;384
000a9c  e380140d          ORR      r1,r0,#0xd000000      ;384
000aa0  e3a0020b          MOV      r0,#0xb0000000        ;385
000aa4  e580108c          STR      r1,[r0,#0x8c]         ;385
000aa8  ea000027          B        |L1.2892|
                  |L1.2732|
000aac  e3520009          CMP      r2,#9                 ;386
000ab0  1a000006          BNE      |L1.2768|
000ab4  e3a0020b          MOV      r0,#0xb0000000        ;387
000ab8  e5901078          LDR      r1,[r0,#0x78]         ;387
000abc  e3c10c0f          BIC      r0,r1,#0xf00          ;388
000ac0  e3801c0d          ORR      r1,r0,#0xd00          ;388
000ac4  e3a0020b          MOV      r0,#0xb0000000        ;389
000ac8  e5801078          STR      r1,[r0,#0x78]         ;389
000acc  ea00001e          B        |L1.2892|
                  |L1.2768|
000ad0  e59f03c0          LDR      r0,|L1.3736|
000ad4  eaffff98          B        |L1.2364|
                  |L1.2776|
000ad8  e352000a          CMP      r2,#0xa               ;393
000adc  1a000006          BNE      |L1.2812|
000ae0  e3a0020b          MOV      r0,#0xb0000000        ;394
000ae4  e5901074          LDR      r1,[r0,#0x74]         ;394
000ae8  e3c1020f          BIC      r0,r1,#0xf0000000     ;395
000aec  e380120d          ORR      r1,r0,#0xd0000000     ;395
000af0  e3a0020b          MOV      r0,#0xb0000000        ;396
000af4  e5801074          STR      r1,[r0,#0x74]         ;396
000af8  ea000013          B        |L1.2892|
                  |L1.2812|
000afc  e352000b          CMP      r2,#0xb               ;397
000b00  1a000006          BNE      |L1.2848|
000b04  e3a0020b          MOV      r0,#0xb0000000        ;398
000b08  e590108c          LDR      r1,[r0,#0x8c]         ;398
000b0c  e3c1020f          BIC      r0,r1,#0xf0000000     ;399
000b10  e380120d          ORR      r1,r0,#0xd0000000     ;399
000b14  e3a0020b          MOV      r0,#0xb0000000        ;400
000b18  e580108c          STR      r1,[r0,#0x8c]         ;400
000b1c  ea00000a          B        |L1.2892|
                  |L1.2848|
000b20  e352000c          CMP      r2,#0xc               ;401
000b24  1a000006          BNE      |L1.2884|
000b28  e3a0020b          MOV      r0,#0xb0000000        ;402
000b2c  e59010a8          LDR      r1,[r0,#0xa8]         ;402
000b30  e3c10a0f          BIC      r0,r1,#0xf000         ;403
000b34  e3801a0d          ORR      r1,r0,#0xd000         ;403
000b38  e3a0020b          MOV      r0,#0xb0000000        ;404
000b3c  e58010a8          STR      r1,[r0,#0xa8]         ;404
000b40  ea000001          B        |L1.2892|
                  |L1.2884|
000b44  e59f034c          LDR      r0,|L1.3736|
000b48  eaffff7b          B        |L1.2364|
                  |L1.2892|
000b4c  e3a00000          MOV      r0,#0                 ;409
000b50  eaffff79          B        |L1.2364|
;;;411    
                          ENDP

                  pwmSetDZGenerator PROC
;;;711      */
;;;712    static INT pwmSetDZGenerator(const INT nTimerIdentity, INT nStatus)
000b54  e92d4008          PUSH     {r3,lr}
;;;713    {
000b58  e1a02000          MOV      r2,r0
;;;714        typePCR PWMPCR;
;;;715        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000b5c  e3520000          CMP      r2,#0
000b60  ba000001          BLT      |L1.2924|
000b64  e3520003          CMP      r2,#3
000b68  da000001          BLE      |L1.2932|
                  |L1.2924|
;;;716            return pwmInvalidTimerChannel;// Timer_num value error
000b6c  e59f02e8          LDR      r0,|L1.3676|
                  |L1.2928|
;;;717        }
;;;718        if(nStatus != PWMDZG_ENABLE && nStatus != PWMDZG_DISABLE) {
;;;719            return pwmInvalidDZGStatus;// PCR inverter value error
;;;720        }
;;;721        PWMPCR.value=(UINT)inpw(REG_PWM_PCR);
;;;722        switch(nTimerIdentity) {
;;;723        case PWM_TIMER0: {
;;;724            PWMPCR.field.grpup0_dzen=nStatus;
;;;725            break;
;;;726        }
;;;727        case PWM_TIMER1: {
;;;728            PWMPCR.field.grpup0_dzen=nStatus;
;;;729            break;
;;;730        }
;;;731        case PWM_TIMER2: {
;;;732            PWMPCR.field.grpup1_dzen=nStatus;
;;;733            break;
;;;734        }
;;;735        case PWM_TIMER3: {
;;;736            PWMPCR.field.grpup1_dzen=nStatus;
;;;737            break;
;;;738        }
;;;739        }
;;;740        outpw(REG_PWM_PCR, PWMPCR.value);
;;;741    
;;;742        return Successful;
;;;743    }
000b70  e8bd8008          POP      {r3,pc}
                  |L1.2932|
000b74  e3510001          CMP      r1,#1                 ;718
000b78  0a000003          BEQ      |L1.2956|
000b7c  e3510000          CMP      r1,#0                 ;718
000b80  0a000001          BEQ      |L1.2956|
000b84  e59f0310          LDR      r0,|L1.3740|
000b88  eafffff8          B        |L1.2928|
                  |L1.2956|
000b8c  e59f02c0          LDR      r0,|L1.3668|
000b90  e5900008          LDR      r0,[r0,#8]            ;721
000b94  e58d0000          STR      r0,[sp,#0]            ;721
000b98  e3520000          CMP      r2,#0                 ;722
000b9c  0a000006          BEQ      |L1.3004|
000ba0  e3520001          CMP      r2,#1                 ;722
000ba4  0a00000c          BEQ      |L1.3036|
000ba8  e3520002          CMP      r2,#2                 ;722
000bac  0a000012          BEQ      |L1.3068|
000bb0  e3520003          CMP      r2,#3                 ;722
000bb4  1a000020          BNE      |L1.3132|
000bb8  ea000017          B        |L1.3100|
                  |L1.3004|
000bbc  e1a00000          MOV      r0,r0                 ;723
000bc0  e59d0000          LDR      r0,[sp,#0]            ;724
000bc4  e3c00010          BIC      r0,r0,#0x10           ;724
000bc8  e3a03010          MOV      r3,#0x10              ;724
000bcc  e0033201          AND      r3,r3,r1,LSL #4       ;724
000bd0  e1800003          ORR      r0,r0,r3              ;724
000bd4  e58d0000          STR      r0,[sp,#0]            ;724
000bd8  ea000017          B        |L1.3132|
                  |L1.3036|
000bdc  e1a00000          MOV      r0,r0                 ;727
000be0  e59d0000          LDR      r0,[sp,#0]            ;728
000be4  e3c00010          BIC      r0,r0,#0x10           ;728
000be8  e3a03010          MOV      r3,#0x10              ;728
000bec  e0033201          AND      r3,r3,r1,LSL #4       ;728
000bf0  e1800003          ORR      r0,r0,r3              ;728
000bf4  e58d0000          STR      r0,[sp,#0]            ;728
000bf8  ea00000f          B        |L1.3132|
                  |L1.3068|
000bfc  e1a00000          MOV      r0,r0                 ;731
000c00  e59d0000          LDR      r0,[sp,#0]            ;732
000c04  e3c00020          BIC      r0,r0,#0x20           ;732
000c08  e3a03020          MOV      r3,#0x20              ;732
000c0c  e0033281          AND      r3,r3,r1,LSL #5       ;732
000c10  e1800003          ORR      r0,r0,r3              ;732
000c14  e58d0000          STR      r0,[sp,#0]            ;732
000c18  ea000007          B        |L1.3132|
                  |L1.3100|
000c1c  e1a00000          MOV      r0,r0                 ;735
000c20  e59d0000          LDR      r0,[sp,#0]            ;736
000c24  e3c00020          BIC      r0,r0,#0x20           ;736
000c28  e3a03020          MOV      r3,#0x20              ;736
000c2c  e0033281          AND      r3,r3,r1,LSL #5       ;736
000c30  e1800003          ORR      r0,r0,r3              ;736
000c34  e58d0000          STR      r0,[sp,#0]            ;736
000c38  e1a00000          MOV      r0,r0                 ;737
                  |L1.3132|
000c3c  e1a00000          MOV      r0,r0                 ;725
000c40  e59d0000          LDR      r0,[sp,#0]            ;740
000c44  e59f3208          LDR      r3,|L1.3668|
000c48  e5830008          STR      r0,[r3,#8]            ;740
000c4c  e3a00000          MOV      r0,#0                 ;742
000c50  eaffffc6          B        |L1.2928|
;;;744    
                          ENDP

                  pwmSetInverter PROC
;;;795      */
;;;796    static INT pwmSetInverter(const INT nTimerIdentity, INT nStatus)
000c54  e92d4008          PUSH     {r3,lr}
;;;797    {
000c58  e1a02000          MOV      r2,r0
;;;798        typePCR PWMPCR;
;;;799        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000c5c  e3520000          CMP      r2,#0
000c60  ba000001          BLT      |L1.3180|
000c64  e3520003          CMP      r2,#3
000c68  da000001          BLE      |L1.3188|
                  |L1.3180|
;;;800            return pwmInvalidTimerChannel;// Timer_num value error
000c6c  e59f01e8          LDR      r0,|L1.3676|
                  |L1.3184|
;;;801        }
;;;802        if(nStatus != PWM_INVON && nStatus != PWM_INVOFF) {
;;;803            return pwmInvalidInverterValue;// PCR inverter value error
;;;804        }
;;;805        PWMPCR.value=(UINT)inpw(REG_PWM_PCR);
;;;806        switch(nTimerIdentity) {
;;;807        case PWM_TIMER0: {
;;;808            PWMPCR.field.ch0_inverter=nStatus;
;;;809            break;
;;;810        }
;;;811        case PWM_TIMER1: {
;;;812            PWMPCR.field.ch1_inverter=nStatus;
;;;813            break;
;;;814        }
;;;815        case PWM_TIMER2: {
;;;816            PWMPCR.field.ch2_inverter=nStatus;
;;;817            break;
;;;818        }
;;;819        case PWM_TIMER3: {
;;;820            PWMPCR.field.ch3_inverter=nStatus;
;;;821            break;
;;;822        }
;;;823        }
;;;824        outpw(REG_PWM_PCR, PWMPCR.value);
;;;825    
;;;826        return Successful;
;;;827    }
000c70  e8bd8008          POP      {r3,pc}
                  |L1.3188|
000c74  e3510001          CMP      r1,#1                 ;802
000c78  0a000003          BEQ      |L1.3212|
000c7c  e3510000          CMP      r1,#0                 ;802
000c80  0a000001          BEQ      |L1.3212|
000c84  e59f0214          LDR      r0,|L1.3744|
000c88  eafffff8          B        |L1.3184|
                  |L1.3212|
000c8c  e59f01c0          LDR      r0,|L1.3668|
000c90  e5900008          LDR      r0,[r0,#8]            ;805
000c94  e58d0000          STR      r0,[sp,#0]            ;805
000c98  e3520000          CMP      r2,#0                 ;806
000c9c  0a000006          BEQ      |L1.3260|
000ca0  e3520001          CMP      r2,#1                 ;806
000ca4  0a00000c          BEQ      |L1.3292|
000ca8  e3520002          CMP      r2,#2                 ;806
000cac  0a000012          BEQ      |L1.3324|
000cb0  e3520003          CMP      r2,#3                 ;806
000cb4  1a000020          BNE      |L1.3388|
000cb8  ea000017          B        |L1.3356|
                  |L1.3260|
000cbc  e1a00000          MOV      r0,r0                 ;807
000cc0  e59d0000          LDR      r0,[sp,#0]            ;808
000cc4  e3c00004          BIC      r0,r0,#4              ;808
000cc8  e3a03004          MOV      r3,#4                 ;808
000ccc  e0033101          AND      r3,r3,r1,LSL #2       ;808
000cd0  e1800003          ORR      r0,r0,r3              ;808
000cd4  e58d0000          STR      r0,[sp,#0]            ;808
000cd8  ea000017          B        |L1.3388|
                  |L1.3292|
000cdc  e1a00000          MOV      r0,r0                 ;811
000ce0  e59d0000          LDR      r0,[sp,#0]            ;812
000ce4  e3c00b01          BIC      r0,r0,#0x400          ;812
000ce8  e3a03b01          MOV      r3,#0x400             ;812
000cec  e0033501          AND      r3,r3,r1,LSL #10      ;812
000cf0  e1800003          ORR      r0,r0,r3              ;812
000cf4  e58d0000          STR      r0,[sp,#0]            ;812
000cf8  ea00000f          B        |L1.3388|
                  |L1.3324|
000cfc  e1a00000          MOV      r0,r0                 ;815
000d00  e59d0000          LDR      r0,[sp,#0]            ;816
000d04  e3c00901          BIC      r0,r0,#0x4000         ;816
000d08  e3a03901          MOV      r3,#0x4000            ;816
000d0c  e0033701          AND      r3,r3,r1,LSL #14      ;816
000d10  e1800003          ORR      r0,r0,r3              ;816
000d14  e58d0000          STR      r0,[sp,#0]            ;816
000d18  ea000007          B        |L1.3388|
                  |L1.3356|
000d1c  e1a00000          MOV      r0,r0                 ;819
000d20  e59d0000          LDR      r0,[sp,#0]            ;820
000d24  e3c00701          BIC      r0,r0,#0x40000        ;820
000d28  e3a03701          MOV      r3,#0x40000           ;820
000d2c  e0033901          AND      r3,r3,r1,LSL #18      ;820
000d30  e1800003          ORR      r0,r0,r3              ;820
000d34  e58d0000          STR      r0,[sp,#0]            ;820
000d38  e1a00000          MOV      r0,r0                 ;821
                  |L1.3388|
000d3c  e1a00000          MOV      r0,r0                 ;809
000d40  e59d0000          LDR      r0,[sp,#0]            ;824
000d44  e59f3108          LDR      r3,|L1.3668|
000d48  e5830008          STR      r0,[r3,#8]            ;824
000d4c  e3a00000          MOV      r0,#0                 ;826
000d50  eaffffc6          B        |L1.3184|
;;;828    
                          ENDP

                  pwmSetDZI PROC
;;;629      */
;;;630    static INT pwmSetDZI(const INT nTimerIdentity, const INT nValue)
000d54  e92d4008          PUSH     {r3,lr}
;;;631    {
000d58  e1a02000          MOV      r2,r0
;;;632        typePPR PWMPPR;
;;;633        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000d5c  e3520000          CMP      r2,#0
000d60  ba000001          BLT      |L1.3436|
000d64  e3520003          CMP      r2,#3
000d68  da000001          BLE      |L1.3444|
                  |L1.3436|
;;;634            return pwmInvalidTimerChannel;// Timer_num value error
000d6c  e59f00e8          LDR      r0,|L1.3676|
                  |L1.3440|
;;;635        }
;;;636        if(nValue<DZI_MIN || nValue>DZI_MAX) {
;;;637            return pwmInvalidDZIValue;// CSR value error
;;;638        }
;;;639        PWMPPR.value=(UINT)inpw(REG_PWM_PPR);
;;;640        switch(nTimerIdentity) {
;;;641        case PWM_TIMER0: {
;;;642            PWMPPR.field.dzi0=nValue;
;;;643            break;
;;;644        }
;;;645        case PWM_TIMER1: {
;;;646            PWMPPR.field.dzi0=nValue;
;;;647            break;
;;;648        }
;;;649        case PWM_TIMER2: {
;;;650            PWMPPR.field.dzi1=nValue;
;;;651            break;
;;;652        }
;;;653        case PWM_TIMER3: {
;;;654            PWMPPR.field.dzi1=nValue;
;;;655            break;
;;;656        }
;;;657        }
;;;658        outpw(REG_PWM_PPR, PWMPPR.value);
;;;659    
;;;660        return Successful;
;;;661    }
000d70  e8bd8008          POP      {r3,pc}
                  |L1.3444|
000d74  e3510000          CMP      r1,#0                 ;636
000d78  ba000001          BLT      |L1.3460|
000d7c  e35100ff          CMP      r1,#0xff              ;636
000d80  da000001          BLE      |L1.3468|
                  |L1.3460|
000d84  e59f0118          LDR      r0,|L1.3748|
000d88  eafffff8          B        |L1.3440|
                  |L1.3468|
000d8c  e59f00c0          LDR      r0,|L1.3668|
000d90  e5900000          LDR      r0,[r0,#0]            ;639
000d94  e58d0000          STR      r0,[sp,#0]            ;639
000d98  e3520000          CMP      r2,#0                 ;640
000d9c  0a000006          BEQ      |L1.3516|
000da0  e3520001          CMP      r2,#1                 ;640
000da4  0a00000c          BEQ      |L1.3548|
000da8  e3520002          CMP      r2,#2                 ;640
000dac  0a000012          BEQ      |L1.3580|
000db0  e3520003          CMP      r2,#3                 ;640
000db4  1a000020          BNE      |L1.3644|
000db8  ea000017          B        |L1.3612|
                  |L1.3516|
000dbc  e1a00000          MOV      r0,r0                 ;641
000dc0  e59d0000          LDR      r0,[sp,#0]            ;642
000dc4  e3c008ff          BIC      r0,r0,#0xff0000       ;642
000dc8  e3a038ff          MOV      r3,#0xff0000          ;642
000dcc  e0033801          AND      r3,r3,r1,LSL #16      ;642
000dd0  e1800003          ORR      r0,r0,r3              ;642
000dd4  e58d0000          STR      r0,[sp,#0]            ;642
000dd8  ea000017          B        |L1.3644|
                  |L1.3548|
000ddc  e1a00000          MOV      r0,r0                 ;645
000de0  e59d0000          LDR      r0,[sp,#0]            ;646
000de4  e3c008ff          BIC      r0,r0,#0xff0000       ;646
000de8  e3a038ff          MOV      r3,#0xff0000          ;646
000dec  e0033801          AND      r3,r3,r1,LSL #16      ;646
000df0  e1800003          ORR      r0,r0,r3              ;646
000df4  e58d0000          STR      r0,[sp,#0]            ;646
000df8  ea00000f          B        |L1.3644|
                  |L1.3580|
000dfc  e1a00000          MOV      r0,r0                 ;649
000e00  e59d0000          LDR      r0,[sp,#0]            ;650
000e04  e3c004ff          BIC      r0,r0,#0xff000000     ;650
000e08  e3a034ff          MOV      r3,#0xff000000        ;650
000e0c  e0033c01          AND      r3,r3,r1,LSL #24      ;650
000e10  e1800003          ORR      r0,r0,r3              ;650
000e14  e58d0000          STR      r0,[sp,#0]            ;650
000e18  ea000007          B        |L1.3644|
                  |L1.3612|
000e1c  e1a00000          MOV      r0,r0                 ;653
000e20  e59d0000          LDR      r0,[sp,#0]            ;654
000e24  e3c004ff          BIC      r0,r0,#0xff000000     ;654
000e28  e3a034ff          MOV      r3,#0xff000000        ;654
000e2c  e0033c01          AND      r3,r3,r1,LSL #24      ;654
000e30  e1800003          ORR      r0,r0,r3              ;654
000e34  e58d0000          STR      r0,[sp,#0]            ;654
000e38  e1a00000          MOV      r0,r0                 ;655
                  |L1.3644|
000e3c  e1a00000          MOV      r0,r0                 ;643
000e40  e59d0000          LDR      r0,[sp,#0]            ;658
000e44  e59f3008          LDR      r3,|L1.3668|
000e48  e5830000          STR      r0,[r3,#0]            ;658
000e4c  e3a00000          MOV      r0,#0                 ;660
000e50  eaffffc6          B        |L1.3440|
                  |L1.3668|
                          DCD      0xb8007000
                  |L1.3672|
                          DCD      bPWMIntFlag
                  |L1.3676|
                          DCD      0xffff1301
                  |L1.3680|
                          DCD      0xffff130c
                  |L1.3684|
                          DCD      0xffff130d
                  |L1.3688|
                          DCD      0xffff130b
                  |L1.3692|
                          DCD      bPWMTimerMode
                  |L1.3696|
                          DCD      0xffff1305
                  |L1.3700|
                          DCD      0xffff1307
                  |L1.3704|
                          DCD      0x00001312
                  |L1.3708|
                          DCD      0x00004c4b
                  |L1.3712|
                          DCD      bPWMTimerOpenStatus
                  |L1.3716|
                          DCD      0xffff130f
                  |L1.3720|
                          DCD      bPWMIRQFlag
                  |L1.3724|
                          DCD      bPWMTimerStartStatus
                  |L1.3728|
                          DCD      0xffff130e
                  |L1.3732|
                          DCD      0xffff1302
                  |L1.3736|
                          DCD      0xffff1310
                  |L1.3740|
                          DCD      0xffff1308
                  |L1.3744|
                          DCD      0xffff130a
                  |L1.3748|
                          DCD      0xffff1306
                          ENDP

                  pwmSetTimerState PROC
;;;752      */
;;;753    static INT pwmSetTimerState(const INT nTimerIdentity, INT nStatus)
000ea8  e92d4008          PUSH     {r3,lr}
;;;754    {
000eac  e1a02000          MOV      r2,r0
;;;755        typePCR PWMPCR;
;;;756        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000eb0  e3520000          CMP      r2,#0
000eb4  ba000001          BLT      |L1.3776|
000eb8  e3520003          CMP      r2,#3
000ebc  da000001          BLE      |L1.3784|
                  |L1.3776|
;;;757            return pwmInvalidTimerChannel;// Timer_num value error
000ec0  e51f006c          LDR      r0,|L1.3676|
                  |L1.3780|
;;;758        }
;;;759        if(nStatus != PWM_ENABLE && nStatus != PWM_DISABLE) {
;;;760            return pwmInvalidTimerStatus;
;;;761        }
;;;762        PWMPCR.value=(UINT)inpw(REG_PWM_PCR);
;;;763        switch(nTimerIdentity) {
;;;764        case PWM_TIMER0: {
;;;765            PWMPCR.field.ch0_en=nStatus;
;;;766            break;
;;;767        }
;;;768        case PWM_TIMER1: {
;;;769            PWMPCR.field.ch1_en=nStatus;
;;;770            break;
;;;771        }
;;;772        case PWM_TIMER2: {
;;;773            PWMPCR.field.ch2_en=nStatus;
;;;774            break;
;;;775        }
;;;776        case PWM_TIMER3: {
;;;777            PWMPCR.field.ch3_en=nStatus;
;;;778            break;
;;;779        }
;;;780        }
;;;781        outpw(REG_PWM_PCR, PWMPCR.value);
;;;782    
;;;783        return Successful;
;;;784    }
000ec4  e8bd8008          POP      {r3,pc}
                  |L1.3784|
000ec8  e3510001          CMP      r1,#1                 ;759
000ecc  0a000003          BEQ      |L1.3808|
000ed0  e3510000          CMP      r1,#0                 ;759
000ed4  0a000001          BEQ      |L1.3808|
000ed8  e59f03dc          LDR      r0,|L1.4796|
000edc  eafffff8          B        |L1.3780|
                  |L1.3808|
000ee0  e51f0094          LDR      r0,|L1.3668|
000ee4  e5900008          LDR      r0,[r0,#8]            ;762
000ee8  e58d0000          STR      r0,[sp,#0]            ;762
000eec  e3520000          CMP      r2,#0                 ;763
000ef0  0a000006          BEQ      |L1.3856|
000ef4  e3520001          CMP      r2,#1                 ;763
000ef8  0a00000b          BEQ      |L1.3884|
000efc  e3520002          CMP      r2,#2                 ;763
000f00  0a000011          BEQ      |L1.3916|
000f04  e3520003          CMP      r2,#3                 ;763
000f08  1a00001f          BNE      |L1.3980|
000f0c  ea000016          B        |L1.3948|
                  |L1.3856|
000f10  e1a00000          MOV      r0,r0                 ;764
000f14  e59d0000          LDR      r0,[sp,#0]            ;765
000f18  e3c00001          BIC      r0,r0,#1              ;765
000f1c  e2013001          AND      r3,r1,#1              ;765
000f20  e1800003          ORR      r0,r0,r3              ;765
000f24  e58d0000          STR      r0,[sp,#0]            ;765
000f28  ea000017          B        |L1.3980|
                  |L1.3884|
000f2c  e1a00000          MOV      r0,r0                 ;768
000f30  e59d0000          LDR      r0,[sp,#0]            ;769
000f34  e3c00c01          BIC      r0,r0,#0x100          ;769
000f38  e3a03c01          MOV      r3,#0x100             ;769
000f3c  e0033401          AND      r3,r3,r1,LSL #8       ;769
000f40  e1800003          ORR      r0,r0,r3              ;769
000f44  e58d0000          STR      r0,[sp,#0]            ;769
000f48  ea00000f          B        |L1.3980|
                  |L1.3916|
000f4c  e1a00000          MOV      r0,r0                 ;772
000f50  e59d0000          LDR      r0,[sp,#0]            ;773
000f54  e3c00a01          BIC      r0,r0,#0x1000         ;773
000f58  e3a03a01          MOV      r3,#0x1000            ;773
000f5c  e0033601          AND      r3,r3,r1,LSL #12      ;773
000f60  e1800003          ORR      r0,r0,r3              ;773
000f64  e58d0000          STR      r0,[sp,#0]            ;773
000f68  ea000007          B        |L1.3980|
                  |L1.3948|
000f6c  e1a00000          MOV      r0,r0                 ;776
000f70  e59d0000          LDR      r0,[sp,#0]            ;777
000f74  e3c00801          BIC      r0,r0,#0x10000        ;777
000f78  e3a03801          MOV      r3,#0x10000           ;777
000f7c  e0033801          AND      r3,r3,r1,LSL #16      ;777
000f80  e1800003          ORR      r0,r0,r3              ;777
000f84  e58d0000          STR      r0,[sp,#0]            ;777
000f88  e1a00000          MOV      r0,r0                 ;778
                  |L1.3980|
000f8c  e1a00000          MOV      r0,r0                 ;766
000f90  e59d0000          LDR      r0,[sp,#0]            ;781
000f94  e51f3148          LDR      r3,|L1.3668|
000f98  e5830008          STR      r0,[r3,#8]            ;781
000f9c  e3a00000          MOV      r0,#0                 ;783
000fa0  eaffffc7          B        |L1.3780|
;;;785    
                          ENDP

                  pwmStopTimer PROC
;;;518      */
;;;519    static INT pwmStopTimer(const INT nTimerIdentity, INT nMethod)
000fa4  e92d4038          PUSH     {r3-r5,lr}
;;;520    {
000fa8  e1a04000          MOV      r4,r0
000fac  e1a05001          MOV      r5,r1
;;;521        typeCNR PWMCNR;
;;;522        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
000fb0  e3540000          CMP      r4,#0
000fb4  ba000001          BLT      |L1.4032|
000fb8  e3540003          CMP      r4,#3
000fbc  da000001          BLE      |L1.4040|
                  |L1.4032|
;;;523            // Timer_num value error
;;;524            return pwmInvalidTimerChannel;
000fc0  e51f016c          LDR      r0,|L1.3676|
                  |L1.4036|
;;;525        }
;;;526        //Can't stop before open PWM timer
;;;527        if(bPWMTimerOpenStatus[nTimerIdentity] == FALSE) {
;;;528            return Successful;
;;;529        }
;;;530        // one shot mode didn't need stop procedure
;;;531        if(bPWMTimerMode[nTimerIdentity] == PWM_ONESHOT) {
;;;532            return Successful;
;;;533        }
;;;534        // Timer stop already, no need to stop again
;;;535        if(bPWMTimerStartStatus[nTimerIdentity] == FALSE) {
;;;536            return Successful;
;;;537        }
;;;538    
;;;539        // Set CNR as 0
;;;540        PWMCNR.field.cnr=0;
;;;541        outpw(REG_PWM_CNR0+(PWM_OFFSET*nTimerIdentity), PWMCNR.value);
;;;542    
;;;543        switch(nMethod) {
;;;544        case PWM_STOP_METHOD1: {
;;;545            while(1) {
;;;546                if(pwmGetPDR(nTimerIdentity) == 0) { // Wait PDR reach to 0
;;;547                    pwmSetTimerState(nTimerIdentity, PWM_DISABLE);// Disable pwm timer
;;;548                    bPWMIntFlag[nTimerIdentity]=FALSE;
;;;549                    bPWMTimerStartStatus[nTimerIdentity] = FALSE;
;;;550                    break;
;;;551                }
;;;552            }
;;;553            break;
;;;554        }
;;;555        case PWM_STOP_METHOD2: {
;;;556            while(1) {
;;;557                if(bPWMIntFlag[nTimerIdentity] == TRUE) { // Wait interrupt happen
;;;558                    pwmSetTimerState(nTimerIdentity, PWM_DISABLE);// Disable pwm timer
;;;559                    bPWMIntFlag[nTimerIdentity] = FALSE;
;;;560                    bPWMTimerStartStatus[nTimerIdentity] = FALSE;
;;;561                    break;
;;;562                }
;;;563            }
;;;564            break;
;;;565        }
;;;566        /*case PWM_STOP_METHOD3:
;;;567        {
;;;568            pwmSetPCRState(nTimerIdentity, PWM_DISABLE);// Disable pwm timer
;;;569            bPWMIntFlag[nTimerIdentity] = FALSE;
;;;570            bPWMTimerStartStatus[nTimerIdentity] = FALSE;
;;;571            break;
;;;572        }*/
;;;573        default: {
;;;574            return pwmInvalidStopMethod;// Stop method value error
;;;575        }
;;;576        }
;;;577    
;;;578        return Successful;
;;;579    }
000fc4  e8bd8038          POP      {r3-r5,pc}
                  |L1.4040|
000fc8  e51f0150          LDR      r0,|L1.3712|
000fcc  e7d00004          LDRB     r0,[r0,r4]            ;527
000fd0  e3500000          CMP      r0,#0                 ;527
000fd4  1a000001          BNE      |L1.4064|
000fd8  e3a00000          MOV      r0,#0                 ;528
000fdc  eafffff8          B        |L1.4036|
                  |L1.4064|
000fe0  e51f017c          LDR      r0,|L1.3692|
000fe4  e7d00004          LDRB     r0,[r0,r4]            ;531
000fe8  e3500000          CMP      r0,#0                 ;531
000fec  1a000001          BNE      |L1.4088|
000ff0  e3a00000          MOV      r0,#0                 ;532
000ff4  eafffff2          B        |L1.4036|
                  |L1.4088|
000ff8  e51f0174          LDR      r0,|L1.3724|
000ffc  e7d00004          LDRB     r0,[r0,r4]            ;535
001000  e3500000          CMP      r0,#0                 ;535
001004  1a000001          BNE      |L1.4112|
001008  e3a00000          MOV      r0,#0                 ;536
00100c  eaffffec          B        |L1.4036|
                  |L1.4112|
001010  e59d0000          LDR      r0,[sp,#0]            ;540
001014  e1a00820          LSR      r0,r0,#16             ;540
001018  e1a00800          LSL      r0,r0,#16             ;540
00101c  e58d0000          STR      r0,[sp,#0]            ;540
001020  e59d0000          LDR      r0,[sp,#0]            ;541
001024  e51f11d8          LDR      r1,|L1.3668|
001028  e3a0200c          MOV      r2,#0xc               ;541
00102c  e0211492          MLA      r1,r2,r4,r1           ;541
001030  e581000c          STR      r0,[r1,#0xc]          ;541
001034  e3550001          CMP      r5,#1                 ;543
001038  0a000002          BEQ      |L1.4168|
00103c  e3550002          CMP      r5,#2                 ;543
001040  1a000024          BNE      |L1.4312|
001044  ea000011          B        |L1.4240|
                  |L1.4168|
001048  e1a00000          MOV      r0,r0                 ;544
00104c  ea00000c          B        |L1.4228|
                  |L1.4176|
001050  e1a00004          MOV      r0,r4                 ;546
001054  ebfffffe          BL       pwmGetPDR
001058  e3500000          CMP      r0,#0                 ;546
00105c  1a000008          BNE      |L1.4228|
001060  e3a01000          MOV      r1,#0                 ;547
001064  e1a00004          MOV      r0,r4                 ;547
001068  ebfffffe          BL       pwmSetTimerState
00106c  e3a00000          MOV      r0,#0                 ;548
001070  e51f1220          LDR      r1,|L1.3672|
001074  e7c10004          STRB     r0,[r1,r4]            ;548
001078  e51f11f4          LDR      r1,|L1.3724|
00107c  e7c10004          STRB     r0,[r1,r4]            ;549
001080  ea000000          B        |L1.4232|
                  |L1.4228|
001084  eafffff1          B        |L1.4176|
                  |L1.4232|
001088  e1a00000          MOV      r0,r0                 ;550
00108c  ea000014          B        |L1.4324|
                  |L1.4240|
001090  e1a00000          MOV      r0,r0                 ;555
001094  ea00000c          B        |L1.4300|
                  |L1.4248|
001098  e51f0248          LDR      r0,|L1.3672|
00109c  e7d00004          LDRB     r0,[r0,r4]            ;557
0010a0  e3500001          CMP      r0,#1                 ;557
0010a4  1a000008          BNE      |L1.4300|
0010a8  e3a01000          MOV      r1,#0                 ;558
0010ac  e1a00004          MOV      r0,r4                 ;558
0010b0  ebfffffe          BL       pwmSetTimerState
0010b4  e3a00000          MOV      r0,#0                 ;559
0010b8  e51f1268          LDR      r1,|L1.3672|
0010bc  e7c10004          STRB     r0,[r1,r4]            ;559
0010c0  e51f123c          LDR      r1,|L1.3724|
0010c4  e7c10004          STRB     r0,[r1,r4]            ;560
0010c8  ea000000          B        |L1.4304|
                  |L1.4300|
0010cc  eafffff1          B        |L1.4248|
                  |L1.4304|
0010d0  e1a00000          MOV      r0,r0                 ;561
0010d4  ea000002          B        |L1.4324|
                  |L1.4312|
0010d8  e1a00000          MOV      r0,r0                 ;573
0010dc  e59f01dc          LDR      r0,|L1.4800|
0010e0  eaffffb7          B        |L1.4036|
                  |L1.4324|
0010e4  e1a00000          MOV      r0,r0                 ;553
0010e8  e3a00000          MOV      r0,#0                 ;578
0010ec  eaffffb4          B        |L1.4036|
;;;580    
                          ENDP

                  pwmStartTimer PROC
;;;496      */
;;;497    static INT pwmStartTimer(const INT nTimerIdentity)
0010f0  e92d4010          PUSH     {r4,lr}
;;;498    {
0010f4  e1a04000          MOV      r4,r0
;;;499        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
0010f8  e3540000          CMP      r4,#0
0010fc  ba000001          BLT      |L1.4360|
001100  e3540003          CMP      r4,#3
001104  da000001          BLE      |L1.4368|
                  |L1.4360|
;;;500            return pwmInvalidTimerChannel;// Timer_num value error
001108  e51f02b4          LDR      r0,|L1.3676|
                  |L1.4364|
;;;501        }
;;;502        pwmSetTimerState(nTimerIdentity, PWM_ENABLE);
;;;503        if(bPWMTimerMode[nTimerIdentity] == PWM_TOGGLE) {
;;;504            bPWMTimerStartStatus[nTimerIdentity] = TRUE;
;;;505        }
;;;506    
;;;507        return Successful;
;;;508    }
00110c  e8bd8010          POP      {r4,pc}
                  |L1.4368|
001110  e3a01001          MOV      r1,#1                 ;502
001114  e1a00004          MOV      r0,r4                 ;502
001118  ebfffffe          BL       pwmSetTimerState
00111c  e51f02b8          LDR      r0,|L1.3692|
001120  e7d00004          LDRB     r0,[r0,r4]            ;503
001124  e3500001          CMP      r0,#1                 ;503
001128  1a000002          BNE      |L1.4408|
00112c  e3a00001          MOV      r0,#1                 ;504
001130  e51f12ac          LDR      r1,|L1.3724|
001134  e7c10004          STRB     r0,[r1,r4]            ;504
                  |L1.4408|
001138  e3a00000          MOV      r0,#0                 ;507
00113c  eafffff2          B        |L1.4364|
;;;509    
                          ENDP

                  pwmIoctl PROC
;;;247      */
;;;248    INT pwmIoctl(const INT nTimerIdentity, const UINT uCommand, const UINT uIndication, UINT uValue)
001140  e92d41f0          PUSH     {r4-r8,lr}
;;;249    {
001144  e1a04000          MOV      r4,r0
001148  e1a05001          MOV      r5,r1
00114c  e1a08002          MOV      r8,r2
001150  e1a06003          MOV      r6,r3
;;;250        INT nStatus;
;;;251        if(nTimerIdentity<PWM_TIMER_MIN || nTimerIdentity>PWM_TIMER_MAX) {
001154  e3540000          CMP      r4,#0
001158  ba000001          BLT      |L1.4452|
00115c  e3540003          CMP      r4,#3
001160  da000001          BLE      |L1.4460|
                  |L1.4452|
;;;252            return pwmInvalidTimerChannel;// nTimerIdentity value error
001164  e51f0310          LDR      r0,|L1.3676|
                  |L1.4456|
;;;253        }
;;;254        if(bPWMTimerOpenStatus[nTimerIdentity] == FALSE) {
;;;255            return pwmTimerNotOpen;
;;;256        }
;;;257        switch(uCommand) {
;;;258        case START_PWMTIMER: {
;;;259            nStatus=pwmStartTimer(nTimerIdentity);
;;;260            break;
;;;261        }
;;;262        case STOP_PWMTIMER: {
;;;263            // default stop method is 2
;;;264            nStatus=pwmStopTimer(nTimerIdentity, PWM_STOP_METHOD2);
;;;265            break;
;;;266        }
;;;267        case SET_CSR: {
;;;268            nStatus=pwmSetCSR(nTimerIdentity, uValue);
;;;269            break;
;;;270        }
;;;271        case SET_CP: {
;;;272            nStatus=pwmSetCP(nTimerIdentity, uValue);
;;;273            break;
;;;274        }
;;;275        case SET_DZI: {
;;;276            nStatus=pwmSetDZI(nTimerIdentity, uValue);
;;;277            break;
;;;278        }
;;;279        case SET_INVERTER: {
;;;280            nStatus=pwmSetInverter(nTimerIdentity, uValue);
;;;281            break;
;;;282        }
;;;283        case SET_MODE: {
;;;284            nStatus=pwmSetMode(nTimerIdentity, uValue);
;;;285            break;
;;;286        }
;;;287        case ENABLE_DZ_GENERATOR: {
;;;288            nStatus=pwmSetDZGenerator(nTimerIdentity, PWM_ENABLE);
;;;289            break;
;;;290        }
;;;291        case DISABLE_DZ_GENERATOR: {
;;;292            nStatus=pwmSetDZGenerator(nTimerIdentity, PWM_DISABLE);
;;;293            break;
;;;294        }
;;;295        case ENABLE_PWMGPIOOUTPUT: {
;;;296            nStatus=pwmInitGPIO(nTimerIdentity, uValue);
;;;297            break;
;;;298        }
;;;299        default: {
;;;300            return pwmInvalidIoctlCommand;
;;;301        }
;;;302        }
;;;303        return nStatus;
;;;304    }
001168  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4460|
00116c  e51f02f4          LDR      r0,|L1.3712|
001170  e7d00004          LDRB     r0,[r0,r4]            ;254
001174  e3500000          CMP      r0,#0                 ;254
001178  1a000001          BNE      |L1.4484|
00117c  e51f02f4          LDR      r0,|L1.3728|
001180  eafffff8          B        |L1.4456|
                  |L1.4484|
001184  e355000a          CMP      r5,#0xa               ;257
001188  308ff105          ADDCC    pc,pc,r5,LSL #2       ;257
00118c  ea000044          B        |L1.4772|
001190  ea000008          B        |L1.4536|
001194  ea00000c          B        |L1.4556|
001198  ea000011          B        |L1.4580|
00119c  ea000016          B        |L1.4604|
0011a0  ea00001b          B        |L1.4628|
0011a4  ea000020          B        |L1.4652|
0011a8  ea000025          B        |L1.4676|
0011ac  ea00002a          B        |L1.4700|
0011b0  ea00002f          B        |L1.4724|
0011b4  ea000034          B        |L1.4748|
                  |L1.4536|
0011b8  e1a00000          MOV      r0,r0                 ;258
0011bc  e1a00004          MOV      r0,r4                 ;259
0011c0  ebfffffe          BL       pwmStartTimer
0011c4  e1a07000          MOV      r7,r0                 ;259
0011c8  ea000038          B        |L1.4784|
                  |L1.4556|
0011cc  e1a00000          MOV      r0,r0                 ;262
0011d0  e3a01002          MOV      r1,#2                 ;264
0011d4  e1a00004          MOV      r0,r4                 ;264
0011d8  ebfffffe          BL       pwmStopTimer
0011dc  e1a07000          MOV      r7,r0                 ;264
0011e0  ea000032          B        |L1.4784|
                  |L1.4580|
0011e4  e1a00000          MOV      r0,r0                 ;267
0011e8  e1a01006          MOV      r1,r6                 ;268
0011ec  e1a00004          MOV      r0,r4                 ;268
0011f0  ebfffffe          BL       pwmSetCSR
0011f4  e1a07000          MOV      r7,r0                 ;268
0011f8  ea00002c          B        |L1.4784|
                  |L1.4604|
0011fc  e1a00000          MOV      r0,r0                 ;271
001200  e1a01006          MOV      r1,r6                 ;272
001204  e1a00004          MOV      r0,r4                 ;272
001208  ebfffffe          BL       pwmSetCP
00120c  e1a07000          MOV      r7,r0                 ;272
001210  ea000026          B        |L1.4784|
                  |L1.4628|
001214  e1a00000          MOV      r0,r0                 ;275
001218  e1a01006          MOV      r1,r6                 ;276
00121c  e1a00004          MOV      r0,r4                 ;276
001220  ebfffffe          BL       pwmSetDZI
001224  e1a07000          MOV      r7,r0                 ;276
001228  ea000020          B        |L1.4784|
                  |L1.4652|
00122c  e1a00000          MOV      r0,r0                 ;279
001230  e1a01006          MOV      r1,r6                 ;280
001234  e1a00004          MOV      r0,r4                 ;280
001238  ebfffffe          BL       pwmSetInverter
00123c  e1a07000          MOV      r7,r0                 ;280
001240  ea00001a          B        |L1.4784|
                  |L1.4676|
001244  e1a00000          MOV      r0,r0                 ;283
001248  e1a01006          MOV      r1,r6                 ;284
00124c  e1a00004          MOV      r0,r4                 ;284
001250  ebfffffe          BL       pwmSetMode
001254  e1a07000          MOV      r7,r0                 ;284
001258  ea000014          B        |L1.4784|
                  |L1.4700|
00125c  e1a00000          MOV      r0,r0                 ;287
001260  e3a01001          MOV      r1,#1                 ;288
001264  e1a00004          MOV      r0,r4                 ;288
001268  ebfffffe          BL       pwmSetDZGenerator
00126c  e1a07000          MOV      r7,r0                 ;288
001270  ea00000e          B        |L1.4784|
                  |L1.4724|
001274  e1a00000          MOV      r0,r0                 ;291
001278  e3a01000          MOV      r1,#0                 ;292
00127c  e1a00004          MOV      r0,r4                 ;292
001280  ebfffffe          BL       pwmSetDZGenerator
001284  e1a07000          MOV      r7,r0                 ;292
001288  ea000008          B        |L1.4784|
                  |L1.4748|
00128c  e1a00000          MOV      r0,r0                 ;295
001290  e1a01006          MOV      r1,r6                 ;296
001294  e1a00004          MOV      r0,r4                 ;296
001298  ebfffffe          BL       pwmInitGPIO
00129c  e1a07000          MOV      r7,r0                 ;296
0012a0  ea000002          B        |L1.4784|
                  |L1.4772|
0012a4  e1a00000          MOV      r0,r0                 ;299
0012a8  e59f0014          LDR      r0,|L1.4804|
0012ac  eaffffad          B        |L1.4456|
                  |L1.4784|
0012b0  e1a00000          MOV      r0,r0                 ;260
0012b4  e1a00007          MOV      r0,r7                 ;303
0012b8  eaffffaa          B        |L1.4456|
;;;305    
                          ENDP

                  |L1.4796|
                          DCD      0xffff1309
                  |L1.4800|
                          DCD      0xffff1304
                  |L1.4804|
                          DCD      0xffff1303

                          AREA ||.data||, DATA, ALIGN=0

                  bPWMIRQFlag
000000  00                DCB      0x00
                  bPWMTimerOpenStatus
000001  000000            DCB      0x00,0x00,0x00
000004  00                DCB      0x00
                  bPWMTimerStartStatus
000005  000000            DCB      0x00,0x00,0x00
000008  00                DCB      0x00
                  bPWMTimerMode
000009  000000            DCB      0x00,0x00,0x00
00000c  00                DCB      0x00
                  bPWMIntFlag
00000d  000000            DCB      0x00,0x00,0x00
000010  00                DCB      0x00
