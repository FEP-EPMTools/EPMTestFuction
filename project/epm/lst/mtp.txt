; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\mtp.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mtp.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\mtp.crf ..\..\common\src\BSP\Driver\Source\mtp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MTP_Enable PROC
;;;39       */
;;;40     int  MTP_Enable(void)
000000  e3a00059          MOV      r0,#0x59
;;;41     {
;;;42         UINT32   loop;
;;;43     
;;;44         MTP->REGLCTL = 0x59;
000004  e59f2324          LDR      r2,|L1.816|
000008  e5820050          STR      r0,[r2,#0x50]
;;;45         MTP->REGLCTL = 0x16;
00000c  e3a00016          MOV      r0,#0x16
000010  e5820050          STR      r0,[r2,#0x50]
;;;46         MTP->REGLCTL = 0x88;
000014  e3a00088          MOV      r0,#0x88
000018  e5820050          STR      r0,[r2,#0x50]
;;;47         if (MTP->REGLCTL != 0x1) {
00001c  e1c20000          BIC      r0,r2,r0
000020  e5900050          LDR      r0,[r0,#0x50]
000024  e3500001          CMP      r0,#1
000028  0a000001          BEQ      |L1.52|
;;;48             mtp_dbg("MTP_Enable failed, MTP_REGLCTL was not set!\n\n");
;;;49             return MTP_RET_ERR_REG_LOCK;
00002c  e3e00003          MVN      r0,#3
                  |L1.48|
;;;50         }
;;;51     
;;;52         MTP->KEYEN |= MTP_KEYEN_KEYEN;
;;;53     
;;;54         for (loop = 0; loop < POOLING_LOOP; loop++) {
;;;55             if ((MTP->STATUS & MTP_STATUS_MTPEN) &&
;;;56                     !(MTP->STATUS & MTP_STATUS_BUSY)) {
;;;57                 if (MTP->STATUS & MTP_STATUS_NONPRG) {
;;;58                     mtp_dbg("MTP enabled, no key programmed.\n");
;;;59                     return MTP_RET_OK;
;;;60                 }
;;;61     
;;;62                 if (MTP->STATUS & MTP_STATUS_KEYVALID) {
;;;63                     mtp_dbg("MTP enabled and key valid.\n");
;;;64                     return MTP_RET_OK;
;;;65                 }
;;;66             }
;;;67         }
;;;68         mtp_dbg("MTP_Enable failed!");
;;;69         return MTP_RET_ERR_ENABLE;
;;;70     }
000030  e12fff1e          BX       lr
                  |L1.52|
000034  e59f02f4          LDR      r0,|L1.816|
000038  e5900000          LDR      r0,[r0,#0]            ;52
00003c  e3800001          ORR      r0,r0,#1              ;52
000040  e59f22e8          LDR      r2,|L1.816|
000044  e5820000          STR      r0,[r2,#0]            ;52
000048  e3a01000          MOV      r1,#0                 ;54
00004c  ea000014          B        |L1.164|
                  |L1.80|
000050  e59f02d8          LDR      r0,|L1.816|
000054  e5900040          LDR      r0,[r0,#0x40]         ;55
000058  e3100001          TST      r0,#1                 ;55
00005c  0a00000f          BEQ      |L1.160|
000060  e59f02c8          LDR      r0,|L1.816|
000064  e5900040          LDR      r0,[r0,#0x40]         ;56
000068  e3100401          TST      r0,#0x1000000         ;56
00006c  1a00000b          BNE      |L1.160|
000070  e59f02b8          LDR      r0,|L1.816|
000074  e5900040          LDR      r0,[r0,#0x40]         ;57
000078  e3100004          TST      r0,#4                 ;57
00007c  0a000001          BEQ      |L1.136|
000080  e3a00000          MOV      r0,#0                 ;59
000084  eaffffe9          B        |L1.48|
                  |L1.136|
000088  e59f02a0          LDR      r0,|L1.816|
00008c  e5900040          LDR      r0,[r0,#0x40]         ;62
000090  e3100002          TST      r0,#2                 ;62
000094  0a000001          BEQ      |L1.160|
000098  e3a00000          MOV      r0,#0                 ;64
00009c  eaffffe3          B        |L1.48|
                  |L1.160|
0000a0  e2811001          ADD      r1,r1,#1              ;54
                  |L1.164|
0000a4  e3510601          CMP      r1,#0x100000          ;54
0000a8  3affffe8          BCC      |L1.80|
0000ac  e3e00000          MVN      r0,#0                 ;69
0000b0  eaffffde          B        |L1.48|
;;;71     
                          ENDP

                  MTP_Program PROC
;;;85       */
;;;86     int MTP_Program(UINT32 key[8], UINT8 option)
0000b4  e92d4070          PUSH     {r4-r6,lr}
;;;87     {
0000b8  e1a05000          MOV      r5,r0
0000bc  e1a06001          MOV      r6,r1
;;;88         int  i, loop;
;;;89     
;;;90         if (MTP_Enable() != MTP_RET_OK)
0000c0  ebfffffe          BL       MTP_Enable
0000c4  e3500000          CMP      r0,#0
0000c8  0a000001          BEQ      |L1.212|
;;;91             return MTP_RET_ERR_ENABLE;
0000cc  e3e00000          MVN      r0,#0
                  |L1.208|
;;;92     
;;;93         if (MTP_KEY_PROG_COUNT == 15)
;;;94             return MTP_RET_ERR_PRG_CNT;
;;;95     
;;;96         if (MTP->STATUS & MTP_STATUS_LOCKED)
;;;97             return MTP_RET_ERR_LOCK;
;;;98     
;;;99         MTP->CTL |= (MTP->CTL & MTP_CTL_MODE_MASK) | MTP_CLT_MODE_PROG;
;;;100        MTP->PCYCLE = 0x60AE * 2;
;;;101        for (i = 0; i < 8; i++)
;;;102            MTP->KEY[i] = key[i];
;;;103    
;;;104        MTP->USERDATA = option;
;;;105    
;;;106        MTP->PSTART = MTP_PSTART_PSTART;
;;;107    
;;;108        for (loop = 0; loop < POOLING_LOOP; loop++) {
;;;109            if (MTP->PSTART == 0)
;;;110                break;
;;;111        }
;;;112        if (loop >= POOLING_LOOP) {
;;;113            mtp_dbg("MTP_PSTART not cleared!\n");
;;;114            return MTP_RET_ERR_PRG_FAIL;
;;;115        }
;;;116    
;;;117        if (MTP->STATUS & MTP_STATUS_PRGFAIL) {
;;;118            mtp_dbg("MTP key program failed!\n");
;;;119            return MTP_RET_ERR_PRG_FAIL;
;;;120        }
;;;121    
;;;122        MTP_Enable();
;;;123    
;;;124        mtp_dbg("MPT key program OK, COUNT = %d\n", MTP_KEY_PROG_COUNT);
;;;125    
;;;126        return MTP_RET_OK;
;;;127    }
0000d0  e8bd8070          POP      {r4-r6,pc}
                  |L1.212|
0000d4  e59f0254          LDR      r0,|L1.816|
0000d8  e5900040          LDR      r0,[r0,#0x40]         ;93
0000dc  e3a0100f          MOV      r1,#0xf               ;93
0000e0  e0010820          AND      r0,r1,r0,LSR #16      ;93
0000e4  e350000f          CMP      r0,#0xf               ;93
0000e8  1a000001          BNE      |L1.244|
0000ec  e3e00001          MVN      r0,#1                 ;94
0000f0  eafffff6          B        |L1.208|
                  |L1.244|
0000f4  e59f0234          LDR      r0,|L1.816|
0000f8  e5900040          LDR      r0,[r0,#0x40]         ;96
0000fc  e3100008          TST      r0,#8                 ;96
000100  0a000001          BEQ      |L1.268|
000104  e3e00002          MVN      r0,#2                 ;97
000108  eafffff0          B        |L1.208|
                  |L1.268|
00010c  e59f021c          LDR      r0,|L1.816|
000110  e5900034          LDR      r0,[r0,#0x34]         ;99
000114  e59f1214          LDR      r1,|L1.816|
000118  e5911034          LDR      r1,[r1,#0x34]         ;99
00011c  e2011003          AND      r1,r1,#3              ;99
000120  e3811002          ORR      r1,r1,#2              ;99
000124  e1800001          ORR      r0,r0,r1              ;99
000128  e59f1200          LDR      r1,|L1.816|
00012c  e5810034          STR      r0,[r1,#0x34]         ;99
000130  e59f01fc          LDR      r0,|L1.820|
000134  e5810030          STR      r0,[r1,#0x30]         ;100
000138  e3a03000          MOV      r3,#0                 ;101
00013c  ea000003          B        |L1.336|
                  |L1.320|
000140  e7950103          LDR      r0,[r5,r3,LSL #2]     ;102
000144  e59f11ec          LDR      r1,|L1.824|
000148  e7810103          STR      r0,[r1,r3,LSL #2]     ;102
00014c  e2833001          ADD      r3,r3,#1              ;101
                  |L1.336|
000150  e3530008          CMP      r3,#8                 ;101
000154  bafffff9          BLT      |L1.320|
000158  e59f01d0          LDR      r0,|L1.816|
00015c  e580600c          STR      r6,[r0,#0xc]          ;104
000160  e3a00001          MOV      r0,#1                 ;106
000164  e59f11c4          LDR      r1,|L1.816|
000168  e5810038          STR      r0,[r1,#0x38]         ;106
00016c  e3a04000          MOV      r4,#0                 ;108
000170  ea000005          B        |L1.396|
                  |L1.372|
000174  e59f01b4          LDR      r0,|L1.816|
000178  e5900038          LDR      r0,[r0,#0x38]         ;109
00017c  e3500000          CMP      r0,#0                 ;109
000180  1a000000          BNE      |L1.392|
000184  ea000002          B        |L1.404|
                  |L1.392|
000188  e2844001          ADD      r4,r4,#1              ;108
                  |L1.396|
00018c  e3540601          CMP      r4,#0x100000          ;108
000190  bafffff7          BLT      |L1.372|
                  |L1.404|
000194  e1a00000          MOV      r0,r0                 ;110
000198  e3540601          CMP      r4,#0x100000          ;112
00019c  ba000001          BLT      |L1.424|
0001a0  e3e00004          MVN      r0,#4                 ;114
0001a4  eaffffc9          B        |L1.208|
                  |L1.424|
0001a8  e59f0180          LDR      r0,|L1.816|
0001ac  e5900040          LDR      r0,[r0,#0x40]         ;117
0001b0  e3100010          TST      r0,#0x10              ;117
0001b4  0a000001          BEQ      |L1.448|
0001b8  e3e00004          MVN      r0,#4                 ;119
0001bc  eaffffc3          B        |L1.208|
                  |L1.448|
0001c0  ebfffffe          BL       MTP_Enable
0001c4  e3a00000          MOV      r0,#0                 ;126
0001c8  eaffffc0          B        |L1.208|
;;;128    
                          ENDP

                  MTP_Lock PROC
;;;138      */
;;;139    int MTP_Lock(void)
0001cc  e52de004          PUSH     {lr}
;;;140    {
;;;141        int  loop;
;;;142    
;;;143        if (MTP_Enable() != MTP_RET_OK)
0001d0  ebfffffe          BL       MTP_Enable
0001d4  e3500000          CMP      r0,#0
0001d8  0a000001          BEQ      |L1.484|
;;;144            return MTP_RET_ERR_ENABLE;
0001dc  e3e00000          MVN      r0,#0
                  |L1.480|
;;;145    
;;;146        if (MTP->STATUS & MTP_STATUS_NONPRG) {
;;;147            mtp_dbg("No key in MTP.\n");
;;;148            return MTP_RET_ERR_NO_KEY;
;;;149        }
;;;150    
;;;151        MTP->CTL |= (MTP->CTL & MTP_CTL_MODE_MASK) | MTP_CTL_MODE_LOCK;
;;;152        MTP->PCYCLE = 0x60AE * 2;
;;;153    
;;;154        MTP->PSTART = MTP_PSTART_PSTART;
;;;155    
;;;156        for (loop = 0; loop < POOLING_LOOP; loop++) {
;;;157            if (MTP->PSTART == 0)
;;;158                break;
;;;159        }
;;;160        if (loop >= POOLING_LOOP) {
;;;161            mtp_dbg("Failed to lock MTP key!\n");
;;;162            return MTP_RET_ERR_LOCK;
;;;163        }
;;;164    
;;;165        if (MTP_Enable() != MTP_RET_OK)
;;;166            return MTP_RET_ERR_ENABLE;
;;;167    
;;;168        if ((MTP->STATUS & (MTP_STATUS_MTPEN | MTP_STATUS_KEYVALID | MTP_STATUS_LOCKED)) !=
;;;169                (MTP_STATUS_MTPEN | MTP_STATUS_KEYVALID | MTP_STATUS_LOCKED)) {
;;;170            mtp_dbg("MTP lock failed!\n");
;;;171            return MTP_RET_ERR_LOCK;
;;;172        }
;;;173    
;;;174        return MTP_RET_OK;
;;;175    }
0001e0  e49df004          POP      {pc}
                  |L1.484|
0001e4  e59f0144          LDR      r0,|L1.816|
0001e8  e5900040          LDR      r0,[r0,#0x40]         ;146
0001ec  e3100004          TST      r0,#4                 ;146
0001f0  0a000001          BEQ      |L1.508|
0001f4  e3e00005          MVN      r0,#5                 ;148
0001f8  eafffff8          B        |L1.480|
                  |L1.508|
0001fc  e59f012c          LDR      r0,|L1.816|
000200  e5900034          LDR      r0,[r0,#0x34]         ;151
000204  e59f1124          LDR      r1,|L1.816|
000208  e5911034          LDR      r1,[r1,#0x34]         ;151
00020c  e3800003          ORR      r0,r0,#3              ;151
000210  e59f1118          LDR      r1,|L1.816|
000214  e5810034          STR      r0,[r1,#0x34]         ;151
000218  e59f0114          LDR      r0,|L1.820|
00021c  e5810030          STR      r0,[r1,#0x30]         ;152
000220  e3a00001          MOV      r0,#1                 ;154
000224  e5810038          STR      r0,[r1,#0x38]         ;154
000228  e3a03000          MOV      r3,#0                 ;156
00022c  ea000005          B        |L1.584|
                  |L1.560|
000230  e59f00f8          LDR      r0,|L1.816|
000234  e5900038          LDR      r0,[r0,#0x38]         ;157
000238  e3500000          CMP      r0,#0                 ;157
00023c  1a000000          BNE      |L1.580|
000240  ea000002          B        |L1.592|
                  |L1.580|
000244  e2833001          ADD      r3,r3,#1              ;156
                  |L1.584|
000248  e3530601          CMP      r3,#0x100000          ;156
00024c  bafffff7          BLT      |L1.560|
                  |L1.592|
000250  e1a00000          MOV      r0,r0                 ;158
000254  e3530601          CMP      r3,#0x100000          ;160
000258  ba000001          BLT      |L1.612|
00025c  e3e00002          MVN      r0,#2                 ;162
000260  eaffffde          B        |L1.480|
                  |L1.612|
000264  ebfffffe          BL       MTP_Enable
000268  e3500000          CMP      r0,#0                 ;165
00026c  0a000001          BEQ      |L1.632|
000270  e3e00000          MVN      r0,#0                 ;166
000274  eaffffd9          B        |L1.480|
                  |L1.632|
000278  e59f00b0          LDR      r0,|L1.816|
00027c  e5900040          LDR      r0,[r0,#0x40]         ;168
000280  e200000b          AND      r0,r0,#0xb            ;168
000284  e350000b          CMP      r0,#0xb               ;168
000288  0a000001          BEQ      |L1.660|
00028c  e3e00002          MVN      r0,#2                 ;171
000290  eaffffd2          B        |L1.480|
                  |L1.660|
000294  e3a00000          MOV      r0,#0                 ;174
000298  eaffffd0          B        |L1.480|
;;;176    
                          ENDP

                  MTP_IsKeyLocked PROC
;;;185      */
;;;186    int MTP_IsKeyLocked(void)
00029c  e52de004          PUSH     {lr}
;;;187    {
;;;188        if (MTP_Enable() != MTP_RET_OK)
0002a0  ebfffffe          BL       MTP_Enable
0002a4  e3500000          CMP      r0,#0
0002a8  0a000001          BEQ      |L1.692|
;;;189            return MTP_RET_ERR_ENABLE;
0002ac  e3e00000          MVN      r0,#0
                  |L1.688|
;;;190    
;;;191        if (MTP->STATUS & MTP_STATUS_LOCKED)
;;;192            return 1;
;;;193    
;;;194        return 0;
;;;195    }
0002b0  e49df004          POP      {pc}
                  |L1.692|
0002b4  e59f0074          LDR      r0,|L1.816|
0002b8  e5900040          LDR      r0,[r0,#0x40]         ;191
0002bc  e3100008          TST      r0,#8                 ;191
0002c0  0a000001          BEQ      |L1.716|
0002c4  e3a00001          MOV      r0,#1                 ;192
0002c8  eafffff8          B        |L1.688|
                  |L1.716|
0002cc  e3a00000          MOV      r0,#0                 ;194
0002d0  eafffff6          B        |L1.688|
;;;196    
                          ENDP

                  MTP_GetPrgCount PROC
;;;205      */
;;;206    int MTP_GetPrgCount(void)
0002d4  e52de004          PUSH     {lr}
;;;207    {
;;;208        if (MTP_Enable() != MTP_RET_OK)
0002d8  ebfffffe          BL       MTP_Enable
0002dc  e3500000          CMP      r0,#0
0002e0  0a000001          BEQ      |L1.748|
;;;209            return MTP_RET_ERR_ENABLE;
0002e4  e3e00000          MVN      r0,#0
                  |L1.744|
;;;210    
;;;211        return MTP_KEY_PROG_COUNT;
;;;212    }
0002e8  e49df004          POP      {pc}
                  |L1.748|
0002ec  e59f003c          LDR      r0,|L1.816|
0002f0  e5900040          LDR      r0,[r0,#0x40]         ;211
0002f4  e3a0100f          MOV      r1,#0xf               ;211
0002f8  e0010820          AND      r0,r1,r0,LSR #16      ;211
0002fc  eafffff9          B        |L1.744|
;;;213    
                          ENDP

                  MTP_GetUserData PROC
;;;223      */
;;;224    int MTP_GetUserData(UINT8 *usr_data)
000300  e52de004          PUSH     {lr}
;;;225    {
000304  e1a03000          MOV      r3,r0
;;;226        if (MTP_Enable() != MTP_RET_OK)
000308  ebfffffe          BL       MTP_Enable
00030c  e3500000          CMP      r0,#0
000310  0a000001          BEQ      |L1.796|
;;;227            return MTP_RET_ERR_ENABLE;
000314  e3e00000          MVN      r0,#0
                  |L1.792|
;;;228    
;;;229        *usr_data = MTP->USERDATA;
;;;230    
;;;231        return MTP_RET_OK;
;;;232    }
000318  e49df004          POP      {pc}
                  |L1.796|
00031c  e59f000c          LDR      r0,|L1.816|
000320  e590000c          LDR      r0,[r0,#0xc]          ;229
000324  e5c30000          STRB     r0,[r3,#0]            ;229
000328  e3a00000          MOV      r0,#0                 ;231
00032c  eafffff9          B        |L1.792|
;;;233    
                          ENDP

                  |L1.816|
                          DCD      0xb800c000
                  |L1.820|
                          DCD      0x0000c15c
                  |L1.824|
                          DCD      0xb800c010
