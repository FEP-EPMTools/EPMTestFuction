; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\support.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\support.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\support.crf ..\..\common\src\BSP\Library\USB_HOST\src_core\support.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USB_InitializeMemoryPool PROC
;;;49     
;;;50     void  USB_InitializeMemoryPool()
000000  e92d4010          PUSH     {r4,lr}
;;;51     {
;;;52         _MemoryPoolBase = (UINT32)&_USBMemoryPool[0] | NON_CACHE_MASK;
000004  e59f03e4          LDR      r0,|L1.1008|
000008  e3800102          ORR      r0,r0,#0x80000000
00000c  e59f13e0          LDR      r1,|L1.1012|
000010  e5810000          STR      r0,[r1,#0]  ; _MemoryPoolBase
;;;53         _MemoryPoolEnd = _MemoryPoolBase + USB_MEMORY_POOL_SIZE;
000014  e2810000          ADD      r0,r1,#0
000018  e5900000          LDR      r0,[r0,#0]  ; _MemoryPoolBase
00001c  e2800902          ADD      r0,r0,#0x8000
000020  e59f13d0          LDR      r1,|L1.1016|
000024  e5810000          STR      r0,[r1,#0]  ; _MemoryPoolEnd
;;;54         _FreeMemorySize = _MemoryPoolEnd - _MemoryPoolBase;
000028  e2810000          ADD      r0,r1,#0
00002c  e5900000          LDR      r0,[r0,#0]  ; _MemoryPoolEnd
000030  e59f13bc          LDR      r1,|L1.1012|
000034  e5911000          LDR      r1,[r1,#0]  ; _MemoryPoolBase
000038  e0400001          SUB      r0,r0,r1
00003c  e59f13b8          LDR      r1,|L1.1020|
000040  e5810000          STR      r0,[r1,#0]  ; _FreeMemorySize
;;;55         _AllocatedMemorySize = 0;
000044  e3a00000          MOV      r0,#0
000048  e59f13b0          LDR      r1,|L1.1024|
00004c  e5810000          STR      r0,[r1,#0]  ; _AllocatedMemorySize
;;;56         _pCurrent = (USB_MHDR_T *)_MemoryPoolBase;
000050  e59f039c          LDR      r0,|L1.1012|
000054  e5900000          LDR      r0,[r0,#0]  ; _MemoryPoolBase
000058  e59f13a4          LDR      r1,|L1.1028|
00005c  e5810000          STR      r0,[r1,#0]  ; _pCurrent
;;;57         memset((char *)_MemoryPoolBase, 0, _FreeMemorySize);
000060  e59f0394          LDR      r0,|L1.1020|
000064  e5901000          LDR      r1,[r0,#0]  ; _FreeMemorySize
000068  e59f0384          LDR      r0,|L1.1012|
00006c  e5900000          LDR      r0,[r0,#0]  ; _MemoryPoolBase
000070  ebfffffe          BL       __aeabi_memclr
;;;58     }
000074  e8bd8010          POP      {r4,pc}
;;;59     
                          ENDP

                  USB_available_memory PROC
;;;60     
;;;61     int  USB_available_memory()
000078  e59f037c          LDR      r0,|L1.1020|
;;;62     {
;;;63         return _FreeMemorySize;
00007c  e5900000          LDR      r0,[r0,#0]  ; _FreeMemorySize
;;;64     }
000080  e12fff1e          BX       lr
;;;65     
                          ENDP

                  USB_allocated_memory PROC
;;;66     
;;;67     int  USB_allocated_memory()
000084  e59f0374          LDR      r0,|L1.1024|
;;;68     {
;;;69         return _AllocatedMemorySize;
000088  e5900000          LDR      r0,[r0,#0]  ; _AllocatedMemorySize
;;;70     }
00008c  e12fff1e          BX       lr
;;;71     
                          ENDP

                  USB_malloc PROC
;;;72     
;;;73     void  *USB_malloc(INT wanted_size, INT boundary)
000090  e92d5fff          PUSH     {r0-r12,lr}
;;;74     {
000094  e1a08000          MOV      r8,r0
000098  e1a09001          MOV      r9,r1
;;;75         USB_MHDR_T  *pPrimitivePos = _pCurrent;
00009c  e59f0360          LDR      r0,|L1.1028|
0000a0  e5900000          LDR      r0,[r0,#0]  ; _pCurrent
0000a4  e58d000c          STR      r0,[sp,#0xc]
;;;76         USB_MHDR_T  *pFound;
;;;77         INT   found_size=-1;
0000a8  e3e0a000          MVN      r10,#0
;;;78         INT   i, block_count;
;;;79         INT   wrap = 0;
0000ac  e3a00000          MOV      r0,#0
0000b0  e58d0008          STR      r0,[sp,#8]
;;;80         int   disable_ohci_irq, disable_ehci_irq;
;;;81     
;;;82         if (IS_OHCI_IRQ_ENABLED())
0000b4  e59f034c          LDR      r0,|L1.1032|
0000b8  e5900128          LDR      r0,[r0,#0x128]
0000bc  e3a01001          MOV      r1,#1
0000c0  e1110c20          TST      r1,r0,LSR #24
0000c4  0a000001          BEQ      |L1.208|
;;;83             disable_ohci_irq = 1;
0000c8  e3a04001          MOV      r4,#1
0000cc  ea000000          B        |L1.212|
                  |L1.208|
;;;84         else
;;;85             disable_ohci_irq = 0;
0000d0  e3a04000          MOV      r4,#0
                  |L1.212|
;;;86     
;;;87         if (IS_EHCI_IRQ_ENABLED())
0000d4  e59f032c          LDR      r0,|L1.1032|
0000d8  e5900128          LDR      r0,[r0,#0x128]
0000dc  e3a01001          MOV      r1,#1
0000e0  e1110ba0          TST      r1,r0,LSR #23
0000e4  0a000001          BEQ      |L1.240|
;;;88             disable_ehci_irq = 1;
0000e8  e3a05001          MOV      r5,#1
0000ec  ea000000          B        |L1.244|
                  |L1.240|
;;;89         else
;;;90             disable_ehci_irq = 0;
0000f0  e3a05000          MOV      r5,#0
                  |L1.244|
;;;91     
;;;92         if (disable_ohci_irq)
0000f4  e3540000          CMP      r4,#0
0000f8  0a000001          BEQ      |L1.260|
;;;93             DISABLE_OHCI_IRQ();
0000fc  e3a00018          MOV      r0,#0x18
000100  ebfffffe          BL       sysDisableInterrupt
                  |L1.260|
;;;94         if (disable_ehci_irq)
000104  e3550000          CMP      r5,#0
000108  0a000001          BEQ      |L1.276|
;;;95             DISABLE_EHCI_IRQ();
00010c  e3a00017          MOV      r0,#0x17
000110  ebfffffe          BL       sysDisableInterrupt
                  |L1.276|
;;;96     
;;;97         if (wanted_size >= _FreeMemorySize)
000114  e59f02e0          LDR      r0,|L1.1020|
000118  e5900000          LDR      r0,[r0,#0]  ; _FreeMemorySize
00011c  e1580000          CMP      r8,r0
000120  3a00000f          BCC      |L1.356|
;;;98         {
;;;99             sysprintf("USB_malloc - want=%d, free=%d\n", wanted_size, _FreeMemorySize);
000124  e59f02d0          LDR      r0,|L1.1020|
000128  e1a01008          MOV      r1,r8
00012c  e5902000          LDR      r2,[r0,#0]  ; _FreeMemorySize
000130  e28f0fb5          ADR      r0,|L1.1036|
000134  ebfffffe          BL       sysprintf
;;;100            if (disable_ohci_irq)
000138  e3540000          CMP      r4,#0
00013c  0a000001          BEQ      |L1.328|
;;;101                ENABLE_OHCI_IRQ();
000140  e3a00018          MOV      r0,#0x18
000144  ebfffffe          BL       sysEnableInterrupt
                  |L1.328|
;;;102            if (disable_ehci_irq)
000148  e3550000          CMP      r5,#0
00014c  0a000001          BEQ      |L1.344|
;;;103                ENABLE_EHCI_IRQ();
000150  e3a00017          MOV      r0,#0x17
000154  ebfffffe          BL       sysEnableInterrupt
                  |L1.344|
;;;104            return NULL;
000158  e3a00000          MOV      r0,#0
                  |L1.348|
00015c  e28dd010          ADD      sp,sp,#0x10
;;;105        }
;;;106    
;;;107        if ((UINT32)_pCurrent >= _MemoryPoolEnd)
;;;108            _pCurrent = (USB_MHDR_T *)_MemoryPoolBase;   /* wrapped */
;;;109    
;;;110        do
;;;111        {
;;;112            if (_pCurrent->flag)          /* is not a free block */
;;;113            {
;;;114                if (_pCurrent->magic != USB_MEM_ALLOC_MAGIC)
;;;115                {
;;;116                    sysprintf("\nUSB_malloc - incorrect magic number! C:%x F:%x, wanted:%d, Base:0x%x, End:0x%x\n", (UINT32)_pCurrent, _FreeMemorySize, wanted_size, (UINT32)_MemoryPoolBase, (UINT32)_MemoryPoolEnd);
;;;117                    if (disable_ohci_irq)
;;;118                        ENABLE_OHCI_IRQ();
;;;119                    if (disable_ehci_irq)
;;;120                        ENABLE_EHCI_IRQ();
;;;121                    return NULL;
;;;122                }
;;;123    
;;;124                if (_pCurrent->flag == 0x3)
;;;125                    _pCurrent = (USB_MHDR_T *)((UINT32)_pCurrent + _pCurrent->bcnt * USB_MEM_BLOCK_SIZE);
;;;126                else
;;;127                {
;;;128                    sysprintf("USB_malloc warning - not the first block!\n");
;;;129                    _pCurrent = (USB_MHDR_T *)((UINT32)_pCurrent + USB_MEM_BLOCK_SIZE);
;;;130                }
;;;131    
;;;132                if ((UINT32)_pCurrent > _MemoryPoolEnd)
;;;133                    sysprintf("USB_malloc - behind limit!!\n");
;;;134    
;;;135                if ((UINT32)_pCurrent == _MemoryPoolEnd)
;;;136                {
;;;137                    //sysprintf("USB_alloc - warp!!\n");
;;;138                    wrap = 1;
;;;139                    _pCurrent = (USB_MHDR_T *)_MemoryPoolBase;   /* wrapped */
;;;140                }
;;;141    
;;;142                found_size = -1;          /* reset the accumlator */
;;;143            }
;;;144            else                         /* is a free block */
;;;145            {
;;;146                if (found_size == -1)     /* the leading block */
;;;147                {
;;;148                    pFound = _pCurrent;
;;;149                    block_count = 1;
;;;150    
;;;151                    if (boundary > BOUNDARY_WORD)
;;;152                        found_size = 0;    /* not use the data area of the leading block */
;;;153                    else
;;;154                        found_size = USB_MEM_BLOCK_SIZE - sizeof(USB_MHDR_T);
;;;155    
;;;156                    /* check boundary -
;;;157                     * If boundary > BOUNDARY_WORD, the start of next block should
;;;158                     * be the beginning address of allocated memory. Thus, we check
;;;159                     * the boundary of the next block. The leading block will be
;;;160                     * used as a header only.
;;;161                     */
;;;162                    if ((boundary > BOUNDARY_WORD) &&
;;;163                            ((((UINT32)_pCurrent)+USB_MEM_BLOCK_SIZE >= _MemoryPoolEnd) ||
;;;164                             ((((UINT32)_pCurrent)+USB_MEM_BLOCK_SIZE) % boundary != 0)))
;;;165                        found_size = -1;   /* violate boundary, reset the accumlator */
;;;166                }
;;;167                else                      /* not the leading block */
;;;168                {
;;;169                    found_size += USB_MEM_BLOCK_SIZE;
;;;170                    block_count++;
;;;171                }
;;;172    
;;;173                if (found_size >= wanted_size)
;;;174                {
;;;175                    pFound->bcnt = block_count;
;;;176                    pFound->magic = USB_MEM_ALLOC_MAGIC;
;;;177                    _FreeMemorySize -= block_count * USB_MEM_BLOCK_SIZE;
;;;178                    _AllocatedMemorySize += block_count * USB_MEM_BLOCK_SIZE;
;;;179                    _pCurrent = pFound;
;;;180                    for (i=0; i<block_count; i++)
;;;181                    {
;;;182                        _pCurrent->flag = 1;     /* allocate block */
;;;183                        _pCurrent = (USB_MHDR_T *)((UINT32)_pCurrent + USB_MEM_BLOCK_SIZE);
;;;184                    }
;;;185                    pFound->flag = 0x3;
;;;186    
;;;187                    if (boundary > BOUNDARY_WORD)
;;;188                    {
;;;189                        if (disable_ohci_irq)
;;;190                            ENABLE_OHCI_IRQ();
;;;191                        if (disable_ehci_irq)
;;;192                            ENABLE_EHCI_IRQ();
;;;193                        //sysprintf("- 0x%x, %d\n", (int)pFound, wanted_size);
;;;194                        return (void *)((UINT32)pFound + USB_MEM_BLOCK_SIZE);
;;;195                    }
;;;196                    else
;;;197                    {
;;;198                        //USB_debug("USB_malloc(%d,%d):%x\tsize:%d, C:0x%x, %d\n", wanted_size, boundary, (UINT32)pFound + sizeof(USB_MHDR_T), block_count * USB_MEM_BLOCK_SIZE, _pCurrent, block_count);
;;;199                        if (disable_ohci_irq)
;;;200                            ENABLE_OHCI_IRQ();
;;;201                        if (disable_ehci_irq)
;;;202                            ENABLE_EHCI_IRQ();
;;;203                        //sysprintf("- 0x%x, %d\n", (int)pFound, wanted_size);
;;;204                        return (void *)((UINT32)pFound + sizeof(USB_MHDR_T));
;;;205                    }
;;;206                }
;;;207    
;;;208                /* advance to the next block */
;;;209                _pCurrent = (USB_MHDR_T *)((UINT32)_pCurrent + USB_MEM_BLOCK_SIZE);
;;;210                if ((UINT32)_pCurrent >= _MemoryPoolEnd)
;;;211                {
;;;212                    wrap = 1;
;;;213                    _pCurrent = (USB_MHDR_T *)_MemoryPoolBase;   /* wrapped */
;;;214                    found_size = -1;     /* reset accumlator */
;;;215                }
;;;216            }
;;;217        }
;;;218        while ((wrap == 0) || (_pCurrent < pPrimitivePos));
;;;219    
;;;220        sysprintf("USB_malloc - No free memory!\n");
;;;221        if (disable_ohci_irq)
;;;222            ENABLE_OHCI_IRQ();
;;;223        if (disable_ehci_irq)
;;;224            ENABLE_EHCI_IRQ();
;;;225        return NULL;
;;;226    }
000160  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.356|
000164  e59f0298          LDR      r0,|L1.1028|
000168  e5900000          LDR      r0,[r0,#0]            ;107  ; _pCurrent
00016c  e59f1284          LDR      r1,|L1.1016|
000170  e5911000          LDR      r1,[r1,#0]            ;107  ; _MemoryPoolEnd
000174  e1500001          CMP      r0,r1                 ;107
000178  3a000003          BCC      |L1.396|
00017c  e59f0270          LDR      r0,|L1.1012|
000180  e5900000          LDR      r0,[r0,#0]            ;108  ; _MemoryPoolBase
000184  e59f1278          LDR      r1,|L1.1028|
000188  e5810000          STR      r0,[r1,#0]            ;108  ; _pCurrent
                  |L1.396|
00018c  e1a00000          MOV      r0,r0                 ;110
                  |L1.400|
000190  e59f026c          LDR      r0,|L1.1028|
000194  e5900000          LDR      r0,[r0,#0]            ;112  ; _pCurrent
000198  e5900000          LDR      r0,[r0,#0]            ;112
00019c  e3500000          CMP      r0,#0                 ;112
0001a0  0a000047          BEQ      |L1.708|
0001a4  e59f0258          LDR      r0,|L1.1028|
0001a8  e5900000          LDR      r0,[r0,#0]            ;114  ; _pCurrent
0001ac  e5900008          LDR      r0,[r0,#8]            ;114
0001b0  e59f1274          LDR      r1,|L1.1068|
0001b4  e1500001          CMP      r0,r1                 ;114
0001b8  0a000016          BEQ      |L1.536|
0001bc  e59f0234          LDR      r0,|L1.1016|
0001c0  e5900000          LDR      r0,[r0,#0]            ;116  ; _MemoryPoolEnd
0001c4  e59f1228          LDR      r1,|L1.1012|
0001c8  e5911000          LDR      r1,[r1,#0]            ;116  ; _MemoryPoolBase
0001cc  e1a03008          MOV      r3,r8                 ;116
0001d0  e58d0004          STR      r0,[sp,#4]            ;116
0001d4  e59f0220          LDR      r0,|L1.1020|
0001d8  e58d1000          STR      r1,[sp,#0]            ;116
0001dc  e5902000          LDR      r2,[r0,#0]            ;116  ; _FreeMemorySize
0001e0  e59f021c          LDR      r0,|L1.1028|
0001e4  e5901000          LDR      r1,[r0,#0]            ;116  ; _pCurrent
0001e8  e59f0240          LDR      r0,|L1.1072|
0001ec  ebfffffe          BL       sysprintf
0001f0  e3540000          CMP      r4,#0                 ;117
0001f4  0a000001          BEQ      |L1.512|
0001f8  e3a00018          MOV      r0,#0x18              ;118
0001fc  ebfffffe          BL       sysEnableInterrupt
                  |L1.512|
000200  e3550000          CMP      r5,#0                 ;119
000204  0a000001          BEQ      |L1.528|
000208  e3a00017          MOV      r0,#0x17              ;120
00020c  ebfffffe          BL       sysEnableInterrupt
                  |L1.528|
000210  e3a00000          MOV      r0,#0                 ;121
000214  eaffffd0          B        |L1.348|
                  |L1.536|
000218  e59f01e4          LDR      r0,|L1.1028|
00021c  e5900000          LDR      r0,[r0,#0]            ;124  ; _pCurrent
000220  e5900000          LDR      r0,[r0,#0]            ;124
000224  e3500003          CMP      r0,#3                 ;124
000228  1a000008          BNE      |L1.592|
00022c  e59f01d0          LDR      r0,|L1.1028|
000230  e5900000          LDR      r0,[r0,#0]            ;125  ; _pCurrent
000234  e5900004          LDR      r0,[r0,#4]            ;125
000238  e59f11c4          LDR      r1,|L1.1028|
00023c  e5911000          LDR      r1,[r1,#0]            ;125  ; _pCurrent
000240  e0810380          ADD      r0,r1,r0,LSL #7       ;125
000244  e59f11b8          LDR      r1,|L1.1028|
000248  e5810000          STR      r0,[r1,#0]            ;125  ; _pCurrent
00024c  ea000006          B        |L1.620|
                  |L1.592|
000250  e28f0f77          ADR      r0,|L1.1076|
000254  ebfffffe          BL       sysprintf
000258  e59f01a4          LDR      r0,|L1.1028|
00025c  e5900000          LDR      r0,[r0,#0]            ;129  ; _pCurrent
000260  e2800080          ADD      r0,r0,#0x80           ;129
000264  e59f1198          LDR      r1,|L1.1028|
000268  e5810000          STR      r0,[r1,#0]            ;129  ; _pCurrent
                  |L1.620|
00026c  e59f0190          LDR      r0,|L1.1028|
000270  e5900000          LDR      r0,[r0,#0]            ;132  ; _pCurrent
000274  e59f117c          LDR      r1,|L1.1016|
000278  e5911000          LDR      r1,[r1,#0]            ;132  ; _MemoryPoolEnd
00027c  e1500001          CMP      r0,r1                 ;132
000280  9a000001          BLS      |L1.652|
000284  e28f0f75          ADR      r0,|L1.1120|
000288  ebfffffe          BL       sysprintf
                  |L1.652|
00028c  e59f0170          LDR      r0,|L1.1028|
000290  e5900000          LDR      r0,[r0,#0]            ;135  ; _pCurrent
000294  e59f115c          LDR      r1,|L1.1016|
000298  e5911000          LDR      r1,[r1,#0]            ;135  ; _MemoryPoolEnd
00029c  e1500001          CMP      r0,r1                 ;135
0002a0  1a000005          BNE      |L1.700|
0002a4  e3a00001          MOV      r0,#1                 ;138
0002a8  e58d0008          STR      r0,[sp,#8]            ;138
0002ac  e59f0140          LDR      r0,|L1.1012|
0002b0  e5900000          LDR      r0,[r0,#0]            ;139  ; _MemoryPoolBase
0002b4  e59f1148          LDR      r1,|L1.1028|
0002b8  e5810000          STR      r0,[r1,#0]            ;139  ; _pCurrent
                  |L1.700|
0002bc  e3e0a000          MVN      r10,#0                ;142
0002c0  ea00008a          B        |L1.1264|
                  |L1.708|
0002c4  e37a0001          CMN      r10,#1                ;146
0002c8  1a000019          BNE      |L1.820|
0002cc  e59f0130          LDR      r0,|L1.1028|
0002d0  e5906000          LDR      r6,[r0,#0]            ;148  ; _pCurrent
0002d4  e3a07001          MOV      r7,#1                 ;149
0002d8  e3590004          CMP      r9,#4                 ;151
0002dc  da000001          BLE      |L1.744|
0002e0  e3a0a000          MOV      r10,#0                ;152
0002e4  ea000000          B        |L1.748|
                  |L1.744|
0002e8  e3a0a070          MOV      r10,#0x70             ;154
                  |L1.748|
0002ec  e3590004          CMP      r9,#4                 ;162
0002f0  da000011          BLE      |L1.828|
0002f4  e59f0108          LDR      r0,|L1.1028|
0002f8  e5900000          LDR      r0,[r0,#0]            ;163  ; _pCurrent
0002fc  e2800080          ADD      r0,r0,#0x80           ;163
000300  e59f10f0          LDR      r1,|L1.1016|
000304  e5911000          LDR      r1,[r1,#0]            ;163  ; _MemoryPoolEnd
000308  e1500001          CMP      r0,r1                 ;163
00030c  2a000006          BCS      |L1.812|
000310  e1a01009          MOV      r1,r9                 ;164
000314  e59f00e8          LDR      r0,|L1.1028|
000318  e5900000          LDR      r0,[r0,#0]            ;164  ; _pCurrent
00031c  e2800080          ADD      r0,r0,#0x80           ;164
000320  ebfffffe          BL       __aeabi_uidivmod
000324  e3510000          CMP      r1,#0                 ;164
000328  0a000003          BEQ      |L1.828|
                  |L1.812|
00032c  e3e0a000          MVN      r10,#0                ;165
000330  ea000001          B        |L1.828|
                  |L1.820|
000334  e28aa080          ADD      r10,r10,#0x80         ;169
000338  e2877001          ADD      r7,r7,#1              ;170
                  |L1.828|
00033c  e15a0008          CMP      r10,r8                ;173
000340  ba000058          BLT      |L1.1192|
000344  e5867004          STR      r7,[r6,#4]            ;175
000348  e59f00dc          LDR      r0,|L1.1068|
00034c  e5860008          STR      r0,[r6,#8]            ;176
000350  e59f00a4          LDR      r0,|L1.1020|
000354  e5900000          LDR      r0,[r0,#0]            ;177  ; _FreeMemorySize
000358  e0400387          SUB      r0,r0,r7,LSL #7       ;177
00035c  e59f1098          LDR      r1,|L1.1020|
000360  e5810000          STR      r0,[r1,#0]            ;177  ; _FreeMemorySize
000364  e59f0094          LDR      r0,|L1.1024|
000368  e5900000          LDR      r0,[r0,#0]            ;178  ; _AllocatedMemorySize
00036c  e0800387          ADD      r0,r0,r7,LSL #7       ;178
000370  e59f1088          LDR      r1,|L1.1024|
000374  e5810000          STR      r0,[r1,#0]            ;178  ; _AllocatedMemorySize
000378  e59f0084          LDR      r0,|L1.1028|
00037c  e5806000          STR      r6,[r0,#0]            ;179  ; _pCurrent
000380  e3a0b000          MOV      r11,#0                ;180
000384  ea000009          B        |L1.944|
                  |L1.904|
000388  e3a00001          MOV      r0,#1                 ;182
00038c  e59f1070          LDR      r1,|L1.1028|
000390  e5911000          LDR      r1,[r1,#0]            ;182  ; _pCurrent
000394  e5810000          STR      r0,[r1,#0]            ;182
000398  e59f0064          LDR      r0,|L1.1028|
00039c  e5900000          LDR      r0,[r0,#0]            ;183  ; _pCurrent
0003a0  e2800080          ADD      r0,r0,#0x80           ;183
0003a4  e59f1058          LDR      r1,|L1.1028|
0003a8  e5810000          STR      r0,[r1,#0]            ;183  ; _pCurrent
0003ac  e28bb001          ADD      r11,r11,#1            ;180
                  |L1.944|
0003b0  e15b0007          CMP      r11,r7                ;180
0003b4  bafffff3          BLT      |L1.904|
0003b8  e3a00003          MOV      r0,#3                 ;185
0003bc  e5860000          STR      r0,[r6,#0]            ;185
0003c0  e3590004          CMP      r9,#4                 ;187
0003c4  da00002d          BLE      |L1.1152|
0003c8  e3540000          CMP      r4,#0                 ;189
0003cc  0a000001          BEQ      |L1.984|
0003d0  e3a00018          MOV      r0,#0x18              ;190
0003d4  ebfffffe          BL       sysEnableInterrupt
                  |L1.984|
0003d8  e3550000          CMP      r5,#0                 ;191
0003dc  0a000001          BEQ      |L1.1000|
0003e0  e3a00017          MOV      r0,#0x17              ;192
0003e4  ebfffffe          BL       sysEnableInterrupt
                  |L1.1000|
0003e8  e2860080          ADD      r0,r6,#0x80           ;194
0003ec  eaffff5a          B        |L1.348|
                  |L1.1008|
                          DCD      _USBMemoryPool
                  |L1.1012|
                          DCD      _MemoryPoolBase
                  |L1.1016|
                          DCD      _MemoryPoolEnd
                  |L1.1020|
                          DCD      _FreeMemorySize
                  |L1.1024|
                          DCD      _AllocatedMemorySize
                  |L1.1028|
                          DCD      _pCurrent
                  |L1.1032|
                          DCD      0xb8002000
                  |L1.1036|
00040c  5553425f          DCB      "USB_malloc - want=%d, free=%d\n",0
000410  6d616c6c
000414  6f63202d
000418  2077616e
00041c  743d2564
000420  2c206672
000424  65653d25
000428  640a00  
00042b  00                DCB      0
                  |L1.1068|
                          DCD      0x19685788
                  |L1.1072|
                          DCD      ||.constdata||
                  |L1.1076|
000434  5553425f          DCB      "USB_malloc warning - not the first block!\n",0
000438  6d616c6c
00043c  6f632077
000440  61726e69
000444  6e67202d
000448  206e6f74
00044c  20746865
000450  20666972
000454  73742062
000458  6c6f636b
00045c  210a00  
00045f  00                DCB      0
                  |L1.1120|
000460  5553425f          DCB      "USB_malloc - behind limit!!\n",0
000464  6d616c6c
000468  6f63202d
00046c  20626568
000470  696e6420
000474  6c696d69
000478  7421210a
00047c  00      
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L1.1152|
000480  e3540000          CMP      r4,#0                 ;199
000484  0a000001          BEQ      |L1.1168|
000488  e3a00018          MOV      r0,#0x18              ;200
00048c  ebfffffe          BL       sysEnableInterrupt
                  |L1.1168|
000490  e3550000          CMP      r5,#0                 ;201
000494  0a000001          BEQ      |L1.1184|
000498  e3a00017          MOV      r0,#0x17              ;202
00049c  ebfffffe          BL       sysEnableInterrupt
                  |L1.1184|
0004a0  e2860010          ADD      r0,r6,#0x10           ;204
0004a4  eaffff2c          B        |L1.348|
                  |L1.1192|
0004a8  e51f00ac          LDR      r0,|L1.1028|
0004ac  e5900000          LDR      r0,[r0,#0]            ;209  ; _pCurrent
0004b0  e2800080          ADD      r0,r0,#0x80           ;209
0004b4  e51f10b8          LDR      r1,|L1.1028|
0004b8  e5810000          STR      r0,[r1,#0]            ;209  ; _pCurrent
0004bc  e2810000          ADD      r0,r1,#0              ;210
0004c0  e5900000          LDR      r0,[r0,#0]            ;210  ; _pCurrent
0004c4  e51f10d4          LDR      r1,|L1.1016|
0004c8  e5911000          LDR      r1,[r1,#0]            ;210  ; _MemoryPoolEnd
0004cc  e1500001          CMP      r0,r1                 ;210
0004d0  3a000006          BCC      |L1.1264|
0004d4  e3a00001          MOV      r0,#1                 ;212
0004d8  e58d0008          STR      r0,[sp,#8]            ;212
0004dc  e51f00f0          LDR      r0,|L1.1012|
0004e0  e5900000          LDR      r0,[r0,#0]            ;213  ; _MemoryPoolBase
0004e4  e51f10e8          LDR      r1,|L1.1028|
0004e8  e5810000          STR      r0,[r1,#0]            ;213  ; _pCurrent
0004ec  e3e0a000          MVN      r10,#0                ;214
                  |L1.1264|
0004f0  e59d0008          LDR      r0,[sp,#8]            ;218
0004f4  e3500000          CMP      r0,#0                 ;218
0004f8  0affff24          BEQ      |L1.400|
0004fc  e51f0100          LDR      r0,|L1.1028|
000500  e5901000          LDR      r1,[r0,#0]            ;218  ; _pCurrent
000504  e59d000c          LDR      r0,[sp,#0xc]          ;218
000508  e1510000          CMP      r1,r0                 ;218
00050c  3affff1f          BCC      |L1.400|
000510  e28f0f82          ADR      r0,|L1.1824|
000514  ebfffffe          BL       sysprintf
000518  e3540000          CMP      r4,#0                 ;221
00051c  0a000001          BEQ      |L1.1320|
000520  e3a00018          MOV      r0,#0x18              ;222
000524  ebfffffe          BL       sysEnableInterrupt
                  |L1.1320|
000528  e3550000          CMP      r5,#0                 ;223
00052c  0a000001          BEQ      |L1.1336|
000530  e3a00017          MOV      r0,#0x17              ;224
000534  ebfffffe          BL       sysEnableInterrupt
                  |L1.1336|
000538  e3a00000          MOV      r0,#0                 ;225
00053c  eaffff06          B        |L1.348|
;;;227    
                          ENDP

                  USB_free PROC
;;;228    
;;;229    void  USB_free(void *alloc_addr)
000540  e92d47f0          PUSH     {r4-r10,lr}
;;;230    {
000544  e1a09000          MOV      r9,r0
;;;231        USB_MHDR_T  *pMblk;
;;;232        UINT32  addr = (UINT32)alloc_addr;
000548  e1a04009          MOV      r4,r9
;;;233        INT     i, count;
;;;234        int     disable_ohci_irq, disable_ehci_irq;
;;;235    
;;;236        if (IS_OHCI_IRQ_ENABLED())
00054c  e51f014c          LDR      r0,|L1.1032|
000550  e5900128          LDR      r0,[r0,#0x128]
000554  e3a01001          MOV      r1,#1
000558  e1110c20          TST      r1,r0,LSR #24
00055c  0a000001          BEQ      |L1.1384|
;;;237            disable_ohci_irq = 1;
000560  e3a05001          MOV      r5,#1
000564  ea000000          B        |L1.1388|
                  |L1.1384|
;;;238        else
;;;239            disable_ohci_irq = 0;
000568  e3a05000          MOV      r5,#0
                  |L1.1388|
;;;240    
;;;241        if (IS_EHCI_IRQ_ENABLED())
00056c  e51f016c          LDR      r0,|L1.1032|
000570  e5900128          LDR      r0,[r0,#0x128]
000574  e3a01001          MOV      r1,#1
000578  e1110ba0          TST      r1,r0,LSR #23
00057c  0a000001          BEQ      |L1.1416|
;;;242            disable_ehci_irq = 1;
000580  e3a06001          MOV      r6,#1
000584  ea000000          B        |L1.1420|
                  |L1.1416|
;;;243        else
;;;244            disable_ehci_irq = 0;
000588  e3a06000          MOV      r6,#0
                  |L1.1420|
;;;245    
;;;246        //sysprintf("USB_free: 0x%x\n", (int)alloc_addr);
;;;247    
;;;248        if ((addr < _MemoryPoolBase) || (addr >= _MemoryPoolEnd))
00058c  e51f01a0          LDR      r0,|L1.1012|
000590  e5900000          LDR      r0,[r0,#0]  ; _MemoryPoolBase
000594  e1540000          CMP      r4,r0
000598  3a000003          BCC      |L1.1452|
00059c  e51f01ac          LDR      r0,|L1.1016|
0005a0  e5900000          LDR      r0,[r0,#0]  ; _MemoryPoolEnd
0005a4  e1540000          CMP      r4,r0
0005a8  3a000004          BCC      |L1.1472|
                  |L1.1452|
;;;249        {
;;;250            if (addr)
0005ac  e3540000          CMP      r4,#0
0005b0  0a000001          BEQ      |L1.1468|
;;;251                free(alloc_addr);
0005b4  e1a00009          MOV      r0,r9
0005b8  ebfffffe          BL       free
                  |L1.1468|
;;;252            return;
;;;253        }
;;;254    
;;;255        if (disable_ohci_irq)
;;;256            DISABLE_OHCI_IRQ();
;;;257        if (disable_ehci_irq)
;;;258            DISABLE_EHCI_IRQ();
;;;259    
;;;260        //sysprintf("USB_free:%x\n", (INT)addr+USB_MEM_BLOCK_SIZE);
;;;261    
;;;262        /* get the leading block address */
;;;263        if (addr % USB_MEM_BLOCK_SIZE == 0)
;;;264            addr -= USB_MEM_BLOCK_SIZE;
;;;265        else
;;;266            addr -= sizeof(USB_MHDR_T);
;;;267    
;;;268        if (addr % USB_MEM_BLOCK_SIZE != 0)
;;;269        {
;;;270            sysprintf("USB_free fatal error on address: %x!!\n", (UINT32)alloc_addr);
;;;271            if (disable_ohci_irq)
;;;272                ENABLE_OHCI_IRQ();
;;;273            if (disable_ehci_irq)
;;;274                ENABLE_EHCI_IRQ();
;;;275            return;
;;;276        }
;;;277    
;;;278        pMblk = (USB_MHDR_T *)addr;
;;;279        if (pMblk->flag == 0)
;;;280        {
;;;281            sysprintf("USB_free(), warning - try to free a free block: %x\n", (UINT32)alloc_addr);
;;;282            if (disable_ohci_irq)
;;;283                ENABLE_OHCI_IRQ();
;;;284            if (disable_ehci_irq)
;;;285                ENABLE_EHCI_IRQ();
;;;286            return;
;;;287        }
;;;288        if (pMblk->magic != USB_MEM_ALLOC_MAGIC)
;;;289        {
;;;290            sysprintf("USB_free(), warning - try to free an unknow block at address:%x.\n", addr);
;;;291            if (disable_ohci_irq)
;;;292                ENABLE_OHCI_IRQ();
;;;293            if (disable_ehci_irq)
;;;294                ENABLE_EHCI_IRQ();
;;;295            return;
;;;296        }
;;;297    
;;;298        //_pCurrent = pMblk;
;;;299    
;;;300        //sysprintf("+ 0x%x, %d\n", (int)pMblk, pMblk->bcnt);
;;;301    
;;;302        count = pMblk->bcnt;
;;;303        for (i = 0; i < count; i++)
;;;304        {
;;;305            pMblk->flag = 0;     /* release block */
;;;306            pMblk = (USB_MHDR_T *)((UINT32)pMblk + USB_MEM_BLOCK_SIZE);
;;;307        }
;;;308    
;;;309        _FreeMemorySize += count * USB_MEM_BLOCK_SIZE;
;;;310        _AllocatedMemorySize -= count * USB_MEM_BLOCK_SIZE;
;;;311        if (disable_ohci_irq)
;;;312            ENABLE_OHCI_IRQ();
;;;313        if (disable_ehci_irq)
;;;314            ENABLE_EHCI_IRQ();
;;;315        return;
;;;316    }
0005bc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1472|
0005c0  e3550000          CMP      r5,#0                 ;255
0005c4  0a000001          BEQ      |L1.1488|
0005c8  e3a00018          MOV      r0,#0x18              ;256
0005cc  ebfffffe          BL       sysDisableInterrupt
                  |L1.1488|
0005d0  e3560000          CMP      r6,#0                 ;257
0005d4  0a000001          BEQ      |L1.1504|
0005d8  e3a00017          MOV      r0,#0x17              ;258
0005dc  ebfffffe          BL       sysDisableInterrupt
                  |L1.1504|
0005e0  e314007f          TST      r4,#0x7f              ;263
0005e4  1a000001          BNE      |L1.1520|
0005e8  e2444080          SUB      r4,r4,#0x80           ;264
0005ec  ea000000          B        |L1.1524|
                  |L1.1520|
0005f0  e2444010          SUB      r4,r4,#0x10           ;266
                  |L1.1524|
0005f4  e314007f          TST      r4,#0x7f              ;268
0005f8  0a00000b          BEQ      |L1.1580|
0005fc  e1a01009          MOV      r1,r9                 ;270
000600  e28f0f4e          ADR      r0,|L1.1856|
000604  ebfffffe          BL       sysprintf
000608  e3550000          CMP      r5,#0                 ;271
00060c  0a000001          BEQ      |L1.1560|
000610  e3a00018          MOV      r0,#0x18              ;272
000614  ebfffffe          BL       sysEnableInterrupt
                  |L1.1560|
000618  e3560000          CMP      r6,#0                 ;273
00061c  0a000001          BEQ      |L1.1576|
000620  e3a00017          MOV      r0,#0x17              ;274
000624  ebfffffe          BL       sysEnableInterrupt
                  |L1.1576|
000628  eaffffe3          B        |L1.1468|
                  |L1.1580|
00062c  e1a07004          MOV      r7,r4                 ;278
000630  e5970000          LDR      r0,[r7,#0]            ;279
000634  e3500000          CMP      r0,#0                 ;279
000638  1a00000b          BNE      |L1.1644|
00063c  e1a01009          MOV      r1,r9                 ;281
000640  e28f0e12          ADR      r0,|L1.1896|
000644  ebfffffe          BL       sysprintf
000648  e3550000          CMP      r5,#0                 ;282
00064c  0a000001          BEQ      |L1.1624|
000650  e3a00018          MOV      r0,#0x18              ;283
000654  ebfffffe          BL       sysEnableInterrupt
                  |L1.1624|
000658  e3560000          CMP      r6,#0                 ;284
00065c  0a000001          BEQ      |L1.1640|
000660  e3a00017          MOV      r0,#0x17              ;285
000664  ebfffffe          BL       sysEnableInterrupt
                  |L1.1640|
000668  eaffffd3          B        |L1.1468|
                  |L1.1644|
00066c  e5970008          LDR      r0,[r7,#8]            ;288
000670  e51f124c          LDR      r1,|L1.1068|
000674  e1500001          CMP      r0,r1                 ;288
000678  0a00000b          BEQ      |L1.1708|
00067c  e1a01004          MOV      r1,r4                 ;290
000680  e59f0114          LDR      r0,|L1.1948|
000684  ebfffffe          BL       sysprintf
000688  e3550000          CMP      r5,#0                 ;291
00068c  0a000001          BEQ      |L1.1688|
000690  e3a00018          MOV      r0,#0x18              ;292
000694  ebfffffe          BL       sysEnableInterrupt
                  |L1.1688|
000698  e3560000          CMP      r6,#0                 ;293
00069c  0a000001          BEQ      |L1.1704|
0006a0  e3a00017          MOV      r0,#0x17              ;294
0006a4  ebfffffe          BL       sysEnableInterrupt
                  |L1.1704|
0006a8  eaffffc3          B        |L1.1468|
                  |L1.1708|
0006ac  e5978004          LDR      r8,[r7,#4]            ;302
0006b0  e3a0a000          MOV      r10,#0                ;303
0006b4  ea000003          B        |L1.1736|
                  |L1.1720|
0006b8  e3a00000          MOV      r0,#0                 ;305
0006bc  e5870000          STR      r0,[r7,#0]            ;305
0006c0  e2877080          ADD      r7,r7,#0x80           ;306
0006c4  e28aa001          ADD      r10,r10,#1            ;303
                  |L1.1736|
0006c8  e15a0008          CMP      r10,r8                ;303
0006cc  bafffff9          BLT      |L1.1720|
0006d0  e51f02dc          LDR      r0,|L1.1020|
0006d4  e5900000          LDR      r0,[r0,#0]            ;309  ; _FreeMemorySize
0006d8  e0800388          ADD      r0,r0,r8,LSL #7       ;309
0006dc  e51f12e8          LDR      r1,|L1.1020|
0006e0  e5810000          STR      r0,[r1,#0]            ;309  ; _FreeMemorySize
0006e4  e51f02ec          LDR      r0,|L1.1024|
0006e8  e5900000          LDR      r0,[r0,#0]            ;310  ; _AllocatedMemorySize
0006ec  e0400388          SUB      r0,r0,r8,LSL #7       ;310
0006f0  e51f12f8          LDR      r1,|L1.1024|
0006f4  e5810000          STR      r0,[r1,#0]            ;310  ; _AllocatedMemorySize
0006f8  e3550000          CMP      r5,#0                 ;311
0006fc  0a000001          BEQ      |L1.1800|
000700  e3a00018          MOV      r0,#0x18              ;312
000704  ebfffffe          BL       sysEnableInterrupt
                  |L1.1800|
000708  e3560000          CMP      r6,#0                 ;313
00070c  0a000001          BEQ      |L1.1816|
000710  e3a00017          MOV      r0,#0x17              ;314
000714  ebfffffe          BL       sysEnableInterrupt
                  |L1.1816|
000718  e1a00000          MOV      r0,r0                 ;315
00071c  eaffffa6          B        |L1.1468|
                  |L1.1824|
000720  5553425f          DCB      "USB_malloc - No free memory!\n",0
000724  6d616c6c
000728  6f63202d
00072c  204e6f20
000730  66726565
000734  206d656d
000738  6f727921
00073c  0a00    
00073e  00                DCB      0
00073f  00                DCB      0
                  |L1.1856|
000740  5553425f          DCB      "USB_free fatal error on address: %x!!\n",0
000744  66726565
000748  20666174
00074c  616c2065
000750  72726f72
000754  206f6e20
000758  61646472
00075c  6573733a
000760  20257821
000764  210a00  
000767  00                DCB      0
                  |L1.1896|
000768  5553425f          DCB      "USB_free(), warning - try to free a free block: %x\n",0
00076c  66726565
000770  28292c20
000774  7761726e
000778  696e6720
00077c  2d207472
000780  7920746f
000784  20667265
000788  65206120
00078c  66726565
000790  20626c6f
000794  636b3a20
000798  25780a00
                  |L1.1948|
                          DCD      ||.constdata||+0x54
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=7

                  _USBMemoryPool
                          %        32768

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0a555342          DCB      0x0a,0x55,0x53,0x42
000004  5f6d616c          DCB      0x5f,0x6d,0x61,0x6c
000008  6c6f6320          DCB      0x6c,0x6f,0x63,0x20
00000c  2d20696e          DCB      0x2d,0x20,0x69,0x6e
000010  636f7272          DCB      0x63,0x6f,0x72,0x72
000014  65637420          DCB      0x65,0x63,0x74,0x20
000018  6d616769          DCB      0x6d,0x61,0x67,0x69
00001c  63206e75          DCB      0x63,0x20,0x6e,0x75
000020  6d626572          DCB      0x6d,0x62,0x65,0x72
000024  2120433a          DCB      0x21,0x20,0x43,0x3a
000028  25782046          DCB      0x25,0x78,0x20,0x46
00002c  3a25782c          DCB      0x3a,0x25,0x78,0x2c
000030  2077616e          DCB      0x20,0x77,0x61,0x6e
000034  7465643a          DCB      0x74,0x65,0x64,0x3a
000038  25642c20          DCB      0x25,0x64,0x2c,0x20
00003c  42617365          DCB      0x42,0x61,0x73,0x65
000040  3a307825          DCB      0x3a,0x30,0x78,0x25
000044  782c2045          DCB      0x78,0x2c,0x20,0x45
000048  6e643a30          DCB      0x6e,0x64,0x3a,0x30
00004c  7825780a          DCB      0x78,0x25,0x78,0x0a
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  5553425f          DCB      0x55,0x53,0x42,0x5f
000058  66726565          DCB      0x66,0x72,0x65,0x65
00005c  28292c20          DCB      0x28,0x29,0x2c,0x20
000060  7761726e          DCB      0x77,0x61,0x72,0x6e
000064  696e6720          DCB      0x69,0x6e,0x67,0x20
000068  2d207472          DCB      0x2d,0x20,0x74,0x72
00006c  7920746f          DCB      0x79,0x20,0x74,0x6f
000070  20667265          DCB      0x20,0x66,0x72,0x65
000074  6520616e          DCB      0x65,0x20,0x61,0x6e
000078  20756e6b          DCB      0x20,0x75,0x6e,0x6b
00007c  6e6f7720          DCB      0x6e,0x6f,0x77,0x20
000080  626c6f63          DCB      0x62,0x6c,0x6f,0x63
000084  6b206174          DCB      0x6b,0x20,0x61,0x74
000088  20616464          DCB      0x20,0x61,0x64,0x64
00008c  72657373          DCB      0x72,0x65,0x73,0x73
000090  3a25782e          DCB      0x3a,0x25,0x78,0x2e
000094  0a00              DCB      0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _USB_pCurrent
                          DCD      _pCurrent
                  _FreeMemorySize
                          DCD      0x00000000
                  _AllocatedMemorySize
                          DCD      0x00000000
                  _pCurrent
                          DCD      0x00000000
                  _MemoryPoolBase
                          DCD      0x00000000
                  _MemoryPoolEnd
                          DCD      0x00000000
