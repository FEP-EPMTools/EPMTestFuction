; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\spaceexdrv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spaceexdrv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\spaceexdrv.crf src\syshal\spaceexdrv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SpaceExDrvPreOffCallback PROC
;;;100    
;;;101    static BOOL SpaceExDrvPreOffCallback(int flag)
000000  e1a01000          MOV      r1,r0
;;;102    {
;;;103        BOOL reVal = TRUE;
000004  e3a00001          MOV      r0,#1
;;;104        spaceExDrvIgnoreRun = TRUE;
000008  e3a02001          MOV      r2,#1
00000c  e59f3480          LDR      r3,|L1.1172|
000010  e5c32000          STRB     r2,[r3,#0]  ; spaceExDrvIgnoreRun
;;;105        //sysprintf("### SpaceExDrv OFF Callback [%s] ###\r\n", dataAgentPowerCallabck.drvName);    
;;;106        return reVal;    
;;;107    }
000014  e12fff1e          BX       lr
;;;108    static BOOL SpaceExDrvOffCallback(int flag)
                          ENDP

                  SpaceExDrvOffCallback PROC
000018  e92d4010          PUSH     {r4,lr}
;;;109    {
00001c  e1a04000          MOV      r4,r0
;;;110        
;;;111        switch(flag)
000020  e1a00000          MOV      r0,r0
;;;112        {
;;;113            //case SUSPEND_MODE_BATTERY_REMOVE:
;;;114            //    if(pRadarInterface->setPowerFunc != NULL)            
;;;115            //        pRadarInterface->setPowerFunc(FALSE);            
;;;116            //    return TRUE;
;;;117            //case SUSPEND_MODE_TARIFF:
;;;118            default:
;;;119            #if(1)
;;;120            if(pRadarInterface->setPowerFunc != NULL)            
000024  e59f046c          LDR      r0,|L1.1176|
000028  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
00002c  e5900008          LDR      r0,[r0,#8]
000030  e3500000          CMP      r0,#0
000034  0a000004          BEQ      |L1.76|
;;;121                pRadarInterface->setPowerFunc(FALSE);
000038  e59f0458          LDR      r0,|L1.1176|
00003c  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
000040  e5901008          LDR      r1,[r0,#8]
000044  e3a00000          MOV      r0,#0
000048  e12fff31          BLX      r1
                  |L1.76|
;;;122            #else
;;;123            {
;;;124                int timers = 2000/10;
;;;125                //while(!spaceExDrvPowerStatus)
;;;126                while((!spaceExDrvPowerStatus[SPACE_EX_INDEX_1]) || (!spaceExDrvPowerStatus[SPACE_EX_INDEX_2]))
;;;127                {
;;;128                    sysprintf("[s]");
;;;129                    if(timers-- == 0)
;;;130                    {
;;;131                        return FALSE;
;;;132                    }
;;;133                    vTaskDelay(10/portTICK_RATE_MS); 
;;;134                }
;;;135            }
;;;136            #endif
;;;137            return TRUE;  
00004c  e3a00001          MOV      r0,#1
;;;138                        
;;;139        }    
;;;140    }
000050  e8bd8010          POP      {r4,pc}
;;;141    //static BOOL SpaceExDrvOnCallback(int flag, int wakeupSource)
                          ENDP

                  SpaceExDrvOnCallback PROC
;;;142    static BOOL SpaceExDrvOnCallback(int flag)
000054  e1a01000          MOV      r1,r0
;;;143    {
;;;144        BOOL reVal = TRUE;
000058  e3a00001          MOV      r0,#1
;;;145        //StartSpaceExDrv();
;;;146        //sysprintf("### SpaceExDrv ON Callback [%s] ###\r\n", dataAgentPowerCallabck.drvName); 
;;;147        spaceExDrvIgnoreRun = FALSE;
00005c  e3a02000          MOV      r2,#0
000060  e59f342c          LDR      r3,|L1.1172|
000064  e5c32000          STRB     r2,[r3,#0]  ; spaceExDrvIgnoreRun
;;;148        //spaceExDrvPowerStatus = FALSE;  
;;;149        //xSemaphoreGive(xSemaphore);    
;;;150        return reVal;    
;;;151    }
000068  e12fff1e          BX       lr
;;;152    static BOOL SpaceExDrvCheckStatus(int flag)
                          ENDP

                  SpaceExDrvCheckStatus PROC
00006c  e1a01000          MOV      r1,r0
;;;153    {
;;;154        //BOOL reVal = TRUE;
;;;155        //sysprintf("### SpaceExDrv STATUS Callback [%s] ###\r\n", dataAgentPowerCallabck.drvName); 
;;;156        switch(flag)
000070  e1a00000          MOV      r0,r0
;;;157        {
;;;158            //case SUSPEND_MODE_BATTERY_REMOVE:            
;;;159            //    return TRUE;
;;;160            //case SUSPEND_MODE_TARIFF:
;;;161            default:
;;;162                #if(1)
;;;163                return TRUE;
000074  e3a00001          MOV      r0,#1
;;;164                #else
;;;165                if(spaceExDrvPowerStatus[SPACE_EX_INDEX_1] && spaceExDrvPowerStatus[SPACE_EX_INDEX_2])
;;;166                    return TRUE; 
;;;167                else
;;;168                    return FALSE;
;;;169                #endif
;;;170        }        
;;;171    }
000078  e12fff1e          BX       lr
;;;172    extern BOOL SysGetBooted(void);
                          ENDP

                  SpaceExSemaphoreGive PROC
;;;791    
;;;792    void SpaceExSemaphoreGive(int index)
00007c  e92d4010          PUSH     {r4,lr}
;;;793    {
000080  e1a04000          MOV      r4,r0
;;;794        xSemaphoreGive(xRunningSemaphore[index]);
000084  e59f1410          LDR      r1,|L1.1180|
000088  e7910104          LDR      r0,[r1,r4,LSL #2]
00008c  e3a03000          MOV      r3,#0
000090  e1a02003          MOV      r2,r3
000094  e1a01003          MOV      r1,r3
000098  ebfffffe          BL       xQueueGenericSend
;;;795        
;;;796    }
00009c  e8bd8010          POP      {r4,pc}
;;;797    
                          ENDP

                  SpaceExGetFeature PROC
;;;635    
;;;636    TickType_t SpaceExGetFeature(uint8_t index, BOOL* changeFlag)
0000a0  e92d40f8          PUSH     {r3-r7,lr}
;;;637    {    
0000a4  e1a04000          MOV      r4,r0
0000a8  e1a05001          MOV      r5,r1
;;;638        TickType_t waitTime = (0/portTICK_RATE_MS);
0000ac  e3a06000          MOV      r6,#0
;;;639        /*
;;;640        #define RADAR_FEATURE_OCCUPIED      0x01
;;;641        #define RADAR_FEATURE_VACUUM        0x02
;;;642        #define RADAR_FEATURE_UN_STABLED    0x03
;;;643        #define RADAR_FEATURE_INIT          0x04
;;;644        */
;;;645        vTaskDelay(200/portTICK_RATE_MS);
0000b0  e3a00014          MOV      r0,#0x14
0000b4  ebfffffe          BL       vTaskDelay
;;;646        int featureValue = pRadarInterface->checkFeaturnFunc(index, changeFlag, NULL, NULL, NULL);
0000b8  e3a00000          MOV      r0,#0
0000bc  e58d0000          STR      r0,[sp,#0]
0000c0  e59f03d0          LDR      r0,|L1.1176|
0000c4  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0000c8  e3a03000          MOV      r3,#0
0000cc  e1a02003          MOV      r2,r3
0000d0  e1a01005          MOV      r1,r5
0000d4  e590c004          LDR      r12,[r0,#4]
0000d8  e1a00004          MOV      r0,r4
0000dc  e12fff3c          BLX      r12
0000e0  e1a07000          MOV      r7,r0
;;;647        switch(featureValue)
0000e4  e3570001          CMP      r7,#1
0000e8  0a000006          BEQ      |L1.264|
0000ec  e3570002          CMP      r7,#2
0000f0  0a000036          BEQ      |L1.464|
0000f4  e3570003          CMP      r7,#3
0000f8  0a000016          BEQ      |L1.344|
0000fc  e3570004          CMP      r7,#4
000100  1a00003c          BNE      |L1.504|
000104  ea000027          B        |L1.424|
                  |L1.264|
;;;648        {
;;;649             case RADAR_FEATURE_OCCUPIED:
000108  e1a00000          MOV      r0,r0
;;;650                 /*
;;;651                if(GetMeterStorageData()->carId[index] == 0)
;;;652                {
;;;653                    GetMeterStorageData()->carId[index] = 1;
;;;654                    MeterStorageFlush(FALSE);
;;;655                }
;;;656                */
;;;657                if(testModeFlag)
00010c  e59f038c          LDR      r0,|L1.1184|
000110  e5d00000          LDRB     r0,[r0,#0]  ; testModeFlag
000114  e3500000          CMP      r0,#0
000118  0a000005          BEQ      |L1.308|
;;;658                {
;;;659                    waitTime = (sampleIntervalTime/portTICK_RATE_MS);
00011c  e3a0100a          MOV      r1,#0xa
000120  e59f037c          LDR      r0,|L1.1188|
000124  e5900000          LDR      r0,[r0,#0]  ; sampleIntervalTime
000128  ebfffffe          BL       __aeabi_uidivmod
00012c  e1a06000          MOV      r6,r0
000130  ea000004          B        |L1.328|
                  |L1.308|
;;;660                }
;;;661                else
;;;662                {
;;;663                    waitTime = (sampleIntervalTime/portTICK_RATE_MS);
000134  e3a0100a          MOV      r1,#0xa
000138  e59f0364          LDR      r0,|L1.1188|
00013c  e5900000          LDR      r0,[r0,#0]  ; sampleIntervalTime
000140  ebfffffe          BL       __aeabi_uidivmod
000144  e1a06000          MOV      r6,r0
                  |L1.328|
;;;664                    //waitTime = portMAX_DELAY;//(5000/portTICK_RATE_MS);
;;;665                }
;;;666                //#if(ENABLE_LOG_FUNCTION)
;;;667                //{
;;;668                //    char printBuffer[512];
;;;669                //    sprintf(printBuffer,  "[RADAR SpaceDev] [%d] (RADAR_FEATURE_OCCUPIED), mCarId = %d, waitTime = %d!!! \r\n", index, mCarId[index], (int)(waitTime*portTICK_RATE_MS)); 
;;;670                //    LoglibPrintf(LOG_TYPE_INFO, printBuffer, FALSE);
;;;671                //}
;;;672                //#endif 
;;;673                spaceExDrvWorkStatus[index] = TRUE;
000148  e3a00001          MOV      r0,#1
00014c  e59f1354          LDR      r1,|L1.1192|
000150  e7c10004          STRB     r0,[r1,r4]
;;;674                break;
000154  ea00002a          B        |L1.516|
                  |L1.344|
;;;675            case RADAR_FEATURE_VACUUM:
000158  e1a00000          MOV      r0,r0
;;;676                /*
;;;677                if(GetMeterStorageData()->carId[index] != 0)
;;;678                {
;;;679                    GetMeterStorageData()->carId[index] = 0;   
;;;680                    MeterStorageFlush(FALSE);
;;;681                }    
;;;682                */        
;;;683                if(testModeFlag)
00015c  e59f033c          LDR      r0,|L1.1184|
000160  e5d00000          LDRB     r0,[r0,#0]  ; testModeFlag
000164  e3500000          CMP      r0,#0
000168  0a000005          BEQ      |L1.388|
;;;684                {
;;;685                    waitTime = (sampleIntervalTime/portTICK_RATE_MS);
00016c  e3a0100a          MOV      r1,#0xa
000170  e59f032c          LDR      r0,|L1.1188|
000174  e5900000          LDR      r0,[r0,#0]  ; sampleIntervalTime
000178  ebfffffe          BL       __aeabi_uidivmod
00017c  e1a06000          MOV      r6,r0
000180  ea000004          B        |L1.408|
                  |L1.388|
;;;686                }
;;;687                else
;;;688                {
;;;689                    waitTime = (sampleIntervalTime/portTICK_RATE_MS);
000184  e3a0100a          MOV      r1,#0xa
000188  e59f0314          LDR      r0,|L1.1188|
00018c  e5900000          LDR      r0,[r0,#0]  ; sampleIntervalTime
000190  ebfffffe          BL       __aeabi_uidivmod
000194  e1a06000          MOV      r6,r0
                  |L1.408|
;;;690                }
;;;691                spaceExDrvWorkStatus[index] = TRUE;
000198  e3a00001          MOV      r0,#1
00019c  e59f1304          LDR      r1,|L1.1192|
0001a0  e7c10004          STRB     r0,[r1,r4]
;;;692                break;
0001a4  ea000016          B        |L1.516|
                  |L1.424|
;;;693            case RADAR_FEATURE_VACUUM_UN_STABLED:
0001a8  e1a00000          MOV      r0,r0
;;;694                waitTime = (unstableIntervalTime/portTICK_RATE_MS);
0001ac  e3a0100a          MOV      r1,#0xa
0001b0  e59f02f4          LDR      r0,|L1.1196|
0001b4  e5900000          LDR      r0,[r0,#0]  ; unstableIntervalTime
0001b8  ebfffffe          BL       __aeabi_uidivmod
0001bc  e1a06000          MOV      r6,r0
;;;695                spaceExDrvWorkStatus[index] = TRUE;
0001c0  e3a00001          MOV      r0,#1
0001c4  e59f12dc          LDR      r1,|L1.1192|
0001c8  e7c10004          STRB     r0,[r1,r4]
;;;696                break;
0001cc  ea00000c          B        |L1.516|
                  |L1.464|
;;;697            case RADAR_FEATURE_OCCUPIED_UN_STABLED:
0001d0  e1a00000          MOV      r0,r0
;;;698                waitTime = (unstableIntervalTime/portTICK_RATE_MS);
0001d4  e3a0100a          MOV      r1,#0xa
0001d8  e59f02cc          LDR      r0,|L1.1196|
0001dc  e5900000          LDR      r0,[r0,#0]  ; unstableIntervalTime
0001e0  ebfffffe          BL       __aeabi_uidivmod
0001e4  e1a06000          MOV      r6,r0
;;;699                spaceExDrvWorkStatus[index] = TRUE;
0001e8  e3a00001          MOV      r0,#1
0001ec  e59f12b4          LDR      r1,|L1.1192|
0001f0  e7c10004          STRB     r0,[r1,r4]
;;;700                break;
0001f4  ea000002          B        |L1.516|
                  |L1.504|
;;;701            default:
0001f8  e1a00000          MOV      r0,r0
;;;702                {
;;;703                    //sysprintf("SpaceExGetFeature %d TIMEOUT!!\n", index);
;;;704                    #if(0)
;;;705                    if(spaceExDrvWorkStatus[index] == TRUE)
;;;706                    {
;;;707                        char str[512];
;;;708                        #if(ENABLE_LOG_FUNCTION)
;;;709                        {                    
;;;710                            sprintf(str, "[RADAR] -> SpaceExGetFeature %d TIMEOUT!!\r\n", index);
;;;711                            LoglibPrintf(LOG_TYPE_ERROR, str, FALSE);
;;;712                        }
;;;713                        #else
;;;714                        sysprintf("[RADAR] -> SpaceExGetFeature %d TIMEOUT!!\n", index);
;;;715                        #endif   
;;;716                        sprintf(str, "RadarErr<%d>", index);
;;;717                        DataProcessSendStatusData(0, str, WEB_POST_EVENT_ALERT);
;;;718                        spaceExDrvWorkStatus[index] = FALSE;
;;;719                    }
;;;720                    else
;;;721                    {
;;;722                        sysprintf("[RADAR] -> SpaceExGetFeature %d TIMEOUT!!\n", index);
;;;723                    }
;;;724                    #endif
;;;725                    //waitTime = (sampleIntervalTime/portTICK_RATE_MS);
;;;726                    //waitTime = (60*1000/portTICK_RATE_MS);
;;;727                    waitTime = (15*1000/portTICK_RATE_MS);
0001fc  e59f62ac          LDR      r6,|L1.1200|
;;;728                   // waitTime = portMAX_DELAY;
;;;729                }
;;;730                break;
000200  e1a00000          MOV      r0,r0
                  |L1.516|
000204  e1a00000          MOV      r0,r0                 ;674
;;;731        }
;;;732        //just for test
;;;733        //waitTime = 0;
;;;734        //waitTime = (1000/portTICK_RATE_MS);
;;;735        //if(testModeFlag)
;;;736        //{
;;;737        //    waitTime = (3000/portTICK_RATE_MS);
;;;738        //}
;;;739        //sysprintf(" !!! SpaceExGetFeature !!!  [%d]: mCarId = %d, waitTime = %d--  \r\n\r\n", index, GetMeterStorageData()->carId[index], waitTime*portTICK_RATE_MS);
;;;740        
;;;741        
;;;742        return waitTime;
000208  e1a00006          MOV      r0,r6
;;;743    }
00020c  e8bd80f8          POP      {r3-r7,pc}
;;;744    int SpaceExGetCurrentCarId(uint8_t index)
                          ENDP

                  SpaceExSemaphoreTake PROC
;;;785    
;;;786    void SpaceExSemaphoreTake(int index)
000210  e92d4010          PUSH     {r4,lr}
;;;787    {
000214  e1a04000          MOV      r4,r0
;;;788        xSemaphoreTake(xRunningSemaphore[index], portMAX_DELAY);
000218  e59f127c          LDR      r1,|L1.1180|
00021c  e7910104          LDR      r0,[r1,r4,LSL #2]
000220  e3a03000          MOV      r3,#0
000224  e3e02000          MVN      r2,#0
000228  e1a01003          MOV      r1,r3
00022c  ebfffffe          BL       xQueueGenericReceive
;;;789        //vTaskDelay(500/portTICK_RATE_MS);xSemaphore
;;;790    }
000230  e8bd8010          POP      {r4,pc}
;;;791    
                          ENDP

                  vSpaceExDrvTask PROC
;;;172    extern BOOL SysGetBooted(void);
;;;173    static void vSpaceExDrvTask( void *pvParameters )
000234  e92d4008          PUSH     {r3,lr}
;;;174    {
000238  e1a05000          MOV      r5,r0
;;;175        //SpaceExDrvOnCallback(0, WAKEUP_SOURCE_NONE);
;;;176        SpaceExDrvOnCallback(0);
00023c  e3a00000          MOV      r0,#0
000240  ebfffffe          BL       SpaceExDrvOnCallback
;;;177        int spaceIndex = (int)pvParameters;
000244  e1a04005          MOV      r4,r5
;;;178        BOOL changeFlag;
;;;179        sysprintf("vSpaceDrvTask[%d] WAIT---\r\n", spaceIndex);  
000248  e1a01004          MOV      r1,r4
00024c  e28f0e26          ADR      r0,|L1.1204|
000250  ebfffffe          BL       sysprintf
;;;180        if(testModeFlag)
000254  e59f0244          LDR      r0,|L1.1184|
000258  e5d00000          LDRB     r0,[r0,#0]  ; testModeFlag
00025c  e3500000          CMP      r0,#0
000260  1a000008          BNE      |L1.648|
;;;181        {
;;;182        }
;;;183        else
;;;184        {    
;;;185            while(SysGetBooted() == FALSE)
000264  ea000001          B        |L1.624|
                  |L1.616|
;;;186            {
;;;187                vTaskDelay(2000/portTICK_RATE_MS);
000268  e3a000c8          MOV      r0,#0xc8
00026c  ebfffffe          BL       vTaskDelay
                  |L1.624|
000270  ebfffffe          BL       SysGetBooted
000274  e3500000          CMP      r0,#0                 ;185
000278  0afffffa          BEQ      |L1.616|
;;;188            }
;;;189            threadWaitTime[spaceIndex] = (2000/portTICK_RATE_MS);
00027c  e3a000c8          MOV      r0,#0xc8
000280  e59f1248          LDR      r1,|L1.1232|
000284  e7810104          STR      r0,[r1,r4,LSL #2]
                  |L1.648|
;;;190        }
;;;191        sysprintf("vSpaceDrvTask[%d] GO---\r\n", spaceIndex);    
000288  e1a01004          MOV      r1,r4
00028c  e28f0d09          ADR      r0,|L1.1236|
000290  ebfffffe          BL       sysprintf
;;;192        //threadWaitTime[spaceIndex] = portMAX_DELAY;
;;;193        
;;;194        for(;;)
000294  e1a00000          MOV      r0,r0
                  |L1.664|
;;;195        {  
;;;196            #if(ENABLE_SPACE_EX_DRV_DEBUG_MESSAGE)
;;;197            sysprintf(" -wait- vSpaceExDrvTask(spaceIndex = %d) %d[%d]---\r\n", spaceIndex, threadWaitTime[spaceIndex], portMAX_DELAY); 
;;;198            #endif
;;;199            spaceExDrvPowerStatus[spaceIndex]  = TRUE;
000298  e3a00001          MOV      r0,#1
00029c  e59f124c          LDR      r1,|L1.1264|
0002a0  e7c10004          STRB     r0,[r1,r4]
;;;200            #if(ENABLE_THREAD_RUNNING_DEBUG)
;;;201            sysprintf("\r\n ! (-WARNING-) %s Waiting (%d)... ) !\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()), threadWaitTime[spaceIndex]); 
;;;202            #endif
;;;203            xSemaphoreTake(xSemaphore[spaceIndex], threadWaitTime[spaceIndex]/*portMAX_DELAY*/);
0002a4  e59f1224          LDR      r1,|L1.1232|
0002a8  e7912104          LDR      r2,[r1,r4,LSL #2]
0002ac  e59f1240          LDR      r1,|L1.1268|
0002b0  e7910104          LDR      r0,[r1,r4,LSL #2]
0002b4  e3a03000          MOV      r3,#0
0002b8  e1a01003          MOV      r1,r3
0002bc  ebfffffe          BL       xQueueGenericReceive
;;;204            #if(ENABLE_THREAD_RUNNING_DEBUG)
;;;205            sysprintf("\r\n ! (-WARNING-) %s Go (%d)... ) !\r\n", pcTaskGetName(xTaskGetCurrentTaskHandle()), threadWaitTime[spaceIndex]); 
;;;206            #endif        
;;;207            
;;;208            #if(ENABLE_SPACE_EX_DRV_DEBUG_MESSAGE)
;;;209            sysprintf(" -start- vSpaceExDrvTask (spaceIndex = %d) ---\r\n", spaceIndex); 
;;;210            #endif
;;;211            if(testModeFlag)
0002c0  e59f01d8          LDR      r0,|L1.1184|
0002c4  e5d00000          LDRB     r0,[r0,#0]  ; testModeFlag
0002c8  e3500000          CMP      r0,#0
0002cc  0afffff1          BEQ      |L1.664|
;;;212            {
;;;213                //xSemaphoreTake(xRunningSemaphore, portMAX_DELAY);
;;;214                SpaceExSemaphoreTake(spaceIndex);
0002d0  e1a00004          MOV      r0,r4
0002d4  ebfffffe          BL       SpaceExSemaphoreTake
;;;215                threadWaitTime[spaceIndex] = SpaceExGetFeature(spaceIndex, &changeFlag);
0002d8  e20400ff          AND      r0,r4,#0xff
0002dc  e1a0100d          MOV      r1,sp
0002e0  ebfffffe          BL       SpaceExGetFeature
0002e4  e59f11e4          LDR      r1,|L1.1232|
0002e8  e7810104          STR      r0,[r1,r4,LSL #2]
;;;216                //xSemaphoreGive(xRunningSemaphore);
;;;217                SpaceExSemaphoreGive(spaceIndex);
0002ec  e1a00004          MOV      r0,r4
0002f0  ebfffffe          BL       SpaceExSemaphoreGive
0002f4  eaffffe7          B        |L1.664|
;;;218            }
;;;219            else
;;;220            {
;;;221                #if(0)
;;;222                if(GetMeterPara()->bayenable[spaceIndex] == 0)
;;;223                {
;;;224                    sysprintf(" WARNING--->vSpaceExDrvTask [%d] disable: IGNORE...\r\n", spaceIndex);
;;;225                    threadWaitTime[spaceIndex] = (60*1000/portTICK_RATE_MS);
;;;226                    continue;
;;;227                }
;;;228                
;;;229                spaceExDrvPowerStatus[spaceIndex]  = FALSE;
;;;230                //----------
;;;231                
;;;232                //xSemaphoreTake(xRunningSemaphore, portMAX_DELAY);
;;;233                SpaceExSemaphoreTake(spaceIndex);
;;;234                if(spaceExDrvIgnoreRun)
;;;235                {
;;;236                    sysprintf("vSpaceDrvTask ignore---\r\n");             
;;;237                }
;;;238                else
;;;239                {
;;;240                    if(GuiManagerCompareCurrentScreenId(GUI_STANDBY_ID))
;;;241                    {
;;;242                        threadWaitTime[spaceIndex] = SpaceExGetFeature(spaceIndex, &changeFlag);
;;;243                    }
;;;244                    else
;;;245                    {
;;;246                        threadWaitTime[spaceIndex] = 5000/portTICK_RATE_MS;
;;;247                    }
;;;248                }
;;;249                //xSemaphoreGive(xRunningSemaphore);
;;;250                SpaceExSemaphoreGive(spaceIndex);
;;;251                //----------   
;;;252                
;;;253                
;;;254                
;;;255                if(MeterGetEnableDistanceInfoFlag())
;;;256                {
;;;257                    if(GuiManagerCompareCurrentScreenId(GUI_STANDBY_ID))
;;;258                    {
;;;259                        //#warning need use timer driver to update screen
;;;260                        //EPDDrawDistanceNumber(FALSE, mSpaceDist[SPACE_INDEX_1][0] , 250, 220);
;;;261                        //EPDDrawDistanceNumber(TRUE, mSpaceDist[SPACE_INDEX_2][0] , 720, 220);
;;;262                        if(changeFlag)
;;;263                        {
;;;264                            MeterDataThreadStart();  
;;;265                            //GuiManagerUpdateScreenEx(GUI_STANDBY_ID); 
;;;266                            if(spaceIndex == 0)
;;;267                            {
;;;268                                #if(USE_SPACE_EX_DRIVER)
;;;269                                EPDDrawDistanceNumber(TRUE, SpaceExGetCurrentCarId(SPACE_EX_INDEX_1), 250, 535/*230*/);
;;;270           
;;;271                                #else
;;;272                                EPDDrawDistanceNumber(TRUE, SpaceExGetCurrentCarIdFake(SPACE_INDEX_1), 250, 535/*230*/);
;;;273           
;;;274                                #endif
;;;275                            }
;;;276                            else if(spaceIndex == 1)
;;;277                            {
;;;278                                #if(USE_SPACE_EX_DRIVER)                
;;;279                                EPDDrawDistanceNumber(TRUE, SpaceExGetCurrentCarId(SPACE_EX_INDEX_2), 720, 535/*230*/);        
;;;280                                #else
;;;281                                EPDDrawDistanceNumber(TRUE, SpaceExGetCurrentCarIdFake(SPACE_INDEX_2), 720, 535/*230*/);
;;;282                                #endif
;;;283                            }
;;;284                                                  
;;;285                        }                        
;;;286                    }
;;;287                }
;;;288                #endif
;;;289               
;;;290            }
;;;291    
;;;292            //threadWaitTime = (3000/portTICK_RATE_MS);
;;;293            #if(ENABLE_SPACE_EX_DRV_DEBUG_MESSAGE)
;;;294            sysprintf(" -end- vSpaceExDrvTask (spaceIndex = %d) ---\r\n", spaceIndex); 
;;;295            #endif
;;;296        }
;;;297        
;;;298    }
;;;299    
                          ENDP

                  vSpaceExDrvTestTask PROC
;;;300    #if (ENABLE_BURNIN_TESTER)
;;;301    static void vSpaceExDrvTestTask(void *pvParameters)
0002f8  e24ddf52          SUB      sp,sp,#0x148
;;;302    {
0002fc  e1a09000          MOV      r9,r0
;;;303        int spaceIndex = (int)pvParameters;
000300  e1a05009          MOV      r5,r9
;;;304        time_t lastTime = GetCurrentUTCTime();
000304  ebfffffe          BL       GetCurrentUTCTime
000308  e58d0144          STR      r0,[sp,#0x144]
;;;305        time_t currentTime;
;;;306        BOOL testLoop = FALSE;
00030c  e3a00000          MOV      r0,#0
000310  e58d0140          STR      r0,[sp,#0x140]
;;;307        BOOL changeFlag;
;;;308        int featureValue;
;;;309        int VerfeatureValue;
;;;310        int RetryCount = 0;
000314  e3a0a000          MOV      r10,#0
;;;311        int VerRetryCount = 0;
000318  e3a07000          MOV      r7,#0
;;;312        char errorMsgBuffer[256];
;;;313        
;;;314        uint8_t RadarData[22];
;;;315        uint8_t VersionCmd[9] = {0x7A, 0xA7, 0x00, 0x09, 0x00, 0x00, 0x09, 0xD3, 0x3D};
00031c  e28f2f75          ADR      r2,|L1.1272|
000320  e8920007          LDM      r2,{r0-r2}
000324  e28d301c          ADD      r3,sp,#0x1c
000328  e8830007          STM      r3,{r0-r2}
;;;316        uint8_t ResultCmd[24] = {0x7A, 0xA7, 0x00, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
00032c  e3a02018          MOV      r2,#0x18
000330  e28f1f73          ADR      r1,|L1.1284|
000334  e28d0004          ADD      r0,sp,#4
000338  ebfffffe          BL       __aeabi_memcpy4
;;;317                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;;;318                                 0x00, 0x1A, 0xD3, 0x3D};
;;;319        
;;;320        //TickType_t tickLocalStart;
;;;321        terninalPrintf("vSpaceExDrvTestTask[%d] Going...\r\n", spaceIndex);
00033c  e1a01005          MOV      r1,r5
000340  e28f0f75          ADR      r0,|L1.1308|
000344  ebfffffe          BL       terninalPrintf
;;;322        
;;;323        for(;;)
000348  e1a00000          MOV      r0,r0
                  |L1.844|
;;;324        {
;;;325            if (GetPrepareStopBurninFlag())
00034c  ebfffffe          BL       GetPrepareStopBurninFlag
000350  e3500000          CMP      r0,#0
000354  0a000004          BEQ      |L1.876|
;;;326            {
;;;327                terninalPrintf("vSpaceExDrvTestTask[%d] Terminated !!\r\n", spaceIndex);
000358  e1a01005          MOV      r1,r5
00035c  e28f0f77          ADR      r0,|L1.1344|
000360  ebfffffe          BL       terninalPrintf
;;;328                vTaskDelete(NULL);
000364  e3a00000          MOV      r0,#0
000368  ebfffffe          BL       vTaskDelete
                  |L1.876|
;;;329            }
;;;330            currentTime = GetCurrentUTCTime();
00036c  ebfffffe          BL       GetCurrentUTCTime
000370  e1a08000          MOV      r8,r0
;;;331            if ((currentTime - lastTime) > BURNIN_SPACE_EX_INTERVAL)
000374  e59d1144          LDR      r1,[sp,#0x144]
000378  e0480001          SUB      r0,r8,r1
00037c  e350001e          CMP      r0,#0x1e
000380  9a000001          BLS      |L1.908|
;;;332            {
;;;333                //terninalPrintf("vSpaceExDrvTestTask heartbeat.\r\n");
;;;334                //lastTime = currentTime;
;;;335                //testLoop = FALSE;
;;;336                testLoop = TRUE;
000384  e3a00001          MOV      r0,#1
000388  e58d0140          STR      r0,[sp,#0x140]
                  |L1.908|
;;;337            }
;;;338            if (!testLoop)
00038c  e59d0140          LDR      r0,[sp,#0x140]
000390  e3500000          CMP      r0,#0
000394  1a000002          BNE      |L1.932|
;;;339            {
;;;340                vTaskDelay(100 / portTICK_RATE_MS);
000398  e3a0000a          MOV      r0,#0xa
00039c  ebfffffe          BL       vTaskDelay
;;;341                continue;
0003a0  eaffffe9          B        |L1.844|
                  |L1.932|
;;;342            }
;;;343            
;;;344            testLoop = FALSE;
0003a4  e3a00000          MOV      r0,#0
0003a8  e58d0140          STR      r0,[sp,#0x140]
;;;345            //if (GetModemFTPRunningStatus())
;;;346            //{
;;;347            //    lastTime = GetCurrentUTCTime();
;;;348            //    continue;
;;;349            //}
;;;350            /*
;;;351            if (pRadarInterface->setPowerStatusFunc != NULL)
;;;352            {
;;;353                pRadarInterface->setPowerStatusFunc(spaceIndex, TRUE);
;;;354                //vTaskDelay(1000 / portTICK_RATE_MS);
;;;355                
;;;356                //ReadRadarVersionString(spaceIndex, errorMsgBuffer);
;;;357                //After power on, send serveral commands to active radar & lidar, and wait to become stable!!
;;;358                while (1)
;;;359                {
;;;360                    //featureValue = pRadarInterface->checkFeaturnFunc(spaceIndex, &changeFlag, &spaceExMaterial[spaceIndex], &spaceExObject[spaceIndex], &spaceExObjectStatus[spaceIndex]);
;;;361                    //if (featureValue != VOS_FEATURE_IGNORE) {
;;;362                    if (ReadRadarVersionString(spaceIndex, errorMsgBuffer)) {
;;;363                        break;
;;;364                    }
;;;365                    vTaskDelay(200 / portTICK_RATE_MS);
;;;366                }
;;;367            }
;;;368            
;;;369            */
;;;370            
;;;371            if (pRadarInterface->setPowerStatusFunc != NULL)
0003ac  e59f00e4          LDR      r0,|L1.1176|
0003b0  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0003b4  e590000c          LDR      r0,[r0,#0xc]
0003b8  e3500000          CMP      r0,#0
0003bc  0a0000aa          BEQ      |L1.1644|
;;;372            {
;;;373                pRadarInterface->setPowerStatusFunc(spaceIndex, TRUE);
0003c0  e59f00d0          LDR      r0,|L1.1176|
0003c4  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0003c8  e3a01001          MOV      r1,#1
0003cc  e590200c          LDR      r2,[r0,#0xc]
0003d0  e1a00005          MOV      r0,r5
0003d4  e12fff32          BLX      r2
;;;374                pRadarInterface->RadarFlushFunc(spaceIndex);
0003d8  e59f00b8          LDR      r0,|L1.1176|
0003dc  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0003e0  e5901048          LDR      r1,[r0,#0x48]
0003e4  e1a00005          MOV      r0,r5
0003e8  e12fff31          BLX      r1
;;;375                VerRetryCount = 0;
0003ec  e3a07000          MOV      r7,#0
;;;376                while (1)
0003f0  ea00009b          B        |L1.1636|
                  |L1.1012|
;;;377                {
;;;378    
;;;379                    //if (ReadRadarVersionString(spaceIndex, errorMsgBuffer)) {
;;;380                     //   break;
;;;381                    //}
;;;382                    VerfeatureValue = pRadarInterface->RadarResultFunc(spaceIndex, 0x00,VersionCmd,RadarData);
0003f4  e59f009c          LDR      r0,|L1.1176|
0003f8  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0003fc  e28d3028          ADD      r3,sp,#0x28
000400  e28d201c          ADD      r2,sp,#0x1c
000404  e3a01000          MOV      r1,#0
000408  e590c034          LDR      r12,[r0,#0x34]
00040c  e1a00005          MOV      r0,r5
000410  e12fff3c          BLX      r12
000414  e1a06000          MOV      r6,r0
;;;383                    if( VerfeatureValue == TRUE)
000418  e3560001          CMP      r6,#1
00041c  1a000000          BNE      |L1.1060|
;;;384                    {
;;;385                        //terninalPrintf("Radar%d Version : Ver.%d.%d.%d.%d\r\n",spaceIndex+1,RadarData[0],RadarData[1],RadarData[2],RadarData[3]);
;;;386                        break;
000420  ea000090          B        |L1.1640|
                  |L1.1060|
;;;387                    }
;;;388                    else if((VerfeatureValue == RADAR_RETURN_BLANK) || (VerfeatureValue == RADAR_WAIT_NEXTDATA))
000424  e59f013c          LDR      r0,|L1.1384|
000428  e1560000          CMP      r6,r0
00042c  0a000001          BEQ      |L1.1080|
000430  e3560030          CMP      r6,#0x30
000434  1a000003          BNE      |L1.1096|
                  |L1.1080|
;;;389                    {
;;;390                        VerRetryCount++;
000438  e2877001          ADD      r7,r7,#1
;;;391                        if(VerRetryCount >= 10)
00043c  e357000a          CMP      r7,#0xa
000440  ba000087          BLT      |L1.1636|
;;;392                            break;
000444  ea000087          B        |L1.1640|
                  |L1.1096|
;;;393                    }
;;;394                    else if( VerfeatureValue == FALSE)
000448  e3560000          CMP      r6,#0
00044c  1a000064          BNE      |L1.1508|
;;;395                    {
;;;396                        #if (ENABLE_BURNIN_TESTER)
;;;397                        if (EnabledBurninTestMode())
000450  ebfffffe          BL       EnabledBurninTestMode
000454  e3500000          CMP      r0,#0
000458  0a000009          BEQ      |L1.1156|
;;;398                        {
;;;399                            sprintf(errorMsgBuffer,"[ERROR:RADAR] [%d]    VerfeatureValue == FALSE --\r\n", spaceIndex+1);
00045c  e2852001          ADD      r2,r5,#1
000460  e28f1f41          ADR      r1,|L1.1388|
000464  e28d0040          ADD      r0,sp,#0x40
000468  ebfffffe          BL       __2sprintf
;;;400                            AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
00046c  e28d0040          ADD      r0,sp,#0x40
000470  ebfffffe          BL       strlen
000474  e1a0b000          MOV      r11,r0
000478  e1a0100b          MOV      r1,r11
00047c  e28d0040          ADD      r0,sp,#0x40
000480  ebfffffe          BL       AppendBurninErrorLog
                  |L1.1156|
;;;401                        }
;;;402                        #endif
;;;403                        
;;;404                        
;;;405                        VerRetryCount++;
000484  e2877001          ADD      r7,r7,#1
;;;406                        if(VerRetryCount >= 10)
000488  e357000a          CMP      r7,#0xa
00048c  ba000043          BLT      |L1.1440|
;;;407                            break;
000490  ea000074          B        |L1.1640|
                  |L1.1172|
                          DCD      spaceExDrvIgnoreRun
                  |L1.1176|
                          DCD      pRadarInterface
                  |L1.1180|
                          DCD      xRunningSemaphore
                  |L1.1184|
                          DCD      testModeFlag
                  |L1.1188|
                          DCD      sampleIntervalTime
                  |L1.1192|
                          DCD      spaceExDrvWorkStatus
                  |L1.1196|
                          DCD      unstableIntervalTime
                  |L1.1200|
                          DCD      0x000005dc
                  |L1.1204|
0004b4  76537061          DCB      "vSpaceDrvTask[%d] WAIT---\r\n",0
0004b8  63654472
0004bc  76546173
0004c0  6b5b2564
0004c4  5d205741
0004c8  49542d2d
0004cc  2d0d0a00
                  |L1.1232|
                          DCD      threadWaitTime
                  |L1.1236|
0004d4  76537061          DCB      "vSpaceDrvTask[%d] GO---\r\n",0
0004d8  63654472
0004dc  76546173
0004e0  6b5b2564
0004e4  5d20474f
0004e8  2d2d2d0d
0004ec  0a00    
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L1.1264|
                          DCD      spaceExDrvPowerStatus
                  |L1.1268|
                          DCD      xSemaphore
                  |L1.1272|
0004f8  7aa700            DCB      "z",167,0
0004fb  0900              DCB      "\t",0
0004fd  00                DCB      0
0004fe  09d33d00          DCB      "\t",211,"=",0
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
000504  7aa700            DCB      "z",167,0
000507  180200            DCB      24,2,0
00050a  00                DCB      0
00050b  00                DCB      0
00050c  00                DCB      0
00050d  00                DCB      0
00050e  00                DCB      0
00050f  00                DCB      0
000510  00                DCB      0
000511  00                DCB      0
000512  00                DCB      0
000513  00                DCB      0
000514  00                DCB      0
000515  00                DCB      0
000516  00                DCB      0
000517  00                DCB      0
000518  00                DCB      0
000519  1ad33d            DCB      26,211,"="
                  |L1.1308|
00051c  76537061          DCB      "vSpaceExDrvTestTask[%d] Going...\r\n",0
000520  63654578
000524  44727654
000528  65737454
00052c  61736b5b
000530  25645d20
000534  476f696e
000538  672e2e2e
00053c  0d0a00  
00053f  00                DCB      0
                  |L1.1344|
000540  76537061          DCB      "vSpaceExDrvTestTask[%d] Terminated !!\r\n",0
000544  63654578
000548  44727654
00054c  65737454
000550  61736b5b
000554  25645d20
000558  5465726d
00055c  696e6174
000560  65642021
000564  210d0a00
                  |L1.1384|
                          DCD      0x50505050
                  |L1.1388|
00056c  5b455252          DCB      "[ERROR:RADAR] [%d]    VerfeatureValue == FALSE --\r\n",0
000570  4f523a52
000574  41444152
000578  5d205b25
00057c  645d2020
000580  20205665
000584  72666561
000588  74757265
00058c  56616c75
000590  65203d3d
000594  2046414c
000598  5345202d
00059c  2d0d0a00
                  |L1.1440|
;;;408                        pRadarInterface->setPowerStatusFunc(spaceIndex, FALSE);
0005a0  e51f0110          LDR      r0,|L1.1176|
0005a4  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0005a8  e3a01000          MOV      r1,#0
0005ac  e590200c          LDR      r2,[r0,#0xc]
0005b0  e1a00005          MOV      r0,r5
0005b4  e12fff32          BLX      r2
;;;409                        vTaskDelay(500 / portTICK_RATE_MS);
0005b8  e3a00032          MOV      r0,#0x32
0005bc  ebfffffe          BL       vTaskDelay
;;;410                        pRadarInterface->setPowerStatusFunc(spaceIndex, TRUE);
0005c0  e51f0130          LDR      r0,|L1.1176|
0005c4  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0005c8  e3a01001          MOV      r1,#1
0005cc  e590200c          LDR      r2,[r0,#0xc]
0005d0  e1a00005          MOV      r0,r5
0005d4  e12fff32          BLX      r2
;;;411                        vTaskDelay(500 / portTICK_RATE_MS);
0005d8  e3a00032          MOV      r0,#0x32
0005dc  ebfffffe          BL       vTaskDelay
0005e0  ea00001f          B        |L1.1636|
                  |L1.1508|
;;;412                    }
;;;413                    else if( VerfeatureValue == UART_FORMAT_ERR)
0005e4  e3560010          CMP      r6,#0x10
0005e8  1a00001d          BNE      |L1.1636|
;;;414                    {
;;;415                        VerRetryCount++;
0005ec  e2877001          ADD      r7,r7,#1
;;;416                        if(VerRetryCount >= 10)
0005f0  e357000a          CMP      r7,#0xa
0005f4  ba000000          BLT      |L1.1532|
;;;417                            break;
0005f8  ea00001a          B        |L1.1640|
                  |L1.1532|
;;;418                        if(pRadarInterface->setPowerStatusFunc != NULL) {
0005fc  e51f016c          LDR      r0,|L1.1176|
000600  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
000604  e590000c          LDR      r0,[r0,#0xc]
000608  e3500000          CMP      r0,#0
00060c  0a000014          BEQ      |L1.1636|
;;;419                            pRadarInterface->RadarinitBurningFunc(spaceIndex);
000610  e51f0180          LDR      r0,|L1.1176|
000614  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
000618  e590104c          LDR      r1,[r0,#0x4c]
00061c  e1a00005          MOV      r0,r5
000620  e12fff31          BLX      r1
;;;420                            pRadarInterface->setPowerStatusFunc(spaceIndex, FALSE);
000624  e51f0194          LDR      r0,|L1.1176|
000628  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
00062c  e3a01000          MOV      r1,#0
000630  e590200c          LDR      r2,[r0,#0xc]
000634  e1a00005          MOV      r0,r5
000638  e12fff32          BLX      r2
;;;421                            vTaskDelay(500 / portTICK_RATE_MS);
00063c  e3a00032          MOV      r0,#0x32
000640  ebfffffe          BL       vTaskDelay
;;;422                            pRadarInterface->setPowerStatusFunc(spaceIndex, TRUE);
000644  e51f01b4          LDR      r0,|L1.1176|
000648  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
00064c  e3a01001          MOV      r1,#1
000650  e590200c          LDR      r2,[r0,#0xc]
000654  e1a00005          MOV      r0,r5
000658  e12fff32          BLX      r2
;;;423                            vTaskDelay(500 / portTICK_RATE_MS);
00065c  e3a00032          MOV      r0,#0x32
000660  ebfffffe          BL       vTaskDelay
                  |L1.1636|
000664  eaffff62          B        |L1.1012|
                  |L1.1640|
000668  e1a00000          MOV      r0,r0                 ;386
                  |L1.1644|
;;;424                        }
;;;425                    }
;;;426                    //vTaskDelay(200 / portTICK_RATE_MS);
;;;427                }
;;;428            }
;;;429            
;;;430            //xSemaphoreGive(xRadar0Semaphore);
;;;431            for (int i = 0 ; i < BURNIN_SPACE_EX_COUNT_PER_LOOP ; i++)
00066c  e3a0b000          MOV      r11,#0
000670  ea00005b          B        |L1.2020|
                  |L1.1652|
;;;432            {
;;;433                
;;;434                /*
;;;435                terninalPrintf("spaceIndex = %d\r\n",spaceIndex);
;;;436                if(spaceIndex == 0)
;;;437                    xSemaphoreTake(xRadar0Semaphore, portMAX_DELAY);
;;;438                else if(spaceIndex == 1)
;;;439                    xSemaphoreTake(xRadar1Semaphore, portMAX_DELAY);
;;;440                */
;;;441                //vTaskDelay(500 / portTICK_RATE_MS);
;;;442                
;;;443                //tickLocalStart = xTaskGetTickCount();
;;;444                
;;;445                
;;;446                //featureValue = pRadarInterface->checkFeaturnFunc(spaceIndex, &changeFlag, &spaceExMaterial[spaceIndex], &spaceExObject[spaceIndex], &spaceExObjectStatus[spaceIndex]);
;;;447                featureValue = pRadarInterface->RadarResultFunc(spaceIndex, 0x02,ResultCmd,RadarData);
000674  e51f01e4          LDR      r0,|L1.1176|
000678  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
00067c  e28d3028          ADD      r3,sp,#0x28
000680  e28d2004          ADD      r2,sp,#4
000684  e3a01002          MOV      r1,#2
000688  e590c034          LDR      r12,[r0,#0x34]
00068c  e1a00005          MOV      r0,r5
000690  e12fff3c          BLX      r12
000694  e1a04000          MOV      r4,r0
;;;448                
;;;449                
;;;450                //terninalPrintf("vSpaceExDrvTestTask[%d], featureValue=%d, spaceExObjectStatus=%d\r\n", spaceIndex, featureValue, spaceExObjectStatus[spaceIndex]);
;;;451                /*
;;;452                switch (featureValue)
;;;453                {
;;;454                    case VOS_FEATURE_OCCUPIED:
;;;455                    case VOS_FEATURE_OCCUPIED_UN_STABLED:
;;;456                    case VOS_FEATURE_VACUUM:
;;;457                    case VOS_FEATURE_VACUUM_UN_STABLED:
;;;458                    case VOS_FEATURE_IGNORE:
;;;459                        if (spaceExObjectStatus[spaceIndex] == VOS_OBJECT_MOVING_ERROR) {
;;;460                            lidarBurninErrorCounter[spaceIndex]++;
;;;461                        }
;;;462                        break;
;;;463                    case RADAR_FEATURE_IGNORE_LIDAR_FAIL:
;;;464                        lidarBurninErrorCounter[spaceIndex]++;
;;;465                        break;
;;;466                    default:
;;;467                        sprintf(errorMsgBuffer, "vSpaceExDrvTestTask[%d] ==> featureValue[%d]=0x%x\r\n", spaceIndex, radarBurninCounter[spaceIndex], featureValue);
;;;468                        AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
;;;469                        terninalPrintf(errorMsgBuffer);
;;;470                        radarBurninErrorCounter[spaceIndex]++;
;;;471                        lidarBurninErrorCounter[spaceIndex]++;
;;;472                        break;
;;;473                }
;;;474                
;;;475                */
;;;476                //terninalPrintf("checkFeaturnFunc[%d] ==> featureValue=0x%x, counter=%d, SpentTime=%d\r\n", spaceIndex, featureValue, radarBurninCounter[spaceIndex], (xTaskGetTickCount() - tickLocalStart));
;;;477                if(featureValue == UART_FORMAT_ERR)
000698  e3540010          CMP      r4,#0x10
00069c  1a000019          BNE      |L1.1800|
;;;478                {
;;;479                    if(pRadarInterface->setPowerStatusFunc != NULL) 
0006a0  e51f0210          LDR      r0,|L1.1176|
0006a4  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0006a8  e590000c          LDR      r0,[r0,#0xc]
0006ac  e3500000          CMP      r0,#0
0006b0  0a000014          BEQ      |L1.1800|
;;;480                    {
;;;481                        pRadarInterface->RadarinitBurningFunc(spaceIndex);
0006b4  e51f0224          LDR      r0,|L1.1176|
0006b8  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0006bc  e590104c          LDR      r1,[r0,#0x4c]
0006c0  e1a00005          MOV      r0,r5
0006c4  e12fff31          BLX      r1
;;;482                        pRadarInterface->setPowerStatusFunc(spaceIndex, FALSE);
0006c8  e51f0238          LDR      r0,|L1.1176|
0006cc  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0006d0  e3a01000          MOV      r1,#0
0006d4  e590200c          LDR      r2,[r0,#0xc]
0006d8  e1a00005          MOV      r0,r5
0006dc  e12fff32          BLX      r2
;;;483                        vTaskDelay(500 / portTICK_RATE_MS);
0006e0  e3a00032          MOV      r0,#0x32
0006e4  ebfffffe          BL       vTaskDelay
;;;484                        pRadarInterface->setPowerStatusFunc(spaceIndex, TRUE);
0006e8  e51f0258          LDR      r0,|L1.1176|
0006ec  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0006f0  e3a01001          MOV      r1,#1
0006f4  e590200c          LDR      r2,[r0,#0xc]
0006f8  e1a00005          MOV      r0,r5
0006fc  e12fff32          BLX      r2
;;;485                        vTaskDelay(500 / portTICK_RATE_MS);
000700  e3a00032          MOV      r0,#0x32
000704  ebfffffe          BL       vTaskDelay
                  |L1.1800|
;;;486                    }                
;;;487                }
;;;488                
;;;489                if( (featureValue != RADAR_RETURN_BLANK) && (featureValue != RADAR_WAIT_NEXTDATA) && (featureValue != UART_FORMAT_ERR)) 
000708  e51f01a8          LDR      r0,|L1.1384|
00070c  e1540000          CMP      r4,r0
000710  0a00000f          BEQ      |L1.1876|
000714  e3540030          CMP      r4,#0x30
000718  0a00000d          BEQ      |L1.1876|
00071c  e3540010          CMP      r4,#0x10
000720  0a00000b          BEQ      |L1.1876|
;;;490                {
;;;491                    radarBurninCounter[spaceIndex]++;
000724  e59f0280          LDR      r0,|L1.2476|
000728  e7900105          LDR      r0,[r0,r5,LSL #2]
00072c  e2800001          ADD      r0,r0,#1
000730  e59f1274          LDR      r1,|L1.2476|
000734  e7810105          STR      r0,[r1,r5,LSL #2]
;;;492                    if(featureValue == FALSE)
000738  e3540000          CMP      r4,#0
00073c  1a000004          BNE      |L1.1876|
;;;493                        radarBurninErrorCounter[spaceIndex]++;
000740  e59f0268          LDR      r0,|L1.2480|
000744  e7900105          LDR      r0,[r0,r5,LSL #2]
000748  e2800001          ADD      r0,r0,#1
00074c  e59f125c          LDR      r1,|L1.2480|
000750  e7810105          STR      r0,[r1,r5,LSL #2]
                  |L1.1876|
;;;494                }
;;;495                
;;;496                
;;;497                if( (featureValue == TRUE) || (featureValue == FALSE) )
000754  e3540001          CMP      r4,#1
000758  0a000001          BEQ      |L1.1892|
00075c  e3540000          CMP      r4,#0
000760  1a000001          BNE      |L1.1900|
                  |L1.1892|
;;;498                {
;;;499                    RetryCount = 0;
000764  e3a0a000          MOV      r10,#0
000768  ea000018          B        |L1.2000|
                  |L1.1900|
;;;500                }
;;;501                else if((featureValue == RADAR_RETURN_BLANK) || (featureValue == RADAR_WAIT_NEXTDATA))
00076c  e51f020c          LDR      r0,|L1.1384|
000770  e1540000          CMP      r4,r0
000774  0a000001          BEQ      |L1.1920|
000778  e3540030          CMP      r4,#0x30
00077c  1a000013          BNE      |L1.2000|
                  |L1.1920|
;;;502                {
;;;503                    RetryCount++;
000780  e28aa001          ADD      r10,r10,#1
;;;504                    if(RetryCount >= 10)
000784  e35a000a          CMP      r10,#0xa
000788  ba000010          BLT      |L1.2000|
;;;505                    {
;;;506                        terninalPrintf("Radar%d reset power.\r\n", spaceIndex);
00078c  e1a01005          MOV      r1,r5
000790  e28f0f87          ADR      r0,|L1.2484|
000794  ebfffffe          BL       terninalPrintf
;;;507                        pRadarInterface->setPowerStatusFunc(spaceIndex, FALSE);
000798  e51f0308          LDR      r0,|L1.1176|
00079c  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0007a0  e3a01000          MOV      r1,#0
0007a4  e590200c          LDR      r2,[r0,#0xc]
0007a8  e1a00005          MOV      r0,r5
0007ac  e12fff32          BLX      r2
;;;508                        vTaskDelay(500 / portTICK_RATE_MS);
0007b0  e3a00032          MOV      r0,#0x32
0007b4  ebfffffe          BL       vTaskDelay
;;;509                        pRadarInterface->setPowerStatusFunc(spaceIndex, TRUE);
0007b8  e51f0328          LDR      r0,|L1.1176|
0007bc  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0007c0  e3a01001          MOV      r1,#1
0007c4  e590200c          LDR      r2,[r0,#0xc]
0007c8  e1a00005          MOV      r0,r5
0007cc  e12fff32          BLX      r2
                  |L1.2000|
;;;510                    }
;;;511                }
;;;512                    
;;;513                
;;;514                
;;;515                
;;;516                    
;;;517                //radarBurninCounter[spaceIndex]++;
;;;518                //lidarBurninCounter[spaceIndex]++;
;;;519                /*
;;;520                if(spaceIndex == 0)
;;;521                    xSemaphoreGive(xRadar1Semaphore);
;;;522                else if(spaceIndex == 1)
;;;523                    xSemaphoreGive(xRadar0Semaphore);
;;;524                */
;;;525    
;;;526                
;;;527                //vTaskDelay(BURNIN_SPACE_EX_GAP_TIME / portTICK_RATE_MS);
;;;528                
;;;529                
;;;530                if (GetPrepareStopBurninFlag()) {
0007d0  ebfffffe          BL       GetPrepareStopBurninFlag
0007d4  e3500000          CMP      r0,#0
0007d8  0a000000          BEQ      |L1.2016|
;;;531                    break;
0007dc  ea000002          B        |L1.2028|
                  |L1.2016|
0007e0  e28bb001          ADD      r11,r11,#1            ;431
                  |L1.2020|
0007e4  e35b0064          CMP      r11,#0x64             ;431
0007e8  baffffa1          BLT      |L1.1652|
                  |L1.2028|
0007ec  e1a00000          MOV      r0,r0
;;;532                }
;;;533            }
;;;534            if(pRadarInterface->setPowerStatusFunc != NULL) {
0007f0  e51f0360          LDR      r0,|L1.1176|
0007f4  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
0007f8  e590000c          LDR      r0,[r0,#0xc]
0007fc  e3500000          CMP      r0,#0
000800  0a00000a          BEQ      |L1.2096|
;;;535                pRadarInterface->RadarinitBurningFunc(spaceIndex);
000804  e51f0374          LDR      r0,|L1.1176|
000808  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
00080c  e590104c          LDR      r1,[r0,#0x4c]
000810  e1a00005          MOV      r0,r5
000814  e12fff31          BLX      r1
;;;536                pRadarInterface->setPowerStatusFunc(spaceIndex, FALSE);
000818  e51f0388          LDR      r0,|L1.1176|
00081c  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
000820  e3a01000          MOV      r1,#0
000824  e590200c          LDR      r2,[r0,#0xc]
000828  e1a00005          MOV      r0,r5
00082c  e12fff32          BLX      r2
                  |L1.2096|
;;;537            }
;;;538            lastTime = GetCurrentUTCTime();
000830  ebfffffe          BL       GetCurrentUTCTime
000834  e58d0144          STR      r0,[sp,#0x144]
000838  eafffec3          B        |L1.844|
;;;539        }
;;;540    }
;;;541    #endif
                          ENDP

                  swInit PROC
;;;543    #if (ENABLE_BURNIN_TESTER)
;;;544    static BOOL swInit(void)
00083c  e92d401c          PUSH     {r2-r4,lr}
;;;545    {
;;;546        PowerRegCallback(&SpaceExDrvPowerCallabck);
000840  e59f0184          LDR      r0,|L1.2508|
000844  ebfffffe          BL       PowerRegCallback
;;;547        
;;;548        //xRadar0Semaphore = xSemaphoreCreateBinary(); 
;;;549        //xRadar1Semaphore = xSemaphoreCreateBinary(); 
;;;550        xTaskCreate(vSpaceExDrvTestTask, "vSpaceExDrvTestTask1", 1024*10, (void*)0, SPACE_DRV_THREAD_PROI, NULL);
000848  e3a00000          MOV      r0,#0
00084c  e3a01004          MOV      r1,#4
000850  e58d0004          STR      r0,[sp,#4]
000854  e1a03000          MOV      r3,r0
000858  e3a02b0a          MOV      r2,#0x2800
00085c  e58d1000          STR      r1,[sp,#0]
000860  e28f1f5a          ADR      r1,|L1.2512|
000864  e59f017c          LDR      r0,|L1.2536|
000868  ebfffffe          BL       xTaskCreate
;;;551        vTaskDelay(50 / portTICK_RATE_MS);
00086c  e3a00005          MOV      r0,#5
000870  ebfffffe          BL       vTaskDelay
;;;552        xTaskCreate(vSpaceExDrvTestTask, "vSpaceExDrvTestTask2", 1024*10, (void*)1, SPACE_DRV_THREAD_PROI, NULL);
000874  e3a00000          MOV      r0,#0
000878  e3a01004          MOV      r1,#4
00087c  e3a03001          MOV      r3,#1
000880  e3a02b0a          MOV      r2,#0x2800
000884  e58d1000          STR      r1,[sp,#0]
000888  e28f1f57          ADR      r1,|L1.2540|
00088c  e58d0004          STR      r0,[sp,#4]
000890  e59f0150          LDR      r0,|L1.2536|
000894  ebfffffe          BL       xTaskCreate
;;;553        //vTaskStartScheduler();
;;;554        return TRUE;
000898  e3a00001          MOV      r0,#1
;;;555    }
00089c  e8bd801c          POP      {r2-r4,pc}
;;;556    #else
                          ENDP

                  printfBuffData PROC
;;;571    
;;;572    static void printfBuffData(char* str, uint8_t* data, int len)
0008a0  e92d41f0          PUSH     {r4-r8,lr}
;;;573    {
0008a4  e1a05000          MOV      r5,r0
0008a8  e1a06001          MOV      r6,r1
0008ac  e1a07002          MOV      r7,r2
;;;574        int i;
;;;575        sysprintf("\r\n %s: len = %d...\r\n", str, len);
0008b0  e1a02007          MOV      r2,r7
0008b4  e1a01005          MOV      r1,r5
0008b8  e28f0f51          ADR      r0,|L1.2564|
0008bc  ebfffffe          BL       sysprintf
;;;576        
;;;577        for(i = 0; i<len; i++)
0008c0  e3a04000          MOV      r4,#0
0008c4  ea00000b          B        |L1.2296|
                  |L1.2248|
;;;578        { 
;;;579            sysprintf("0x%02x, ",(unsigned char)data[i]);
0008c8  e7d61004          LDRB     r1,[r6,r4]
0008cc  e28f0f52          ADR      r0,|L1.2588|
0008d0  ebfffffe          BL       sysprintf
;;;580            if((i%16) == 15)
0008d4  e1a01fc4          ASR      r1,r4,#31
0008d8  e0841e21          ADD      r1,r4,r1,LSR #28
0008dc  e1a01241          ASR      r1,r1,#4
0008e0  e0441201          SUB      r1,r4,r1,LSL #4
0008e4  e351000f          CMP      r1,#0xf
0008e8  1a000001          BNE      |L1.2292|
;;;581                sysprintf("\r\n");
0008ec  e28f00d4          ADR      r0,|L1.2504|
0008f0  ebfffffe          BL       sysprintf
                  |L1.2292|
0008f4  e2844001          ADD      r4,r4,#1              ;577
                  |L1.2296|
0008f8  e1540007          CMP      r4,r7                 ;577
0008fc  bafffff1          BLT      |L1.2248|
;;;582        }
;;;583        sysprintf("\r\n");
000900  e28f00c0          ADR      r0,|L1.2504|
000904  ebfffffe          BL       sysprintf
;;;584        
;;;585    }
000908  e8bd81f0          POP      {r4-r8,pc}
;;;586    
                          ENDP

                  hexStringToByteArray PROC
;;;587    static uint8_t* hexStringToByteArray(char* hexStr, int* returnLen) 
00090c  e92d43f8          PUSH     {r3-r9,lr}
;;;588    {
000910  e1a07000          MOV      r7,r0
000914  e1a08001          MOV      r8,r1
;;;589        int len = strlen(hexStr);
000918  e1a00007          MOV      r0,r7
00091c  ebfffffe          BL       strlen
000920  e1a04000          MOV      r4,r0
;;;590        if(len == 0)
000924  e3540000          CMP      r4,#0
000928  1a000001          BNE      |L1.2356|
;;;591        {
;;;592            return NULL;
00092c  e3a00000          MOV      r0,#0
                  |L1.2352|
;;;593        }
;;;594        uint8_t* data = pvPortMalloc(len/2);
;;;595        *returnLen = len/2;
;;;596        for (int i = 0; i < len; i += 2)    
;;;597        {
;;;598            //unsigned long strtoul (const char* str, char** endptr, int base);
;;;599            char hexStrTmp[3];
;;;600            memcpy(hexStrTmp, hexStr+i, sizeof(char)*2);
;;;601            hexStrTmp[2] = 0x0;
;;;602            data[i/2] = strtoul (hexStrTmp, NULL, 16);;
;;;603        }
;;;604        return data;
;;;605    }
000930  e8bd83f8          POP      {r3-r9,pc}
                  |L1.2356|
000934  e1a05004          MOV      r5,r4                 ;594
000938  e0841fa5          ADD      r1,r4,r5,LSR #31      ;594
00093c  e1a000c1          ASR      r0,r1,#1              ;594
000940  ebfffffe          BL       pvPortMalloc
000944  e1a06000          MOV      r6,r0                 ;594
000948  e1a00004          MOV      r0,r4                 ;595
00094c  e0841fa0          ADD      r1,r4,r0,LSR #31      ;595
000950  e1a010c1          ASR      r1,r1,#1              ;595
000954  e5881000          STR      r1,[r8,#0]            ;595
000958  e3a05000          MOV      r5,#0                 ;596
00095c  ea00000e          B        |L1.2460|
                  |L1.2400|
000960  e0870005          ADD      r0,r7,r5              ;600
000964  e5d01000          LDRB     r1,[r0,#0]            ;600
000968  e5cd1000          STRB     r1,[sp,#0]            ;600
00096c  e5d00001          LDRB     r0,[r0,#1]            ;600
000970  e5cd0001          STRB     r0,[sp,#1]            ;600
000974  e3a00000          MOV      r0,#0                 ;601
000978  e5cd0002          STRB     r0,[sp,#2]            ;601
00097c  e3a02010          MOV      r2,#0x10              ;602
000980  e3a01000          MOV      r1,#0                 ;602
000984  e1a0000d          MOV      r0,sp                 ;602
000988  ebfffffe          BL       strtoul
00098c  e1a09005          MOV      r9,r5                 ;602
000990  e0851fa9          ADD      r1,r5,r9,LSR #31      ;602
000994  e7c600c1          STRB     r0,[r6,r1,ASR #1]     ;602
000998  e2855002          ADD      r5,r5,#2              ;596
                  |L1.2460|
00099c  e1550004          CMP      r5,r4                 ;596
0009a0  baffffee          BLT      |L1.2400|
0009a4  e1a00006          MOV      r0,r6                 ;604
0009a8  eaffffe0          B        |L1.2352|
                  |L1.2476|
                          DCD      radarBurninCounter
                  |L1.2480|
                          DCD      radarBurninErrorCounter
                  |L1.2484|
0009b4  52616461          DCB      "Radar%d reset power."
0009b8  72256420
0009bc  72657365
0009c0  7420706f
0009c4  7765722e
                  |L1.2504|
0009c8  0d0a00            DCB      "\r\n",0
0009cb  00                DCB      0
                  |L1.2508|
                          DCD      SpaceExDrvPowerCallabck
                  |L1.2512|
0009d0  76537061          DCB      "vSpaceExDrvTestTask1",0
0009d4  63654578
0009d8  44727654
0009dc  65737454
0009e0  61736b31
0009e4  00      
0009e5  00                DCB      0
0009e6  00                DCB      0
0009e7  00                DCB      0
                  |L1.2536|
                          DCD      vSpaceExDrvTestTask
                  |L1.2540|
0009ec  76537061          DCB      "vSpaceExDrvTestTask2",0
0009f0  63654578
0009f4  44727654
0009f8  65737454
0009fc  61736b32
000a00  00      
000a01  00                DCB      0
000a02  00                DCB      0
000a03  00                DCB      0
                  |L1.2564|
000a04  0d0a2025          DCB      "\r\n %s: len = %d...\r\n",0
000a08  733a206c
000a0c  656e203d
000a10  2025642e
000a14  2e2e0d0a
000a18  00      
000a19  00                DCB      0
000a1a  00                DCB      0
000a1b  00                DCB      0
                  |L1.2588|
000a1c  30782530          DCB      "0x%02x, ",0
000a20  32782c20
000a24  00      
000a25  00                DCB      0
000a26  00                DCB      0
000a27  00                DCB      0
                          ENDP

                  SpaceExDrvInit PROC
;;;608    /*-----------------------------------------*/
;;;609    BOOL SpaceExDrvInit(BOOL flag)
000a28  e92d4010          PUSH     {r4,lr}
;;;610    {
000a2c  e1a04000          MOV      r4,r0
;;;611        sysprintf("SpaceExDrvInit!!\n");
000a30  e28f0f66          ADR      r0,|L1.3024|
000a34  ebfffffe          BL       sysprintf
;;;612        testModeFlag = flag;
000a38  e51f05a0          LDR      r0,|L1.1184|
000a3c  e5c04000          STRB     r4,[r0,#0]  ; testModeFlag
;;;613        //pRadarInterface = RadarGetInterface(RADAR_AV_DESIGN_INTERFACE_INDEX);
;;;614        pRadarInterface = RadarGetInterface(NEWRADAR_INTERFACE_INDEX);
000a40  e3a00002          MOV      r0,#2
000a44  ebfffffe          BL       RadarGetInterface
000a48  e51f15b8          LDR      r1,|L1.1176|
000a4c  e5810000          STR      r0,[r1,#0]  ; pRadarInterface
;;;615        
;;;616        if(pRadarInterface == NULL)
000a50  e2810000          ADD      r0,r1,#0
000a54  e5900000          LDR      r0,[r0,#0]  ; pRadarInterface
000a58  e3500000          CMP      r0,#0
000a5c  1a000003          BNE      |L1.2672|
;;;617        {
;;;618            sysprintf("SpaceExDrvInit ERROR (pRadarInterface == NULL)!!\n");
000a60  e28f0f5f          ADR      r0,|L1.3044|
000a64  ebfffffe          BL       sysprintf
;;;619            return FALSE;
000a68  e3a00000          MOV      r0,#0
                  |L1.2668|
;;;620        }
;;;621        if(pRadarInterface->initFunc() == FALSE)
;;;622        {
;;;623            sysprintf("SpaceExDrvInit ERROR (initFunc false)!!\n");
;;;624            return FALSE;
;;;625        }
;;;626        if(swInit() == FALSE)
;;;627        {
;;;628            sysprintf("SpaceExDrvInit ERROR (swInit false)!!\n");
;;;629            return FALSE;
;;;630        }
;;;631        
;;;632        sysprintf("SpaceExDrvInit OK!!\n");
;;;633        return TRUE;
;;;634    }
000a6c  e8bd8010          POP      {r4,pc}
                  |L1.2672|
000a70  e51f15e0          LDR      r1,|L1.1176|
000a74  e5911000          LDR      r1,[r1,#0]            ;621  ; pRadarInterface
000a78  e5910000          LDR      r0,[r1,#0]            ;621
000a7c  e12fff30          BLX      r0                    ;621
000a80  e3500000          CMP      r0,#0                 ;621
000a84  1a000003          BNE      |L1.2712|
000a88  e28f0f62          ADR      r0,|L1.3096|
000a8c  ebfffffe          BL       sysprintf
000a90  e3a00000          MOV      r0,#0                 ;624
000a94  eafffff4          B        |L1.2668|
                  |L1.2712|
000a98  ebfffffe          BL       swInit
000a9c  e3500000          CMP      r0,#0                 ;626
000aa0  1a000003          BNE      |L1.2740|
000aa4  e28f0f66          ADR      r0,|L1.3140|
000aa8  ebfffffe          BL       sysprintf
000aac  e3a00000          MOV      r0,#0                 ;629
000ab0  eaffffed          B        |L1.2668|
                  |L1.2740|
000ab4  e28f0e1b          ADR      r0,|L1.3180|
000ab8  ebfffffe          BL       sysprintf
000abc  e3a00001          MOV      r0,#1                 ;633
000ac0  eaffffe9          B        |L1.2668|
;;;635    
                          ENDP

                  SpaceExGetCurrentCarId PROC
;;;743    }
;;;744    int SpaceExGetCurrentCarId(uint8_t index)
000ac4  e1a01000          MOV      r1,r0
;;;745    {
;;;746        //sysprintf("\r\n ->SpaceExGetCurrentCarId [%d]: mCarId = %d ...\r\n", index, GetMeterStorageData()->carId[index]);
;;;747        //return GetMeterStorageData()->carId[index];
;;;748        return 0;
000ac8  e3a00000          MOV      r0,#0
;;;749    }
000acc  e12fff1e          BX       lr
;;;750    
                          ENDP

                  SpaceExSetCurrentCarId PROC
;;;751    void SpaceExSetCurrentCarId(uint8_t index, int value)
000ad0  e12fff1e          BX       lr
;;;752    {
;;;753        //sysprintf("\r\n ->SpaceExGetCurrentCarId [%d]: mCarId = %d ...\r\n", index, mCarId[index]);
;;;754        #if(0)
;;;755        if(value == 0)
;;;756        {
;;;757            GetMeterStorageData()->carId[index] = value;
;;;758        }
;;;759        else
;;;760        {
;;;761            GetMeterStorageData()->carId[index] = GetMeterStorageData()->carId[index] + value;
;;;762        }
;;;763        MeterStorageFlush(FALSE);
;;;764        #if(ENABLE_LOG_FUNCTION)
;;;765        {
;;;766            char str[512];
;;;767            sprintf(str, " !! RESET CAR ID !!!! ->SpaceExSetCurrentCarId [%d, %d]: mCarId = %d ...\r\n", index, value, GetMeterStorageData()->carId[index]);
;;;768            LoglibPrintf(LOG_TYPE_INFO, str, FALSE);
;;;769        }
;;;770        #else
;;;771        sysprintf("\r\n ->SpaceExSetCurrentCarId [%d, %d]: mCarId = %d ...\r\n", index, value, mCarId[index]);
;;;772        #endif
;;;773        #endif
;;;774    }
;;;775    
                          ENDP

                  SpaceExStart PROC
;;;777    
;;;778    BOOL SpaceExStart(int spaceIndex)
000ad4  e92d4010          PUSH     {r4,lr}
;;;779    {
000ad8  e1a04000          MOV      r4,r0
;;;780        //threadWaitTime[spaceIndex] = (0/portTICK_RATE_MS);
;;;781        sysprintf(" !!! SpaceExStart [%d]!!!\r\n", spaceIndex);
000adc  e1a01004          MOV      r1,r4
000ae0  e28f0f67          ADR      r0,|L1.3204|
000ae4  ebfffffe          BL       sysprintf
;;;782        xSemaphoreGive(xSemaphore[spaceIndex]);
000ae8  e51f15fc          LDR      r1,|L1.1268|
000aec  e7910104          LDR      r0,[r1,r4,LSL #2]
000af0  e3a03000          MOV      r3,#0
000af4  e1a02003          MOV      r2,r3
000af8  e1a01003          MOV      r1,r3
000afc  ebfffffe          BL       xQueueGenericSend
;;;783        return TRUE;
000b00  e3a00001          MOV      r0,#1
;;;784    }
000b04  e8bd8010          POP      {r4,pc}
;;;785    
                          ENDP

                  SpaceExSemaphoreTotalTake PROC
;;;797    
;;;798    void SpaceExSemaphoreTotalTake(void)
000b08  e92d4010          PUSH     {r4,lr}
;;;799    {
;;;800        xSemaphoreTake(xRunningSemaphore[0], portMAX_DELAY);
000b0c  e51f1678          LDR      r1,|L1.1180|
000b10  e3a03000          MOV      r3,#0
000b14  e3e02000          MVN      r2,#0
000b18  e5910000          LDR      r0,[r1,#0]  ; xRunningSemaphore
000b1c  e1a01003          MOV      r1,r3
000b20  ebfffffe          BL       xQueueGenericReceive
;;;801        xSemaphoreTake(xRunningSemaphore[1], portMAX_DELAY);
000b24  e51f1690          LDR      r1,|L1.1180|
000b28  e3a03000          MOV      r3,#0
000b2c  e3e02000          MVN      r2,#0
000b30  e5910004          LDR      r0,[r1,#4]  ; xRunningSemaphore
000b34  e1a01003          MOV      r1,r3
000b38  ebfffffe          BL       xQueueGenericReceive
;;;802    }
000b3c  e8bd8010          POP      {r4,pc}
;;;803    
                          ENDP

                  SpaceExSemaphoreTotalGive PROC
;;;804    void SpaceExSemaphoreTotalGive(void)
000b40  e92d4010          PUSH     {r4,lr}
;;;805    {
;;;806        xSemaphoreGive(xRunningSemaphore[0]);
000b44  e51f16b0          LDR      r1,|L1.1180|
000b48  e3a03000          MOV      r3,#0
000b4c  e1a02003          MOV      r2,r3
000b50  e5910000          LDR      r0,[r1,#0]  ; xRunningSemaphore
000b54  e1a01003          MOV      r1,r3
000b58  ebfffffe          BL       xQueueGenericSend
;;;807        xSemaphoreGive(xRunningSemaphore[1]);
000b5c  e51f16c8          LDR      r1,|L1.1180|
000b60  e3a03000          MOV      r3,#0
000b64  e1a02003          MOV      r2,r3
000b68  e5910004          LDR      r0,[r1,#4]  ; xRunningSemaphore
000b6c  e1a01003          MOV      r1,r3
000b70  ebfffffe          BL       xQueueGenericSend
;;;808    }
000b74  e8bd8010          POP      {r4,pc}
;;;809    
                          ENDP

                  SpaceExSetSampleInterval PROC
;;;810    void SpaceExSetSampleInterval(int time)
000b78  e51f16dc          LDR      r1,|L1.1188|
;;;811    {
;;;812        sampleIntervalTime = time;
000b7c  e5810000          STR      r0,[r1,#0]  ; sampleIntervalTime
;;;813    }
000b80  e12fff1e          BX       lr
;;;814    
                          ENDP

                  SpaceExSetUnstableInterval PROC
;;;815    void SpaceExSetUnstableInterval(int time)
000b84  e51f16e0          LDR      r1,|L1.1196|
;;;816    {
;;;817        unstableIntervalTime = time;
000b88  e5810000          STR      r0,[r1,#0]  ; unstableIntervalTime
;;;818    }
000b8c  e12fff1e          BX       lr
;;;819    
                          ENDP

                  GetRadarBurninTestCounter PROC
;;;820    #if (ENABLE_BURNIN_TESTER)
;;;821    uint32_t GetRadarBurninTestCounter(int spaceIndex)
000b90  e1a01000          MOV      r1,r0
;;;822    {
;;;823        return radarBurninCounter[spaceIndex];
000b94  e51f01f0          LDR      r0,|L1.2476|
000b98  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;824    }
000b9c  e12fff1e          BX       lr
;;;825    
                          ENDP

                  GetRadarBurninTestErrorCounter PROC
;;;826    uint32_t GetRadarBurninTestErrorCounter(int spaceIndex)
000ba0  e1a01000          MOV      r1,r0
;;;827    {
;;;828        return radarBurninErrorCounter[spaceIndex];
000ba4  e51f01fc          LDR      r0,|L1.2480|
000ba8  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;829    }
000bac  e12fff1e          BX       lr
;;;830    
                          ENDP

                  GetLidarBurninTestCounter PROC
;;;831    uint32_t GetLidarBurninTestCounter(int spaceIndex)
000bb0  e1a01000          MOV      r1,r0
;;;832    {
;;;833        return lidarBurninCounter[spaceIndex];
000bb4  e59f00e4          LDR      r0,|L1.3232|
000bb8  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;834    }
000bbc  e12fff1e          BX       lr
;;;835    
                          ENDP

                  GetLidarBurninTestErrorCounter PROC
;;;836    uint32_t GetLidarBurninTestErrorCounter(int spaceIndex)
000bc0  e1a01000          MOV      r1,r0
;;;837    {
;;;838        return lidarBurninErrorCounter[spaceIndex];
000bc4  e59f00d8          LDR      r0,|L1.3236|
000bc8  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;839    }
000bcc  e12fff1e          BX       lr
;;;840    #endif
                          ENDP

                  |L1.3024|
000bd0  53706163          DCB      "SpaceExDrvInit!!\n",0
000bd4  65457844
000bd8  7276496e
000bdc  69742121
000be0  0a00    
000be2  00                DCB      0
000be3  00                DCB      0
                  |L1.3044|
000be4  53706163          DCB      "SpaceExDrvInit ERROR (pRadarInterface == NULL)!!\n",0
000be8  65457844
000bec  7276496e
000bf0  69742045
000bf4  52524f52
000bf8  20287052
000bfc  61646172
000c00  496e7465
000c04  72666163
000c08  65203d3d
000c0c  204e554c
000c10  4c292121
000c14  0a00    
000c16  00                DCB      0
000c17  00                DCB      0
                  |L1.3096|
000c18  53706163          DCB      "SpaceExDrvInit ERROR (initFunc false)!!\n",0
000c1c  65457844
000c20  7276496e
000c24  69742045
000c28  52524f52
000c2c  2028696e
000c30  69744675
000c34  6e632066
000c38  616c7365
000c3c  2921210a
000c40  00      
000c41  00                DCB      0
000c42  00                DCB      0
000c43  00                DCB      0
                  |L1.3140|
000c44  53706163          DCB      "SpaceExDrvInit ERROR (swInit false)!!\n",0
000c48  65457844
000c4c  7276496e
000c50  69742045
000c54  52524f52
000c58  20287377
000c5c  496e6974
000c60  2066616c
000c64  73652921
000c68  210a00  
000c6b  00                DCB      0
                  |L1.3180|
000c6c  53706163          DCB      "SpaceExDrvInit OK!!\n",0
000c70  65457844
000c74  7276496e
000c78  6974204f
000c7c  4b21210a
000c80  00      
000c81  00                DCB      0
000c82  00                DCB      0
000c83  00                DCB      0
                  |L1.3204|
000c84  20212121          DCB      " !!! SpaceExStart [%d]!!!\r\n",0
000c88  20537061
000c8c  63654578
000c90  53746172
000c94  74205b25
000c98  645d2121
000c9c  210d0a00
                  |L1.3232|
                          DCD      lidarBurninCounter
                  |L1.3236|
                          DCD      lidarBurninErrorCounter

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  errorMsgBuffer
                          %        256

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  205b5370          DCB      " [SpaceExDrv] ",0
000004  61636545
000008  78447276
00000c  5d2000  

                          AREA ||.data||, DATA, ALIGN=2

                  threadWaitTime
                          DCD      0xffffffff
                          DCD      0xffffffff
                  sampleIntervalTime
                          DCD      0x00000bb8
                  unstableIntervalTime
                          DCD      0x00000bb8
                  xRunningSemaphore
                          DCD      0x00000000
                          DCD      0x00000000
                  testModeFlag
000018  00                DCB      0x00
                  spaceExDrvPowerStatus
000019  0101              DCB      0x01,0x01
                  spaceExDrvIgnoreRun
00001b  00                DCB      0x00
                  spaceExDrvWorkStatus
00001c  01010000          DCB      0x01,0x01,0x00,0x00
                  SpaceExDrvPowerCallabck
                          DCD      ||.conststring||
                          DCD      SpaceExDrvPreOffCallback
                          DCD      SpaceExDrvOffCallback
                          DCD      SpaceExDrvOnCallback
                          DCD      SpaceExDrvCheckStatus
                  spaceExMaterial
                          DCD      0x00000000
                          DCD      0x00000000
                  spaceExObject
                          DCD      0x00000000
                          DCD      0x00000000
                  spaceExObjectStatus
                          DCD      0x00000000
                          DCD      0x00000000
                  radarBurninCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  radarBurninErrorCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  lidarBurninCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  lidarBurninErrorCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  pRadarInterface
                          DCD      0x00000000
                  xSemaphore
                          %        8
                  xRadarSemaphore
                          DCD      0x00000000
                  xRadar0Semaphore
                          DCD      0x00000000
                  xRadar1Semaphore
                          DCD      0x00000000
