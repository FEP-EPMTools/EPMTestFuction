; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guiversion.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guiversion.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guiversion.crf src\user\guiversion.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;73     
;;;74     static void updateBG(void)
000000  e92d4010          PUSH     {r4,lr}
;;;75     {
;;;76         //TickType_t tickLocalStart = xTaskGetTickCount();
;;;77         //show BG and item
;;;78         //Draw BG
;;;79         //EPDDrawMulti(FALSE,EPD_PICT_ALL_WHITE_INDEX,0,0);
;;;80         
;;;81         EPDDrawContainByIDPos(TRUE,EPD_PICT_LOADING,500,250);
000004  e3a030fa          MOV      r3,#0xfa
000008  e3a02f7d          MOV      r2,#0x1f4
00000c  e3a010d4          MOV      r1,#0xd4
000010  e3a00001          MOV      r0,#1
000014  ebfffffe          BL       EPDDrawContainByIDPos
;;;82         EPDDrawContainByIDPos(FALSE,EPD_PICT_ALL_WHITE_INDEX,0,0);
000018  e3a03000          MOV      r3,#0
00001c  e1a02003          MOV      r2,r3
000020  e3a01003          MOV      r1,#3
000024  e1a00003          MOV      r0,r3
000028  ebfffffe          BL       EPDDrawContainByIDPos
;;;83         //TITLE
;;;84      /*   EPDDrawStringMax(FALSE,"Tool",X_HEAD_TITLE,Y_HEAD_TITLE,FALSE);
;;;85         //MENU
;;;86         for(int i = 0; ; i++)
;;;87         {
;;;88             //Dont Show Quit
;;;89             if(item[i].charItem == 'q')
;;;90             {
;;;91                 maxSelectItem=i;
;;;92                 break;
;;;93             }
;;;94             if(item[i].itemName == NULL)
;;;95             {
;;;96                 maxSelectItem=i;
;;;97                 break;
;;;98             }
;;;99             EPDDrawStringMax(FALSE,item[i].itemName,180,104+(i*STRING_HEIGHT),FALSE);
;;;100            EPDDrawStringMax(FALSE,"-",150,104+(i*STRING_HEIGHT),TRUE);
;;;101            //EPDDrawContainByIDPos(FALSE,EPD_PICT_LINE_SMALL_2_INDEX,150,104+(i*STRING_HEIGHT));
;;;102        }
;;;103        //Select Item//
;;;104        EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,150,104+(nowIndex*STRING_HEIGHT)); */
;;;105        //terninalPrintf("======== Tool ========[INFO GUI] <GuiOnDraw>  [%d0'ms].\n", xTaskGetTickCount() - tickLocalStart);
;;;106    }
00002c  e8bd8010          POP      {r4,pc}
;;;107    
                          ENDP

                  GuiVersionOnDraw PROC
;;;114    /*-----------------------------------------*/
;;;115    BOOL GuiVersionOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int para2, int para3)
000030  e92d41f0          PUSH     {r4-r8,lr}
;;;116    {
000034  e1a05000          MOV      r5,r0
000038  e1a04001          MOV      r4,r1
00003c  e1a06002          MOV      r6,r2
000040  e1a07003          MOV      r7,r3
;;;117        if((reFreshPara == GUI_TIMER_ENABLE) || (reFreshPara == GUI_TIMER_DISABLE))
000044  e3540005          CMP      r4,#5
000048  0a000001          BEQ      |L1.84|
00004c  e3540006          CMP      r4,#6
000050  1a00000f          BNE      |L1.148|
                  |L1.84|
;;;118        {
;;;119            
;;;120            if(reFreshPara == GUI_TIMER_ENABLE)
000054  e3540005          CMP      r4,#5
000058  1a000006          BNE      |L1.120|
;;;121                pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
00005c  e59f02ec          LDR      r0,|L1.848|
000060  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000064  e3a01064          MOV      r1,#0x64
000068  e590200c          LDR      r2,[r0,#0xc]
00006c  e3a00002          MOV      r0,#2
000070  e12fff32          BLX      r2
000074  ea000028          B        |L1.284|
                  |L1.120|
;;;122            else
;;;123                pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, portMAX_DELAY);
000078  e59f02d0          LDR      r0,|L1.848|
00007c  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000080  e3e01000          MVN      r1,#0
000084  e590200c          LDR      r2,[r0,#0xc]
000088  e3a00002          MOV      r0,#2
00008c  e12fff32          BLX      r2
000090  ea000021          B        |L1.284|
                  |L1.148|
;;;124            
;;;125        }
;;;126        else
;;;127        {
;;;128            //    tickStart = xTaskGetTickCount();
;;;129            // sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
;;;130            powerStatus = TRUE;
000094  e3a00001          MOV      r0,#1
000098  e59f12b4          LDR      r1,|L1.852|
00009c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;131            pGuiGetInterface = GuiGetInterface();
0000a0  ebfffffe          BL       GuiGetInterface
0000a4  e59f12a4          LDR      r1,|L1.848|
0000a8  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;132            pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
0000ac  e2810000          ADD      r0,r1,#0
0000b0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000b4  e3e01000          MVN      r1,#0
0000b8  e590200c          LDR      r2,[r0,#0xc]
0000bc  e3a00000          MOV      r0,#0
0000c0  e12fff32          BLX      r2
;;;133            pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
0000c4  e59f0284          LDR      r0,|L1.848|
0000c8  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000cc  e3e01000          MVN      r1,#0
0000d0  e590200c          LDR      r2,[r0,#0xc]
0000d4  e3a00001          MOV      r0,#1
0000d8  e12fff32          BLX      r2
;;;134            
;;;135            pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
0000dc  e59f026c          LDR      r0,|L1.848|
0000e0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000e4  e3a01064          MOV      r1,#0x64
0000e8  e590200c          LDR      r2,[r0,#0xc]
0000ec  e3a00002          MOV      r0,#2
0000f0  e12fff32          BLX      r2
;;;136            
;;;137            
;;;138            pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
0000f4  e59f0254          LDR      r0,|L1.848|
0000f8  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000fc  e5901010          LDR      r1,[r0,#0x10]
000100  e3a00000          MOV      r0,#0
000104  e12fff31          BLX      r1
;;;139            
;;;140            //pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);
;;;141            
;;;142            
;;;143            EPDDrawMulti(TRUE,EPD_PICT_ALL_WHITE_INDEX,0,0);
000108  e3a03000          MOV      r3,#0
00010c  e1a02003          MOV      r2,r3
000110  e3a01003          MOV      r1,#3
000114  e3a00001          MOV      r0,#1
000118  ebfffffe          BL       EPDDrawMulti
                  |L1.284|
;;;144            
;;;145            
;;;146            //EPDDrawString(FALSE,"Version Tool",0,0);
;;;147    
;;;148            
;;;149            //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;150        }
;;;151        return TRUE;
00011c  e3a00001          MOV      r0,#1
;;;152    }
000120  e8bd81f0          POP      {r4-r8,pc}
;;;153    BOOL GuiVersionUpdateData(void)
                          ENDP

                  GuiVersionUpdateData PROC
000124  e92d4010          PUSH     {r4,lr}
;;;154    {    
;;;155        //tickStart = xTaskGetTickCount();
;;;156        
;;;157        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更updateScreen
000128  e59f0220          LDR      r0,|L1.848|
00012c  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000130  e5901010          LDR      r1,[r0,#0x10]
000134  e3a00001          MOV      r0,#1
000138  e12fff31          BLX      r1
;;;158        return TRUE;
00013c  e3a00001          MOV      r0,#1
;;;159    }
000140  e8bd8010          POP      {r4,pc}
;;;160    BOOL GuiVersionKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiVersionKeyCallback PROC
000144  e92d4070          PUSH     {r4-r6,lr}
;;;161    {
000148  e1a04000          MOV      r4,r0
00014c  e1a05001          MOV      r5,r1
;;;162        //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;163        BOOL reVal = FALSE; 
000150  e3a06000          MOV      r6,#0
;;;164        if(keyIgnoreFlag)
000154  e59f01fc          LDR      r0,|L1.856|
000158  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
00015c  e3500000          CMP      r0,#0
000160  0a000003          BEQ      |L1.372|
;;;165        {
;;;166            sysprintf(" [INFO GUI] <Free> Key:  ignore...\n"); 
000164  e28f0e1f          ADR      r0,|L1.860|
000168  ebfffffe          BL       sysprintf
;;;167            return reVal;
00016c  e1a00006          MOV      r0,r6
                  |L1.368|
;;;168        }
;;;169        //pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
;;;170        if(GUI_KEY_DOWN_INDEX == downUp)
;;;171        {
;;;172            switch(keyId)
;;;173            {
;;;174                case GUI_KEYPAD_LEFT_ID:
;;;175                    SetGuiResponseVal('p');
;;;176                    reVal = TRUE;
;;;177                    break;
;;;178                case GUI_KEYPAD_RIGHT_ID:
;;;179                    SetGuiResponseVal('n');
;;;180                    reVal = TRUE;
;;;181                    break;
;;;182                case GUI_KEYPAD_ADD_ID:
;;;183                    //reVal = TRUE;
;;;184                    break;
;;;185                case GUI_KEYPAD_MINUS_ID:
;;;186                    //SetGuiResponseVal('q');
;;;187                    //reVal = TRUE;
;;;188                    break;
;;;189            #if(SUPPORT_HK_10_HW)
;;;190                case GUI_KEYPAD_QRCODE_ID:
;;;191                    SetGuiResponseVal('q');
;;;192                    reVal = TRUE;
;;;193                    break;
;;;194            #else
;;;195                case GUI_KEYPAD_CONFIRM_ID:
;;;196            #endif
;;;197                    //reVal = TRUE;
;;;198                    break;
;;;199                case GUI_KEYPAD_REPLACE_BP_ID:
;;;200                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;201                    //GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;202                    //reVal = TRUE;
;;;203                    break;
;;;204                
;;;205                case GUI_KEYPAD_TESTER_ID:
;;;206                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;207                    //GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;208                    //reVal = TRUE;
;;;209                    break;
;;;210                
;;;211                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;212                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;213                    //GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;214                    //reVal = TRUE;
;;;215                    break;
;;;216            }
;;;217        }
;;;218        else
;;;219        {
;;;220            
;;;221        }
;;;222       // setPrintfFlag(FALSE);
;;;223        return reVal;
;;;224    }
000170  e8bd8070          POP      {r4-r6,pc}
                  |L1.372|
000174  e3550001          CMP      r5,#1                 ;170
000178  1a00002c          BNE      |L1.560|
00017c  e3540004          CMP      r4,#4                 ;172
000180  0a00001a          BEQ      |L1.496|
000184  ca000008          BGT      |L1.428|
000188  e3540000          CMP      r4,#0                 ;172
00018c  0a00001b          BEQ      |L1.512|
000190  e3540001          CMP      r4,#1                 ;172
000194  0a000017          BEQ      |L1.504|
000198  e3540002          CMP      r4,#2                 ;172
00019c  0a00000e          BEQ      |L1.476|
0001a0  e3540003          CMP      r4,#3                 ;172
0001a4  1a000020          BNE      |L1.556|
0001a8  ea000006          B        |L1.456|
                  |L1.428|
0001ac  e3540011          CMP      r4,#0x11              ;172
0001b0  0a000017          BEQ      |L1.532|
0001b4  e3540013          CMP      r4,#0x13              ;172
0001b8  0a000019          BEQ      |L1.548|
0001bc  e3540014          CMP      r4,#0x14              ;172
0001c0  1a000019          BNE      |L1.556|
0001c4  ea000014          B        |L1.540|
                  |L1.456|
0001c8  e1a00000          MOV      r0,r0                 ;174
0001cc  e3a00070          MOV      r0,#0x70              ;175
0001d0  ebfffffe          BL       SetGuiResponseVal
0001d4  e3a06001          MOV      r6,#1                 ;176
0001d8  ea000013          B        |L1.556|
                  |L1.476|
0001dc  e1a00000          MOV      r0,r0                 ;178
0001e0  e3a0006e          MOV      r0,#0x6e              ;179
0001e4  ebfffffe          BL       SetGuiResponseVal
0001e8  e3a06001          MOV      r6,#1                 ;180
0001ec  ea00000e          B        |L1.556|
                  |L1.496|
0001f0  e1a00000          MOV      r0,r0                 ;182
0001f4  ea00000c          B        |L1.556|
                  |L1.504|
0001f8  e1a00000          MOV      r0,r0                 ;185
0001fc  ea00000a          B        |L1.556|
                  |L1.512|
000200  e1a00000          MOV      r0,r0                 ;190
000204  e3a00071          MOV      r0,#0x71              ;191
000208  ebfffffe          BL       SetGuiResponseVal
00020c  e3a06001          MOV      r6,#1                 ;192
000210  ea000005          B        |L1.556|
                  |L1.532|
000214  e1a00000          MOV      r0,r0                 ;199
000218  ea000003          B        |L1.556|
                  |L1.540|
00021c  e1a00000          MOV      r0,r0                 ;205
000220  ea000001          B        |L1.556|
                  |L1.548|
000224  e1a00000          MOV      r0,r0                 ;211
000228  e1a00000          MOV      r0,r0                 ;215
                  |L1.556|
00022c  e1a00000          MOV      r0,r0                 ;177
                  |L1.560|
000230  e1a00006          MOV      r0,r6                 ;223
000234  eaffffcd          B        |L1.368|
;;;225    BOOL GuiVersionTimerCallback(uint8_t timerIndex)
                          ENDP

                  GuiVersionTimerCallback PROC
000238  e92d4010          PUSH     {r4,lr}
;;;226    {
00023c  e1a04000          MOV      r4,r0
;;;227        //sysprintf(" [INFO GUI] <Free> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;228        keyIgnoreFlag = TRUE;
000240  e3a00001          MOV      r0,#1
000244  e59f110c          LDR      r1,|L1.856|
000248  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;229    
;;;230        switch(timerIndex)
00024c  e3540000          CMP      r4,#0
000250  0a000004          BEQ      |L1.616|
000254  e3540001          CMP      r4,#1
000258  0a000004          BEQ      |L1.624|
00025c  e3540002          CMP      r4,#2
000260  1a000034          BNE      |L1.824|
000264  ea000003          B        |L1.632|
                  |L1.616|
;;;231        {
;;;232            case UPDATE_BG_TIMER:
000268  e1a00000          MOV      r0,r0
;;;233    
;;;234                break;
00026c  ea000031          B        |L1.824|
                  |L1.624|
;;;235            case UPDATE_DATA_TIMER:
000270  e1a00000          MOV      r0,r0
;;;236                
;;;237    
;;;238    
;;;239            
;;;240            
;;;241                
;;;242            
;;;243                break;
000274  ea00002f          B        |L1.824|
                  |L1.632|
;;;244            case EXIT_TIMER:
000278  e1a00000          MOV      r0,r0
;;;245                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0); 
;;;246    
;;;247    
;;;248                switch(waitCounter)
00027c  e59f00fc          LDR      r0,|L1.896|
000280  e5900000          LDR      r0,[r0,#0]  ; waitCounter
000284  e3500000          CMP      r0,#0
000288  0a00000e          BEQ      |L1.712|
00028c  e3500001          CMP      r0,#1
000290  0a000013          BEQ      |L1.740|
000294  e3500002          CMP      r0,#2
000298  0a000018          BEQ      |L1.768|
00029c  e3500003          CMP      r0,#3
0002a0  1a00001d          BNE      |L1.796|
;;;249                {
;;;250                case 3:
;;;251                    waitCounter=-1;
0002a4  e3e00000          MVN      r0,#0
0002a8  e59f10d0          LDR      r1,|L1.896|
0002ac  e5810000          STR      r0,[r1,#0]  ; waitCounter
;;;252                    EPDDrawString(TRUE,"        ",500,50);
0002b0  e3a03032          MOV      r3,#0x32
0002b4  e3a02f7d          MOV      r2,#0x1f4
0002b8  e28f10c4          ADR      r1,|L1.900|
0002bc  e3a00001          MOV      r0,#1
0002c0  ebfffffe          BL       EPDDrawString
;;;253                    break;
0002c4  ea000014          B        |L1.796|
                  |L1.712|
;;;254                case 0:
0002c8  e1a00000          MOV      r0,r0
;;;255                    EPDDrawString(TRUE,".       ",500,50);
0002cc  e3a03032          MOV      r3,#0x32
0002d0  e3a02f7d          MOV      r2,#0x1f4
0002d4  e28f10b4          ADR      r1,|L1.912|
0002d8  e3a00001          MOV      r0,#1
0002dc  ebfffffe          BL       EPDDrawString
;;;256                    break;
0002e0  ea00000d          B        |L1.796|
                  |L1.740|
;;;257                case 1:
0002e4  e1a00000          MOV      r0,r0
;;;258                    EPDDrawString(TRUE,"..      ",500,50);
0002e8  e3a03032          MOV      r3,#0x32
0002ec  e3a02f7d          MOV      r2,#0x1f4
0002f0  e28f10a4          ADR      r1,|L1.924|
0002f4  e3a00001          MOV      r0,#1
0002f8  ebfffffe          BL       EPDDrawString
;;;259                    break;
0002fc  ea000006          B        |L1.796|
                  |L1.768|
;;;260                case 2:
000300  e1a00000          MOV      r0,r0
;;;261                    EPDDrawString(TRUE,"...     ",500,50);
000304  e3a03032          MOV      r3,#0x32
000308  e3a02f7d          MOV      r2,#0x1f4
00030c  e28f1094          ADR      r1,|L1.936|
000310  e3a00001          MOV      r0,#1
000314  ebfffffe          BL       EPDDrawString
;;;262                    break;
000318  e1a00000          MOV      r0,r0
                  |L1.796|
00031c  e1a00000          MOV      r0,r0                 ;253
;;;263                }
;;;264                waitCounter++;
000320  e59f0058          LDR      r0,|L1.896|
000324  e5900000          LDR      r0,[r0,#0]  ; waitCounter
000328  e2800001          ADD      r0,r0,#1
00032c  e59f104c          LDR      r1,|L1.896|
000330  e5810000          STR      r0,[r1,#0]  ; waitCounter
;;;265                
;;;266            
;;;267                break;
000334  e1a00000          MOV      r0,r0
                  |L1.824|
000338  e1a00000          MOV      r0,r0                 ;234
;;;268    
;;;269        }
;;;270        keyIgnoreFlag = FALSE;
00033c  e3a00000          MOV      r0,#0
000340  e59f1010          LDR      r1,|L1.856|
000344  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;271        return TRUE;
000348  e3a00001          MOV      r0,#1
;;;272    }
00034c  e8bd8010          POP      {r4,pc}
                  |L1.848|
                          DCD      pGuiGetInterface
                  |L1.852|
                          DCD      powerStatus
                  |L1.856|
                          DCD      keyIgnoreFlag
                  |L1.860|
00035c  205b494e          DCB      " [INFO GUI] <Free> Key:  ignore...\n",0
000360  464f2047
000364  55495d20
000368  3c467265
00036c  653e204b
000370  65793a20
000374  2069676e
000378  6f72652e
00037c  2e2e0a00
                  |L1.896|
                          DCD      waitCounter
                  |L1.900|
000384  20202020          DCB      "        ",0
000388  20202020
00038c  00      
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
                  |L1.912|
000390  2e202020          DCB      ".       ",0
000394  20202020
000398  00      
000399  00                DCB      0
00039a  00                DCB      0
00039b  00                DCB      0
                  |L1.924|
00039c  2e2e2020          DCB      "..      ",0
0003a0  20202020
0003a4  00      
0003a5  00                DCB      0
0003a6  00                DCB      0
0003a7  00                DCB      0
                  |L1.936|
0003a8  2e2e2e20          DCB      "...     ",0
0003ac  20202020
0003b0  00      
0003b1  00                DCB      0
0003b2  00                DCB      0
0003b3  00                DCB      0
                          ENDP

                  GuiVersionPowerCallbackFunc PROC
;;;273    
;;;274    BOOL GuiVersionPowerCallbackFunc(uint8_t type, int flag)
0003b4  e1a02000          MOV      r2,r0
;;;275    {
;;;276        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;277        switch(type)
0003b8  e3520001          CMP      r2,#1
0003bc  0a000006          BEQ      |L1.988|
0003c0  e3520002          CMP      r2,#2
0003c4  0a000008          BEQ      |L1.1004|
0003c8  e3520003          CMP      r2,#3
0003cc  0a000008          BEQ      |L1.1012|
0003d0  e3520004          CMP      r2,#4
0003d4  1a00000a          BNE      |L1.1028|
0003d8  ea000007          B        |L1.1020|
                  |L1.988|
;;;278        {
;;;279            case GUI_POWER_STATUS_INDEX:
0003dc  e1a00000          MOV      r0,r0
;;;280                return powerStatus;
0003e0  e51f0094          LDR      r0,|L1.852|
0003e4  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.1000|
;;;281            case GUI_POWER_ON_INDEX:
;;;282                break;
;;;283            case GUI_POWER_OFF_INDEX:
;;;284                break;
;;;285            case GUI_POWER_PREV_OFF_INDEX:
;;;286                break;
;;;287        }
;;;288        return TRUE;
;;;289    }
0003e8  e12fff1e          BX       lr
                  |L1.1004|
0003ec  e1a00000          MOV      r0,r0                 ;281
0003f0  ea000003          B        |L1.1028|
                  |L1.1012|
0003f4  e1a00000          MOV      r0,r0                 ;283
0003f8  ea000001          B        |L1.1028|
                  |L1.1020|
0003fc  e1a00000          MOV      r0,r0                 ;285
000400  e1a00000          MOV      r0,r0                 ;286
                  |L1.1028|
000404  e1a00000          MOV      r0,r0                 ;282
000408  e3a00001          MOV      r0,#1                 ;288
00040c  eafffff5          B        |L1.1000|
;;;290    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  01                DCB      0x01
                  keyIgnoreFlag
000005  000000            DCB      0x00,0x00,0x00
                  waitCounter
                          DCD      0x00000000
