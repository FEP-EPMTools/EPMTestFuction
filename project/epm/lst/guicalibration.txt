; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guicalibration.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guicalibration.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guicalibration.crf src\user\guicalibration.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;60     /*-----------------------------------------*/
;;;61     static void updateBG(void)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;62     {
;;;63         //TickType_t tickLocalStart = xTaskGetTickCount();
;;;64         //EPDDrawContainByIDPos(TRUE,EPD_PICT_LOADING,475,250);
;;;65         EPDDrawContainByIDPos(TRUE,EPD_PICT_ALL_WHITE_INDEX,0,0);
000004  e3a03000          MOV      r3,#0
000008  e1a02003          MOV      r2,r3
00000c  e3a01003          MOV      r1,#3
000010  e3a00001          MOV      r0,#1
000014  ebfffffe          BL       EPDDrawContainByIDPos
;;;66         EPDDrawStringMax(FALSE,"Calibration",90,28,FALSE);
000018  e3a00000          MOV      r0,#0
00001c  e3a0301c          MOV      r3,#0x1c
000020  e3a0205a          MOV      r2,#0x5a
000024  e28f1fc7          ADR      r1,|L1.840|
000028  e58d0000          STR      r0,[sp,#0]
00002c  ebfffffe          BL       EPDDrawStringMax
;;;67         //EPDDrawStringMax(FALSE,"xxxxxx Calibration xxxxxx",200,100,FALSE);
;;;68         //EPDDrawStringMax(FALSE,"\nx\nx\nx\nx\nx\nx\nx\nx",200,100,FALSE);
;;;69         //EPDDrawStringMax(FALSE,"\nx\nx\nx\nx\nx\nx\nx\nx",200+(24*28),100,FALSE);
;;;70         //EPDDrawStringMax(FALSE,"\n\n\n\n\n\n\n\n\nxxxxxxxxxxxxxxxxxxxxxxxxx",200,100,FALSE);
;;;71         EPDDrawStringMax(FALSE," <>:Move   {:Select    }:Exit ",BTM_DISCRIPT_BAR_X,BTM_DISCRIPT_BAR_Y,TRUE);
000030  e3a00001          MOV      r0,#1
000034  e3a03e29          MOV      r3,#0x290
000038  e3a020b4          MOV      r2,#0xb4
00003c  e28f1e31          ADR      r1,|L1.852|
000040  e58d0000          STR      r0,[sp,#0]
000044  e3a00000          MOV      r0,#0
000048  ebfffffe          BL       EPDDrawStringMax
;;;72         
;;;73         for(int i = 0; ; i++)
00004c  e3a00000          MOV      r0,#0
000050  e1a00000          MOV      r0,r0
                  |L1.84|
;;;74         {//Dont Show Quit
;;;75             if(listItem[i].charItem == 0)
000054  e59f1318          LDR      r1,|L1.884|
000058  e5911000          LDR      r1,[r1,#0]  ; listItem
00005c  e7d11180          LDRB     r1,[r1,r0,LSL #3]
000060  e3510000          CMP      r1,#0
000064  1a000003          BNE      |L1.120|
;;;76             {
;;;77                 maxSelectItem = i-1;
000068  e2401001          SUB      r1,r0,#1
00006c  e59f2304          LDR      r2,|L1.888|
000070  e5821000          STR      r1,[r2,#0]  ; maxSelectItem
;;;78                 break;
000074  ea000001          B        |L1.128|
                  |L1.120|
000078  e2800001          ADD      r0,r0,#1              ;73
00007c  eafffff4          B        |L1.84|
                  |L1.128|
000080  e1a00000          MOV      r0,r0
;;;79             }
;;;80         }
;;;81         for(int i=0;i<maxSelectItem;i++)
000084  e3a04000          MOV      r4,#0
000088  ea000017          B        |L1.236|
                  |L1.140|
;;;82         {
;;;83             EPDDrawStringMax(FALSE,listItem[i].itemName,300+50,100+(44*(2+i)),FALSE);
00008c  e3a00000          MOV      r0,#0
000090  e58d0000          STR      r0,[sp,#0]
000094  e2840002          ADD      r0,r4,#2
000098  e3a0202c          MOV      r2,#0x2c
00009c  e0000092          MUL      r0,r2,r0
0000a0  e2803064          ADD      r3,r0,#0x64
0000a4  e59f02c8          LDR      r0,|L1.884|
0000a8  e5900000          LDR      r0,[r0,#0]  ; listItem
0000ac  e0800184          ADD      r0,r0,r4,LSL #3
0000b0  e5901004          LDR      r1,[r0,#4]
0000b4  e59f22c0          LDR      r2,|L1.892|
0000b8  e3a00000          MOV      r0,#0
0000bc  ebfffffe          BL       EPDDrawStringMax
;;;84             EPDDrawStringMax(FALSE,"-",300,100+(44*(2+i)),TRUE);
0000c0  e3a00001          MOV      r0,#1
0000c4  e58d0000          STR      r0,[sp,#0]
0000c8  e2840002          ADD      r0,r4,#2
0000cc  e3a0102c          MOV      r1,#0x2c
0000d0  e0000091          MUL      r0,r1,r0
0000d4  e2803064          ADD      r3,r0,#0x64
0000d8  e3a02f4b          MOV      r2,#0x12c
0000dc  e28f1fa7          ADR      r1,|L1.896|
0000e0  e3a00000          MOV      r0,#0
0000e4  ebfffffe          BL       EPDDrawStringMax
0000e8  e2844001          ADD      r4,r4,#1              ;81
                  |L1.236|
0000ec  e59f0284          LDR      r0,|L1.888|
0000f0  e5900000          LDR      r0,[r0,#0]            ;81  ; maxSelectItem
0000f4  e1540000          CMP      r4,r0                 ;81
0000f8  baffffe3          BLT      |L1.140|
;;;85         }
;;;86         EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,300,100+(44*(2+oldIndex)));
0000fc  e59f0280          LDR      r0,|L1.900|
000100  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000104  e2800002          ADD      r0,r0,#2
000108  e3a0102c          MOV      r1,#0x2c
00010c  e0000091          MUL      r0,r1,r0
000110  e2803064          ADD      r3,r0,#0x64
000114  e3a02f4b          MOV      r2,#0x12c
000118  e3a0106b          MOV      r1,#0x6b
00011c  e3a00001          MOV      r0,#1
000120  ebfffffe          BL       EPDDrawContainByIDPos
;;;87     }
000124  e8bd8038          POP      {r3-r5,pc}
;;;88     //static void updateData(void)
                          ENDP

                  GuiCalibrationOnDraw PROC
;;;99     /*-----------------------------------------*/
;;;100    BOOL GuiCalibrationOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int item, int keyinCallbackFun)
000128  e92d41f0          PUSH     {r4-r8,lr}
;;;101    {
00012c  e1a07000          MOV      r7,r0
000130  e1a04001          MOV      r4,r1
000134  e1a05002          MOV      r5,r2
000138  e1a06003          MOV      r6,r3
;;;102        if(reFreshPara == GUI_CLEAN_MESSAGE_ENABLE)
00013c  e3540007          CMP      r4,#7
000140  1a000003          BNE      |L1.340|
;;;103            cleanMsgAfterMove = TRUE;
000144  e3a00001          MOV      r0,#1
000148  e59f1238          LDR      r1,|L1.904|
00014c  e5c10000          STRB     r0,[r1,#0]  ; cleanMsgAfterMove
000150  ea00001b          B        |L1.452|
                  |L1.340|
;;;104        else
;;;105        {
;;;106            //tickStart = xTaskGetTickCount();
;;;107            // sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
;;;108            listItem = (ListItem*)item;
000154  e59f0218          LDR      r0,|L1.884|
000158  e5805000          STR      r5,[r0,#0]  ; listItem
;;;109            keyinCallback = (KeyinCallback)keyinCallbackFun;
00015c  e59f0228          LDR      r0,|L1.908|
000160  e5806000          STR      r6,[r0,#0]  ; keyinCallback
;;;110            
;;;111            powerStatus = TRUE;
000164  e3a00001          MOV      r0,#1
000168  e59f1220          LDR      r1,|L1.912|
00016c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;112            pGuiGetInterface = GuiGetInterface();
000170  ebfffffe          BL       GuiGetInterface
000174  e59f1218          LDR      r1,|L1.916|
000178  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;113            pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
00017c  e2810000          ADD      r0,r1,#0
000180  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000184  e3e01000          MVN      r1,#0
000188  e590200c          LDR      r2,[r0,#0xc]
00018c  e3a00000          MOV      r0,#0
000190  e12fff32          BLX      r2
;;;114            pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
000194  e59f01f8          LDR      r0,|L1.916|
000198  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00019c  e3a01005          MOV      r1,#5
0001a0  e590200c          LDR      r2,[r0,#0xc]
0001a4  e3a00001          MOV      r0,#1
0001a8  e12fff32          BLX      r2
;;;115            updateBG();
0001ac  ebfffffe          BL       updateBG
;;;116            pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
0001b0  e59f01dc          LDR      r0,|L1.916|
0001b4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001b8  e5901010          LDR      r1,[r0,#0x10]
0001bc  e3a00000          MOV      r0,#0
0001c0  e12fff31          BLX      r1
                  |L1.452|
;;;117            //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;118        }
;;;119        return TRUE;
0001c4  e3a00001          MOV      r0,#1
;;;120    }
0001c8  e8bd81f0          POP      {r4-r8,pc}
;;;121    BOOL GuiCalibrationUpdateData(void)
                          ENDP

                  GuiCalibrationUpdateData PROC
0001cc  e92d4010          PUSH     {r4,lr}
;;;122    {    
;;;123        //tickStart = xTaskGetTickCount();
;;;124        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更updateScreen
0001d0  e59f01bc          LDR      r0,|L1.916|
0001d4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001d8  e5901010          LDR      r1,[r0,#0x10]
0001dc  e3a00001          MOV      r0,#1
0001e0  e12fff31          BLX      r1
;;;125        return TRUE;
0001e4  e3a00001          MOV      r0,#1
;;;126    }
0001e8  e8bd8010          POP      {r4,pc}
;;;127    BOOL GuiCalibrationKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiCalibrationKeyCallback PROC
0001ec  e92d4070          PUSH     {r4-r6,lr}
;;;128    {
0001f0  e1a04000          MOV      r4,r0
0001f4  e1a05001          MOV      r5,r1
;;;129        //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;130        //terninalPrintf("now[%d] old[%d]\n",nowIndex,oldIndex);
;;;131        BOOL reVal = FALSE; 
0001f8  e3a06000          MOV      r6,#0
;;;132        if(keyIgnoreFlag)
0001fc  e59f0194          LDR      r0,|L1.920|
000200  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
000204  e3500000          CMP      r0,#0
000208  0a000001          BEQ      |L1.532|
;;;133        {
;;;134            //terninalPrintf(" [INFO GUI] <Calibration> Key:  ignore...\n"); 
;;;135            return reVal;
00020c  e1a00006          MOV      r0,r6
                  |L1.528|
;;;136        }
;;;137        if(keyinCallback == NULL)
;;;138        {
;;;139            terninalPrintf(" [INFO GUI] <Calibration> KeyCallback:  Function Pointer ERROR!!!\n"); 
;;;140            return reVal;
;;;141        }
;;;142        if(GUI_KEY_DOWN_INDEX == downUp)
;;;143        {
;;;144            switch(keyId)
;;;145            {
;;;146                case GUI_KEYPAD_ONE:
;;;147                    if(!GetTesterFlag())
;;;148                    {
;;;149                        //EPDDrawString(TRUE,"           ",300+400,100+(44*(nowIndex+2)));
;;;150                        if((nowIndex>0)&&(nowIndex==oldIndex))
;;;151                        {
;;;152                            oldIndex=nowIndex;
;;;153                            nowIndex--;
;;;154                            reVal = TRUE;
;;;155                        }
;;;156                        else if((nowIndex==oldIndex)&&(nowIndex==0))
;;;157                        {
;;;158                            oldIndex=nowIndex;
;;;159                            nowIndex=maxSelectItem-1;
;;;160                            reVal = TRUE;
;;;161                        }
;;;162                    }
;;;163                    break;
;;;164                case GUI_KEYPAD_TWO:
;;;165                    if(!GetTesterFlag())
;;;166                    {
;;;167                        //EPDDrawString(TRUE,"           ",300+400,100+(44*(nowIndex+2)));
;;;168                        if((nowIndex<(maxSelectItem-1))&&(nowIndex==oldIndex))
;;;169                        {
;;;170                            oldIndex=nowIndex;
;;;171                            nowIndex++;
;;;172                            reVal = TRUE;
;;;173                        }
;;;174                        else if((nowIndex==oldIndex)&&(nowIndex==maxSelectItem-1))
;;;175                        {
;;;176                            oldIndex=nowIndex;
;;;177                            nowIndex=0;
;;;178                            reVal = TRUE;
;;;179                        }
;;;180                    }
;;;181                    break;
;;;182                case GUI_KEYPAD_THREE:
;;;183                    //reVal = TRUE;
;;;184                    break;
;;;185                case GUI_KEYPAD_FOUR:
;;;186                    //reVal = TRUE;
;;;187                    break;
;;;188                case GUI_KEYPAD_FIVE:
;;;189                    if(oldIndex==nowIndex)
;;;190                    {
;;;191                        cleanMsgAfterMove = TRUE;
;;;192                        keyinCallback(listItem[nowIndex].charItem);
;;;193                        reVal = TRUE;
;;;194                    }
;;;195                    break;
;;;196                case GUI_KEYPAD_SIX:
;;;197                    keyinCallback('q');
;;;198                    oldIndex = 0;
;;;199                    nowIndex = 0;
;;;200                    reVal = TRUE;
;;;201                    break;
;;;202                case GUI_KEYPAD_REPLACE_BP_ID:
;;;203                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;204                    //GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;205                    //reVal = TRUE;
;;;206                    break;
;;;207                
;;;208                case GUI_KEYPAD_TESTER_ID:
;;;209                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;210                    //GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;211                    //reVal = TRUE;
;;;212                    break;
;;;213                
;;;214                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;215                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;216                    //GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;217                    //reVal = TRUE;
;;;218                    break;
;;;219            }
;;;220        }
;;;221        else
;;;222        {
;;;223            
;;;224        }
;;;225       // setPrintfFlag(FALSE);
;;;226        return reVal;
;;;227    }
000210  e8bd8070          POP      {r4-r6,pc}
                  |L1.532|
000214  e59f0170          LDR      r0,|L1.908|
000218  e5900000          LDR      r0,[r0,#0]            ;137  ; keyinCallback
00021c  e3500000          CMP      r0,#0                 ;137
000220  1a000003          BNE      |L1.564|
000224  e59f0170          LDR      r0,|L1.924|
000228  ebfffffe          BL       terninalPrintf
00022c  e1a00006          MOV      r0,r6                 ;140
000230  eafffff6          B        |L1.528|
                  |L1.564|
000234  e3550001          CMP      r5,#1                 ;142
000238  1a0000b6          BNE      |L1.1304|
00023c  e3540004          CMP      r4,#4                 ;144
000240  0a000089          BEQ      |L1.1132|
000244  ca000008          BGT      |L1.620|
000248  e3540000          CMP      r4,#0                 ;144
00024c  0a00009e          BEQ      |L1.1228|
000250  e3540001          CMP      r4,#1                 ;144
000254  0a000086          BEQ      |L1.1140|
000258  e3540002          CMP      r4,#2                 ;144
00025c  0a000050          BEQ      |L1.932|
000260  e3540003          CMP      r4,#3                 ;144
000264  1a0000aa          BNE      |L1.1300|
000268  ea000008          B        |L1.656|
                  |L1.620|
00026c  e3540005          CMP      r4,#5                 ;144
000270  0a000081          BEQ      |L1.1148|
000274  e3540011          CMP      r4,#0x11              ;144
000278  0a00009f          BEQ      |L1.1276|
00027c  e3540013          CMP      r4,#0x13              ;144
000280  0a0000a1          BEQ      |L1.1292|
000284  e3540014          CMP      r4,#0x14              ;144
000288  1a0000a1          BNE      |L1.1300|
00028c  ea00009c          B        |L1.1284|
                  |L1.656|
000290  e1a00000          MOV      r0,r0                 ;146
000294  ebfffffe          BL       GetTesterFlag
000298  e3500000          CMP      r0,#0                 ;147
00029c  1a000028          BNE      |L1.836|
0002a0  e59f00f8          LDR      r0,|L1.928|
0002a4  e5900000          LDR      r0,[r0,#0]            ;150  ; nowIndex
0002a8  e3500000          CMP      r0,#0                 ;150
0002ac  da000010          BLE      |L1.756|
0002b0  e59f00e8          LDR      r0,|L1.928|
0002b4  e5900000          LDR      r0,[r0,#0]            ;150  ; nowIndex
0002b8  e59f10c4          LDR      r1,|L1.900|
0002bc  e5911000          LDR      r1,[r1,#0]            ;150  ; oldIndex
0002c0  e1500001          CMP      r0,r1                 ;150
0002c4  1a00000a          BNE      |L1.756|
0002c8  e59f00d0          LDR      r0,|L1.928|
0002cc  e5900000          LDR      r0,[r0,#0]            ;152  ; nowIndex
0002d0  e59f10ac          LDR      r1,|L1.900|
0002d4  e5810000          STR      r0,[r1,#0]            ;152  ; oldIndex
0002d8  e59f00c0          LDR      r0,|L1.928|
0002dc  e5900000          LDR      r0,[r0,#0]            ;153  ; nowIndex
0002e0  e2400001          SUB      r0,r0,#1              ;153
0002e4  e59f10b4          LDR      r1,|L1.928|
0002e8  e5810000          STR      r0,[r1,#0]            ;153  ; nowIndex
0002ec  e3a06001          MOV      r6,#1                 ;154
0002f0  ea000013          B        |L1.836|
                  |L1.756|
0002f4  e59f00a4          LDR      r0,|L1.928|
0002f8  e5900000          LDR      r0,[r0,#0]            ;156  ; nowIndex
0002fc  e59f1080          LDR      r1,|L1.900|
000300  e5911000          LDR      r1,[r1,#0]            ;156  ; oldIndex
000304  e1500001          CMP      r0,r1                 ;156
000308  1a00000d          BNE      |L1.836|
00030c  e59f008c          LDR      r0,|L1.928|
000310  e5900000          LDR      r0,[r0,#0]            ;156  ; nowIndex
000314  e3500000          CMP      r0,#0                 ;156
000318  1a000009          BNE      |L1.836|
00031c  e59f007c          LDR      r0,|L1.928|
000320  e5900000          LDR      r0,[r0,#0]            ;158  ; nowIndex
000324  e59f1058          LDR      r1,|L1.900|
000328  e5810000          STR      r0,[r1,#0]            ;158  ; oldIndex
00032c  e59f0044          LDR      r0,|L1.888|
000330  e5900000          LDR      r0,[r0,#0]            ;159  ; maxSelectItem
000334  e2400001          SUB      r0,r0,#1              ;159
000338  e59f1060          LDR      r1,|L1.928|
00033c  e5810000          STR      r0,[r1,#0]            ;159  ; nowIndex
000340  e3a06001          MOV      r6,#1                 ;160
                  |L1.836|
000344  ea000072          B        |L1.1300|
                  |L1.840|
000348  43616c69          DCB      "Calibration",0
00034c  62726174
000350  696f6e00
                  |L1.852|
000354  203c3e3a          DCB      " <>:Move   {:Select    }:Exit ",0
000358  4d6f7665
00035c  2020207b
000360  3a53656c
000364  65637420
000368  2020207d
00036c  3a457869
000370  742000  
000373  00                DCB      0
                  |L1.884|
                          DCD      listItem
                  |L1.888|
                          DCD      maxSelectItem
                  |L1.892|
                          DCD      0x0000015e
                  |L1.896|
000380  2d00              DCB      "-",0
000382  00                DCB      0
000383  00                DCB      0
                  |L1.900|
                          DCD      oldIndex
                  |L1.904|
                          DCD      cleanMsgAfterMove
                  |L1.908|
                          DCD      keyinCallback
                  |L1.912|
                          DCD      powerStatus
                  |L1.916|
                          DCD      pGuiGetInterface
                  |L1.920|
                          DCD      keyIgnoreFlag
                  |L1.924|
                          DCD      ||.constdata||
                  |L1.928|
                          DCD      nowIndex
                  |L1.932|
0003a4  e1a00000          MOV      r0,r0                 ;164
0003a8  ebfffffe          BL       GetTesterFlag
0003ac  e3500000          CMP      r0,#0                 ;165
0003b0  1a00002c          BNE      |L1.1128|
0003b4  e51f0044          LDR      r0,|L1.888|
0003b8  e5900000          LDR      r0,[r0,#0]            ;168  ; maxSelectItem
0003bc  e2400001          SUB      r0,r0,#1              ;168
0003c0  e51f1028          LDR      r1,|L1.928|
0003c4  e5911000          LDR      r1,[r1,#0]            ;168  ; nowIndex
0003c8  e1500001          CMP      r0,r1                 ;168
0003cc  da000010          BLE      |L1.1044|
0003d0  e51f0038          LDR      r0,|L1.928|
0003d4  e5900000          LDR      r0,[r0,#0]            ;168  ; nowIndex
0003d8  e51f105c          LDR      r1,|L1.900|
0003dc  e5911000          LDR      r1,[r1,#0]            ;168  ; oldIndex
0003e0  e1500001          CMP      r0,r1                 ;168
0003e4  1a00000a          BNE      |L1.1044|
0003e8  e51f0050          LDR      r0,|L1.928|
0003ec  e5900000          LDR      r0,[r0,#0]            ;170  ; nowIndex
0003f0  e51f1074          LDR      r1,|L1.900|
0003f4  e5810000          STR      r0,[r1,#0]            ;170  ; oldIndex
0003f8  e51f0060          LDR      r0,|L1.928|
0003fc  e5900000          LDR      r0,[r0,#0]            ;171  ; nowIndex
000400  e2800001          ADD      r0,r0,#1              ;171
000404  e51f106c          LDR      r1,|L1.928|
000408  e5810000          STR      r0,[r1,#0]            ;171  ; nowIndex
00040c  e3a06001          MOV      r6,#1                 ;172
000410  ea000014          B        |L1.1128|
                  |L1.1044|
000414  e51f007c          LDR      r0,|L1.928|
000418  e5900000          LDR      r0,[r0,#0]            ;174  ; nowIndex
00041c  e51f10a0          LDR      r1,|L1.900|
000420  e5911000          LDR      r1,[r1,#0]            ;174  ; oldIndex
000424  e1500001          CMP      r0,r1                 ;174
000428  1a00000e          BNE      |L1.1128|
00042c  e51f00bc          LDR      r0,|L1.888|
000430  e5900000          LDR      r0,[r0,#0]            ;174  ; maxSelectItem
000434  e2400001          SUB      r0,r0,#1              ;174
000438  e51f10a0          LDR      r1,|L1.928|
00043c  e5911000          LDR      r1,[r1,#0]            ;174  ; nowIndex
000440  e1500001          CMP      r0,r1                 ;174
000444  1a000007          BNE      |L1.1128|
000448  e51f00b0          LDR      r0,|L1.928|
00044c  e5900000          LDR      r0,[r0,#0]            ;176  ; nowIndex
000450  e51f10d4          LDR      r1,|L1.900|
000454  e5810000          STR      r0,[r1,#0]            ;176  ; oldIndex
000458  e3a00000          MOV      r0,#0                 ;177
00045c  e51f10c4          LDR      r1,|L1.928|
000460  e5810000          STR      r0,[r1,#0]            ;177  ; nowIndex
000464  e3a06001          MOV      r6,#1                 ;178
                  |L1.1128|
000468  ea000029          B        |L1.1300|
                  |L1.1132|
00046c  e1a00000          MOV      r0,r0                 ;182
000470  ea000027          B        |L1.1300|
                  |L1.1140|
000474  e1a00000          MOV      r0,r0                 ;185
000478  ea000025          B        |L1.1300|
                  |L1.1148|
00047c  e1a00000          MOV      r0,r0                 ;188
000480  e51f0104          LDR      r0,|L1.900|
000484  e5900000          LDR      r0,[r0,#0]            ;189  ; oldIndex
000488  e51f10f0          LDR      r1,|L1.928|
00048c  e5911000          LDR      r1,[r1,#0]            ;189  ; nowIndex
000490  e1500001          CMP      r0,r1                 ;189
000494  1a00000b          BNE      |L1.1224|
000498  e3a00001          MOV      r0,#1                 ;191
00049c  e51f111c          LDR      r1,|L1.904|
0004a0  e5c10000          STRB     r0,[r1,#0]            ;191  ; cleanMsgAfterMove
0004a4  e51f1138          LDR      r1,|L1.884|
0004a8  e5911000          LDR      r1,[r1,#0]            ;192  ; listItem
0004ac  e51f2114          LDR      r2,|L1.928|
0004b0  e5922000          LDR      r2,[r2,#0]            ;192  ; nowIndex
0004b4  e7d10182          LDRB     r0,[r1,r2,LSL #3]     ;192
0004b8  e51f1134          LDR      r1,|L1.908|
0004bc  e5911000          LDR      r1,[r1,#0]            ;192  ; keyinCallback
0004c0  e12fff31          BLX      r1                    ;192
0004c4  e3a06001          MOV      r6,#1                 ;193
                  |L1.1224|
0004c8  ea000011          B        |L1.1300|
                  |L1.1228|
0004cc  e1a00000          MOV      r0,r0                 ;196
0004d0  e3a00071          MOV      r0,#0x71              ;197
0004d4  e51f1150          LDR      r1,|L1.908|
0004d8  e5911000          LDR      r1,[r1,#0]            ;197  ; keyinCallback
0004dc  e12fff31          BLX      r1                    ;197
0004e0  e3a00000          MOV      r0,#0                 ;198
0004e4  e51f1168          LDR      r1,|L1.900|
0004e8  e5810000          STR      r0,[r1,#0]            ;198  ; oldIndex
0004ec  e51f1154          LDR      r1,|L1.928|
0004f0  e5810000          STR      r0,[r1,#0]            ;199  ; nowIndex
0004f4  e3a06001          MOV      r6,#1                 ;200
0004f8  ea000005          B        |L1.1300|
                  |L1.1276|
0004fc  e1a00000          MOV      r0,r0                 ;202
000500  ea000003          B        |L1.1300|
                  |L1.1284|
000504  e1a00000          MOV      r0,r0                 ;208
000508  ea000001          B        |L1.1300|
                  |L1.1292|
00050c  e1a00000          MOV      r0,r0                 ;214
000510  e1a00000          MOV      r0,r0                 ;218
                  |L1.1300|
000514  e1a00000          MOV      r0,r0                 ;163
                  |L1.1304|
000518  e1a00006          MOV      r0,r6                 ;226
00051c  eaffff3b          B        |L1.528|
;;;228    BOOL GuiCalibrationTimerCallback(uint8_t timerIndex)
                          ENDP

                  GuiCalibrationTimerCallback PROC
000520  e92d4010          PUSH     {r4,lr}
;;;229    {
000524  e1a04000          MOV      r4,r0
;;;230        //sysprintf(" [INFO GUI] <Free> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;231        keyIgnoreFlag = TRUE;
000528  e3a00001          MOV      r0,#1
00052c  e51f119c          LDR      r1,|L1.920|
000530  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;232        switch(timerIndex)
000534  e3540000          CMP      r4,#0
000538  0a000004          BEQ      |L1.1360|
00053c  e3540001          CMP      r4,#1
000540  0a000004          BEQ      |L1.1368|
000544  e3540002          CMP      r4,#2
000548  1a000043          BNE      |L1.1628|
00054c  ea000040          B        |L1.1620|
                  |L1.1360|
;;;233        {
;;;234            case UPDATE_BG_TIMER:
000550  e1a00000          MOV      r0,r0
;;;235                break;
000554  ea000040          B        |L1.1628|
                  |L1.1368|
;;;236            case UPDATE_DATA_TIMER:
000558  e1a00000          MOV      r0,r0
;;;237                if(oldIndex!=nowIndex)
00055c  e51f01e0          LDR      r0,|L1.900|
000560  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000564  e51f11cc          LDR      r1,|L1.928|
000568  e5911000          LDR      r1,[r1,#0]  ; nowIndex
00056c  e1500001          CMP      r0,r1
000570  0a000036          BEQ      |L1.1616|
;;;238                {
;;;239                    if(cleanMsgAfterMove)
000574  e51f01f4          LDR      r0,|L1.904|
000578  e5d00000          LDRB     r0,[r0,#0]  ; cleanMsgAfterMove
00057c  e3500000          CMP      r0,#0
000580  0a00001a          BEQ      |L1.1520|
;;;240                    {
;;;241                        cleanMsgAfterMove = FALSE;
000584  e3a00000          MOV      r0,#0
000588  e51f1208          LDR      r1,|L1.904|
00058c  e5c10000          STRB     r0,[r1,#0]  ; cleanMsgAfterMove
;;;242                        EPDDrawString(FALSE,"                              ",100,100+(44*(10)));
000590  e3a03f87          MOV      r3,#0x21c
000594  e3a02064          MOV      r2,#0x64
000598  e28f1e13          ADR      r1,|L1.1744|
00059c  ebfffffe          BL       EPDDrawString
;;;243                        EPDDrawString(FALSE,"                              ",100,100+(44*(11)));
0005a0  e3a03f92          MOV      r3,#0x248
0005a4  e3a02064          MOV      r2,#0x64
0005a8  e28f1e12          ADR      r1,|L1.1744|
0005ac  e3a00000          MOV      r0,#0
0005b0  ebfffffe          BL       EPDDrawString
;;;244                        EPDDrawString(FALSE,"           ",300+400,100+(44*(2)));
0005b4  e3a030bc          MOV      r3,#0xbc
0005b8  e3a02faf          MOV      r2,#0x2bc
0005bc  e28f1f4b          ADR      r1,|L1.1776|
0005c0  e3a00000          MOV      r0,#0
0005c4  ebfffffe          BL       EPDDrawString
;;;245                        EPDDrawString(FALSE,"           ",300+400,100+(44*(3)));
0005c8  e3a030e8          MOV      r3,#0xe8
0005cc  e3a02faf          MOV      r2,#0x2bc
0005d0  e28f1f46          ADR      r1,|L1.1776|
0005d4  e3a00000          MOV      r0,#0
0005d8  ebfffffe          BL       EPDDrawString
;;;246                        EPDDrawString(TRUE,"           ",300+400,100+(44*(4)));
0005dc  e3a03f45          MOV      r3,#0x114
0005e0  e3a02faf          MOV      r2,#0x2bc
0005e4  e28f1f41          ADR      r1,|L1.1776|
0005e8  e3a00001          MOV      r0,#1
0005ec  ebfffffe          BL       EPDDrawString
                  |L1.1520|
;;;247                        //EPDDrawString(TRUE,"           ",300+400,100+(44*(oldIndex+2)));
;;;248                    }
;;;249                    //deselect item change to white
;;;250                    EPDDrawContainByIDPos(FALSE,EPD_PICT_LINE_SMALL_2_INDEX ,300,100+(44*(oldIndex+2)));
0005f0  e51f0274          LDR      r0,|L1.900|
0005f4  e5900000          LDR      r0,[r0,#0]  ; oldIndex
0005f8  e2800002          ADD      r0,r0,#2
0005fc  e3a0102c          MOV      r1,#0x2c
000600  e0000091          MUL      r0,r1,r0
000604  e2803064          ADD      r3,r0,#0x64
000608  e3a02f4b          MOV      r2,#0x12c
00060c  e3a0105c          MOV      r1,#0x5c
000610  e3a00000          MOV      r0,#0
000614  ebfffffe          BL       EPDDrawContainByIDPos
;;;251                    //select item change to black
;;;252                    EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,300,100+(44*(nowIndex+2)));
000618  e51f0280          LDR      r0,|L1.928|
00061c  e5900000          LDR      r0,[r0,#0]  ; nowIndex
000620  e2800002          ADD      r0,r0,#2
000624  e3a0102c          MOV      r1,#0x2c
000628  e0000091          MUL      r0,r1,r0
00062c  e2803064          ADD      r3,r0,#0x64
000630  e3a02f4b          MOV      r2,#0x12c
000634  e3a0106b          MOV      r1,#0x6b
000638  e3a00001          MOV      r0,#1
00063c  ebfffffe          BL       EPDDrawContainByIDPos
;;;253                    oldIndex=nowIndex;
000640  e51f02a8          LDR      r0,|L1.928|
000644  e5900000          LDR      r0,[r0,#0]  ; nowIndex
000648  e51f12cc          LDR      r1,|L1.900|
00064c  e5810000          STR      r0,[r1,#0]  ; oldIndex
                  |L1.1616|
;;;254                }
;;;255                break;
000650  ea000001          B        |L1.1628|
                  |L1.1620|
;;;256            case EXIT_TIMER:
000654  e1a00000          MOV      r0,r0
;;;257                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);        
;;;258                break;
000658  e1a00000          MOV      r0,r0
                  |L1.1628|
00065c  e1a00000          MOV      r0,r0                 ;235
;;;259        }
;;;260        keyIgnoreFlag = FALSE;
000660  e3a00000          MOV      r0,#0
000664  e51f12d4          LDR      r1,|L1.920|
000668  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;261        return TRUE;
00066c  e3a00001          MOV      r0,#1
;;;262    }
000670  e8bd8010          POP      {r4,pc}
;;;263    
                          ENDP

                  GuiCalibrationPowerCallbackFunc PROC
;;;264    BOOL GuiCalibrationPowerCallbackFunc(uint8_t type, int flag)
000674  e1a02000          MOV      r2,r0
;;;265    {
;;;266        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;267        switch(type)
000678  e3520001          CMP      r2,#1
00067c  0a000006          BEQ      |L1.1692|
000680  e3520002          CMP      r2,#2
000684  0a000008          BEQ      |L1.1708|
000688  e3520003          CMP      r2,#3
00068c  0a000008          BEQ      |L1.1716|
000690  e3520004          CMP      r2,#4
000694  1a00000a          BNE      |L1.1732|
000698  ea000007          B        |L1.1724|
                  |L1.1692|
;;;268        {
;;;269            case GUI_POWER_STATUS_INDEX:
00069c  e1a00000          MOV      r0,r0
;;;270                return powerStatus;
0006a0  e51f0318          LDR      r0,|L1.912|
0006a4  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.1704|
;;;271            case GUI_POWER_ON_INDEX:
;;;272                break;
;;;273            case GUI_POWER_OFF_INDEX:
;;;274                break;
;;;275            case GUI_POWER_PREV_OFF_INDEX:
;;;276                break;
;;;277        }
;;;278        return TRUE;
;;;279    }
0006a8  e12fff1e          BX       lr
                  |L1.1708|
0006ac  e1a00000          MOV      r0,r0                 ;271
0006b0  ea000003          B        |L1.1732|
                  |L1.1716|
0006b4  e1a00000          MOV      r0,r0                 ;273
0006b8  ea000001          B        |L1.1732|
                  |L1.1724|
0006bc  e1a00000          MOV      r0,r0                 ;275
0006c0  e1a00000          MOV      r0,r0                 ;276
                  |L1.1732|
0006c4  e1a00000          MOV      r0,r0                 ;272
0006c8  e3a00001          MOV      r0,#1                 ;278
0006cc  eafffff5          B        |L1.1704|
;;;280    
                          ENDP

                  |L1.1744|
0006d0  20202020          DCB      "                              ",0
0006d4  20202020
0006d8  20202020
0006dc  20202020
0006e0  20202020
0006e4  20202020
0006e8  20202020
0006ec  202000  
0006ef  00                DCB      0
                  |L1.1776|
0006f0  20202020          DCB      "           ",0
0006f4  20202020
0006f8  20202000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c43616c          DCB      0x3c,0x43,0x61,0x6c
000010  69627261          DCB      0x69,0x62,0x72,0x61
000014  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000018  3e204b65          DCB      0x3e,0x20,0x4b,0x65
00001c  7943616c          DCB      0x79,0x43,0x61,0x6c
000020  6c626163          DCB      0x6c,0x62,0x61,0x63
000024  6b3a2020          DCB      0x6b,0x3a,0x20,0x20
000028  46756e63          DCB      0x46,0x75,0x6e,0x63
00002c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000030  20506f69          DCB      0x20,0x50,0x6f,0x69
000034  6e746572          DCB      0x6e,0x74,0x65,0x72
000038  20455252          DCB      0x20,0x45,0x52,0x52
00003c  4f522121          DCB      0x4f,0x52,0x21,0x21
000040  210a00            DCB      0x21,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  keyinCallback
                          DCD      0x00000000
                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000008  01                DCB      0x01
                  keyIgnoreFlag
000009  000000            DCB      0x00,0x00,0x00
                  maxSelectItem
                          DCD      0x00000000
                  nowIndex
                          DCD      0x00000000
                  oldIndex
                          DCD      0x00000000
                  cleanMsgAfterMove
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  listItem
                          DCD      0x00000000
