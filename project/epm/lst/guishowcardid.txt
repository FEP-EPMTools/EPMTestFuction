; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guishowcardid.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guishowcardid.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guishowcardid.crf src\user\guishowcardid.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;72     /*-----------------------------------------*/
;;;73     static void updateBG(void)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;74     {
;;;75         TickType_t tickLocalStart = xTaskGetTickCount();
000004  ebfffffe          BL       xTaskGetTickCount
000008  e1a04000          MOV      r4,r0
;;;76         //sysprintf(" [INFO GUI] <Stand By> updateBG enter: cost ticks = [%d]\n", xTaskGetTickCount() - tickStart); 
;;;77         switch(refreshType)
00000c  e59f0208          LDR      r0,|L1.540|
000010  e5d00000          LDRB     r0,[r0,#0]  ; refreshType
000014  e3500002          CMP      r0,#2
000018  0a000004          BEQ      |L1.48|
00001c  e3500003          CMP      r0,#3
000020  0a000004          BEQ      |L1.56|
000024  e3500004          CMP      r0,#4
000028  1a000006          BNE      |L1.72|
00002c  ea000003          B        |L1.64|
                  |L1.48|
;;;78         {
;;;79             case GUI_REDRAW_PARA_NORMAL:
000030  e1a00000          MOV      r0,r0
;;;80     
;;;81                 break;
000034  ea000009          B        |L1.96|
                  |L1.56|
;;;82             case GUI_REDRAW_PARA_REFRESH:
000038  e1a00000          MOV      r0,r0
;;;83     
;;;84                 break;
00003c  ea000007          B        |L1.96|
                  |L1.64|
;;;85             case GUI_REDRAW_PARA_CONTAIN:
000040  e1a00000          MOV      r0,r0
;;;86                 
;;;87                 break;
000044  ea000005          B        |L1.96|
                  |L1.72|
;;;88             default:
000048  e1a00000          MOV      r0,r0
;;;89                 sysprintf(" [INFO GUI] <Stand By> updateBG refreshType ERROR :refreshType = %d\n", refreshType); 
00004c  e59f01c8          LDR      r0,|L1.540|
000050  e5d01000          LDRB     r1,[r0,#0]  ; refreshType
000054  e59f01c4          LDR      r0,|L1.544|
000058  ebfffffe          BL       sysprintf
;;;90                 break;
00005c  e1a00000          MOV      r0,r0
                  |L1.96|
000060  e1a00000          MOV      r0,r0                 ;81
;;;91                     
;;;92         }
;;;93         refreshType = GUI_REDRAW_PARA_NONE;
000064  e3a00001          MOV      r0,#1
000068  e59f11ac          LDR      r1,|L1.540|
00006c  e5c10000          STRB     r0,[r1,#0]  ; refreshType
;;;94         //Draw BG
;;;95         EPDDrawMulti(TRUE,EPD_PICT_ALL_WHITE_INDEX,0,0);
000070  e3a03000          MOV      r3,#0
000074  e1a02003          MOV      r2,r3
000078  e3a01003          MOV      r1,#3
00007c  ebfffffe          BL       EPDDrawMulti
;;;96         EPDDrawString(FALSE,"Show Card ID",X_HEAD_TITLE,Y_HEAD_TITLE);
000080  e3a0301c          MOV      r3,#0x1c
000084  e3a0205a          MOV      r2,#0x5a
000088  e28f1f65          ADR      r1,|L1.548|
00008c  e3a00000          MOV      r0,#0
000090  ebfffffe          BL       EPDDrawString
;;;97         EPDDrawString(FALSE,"CARD ID :",170,454);
000094  e59f3198          LDR      r3,|L1.564|
000098  e3a020aa          MOV      r2,#0xaa
00009c  e28f1f65          ADR      r1,|L1.568|
0000a0  e3a00000          MOV      r0,#0
0000a4  ebfffffe          BL       EPDDrawString
;;;98         EPDDrawString(TRUE,"Press } To Exit",BTM_DISCRIPT_BAR_X,BTM_DISCRIPT_BAR_Y);
0000a8  e3a03f8b          MOV      r3,#0x22c
0000ac  e3a02050          MOV      r2,#0x50
0000b0  e28f1f63          ADR      r1,|L1.580|
0000b4  e3a00001          MOV      r0,#1
0000b8  ebfffffe          BL       EPDDrawString
;;;99         EPDDrawString(TRUE,"Please wait   ",240,254);
0000bc  e3a030fe          MOV      r3,#0xfe
0000c0  e3a020f0          MOV      r2,#0xf0
0000c4  e28f1f62          ADR      r1,|L1.596|
0000c8  e3a00001          MOV      r0,#1
0000cc  ebfffffe          BL       EPDDrawString
;;;100    //    epdShowID(cardID);
;;;101    //    UpdateClock(TRUE, FALSE);
;;;102        
;;;103    //    GetMeterData()->currentSelSpace = 0;
;;;104        
;;;105        sysprintf(" [INFO GUI] <Stand By> updateBG: **Local:[%d]**, **[%d]**\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - tickStart);  
0000d0  ebfffffe          BL       xTaskGetTickCount
0000d4  e59f1188          LDR      r1,|L1.612|
0000d8  e5911000          LDR      r1,[r1,#0]  ; tickStart
0000dc  e0405001          SUB      r5,r0,r1
0000e0  ebfffffe          BL       xTaskGetTickCount
0000e4  e0406004          SUB      r6,r0,r4
0000e8  e1a02005          MOV      r2,r5
0000ec  e1a01006          MOV      r1,r6
0000f0  e28f0e17          ADR      r0,|L1.616|
0000f4  ebfffffe          BL       sysprintf
;;;106        //powerStatus = TRUE;    
;;;107    }
0000f8  e8bd8070          POP      {r4-r6,pc}
;;;108    static void updateData(void)
                          ENDP

                  updateData PROC
0000fc  e12fff1e          BX       lr
;;;109    {
;;;110        
;;;111    }
;;;112    /*-----------------------------------------*/
                          ENDP

                  GuiShowCardIdOnDraw PROC
;;;114    /*-----------------------------------------*/
;;;115    BOOL GuiShowCardIdOnDraw(uint8_t oriGuiId, uint8_t para, int para2, int para3)
000100  e92d41f0          PUSH     {r4-r8,lr}
;;;116    {   
000104  e1a05000          MOV      r5,r0
000108  e1a04001          MOV      r4,r1
00010c  e1a06002          MOV      r6,r2
000110  e1a07003          MOV      r7,r3
;;;117        //tickStart = xTaskGetTickCount();
;;;118        sysprintf(" [INFO GUI] <Stand By> OnDraw (from GuiId = %d, para = %d)\n", oriGuiId, para); 
000114  e1a02004          MOV      r2,r4
000118  e1a01005          MOV      r1,r5
00011c  e28f0d06          ADR      r0,|L1.676|
000120  ebfffffe          BL       sysprintf
;;;119        powerStatus = FALSE;
000124  e3a00000          MOV      r0,#0
000128  e59f11b0          LDR      r1,|L1.736|
00012c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;120        pGuiGetInterface = GuiGetInterface();
000130  ebfffffe          BL       GuiGetInterface
000134  e59f11a8          LDR      r1,|L1.740|
000138  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;121        pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);
00013c  e2810000          ADD      r0,r1,#0
000140  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000144  e3e01000          MVN      r1,#0
000148  e590200c          LDR      r2,[r0,#0xc]
00014c  e3a00000          MOV      r0,#0
000150  e12fff32          BLX      r2
;;;122        pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
000154  e59f0188          LDR      r0,|L1.740|
000158  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00015c  e3a01032          MOV      r1,#0x32
000160  e590200c          LDR      r2,[r0,#0xc]
000164  e3a00001          MOV      r0,#1
000168  e12fff32          BLX      r2
;;;123        pGuiGetInterface->setTimeoutFunc(UPDATE_SPACE_DETECT_TIMER, UPDATE_SPACE_DETECT_INTERVAL);      
00016c  e59f0170          LDR      r0,|L1.740|
000170  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000174  e3a01005          MOV      r1,#5
000178  e590200c          LDR      r2,[r0,#0xc]
00017c  e3a00002          MOV      r0,#2
000180  e12fff32          BLX      r2
;;;124        PowerDrvSetEnable(TRUE);
000184  e3a00001          MOV      r0,#1
000188  ebfffffe          BL       PowerDrvSetEnable
;;;125        EPDSetSleepFunction(FALSE);
00018c  e3a00000          MOV      r0,#0
000190  ebfffffe          BL       EPDSetSleepFunction
;;;126        refreshType = para;
000194  e59f0080          LDR      r0,|L1.540|
000198  e5c04000          STRB     r4,[r0,#0]  ; refreshType
;;;127        pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
00019c  e59f0140          LDR      r0,|L1.740|
0001a0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001a4  e5901010          LDR      r1,[r0,#0x10]
0001a8  e3a00000          MOV      r0,#0
0001ac  e12fff31          BLX      r1
;;;128        
;;;129        //CardReaderSetPower(EPM_READER_CTRL_ID_GUI, FALSE);
;;;130        //EPDReSetBacklightTimeout(5000/portTICK_RATE_MS);
;;;131        
;;;132        updateBG();
0001b0  ebfffffe          BL       updateBG
;;;133        return TRUE;
0001b4  e3a00001          MOV      r0,#1
;;;134    }
0001b8  e8bd81f0          POP      {r4-r8,pc}
;;;135    BOOL GuiShowCardIdUpdateData(void)
                          ENDP

                  GuiShowCardIdUpdateData PROC
0001bc  e92d4010          PUSH     {r4,lr}
;;;136    {    
;;;137        //tickStart = xTaskGetTickCount();
;;;138        sysprintf(" [INFO GUI] <Stand By> UpdateData\n"); 
0001c0  e28f0e12          ADR      r0,|L1.744|
0001c4  ebfffffe          BL       sysprintf
;;;139        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更新畫面
0001c8  e59f0114          LDR      r0,|L1.740|
0001cc  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001d0  e5901010          LDR      r1,[r0,#0x10]
0001d4  e3a00001          MOV      r0,#1
0001d8  e12fff31          BLX      r1
;;;140        return TRUE;
0001dc  e3a00001          MOV      r0,#1
;;;141    }
0001e0  e8bd8010          POP      {r4,pc}
;;;142    BOOL GuiShowCardIdKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiShowCardIdKeyCallback PROC
0001e4  e92d4070          PUSH     {r4-r6,lr}
;;;143    {   
0001e8  e1a04000          MOV      r4,r0
0001ec  e1a05001          MOV      r5,r1
;;;144        BOOL reVal = FALSE; 
0001f0  e3a06000          MOV      r6,#0
;;;145        //sysprintf(" [INFO GUI] <Stand By> Key:  keyId = %d, downUp = %d\n", keyId, downUp);
;;;146        //if(keyIgnoreFlag)
;;;147        if(keyIgnoreFlag && (keyId < GUI_KEYPAD_NORMAL_ID))
0001f4  e59f0110          LDR      r0,|L1.780|
0001f8  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
0001fc  e3500000          CMP      r0,#0
000200  0a00004c          BEQ      |L1.824|
000204  e3540010          CMP      r4,#0x10
000208  aa00004a          BGE      |L1.824|
;;;148        {
;;;149            sysprintf(" [INFO GUI] <Stand By> Key:  ignore...\n"); 
00020c  e28f00fc          ADR      r0,|L1.784|
000210  ebfffffe          BL       sysprintf
;;;150            return reVal;
000214  e1a00006          MOV      r0,r6
                  |L1.536|
;;;151        }
;;;152        
;;;153        if(GUI_KEY_DOWN_INDEX == downUp)
;;;154        {
;;;155            switch(keyId)
;;;156            {
;;;157                case GUI_KEYPAD_LEFT_ID:
;;;158                    
;;;159                    break;
;;;160                case GUI_KEYPAD_RIGHT_ID:
;;;161                    
;;;162                    break;
;;;163                case GUI_KEYPAD_ADD_ID:
;;;164                    
;;;165                    break;
;;;166                case GUI_KEYPAD_MINUS_ID:
;;;167                    
;;;168                    break;
;;;169            #if(SUPPORT_HK_10_HW)
;;;170                case GUI_KEYPAD_QRCODE_ID:
;;;171            #else
;;;172                case GUI_KEYPAD_CONFIRM_ID:
;;;173            #endif
;;;174                    SetGuiResponseVal('q');
;;;175                    reVal = TRUE;
;;;176                    break;
;;;177                
;;;178                case GUI_KEYPAD_NORMAL_ID:                
;;;179                    //reVal = TRUE;
;;;180                    break;
;;;181                
;;;182                case GUI_KEYPAD_REPLACE_BP_ID:
;;;183    //                EPDReSetBacklightTimeout(portMAX_DELAY);
;;;184                    GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;185                    reVal = TRUE;
;;;186                    break;
;;;187                
;;;188                case GUI_KEYPAD_TESTER_ID:
;;;189    //                EPDReSetBacklightTimeout(portMAX_DELAY);
;;;190                    GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;191                    reVal = TRUE;
;;;192                    break;
;;;193                
;;;194                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;195    //                EPDReSetBacklightTimeout(portMAX_DELAY);
;;;196                    GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;197                    reVal = TRUE;
;;;198                    break;
;;;199                
;;;200                default:
;;;201                    sysprintf(" [INFO GUI] <Stand By> Key:  not support keyId 0x%02x...\n", keyId); 
;;;202                    break;
;;;203            }
;;;204        }
;;;205        else
;;;206        {
;;;207            
;;;208        }    
;;;209        //if(reVal)
;;;210        //    EPDReSetBacklightTimeout(5000);
;;;211        return reVal;
;;;212    }
000218  e8bd8070          POP      {r4-r6,pc}
                  |L1.540|
                          DCD      refreshType
                  |L1.544|
                          DCD      ||.constdata||
                  |L1.548|
000224  53686f77          DCB      "Show Card ID",0
000228  20436172
00022c  64204944
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L1.564|
                          DCD      0x000001c6
                  |L1.568|
000238  43415244          DCB      "CARD ID :",0
00023c  20494420
000240  3a00    
000242  00                DCB      0
000243  00                DCB      0
                  |L1.580|
000244  50726573          DCB      "Press } To Exit",0
000248  73207d20
00024c  546f2045
000250  78697400
                  |L1.596|
000254  506c6561          DCB      "Please wait   ",0
000258  73652077
00025c  61697420
000260  202000  
000263  00                DCB      0
                  |L1.612|
                          DCD      tickStart
                  |L1.616|
000268  205b494e          DCB      " [INFO GUI] <Stand By> updateBG: **Local:[%d]**, **[%d]"
00026c  464f2047
000270  55495d20
000274  3c537461
000278  6e642042
00027c  793e2075
000280  70646174
000284  6542473a
000288  202a2a4c
00028c  6f63616c
000290  3a5b2564
000294  5d2a2a2c
000298  202a2a5b
00029c  25645d  
00029f  2a2a0a00          DCB      "**\n",0
0002a3  00                DCB      0
                  |L1.676|
0002a4  205b494e          DCB      " [INFO GUI] <Stand By> OnDraw (from GuiId = %d, para = "
0002a8  464f2047
0002ac  55495d20
0002b0  3c537461
0002b4  6e642042
0002b8  793e204f
0002bc  6e447261
0002c0  77202866
0002c4  726f6d20
0002c8  47756949
0002cc  64203d20
0002d0  25642c20
0002d4  70617261
0002d8  203d20  
0002db  2564290a          DCB      "%d)\n",0
0002df  00      
                  |L1.736|
                          DCD      powerStatus
                  |L1.740|
                          DCD      pGuiGetInterface
                  |L1.744|
0002e8  205b494e          DCB      " [INFO GUI] <Stand By> UpdateData\n",0
0002ec  464f2047
0002f0  55495d20
0002f4  3c537461
0002f8  6e642042
0002fc  793e2055
000300  70646174
000304  65446174
000308  610a00  
00030b  00                DCB      0
                  |L1.780|
                          DCD      keyIgnoreFlag
                  |L1.784|
000310  205b494e          DCB      " [INFO GUI] <Stand By> Key:  ignore...\n",0
000314  464f2047
000318  55495d20
00031c  3c537461
000320  6e642042
000324  793e204b
000328  65793a20
00032c  2069676e
000330  6f72652e
000334  2e2e0a00
                  |L1.824|
000338  e3550001          CMP      r5,#1                 ;153
00033c  1a000041          BNE      |L1.1096|
000340  e3540004          CMP      r4,#4                 ;155
000344  0a000016          BEQ      |L1.932|
000348  ca000008          BGT      |L1.880|
00034c  e3540000          CMP      r4,#0                 ;155
000350  0a000017          BEQ      |L1.948|
000354  e3540001          CMP      r4,#1                 ;155
000358  0a000013          BEQ      |L1.940|
00035c  e3540002          CMP      r4,#2                 ;155
000360  0a00000d          BEQ      |L1.924|
000364  e3540003          CMP      r4,#3                 ;155
000368  1a000030          BNE      |L1.1072|
00036c  ea000008          B        |L1.916|
                  |L1.880|
000370  e3540010          CMP      r4,#0x10              ;155
000374  0a000013          BEQ      |L1.968|
000378  e3540011          CMP      r4,#0x11              ;155
00037c  0a000013          BEQ      |L1.976|
000380  e3540013          CMP      r4,#0x13              ;155
000384  0a000021          BEQ      |L1.1040|
000388  e3540014          CMP      r4,#0x14              ;155
00038c  1a000027          BNE      |L1.1072|
000390  ea000016          B        |L1.1008|
                  |L1.916|
000394  e1a00000          MOV      r0,r0                 ;157
000398  ea000029          B        |L1.1092|
                  |L1.924|
00039c  e1a00000          MOV      r0,r0                 ;160
0003a0  ea000027          B        |L1.1092|
                  |L1.932|
0003a4  e1a00000          MOV      r0,r0                 ;163
0003a8  ea000025          B        |L1.1092|
                  |L1.940|
0003ac  e1a00000          MOV      r0,r0                 ;166
0003b0  ea000023          B        |L1.1092|
                  |L1.948|
0003b4  e1a00000          MOV      r0,r0                 ;170
0003b8  e3a00071          MOV      r0,#0x71              ;174
0003bc  ebfffffe          BL       SetGuiResponseVal
0003c0  e3a06001          MOV      r6,#1                 ;175
0003c4  ea00001e          B        |L1.1092|
                  |L1.968|
0003c8  e1a00000          MOV      r0,r0                 ;178
0003cc  ea00001c          B        |L1.1092|
                  |L1.976|
0003d0  e1a00000          MOV      r0,r0                 ;182
0003d4  e3a03000          MOV      r3,#0                 ;184
0003d8  e1a02003          MOV      r2,r3                 ;184
0003dc  e3a01003          MOV      r1,#3                 ;184
0003e0  e3a00008          MOV      r0,#8                 ;184
0003e4  ebfffffe          BL       GuiManagerShowScreen
0003e8  e3a06001          MOV      r6,#1                 ;185
0003ec  ea000014          B        |L1.1092|
                  |L1.1008|
0003f0  e1a00000          MOV      r0,r0                 ;188
0003f4  e3a03000          MOV      r3,#0                 ;190
0003f8  e1a02003          MOV      r2,r3                 ;190
0003fc  e3a01003          MOV      r1,#3                 ;190
000400  e3a00009          MOV      r0,#9                 ;190
000404  ebfffffe          BL       GuiManagerShowScreen
000408  e3a06001          MOV      r6,#1                 ;191
00040c  ea00000c          B        |L1.1092|
                  |L1.1040|
000410  e1a00000          MOV      r0,r0                 ;194
000414  e3a03000          MOV      r3,#0                 ;196
000418  e1a02003          MOV      r2,r3                 ;196
00041c  e3a01003          MOV      r1,#3                 ;196
000420  e3a0000a          MOV      r0,#0xa               ;196
000424  ebfffffe          BL       GuiManagerShowScreen
000428  e3a06001          MOV      r6,#1                 ;197
00042c  ea000004          B        |L1.1092|
                  |L1.1072|
000430  e1a00000          MOV      r0,r0                 ;200
000434  e1a01004          MOV      r1,r4                 ;201
000438  e28f0c01          ADR      r0,|L1.1344|
00043c  ebfffffe          BL       sysprintf
000440  e1a00000          MOV      r0,r0                 ;202
                  |L1.1092|
000444  e1a00000          MOV      r0,r0                 ;159
                  |L1.1096|
000448  e1a00006          MOV      r0,r6                 ;211
00044c  eaffff71          B        |L1.536|
;;;213    BOOL GuiShowCardIdTimerCallback(uint8_t timerIndex)
                          ENDP

                  GuiShowCardIdTimerCallback PROC
000450  e92d4010          PUSH     {r4,lr}
;;;214    {
000454  e1a04000          MOV      r4,r0
;;;215        //sysprintf(" [INFO GUI] <Stand By> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;216        powerStatus = FALSE;  
000458  e3a00000          MOV      r0,#0
00045c  e51f1184          LDR      r1,|L1.736|
000460  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;217        keyIgnoreFlag = TRUE;
000464  e3a00001          MOV      r0,#1
000468  e51f1164          LDR      r1,|L1.780|
00046c  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;218        if(powerStatusFlag == FALSE)
000470  e59f0104          LDR      r0,|L1.1404|
000474  e5d00000          LDRB     r0,[r0,#0]  ; powerStatusFlag
000478  e3500000          CMP      r0,#0
00047c  1a00000e          BNE      |L1.1212|
;;;219        {
;;;220            switch(timerIndex)
000480  e3540000          CMP      r4,#0
000484  0a000004          BEQ      |L1.1180|
000488  e3540001          CMP      r4,#1
00048c  0a000004          BEQ      |L1.1188|
000490  e3540002          CMP      r4,#2
000494  1a000007          BNE      |L1.1208|
000498  ea000003          B        |L1.1196|
                  |L1.1180|
;;;221            {
;;;222                case UPDATE_BG_TIMER:
00049c  e1a00000          MOV      r0,r0
;;;223                    //updateBG();
;;;224                    break;
0004a0  ea000004          B        |L1.1208|
                  |L1.1188|
;;;225                case UPDATE_DATA_TIMER:
0004a4  e1a00000          MOV      r0,r0
;;;226    //                updateData();
;;;227                    break;
0004a8  ea000002          B        |L1.1208|
                  |L1.1196|
;;;228                case UPDATE_SPACE_DETECT_TIMER:
0004ac  e1a00000          MOV      r0,r0
;;;229                    updateData();
0004b0  ebfffffe          BL       updateData
;;;230    //                StartSpaceDrv();
;;;231                    break;
0004b4  e1a00000          MOV      r0,r0
                  |L1.1208|
0004b8  e1a00000          MOV      r0,r0                 ;224
                  |L1.1212|
;;;232    
;;;233            }
;;;234        }
;;;235        keyIgnoreFlag = FALSE;
0004bc  e3a00000          MOV      r0,#0
0004c0  e51f11bc          LDR      r1,|L1.780|
0004c4  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;236        powerStatus = TRUE;  
0004c8  e3a00001          MOV      r0,#1
0004cc  e51f11f4          LDR      r1,|L1.736|
0004d0  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;237        return TRUE;
;;;238    }
0004d4  e8bd8010          POP      {r4,pc}
;;;239    
                          ENDP

                  GuiShowCardIdPowerCallbackFunc PROC
;;;240    BOOL GuiShowCardIdPowerCallbackFunc(uint8_t type, int flag)
0004d8  e1a02000          MOV      r2,r0
;;;241    {
;;;242        //sysprintf(" [INFO GUI] Standby power [%d] : flag = %d!!\n", type, flag);
;;;243        switch(type)
0004dc  e3520001          CMP      r2,#1
0004e0  0a000006          BEQ      |L1.1280|
0004e4  e3520002          CMP      r2,#2
0004e8  0a000008          BEQ      |L1.1296|
0004ec  e3520003          CMP      r2,#3
0004f0  0a000008          BEQ      |L1.1304|
0004f4  e3520004          CMP      r2,#4
0004f8  1a00000d          BNE      |L1.1332|
0004fc  ea000007          B        |L1.1312|
                  |L1.1280|
;;;244        {
;;;245            case GUI_POWER_STATUS_INDEX:
000500  e1a00000          MOV      r0,r0
;;;246                return powerStatus;
000504  e51f022c          LDR      r0,|L1.736|
000508  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.1292|
;;;247            case GUI_POWER_ON_INDEX:      
;;;248    //            if(flag == WAKEUP_SOURCE_RTC)  
;;;249    //            {               
;;;250    //                sysprintf(" [INFO GUI] <Stand By> PowerCallbackFunc UPDATE_DATA_TIMER\n");
;;;251    //                powerStatus = FALSE;                 
;;;252    //                pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);
;;;253    //            }
;;;254    //            else
;;;255    //            {
;;;256    //                sysprintf(" [INFO GUI] <Stand By> PowerCallbackFunc ignore\n");  
;;;257    //            }
;;;258    //            powerStatusFlag = FALSE;
;;;259                break;
;;;260            case GUI_POWER_OFF_INDEX:
;;;261                break;
;;;262            case GUI_POWER_PREV_OFF_INDEX:
;;;263                powerStatusFlag = TRUE;
;;;264                break;
;;;265        }
;;;266        return TRUE;
;;;267    }
00050c  e12fff1e          BX       lr
                  |L1.1296|
000510  e1a00000          MOV      r0,r0                 ;247
000514  ea000006          B        |L1.1332|
                  |L1.1304|
000518  e1a00000          MOV      r0,r0                 ;260
00051c  ea000004          B        |L1.1332|
                  |L1.1312|
000520  e1a00000          MOV      r0,r0                 ;262
000524  e3a00001          MOV      r0,#1                 ;263
000528  e59f304c          LDR      r3,|L1.1404|
00052c  e5c30000          STRB     r0,[r3,#0]            ;263  ; powerStatusFlag
000530  e1a00000          MOV      r0,r0                 ;264
                  |L1.1332|
000534  e1a00000          MOV      r0,r0                 ;259
000538  e3a00001          MOV      r0,#1                 ;266
00053c  eafffff2          B        |L1.1292|
;;;268    
                          ENDP

                  |L1.1344|
000540  205b494e          DCB      " [INFO GUI] <Stand By> Key:  not support keyId 0x%02x.."
000544  464f2047
000548  55495d20
00054c  3c537461
000550  6e642042
000554  793e204b
000558  65793a20
00055c  206e6f74
000560  20737570
000564  706f7274
000568  206b6579
00056c  49642030
000570  78253032
000574  782e2e  
000577  2e0a00            DCB      ".\n",0
00057a  00                DCB      0
00057b  00                DCB      0
                  |L1.1404|
                          DCD      powerStatusFlag

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c537461          DCB      0x3c,0x53,0x74,0x61
000010  6e642042          DCB      0x6e,0x64,0x20,0x42
000014  793e2075          DCB      0x79,0x3e,0x20,0x75
000018  70646174          DCB      0x70,0x64,0x61,0x74
00001c  65424720          DCB      0x65,0x42,0x47,0x20
000020  72656672          DCB      0x72,0x65,0x66,0x72
000024  65736854          DCB      0x65,0x73,0x68,0x54
000028  79706520          DCB      0x79,0x70,0x65,0x20
00002c  4552524f          DCB      0x45,0x52,0x52,0x4f
000030  52203a72          DCB      0x52,0x20,0x3a,0x72
000034  65667265          DCB      0x65,0x66,0x72,0x65
000038  73685479          DCB      0x73,0x68,0x54,0x79
00003c  7065203d          DCB      0x70,0x65,0x20,0x3d
000040  2025640a          DCB      0x20,0x25,0x64,0x0a
000044  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  00                DCB      0x00
                  powerStatusFlag
000005  000000            DCB      0x00,0x00,0x00
                  tickStart
                          DCD      0x00000000
                  keyIgnoreFlag
00000c  00                DCB      0x00
                  refreshType
00000d  01                DCB      0x01
