; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ehci.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ehci.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\ehci.crf ..\..\common\src\BSP\Library\USB_HOST\src_core\ehci.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dump_ehci_regs PROC
;;;38     #ifdef ENABLE_ERROR_MSG
;;;39     void dump_ehci_regs()
000000  e12fff1e          BX       lr
;;;40     {
;;;41         USB_debug("Dump HSUSBH(EHCI) registers:\n");
;;;42         USB_debug("    UCMDR    = 0x%x\n", _ehci->UCMDR);
;;;43         USB_debug("    USTSR    = 0x%x\n", _ehci->USTSR);
;;;44         USB_debug("    UIENR    = 0x%x\n", _ehci->UIENR);
;;;45         USB_debug("    UFINDR   = 0x%x\n", _ehci->UFINDR);
;;;46         USB_debug("    UPFLBAR  = 0x%x\n", _ehci->UPFLBAR);
;;;47         USB_debug("    UCALAR   = 0x%x\n", _ehci->UCALAR);
;;;48         USB_debug("    UASSTR   = 0x%x\n", _ehci->UASSTR);
;;;49         USB_debug("    UCFGR    = 0x%x\n", _ehci->UCFGR);
;;;50         USB_debug("    UPSCR    = 0x%x\n", _ehci->UPSCR[0]);
;;;51         USB_debug("    PHYCTL0  = 0x%x\n", _ehci->USBPCR0);
;;;52         USB_debug("    PHYCTL1  = 0x%x\n", _ehci->USBPCR1);
;;;53     }
;;;54     
                          ENDP

                  dump_ehci_ports PROC
;;;55     void dump_ehci_ports()
000004  e12fff1e          BX       lr
;;;56     {
;;;57         USB_debug("_ehci port0=0x%x, port1=0x%x\n", _ehci->UPSCR[0], _ehci->UPSCR[1]);
;;;58     }
;;;59     
                          ENDP

                  dump_ehci_qtd PROC
;;;60     void dump_ehci_qtd(qTD_T *qtd)
000008  e12fff1e          BX       lr
;;;61     {
;;;62         USB_debug("    [qTD] - 0x%08x\n", (int)qtd);
;;;63         USB_debug("        0x%08x (Next qtd Pointer)\n", qtd->Next_qTD);
;;;64         USB_debug("        0x%08x (Alternate Next qtd Pointer)\n", qtd->Alt_Next_qTD);
;;;65         USB_debug("        0x%08x (qtd Token) PID: %s, Bytes: %d, IOC: %d\n", qtd->Token, (((qtd->Token>>8)&0x3)==0) ? "OUT" : ((((qtd->Token>>8)&0x3)==1) ? "IN" : "SETUP"), (qtd->Token>>16)&0x7FFF, (qtd->Token>>15)&0x1);
;;;66         USB_debug("        0x%08x (Buffer Pointer (page 0))\n", qtd->Bptr[0]);
;;;67         //USB_debug("        0x%08x (Buffer Pointer (page 1))\n", qtd->Bptr[1]);
;;;68         //USB_debug("        0x%08x (Buffer Pointer (page 2))\n", qtd->Bptr[2]);
;;;69         //USB_debug("        0x%08x (Buffer Pointer (page 3))\n", qtd->Bptr[3]);
;;;70         //USB_debug("        0x%08x (Buffer Pointer (page 4))\n", qtd->Bptr[4]);
;;;71         USB_debug("\n");
;;;72     }
;;;73     
                          ENDP

                  dump_ehci_asynclist PROC
;;;74     void dump_ehci_asynclist(void)
00000c  e52de004          PUSH     {lr}
;;;75     {
;;;76         QH_T     *qh = _H_qh;
000010  e59f0e2c          LDR      r0,|L1.3652|
000014  e5902000          LDR      r2,[r0,#0]  ; _H_qh
;;;77         qTD_T    *qtd;
;;;78     
;;;79         USB_debug(">>> Dump EHCI Asynchronous List <<<\n");
;;;80         do
000018  e1a00000          MOV      r0,r0
                  |L1.28|
;;;81         {
;;;82             USB_debug("[QH] - 0x%08x\n", (int)qh);
;;;83             USB_debug("    0x%08x (Queue Head Horizontal Link Pointer, Queue Head DWord 0)\n", qh->HLink);
;;;84             USB_debug("    0x%08x (Endpoint Characteristics) DevAddr: %d, EP: 0x%x, PktSz: %d, Speed: %s\n", qh->Chrst, qh->Chrst&0x7F, (qh->Chrst>>8)&0xF, (qh->Chrst>>16)&0x7FF, ((qh->Chrst>>12)&0x3 == 0) ? "Full" : (((qh->Chrst>>12)&0x3 == 1) ? "Low" : "High"));
;;;85             USB_debug("    0x%08x (Endpoint Capabilities: Queue Head DWord 2)\n", qh->Cap);
;;;86             USB_debug("    0x%08x (Current qtd Pointer)\n", qh->Curr_qTD);
;;;87             USB_debug("    --- Overlay Area ---\n");
;;;88             USB_debug("    0x%08x (Next qtd Pointer)\n", qh->OL_Next_qTD);
;;;89             USB_debug("    0x%08x (Alternate Next qtd Pointer)\n", qh->OL_Alt_Next_qTD);
;;;90             USB_debug("    0x%08x (qtd Token)\n", qh->OL_Token);
;;;91             USB_debug("    0x%08x (Buffer Pointer (page 0))\n", qh->OL_Bptr[0]);
;;;92             USB_debug("\n");
;;;93     
;;;94             qtd = QTD_PTR(qh->Curr_qTD);
00001c  e592000c          LDR      r0,[r2,#0xc]
000020  e3c0101f          BIC      r1,r0,#0x1f
;;;95             while (qtd != NULL)
000024  ea000003          B        |L1.56|
                  |L1.40|
;;;96             {
;;;97                 dump_ehci_qtd(qtd);
000028  e1a00001          MOV      r0,r1
00002c  ebfffffe          BL       dump_ehci_qtd
;;;98                 qtd = QTD_PTR(qtd->Next_qTD);
000030  e5910000          LDR      r0,[r1,#0]
000034  e3c0101f          BIC      r1,r0,#0x1f
                  |L1.56|
000038  e3510000          CMP      r1,#0                 ;95
00003c  1afffff9          BNE      |L1.40|
;;;99             }
;;;100            qh = QH_PTR(qh->HLink);
000040  e5920000          LDR      r0,[r2,#0]
000044  e3c0201f          BIC      r2,r0,#0x1f
;;;101        }
;;;102        while (qh != _H_qh);
000048  e59f0df4          LDR      r0,|L1.3652|
00004c  e5900000          LDR      r0,[r0,#0]  ; _H_qh
000050  e1520000          CMP      r2,r0
000054  1afffff0          BNE      |L1.28|
;;;103    }
000058  e49df004          POP      {pc}
;;;104    
                          ENDP

                  dump_ehci_asynclist_simple PROC
;;;105    void dump_ehci_asynclist_simple(void)
00005c  e59f1de0          LDR      r1,|L1.3652|
;;;106    {
;;;107        QH_T     *qh = _H_qh;
000060  e5910000          LDR      r0,[r1,#0]  ; _H_qh
;;;108    
;;;109        USB_debug(">>> EHCI Asynchronous List <<<\n");
;;;110        USB_debug("[QH] => ");
;;;111        do
000064  e1a00000          MOV      r0,r0
                  |L1.104|
;;;112        {
;;;113            USB_debug("0x%08x ", (int)qh);
;;;114            qh = QH_PTR(qh->HLink);
000068  e5901000          LDR      r1,[r0,#0]
00006c  e3c1001f          BIC      r0,r1,#0x1f
;;;115        }
;;;116        while (qh != _H_qh);
000070  e59f1dcc          LDR      r1,|L1.3652|
000074  e5911000          LDR      r1,[r1,#0]  ; _H_qh
000078  e1500001          CMP      r0,r1
00007c  1afffff9          BNE      |L1.104|
;;;117        USB_debug("\n");
;;;118    }
000080  e12fff1e          BX       lr
;;;119    
                          ENDP

                  dump_ehci_period_frame_list_simple PROC
;;;120    void dump_ehci_period_frame_list_simple(void)
000084  e59f1dbc          LDR      r1,|L1.3656|
;;;121    {
;;;122        QH_T     *qh = _Iqh[NUM_IQH-1];
000088  e5910028          LDR      r0,[r1,#0x28]  ; _Iqh
;;;123    
;;;124        USB_debug(">>> EHCI period frame list simple <<<\n");
;;;125        USB_debug("[FList] => ");
;;;126        do
00008c  e1a00000          MOV      r0,r0
                  |L1.144|
;;;127        {
;;;128            USB_debug("0x%08x ", (int)qh);
;;;129            qh = QH_PTR(qh->HLink);
000090  e5901000          LDR      r1,[r0,#0]
000094  e3c1001f          BIC      r0,r1,#0x1f
;;;130        }
;;;131        while (qh != NULL);
000098  e3500000          CMP      r0,#0
00009c  1afffffb          BNE      |L1.144|
;;;132        USB_debug("\n");
;;;133    }
0000a0  e12fff1e          BX       lr
;;;134    
                          ENDP

                  dump_ehci_period_frame_list PROC
;;;135    void dump_ehci_period_frame_list()
0000a4  e3a00000          MOV      r0,#0
;;;136    {
;;;137        int    i;
;;;138        QH_T   *qh;
;;;139    
;;;140        for (i = 0; i < FL_SIZE; i++)
0000a8  ea000009          B        |L1.212|
                  |L1.172|
;;;141        {
;;;142            USB_debug("!%02d: ", i);
;;;143            qh = QH_PTR(_PFList[i]);;
0000ac  e59f2d98          LDR      r2,|L1.3660|
0000b0  e5922000          LDR      r2,[r2,#0]  ; _PFList
0000b4  e7922100          LDR      r2,[r2,r0,LSL #2]
0000b8  e3c2101f          BIC      r1,r2,#0x1f
;;;144            while (qh != NULL)
0000bc  ea000001          B        |L1.200|
                  |L1.192|
;;;145            {
;;;146                // USB_debug("0x%x (0x%x) => ", (int)qh, qh->HLink);
;;;147                USB_debug("0x%x => ", (int)qh);
;;;148                qh = QH_PTR(qh->HLink);
0000c0  e5912000          LDR      r2,[r1,#0]
0000c4  e3c2101f          BIC      r1,r2,#0x1f
                  |L1.200|
0000c8  e3510000          CMP      r1,#0                 ;144
0000cc  1afffffb          BNE      |L1.192|
0000d0  e2800001          ADD      r0,r0,#1              ;140
                  |L1.212|
0000d4  e3500b01          CMP      r0,#0x400             ;140
0000d8  bafffff3          BLT      |L1.172|
;;;149            }
;;;150            USB_debug("0\n");
;;;151        }
;;;152    }
0000dc  e12fff1e          BX       lr
;;;153    
                          ENDP

                  init_periodic_frame_list PROC
;;;155    
;;;156    static void init_periodic_frame_list()
0000e0  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
;;;158        QH_T   *qh_p;
;;;159        int    i, idx, interval;
;;;160    
;;;161        _PFList = (uint32_t *)((uint32_t)_PFList_mem | NON_CACHE_MASK);
0000e4  e59f0d64          LDR      r0,|L1.3664|
0000e8  e3800102          ORR      r0,r0,#0x80000000
0000ec  e59f1d58          LDR      r1,|L1.3660|
0000f0  e5810000          STR      r0,[r1,#0]  ; _PFList
;;;162        memset(_PFList, 0, sizeof(_PFList_mem));
0000f4  e3a01a01          MOV      r1,#0x1000
0000f8  e59f0d4c          LDR      r0,|L1.3660|
0000fc  e5900000          LDR      r0,[r0,#0]  ; _PFList
000100  ebfffffe          BL       __aeabi_memclr4
;;;163    
;;;164        iso_ep_list = NULL;
000104  e3a00000          MOV      r0,#0
000108  e59f1d44          LDR      r1,|L1.3668|
00010c  e5810000          STR      r0,[r1,#0]  ; iso_ep_list
;;;165    
;;;166        for (i = NUM_IQH-1; i >= 0; i--)        /* interval = i^2                             */
000110  e3a0400a          MOV      r4,#0xa
000114  ea000043          B        |L1.552|
                  |L1.280|
;;;167        {
;;;168            _Iqh[i] = alloc_ehci_QH();
000118  ebfffffe          BL       alloc_ehci_QH
00011c  e59f1d24          LDR      r1,|L1.3656|
000120  e7810104          STR      r0,[r1,r4,LSL #2]
;;;169    
;;;170            _Iqh[i]->HLink           = QH_HLNK_END;
000124  e3a00001          MOV      r0,#1
000128  e7911104          LDR      r1,[r1,r4,LSL #2]
00012c  e5810000          STR      r0,[r1,#0]
;;;171            _Iqh[i]->Curr_qTD        = (uint32_t)_ghost_qtd;
000130  e59f0d20          LDR      r0,|L1.3672|
000134  e5900000          LDR      r0,[r0,#0]  ; _ghost_qtd
000138  e59f1d08          LDR      r1,|L1.3656|
00013c  e7911104          LDR      r1,[r1,r4,LSL #2]
000140  e581000c          STR      r0,[r1,#0xc]
;;;172            _Iqh[i]->OL_Next_qTD     = QTD_LIST_END;
000144  e3a00001          MOV      r0,#1
000148  e59f1cf8          LDR      r1,|L1.3656|
00014c  e7911104          LDR      r1,[r1,r4,LSL #2]
000150  e5810010          STR      r0,[r1,#0x10]
;;;173            _Iqh[i]->OL_Alt_Next_qTD = (uint32_t)_ghost_qtd;
000154  e59f0cfc          LDR      r0,|L1.3672|
000158  e5900000          LDR      r0,[r0,#0]  ; _ghost_qtd
00015c  e59f1ce4          LDR      r1,|L1.3656|
000160  e7911104          LDR      r1,[r1,r4,LSL #2]
000164  e5810014          STR      r0,[r1,#0x14]
;;;174            _Iqh[i]->OL_Token        = QTD_STS_HALT;
000168  e3a00040          MOV      r0,#0x40
00016c  e59f1cd4          LDR      r1,|L1.3656|
000170  e7911104          LDR      r1,[r1,r4,LSL #2]
000174  e5810018          STR      r0,[r1,#0x18]
;;;175    
;;;176            interval = 0x1 << i;
000178  e3a00001          MOV      r0,#1
00017c  e1a07410          LSL      r7,r0,r4
;;;177    
;;;178            for (idx = interval - 1; idx < FL_SIZE; idx += interval)
000180  e2475001          SUB      r5,r7,#1
000184  ea000024          B        |L1.540|
                  |L1.392|
;;;179            {
;;;180                if (_PFList[idx] == 0)          /* is empty list, insert directly             */
000188  e59f0cbc          LDR      r0,|L1.3660|
00018c  e5900000          LDR      r0,[r0,#0]  ; _PFList
000190  e7900105          LDR      r0,[r0,r5,LSL #2]
000194  e3500000          CMP      r0,#0
000198  1a000007          BNE      |L1.444|
;;;181                {
;;;182                    _PFList[idx] = QH_HLNK_QH(_Iqh[i]);
00019c  e59f0ca4          LDR      r0,|L1.3656|
0001a0  e7900104          LDR      r0,[r0,r4,LSL #2]
0001a4  e3c0001f          BIC      r0,r0,#0x1f
0001a8  e3800002          ORR      r0,r0,#2
0001ac  e59f1c98          LDR      r1,|L1.3660|
0001b0  e5911000          LDR      r1,[r1,#0]  ; _PFList
0001b4  e7810105          STR      r0,[r1,r5,LSL #2]
0001b8  ea000016          B        |L1.536|
                  |L1.444|
;;;183                }
;;;184                else
;;;185                {
;;;186                    qh_p = QH_PTR(_PFList[idx]);
0001bc  e59f0c88          LDR      r0,|L1.3660|
0001c0  e5900000          LDR      r0,[r0,#0]  ; _PFList
0001c4  e7900105          LDR      r0,[r0,r5,LSL #2]
0001c8  e3c0601f          BIC      r6,r0,#0x1f
;;;187    
;;;188                    while (1)
0001cc  ea00000f          B        |L1.528|
                  |L1.464|
;;;189                    {
;;;190                        if (qh_p == _Iqh[i])
0001d0  e59f0c70          LDR      r0,|L1.3656|
0001d4  e7900104          LDR      r0,[r0,r4,LSL #2]
0001d8  e1500006          CMP      r0,r6
0001dc  1a000000          BNE      |L1.484|
;;;191                            break;                   /* already chained by previous visit     */
0001e0  ea00000b          B        |L1.532|
                  |L1.484|
;;;192    
;;;193                        if (qh_p->HLink == QH_HLNK_END)        /* reach end of list?          */
0001e4  e5960000          LDR      r0,[r6,#0]
0001e8  e3500001          CMP      r0,#1
0001ec  1a000005          BNE      |L1.520|
;;;194                        {
;;;195                            qh_p->HLink = QH_HLNK_QH(_Iqh[i]);
0001f0  e59f0c50          LDR      r0,|L1.3656|
0001f4  e7900104          LDR      r0,[r0,r4,LSL #2]
0001f8  e3c0001f          BIC      r0,r0,#0x1f
0001fc  e3800002          ORR      r0,r0,#2
000200  e5860000          STR      r0,[r6,#0]
;;;196                            break;
000204  ea000002          B        |L1.532|
                  |L1.520|
;;;197                        }
;;;198                        qh_p = QH_PTR(qh_p->HLink);
000208  e5960000          LDR      r0,[r6,#0]
00020c  e3c0601f          BIC      r6,r0,#0x1f
                  |L1.528|
000210  eaffffee          B        |L1.464|
                  |L1.532|
000214  e1a00000          MOV      r0,r0                 ;191
                  |L1.536|
000218  e0855007          ADD      r5,r5,r7              ;178
                  |L1.540|
00021c  e3550b01          CMP      r5,#0x400             ;178
000220  baffffd8          BLT      |L1.392|
000224  e2444001          SUB      r4,r4,#1              ;166
                  |L1.552|
000228  e3540000          CMP      r4,#0                 ;166
00022c  aaffffb9          BGE      |L1.280|
;;;199                    }
;;;200                }
;;;201            }
;;;202        }
;;;203    }
000230  e8bd81f0          POP      {r4-r8,pc}
;;;204    
                          ENDP

                  get_int_tree_head_node PROC
;;;205    static QH_T * get_int_tree_head_node(int interval)
000234  e1a01000          MOV      r1,r0
;;;206    {
;;;207        int    i;
;;;208    
;;;209        interval /= 8;                          /* each frame list entry for 8 micro-frame    */
000238  e1a00001          MOV      r0,r1
00023c  e1a03fc1          ASR      r3,r1,#31
000240  e0813ea3          ADD      r3,r1,r3,LSR #29
000244  e1a011c3          ASR      r1,r3,#3
;;;210    
;;;211        for (i = 0; i < NUM_IQH-1; i++)
000248  e3a02000          MOV      r2,#0
00024c  ea000006          B        |L1.620|
                  |L1.592|
;;;212        {
;;;213            interval >>= 1;
000250  e1a010c1          ASR      r1,r1,#1
;;;214            if (interval == 0)
000254  e3510000          CMP      r1,#0
000258  1a000002          BNE      |L1.616|
;;;215                return _Iqh[i];
00025c  e59f0be4          LDR      r0,|L1.3656|
000260  e7900102          LDR      r0,[r0,r2,LSL #2]
                  |L1.612|
;;;216        }
;;;217        return _Iqh[NUM_IQH-1];
;;;218    }
000264  e12fff1e          BX       lr
                  |L1.616|
000268  e2822001          ADD      r2,r2,#1              ;211
                  |L1.620|
00026c  e352000a          CMP      r2,#0xa               ;211
000270  bafffff6          BLT      |L1.592|
000274  e59f0bcc          LDR      r0,|L1.3656|
000278  e5900028          LDR      r0,[r0,#0x28]         ;217  ; _Iqh
00027c  eafffff8          B        |L1.612|
;;;219    
                          ENDP

                  make_int_s_mask PROC
;;;220    static int  make_int_s_mask(int bInterval)
000280  e92d4010          PUSH     {r4,lr}
;;;221    {
000284  e1a03000          MOV      r3,r0
;;;222        int   order, interval;
;;;223    
;;;224        interval = 1;
000288  e3a02001          MOV      r2,#1
;;;225        while (bInterval > 1)
00028c  ea000001          B        |L1.664|
                  |L1.656|
;;;226        {
;;;227            interval *= 2;
000290  e1a02082          LSL      r2,r2,#1
;;;228            bInterval--;
000294  e2433001          SUB      r3,r3,#1
                  |L1.664|
000298  e3530001          CMP      r3,#1                 ;225
00029c  cafffffb          BGT      |L1.656|
;;;229        }
;;;230    
;;;231        if (interval < 2)
0002a0  e3520002          CMP      r2,#2
0002a4  aa000001          BGE      |L1.688|
;;;232            return 0xFF;                        /* interval 1                                 */
0002a8  e3a000ff          MOV      r0,#0xff
                  |L1.684|
;;;233        if (interval < 4)
;;;234            return 0x55;                        /* interval 2                                 */
;;;235        if (interval < 8)
;;;236            return 0x22;                        /* interval 4                                 */
;;;237        for (order = 0; (interval > 1); order++)
;;;238        {
;;;239            interval >>= 1;
;;;240        }
;;;241        return (0x1 << (order % 8));
;;;242    }
0002ac  e8bd8010          POP      {r4,pc}
                  |L1.688|
0002b0  e3520004          CMP      r2,#4                 ;233
0002b4  aa000001          BGE      |L1.704|
0002b8  e3a00055          MOV      r0,#0x55              ;234
0002bc  eafffffa          B        |L1.684|
                  |L1.704|
0002c0  e3520008          CMP      r2,#8                 ;235
0002c4  aa000001          BGE      |L1.720|
0002c8  e3a00022          MOV      r0,#0x22              ;236
0002cc  eafffff6          B        |L1.684|
                  |L1.720|
0002d0  e3a01000          MOV      r1,#0                 ;237
0002d4  ea000001          B        |L1.736|
                  |L1.728|
0002d8  e1a020c2          ASR      r2,r2,#1              ;239
0002dc  e2811001          ADD      r1,r1,#1              ;237
                  |L1.736|
0002e0  e3520001          CMP      r2,#1                 ;237
0002e4  cafffffb          BGT      |L1.728|
0002e8  e1a0c001          MOV      r12,r1                ;241
0002ec  e1a00fc1          ASR      r0,r1,#31             ;241
0002f0  e0810ea0          ADD      r0,r1,r0,LSR #29      ;241
0002f4  e1a001c0          ASR      r0,r0,#3              ;241
0002f8  e0410180          SUB      r0,r1,r0,LSL #3       ;241
0002fc  e3a04001          MOV      r4,#1                 ;241
000300  e1a00014          LSL      r0,r4,r0              ;241
000304  eaffffe8          B        |L1.684|
;;;243    
                          ENDP

                  ehci_init PROC
;;;244    static int  ehci_init(void)
000308  e92d4010          PUSH     {r4,lr}
;;;245    {
;;;246        int      timeout = 250*1000;            /* EHCI reset time-out 250 ms                */
00030c  e59f4b48          LDR      r4,|L1.3676|
;;;247    
;;;248        /*------------------------------------------------------------------------------------*/
;;;249        /*  Reset EHCI host controller                                                        */
;;;250        /*------------------------------------------------------------------------------------*/
;;;251        _ehci->UCMDR = HSUSBH_UCMDR_HCRST_Msk;
000310  e3a00002          MOV      r0,#2
000314  e59f1b44          LDR      r1,|L1.3680|
000318  e5911000          LDR      r1,[r1,#0]  ; _ehci
00031c  e5810020          STR      r0,[r1,#0x20]
;;;252        while ((_ehci->UCMDR & HSUSBH_UCMDR_HCRST_Msk) && (timeout > 0))
000320  ea000002          B        |L1.816|
                  |L1.804|
;;;253        {
;;;254            delay_us(1000);
000324  e3a00ffa          MOV      r0,#0x3e8
000328  ebfffffe          BL       delay_us
;;;255            timeout -= 1000;
00032c  e2444ffa          SUB      r4,r4,#0x3e8
                  |L1.816|
000330  e59f0b28          LDR      r0,|L1.3680|
000334  e5900000          LDR      r0,[r0,#0]            ;252  ; _ehci
000338  e5900020          LDR      r0,[r0,#0x20]         ;252
00033c  e3100002          TST      r0,#2                 ;252
000340  0a000001          BEQ      |L1.844|
000344  e3540000          CMP      r4,#0                 ;252
000348  cafffff5          BGT      |L1.804|
                  |L1.844|
;;;256        }
;;;257        if (_ehci->UCMDR & HSUSBH_UCMDR_HCRST_Msk)
00034c  e59f0b0c          LDR      r0,|L1.3680|
000350  e5900000          LDR      r0,[r0,#0]  ; _ehci
000354  e5900020          LDR      r0,[r0,#0x20]
000358  e3100002          TST      r0,#2
00035c  0a000001          BEQ      |L1.872|
;;;258            return USBH_ERR_EHCI_INIT;
000360  e3e00f7d          MVN      r0,#0x1f4
                  |L1.868|
;;;259    
;;;260        _ehci->UCMDR = UCMDR_INT_THR_CTRL | HSUSBH_UCMDR_RUN_Msk;
;;;261    
;;;262        _ghost_qtd = alloc_ehci_qTD(NULL);
;;;263        _ghost_qtd->Token = 0x11197B7F;    //QTD_STS_HALT;  visit_qtd() will not remove a qTD with this mark. It represents a qhost qTD.
;;;264    
;;;265        /*------------------------------------------------------------------------------------*/
;;;266        /*  Initialize asynchronous list                                                      */
;;;267        /*------------------------------------------------------------------------------------*/
;;;268        qh_remove_list = NULL;
;;;269    
;;;270        /* Create the QH list head with H-bit 1 */
;;;271        _H_qh = alloc_ehci_QH();
;;;272        _H_qh->HLink   = QH_HLNK_QH(_H_qh);     /* circular link to itself, the only one QH   */
;;;273        _H_qh->Chrst   = QH_RCLM_LIST_HEAD;     /* it's the head of reclamation list          */
;;;274        _H_qh->Curr_qTD        = (uint32_t)_ghost_qtd;
;;;275        _H_qh->OL_Next_qTD     = QTD_LIST_END;
;;;276        _H_qh->OL_Alt_Next_qTD = (uint32_t)_ghost_qtd;
;;;277        _H_qh->OL_Token        = QTD_STS_HALT;
;;;278        _ehci->UCALAR = (uint32_t)_H_qh;
;;;279    
;;;280        /*------------------------------------------------------------------------------------*/
;;;281        /*  Initialize periodic list                                                          */
;;;282        /*------------------------------------------------------------------------------------*/
;;;283        if (FL_SIZE == 256)
;;;284            _ehci->UCMDR |= (0x2<<HSUSBH_UCMDR_FLSZ_Pos);
;;;285        else if (FL_SIZE == 512)
;;;286            _ehci->UCMDR |= (0x1<<HSUSBH_UCMDR_FLSZ_Pos);
;;;287        else if (FL_SIZE == 1024)
;;;288            _ehci->UCMDR |= (0x0<<HSUSBH_UCMDR_FLSZ_Pos);
;;;289        else
;;;290            return USBH_ERR_EHCI_INIT;               /* Invalid FL_SIZE setting!              */
;;;291    
;;;292        /*------------------------------------------------------------------------------------*/
;;;293        /*  start run                                                                         */
;;;294        /*------------------------------------------------------------------------------------*/
;;;295    
;;;296        _ehci->UCFGR = 0x1;                          /* enable port routing to EHCI           */
;;;297        _ehci->UIENR = HSUSBH_UIENR_USBIEN_Msk | HSUSBH_UIENR_UERRIEN_Msk | HSUSBH_UIENR_HSERREN_Msk | HSUSBH_UIENR_IAAEN_Msk;
;;;298    
;;;299        delay_us(1000);                              /* dealy 1 ms                            */
;;;300    
;;;301        _ehci->UPSCR[0] = HSUSBH_UPSCR_PP_Msk;      /* enable port 1 port power               */
;;;302        _ehci->UPSCR[1] = HSUSBH_UPSCR_PP_Msk;      /* enable port 2 port power               */
;;;303    
;;;304        init_periodic_frame_list();
;;;305    
;;;306        _ehci->UPFLBAR = (uint32_t)_PFList;
;;;307    
;;;308        delay_us(10*1000);                          /* dealy 10 ms                            */
;;;309    
;;;310        return 0;
;;;311    }
000364  e8bd8010          POP      {r4,pc}
                  |L1.872|
000368  e59f0af4          LDR      r0,|L1.3684|
00036c  e59f1aec          LDR      r1,|L1.3680|
000370  e5911000          LDR      r1,[r1,#0]            ;260  ; _ehci
000374  e5810020          STR      r0,[r1,#0x20]         ;260
000378  e3a00000          MOV      r0,#0                 ;262
00037c  ebfffffe          BL       alloc_ehci_qTD
000380  e59f1ad0          LDR      r1,|L1.3672|
000384  e5810000          STR      r0,[r1,#0]            ;262  ; _ghost_qtd
000388  e59f0ad8          LDR      r0,|L1.3688|
00038c  e5911000          LDR      r1,[r1,#0]            ;263  ; _ghost_qtd
000390  e5810008          STR      r0,[r1,#8]            ;263
000394  e3a00000          MOV      r0,#0                 ;268
000398  e59f1acc          LDR      r1,|L1.3692|
00039c  e5810000          STR      r0,[r1,#0]            ;268  ; qh_remove_list
0003a0  ebfffffe          BL       alloc_ehci_QH
0003a4  e59f1a98          LDR      r1,|L1.3652|
0003a8  e5810000          STR      r0,[r1,#0]            ;271  ; _H_qh
0003ac  e2810000          ADD      r0,r1,#0              ;272
0003b0  e5900000          LDR      r0,[r0,#0]            ;272  ; _H_qh
0003b4  e3c0001f          BIC      r0,r0,#0x1f           ;272
0003b8  e3800002          ORR      r0,r0,#2              ;272
0003bc  e5911000          LDR      r1,[r1,#0]            ;272  ; _H_qh
0003c0  e5810000          STR      r0,[r1,#0]            ;272
0003c4  e3a00902          MOV      r0,#0x8000            ;273
0003c8  e59f1a74          LDR      r1,|L1.3652|
0003cc  e5911000          LDR      r1,[r1,#0]            ;273  ; _H_qh
0003d0  e5810004          STR      r0,[r1,#4]            ;273
0003d4  e59f0a7c          LDR      r0,|L1.3672|
0003d8  e5900000          LDR      r0,[r0,#0]            ;274  ; _ghost_qtd
0003dc  e59f1a60          LDR      r1,|L1.3652|
0003e0  e5911000          LDR      r1,[r1,#0]            ;274  ; _H_qh
0003e4  e581000c          STR      r0,[r1,#0xc]          ;274
0003e8  e3a00001          MOV      r0,#1                 ;275
0003ec  e59f1a50          LDR      r1,|L1.3652|
0003f0  e5911000          LDR      r1,[r1,#0]            ;275  ; _H_qh
0003f4  e5810010          STR      r0,[r1,#0x10]         ;275
0003f8  e59f0a58          LDR      r0,|L1.3672|
0003fc  e5900000          LDR      r0,[r0,#0]            ;276  ; _ghost_qtd
000400  e59f1a3c          LDR      r1,|L1.3652|
000404  e5911000          LDR      r1,[r1,#0]            ;276  ; _H_qh
000408  e5810014          STR      r0,[r1,#0x14]         ;276
00040c  e3a00040          MOV      r0,#0x40              ;277
000410  e59f1a2c          LDR      r1,|L1.3652|
000414  e5911000          LDR      r1,[r1,#0]            ;277  ; _H_qh
000418  e5810018          STR      r0,[r1,#0x18]         ;277
00041c  e59f0a20          LDR      r0,|L1.3652|
000420  e5900000          LDR      r0,[r0,#0]            ;278  ; _H_qh
000424  e59f1a34          LDR      r1,|L1.3680|
000428  e5911000          LDR      r1,[r1,#0]            ;278  ; _ehci
00042c  e5810038          STR      r0,[r1,#0x38]         ;278
000430  e59f0a28          LDR      r0,|L1.3680|
000434  e5900000          LDR      r0,[r0,#0]            ;288  ; _ehci
000438  e5900020          LDR      r0,[r0,#0x20]         ;288
00043c  e59f1a1c          LDR      r1,|L1.3680|
000440  e5911000          LDR      r1,[r1,#0]            ;288  ; _ehci
000444  e5810020          STR      r0,[r1,#0x20]         ;288
000448  e3a00001          MOV      r0,#1                 ;296
00044c  e59f1a0c          LDR      r1,|L1.3680|
000450  e5911000          LDR      r1,[r1,#0]            ;296  ; _ehci
000454  e5810060          STR      r0,[r1,#0x60]         ;296
000458  e3a00033          MOV      r0,#0x33              ;297
00045c  e59f19fc          LDR      r1,|L1.3680|
000460  e5911000          LDR      r1,[r1,#0]            ;297  ; _ehci
000464  e5810028          STR      r0,[r1,#0x28]         ;297
000468  e3a00ffa          MOV      r0,#0x3e8             ;299
00046c  ebfffffe          BL       delay_us
000470  e3a00a01          MOV      r0,#0x1000            ;301
000474  e59f19e4          LDR      r1,|L1.3680|
000478  e5911000          LDR      r1,[r1,#0]            ;301  ; _ehci
00047c  e5810064          STR      r0,[r1,#0x64]         ;301
000480  e59f19d8          LDR      r1,|L1.3680|
000484  e5911000          LDR      r1,[r1,#0]            ;302  ; _ehci
000488  e5810068          STR      r0,[r1,#0x68]         ;302
00048c  ebfffffe          BL       init_periodic_frame_list
000490  e59f09b4          LDR      r0,|L1.3660|
000494  e5900000          LDR      r0,[r0,#0]            ;306  ; _PFList
000498  e59f19c0          LDR      r1,|L1.3680|
00049c  e5911000          LDR      r1,[r1,#0]            ;306  ; _ehci
0004a0  e5810034          STR      r0,[r1,#0x34]         ;306
0004a4  e59f09c4          LDR      r0,|L1.3696|
0004a8  ebfffffe          BL       delay_us
0004ac  e3a00000          MOV      r0,#0                 ;310
0004b0  eaffffab          B        |L1.868|
;;;312    
                          ENDP

                  ehci_suspend PROC
;;;313    static void ehci_suspend(void)
0004b4  e59f09a4          LDR      r0,|L1.3680|
;;;314    {
;;;315        if (_ehci->UPSCR[0] & 0x1)
0004b8  e5900000          LDR      r0,[r0,#0]  ; _ehci
0004bc  e5900064          LDR      r0,[r0,#0x64]
0004c0  e3100001          TST      r0,#1
0004c4  0a000006          BEQ      |L1.1252|
;;;316            _ehci->UPSCR[0] |= HSUSBH_UPSCR_SUSPEND_Msk;
0004c8  e59f0990          LDR      r0,|L1.3680|
0004cc  e5900000          LDR      r0,[r0,#0]  ; _ehci
0004d0  e5900064          LDR      r0,[r0,#0x64]
0004d4  e3800080          ORR      r0,r0,#0x80
0004d8  e59f1980          LDR      r1,|L1.3680|
0004dc  e5911000          LDR      r1,[r1,#0]  ; _ehci
0004e0  e5810064          STR      r0,[r1,#0x64]
                  |L1.1252|
;;;317    }
0004e4  e12fff1e          BX       lr
;;;318    
                          ENDP

                  ehci_resume PROC
;;;319    static void ehci_resume(void)
0004e8  e59f0970          LDR      r0,|L1.3680|
;;;320    {
;;;321        if (_ehci->UPSCR[0] & 0x1)
0004ec  e5900000          LDR      r0,[r0,#0]  ; _ehci
0004f0  e5900064          LDR      r0,[r0,#0x64]
0004f4  e3100001          TST      r0,#1
0004f8  0a000006          BEQ      |L1.1304|
;;;322            _ehci->UPSCR[0] = (HSUSBH->UPSCR[0] & ~HSUSBH_UPSCR_SUSPEND_Msk) | HSUSBH_UPSCR_FPR_Msk;
0004fc  e59f0970          LDR      r0,|L1.3700|
000500  e5900064          LDR      r0,[r0,#0x64]
000504  e3c00080          BIC      r0,r0,#0x80
000508  e3800040          ORR      r0,r0,#0x40
00050c  e59f194c          LDR      r1,|L1.3680|
000510  e5911000          LDR      r1,[r1,#0]  ; _ehci
000514  e5810064          STR      r0,[r1,#0x64]
                  |L1.1304|
;;;323    }
000518  e12fff1e          BX       lr
;;;324    
                          ENDP

                  ehci_shutdown PROC
;;;325    static void ehci_shutdown(void)
00051c  e92d4010          PUSH     {r4,lr}
;;;326    {
;;;327        ehci_suspend();
000520  ebfffffe          BL       ehci_suspend
;;;328    }
000524  e8bd8010          POP      {r4,pc}
;;;329    
                          ENDP

                  move_qh_to_remove_list PROC
;;;330    static void move_qh_to_remove_list(QH_T *qh)
000528  e92d4070          PUSH     {r4-r6,lr}
;;;331    {
00052c  e1a05000          MOV      r5,r0
;;;332        QH_T       *q;
;;;333    
;;;334        // USB_debug("move_qh_to_remove_list - 0x%x (0x%x)\n", (int)qh, qh->Chrst);
;;;335    
;;;336        /* check if this ED found in ed_remove_list */
;;;337        q = qh_remove_list;
000530  e59f0934          LDR      r0,|L1.3692|
000534  e5904000          LDR      r4,[r0,#0]  ; qh_remove_list
;;;338        while (q)
000538  ea000003          B        |L1.1356|
                  |L1.1340|
;;;339        {
;;;340            if (q == qh)                        /* This QH found in qh_remove_list.           */
00053c  e1540005          CMP      r4,r5
000540  1a000000          BNE      |L1.1352|
                  |L1.1348|
;;;341            {
;;;342                return;                         /* Do nothing, return...                      */
;;;343            }
;;;344            q = q->next;
;;;345        }
;;;346    
;;;347        DISABLE_EHCI_IRQ();
;;;348    
;;;349        /*------------------------------------------------------------------------------------*/
;;;350        /*  Search asynchronous frame list and remove qh if found in list.                    */
;;;351        /*------------------------------------------------------------------------------------*/
;;;352        q = _H_qh;                              /* find and remove it from asynchronous list  */
;;;353        while (QH_PTR(q->HLink) != _H_qh)
;;;354        {
;;;355            if (QH_PTR(q->HLink) == qh)
;;;356            {
;;;357                /* q's next QH is qh, found...           */
;;;358                q->HLink = qh->HLink;                /* remove qh from list                   */
;;;359    
;;;360                qh->next = qh_remove_list;           /* add qh to qh_remove_list              */
;;;361                qh_remove_list = qh;
;;;362                _ehci->UCMDR |= HSUSBH_UCMDR_IAAD_Msk;   /* trigger IAA interrupt             */
;;;363                ENABLE_EHCI_IRQ();
;;;364                return;                              /* done                                  */
;;;365            }
;;;366            q = QH_PTR(q->HLink);               /* advance to next QH in asynchronous list    */
;;;367        }
;;;368    
;;;369        /*------------------------------------------------------------------------------------*/
;;;370        /*  Search periodic frame list and remove qh if found in list.                        */
;;;371        /*------------------------------------------------------------------------------------*/
;;;372        q =  _Iqh[NUM_IQH-1];
;;;373        while (q->HLink != QH_HLNK_END)
;;;374        {
;;;375            if (QH_PTR(q->HLink) == qh)
;;;376            {
;;;377                /* q's next QH is qh, found...           */
;;;378                q->HLink = qh->HLink;                /* remove qh from list                   */
;;;379    
;;;380                qh->next = qh_remove_list;           /* add qh to qh_remove_list              */
;;;381                qh_remove_list = qh;
;;;382                _ehci->UCMDR |= HSUSBH_UCMDR_IAAD_Msk;   /* trigger IAA interrupt             */
;;;383                ENABLE_EHCI_IRQ();
;;;384                return;                              /* done                                  */
;;;385            }
;;;386            q = QH_PTR(q->HLink);               /* advance to next QH in asynchronous list    */
;;;387        }
;;;388        ENABLE_EHCI_IRQ();
;;;389    }
000544  e8bd8070          POP      {r4-r6,pc}
                  |L1.1352|
000548  e5944038          LDR      r4,[r4,#0x38]         ;344
                  |L1.1356|
00054c  e3540000          CMP      r4,#0                 ;338
000550  1afffff9          BNE      |L1.1340|
000554  e3a00017          MOV      r0,#0x17              ;347
000558  ebfffffe          BL       sysDisableInterrupt
00055c  e59f08e0          LDR      r0,|L1.3652|
000560  e5904000          LDR      r4,[r0,#0]            ;352  ; _H_qh
000564  ea000016          B        |L1.1476|
                  |L1.1384|
000568  e5940000          LDR      r0,[r4,#0]            ;355
00056c  e3c0001f          BIC      r0,r0,#0x1f           ;355
000570  e1500005          CMP      r0,r5                 ;355
000574  1a000010          BNE      |L1.1468|
000578  e5950000          LDR      r0,[r5,#0]            ;358
00057c  e5840000          STR      r0,[r4,#0]            ;358
000580  e59f08e4          LDR      r0,|L1.3692|
000584  e5900000          LDR      r0,[r0,#0]            ;360  ; qh_remove_list
000588  e5850038          STR      r0,[r5,#0x38]         ;360
00058c  e59f08d8          LDR      r0,|L1.3692|
000590  e5805000          STR      r5,[r0,#0]            ;361  ; qh_remove_list
000594  e59f08c4          LDR      r0,|L1.3680|
000598  e5900000          LDR      r0,[r0,#0]            ;362  ; _ehci
00059c  e5900020          LDR      r0,[r0,#0x20]         ;362
0005a0  e3800040          ORR      r0,r0,#0x40           ;362
0005a4  e59f18b4          LDR      r1,|L1.3680|
0005a8  e5911000          LDR      r1,[r1,#0]            ;362  ; _ehci
0005ac  e5810020          STR      r0,[r1,#0x20]         ;362
0005b0  e3a00017          MOV      r0,#0x17              ;363
0005b4  ebfffffe          BL       sysEnableInterrupt
0005b8  eaffffe1          B        |L1.1348|
                  |L1.1468|
0005bc  e5940000          LDR      r0,[r4,#0]            ;366
0005c0  e3c0401f          BIC      r4,r0,#0x1f           ;366
                  |L1.1476|
0005c4  e5940000          LDR      r0,[r4,#0]            ;353
0005c8  e3c0001f          BIC      r0,r0,#0x1f           ;353
0005cc  e59f1870          LDR      r1,|L1.3652|
0005d0  e5911000          LDR      r1,[r1,#0]            ;353  ; _H_qh
0005d4  e1500001          CMP      r0,r1                 ;353
0005d8  1affffe2          BNE      |L1.1384|
0005dc  e59f0864          LDR      r0,|L1.3656|
0005e0  e5904028          LDR      r4,[r0,#0x28]         ;372  ; _Iqh
0005e4  ea000016          B        |L1.1604|
                  |L1.1512|
0005e8  e5940000          LDR      r0,[r4,#0]            ;375
0005ec  e3c0001f          BIC      r0,r0,#0x1f           ;375
0005f0  e1500005          CMP      r0,r5                 ;375
0005f4  1a000010          BNE      |L1.1596|
0005f8  e5950000          LDR      r0,[r5,#0]            ;378
0005fc  e5840000          STR      r0,[r4,#0]            ;378
000600  e59f0864          LDR      r0,|L1.3692|
000604  e5900000          LDR      r0,[r0,#0]            ;380  ; qh_remove_list
000608  e5850038          STR      r0,[r5,#0x38]         ;380
00060c  e59f0858          LDR      r0,|L1.3692|
000610  e5805000          STR      r5,[r0,#0]            ;381  ; qh_remove_list
000614  e59f0844          LDR      r0,|L1.3680|
000618  e5900000          LDR      r0,[r0,#0]            ;382  ; _ehci
00061c  e5900020          LDR      r0,[r0,#0x20]         ;382
000620  e3800040          ORR      r0,r0,#0x40           ;382
000624  e59f1834          LDR      r1,|L1.3680|
000628  e5911000          LDR      r1,[r1,#0]            ;382  ; _ehci
00062c  e5810020          STR      r0,[r1,#0x20]         ;382
000630  e3a00017          MOV      r0,#0x17              ;383
000634  ebfffffe          BL       sysEnableInterrupt
000638  eaffffc1          B        |L1.1348|
                  |L1.1596|
00063c  e5940000          LDR      r0,[r4,#0]            ;386
000640  e3c0401f          BIC      r4,r0,#0x1f           ;386
                  |L1.1604|
000644  e5940000          LDR      r0,[r4,#0]            ;373
000648  e3500001          CMP      r0,#1                 ;373
00064c  1affffe5          BNE      |L1.1512|
000650  e3a00017          MOV      r0,#0x17              ;388
000654  ebfffffe          BL       sysEnableInterrupt
000658  e1a00000          MOV      r0,r0
00065c  eaffffb8          B        |L1.1348|
;;;390    
                          ENDP

                  append_to_qtd_list_of_QH PROC
;;;391    static void append_to_qtd_list_of_QH(QH_T *qh, qTD_T *qtd)
000660  e1a02001          MOV      r2,r1
;;;392    {
;;;393        qTD_T  *q;
;;;394    
;;;395        if (qh->qtd_list == NULL)
000664  e5903030          LDR      r3,[r0,#0x30]
000668  e3530000          CMP      r3,#0
00066c  1a000001          BNE      |L1.1656|
;;;396        {
;;;397            qh->qtd_list = qtd;
000670  e5802030          STR      r2,[r0,#0x30]
000674  ea000006          B        |L1.1684|
                  |L1.1656|
;;;398        }
;;;399        else
;;;400        {
;;;401            q = qh->qtd_list;
000678  e5901030          LDR      r1,[r0,#0x30]
;;;402            while (q->next != NULL)
00067c  ea000000          B        |L1.1668|
                  |L1.1664|
;;;403            {
;;;404                q = q->next;
000680  e591102c          LDR      r1,[r1,#0x2c]
                  |L1.1668|
000684  e591302c          LDR      r3,[r1,#0x2c]         ;402
000688  e3530000          CMP      r3,#0                 ;402
00068c  1afffffb          BNE      |L1.1664|
;;;405            }
;;;406            q->next = qtd;
000690  e581202c          STR      r2,[r1,#0x2c]
                  |L1.1684|
;;;407        }
;;;408    }
000694  e12fff1e          BX       lr
;;;409    
                          ENDP

                  write_qh PROC
;;;412     */
;;;413    static void  write_qh(UDEV_T *udev, EP_INFO_T *ep, QH_T *qh)
000698  e92d40f0          PUSH     {r4-r7,lr}
;;;414    {
00069c  e1a03001          MOV      r3,r1
0006a0  e1a0c002          MOV      r12,r2
;;;415        uint32_t   chrst, cap;
;;;416    
;;;417        /*------------------------------------------------------------------------------------*/
;;;418        /*  Write QH DWord 1 - Endpoint Characteristics                                       */
;;;419        /*------------------------------------------------------------------------------------*/
;;;420        if (ep == NULL)                             /* is control endpoint?                   */
0006a4  e3530000          CMP      r3,#0
0006a8  1a000012          BNE      |L1.1784|
;;;421        {
;;;422            if (udev->descriptor.bMaxPacketSize0 == 0)
0006ac  e5d02007          LDRB     r2,[r0,#7]
0006b0  e3520000          CMP      r2,#0
0006b4  1a000007          BNE      |L1.1752|
;;;423            {
;;;424                if (udev->speed == SPEED_LOW)       /* give a default maximum packet size     */
0006b8  e5d0201b          LDRB     r2,[r0,#0x1b]
0006bc  e3520000          CMP      r2,#0
0006c0  1a000002          BNE      |L1.1744|
;;;425                    udev->descriptor.bMaxPacketSize0 = 8;
0006c4  e3a02008          MOV      r2,#8
0006c8  e5c02007          STRB     r2,[r0,#7]
0006cc  ea000001          B        |L1.1752|
                  |L1.1744|
;;;426                else
;;;427                    udev->descriptor.bMaxPacketSize0 = 64;
0006d0  e3a02040          MOV      r2,#0x40
0006d4  e5c02007          STRB     r2,[r0,#7]
                  |L1.1752|
;;;428            }
;;;429            chrst = QH_DTC | QH_NAK_RL | (udev->descriptor.bMaxPacketSize0 << 16);
0006d8  e5d02007          LDRB     r2,[r0,#7]
0006dc  e59f5794          LDR      r5,|L1.3704|
0006e0  e1851802          ORR      r1,r5,r2,LSL #16
;;;430            if (udev->speed != SPEED_HIGH)
0006e4  e5d0201b          LDRB     r2,[r0,#0x1b]
0006e8  e3520002          CMP      r2,#2
0006ec  0a000007          BEQ      |L1.1808|
;;;431                chrst |= QH_CTRL_EP_FLAG;           /* non-high-speed control endpoint        */
0006f0  e3811302          ORR      r1,r1,#0x8000000
0006f4  ea000005          B        |L1.1808|
                  |L1.1784|
;;;432        }
;;;433        else                                        /* not a control endpoint                 */
;;;434        {
;;;435            chrst = QH_NAK_RL | (ep->wMaxPacketSize << 16);
0006f8  e1d320b4          LDRH     r2,[r3,#4]
0006fc  e3a05101          MOV      r5,#0x40000000
000700  e1851802          ORR      r1,r5,r2,LSL #16
;;;436            chrst |= ((ep->bEndpointAddress & 0xf) << 8);      /* Enpoint Address             */
000704  e5d32000          LDRB     r2,[r3,#0]
000708  e202200f          AND      r2,r2,#0xf
00070c  e1811402          ORR      r1,r1,r2,LSL #8
                  |L1.1808|
;;;437        }
;;;438    
;;;439        if (udev->speed == SPEED_LOW)
000710  e5d0201b          LDRB     r2,[r0,#0x1b]
000714  e3520000          CMP      r2,#0
000718  1a000001          BNE      |L1.1828|
;;;440            chrst |= QH_EPS_LOW;
00071c  e3811a01          ORR      r1,r1,#0x1000
000720  ea000004          B        |L1.1848|
                  |L1.1828|
;;;441        else if (udev->speed == SPEED_FULL)
000724  e5d0201b          LDRB     r2,[r0,#0x1b]
000728  e3520001          CMP      r2,#1
00072c  1a000000          BNE      |L1.1844|
;;;442            chrst |= QH_EPS_FULL;
000730  ea000000          B        |L1.1848|
                  |L1.1844|
;;;443        else
;;;444            chrst |= QH_EPS_HIGH;
000734  e3811a02          ORR      r1,r1,#0x2000
                  |L1.1848|
;;;445    
;;;446        chrst |= udev->dev_num;
000738  e5d02019          LDRB     r2,[r0,#0x19]
00073c  e1811002          ORR      r1,r1,r2
;;;447    
;;;448        qh->Chrst = chrst;
000740  e58c1004          STR      r1,[r12,#4]
;;;449    
;;;450        /*------------------------------------------------------------------------------------*/
;;;451        /*  Write QH DWord 2 - Endpoint Capabilities                                         */
;;;452        /*------------------------------------------------------------------------------------*/
;;;453        if (udev->speed == SPEED_HIGH)
000744  e5d0201b          LDRB     r2,[r0,#0x1b]
000748  e3520002          CMP      r2,#2
00074c  1a000001          BNE      |L1.1880|
;;;454        {
;;;455            cap = 0;
000750  e3a04000          MOV      r4,#0
000754  ea000015          B        |L1.1968|
                  |L1.1880|
;;;456        }
;;;457        else
;;;458        {
;;;459            /*
;;;460             *  Backtrace device tree until the USB 2.0 hub found
;;;461             */
;;;462            HUB_DEV_T   *hub;
;;;463            int         port_num;
;;;464    
;;;465            port_num = udev->port_num;
000758  e5d05018          LDRB     r5,[r0,#0x18]
;;;466            hub = udev->parent;
00075c  e5902014          LDR      r2,[r0,#0x14]
;;;467    
;;;468            while ((hub != NULL) && (hub->iface->udev->speed != SPEED_HIGH))
000760  ea000005          B        |L1.1916|
                  |L1.1892|
;;;469            {
;;;470                port_num = hub->iface->udev->port_num;
000764  e5926000          LDR      r6,[r2,#0]
000768  e5966000          LDR      r6,[r6,#0]
00076c  e5d65018          LDRB     r5,[r6,#0x18]
;;;471                hub = hub->iface->udev->parent;
000770  e5926000          LDR      r6,[r2,#0]
000774  e5966000          LDR      r6,[r6,#0]
000778  e5962014          LDR      r2,[r6,#0x14]
                  |L1.1916|
00077c  e3520000          CMP      r2,#0                 ;468
000780  0a000004          BEQ      |L1.1944|
000784  e5926000          LDR      r6,[r2,#0]            ;468
000788  e5966000          LDR      r6,[r6,#0]            ;468
00078c  e5d6601b          LDRB     r6,[r6,#0x1b]         ;468
000790  e3560002          CMP      r6,#2                 ;468
000794  1afffff2          BNE      |L1.1892|
                  |L1.1944|
;;;472            }
;;;473    
;;;474            cap = (port_num << QH_HUB_PORT_Pos) |
000798  e1a06b85          LSL      r6,r5,#23
00079c  e5927000          LDR      r7,[r2,#0]
0007a0  e5977000          LDR      r7,[r7,#0]
0007a4  e5d77019          LDRB     r7,[r7,#0x19]
0007a8  e1864807          ORR      r4,r6,r7,LSL #16
;;;475                  (hub->iface->udev->dev_num << QH_HUB_ADDR_Pos);
;;;476        }
0007ac  e1a00000          MOV      r0,r0
                  |L1.1968|
;;;477    
;;;478        qh->Cap = cap;
0007b0  e58c4008          STR      r4,[r12,#8]
;;;479    }
0007b4  e8bd80f0          POP      {r4-r7,pc}
;;;480    
                          ENDP

                  write_qtd_bptr PROC
;;;481    static void  write_qtd_bptr(qTD_T *qtd, uint32_t buff_addr, int xfer_len)
0007b8  e1a03002          MOV      r3,r2
;;;482    {
;;;483        int     i;
;;;484    
;;;485        qtd->xfer_len = xfer_len;
0007bc  e5803024          STR      r3,[r0,#0x24]
;;;486        qtd->Bptr[0] = buff_addr;
0007c0  e580100c          STR      r1,[r0,#0xc]
;;;487    
;;;488        buff_addr = (buff_addr + 0x1000) & ~0xFFF;
0007c4  e281ca01          ADD      r12,r1,#0x1000
0007c8  e1a0162c          LSR      r1,r12,#12
0007cc  e1a01601          LSL      r1,r1,#12
;;;489    
;;;490        for (i = 1; i < 5; i++)
0007d0  e3a02001          MOV      r2,#1
0007d4  ea000003          B        |L1.2024|
                  |L1.2008|
;;;491        {
;;;492            qtd->Bptr[i] = buff_addr;
0007d8  e280c00c          ADD      r12,r0,#0xc
0007dc  e78c1102          STR      r1,[r12,r2,LSL #2]
;;;493            buff_addr += 0x1000;
0007e0  e2811a01          ADD      r1,r1,#0x1000
0007e4  e2822001          ADD      r2,r2,#1              ;490
                  |L1.2024|
0007e8  e3520005          CMP      r2,#5                 ;490
0007ec  bafffff9          BLT      |L1.2008|
;;;494        }
;;;495    }
0007f0  e12fff1e          BX       lr
;;;496    
                          ENDP

                  ehci_ctrl_xfer PROC
;;;497    static int ehci_ctrl_xfer(UTR_T *utr)
0007f4  e92d5ff0          PUSH     {r4-r12,lr}
;;;498    {
0007f8  e1a05000          MOV      r5,r0
;;;499        UDEV_T     *udev;
;;;500        QH_T       *qh;
;;;501        qTD_T      *qtd_setup, *qtd_data, *qtd_status;
;;;502        uint32_t   token;
;;;503        int        is_new_qh = 0;
0007fc  e3a0b000          MOV      r11,#0
;;;504    
;;;505        udev = utr->udev;
000800  e5959000          LDR      r9,[r5,#0]
;;;506    
;;;507        if (utr->data_len > 0)
000804  e5950018          LDR      r0,[r5,#0x18]
000808  e3500000          CMP      r0,#0
00080c  0a00000a          BEQ      |L1.2108|
;;;508        {
;;;509            if (((uint32_t)utr->buff + utr->data_len) > (((uint32_t)utr->buff & ~0xFFF)+0x5000))
000810  e5950010          LDR      r0,[r5,#0x10]
000814  e5951018          LDR      r1,[r5,#0x18]
000818  e0800001          ADD      r0,r0,r1
00081c  e5951010          LDR      r1,[r5,#0x10]
000820  e1a01621          LSR      r1,r1,#12
000824  e1a01601          LSL      r1,r1,#12
000828  e2811a05          ADD      r1,r1,#0x5000
00082c  e1500001          CMP      r0,r1
000830  9a000001          BLS      |L1.2108|
;;;510                return USBH_ERR_BUFF_OVERRUN;
000834  e24b0f49          SUB      r0,r11,#0x124
                  |L1.2104|
;;;511        }
;;;512    
;;;513        /*------------------------------------------------------------------------------------*/
;;;514        /*  Allocate and link QH                                                              */
;;;515        /*------------------------------------------------------------------------------------*/
;;;516        if (udev->ep0.hw_pipe != NULL)
;;;517        {
;;;518            qh = (QH_T *)udev->ep0.hw_pipe;
;;;519            if (qh->qtd_list)
;;;520                return USBH_ERR_EHCI_QH_BUSY;
;;;521        }
;;;522        else
;;;523        {
;;;524            qh = alloc_ehci_QH();
;;;525            if (qh == NULL)
;;;526                return USBH_ERR_MEMORY_OUT;
;;;527    
;;;528            udev->ep0.hw_pipe = (void *)qh;     /* driver can find QH from EP                 */
;;;529            is_new_qh = 1;
;;;530        }
;;;531        write_qh(udev, NULL, qh);
;;;532        utr->ep = &udev->ep0;                   /* driver can find EP from UTR                */
;;;533    
;;;534        /*------------------------------------------------------------------------------------*/
;;;535        /*  Allocate qTDs                                                                     */
;;;536        /*------------------------------------------------------------------------------------*/
;;;537        qtd_setup = alloc_ehci_qTD(utr);        /* allocate qTD for SETUP                     */
;;;538    
;;;539        if (utr->data_len > 0)
;;;540            qtd_data = alloc_ehci_qTD(utr);     /* allocate qTD for DATA                      */
;;;541        else
;;;542            qtd_data = NULL;
;;;543    
;;;544        qtd_status = alloc_ehci_qTD(utr);       /* allocate qTD for USTSR                     */
;;;545    
;;;546        if (qtd_status == NULL)                 /* out of memory?                             */
;;;547        {
;;;548            if (qtd_setup)
;;;549                free_ehci_qTD(qtd_setup);       /* free memory                                */
;;;550            if (qtd_data)
;;;551                free_ehci_qTD(qtd_data);        /* free memory                                */
;;;552            return USBH_ERR_MEMORY_OUT;         /* out of memory                              */
;;;553        }
;;;554    
;;;555        // USB_debug("qh=0x%x, qtd_setup=0x%x, qtd_data=0x%x, qtd_status=0x%x\n", (int)qh, (int)qtd_setup, (int)qtd_data, (int)qtd_status);
;;;556    
;;;557        /*------------------------------------------------------------------------------------*/
;;;558        /* prepare SETUP stage qTD                                                            */
;;;559        /*------------------------------------------------------------------------------------*/
;;;560        qtd_setup->qh = qh;
;;;561        //qtd_setup->utr = utr;
;;;562        write_qtd_bptr(qtd_setup, (uint32_t)&utr->setup, 8);
;;;563        append_to_qtd_list_of_QH(qh, qtd_setup);
;;;564        qtd_setup->Token = (8 << 16) | QTD_ERR_COUNTER | QTD_PID_SETUP | QTD_STS_ACTIVE;
;;;565    
;;;566        /*------------------------------------------------------------------------------------*/
;;;567        /* prepare DATA stage qTD                                                             */
;;;568        /*------------------------------------------------------------------------------------*/
;;;569        if (utr->data_len > 0)
;;;570        {
;;;571            qtd_setup->Next_qTD = (uint32_t)qtd_data;
;;;572            qtd_data->Next_qTD = (uint32_t)qtd_status;
;;;573    
;;;574            if ((utr->setup.bmRequestType & 0x80) == REQ_TYPE_OUT)
;;;575                token = QTD_ERR_COUNTER | QTD_PID_OUT | QTD_STS_ACTIVE;
;;;576            else
;;;577                token = QTD_ERR_COUNTER | QTD_PID_IN | QTD_STS_ACTIVE;
;;;578    
;;;579            qtd_data->qh = qh;
;;;580            //qtd_data->utr = utr;
;;;581            write_qtd_bptr(qtd_data, (uint32_t)utr->buff, utr->data_len);
;;;582            append_to_qtd_list_of_QH(qh, qtd_data);
;;;583            qtd_data->Token = QTD_DT | (utr->data_len << 16) | token;
;;;584        }
;;;585        else
;;;586        {
;;;587            qtd_setup->Next_qTD = (uint32_t)qtd_status;
;;;588        }
;;;589    
;;;590        /*------------------------------------------------------------------------------------*/
;;;591        /* prepare USTSR stage qTD                                                            */
;;;592        /*------------------------------------------------------------------------------------*/
;;;593        qtd_status->Next_qTD = (uint32_t)_ghost_qtd;
;;;594        qtd_status->Alt_Next_qTD = QTD_LIST_END;
;;;595    
;;;596        if ((utr->setup.bmRequestType & 0x80) == REQ_TYPE_OUT)
;;;597            token = QTD_ERR_COUNTER | QTD_PID_IN | QTD_STS_ACTIVE;
;;;598        else
;;;599            token = QTD_ERR_COUNTER | QTD_PID_OUT | QTD_STS_ACTIVE;
;;;600    
;;;601        qtd_status->qh = qh;
;;;602        //qtd_status->utr = utr;
;;;603        append_to_qtd_list_of_QH(qh, qtd_status);
;;;604        qtd_status->Token = QTD_DT | QTD_IOC | token;
;;;605    
;;;606        /*------------------------------------------------------------------------------------*/
;;;607        /* Update QH overlay                                                                  */
;;;608        /*------------------------------------------------------------------------------------*/
;;;609        qh->Curr_qTD = 0;
;;;610        qh->OL_Next_qTD = (uint32_t)qtd_setup;
;;;611        qh->OL_Alt_Next_qTD = QTD_LIST_END;
;;;612        qh->OL_Token = 0;
;;;613    
;;;614        /*------------------------------------------------------------------------------------*/
;;;615        /* Link QH and start asynchronous transfer                                            */
;;;616        /*------------------------------------------------------------------------------------*/
;;;617        if (is_new_qh)
;;;618        {
;;;619            qh->HLink = _H_qh->HLink;
;;;620            _H_qh->HLink = QH_HLNK_QH(qh);
;;;621        }
;;;622    
;;;623        /*  Start transfer */
;;;624        _ehci->UCMDR |= HSUSBH_UCMDR_ASEN_Msk;      /* start asynchronous transfer            */
;;;625        return 0;
;;;626    }
000838  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2108|
00083c  e5990028          LDR      r0,[r9,#0x28]         ;516
000840  e3500000          CMP      r0,#0                 ;516
000844  0a000005          BEQ      |L1.2144|
000848  e5994028          LDR      r4,[r9,#0x28]         ;518
00084c  e5940030          LDR      r0,[r4,#0x30]         ;519
000850  e3500000          CMP      r0,#0                 ;519
000854  0a000009          BEQ      |L1.2176|
000858  e59f061c          LDR      r0,|L1.3708|
00085c  eafffff5          B        |L1.2104|
                  |L1.2144|
000860  ebfffffe          BL       alloc_ehci_QH
000864  e1a04000          MOV      r4,r0                 ;524
000868  e3540000          CMP      r4,#0                 ;525
00086c  1a000001          BNE      |L1.2168|
000870  e3e00009          MVN      r0,#9                 ;526
000874  eaffffef          B        |L1.2104|
                  |L1.2168|
000878  e5894028          STR      r4,[r9,#0x28]         ;528
00087c  e3a0b001          MOV      r11,#1                ;529
                  |L1.2176|
000880  e1a02004          MOV      r2,r4                 ;531
000884  e3a01000          MOV      r1,#0                 ;531
000888  e1a00009          MOV      r0,r9                 ;531
00088c  ebfffffe          BL       write_qh
000890  e2890020          ADD      r0,r9,#0x20           ;532
000894  e585000c          STR      r0,[r5,#0xc]          ;532
000898  e1a00005          MOV      r0,r5                 ;537
00089c  ebfffffe          BL       alloc_ehci_qTD
0008a0  e1a07000          MOV      r7,r0                 ;537
0008a4  e5950018          LDR      r0,[r5,#0x18]         ;539
0008a8  e3500000          CMP      r0,#0                 ;539
0008ac  0a000003          BEQ      |L1.2240|
0008b0  e1a00005          MOV      r0,r5                 ;540
0008b4  ebfffffe          BL       alloc_ehci_qTD
0008b8  e1a08000          MOV      r8,r0                 ;540
0008bc  ea000000          B        |L1.2244|
                  |L1.2240|
0008c0  e3a08000          MOV      r8,#0                 ;542
                  |L1.2244|
0008c4  e1a00005          MOV      r0,r5                 ;544
0008c8  ebfffffe          BL       alloc_ehci_qTD
0008cc  e1a06000          MOV      r6,r0                 ;544
0008d0  e3560000          CMP      r6,#0                 ;546
0008d4  1a000009          BNE      |L1.2304|
0008d8  e3570000          CMP      r7,#0                 ;548
0008dc  0a000001          BEQ      |L1.2280|
0008e0  e1a00007          MOV      r0,r7                 ;549
0008e4  ebfffffe          BL       free_ehci_qTD
                  |L1.2280|
0008e8  e3580000          CMP      r8,#0                 ;550
0008ec  0a000001          BEQ      |L1.2296|
0008f0  e1a00008          MOV      r0,r8                 ;551
0008f4  ebfffffe          BL       free_ehci_qTD
                  |L1.2296|
0008f8  e3e00009          MVN      r0,#9                 ;552
0008fc  eaffffcd          B        |L1.2104|
                  |L1.2304|
000900  e5874028          STR      r4,[r7,#0x28]         ;560
000904  e3a02008          MOV      r2,#8                 ;562
000908  e2851004          ADD      r1,r5,#4              ;562
00090c  e1a00007          MOV      r0,r7                 ;562
000910  ebfffffe          BL       write_qtd_bptr
000914  e1a01007          MOV      r1,r7                 ;563
000918  e1a00004          MOV      r0,r4                 ;563
00091c  ebfffffe          BL       append_to_qtd_list_of_QH
000920  e59f0558          LDR      r0,|L1.3712|
000924  e5870008          STR      r0,[r7,#8]            ;564
000928  e5950018          LDR      r0,[r5,#0x18]         ;569
00092c  e3500000          CMP      r0,#0                 ;569
000930  0a000015          BEQ      |L1.2444|
000934  e5878000          STR      r8,[r7,#0]            ;571
000938  e5886000          STR      r6,[r8,#0]            ;572
00093c  e5d50004          LDRB     r0,[r5,#4]            ;574
000940  e3100080          TST      r0,#0x80              ;574
000944  1a000001          BNE      |L1.2384|
000948  e3a0ad32          MOV      r10,#0xc80            ;575
00094c  ea000000          B        |L1.2388|
                  |L1.2384|
000950  e3a0ad36          MOV      r10,#0xd80            ;577
                  |L1.2388|
000954  e5884028          STR      r4,[r8,#0x28]         ;579
000958  e1a00008          MOV      r0,r8                 ;581
00095c  e5951010          LDR      r1,[r5,#0x10]         ;581
000960  e5952018          LDR      r2,[r5,#0x18]         ;581
000964  ebfffffe          BL       write_qtd_bptr
000968  e1a01008          MOV      r1,r8                 ;582
00096c  e1a00004          MOV      r0,r4                 ;582
000970  ebfffffe          BL       append_to_qtd_list_of_QH
000974  e1d501b8          LDRH     r0,[r5,#0x18]         ;583
000978  e3a01102          MOV      r1,#0x80000000        ;583
00097c  e1810800          ORR      r0,r1,r0,LSL #16      ;583
000980  e180000a          ORR      r0,r0,r10             ;583
000984  e5880008          STR      r0,[r8,#8]            ;583
000988  ea000000          B        |L1.2448|
                  |L1.2444|
00098c  e5876000          STR      r6,[r7,#0]            ;587
                  |L1.2448|
000990  e59f04c0          LDR      r0,|L1.3672|
000994  e5900000          LDR      r0,[r0,#0]            ;593  ; _ghost_qtd
000998  e5860000          STR      r0,[r6,#0]            ;593
00099c  e3a00001          MOV      r0,#1                 ;594
0009a0  e5860004          STR      r0,[r6,#4]            ;594
0009a4  e5d50004          LDRB     r0,[r5,#4]            ;596
0009a8  e3100080          TST      r0,#0x80              ;596
0009ac  1a000001          BNE      |L1.2488|
0009b0  e3a0ad36          MOV      r10,#0xd80            ;597
0009b4  ea000000          B        |L1.2492|
                  |L1.2488|
0009b8  e3a0ad32          MOV      r10,#0xc80            ;599
                  |L1.2492|
0009bc  e5864028          STR      r4,[r6,#0x28]         ;601
0009c0  e1a01006          MOV      r1,r6                 ;603
0009c4  e1a00004          MOV      r0,r4                 ;603
0009c8  ebfffffe          BL       append_to_qtd_list_of_QH
0009cc  e38a0102          ORR      r0,r10,#0x80000000    ;604
0009d0  e3800902          ORR      r0,r0,#0x8000         ;604
0009d4  e5860008          STR      r0,[r6,#8]            ;604
0009d8  e3a00000          MOV      r0,#0                 ;609
0009dc  e584000c          STR      r0,[r4,#0xc]          ;609
0009e0  e5847010          STR      r7,[r4,#0x10]         ;610
0009e4  e3a00001          MOV      r0,#1                 ;611
0009e8  e5840014          STR      r0,[r4,#0x14]         ;611
0009ec  e3a00000          MOV      r0,#0                 ;612
0009f0  e5840018          STR      r0,[r4,#0x18]         ;612
0009f4  e35b0000          CMP      r11,#0                ;617
0009f8  0a000008          BEQ      |L1.2592|
0009fc  e59f0440          LDR      r0,|L1.3652|
000a00  e5900000          LDR      r0,[r0,#0]            ;619  ; _H_qh
000a04  e5900000          LDR      r0,[r0,#0]            ;619
000a08  e5840000          STR      r0,[r4,#0]            ;619
000a0c  e3c4001f          BIC      r0,r4,#0x1f           ;620
000a10  e3800002          ORR      r0,r0,#2              ;620
000a14  e59f1428          LDR      r1,|L1.3652|
000a18  e5911000          LDR      r1,[r1,#0]            ;620  ; _H_qh
000a1c  e5810000          STR      r0,[r1,#0]            ;620
                  |L1.2592|
000a20  e59f0438          LDR      r0,|L1.3680|
000a24  e5900000          LDR      r0,[r0,#0]            ;624  ; _ehci
000a28  e5900020          LDR      r0,[r0,#0x20]         ;624
000a2c  e3800020          ORR      r0,r0,#0x20           ;624
000a30  e59f1428          LDR      r1,|L1.3680|
000a34  e5911000          LDR      r1,[r1,#0]            ;624  ; _ehci
000a38  e5810020          STR      r0,[r1,#0x20]         ;624
000a3c  e3a00000          MOV      r0,#0                 ;625
000a40  eaffff7c          B        |L1.2104|
;;;627    
                          ENDP

                  ehci_bulk_xfer PROC
;;;628    static int ehci_bulk_xfer(UTR_T *utr)
000a44  e92d4ffe          PUSH     {r1-r11,lr}
;;;629    {
000a48  e1a06000          MOV      r6,r0
;;;630        UDEV_T     *udev;
;;;631        EP_INFO_T  *ep = utr->ep;
000a4c  e596700c          LDR      r7,[r6,#0xc]
;;;632        QH_T       *qh;
;;;633        qTD_T      *qtd, *qtd_pre;
;;;634        uint32_t   data_len, xfer_len;
;;;635        uint8_t    *buff;
;;;636        uint32_t   token;
;;;637        int        is_new_qh = 0;
000a50  e3a00000          MOV      r0,#0
000a54  e58d0000          STR      r0,[sp,#0]
;;;638    
;;;639        //USB_debug("Bulk XFER =>\n");
;;;640        // dump_ehci_asynclist_simple();
;;;641    
;;;642        udev = utr->udev;
000a58  e5960000          LDR      r0,[r6,#0]
000a5c  e58d0008          STR      r0,[sp,#8]
;;;643    
;;;644        if (ep->hw_pipe != NULL)
000a60  e5970008          LDR      r0,[r7,#8]
000a64  e3500000          CMP      r0,#0
000a68  0a000005          BEQ      |L1.2692|
;;;645        {
;;;646            qh = (QH_T *)ep->hw_pipe ;
000a6c  e5975008          LDR      r5,[r7,#8]
;;;647            if (qh->qtd_list)
000a70  e5950030          LDR      r0,[r5,#0x30]
000a74  e3500000          CMP      r0,#0
000a78  0a00000e          BEQ      |L1.2744|
;;;648            {
;;;649                return USBH_ERR_EHCI_QH_BUSY;
000a7c  e59f03f8          LDR      r0,|L1.3708|
                  |L1.2688|
;;;650            }
;;;651        }
;;;652        else
;;;653        {
;;;654            qh = alloc_ehci_QH();
;;;655            if (qh == NULL)
;;;656                return USBH_ERR_MEMORY_OUT;
;;;657            is_new_qh = 1;
;;;658            write_qh(udev, ep, qh);
;;;659            ep->hw_pipe = (void *)qh;           /* associate QH with endpoint                 */
;;;660        }
;;;661    
;;;662        /*------------------------------------------------------------------------------------*/
;;;663        /* Prepare qTDs                                                                       */
;;;664        /*------------------------------------------------------------------------------------*/
;;;665        data_len = utr->data_len;
;;;666        buff = utr->buff;
;;;667        qtd_pre = NULL;
;;;668    
;;;669        while (data_len > 0)
;;;670        {
;;;671            qtd = alloc_ehci_qTD(utr);
;;;672            if (qtd == NULL)                    /* failed to allocate a qTD                   */
;;;673            {
;;;674                qtd = qh->qtd_list;
;;;675                while (qtd != NULL)
;;;676                {
;;;677                    qtd_pre = qtd;
;;;678                    qtd = qtd->next;
;;;679                    free_ehci_qTD(qtd_pre);
;;;680                }
;;;681                if (is_new_qh)
;;;682                {
;;;683                    free_ehci_QH(qh);
;;;684                    ep->hw_pipe = NULL;
;;;685                }
;;;686                return USBH_ERR_MEMORY_OUT;
;;;687            }
;;;688    
;;;689            if ((ep->bEndpointAddress & EP_ADDR_DIR_MASK) == EP_ADDR_DIR_OUT)
;;;690            {
;;;691                token = QTD_ERR_COUNTER | QTD_PID_OUT | QTD_STS_ACTIVE;
;;;692            }
;;;693            else
;;;694            {
;;;695                token = QTD_ERR_COUNTER | QTD_PID_IN | QTD_STS_ACTIVE;
;;;696            }
;;;697    
;;;698            if (data_len > 0x4000)              /* force maximum x'fer length 16K per qTD     */
;;;699                xfer_len = 0x4000;
;;;700            else
;;;701                xfer_len = data_len;            /* remaining data length < 4K                 */
;;;702    
;;;703            qtd->qh = qh;
;;;704            qtd->Next_qTD = (uint32_t)_ghost_qtd;
;;;705            qtd->Alt_Next_qTD = QTD_LIST_END; //(uint32_t)_ghost_qtd;
;;;706            write_qtd_bptr(qtd, (uint32_t)buff, xfer_len);
;;;707            append_to_qtd_list_of_QH(qh, qtd);
;;;708            qtd->Token = (xfer_len << 16) | token;
;;;709    
;;;710            buff += xfer_len;                   /* advanced buffer pointer                    */
;;;711            data_len -= xfer_len;
;;;712    
;;;713            if (data_len == 0)                  /* is this the lastest qTD?                   */
;;;714            {
;;;715                qtd->Token |= QTD_IOC;          /* ask to raise an interrupt on the last qTD  */
;;;716                qtd->Next_qTD = (uint32_t)_ghost_qtd;     /* qTD list end                     */
;;;717            }
;;;718    
;;;719            if (qtd_pre != NULL)
;;;720                qtd_pre->Next_qTD = (uint32_t)qtd;
;;;721            qtd_pre = qtd;
;;;722        }
;;;723    
;;;724        //USB_debug("BULK utr=0x%x, qh=0x%x, qtd=0x%x\n", (int)utr, (int)qh, (int)qh->qtd_list);
;;;725    
;;;726        qtd = qh->qtd_list;
;;;727    
;;;728        qh->OL_Next_qTD = (uint32_t)qtd;
;;;729    
;;;730        /*------------------------------------------------------------------------------------*/
;;;731        /* Link QH and start asynchronous transfer                                            */
;;;732        /*------------------------------------------------------------------------------------*/
;;;733        if (is_new_qh)
;;;734        {
;;;735            memcpy(&(qh->OL_Bptr[0]), &(qtd->Bptr[0]), 20);
;;;736            qh->Curr_qTD = (uint32_t)qtd;
;;;737    
;;;738            qh->OL_Token = 0; // qtd->Token;
;;;739    
;;;740            if (utr->ep->bToggle)
;;;741                qh->OL_Token |= QTD_DT;
;;;742    
;;;743            qh->HLink = _H_qh->HLink;
;;;744            _H_qh->HLink = QH_HLNK_QH(qh);
;;;745        }
;;;746    
;;;747        /*  Start transfer */
;;;748        _ehci->UCMDR |= HSUSBH_UCMDR_ASEN_Msk;      /* start asynchronous transfer            */
;;;749    
;;;750        return 0;
;;;751    }
000a80  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.2692|
000a84  ebfffffe          BL       alloc_ehci_QH
000a88  e1a05000          MOV      r5,r0                 ;654
000a8c  e3550000          CMP      r5,#0                 ;655
000a90  1a000001          BNE      |L1.2716|
000a94  e3e00009          MVN      r0,#9                 ;656
000a98  eafffff8          B        |L1.2688|
                  |L1.2716|
000a9c  e3a00001          MOV      r0,#1                 ;657
000aa0  e58d0000          STR      r0,[sp,#0]            ;657
000aa4  e1a02005          MOV      r2,r5                 ;658
000aa8  e1a01007          MOV      r1,r7                 ;658
000aac  e59d0008          LDR      r0,[sp,#8]            ;658
000ab0  ebfffffe          BL       write_qh
000ab4  e5875008          STR      r5,[r7,#8]            ;659
                  |L1.2744|
000ab8  e5968018          LDR      r8,[r6,#0x18]         ;665
000abc  e596b010          LDR      r11,[r6,#0x10]        ;666
000ac0  e3a09000          MOV      r9,#0                 ;667
000ac4  ea000040          B        |L1.3020|
                  |L1.2760|
000ac8  e1a00006          MOV      r0,r6                 ;671
000acc  ebfffffe          BL       alloc_ehci_qTD
000ad0  e1a04000          MOV      r4,r0                 ;671
000ad4  e3540000          CMP      r4,#0                 ;672
000ad8  1a000010          BNE      |L1.2848|
000adc  e5954030          LDR      r4,[r5,#0x30]         ;674
000ae0  ea000003          B        |L1.2804|
                  |L1.2788|
000ae4  e1a09004          MOV      r9,r4                 ;677
000ae8  e594402c          LDR      r4,[r4,#0x2c]         ;678
000aec  e1a00009          MOV      r0,r9                 ;679
000af0  ebfffffe          BL       free_ehci_qTD
                  |L1.2804|
000af4  e3540000          CMP      r4,#0                 ;675
000af8  1afffff9          BNE      |L1.2788|
000afc  e59d0000          LDR      r0,[sp,#0]            ;681
000b00  e3500000          CMP      r0,#0                 ;681
000b04  0a000003          BEQ      |L1.2840|
000b08  e1a00005          MOV      r0,r5                 ;683
000b0c  ebfffffe          BL       free_ehci_QH
000b10  e3a00000          MOV      r0,#0                 ;684
000b14  e5870008          STR      r0,[r7,#8]            ;684
                  |L1.2840|
000b18  e3e00009          MVN      r0,#9                 ;686
000b1c  eaffffd7          B        |L1.2688|
                  |L1.2848|
000b20  e5d70000          LDRB     r0,[r7,#0]            ;689
000b24  e3100080          TST      r0,#0x80              ;689
000b28  1a000002          BNE      |L1.2872|
000b2c  e3a00d32          MOV      r0,#0xc80             ;691
000b30  e58d0004          STR      r0,[sp,#4]            ;691
000b34  ea000001          B        |L1.2880|
                  |L1.2872|
000b38  e3a00d36          MOV      r0,#0xd80             ;695
000b3c  e58d0004          STR      r0,[sp,#4]            ;695
                  |L1.2880|
000b40  e3580901          CMP      r8,#0x4000            ;698
000b44  9a000001          BLS      |L1.2896|
000b48  e3a0a901          MOV      r10,#0x4000           ;699
000b4c  ea000000          B        |L1.2900|
                  |L1.2896|
000b50  e1a0a008          MOV      r10,r8                ;701
                  |L1.2900|
000b54  e5845028          STR      r5,[r4,#0x28]         ;703
000b58  e59f02f8          LDR      r0,|L1.3672|
000b5c  e5900000          LDR      r0,[r0,#0]            ;704  ; _ghost_qtd
000b60  e5840000          STR      r0,[r4,#0]            ;704
000b64  e3a00001          MOV      r0,#1                 ;705
000b68  e5840004          STR      r0,[r4,#4]            ;705
000b6c  e1a0200a          MOV      r2,r10                ;706
000b70  e1a0100b          MOV      r1,r11                ;706
000b74  e1a00004          MOV      r0,r4                 ;706
000b78  ebfffffe          BL       write_qtd_bptr
000b7c  e1a01004          MOV      r1,r4                 ;707
000b80  e1a00005          MOV      r0,r5                 ;707
000b84  ebfffffe          BL       append_to_qtd_list_of_QH
000b88  e59d0004          LDR      r0,[sp,#4]            ;708
000b8c  e180080a          ORR      r0,r0,r10,LSL #16     ;708
000b90  e5840008          STR      r0,[r4,#8]            ;708
000b94  e08bb00a          ADD      r11,r11,r10           ;710
000b98  e048800a          SUB      r8,r8,r10             ;711
000b9c  e3580000          CMP      r8,#0                 ;713
000ba0  1a000005          BNE      |L1.3004|
000ba4  e5940008          LDR      r0,[r4,#8]            ;715
000ba8  e3800902          ORR      r0,r0,#0x8000         ;715
000bac  e5840008          STR      r0,[r4,#8]            ;715
000bb0  e59f02a0          LDR      r0,|L1.3672|
000bb4  e5900000          LDR      r0,[r0,#0]            ;716  ; _ghost_qtd
000bb8  e5840000          STR      r0,[r4,#0]            ;716
                  |L1.3004|
000bbc  e3590000          CMP      r9,#0                 ;719
000bc0  0a000000          BEQ      |L1.3016|
000bc4  e5894000          STR      r4,[r9,#0]            ;720
                  |L1.3016|
000bc8  e1a09004          MOV      r9,r4                 ;721
                  |L1.3020|
000bcc  e3580000          CMP      r8,#0                 ;669
000bd0  1affffbc          BNE      |L1.2760|
000bd4  e5954030          LDR      r4,[r5,#0x30]         ;726
000bd8  e5854010          STR      r4,[r5,#0x10]         ;728
000bdc  e59d0000          LDR      r0,[sp,#0]            ;733
000be0  e3500000          CMP      r0,#0                 ;733
000be4  0a000016          BEQ      |L1.3140|
000be8  e3a02014          MOV      r2,#0x14              ;735
000bec  e284100c          ADD      r1,r4,#0xc            ;735
000bf0  e285001c          ADD      r0,r5,#0x1c           ;735
000bf4  ebfffffe          BL       __aeabi_memcpy4
000bf8  e585400c          STR      r4,[r5,#0xc]          ;736
000bfc  e3a00000          MOV      r0,#0                 ;738
000c00  e5850018          STR      r0,[r5,#0x18]         ;738
000c04  e596000c          LDR      r0,[r6,#0xc]          ;740
000c08  e5d00003          LDRB     r0,[r0,#3]            ;740
000c0c  e3500000          CMP      r0,#0                 ;740
000c10  0a000002          BEQ      |L1.3104|
000c14  e5950018          LDR      r0,[r5,#0x18]         ;741
000c18  e3800102          ORR      r0,r0,#0x80000000     ;741
000c1c  e5850018          STR      r0,[r5,#0x18]         ;741
                  |L1.3104|
000c20  e59f021c          LDR      r0,|L1.3652|
000c24  e5900000          LDR      r0,[r0,#0]            ;743  ; _H_qh
000c28  e5900000          LDR      r0,[r0,#0]            ;743
000c2c  e5850000          STR      r0,[r5,#0]            ;743
000c30  e3c5001f          BIC      r0,r5,#0x1f           ;744
000c34  e3800002          ORR      r0,r0,#2              ;744
000c38  e59f1204          LDR      r1,|L1.3652|
000c3c  e5911000          LDR      r1,[r1,#0]            ;744  ; _H_qh
000c40  e5810000          STR      r0,[r1,#0]            ;744
                  |L1.3140|
000c44  e59f0214          LDR      r0,|L1.3680|
000c48  e5900000          LDR      r0,[r0,#0]            ;748  ; _ehci
000c4c  e5900020          LDR      r0,[r0,#0x20]         ;748
000c50  e3800020          ORR      r0,r0,#0x20           ;748
000c54  e59f1204          LDR      r1,|L1.3680|
000c58  e5911000          LDR      r1,[r1,#0]            ;748  ; _ehci
000c5c  e5810020          STR      r0,[r1,#0x20]         ;748
000c60  e3a00000          MOV      r0,#0                 ;750
000c64  eaffff85          B        |L1.2688|
;;;752    
                          ENDP

                  ehci_int_xfer PROC
;;;753    static int ehci_int_xfer(UTR_T *utr)
000c68  e92d5ff0          PUSH     {r4-r12,lr}
;;;754    {
000c6c  e1a07000          MOV      r7,r0
;;;755        UDEV_T     *udev = utr->udev;
000c70  e5979000          LDR      r9,[r7,#0]
;;;756        EP_INFO_T  *ep = utr->ep;
000c74  e597600c          LDR      r6,[r7,#0xc]
;;;757        QH_T       *qh, *iqh;
;;;758        qTD_T      *qtd;
;;;759        uint32_t   token;
;;;760        int8_t     is_new_qh = 0;
000c78  e3a0b000          MOV      r11,#0
;;;761    
;;;762        if (ep->hw_pipe != NULL)
000c7c  e5960008          LDR      r0,[r6,#8]
000c80  e3500000          CMP      r0,#0
000c84  0a000005          BEQ      |L1.3232|
;;;763        {
;;;764            qh = (QH_T *)ep->hw_pipe ;
000c88  e5964008          LDR      r4,[r6,#8]
;;;765            if (qh->qtd_list)
000c8c  e5940030          LDR      r0,[r4,#0x30]
000c90  e3500000          CMP      r0,#0
000c94  0a000020          BEQ      |L1.3356|
;;;766                return USBH_ERR_EHCI_QH_BUSY;
000c98  e59f01dc          LDR      r0,|L1.3708|
                  |L1.3228|
;;;767        }
;;;768        else
;;;769        {
;;;770            qh = alloc_ehci_QH();
;;;771            if (qh == NULL)
;;;772                return USBH_ERR_MEMORY_OUT;
;;;773            is_new_qh = 1;
;;;774            write_qh(udev, ep, qh);
;;;775            qh->Chrst &= ~0xF0000000;
;;;776    
;;;777            if (udev->speed == SPEED_HIGH)
;;;778            {
;;;779                qh->Cap = (0x1 << QH_MULT_Pos) | (qh->Cap & 0xff) | make_int_s_mask(ep->bInterval);
;;;780            }
;;;781            else
;;;782            {
;;;783                qh->Cap = (0x1 << QH_MULT_Pos) | (qh->Cap & ~(QH_C_MASK_Msk | QH_S_MASK_Msk)) | 0x7802;
;;;784            }
;;;785            ep->hw_pipe = (void *)qh;           /* associate QH with endpoint                 */
;;;786        }
;;;787    
;;;788        /*------------------------------------------------------------------------------------*/
;;;789        /*  Prepare qTD                                                                       */
;;;790        /*------------------------------------------------------------------------------------*/
;;;791        qtd = alloc_ehci_qTD(utr);
;;;792        if (qtd == NULL)                    /* failed to allocate a qTD                   */
;;;793        {
;;;794            if (is_new_qh)
;;;795            {
;;;796                free_ehci_QH(qh);
;;;797                ep->hw_pipe = NULL;
;;;798            }
;;;799            return USBH_ERR_MEMORY_OUT;
;;;800        }
;;;801    
;;;802        if ((ep->bEndpointAddress & EP_ADDR_DIR_MASK) == EP_ADDR_DIR_OUT)
;;;803            token = QTD_ERR_COUNTER | QTD_PID_OUT | QTD_STS_ACTIVE;
;;;804        else
;;;805            token = QTD_ERR_COUNTER | QTD_PID_IN | QTD_STS_ACTIVE;
;;;806    
;;;807        qtd->qh = qh;
;;;808        qtd->Next_qTD = QTD_LIST_END; //(uint32_t)_ghost_qtd;
;;;809        qtd->Alt_Next_qTD = QTD_LIST_END; //(uint32_t)_ghost_qtd;
;;;810        write_qtd_bptr(qtd, (uint32_t)utr->buff, utr->data_len);
;;;811        append_to_qtd_list_of_QH(qh, qtd);
;;;812        qtd->Token = QTD_IOC | (utr->data_len << 16) | token;
;;;813    
;;;814        DISABLE_EHCI_IRQ();
;;;815    
;;;816        // USB_debug("ehci_int_xfer - qh: 0x%x, 0x%x, 0x%x, qtd: 0x%x\n", (int)qh, (int)qh->Chrst, (int)qh->Cap, (int)qtd);
;;;817    
;;;818        qh->OL_Next_qTD = (uint32_t)qtd;
;;;819    
;;;820        if (is_new_qh)
;;;821        {
;;;822            memcpy(&(qh->OL_Bptr[0]), &(qtd->Bptr[0]), 20);
;;;823            qh->Curr_qTD = (uint32_t)qtd;
;;;824            qh->OL_Token = qtd->Token;
;;;825    
;;;826            if (udev->speed == SPEED_HIGH)      /* get head node of this interval             */
;;;827                iqh = get_int_tree_head_node(ep->bInterval);
;;;828            else
;;;829                iqh = get_int_tree_head_node(ep->bInterval * 8);
;;;830            qh->HLink = iqh->HLink;             /* Add to list of the same interval           */
;;;831            iqh->HLink = QH_HLNK_QH(qh);
;;;832        }
;;;833    
;;;834        ENABLE_EHCI_IRQ();
;;;835    
;;;836        _ehci->UCMDR |= HSUSBH_UCMDR_PSEN_Msk;      /* periodic list enable                   */
;;;837        return 0;
;;;838    }
000c9c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.3232|
000ca0  ebfffffe          BL       alloc_ehci_QH
000ca4  e1a04000          MOV      r4,r0                 ;770
000ca8  e3540000          CMP      r4,#0                 ;771
000cac  1a000001          BNE      |L1.3256|
000cb0  e3e00009          MVN      r0,#9                 ;772
000cb4  eafffff8          B        |L1.3228|
                  |L1.3256|
000cb8  e3a0b001          MOV      r11,#1                ;773
000cbc  e1a02004          MOV      r2,r4                 ;774
000cc0  e1a01006          MOV      r1,r6                 ;774
000cc4  e1a00009          MOV      r0,r9                 ;774
000cc8  ebfffffe          BL       write_qh
000ccc  e5940004          LDR      r0,[r4,#4]            ;775
000cd0  e3c0020f          BIC      r0,r0,#0xf0000000     ;775
000cd4  e5840004          STR      r0,[r4,#4]            ;775
000cd8  e5d9001b          LDRB     r0,[r9,#0x1b]         ;777
000cdc  e3500002          CMP      r0,#2                 ;777
000ce0  1a000006          BNE      |L1.3328|
000ce4  e5d60002          LDRB     r0,[r6,#2]            ;779
000ce8  ebfffffe          BL       make_int_s_mask
000cec  e5d41008          LDRB     r1,[r4,#8]            ;779
000cf0  e3811101          ORR      r1,r1,#0x40000000     ;779
000cf4  e1800001          ORR      r0,r0,r1              ;779
000cf8  e5840008          STR      r0,[r4,#8]            ;779
000cfc  ea000005          B        |L1.3352|
                  |L1.3328|
000d00  e5940008          LDR      r0,[r4,#8]            ;783
000d04  e1a00820          LSR      r0,r0,#16             ;783
000d08  e1a00800          LSL      r0,r0,#16             ;783
000d0c  e3800109          ORR      r0,r0,#0x40000002     ;783
000d10  e3800b1e          ORR      r0,r0,#0x7800         ;783
000d14  e5840008          STR      r0,[r4,#8]            ;783
                  |L1.3352|
000d18  e5864008          STR      r4,[r6,#8]            ;785
                  |L1.3356|
000d1c  e1a00007          MOV      r0,r7                 ;791
000d20  ebfffffe          BL       alloc_ehci_qTD
000d24  e1a05000          MOV      r5,r0                 ;791
000d28  e3550000          CMP      r5,#0                 ;792
000d2c  1a000007          BNE      |L1.3408|
000d30  e35b0000          CMP      r11,#0                ;794
000d34  0a000003          BEQ      |L1.3400|
000d38  e1a00004          MOV      r0,r4                 ;796
000d3c  ebfffffe          BL       free_ehci_QH
000d40  e3a00000          MOV      r0,#0                 ;797
000d44  e5860008          STR      r0,[r6,#8]            ;797
                  |L1.3400|
000d48  e3e00009          MVN      r0,#9                 ;799
000d4c  eaffffd2          B        |L1.3228|
                  |L1.3408|
000d50  e5d60000          LDRB     r0,[r6,#0]            ;802
000d54  e3100080          TST      r0,#0x80              ;802
000d58  1a000001          BNE      |L1.3428|
000d5c  e3a0ad32          MOV      r10,#0xc80            ;803
000d60  ea000000          B        |L1.3432|
                  |L1.3428|
000d64  e3a0ad36          MOV      r10,#0xd80            ;805
                  |L1.3432|
000d68  e5854028          STR      r4,[r5,#0x28]         ;807
000d6c  e3a00001          MOV      r0,#1                 ;808
000d70  e5850000          STR      r0,[r5,#0]            ;808
000d74  e5850004          STR      r0,[r5,#4]            ;809
000d78  e1a00005          MOV      r0,r5                 ;810
000d7c  e5971010          LDR      r1,[r7,#0x10]         ;810
000d80  e5972018          LDR      r2,[r7,#0x18]         ;810
000d84  ebfffffe          BL       write_qtd_bptr
000d88  e1a01005          MOV      r1,r5                 ;811
000d8c  e1a00004          MOV      r0,r4                 ;811
000d90  ebfffffe          BL       append_to_qtd_list_of_QH
000d94  e1d701b8          LDRH     r0,[r7,#0x18]         ;812
000d98  e3a01902          MOV      r1,#0x8000            ;812
000d9c  e1810800          ORR      r0,r1,r0,LSL #16      ;812
000da0  e180000a          ORR      r0,r0,r10             ;812
000da4  e5850008          STR      r0,[r5,#8]            ;812
000da8  e3a00017          MOV      r0,#0x17              ;814
000dac  ebfffffe          BL       sysDisableInterrupt
000db0  e5845010          STR      r5,[r4,#0x10]         ;818
000db4  e35b0000          CMP      r11,#0                ;820
000db8  0a000016          BEQ      |L1.3608|
000dbc  e3a02014          MOV      r2,#0x14              ;822
000dc0  e285100c          ADD      r1,r5,#0xc            ;822
000dc4  e284001c          ADD      r0,r4,#0x1c           ;822
000dc8  ebfffffe          BL       __aeabi_memcpy4
000dcc  e584500c          STR      r5,[r4,#0xc]          ;823
000dd0  e5950008          LDR      r0,[r5,#8]            ;824
000dd4  e5840018          STR      r0,[r4,#0x18]         ;824
000dd8  e5d9001b          LDRB     r0,[r9,#0x1b]         ;826
000ddc  e3500002          CMP      r0,#2                 ;826
000de0  1a000003          BNE      |L1.3572|
000de4  e5d60002          LDRB     r0,[r6,#2]            ;827
000de8  ebfffffe          BL       get_int_tree_head_node
000dec  e1a08000          MOV      r8,r0                 ;827
000df0  ea000003          B        |L1.3588|
                  |L1.3572|
000df4  e5d61002          LDRB     r1,[r6,#2]            ;829
000df8  e1a00181          LSL      r0,r1,#3              ;829
000dfc  ebfffffe          BL       get_int_tree_head_node
000e00  e1a08000          MOV      r8,r0                 ;829
                  |L1.3588|
000e04  e5980000          LDR      r0,[r8,#0]            ;830
000e08  e5840000          STR      r0,[r4,#0]            ;830
000e0c  e3c4001f          BIC      r0,r4,#0x1f           ;831
000e10  e3800002          ORR      r0,r0,#2              ;831
000e14  e5880000          STR      r0,[r8,#0]            ;831
                  |L1.3608|
000e18  e3a00017          MOV      r0,#0x17              ;834
000e1c  ebfffffe          BL       sysEnableInterrupt
000e20  e59f0038          LDR      r0,|L1.3680|
000e24  e5900000          LDR      r0,[r0,#0]            ;836  ; _ehci
000e28  e5900020          LDR      r0,[r0,#0x20]         ;836
000e2c  e3800010          ORR      r0,r0,#0x10           ;836
000e30  e59f1028          LDR      r1,|L1.3680|
000e34  e5911000          LDR      r1,[r1,#0]            ;836  ; _ehci
000e38  e5810020          STR      r0,[r1,#0x20]         ;836
000e3c  e3a00000          MOV      r0,#0                 ;837
000e40  eaffff95          B        |L1.3228|
                  |L1.3652|
                          DCD      _H_qh
                  |L1.3656|
                          DCD      _Iqh
                  |L1.3660|
                          DCD      _PFList
                  |L1.3664|
                          DCD      _PFList_mem
                  |L1.3668|
                          DCD      iso_ep_list
                  |L1.3672|
                          DCD      _ghost_qtd
                  |L1.3676|
                          DCD      0x0003d090
                  |L1.3680|
                          DCD      _ehci
                  |L1.3684|
                          DCD      0x00010001
                  |L1.3688|
                          DCD      0x11197b7f
                  |L1.3692|
                          DCD      qh_remove_list
                  |L1.3696|
                          DCD      0x00002710
                  |L1.3700|
                          DCD      0xb0005000
                  |L1.3704|
                          DCD      0x40004000
                  |L1.3708|
                          DCD      0xfffffe09
                  |L1.3712|
                          DCD      0x00080e80
                          ENDP

                  ehci_quit_xfer PROC
;;;842     */
;;;843    static int ehci_quit_xfer(UTR_T *utr, EP_INFO_T *ep)
000e84  e92d4070          PUSH     {r4-r6,lr}
;;;844    {
000e88  e1a04000          MOV      r4,r0
000e8c  e1a05001          MOV      r5,r1
;;;845        QH_T       *qh;
;;;846    
;;;847        // USB_debug("ehci_quit_xfer - utr: 0x%x, ep: 0x%x\n", (int)utr, (int)ep);
;;;848    
;;;849        DISABLE_EHCI_IRQ();
000e90  e3a00017          MOV      r0,#0x17
000e94  ebfffffe          BL       sysDisableInterrupt
;;;850        if (ehci_quit_iso_xfer(utr, ep) == 0)
000e98  e1a01005          MOV      r1,r5
000e9c  e1a00004          MOV      r0,r4
000ea0  ebfffffe          BL       ehci_quit_iso_xfer
000ea4  e3500000          CMP      r0,#0
000ea8  1a000003          BNE      |L1.3772|
;;;851        {
;;;852            ENABLE_EHCI_IRQ();
000eac  e3a00017          MOV      r0,#0x17
000eb0  ebfffffe          BL       sysEnableInterrupt
;;;853            return 0;
000eb4  e3a00000          MOV      r0,#0
                  |L1.3768|
;;;854        }
;;;855        ENABLE_EHCI_IRQ();
;;;856    
;;;857        if (utr != NULL)
;;;858        {
;;;859            if (utr->ep == NULL)
;;;860                return USBH_ERR_NOT_FOUND;
;;;861    
;;;862            qh = (QH_T *)(utr->ep->hw_pipe);
;;;863    
;;;864            if (!qh)
;;;865                return USBH_ERR_NOT_FOUND;
;;;866    
;;;867            /* add the QH to remove list, it will be removed on the next IAAD interrupt       */
;;;868            move_qh_to_remove_list(qh);
;;;869            utr->ep->hw_pipe = NULL;
;;;870        }
;;;871    
;;;872        if ((ep != NULL) && (ep->hw_pipe != NULL))
;;;873        {
;;;874            qh = (QH_T *)(ep->hw_pipe);
;;;875            /* add the QH to remove list, it will be removed on the next IAAD interrupt       */
;;;876            move_qh_to_remove_list(qh);
;;;877            ep->hw_pipe = NULL;
;;;878        }
;;;879        delay_us(2000);
;;;880    
;;;881        return 0;
;;;882    }
000eb8  e8bd8070          POP      {r4-r6,pc}
                  |L1.3772|
000ebc  e3a00017          MOV      r0,#0x17              ;855
000ec0  ebfffffe          BL       sysEnableInterrupt
000ec4  e3540000          CMP      r4,#0                 ;857
000ec8  0a00000f          BEQ      |L1.3852|
000ecc  e594000c          LDR      r0,[r4,#0xc]          ;859
000ed0  e3500000          CMP      r0,#0                 ;859
000ed4  1a000001          BNE      |L1.3808|
000ed8  e3e00069          MVN      r0,#0x69              ;860
000edc  eafffff5          B        |L1.3768|
                  |L1.3808|
000ee0  e594000c          LDR      r0,[r4,#0xc]          ;862
000ee4  e5906008          LDR      r6,[r0,#8]            ;862
000ee8  e3560000          CMP      r6,#0                 ;864
000eec  1a000001          BNE      |L1.3832|
000ef0  e3e00069          MVN      r0,#0x69              ;865
000ef4  eaffffef          B        |L1.3768|
                  |L1.3832|
000ef8  e1a00006          MOV      r0,r6                 ;868
000efc  ebfffffe          BL       move_qh_to_remove_list
000f00  e3a00000          MOV      r0,#0                 ;869
000f04  e594100c          LDR      r1,[r4,#0xc]          ;869
000f08  e5810008          STR      r0,[r1,#8]            ;869
                  |L1.3852|
000f0c  e3550000          CMP      r5,#0                 ;872
000f10  0a000007          BEQ      |L1.3892|
000f14  e5950008          LDR      r0,[r5,#8]            ;872
000f18  e3500000          CMP      r0,#0                 ;872
000f1c  0a000004          BEQ      |L1.3892|
000f20  e5956008          LDR      r6,[r5,#8]            ;874
000f24  e1a00006          MOV      r0,r6                 ;876
000f28  ebfffffe          BL       move_qh_to_remove_list
000f2c  e3a00000          MOV      r0,#0                 ;877
000f30  e5850008          STR      r0,[r5,#8]            ;877
                  |L1.3892|
000f34  e3a00e7d          MOV      r0,#0x7d0             ;879
000f38  ebfffffe          BL       delay_us
000f3c  e3a00000          MOV      r0,#0                 ;881
000f40  eaffffdc          B        |L1.3768|
;;;883    
                          ENDP

                  visit_qtd PROC
;;;884    static int visit_qtd(qTD_T *qtd)
000f44  e92d4010          PUSH     {r4,lr}
;;;885    {
000f48  e1a04000          MOV      r4,r0
;;;886        if ((qtd->Token == 0x11197B7F) || (qtd->Token == 0x1197B7F))
000f4c  e5940008          LDR      r0,[r4,#8]
000f50  e51f10f0          LDR      r1,|L1.3688|
000f54  e1500001          CMP      r0,r1
000f58  0a000003          BEQ      |L1.3948|
000f5c  e281120f          ADD      r1,r1,#0xf0000000
000f60  e5940008          LDR      r0,[r4,#8]
000f64  e1500001          CMP      r0,r1
000f68  1a000001          BNE      |L1.3956|
                  |L1.3948|
;;;887            return 0;                    /* A Dummy qTD or qTD on writing, don't touch it.    */
000f6c  e3a00000          MOV      r0,#0
                  |L1.3952|
;;;888    
;;;889        // USB_debug("Visit qtd 0x%x - 0x%x\n", (int)qtd, qtd->Token);
;;;890    
;;;891        if ((qtd->Token & QTD_STS_ACTIVE) == 0)
;;;892        {
;;;893            if (qtd->Token & (QTD_STS_HALT | QTD_STS_DATA_BUFF_ERR | QTD_STS_BABBLE | QTD_STS_XactErr | QTD_STS_MISS_MF))
;;;894            {
;;;895                USB_error("qTD 0x%x error token=0x%x!  0x%x\n", (int)qtd, qtd->Token, qtd->Bptr[0]);
;;;896                if (qtd->utr->status == 0)
;;;897                    qtd->utr->status = USBH_ERR_TRANSACTION;
;;;898            }
;;;899            else
;;;900            {
;;;901                if ((qtd->Token & QTD_PID_Msk) != QTD_PID_SETUP)
;;;902                {
;;;903                    qtd->utr->xfer_len += qtd->xfer_len - QTD_TODO_LEN(qtd->Token);
;;;904                    //sysprintf("xfer_len = %d\n", qtd->utr->xfer_len);
;;;905                }
;;;906            }
;;;907            return 1;
;;;908        }
;;;909        return 0;
;;;910    }
000f70  e8bd8010          POP      {r4,pc}
                  |L1.3956|
000f74  e5d40008          LDRB     r0,[r4,#8]            ;891
000f78  e3100080          TST      r0,#0x80              ;891
000f7c  1a00001f          BNE      |L1.4096|
000f80  e5d40008          LDRB     r0,[r4,#8]            ;893
000f84  e310007c          TST      r0,#0x7c              ;893
000f88  0a00000c          BEQ      |L1.4032|
000f8c  e5942008          LDR      r2,[r4,#8]            ;895
000f90  e594300c          LDR      r3,[r4,#0xc]          ;895
000f94  e1a01004          MOV      r1,r4                 ;895
000f98  e28f0f9a          ADR      r0,|L1.4616|
000f9c  ebfffffe          BL       sysprintf
000fa0  e5940020          LDR      r0,[r4,#0x20]         ;896
000fa4  e5900078          LDR      r0,[r0,#0x78]         ;896
000fa8  e3500000          CMP      r0,#0                 ;896
000fac  1a000011          BNE      |L1.4088|
000fb0  e59f0274          LDR      r0,|L1.4652|
000fb4  e5941020          LDR      r1,[r4,#0x20]         ;897
000fb8  e5810078          STR      r0,[r1,#0x78]         ;897
000fbc  ea00000d          B        |L1.4088|
                  |L1.4032|
000fc0  e1d400b8          LDRH     r0,[r4,#8]            ;901
000fc4  e2000c03          AND      r0,r0,#0x300          ;901
000fc8  e3500c02          CMP      r0,#0x200             ;901
000fcc  0a000009          BEQ      |L1.4088|
000fd0  e5940024          LDR      r0,[r4,#0x24]         ;903
000fd4  e5941008          LDR      r1,[r4,#8]            ;903
000fd8  e59f2250          LDR      r2,|L1.4656|
000fdc  e0021821          AND      r1,r2,r1,LSR #16      ;903
000fe0  e0400001          SUB      r0,r0,r1              ;903
000fe4  e5941020          LDR      r1,[r4,#0x20]         ;903
000fe8  e591101c          LDR      r1,[r1,#0x1c]         ;903
000fec  e0800001          ADD      r0,r0,r1              ;903
000ff0  e5941020          LDR      r1,[r4,#0x20]         ;903
000ff4  e581001c          STR      r0,[r1,#0x1c]         ;903
                  |L1.4088|
000ff8  e3a00001          MOV      r0,#1                 ;907
000ffc  eaffffdb          B        |L1.3952|
                  |L1.4096|
001000  e3a00000          MOV      r0,#0                 ;909
001004  eaffffd9          B        |L1.3952|
;;;911    
                          ENDP

                  scan_asynchronous_list PROC
;;;912    static void scan_asynchronous_list()
001008  e92d47f0          PUSH     {r4-r10,lr}
;;;913    {
;;;914        QH_T    *qh, *qh_tmp;
;;;915        qTD_T   *q_pre, *qtd, *qtd_tmp;
;;;916        UTR_T   *utr;
;;;917    
;;;918        qh =  QH_PTR(_H_qh->HLink);
00100c  e51f01d0          LDR      r0,|L1.3652|
001010  e5900000          LDR      r0,[r0,#0]  ; _H_qh
001014  e5900000          LDR      r0,[r0,#0]
001018  e3c0501f          BIC      r5,r0,#0x1f
;;;919        while (qh != _H_qh)
00101c  ea00003a          B        |L1.4364|
                  |L1.4128|
;;;920        {
;;;921            // USB_debug("Scan qh=0x%x, 0x%x\n", (int)qh, qh->OL_Token);
;;;922    
;;;923            utr = NULL;
001020  e3a06000          MOV      r6,#0
;;;924            qtd = qh->qtd_list;
001024  e5954030          LDR      r4,[r5,#0x30]
;;;925            while (qtd != NULL)
001028  ea000014          B        |L1.4224|
                  |L1.4140|
;;;926            {
;;;927                if (visit_qtd(qtd))                  /* if TRUE, reclaim this qtd             */
00102c  e1a00004          MOV      r0,r4
001030  ebfffffe          BL       visit_qtd
001034  e3500000          CMP      r0,#0
001038  0a00000e          BEQ      |L1.4216|
;;;928                {
;;;929                    /* qTD is completed, will remove it      */
;;;930                    utr = qtd->utr;
00103c  e5946020          LDR      r6,[r4,#0x20]
;;;931                    if (qtd == qh->qtd_list)
001040  e5950030          LDR      r0,[r5,#0x30]
001044  e1500004          CMP      r0,r4
001048  1a000002          BNE      |L1.4184|
;;;932                        qh->qtd_list = qtd->next;    /* unlink the qTD from qtd_list          */
00104c  e594002c          LDR      r0,[r4,#0x2c]
001050  e5850030          STR      r0,[r5,#0x30]
001054  ea000001          B        |L1.4192|
                  |L1.4184|
;;;933                    else
;;;934                        q_pre->next = qtd->next;     /* unlink the qTD from qtd_list          */
001058  e594002c          LDR      r0,[r4,#0x2c]
00105c  e589002c          STR      r0,[r9,#0x2c]
                  |L1.4192|
;;;935    
;;;936                    qtd_tmp = qtd;                   /* remember this qTD for freeing later   */
001060  e1a08004          MOV      r8,r4
;;;937                    qtd = qtd->next;                 /* advance to the next qTD               */
001064  e594402c          LDR      r4,[r4,#0x2c]
;;;938    
;;;939                    qtd_tmp->next = qh->done_list;   /* push this qTD to QH's done list       */
001068  e5950034          LDR      r0,[r5,#0x34]
00106c  e588002c          STR      r0,[r8,#0x2c]
;;;940                    qh->done_list = qtd_tmp;
001070  e5858034          STR      r8,[r5,#0x34]
001074  ea000001          B        |L1.4224|
                  |L1.4216|
;;;941                }
;;;942                else
;;;943                {
;;;944                    q_pre = qtd;                     /* remember this qTD as a preceder       */
001078  e1a09004          MOV      r9,r4
;;;945                    qtd = qtd->next;                 /* advance to next qTD                   */
00107c  e594402c          LDR      r4,[r4,#0x2c]
                  |L1.4224|
001080  e3540000          CMP      r4,#0                 ;925
001084  1affffe8          BNE      |L1.4140|
;;;946                }
;;;947            }
;;;948    
;;;949            qh_tmp = qh;
001088  e1a07005          MOV      r7,r5
;;;950            qh = QH_PTR(qh->HLink);                  /* advance to the next QH                */
00108c  e5950000          LDR      r0,[r5,#0]
001090  e3c0501f          BIC      r5,r0,#0x1f
;;;951    
;;;952            /* If all TDs are done, call-back to requester and then remove this QH.           */
;;;953            if ((qh_tmp->qtd_list == NULL) && utr)
001094  e5970030          LDR      r0,[r7,#0x30]
001098  e3500000          CMP      r0,#0
00109c  1a00001a          BNE      |L1.4364|
0010a0  e3560000          CMP      r6,#0
0010a4  0a000018          BEQ      |L1.4364|
;;;954            {
;;;955                // sysprintf("T %d [%d]\n", (qh_tmp->Chrst>>8)&0xf, (qh_tmp->OL_Token&QTD_DT) ? 1 : 0);
;;;956                if (qh_tmp->OL_Token & QTD_DT)
0010a8  e5970018          LDR      r0,[r7,#0x18]
0010ac  e3100102          TST      r0,#0x80000000
0010b0  0a000003          BEQ      |L1.4292|
;;;957                    utr->ep->bToggle = 1;
0010b4  e3a00001          MOV      r0,#1
0010b8  e596100c          LDR      r1,[r6,#0xc]
0010bc  e5c10003          STRB     r0,[r1,#3]
0010c0  ea000002          B        |L1.4304|
                  |L1.4292|
;;;958                else
;;;959                    utr->ep->bToggle = 0;
0010c4  e3a00000          MOV      r0,#0
0010c8  e596100c          LDR      r1,[r6,#0xc]
0010cc  e5c10003          STRB     r0,[r1,#3]
                  |L1.4304|
;;;960    
;;;961                utr->bIsTransferDone = 1;
0010d0  e3a00001          MOV      r0,#1
0010d4  e5c60014          STRB     r0,[r6,#0x14]
;;;962                if (utr->func)
0010d8  e5960084          LDR      r0,[r6,#0x84]
0010dc  e3500000          CMP      r0,#0
0010e0  0a000002          BEQ      |L1.4336|
;;;963                    utr->func(utr);
0010e4  e5961084          LDR      r1,[r6,#0x84]
0010e8  e1a00006          MOV      r0,r6
0010ec  e12fff31          BLX      r1
                  |L1.4336|
;;;964    
;;;965                _ehci->UCMDR |= HSUSBH_UCMDR_IAAD_Msk;   /* trigger IAA to reclaim done_list  */
0010f0  e51f0298          LDR      r0,|L1.3680|
0010f4  e5900000          LDR      r0,[r0,#0]  ; _ehci
0010f8  e5900020          LDR      r0,[r0,#0x20]
0010fc  e3800040          ORR      r0,r0,#0x40
001100  e51f12a8          LDR      r1,|L1.3680|
001104  e5911000          LDR      r1,[r1,#0]  ; _ehci
001108  e5810020          STR      r0,[r1,#0x20]
                  |L1.4364|
00110c  e51f02d0          LDR      r0,|L1.3652|
001110  e5900000          LDR      r0,[r0,#0]            ;919  ; _H_qh
001114  e1550000          CMP      r5,r0                 ;919
001118  1affffc0          BNE      |L1.4128|
;;;966    
;;;967            }
;;;968        }
;;;969    }
00111c  e8bd87f0          POP      {r4-r10,pc}
;;;970    
                          ENDP

                  scan_periodic_frame_list PROC
;;;971    static void scan_periodic_frame_list()
001120  e92d4070          PUSH     {r4-r6,lr}
;;;972    {
;;;973        QH_T    *qh;
;;;974        qTD_T   *qtd;
;;;975        UTR_T   *utr;
;;;976    
;;;977        /*------------------------------------------------------------------------------------*/
;;;978        /* Scan interrupt frame list                                                          */
;;;979        /*------------------------------------------------------------------------------------*/
;;;980        qh =  _Iqh[NUM_IQH-1];
001124  e51f02e4          LDR      r0,|L1.3656|
001128  e5904028          LDR      r4,[r0,#0x28]  ; _Iqh
;;;981        while (qh != NULL)
00112c  ea000031          B        |L1.4600|
                  |L1.4400|
;;;982        {
;;;983            qtd = qh->qtd_list;                 /* There's only one qTD in list at most.      */
001130  e5946030          LDR      r6,[r4,#0x30]
;;;984    
;;;985            if (qtd == NULL)
001134  e3560000          CMP      r6,#0
001138  1a000002          BNE      |L1.4424|
;;;986            {
;;;987                /* empty QH                                   */
;;;988                qh = QH_PTR(qh->HLink);         /* advance to the next QH                     */
00113c  e5940000          LDR      r0,[r4,#0]
001140  e3c0401f          BIC      r4,r0,#0x1f
;;;989                continue;
001144  ea00002b          B        |L1.4600|
                  |L1.4424|
;;;990            }
;;;991    
;;;992            if (visit_qtd(qtd))                 /* if TRUE, reclaim this qtd                  */
001148  e1a00006          MOV      r0,r6
00114c  ebfffffe          BL       visit_qtd
001150  e3500000          CMP      r0,#0
001154  0a000004          BEQ      |L1.4460|
;;;993            {
;;;994                qtd->next = qh->done_list;      /* push qTD into the done list                */
001158  e5940034          LDR      r0,[r4,#0x34]
00115c  e586002c          STR      r0,[r6,#0x2c]
;;;995                qh->done_list = qtd;
001160  e5846034          STR      r6,[r4,#0x34]
;;;996                qh->qtd_list = NULL;            /* qtd_list becomes empty                     */
001164  e3a00000          MOV      r0,#0
001168  e5840030          STR      r0,[r4,#0x30]
                  |L1.4460|
;;;997            }
;;;998    
;;;999            qtd = qh->done_list;
00116c  e5946034          LDR      r6,[r4,#0x34]
;;;1000   
;;;1001           /* If all TDs are done, call-back to requester and then remove this QH.           */
;;;1002           if ((qtd != NULL) && (qh->qtd_list == NULL))
001170  e3560000          CMP      r6,#0
001174  0a00001c          BEQ      |L1.4588|
001178  e5940030          LDR      r0,[r4,#0x30]
00117c  e3500000          CMP      r0,#0
001180  1a000019          BNE      |L1.4588|
;;;1003           {
;;;1004               utr = qtd->utr;
001184  e5965020          LDR      r5,[r6,#0x20]
;;;1005   
;;;1006               if (qh->OL_Token & QTD_DT)
001188  e5940018          LDR      r0,[r4,#0x18]
00118c  e3100102          TST      r0,#0x80000000
001190  0a000003          BEQ      |L1.4516|
;;;1007                   utr->ep->bToggle = 1;
001194  e3a00001          MOV      r0,#1
001198  e595100c          LDR      r1,[r5,#0xc]
00119c  e5c10003          STRB     r0,[r1,#3]
0011a0  ea000002          B        |L1.4528|
                  |L1.4516|
;;;1008               else
;;;1009                   utr->ep->bToggle = 0;
0011a4  e3a00000          MOV      r0,#0
0011a8  e595100c          LDR      r1,[r5,#0xc]
0011ac  e5c10003          STRB     r0,[r1,#3]
                  |L1.4528|
;;;1010   
;;;1011               utr->bIsTransferDone = 1;
0011b0  e3a00001          MOV      r0,#1
0011b4  e5c50014          STRB     r0,[r5,#0x14]
;;;1012               if (utr->func)
0011b8  e5950084          LDR      r0,[r5,#0x84]
0011bc  e3500000          CMP      r0,#0
0011c0  0a000002          BEQ      |L1.4560|
;;;1013                   utr->func(utr);
0011c4  e5951084          LDR      r1,[r5,#0x84]
0011c8  e1a00005          MOV      r0,r5
0011cc  e12fff31          BLX      r1
                  |L1.4560|
;;;1014   
;;;1015               _ehci->UCMDR |= HSUSBH_UCMDR_IAAD_Msk;   /* trigger IAA to reclaim done_list  */
0011d0  e51f0378          LDR      r0,|L1.3680|
0011d4  e5900000          LDR      r0,[r0,#0]  ; _ehci
0011d8  e5900020          LDR      r0,[r0,#0x20]
0011dc  e3800040          ORR      r0,r0,#0x40
0011e0  e51f1388          LDR      r1,|L1.3680|
0011e4  e5911000          LDR      r1,[r1,#0]  ; _ehci
0011e8  e5810020          STR      r0,[r1,#0x20]
                  |L1.4588|
;;;1016           }
;;;1017   
;;;1018           qh = QH_PTR(qh->HLink);                  /* advance to the next QH                */
0011ec  e5940000          LDR      r0,[r4,#0]
0011f0  e3c0401f          BIC      r4,r0,#0x1f
0011f4  e1a00000          MOV      r0,r0                 ;989
                  |L1.4600|
0011f8  e3540000          CMP      r4,#0                 ;981
0011fc  1affffcb          BNE      |L1.4400|
;;;1019       }
;;;1020   
;;;1021       /*------------------------------------------------------------------------------------*/
;;;1022       /* Scan isochronous frame list                                                          */
;;;1023       /*------------------------------------------------------------------------------------*/
;;;1024   
;;;1025       scan_isochronous_list();
001200  ebfffffe          BL       scan_isochronous_list
;;;1026   }
001204  e8bd8070          POP      {r4-r6,pc}
                  |L1.4616|
001208  71544420          DCB      "qTD 0x%x error token=0x%x!  0x%x\n",0
00120c  30782578
001210  20657272
001214  6f722074
001218  6f6b656e
00121c  3d307825
001220  78212020
001224  30782578
001228  0a00    
00122a  00                DCB      0
00122b  00                DCB      0
                  |L1.4652|
                          DCD      0xfffffef1
                  |L1.4656|
                          DCD      0x00007fff
                          ENDP

                  iaad_remove_qh PROC
;;;1027   
;;;1028   void iaad_remove_qh()
001234  e92d4070          PUSH     {r4-r6,lr}
;;;1029   {
;;;1030       QH_T    *qh;
;;;1031       qTD_T   *qtd;
;;;1032       UTR_T   *utr;
;;;1033   
;;;1034       /*------------------------------------------------------------------------------------*/
;;;1035       /* Remove all QHs in qh_remove_list...                                                */
;;;1036       /*------------------------------------------------------------------------------------*/
;;;1037       while (qh_remove_list != NULL)
001238  ea000027          B        |L1.4828|
                  |L1.4668|
;;;1038       {
;;;1039           qh = qh_remove_list;
00123c  e51f03d8          LDR      r0,|L1.3692|
001240  e5904000          LDR      r4,[r0,#0]  ; qh_remove_list
;;;1040           qh_remove_list = qh->next;
001244  e2801000          ADD      r1,r0,#0
001248  e5940038          LDR      r0,[r4,#0x38]
00124c  e5810000          STR      r0,[r1,#0]  ; qh_remove_list
;;;1041   
;;;1042           // USB_debug("iaad_remove_qh - remove QH 0x%x\n", (int)qh);
;;;1043   
;;;1044           while (qh->done_list)               /* we can free the qTDs now                   */
001250  ea000004          B        |L1.4712|
                  |L1.4692|
;;;1045           {
;;;1046               qtd = qh->done_list;
001254  e5946034          LDR      r6,[r4,#0x34]
;;;1047               qh->done_list = qtd->next;
001258  e596002c          LDR      r0,[r6,#0x2c]
00125c  e5840034          STR      r0,[r4,#0x34]
;;;1048               free_ehci_qTD(qtd);
001260  e1a00006          MOV      r0,r6
001264  ebfffffe          BL       free_ehci_qTD
                  |L1.4712|
001268  e5940034          LDR      r0,[r4,#0x34]         ;1044
00126c  e3500000          CMP      r0,#0                 ;1044
001270  1afffff7          BNE      |L1.4692|
;;;1049           }
;;;1050   
;;;1051           if (qh->qtd_list != NULL)           /* still have incompleted qTDs?               */
001274  e5940030          LDR      r0,[r4,#0x30]
001278  e3500000          CMP      r0,#0
00127c  0a000014          BEQ      |L1.4820|
;;;1052           {
;;;1053               utr = qh->qtd_list->utr;
001280  e5940030          LDR      r0,[r4,#0x30]
001284  e5905020          LDR      r5,[r0,#0x20]
;;;1054               while (qh->qtd_list)
001288  ea000004          B        |L1.4768|
                  |L1.4748|
;;;1055               {
;;;1056                   qtd = qh->qtd_list;
00128c  e5946030          LDR      r6,[r4,#0x30]
;;;1057                   qh->qtd_list = qtd->next;
001290  e596002c          LDR      r0,[r6,#0x2c]
001294  e5840030          STR      r0,[r4,#0x30]
;;;1058                   free_ehci_qTD(qtd);
001298  e1a00006          MOV      r0,r6
00129c  ebfffffe          BL       free_ehci_qTD
                  |L1.4768|
0012a0  e5940030          LDR      r0,[r4,#0x30]         ;1054
0012a4  e3500000          CMP      r0,#0                 ;1054
0012a8  1afffff7          BNE      |L1.4748|
;;;1059               }
;;;1060               utr->status = USBH_ERR_ABORT;
0012ac  e3e000cc          MVN      r0,#0xcc
0012b0  e5850078          STR      r0,[r5,#0x78]
;;;1061               utr->bIsTransferDone = 1;
0012b4  e3a00001          MOV      r0,#1
0012b8  e5c50014          STRB     r0,[r5,#0x14]
;;;1062               if (utr->func)
0012bc  e5950084          LDR      r0,[r5,#0x84]
0012c0  e3500000          CMP      r0,#0
0012c4  0a000002          BEQ      |L1.4820|
;;;1063                   utr->func(utr);             /* call back                                  */
0012c8  e5951084          LDR      r1,[r5,#0x84]
0012cc  e1a00005          MOV      r0,r5
0012d0  e12fff31          BLX      r1
                  |L1.4820|
;;;1064           }
;;;1065           free_ehci_QH(qh);                   /* free the QH                                */
0012d4  e1a00004          MOV      r0,r4
0012d8  ebfffffe          BL       free_ehci_QH
                  |L1.4828|
0012dc  e51f0478          LDR      r0,|L1.3692|
0012e0  e5900000          LDR      r0,[r0,#0]            ;1037  ; qh_remove_list
0012e4  e3500000          CMP      r0,#0                 ;1037
0012e8  1affffd3          BNE      |L1.4668|
;;;1066       }
;;;1067   
;;;1068       /*------------------------------------------------------------------------------------*/
;;;1069       /* Free all qTD in done_list of each asynchronous QH                                  */
;;;1070       /*------------------------------------------------------------------------------------*/
;;;1071       qh =  QH_PTR(_H_qh->HLink);
0012ec  e51f04b0          LDR      r0,|L1.3652|
0012f0  e5900000          LDR      r0,[r0,#0]  ; _H_qh
0012f4  e5900000          LDR      r0,[r0,#0]
0012f8  e3c0401f          BIC      r4,r0,#0x1f
;;;1072       while (qh != _H_qh)
0012fc  ea00000a          B        |L1.4908|
                  |L1.4864|
;;;1073       {
;;;1074           while (qh->done_list)               /* we can free the qTDs now                   */
001300  ea000004          B        |L1.4888|
                  |L1.4868|
;;;1075           {
;;;1076               qtd = qh->done_list;
001304  e5946034          LDR      r6,[r4,#0x34]
;;;1077               qh->done_list = qtd->next;
001308  e596002c          LDR      r0,[r6,#0x2c]
00130c  e5840034          STR      r0,[r4,#0x34]
;;;1078               free_ehci_qTD(qtd);
001310  e1a00006          MOV      r0,r6
001314  ebfffffe          BL       free_ehci_qTD
                  |L1.4888|
001318  e5940034          LDR      r0,[r4,#0x34]         ;1074
00131c  e3500000          CMP      r0,#0                 ;1074
001320  1afffff7          BNE      |L1.4868|
;;;1079           }
;;;1080           qh = QH_PTR(qh->HLink);                  /* advance to the next QH                */
001324  e5940000          LDR      r0,[r4,#0]
001328  e3c0401f          BIC      r4,r0,#0x1f
                  |L1.4908|
00132c  e51f04f0          LDR      r0,|L1.3652|
001330  e5900000          LDR      r0,[r0,#0]            ;1072  ; _H_qh
001334  e1540000          CMP      r4,r0                 ;1072
001338  1afffff0          BNE      |L1.4864|
;;;1081       }
;;;1082   
;;;1083       /*------------------------------------------------------------------------------------*/
;;;1084       /* Free all qTD in done_list of each QH of periodic frame list                        */
;;;1085       /*------------------------------------------------------------------------------------*/
;;;1086       qh =  _Iqh[NUM_IQH-1];
00133c  e51f04fc          LDR      r0,|L1.3656|
001340  e5904028          LDR      r4,[r0,#0x28]  ; _Iqh
;;;1087       while (qh != NULL)
001344  ea00000a          B        |L1.4980|
                  |L1.4936|
;;;1088       {
;;;1089           while (qh->done_list)               /* we can free the qTDs now                   */
001348  ea000004          B        |L1.4960|
                  |L1.4940|
;;;1090           {
;;;1091               qtd = qh->done_list;
00134c  e5946034          LDR      r6,[r4,#0x34]
;;;1092               qh->done_list = qtd->next;
001350  e596002c          LDR      r0,[r6,#0x2c]
001354  e5840034          STR      r0,[r4,#0x34]
;;;1093               free_ehci_qTD(qtd);
001358  e1a00006          MOV      r0,r6
00135c  ebfffffe          BL       free_ehci_qTD
                  |L1.4960|
001360  e5940034          LDR      r0,[r4,#0x34]         ;1089
001364  e3500000          CMP      r0,#0                 ;1089
001368  1afffff7          BNE      |L1.4940|
;;;1094           }
;;;1095           qh = QH_PTR(qh->HLink);                  /* advance to the next QH                */
00136c  e5940000          LDR      r0,[r4,#0]
001370  e3c0401f          BIC      r4,r0,#0x1f
                  |L1.4980|
001374  e3540000          CMP      r4,#0                 ;1087
001378  1afffff2          BNE      |L1.4936|
;;;1096       }
;;;1097   }
00137c  e8bd8070          POP      {r4-r6,pc}
;;;1098   
                          ENDP

                  EHCI_IRQHandler PROC
;;;1099   void EHCI_IRQHandler(void)
001380  e92d4010          PUSH     {r4,lr}
;;;1100   {
;;;1101       uint32_t  intsts;
;;;1102   
;;;1103       intsts = _ehci->USTSR;
001384  e51f052c          LDR      r0,|L1.3680|
001388  e5900000          LDR      r0,[r0,#0]  ; _ehci
00138c  e5904024          LDR      r4,[r0,#0x24]
;;;1104       _ehci->USTSR = intsts;                  /* clear interrupt status                     */
001390  e51f0538          LDR      r0,|L1.3680|
001394  e5900000          LDR      r0,[r0,#0]  ; _ehci
001398  e5804024          STR      r4,[r0,#0x24]
;;;1105   
;;;1106       // USB_debug("Eirq USTSR=0x%x\n", intsts);
;;;1107   
;;;1108       if (intsts & HSUSBH_USTSR_UERRINT_Msk)
;;;1109       {
;;;1110           // USB_error("Transfer error!\n");
;;;1111       }
;;;1112   
;;;1113       if (intsts & HSUSBH_USTSR_USBINT_Msk)
00139c  e3140001          TST      r4,#1
0013a0  0a000001          BEQ      |L1.5036|
;;;1114       {
;;;1115           /* some transfers completed, travel asynchronous */
;;;1116           /* and periodic lists to find and reclaim them.  */
;;;1117           scan_asynchronous_list();
0013a4  ebfffffe          BL       scan_asynchronous_list
;;;1118   
;;;1119           scan_periodic_frame_list();
0013a8  ebfffffe          BL       scan_periodic_frame_list
                  |L1.5036|
;;;1120       }
;;;1121   
;;;1122       if (intsts & HSUSBH_USTSR_IAA_Msk)
0013ac  e3140020          TST      r4,#0x20
0013b0  0a000000          BEQ      |L1.5048|
;;;1123       {
;;;1124           iaad_remove_qh();
0013b4  ebfffffe          BL       iaad_remove_qh
                  |L1.5048|
;;;1125       }
;;;1126   }
0013b8  e8bd8010          POP      {r4,pc}
;;;1127   
                          ENDP

                  ehci_find_device_by_port PROC
;;;1128   static UDEV_T * ehci_find_device_by_port(int port)
0013bc  e1a02000          MOV      r2,r0
;;;1129   {
;;;1130       UDEV_T  *udev;
;;;1131   
;;;1132       udev = g_udev_list;
0013c0  e59f03a8          LDR      r0,|L1.6000|
0013c4  e5901000          LDR      r1,[r0,#0]  ; g_udev_list
;;;1133       while (udev != NULL)
0013c8  ea00000b          B        |L1.5116|
                  |L1.5068|
;;;1134       {
;;;1135           if ((udev->parent == NULL) && (udev->port_num == port) && (udev->speed == SPEED_HIGH))
0013cc  e5910014          LDR      r0,[r1,#0x14]
0013d0  e3500000          CMP      r0,#0
0013d4  1a000007          BNE      |L1.5112|
0013d8  e5d10018          LDRB     r0,[r1,#0x18]
0013dc  e1500002          CMP      r0,r2
0013e0  1a000004          BNE      |L1.5112|
0013e4  e5d1001b          LDRB     r0,[r1,#0x1b]
0013e8  e3500002          CMP      r0,#2
0013ec  1a000001          BNE      |L1.5112|
;;;1136               return udev;
0013f0  e1a00001          MOV      r0,r1
                  |L1.5108|
;;;1137           udev = udev->next;
;;;1138       }
;;;1139       return NULL;
;;;1140   }
0013f4  e12fff1e          BX       lr
                  |L1.5112|
0013f8  e5911034          LDR      r1,[r1,#0x34]         ;1137
                  |L1.5116|
0013fc  e3510000          CMP      r1,#0                 ;1133
001400  1afffff1          BNE      |L1.5068|
001404  e3a00000          MOV      r0,#0                 ;1139
001408  eafffff9          B        |L1.5108|
;;;1141   
                          ENDP

                  ehci_rh_port_reset PROC
;;;1142   static int ehci_rh_port_reset(int port)
00140c  e92d41f0          PUSH     {r4-r8,lr}
;;;1143   {
001410  e1a04000          MOV      r4,r0
;;;1144       int       retry;
;;;1145       int       reset_time;
;;;1146       uint32_t  t0;
;;;1147   
;;;1148       reset_time = PORT_RESET_TIME_MS;
001414  e3a06032          MOV      r6,#0x32
;;;1149   
;;;1150       for (retry = 0; retry < PORT_RESET_RETRY; retry++)
001418  e3a05000          MOV      r5,#0
00141c  ea000034          B        |L1.5364|
                  |L1.5152|
;;;1151       {
;;;1152           _ehci->UPSCR[port] = (_ehci->UPSCR[port] | HSUSBH_UPSCR_PRST_Msk) & ~HSUSBH_UPSCR_PE_Msk;
001420  e51f05c8          LDR      r0,|L1.3680|
001424  e5900000          LDR      r0,[r0,#0]  ; _ehci
001428  e2800064          ADD      r0,r0,#0x64
00142c  e7900104          LDR      r0,[r0,r4,LSL #2]
001430  e3c00004          BIC      r0,r0,#4
001434  e3800c01          ORR      r0,r0,#0x100
001438  e51f15e0          LDR      r1,|L1.3680|
00143c  e5911000          LDR      r1,[r1,#0]  ; _ehci
001440  e2811064          ADD      r1,r1,#0x64
001444  e7810104          STR      r0,[r1,r4,LSL #2]
;;;1153   
;;;1154           t0 = get_ticks();
001448  ebfffffe          BL       get_ticks
00144c  e1a07000          MOV      r7,r0
;;;1155           while (get_ticks() - t0 < 6) ;           /* wait 50 ms                            */
001450  e1a00000          MOV      r0,r0
                  |L1.5204|
001454  ebfffffe          BL       get_ticks
001458  e0400007          SUB      r0,r0,r7
00145c  e3500006          CMP      r0,#6
001460  3afffffb          BCC      |L1.5204|
;;;1156   
;;;1157           _ehci->UPSCR[port] &= ~HSUSBH_UPSCR_PRST_Msk;
001464  e51f060c          LDR      r0,|L1.3680|
001468  e5900000          LDR      r0,[r0,#0]  ; _ehci
00146c  e2800064          ADD      r0,r0,#0x64
001470  e7900104          LDR      r0,[r0,r4,LSL #2]
001474  e3c00c01          BIC      r0,r0,#0x100
001478  e51f1620          LDR      r1,|L1.3680|
00147c  e5911000          LDR      r1,[r1,#0]  ; _ehci
001480  e2811064          ADD      r1,r1,#0x64
001484  e7810104          STR      r0,[r1,r4,LSL #2]
;;;1158   
;;;1159           t0 = get_ticks();
001488  ebfffffe          BL       get_ticks
00148c  e1a07000          MOV      r7,r0
;;;1160           while (get_ticks() - t0 < (reset_time/10)+1)
001490  ea00000d          B        |L1.5324|
                  |L1.5268|
;;;1161           {
;;;1162               if (!(_ehci->UPSCR[port] & HSUSBH_UPSCR_CCS_Msk) ||
001494  e51f063c          LDR      r0,|L1.3680|
001498  e5900000          LDR      r0,[r0,#0]  ; _ehci
00149c  e2800064          ADD      r0,r0,#0x64
0014a0  e7900104          LDR      r0,[r0,r4,LSL #2]
0014a4  e3100001          TST      r0,#1
0014a8  0a000006          BEQ      |L1.5320|
;;;1163                       ((_ehci->UPSCR[port] & (HSUSBH_UPSCR_CCS_Msk | HSUSBH_UPSCR_PE_Msk)) == (HSUSBH_UPSCR_CCS_Msk | HSUSBH_UPSCR_PE_Msk)))
0014ac  e51f0654          LDR      r0,|L1.3680|
0014b0  e5900000          LDR      r0,[r0,#0]  ; _ehci
0014b4  e2800064          ADD      r0,r0,#0x64
0014b8  e7900104          LDR      r0,[r0,r4,LSL #2]
0014bc  e2000005          AND      r0,r0,#5
0014c0  e3500005          CMP      r0,#5
0014c4  1a000000          BNE      |L1.5324|
                  |L1.5320|
;;;1164                   goto port_reset_done;
0014c8  ea00000d          B        |L1.5380|
                  |L1.5324|
0014cc  ebfffffe          BL       get_ticks
0014d0  e0408007          SUB      r8,r0,r7              ;1160
0014d4  e3a0100a          MOV      r1,#0xa               ;1160
0014d8  e1a00006          MOV      r0,r6                 ;1160
0014dc  ebfffffe          BL       __aeabi_idivmod
0014e0  e2800001          ADD      r0,r0,#1              ;1160
0014e4  e1580000          CMP      r8,r0                 ;1160
0014e8  3affffe9          BCC      |L1.5268|
;;;1165           }
;;;1166           reset_time += PORT_RESET_RETRY_INC_MS;
0014ec  e28660fa          ADD      r6,r6,#0xfa
0014f0  e2855001          ADD      r5,r5,#1              ;1150
                  |L1.5364|
0014f4  e3550003          CMP      r5,#3                 ;1150
0014f8  baffffc8          BLT      |L1.5152|
;;;1167       }
;;;1168   
;;;1169       return USBH_ERR_PORT_RESET;
0014fc  e3e000fe          MVN      r0,#0xfe
                  |L1.5376|
;;;1170   
;;;1171   port_reset_done:
;;;1172       if ((_ehci->UPSCR[port] & HSUSBH_UPSCR_CCS_Msk) == 0)   /* check again if device disconnected */
;;;1173       {
;;;1174           _ehci->UPSCR[port] |= HSUSBH_UPSCR_CSC_Msk;         /* clear CSC                          */
;;;1175           USB_debug("EHCI port %d, status 0x%x - port reset failed!\n", port+1, _ehci->UPSCR[port]);
;;;1176           return USBH_ERR_DISCONNECTED;
;;;1177       }
;;;1178       _ehci->UPSCR[port] |= HSUSBH_UPSCR_PEC_Msk;            /* clear port enable change status    */
;;;1179       return USBH_OK;                                        /* port reset success                 */
;;;1180   }
001500  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5380|
001504  e1a00000          MOV      r0,r0                 ;1171
001508  e51f06b0          LDR      r0,|L1.3680|
00150c  e5900000          LDR      r0,[r0,#0]            ;1172  ; _ehci
001510  e2800064          ADD      r0,r0,#0x64           ;1172
001514  e7900104          LDR      r0,[r0,r4,LSL #2]     ;1172
001518  e3100001          TST      r0,#1                 ;1172
00151c  1a00000a          BNE      |L1.5452|
001520  e51f06c8          LDR      r0,|L1.3680|
001524  e5900000          LDR      r0,[r0,#0]            ;1174  ; _ehci
001528  e2800064          ADD      r0,r0,#0x64           ;1174
00152c  e7900104          LDR      r0,[r0,r4,LSL #2]     ;1174
001530  e3800002          ORR      r0,r0,#2              ;1174
001534  e51f16dc          LDR      r1,|L1.3680|
001538  e5911000          LDR      r1,[r1,#0]            ;1174  ; _ehci
00153c  e2811064          ADD      r1,r1,#0x64           ;1174
001540  e7810104          STR      r0,[r1,r4,LSL #2]     ;1174
001544  e59f0228          LDR      r0,|L1.6004|
001548  eaffffec          B        |L1.5376|
                  |L1.5452|
00154c  e51f06f4          LDR      r0,|L1.3680|
001550  e5900000          LDR      r0,[r0,#0]            ;1178  ; _ehci
001554  e2800064          ADD      r0,r0,#0x64           ;1178
001558  e7900104          LDR      r0,[r0,r4,LSL #2]     ;1178
00155c  e3800008          ORR      r0,r0,#8              ;1178
001560  e51f1708          LDR      r1,|L1.3680|
001564  e5911000          LDR      r1,[r1,#0]            ;1178  ; _ehci
001568  e2811064          ADD      r1,r1,#0x64           ;1178
00156c  e7810104          STR      r0,[r1,r4,LSL #2]     ;1178
001570  e3a00000          MOV      r0,#0                 ;1179
001574  eaffffe1          B        |L1.5376|
;;;1181   
                          ENDP

                  ehci_rh_polling PROC
;;;1182   static int ehci_rh_polling(void)
001578  e92d47f0          PUSH     {r4-r10,lr}
;;;1183   {
;;;1184       UDEV_T    *udev;
;;;1185       int       ret, change = 0;
00157c  e3a08000          MOV      r8,#0
;;;1186       int       port;
;;;1187       int       connect_status, t0;
;;;1188   
;;;1189       for (port = 0; port < EHCI_PORT_CNT; port++)
001580  e3a04000          MOV      r4,#0
001584  ea000075          B        |L1.5984|
                  |L1.5512|
;;;1190       {
;;;1191           if (!(_ehci->UPSCR[port] & HSUSBH_UPSCR_CSC_Msk))
001588  e51f0730          LDR      r0,|L1.3680|
00158c  e5900000          LDR      r0,[r0,#0]  ; _ehci
001590  e2800064          ADD      r0,r0,#0x64
001594  e7900104          LDR      r0,[r0,r4,LSL #2]
001598  e3100002          TST      r0,#2
00159c  1a000000          BNE      |L1.5540|
;;;1192               continue;
0015a0  ea00006d          B        |L1.5980|
                  |L1.5540|
;;;1193   
;;;1194           change = 1;
0015a4  e3a08001          MOV      r8,#1
;;;1195   
;;;1196           USB_debug("EHCI port%d status change: 0x%x\n", port+1, _ehci->UPSCR[port]);
;;;1197   
;;;1198           /*--------------------------------------------------------------------------------*/
;;;1199           /*  Disconnect the devices attached to this port.                                 */
;;;1200           /*--------------------------------------------------------------------------------*/
;;;1201           while (1)
0015a8  ea000007          B        |L1.5580|
                  |L1.5548|
;;;1202           {
;;;1203               udev = ehci_find_device_by_port(port+1);
0015ac  e2840001          ADD      r0,r4,#1
0015b0  ebfffffe          BL       ehci_find_device_by_port
0015b4  e1a05000          MOV      r5,r0
;;;1204               if (udev == NULL)
0015b8  e3550000          CMP      r5,#0
0015bc  1a000000          BNE      |L1.5572|
;;;1205                   break;
0015c0  ea000002          B        |L1.5584|
                  |L1.5572|
;;;1206               disconnect_device(udev);
0015c4  e1a00005          MOV      r0,r5
0015c8  ebfffffe          BL       disconnect_device
                  |L1.5580|
0015cc  eafffff6          B        |L1.5548|
                  |L1.5584|
0015d0  e1a00000          MOV      r0,r0                 ;1205
;;;1207           }
;;;1208   
;;;1209           /*--------------------------------------------------------------------------------*/
;;;1210           /*  Port de-bounce                                                                */
;;;1211           /*--------------------------------------------------------------------------------*/
;;;1212           t0 = get_ticks();
0015d4  ebfffffe          BL       get_ticks
0015d8  e1a09000          MOV      r9,r0
;;;1213           connect_status = _ehci->UPSCR[port] & HSUSBH_UPSCR_CCS_Msk;
0015dc  e51f0784          LDR      r0,|L1.3680|
0015e0  e5900000          LDR      r0,[r0,#0]  ; _ehci
0015e4  e2800064          ADD      r0,r0,#0x64
0015e8  e7900104          LDR      r0,[r0,r4,LSL #2]
0015ec  e2007001          AND      r7,r0,#1
;;;1214           while (get_ticks() - t0 < HUB_DEBOUNCE_TIME/10)
0015f0  ea00000d          B        |L1.5676|
                  |L1.5620|
;;;1215           {
;;;1216               if (connect_status != (_ehci->UPSCR[port] & HSUSBH_UPSCR_CCS_Msk))
0015f4  e51f079c          LDR      r0,|L1.3680|
0015f8  e5900000          LDR      r0,[r0,#0]  ; _ehci
0015fc  e2800064          ADD      r0,r0,#0x64
001600  e7900104          LDR      r0,[r0,r4,LSL #2]
001604  e2000001          AND      r0,r0,#1
001608  e1500007          CMP      r0,r7
00160c  0a000006          BEQ      |L1.5676|
;;;1217               {
;;;1218                   /* reset stable time counting                                             */
;;;1219                   t0 = get_ticks();
001610  ebfffffe          BL       get_ticks
001614  e1a09000          MOV      r9,r0
;;;1220                   connect_status = _ehci->UPSCR[port] & HSUSBH_UPSCR_CCS_Msk;
001618  e51f07c0          LDR      r0,|L1.3680|
00161c  e5900000          LDR      r0,[r0,#0]  ; _ehci
001620  e2800064          ADD      r0,r0,#0x64
001624  e7900104          LDR      r0,[r0,r4,LSL #2]
001628  e2007001          AND      r7,r0,#1
                  |L1.5676|
00162c  ebfffffe          BL       get_ticks
001630  e0400009          SUB      r0,r0,r9              ;1214
001634  e3500050          CMP      r0,#0x50              ;1214
001638  3affffed          BCC      |L1.5620|
;;;1221               }
;;;1222           }
;;;1223   
;;;1224           _ehci->UPSCR[port] |= HSUSBH_UPSCR_CSC_Msk;  /* clear connect status change bit   */
00163c  e51f07e4          LDR      r0,|L1.3680|
001640  e5900000          LDR      r0,[r0,#0]  ; _ehci
001644  e2800064          ADD      r0,r0,#0x64
001648  e7900104          LDR      r0,[r0,r4,LSL #2]
00164c  e3800002          ORR      r0,r0,#2
001650  e51f17f8          LDR      r1,|L1.3680|
001654  e5911000          LDR      r1,[r1,#0]  ; _ehci
001658  e2811064          ADD      r1,r1,#0x64
00165c  e7810104          STR      r0,[r1,r4,LSL #2]
;;;1225   
;;;1226           if (connect_status == HSUSBH_UPSCR_CCS_Msk)
001660  e3570001          CMP      r7,#1
001664  1a000030          BNE      |L1.5932|
;;;1227           {
;;;1228               /*----------------------------------------------------------------------------*/
;;;1229               /*  A new device connected.                                                   */
;;;1230               /*----------------------------------------------------------------------------*/
;;;1231               if (ehci_rh_port_reset(port) != USBH_OK)
001668  e1a00004          MOV      r0,r4
00166c  ebfffffe          BL       ehci_rh_port_reset
001670  e3500000          CMP      r0,#0
001674  0a000013          BEQ      |L1.5832|
;;;1232               {
;;;1233                   /* port reset failed, maybe an USB 1.1 device */
;;;1234                   _ehci->UPSCR[port] |= HSUSBH_UPSCR_PO_Msk;     /* change port owner to OHCI     */
001678  e51f0820          LDR      r0,|L1.3680|
00167c  e5900000          LDR      r0,[r0,#0]  ; _ehci
001680  e2800064          ADD      r0,r0,#0x64
001684  e7900104          LDR      r0,[r0,r4,LSL #2]
001688  e3800a02          ORR      r0,r0,#0x2000
00168c  e51f1834          LDR      r1,|L1.3680|
001690  e5911000          LDR      r1,[r1,#0]  ; _ehci
001694  e2811064          ADD      r1,r1,#0x64
001698  e7810104          STR      r0,[r1,r4,LSL #2]
;;;1235                   _ehci->UPSCR[port] |= HSUSBH_UPSCR_CSC_Msk;    /* clear all status change bits  */
00169c  e51f0844          LDR      r0,|L1.3680|
0016a0  e5900000          LDR      r0,[r0,#0]  ; _ehci
0016a4  e2800064          ADD      r0,r0,#0x64
0016a8  e7900104          LDR      r0,[r0,r4,LSL #2]
0016ac  e3800002          ORR      r0,r0,#2
0016b0  e51f1858          LDR      r1,|L1.3680|
0016b4  e5911000          LDR      r1,[r1,#0]  ; _ehci
0016b8  e2811064          ADD      r1,r1,#0x64
0016bc  e7810104          STR      r0,[r1,r4,LSL #2]
;;;1236                   return 0;
0016c0  e3a00000          MOV      r0,#0
                  |L1.5828|
;;;1237               }
;;;1238   
;;;1239               /*
;;;1240                *  Port reset success. Start to enumerate this new device.
;;;1241                */
;;;1242               udev = alloc_device();
;;;1243               if (udev == NULL)
;;;1244                   return 0;                       /* out-of-memory, do nothing...           */
;;;1245   
;;;1246               udev->parent = NULL;
;;;1247               udev->port_num = port+1;
;;;1248               udev->speed = SPEED_HIGH;
;;;1249               udev->hc_driver = &ehci_driver;
;;;1250   
;;;1251               ret = connect_device(udev);
;;;1252               if (ret < 0)
;;;1253               {
;;;1254                   USB_error("connect_device error! [%d]\n", ret);
;;;1255                   free_device(udev);
;;;1256               }
;;;1257           }
;;;1258           else
;;;1259           {
;;;1260               /*  Device disconnected  */
;;;1261               while (1)
;;;1262               {
;;;1263                   udev = ehci_find_device_by_port(port+1);
;;;1264                   if (udev == NULL)
;;;1265                       break;
;;;1266                   disconnect_device(udev);
;;;1267               }
;;;1268           }
;;;1269       }
;;;1270       return change;
;;;1271   }
0016c4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.5832|
0016c8  ebfffffe          BL       alloc_device
0016cc  e1a05000          MOV      r5,r0                 ;1242
0016d0  e3550000          CMP      r5,#0                 ;1243
0016d4  1a000001          BNE      |L1.5856|
0016d8  e3a00000          MOV      r0,#0                 ;1244
0016dc  eafffff8          B        |L1.5828|
                  |L1.5856|
0016e0  e3a00000          MOV      r0,#0                 ;1246
0016e4  e5850014          STR      r0,[r5,#0x14]         ;1246
0016e8  e2840001          ADD      r0,r4,#1              ;1247
0016ec  e5c50018          STRB     r0,[r5,#0x18]         ;1247
0016f0  e3a00002          MOV      r0,#2                 ;1248
0016f4  e5c5001b          STRB     r0,[r5,#0x1b]         ;1248
0016f8  e59f0078          LDR      r0,|L1.6008|
0016fc  e585002c          STR      r0,[r5,#0x2c]         ;1249
001700  e1a00005          MOV      r0,r5                 ;1251
001704  ebfffffe          BL       connect_device
001708  e1a06000          MOV      r6,r0                 ;1251
00170c  e3560000          CMP      r6,#0                 ;1252
001710  aa000010          BGE      |L1.5976|
001714  e1a01006          MOV      r1,r6                 ;1254
001718  e28f005c          ADR      r0,|L1.6012|
00171c  ebfffffe          BL       sysprintf
001720  e1a00005          MOV      r0,r5                 ;1255
001724  ebfffffe          BL       free_device
001728  ea00000a          B        |L1.5976|
                  |L1.5932|
00172c  ea000007          B        |L1.5968|
                  |L1.5936|
001730  e2840001          ADD      r0,r4,#1              ;1263
001734  ebfffffe          BL       ehci_find_device_by_port
001738  e1a05000          MOV      r5,r0                 ;1263
00173c  e3550000          CMP      r5,#0                 ;1264
001740  1a000000          BNE      |L1.5960|
001744  ea000002          B        |L1.5972|
                  |L1.5960|
001748  e1a00005          MOV      r0,r5                 ;1266
00174c  ebfffffe          BL       disconnect_device
                  |L1.5968|
001750  eafffff6          B        |L1.5936|
                  |L1.5972|
001754  e1a00000          MOV      r0,r0                 ;1265
                  |L1.5976|
001758  e1a00000          MOV      r0,r0                 ;1192
                  |L1.5980|
00175c  e2844001          ADD      r4,r4,#1              ;1189
                  |L1.5984|
001760  e3540002          CMP      r4,#2                 ;1189
001764  baffff87          BLT      |L1.5512|
001768  e1a00008          MOV      r0,r8                 ;1270
00176c  eaffffd4          B        |L1.5828|
;;;1272   
                          ENDP

                  |L1.6000|
                          DCD      g_udev_list
                  |L1.6004|
                          DCD      0xfffffefd
                  |L1.6008|
                          DCD      ehci_driver
                  |L1.6012|
00177c  636f6e6e          DCB      "connect_device error! [%d]\n",0
001780  6563745f
001784  64657669
001788  63652065
00178c  72726f72
001790  21205b25
001794  645d0a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=12

                  _PFList_mem
                          %        4096
                  _Iqh
                          %        44

                          AREA ||.data||, DATA, ALIGN=2

                  ehci_driver
                          DCD      ehci_init
                          DCD      ehci_shutdown
                          DCD      ehci_suspend
                          DCD      ehci_resume
                          DCD      ehci_ctrl_xfer
                          DCD      ehci_bulk_xfer
                          DCD      ehci_int_xfer
                          DCD      ehci_iso_xfer
                          DCD      ehci_quit_xfer
                          DCD      ehci_rh_port_reset
                          DCD      ehci_rh_polling
                  _H_qh
                          DCD      0x00000000
                  _ghost_qtd
                          DCD      0x00000000
                  qh_remove_list
                          DCD      0x00000000
                  _PFList
                          DCD      0x00000000
