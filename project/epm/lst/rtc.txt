; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\rtc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\rtc.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\rtc.crf ..\..\common\src\BSP\Driver\Source\rtc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RTC_Check PROC
;;;43     
;;;44     VOID RTC_Check(void)
000000  e3a00000          MOV      r0,#0
;;;45     {
;;;46         i =0;
000004  e59f1ec0          LDR      r1,|L1.3788|
000008  e5810000          STR      r0,[r1,#0]  ; i
;;;47     
;;;48         Wait = inp32(REG_RTC_INTSTS) & RTC_INTSTS_REGWRBUSY_Msk;
00000c  e59f0ebc          LDR      r0,|L1.3792|
000010  e590002c          LDR      r0,[r0,#0x2c]
000014  e2000102          AND      r0,r0,#0x80000000
000018  e59f1eb4          LDR      r1,|L1.3796|
00001c  e5810000          STR      r0,[r1,#0]  ; Wait
;;;49     
;;;50         while(Wait == RTC_INTSTS_REGWRBUSY_Msk) {
000020  ea00000b          B        |L1.84|
                  |L1.36|
;;;51     
;;;52             Wait = inp32(REG_RTC_INTSTS) & RTC_INTSTS_REGWRBUSY_Msk;
000024  e59f0ea4          LDR      r0,|L1.3792|
000028  e590002c          LDR      r0,[r0,#0x2c]
00002c  e2000102          AND      r0,r0,#0x80000000
000030  e59f1e9c          LDR      r1,|L1.3796|
000034  e5810000          STR      r0,[r1,#0]  ; Wait
;;;53     
;;;54             i++;
000038  e59f0e8c          LDR      r0,|L1.3788|
00003c  e5900000          LDR      r0,[r0,#0]  ; i
000040  e2800001          ADD      r0,r0,#1
000044  e59f1e80          LDR      r1,|L1.3788|
000048  e5810000          STR      r0,[r1,#0]  ; i
;;;55     
;;;56             if(i > RTC_WAIT_COUNT) {
00004c  e2810000          ADD      r0,r1,#0
000050  e5900000          LDR      r0,[r0,#0]  ; i
                  |L1.84|
;;;57                 sysprintf("Time out\n");
;;;58                 break;
000054  e1a00000          MOV      r0,r0
000058  e59f0e74          LDR      r0,|L1.3796|
00005c  e5900000          LDR      r0,[r0,#0]            ;50  ; Wait
000060  e3500102          CMP      r0,#0x80000000        ;50
000064  0affffee          BEQ      |L1.36|
000068  e1a00000          MOV      r0,r0
;;;59             }
;;;60         }
;;;61     }
00006c  e12fff1e          BX       lr
;;;62     
                          ENDP

                  RTC_WriteEnable PROC
;;;160      */
;;;161    UINT32 RTC_WriteEnable (BOOL bEnable)
000070  e92d4008          PUSH     {r3,lr}
;;;162    {
000074  e1a02000          MOV      r2,r0
;;;163        INT32 volatile i32i;
;;;164    
;;;165        RTC_Check();
000078  ebfffffe          BL       RTC_Check
;;;166    
;;;167        if(bEnable) {
00007c  e3520000          CMP      r2,#0
000080  0a000017          BEQ      |L1.228|
;;;168            outp32(REG_RTC_RWEN, RTC_WRITE_KEY);
000084  e59f0e4c          LDR      r0,|L1.3800|
000088  e59f1e40          LDR      r1,|L1.3792|
00008c  e5810004          STR      r0,[r1,#4]
;;;169            RTC_Check();
000090  ebfffffe          BL       RTC_Check
;;;170    
;;;171            for (i32i = 0 ; i32i < RTC_WAIT_COUNT ; i32i++) {
000094  e3a00000          MOV      r0,#0
000098  e58d0000          STR      r0,[sp,#0]
00009c  ea000007          B        |L1.192|
                  |L1.160|
;;;172                /*-------------------------------------------------------------------------------------------------*/
;;;173                /* check RTC_RWEN[16] to find out RTC write enable                                                  */
;;;174                /*-------------------------------------------------------------------------------------------------*/
;;;175                if ( inp32(REG_RTC_RWEN) & 0x10000) {
0000a0  e59f0e28          LDR      r0,|L1.3792|
0000a4  e5900004          LDR      r0,[r0,#4]
0000a8  e3100801          TST      r0,#0x10000
0000ac  0a000000          BEQ      |L1.180|
;;;176                    break;
0000b0  ea000005          B        |L1.204|
                  |L1.180|
0000b4  e59d0000          LDR      r0,[sp,#0]            ;171
0000b8  e2800001          ADD      r0,r0,#1              ;171
0000bc  e58d0000          STR      r0,[sp,#0]            ;171
                  |L1.192|
0000c0  e59d0000          LDR      r0,[sp,#0]            ;171
0000c4  e3700001          CMN      r0,#1                 ;171
0000c8  1afffff4          BNE      |L1.160|
                  |L1.204|
0000cc  e1a00000          MOV      r0,r0
;;;177                }
;;;178            }
;;;179    
;;;180            if (i32i == RTC_WAIT_COUNT) {
0000d0  e59d0000          LDR      r0,[sp,#0]
0000d4  e3700001          CMN      r0,#1
0000d8  1a000010          BNE      |L1.288|
;;;181                //sysprintf ("\nRTC: 3, set write enable FAILED!\n");
;;;182    
;;;183                return E_RTC_ERR_EIO;
0000dc  e3a00006          MOV      r0,#6
                  |L1.224|
;;;184            }
;;;185        } else {
;;;186            for (i32i = 0 ; i32i < RTC_WAIT_COUNT ; i32i++) {
;;;187                if ( inp32(REG_RTC_RWEN) == 0) {
;;;188                    break;
;;;189                }
;;;190            }
;;;191        }
;;;192    
;;;193        return E_RTC_SUCCESS;
;;;194    }
0000e0  e8bd8008          POP      {r3,pc}
                  |L1.228|
0000e4  e3a00000          MOV      r0,#0                 ;186
0000e8  e58d0000          STR      r0,[sp,#0]            ;186
0000ec  ea000007          B        |L1.272|
                  |L1.240|
0000f0  e59f0dd8          LDR      r0,|L1.3792|
0000f4  e5900004          LDR      r0,[r0,#4]            ;187
0000f8  e3500000          CMP      r0,#0                 ;187
0000fc  1a000000          BNE      |L1.260|
000100  ea000005          B        |L1.284|
                  |L1.260|
000104  e59d0000          LDR      r0,[sp,#0]            ;186
000108  e2800001          ADD      r0,r0,#1              ;186
00010c  e58d0000          STR      r0,[sp,#0]            ;186
                  |L1.272|
000110  e59d0000          LDR      r0,[sp,#0]            ;186
000114  e3700001          CMN      r0,#1                 ;186
000118  1afffff4          BNE      |L1.240|
                  |L1.284|
00011c  e1a00000          MOV      r0,r0                 ;188
                  |L1.288|
000120  e3a00000          MOV      r0,#0                 ;193
000124  eaffffed          B        |L1.224|
;;;195    
                          ENDP

                  RTC_DoFrequencyCompensation PROC
;;;127      */
;;;128    UINT32 RTC_DoFrequencyCompensation(INT32 i32FrequencyX100)
000128  e92d41f0          PUSH     {r4-r8,lr}
;;;129    {
00012c  e1a06000          MOV      r6,r0
;;;130        INT32 i32RegInt, i32RegFra;
;;;131        UINT32 u32Reg;
;;;132    
;;;133        /* Compute integer and fraction for RTC FCR register */
;;;134        i32RegInt = (i32FrequencyX100 / 100) - RTC_FCR_REFERENCE;
000130  e3a01064          MOV      r1,#0x64
000134  e1a00006          MOV      r0,r6
000138  ebfffffe          BL       __aeabi_idivmod
00013c  e2404c7f          SUB      r4,r0,#0x7f00
000140  e24440f9          SUB      r4,r4,#0xf9
;;;135        i32RegFra = (((i32FrequencyX100 % 100)) * 60) / 100;
000144  e3a01064          MOV      r1,#0x64
000148  e1a00006          MOV      r0,r6
00014c  ebfffffe          BL       __aeabi_idivmod
000150  e0610201          RSB      r0,r1,r1,LSL #4
000154  e1a08100          LSL      r8,r0,#2
000158  e3a01064          MOV      r1,#0x64
00015c  e1a00008          MOV      r0,r8
000160  ebfffffe          BL       __aeabi_idivmod
000164  e1a07000          MOV      r7,r0
;;;136    
;;;137        /* Judge Integer part is reasonable */
;;;138        if((i32RegInt < 0) | (i32RegInt > 15)) {
000168  e354000f          CMP      r4,#0xf
00016c  da000001          BLE      |L1.376|
000170  e3a00001          MOV      r0,#1
000174  ea000000          B        |L1.380|
                  |L1.376|
000178  e3a00000          MOV      r0,#0
                  |L1.380|
00017c  e1900fa4          ORRS     r0,r0,r4,LSR #31
000180  0a000001          BEQ      |L1.396|
;;;139            return E_RTC_ERR_FCR_VALUE;
000184  e3a00005          MOV      r0,#5
                  |L1.392|
;;;140        }
;;;141    
;;;142        u32Reg = (uint32_t)((i32RegInt << 8) | i32RegFra);
;;;143    
;;;144        RTC_WriteEnable(1);
;;;145        outp32(REG_RTC_FREQADJ, u32Reg);
;;;146        RTC_Check();
;;;147    
;;;148        return E_RTC_SUCCESS;
;;;149    }
000188  e8bd81f0          POP      {r4-r8,pc}
                  |L1.396|
00018c  e1875404          ORR      r5,r7,r4,LSL #8       ;142
000190  e3a00001          MOV      r0,#1                 ;144
000194  ebfffffe          BL       RTC_WriteEnable
000198  e59f0d30          LDR      r0,|L1.3792|
00019c  e5805008          STR      r5,[r0,#8]            ;145
0001a0  ebfffffe          BL       RTC_Check
0001a4  e3a00000          MOV      r0,#0                 ;148
0001a8  eafffff6          B        |L1.392|
;;;150    
                          ENDP

                  RTC_Ioctl PROC
;;;777      */
;;;778    UINT32 RTC_Ioctl (INT32 i32Num, E_RTC_CMD eCmd, UINT32 u32Arg0, UINT32 u32Arg1)
0001ac  e92d5ff0          PUSH     {r4-r12,lr}
;;;779    {
0001b0  e1a0a000          MOV      r10,r0
0001b4  e1a07001          MOV      r7,r1
0001b8  e1a05002          MOV      r5,r2
0001bc  e1a08003          MOV      r8,r3
;;;780        INT32 i32Ret;
;;;781        UINT32 u32Reg;
;;;782        RTC_TICK_T *ptick;
;;;783        UINT32 u32Tmp;
;;;784    
;;;785        if (i32Num != 0)
0001c0  e35a0000          CMP      r10,#0
0001c4  0a000001          BEQ      |L1.464|
;;;786            return E_RTC_ERR_ENODEV;
0001c8  e3a00008          MOV      r0,#8
                  |L1.460|
;;;787    
;;;788        switch (eCmd) {
;;;789    
;;;790        case RTC_IOC_IDENTIFY_LEAP_YEAR: {
;;;791            u32Reg = inp32(REG_RTC_LEAPYEAR);
;;;792            if (u32Reg & 0x01) {
;;;793                *(PUINT32)u32Arg0 = RTC_LEAP_YEAR;
;;;794            } else {
;;;795                *(PUINT32)u32Arg0 = 0;
;;;796            }
;;;797            break;
;;;798        }
;;;799        case RTC_IOC_SET_TICK_MODE: {
;;;800            ptick = (RTC_TICK_T *) u32Arg0;
;;;801    
;;;802            if (g_bIsEnableTickInt== TRUE) {
;;;803                RTC_Ioctl(0,RTC_IOC_DISABLE_INT,RTC_TICK_INT,0);
;;;804                g_bIsEnableTickInt = TRUE;
;;;805            }
;;;806            g_u32RTC_Count = 0;
;;;807    
;;;808            if (ptick->ucMode > RTC_TICK_1_128_SEC) {                          /*Tick mode 0 to 7 */
;;;809                return E_RTC_ERR_ENOTTY ;
;;;810            }
;;;811    
;;;812            RTC_WriteEnable(1);
;;;813            outp32(REG_RTC_TICK, ptick->ucMode);
;;;814            RTC_Check();
;;;815    
;;;816            if (ptick->pfnTickCallBack != NULL) {
;;;817                g_pfnRTCCallBack_Tick = ptick->pfnTickCallBack;
;;;818            } else {
;;;819                g_pfnRTCCallBack_Tick = NULL;
;;;820            }
;;;821            /*---------------------------------------------------------------------------------------------*/
;;;822            /* Reset tick interrupt status if program enable tick interrupt before.                        */
;;;823            /*---------------------------------------------------------------------------------------------*/
;;;824            if (g_bIsEnableTickInt== TRUE) {
;;;825    
;;;826                RTC_Ioctl(0,RTC_IOC_ENABLE_INT,RTC_TICK_INT,0);
;;;827    
;;;828                return E_RTC_SUCCESS;
;;;829            }
;;;830            break;
;;;831        }
;;;832    
;;;833        case RTC_IOC_GET_TICK: {
;;;834            (*(PUINT32)u32Arg0) = g_u32RTC_Count;
;;;835            break;
;;;836        }
;;;837    
;;;838        case RTC_IOC_RESTORE_TICK: {
;;;839            g_u32RTC_Count = 0;
;;;840            break;
;;;841        }
;;;842    
;;;843        case RTC_IOC_ENABLE_INT: {
;;;844    
;;;845            switch ((RTC_INT_SOURCE)u32Arg0) {
;;;846    
;;;847            case RTC_TICK_INT: {
;;;848                g_bIsEnableTickInt   = TRUE;
;;;849                u32Tmp = inp32(REG_RTC_INTEN) | RTC_TICK_INT;
;;;850                break;
;;;851            }
;;;852            case RTC_ALARM_INT: {
;;;853                g_bIsEnableAlarmInt  = TRUE;
;;;854    
;;;855                RTC_WriteEnable(1);
;;;856                u32Tmp = inp32(REG_RTC_PWRCTL) | RTC_PWRCTL_ALARM_EN_Msk;
;;;857    
;;;858                outp32(REG_RTC_PWRCTL, u32Tmp);
;;;859                outp32(REG_RTC_INTEN, inp32(REG_RTC_INTEN) | RTC_INTEN_ALMIEN_Msk);
;;;860    
;;;861                RTC_Check();
;;;862    
;;;863                u32Tmp = inp32(REG_RTC_INTEN) | RTC_ALARM_INT;
;;;864    
;;;865                break;
;;;866            }
;;;867            case RTC_RELATIVE_ALARM_INT: {
;;;868                g_bIsEnableAlarmInt  = TRUE;
;;;869    
;;;870                RTC_WriteEnable(1);
;;;871                u32Tmp = inp32(REG_RTC_PWRCTL) | RTC_PWRCTL_REL_ALARM_EN_Msk;
;;;872    
;;;873                outp32(REG_RTC_PWRCTL, u32Tmp);
;;;874                RTC_Check();
;;;875    
;;;876                u32Tmp = inp32(REG_RTC_INTEN) | RTC_RELATIVE_ALARM_INT;
;;;877                break;
;;;878            }
;;;879            case RTC_PSWI_INT: {
;;;880                g_bIsEnableAlarmInt  = TRUE;
;;;881                u32Tmp = inp32(REG_RTC_INTEN) | RTC_PSWI_INT;
;;;882                break;
;;;883            }
;;;884            default: {
;;;885                return E_RTC_ERR_ENOTTY;
;;;886    
;;;887            }
;;;888            }
;;;889    
;;;890            RTC_WriteEnable(1);
;;;891            outp32(REG_RTC_INTEN, u32Tmp);
;;;892            RTC_Check();
;;;893    
;;;894            break;
;;;895        }
;;;896        case RTC_IOC_DISABLE_INT: {
;;;897    
;;;898            switch ((RTC_INT_SOURCE)u32Arg0) {
;;;899            case RTC_TICK_INT: {
;;;900                g_bIsEnableTickInt   = FALSE;
;;;901    
;;;902                RTC_WriteEnable(1);
;;;903                u32Tmp = inp32(REG_RTC_INTEN) & (~RTC_TICK_INT);
;;;904    
;;;905                outp32(REG_RTC_INTEN, u32Tmp);
;;;906    
;;;907                outp32(REG_RTC_INTSTS, RTC_TICK_INT);
;;;908                RTC_Check();
;;;909    
;;;910                break;
;;;911            }
;;;912            case RTC_ALARM_INT: {
;;;913                g_bIsEnableAlarmInt  = FALSE;
;;;914    
;;;915                RTC_WriteEnable(1);
;;;916                u32Tmp = inp32(REG_RTC_INTEN) & (~RTC_ALARM_INT);
;;;917    
;;;918                outp32(REG_RTC_INTEN, u32Tmp);
;;;919                RTC_Check();
;;;920    
;;;921                RTC_WriteEnable(1);
;;;922                u32Tmp = inp32(REG_RTC_PWRCTL) & ~RTC_PWRCTL_ALARM_EN_Msk;
;;;923    
;;;924                outp32(REG_RTC_PWRCTL, u32Tmp);
;;;925                RTC_Check();
;;;926    
;;;927                outp32(REG_RTC_INTSTS, RTC_ALARM_INT);
;;;928    
;;;929                break;
;;;930            }
;;;931            case RTC_RELATIVE_ALARM_INT: {
;;;932                g_bIsEnableAlarmInt  = FALSE;
;;;933    
;;;934                RTC_WriteEnable(1);
;;;935                u32Tmp = inp32(REG_RTC_INTEN) & (~RTC_RELATIVE_ALARM_INT);
;;;936    
;;;937                outp32(REG_RTC_INTEN, u32Tmp);
;;;938                RTC_Check();
;;;939    
;;;940                RTC_WriteEnable(1);
;;;941                u32Tmp = inp32(REG_RTC_PWRCTL) & ~RTC_PWRCTL_REL_ALARM_EN_Msk;
;;;942    
;;;943                outp32(REG_RTC_PWRCTL, u32Tmp);
;;;944                RTC_Check();
;;;945    
;;;946                outp32(REG_RTC_INTSTS, RTC_RELATIVE_ALARM_INT);
;;;947    
;;;948                break;
;;;949            }
;;;950            case RTC_PSWI_INT: {
;;;951                g_bIsEnableAlarmInt  = FALSE;
;;;952    
;;;953                RTC_WriteEnable(1);
;;;954                u32Tmp = inp32(REG_RTC_INTEN) & (~RTC_PSWI_INT);
;;;955    
;;;956                outp32(REG_RTC_INTEN, u32Tmp);
;;;957                RTC_Check();
;;;958    
;;;959                outp32(REG_RTC_INTSTS, RTC_PSWI_INT);
;;;960    
;;;961                break;
;;;962            }
;;;963    
;;;964            case RTC_ALL_INT: {
;;;965                g_bIsEnableTickInt   = FALSE;
;;;966                g_bIsEnableAlarmInt  = FALSE;
;;;967    
;;;968                RTC_WriteEnable(1);
;;;969                outp32(REG_RTC_INTEN, 0 );
;;;970                outp32(REG_RTC_INTSTS, RTC_ALL_INT);
;;;971                RTC_Check();
;;;972    
;;;973                break;
;;;974            }
;;;975            default: {
;;;976                return E_RTC_ERR_ENOTTY;
;;;977            }
;;;978            }
;;;979    
;;;980    
;;;981            break;
;;;982        }
;;;983    
;;;984        case RTC_IOC_SET_FREQUENCY: {
;;;985            i32Ret= RTC_DoFrequencyCompensation(u32Arg0) ;
;;;986            if (i32Ret != 0) {
;;;987                return E_RTC_ERR_ENOTTY;
;;;988            }
;;;989            break;
;;;990        }
;;;991        case RTC_IOC_SET_POWER_ON: {
;;;992            RTC_WriteEnable(1);
;;;993            u32Tmp = inp32(REG_RTC_PWRCTL) | 0x01;
;;;994    
;;;995            outp32(REG_RTC_PWRCTL,u32Tmp);
;;;996            RTC_Check();
;;;997    
;;;998            while((inp32(REG_RTC_PWRCTL) & 0x01) != 0x1);
;;;999    
;;;1000           break;
;;;1001       }
;;;1002       case RTC_IOC_SET_POWER_OFF: {
;;;1003           RTC_WriteEnable(1);
;;;1004           outp32(REG_RTC_PWRCTL, (inp32(REG_RTC_PWRCTL) & ~0x01) | 2);
;;;1005           RTC_Check();
;;;1006   
;;;1007           while(1);
;;;1008   
;;;1009           //break;
;;;1010       }
;;;1011       case RTC_IOC_SET_POWER_OFF_PERIOD: {
;;;1012           if(u32Arg0 < 4) u32Arg0 = 4;
;;;1013   
;;;1014           u32Arg0 = u32Arg0 - 4;
;;;1015   
;;;1016           RTC_WriteEnable(1);
;;;1017           outp32(REG_RTC_PWRCTL, (inp32(REG_RTC_PWRCTL) & ~0xF000) | ((u32Arg0 & 0xF) << 12));
;;;1018           RTC_Check();
;;;1019   
;;;1020           break;
;;;1021       }
;;;1022       case RTC_IOC_ENABLE_HW_POWEROFF: {
;;;1023           RTC_WriteEnable(1);
;;;1024           outp32(REG_RTC_PWRCTL, (inp32(REG_RTC_PWRCTL) | 0x04));
;;;1025           RTC_Check();
;;;1026   
;;;1027           break;
;;;1028       }
;;;1029       case RTC_IOC_DISABLE_HW_POWEROFF: {
;;;1030           RTC_WriteEnable(1);
;;;1031           outp32(REG_RTC_PWRCTL, (inp32(REG_RTC_PWRCTL) & ~0x04));
;;;1032           RTC_Check();
;;;1033   
;;;1034           break;
;;;1035       }
;;;1036       case RTC_IOC_SET_PSWI_CALLBACK: {
;;;1037   
;;;1038           RTC_Ioctl(0, RTC_IOC_ENABLE_INT, RTC_PSWI_INT, 0);
;;;1039   
;;;1040           if (((PFN_RTC_CALLBACK  *) u32Arg0) != NULL) {
;;;1041               g_pfnRTCCallBack_PSWI = (PFN_RTC_CALLBACK  *) u32Arg0;
;;;1042           } else {
;;;1043               g_pfnRTCCallBack_PSWI = NULL;
;;;1044           }
;;;1045           break;
;;;1046       }
;;;1047       case RTC_IOC_GET_POWERKEY_STATUS: {
;;;1048           RTC_WriteEnable(1);
;;;1049           if(inp32(REG_RTC_PWRCTL) & 0x80)
;;;1050               *(PUINT32)u32Arg0 = 1;
;;;1051           else
;;;1052               *(PUINT32)u32Arg0 = 0;
;;;1053   
;;;1054           break;
;;;1055       }
;;;1056       case RTC_IOC_SET_RELEATIVE_ALARM: {
;;;1057           g_bIsEnableAlarmInt  = TRUE;
;;;1058   
;;;1059           RTC_WriteEnable(1);
;;;1060           outp32(REG_RTC_PWRCTL,  (inp32(REG_RTC_PWRCTL) & ~0xFFF0010));
;;;1061           RTC_Check();
;;;1062   
;;;1063           RTC_WriteEnable(1);
;;;1064           u32Tmp = (inp32(REG_RTC_PWRCTL) & ~0xFFF0000)| ((u32Arg0 & 0xFFF) <<16) | RTC_PWRCTL_REL_ALARM_EN_Msk;
;;;1065   
;;;1066           outp32(REG_RTC_PWRCTL, u32Tmp);
;;;1067           RTC_Check();
;;;1068   
;;;1069           g_bIsEnableAlarmInt  = TRUE;
;;;1070   
;;;1071           RTC_WriteEnable(1);
;;;1072           u32Tmp = inp32(REG_RTC_INTEN) | RTC_RELATIVE_ALARM_INT;
;;;1073   
;;;1074           outp32(REG_RTC_INTEN, u32Tmp);
;;;1075           RTC_Check();
;;;1076   
;;;1077           if(u32Arg1 != 0)
;;;1078               g_pfnRTCCallBack_Relative_Alarm =   (PFN_RTC_CALLBACK  *)u32Arg1;
;;;1079   
;;;1080           break;
;;;1081   
;;;1082       }
;;;1083   
;;;1084       default: {
;;;1085           return E_RTC_ERR_ENOTTY;
;;;1086       }
;;;1087       }
;;;1088   
;;;1089       return E_RTC_SUCCESS;
;;;1090   }
0001cc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.464|
0001d0  e3570013          CMP      r7,#0x13              ;788
0001d4  308ff107          ADDCC    pc,pc,r7,LSL #2       ;788
0001d8  ea00019e          B        |L1.2136|
0001dc  ea000011          B        |L1.552|
0001e0  ea00001b          B        |L1.596|
0001e4  ea00004c          B        |L1.796|
0001e8  ea000050          B        |L1.816|
0001ec  ea000054          B        |L1.836|
0001f0  ea00009a          B        |L1.1120|
0001f4  ea000197          B        |L1.2136|
0001f8  ea000196          B        |L1.2136|
0001fc  ea00010a          B        |L1.1580|
000200  ea000112          B        |L1.1616|
000204  ea000120          B        |L1.1676|
000208  ea00012b          B        |L1.1724|
00020c  ea00013a          B        |L1.1788|
000210  ea000143          B        |L1.1828|
000214  ea00015b          B        |L1.1928|
000218  ea00014b          B        |L1.1868|
00021c  ea00018d          B        |L1.2136|
000220  ea00018c          B        |L1.2136|
000224  ea000164          B        |L1.1980|
                  |L1.552|
000228  e1a00000          MOV      r0,r0                 ;790
00022c  e59f0c9c          LDR      r0,|L1.3792|
000230  e590b024          LDR      r11,[r0,#0x24]        ;791
000234  e31b0001          TST      r11,#1                ;792
000238  0a000002          BEQ      |L1.584|
00023c  e3a00001          MOV      r0,#1                 ;793
000240  e5850000          STR      r0,[r5,#0]            ;793
000244  ea000001          B        |L1.592|
                  |L1.584|
000248  e3a00000          MOV      r0,#0                 ;795
00024c  e5850000          STR      r0,[r5,#0]            ;795
                  |L1.592|
000250  ea000183          B        |L1.2148|
                  |L1.596|
000254  e1a00000          MOV      r0,r0                 ;799
000258  e1a06005          MOV      r6,r5                 ;800
00025c  e59f0c78          LDR      r0,|L1.3804|
000260  e5d00000          LDRB     r0,[r0,#0]            ;802  ; g_bIsEnableTickInt
000264  e3500001          CMP      r0,#1                 ;802
000268  1a000007          BNE      |L1.652|
00026c  e3a03000          MOV      r3,#0                 ;803
000270  e3a02002          MOV      r2,#2                 ;803
000274  e3a01005          MOV      r1,#5                 ;803
000278  e1a00003          MOV      r0,r3                 ;803
00027c  ebfffffe          BL       RTC_Ioctl
000280  e3a00001          MOV      r0,#1                 ;804
000284  e59f1c50          LDR      r1,|L1.3804|
000288  e5c10000          STRB     r0,[r1,#0]            ;804  ; g_bIsEnableTickInt
                  |L1.652|
00028c  e3a00000          MOV      r0,#0                 ;806
000290  e59f1c48          LDR      r1,|L1.3808|
000294  e5810000          STR      r0,[r1,#0]            ;806  ; g_u32RTC_Count
000298  e5d60000          LDRB     r0,[r6,#0]            ;808
00029c  e3500007          CMP      r0,#7                 ;808
0002a0  da000001          BLE      |L1.684|
0002a4  e3a00007          MOV      r0,#7                 ;809
0002a8  eaffffc7          B        |L1.460|
                  |L1.684|
0002ac  e3a00001          MOV      r0,#1                 ;812
0002b0  ebfffffe          BL       RTC_WriteEnable
0002b4  e5d60000          LDRB     r0,[r6,#0]            ;813
0002b8  e59f1c10          LDR      r1,|L1.3792|
0002bc  e5810030          STR      r0,[r1,#0x30]         ;813
0002c0  ebfffffe          BL       RTC_Check
0002c4  e5960004          LDR      r0,[r6,#4]            ;816
0002c8  e3500000          CMP      r0,#0                 ;816
0002cc  0a000003          BEQ      |L1.736|
0002d0  e59f1c0c          LDR      r1,|L1.3812|
0002d4  e5960004          LDR      r0,[r6,#4]            ;817
0002d8  e5810000          STR      r0,[r1,#0]            ;817  ; g_pfnRTCCallBack_Tick
0002dc  ea000002          B        |L1.748|
                  |L1.736|
0002e0  e3a00000          MOV      r0,#0                 ;819
0002e4  e59f1bf8          LDR      r1,|L1.3812|
0002e8  e5810000          STR      r0,[r1,#0]            ;819  ; g_pfnRTCCallBack_Tick
                  |L1.748|
0002ec  e59f0be8          LDR      r0,|L1.3804|
0002f0  e5d00000          LDRB     r0,[r0,#0]            ;824  ; g_bIsEnableTickInt
0002f4  e3500001          CMP      r0,#1                 ;824
0002f8  1a000006          BNE      |L1.792|
0002fc  e3a03000          MOV      r3,#0                 ;826
000300  e3a02002          MOV      r2,#2                 ;826
000304  e3a01004          MOV      r1,#4                 ;826
000308  e1a00003          MOV      r0,r3                 ;826
00030c  ebfffffe          BL       RTC_Ioctl
000310  e3a00000          MOV      r0,#0                 ;828
000314  eaffffac          B        |L1.460|
                  |L1.792|
000318  ea000151          B        |L1.2148|
                  |L1.796|
00031c  e1a00000          MOV      r0,r0                 ;833
000320  e59f0bb8          LDR      r0,|L1.3808|
000324  e5900000          LDR      r0,[r0,#0]            ;834  ; g_u32RTC_Count
000328  e5850000          STR      r0,[r5,#0]            ;834
00032c  ea00014c          B        |L1.2148|
                  |L1.816|
000330  e1a00000          MOV      r0,r0                 ;838
000334  e3a00000          MOV      r0,#0                 ;839
000338  e59f1ba0          LDR      r1,|L1.3808|
00033c  e5810000          STR      r0,[r1,#0]            ;839  ; g_u32RTC_Count
000340  ea000147          B        |L1.2148|
                  |L1.836|
000344  e1a00000          MOV      r0,r0                 ;843
000348  e20500ff          AND      r0,r5,#0xff           ;845
00034c  e3500001          CMP      r0,#1                 ;845
000350  0a00000e          BEQ      |L1.912|
000354  e3500002          CMP      r0,#2                 ;845
000358  0a000004          BEQ      |L1.880|
00035c  e3500008          CMP      r0,#8                 ;845
000360  0a00002c          BEQ      |L1.1048|
000364  e3500010          CMP      r0,#0x10              ;845
000368  1a000032          BNE      |L1.1080|
00036c  ea00001a          B        |L1.988|
                  |L1.880|
000370  e1a00000          MOV      r0,r0                 ;847
000374  e3a00001          MOV      r0,#1                 ;848
000378  e59f1b5c          LDR      r1,|L1.3804|
00037c  e5c10000          STRB     r0,[r1,#0]            ;848  ; g_bIsEnableTickInt
000380  e59f0b48          LDR      r0,|L1.3792|
000384  e5900028          LDR      r0,[r0,#0x28]         ;849
000388  e3804002          ORR      r4,r0,#2              ;849
00038c  ea00002c          B        |L1.1092|
                  |L1.912|
000390  e1a00000          MOV      r0,r0                 ;852
000394  e3a00001          MOV      r0,#1                 ;853
000398  e59f1b48          LDR      r1,|L1.3816|
00039c  e5c10000          STRB     r0,[r1,#0]            ;853  ; g_bIsEnableAlarmInt
0003a0  ebfffffe          BL       RTC_WriteEnable
0003a4  e59f0b24          LDR      r0,|L1.3792|
0003a8  e5900034          LDR      r0,[r0,#0x34]         ;856
0003ac  e3804008          ORR      r4,r0,#8              ;856
0003b0  e59f0b18          LDR      r0,|L1.3792|
0003b4  e5804034          STR      r4,[r0,#0x34]         ;858
0003b8  e5900028          LDR      r0,[r0,#0x28]         ;859
0003bc  e3800001          ORR      r0,r0,#1              ;859
0003c0  e59f1b08          LDR      r1,|L1.3792|
0003c4  e5810028          STR      r0,[r1,#0x28]         ;859
0003c8  ebfffffe          BL       RTC_Check
0003cc  e59f0afc          LDR      r0,|L1.3792|
0003d0  e5900028          LDR      r0,[r0,#0x28]         ;863
0003d4  e3804001          ORR      r4,r0,#1              ;863
0003d8  ea000019          B        |L1.1092|
                  |L1.988|
0003dc  e1a00000          MOV      r0,r0                 ;867
0003e0  e3a00001          MOV      r0,#1                 ;868
0003e4  e59f1afc          LDR      r1,|L1.3816|
0003e8  e5c10000          STRB     r0,[r1,#0]            ;868  ; g_bIsEnableAlarmInt
0003ec  ebfffffe          BL       RTC_WriteEnable
0003f0  e59f0ad8          LDR      r0,|L1.3792|
0003f4  e5900034          LDR      r0,[r0,#0x34]         ;871
0003f8  e3804010          ORR      r4,r0,#0x10           ;871
0003fc  e59f0acc          LDR      r0,|L1.3792|
000400  e5804034          STR      r4,[r0,#0x34]         ;873
000404  ebfffffe          BL       RTC_Check
000408  e59f0ac0          LDR      r0,|L1.3792|
00040c  e5900028          LDR      r0,[r0,#0x28]         ;876
000410  e3804010          ORR      r4,r0,#0x10           ;876
000414  ea00000a          B        |L1.1092|
                  |L1.1048|
000418  e1a00000          MOV      r0,r0                 ;879
00041c  e3a00001          MOV      r0,#1                 ;880
000420  e59f1ac0          LDR      r1,|L1.3816|
000424  e5c10000          STRB     r0,[r1,#0]            ;880  ; g_bIsEnableAlarmInt
000428  e59f0aa0          LDR      r0,|L1.3792|
00042c  e5900028          LDR      r0,[r0,#0x28]         ;881
000430  e3804008          ORR      r4,r0,#8              ;881
000434  ea000002          B        |L1.1092|
                  |L1.1080|
000438  e1a00000          MOV      r0,r0                 ;884
00043c  e3a00007          MOV      r0,#7                 ;885
000440  eaffff61          B        |L1.460|
                  |L1.1092|
000444  e1a00000          MOV      r0,r0                 ;850
000448  e3a00001          MOV      r0,#1                 ;890
00044c  ebfffffe          BL       RTC_WriteEnable
000450  e59f0a78          LDR      r0,|L1.3792|
000454  e5804028          STR      r4,[r0,#0x28]         ;891
000458  ebfffffe          BL       RTC_Check
00045c  ea000100          B        |L1.2148|
                  |L1.1120|
000460  e1a00000          MOV      r0,r0                 ;896
000464  e20500ff          AND      r0,r5,#0xff           ;898
000468  e3500008          CMP      r0,#8                 ;898
00046c  0a00004a          BEQ      |L1.1436|
000470  ca000004          BGT      |L1.1160|
000474  e3500001          CMP      r0,#1                 ;898
000478  0a000017          BEQ      |L1.1244|
00047c  e3500002          CMP      r0,#2                 ;898
000480  1a000064          BNE      |L1.1560|
000484  ea000004          B        |L1.1180|
                  |L1.1160|
000488  e3500010          CMP      r0,#0x10              ;898
00048c  0a00002a          BEQ      |L1.1340|
000490  e350003f          CMP      r0,#0x3f              ;898
000494  1a00005f          BNE      |L1.1560|
000498  ea00004f          B        |L1.1500|
                  |L1.1180|
00049c  e1a00000          MOV      r0,r0                 ;899
0004a0  e3a00000          MOV      r0,#0                 ;900
0004a4  e59f1a30          LDR      r1,|L1.3804|
0004a8  e5c10000          STRB     r0,[r1,#0]            ;900  ; g_bIsEnableTickInt
0004ac  e3a00001          MOV      r0,#1                 ;902
0004b0  ebfffffe          BL       RTC_WriteEnable
0004b4  e59f0a14          LDR      r0,|L1.3792|
0004b8  e5900028          LDR      r0,[r0,#0x28]         ;903
0004bc  e3c04002          BIC      r4,r0,#2              ;903
0004c0  e59f0a08          LDR      r0,|L1.3792|
0004c4  e5804028          STR      r4,[r0,#0x28]         ;905
0004c8  e3a00002          MOV      r0,#2                 ;907
0004cc  e59f19fc          LDR      r1,|L1.3792|
0004d0  e581002c          STR      r0,[r1,#0x2c]         ;907
0004d4  ebfffffe          BL       RTC_Check
0004d8  ea000051          B        |L1.1572|
                  |L1.1244|
0004dc  e1a00000          MOV      r0,r0                 ;912
0004e0  e3a00000          MOV      r0,#0                 ;913
0004e4  e59f19fc          LDR      r1,|L1.3816|
0004e8  e5c10000          STRB     r0,[r1,#0]            ;913  ; g_bIsEnableAlarmInt
0004ec  e3a00001          MOV      r0,#1                 ;915
0004f0  ebfffffe          BL       RTC_WriteEnable
0004f4  e59f09d4          LDR      r0,|L1.3792|
0004f8  e5900028          LDR      r0,[r0,#0x28]         ;916
0004fc  e3c04001          BIC      r4,r0,#1              ;916
000500  e59f09c8          LDR      r0,|L1.3792|
000504  e5804028          STR      r4,[r0,#0x28]         ;918
000508  ebfffffe          BL       RTC_Check
00050c  e3a00001          MOV      r0,#1                 ;921
000510  ebfffffe          BL       RTC_WriteEnable
000514  e59f09b4          LDR      r0,|L1.3792|
000518  e5900034          LDR      r0,[r0,#0x34]         ;922
00051c  e3c04008          BIC      r4,r0,#8              ;922
000520  e59f09a8          LDR      r0,|L1.3792|
000524  e5804034          STR      r4,[r0,#0x34]         ;924
000528  ebfffffe          BL       RTC_Check
00052c  e3a00001          MOV      r0,#1                 ;927
000530  e59f1998          LDR      r1,|L1.3792|
000534  e581002c          STR      r0,[r1,#0x2c]         ;927
000538  ea000039          B        |L1.1572|
                  |L1.1340|
00053c  e1a00000          MOV      r0,r0                 ;931
000540  e3a00000          MOV      r0,#0                 ;932
000544  e59f199c          LDR      r1,|L1.3816|
000548  e5c10000          STRB     r0,[r1,#0]            ;932  ; g_bIsEnableAlarmInt
00054c  e3a00001          MOV      r0,#1                 ;934
000550  ebfffffe          BL       RTC_WriteEnable
000554  e59f0974          LDR      r0,|L1.3792|
000558  e5900028          LDR      r0,[r0,#0x28]         ;935
00055c  e3c04010          BIC      r4,r0,#0x10           ;935
000560  e59f0968          LDR      r0,|L1.3792|
000564  e5804028          STR      r4,[r0,#0x28]         ;937
000568  ebfffffe          BL       RTC_Check
00056c  e3a00001          MOV      r0,#1                 ;940
000570  ebfffffe          BL       RTC_WriteEnable
000574  e59f0954          LDR      r0,|L1.3792|
000578  e5900034          LDR      r0,[r0,#0x34]         ;941
00057c  e3c04010          BIC      r4,r0,#0x10           ;941
000580  e59f0948          LDR      r0,|L1.3792|
000584  e5804034          STR      r4,[r0,#0x34]         ;943
000588  ebfffffe          BL       RTC_Check
00058c  e3a00010          MOV      r0,#0x10              ;946
000590  e59f1938          LDR      r1,|L1.3792|
000594  e581002c          STR      r0,[r1,#0x2c]         ;946
000598  ea000021          B        |L1.1572|
                  |L1.1436|
00059c  e1a00000          MOV      r0,r0                 ;950
0005a0  e3a00000          MOV      r0,#0                 ;951
0005a4  e59f193c          LDR      r1,|L1.3816|
0005a8  e5c10000          STRB     r0,[r1,#0]            ;951  ; g_bIsEnableAlarmInt
0005ac  e3a00001          MOV      r0,#1                 ;953
0005b0  ebfffffe          BL       RTC_WriteEnable
0005b4  e59f0914          LDR      r0,|L1.3792|
0005b8  e5900028          LDR      r0,[r0,#0x28]         ;954
0005bc  e3c04008          BIC      r4,r0,#8              ;954
0005c0  e59f0908          LDR      r0,|L1.3792|
0005c4  e5804028          STR      r4,[r0,#0x28]         ;956
0005c8  ebfffffe          BL       RTC_Check
0005cc  e3a00008          MOV      r0,#8                 ;959
0005d0  e59f18f8          LDR      r1,|L1.3792|
0005d4  e581002c          STR      r0,[r1,#0x2c]         ;959
0005d8  ea000011          B        |L1.1572|
                  |L1.1500|
0005dc  e1a00000          MOV      r0,r0                 ;964
0005e0  e3a00000          MOV      r0,#0                 ;965
0005e4  e59f18f0          LDR      r1,|L1.3804|
0005e8  e5c10000          STRB     r0,[r1,#0]            ;965  ; g_bIsEnableTickInt
0005ec  e59f18f4          LDR      r1,|L1.3816|
0005f0  e5c10000          STRB     r0,[r1,#0]            ;966  ; g_bIsEnableAlarmInt
0005f4  e3a00001          MOV      r0,#1                 ;968
0005f8  ebfffffe          BL       RTC_WriteEnable
0005fc  e3a00000          MOV      r0,#0                 ;969
000600  e59f18c8          LDR      r1,|L1.3792|
000604  e5810028          STR      r0,[r1,#0x28]         ;969
000608  e3a0003f          MOV      r0,#0x3f              ;970
00060c  e581002c          STR      r0,[r1,#0x2c]         ;970
000610  ebfffffe          BL       RTC_Check
000614  ea000002          B        |L1.1572|
                  |L1.1560|
000618  e1a00000          MOV      r0,r0                 ;975
00061c  e3a00007          MOV      r0,#7                 ;976
000620  eafffee9          B        |L1.460|
                  |L1.1572|
000624  e1a00000          MOV      r0,r0                 ;910
000628  ea00008d          B        |L1.2148|
                  |L1.1580|
00062c  e1a00000          MOV      r0,r0                 ;984
000630  e1a00005          MOV      r0,r5                 ;985
000634  ebfffffe          BL       RTC_DoFrequencyCompensation
000638  e1a09000          MOV      r9,r0                 ;985
00063c  e3590000          CMP      r9,#0                 ;986
000640  0a000001          BEQ      |L1.1612|
000644  e3a00007          MOV      r0,#7                 ;987
000648  eafffedf          B        |L1.460|
                  |L1.1612|
00064c  ea000084          B        |L1.2148|
                  |L1.1616|
000650  e1a00000          MOV      r0,r0                 ;991
000654  e3a00001          MOV      r0,#1                 ;992
000658  ebfffffe          BL       RTC_WriteEnable
00065c  e59f086c          LDR      r0,|L1.3792|
000660  e5900034          LDR      r0,[r0,#0x34]         ;993
000664  e3804001          ORR      r4,r0,#1              ;993
000668  e59f0860          LDR      r0,|L1.3792|
00066c  e5804034          STR      r4,[r0,#0x34]         ;995
000670  ebfffffe          BL       RTC_Check
000674  e1a00000          MOV      r0,r0                 ;998
                  |L1.1656|
000678  e59f0850          LDR      r0,|L1.3792|
00067c  e5900034          LDR      r0,[r0,#0x34]         ;998
000680  e3100001          TST      r0,#1                 ;998
000684  0afffffb          BEQ      |L1.1656|
000688  ea000075          B        |L1.2148|
                  |L1.1676|
00068c  e1a00000          MOV      r0,r0                 ;1002
000690  e3a00001          MOV      r0,#1                 ;1003
000694  ebfffffe          BL       RTC_WriteEnable
000698  e59f0830          LDR      r0,|L1.3792|
00069c  e5900034          LDR      r0,[r0,#0x34]         ;1004
0006a0  e3c00001          BIC      r0,r0,#1              ;1004
0006a4  e3800002          ORR      r0,r0,#2              ;1004
0006a8  e59f1820          LDR      r1,|L1.3792|
0006ac  e5810034          STR      r0,[r1,#0x34]         ;1004
0006b0  ebfffffe          BL       RTC_Check
0006b4  e1a00000          MOV      r0,r0                 ;1007
                  |L1.1720|
0006b8  eafffffe          B        |L1.1720|
                  |L1.1724|
0006bc  e1a00000          MOV      r0,r0                 ;1011
0006c0  e3550004          CMP      r5,#4                 ;1012
0006c4  2a000000          BCS      |L1.1740|
0006c8  e3a05004          MOV      r5,#4                 ;1012
                  |L1.1740|
0006cc  e2455004          SUB      r5,r5,#4              ;1014
0006d0  e3a00001          MOV      r0,#1                 ;1016
0006d4  ebfffffe          BL       RTC_WriteEnable
0006d8  e59f07f0          LDR      r0,|L1.3792|
0006dc  e5900034          LDR      r0,[r0,#0x34]         ;1017
0006e0  e3c00a0f          BIC      r0,r0,#0xf000         ;1017
0006e4  e205100f          AND      r1,r5,#0xf            ;1017
0006e8  e1800601          ORR      r0,r0,r1,LSL #12      ;1017
0006ec  e59f17dc          LDR      r1,|L1.3792|
0006f0  e5810034          STR      r0,[r1,#0x34]         ;1017
0006f4  ebfffffe          BL       RTC_Check
0006f8  ea000059          B        |L1.2148|
                  |L1.1788|
0006fc  e1a00000          MOV      r0,r0                 ;1022
000700  e3a00001          MOV      r0,#1                 ;1023
000704  ebfffffe          BL       RTC_WriteEnable
000708  e59f07c0          LDR      r0,|L1.3792|
00070c  e5900034          LDR      r0,[r0,#0x34]         ;1024
000710  e3800004          ORR      r0,r0,#4              ;1024
000714  e59f17b4          LDR      r1,|L1.3792|
000718  e5810034          STR      r0,[r1,#0x34]         ;1024
00071c  ebfffffe          BL       RTC_Check
000720  ea00004f          B        |L1.2148|
                  |L1.1828|
000724  e1a00000          MOV      r0,r0                 ;1029
000728  e3a00001          MOV      r0,#1                 ;1030
00072c  ebfffffe          BL       RTC_WriteEnable
000730  e59f0798          LDR      r0,|L1.3792|
000734  e5900034          LDR      r0,[r0,#0x34]         ;1031
000738  e3c00004          BIC      r0,r0,#4              ;1031
00073c  e59f178c          LDR      r1,|L1.3792|
000740  e5810034          STR      r0,[r1,#0x34]         ;1031
000744  ebfffffe          BL       RTC_Check
000748  ea000045          B        |L1.2148|
                  |L1.1868|
00074c  e1a00000          MOV      r0,r0                 ;1036
000750  e3a03000          MOV      r3,#0                 ;1038
000754  e3a02008          MOV      r2,#8                 ;1038
000758  e3a01004          MOV      r1,#4                 ;1038
00075c  e1a00003          MOV      r0,r3                 ;1038
000760  ebfffffe          BL       RTC_Ioctl
000764  e3550000          CMP      r5,#0                 ;1040
000768  0a000002          BEQ      |L1.1912|
00076c  e59f0778          LDR      r0,|L1.3820|
000770  e5805000          STR      r5,[r0,#0]            ;1041  ; g_pfnRTCCallBack_PSWI
000774  ea000002          B        |L1.1924|
                  |L1.1912|
000778  e3a00000          MOV      r0,#0                 ;1043
00077c  e59f1768          LDR      r1,|L1.3820|
000780  e5810000          STR      r0,[r1,#0]            ;1043  ; g_pfnRTCCallBack_PSWI
                  |L1.1924|
000784  ea000036          B        |L1.2148|
                  |L1.1928|
000788  e1a00000          MOV      r0,r0                 ;1047
00078c  e3a00001          MOV      r0,#1                 ;1048
000790  ebfffffe          BL       RTC_WriteEnable
000794  e59f0734          LDR      r0,|L1.3792|
000798  e5900034          LDR      r0,[r0,#0x34]         ;1049
00079c  e3100080          TST      r0,#0x80              ;1049
0007a0  0a000002          BEQ      |L1.1968|
0007a4  e3a00001          MOV      r0,#1                 ;1050
0007a8  e5850000          STR      r0,[r5,#0]            ;1050
0007ac  ea000001          B        |L1.1976|
                  |L1.1968|
0007b0  e3a00000          MOV      r0,#0                 ;1052
0007b4  e5850000          STR      r0,[r5,#0]            ;1052
                  |L1.1976|
0007b8  ea000029          B        |L1.2148|
                  |L1.1980|
0007bc  e1a00000          MOV      r0,r0                 ;1056
0007c0  e3a00001          MOV      r0,#1                 ;1057
0007c4  e59f171c          LDR      r1,|L1.3816|
0007c8  e5c10000          STRB     r0,[r1,#0]            ;1057  ; g_bIsEnableAlarmInt
0007cc  ebfffffe          BL       RTC_WriteEnable
0007d0  e59f06f8          LDR      r0,|L1.3792|
0007d4  e5900034          LDR      r0,[r0,#0x34]         ;1060
0007d8  e59f1710          LDR      r1,|L1.3824|
0007dc  e0000001          AND      r0,r0,r1              ;1060
0007e0  e59f16e8          LDR      r1,|L1.3792|
0007e4  e5810034          STR      r0,[r1,#0x34]         ;1060
0007e8  ebfffffe          BL       RTC_Check
0007ec  e3a00001          MOV      r0,#1                 ;1063
0007f0  ebfffffe          BL       RTC_WriteEnable
0007f4  e59f06d4          LDR      r0,|L1.3792|
0007f8  e5900034          LDR      r0,[r0,#0x34]         ;1064
0007fc  e3c0040f          BIC      r0,r0,#0xf000000      ;1064
000800  e3c008ff          BIC      r0,r0,#0xff0000       ;1064
000804  e3c51a0f          BIC      r1,r5,#0xf000         ;1064
000808  e1800801          ORR      r0,r0,r1,LSL #16      ;1064
00080c  e3804010          ORR      r4,r0,#0x10           ;1064
000810  e59f06b8          LDR      r0,|L1.3792|
000814  e5804034          STR      r4,[r0,#0x34]         ;1066
000818  ebfffffe          BL       RTC_Check
00081c  e3a00001          MOV      r0,#1                 ;1069
000820  e59f16c0          LDR      r1,|L1.3816|
000824  e5c10000          STRB     r0,[r1,#0]            ;1069  ; g_bIsEnableAlarmInt
000828  ebfffffe          BL       RTC_WriteEnable
00082c  e59f069c          LDR      r0,|L1.3792|
000830  e5900028          LDR      r0,[r0,#0x28]         ;1072
000834  e3804010          ORR      r4,r0,#0x10           ;1072
000838  e59f0690          LDR      r0,|L1.3792|
00083c  e5804028          STR      r4,[r0,#0x28]         ;1074
000840  ebfffffe          BL       RTC_Check
000844  e3580000          CMP      r8,#0                 ;1077
000848  0a000001          BEQ      |L1.2132|
00084c  e59f06a0          LDR      r0,|L1.3828|
000850  e5808000          STR      r8,[r0,#0]            ;1078  ; g_pfnRTCCallBack_Relative_Alarm
                  |L1.2132|
000854  ea000002          B        |L1.2148|
                  |L1.2136|
000858  e1a00000          MOV      r0,r0                 ;1084
00085c  e3a00007          MOV      r0,#7                 ;1085
000860  eafffe59          B        |L1.460|
                  |L1.2148|
000864  e1a00000          MOV      r0,r0                 ;797
000868  e3a00000          MOV      r0,#0                 ;1089
00086c  eafffe56          B        |L1.460|
;;;1091   
                          ENDP

                  RTC_ISR PROC
;;;62     
;;;63     static void RTC_ISR (void)
000870  e92d4008          PUSH     {r3,lr}
;;;64     {
;;;65         UINT32 volatile u32RegINTSTS;
;;;66     
;;;67         u32RegINTSTS = inp32(REG_RTC_INTSTS);
000874  e59f0654          LDR      r0,|L1.3792|
000878  e590002c          LDR      r0,[r0,#0x2c]
00087c  e58d0000          STR      r0,[sp,#0]
;;;68     
;;;69         if (u32RegINTSTS & RTC_TICK_INT) {                                   /* tick interrupt occurred */
000880  e59d0000          LDR      r0,[sp,#0]
000884  e3100002          TST      r0,#2
000888  0a000011          BEQ      |L1.2260|
;;;70             RTC_WriteEnable(1);
00088c  e3a00001          MOV      r0,#1
000890  ebfffffe          BL       RTC_WriteEnable
;;;71             outp32(REG_RTC_INTSTS, RTC_TICK_INT);
000894  e3a00002          MOV      r0,#2
000898  e59f1630          LDR      r1,|L1.3792|
00089c  e581002c          STR      r0,[r1,#0x2c]
;;;72             RTC_Check();
0008a0  ebfffffe          BL       RTC_Check
;;;73     
;;;74             g_u32RTC_Count++;                                              /* maintain RTC tick count */
0008a4  e59f0634          LDR      r0,|L1.3808|
0008a8  e5900000          LDR      r0,[r0,#0]  ; g_u32RTC_Count
0008ac  e2800001          ADD      r0,r0,#1
0008b0  e59f1628          LDR      r1,|L1.3808|
0008b4  e5810000          STR      r0,[r1,#0]  ; g_u32RTC_Count
;;;75     
;;;76             if (g_pfnRTCCallBack_Tick != NULL) {                           /* execute tick callback function */
0008b8  e59f0624          LDR      r0,|L1.3812|
0008bc  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Tick
0008c0  e3500000          CMP      r0,#0
0008c4  0a000002          BEQ      |L1.2260|
;;;77                 g_pfnRTCCallBack_Tick();
0008c8  e59f0614          LDR      r0,|L1.3812|
0008cc  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Tick
0008d0  e12fff30          BLX      r0
                  |L1.2260|
;;;78             }
;;;79     
;;;80         }
;;;81         if (u32RegINTSTS & RTC_ALARM_INT) {                                  /* absolute alarm interrupt occurred */
0008d4  e59d0000          LDR      r0,[sp,#0]
0008d8  e3100001          TST      r0,#1
0008dc  0a00000c          BEQ      |L1.2324|
;;;82             RTC_WriteEnable(1);
0008e0  e3a00001          MOV      r0,#1
0008e4  ebfffffe          BL       RTC_WriteEnable
;;;83             outp32(REG_RTC_INTSTS, RTC_ALARM_INT);
0008e8  e3a00001          MOV      r0,#1
0008ec  e59f15dc          LDR      r1,|L1.3792|
0008f0  e581002c          STR      r0,[r1,#0x2c]
;;;84             RTC_Check();
0008f4  ebfffffe          BL       RTC_Check
;;;85     
;;;86             if (g_pfnRTCCallBack_Alarm != NULL) {                           /* execute absolute alarm callback function */
0008f8  e59f05f8          LDR      r0,|L1.3832|
0008fc  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Alarm
000900  e3500000          CMP      r0,#0
000904  0a000002          BEQ      |L1.2324|
;;;87                 g_pfnRTCCallBack_Alarm();
000908  e59f05e8          LDR      r0,|L1.3832|
00090c  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Alarm
000910  e12fff30          BLX      r0
                  |L1.2324|
;;;88             }
;;;89         }
;;;90         if (u32RegINTSTS & RTC_RELATIVE_ALARM_INT) {                          /* relative alarm interrupt occurred */
000914  e59d0000          LDR      r0,[sp,#0]
000918  e3100010          TST      r0,#0x10
00091c  0a000014          BEQ      |L1.2420|
;;;91             RTC_WriteEnable(1);
000920  e3a00001          MOV      r0,#1
000924  ebfffffe          BL       RTC_WriteEnable
;;;92             outp32(REG_RTC_INTSTS, RTC_RELATIVE_ALARM_INT);
000928  e3a00010          MOV      r0,#0x10
00092c  e59f159c          LDR      r1,|L1.3792|
000930  e581002c          STR      r0,[r1,#0x2c]
;;;93             RTC_Check();
000934  ebfffffe          BL       RTC_Check
;;;94     
;;;95             RTC_Ioctl(0,RTC_IOC_DISABLE_INT,RTC_RELATIVE_ALARM_INT,0);
000938  e3a03000          MOV      r3,#0
00093c  e3a02010          MOV      r2,#0x10
000940  e3a01005          MOV      r1,#5
000944  e1a00003          MOV      r0,r3
000948  ebfffffe          BL       RTC_Ioctl
;;;96     
;;;97             if (g_pfnRTCCallBack_Relative_Alarm != NULL) {                  /* execute relative alarm callback function */
00094c  e59f05a0          LDR      r0,|L1.3828|
000950  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Relative_Alarm
000954  e3500000          CMP      r0,#0
000958  0a000005          BEQ      |L1.2420|
;;;98                 g_pfnRTCCallBack_Relative_Alarm();
00095c  e59f0590          LDR      r0,|L1.3828|
000960  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_Relative_Alarm
000964  e12fff30          BLX      r0
;;;99                 g_pfnRTCCallBack_Relative_Alarm = NULL;
000968  e3a00000          MOV      r0,#0
00096c  e59f1580          LDR      r1,|L1.3828|
000970  e5810000          STR      r0,[r1,#0]  ; g_pfnRTCCallBack_Relative_Alarm
                  |L1.2420|
;;;100            }
;;;101    
;;;102        }
;;;103        if (u32RegINTSTS & RTC_PSWI_INT) {                                      /* power key interrupt occurred */
000974  e59d0000          LDR      r0,[sp,#0]
000978  e3100008          TST      r0,#8
00097c  0a00000c          BEQ      |L1.2484|
;;;104            RTC_WriteEnable(1);
000980  e3a00001          MOV      r0,#1
000984  ebfffffe          BL       RTC_WriteEnable
;;;105            outp32(REG_RTC_INTSTS, RTC_PSWI_INT);
000988  e3a00008          MOV      r0,#8
00098c  e59f153c          LDR      r1,|L1.3792|
000990  e581002c          STR      r0,[r1,#0x2c]
;;;106            RTC_Check();
000994  ebfffffe          BL       RTC_Check
;;;107    
;;;108            //RTC_Ioctl(0,RTC_IOC_DISABLE_INT,RTC_PSWI_INT,0);
;;;109    
;;;110            if (g_pfnRTCCallBack_PSWI != NULL) {                            /* execute power key callback function */
000998  e59f054c          LDR      r0,|L1.3820|
00099c  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_PSWI
0009a0  e3500000          CMP      r0,#0
0009a4  0a000002          BEQ      |L1.2484|
;;;111                g_pfnRTCCallBack_PSWI();
0009a8  e59f053c          LDR      r0,|L1.3820|
0009ac  e5900000          LDR      r0,[r0,#0]  ; g_pfnRTCCallBack_PSWI
0009b0  e12fff30          BLX      r0
                  |L1.2484|
;;;112            }
;;;113        }
;;;114    
;;;115    }
0009b4  e8bd8008          POP      {r3,pc}
;;;116    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  RTC_Init PROC
;;;204      */
;;;205    UINT32 RTC_Init (void)
0009b8  e92d4010          PUSH     {r4,lr}
;;;206    {
;;;207        INT32 i32i;
;;;208    
;;;209        /*-----------------------------------------------------------------------------------------------------*/
;;;210        /* Initial time data struct and some parameters.                                                       */
;;;211        /*-----------------------------------------------------------------------------------------------------*/
;;;212        g_pfnRTCCallBack_Alarm = NULL;
0009bc  e3a00000          MOV      r0,#0
0009c0  e59f1530          LDR      r1,|L1.3832|
0009c4  e5810000          STR      r0,[r1,#0]  ; g_pfnRTCCallBack_Alarm
;;;213        g_pfnRTCCallBack_Tick = NULL;
0009c8  e59f1514          LDR      r1,|L1.3812|
0009cc  e5810000          STR      r0,[r1,#0]  ; g_pfnRTCCallBack_Tick
;;;214        g_pfnRTCCallBack_PSWI = NULL;
0009d0  e59f1514          LDR      r1,|L1.3820|
0009d4  e5810000          STR      r0,[r1,#0]  ; g_pfnRTCCallBack_PSWI
;;;215        g_pfnRTCCallBack_Relative_Alarm = NULL;
0009d8  e59f1514          LDR      r1,|L1.3828|
0009dc  e5810000          STR      r0,[r1,#0]  ; g_pfnRTCCallBack_Relative_Alarm
;;;216        g_u32RTC_Count = 0;
0009e0  e59f14f8          LDR      r1,|L1.3808|
0009e4  e5810000          STR      r0,[r1,#0]  ; g_u32RTC_Count
;;;217        /*-----------------------------------------------------------------------------------------------------*/
;;;218        /* When RTC is power on, write 0xa5eb1357 to RTC_INIR to reset all logic.                              */
;;;219        /*-----------------------------------------------------------------------------------------------------*/
;;;220    
;;;221        outp32(REG_RTC_INIT, RTC_INIT_KEY);
0009e8  e59f050c          LDR      r0,|L1.3836|
0009ec  e59f14dc          LDR      r1,|L1.3792|
0009f0  e5810000          STR      r0,[r1,#0]
;;;222        RTC_Check();
0009f4  ebfffffe          BL       RTC_Check
;;;223    
;;;224        for (i32i = 0 ; i32i < RTC_WAIT_COUNT ; i32i++) {
0009f8  e3a04000          MOV      r4,#0
0009fc  ea000005          B        |L1.2584|
                  |L1.2560|
;;;225            if ( inp32(REG_RTC_INIT) & 0x01 ) {
000a00  e59f04c8          LDR      r0,|L1.3792|
000a04  e5900000          LDR      r0,[r0,#0]
000a08  e3100001          TST      r0,#1
000a0c  0a000000          BEQ      |L1.2580|
;;;226                /* Check RTC_INIR[0] to find out RTC reset signal */
;;;227                break;
000a10  ea000002          B        |L1.2592|
                  |L1.2580|
000a14  e2844001          ADD      r4,r4,#1              ;224
                  |L1.2584|
000a18  e3740001          CMN      r4,#1                 ;224
000a1c  1afffff7          BNE      |L1.2560|
                  |L1.2592|
000a20  e1a00000          MOV      r0,r0
;;;228            }
;;;229        }
;;;230    
;;;231        if (i32i == RTC_WAIT_COUNT) {
000a24  e3740001          CMN      r4,#1
000a28  1a000001          BNE      |L1.2612|
;;;232            return E_RTC_ERR_EIO;
000a2c  e3a00006          MOV      r0,#6
                  |L1.2608|
;;;233        }
;;;234    
;;;235        /*-----------------------------------------------------------------------------------------------------*/
;;;236        /* Install RTC ISR                                                                                     */
;;;237        /*-----------------------------------------------------------------------------------------------------*/
;;;238    
;;;239        outp32(REG_RTC_RWEN, RTC_WRITE_KEY);
;;;240        RTC_Check();
;;;241    
;;;242        for (i32i = 0 ; i32i < RTC_WAIT_COUNT ; i32i++) {
;;;243            /*-------------------------------------------------------------------------------------------------*/
;;;244            /* check RTC_RWEN[16] to find out RTC write enable                                                  */
;;;245            /*-------------------------------------------------------------------------------------------------*/
;;;246            if ( inp32(REG_RTC_RWEN) & 0x10000) {
;;;247                break;
;;;248            }
;;;249        }
;;;250    
;;;251        if (i32i == RTC_WAIT_COUNT) {
;;;252            return E_RTC_ERR_EIO;
;;;253        }
;;;254    
;;;255        sysInstallISR(IRQ_LEVEL_1, RTC_IRQn, (PVOID)RTC_ISR);
;;;256        sysSetLocalInterrupt(ENABLE_IRQ);
;;;257        sysEnableInterrupt(RTC_IRQn);
;;;258    
;;;259        return E_RTC_SUCCESS;
;;;260    }
000a30  e8bd8010          POP      {r4,pc}
                  |L1.2612|
000a34  e59f049c          LDR      r0,|L1.3800|
000a38  e59f1490          LDR      r1,|L1.3792|
000a3c  e5810004          STR      r0,[r1,#4]            ;239
000a40  ebfffffe          BL       RTC_Check
000a44  e3a04000          MOV      r4,#0                 ;242
000a48  ea000005          B        |L1.2660|
                  |L1.2636|
000a4c  e59f047c          LDR      r0,|L1.3792|
000a50  e5900004          LDR      r0,[r0,#4]            ;246
000a54  e3100801          TST      r0,#0x10000           ;246
000a58  0a000000          BEQ      |L1.2656|
000a5c  ea000002          B        |L1.2668|
                  |L1.2656|
000a60  e2844001          ADD      r4,r4,#1              ;242
                  |L1.2660|
000a64  e3740001          CMN      r4,#1                 ;242
000a68  1afffff7          BNE      |L1.2636|
                  |L1.2668|
000a6c  e1a00000          MOV      r0,r0                 ;247
000a70  e3740001          CMN      r4,#1                 ;251
000a74  1a000001          BNE      |L1.2688|
000a78  e3a00006          MOV      r0,#6                 ;252
000a7c  eaffffeb          B        |L1.2608|
                  |L1.2688|
000a80  e59f2478          LDR      r2,|L1.3840|
000a84  e3a0100f          MOV      r1,#0xf               ;255
000a88  e3a00001          MOV      r0,#1                 ;255
000a8c  ebfffffe          BL       sysInstallISR
000a90  e3a0007f          MOV      r0,#0x7f              ;256
000a94  ebfffffe          BL       sysSetLocalInterrupt
000a98  e3a0000f          MOV      r0,#0xf               ;257
000a9c  ebfffffe          BL       sysEnableInterrupt
000aa0  e3a00000          MOV      r0,#0                 ;259
000aa4  eaffffe1          B        |L1.2608|
;;;261    
                          ENDP

                  RTC_Open PROC
;;;285      */
;;;286    UINT32 RTC_Open (RTC_TIME_DATA_T *sPt)
000aa8  e92d4038          PUSH     {r3-r5,lr}
;;;287    {
000aac  e1a04000          MOV      r4,r0
;;;288        UINT32 volatile u32Reg;
;;;289    
;;;290        /*-----------------------------------------------------------------------------------------------------*/
;;;291        /* DO BASIC JUDGEMENT TO Check RTC time data value is reasonable or not.                               */
;;;292        /*-----------------------------------------------------------------------------------------------------*/
;;;293        if ( ((sPt->u32Year - RTC_YEAR2000) > 99)|
000ab0  e5940018          LDR      r0,[r4,#0x18]
000ab4  e3500000          CMP      r0,#0
000ab8  0a000002          BEQ      |L1.2760|
;;;294                ((sPt->u32cMonth == 0) || (sPt->u32cMonth > 12))|
000abc  e5940018          LDR      r0,[r4,#0x18]
000ac0  e350000c          CMP      r0,#0xc
000ac4  9a000001          BLS      |L1.2768|
                  |L1.2760|
000ac8  e3a00001          MOV      r0,#1
000acc  ea000000          B        |L1.2772|
                  |L1.2768|
000ad0  e3a00000          MOV      r0,#0
                  |L1.2772|
000ad4  e594101c          LDR      r1,[r4,#0x1c]
000ad8  e2411e7d          SUB      r1,r1,#0x7d0
000adc  e3510063          CMP      r1,#0x63
000ae0  9a000001          BLS      |L1.2796|
000ae4  e3a01001          MOV      r1,#1
000ae8  ea000000          B        |L1.2800|
                  |L1.2796|
000aec  e3a01000          MOV      r1,#0
                  |L1.2800|
000af0  e1800001          ORR      r0,r0,r1
000af4  e5941014          LDR      r1,[r4,#0x14]
000af8  e3510000          CMP      r1,#0
000afc  0a000002          BEQ      |L1.2828|
;;;295                ((sPt->u32cDay   == 0) || (sPt->u32cDay   > 31))) {
000b00  e5941014          LDR      r1,[r4,#0x14]
000b04  e351001f          CMP      r1,#0x1f
000b08  9a000001          BLS      |L1.2836|
                  |L1.2828|
000b0c  e3a01001          MOV      r1,#1
000b10  ea000000          B        |L1.2840|
                  |L1.2836|
000b14  e3a01000          MOV      r1,#0
                  |L1.2840|
000b18  e1900001          ORRS     r0,r0,r1
000b1c  0a000001          BEQ      |L1.2856|
;;;296            return E_RTC_ERR_CALENDAR_VALUE;
000b20  e3a00001          MOV      r0,#1
                  |L1.2852|
;;;297        }
;;;298    
;;;299        if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;300            if ( (sPt->u32cHour == 0) || (sPt->u32cHour > 12) ) {
;;;301                return E_RTC_ERR_TIMESACLE_VALUE ;
;;;302            }
;;;303        } else if (sPt->u8cClockDisplay == RTC_CLOCK_24) {
;;;304            if (sPt->u32cHour > 23) {
;;;305                return E_RTC_ERR_TIMESACLE_VALUE ;
;;;306            }
;;;307        } else {
;;;308            return E_RTC_ERR_TIMESACLE_VALUE ;
;;;309        }
;;;310    
;;;311        if ((sPt->u32cMinute > 59) |
;;;312                (sPt->u32cSecond > 59) |
;;;313                (sPt->u32cSecond > 59)) {
;;;314            return E_RTC_ERR_TIME_VALUE ;
;;;315        }
;;;316        if (sPt->u32cDayOfWeek > 6) {
;;;317            return E_RTC_ERR_DWR_VALUE ;
;;;318        }
;;;319    
;;;320        /*-----------------------------------------------------------------------------------------------------*/
;;;321        /* Second, set RTC time data.                                                                          */
;;;322        /*-----------------------------------------------------------------------------------------------------*/
;;;323        if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;324            g_chHourMode = RTC_CLOCK_12;
;;;325    
;;;326            RTC_WriteEnable(1);
;;;327            outp32(REG_RTC_TIMEFMT, RTC_CLOCK_12);
;;;328            RTC_Check();
;;;329    
;;;330            /*-------------------------------------------------------------------------------------------------*/
;;;331            /* important, range of 12-hour PM mode is 21 upto 32                                               */
;;;332            /*-------------------------------------------------------------------------------------------------*/
;;;333            if (sPt->u8cAmPm == RTC_PM)
;;;334                sPt->u32cHour += 20;
;;;335        } else {                                                                           /* RTC_CLOCK_24 */
;;;336            g_chHourMode = RTC_CLOCK_24;
;;;337    
;;;338            RTC_WriteEnable(1);
;;;339            outp32(REG_RTC_TIMEFMT, RTC_CLOCK_24);
;;;340            RTC_Check();
;;;341        }
;;;342    
;;;343    
;;;344        g_u32hiHour  = sPt->u32cHour / 10;
;;;345        g_u32loHour  = sPt->u32cHour % 10;
;;;346        g_u32hiMin   = sPt->u32cMinute / 10;
;;;347        g_u32loMin   = sPt->u32cMinute % 10;
;;;348        g_u32hiSec   = sPt->u32cSecond / 10;
;;;349        g_u32loSec   = sPt->u32cSecond % 10;
;;;350        u32Reg     = (g_u32hiHour << 20);
;;;351        u32Reg    |= (g_u32loHour << 16);
;;;352        u32Reg    |= (g_u32hiMin << 12);
;;;353        u32Reg    |= (g_u32loMin << 8);
;;;354        u32Reg    |= (g_u32hiSec << 4);
;;;355        u32Reg    |= g_u32loSec;
;;;356        g_u32Reg = u32Reg;
;;;357    
;;;358        RTC_WriteEnable(1);
;;;359        outp32(REG_RTC_TIME, (UINT32)g_u32Reg);
;;;360        RTC_Check();
;;;361    
;;;362        if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;363            if (sPt->u8cAmPm == RTC_PM)
;;;364                sPt->u32cHour -= 20;
;;;365        }
;;;366    
;;;367        g_u32hiYear  = (sPt->u32Year - RTC_YEAR2000) / 10;
;;;368        g_u32loYear  = (sPt->u32Year - RTC_YEAR2000) % 10;
;;;369        g_u32hiMonth =  sPt->u32cMonth              / 10;
;;;370        g_u32loMonth =  sPt->u32cMonth              % 10;
;;;371        g_u32hiDay   =  sPt->u32cDay                / 10;
;;;372        g_u32loDay   =  sPt->u32cDay                % 10;
;;;373        u32Reg    = (g_u32hiYear << 20);
;;;374        u32Reg    |= (g_u32loYear << 16);
;;;375        u32Reg    |= (g_u32hiMonth << 12);
;;;376        u32Reg    |= (g_u32loMonth << 8);
;;;377        u32Reg    |= (g_u32hiDay << 4);
;;;378        u32Reg    |= g_u32loDay;
;;;379        g_u32Reg = u32Reg;
;;;380    
;;;381        RTC_WriteEnable(1);
;;;382        outp32 (REG_RTC_CAL, (UINT32)g_u32Reg);
;;;383        RTC_Check();
;;;384    
;;;385        RTC_WriteEnable(1);
;;;386        outp32(REG_RTC_WEEKDAY, (UINT32)sPt->u32cDayOfWeek);
;;;387        RTC_Check();
;;;388    
;;;389        return E_RTC_SUCCESS;
;;;390    }
000b24  e8bd8038          POP      {r3-r5,pc}
                  |L1.2856|
000b28  e5d40000          LDRB     r0,[r4,#0]            ;299
000b2c  e3500000          CMP      r0,#0                 ;299
000b30  1a000007          BNE      |L1.2900|
000b34  e594000c          LDR      r0,[r4,#0xc]          ;300
000b38  e3500000          CMP      r0,#0                 ;300
000b3c  0a000002          BEQ      |L1.2892|
000b40  e594000c          LDR      r0,[r4,#0xc]          ;300
000b44  e350000c          CMP      r0,#0xc               ;300
000b48  9a00000b          BLS      |L1.2940|
                  |L1.2892|
000b4c  e3a00002          MOV      r0,#2                 ;301
000b50  eafffff3          B        |L1.2852|
                  |L1.2900|
000b54  e5d40000          LDRB     r0,[r4,#0]            ;303
000b58  e3500001          CMP      r0,#1                 ;303
000b5c  1a000004          BNE      |L1.2932|
000b60  e594000c          LDR      r0,[r4,#0xc]          ;304
000b64  e3500017          CMP      r0,#0x17              ;304
000b68  9a000003          BLS      |L1.2940|
000b6c  e3a00002          MOV      r0,#2                 ;305
000b70  eaffffeb          B        |L1.2852|
                  |L1.2932|
000b74  e3a00002          MOV      r0,#2                 ;308
000b78  eaffffe9          B        |L1.2852|
                  |L1.2940|
000b7c  e5940008          LDR      r0,[r4,#8]            ;311
000b80  e350003b          CMP      r0,#0x3b              ;311
000b84  9a000001          BLS      |L1.2960|
000b88  e3a00001          MOV      r0,#1                 ;311
000b8c  ea000000          B        |L1.2964|
                  |L1.2960|
000b90  e3a00000          MOV      r0,#0                 ;311
                  |L1.2964|
000b94  e5941004          LDR      r1,[r4,#4]            ;311
000b98  e351003b          CMP      r1,#0x3b              ;311
000b9c  9a000001          BLS      |L1.2984|
000ba0  e3a01001          MOV      r1,#1                 ;311
000ba4  ea000000          B        |L1.2988|
                  |L1.2984|
000ba8  e3a01000          MOV      r1,#0                 ;311
                  |L1.2988|
000bac  e1800001          ORR      r0,r0,r1              ;311
000bb0  e5941004          LDR      r1,[r4,#4]            ;311
000bb4  e351003b          CMP      r1,#0x3b              ;311
000bb8  9a000001          BLS      |L1.3012|
000bbc  e3a01001          MOV      r1,#1                 ;311
000bc0  ea000000          B        |L1.3016|
                  |L1.3012|
000bc4  e3a01000          MOV      r1,#0                 ;311
                  |L1.3016|
000bc8  e1900001          ORRS     r0,r0,r1              ;311
000bcc  0a000001          BEQ      |L1.3032|
000bd0  e3a00003          MOV      r0,#3                 ;314
000bd4  eaffffd2          B        |L1.2852|
                  |L1.3032|
000bd8  e5940010          LDR      r0,[r4,#0x10]         ;316
000bdc  e3500006          CMP      r0,#6                 ;316
000be0  9a000001          BLS      |L1.3052|
000be4  e3a00004          MOV      r0,#4                 ;317
000be8  eaffffcd          B        |L1.2852|
                  |L1.3052|
000bec  e5d40000          LDRB     r0,[r4,#0]            ;323
000bf0  e3500000          CMP      r0,#0                 ;323
000bf4  1a00000f          BNE      |L1.3128|
000bf8  e3a00000          MOV      r0,#0                 ;324
000bfc  e59f1300          LDR      r1,|L1.3844|
000c00  e5c10000          STRB     r0,[r1,#0]            ;324  ; g_chHourMode
000c04  e3a00001          MOV      r0,#1                 ;326
000c08  ebfffffe          BL       RTC_WriteEnable
000c0c  e3a00000          MOV      r0,#0                 ;327
000c10  e59f12b8          LDR      r1,|L1.3792|
000c14  e5810014          STR      r0,[r1,#0x14]         ;327
000c18  ebfffffe          BL       RTC_Check
000c1c  e5d40001          LDRB     r0,[r4,#1]            ;333
000c20  e3500002          CMP      r0,#2                 ;333
000c24  1a00000b          BNE      |L1.3160|
000c28  e594000c          LDR      r0,[r4,#0xc]          ;334
000c2c  e2800014          ADD      r0,r0,#0x14           ;334
000c30  e584000c          STR      r0,[r4,#0xc]          ;334
000c34  ea000007          B        |L1.3160|
                  |L1.3128|
000c38  e3a00001          MOV      r0,#1                 ;336
000c3c  e59f12c0          LDR      r1,|L1.3844|
000c40  e5c10000          STRB     r0,[r1,#0]            ;336  ; g_chHourMode
000c44  ebfffffe          BL       RTC_WriteEnable
000c48  e3a00001          MOV      r0,#1                 ;339
000c4c  e59f127c          LDR      r1,|L1.3792|
000c50  e5810014          STR      r0,[r1,#0x14]         ;339
000c54  ebfffffe          BL       RTC_Check
                  |L1.3160|
000c58  e3a0100a          MOV      r1,#0xa               ;344
000c5c  e594000c          LDR      r0,[r4,#0xc]          ;344
000c60  ebfffffe          BL       __aeabi_uidivmod
000c64  e59f129c          LDR      r1,|L1.3848|
000c68  e5810000          STR      r0,[r1,#0]            ;344  ; g_u32hiHour
000c6c  e3a0100a          MOV      r1,#0xa               ;345
000c70  e594000c          LDR      r0,[r4,#0xc]          ;345
000c74  ebfffffe          BL       __aeabi_uidivmod
000c78  e59f028c          LDR      r0,|L1.3852|
000c7c  e5801000          STR      r1,[r0,#0]            ;345  ; g_u32loHour
000c80  e3a0100a          MOV      r1,#0xa               ;346
000c84  e5940008          LDR      r0,[r4,#8]            ;346
000c88  ebfffffe          BL       __aeabi_uidivmod
000c8c  e59f127c          LDR      r1,|L1.3856|
000c90  e5810000          STR      r0,[r1,#0]            ;346  ; g_u32hiMin
000c94  e3a0100a          MOV      r1,#0xa               ;347
000c98  e5940008          LDR      r0,[r4,#8]            ;347
000c9c  ebfffffe          BL       __aeabi_uidivmod
000ca0  e59f026c          LDR      r0,|L1.3860|
000ca4  e5801000          STR      r1,[r0,#0]            ;347  ; g_u32loMin
000ca8  e3a0100a          MOV      r1,#0xa               ;348
000cac  e5940004          LDR      r0,[r4,#4]            ;348
000cb0  ebfffffe          BL       __aeabi_uidivmod
000cb4  e59f125c          LDR      r1,|L1.3864|
000cb8  e5810000          STR      r0,[r1,#0]            ;348  ; g_u32hiSec
000cbc  e3a0100a          MOV      r1,#0xa               ;349
000cc0  e5940004          LDR      r0,[r4,#4]            ;349
000cc4  ebfffffe          BL       __aeabi_uidivmod
000cc8  e59f024c          LDR      r0,|L1.3868|
000ccc  e5801000          STR      r1,[r0,#0]            ;349  ; g_u32loSec
000cd0  e59f0230          LDR      r0,|L1.3848|
000cd4  e5900000          LDR      r0,[r0,#0]            ;350  ; g_u32hiHour
000cd8  e1a00a00          LSL      r0,r0,#20             ;350
000cdc  e58d0000          STR      r0,[sp,#0]            ;350
000ce0  e59f1224          LDR      r1,|L1.3852|
000ce4  e59d0000          LDR      r0,[sp,#0]            ;351
000ce8  e5911000          LDR      r1,[r1,#0]            ;351  ; g_u32loHour
000cec  e1800801          ORR      r0,r0,r1,LSL #16      ;351
000cf0  e58d0000          STR      r0,[sp,#0]            ;351
000cf4  e59f1214          LDR      r1,|L1.3856|
000cf8  e59d0000          LDR      r0,[sp,#0]            ;352
000cfc  e5911000          LDR      r1,[r1,#0]            ;352  ; g_u32hiMin
000d00  e1800601          ORR      r0,r0,r1,LSL #12      ;352
000d04  e58d0000          STR      r0,[sp,#0]            ;352
000d08  e59f1204          LDR      r1,|L1.3860|
000d0c  e59d0000          LDR      r0,[sp,#0]            ;353
000d10  e5911000          LDR      r1,[r1,#0]            ;353  ; g_u32loMin
000d14  e1800401          ORR      r0,r0,r1,LSL #8       ;353
000d18  e58d0000          STR      r0,[sp,#0]            ;353
000d1c  e59f11f4          LDR      r1,|L1.3864|
000d20  e59d0000          LDR      r0,[sp,#0]            ;354
000d24  e5911000          LDR      r1,[r1,#0]            ;354  ; g_u32hiSec
000d28  e1800201          ORR      r0,r0,r1,LSL #4       ;354
000d2c  e58d0000          STR      r0,[sp,#0]            ;354
000d30  e59f11e4          LDR      r1,|L1.3868|
000d34  e59d0000          LDR      r0,[sp,#0]            ;355
000d38  e5911000          LDR      r1,[r1,#0]            ;355  ; g_u32loSec
000d3c  e1800001          ORR      r0,r0,r1              ;355
000d40  e58d0000          STR      r0,[sp,#0]            ;355
000d44  e59f11d4          LDR      r1,|L1.3872|
000d48  e59d0000          LDR      r0,[sp,#0]            ;356
000d4c  e5810000          STR      r0,[r1,#0]            ;356  ; g_u32Reg
000d50  e3a00001          MOV      r0,#1                 ;358
000d54  ebfffffe          BL       RTC_WriteEnable
000d58  e59f01c0          LDR      r0,|L1.3872|
000d5c  e5900000          LDR      r0,[r0,#0]            ;359  ; g_u32Reg
000d60  e59f1168          LDR      r1,|L1.3792|
000d64  e581000c          STR      r0,[r1,#0xc]          ;359
000d68  ebfffffe          BL       RTC_Check
000d6c  e5d40000          LDRB     r0,[r4,#0]            ;362
000d70  e3500000          CMP      r0,#0                 ;362
000d74  1a000005          BNE      |L1.3472|
000d78  e5d40001          LDRB     r0,[r4,#1]            ;363
000d7c  e3500002          CMP      r0,#2                 ;363
000d80  1a000002          BNE      |L1.3472|
000d84  e594000c          LDR      r0,[r4,#0xc]          ;364
000d88  e2400014          SUB      r0,r0,#0x14           ;364
000d8c  e584000c          STR      r0,[r4,#0xc]          ;364
                  |L1.3472|
000d90  e594101c          LDR      r1,[r4,#0x1c]         ;367
000d94  e2410e7d          SUB      r0,r1,#0x7d0          ;367
000d98  e3a0100a          MOV      r1,#0xa               ;367
000d9c  ebfffffe          BL       __aeabi_uidivmod
000da0  e59f117c          LDR      r1,|L1.3876|
000da4  e5810000          STR      r0,[r1,#0]            ;367  ; g_u32hiYear
000da8  e594101c          LDR      r1,[r4,#0x1c]         ;368
000dac  e2410e7d          SUB      r0,r1,#0x7d0          ;368
000db0  e3a0100a          MOV      r1,#0xa               ;368
000db4  ebfffffe          BL       __aeabi_uidivmod
000db8  e59f0168          LDR      r0,|L1.3880|
000dbc  e5801000          STR      r1,[r0,#0]            ;368  ; g_u32loYear
000dc0  e3a0100a          MOV      r1,#0xa               ;369
000dc4  e5940018          LDR      r0,[r4,#0x18]         ;369
000dc8  ebfffffe          BL       __aeabi_uidivmod
000dcc  e59f1158          LDR      r1,|L1.3884|
000dd0  e5810000          STR      r0,[r1,#0]            ;369  ; g_u32hiMonth
000dd4  e3a0100a          MOV      r1,#0xa               ;370
000dd8  e5940018          LDR      r0,[r4,#0x18]         ;370
000ddc  ebfffffe          BL       __aeabi_uidivmod
000de0  e59f0148          LDR      r0,|L1.3888|
000de4  e5801000          STR      r1,[r0,#0]            ;370  ; g_u32loMonth
000de8  e3a0100a          MOV      r1,#0xa               ;371
000dec  e5940014          LDR      r0,[r4,#0x14]         ;371
000df0  ebfffffe          BL       __aeabi_uidivmod
000df4  e59f1138          LDR      r1,|L1.3892|
000df8  e5810000          STR      r0,[r1,#0]            ;371  ; g_u32hiDay
000dfc  e3a0100a          MOV      r1,#0xa               ;372
000e00  e5940014          LDR      r0,[r4,#0x14]         ;372
000e04  ebfffffe          BL       __aeabi_uidivmod
000e08  e59f0128          LDR      r0,|L1.3896|
000e0c  e5801000          STR      r1,[r0,#0]            ;372  ; g_u32loDay
000e10  e59f010c          LDR      r0,|L1.3876|
000e14  e5900000          LDR      r0,[r0,#0]            ;373  ; g_u32hiYear
000e18  e1a00a00          LSL      r0,r0,#20             ;373
000e1c  e58d0000          STR      r0,[sp,#0]            ;373
000e20  e59f1100          LDR      r1,|L1.3880|
000e24  e59d0000          LDR      r0,[sp,#0]            ;374
000e28  e5911000          LDR      r1,[r1,#0]            ;374  ; g_u32loYear
000e2c  e1800801          ORR      r0,r0,r1,LSL #16      ;374
000e30  e58d0000          STR      r0,[sp,#0]            ;374
000e34  e59f10f0          LDR      r1,|L1.3884|
000e38  e59d0000          LDR      r0,[sp,#0]            ;375
000e3c  e5911000          LDR      r1,[r1,#0]            ;375  ; g_u32hiMonth
000e40  e1800601          ORR      r0,r0,r1,LSL #12      ;375
000e44  e58d0000          STR      r0,[sp,#0]            ;375
000e48  e59f10e0          LDR      r1,|L1.3888|
000e4c  e59d0000          LDR      r0,[sp,#0]            ;376
000e50  e5911000          LDR      r1,[r1,#0]            ;376  ; g_u32loMonth
000e54  e1800401          ORR      r0,r0,r1,LSL #8       ;376
000e58  e58d0000          STR      r0,[sp,#0]            ;376
000e5c  e59f10d0          LDR      r1,|L1.3892|
000e60  e59d0000          LDR      r0,[sp,#0]            ;377
000e64  e5911000          LDR      r1,[r1,#0]            ;377  ; g_u32hiDay
000e68  e1800201          ORR      r0,r0,r1,LSL #4       ;377
000e6c  e58d0000          STR      r0,[sp,#0]            ;377
000e70  e59f10c0          LDR      r1,|L1.3896|
000e74  e59d0000          LDR      r0,[sp,#0]            ;378
000e78  e5911000          LDR      r1,[r1,#0]            ;378  ; g_u32loDay
000e7c  e1800001          ORR      r0,r0,r1              ;378
000e80  e58d0000          STR      r0,[sp,#0]            ;378
000e84  e59f1094          LDR      r1,|L1.3872|
000e88  e59d0000          LDR      r0,[sp,#0]            ;379
000e8c  e5810000          STR      r0,[r1,#0]            ;379  ; g_u32Reg
000e90  e3a00001          MOV      r0,#1                 ;381
000e94  ebfffffe          BL       RTC_WriteEnable
000e98  e59f0080          LDR      r0,|L1.3872|
000e9c  e5900000          LDR      r0,[r0,#0]            ;382  ; g_u32Reg
000ea0  e59f1028          LDR      r1,|L1.3792|
000ea4  e5810010          STR      r0,[r1,#0x10]         ;382
000ea8  ebfffffe          BL       RTC_Check
000eac  e3a00001          MOV      r0,#1                 ;385
000eb0  ebfffffe          BL       RTC_WriteEnable
000eb4  e5940010          LDR      r0,[r4,#0x10]         ;386
000eb8  e59f1010          LDR      r1,|L1.3792|
000ebc  e5810018          STR      r0,[r1,#0x18]         ;386
000ec0  ebfffffe          BL       RTC_Check
000ec4  e3a00000          MOV      r0,#0                 ;389
000ec8  eaffff15          B        |L1.2852|
                  |L1.3788|
                          DCD      i
                  |L1.3792|
                          DCD      0xb8004000
                  |L1.3796|
                          DCD      Wait
                  |L1.3800|
                          DCD      0x0000a965
                  |L1.3804|
                          DCD      g_bIsEnableTickInt
                  |L1.3808|
                          DCD      g_u32RTC_Count
                  |L1.3812|
                          DCD      g_pfnRTCCallBack_Tick
                  |L1.3816|
                          DCD      g_bIsEnableAlarmInt
                  |L1.3820|
                          DCD      g_pfnRTCCallBack_PSWI
                  |L1.3824|
                          DCD      0xf000ffef
                  |L1.3828|
                          DCD      g_pfnRTCCallBack_Relative_Alarm
                  |L1.3832|
                          DCD      g_pfnRTCCallBack_Alarm
                  |L1.3836|
                          DCD      0xa5eb1357
                  |L1.3840|
                          DCD      RTC_ISR
                  |L1.3844|
                          DCD      g_chHourMode
                  |L1.3848|
                          DCD      g_u32hiHour
                  |L1.3852|
                          DCD      g_u32loHour
                  |L1.3856|
                          DCD      g_u32hiMin
                  |L1.3860|
                          DCD      g_u32loMin
                  |L1.3864|
                          DCD      g_u32hiSec
                  |L1.3868|
                          DCD      g_u32loSec
                  |L1.3872|
                          DCD      g_u32Reg
                  |L1.3876|
                          DCD      g_u32hiYear
                  |L1.3880|
                          DCD      g_u32loYear
                  |L1.3884|
                          DCD      g_u32hiMonth
                  |L1.3888|
                          DCD      g_u32loMonth
                  |L1.3892|
                          DCD      g_u32hiDay
                  |L1.3896|
                          DCD      g_u32loDay
                          ENDP

                  RTC_Read PROC
;;;416      */
;;;417    UINT32 RTC_Read (E_RTC_TIME_SELECT eTime, RTC_TIME_DATA_T *sPt)
000f3c  e1a03000          MOV      r3,r0
;;;418    {
;;;419        UINT32 u32Tmp;
;;;420    
;;;421        sPt->u8cClockDisplay = inp32(REG_RTC_TIMEFMT);                               /* 12/24-hour */
000f40  e51f0078          LDR      r0,|L1.3792|
000f44  e5900014          LDR      r0,[r0,#0x14]
000f48  e5c10000          STRB     r0,[r1,#0]
;;;422        sPt->u32cDayOfWeek = inp32(REG_RTC_WEEKDAY);                                  /* Day of week */
000f4c  e51f0084          LDR      r0,|L1.3792|
000f50  e5900018          LDR      r0,[r0,#0x18]
000f54  e5810010          STR      r0,[r1,#0x10]
;;;423    
;;;424        switch (eTime) {
000f58  e3530000          CMP      r3,#0
000f5c  0a000002          BEQ      |L1.3948|
000f60  e3530001          CMP      r3,#1
000f64  1a000014          BNE      |L1.4028|
000f68  ea000009          B        |L1.3988|
                  |L1.3948|
;;;425        case RTC_CURRENT_TIME: {
000f6c  e1a00000          MOV      r0,r0
;;;426            g_u32Reg   = inp32(REG_RTC_CAL);
000f70  e51f00a8          LDR      r0,|L1.3792|
000f74  e5900010          LDR      r0,[r0,#0x10]
000f78  e51fc060          LDR      r12,|L1.3872|
000f7c  e58c0000          STR      r0,[r12,#0]  ; g_u32Reg
;;;427            g_u32Reg1  = inp32(REG_RTC_TIME);
000f80  e51f00b8          LDR      r0,|L1.3792|
000f84  e590000c          LDR      r0,[r0,#0xc]
000f88  e59fca54          LDR      r12,|L1.6628|
000f8c  e58c0000          STR      r0,[r12,#0]  ; g_u32Reg1
;;;428            break;
000f90  ea00000c          B        |L1.4040|
                  |L1.3988|
;;;429        }
;;;430        case RTC_ALARM_TIME: {
000f94  e1a00000          MOV      r0,r0
;;;431            g_u32Reg   = inp32(REG_RTC_CALM);
000f98  e51f00d0          LDR      r0,|L1.3792|
000f9c  e5900020          LDR      r0,[r0,#0x20]
000fa0  e51fc088          LDR      r12,|L1.3872|
000fa4  e58c0000          STR      r0,[r12,#0]  ; g_u32Reg
;;;432            g_u32Reg1  = inp32(REG_RTC_TALM);
000fa8  e51f00e0          LDR      r0,|L1.3792|
000fac  e590001c          LDR      r0,[r0,#0x1c]
000fb0  e59fca2c          LDR      r12,|L1.6628|
000fb4  e58c0000          STR      r0,[r12,#0]  ; g_u32Reg1
;;;433            break;
000fb8  ea000002          B        |L1.4040|
                  |L1.4028|
;;;434        }
;;;435        default: {
000fbc  e1a00000          MOV      r0,r0
;;;436            return E_RTC_ERR_ENOTTY;
000fc0  e3a00007          MOV      r0,#7
                  |L1.4036|
;;;437        }
;;;438        }
;;;439    
;;;440        g_u32hiYear  = (g_u32Reg & 0xF00000) >> 20;
;;;441        g_u32loYear  = (g_u32Reg & 0xF0000) >> 16;
;;;442        g_u32hiMonth = (g_u32Reg & 0x1000) >> 12;
;;;443        g_u32loMonth = (g_u32Reg & 0xF00) >> 8;
;;;444        g_u32hiDay   = (g_u32Reg & 0x30) >> 4;
;;;445        g_u32loDay   =  g_u32Reg & 0xF;
;;;446    
;;;447        u32Tmp = (g_u32hiYear * 10);
;;;448        u32Tmp+= g_u32loYear;
;;;449        sPt->u32Year   =   u32Tmp  + RTC_YEAR2000;
;;;450    
;;;451        u32Tmp = (g_u32hiMonth * 10);
;;;452        sPt->u32cMonth = u32Tmp + g_u32loMonth;
;;;453    
;;;454        u32Tmp = (g_u32hiDay * 10);
;;;455        sPt->u32cDay   =  u32Tmp  + g_u32loDay;
;;;456    
;;;457        g_u32hiHour = (g_u32Reg1 & 0x300000) >> 20;
;;;458        g_u32loHour = (g_u32Reg1 & 0xF0000) >> 16;
;;;459        g_u32hiMin  = (g_u32Reg1 & 0x7000) >> 12;
;;;460        g_u32loMin  = (g_u32Reg1 & 0xF00) >> 8;
;;;461        g_u32hiSec  = (g_u32Reg1 & 0x70) >> 4;
;;;462        g_u32loSec  =  g_u32Reg1 & 0xF;
;;;463    
;;;464        if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;465            u32Tmp = (g_u32hiHour * 10);
;;;466            u32Tmp+= g_u32loHour;
;;;467            sPt->u32cHour = u32Tmp;                                /* AM: 1~12. PM: 21~32. */
;;;468    
;;;469            if(eTime ==RTC_CURRENT_TIME) {
;;;470                if (sPt->u32cHour >= 21) {
;;;471                    sPt->u8cAmPm = RTC_PM;
;;;472                    sPt->u32cHour -= 20;
;;;473                } else {
;;;474                    sPt->u8cAmPm = RTC_AM;
;;;475                }
;;;476            } else {
;;;477                if (sPt->u32cHour < 12) {
;;;478                    if(sPt->u32cHour == 0)
;;;479                        sPt->u32cHour = 12;
;;;480                    sPt->u8cAmPm = RTC_AM;
;;;481                } else {
;;;482                    sPt->u32cHour -= 12;
;;;483                    sPt->u8cAmPm = RTC_PM;
;;;484                }
;;;485            }
;;;486    
;;;487            u32Tmp = (g_u32hiMin  * 10);
;;;488            u32Tmp+= g_u32loMin;
;;;489            sPt->u32cMinute = u32Tmp;
;;;490    
;;;491            u32Tmp = (g_u32hiSec  * 10);
;;;492            u32Tmp+= g_u32loSec;
;;;493            sPt->u32cSecond = u32Tmp;
;;;494    
;;;495        } else {
;;;496            /* RTC_CLOCK_24 */
;;;497            u32Tmp = (g_u32hiHour * 10);
;;;498            u32Tmp+= g_u32loHour;
;;;499            sPt->u32cHour   = u32Tmp;
;;;500    
;;;501            u32Tmp = (g_u32hiMin  * 10);
;;;502            u32Tmp+= g_u32loMin;
;;;503            sPt->u32cMinute = u32Tmp;
;;;504    
;;;505            u32Tmp = (g_u32hiSec  * 10);
;;;506            u32Tmp+= g_u32loSec;
;;;507            sPt->u32cSecond = u32Tmp;
;;;508        }
;;;509    
;;;510        return E_RTC_SUCCESS;
;;;511    
;;;512    }
000fc4  e12fff1e          BX       lr
                  |L1.4040|
000fc8  e1a00000          MOV      r0,r0                 ;428
000fcc  e51f00b4          LDR      r0,|L1.3872|
000fd0  e5900000          LDR      r0,[r0,#0]            ;440  ; g_u32Reg
000fd4  e200060f          AND      r0,r0,#0xf00000       ;440
000fd8  e1a00a20          LSR      r0,r0,#20             ;440
000fdc  e51fc0c0          LDR      r12,|L1.3876|
000fe0  e58c0000          STR      r0,[r12,#0]           ;440  ; g_u32hiYear
000fe4  e51f00cc          LDR      r0,|L1.3872|
000fe8  e5900000          LDR      r0,[r0,#0]            ;441  ; g_u32Reg
000fec  e200080f          AND      r0,r0,#0xf0000        ;441
000ff0  e1a00820          LSR      r0,r0,#16             ;441
000ff4  e51fc0d4          LDR      r12,|L1.3880|
000ff8  e58c0000          STR      r0,[r12,#0]           ;441  ; g_u32loYear
000ffc  e51f00e4          LDR      r0,|L1.3872|
001000  e5900000          LDR      r0,[r0,#0]            ;442  ; g_u32Reg
001004  e2000a01          AND      r0,r0,#0x1000         ;442
001008  e1a00620          LSR      r0,r0,#12             ;442
00100c  e51fc0e8          LDR      r12,|L1.3884|
001010  e58c0000          STR      r0,[r12,#0]           ;442  ; g_u32hiMonth
001014  e51f00fc          LDR      r0,|L1.3872|
001018  e5900000          LDR      r0,[r0,#0]            ;443  ; g_u32Reg
00101c  e2000c0f          AND      r0,r0,#0xf00          ;443
001020  e1a00420          LSR      r0,r0,#8              ;443
001024  e51fc0fc          LDR      r12,|L1.3888|
001028  e58c0000          STR      r0,[r12,#0]           ;443  ; g_u32loMonth
00102c  e51f0114          LDR      r0,|L1.3872|
001030  e5900000          LDR      r0,[r0,#0]            ;444  ; g_u32Reg
001034  e2000030          AND      r0,r0,#0x30           ;444
001038  e1a00220          LSR      r0,r0,#4              ;444
00103c  e51fc110          LDR      r12,|L1.3892|
001040  e58c0000          STR      r0,[r12,#0]           ;444  ; g_u32hiDay
001044  e51f012c          LDR      r0,|L1.3872|
001048  e5900000          LDR      r0,[r0,#0]            ;445  ; g_u32Reg
00104c  e200000f          AND      r0,r0,#0xf            ;445
001050  e51fc120          LDR      r12,|L1.3896|
001054  e58c0000          STR      r0,[r12,#0]           ;445  ; g_u32loDay
001058  e51f013c          LDR      r0,|L1.3876|
00105c  e5900000          LDR      r0,[r0,#0]            ;447  ; g_u32hiYear
001060  e0800100          ADD      r0,r0,r0,LSL #2       ;447
001064  e1a02080          LSL      r2,r0,#1              ;447
001068  e51f0148          LDR      r0,|L1.3880|
00106c  e5900000          LDR      r0,[r0,#0]            ;448  ; g_u32loYear
001070  e0822000          ADD      r2,r2,r0              ;448
001074  e2820e7d          ADD      r0,r2,#0x7d0          ;449
001078  e581001c          STR      r0,[r1,#0x1c]         ;449
00107c  e51f0158          LDR      r0,|L1.3884|
001080  e5900000          LDR      r0,[r0,#0]            ;451  ; g_u32hiMonth
001084  e0800100          ADD      r0,r0,r0,LSL #2       ;451
001088  e1a02080          LSL      r2,r0,#1              ;451
00108c  e51f0164          LDR      r0,|L1.3888|
001090  e5900000          LDR      r0,[r0,#0]            ;452  ; g_u32loMonth
001094  e0800002          ADD      r0,r0,r2              ;452
001098  e5810018          STR      r0,[r1,#0x18]         ;452
00109c  e51f0170          LDR      r0,|L1.3892|
0010a0  e5900000          LDR      r0,[r0,#0]            ;454  ; g_u32hiDay
0010a4  e0800100          ADD      r0,r0,r0,LSL #2       ;454
0010a8  e1a02080          LSL      r2,r0,#1              ;454
0010ac  e28c0000          ADD      r0,r12,#0             ;455
0010b0  e5900000          LDR      r0,[r0,#0]            ;455  ; g_u32loDay
0010b4  e0800002          ADD      r0,r0,r2              ;455
0010b8  e5810014          STR      r0,[r1,#0x14]         ;455
0010bc  e59f0920          LDR      r0,|L1.6628|
0010c0  e5900000          LDR      r0,[r0,#0]            ;457  ; g_u32Reg1
0010c4  e2000603          AND      r0,r0,#0x300000       ;457
0010c8  e1a00a20          LSR      r0,r0,#20             ;457
0010cc  e51fc1cc          LDR      r12,|L1.3848|
0010d0  e58c0000          STR      r0,[r12,#0]           ;457  ; g_u32hiHour
0010d4  e59f0908          LDR      r0,|L1.6628|
0010d8  e5900000          LDR      r0,[r0,#0]            ;458  ; g_u32Reg1
0010dc  e200080f          AND      r0,r0,#0xf0000        ;458
0010e0  e1a00820          LSR      r0,r0,#16             ;458
0010e4  e51fc1e0          LDR      r12,|L1.3852|
0010e8  e58c0000          STR      r0,[r12,#0]           ;458  ; g_u32loHour
0010ec  e59f08f0          LDR      r0,|L1.6628|
0010f0  e5900000          LDR      r0,[r0,#0]            ;459  ; g_u32Reg1
0010f4  e2000a07          AND      r0,r0,#0x7000         ;459
0010f8  e1a00620          LSR      r0,r0,#12             ;459
0010fc  e51fc1f4          LDR      r12,|L1.3856|
001100  e58c0000          STR      r0,[r12,#0]           ;459  ; g_u32hiMin
001104  e59f08d8          LDR      r0,|L1.6628|
001108  e5900000          LDR      r0,[r0,#0]            ;460  ; g_u32Reg1
00110c  e2000c0f          AND      r0,r0,#0xf00          ;460
001110  e1a00420          LSR      r0,r0,#8              ;460
001114  e51fc208          LDR      r12,|L1.3860|
001118  e58c0000          STR      r0,[r12,#0]           ;460  ; g_u32loMin
00111c  e59f08c0          LDR      r0,|L1.6628|
001120  e5900000          LDR      r0,[r0,#0]            ;461  ; g_u32Reg1
001124  e2000070          AND      r0,r0,#0x70           ;461
001128  e1a00220          LSR      r0,r0,#4              ;461
00112c  e51fc21c          LDR      r12,|L1.3864|
001130  e58c0000          STR      r0,[r12,#0]           ;461  ; g_u32hiSec
001134  e59f08a8          LDR      r0,|L1.6628|
001138  e5900000          LDR      r0,[r0,#0]            ;462  ; g_u32Reg1
00113c  e200000f          AND      r0,r0,#0xf            ;462
001140  e51fc22c          LDR      r12,|L1.3868|
001144  e58c0000          STR      r0,[r12,#0]           ;462  ; g_u32loSec
001148  e5d10000          LDRB     r0,[r1,#0]            ;464
00114c  e3500000          CMP      r0,#0                 ;464
001150  1a000036          BNE      |L1.4656|
001154  e51f0254          LDR      r0,|L1.3848|
001158  e5900000          LDR      r0,[r0,#0]            ;465  ; g_u32hiHour
00115c  e0800100          ADD      r0,r0,r0,LSL #2       ;465
001160  e1a02080          LSL      r2,r0,#1              ;465
001164  e51f0260          LDR      r0,|L1.3852|
001168  e5900000          LDR      r0,[r0,#0]            ;466  ; g_u32loHour
00116c  e0822000          ADD      r2,r2,r0              ;466
001170  e581200c          STR      r2,[r1,#0xc]          ;467
001174  e3530000          CMP      r3,#0                 ;469
001178  1a00000b          BNE      |L1.4524|
00117c  e591000c          LDR      r0,[r1,#0xc]          ;470
001180  e3500015          CMP      r0,#0x15              ;470
001184  3a000005          BCC      |L1.4512|
001188  e3a00002          MOV      r0,#2                 ;471
00118c  e5c10001          STRB     r0,[r1,#1]            ;471
001190  e591000c          LDR      r0,[r1,#0xc]          ;472
001194  e2400014          SUB      r0,r0,#0x14           ;472
001198  e581000c          STR      r0,[r1,#0xc]          ;472
00119c  ea000012          B        |L1.4588|
                  |L1.4512|
0011a0  e3a00001          MOV      r0,#1                 ;474
0011a4  e5c10001          STRB     r0,[r1,#1]            ;474
0011a8  ea00000f          B        |L1.4588|
                  |L1.4524|
0011ac  e591000c          LDR      r0,[r1,#0xc]          ;477
0011b0  e350000c          CMP      r0,#0xc               ;477
0011b4  2a000007          BCS      |L1.4568|
0011b8  e591000c          LDR      r0,[r1,#0xc]          ;478
0011bc  e3500000          CMP      r0,#0                 ;478
0011c0  1a000001          BNE      |L1.4556|
0011c4  e3a0000c          MOV      r0,#0xc               ;479
0011c8  e581000c          STR      r0,[r1,#0xc]          ;479
                  |L1.4556|
0011cc  e3a00001          MOV      r0,#1                 ;480
0011d0  e5c10001          STRB     r0,[r1,#1]            ;480
0011d4  ea000004          B        |L1.4588|
                  |L1.4568|
0011d8  e591000c          LDR      r0,[r1,#0xc]          ;482
0011dc  e240000c          SUB      r0,r0,#0xc            ;482
0011e0  e581000c          STR      r0,[r1,#0xc]          ;482
0011e4  e3a00002          MOV      r0,#2                 ;483
0011e8  e5c10001          STRB     r0,[r1,#1]            ;483
                  |L1.4588|
0011ec  e51f02e4          LDR      r0,|L1.3856|
0011f0  e5900000          LDR      r0,[r0,#0]            ;487  ; g_u32hiMin
0011f4  e0800100          ADD      r0,r0,r0,LSL #2       ;487
0011f8  e1a02080          LSL      r2,r0,#1              ;487
0011fc  e51f02f0          LDR      r0,|L1.3860|
001200  e5900000          LDR      r0,[r0,#0]            ;488  ; g_u32loMin
001204  e0822000          ADD      r2,r2,r0              ;488
001208  e5812008          STR      r2,[r1,#8]            ;489
00120c  e51f02fc          LDR      r0,|L1.3864|
001210  e5900000          LDR      r0,[r0,#0]            ;491  ; g_u32hiSec
001214  e0800100          ADD      r0,r0,r0,LSL #2       ;491
001218  e1a02080          LSL      r2,r0,#1              ;491
00121c  e51f0308          LDR      r0,|L1.3868|
001220  e5900000          LDR      r0,[r0,#0]            ;492  ; g_u32loSec
001224  e0822000          ADD      r2,r2,r0              ;492
001228  e5812004          STR      r2,[r1,#4]            ;493
00122c  ea000017          B        |L1.4752|
                  |L1.4656|
001230  e51f0330          LDR      r0,|L1.3848|
001234  e5900000          LDR      r0,[r0,#0]            ;497  ; g_u32hiHour
001238  e0800100          ADD      r0,r0,r0,LSL #2       ;497
00123c  e1a02080          LSL      r2,r0,#1              ;497
001240  e51f033c          LDR      r0,|L1.3852|
001244  e5900000          LDR      r0,[r0,#0]            ;498  ; g_u32loHour
001248  e0822000          ADD      r2,r2,r0              ;498
00124c  e581200c          STR      r2,[r1,#0xc]          ;499
001250  e51f0348          LDR      r0,|L1.3856|
001254  e5900000          LDR      r0,[r0,#0]            ;501  ; g_u32hiMin
001258  e0800100          ADD      r0,r0,r0,LSL #2       ;501
00125c  e1a02080          LSL      r2,r0,#1              ;501
001260  e51f0354          LDR      r0,|L1.3860|
001264  e5900000          LDR      r0,[r0,#0]            ;502  ; g_u32loMin
001268  e0822000          ADD      r2,r2,r0              ;502
00126c  e5812008          STR      r2,[r1,#8]            ;503
001270  e51f0360          LDR      r0,|L1.3864|
001274  e5900000          LDR      r0,[r0,#0]            ;505  ; g_u32hiSec
001278  e0800100          ADD      r0,r0,r0,LSL #2       ;505
00127c  e1a02080          LSL      r2,r0,#1              ;505
001280  e51f036c          LDR      r0,|L1.3868|
001284  e5900000          LDR      r0,[r0,#0]            ;506  ; g_u32loSec
001288  e0822000          ADD      r2,r2,r0              ;506
00128c  e5812004          STR      r2,[r1,#4]            ;507
                  |L1.4752|
001290  e3a00000          MOV      r0,#0                 ;510
001294  eaffff4a          B        |L1.4036|
;;;513    
                          ENDP

                  RTC_Write PROC
;;;541      */
;;;542    UINT32 RTC_Write(E_RTC_TIME_SELECT eTime, RTC_TIME_DATA_T *sPt)
001298  e92d4070          PUSH     {r4-r6,lr}
;;;543    {
00129c  e1a06000          MOV      r6,r0
0012a0  e1a04001          MOV      r4,r1
;;;544        UINT32 u32Reg;
;;;545    
;;;546        /*-----------------------------------------------------------------------------------------------------*/
;;;547        /* Check RTC time data value is reasonable or not.                                                     */
;;;548        /*-----------------------------------------------------------------------------------------------------*/
;;;549        if ( ((sPt->u32Year - RTC_YEAR2000) > 99)|
0012a4  e5940018          LDR      r0,[r4,#0x18]
0012a8  e3500000          CMP      r0,#0
0012ac  0a000002          BEQ      |L1.4796|
;;;550                ((sPt->u32cMonth == 0) || (sPt->u32cMonth > 12))|
0012b0  e5940018          LDR      r0,[r4,#0x18]
0012b4  e350000c          CMP      r0,#0xc
0012b8  9a000001          BLS      |L1.4804|
                  |L1.4796|
0012bc  e3a00001          MOV      r0,#1
0012c0  ea000000          B        |L1.4808|
                  |L1.4804|
0012c4  e3a00000          MOV      r0,#0
                  |L1.4808|
0012c8  e594101c          LDR      r1,[r4,#0x1c]
0012cc  e2411e7d          SUB      r1,r1,#0x7d0
0012d0  e3510063          CMP      r1,#0x63
0012d4  9a000001          BLS      |L1.4832|
0012d8  e3a01001          MOV      r1,#1
0012dc  ea000000          B        |L1.4836|
                  |L1.4832|
0012e0  e3a01000          MOV      r1,#0
                  |L1.4836|
0012e4  e1800001          ORR      r0,r0,r1
0012e8  e5941014          LDR      r1,[r4,#0x14]
0012ec  e3510000          CMP      r1,#0
0012f0  0a000002          BEQ      |L1.4864|
;;;551                ((sPt->u32cDay   == 0) || (sPt->u32cDay   > 31))) {
0012f4  e5941014          LDR      r1,[r4,#0x14]
0012f8  e351001f          CMP      r1,#0x1f
0012fc  9a000001          BLS      |L1.4872|
                  |L1.4864|
001300  e3a01001          MOV      r1,#1
001304  ea000000          B        |L1.4876|
                  |L1.4872|
001308  e3a01000          MOV      r1,#0
                  |L1.4876|
00130c  e1900001          ORRS     r0,r0,r1
001310  0a000001          BEQ      |L1.4892|
;;;552            return E_RTC_ERR_CALENDAR_VALUE;
001314  e3a00001          MOV      r0,#1
                  |L1.4888|
;;;553        }
;;;554    
;;;555        if ( (sPt->u32Year - RTC_YEAR2000) > 99 ) {
;;;556            return E_RTC_ERR_CALENDAR_VALUE;
;;;557        }
;;;558    
;;;559        if ( (sPt->u32cMonth == 0) || (sPt->u32cMonth > 12) ) {
;;;560            return E_RTC_ERR_CALENDAR_VALUE;
;;;561        }
;;;562    
;;;563        if ( (sPt->u32cDay == 0) || (sPt->u32cDay > 31) ) {
;;;564            return E_RTC_ERR_CALENDAR_VALUE;
;;;565        }
;;;566    
;;;567        if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;568            if ( (sPt->u32cHour == 0) || (sPt->u32cHour > 12) ) {
;;;569                return E_RTC_ERR_TIME_VALUE;
;;;570            }
;;;571        } else if (sPt->u8cClockDisplay == RTC_CLOCK_24) {
;;;572            if (sPt->u32cHour > 23) {
;;;573                return E_RTC_ERR_TIME_VALUE;
;;;574            }
;;;575        } else {
;;;576            return E_RTC_ERR_TIME_VALUE;
;;;577        }
;;;578    
;;;579        if (sPt->u32cMinute > 59) {
;;;580            return E_RTC_ERR_TIME_VALUE;
;;;581        }
;;;582    
;;;583        if (sPt->u32cSecond > 59) {
;;;584            return E_RTC_ERR_TIME_VALUE;
;;;585        }
;;;586    
;;;587        if (sPt->u32cDayOfWeek > 6) {
;;;588            return E_RTC_ERR_DWR_VALUE;
;;;589        }
;;;590    
;;;591        switch (eTime) {
;;;592    
;;;593        case RTC_CURRENT_TIME: {
;;;594            /*---------------------------------------------------------------------------------------------*/
;;;595            /* Second, set RTC time data.                                                                  */
;;;596            /*---------------------------------------------------------------------------------------------*/
;;;597    
;;;598            if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;599                g_chHourMode = RTC_CLOCK_12;
;;;600    
;;;601                RTC_WriteEnable(1);
;;;602                outp32(REG_RTC_TIMEFMT, RTC_CLOCK_12);
;;;603                RTC_Check();
;;;604    
;;;605                /*-----------------------------------------------------------------------------------------*/
;;;606                /* important, range of 12-hour PM mode is 21 upto 32                                       */
;;;607                /*-----------------------------------------------------------------------------------------*/
;;;608                if (sPt->u8cAmPm == RTC_PM) {
;;;609                    sPt->u32cHour += 20;
;;;610                }
;;;611            } else {                                                              /* RTC_CLOCK_24 */
;;;612                g_chHourMode = RTC_CLOCK_24;
;;;613    
;;;614                RTC_WriteEnable(1);
;;;615                outp32(REG_RTC_TIMEFMT, RTC_CLOCK_24);
;;;616                RTC_Check();
;;;617    
;;;618            }
;;;619    
;;;620            g_u32hiHour  = sPt->u32cHour / 10;
;;;621            g_u32loHour  = sPt->u32cHour % 10;
;;;622            g_u32hiMin   = sPt->u32cMinute / 10;
;;;623            g_u32loMin   = sPt->u32cMinute % 10;
;;;624            g_u32hiSec   = sPt->u32cSecond / 10;
;;;625            g_u32loSec   = sPt->u32cSecond % 10;
;;;626    
;;;627            u32Reg = (g_u32hiHour << 20);
;;;628            u32Reg|= (g_u32loHour << 16);
;;;629            u32Reg|= (g_u32hiMin << 12);
;;;630            u32Reg|= (g_u32loMin << 8);
;;;631            u32Reg|= (g_u32hiSec << 4);
;;;632            u32Reg|= g_u32loSec;
;;;633            g_u32Reg = u32Reg;
;;;634    
;;;635            RTC_WriteEnable(1);
;;;636            outp32(REG_RTC_TIME, (UINT32)g_u32Reg);
;;;637            RTC_Check();
;;;638    
;;;639            g_u32hiYear  = (sPt->u32Year - RTC_YEAR2000) / 10;
;;;640            g_u32loYear  = (sPt->u32Year - RTC_YEAR2000) % 10;
;;;641            g_u32hiMonth = sPt->u32cMonth / 10;
;;;642            g_u32loMonth = sPt->u32cMonth % 10;
;;;643            g_u32hiDay   = sPt->u32cDay / 10;
;;;644            g_u32loDay   = sPt->u32cDay % 10;
;;;645    
;;;646            u32Reg = (g_u32hiYear << 20);
;;;647            u32Reg|= (g_u32loYear << 16);
;;;648            u32Reg|= (g_u32hiMonth << 12);
;;;649            u32Reg|= (g_u32loMonth << 8);
;;;650            u32Reg|= (g_u32hiDay << 4);
;;;651            u32Reg|= g_u32loDay;
;;;652            g_u32Reg = u32Reg;
;;;653    
;;;654            RTC_WriteEnable(1);
;;;655            outp32 (REG_RTC_CAL, (UINT32)g_u32Reg);
;;;656            RTC_Check();
;;;657    
;;;658            RTC_WriteEnable(1);
;;;659            outp32(REG_RTC_WEEKDAY,(UINT32) sPt->u32cDayOfWeek);
;;;660            RTC_Check();
;;;661    
;;;662            if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;663                if (sPt->u8cAmPm == RTC_PM) {
;;;664                    sPt->u32cHour -= 20;
;;;665                }
;;;666            }
;;;667    
;;;668            return E_RTC_SUCCESS;
;;;669    
;;;670        }
;;;671        case RTC_ALARM_TIME: {
;;;672            RTC_WriteEnable(1);
;;;673            outp32(REG_RTC_PWRCTL,inp32(REG_RTC_PWRCTL) & ~RTC_PWRCTL_ALARM_EN_Msk);
;;;674            RTC_Check();
;;;675    
;;;676            g_pfnRTCCallBack_Alarm = NULL;                                         /* Initial call back function.*/
;;;677            /*---------------------------------------------------------------------------------------------*/
;;;678            /* Second, set alarm time data.                                                                */
;;;679            /*---------------------------------------------------------------------------------------------*/
;;;680            g_u32hiYear = (sPt->u32Year - RTC_YEAR2000) / 10;
;;;681            g_u32loYear = (sPt->u32Year - RTC_YEAR2000) % 10;
;;;682            g_u32hiMonth = sPt->u32cMonth / 10;
;;;683            g_u32loMonth = sPt->u32cMonth % 10;
;;;684            g_u32hiDay = sPt->u32cDay / 10;
;;;685            g_u32loDay = sPt->u32cDay % 10;
;;;686    
;;;687            //u32Reg = ((sPt->u32AlarmMaskDayOfWeek & 0x1) << 31);
;;;688            u32Reg = ((sPt->u32cDayOfWeek & 0x7) << 24);
;;;689            //u32Reg|= ((sPt->u32AlarmMaskYear & 0x1) << 30);
;;;690            u32Reg|= (g_u32hiYear << 20);
;;;691            u32Reg|= (g_u32loYear << 16);
;;;692            //u32Reg|= ((sPt->u32AlarmMaskMonth & 0x1) << 29);
;;;693            u32Reg|= (g_u32hiMonth << 12);
;;;694            u32Reg|= (g_u32loMonth << 8);
;;;695            //u32Reg|= ((sPt->u32AlarmMaskDay & 0x1) << 28);
;;;696            u32Reg|= (g_u32hiDay << 4);
;;;697            u32Reg|= g_u32loDay;
;;;698    
;;;699            g_u32Reg = u32Reg;
;;;700    
;;;701            RTC_WriteEnable(1);
;;;702            outp32(REG_RTC_CALM, (UINT32)g_u32Reg);
;;;703            RTC_Check();
;;;704    
;;;705    
;;;706            if (g_chHourMode == RTC_CLOCK_12) {
;;;707                if (sPt->u8cAmPm == RTC_PM) {     /* important, range of 12-hour PM mode is 21 upto 32 */
;;;708                    sPt->u32cHour += 20;
;;;709                }
;;;710            }
;;;711            g_u32hiHour   = sPt->u32cHour / 10;
;;;712            g_u32loHour   = sPt->u32cHour % 10;
;;;713            g_u32hiMin  = sPt->u32cMinute / 10;
;;;714            g_u32loMin  = sPt->u32cMinute % 10;
;;;715            g_u32hiSec  = sPt->u32cSecond / 10;
;;;716            g_u32loSec  = sPt->u32cSecond % 10;
;;;717    
;;;718            u32Reg = ((sPt->u32AlarmMaskHour & 0x1) << 30);
;;;719            u32Reg|= (g_u32hiHour << 20);
;;;720            u32Reg|= (g_u32loHour << 16);
;;;721            u32Reg|= ((sPt->u32AlarmMaskMinute & 0x1) << 29);
;;;722            u32Reg|= (g_u32hiMin << 12);
;;;723            u32Reg|= (g_u32loMin << 8);
;;;724            u32Reg|= ((sPt->u32AlarmMaskSecond & 0x1) << 28);
;;;725            u32Reg|= (g_u32hiSec << 4);
;;;726            u32Reg|= g_u32loSec;
;;;727    
;;;728            g_u32Reg = u32Reg;
;;;729    
;;;730            RTC_WriteEnable(1);
;;;731            outp32(REG_RTC_TALM, (UINT32)g_u32Reg);
;;;732            RTC_Check();
;;;733    
;;;734            if (sPt->u8cClockDisplay == RTC_CLOCK_12) {
;;;735                if (sPt->u8cAmPm == RTC_PM) {
;;;736                    sPt->u32cHour -= 20;
;;;737                }
;;;738            }
;;;739            /*---------------------------------------------------------------------------------------------*/
;;;740            /* Third, install alarm callback function.                                                     */
;;;741            /*---------------------------------------------------------------------------------------------*/
;;;742            if (sPt->pfnAlarmCallBack != NULL) {
;;;743                g_pfnRTCCallBack_Alarm = sPt->pfnAlarmCallBack;
;;;744            }
;;;745            /*---------------------------------------------------------------------------------------------*/
;;;746            /* Finally, enable alarm interrupt.                                                            */
;;;747            /*---------------------------------------------------------------------------------------------*/
;;;748    
;;;749            RTC_Ioctl(0,RTC_IOC_ENABLE_INT,RTC_ALARM_INT,0);
;;;750    
;;;751            RTC_WriteEnable(1);
;;;752            outp32(REG_RTC_PWRCTL,inp32(REG_RTC_PWRCTL) | RTC_PWRCTL_ALARM_EN_Msk);
;;;753            RTC_Check();
;;;754    
;;;755            return E_RTC_SUCCESS;
;;;756        }
;;;757        default: {
;;;758            return E_RTC_ERR_ENOTTY;
;;;759        }
;;;760        }
;;;761    
;;;762    }
001318  e8bd8070          POP      {r4-r6,pc}
                  |L1.4892|
00131c  e594001c          LDR      r0,[r4,#0x1c]         ;555
001320  e2400e7d          SUB      r0,r0,#0x7d0          ;555
001324  e3500063          CMP      r0,#0x63              ;555
001328  9a000001          BLS      |L1.4916|
00132c  e3a00001          MOV      r0,#1                 ;556
001330  eafffff8          B        |L1.4888|
                  |L1.4916|
001334  e5940018          LDR      r0,[r4,#0x18]         ;559
001338  e3500000          CMP      r0,#0                 ;559
00133c  0a000002          BEQ      |L1.4940|
001340  e5940018          LDR      r0,[r4,#0x18]         ;559
001344  e350000c          CMP      r0,#0xc               ;559
001348  9a000001          BLS      |L1.4948|
                  |L1.4940|
00134c  e3a00001          MOV      r0,#1                 ;560
001350  eafffff0          B        |L1.4888|
                  |L1.4948|
001354  e5940014          LDR      r0,[r4,#0x14]         ;563
001358  e3500000          CMP      r0,#0                 ;563
00135c  0a000002          BEQ      |L1.4972|
001360  e5940014          LDR      r0,[r4,#0x14]         ;563
001364  e350001f          CMP      r0,#0x1f              ;563
001368  9a000001          BLS      |L1.4980|
                  |L1.4972|
00136c  e3a00001          MOV      r0,#1                 ;564
001370  eaffffe8          B        |L1.4888|
                  |L1.4980|
001374  e5d40000          LDRB     r0,[r4,#0]            ;567
001378  e3500000          CMP      r0,#0                 ;567
00137c  1a000007          BNE      |L1.5024|
001380  e594000c          LDR      r0,[r4,#0xc]          ;568
001384  e3500000          CMP      r0,#0                 ;568
001388  0a000002          BEQ      |L1.5016|
00138c  e594000c          LDR      r0,[r4,#0xc]          ;568
001390  e350000c          CMP      r0,#0xc               ;568
001394  9a00000b          BLS      |L1.5064|
                  |L1.5016|
001398  e3a00003          MOV      r0,#3                 ;569
00139c  eaffffdd          B        |L1.4888|
                  |L1.5024|
0013a0  e5d40000          LDRB     r0,[r4,#0]            ;571
0013a4  e3500001          CMP      r0,#1                 ;571
0013a8  1a000004          BNE      |L1.5056|
0013ac  e594000c          LDR      r0,[r4,#0xc]          ;572
0013b0  e3500017          CMP      r0,#0x17              ;572
0013b4  9a000003          BLS      |L1.5064|
0013b8  e3a00003          MOV      r0,#3                 ;573
0013bc  eaffffd5          B        |L1.4888|
                  |L1.5056|
0013c0  e3a00003          MOV      r0,#3                 ;576
0013c4  eaffffd3          B        |L1.4888|
                  |L1.5064|
0013c8  e5940008          LDR      r0,[r4,#8]            ;579
0013cc  e350003b          CMP      r0,#0x3b              ;579
0013d0  9a000001          BLS      |L1.5084|
0013d4  e3a00003          MOV      r0,#3                 ;580
0013d8  eaffffce          B        |L1.4888|
                  |L1.5084|
0013dc  e5940004          LDR      r0,[r4,#4]            ;583
0013e0  e350003b          CMP      r0,#0x3b              ;583
0013e4  9a000001          BLS      |L1.5104|
0013e8  e3a00003          MOV      r0,#3                 ;584
0013ec  eaffffc9          B        |L1.4888|
                  |L1.5104|
0013f0  e5940010          LDR      r0,[r4,#0x10]         ;587
0013f4  e3500006          CMP      r0,#6                 ;587
0013f8  9a000001          BLS      |L1.5124|
0013fc  e3a00004          MOV      r0,#4                 ;588
001400  eaffffc4          B        |L1.4888|
                  |L1.5124|
001404  e3560000          CMP      r6,#0                 ;591
001408  0a000002          BEQ      |L1.5144|
00140c  e3560001          CMP      r6,#1                 ;591
001410  1a000155          BNE      |L1.6508|
001414  ea0000a0          B        |L1.5788|
                  |L1.5144|
001418  e1a00000          MOV      r0,r0                 ;593
00141c  e5d40000          LDRB     r0,[r4,#0]            ;598
001420  e3500000          CMP      r0,#0                 ;598
001424  1a00000f          BNE      |L1.5224|
001428  e3a00000          MOV      r0,#0                 ;599
00142c  e51f1530          LDR      r1,|L1.3844|
001430  e5c10000          STRB     r0,[r1,#0]            ;599  ; g_chHourMode
001434  e3a00001          MOV      r0,#1                 ;601
001438  ebfffffe          BL       RTC_WriteEnable
00143c  e3a00000          MOV      r0,#0                 ;602
001440  e51f1578          LDR      r1,|L1.3792|
001444  e5810014          STR      r0,[r1,#0x14]         ;602
001448  ebfffffe          BL       RTC_Check
00144c  e5d40001          LDRB     r0,[r4,#1]            ;608
001450  e3500002          CMP      r0,#2                 ;608
001454  1a00000b          BNE      |L1.5256|
001458  e594000c          LDR      r0,[r4,#0xc]          ;609
00145c  e2800014          ADD      r0,r0,#0x14           ;609
001460  e584000c          STR      r0,[r4,#0xc]          ;609
001464  ea000007          B        |L1.5256|
                  |L1.5224|
001468  e3a00001          MOV      r0,#1                 ;612
00146c  e51f1570          LDR      r1,|L1.3844|
001470  e5c10000          STRB     r0,[r1,#0]            ;612  ; g_chHourMode
001474  ebfffffe          BL       RTC_WriteEnable
001478  e3a00001          MOV      r0,#1                 ;615
00147c  e51f15b4          LDR      r1,|L1.3792|
001480  e5810014          STR      r0,[r1,#0x14]         ;615
001484  ebfffffe          BL       RTC_Check
                  |L1.5256|
001488  e3a0100a          MOV      r1,#0xa               ;620
00148c  e594000c          LDR      r0,[r4,#0xc]          ;620
001490  ebfffffe          BL       __aeabi_uidivmod
001494  e51f1594          LDR      r1,|L1.3848|
001498  e5810000          STR      r0,[r1,#0]            ;620  ; g_u32hiHour
00149c  e3a0100a          MOV      r1,#0xa               ;621
0014a0  e594000c          LDR      r0,[r4,#0xc]          ;621
0014a4  ebfffffe          BL       __aeabi_uidivmod
0014a8  e51f05a4          LDR      r0,|L1.3852|
0014ac  e5801000          STR      r1,[r0,#0]            ;621  ; g_u32loHour
0014b0  e3a0100a          MOV      r1,#0xa               ;622
0014b4  e5940008          LDR      r0,[r4,#8]            ;622
0014b8  ebfffffe          BL       __aeabi_uidivmod
0014bc  e51f15b4          LDR      r1,|L1.3856|
0014c0  e5810000          STR      r0,[r1,#0]            ;622  ; g_u32hiMin
0014c4  e3a0100a          MOV      r1,#0xa               ;623
0014c8  e5940008          LDR      r0,[r4,#8]            ;623
0014cc  ebfffffe          BL       __aeabi_uidivmod
0014d0  e51f05c4          LDR      r0,|L1.3860|
0014d4  e5801000          STR      r1,[r0,#0]            ;623  ; g_u32loMin
0014d8  e3a0100a          MOV      r1,#0xa               ;624
0014dc  e5940004          LDR      r0,[r4,#4]            ;624
0014e0  ebfffffe          BL       __aeabi_uidivmod
0014e4  e51f15d4          LDR      r1,|L1.3864|
0014e8  e5810000          STR      r0,[r1,#0]            ;624  ; g_u32hiSec
0014ec  e3a0100a          MOV      r1,#0xa               ;625
0014f0  e5940004          LDR      r0,[r4,#4]            ;625
0014f4  ebfffffe          BL       __aeabi_uidivmod
0014f8  e51f05e4          LDR      r0,|L1.3868|
0014fc  e5801000          STR      r1,[r0,#0]            ;625  ; g_u32loSec
001500  e51f0600          LDR      r0,|L1.3848|
001504  e5900000          LDR      r0,[r0,#0]            ;627  ; g_u32hiHour
001508  e1a05a00          LSL      r5,r0,#20             ;627
00150c  e51f0608          LDR      r0,|L1.3852|
001510  e5900000          LDR      r0,[r0,#0]            ;628  ; g_u32loHour
001514  e1855800          ORR      r5,r5,r0,LSL #16      ;628
001518  e51f0610          LDR      r0,|L1.3856|
00151c  e5900000          LDR      r0,[r0,#0]            ;629  ; g_u32hiMin
001520  e1855600          ORR      r5,r5,r0,LSL #12      ;629
001524  e51f0618          LDR      r0,|L1.3860|
001528  e5900000          LDR      r0,[r0,#0]            ;630  ; g_u32loMin
00152c  e1855400          ORR      r5,r5,r0,LSL #8       ;630
001530  e51f0620          LDR      r0,|L1.3864|
001534  e5900000          LDR      r0,[r0,#0]            ;631  ; g_u32hiSec
001538  e1855200          ORR      r5,r5,r0,LSL #4       ;631
00153c  e51f0628          LDR      r0,|L1.3868|
001540  e5900000          LDR      r0,[r0,#0]            ;632  ; g_u32loSec
001544  e1855000          ORR      r5,r5,r0              ;632
001548  e51f0630          LDR      r0,|L1.3872|
00154c  e5805000          STR      r5,[r0,#0]            ;633  ; g_u32Reg
001550  e3a00001          MOV      r0,#1                 ;635
001554  ebfffffe          BL       RTC_WriteEnable
001558  e51f0640          LDR      r0,|L1.3872|
00155c  e5900000          LDR      r0,[r0,#0]            ;636  ; g_u32Reg
001560  e51f1698          LDR      r1,|L1.3792|
001564  e581000c          STR      r0,[r1,#0xc]          ;636
001568  ebfffffe          BL       RTC_Check
00156c  e594101c          LDR      r1,[r4,#0x1c]         ;639
001570  e2410e7d          SUB      r0,r1,#0x7d0          ;639
001574  e3a0100a          MOV      r1,#0xa               ;639
001578  ebfffffe          BL       __aeabi_uidivmod
00157c  e51f1660          LDR      r1,|L1.3876|
001580  e5810000          STR      r0,[r1,#0]            ;639  ; g_u32hiYear
001584  e594101c          LDR      r1,[r4,#0x1c]         ;640
001588  e2410e7d          SUB      r0,r1,#0x7d0          ;640
00158c  e3a0100a          MOV      r1,#0xa               ;640
001590  ebfffffe          BL       __aeabi_uidivmod
001594  e51f0674          LDR      r0,|L1.3880|
001598  e5801000          STR      r1,[r0,#0]            ;640  ; g_u32loYear
00159c  e3a0100a          MOV      r1,#0xa               ;641
0015a0  e5940018          LDR      r0,[r4,#0x18]         ;641
0015a4  ebfffffe          BL       __aeabi_uidivmod
0015a8  e51f1684          LDR      r1,|L1.3884|
0015ac  e5810000          STR      r0,[r1,#0]            ;641  ; g_u32hiMonth
0015b0  e3a0100a          MOV      r1,#0xa               ;642
0015b4  e5940018          LDR      r0,[r4,#0x18]         ;642
0015b8  ebfffffe          BL       __aeabi_uidivmod
0015bc  e51f0694          LDR      r0,|L1.3888|
0015c0  e5801000          STR      r1,[r0,#0]            ;642  ; g_u32loMonth
0015c4  e3a0100a          MOV      r1,#0xa               ;643
0015c8  e5940014          LDR      r0,[r4,#0x14]         ;643
0015cc  ebfffffe          BL       __aeabi_uidivmod
0015d0  e51f16a4          LDR      r1,|L1.3892|
0015d4  e5810000          STR      r0,[r1,#0]            ;643  ; g_u32hiDay
0015d8  e3a0100a          MOV      r1,#0xa               ;644
0015dc  e5940014          LDR      r0,[r4,#0x14]         ;644
0015e0  ebfffffe          BL       __aeabi_uidivmod
0015e4  e51f06b4          LDR      r0,|L1.3896|
0015e8  e5801000          STR      r1,[r0,#0]            ;644  ; g_u32loDay
0015ec  e51f06d0          LDR      r0,|L1.3876|
0015f0  e5900000          LDR      r0,[r0,#0]            ;646  ; g_u32hiYear
0015f4  e1a05a00          LSL      r5,r0,#20             ;646
0015f8  e51f06d8          LDR      r0,|L1.3880|
0015fc  e5900000          LDR      r0,[r0,#0]            ;647  ; g_u32loYear
001600  e1855800          ORR      r5,r5,r0,LSL #16      ;647
001604  e51f06e0          LDR      r0,|L1.3884|
001608  e5900000          LDR      r0,[r0,#0]            ;648  ; g_u32hiMonth
00160c  e1855600          ORR      r5,r5,r0,LSL #12      ;648
001610  e51f06e8          LDR      r0,|L1.3888|
001614  e5900000          LDR      r0,[r0,#0]            ;649  ; g_u32loMonth
001618  e1855400          ORR      r5,r5,r0,LSL #8       ;649
00161c  e51f06f0          LDR      r0,|L1.3892|
001620  e5900000          LDR      r0,[r0,#0]            ;650  ; g_u32hiDay
001624  e1855200          ORR      r5,r5,r0,LSL #4       ;650
001628  e51f06f8          LDR      r0,|L1.3896|
00162c  e5900000          LDR      r0,[r0,#0]            ;651  ; g_u32loDay
001630  e1855000          ORR      r5,r5,r0              ;651
001634  e51f071c          LDR      r0,|L1.3872|
001638  e5805000          STR      r5,[r0,#0]            ;652  ; g_u32Reg
00163c  e3a00001          MOV      r0,#1                 ;654
001640  ebfffffe          BL       RTC_WriteEnable
001644  e51f072c          LDR      r0,|L1.3872|
001648  e5900000          LDR      r0,[r0,#0]            ;655  ; g_u32Reg
00164c  e51f1784          LDR      r1,|L1.3792|
001650  e5810010          STR      r0,[r1,#0x10]         ;655
001654  ebfffffe          BL       RTC_Check
001658  e3a00001          MOV      r0,#1                 ;658
00165c  ebfffffe          BL       RTC_WriteEnable
001660  e5940010          LDR      r0,[r4,#0x10]         ;659
001664  e51f179c          LDR      r1,|L1.3792|
001668  e5810018          STR      r0,[r1,#0x18]         ;659
00166c  ebfffffe          BL       RTC_Check
001670  e5d40000          LDRB     r0,[r4,#0]            ;662
001674  e3500000          CMP      r0,#0                 ;662
001678  1a000005          BNE      |L1.5780|
00167c  e5d40001          LDRB     r0,[r4,#1]            ;663
001680  e3500002          CMP      r0,#2                 ;663
001684  1a000002          BNE      |L1.5780|
001688  e594000c          LDR      r0,[r4,#0xc]          ;664
00168c  e2400014          SUB      r0,r0,#0x14           ;664
001690  e584000c          STR      r0,[r4,#0xc]          ;664
                  |L1.5780|
001694  e3a00000          MOV      r0,#0                 ;668
001698  eaffff1e          B        |L1.4888|
                  |L1.5788|
00169c  e1a00000          MOV      r0,r0                 ;671
0016a0  e3a00001          MOV      r0,#1                 ;672
0016a4  ebfffffe          BL       RTC_WriteEnable
0016a8  e51f07e0          LDR      r0,|L1.3792|
0016ac  e5900034          LDR      r0,[r0,#0x34]         ;673
0016b0  e3c00008          BIC      r0,r0,#8              ;673
0016b4  e51f17ec          LDR      r1,|L1.3792|
0016b8  e5810034          STR      r0,[r1,#0x34]         ;673
0016bc  ebfffffe          BL       RTC_Check
0016c0  e3a00000          MOV      r0,#0                 ;676
0016c4  e51f17d4          LDR      r1,|L1.3832|
0016c8  e5810000          STR      r0,[r1,#0]            ;676  ; g_pfnRTCCallBack_Alarm
0016cc  e594101c          LDR      r1,[r4,#0x1c]         ;680
0016d0  e2410e7d          SUB      r0,r1,#0x7d0          ;680
0016d4  e3a0100a          MOV      r1,#0xa               ;680
0016d8  ebfffffe          BL       __aeabi_uidivmod
0016dc  e51f17c0          LDR      r1,|L1.3876|
0016e0  e5810000          STR      r0,[r1,#0]            ;680  ; g_u32hiYear
0016e4  e594101c          LDR      r1,[r4,#0x1c]         ;681
0016e8  e2410e7d          SUB      r0,r1,#0x7d0          ;681
0016ec  e3a0100a          MOV      r1,#0xa               ;681
0016f0  ebfffffe          BL       __aeabi_uidivmod
0016f4  e51f07d4          LDR      r0,|L1.3880|
0016f8  e5801000          STR      r1,[r0,#0]            ;681  ; g_u32loYear
0016fc  e3a0100a          MOV      r1,#0xa               ;682
001700  e5940018          LDR      r0,[r4,#0x18]         ;682
001704  ebfffffe          BL       __aeabi_uidivmod
001708  e51f17e4          LDR      r1,|L1.3884|
00170c  e5810000          STR      r0,[r1,#0]            ;682  ; g_u32hiMonth
001710  e3a0100a          MOV      r1,#0xa               ;683
001714  e5940018          LDR      r0,[r4,#0x18]         ;683
001718  ebfffffe          BL       __aeabi_uidivmod
00171c  e51f07f4          LDR      r0,|L1.3888|
001720  e5801000          STR      r1,[r0,#0]            ;683  ; g_u32loMonth
001724  e3a0100a          MOV      r1,#0xa               ;684
001728  e5940014          LDR      r0,[r4,#0x14]         ;684
00172c  ebfffffe          BL       __aeabi_uidivmod
001730  e51f1804          LDR      r1,|L1.3892|
001734  e5810000          STR      r0,[r1,#0]            ;684  ; g_u32hiDay
001738  e3a0100a          MOV      r1,#0xa               ;685
00173c  e5940014          LDR      r0,[r4,#0x14]         ;685
001740  ebfffffe          BL       __aeabi_uidivmod
001744  e51f0814          LDR      r0,|L1.3896|
001748  e5801000          STR      r1,[r0,#0]            ;685  ; g_u32loDay
00174c  e5d40010          LDRB     r0,[r4,#0x10]         ;688
001750  e1a00e80          LSL      r0,r0,#29             ;688
001754  e1a052a0          LSR      r5,r0,#5              ;688
001758  e51f083c          LDR      r0,|L1.3876|
00175c  e5900000          LDR      r0,[r0,#0]            ;690  ; g_u32hiYear
001760  e1855a00          ORR      r5,r5,r0,LSL #20      ;690
001764  e51f0844          LDR      r0,|L1.3880|
001768  e5900000          LDR      r0,[r0,#0]            ;691  ; g_u32loYear
00176c  e1855800          ORR      r5,r5,r0,LSL #16      ;691
001770  e51f084c          LDR      r0,|L1.3884|
001774  e5900000          LDR      r0,[r0,#0]            ;693  ; g_u32hiMonth
001778  e1855600          ORR      r5,r5,r0,LSL #12      ;693
00177c  e51f0854          LDR      r0,|L1.3888|
001780  e5900000          LDR      r0,[r0,#0]            ;694  ; g_u32loMonth
001784  e1855400          ORR      r5,r5,r0,LSL #8       ;694
001788  e51f085c          LDR      r0,|L1.3892|
00178c  e5900000          LDR      r0,[r0,#0]            ;696  ; g_u32hiDay
001790  e1855200          ORR      r5,r5,r0,LSL #4       ;696
001794  e51f0864          LDR      r0,|L1.3896|
001798  e5900000          LDR      r0,[r0,#0]            ;697  ; g_u32loDay
00179c  e1855000          ORR      r5,r5,r0              ;697
0017a0  e51f0888          LDR      r0,|L1.3872|
0017a4  e5805000          STR      r5,[r0,#0]            ;699  ; g_u32Reg
0017a8  e3a00001          MOV      r0,#1                 ;701
0017ac  ebfffffe          BL       RTC_WriteEnable
0017b0  e51f0898          LDR      r0,|L1.3872|
0017b4  e5900000          LDR      r0,[r0,#0]            ;702  ; g_u32Reg
0017b8  e51f18f0          LDR      r1,|L1.3792|
0017bc  e5810020          STR      r0,[r1,#0x20]         ;702
0017c0  ebfffffe          BL       RTC_Check
0017c4  e51f08c8          LDR      r0,|L1.3844|
0017c8  e5d00000          LDRB     r0,[r0,#0]            ;706  ; g_chHourMode
0017cc  e3500000          CMP      r0,#0                 ;706
0017d0  1a000005          BNE      |L1.6124|
0017d4  e5d40001          LDRB     r0,[r4,#1]            ;707
0017d8  e3500002          CMP      r0,#2                 ;707
0017dc  1a000002          BNE      |L1.6124|
0017e0  e594000c          LDR      r0,[r4,#0xc]          ;708
0017e4  e2800014          ADD      r0,r0,#0x14           ;708
0017e8  e584000c          STR      r0,[r4,#0xc]          ;708
                  |L1.6124|
0017ec  e3a0100a          MOV      r1,#0xa               ;711
0017f0  e594000c          LDR      r0,[r4,#0xc]          ;711
0017f4  ebfffffe          BL       __aeabi_uidivmod
0017f8  e51f18f8          LDR      r1,|L1.3848|
0017fc  e5810000          STR      r0,[r1,#0]            ;711  ; g_u32hiHour
001800  e3a0100a          MOV      r1,#0xa               ;712
001804  e594000c          LDR      r0,[r4,#0xc]          ;712
001808  ebfffffe          BL       __aeabi_uidivmod
00180c  e51f0908          LDR      r0,|L1.3852|
001810  e5801000          STR      r1,[r0,#0]            ;712  ; g_u32loHour
001814  e3a0100a          MOV      r1,#0xa               ;713
001818  e5940008          LDR      r0,[r4,#8]            ;713
00181c  ebfffffe          BL       __aeabi_uidivmod
001820  e51f1918          LDR      r1,|L1.3856|
001824  e5810000          STR      r0,[r1,#0]            ;713  ; g_u32hiMin
001828  e3a0100a          MOV      r1,#0xa               ;714
00182c  e5940008          LDR      r0,[r4,#8]            ;714
001830  ebfffffe          BL       __aeabi_uidivmod
001834  e51f0928          LDR      r0,|L1.3860|
001838  e5801000          STR      r1,[r0,#0]            ;714  ; g_u32loMin
00183c  e3a0100a          MOV      r1,#0xa               ;715
001840  e5940004          LDR      r0,[r4,#4]            ;715
001844  ebfffffe          BL       __aeabi_uidivmod
001848  e51f1938          LDR      r1,|L1.3864|
00184c  e5810000          STR      r0,[r1,#0]            ;715  ; g_u32hiSec
001850  e3a0100a          MOV      r1,#0xa               ;716
001854  e5940004          LDR      r0,[r4,#4]            ;716
001858  ebfffffe          BL       __aeabi_uidivmod
00185c  e51f0948          LDR      r0,|L1.3868|
001860  e5801000          STR      r1,[r0,#0]            ;716  ; g_u32loSec
001864  e5d40028          LDRB     r0,[r4,#0x28]         ;718
001868  e1a00f80          LSL      r0,r0,#31             ;718
00186c  e1a050a0          LSR      r5,r0,#1              ;718
001870  e51f0970          LDR      r0,|L1.3848|
001874  e5900000          LDR      r0,[r0,#0]            ;719  ; g_u32hiHour
001878  e1855a00          ORR      r5,r5,r0,LSL #20      ;719
00187c  e51f0978          LDR      r0,|L1.3852|
001880  e5900000          LDR      r0,[r0,#0]            ;720  ; g_u32loHour
001884  e1855800          ORR      r5,r5,r0,LSL #16      ;720
001888  e5d40024          LDRB     r0,[r4,#0x24]         ;721
00188c  e2000001          AND      r0,r0,#1              ;721
001890  e1855e80          ORR      r5,r5,r0,LSL #29      ;721
001894  e51f098c          LDR      r0,|L1.3856|
001898  e5900000          LDR      r0,[r0,#0]            ;722  ; g_u32hiMin
00189c  e1855600          ORR      r5,r5,r0,LSL #12      ;722
0018a0  e51f0994          LDR      r0,|L1.3860|
0018a4  e5900000          LDR      r0,[r0,#0]            ;723  ; g_u32loMin
0018a8  e1855400          ORR      r5,r5,r0,LSL #8       ;723
0018ac  e5d40020          LDRB     r0,[r4,#0x20]         ;724
0018b0  e2000001          AND      r0,r0,#1              ;724
0018b4  e1855e00          ORR      r5,r5,r0,LSL #28      ;724
0018b8  e51f09a8          LDR      r0,|L1.3864|
0018bc  e5900000          LDR      r0,[r0,#0]            ;725  ; g_u32hiSec
0018c0  e1855200          ORR      r5,r5,r0,LSL #4       ;725
0018c4  e51f09b0          LDR      r0,|L1.3868|
0018c8  e5900000          LDR      r0,[r0,#0]            ;726  ; g_u32loSec
0018cc  e1855000          ORR      r5,r5,r0              ;726
0018d0  e51f09b8          LDR      r0,|L1.3872|
0018d4  e5805000          STR      r5,[r0,#0]            ;728  ; g_u32Reg
0018d8  e3a00001          MOV      r0,#1                 ;730
0018dc  ebfffffe          BL       RTC_WriteEnable
0018e0  e51f09c8          LDR      r0,|L1.3872|
0018e4  e5900000          LDR      r0,[r0,#0]            ;731  ; g_u32Reg
0018e8  e51f1a20          LDR      r1,|L1.3792|
0018ec  e581001c          STR      r0,[r1,#0x1c]         ;731
0018f0  ebfffffe          BL       RTC_Check
0018f4  e5d40000          LDRB     r0,[r4,#0]            ;734
0018f8  e3500000          CMP      r0,#0                 ;734
0018fc  1a000005          BNE      |L1.6424|
001900  e5d40001          LDRB     r0,[r4,#1]            ;735
001904  e3500002          CMP      r0,#2                 ;735
001908  1a000002          BNE      |L1.6424|
00190c  e594000c          LDR      r0,[r4,#0xc]          ;736
001910  e2400014          SUB      r0,r0,#0x14           ;736
001914  e584000c          STR      r0,[r4,#0xc]          ;736
                  |L1.6424|
001918  e594002c          LDR      r0,[r4,#0x2c]         ;742
00191c  e3500000          CMP      r0,#0                 ;742
001920  0a000002          BEQ      |L1.6448|
001924  e51f1a34          LDR      r1,|L1.3832|
001928  e594002c          LDR      r0,[r4,#0x2c]         ;743
00192c  e5810000          STR      r0,[r1,#0]            ;743  ; g_pfnRTCCallBack_Alarm
                  |L1.6448|
001930  e3a03000          MOV      r3,#0                 ;749
001934  e3a02001          MOV      r2,#1                 ;749
001938  e3a01004          MOV      r1,#4                 ;749
00193c  e1a00003          MOV      r0,r3                 ;749
001940  ebfffffe          BL       RTC_Ioctl
001944  e3a00001          MOV      r0,#1                 ;751
001948  ebfffffe          BL       RTC_WriteEnable
00194c  e51f0a84          LDR      r0,|L1.3792|
001950  e5900034          LDR      r0,[r0,#0x34]         ;752
001954  e3800008          ORR      r0,r0,#8              ;752
001958  e51f1a90          LDR      r1,|L1.3792|
00195c  e5810034          STR      r0,[r1,#0x34]         ;752
001960  ebfffffe          BL       RTC_Check
001964  e3a00000          MOV      r0,#0                 ;755
001968  eafffe6a          B        |L1.4888|
                  |L1.6508|
00196c  e1a00000          MOV      r0,r0                 ;757
001970  e3a00007          MOV      r0,#7                 ;758
001974  eafffe67          B        |L1.4888|
;;;763    
                          ENDP

                  RTC_Close PROC
;;;1099     */
;;;1100   UINT32 RTC_Close (void)
001978  e92d4010          PUSH     {r4,lr}
;;;1101   {
;;;1102   
;;;1103       g_bIsEnableTickInt = FALSE;
00197c  e3a00000          MOV      r0,#0
001980  e51f1aac          LDR      r1,|L1.3804|
001984  e5c10000          STRB     r0,[r1,#0]  ; g_bIsEnableTickInt
;;;1104   
;;;1105       sysDisableInterrupt(RTC_IRQn);
001988  e3a0000f          MOV      r0,#0xf
00198c  ebfffffe          BL       sysDisableInterrupt
;;;1106   
;;;1107   
;;;1108       RTC_Ioctl(0,RTC_IOC_DISABLE_INT,RTC_ALL_INT,0);
001990  e3a03000          MOV      r3,#0
001994  e3a0203f          MOV      r2,#0x3f
001998  e3a01005          MOV      r1,#5
00199c  e1a00003          MOV      r0,r3
0019a0  ebfffffe          BL       RTC_Ioctl
;;;1109   
;;;1110   
;;;1111       return E_RTC_SUCCESS;
0019a4  e3a00000          MOV      r0,#0
;;;1112   }
0019a8  e8bd8010          POP      {r4,pc}
;;;1113   
                          ENDP

                  RTC_EnableClock PROC
;;;1122     */
;;;1123   void RTC_EnableClock(BOOL bEnable)
0019ac  e3500000          CMP      r0,#0
;;;1124   {
;;;1125       if(bEnable)
0019b0  0a000005          BEQ      |L1.6604|
;;;1126           outp32(REG_CLK_PCLKEN0, inp32(REG_CLK_PCLKEN0) | (1 << 2));
0019b4  e3a0120b          MOV      r1,#0xb0000000
0019b8  e5911218          LDR      r1,[r1,#0x218]
0019bc  e3811004          ORR      r1,r1,#4
0019c0  e3a0220b          MOV      r2,#0xb0000000
0019c4  e5821218          STR      r1,[r2,#0x218]
0019c8  ea000004          B        |L1.6624|
                  |L1.6604|
;;;1127       else
;;;1128           outp32(REG_CLK_PCLKEN0, inp32(REG_CLK_PCLKEN0) & ~(1 << 2));
0019cc  e3a0120b          MOV      r1,#0xb0000000
0019d0  e5911218          LDR      r1,[r1,#0x218]
0019d4  e3c11004          BIC      r1,r1,#4
0019d8  e3a0220b          MOV      r2,#0xb0000000
0019dc  e5821218          STR      r1,[r2,#0x218]
                  |L1.6624|
;;;1129   
;;;1130   }
0019e0  e12fff1e          BX       lr
;;;1131   
                          ENDP

                  |L1.6628|
                          DCD      g_u32Reg1

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnRTCCallBack_Tick
                          DCD      0x00000000
                  g_pfnRTCCallBack_Alarm
                          DCD      0x00000000
                  g_pfnRTCCallBack_PSWI
                          DCD      0x00000000
                  g_pfnRTCCallBack_Relative_Alarm
                          DCD      0x00000000
                  g_u32RTC_Count
                          DCD      0x00000000
                  g_chHourMode
000014  00                DCB      0x00
                  g_bIsEnableTickInt
000015  00                DCB      0x00
                  g_bIsEnableAlarmInt
000016  0000              DCB      0x00,0x00
                  g_u32Reg
                          DCD      0x00000000
                  g_u32Reg1
                          DCD      0x00000000
                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  Wait
                          DCD      0x00000000
