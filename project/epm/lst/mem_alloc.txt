; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\mem_alloc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mem_alloc.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\mem_alloc.crf ..\..\common\src\BSP\Library\USB_HOST\src_core\mem_alloc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  usbh_memory_init PROC
;;;54     
;;;55     void usbh_memory_init(void)
000000  e92d4010          PUSH     {r4,lr}
;;;56     {
;;;57         int   i;
;;;58     
;;;59         if (sizeof(TD_T) > MEM_POOL_UNIT_SIZE)
;;;60         {
;;;61             USB_error("TD_T - MEM_POOL_UNIT_SIZE too small!\n");
;;;62             while (1);
;;;63         }
;;;64     
;;;65         if (sizeof(ED_T) > MEM_POOL_UNIT_SIZE)
;;;66         {
;;;67             USB_error("ED_T - MEM_POOL_UNIT_SIZE too small!\n");
;;;68             while (1);
;;;69         }
;;;70     
;;;71         for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
000004  e3a04000          MOV      r4,#0
000008  ea000008          B        |L1.48|
                  |L1.12|
;;;72         {
;;;73             _unit_used[i] = 0;
00000c  e3a00000          MOV      r0,#0
000010  e59f124c          LDR      r1,|L1.612|
000014  e7c10004          STRB     r0,[r1,r4]
;;;74             _mem_pool[i] = (uint8_t *)((uint32_t)&_mem_pool_buff[i] | NON_CACHE_MASK);
000018  e59f0248          LDR      r0,|L1.616|
00001c  e0800384          ADD      r0,r0,r4,LSL #7
000020  e3800102          ORR      r0,r0,#0x80000000
000024  e59f1240          LDR      r1,|L1.620|
000028  e7810104          STR      r0,[r1,r4,LSL #2]
00002c  e2844001          ADD      r4,r4,#1              ;71
                  |L1.48|
000030  e3540c01          CMP      r4,#0x100             ;71
000034  bafffff4          BLT      |L1.12|
;;;75         }
;;;76     
;;;77         _usbh_mem_used = 0L;
000038  e3a00000          MOV      r0,#0
00003c  e59f122c          LDR      r1,|L1.624|
000040  e5810000          STR      r0,[r1,#0]  ; _usbh_mem_used
;;;78         _usbh_max_mem_used = 0L;
000044  e59f1228          LDR      r1,|L1.628|
000048  e5810000          STR      r0,[r1,#0]  ; _usbh_max_mem_used
;;;79     
;;;80         _mem_pool_used = 0;
00004c  e59f1224          LDR      r1,|L1.632|
000050  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;81         _sidx = 0;
000054  e59f1220          LDR      r1,|L1.636|
000058  e5810000          STR      r0,[r1,#0]  ; _sidx
;;;82     
;;;83         g_udev_list = NULL;
00005c  e59f121c          LDR      r1,|L1.640|
000060  e5810000          STR      r0,[r1,#0]  ; g_udev_list
;;;84     
;;;85         memset(_dev_addr_pool, 0, sizeof(_dev_addr_pool));
000064  e3a01080          MOV      r1,#0x80
000068  e59f0214          LDR      r0,|L1.644|
00006c  ebfffffe          BL       __aeabi_memclr4
;;;86         _device_addr = 1;
000070  e3a00001          MOV      r0,#1
000074  e59f120c          LDR      r1,|L1.648|
000078  e5810000          STR      r0,[r1,#0]  ; _device_addr
;;;87     
;;;88         USB_InitializeMemoryPool();
00007c  ebfffffe          BL       USB_InitializeMemoryPool
;;;89     }
000080  e8bd8010          POP      {r4,pc}
;;;90     
                          ENDP

                  usbh_memory_used PROC
;;;91     uint32_t  usbh_memory_used(void)
000084  e92d4010          PUSH     {r4,lr}
;;;92     {
;;;93         sysprintf("USB static memory: %d/%d, heap used: %d\n", _mem_pool_used, MEM_POOL_UNIT_NUM, _usbh_mem_used);
000088  e59f01e0          LDR      r0,|L1.624|
00008c  e5903000          LDR      r3,[r0,#0]  ; _usbh_mem_used
000090  e3a02c01          MOV      r2,#0x100
000094  e59f01dc          LDR      r0,|L1.632|
000098  e5901000          LDR      r1,[r0,#0]  ; _mem_pool_used
00009c  e28f0f7a          ADR      r0,|L1.652|
0000a0  ebfffffe          BL       sysprintf
;;;94         return _usbh_mem_used;
0000a4  e59f01c4          LDR      r0,|L1.624|
0000a8  e5900000          LDR      r0,[r0,#0]  ; _usbh_mem_used
;;;95     }
0000ac  e8bd8010          POP      {r4,pc}
;;;96     
                          ENDP

                  memory_counter PROC
;;;97     static void  memory_counter(int size)
0000b0  e59f11b8          LDR      r1,|L1.624|
;;;98     {
;;;99         _usbh_mem_used += size;
0000b4  e5911000          LDR      r1,[r1,#0]  ; _usbh_mem_used
0000b8  e0811000          ADD      r1,r1,r0
0000bc  e59f21ac          LDR      r2,|L1.624|
0000c0  e5821000          STR      r1,[r2,#0]  ; _usbh_mem_used
;;;100        if (_usbh_mem_used > _usbh_max_mem_used)
0000c4  e2821000          ADD      r1,r2,#0
0000c8  e5911000          LDR      r1,[r1,#0]  ; _usbh_mem_used
0000cc  e59f21a0          LDR      r2,|L1.628|
0000d0  e5922000          LDR      r2,[r2,#0]  ; _usbh_max_mem_used
0000d4  e1510002          CMP      r1,r2
0000d8  da000003          BLE      |L1.236|
;;;101            _usbh_max_mem_used = _usbh_mem_used;
0000dc  e59f118c          LDR      r1,|L1.624|
0000e0  e5911000          LDR      r1,[r1,#0]  ; _usbh_mem_used
0000e4  e59f2188          LDR      r2,|L1.628|
0000e8  e5821000          STR      r1,[r2,#0]  ; _usbh_max_mem_used
                  |L1.236|
;;;102    }
0000ec  e12fff1e          BX       lr
;;;103    
                          ENDP

                  usbh_alloc_mem PROC
;;;104    void * usbh_alloc_mem(int size)
0000f0  e92d4070          PUSH     {r4-r6,lr}
;;;105    {
0000f4  e1a04000          MOV      r4,r0
;;;106        void  *p;
;;;107    
;;;108        p = USB_malloc(size, 16);
0000f8  e3a01010          MOV      r1,#0x10
0000fc  e1a00004          MOV      r0,r4
000100  ebfffffe          BL       USB_malloc
000104  e1a05000          MOV      r5,r0
;;;109        if (p == NULL)
000108  e3550000          CMP      r5,#0
00010c  1a000004          BNE      |L1.292|
;;;110        {
;;;111            USB_error("usbh_alloc_mem failed! %d\n", size);
000110  e1a01004          MOV      r1,r4
000114  e28f0f67          ADR      r0,|L1.696|
000118  ebfffffe          BL       sysprintf
;;;112            return NULL;
00011c  e3a00000          MOV      r0,#0
                  |L1.288|
;;;113        }
;;;114    
;;;115        memset(p, 0, size);
;;;116        memory_counter(size);
;;;117        return p;
;;;118    }
000120  e8bd8070          POP      {r4-r6,pc}
                  |L1.292|
000124  e1a01004          MOV      r1,r4                 ;115
000128  e1a00005          MOV      r0,r5                 ;115
00012c  ebfffffe          BL       __aeabi_memclr
000130  e1a00004          MOV      r0,r4                 ;116
000134  ebfffffe          BL       memory_counter
000138  e1a00005          MOV      r0,r5                 ;117
00013c  eafffff7          B        |L1.288|
;;;119    
                          ENDP

                  usbh_free_mem PROC
;;;120    void usbh_free_mem(void *p, int size)
000140  e92d4070          PUSH     {r4-r6,lr}
;;;121    {
000144  e1a05000          MOV      r5,r0
000148  e1a04001          MOV      r4,r1
;;;122        USB_free(p);
00014c  e1a00005          MOV      r0,r5
000150  ebfffffe          BL       USB_free
;;;123        memory_counter(0-size);
000154  e2640000          RSB      r0,r4,#0
000158  ebfffffe          BL       memory_counter
;;;124    }
00015c  e8bd8070          POP      {r4-r6,pc}
;;;125    
                          ENDP

                  alloc_device PROC
;;;130    
;;;131    UDEV_T * alloc_device(void)
000160  e92d4010          PUSH     {r4,lr}
;;;132    {
;;;133        UDEV_T  *udev;
;;;134    
;;;135        udev = (UDEV_T *)USB_malloc(sizeof(*udev), 16);
000164  e3a01010          MOV      r1,#0x10
000168  e3a00038          MOV      r0,#0x38
00016c  ebfffffe          BL       USB_malloc
000170  e1a04000          MOV      r4,r0
;;;136        if (udev == NULL)
000174  e3540000          CMP      r4,#0
000178  1a000003          BNE      |L1.396|
;;;137        {
;;;138            USB_error("alloc_device failed!\n");
00017c  e28f0e15          ADR      r0,|L1.724|
000180  ebfffffe          BL       sysprintf
;;;139            return NULL;
000184  e3a00000          MOV      r0,#0
                  |L1.392|
;;;140        }
;;;141    
;;;142        memset(udev, 0, sizeof(*udev));
;;;143        memory_counter(sizeof(*udev));
;;;144        udev->cur_conf = -1;                    /* must! used to identify the first SET CONFIGURATION */
;;;145        udev->next = g_udev_list;               /* chain to global device list */
;;;146        g_udev_list = udev;
;;;147        return udev;
;;;148    }
000188  e8bd8010          POP      {r4,pc}
                  |L1.396|
00018c  e3a01038          MOV      r1,#0x38              ;142
000190  e1a00004          MOV      r0,r4                 ;142
000194  ebfffffe          BL       __aeabi_memclr4
000198  e3a00038          MOV      r0,#0x38              ;143
00019c  ebfffffe          BL       memory_counter
0001a0  e3a000ff          MOV      r0,#0xff              ;144
0001a4  e5c4001a          STRB     r0,[r4,#0x1a]         ;144
0001a8  e59f00d0          LDR      r0,|L1.640|
0001ac  e5900000          LDR      r0,[r0,#0]            ;145  ; g_udev_list
0001b0  e5840034          STR      r0,[r4,#0x34]         ;145
0001b4  e59f00c4          LDR      r0,|L1.640|
0001b8  e5804000          STR      r4,[r0,#0]            ;146  ; g_udev_list
0001bc  e1a00004          MOV      r0,r4                 ;147
0001c0  eafffff0          B        |L1.392|
;;;149    
                          ENDP

                  free_device PROC
;;;150    void free_device(UDEV_T *udev)
0001c4  e92d4070          PUSH     {r4-r6,lr}
;;;151    {
0001c8  e1a04000          MOV      r4,r0
;;;152        UDEV_T  *d;
;;;153    
;;;154        if (udev == NULL)
0001cc  e3540000          CMP      r4,#0
0001d0  1a000000          BNE      |L1.472|
                  |L1.468|
;;;155            return;
;;;156    
;;;157        if (udev->cfd_buff != NULL)
;;;158            usbh_free_mem(udev->cfd_buff, MAX_DESC_BUFF_SIZE);
;;;159    
;;;160        /*
;;;161         *  Remove it from the global device list
;;;162         */
;;;163        if (g_udev_list == udev)
;;;164        {
;;;165            g_udev_list = g_udev_list->next;
;;;166        }
;;;167        else
;;;168        {
;;;169            d = g_udev_list;
;;;170            while (d != NULL)
;;;171            {
;;;172                if (d->next == udev)
;;;173                {
;;;174                    d->next = udev->next;
;;;175                    break;
;;;176                }
;;;177                d = d->next;
;;;178            }
;;;179        }
;;;180        USB_free(udev);
;;;181        memory_counter(-sizeof(*udev));
;;;182    }
0001d4  e8bd8070          POP      {r4-r6,pc}
                  |L1.472|
0001d8  e594001c          LDR      r0,[r4,#0x1c]         ;157
0001dc  e3500000          CMP      r0,#0                 ;157
0001e0  0a000002          BEQ      |L1.496|
0001e4  e3a01a01          MOV      r1,#0x1000            ;158
0001e8  e594001c          LDR      r0,[r4,#0x1c]         ;158
0001ec  ebfffffe          BL       usbh_free_mem
                  |L1.496|
0001f0  e59f0088          LDR      r0,|L1.640|
0001f4  e5900000          LDR      r0,[r0,#0]            ;163  ; g_udev_list
0001f8  e1500004          CMP      r0,r4                 ;163
0001fc  1a000005          BNE      |L1.536|
000200  e59f0078          LDR      r0,|L1.640|
000204  e5900000          LDR      r0,[r0,#0]            ;165  ; g_udev_list
000208  e5900034          LDR      r0,[r0,#0x34]         ;165
00020c  e59f106c          LDR      r1,|L1.640|
000210  e5810000          STR      r0,[r1,#0]            ;165  ; g_udev_list
000214  ea00000c          B        |L1.588|
                  |L1.536|
000218  e59f0060          LDR      r0,|L1.640|
00021c  e5905000          LDR      r5,[r0,#0]            ;169  ; g_udev_list
000220  ea000006          B        |L1.576|
                  |L1.548|
000224  e5950034          LDR      r0,[r5,#0x34]         ;172
000228  e1500004          CMP      r0,r4                 ;172
00022c  1a000002          BNE      |L1.572|
000230  e5940034          LDR      r0,[r4,#0x34]         ;174
000234  e5850034          STR      r0,[r5,#0x34]         ;174
000238  ea000002          B        |L1.584|
                  |L1.572|
00023c  e5955034          LDR      r5,[r5,#0x34]         ;177
                  |L1.576|
000240  e3550000          CMP      r5,#0                 ;170
000244  1afffff6          BNE      |L1.548|
                  |L1.584|
000248  e1a00000          MOV      r0,r0                 ;175
                  |L1.588|
00024c  e1a00004          MOV      r0,r4                 ;180
000250  ebfffffe          BL       USB_free
000254  e3e00037          MVN      r0,#0x37              ;181
000258  ebfffffe          BL       memory_counter
00025c  e1a00000          MOV      r0,r0
000260  eaffffdb          B        |L1.468|
                  |L1.612|
                          DCD      _unit_used
                  |L1.616|
                          DCD      _mem_pool_buff
                  |L1.620|
                          DCD      _mem_pool
                  |L1.624|
                          DCD      _usbh_mem_used
                  |L1.628|
                          DCD      _usbh_max_mem_used
                  |L1.632|
                          DCD      _mem_pool_used
                  |L1.636|
                          DCD      _sidx
                  |L1.640|
                          DCD      g_udev_list
                  |L1.644|
                          DCD      _dev_addr_pool
                  |L1.648|
                          DCD      _device_addr
                  |L1.652|
00028c  55534220          DCB      "USB static memory: %d/%d, heap used: %d\n",0
000290  73746174
000294  6963206d
000298  656d6f72
00029c  793a2025
0002a0  642f2564
0002a4  2c206865
0002a8  61702075
0002ac  7365643a
0002b0  2025640a
0002b4  00      
0002b5  00                DCB      0
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L1.696|
0002b8  75736268          DCB      "usbh_alloc_mem failed! %d\n",0
0002bc  5f616c6c
0002c0  6f635f6d
0002c4  656d2066
0002c8  61696c65
0002cc  64212025
0002d0  640a00  
0002d3  00                DCB      0
                  |L1.724|
0002d4  616c6c6f          DCB      "alloc_device failed!\n",0
0002d8  635f6465
0002dc  76696365
0002e0  20666169
0002e4  6c656421
0002e8  0a00    
0002ea  00                DCB      0
0002eb  00                DCB      0
                          ENDP

                  alloc_dev_address PROC
;;;183    
;;;184    int  alloc_dev_address(void)
0002ec  e51f006c          LDR      r0,|L1.648|
;;;185    {
;;;186        _device_addr++;
0002f0  e5900000          LDR      r0,[r0,#0]  ; _device_addr
0002f4  e2800001          ADD      r0,r0,#1
0002f8  e51f1078          LDR      r1,|L1.648|
0002fc  e5810000          STR      r0,[r1,#0]  ; _device_addr
;;;187    
;;;188        if (_device_addr >= 128)
000300  e2810000          ADD      r0,r1,#0
000304  e5900000          LDR      r0,[r0,#0]  ; _device_addr
000308  e3500080          CMP      r0,#0x80
00030c  ba000001          BLT      |L1.792|
;;;189            _device_addr = 1;
000310  e3a00001          MOV      r0,#1
000314  e5810000          STR      r0,[r1,#0]  ; _device_addr
                  |L1.792|
;;;190    
;;;191        while (1)
000318  ea000018          B        |L1.896|
                  |L1.796|
;;;192        {
;;;193            if (_dev_addr_pool[_device_addr] == 0)
00031c  e51f00a0          LDR      r0,|L1.644|
000320  e51f10a0          LDR      r1,|L1.648|
000324  e5911000          LDR      r1,[r1,#0]  ; _device_addr
000328  e7d00001          LDRB     r0,[r0,r1]
00032c  e3500000          CMP      r0,#0
000330  1a000007          BNE      |L1.852|
;;;194            {
;;;195                _dev_addr_pool[_device_addr] = 1;
000334  e3a00001          MOV      r0,#1
000338  e51f10bc          LDR      r1,|L1.644|
00033c  e51f20bc          LDR      r2,|L1.648|
000340  e5922000          LDR      r2,[r2,#0]  ; _device_addr
000344  e7c10002          STRB     r0,[r1,r2]
;;;196                return _device_addr;
000348  e51f00c8          LDR      r0,|L1.648|
00034c  e5900000          LDR      r0,[r0,#0]  ; _device_addr
;;;197            }
;;;198            _device_addr++;
;;;199            if (_device_addr >= 128)
;;;200                _device_addr = 1;
;;;201        }
;;;202    }
000350  e12fff1e          BX       lr
                  |L1.852|
000354  e51f00d4          LDR      r0,|L1.648|
000358  e5900000          LDR      r0,[r0,#0]            ;198  ; _device_addr
00035c  e2800001          ADD      r0,r0,#1              ;198
000360  e51f10e0          LDR      r1,|L1.648|
000364  e5810000          STR      r0,[r1,#0]            ;198  ; _device_addr
000368  e2810000          ADD      r0,r1,#0              ;199
00036c  e5900000          LDR      r0,[r0,#0]            ;199  ; _device_addr
000370  e3500080          CMP      r0,#0x80              ;199
000374  ba000001          BLT      |L1.896|
000378  e3a00001          MOV      r0,#1                 ;200
00037c  e5810000          STR      r0,[r1,#0]            ;200  ; _device_addr
                  |L1.896|
000380  eaffffe5          B        |L1.796|
;;;203    
                          ENDP

                  free_dev_address PROC
;;;204    void  free_dev_address(int dev_addr)
000384  e3500080          CMP      r0,#0x80
;;;205    {
;;;206        if (dev_addr < 128)
000388  aa000002          BGE      |L1.920|
;;;207            _dev_addr_pool[dev_addr] = 0;
00038c  e3a01000          MOV      r1,#0
000390  e51f2114          LDR      r2,|L1.644|
000394  e7c21000          STRB     r1,[r2,r0]
                  |L1.920|
;;;208    }
000398  e12fff1e          BX       lr
;;;209    
                          ENDP

                  alloc_utr PROC
;;;214    
;;;215    UTR_T * alloc_utr(UDEV_T *udev)
00039c  e92d4070          PUSH     {r4-r6,lr}
;;;216    {
0003a0  e1a05000          MOV      r5,r0
;;;217        UTR_T  *utr;
;;;218    
;;;219        utr = (UTR_T *)USB_malloc(sizeof(*utr), 16);
0003a4  e3a01010          MOV      r1,#0x10
0003a8  e3a0008c          MOV      r0,#0x8c
0003ac  ebfffffe          BL       USB_malloc
0003b0  e1a04000          MOV      r4,r0
;;;220        if (utr == NULL)
0003b4  e3540000          CMP      r4,#0
0003b8  1a000003          BNE      |L1.972|
;;;221        {
;;;222            USB_error("alloc_utr failed!\n");
0003bc  e28f0f7e          ADR      r0,|L1.1468|
0003c0  ebfffffe          BL       sysprintf
;;;223            return NULL;
0003c4  e3a00000          MOV      r0,#0
                  |L1.968|
;;;224        }
;;;225        memory_counter(sizeof(*utr));
;;;226        memset(utr, 0, sizeof(*utr));
;;;227        utr->udev = udev;
;;;228        mem_debug("[ALLOC] [UTR] - 0x%x\n", (int)utr);
;;;229        return utr;
;;;230    }
0003c8  e8bd8070          POP      {r4-r6,pc}
                  |L1.972|
0003cc  e3a0008c          MOV      r0,#0x8c              ;225
0003d0  ebfffffe          BL       memory_counter
0003d4  e3a0108c          MOV      r1,#0x8c              ;226
0003d8  e1a00004          MOV      r0,r4                 ;226
0003dc  ebfffffe          BL       __aeabi_memclr4
0003e0  e5845000          STR      r5,[r4,#0]            ;227
0003e4  e1a00004          MOV      r0,r4                 ;229
0003e8  eafffff6          B        |L1.968|
;;;231    
                          ENDP

                  free_utr PROC
;;;232    void free_utr(UTR_T *utr)
0003ec  e92d4010          PUSH     {r4,lr}
;;;233    {
0003f0  e1a04000          MOV      r4,r0
;;;234        if (utr == NULL)
0003f4  e3540000          CMP      r4,#0
0003f8  1a000000          BNE      |L1.1024|
                  |L1.1020|
;;;235            return;
;;;236    
;;;237        mem_debug("[FREE] [UTR] - 0x%x\n", (int)utr);
;;;238        USB_free(utr);
;;;239        memory_counter(0-(int)sizeof(*utr));
;;;240    }
0003fc  e8bd8010          POP      {r4,pc}
                  |L1.1024|
000400  e1a00004          MOV      r0,r4                 ;238
000404  ebfffffe          BL       USB_free
000408  e3e0008b          MVN      r0,#0x8b              ;239
00040c  ebfffffe          BL       memory_counter
000410  e1a00000          MOV      r0,r0
000414  eafffff8          B        |L1.1020|
;;;241    
                          ENDP

                  alloc_ohci_ED PROC
;;;245    
;;;246    ED_T * alloc_ohci_ED(void)
000418  e92d4070          PUSH     {r4-r6,lr}
;;;247    {
;;;248        int    i;
;;;249        ED_T   *ed;
;;;250    
;;;251        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
00041c  e3a04000          MOV      r4,#0
000420  ea000013          B        |L1.1140|
                  |L1.1060|
;;;252        {
;;;253            if (_unit_used[i] == 0)
000424  e51f01c8          LDR      r0,|L1.612|
000428  e7d00004          LDRB     r0,[r0,r4]
00042c  e3500000          CMP      r0,#0
000430  1a00000e          BNE      |L1.1136|
;;;254            {
;;;255                _unit_used[i] = 1;
000434  e3a00001          MOV      r0,#1
000438  e51f11dc          LDR      r1,|L1.612|
00043c  e7c10004          STRB     r0,[r1,r4]
;;;256                _mem_pool_used++;
000440  e51f01d0          LDR      r0,|L1.632|
000444  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000448  e2800001          ADD      r0,r0,#1
00044c  e51f11dc          LDR      r1,|L1.632|
000450  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;257                ed = (ED_T *)_mem_pool[i];
000454  e51f01f0          LDR      r0,|L1.620|
000458  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;258                memset(ed, 0, sizeof(*ed));
00045c  e3a01018          MOV      r1,#0x18
000460  e1a00005          MOV      r0,r5
000464  ebfffffe          BL       __aeabi_memclr4
;;;259                mem_debug("[ALLOC] [ED] - 0x%x\n", (int)ed);
;;;260                return ed;
000468  e1a00005          MOV      r0,r5
                  |L1.1132|
;;;261            }
;;;262        }
;;;263        USB_error("alloc_ohci_ED failed!\n");
;;;264        return NULL;
;;;265    }
00046c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1136|
000470  e2844001          ADD      r4,r4,#1              ;251
                  |L1.1140|
000474  e3540c01          CMP      r4,#0x100             ;251
000478  baffffe9          BLT      |L1.1060|
00047c  e28f0f53          ADR      r0,|L1.1488|
000480  ebfffffe          BL       sysprintf
000484  e3a00000          MOV      r0,#0                 ;264
000488  eafffff7          B        |L1.1132|
;;;266    
                          ENDP

                  free_ohci_ED PROC
;;;267    void free_ohci_ED(ED_T *ed)
00048c  e1a01000          MOV      r1,r0
;;;268    {
;;;269        int      i;
;;;270    
;;;271        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
000490  e3a00000          MOV      r0,#0
000494  ea00000d          B        |L1.1232|
                  |L1.1176|
;;;272        {
;;;273            if ((uint32_t)_mem_pool[i] == (uint32_t)ed)
000498  e51f2234          LDR      r2,|L1.620|
00049c  e7922100          LDR      r2,[r2,r0,LSL #2]
0004a0  e1520001          CMP      r2,r1
0004a4  1a000008          BNE      |L1.1228|
;;;274            {
;;;275                mem_debug("[FREE]  [ED] - 0x%x\n", (int)ed);
;;;276                _unit_used[i] = 0;
0004a8  e3a02000          MOV      r2,#0
0004ac  e51f3250          LDR      r3,|L1.612|
0004b0  e7c32000          STRB     r2,[r3,r0]
;;;277                _mem_pool_used--;
0004b4  e51f2244          LDR      r2,|L1.632|
0004b8  e5922000          LDR      r2,[r2,#0]  ; _mem_pool_used
0004bc  e2422001          SUB      r2,r2,#1
0004c0  e51f3250          LDR      r3,|L1.632|
0004c4  e5832000          STR      r2,[r3,#0]  ; _mem_pool_used
                  |L1.1224|
;;;278                return;
;;;279            }
;;;280        }
;;;281        USB_debug("free_ohci_ED - not found! (ignored in case of multiple UTR)\n");
;;;282    }
0004c8  e12fff1e          BX       lr
                  |L1.1228|
0004cc  e2800001          ADD      r0,r0,#1              ;271
                  |L1.1232|
0004d0  e3500c01          CMP      r0,#0x100             ;271
0004d4  baffffef          BLT      |L1.1176|
0004d8  e1a00000          MOV      r0,r0
0004dc  eafffff9          B        |L1.1224|
;;;283    
                          ENDP

                  alloc_ohci_TD PROC
;;;286    /*--------------------------------------------------------------------------*/
;;;287    TD_T * alloc_ohci_TD(UTR_T *utr)
0004e0  e92d4070          PUSH     {r4-r6,lr}
;;;288    {
0004e4  e1a06000          MOV      r6,r0
;;;289        int    i;
;;;290        TD_T   *td;
;;;291    
;;;292        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
0004e8  e3a04000          MOV      r4,#0
0004ec  ea000014          B        |L1.1348|
                  |L1.1264|
;;;293        {
;;;294            if (_unit_used[i] == 0)
0004f0  e51f0294          LDR      r0,|L1.612|
0004f4  e7d00004          LDRB     r0,[r0,r4]
0004f8  e3500000          CMP      r0,#0
0004fc  1a00000f          BNE      |L1.1344|
;;;295            {
;;;296                _unit_used[i] = 1;
000500  e3a00001          MOV      r0,#1
000504  e51f12a8          LDR      r1,|L1.612|
000508  e7c10004          STRB     r0,[r1,r4]
;;;297                _mem_pool_used++;
00050c  e51f029c          LDR      r0,|L1.632|
000510  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000514  e2800001          ADD      r0,r0,#1
000518  e51f12a8          LDR      r1,|L1.632|
00051c  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;298                td = (TD_T *)_mem_pool[i];
000520  e51f02bc          LDR      r0,|L1.620|
000524  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;299    
;;;300                memset(td, 0, sizeof(*td));
000528  e3a01030          MOV      r1,#0x30
00052c  e1a00005          MOV      r0,r5
000530  ebfffffe          BL       __aeabi_memclr4
;;;301                td->utr = utr;
000534  e5856028          STR      r6,[r5,#0x28]
;;;302                mem_debug("[ALLOC] [TD] - 0x%x\n", (int)td);
;;;303                return td;
000538  e1a00005          MOV      r0,r5
                  |L1.1340|
;;;304            }
;;;305        }
;;;306        USB_error("alloc_ohci_TD failed!\n");
;;;307        return NULL;
;;;308    }
00053c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1344|
000540  e2844001          ADD      r4,r4,#1              ;292
                  |L1.1348|
000544  e3540c01          CMP      r4,#0x100             ;292
000548  baffffe8          BLT      |L1.1264|
00054c  e28f0094          ADR      r0,|L1.1512|
000550  ebfffffe          BL       sysprintf
000554  e3a00000          MOV      r0,#0                 ;307
000558  eafffff7          B        |L1.1340|
;;;309    
                          ENDP

                  free_ohci_TD PROC
;;;310    void free_ohci_TD(TD_T *td)
00055c  e92d4070          PUSH     {r4-r6,lr}
;;;311    {
000560  e1a05000          MOV      r5,r0
;;;312        int   i;
;;;313    
;;;314        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
000564  e3a04000          MOV      r4,#0
000568  ea00000d          B        |L1.1444|
                  |L1.1388|
;;;315        {
;;;316            if ((uint32_t)_mem_pool[i] == (uint32_t)td)
00056c  e51f0308          LDR      r0,|L1.620|
000570  e7900104          LDR      r0,[r0,r4,LSL #2]
000574  e1500005          CMP      r0,r5
000578  1a000008          BNE      |L1.1440|
;;;317            {
;;;318                mem_debug("[FREE]  [TD] - 0x%x\n", (int)td);
;;;319                _unit_used[i] = 0;
00057c  e3a00000          MOV      r0,#0
000580  e51f1324          LDR      r1,|L1.612|
000584  e7c10004          STRB     r0,[r1,r4]
;;;320                _mem_pool_used--;
000588  e51f0318          LDR      r0,|L1.632|
00058c  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000590  e2400001          SUB      r0,r0,#1
000594  e51f1324          LDR      r1,|L1.632|
000598  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
                  |L1.1436|
;;;321                return;
;;;322            }
;;;323        }
;;;324        USB_error("free_ohci_TD - not found!\n");
;;;325    }
00059c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1440|
0005a0  e2844001          ADD      r4,r4,#1              ;314
                  |L1.1444|
0005a4  e3540c01          CMP      r4,#0x100             ;314
0005a8  baffffef          BLT      |L1.1388|
0005ac  e28f004c          ADR      r0,|L1.1536|
0005b0  ebfffffe          BL       sysprintf
0005b4  e1a00000          MOV      r0,r0
0005b8  eafffff7          B        |L1.1436|
                  |L1.1468|
0005bc  616c6c6f          DCB      "alloc_utr failed!\n",0
0005c0  635f7574
0005c4  72206661
0005c8  696c6564
0005cc  210a00  
0005cf  00                DCB      0
                  |L1.1488|
0005d0  616c6c6f          DCB      "alloc_ohci_ED failed!\n",0
0005d4  635f6f68
0005d8  63695f45
0005dc  44206661
0005e0  696c6564
0005e4  210a00  
0005e7  00                DCB      0
                  |L1.1512|
0005e8  616c6c6f          DCB      "alloc_ohci_TD failed!\n",0
0005ec  635f6f68
0005f0  63695f54
0005f4  44206661
0005f8  696c6564
0005fc  210a00  
0005ff  00                DCB      0
                  |L1.1536|
000600  66726565          DCB      "free_ohci_TD - not found!\n",0
000604  5f6f6863
000608  695f5444
00060c  202d206e
000610  6f742066
000614  6f756e64
000618  210a00  
00061b  00                DCB      0
                          ENDP

                  alloc_ehci_QH PROC
;;;329    /*--------------------------------------------------------------------------*/
;;;330    QH_T * alloc_ehci_QH(void)
00061c  e92d4070          PUSH     {r4-r6,lr}
;;;331    {
;;;332        int    i;
;;;333        QH_T   *qh = NULL;
000620  e3a05000          MOV      r5,#0
;;;334    
;;;335        for (i = (_sidx+1) % MEM_POOL_UNIT_NUM; i != _sidx; i = (i+1) % MEM_POOL_UNIT_NUM)
000624  e51f13b0          LDR      r1,|L1.636|
000628  e5911000          LDR      r1,[r1,#0]  ; _sidx
00062c  e2810001          ADD      r0,r1,#1
000630  e1a01fc0          ASR      r1,r0,#31
000634  e0801c21          ADD      r1,r0,r1,LSR #24
000638  e1a01441          ASR      r1,r1,#8
00063c  e0404401          SUB      r4,r0,r1,LSL #8
000640  ea000018          B        |L1.1704|
                  |L1.1604|
;;;336        {
;;;337            if (_unit_used[i] == 0)
000644  e51f03e8          LDR      r0,|L1.612|
000648  e7d00004          LDRB     r0,[r0,r4]
00064c  e3500000          CMP      r0,#0
000650  1a00000f          BNE      |L1.1684|
;;;338            {
;;;339                _unit_used[i] = 1;
000654  e3a00001          MOV      r0,#1
000658  e51f13fc          LDR      r1,|L1.612|
00065c  e7c10004          STRB     r0,[r1,r4]
;;;340                _sidx = i;
000660  e51f03ec          LDR      r0,|L1.636|
000664  e5804000          STR      r4,[r0,#0]  ; _sidx
;;;341                _mem_pool_used++;
000668  e51f03f8          LDR      r0,|L1.632|
00066c  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000670  e2800001          ADD      r0,r0,#1
000674  e51f1404          LDR      r1,|L1.632|
000678  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;342                qh = (QH_T *)_mem_pool[i];
00067c  e51f0418          LDR      r0,|L1.620|
000680  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;343                memset(qh, 0, sizeof(*qh));
000684  e3a0103c          MOV      r1,#0x3c
000688  e1a00005          MOV      r0,r5
00068c  ebfffffe          BL       __aeabi_memclr4
;;;344                mem_debug("[ALLOC] [QH] - 0x%x\n", (int)qh);
;;;345                break;
000690  ea000008          B        |L1.1720|
                  |L1.1684|
000694  e2840001          ADD      r0,r4,#1              ;335
000698  e1a01fc0          ASR      r1,r0,#31             ;335
00069c  e0801c21          ADD      r1,r0,r1,LSR #24      ;335
0006a0  e1a01441          ASR      r1,r1,#8              ;335
0006a4  e0404401          SUB      r4,r0,r1,LSL #8       ;335
                  |L1.1704|
0006a8  e51f0434          LDR      r0,|L1.636|
0006ac  e5900000          LDR      r0,[r0,#0]            ;335  ; _sidx
0006b0  e1540000          CMP      r4,r0                 ;335
0006b4  1affffe2          BNE      |L1.1604|
                  |L1.1720|
0006b8  e1a00000          MOV      r0,r0
;;;346            }
;;;347        }
;;;348        if (qh == NULL)
0006bc  e3550000          CMP      r5,#0
0006c0  1a000003          BNE      |L1.1748|
;;;349        {
;;;350            USB_error("alloc_ehci_QH failed!\n");
0006c4  e28f0fa2          ADR      r0,|L1.2388|
0006c8  ebfffffe          BL       sysprintf
;;;351            return NULL;
0006cc  e3a00000          MOV      r0,#0
                  |L1.1744|
;;;352        }
;;;353        qh->Curr_qTD        = QTD_LIST_END;
;;;354        qh->OL_Next_qTD     = QTD_LIST_END;
;;;355        qh->OL_Alt_Next_qTD = QTD_LIST_END;
;;;356        qh->OL_Token        = QTD_STS_HALT;
;;;357        return qh;
;;;358    }
0006d0  e8bd8070          POP      {r4-r6,pc}
                  |L1.1748|
0006d4  e3a00001          MOV      r0,#1                 ;353
0006d8  e585000c          STR      r0,[r5,#0xc]          ;353
0006dc  e5850010          STR      r0,[r5,#0x10]         ;354
0006e0  e5850014          STR      r0,[r5,#0x14]         ;355
0006e4  e3a00040          MOV      r0,#0x40              ;356
0006e8  e5850018          STR      r0,[r5,#0x18]         ;356
0006ec  e1a00005          MOV      r0,r5                 ;357
0006f0  eafffff6          B        |L1.1744|
;;;359    
                          ENDP

                  free_ehci_QH PROC
;;;360    void free_ehci_QH(QH_T *qh)
0006f4  e1a01000          MOV      r1,r0
;;;361    {
;;;362        int      i;
;;;363    
;;;364        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
0006f8  e3a00000          MOV      r0,#0
0006fc  ea00000d          B        |L1.1848|
                  |L1.1792|
;;;365        {
;;;366            if ((uint32_t)_mem_pool[i] == (uint32_t)qh)
000700  e51f249c          LDR      r2,|L1.620|
000704  e7922100          LDR      r2,[r2,r0,LSL #2]
000708  e1520001          CMP      r2,r1
00070c  1a000008          BNE      |L1.1844|
;;;367            {
;;;368                mem_debug("[FREE]  [QH] - 0x%x\n", (int)qh);
;;;369                _unit_used[i] = 0;
000710  e3a02000          MOV      r2,#0
000714  e51f34b8          LDR      r3,|L1.612|
000718  e7c32000          STRB     r2,[r3,r0]
;;;370                _mem_pool_used--;
00071c  e51f24ac          LDR      r2,|L1.632|
000720  e5922000          LDR      r2,[r2,#0]  ; _mem_pool_used
000724  e2422001          SUB      r2,r2,#1
000728  e51f34b8          LDR      r3,|L1.632|
00072c  e5832000          STR      r2,[r3,#0]  ; _mem_pool_used
                  |L1.1840|
;;;371                return;
;;;372            }
;;;373        }
;;;374        USB_debug("free_ehci_QH - not found! (ignored in case of multiple UTR)\n");
;;;375    }
000730  e12fff1e          BX       lr
                  |L1.1844|
000734  e2800001          ADD      r0,r0,#1              ;364
                  |L1.1848|
000738  e3500c01          CMP      r0,#0x100             ;364
00073c  baffffef          BLT      |L1.1792|
000740  e1a00000          MOV      r0,r0
000744  eafffff9          B        |L1.1840|
;;;376    
                          ENDP

                  alloc_ehci_qTD PROC
;;;379    /*--------------------------------------------------------------------------*/
;;;380    qTD_T * alloc_ehci_qTD(UTR_T *utr)
000748  e92d4070          PUSH     {r4-r6,lr}
;;;381    {
00074c  e1a06000          MOV      r6,r0
;;;382        int     i;
;;;383        qTD_T   *qtd;
;;;384    
;;;385        for (i = (_sidx+1) % MEM_POOL_UNIT_NUM; i != _sidx; i = (i+1) % MEM_POOL_UNIT_NUM)
000750  e51f14dc          LDR      r1,|L1.636|
000754  e5911000          LDR      r1,[r1,#0]  ; _sidx
000758  e2810001          ADD      r0,r1,#1
00075c  e1a01fc0          ASR      r1,r0,#31
000760  e0801c21          ADD      r1,r0,r1,LSR #24
000764  e1a01441          ASR      r1,r1,#8
000768  e0404401          SUB      r4,r0,r1,LSL #8
00076c  ea00001f          B        |L1.2032|
                  |L1.1904|
;;;386        {
;;;387            if (_unit_used[i] == 0)
000770  e51f0514          LDR      r0,|L1.612|
000774  e7d00004          LDRB     r0,[r0,r4]
000778  e3500000          CMP      r0,#0
00077c  1a000016          BNE      |L1.2012|
;;;388            {
;;;389                _unit_used[i] = 1;
000780  e3a00001          MOV      r0,#1
000784  e51f1528          LDR      r1,|L1.612|
000788  e7c10004          STRB     r0,[r1,r4]
;;;390                _sidx = i;
00078c  e51f0518          LDR      r0,|L1.636|
000790  e5804000          STR      r4,[r0,#0]  ; _sidx
;;;391                _mem_pool_used++;
000794  e51f0524          LDR      r0,|L1.632|
000798  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
00079c  e2800001          ADD      r0,r0,#1
0007a0  e51f1530          LDR      r1,|L1.632|
0007a4  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;392                qtd = (qTD_T *)_mem_pool[i];
0007a8  e51f0544          LDR      r0,|L1.620|
0007ac  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;393    
;;;394                memset(qtd, 0, sizeof(*qtd));
0007b0  e3a01030          MOV      r1,#0x30
0007b4  e1a00005          MOV      r0,r5
0007b8  ebfffffe          BL       __aeabi_memclr4
;;;395                qtd->Next_qTD     = QTD_LIST_END;
0007bc  e3a00001          MOV      r0,#1
0007c0  e5850000          STR      r0,[r5,#0]
;;;396                qtd->Alt_Next_qTD = QTD_LIST_END;
0007c4  e5850004          STR      r0,[r5,#4]
;;;397                qtd->Token        = 0x1197B7F; // QTD_STS_HALT;  visit_qtd() will not remove a qTD with this mark. It means the qTD still not ready for transfer.
0007c8  e59f019c          LDR      r0,|L1.2412|
0007cc  e5850008          STR      r0,[r5,#8]
;;;398                qtd->utr = utr;
0007d0  e5856020          STR      r6,[r5,#0x20]
;;;399                mem_debug("[ALLOC] [qTD] - 0x%x\n", (int)qtd);
;;;400                return qtd;
0007d4  e1a00005          MOV      r0,r5
                  |L1.2008|
;;;401            }
;;;402        }
;;;403        USB_error("alloc_ehci_qTD failed!\n");
;;;404        return NULL;
;;;405    }
0007d8  e8bd8070          POP      {r4-r6,pc}
                  |L1.2012|
0007dc  e2840001          ADD      r0,r4,#1              ;385
0007e0  e1a01fc0          ASR      r1,r0,#31             ;385
0007e4  e0801c21          ADD      r1,r0,r1,LSR #24      ;385
0007e8  e1a01441          ASR      r1,r1,#8              ;385
0007ec  e0404401          SUB      r4,r0,r1,LSL #8       ;385
                  |L1.2032|
0007f0  e51f057c          LDR      r0,|L1.636|
0007f4  e5900000          LDR      r0,[r0,#0]            ;385  ; _sidx
0007f8  e1540000          CMP      r4,r0                 ;385
0007fc  1affffdb          BNE      |L1.1904|
000800  e28f0f5a          ADR      r0,|L1.2416|
000804  ebfffffe          BL       sysprintf
000808  e3a00000          MOV      r0,#0                 ;404
00080c  eafffff1          B        |L1.2008|
;;;406    
                          ENDP

                  free_ehci_qTD PROC
;;;407    void free_ehci_qTD(qTD_T *qtd)
000810  e92d4070          PUSH     {r4-r6,lr}
;;;408    {
000814  e1a05000          MOV      r5,r0
;;;409        int   i;
;;;410    
;;;411        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
000818  e3a04000          MOV      r4,#0
00081c  ea00000d          B        |L1.2136|
                  |L1.2080|
;;;412        {
;;;413            if ((uint32_t)_mem_pool[i] == (uint32_t)qtd)
000820  e51f05bc          LDR      r0,|L1.620|
000824  e7900104          LDR      r0,[r0,r4,LSL #2]
000828  e1500005          CMP      r0,r5
00082c  1a000008          BNE      |L1.2132|
;;;414            {
;;;415                mem_debug("[FREE]  [qTD] - 0x%x\n", (int)qtd);
;;;416                _unit_used[i] = 0;
000830  e3a00000          MOV      r0,#0
000834  e51f15d8          LDR      r1,|L1.612|
000838  e7c10004          STRB     r0,[r1,r4]
;;;417                _mem_pool_used--;
00083c  e51f05cc          LDR      r0,|L1.632|
000840  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000844  e2400001          SUB      r0,r0,#1
000848  e51f15d8          LDR      r1,|L1.632|
00084c  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
                  |L1.2128|
;;;418                return;
;;;419            }
;;;420        }
;;;421        USB_error("free_ehci_qTD 0x%x - not found!\n", (int)qtd);
;;;422    }
000850  e8bd8070          POP      {r4-r6,pc}
                  |L1.2132|
000854  e2844001          ADD      r4,r4,#1              ;411
                  |L1.2136|
000858  e3540c01          CMP      r4,#0x100             ;411
00085c  baffffef          BLT      |L1.2080|
000860  e1a01005          MOV      r1,r5                 ;421
000864  e28f0f47          ADR      r0,|L1.2440|
000868  ebfffffe          BL       sysprintf
00086c  e1a00000          MOV      r0,r0
000870  eafffff6          B        |L1.2128|
;;;423    
                          ENDP

                  alloc_ehci_iTD PROC
;;;426    /*--------------------------------------------------------------------------*/
;;;427    iTD_T * alloc_ehci_iTD(void)
000874  e92d4070          PUSH     {r4-r6,lr}
;;;428    {
;;;429        int     i;
;;;430        iTD_T   *itd;
;;;431    
;;;432        for (i = (_sidx+1) % MEM_POOL_UNIT_NUM; i != _sidx; i = (i+1) % MEM_POOL_UNIT_NUM)
000878  e51f1604          LDR      r1,|L1.636|
00087c  e5911000          LDR      r1,[r1,#0]  ; _sidx
000880  e2810001          ADD      r0,r1,#1
000884  e1a01fc0          ASR      r1,r0,#31
000888  e0801c21          ADD      r1,r0,r1,LSR #24
00088c  e1a01441          ASR      r1,r1,#8
000890  e0404401          SUB      r4,r0,r1,LSL #8
000894  ea000026          B        |L1.2356|
                  |L1.2200|
;;;433        {
;;;434            if (i+2 >= MEM_POOL_UNIT_NUM)
000898  e2840002          ADD      r0,r4,#2
00089c  e3500c01          CMP      r0,#0x100
0008a0  ba000000          BLT      |L1.2216|
;;;435                continue;
0008a4  ea00001d          B        |L1.2336|
                  |L1.2216|
;;;436    
;;;437            if ((_unit_used[i] == 0) && (_unit_used[i+1] == 0))
0008a8  e51f064c          LDR      r0,|L1.612|
0008ac  e7d00004          LDRB     r0,[r0,r4]
0008b0  e3500000          CMP      r0,#0
0008b4  1a000018          BNE      |L1.2332|
0008b8  e51f065c          LDR      r0,|L1.612|
0008bc  e2841001          ADD      r1,r4,#1
0008c0  e7d00001          LDRB     r0,[r0,r1]
0008c4  e3500000          CMP      r0,#0
0008c8  1a000013          BNE      |L1.2332|
;;;438            {
;;;439                _unit_used[i] = _unit_used[i+1] = 1;
0008cc  e3a00001          MOV      r0,#1
0008d0  e51f1674          LDR      r1,|L1.612|
0008d4  e2842001          ADD      r2,r4,#1
0008d8  e7c10002          STRB     r0,[r1,r2]
0008dc  e7c10004          STRB     r0,[r1,r4]
;;;440                _sidx = i+1;
0008e0  e2840001          ADD      r0,r4,#1
0008e4  e51f1670          LDR      r1,|L1.636|
0008e8  e5810000          STR      r0,[r1,#0]  ; _sidx
;;;441                _mem_pool_used += 2;
0008ec  e51f067c          LDR      r0,|L1.632|
0008f0  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
0008f4  e2800002          ADD      r0,r0,#2
0008f8  e51f1688          LDR      r1,|L1.632|
0008fc  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;442                itd = (iTD_T *)_mem_pool[i];
000900  e51f069c          LDR      r0,|L1.620|
000904  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;443                memset(itd, 0, sizeof(*itd));
000908  e3a01058          MOV      r1,#0x58
00090c  e1a00005          MOV      r0,r5
000910  ebfffffe          BL       __aeabi_memclr4
;;;444                mem_debug("[ALLOC] [iTD] - 0x%x\n", (int)itd);
;;;445                return itd;
000914  e1a00005          MOV      r0,r5
                  |L1.2328|
;;;446            }
;;;447        }
;;;448        USB_error("alloc_ehci_iTD failed!\n");
;;;449        return NULL;
;;;450    }
000918  e8bd8070          POP      {r4-r6,pc}
                  |L1.2332|
00091c  e1a00000          MOV      r0,r0                 ;435
                  |L1.2336|
000920  e2840001          ADD      r0,r4,#1              ;432
000924  e1a01fc0          ASR      r1,r0,#31             ;432
000928  e0801c21          ADD      r1,r0,r1,LSR #24      ;432
00092c  e1a01441          ASR      r1,r1,#8              ;432
000930  e0404401          SUB      r4,r0,r1,LSL #8       ;432
                  |L1.2356|
000934  e51f06c0          LDR      r0,|L1.636|
000938  e5900000          LDR      r0,[r0,#0]            ;432  ; _sidx
00093c  e1540000          CMP      r4,r0                 ;432
000940  1affffd4          BNE      |L1.2200|
000944  e28f0060          ADR      r0,|L1.2476|
000948  ebfffffe          BL       sysprintf
00094c  e3a00000          MOV      r0,#0                 ;449
000950  eafffff0          B        |L1.2328|
                  |L1.2388|
000954  616c6c6f          DCB      "alloc_ehci_QH failed!\n",0
000958  635f6568
00095c  63695f51
000960  48206661
000964  696c6564
000968  210a00  
00096b  00                DCB      0
                  |L1.2412|
                          DCD      0x01197b7f
                  |L1.2416|
000970  616c6c6f          DCB      "alloc_ehci_qTD failed!\n",0
000974  635f6568
000978  63695f71
00097c  54442066
000980  61696c65
000984  64210a00
                  |L1.2440|
000988  66726565          DCB      "free_ehci_qTD 0x%x - not found!\n",0
00098c  5f656863
000990  695f7154
000994  44203078
000998  2578202d
00099c  206e6f74
0009a0  20666f75
0009a4  6e64210a
0009a8  00      
0009a9  00                DCB      0
0009aa  00                DCB      0
0009ab  00                DCB      0
                  |L1.2476|
0009ac  616c6c6f          DCB      "alloc_ehci_iTD failed!\n",0
0009b0  635f6568
0009b4  63695f69
0009b8  54442066
0009bc  61696c65
0009c0  64210a00
                          ENDP

                  free_ehci_iTD PROC
;;;451    
;;;452    void free_ehci_iTD(iTD_T *itd)
0009c4  e92d4070          PUSH     {r4-r6,lr}
;;;453    {
0009c8  e1a05000          MOV      r5,r0
;;;454        int   i;
;;;455    
;;;456        for (i = 0; i+1 < MEM_POOL_UNIT_NUM; i++)
0009cc  e3a04000          MOV      r4,#0
0009d0  ea00000f          B        |L1.2580|
                  |L1.2516|
;;;457        {
;;;458            if ((uint32_t)_mem_pool[i] == (uint32_t)itd)
0009d4  e51f0770          LDR      r0,|L1.620|
0009d8  e7900104          LDR      r0,[r0,r4,LSL #2]
0009dc  e1500005          CMP      r0,r5
0009e0  1a00000a          BNE      |L1.2576|
;;;459            {
;;;460                mem_debug("[FREE]  [iTD] - 0x%x\n", (int)itd);
;;;461                _unit_used[i] = _unit_used[i+1] = 0;
0009e4  e3a00000          MOV      r0,#0
0009e8  e51f178c          LDR      r1,|L1.612|
0009ec  e2842001          ADD      r2,r4,#1
0009f0  e7c10002          STRB     r0,[r1,r2]
0009f4  e7c10004          STRB     r0,[r1,r4]
;;;462                _mem_pool_used -= 2;
0009f8  e51f0788          LDR      r0,|L1.632|
0009fc  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000a00  e2400002          SUB      r0,r0,#2
000a04  e51f1794          LDR      r1,|L1.632|
000a08  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
                  |L1.2572|
;;;463                return;
;;;464            }
;;;465        }
;;;466        USB_error("free_ehci_iTD 0x%x - not found!\n", (int)itd);
;;;467    }
000a0c  e8bd8070          POP      {r4-r6,pc}
                  |L1.2576|
000a10  e2844001          ADD      r4,r4,#1              ;456
                  |L1.2580|
000a14  e2840001          ADD      r0,r4,#1              ;456
000a18  e3500c01          CMP      r0,#0x100             ;456
000a1c  baffffec          BLT      |L1.2516|
000a20  e1a01005          MOV      r1,r5                 ;466
000a24  e28f0f46          ADR      r0,|L1.2884|
000a28  ebfffffe          BL       sysprintf
000a2c  e1a00000          MOV      r0,r0
000a30  eafffff5          B        |L1.2572|
;;;468    
                          ENDP

                  alloc_ehci_siTD PROC
;;;471    /*--------------------------------------------------------------------------*/
;;;472    siTD_T * alloc_ehci_siTD(void)
000a34  e92d4070          PUSH     {r4-r6,lr}
;;;473    {
;;;474        int     i;
;;;475        siTD_T  *sitd;
;;;476    
;;;477        for (i = (_sidx+1) % MEM_POOL_UNIT_NUM; i != _sidx; i = (i+1) % MEM_POOL_UNIT_NUM)
000a38  e51f17c4          LDR      r1,|L1.636|
000a3c  e5911000          LDR      r1,[r1,#0]  ; _sidx
000a40  e2810001          ADD      r0,r1,#1
000a44  e1a01fc0          ASR      r1,r0,#31
000a48  e0801c21          ADD      r1,r0,r1,LSR #24
000a4c  e1a01441          ASR      r1,r1,#8
000a50  e0404401          SUB      r4,r0,r1,LSL #8
000a54  ea000019          B        |L1.2752|
                  |L1.2648|
;;;478        {
;;;479            if (_unit_used[i] == 0)
000a58  e51f07fc          LDR      r0,|L1.612|
000a5c  e7d00004          LDRB     r0,[r0,r4]
000a60  e3500000          CMP      r0,#0
000a64  1a000010          BNE      |L1.2732|
;;;480            {
;;;481                _unit_used[i] = 1;
000a68  e3a00001          MOV      r0,#1
000a6c  e51f1810          LDR      r1,|L1.612|
000a70  e7c10004          STRB     r0,[r1,r4]
;;;482                _sidx = i;
000a74  e51f0800          LDR      r0,|L1.636|
000a78  e5804000          STR      r4,[r0,#0]  ; _sidx
;;;483                _mem_pool_used ++;
000a7c  e51f080c          LDR      r0,|L1.632|
000a80  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000a84  e2800001          ADD      r0,r0,#1
000a88  e51f1818          LDR      r1,|L1.632|
000a8c  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
;;;484                sitd = (siTD_T *)_mem_pool[i];
000a90  e51f082c          LDR      r0,|L1.620|
000a94  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;485                memset(sitd, 0, sizeof(*sitd));
000a98  e3a01030          MOV      r1,#0x30
000a9c  e1a00005          MOV      r0,r5
000aa0  ebfffffe          BL       __aeabi_memclr4
;;;486                mem_debug("[ALLOC] [siTD] - 0x%x\n", (int)sitd);
;;;487                return sitd;
000aa4  e1a00005          MOV      r0,r5
                  |L1.2728|
;;;488            }
;;;489        }
;;;490        USB_error("alloc_ehci_siTD failed!\n");
;;;491        return NULL;
;;;492    }
000aa8  e8bd8070          POP      {r4-r6,pc}
                  |L1.2732|
000aac  e2840001          ADD      r0,r4,#1              ;477
000ab0  e1a01fc0          ASR      r1,r0,#31             ;477
000ab4  e0801c21          ADD      r1,r0,r1,LSR #24      ;477
000ab8  e1a01441          ASR      r1,r1,#8              ;477
000abc  e0404401          SUB      r4,r0,r1,LSL #8       ;477
                  |L1.2752|
000ac0  e51f084c          LDR      r0,|L1.636|
000ac4  e5900000          LDR      r0,[r0,#0]            ;477  ; _sidx
000ac8  e1540000          CMP      r4,r0                 ;477
000acc  1affffe1          BNE      |L1.2648|
000ad0  e28f0090          ADR      r0,|L1.2920|
000ad4  ebfffffe          BL       sysprintf
000ad8  e3a00000          MOV      r0,#0                 ;491
000adc  eafffff1          B        |L1.2728|
;;;493    
                          ENDP

                  free_ehci_siTD PROC
;;;494    void free_ehci_siTD(siTD_T *sitd)
000ae0  e92d4070          PUSH     {r4-r6,lr}
;;;495    {
000ae4  e1a05000          MOV      r5,r0
;;;496        int   i;
;;;497    
;;;498        for (i = 0; i < MEM_POOL_UNIT_NUM; i++)
000ae8  e3a04000          MOV      r4,#0
000aec  ea00000d          B        |L1.2856|
                  |L1.2800|
;;;499        {
;;;500            if ((uint32_t)_mem_pool[i] == (uint32_t)sitd)
000af0  e51f088c          LDR      r0,|L1.620|
000af4  e7900104          LDR      r0,[r0,r4,LSL #2]
000af8  e1500005          CMP      r0,r5
000afc  1a000008          BNE      |L1.2852|
;;;501            {
;;;502                mem_debug("[FREE]  [siTD] - 0x%x\n", (int)sitd);
;;;503                _unit_used[i] = 0;
000b00  e3a00000          MOV      r0,#0
000b04  e51f18a8          LDR      r1,|L1.612|
000b08  e7c10004          STRB     r0,[r1,r4]
;;;504                _mem_pool_used--;
000b0c  e51f089c          LDR      r0,|L1.632|
000b10  e5900000          LDR      r0,[r0,#0]  ; _mem_pool_used
000b14  e2400001          SUB      r0,r0,#1
000b18  e51f18a8          LDR      r1,|L1.632|
000b1c  e5810000          STR      r0,[r1,#0]  ; _mem_pool_used
                  |L1.2848|
;;;505                return;
;;;506            }
;;;507        }
;;;508        USB_error("free_ehci_siTD 0x%x - not found!\n", (int)sitd);
;;;509    }
000b20  e8bd8070          POP      {r4-r6,pc}
                  |L1.2852|
000b24  e2844001          ADD      r4,r4,#1              ;498
                  |L1.2856|
000b28  e3540c01          CMP      r4,#0x100             ;498
000b2c  baffffef          BLT      |L1.2800|
000b30  e1a01005          MOV      r1,r5                 ;508
000b34  e28f0048          ADR      r0,|L1.2948|
000b38  ebfffffe          BL       sysprintf
000b3c  e1a00000          MOV      r0,r0
000b40  eafffff6          B        |L1.2848|
;;;510    
                          ENDP

                  |L1.2884|
000b44  66726565          DCB      "free_ehci_iTD 0x%x - not found!\n",0
000b48  5f656863
000b4c  695f6954
000b50  44203078
000b54  2578202d
000b58  206e6f74
000b5c  20666f75
000b60  6e64210a
000b64  00      
000b65  00                DCB      0
000b66  00                DCB      0
000b67  00                DCB      0
                  |L1.2920|
000b68  616c6c6f          DCB      "alloc_ehci_siTD failed!\n",0
000b6c  635f6568
000b70  63695f73
000b74  69544420
000b78  6661696c
000b7c  6564210a
000b80  00      
000b81  00                DCB      0
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  66726565          DCB      "free_ehci_siTD 0x%x - not found!\n",0
000b88  5f656863
000b8c  695f7369
000b90  54442030
000b94  78257820
000b98  2d206e6f
000b9c  7420666f
000ba0  756e6421
000ba4  0a00    
000ba6  00                DCB      0
000ba7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=10

                  _mem_pool_buff
                          %        32768
                  _mem_pool
                          %        1024
                  _unit_used
                          %        256
                  _dev_addr_pool
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  _sidx
                          DCD      0x00000000
                  _usbh_mem_used
                          DCD      0x00000000
                  _usbh_max_mem_used
                          DCD      0x00000000
                  _mem_pool_used
                          DCD      0x00000000
                  g_udev_list
                          DCD      0x00000000
                  _device_addr
                          DCD      0x00000000
