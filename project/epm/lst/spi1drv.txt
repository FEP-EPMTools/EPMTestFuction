; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\spi1drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi1drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\spi1drv.crf src\UserDrv\spi1drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Spi1SetPin PROC
;;;107    }
;;;108    void Spi1SetPin(void)
000000  e3a0020b          MOV      r0,#0xb0000000
;;;109    {
;;;110        /* Configure multi function pins to SPI1 */
;;;111        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xF<<20)) | (0xB<<20));//GPI5 SS0
000004  e59000b0          LDR      r0,[r0,#0xb0]
000008  e3c0060f          BIC      r0,r0,#0xf00000
00000c  e380060b          ORR      r0,r0,#0xb00000
000010  e3a0120b          MOV      r1,#0xb0000000
000014  e58100b0          STR      r0,[r1,#0xb0]
;;;112        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xF<<24)) | (0xB<<24));//GPI6 CLK
000018  e3a0020b          MOV      r0,#0xb0000000
00001c  e59000b0          LDR      r0,[r0,#0xb0]
000020  e3c0040f          BIC      r0,r0,#0xf000000
000024  e380040b          ORR      r0,r0,#0xb000000
000028  e58100b0          STR      r0,[r1,#0xb0]
;;;113    
;;;114        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xFu<<28)) | (0xBu<<28));//GPI7 DATAO
00002c  e3a0020b          MOV      r0,#0xb0000000
000030  e59000b0          LDR      r0,[r0,#0xb0]
000034  e3c0020f          BIC      r0,r0,#0xf0000000
000038  e380020b          ORR      r0,r0,#0xb0000000
00003c  e58100b0          STR      r0,[r1,#0xb0]
;;;115        outpw(REG_SYS_GPI_MFPH,(inpw(REG_SYS_GPI_MFPH) & ~(0xF<<0)) | (0xB<<0));//GPI8 DATAI  
000040  e3a0020b          MOV      r0,#0xb0000000
000044  e59000b4          LDR      r0,[r0,#0xb4]
000048  e3c0000f          BIC      r0,r0,#0xf
00004c  e380000b          ORR      r0,r0,#0xb
000050  e58100b4          STR      r0,[r1,#0xb4]
;;;116    }
000054  e12fff1e          BX       lr
;;;117    
                          ENDP

                  hwInit PROC
;;;36     /*-----------------------------------------*/
;;;37     static BOOL hwInit(void)
000058  e92d4010          PUSH     {r4,lr}
;;;38     {
;;;39         outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
00005c  e3a0020b          MOV      r0,#0xb0000000
000060  e5900218          LDR      r0,[r0,#0x218]
000064  e3800008          ORR      r0,r0,#8
000068  e3a0120b          MOV      r1,#0xb0000000
00006c  e5810218          STR      r0,[r1,#0x218]
;;;40         
;;;41         Spi1SetPin();
000070  ebfffffe          BL       Spi1SetPin
;;;42         
;;;43         spiInit(SPI_PORT);
000074  e3a00001          MOV      r0,#1
000078  ebfffffe          BL       spiInit
;;;44         spiOpen(SPI_PORT);
00007c  e3a00001          MOV      r0,#1
000080  ebfffffe          BL       spiOpen
;;;45     
;;;46         // set spi interface speed to 1.2MHz
;;;47         //spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 4800000, 0);
;;;48         spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 9600000, 0);
000084  e3a03000          MOV      r3,#0
000088  e59f2178          LDR      r2,|L1.520|
00008c  e3a01002          MOV      r1,#2
000090  e3a00001          MOV      r0,#1
000094  ebfffffe          BL       spiIoctl
;;;49         //spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 15000000, 0);
;;;50         // set spi interface speed to 2MHz
;;;51         //spiIoctl(SPI_PORT, SPI_IOC_SET_SPEED, 2000000, 0);
;;;52     
;;;53         // set transfer length to 8-bit
;;;54         spiIoctl(SPI_PORT, SPI_IOC_SET_TX_BITLEN, 8, 0);
000098  e3a03000          MOV      r3,#0
00009c  e3a02008          MOV      r2,#8
0000a0  e3a01007          MOV      r1,#7
0000a4  e3a00001          MOV      r0,#1
0000a8  ebfffffe          BL       spiIoctl
;;;55         // set transfer mode
;;;56         spiIoctl(SPI_PORT, SPI_IOC_SET_MODE, SPI_MODE_0, 0);
0000ac  e3a03000          MOV      r3,#0
0000b0  e1a02003          MOV      r2,r3
0000b4  e3a01008          MOV      r1,#8
0000b8  e3a00001          MOV      r0,#1
0000bc  ebfffffe          BL       spiIoctl
;;;57     
;;;58         spiIoctl(SPI_PORT, SPI_IOC_SET_SS_ACTIVE_LEVEL, SPI_SS_ACTIVE_LOW, 0);
0000c0  e3a03000          MOV      r3,#0
0000c4  e1a02003          MOV      r2,r3
0000c8  e3a0100c          MOV      r1,#0xc
0000cc  e3a00001          MOV      r0,#1
0000d0  ebfffffe          BL       spiIoctl
;;;59     
;;;60         spiIoctl(SPI_PORT, SPI_IOC_SET_TX_NUM, 0, 0);
0000d4  e3a03000          MOV      r3,#0
0000d8  e1a02003          MOV      r2,r3
0000dc  e3a01006          MOV      r1,#6
0000e0  e3a00001          MOV      r0,#1
0000e4  ebfffffe          BL       spiIoctl
;;;61     
;;;62         spiIoctl(SPI_PORT, SPI_IOC_SET_LSB_MSB, SPI_MSB, 0);
0000e8  e3a03000          MOV      r3,#0
0000ec  e1a02003          MOV      r2,r3
0000f0  e3a01005          MOV      r1,#5
0000f4  e3a00001          MOV      r0,#1
0000f8  ebfffffe          BL       spiIoctl
;;;63         
;;;64         return TRUE;
0000fc  e3a00001          MOV      r0,#1
;;;65     }
000100  e8bd8010          POP      {r4,pc}
;;;66     /*-----------------------------------------*/
                          ENDP

                  Spi1DrvInit PROC
;;;68     /*-----------------------------------------*/
;;;69     BOOL Spi1DrvInit(void)
000104  e92d4010          PUSH     {r4,lr}
;;;70     {
;;;71         BOOL retval;
;;;72         sysprintf("SPI1DrvInit!!\n");
000108  e28f00fc          ADR      r0,|L1.524|
00010c  ebfffffe          BL       sysprintf
;;;73         retval = hwInit();
000110  ebfffffe          BL       hwInit
000114  e1a04000          MOV      r4,r0
;;;74         return retval;
000118  e1a00004          MOV      r0,r4
;;;75     }
00011c  e8bd8010          POP      {r4,pc}
;;;76     void Spi1Write(uint8_t buff_id, uint32_t data)
                          ENDP

                  Spi1Write PROC
000120  e92d4070          PUSH     {r4-r6,lr}
;;;77     {
000124  e1a04000          MOV      r4,r0
000128  e1a05001          MOV      r5,r1
;;;78         //sysprintf("=>%02x ");
;;;79         //terninalPrintf("t%04X ",data);
;;;80         spiWrite(SPI_PORT, buff_id, data);
00012c  e1a02005          MOV      r2,r5
000130  e1a01004          MOV      r1,r4
000134  e3a00001          MOV      r0,#1
000138  ebfffffe          BL       spiWrite
;;;81         spiIoctl(SPI_PORT, SPI_IOC_TRIGGER, 0, 0);
00013c  e3a03000          MOV      r3,#0
000140  e1a02003          MOV      r2,r3
000144  e1a01003          MOV      r1,r3
000148  e3a00001          MOV      r0,#1
00014c  ebfffffe          BL       spiIoctl
;;;82         while(spiGetBusyStatus(SPI_PORT));
000150  e1a00000          MOV      r0,r0
                  |L1.340|
000154  e3a00001          MOV      r0,#1
000158  ebfffffe          BL       spiGetBusyStatus
00015c  e3500000          CMP      r0,#0
000160  1afffffb          BNE      |L1.340|
;;;83     }
000164  e8bd8070          POP      {r4-r6,pc}
;;;84     uint32_t Spi1Read(uint8_t buff_id)
                          ENDP

                  Spi1Read PROC
000168  e92d4010          PUSH     {r4,lr}
;;;85     {
00016c  e1a04000          MOV      r4,r0
;;;86         /*
;;;87         uint32_t temp;
;;;88         temp = spiRead(SPI_PORT, buff_id);
;;;89         terninalPrintf("r%04X ",temp);
;;;90         return temp;
;;;91         */
;;;92         
;;;93         return spiRead(SPI_PORT, buff_id);
000170  e1a01004          MOV      r1,r4
000174  e3a00001          MOV      r0,#1
000178  ebfffffe          BL       spiRead
;;;94     }
00017c  e8bd8010          POP      {r4,pc}
;;;95     void Spi1ActiveCS(BOOL active)
                          ENDP

                  Spi1ActiveCS PROC
000180  e92d4010          PUSH     {r4,lr}
;;;96     {
000184  e1a04000          MOV      r4,r0
;;;97         if(active)
000188  e3540000          CMP      r4,#0
00018c  0a000005          BEQ      |L1.424|
;;;98         {// /CS: active
;;;99             //terninalPrintf("\r\n");
;;;100            spiIoctl(SPI_PORT, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000190  e3a03000          MOV      r3,#0
000194  e1a02003          MOV      r2,r3
000198  e3a01009          MOV      r1,#9
00019c  e3a00001          MOV      r0,#1
0001a0  ebfffffe          BL       spiIoctl
0001a4  ea000004          B        |L1.444|
                  |L1.424|
;;;101        }
;;;102        else
;;;103        {
;;;104            //terninalPrintf("\r\n");
;;;105            spiIoctl(SPI_PORT, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
0001a8  e3a03000          MOV      r3,#0
0001ac  e1a02003          MOV      r2,r3
0001b0  e3a0100a          MOV      r1,#0xa
0001b4  e3a00001          MOV      r0,#1
0001b8  ebfffffe          BL       spiIoctl
                  |L1.444|
;;;106        }
;;;107    }
0001bc  e8bd8010          POP      {r4,pc}
;;;108    void Spi1SetPin(void)
                          ENDP

                  Spi1ResetPin PROC
;;;117    
;;;118    void Spi1ResetPin(void)
0001c0  e3a0020b          MOV      r0,#0xb0000000
;;;119    {
;;;120        /* Configure multi function pins to SPI1 */
;;;121        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xF<<20)) | (0x0<<20));//GPI5 input
0001c4  e59000b0          LDR      r0,[r0,#0xb0]
0001c8  e3c0060f          BIC      r0,r0,#0xf00000
0001cc  e3a0120b          MOV      r1,#0xb0000000
0001d0  e58100b0          STR      r0,[r1,#0xb0]
;;;122        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xF<<24)) | (0x0<<24));//GPI6 input
0001d4  e3a0020b          MOV      r0,#0xb0000000
0001d8  e59000b0          LDR      r0,[r0,#0xb0]
0001dc  e3c0040f          BIC      r0,r0,#0xf000000
0001e0  e58100b0          STR      r0,[r1,#0xb0]
;;;123    
;;;124        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xFu<<28)) | (0x0<<28));//GPI7 input
0001e4  e3a0020b          MOV      r0,#0xb0000000
0001e8  e59000b0          LDR      r0,[r0,#0xb0]
0001ec  e3c0020f          BIC      r0,r0,#0xf0000000
0001f0  e58100b0          STR      r0,[r1,#0xb0]
;;;125        outpw(REG_SYS_GPI_MFPH,(inpw(REG_SYS_GPI_MFPH) & ~(0xF<<0)) | (0x0<<0));//GPI8 input
0001f4  e3a0020b          MOV      r0,#0xb0000000
0001f8  e59000b4          LDR      r0,[r0,#0xb4]
0001fc  e3c0000f          BIC      r0,r0,#0xf
000200  e58100b4          STR      r0,[r1,#0xb4]
;;;126    }
000204  e12fff1e          BX       lr
;;;127    
                          ENDP

                  |L1.520|
                          DCD      0x00927c00
                  |L1.524|
00020c  53504931          DCB      "SPI1DrvInit!!\n",0
000210  44727649
000214  6e697421
000218  210a00  
00021b  00                DCB      0
