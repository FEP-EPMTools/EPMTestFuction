; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\crypto.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\crypto.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\crypto.crf ..\..\common\src\BSP\Driver\Source\crypto.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PRNG_Open PROC
;;;49       */
;;;50     void PRNG_Open(uint32_t u32KeySize, uint32_t u32SeedReload, uint32_t u32Seed)
000000  e3510000          CMP      r1,#0
;;;51     {
;;;52         if (u32SeedReload)
000004  0a000001          BEQ      |L1.16|
;;;53             CRPT->PRNG_SEED = u32Seed;
000008  e59f338c          LDR      r3,|L1.924|
00000c  e583200c          STR      r2,[r3,#0xc]
                  |L1.16|
;;;54     
;;;55         CRPT->PRNG_CTL =  (u32KeySize << CRPT_PRNG_CTL_KEYSZ_Pos) |
000010  e1a03100          LSL      r3,r0,#2
000014  e1833081          ORR      r3,r3,r1,LSL #1
000018  e59fc37c          LDR      r12,|L1.924|
00001c  e58c3008          STR      r3,[r12,#8]
;;;56                             (u32SeedReload << CRPT_PRNG_CTL_SEEDRLD_Pos);
;;;57     }
000020  e12fff1e          BX       lr
;;;58     
                          ENDP

                  PRNG_Start PROC
;;;62       */
;;;63     void PRNG_Start(void)
000024  e59f0370          LDR      r0,|L1.924|
;;;64     {
;;;65         CRPT->PRNG_CTL |= CRPT_PRNG_CTL_START_Msk;
000028  e5900008          LDR      r0,[r0,#8]
00002c  e3800001          ORR      r0,r0,#1
000030  e59f1364          LDR      r1,|L1.924|
000034  e5810008          STR      r0,[r1,#8]
;;;66     }
000038  e12fff1e          BX       lr
;;;67     
                          ENDP

                  PRNG_Read PROC
;;;72       */
;;;73     void PRNG_Read(uint32_t u32RandKey[])
00003c  e1a01000          MOV      r1,r0
;;;74     {
;;;75         int  i, wcnt;
;;;76     
;;;77         wcnt = (((CRPT->PRNG_CTL & CRPT_PRNG_CTL_KEYSZ_Msk)>>CRPT_PRNG_CTL_KEYSZ_Pos)+1)*2;
000040  e59f3354          LDR      r3,|L1.924|
000044  e5933008          LDR      r3,[r3,#8]
000048  e203300c          AND      r3,r3,#0xc
00004c  e3a0c001          MOV      r12,#1
000050  e08c3123          ADD      r3,r12,r3,LSR #2
000054  e1a02083          LSL      r2,r3,#1
;;;78         for (i = 0; i < wcnt; i++)
000058  e3a00000          MOV      r0,#0
00005c  ea000004          B        |L1.116|
                  |L1.96|
;;;79             u32RandKey[i] = *(uint32_t *)((uint32_t)&(CRPT->PRNG_KEY0) + (i * 4));
000060  e59f3334          LDR      r3,|L1.924|
000064  e0833100          ADD      r3,r3,r0,LSL #2
000068  e5933010          LDR      r3,[r3,#0x10]
00006c  e7813100          STR      r3,[r1,r0,LSL #2]
000070  e2800001          ADD      r0,r0,#1              ;78
                  |L1.116|
000074  e1500002          CMP      r0,r2                 ;78
000078  bafffff8          BLT      |L1.96|
;;;80     }
00007c  e12fff1e          BX       lr
;;;81     
                          ENDP

                  AES_Open PROC
;;;106      */
;;;107    void AES_Open(uint32_t u32Channel, uint32_t u32EncDec,
000080  e92d4030          PUSH     {r4,r5,lr}
;;;108                  uint32_t u32OpMode, uint32_t u32KeySize, uint32_t u32SwapType)
;;;109    {
000084  e59dc00c          LDR      r12,[sp,#0xc]
;;;110        CRPT->AES_CTL = (u32Channel << CRPT_AES_CTL_CHANNEL_Pos) |
000088  e1a04c00          LSL      r4,r0,#24
00008c  e1844801          ORR      r4,r4,r1,LSL #16
000090  e1844402          ORR      r4,r4,r2,LSL #8
000094  e1844103          ORR      r4,r4,r3,LSL #2
000098  e1844b0c          ORR      r4,r4,r12,LSL #22
00009c  e59f52f8          LDR      r5,|L1.924|
0000a0  e5854100          STR      r4,[r5,#0x100]
;;;111                          (u32EncDec << CRPT_AES_CTL_ENCRPT_Pos) |
;;;112                          (u32OpMode << CRPT_AES_CTL_OPMODE_Pos) |
;;;113                          (u32KeySize << CRPT_AES_CTL_KEYSZ_Pos) |
;;;114                          (u32SwapType << CRPT_AES_CTL_OUTSWAP_Pos);
;;;115        g_AES_CTL[u32Channel] = CRPT->AES_CTL;
0000a4  e1a04005          MOV      r4,r5
0000a8  e5944100          LDR      r4,[r4,#0x100]
0000ac  e59f52ec          LDR      r5,|L1.928|
0000b0  e7854100          STR      r4,[r5,r0,LSL #2]
;;;116    }
0000b4  e8bd8030          POP      {r4,r5,pc}
;;;117    
                          ENDP

                  AES_Start PROC
;;;126      */
;;;127    void AES_Start(int32_t u32Channel, uint32_t u32DMAMode)
0000b8  e59f22e0          LDR      r2,|L1.928|
;;;128    {
;;;129        CRPT->AES_CTL = g_AES_CTL[u32Channel];
0000bc  e7922100          LDR      r2,[r2,r0,LSL #2]
0000c0  e59f32d4          LDR      r3,|L1.924|
0000c4  e5832100          STR      r2,[r3,#0x100]
;;;130        CRPT->AES_CTL |= CRPT_AES_CTL_START_Msk | (u32DMAMode << CRPT_AES_CTL_DMALAST_Pos);
0000c8  e1a02003          MOV      r2,r3
0000cc  e5922100          LDR      r2,[r2,#0x100]
0000d0  e3a03001          MOV      r3,#1
0000d4  e1833281          ORR      r3,r3,r1,LSL #5
0000d8  e1822003          ORR      r2,r2,r3
0000dc  e59f32b8          LDR      r3,|L1.924|
0000e0  e5832100          STR      r2,[r3,#0x100]
;;;131    }
0000e4  e12fff1e          BX       lr
;;;132    
                          ENDP

                  AES_SetKey PROC
;;;142      */
;;;143    void AES_SetKey(uint32_t u32Channel, uint32_t au32Keys[], uint32_t u32KeySize)
0000e8  e92d4070          PUSH     {r4-r6,lr}
;;;144    {
0000ec  e1a03000          MOV      r3,r0
;;;145        int       i, wcnt;
;;;146        uint32_t  *key_ptr;
;;;147    
;;;148        key_ptr = (uint32_t *)((uint32_t)&CRPT->AES0_KEY0 + (u32Channel * 0x3C));
0000f0  e0635203          RSB      r5,r3,r3,LSL #4
0000f4  e59f62a8          LDR      r6,|L1.932|
0000f8  e086c105          ADD      r12,r6,r5,LSL #2
;;;149        wcnt = 4 + u32KeySize*2;
0000fc  e3a05004          MOV      r5,#4
000100  e0854082          ADD      r4,r5,r2,LSL #1
;;;150        for (i = 0; i < wcnt; i++, key_ptr++)
000104  e3a00000          MOV      r0,#0
000108  ea000003          B        |L1.284|
                  |L1.268|
;;;151            *key_ptr = au32Keys[i];
00010c  e7915100          LDR      r5,[r1,r0,LSL #2]
000110  e58c5000          STR      r5,[r12,#0]
000114  e2800001          ADD      r0,r0,#1              ;150
000118  e28cc004          ADD      r12,r12,#4            ;150
                  |L1.284|
00011c  e1500004          CMP      r0,r4                 ;150
000120  bafffff9          BLT      |L1.268|
;;;152    }
000124  e8bd8070          POP      {r4-r6,pc}
;;;153    
                          ENDP

                  AES_SetInitVect PROC
;;;159      */
;;;160    void AES_SetInitVect(uint32_t u32Channel, uint32_t au32IV[])
000128  e92d4010          PUSH     {r4,lr}
;;;161    {
00012c  e1a02000          MOV      r2,r0
;;;162        int       i;
;;;163        uint32_t  *key_ptr;
;;;164    
;;;165        key_ptr = (uint32_t *)((uint32_t)&CRPT->AES0_IV0 + (u32Channel * 0x3C));
000130  e062c202          RSB      r12,r2,r2,LSL #4
000134  e59f426c          LDR      r4,|L1.936|
000138  e084310c          ADD      r3,r4,r12,LSL #2
;;;166        for (i = 0; i < 4; i++, key_ptr++)
00013c  e3a00000          MOV      r0,#0
000140  ea000003          B        |L1.340|
                  |L1.324|
;;;167            *key_ptr = au32IV[i];
000144  e791c100          LDR      r12,[r1,r0,LSL #2]
000148  e583c000          STR      r12,[r3,#0]
00014c  e2800001          ADD      r0,r0,#1              ;166
000150  e2833004          ADD      r3,r3,#4              ;166
                  |L1.340|
000154  e3500004          CMP      r0,#4                 ;166
000158  bafffff9          BLT      |L1.324|
;;;168    }
00015c  e8bd8010          POP      {r4,pc}
;;;169    
                          ENDP

                  AES_SetDMATransfer PROC
;;;177      */
;;;178    void AES_SetDMATransfer(uint32_t u32Channel, uint32_t u32SrcAddr,
000160  e92d4010          PUSH     {r4,lr}
;;;179                            uint32_t u32DstAddr, uint32_t u32TransCnt)
;;;180    {
;;;181        *(uint32_t *)((uint32_t)&CRPT->AES0_SADDR + (u32Channel * 0x3C)) = u32SrcAddr;
000164  e060c200          RSB      r12,r0,r0,LSL #4
000168  e59f422c          LDR      r4,|L1.924|
00016c  e084c10c          ADD      r12,r4,r12,LSL #2
000170  e58c1140          STR      r1,[r12,#0x140]
;;;182        *(uint32_t *)((uint32_t)&CRPT->AES0_DADDR + (u32Channel * 0x3C)) = u32DstAddr;
000174  e060c200          RSB      r12,r0,r0,LSL #4
000178  e084c10c          ADD      r12,r4,r12,LSL #2
00017c  e58c2144          STR      r2,[r12,#0x144]
;;;183        *(uint32_t *)((uint32_t)&CRPT->AES0_CNT + (u32Channel * 0x3C)) = u32TransCnt;
000180  e060c200          RSB      r12,r0,r0,LSL #4
000184  e084c10c          ADD      r12,r4,r12,LSL #2
000188  e58c3148          STR      r3,[r12,#0x148]
;;;184    }
00018c  e8bd8010          POP      {r4,pc}
;;;185    
                          ENDP

                  TDES_Open PROC
;;;206      */
;;;207    void TDES_Open(uint32_t u32Channel, uint32_t u32EncDec, uint32_t u32OpMode, uint32_t u32SwapType)
000190  e92d4010          PUSH     {r4,lr}
;;;208    {
;;;209        g_TDES_CTL[u32Channel] = (u32Channel << CRPT_TDES_CTL_CHANNEL_Pos) |
000194  e1a0cc00          LSL      r12,r0,#24
000198  e18cc801          ORR      r12,r12,r1,LSL #16
00019c  e18cc002          ORR      r12,r12,r2
0001a0  e18cca83          ORR      r12,r12,r3,LSL #21
0001a4  e59f4200          LDR      r4,|L1.940|
0001a8  e784c100          STR      r12,[r4,r0,LSL #2]
;;;210                           (u32EncDec << CRPT_TDES_CTL_ENCRPT_Pos) |
;;;211                           u32OpMode |
;;;212                           (u32SwapType << CRPT_TDES_CTL_BLKSWAP_Pos);
;;;213    	if (g_TDES_CTL[u32Channel] & CRPT_TDES_CTL_TMODE_Msk)
0001ac  e284c000          ADD      r12,r4,#0
0001b0  e7dcc100          LDRB     r12,[r12,r0,LSL #2]
0001b4  e31c0004          TST      r12,#4
0001b8  0a000003          BEQ      |L1.460|
;;;214    		g_TDES_CTL[u32Channel] |= CRPT_TDES_CTL_3KEYS_Msk;
0001bc  e284c000          ADD      r12,r4,#0
0001c0  e79cc100          LDR      r12,[r12,r0,LSL #2]
0001c4  e38cc008          ORR      r12,r12,#8
0001c8  e784c100          STR      r12,[r4,r0,LSL #2]
                  |L1.460|
;;;215    }
0001cc  e8bd8010          POP      {r4,pc}
;;;216    
                          ENDP

                  TDES_Start PROC
;;;225      */
;;;226    void TDES_Start(int32_t u32Channel, uint32_t u32DMAMode)
0001d0  e59f21d4          LDR      r2,|L1.940|
;;;227    {
;;;228        g_TDES_CTL[u32Channel] |= CRPT_TDES_CTL_START_Msk | (u32DMAMode << CRPT_TDES_CTL_DMALAST_Pos);
0001d4  e7922100          LDR      r2,[r2,r0,LSL #2]
0001d8  e3a03001          MOV      r3,#1
0001dc  e1833281          ORR      r3,r3,r1,LSL #5
0001e0  e1822003          ORR      r2,r2,r3
0001e4  e59f31c0          LDR      r3,|L1.940|
0001e8  e7832100          STR      r2,[r3,r0,LSL #2]
;;;229        CRPT->TDES_CTL = g_TDES_CTL[u32Channel];
0001ec  e2832000          ADD      r2,r3,#0
0001f0  e7922100          LDR      r2,[r2,r0,LSL #2]
0001f4  e59f31a0          LDR      r3,|L1.924|
0001f8  e5832200          STR      r2,[r3,#0x200]
;;;230    }
0001fc  e12fff1e          BX       lr
;;;231    
                          ENDP

                  TDES_SetKey PROC
;;;237      */
;;;238    void TDES_SetKey(uint32_t u32Channel, uint8_t au8Keys[3][8])
000200  e92d4030          PUSH     {r4,r5,lr}
;;;239    {
000204  e1a02000          MOV      r2,r0
000208  e1a03001          MOV      r3,r1
;;;240        int         i;
;;;241        uint8_t     *pu8Key;
;;;242        uint32_t    *pu32TKey;
;;;243    
;;;244    	pu8Key = (uint8_t *)au8Keys;
00020c  e1a01003          MOV      r1,r3
;;;245        pu32TKey = (uint32_t *)((uint32_t)&CRPT->TDES0_KEY1H + (0x40 * u32Channel));
000210  e59f4198          LDR      r4,|L1.944|
000214  e3a05040          MOV      r5,#0x40
000218  e02c4295          MLA      r12,r5,r2,r4
;;;246        for (i = 0; i < 6; i++)
00021c  e3a00000          MOV      r0,#0
000220  ea00000f          B        |L1.612|
                  |L1.548|
;;;247        {
;;;248    		pu32TKey[i] = (pu8Key[i*4]<<24) | (pu8Key[i*4+1]<<16) | (pu8Key[i*4+2]<<8) | pu8Key[i*4+3];
000224  e7d14100          LDRB     r4,[r1,r0,LSL #2]
000228  e1a04c04          LSL      r4,r4,#24
00022c  e3a05001          MOV      r5,#1
000230  e0855100          ADD      r5,r5,r0,LSL #2
000234  e7d15005          LDRB     r5,[r1,r5]
000238  e1844805          ORR      r4,r4,r5,LSL #16
00023c  e3a05002          MOV      r5,#2
000240  e0855100          ADD      r5,r5,r0,LSL #2
000244  e7d15005          LDRB     r5,[r1,r5]
000248  e1844405          ORR      r4,r4,r5,LSL #8
00024c  e3a05003          MOV      r5,#3
000250  e0855100          ADD      r5,r5,r0,LSL #2
000254  e7d15005          LDRB     r5,[r1,r5]
000258  e1844005          ORR      r4,r4,r5
00025c  e78c4100          STR      r4,[r12,r0,LSL #2]
000260  e2800001          ADD      r0,r0,#1              ;246
                  |L1.612|
000264  e3500006          CMP      r0,#6                 ;246
000268  baffffed          BLT      |L1.548|
;;;249        }
;;;250    }
00026c  e8bd8030          POP      {r4,r5,pc}
;;;251    
                          ENDP

                  TDES_SetInitVect PROC
;;;258      */
;;;259    void TDES_SetInitVect(uint32_t u32Channel, uint32_t u32IVH, uint32_t u32IVL)
000270  e59f3124          LDR      r3,|L1.924|
;;;260    {
;;;261        *(uint32_t *)((uint32_t)&CRPT->TDES0_IVH + 0x40 * u32Channel) = u32IVH; // ((u32IVH<<24)&0xff000000) | ((u32IVH<<8) & 0x00ff0000) | ((u32IVH>>8) & 0x0000ff00) | ((u32IVH>>24) & 0x000000ff);
000274  e3a0c040          MOV      r12,#0x40
000278  e023309c          MLA      r3,r12,r0,r3
00027c  e5831220          STR      r1,[r3,#0x220]
;;;262        *(uint32_t *)((uint32_t)&CRPT->TDES0_IVL + 0x40 * u32Channel) = u32IVL; //  ((u32IVL<<24)&0xff000000) | ((u32IVL<<8) & 0x00ff0000) | ((u32IVL>>8) & 0x0000ff00) | ((u32IVL>>24) & 0x000000ff);
000280  e59f3114          LDR      r3,|L1.924|
000284  e023309c          MLA      r3,r12,r0,r3
000288  e5832224          STR      r2,[r3,#0x224]
;;;263    }
00028c  e12fff1e          BX       lr
;;;264    
                          ENDP

                  TDES_SetDMATransfer PROC
;;;272      */
;;;273    void TDES_SetDMATransfer(uint32_t u32Channel, uint32_t u32SrcAddr,
000290  e59fc104          LDR      r12,|L1.924|
;;;274                             uint32_t u32DstAddr, uint32_t u32TransCnt)
;;;275    {
;;;276        *(uint32_t *)((uint32_t)&CRPT->TDES0_SADDR + (u32Channel * 0x40)) = u32SrcAddr;
000294  e08cc300          ADD      r12,r12,r0,LSL #6
000298  e58c1228          STR      r1,[r12,#0x228]
;;;277        *(uint32_t *)((uint32_t)&CRPT->TDES0_DADDR + (u32Channel * 0x40)) = u32DstAddr;
00029c  e59fc0f8          LDR      r12,|L1.924|
0002a0  e08cc300          ADD      r12,r12,r0,LSL #6
0002a4  e58c222c          STR      r2,[r12,#0x22c]
;;;278        *(uint32_t *)((uint32_t)&CRPT->TDES0_CNT + (u32Channel * 0x40)) = u32TransCnt;
0002a8  e59fc0ec          LDR      r12,|L1.924|
0002ac  e08cc300          ADD      r12,r12,r0,LSL #6
0002b0  e58c3230          STR      r3,[r12,#0x230]
;;;279    }
0002b4  e12fff1e          BX       lr
;;;280    
                          ENDP

                  SHA_Open PROC
;;;297      */
;;;298    void SHA_Open(uint32_t u32OpMode, uint32_t u32SwapType, int hmac_key_len)
0002b8  e1a03400          LSL      r3,r0,#8
;;;299    {
;;;300        CRPT->HMAC_CTL = (u32OpMode << CRPT_HMAC_CTL_OPMODE_Pos) |
0002bc  e1833b01          ORR      r3,r3,r1,LSL #22
0002c0  e59fc0d4          LDR      r12,|L1.924|
0002c4  e58c3300          STR      r3,[r12,#0x300]
;;;301                          (u32SwapType << CRPT_HMAC_CTL_OUTSWAP_Pos);
;;;302                          
;;;303        if (hmac_key_len > 0)
0002c8  e3520000          CMP      r2,#0
0002cc  da000004          BLE      |L1.740|
;;;304        {
;;;305        	CRPT->HMAC_KEYCNT = hmac_key_len;
0002d0  e1a0300c          MOV      r3,r12
0002d4  e5832348          STR      r2,[r3,#0x348]
;;;306        	CRPT->HMAC_CTL |= CRPT_HMAC_CTL_HMACEN_Msk;
0002d8  e5933300          LDR      r3,[r3,#0x300]
0002dc  e3833010          ORR      r3,r3,#0x10
0002e0  e58c3300          STR      r3,[r12,#0x300]
                  |L1.740|
;;;307    	}
;;;308    }
0002e4  e12fff1e          BX       lr
;;;309    
                          ENDP

                  SHA_Start PROC
;;;318      */
;;;319    void SHA_Start(uint32_t u32DMAMode)
0002e8  e59f10ac          LDR      r1,|L1.924|
;;;320    {
;;;321        CRPT->HMAC_CTL &= ~(0x7 << CRPT_HMAC_CTL_DMALAST_Pos);
0002ec  e5911300          LDR      r1,[r1,#0x300]
0002f0  e3c110e0          BIC      r1,r1,#0xe0
0002f4  e59f20a0          LDR      r2,|L1.924|
0002f8  e5821300          STR      r1,[r2,#0x300]
;;;322        CRPT->HMAC_CTL |= CRPT_HMAC_CTL_START_Msk | (u32DMAMode << CRPT_HMAC_CTL_DMALAST_Pos);
0002fc  e1a01002          MOV      r1,r2
000300  e5911300          LDR      r1,[r1,#0x300]
000304  e3a02001          MOV      r2,#1
000308  e1822280          ORR      r2,r2,r0,LSL #5
00030c  e1811002          ORR      r1,r1,r2
000310  e59f2084          LDR      r2,|L1.924|
000314  e5821300          STR      r1,[r2,#0x300]
;;;323    }
000318  e12fff1e          BX       lr
;;;324    
                          ENDP

                  SHA_SetDMATransfer PROC
;;;330      */
;;;331    void SHA_SetDMATransfer(uint32_t u32SrcAddr, uint32_t u32TransCnt)
00031c  e59f2078          LDR      r2,|L1.924|
;;;332    {
;;;333        CRPT->HMAC_SADDR = u32SrcAddr;
000320  e582034c          STR      r0,[r2,#0x34c]
;;;334        CRPT->HMAC_DMACNT = u32TransCnt;
000324  e5821350          STR      r1,[r2,#0x350]
;;;335    }
000328  e12fff1e          BX       lr
;;;336    
                          ENDP

                  SHA_Read PROC
;;;341      */
;;;342    void SHA_Read(uint32_t u32Digest[])
00032c  e1a02000          MOV      r2,r0
;;;343    {
;;;344        uint32_t  i, wcnt;
;;;345    
;;;346        i = (CRPT->HMAC_CTL & CRPT_HMAC_CTL_OPMODE_Msk) >> CRPT_HMAC_CTL_OPMODE_Pos;
000330  e59f3064          LDR      r3,|L1.924|
000334  e5933300          LDR      r3,[r3,#0x300]
000338  e2033c07          AND      r3,r3,#0x700
00033c  e1a00423          LSR      r0,r3,#8
;;;347        if (i == SHA_MODE_SHA1)
000340  e3500000          CMP      r0,#0
000344  1a000001          BNE      |L1.848|
;;;348            wcnt = 5;
000348  e3a01005          MOV      r1,#5
00034c  ea000008          B        |L1.884|
                  |L1.848|
;;;349        else if (i == SHA_MODE_SHA224)
000350  e3500005          CMP      r0,#5
000354  1a000001          BNE      |L1.864|
;;;350            wcnt = 7;
000358  e3a01007          MOV      r1,#7
00035c  ea000004          B        |L1.884|
                  |L1.864|
;;;351        else if (i == SHA_MODE_SHA384)
000360  e3500007          CMP      r0,#7
000364  1a000001          BNE      |L1.880|
;;;352            wcnt = 12;
000368  e3a0100c          MOV      r1,#0xc
00036c  ea000000          B        |L1.884|
                  |L1.880|
;;;353        else
;;;354            wcnt = 16;
000370  e3a01010          MOV      r1,#0x10
                  |L1.884|
;;;355    
;;;356        for (i = 0; i < wcnt; i++)
000374  e3a00000          MOV      r0,#0
000378  ea000004          B        |L1.912|
                  |L1.892|
;;;357            u32Digest[i] = *(uint32_t *)((uint32_t)&(CRPT->HMAC_DGST0) + (i * 4));
00037c  e59f3018          LDR      r3,|L1.924|
000380  e0833100          ADD      r3,r3,r0,LSL #2
000384  e5933308          LDR      r3,[r3,#0x308]
000388  e7823100          STR      r3,[r2,r0,LSL #2]
00038c  e2800001          ADD      r0,r0,#1              ;356
                  |L1.912|
000390  e1500001          CMP      r0,r1                 ;356
000394  3afffff8          BCC      |L1.892|
;;;358    }
000398  e12fff1e          BX       lr
;;;359    
                          ENDP

                  |L1.924|
                          DCD      0xb000f000
                  |L1.928|
                          DCD      g_AES_CTL
                  |L1.932|
                          DCD      0xb000f110
                  |L1.936|
                          DCD      0xb000f130
                  |L1.940|
                          DCD      g_TDES_CTL
                  |L1.944|
                          DCD      0xb000f208

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_AES_CTL
                          %        16
                  g_TDES_CTL
                          %        16
