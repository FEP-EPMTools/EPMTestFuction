; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_summary.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_summary.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_summary.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_summary.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  yaffs_get_block_info PROC
;;;23     /* Function to manipulate block info */
;;;24     static __inline struct yaffs_block_info *yaffs_get_block_info(struct yaffs_dev
000000  e92d4070          PUSH     {r4-r6,lr}
;;;25     							      *dev, int blk)
;;;26     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;27     	if (blk < dev->internal_start_block || blk > dev->internal_end_block) {
00000c  e59400d0          LDR      r0,[r4,#0xd0]
000010  e1500005          CMP      r0,r5
000014  ca000002          BGT      |L1.36|
000018  e59400d4          LDR      r0,[r4,#0xd4]
00001c  e1500005          CMP      r0,r5
000020  aa00000c          BGE      |L1.88|
                  |L1.36|
;;;28     		yaffs_trace(YAFFS_TRACE_ERROR,
000024  e59f032c          LDR      r0,|L1.856|
000028  e5900000          LDR      r0,[r0,#0]  ; yaffs_trace_mask
00002c  e3100101          TST      r0,#0x40000000
000030  0a000002          BEQ      |L1.64|
000034  e1a01005          MOV      r1,r5
000038  e28f0fc7          ADR      r0,|L1.860|
00003c  ebfffffe          BL       sysprintf
                  |L1.64|
;;;29     			"**>> yaffs: get_block_info block %d is not valid",
;;;30     			blk);
;;;31     		BUG();
000040  e1a00000          MOV      r0,r0
000044  e3a0201f          MOV      r2,#0x1f
000048  e28f1fd2          ADR      r1,|L1.920|
00004c  e28f0d0e          ADR      r0,|L1.980|
000050  ebfffffe          BL       sysprintf
000054  e1a00000          MOV      r0,r0
                  |L1.88|
;;;32     	}
;;;33     	return &dev->block_info[blk - dev->internal_start_block];
000058  e59410d0          LDR      r1,[r4,#0xd0]
00005c  e0451001          SUB      r1,r5,r1
000060  e5940118          LDR      r0,[r4,#0x118]
000064  e0800181          ADD      r0,r0,r1,LSL #3
;;;34     }
000068  e8bd8070          POP      {r4-r6,pc}
;;;35     
                          ENDP

                  yaffs_summary_clear PROC
;;;55     
;;;56     static void yaffs_summary_clear(struct yaffs_dev *dev)
00006c  e92d4010          PUSH     {r4,lr}
;;;57     {
000070  e1a04000          MOV      r4,r0
;;;58     	if (!dev->sum_tags)
000074  e5940e0c          LDR      r0,[r4,#0xe0c]
000078  e3500000          CMP      r0,#0
00007c  1a000000          BNE      |L1.132|
                  |L1.128|
;;;59     		return;
;;;60     	memset(dev->sum_tags, 0, dev->chunks_per_summary *
;;;61     		sizeof(struct yaffs_summary_tags));
;;;62     }
000080  e8bd8010          POP      {r4,pc}
                  |L1.132|
000084  e5942e08          LDR      r2,[r4,#0xe08]        ;60
000088  e0822082          ADD      r2,r2,r2,LSL #1       ;60
00008c  e1a01102          LSL      r1,r2,#2              ;60
000090  e5940e0c          LDR      r0,[r4,#0xe0c]        ;60
000094  ebfffffe          BL       __aeabi_memclr4
000098  e1a00000          MOV      r0,r0
00009c  eafffff7          B        |L1.128|
;;;63     
                          ENDP

                  yaffs_summary_deinit PROC
;;;64     
;;;65     void yaffs_summary_deinit(struct yaffs_dev *dev)
0000a0  e92d4010          PUSH     {r4,lr}
;;;66     {
0000a4  e1a04000          MOV      r4,r0
;;;67     	yaffs_free(dev->sum_tags);
0000a8  e5940e0c          LDR      r0,[r4,#0xe0c]
0000ac  ebfffffe          BL       yaffs_free
;;;68     	dev->sum_tags = NULL;
0000b0  e3a00000          MOV      r0,#0
0000b4  e5840e0c          STR      r0,[r4,#0xe0c]
;;;69     	yaffs_free(dev->gc_sum_tags);
0000b8  e5940d7c          LDR      r0,[r4,#0xd7c]
0000bc  ebfffffe          BL       yaffs_free
;;;70     	dev->gc_sum_tags = NULL;
0000c0  e3a00000          MOV      r0,#0
0000c4  e5840d7c          STR      r0,[r4,#0xd7c]
;;;71     	dev->chunks_per_summary = 0;
0000c8  e5840e08          STR      r0,[r4,#0xe08]
;;;72     }
0000cc  e8bd8010          POP      {r4,pc}
;;;73     
                          ENDP

                  yaffs_summary_init PROC
;;;74     int yaffs_summary_init(struct yaffs_dev *dev)
0000d0  e92d41f0          PUSH     {r4-r8,lr}
;;;75     {
0000d4  e1a04000          MOV      r4,r0
;;;76     	int sum_bytes;
;;;77     	int chunks_used; /* Number of chunks used by summary */
;;;78     	int sum_tags_bytes;
;;;79     
;;;80     	sum_bytes = dev->param.chunks_per_block *
0000d8  e594000c          LDR      r0,[r4,#0xc]
0000dc  e0800080          ADD      r0,r0,r0,LSL #1
0000e0  e1a05100          LSL      r5,r0,#2
;;;81     			sizeof(struct yaffs_summary_tags);
;;;82     
;;;83     	chunks_used = (sum_bytes + dev->data_bytes_per_chunk - 1)/
0000e4  e59420a4          LDR      r2,[r4,#0xa4]
0000e8  e2421010          SUB      r1,r2,#0x10
0000ec  e0822005          ADD      r2,r2,r5
0000f0  e2420001          SUB      r0,r2,#1
0000f4  ebfffffe          BL       __aeabi_uidivmod
0000f8  e1a06000          MOV      r6,r0
;;;84     			(dev->data_bytes_per_chunk -
;;;85     				sizeof(struct yaffs_summary_header));
;;;86     
;;;87     	dev->chunks_per_summary = dev->param.chunks_per_block - chunks_used;
0000fc  e594000c          LDR      r0,[r4,#0xc]
000100  e0400006          SUB      r0,r0,r6
000104  e5840e08          STR      r0,[r4,#0xe08]
;;;88     	sum_tags_bytes = sizeof(struct yaffs_summary_tags) *
000108  e5940e08          LDR      r0,[r4,#0xe08]
00010c  e0800080          ADD      r0,r0,r0,LSL #1
000110  e1a07100          LSL      r7,r0,#2
;;;89     				dev->chunks_per_summary;
;;;90     // 	dev->sum_tags = kmalloc(sum_tags_bytes, GFP_NOFS);
;;;91     // 	dev->gc_sum_tags = kmalloc(sum_tags_bytes, GFP_NOFS);
;;;92     	dev->sum_tags = yaffs_malloc(sum_tags_bytes);
000114  e1a00007          MOV      r0,r7
000118  ebfffffe          BL       yaffs_malloc
00011c  e5840e0c          STR      r0,[r4,#0xe0c]
;;;93     	dev->gc_sum_tags = yaffs_malloc(sum_tags_bytes);
000120  e1a00007          MOV      r0,r7
000124  ebfffffe          BL       yaffs_malloc
000128  e5840d7c          STR      r0,[r4,#0xd7c]
;;;94     	if (!dev->sum_tags || !dev->gc_sum_tags) {
00012c  e5940e0c          LDR      r0,[r4,#0xe0c]
000130  e3500000          CMP      r0,#0
000134  0a000002          BEQ      |L1.324|
000138  e5940d7c          LDR      r0,[r4,#0xd7c]
00013c  e3500000          CMP      r0,#0
000140  1a000003          BNE      |L1.340|
                  |L1.324|
;;;95     		yaffs_summary_deinit(dev);
000144  e1a00004          MOV      r0,r4
000148  ebfffffe          BL       yaffs_summary_deinit
;;;96     		return YAFFS_FAIL;
00014c  e3a00000          MOV      r0,#0
                  |L1.336|
;;;97     	}
;;;98     
;;;99     	yaffs_summary_clear(dev);
;;;100    
;;;101    	return YAFFS_OK;
;;;102    }
000150  e8bd81f0          POP      {r4-r8,pc}
                  |L1.340|
000154  e1a00004          MOV      r0,r4                 ;99
000158  ebfffffe          BL       yaffs_summary_clear
00015c  e3a00001          MOV      r0,#1                 ;101
000160  eafffffa          B        |L1.336|
;;;103    
                          ENDP

                  yaffs_summary_sum PROC
;;;104    static unsigned yaffs_summary_sum(struct yaffs_dev *dev)
000164  e1a01000          MOV      r1,r0
;;;105    {
;;;106    	u8 *sum_buffer = (u8 *)dev->sum_tags;
000168  e5912e0c          LDR      r2,[r1,#0xe0c]
;;;107    	int i;
;;;108    	unsigned sum = 0;
00016c  e3a00000          MOV      r0,#0
;;;109    
;;;110    	i = sizeof(struct yaffs_summary_tags) *
000170  e591ce08          LDR      r12,[r1,#0xe08]
000174  e08cc08c          ADD      r12,r12,r12,LSL #1
000178  e1a0310c          LSL      r3,r12,#2
;;;111    				dev->chunks_per_summary;
;;;112    	while (i > 0) {
00017c  ea000003          B        |L1.400|
                  |L1.384|
;;;113    		sum += *sum_buffer;
000180  e5d2c000          LDRB     r12,[r2,#0]
000184  e080000c          ADD      r0,r0,r12
;;;114    		sum_buffer++;
000188  e2822001          ADD      r2,r2,#1
;;;115    		i--;
00018c  e2433001          SUB      r3,r3,#1
                  |L1.400|
000190  e3530000          CMP      r3,#0                 ;112
000194  cafffff9          BGT      |L1.384|
;;;116    	}
;;;117    
;;;118    	return sum;
;;;119    }
000198  e12fff1e          BX       lr
;;;120    
                          ENDP

                  yaffs_summary_write PROC
;;;121    static int yaffs_summary_write(struct yaffs_dev *dev, int blk)
00019c  e92d4ff0          PUSH     {r4-r11,lr}
;;;122    {
0001a0  e24dd06c          SUB      sp,sp,#0x6c
0001a4  e1a04000          MOV      r4,r0
0001a8  e1a0a001          MOV      r10,r1
;;;123    	struct yaffs_ext_tags tags;
;;;124    	u8 *buffer;
;;;125    	u8 *sum_buffer = (u8 *)dev->sum_tags;
0001ac  e5940e0c          LDR      r0,[r4,#0xe0c]
0001b0  e58d001c          STR      r0,[sp,#0x1c]
;;;126    	int n_bytes;
;;;127    	int chunk_in_nand;
;;;128    	int chunk_in_block;
;;;129    	int result;
;;;130    	int this_tx;
;;;131    	struct yaffs_summary_header hdr;
;;;132    	int sum_bytes_per_chunk = dev->data_bytes_per_chunk - sizeof(hdr);
0001b4  e59400a4          LDR      r0,[r4,#0xa4]
0001b8  e240b010          SUB      r11,r0,#0x10
;;;133    	struct yaffs_block_info *bi = yaffs_get_block_info(dev, blk);
0001bc  e1a0100a          MOV      r1,r10
0001c0  e1a00004          MOV      r0,r4
0001c4  ebfffffe          BL       yaffs_get_block_info
0001c8  e1a05000          MOV      r5,r0
;;;134    
;;;135    	buffer = yaffs_get_temp_buffer(dev);
0001cc  e1a00004          MOV      r0,r4
0001d0  ebfffffe          BL       yaffs_get_temp_buffer
0001d4  e1a08000          MOV      r8,r0
;;;136    	n_bytes = sizeof(struct yaffs_summary_tags) *
0001d8  e5940e08          LDR      r0,[r4,#0xe08]
0001dc  e0800080          ADD      r0,r0,r0,LSL #1
0001e0  e1a09100          LSL      r9,r0,#2
;;;137    				dev->chunks_per_summary;
;;;138    	memset(&tags, 0, sizeof(struct yaffs_ext_tags));
0001e4  e3a01048          MOV      r1,#0x48
0001e8  e28d0020          ADD      r0,sp,#0x20
0001ec  ebfffffe          BL       __aeabi_memclr4
;;;139    	tags.obj_id = YAFFS_OBJECTID_SUMMARY;
0001f0  e3a00010          MOV      r0,#0x10
0001f4  e58d0024          STR      r0,[sp,#0x24]
;;;140    	tags.chunk_id = 1;
0001f8  e3a00001          MOV      r0,#1
0001fc  e58d0028          STR      r0,[sp,#0x28]
;;;141    	chunk_in_block = dev->chunks_per_summary;
000200  e5940e08          LDR      r0,[r4,#0xe08]
000204  e58d0014          STR      r0,[sp,#0x14]
;;;142    	chunk_in_nand = dev->alloc_block * dev->param.chunks_per_block +
000208  e5940e08          LDR      r0,[r4,#0xe08]
00020c  e594112c          LDR      r1,[r4,#0x12c]
000210  e594200c          LDR      r2,[r4,#0xc]
000214  e0200291          MLA      r0,r1,r2,r0
000218  e58d0018          STR      r0,[sp,#0x18]
;;;143    						dev->chunks_per_summary;
;;;144    	hdr.version = YAFFS_SUMMARY_VERSION;
00021c  e3a00001          MOV      r0,#1
000220  e58d0004          STR      r0,[sp,#4]
;;;145    	hdr.block = blk;
000224  e58da008          STR      r10,[sp,#8]
;;;146    	hdr.seq = bi->seq_number;
000228  e5950004          LDR      r0,[r5,#4]
00022c  e58d000c          STR      r0,[sp,#0xc]
;;;147    	hdr.sum = yaffs_summary_sum(dev);
000230  e1a00004          MOV      r0,r4
000234  ebfffffe          BL       yaffs_summary_sum
000238  e58d0010          STR      r0,[sp,#0x10]
;;;148    
;;;149    	do {
00023c  e1a00000          MOV      r0,r0
                  |L1.576|
;;;150    		this_tx = n_bytes;
000240  e1a07009          MOV      r7,r9
;;;151    		if (this_tx > sum_bytes_per_chunk)
000244  e157000b          CMP      r7,r11
000248  da000000          BLE      |L1.592|
;;;152    			this_tx = sum_bytes_per_chunk;
00024c  e1a0700b          MOV      r7,r11
                  |L1.592|
;;;153    		memcpy(buffer, &hdr, sizeof(hdr));
000250  e3a02010          MOV      r2,#0x10
000254  e28d1004          ADD      r1,sp,#4
000258  e1a00008          MOV      r0,r8
00025c  ebfffffe          BL       __aeabi_memcpy
;;;154    		memcpy(buffer + sizeof(hdr), sum_buffer, this_tx);
000260  e1a02007          MOV      r2,r7
000264  e2880010          ADD      r0,r8,#0x10
000268  e59d101c          LDR      r1,[sp,#0x1c]
00026c  ebfffffe          BL       __aeabi_memcpy
;;;155    		tags.n_bytes = this_tx + sizeof(hdr);
000270  e2870010          ADD      r0,r7,#0x10
000274  e58d002c          STR      r0,[sp,#0x2c]
;;;156    		result = yaffs_wr_chunk_tags_nand(dev, chunk_in_nand,
000278  e28d3020          ADD      r3,sp,#0x20
00027c  e1a02008          MOV      r2,r8
000280  e1a00004          MOV      r0,r4
000284  e59d1018          LDR      r1,[sp,#0x18]
000288  ebfffffe          BL       yaffs_wr_chunk_tags_nand
00028c  e1a06000          MOV      r6,r0
;;;157    						buffer, &tags);
;;;158    
;;;159    		if (result != YAFFS_OK)
000290  e3560001          CMP      r6,#1
000294  0a000000          BEQ      |L1.668|
;;;160    			break;
000298  ea000022          B        |L1.808|
                  |L1.668|
;;;161    		yaffs_set_chunk_bit(dev, blk, chunk_in_block);
00029c  e1a0100a          MOV      r1,r10
0002a0  e1a00004          MOV      r0,r4
0002a4  e59d2014          LDR      r2,[sp,#0x14]
0002a8  ebfffffe          BL       yaffs_set_chunk_bit
;;;162    		bi->pages_in_use++;
0002ac  e5950000          LDR      r0,[r5,#0]
0002b0  e3c00703          BIC      r0,r0,#0xc0000
0002b4  e3c00bff          BIC      r0,r0,#0x3fc00
0002b8  e5951000          LDR      r1,[r5,#0]
0002bc  e1a01601          LSL      r1,r1,#12
0002c0  e3a02001          MOV      r2,#1
0002c4  e0821b21          ADD      r1,r2,r1,LSR #22
0002c8  e59f211c          LDR      r2,|L1.1004|
0002cc  e0021501          AND      r1,r2,r1,LSL #10
0002d0  e1800001          ORR      r0,r0,r1
0002d4  e5850000          STR      r0,[r5,#0]
;;;163    		dev->n_free_chunks--;
0002d8  e5940d4c          LDR      r0,[r4,#0xd4c]
0002dc  e2400001          SUB      r0,r0,#1
0002e0  e5840d4c          STR      r0,[r4,#0xd4c]
;;;164    
;;;165    		n_bytes -= this_tx;
0002e4  e0499007          SUB      r9,r9,r7
;;;166    		sum_buffer += this_tx;
0002e8  e59d001c          LDR      r0,[sp,#0x1c]
0002ec  e0800007          ADD      r0,r0,r7
0002f0  e58d001c          STR      r0,[sp,#0x1c]
;;;167    		chunk_in_nand++;
0002f4  e59d0018          LDR      r0,[sp,#0x18]
0002f8  e2800001          ADD      r0,r0,#1
0002fc  e58d0018          STR      r0,[sp,#0x18]
;;;168    		chunk_in_block++;
000300  e59d0014          LDR      r0,[sp,#0x14]
000304  e2800001          ADD      r0,r0,#1
000308  e58d0014          STR      r0,[sp,#0x14]
;;;169    		tags.chunk_id++;
00030c  e59d0028          LDR      r0,[sp,#0x28]
000310  e2800001          ADD      r0,r0,#1
000314  e58d0028          STR      r0,[sp,#0x28]
;;;170    	} while (result == YAFFS_OK && n_bytes > 0);
000318  e3560001          CMP      r6,#1
00031c  1a000001          BNE      |L1.808|
000320  e3590000          CMP      r9,#0
000324  caffffc5          BGT      |L1.576|
                  |L1.808|
000328  e1a00000          MOV      r0,r0                 ;160
;;;171    	yaffs_release_temp_buffer(dev, buffer);
00032c  e1a01008          MOV      r1,r8
000330  e1a00004          MOV      r0,r4
000334  ebfffffe          BL       yaffs_release_temp_buffer
;;;172    
;;;173    
;;;174    	if (result == YAFFS_OK)
000338  e3560001          CMP      r6,#1
00033c  1a000002          BNE      |L1.844|
;;;175    		bi->has_summary = 1;
000340  e5950000          LDR      r0,[r5,#0]
000344  e3800101          ORR      r0,r0,#0x40000000
000348  e5850000          STR      r0,[r5,#0]
                  |L1.844|
;;;176    
;;;177    
;;;178    	return result;
00034c  e1a00006          MOV      r0,r6
000350  e28dd06c          ADD      sp,sp,#0x6c
;;;179    }
000354  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.856|
                          DCD      yaffs_trace_mask
                  |L1.860|
00035c  79616666          DCB      "yaffs: **>> yaffs: get_block_info block %d is not valid"
000360  733a202a
000364  2a3e3e20
000368  79616666
00036c  733a2067
000370  65745f62
000374  6c6f636b
000378  5f696e66
00037c  6f20626c
000380  6f636b20
000384  25642069
000388  73206e6f
00038c  74207661
000390  6c6964  
000393  0a00              DCB      "\n",0
000395  00                DCB      0
000396  00                DCB      0
000397  00                DCB      0
                  |L1.920|
000398  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_get"
00039c  2e5c636f
0003a0  6d6d6f6e
0003a4  5c737263
0003a8  5c425350
0003ac  5c546869
0003b0  72645061
0003b4  7274795c
0003b8  79616666
0003bc  73325c79
0003c0  61666673
0003c4  5f676574
0003c8  626c6f63          DCB      "blockinfo.h",0
0003cc  6b696e66
0003d0  6f2e6800
                  |L1.980|
0003d4  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
0003d8  6f742042
0003dc  55472061
0003e0  74202573
0003e4  3a256421
0003e8  0a00    
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L1.1004|
                          DCD      0x000ffc00
                          ENDP

                  yaffs_summary_read PROC
;;;180    
;;;181    int yaffs_summary_read(struct yaffs_dev *dev,
0003f0  e92d4ff0          PUSH     {r4-r11,lr}
;;;182    			struct yaffs_summary_tags *st,
;;;183    			int blk)
;;;184    {
0003f4  e24dd074          SUB      sp,sp,#0x74
0003f8  e1a04000          MOV      r4,r0
0003fc  e1a08001          MOV      r8,r1
000400  e1a09002          MOV      r9,r2
;;;185    	struct yaffs_ext_tags tags;
;;;186    	u8 *buffer;
;;;187    	u8 *sum_buffer = (u8 *)st;
000404  e58d8024          STR      r8,[sp,#0x24]
;;;188    	int n_bytes;
;;;189    	int chunk_id;
;;;190    	int chunk_in_nand;
;;;191    	int chunk_in_block;
;;;192    	int result;
;;;193    	int this_tx;
;;;194    	struct yaffs_summary_header hdr;
;;;195    	struct yaffs_block_info *bi = yaffs_get_block_info(dev, blk);
000408  e1a01009          MOV      r1,r9
00040c  e1a00004          MOV      r0,r4
000410  ebfffffe          BL       yaffs_get_block_info
000414  e1a05000          MOV      r5,r0
;;;196    	int sum_bytes_per_chunk = dev->data_bytes_per_chunk - sizeof(hdr);
000418  e59400a4          LDR      r0,[r4,#0xa4]
00041c  e2400010          SUB      r0,r0,#0x10
000420  e58d0004          STR      r0,[sp,#4]
;;;197    
;;;198    	buffer = yaffs_get_temp_buffer(dev);
000424  e1a00004          MOV      r0,r4
000428  ebfffffe          BL       yaffs_get_temp_buffer
00042c  e1a0b000          MOV      r11,r0
;;;199    	n_bytes = sizeof(struct yaffs_summary_tags) * dev->chunks_per_summary;
000430  e5940e08          LDR      r0,[r4,#0xe08]
000434  e0800080          ADD      r0,r0,r0,LSL #1
000438  e1a0a100          LSL      r10,r0,#2
;;;200    	chunk_in_block = dev->chunks_per_summary;
00043c  e5940e08          LDR      r0,[r4,#0xe08]
000440  e58d0018          STR      r0,[sp,#0x18]
;;;201    	chunk_in_nand = blk * dev->param.chunks_per_block +
000444  e5940e08          LDR      r0,[r4,#0xe08]
000448  e594100c          LDR      r1,[r4,#0xc]
00044c  e0200199          MLA      r0,r9,r1,r0
000450  e58d001c          STR      r0,[sp,#0x1c]
;;;202    							dev->chunks_per_summary;
;;;203    	chunk_id = 1;
000454  e3a00001          MOV      r0,#1
000458  e58d0020          STR      r0,[sp,#0x20]
;;;204    	do {
00045c  e1a00000          MOV      r0,r0
                  |L1.1120|
;;;205    		this_tx = n_bytes;
000460  e1a0700a          MOV      r7,r10
;;;206    		if (this_tx > sum_bytes_per_chunk)
000464  e59d0004          LDR      r0,[sp,#4]
000468  e1570000          CMP      r7,r0
00046c  da000000          BLE      |L1.1140|
;;;207    			this_tx = sum_bytes_per_chunk;
000470  e59d7004          LDR      r7,[sp,#4]
                  |L1.1140|
;;;208    		result = yaffs_rd_chunk_tags_nand(dev, chunk_in_nand,
000474  e28d3028          ADD      r3,sp,#0x28
000478  e1a0200b          MOV      r2,r11
00047c  e1a00004          MOV      r0,r4
000480  e59d101c          LDR      r1,[sp,#0x1c]
000484  ebfffffe          BL       yaffs_rd_chunk_tags_nand
000488  e1a06000          MOV      r6,r0
;;;209    						buffer, &tags);
;;;210    
;;;211    		if (tags.chunk_id != chunk_id ||
00048c  e59d0020          LDR      r0,[sp,#0x20]
000490  e59d1030          LDR      r1,[sp,#0x30]
000494  e1510000          CMP      r1,r0
000498  1a00000c          BNE      |L1.1232|
;;;212    			tags.obj_id != YAFFS_OBJECTID_SUMMARY ||
00049c  e59d002c          LDR      r0,[sp,#0x2c]
0004a0  e3500010          CMP      r0,#0x10
0004a4  1a000009          BNE      |L1.1232|
;;;213    			tags.chunk_used == 0 ||
0004a8  e59d0028          LDR      r0,[sp,#0x28]
0004ac  e3500000          CMP      r0,#0
0004b0  0a000006          BEQ      |L1.1232|
;;;214    			tags.ecc_result > YAFFS_ECC_RESULT_FIXED ||
0004b4  e5dd0038          LDRB     r0,[sp,#0x38]
0004b8  e3500002          CMP      r0,#2
0004bc  ca000003          BGT      |L1.1232|
;;;215    			tags.n_bytes != (this_tx + sizeof(hdr)))
0004c0  e2871010          ADD      r1,r7,#0x10
0004c4  e59d0034          LDR      r0,[sp,#0x34]
0004c8  e1500001          CMP      r0,r1
0004cc  0a000000          BEQ      |L1.1236|
                  |L1.1232|
;;;216    				result = YAFFS_FAIL;
0004d0  e3a06000          MOV      r6,#0
                  |L1.1236|
;;;217    		if (result != YAFFS_OK)
0004d4  e3560001          CMP      r6,#1
0004d8  0a000000          BEQ      |L1.1248|
;;;218    			break;
0004dc  ea00002a          B        |L1.1420|
                  |L1.1248|
;;;219    
;;;220    		if (st == dev->sum_tags) {
0004e0  e5940e0c          LDR      r0,[r4,#0xe0c]
0004e4  e1500008          CMP      r0,r8
0004e8  1a00000e          BNE      |L1.1320|
;;;221    			/* If we're scanning then update the block info */
;;;222    			yaffs_set_chunk_bit(dev, blk, chunk_in_block);
0004ec  e1a01009          MOV      r1,r9
0004f0  e1a00004          MOV      r0,r4
0004f4  e59d2018          LDR      r2,[sp,#0x18]
0004f8  ebfffffe          BL       yaffs_set_chunk_bit
;;;223    			bi->pages_in_use++;
0004fc  e5950000          LDR      r0,[r5,#0]
000500  e3c00703          BIC      r0,r0,#0xc0000
000504  e3c00bff          BIC      r0,r0,#0x3fc00
000508  e5951000          LDR      r1,[r5,#0]
00050c  e1a01601          LSL      r1,r1,#12
000510  e3a02001          MOV      r2,#1
000514  e0821b21          ADD      r1,r2,r1,LSR #22
000518  e51f2134          LDR      r2,|L1.1004|
00051c  e0021501          AND      r1,r2,r1,LSL #10
000520  e1800001          ORR      r0,r0,r1
000524  e5850000          STR      r0,[r5,#0]
                  |L1.1320|
;;;224    		}
;;;225    		memcpy(&hdr, buffer, sizeof(hdr));
000528  e3a02010          MOV      r2,#0x10
00052c  e1a0100b          MOV      r1,r11
000530  e28d0008          ADD      r0,sp,#8
000534  ebfffffe          BL       __aeabi_memcpy
;;;226    		memcpy(sum_buffer, buffer + sizeof(hdr), this_tx);
000538  e1a02007          MOV      r2,r7
00053c  e28b1010          ADD      r1,r11,#0x10
000540  e59d0024          LDR      r0,[sp,#0x24]
000544  ebfffffe          BL       __aeabi_memcpy
;;;227    		n_bytes -= this_tx;
000548  e04aa007          SUB      r10,r10,r7
;;;228    		sum_buffer += this_tx;
00054c  e59d0024          LDR      r0,[sp,#0x24]
000550  e0800007          ADD      r0,r0,r7
000554  e58d0024          STR      r0,[sp,#0x24]
;;;229    		chunk_in_nand++;
000558  e59d001c          LDR      r0,[sp,#0x1c]
00055c  e2800001          ADD      r0,r0,#1
000560  e58d001c          STR      r0,[sp,#0x1c]
;;;230    		chunk_in_block++;
000564  e59d0018          LDR      r0,[sp,#0x18]
000568  e2800001          ADD      r0,r0,#1
00056c  e58d0018          STR      r0,[sp,#0x18]
;;;231    		chunk_id++;
000570  e59d0020          LDR      r0,[sp,#0x20]
000574  e2800001          ADD      r0,r0,#1
000578  e58d0020          STR      r0,[sp,#0x20]
;;;232    	} while (result == YAFFS_OK && n_bytes > 0);
00057c  e3560001          CMP      r6,#1
000580  1a000001          BNE      |L1.1420|
000584  e35a0000          CMP      r10,#0
000588  caffffb4          BGT      |L1.1120|
                  |L1.1420|
00058c  e1a00000          MOV      r0,r0                 ;218
;;;233    	yaffs_release_temp_buffer(dev, buffer);
000590  e1a0100b          MOV      r1,r11
000594  e1a00004          MOV      r0,r4
000598  ebfffffe          BL       yaffs_release_temp_buffer
;;;234    
;;;235    	if (result == YAFFS_OK) {
00059c  e3560001          CMP      r6,#1
0005a0  1a00000f          BNE      |L1.1508|
;;;236    		/* Verify header */
;;;237    		if (hdr.version != YAFFS_SUMMARY_VERSION ||
0005a4  e59d0008          LDR      r0,[sp,#8]
0005a8  e3500001          CMP      r0,#1
0005ac  1a00000b          BNE      |L1.1504|
;;;238    		    hdr.block != blk ||
0005b0  e59d000c          LDR      r0,[sp,#0xc]
0005b4  e1500009          CMP      r0,r9
0005b8  1a000008          BNE      |L1.1504|
;;;239    		    hdr.seq != bi->seq_number ||
0005bc  e59d0010          LDR      r0,[sp,#0x10]
0005c0  e5951004          LDR      r1,[r5,#4]
0005c4  e1500001          CMP      r0,r1
0005c8  1a000004          BNE      |L1.1504|
;;;240    		    hdr.sum != yaffs_summary_sum(dev))
0005cc  e1a00004          MOV      r0,r4
0005d0  ebfffffe          BL       yaffs_summary_sum
0005d4  e59d1014          LDR      r1,[sp,#0x14]
0005d8  e1500001          CMP      r0,r1
0005dc  0a000000          BEQ      |L1.1508|
                  |L1.1504|
;;;241    			result = YAFFS_FAIL;
0005e0  e3a06000          MOV      r6,#0
                  |L1.1508|
;;;242    	}
;;;243    
;;;244    	if (st == dev->sum_tags && result == YAFFS_OK)
0005e4  e5940e0c          LDR      r0,[r4,#0xe0c]
0005e8  e1500008          CMP      r0,r8
0005ec  1a000004          BNE      |L1.1540|
0005f0  e3560001          CMP      r6,#1
0005f4  1a000002          BNE      |L1.1540|
;;;245    		bi->has_summary = 1;
0005f8  e5950000          LDR      r0,[r5,#0]
0005fc  e3800101          ORR      r0,r0,#0x40000000
000600  e5850000          STR      r0,[r5,#0]
                  |L1.1540|
;;;246    
;;;247    	return result;
000604  e1a00006          MOV      r0,r6
000608  e28dd074          ADD      sp,sp,#0x74
;;;248    }
00060c  e8bd8ff0          POP      {r4-r11,pc}
;;;249    
                          ENDP

                  yaffs_summary_add PROC
;;;250    int yaffs_summary_add(struct yaffs_dev *dev,
000610  e92d47ff          PUSH     {r0-r10,lr}
;;;251    			struct yaffs_ext_tags *tags,
;;;252    			int chunk_in_nand)
;;;253    {
000614  e1a04000          MOV      r4,r0
000618  e1a08001          MOV      r8,r1
00061c  e1a07002          MOV      r7,r2
;;;254    	struct yaffs_packed_tags2_tags_only tags_only;
;;;255    	struct yaffs_summary_tags *sum_tags;
;;;256    	int block_in_nand = chunk_in_nand / dev->param.chunks_per_block;
000620  e1a00007          MOV      r0,r7
000624  e594100c          LDR      r1,[r4,#0xc]
000628  ebfffffe          BL       __aeabi_idivmod
00062c  e1a09000          MOV      r9,r0
;;;257    	int chunk_in_block = chunk_in_nand % dev->param.chunks_per_block;
000630  e1a00007          MOV      r0,r7
000634  e594100c          LDR      r1,[r4,#0xc]
000638  ebfffffe          BL       __aeabi_idivmod
00063c  e1a06001          MOV      r6,r1
;;;258    
;;;259    	if (!dev->sum_tags)
000640  e5940e0c          LDR      r0,[r4,#0xe0c]
000644  e3500000          CMP      r0,#0
000648  1a000002          BNE      |L1.1624|
;;;260    		return YAFFS_OK;
00064c  e3a00001          MOV      r0,#1
                  |L1.1616|
000650  e28dd010          ADD      sp,sp,#0x10
;;;261    
;;;262    	if (chunk_in_block >= 0 && chunk_in_block < dev->chunks_per_summary) {
;;;263    		yaffs_pack_tags2_tags_only(&tags_only, tags);
;;;264    		sum_tags = &dev->sum_tags[chunk_in_block];
;;;265    		sum_tags->chunk_id = tags_only.chunk_id;
;;;266    		sum_tags->n_bytes = tags_only.n_bytes;
;;;267    		sum_tags->obj_id = tags_only.obj_id;
;;;268    
;;;269    		if (chunk_in_block == dev->chunks_per_summary - 1) {
;;;270    			/* Time to write out the summary */
;;;271    			yaffs_summary_write(dev, block_in_nand);
;;;272    			yaffs_summary_clear(dev);
;;;273    			yaffs_skip_rest_of_block(dev);
;;;274    		}
;;;275    	}
;;;276    	return YAFFS_OK;
;;;277    }
000654  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1624|
000658  e3560000          CMP      r6,#0                 ;262
00065c  ba000019          BLT      |L1.1736|
000660  e5940e08          LDR      r0,[r4,#0xe08]        ;262
000664  e1500006          CMP      r0,r6                 ;262
000668  da000016          BLE      |L1.1736|
00066c  e1a01008          MOV      r1,r8                 ;263
000670  e1a0000d          MOV      r0,sp                 ;263
000674  ebfffffe          BL       yaffs_pack_tags2_tags_only
000678  e0861086          ADD      r1,r6,r6,LSL #1       ;264
00067c  e5940e0c          LDR      r0,[r4,#0xe0c]        ;264
000680  e0805101          ADD      r5,r0,r1,LSL #2       ;264
000684  e59d0008          LDR      r0,[sp,#8]            ;265
000688  e5850004          STR      r0,[r5,#4]            ;265
00068c  e59d000c          LDR      r0,[sp,#0xc]          ;266
000690  e5850008          STR      r0,[r5,#8]            ;266
000694  e59d0004          LDR      r0,[sp,#4]            ;267
000698  e5850000          STR      r0,[r5,#0]            ;267
00069c  e5940e08          LDR      r0,[r4,#0xe08]        ;269
0006a0  e2400001          SUB      r0,r0,#1              ;269
0006a4  e1500006          CMP      r0,r6                 ;269
0006a8  1a000006          BNE      |L1.1736|
0006ac  e1a01009          MOV      r1,r9                 ;271
0006b0  e1a00004          MOV      r0,r4                 ;271
0006b4  ebfffffe          BL       yaffs_summary_write
0006b8  e1a00004          MOV      r0,r4                 ;272
0006bc  ebfffffe          BL       yaffs_summary_clear
0006c0  e1a00004          MOV      r0,r4                 ;273
0006c4  ebfffffe          BL       yaffs_skip_rest_of_block
                  |L1.1736|
0006c8  e3a00001          MOV      r0,#1                 ;276
0006cc  eaffffdf          B        |L1.1616|
;;;278    
                          ENDP

                  yaffs_summary_fetch PROC
;;;279    int yaffs_summary_fetch(struct yaffs_dev *dev,
0006d0  e92d41ff          PUSH     {r0-r8,lr}
;;;280    			struct yaffs_ext_tags *tags,
;;;281    			int chunk_in_block)
;;;282    {
0006d4  e1a06000          MOV      r6,r0
0006d8  e1a07001          MOV      r7,r1
0006dc  e1a04002          MOV      r4,r2
;;;283    	struct yaffs_packed_tags2_tags_only tags_only;
;;;284    	struct yaffs_summary_tags *sum_tags;
;;;285    	if (chunk_in_block >= 0 && chunk_in_block < dev->chunks_per_summary) {
0006e0  e3540000          CMP      r4,#0
0006e4  ba000011          BLT      |L1.1840|
0006e8  e5960e08          LDR      r0,[r6,#0xe08]
0006ec  e1500004          CMP      r0,r4
0006f0  da00000e          BLE      |L1.1840|
;;;286    		sum_tags = &dev->sum_tags[chunk_in_block];
0006f4  e0841084          ADD      r1,r4,r4,LSL #1
0006f8  e5960e0c          LDR      r0,[r6,#0xe0c]
0006fc  e0805101          ADD      r5,r0,r1,LSL #2
;;;287    		tags_only.chunk_id = sum_tags->chunk_id;
000700  e5950004          LDR      r0,[r5,#4]
000704  e58d0008          STR      r0,[sp,#8]
;;;288    		tags_only.n_bytes = sum_tags->n_bytes;
000708  e5950008          LDR      r0,[r5,#8]
00070c  e58d000c          STR      r0,[sp,#0xc]
;;;289    		tags_only.obj_id = sum_tags->obj_id;
000710  e5950000          LDR      r0,[r5,#0]
000714  e58d0004          STR      r0,[sp,#4]
;;;290    		yaffs_unpack_tags2_tags_only(tags, &tags_only);
000718  e1a0100d          MOV      r1,sp
00071c  e1a00007          MOV      r0,r7
000720  ebfffffe          BL       yaffs_unpack_tags2_tags_only
;;;291    		return YAFFS_OK;
000724  e3a00001          MOV      r0,#1
                  |L1.1832|
000728  e28dd010          ADD      sp,sp,#0x10
;;;292    	}
;;;293    	return YAFFS_FAIL;
;;;294    }
00072c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1840|
000730  e3a00000          MOV      r0,#0                 ;293
000734  eafffffb          B        |L1.1832|
;;;295    
                          ENDP

                  yaffs_summary_gc PROC
;;;296    void yaffs_summary_gc(struct yaffs_dev *dev, int blk)
000738  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {
00073c  e1a04000          MOV      r4,r0
000740  e1a07001          MOV      r7,r1
;;;298    	struct yaffs_block_info *bi = yaffs_get_block_info(dev, blk);
000744  e1a01007          MOV      r1,r7
000748  e1a00004          MOV      r0,r4
00074c  ebfffffe          BL       yaffs_get_block_info
000750  e1a05000          MOV      r5,r0
;;;299    	int i;
;;;300    
;;;301    	if (!bi->has_summary)
000754  e5950000          LDR      r0,[r5,#0]
000758  e1a00080          LSL      r0,r0,#1
00075c  e1b00fa0          LSRS     r0,r0,#31
000760  1a000000          BNE      |L1.1896|
                  |L1.1892|
;;;302    		return;
;;;303    
;;;304    	for (i = dev->chunks_per_summary;
;;;305    	     i < dev->param.chunks_per_block;
;;;306    	     i++) {
;;;307    		if (yaffs_check_chunk_bit(dev, blk, i)) {
;;;308    			yaffs_clear_chunk_bit(dev, blk, i);
;;;309    			bi->pages_in_use--;
;;;310    			dev->n_free_chunks++;
;;;311    		}
;;;312    	}
;;;313    }
000764  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1896|
000768  e5946e08          LDR      r6,[r4,#0xe08]        ;304
00076c  ea000018          B        |L1.2004|
                  |L1.1904|
000770  e1a02006          MOV      r2,r6                 ;307
000774  e1a01007          MOV      r1,r7                 ;307
000778  e1a00004          MOV      r0,r4                 ;307
00077c  ebfffffe          BL       yaffs_check_chunk_bit
000780  e3500000          CMP      r0,#0                 ;307
000784  0a000011          BEQ      |L1.2000|
000788  e1a02006          MOV      r2,r6                 ;308
00078c  e1a01007          MOV      r1,r7                 ;308
000790  e1a00004          MOV      r0,r4                 ;308
000794  ebfffffe          BL       yaffs_clear_chunk_bit
000798  e5950000          LDR      r0,[r5,#0]            ;309
00079c  e3c00703          BIC      r0,r0,#0xc0000        ;309
0007a0  e3c00bff          BIC      r0,r0,#0x3fc00        ;309
0007a4  e5951000          LDR      r1,[r5,#0]            ;309
0007a8  e1a01601          LSL      r1,r1,#12             ;309
0007ac  e3a02001          MOV      r2,#1                 ;309
0007b0  e0621b21          RSB      r1,r2,r1,LSR #22      ;309
0007b4  e51f23d0          LDR      r2,|L1.1004|
0007b8  e0021501          AND      r1,r2,r1,LSL #10      ;309
0007bc  e1800001          ORR      r0,r0,r1              ;309
0007c0  e5850000          STR      r0,[r5,#0]            ;309
0007c4  e5940d4c          LDR      r0,[r4,#0xd4c]        ;310
0007c8  e2800001          ADD      r0,r0,#1              ;310
0007cc  e5840d4c          STR      r0,[r4,#0xd4c]        ;310
                  |L1.2000|
0007d0  e2866001          ADD      r6,r6,#1              ;306
                  |L1.2004|
0007d4  e594000c          LDR      r0,[r4,#0xc]          ;305
0007d8  e1500006          CMP      r0,r6                 ;305
0007dc  caffffe3          BGT      |L1.1904|
0007e0  e1a00000          MOV      r0,r0
0007e4  eaffffde          B        |L1.1892|
                          ENDP

