; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_mtdif2.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_mtdif2.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_mtdif2.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_mtdif2.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nandmtd2_write_chunk_tags PROC
;;;40      */
;;;41     int nandmtd2_write_chunk_tags(struct yaffs_dev *dev, int nand_chunk,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;42     			      const u8 *data,
;;;43     			      const struct yaffs_ext_tags *tags)
;;;44     {
000004  e24dd04c          SUB      sp,sp,#0x4c
000008  e1a04000          MOV      r4,r0
00000c  e1a05001          MOV      r5,r1
000010  e1a06002          MOV      r6,r2
000014  e1a09003          MOV      r9,r3
;;;45     	struct mtd_info *mtd = yaffs_dev_to_mtd(dev);
000018  e594a098          LDR      r10,[r4,#0x98]
;;;46     	struct mtd_oob_ops ops;
;;;47     
;;;48     	int retval = 0;
00001c  e3a00000          MOV      r0,#0
000020  e58d0028          STR      r0,[sp,#0x28]
;;;49     	loff_t addr;
;;;50     
;;;51     	struct yaffs_packed_tags2 pt;
;;;52     
;;;53     	int packed_tags_size =
000024  e594002c          LDR      r0,[r4,#0x2c]
000028  e3500000          CMP      r0,#0
00002c  0a000001          BEQ      |L1.56|
;;;54     	    dev->param.no_tags_ecc ? sizeof(pt.t) : sizeof(pt);
000030  e3a00010          MOV      r0,#0x10
000034  ea000000          B        |L1.60|
                  |L1.56|
000038  e3a0001c          MOV      r0,#0x1c
                  |L1.60|
00003c  e58d0008          STR      r0,[sp,#8]
;;;55     	void *packed_tags_ptr =
000040  e594002c          LDR      r0,[r4,#0x2c]
000044  e3500000          CMP      r0,#0
000048  0a000001          BEQ      |L1.84|
;;;56     	    dev->param.no_tags_ecc ? (void *)&pt.t : (void *)&pt;
00004c  e28d000c          ADD      r0,sp,#0xc
000050  ea000000          B        |L1.88|
                  |L1.84|
000054  e28d000c          ADD      r0,sp,#0xc
                  |L1.88|
000058  e58d0004          STR      r0,[sp,#4]
;;;57     
;;;58     	yaffs_trace(YAFFS_TRACE_MTD,
00005c  e59f02d8          LDR      r0,|L1.828|
000060  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000064  e3100901          TST      r0,#0x4000
000068  0a000004          BEQ      |L1.128|
00006c  e1a03009          MOV      r3,r9
000070  e1a02006          MOV      r2,r6
000074  e1a01005          MOV      r1,r5
000078  e28f0d0b          ADR      r0,|L1.832|
00007c  ebfffffe          BL       sysprintf
                  |L1.128|
;;;59     		"nandmtd2_write_chunk_tags chunk %d data %p tags %p",
;;;60     		nand_chunk, data, tags);
;;;61     
;;;62     	addr = ((loff_t) nand_chunk) * dev->param.total_bytes_per_chunk;
000080  e3a02000          MOV      r2,#0
000084  e1a01fc5          ASR      r1,r5,#31
000088  e5940008          LDR      r0,[r4,#8]
00008c  e0837590          UMULL    r7,r3,r0,r5
000090  e0223295          MLA      r2,r5,r2,r3
000094  e0282190          MLA      r8,r0,r1,r2
;;;63     
;;;64     	/* For yaffs2 writing there must be both data and tags.
;;;65     	 * If we're using inband tags, then the tags are stuffed into
;;;66     	 * the end of the data buffer.
;;;67     	 */
;;;68     	if (!data || !tags)
000098  e3560000          CMP      r6,#0
00009c  0a000001          BEQ      |L1.168|
0000a0  e3590000          CMP      r9,#0
0000a4  1a000005          BNE      |L1.192|
                  |L1.168|
;;;69     		BUG();
0000a8  e1a00000          MOV      r0,r0
0000ac  e3a02045          MOV      r2,#0x45
0000b0  e28f1fb1          ADR      r1,|L1.892|
0000b4  e28f0fbe          ADR      r0,|L1.948|
0000b8  ebfffffe          BL       sysprintf
0000bc  ea000012          B        |L1.268|
                  |L1.192|
;;;70     	else if (dev->param.inband_tags) {
0000c0  e5940004          LDR      r0,[r4,#4]
0000c4  e3500000          CMP      r0,#0
0000c8  0a000005          BEQ      |L1.228|
;;;71     		struct yaffs_packed_tags2_tags_only *pt2tp;
;;;72     		pt2tp =
0000cc  e59400a4          LDR      r0,[r4,#0xa4]
0000d0  e080b006          ADD      r11,r0,r6
;;;73     		    (struct yaffs_packed_tags2_tags_only *)(data +
;;;74     							dev->
;;;75     							data_bytes_per_chunk);
;;;76     		yaffs_pack_tags2_tags_only(pt2tp, tags);
0000d4  e1a01009          MOV      r1,r9
0000d8  e1a0000b          MOV      r0,r11
0000dc  ebfffffe          BL       yaffs_pack_tags2_tags_only
;;;77     	} else {
0000e0  ea000009          B        |L1.268|
                  |L1.228|
;;;78     		yaffs_pack_tags2(&pt, tags, !dev->param.no_tags_ecc);
0000e4  e594002c          LDR      r0,[r4,#0x2c]
0000e8  e3500000          CMP      r0,#0
0000ec  1a000001          BNE      |L1.248|
0000f0  e3a00001          MOV      r0,#1
0000f4  ea000000          B        |L1.252|
                  |L1.248|
0000f8  e3a00000          MOV      r0,#0
                  |L1.252|
0000fc  e1a02000          MOV      r2,r0
000100  e1a01009          MOV      r1,r9
000104  e28d000c          ADD      r0,sp,#0xc
000108  ebfffffe          BL       yaffs_pack_tags2
                  |L1.268|
;;;79     	}
;;;80     
;;;81     	ops.mode = MTD_OOB_AUTO;
00010c  e3a00001          MOV      r0,#1
000110  e5cd002c          STRB     r0,[sp,#0x2c]
;;;82     	ops.ooblen = (dev->param.inband_tags) ? 0 : packed_tags_size;
000114  e5940004          LDR      r0,[r4,#4]
000118  e3500000          CMP      r0,#0
00011c  0a000001          BEQ      |L1.296|
000120  e3a00000          MOV      r0,#0
000124  ea000000          B        |L1.300|
                  |L1.296|
000128  e59d0008          LDR      r0,[sp,#8]
                  |L1.300|
00012c  e58d0038          STR      r0,[sp,#0x38]
;;;83     	ops.len = dev->param.total_bytes_per_chunk;
000130  e5940008          LDR      r0,[r4,#8]
000134  e58d0030          STR      r0,[sp,#0x30]
;;;84     	ops.ooboffs = 0;
000138  e3a00000          MOV      r0,#0
00013c  e58d0040          STR      r0,[sp,#0x40]
;;;85     	ops.datbuf = (u8 *) data;
000140  e58d6044          STR      r6,[sp,#0x44]
;;;86     	ops.oobbuf = (dev->param.inband_tags) ? NULL : packed_tags_ptr;
000144  e5940004          LDR      r0,[r4,#4]
000148  e3500000          CMP      r0,#0
00014c  0a000001          BEQ      |L1.344|
000150  e3a00000          MOV      r0,#0
000154  ea000000          B        |L1.348|
                  |L1.344|
000158  e59d0004          LDR      r0,[sp,#4]
                  |L1.348|
00015c  e58d0048          STR      r0,[sp,#0x48]
;;;87     	retval = mtd->write_oob(mtd, addr, &ops);
000160  e28d002c          ADD      r0,sp,#0x2c
000164  e58d0000          STR      r0,[sp,#0]
000168  e1a02007          MOV      r2,r7
00016c  e1a03008          MOV      r3,r8
000170  e59a1050          LDR      r1,[r10,#0x50]
000174  e1a0000a          MOV      r0,r10
000178  e12fff31          BLX      r1
00017c  e58d0028          STR      r0,[sp,#0x28]
;;;88     
;;;89     	if (retval == 0)
000180  e59d0028          LDR      r0,[sp,#0x28]
000184  e3500000          CMP      r0,#0
000188  1a000002          BNE      |L1.408|
;;;90     		return YAFFS_OK;
00018c  e3a00001          MOV      r0,#1
                  |L1.400|
000190  e28dd04c          ADD      sp,sp,#0x4c
;;;91     	else
;;;92     		return YAFFS_FAIL;
;;;93     }
000194  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.408|
000198  e3a00000          MOV      r0,#0                 ;92
00019c  eafffffb          B        |L1.400|
;;;94     
                          ENDP

                  nandmtd2_read_chunk_tags PROC
;;;95     int nandmtd2_read_chunk_tags(struct yaffs_dev *dev, int nand_chunk,
0001a0  e92d4ff0          PUSH     {r4-r11,lr}
;;;96     			     u8 *data, struct yaffs_ext_tags *tags)
;;;97     {
0001a4  e24dd0dc          SUB      sp,sp,#0xdc
0001a8  e1a04000          MOV      r4,r0
0001ac  e1a09001          MOV      r9,r1
0001b0  e1a06002          MOV      r6,r2
0001b4  e1a05003          MOV      r5,r3
;;;98     	struct mtd_info *mtd = yaffs_dev_to_mtd(dev);
0001b8  e594a098          LDR      r10,[r4,#0x98]
;;;99     	u8 local_spare[128];
;;;100    	struct mtd_oob_ops ops;
;;;101    	size_t dummy;
;;;102    	int retval = 0;
0001bc  e3a0b000          MOV      r11,#0
;;;103    	int local_data = 0;
0001c0  e3a00000          MOV      r0,#0
0001c4  e58d0034          STR      r0,[sp,#0x34]
;;;104    	struct yaffs_packed_tags2 pt;
;;;105    	loff_t addr = ((loff_t) nand_chunk) * dev->param.total_bytes_per_chunk;
0001c8  e3a01000          MOV      r1,#0
0001cc  e1a03fc9          ASR      r3,r9,#31
0001d0  e5940008          LDR      r0,[r4,#8]
0001d4  e08c7990          UMULL    r7,r12,r0,r9
0001d8  e021c199          MLA      r1,r9,r1,r12
0001dc  e0281390          MLA      r8,r0,r3,r1
;;;106    	int packed_tags_size =
0001e0  e594002c          LDR      r0,[r4,#0x2c]
0001e4  e3500000          CMP      r0,#0
0001e8  0a000001          BEQ      |L1.500|
;;;107    	    dev->param.no_tags_ecc ? sizeof(pt.t) : sizeof(pt);
0001ec  e3a00010          MOV      r0,#0x10
0001f0  ea000000          B        |L1.504|
                  |L1.500|
0001f4  e3a0001c          MOV      r0,#0x1c
                  |L1.504|
0001f8  e58d0014          STR      r0,[sp,#0x14]
;;;108    	void *packed_tags_ptr =
0001fc  e594002c          LDR      r0,[r4,#0x2c]
000200  e3500000          CMP      r0,#0
000204  0a000001          BEQ      |L1.528|
;;;109    	    dev->param.no_tags_ecc ? (void *)&pt.t : (void *)&pt;
000208  e28d0018          ADD      r0,sp,#0x18
00020c  ea000000          B        |L1.532|
                  |L1.528|
000210  e28d0018          ADD      r0,sp,#0x18
                  |L1.532|
000214  e58d0010          STR      r0,[sp,#0x10]
;;;110    
;;;111    	yaffs_trace(YAFFS_TRACE_MTD,
000218  e59f011c          LDR      r0,|L1.828|
00021c  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000220  e3100901          TST      r0,#0x4000
000224  0a000004          BEQ      |L1.572|
000228  e1a03005          MOV      r3,r5
00022c  e1a02006          MOV      r2,r6
000230  e1a01009          MOV      r1,r9
000234  e28f0e19          ADR      r0,|L1.972|
000238  ebfffffe          BL       sysprintf
                  |L1.572|
;;;112    		"nandmtd2_read_chunk_tags chunk %d data %p tags %p",
;;;113    		nand_chunk, data, tags);
;;;114    
;;;115    	if (dev->param.inband_tags) {
00023c  e5940004          LDR      r0,[r4,#4]
000240  e3500000          CMP      r0,#0
000244  0a000006          BEQ      |L1.612|
;;;116    
;;;117    		if (!data) {
000248  e3560000          CMP      r6,#0
00024c  1a000004          BNE      |L1.612|
;;;118    			local_data = 1;
000250  e3a00001          MOV      r0,#1
000254  e58d0034          STR      r0,[sp,#0x34]
;;;119    			data = yaffs_get_temp_buffer(dev);
000258  e1a00004          MOV      r0,r4
00025c  ebfffffe          BL       yaffs_get_temp_buffer
000260  e1a06000          MOV      r6,r0
                  |L1.612|
;;;120    		}
;;;121    
;;;122    	}
;;;123    
;;;124    	if (dev->param.inband_tags || (data && !tags))
000264  e5940004          LDR      r0,[r4,#4]
000268  e3500000          CMP      r0,#0
00026c  1a000003          BNE      |L1.640|
000270  e3560000          CMP      r6,#0
000274  0a00000b          BEQ      |L1.680|
000278  e3550000          CMP      r5,#0
00027c  1a000009          BNE      |L1.680|
                  |L1.640|
;;;125    		retval = mtd->read(mtd, addr, dev->param.total_bytes_per_chunk,
000280  e28d1038          ADD      r1,sp,#0x38
000284  e5940008          LDR      r0,[r4,#8]
000288  e88d0043          STM      sp,{r0,r1,r6}
00028c  e1a02007          MOV      r2,r7
000290  e1a03008          MOV      r3,r8
000294  e59a1040          LDR      r1,[r10,#0x40]
000298  e1a0000a          MOV      r0,r10
00029c  e12fff31          BLX      r1
0002a0  e1a0b000          MOV      r11,r0
0002a4  ea000018          B        |L1.780|
                  |L1.680|
;;;126    				   &dummy, data);
;;;127    	else if (tags) {
0002a8  e3550000          CMP      r5,#0
0002ac  0a000016          BEQ      |L1.780|
;;;128    		ops.mode = MTD_OOB_AUTO;
0002b0  e3a00001          MOV      r0,#1
0002b4  e5cd003c          STRB     r0,[sp,#0x3c]
;;;129    		ops.ooblen = packed_tags_size;
0002b8  e59d0014          LDR      r0,[sp,#0x14]
0002bc  e58d0048          STR      r0,[sp,#0x48]
;;;130    		ops.len = data ? dev->data_bytes_per_chunk : packed_tags_size;
0002c0  e3560000          CMP      r6,#0
0002c4  0a000001          BEQ      |L1.720|
0002c8  e59400a4          LDR      r0,[r4,#0xa4]
0002cc  ea000000          B        |L1.724|
                  |L1.720|
0002d0  e59d0014          LDR      r0,[sp,#0x14]
                  |L1.724|
0002d4  e58d0040          STR      r0,[sp,#0x40]
;;;131    		ops.ooboffs = 0;
0002d8  e3a00000          MOV      r0,#0
0002dc  e58d0050          STR      r0,[sp,#0x50]
;;;132    		ops.datbuf = data;
0002e0  e58d6054          STR      r6,[sp,#0x54]
;;;133    		ops.oobbuf = local_spare;
0002e4  e28d005c          ADD      r0,sp,#0x5c
0002e8  e58d0058          STR      r0,[sp,#0x58]
;;;134    		retval = mtd->read_oob(mtd, addr, &ops);
0002ec  e28d003c          ADD      r0,sp,#0x3c
0002f0  e58d0000          STR      r0,[sp,#0]
0002f4  e1a02007          MOV      r2,r7
0002f8  e1a03008          MOV      r3,r8
0002fc  e59a104c          LDR      r1,[r10,#0x4c]
000300  e1a0000a          MOV      r0,r10
000304  e12fff31          BLX      r1
000308  e1a0b000          MOV      r11,r0
                  |L1.780|
;;;135    	}
;;;136    
;;;137    	if (dev->param.inband_tags) {
00030c  e5940004          LDR      r0,[r4,#4]
000310  e3500000          CMP      r0,#0
000314  0a00003b          BEQ      |L1.1032|
;;;138    		if (tags) {
000318  e3550000          CMP      r5,#0
00031c  0a000049          BEQ      |L1.1096|
;;;139    			struct yaffs_packed_tags2_tags_only *pt2tp;
;;;140    			pt2tp =
000320  e59400a4          LDR      r0,[r4,#0xa4]
000324  e0800006          ADD      r0,r0,r6
000328  e58d000c          STR      r0,[sp,#0xc]
;;;141    				(struct yaffs_packed_tags2_tags_only *)
;;;142    				&data[dev->data_bytes_per_chunk];
;;;143    			yaffs_unpack_tags2_tags_only(tags, pt2tp);
00032c  e1a00005          MOV      r0,r5
000330  e59d100c          LDR      r1,[sp,#0xc]
000334  ebfffffe          BL       yaffs_unpack_tags2_tags_only
;;;144    		}
000338  ea000042          B        |L1.1096|
                  |L1.828|
                          DCD      yaffs_trace_mask
                  |L1.832|
000340  79616666          DCB      "yaffs: nandmtd2_write_chunk_tags chunk %d data %p tags "
000344  733a206e
000348  616e646d
00034c  7464325f
000350  77726974
000354  655f6368
000358  756e6b5f
00035c  74616773
000360  20636875
000364  6e6b2025
000368  64206461
00036c  74612025
000370  70207461
000374  677320  
000377  25700a00          DCB      "%p\n",0
00037b  00                DCB      0
                  |L1.892|
00037c  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\yaffs_mtd"
000380  2e5c636f
000384  6d6d6f6e
000388  5c737263
00038c  5c425350
000390  5c546869
000394  72645061
000398  7274795c
00039c  79616666
0003a0  73325c79
0003a4  61666673
0003a8  5f6d7464
0003ac  6966322e          DCB      "if2.c",0
0003b0  6300    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L1.948|
0003b4  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
0003b8  6f742042
0003bc  55472061
0003c0  74202573
0003c4  3a256421
0003c8  0a00    
0003ca  00                DCB      0
0003cb  00                DCB      0
                  |L1.972|
0003cc  79616666          DCB      "yaffs: nandmtd2_read_chunk_tags chunk %d data %p tags %"
0003d0  733a206e
0003d4  616e646d
0003d8  7464325f
0003dc  72656164
0003e0  5f636875
0003e4  6e6b5f74
0003e8  61677320
0003ec  6368756e
0003f0  6b202564
0003f4  20646174
0003f8  61202570
0003fc  20746167
000400  732025  
000403  700a00            DCB      "p\n",0
000406  00                DCB      0
000407  00                DCB      0
                  |L1.1032|
;;;145    	} else {
;;;146    		if (tags) {
000408  e3550000          CMP      r5,#0
00040c  0a00000d          BEQ      |L1.1096|
;;;147    			memcpy(packed_tags_ptr,
000410  e59d2014          LDR      r2,[sp,#0x14]
000414  e28d105c          ADD      r1,sp,#0x5c
000418  e59d0010          LDR      r0,[sp,#0x10]
00041c  ebfffffe          BL       __aeabi_memcpy
;;;148    			       local_spare,
;;;149    			       packed_tags_size);
;;;150    			yaffs_unpack_tags2(tags, &pt, !dev->param.no_tags_ecc);
000420  e594002c          LDR      r0,[r4,#0x2c]
000424  e3500000          CMP      r0,#0
000428  1a000001          BNE      |L1.1076|
00042c  e3a00001          MOV      r0,#1
000430  ea000000          B        |L1.1080|
                  |L1.1076|
000434  e3a00000          MOV      r0,#0
                  |L1.1080|
000438  e1a02000          MOV      r2,r0
00043c  e28d1018          ADD      r1,sp,#0x18
000440  e1a00005          MOV      r0,r5
000444  ebfffffe          BL       yaffs_unpack_tags2
                  |L1.1096|
;;;151    		}
;;;152    	}
;;;153    
;;;154    	if (local_data)
000448  e59d0034          LDR      r0,[sp,#0x34]
00044c  e3500000          CMP      r0,#0
000450  0a000002          BEQ      |L1.1120|
;;;155    		yaffs_release_temp_buffer(dev, data);
000454  e1a01006          MOV      r1,r6
000458  e1a00004          MOV      r0,r4
00045c  ebfffffe          BL       yaffs_release_temp_buffer
                  |L1.1120|
;;;156    
;;;157    	if (tags && retval == -EBADMSG
000460  e3550000          CMP      r5,#0
000464  0a000009          BEQ      |L1.1168|
000468  e37b004a          CMN      r11,#0x4a
00046c  1a000007          BNE      |L1.1168|
;;;158    	    && tags->ecc_result == YAFFS_ECC_RESULT_NO_ERROR) {
000470  e5d50010          LDRB     r0,[r5,#0x10]
000474  e3500001          CMP      r0,#1
000478  1a000004          BNE      |L1.1168|
;;;159    		tags->ecc_result = YAFFS_ECC_RESULT_UNFIXED;
00047c  e3a00003          MOV      r0,#3
000480  e5c50010          STRB     r0,[r5,#0x10]
;;;160    		dev->n_ecc_unfixed++;
000484  e5940e44          LDR      r0,[r4,#0xe44]
000488  e2800001          ADD      r0,r0,#1
00048c  e5840e44          STR      r0,[r4,#0xe44]
                  |L1.1168|
;;;161    	}
;;;162    	if (tags && retval == -EUCLEAN
000490  e3550000          CMP      r5,#0
000494  0a000009          BEQ      |L1.1216|
000498  e37b0075          CMN      r11,#0x75
00049c  1a000007          BNE      |L1.1216|
;;;163    	    && tags->ecc_result == YAFFS_ECC_RESULT_NO_ERROR) {
0004a0  e5d50010          LDRB     r0,[r5,#0x10]
0004a4  e3500001          CMP      r0,#1
0004a8  1a000004          BNE      |L1.1216|
;;;164    		tags->ecc_result = YAFFS_ECC_RESULT_FIXED;
0004ac  e3a00002          MOV      r0,#2
0004b0  e5c50010          STRB     r0,[r5,#0x10]
;;;165    		dev->n_ecc_fixed++;
0004b4  e5940e40          LDR      r0,[r4,#0xe40]
0004b8  e2800001          ADD      r0,r0,#1
0004bc  e5840e40          STR      r0,[r4,#0xe40]
                  |L1.1216|
;;;166    	}
;;;167    	if (retval == 0)
0004c0  e35b0000          CMP      r11,#0
0004c4  1a000002          BNE      |L1.1236|
;;;168    		return YAFFS_OK;
0004c8  e3a00001          MOV      r0,#1
                  |L1.1228|
0004cc  e28dd0dc          ADD      sp,sp,#0xdc
;;;169    	else
;;;170    		return YAFFS_FAIL;
;;;171    }
0004d0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1236|
0004d4  e3a00000          MOV      r0,#0                 ;170
0004d8  eafffffb          B        |L1.1228|
;;;172    
                          ENDP

                  nandmtd2_MarkNANDBlockBad PROC
;;;173    
;;;174    int nandmtd2_MarkNANDBlockBad(struct yaffs_dev *dev, int blockNo)
0004dc  e92d47f0          PUSH     {r4-r10,lr}
;;;175    {
0004e0  e1a04000          MOV      r4,r0
0004e4  e1a06001          MOV      r6,r1
;;;176    	struct mtd_info *mtd = (struct mtd_info *)(dev->driver_context);
0004e8  e5949098          LDR      r9,[r4,#0x98]
;;;177    	int retval;
;;;178    
;;;179    	yaffs_trace(YAFFS_TRACE_MTD,
0004ec  e51f01b8          LDR      r0,|L1.828|
0004f0  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0004f4  e3100901          TST      r0,#0x4000
0004f8  0a000002          BEQ      |L1.1288|
0004fc  e1a01006          MOV      r1,r6
000500  e28f0f59          ADR      r0,|L1.1644|
000504  ebfffffe          BL       sysprintf
                  |L1.1288|
;;;180    		"nandmtd2_MarkNANDBlockBad %d", blockNo);
;;;181    
;;;182    	retval =
000508  e594000c          LDR      r0,[r4,#0xc]
00050c  e0000096          MUL      r0,r6,r0
000510  e59420a4          LDR      r2,[r4,#0xa4]
000514  e0000092          MUL      r0,r2,r0
000518  e1a03fc0          ASR      r3,r0,#31
00051c  e1a07000          MOV      r7,r0
000520  e1a02007          MOV      r2,r7
000524  e599107c          LDR      r1,[r9,#0x7c]
000528  e1a00009          MOV      r0,r9
00052c  e12fff31          BLX      r1
000530  e1a05000          MOV      r5,r0
;;;183    	    mtd->block_markbad(mtd,
;;;184    			       blockNo * dev->param.chunks_per_block *
;;;185    			       dev->data_bytes_per_chunk);
;;;186    
;;;187    	if (retval == 0)
000534  e3550000          CMP      r5,#0
000538  1a000001          BNE      |L1.1348|
;;;188    		return YAFFS_OK;
00053c  e3a00001          MOV      r0,#1
                  |L1.1344|
;;;189    	else
;;;190    		return YAFFS_FAIL;
;;;191    
;;;192    }
000540  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1348|
000544  e3a00000          MOV      r0,#0                 ;190
000548  eafffffc          B        |L1.1344|
;;;193    
                          ENDP

                  nandmtd2_QueryNANDBlock PROC
;;;194    int nandmtd2_QueryNANDBlock(struct yaffs_dev *dev, int blockNo,
00054c  e92d4ff0          PUSH     {r4-r11,lr}
;;;195    			    enum yaffs_block_state *state, u32 *sequenceNumber)
;;;196    {
000550  e24dd04c          SUB      sp,sp,#0x4c
000554  e1a04000          MOV      r4,r0
000558  e1a0a001          MOV      r10,r1
00055c  e1a05002          MOV      r5,r2
000560  e1a06003          MOV      r6,r3
;;;197    	struct mtd_info *mtd = (struct mtd_info *)(dev->driver_context);
000564  e594b098          LDR      r11,[r4,#0x98]
;;;198    	int retval;
;;;199    
;;;200    	yaffs_trace(YAFFS_TRACE_MTD, "nandmtd2_QueryNANDBlock %d", blockNo);
000568  e51f0234          LDR      r0,|L1.828|
00056c  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000570  e3100901          TST      r0,#0x4000
000574  0a000002          BEQ      |L1.1412|
000578  e1a0100a          MOV      r1,r10
00057c  e28f0e11          ADR      r0,|L1.1684|
000580  ebfffffe          BL       sysprintf
                  |L1.1412|
;;;201    	retval =
000584  e594000c          LDR      r0,[r4,#0xc]
000588  e000009a          MUL      r0,r10,r0
00058c  e59420a4          LDR      r2,[r4,#0xa4]
000590  e0000092          MUL      r0,r2,r0
000594  e1a03fc0          ASR      r3,r0,#31
000598  e1a07000          MOV      r7,r0
00059c  e1a02007          MOV      r2,r7
0005a0  e59b1078          LDR      r1,[r11,#0x78]
0005a4  e1a0000b          MOV      r0,r11
0005a8  e12fff31          BLX      r1
0005ac  e1a09000          MOV      r9,r0
;;;202    	    mtd->block_isbad(mtd,
;;;203    			     blockNo * dev->param.chunks_per_block *
;;;204    			     dev->data_bytes_per_chunk);
;;;205    
;;;206    	if (retval) {
0005b0  e3590000          CMP      r9,#0
0005b4  0a00000a          BEQ      |L1.1508|
;;;207    		yaffs_trace(YAFFS_TRACE_MTD, "block is bad");
0005b8  e51f0284          LDR      r0,|L1.828|
0005bc  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
0005c0  e3100901          TST      r0,#0x4000
0005c4  0a000001          BEQ      |L1.1488|
0005c8  e28f00e8          ADR      r0,|L1.1720|
0005cc  ebfffffe          BL       sysprintf
                  |L1.1488|
;;;208    
;;;209    		*state = YAFFS_BLOCK_STATE_DEAD;
0005d0  e3a00009          MOV      r0,#9
0005d4  e5c50000          STRB     r0,[r5,#0]
;;;210    		*sequenceNumber = 0;
0005d8  e3a00000          MOV      r0,#0
0005dc  e5860000          STR      r0,[r6,#0]
0005e0  ea000012          B        |L1.1584|
                  |L1.1508|
;;;211    	} else {
;;;212    		struct yaffs_ext_tags t;
;;;213    		nandmtd2_read_chunk_tags(dev,
0005e4  e594000c          LDR      r0,[r4,#0xc]
0005e8  e0010a90          MUL      r1,r0,r10
0005ec  e1a0300d          MOV      r3,sp
0005f0  e3a02000          MOV      r2,#0
0005f4  e1a00004          MOV      r0,r4
0005f8  ebfffffe          BL       nandmtd2_read_chunk_tags
;;;214    					   blockNo *
;;;215    					   dev->param.chunks_per_block, NULL,
;;;216    					   &t);
;;;217    
;;;218    		if (t.chunk_used) {
0005fc  e59d0000          LDR      r0,[sp,#0]
000600  e3500000          CMP      r0,#0
000604  0a000004          BEQ      |L1.1564|
;;;219    			*sequenceNumber = t.seq_number;
000608  e59d0020          LDR      r0,[sp,#0x20]
00060c  e5860000          STR      r0,[r6,#0]
;;;220    			*state = YAFFS_BLOCK_STATE_NEEDS_SCAN;
000610  e3a00002          MOV      r0,#2
000614  e5c50000          STRB     r0,[r5,#0]
000618  ea000003          B        |L1.1580|
                  |L1.1564|
;;;221    		} else {
;;;222    			*sequenceNumber = 0;
00061c  e3a00000          MOV      r0,#0
000620  e5860000          STR      r0,[r6,#0]
;;;223    			*state = YAFFS_BLOCK_STATE_EMPTY;
000624  e3a00003          MOV      r0,#3
000628  e5c50000          STRB     r0,[r5,#0]
                  |L1.1580|
;;;224    		}
;;;225    	}
00062c  e1a00000          MOV      r0,r0
                  |L1.1584|
;;;226    	yaffs_trace(YAFFS_TRACE_MTD, "block is bad seq %d state %d",
000630  e51f02fc          LDR      r0,|L1.828|
000634  e1d000b0          LDRH     r0,[r0,#0]  ; yaffs_trace_mask
000638  e3100901          TST      r0,#0x4000
00063c  0a000003          BEQ      |L1.1616|
000640  e5d52000          LDRB     r2,[r5,#0]
000644  e28f0084          ADR      r0,|L1.1744|
000648  e5961000          LDR      r1,[r6,#0]
00064c  ebfffffe          BL       sysprintf
                  |L1.1616|
;;;227    			*sequenceNumber, *state);
;;;228    
;;;229    	if (retval == 0)
000650  e3590000          CMP      r9,#0
000654  1a000002          BNE      |L1.1636|
;;;230    		return YAFFS_OK;
000658  e3a00001          MOV      r0,#1
                  |L1.1628|
00065c  e28dd04c          ADD      sp,sp,#0x4c
;;;231    	else
;;;232    		return YAFFS_FAIL;
;;;233    }
000660  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1636|
000664  e3a00000          MOV      r0,#0                 ;232
000668  eafffffb          B        |L1.1628|
                          ENDP

                  |L1.1644|
00066c  79616666          DCB      "yaffs: nandmtd2_MarkNANDBlockBad %d\n",0
000670  733a206e
000674  616e646d
000678  7464325f
00067c  4d61726b
000680  4e414e44
000684  426c6f63
000688  6b426164
00068c  2025640a
000690  00      
000691  00                DCB      0
000692  00                DCB      0
000693  00                DCB      0
                  |L1.1684|
000694  79616666          DCB      "yaffs: nandmtd2_QueryNANDBlock %d\n",0
000698  733a206e
00069c  616e646d
0006a0  7464325f
0006a4  51756572
0006a8  794e414e
0006ac  44426c6f
0006b0  636b2025
0006b4  640a00  
0006b7  00                DCB      0
                  |L1.1720|
0006b8  79616666          DCB      "yaffs: block is bad\n",0
0006bc  733a2062
0006c0  6c6f636b
0006c4  20697320
0006c8  6261640a
0006cc  00      
0006cd  00                DCB      0
0006ce  00                DCB      0
0006cf  00                DCB      0
                  |L1.1744|
0006d0  79616666          DCB      "yaffs: block is bad seq %d state %d\n",0
0006d4  733a2062
0006d8  6c6f636b
0006dc  20697320
0006e0  62616420
0006e4  73657120
0006e8  25642073
0006ec  74617465
0006f0  2025640a
0006f4  00      
0006f5  00                DCB      0
0006f6  00                DCB      0
0006f7  00                DCB      0
