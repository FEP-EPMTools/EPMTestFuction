; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guitesterkeypad.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guitesterkeypad.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guitesterkeypad.crf src\User\guitesterkeypad.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateContain PROC
;;;57     
;;;58     static void updateContain(void)
000000  e12fff1e          BX       lr
;;;59     {
;;;60     
;;;61     }
;;;62     static void updateBG(void)
                          ENDP

                  updateBG PROC
000004  e92d4010          PUSH     {r4,lr}
;;;63     {
;;;64     //    TickType_t tickLocalStart = xTaskGetTickCount();
;;;65         EPDDrawString(TRUE,"keytesting",X_RESULT_SHIFT,Y_RESULT_SHIFT);
000008  e3a03023          MOV      r3,#0x23
00000c  e3a02f83          MOV      r2,#0x20c
000010  e28f1f87          ADR      r1,|L1.564|
000014  e3a00001          MOV      r0,#1
000018  ebfffffe          BL       EPDDrawString
;;;66         EPDDrawString(FALSE,"buzzer will sound when press\n",X_RESULT_SHIFT,Y_RESULT_SHIFT);
00001c  e3a03023          MOV      r3,#0x23
000020  e3a02f83          MOV      r2,#0x20c
000024  e28f1f85          ADR      r1,|L1.576|
000028  e3a00000          MOV      r0,#0
00002c  ebfffffe          BL       EPDDrawString
;;;67         EPDDrawString(FALSE,"press confirm to exit test\n",X_RESULT_SHIFT,Y_RESULT_SHIFT);
000030  e3a03023          MOV      r3,#0x23
000034  e3a02f83          MOV      r2,#0x20c
000038  e28f1e22          ADR      r1,|L1.608|
00003c  e3a00000          MOV      r0,#0
000040  ebfffffe          BL       EPDDrawString
;;;68     //    sysprintf(" [INFO GUI] <TesterKeypad> updateBG: **Local:[%d]**, **[%d]**\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - tickStart);    
;;;69       
;;;70     }
000044  e8bd8010          POP      {r4,pc}
;;;71     
                          ENDP

                  updateData PROC
;;;72     static void updateData(void)
000048  e92d4070          PUSH     {r4-r6,lr}
;;;73     {
;;;74         TickType_t tickLocalStart = xTaskGetTickCount();
00004c  ebfffffe          BL       xTaskGetTickCount
000050  e1a04000          MOV      r4,r0
;;;75         sysprintf(" [INFO GUI] <TesterKeypad> updateData: [%d]. \n", xTaskGetTickCount() - tickLocalStart);
000054  ebfffffe          BL       xTaskGetTickCount
000058  e0405004          SUB      r5,r0,r4
00005c  e1a01005          MOV      r1,r5
000060  e28f0f85          ADR      r0,|L1.636|
000064  ebfffffe          BL       sysprintf
;;;76     }
000068  e8bd8070          POP      {r4-r6,pc}
;;;77     
                          ENDP

                  GuiTesterKeypadOnDraw PROC
;;;80     /*-----------------------------------------*/
;;;81     BOOL GuiTesterKeypadOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int para2, int para3)
00006c  e92d40f8          PUSH     {r3-r7,lr}
;;;82     {
000070  e1a04000          MOV      r4,r0
000074  e1a05001          MOV      r5,r1
000078  e1a06002          MOV      r6,r2
00007c  e1a07003          MOV      r7,r3
;;;83         tickStart = xTaskGetTickCount();
000080  ebfffffe          BL       xTaskGetTickCount
000084  e59f1220          LDR      r1,|L1.684|
000088  e5810000          STR      r0,[r1,#0]  ; tickStart
;;;84         sysprintf(" [INFO GUI] <TesterKeypad> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);  
00008c  e1a03006          MOV      r3,r6
000090  e1a02005          MOV      r2,r5
000094  e1a01004          MOV      r1,r4
000098  e59f0210          LDR      r0,|L1.688|
00009c  e58d7000          STR      r7,[sp,#0]
0000a0  ebfffffe          BL       sysprintf
;;;85     
;;;86         powerStatus = FALSE;
0000a4  e3a00000          MOV      r0,#0
0000a8  e59f1204          LDR      r1,|L1.692|
0000ac  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;87         pGuiGetInterface = GuiGetInterface();
0000b0  ebfffffe          BL       GuiGetInterface
0000b4  e59f11fc          LDR      r1,|L1.696|
0000b8  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;88         pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
0000bc  e2810000          ADD      r0,r1,#0
0000c0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000c4  e3e01000          MVN      r1,#0
0000c8  e590200c          LDR      r2,[r0,#0xc]
0000cc  e3a00000          MOV      r0,#0
0000d0  e12fff32          BLX      r2
;;;89         pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL);
0000d4  e59f01dc          LDR      r0,|L1.696|
0000d8  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000dc  e3a010c8          MOV      r1,#0xc8
0000e0  e590200c          LDR      r2,[r0,#0xc]
0000e4  e3a00001          MOV      r0,#1
0000e8  e12fff32          BLX      r2
;;;90         pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL);     
0000ec  e59f01c4          LDR      r0,|L1.696|
0000f0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000f4  e3e01000          MVN      r1,#0
0000f8  e590200c          LDR      r2,[r0,#0xc]
0000fc  e3a00002          MOV      r0,#2
000100  e12fff32          BLX      r2
;;;91     
;;;92         pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
000104  e59f01ac          LDR      r0,|L1.696|
000108  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00010c  e5901010          LDR      r1,[r0,#0x10]
000110  e3a00000          MOV      r0,#0
000114  e12fff31          BLX      r1
;;;93     //    KeyDrvSetMode(KEY_DRV_MODE_TEST_INDEX);
;;;94         //sysprintf(" [INFO GUI] <TesterKeypad> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;95         return TRUE;
000118  e3a00001          MOV      r0,#1
;;;96     }
00011c  e8bd80f8          POP      {r3-r7,pc}
;;;97     BOOL GuiTesterKeypadKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiTesterKeypadKeyCallback PROC
000120  e92d4070          PUSH     {r4-r6,lr}
;;;98     {
000124  e1a04000          MOV      r4,r0
000128  e1a05001          MOV      r5,r1
;;;99         //sysprintf(" [INFO GUI] <TesterKeypad> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;100        BOOL reVal = FALSE; 
00012c  e3a06000          MOV      r6,#0
;;;101        if(keyIgnoreFlag && (keyId < GUI_KEYPAD_NORMAL_ID))
000130  e59f0184          LDR      r0,|L1.700|
000134  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
000138  e3500000          CMP      r0,#0
00013c  0a000005          BEQ      |L1.344|
000140  e3540010          CMP      r4,#0x10
000144  aa000003          BGE      |L1.344|
;;;102        {
;;;103            sysprintf(" [INFO GUI] <TesterKeypad> Key:  ignore...\n"); 
000148  e28f0e17          ADR      r0,|L1.704|
00014c  ebfffffe          BL       sysprintf
;;;104            return reVal;
000150  e1a00006          MOV      r0,r6
                  |L1.340|
;;;105        }
;;;106        if(GUI_KEY_DOWN_INDEX == downUp)
;;;107        {
;;;108            switch(keyId)
;;;109            {
;;;110                case GUI_KEYPAD_LEFT_ID:
;;;111                    reVal = TRUE;
;;;112                    break;
;;;113                case GUI_KEYPAD_RIGHT_ID:
;;;114                    reVal = TRUE;
;;;115                    break;
;;;116                case GUI_KEYPAD_ADD_ID:
;;;117                    reVal = TRUE;
;;;118                    break;
;;;119                case GUI_KEYPAD_MINUS_ID:
;;;120                    reVal = TRUE;
;;;121                    break;
;;;122                case GUI_KEYPAD_CONFIRM_ID:
;;;123                    SetGuiResponseVal('y');
;;;124                    reVal = TRUE;
;;;125                    break;
;;;126                case GUI_KEYPAD_NORMAL_ID:
;;;127                    reVal = TRUE;
;;;128                    break;
;;;129                case GUI_KEYPAD_REPLACE_BP_ID:
;;;130                    reVal = TRUE;
;;;131                    break;
;;;132                case GUI_KEYPAD_TESTER_KEYPAD_ID: 
;;;133                    reVal = TRUE;                
;;;134                    break;
;;;135                case GUI_KEYPAD_TESTER_ID:                
;;;136                    reVal = TRUE;
;;;137                    break;
;;;138            }
;;;139        }
;;;140        else
;;;141        {
;;;142            
;;;143        }     
;;;144    
;;;145        return reVal;
;;;146    }
000154  e8bd8070          POP      {r4-r6,pc}
                  |L1.344|
000158  e3550001          CMP      r5,#1                 ;106
00015c  1a000032          BNE      |L1.556|
000160  e3540004          CMP      r4,#4                 ;108
000164  0a000018          BEQ      |L1.460|
000168  ca000008          BGT      |L1.400|
00016c  e3540000          CMP      r4,#0                 ;108
000170  0a00001b          BEQ      |L1.484|
000174  e3540001          CMP      r4,#1                 ;108
000178  0a000016          BEQ      |L1.472|
00017c  e3540002          CMP      r4,#2                 ;108
000180  0a00000e          BEQ      |L1.448|
000184  e3540003          CMP      r4,#3                 ;108
000188  1a000026          BNE      |L1.552|
00018c  ea000008          B        |L1.436|
                  |L1.400|
000190  e3540010          CMP      r4,#0x10              ;108
000194  0a000017          BEQ      |L1.504|
000198  e3540011          CMP      r4,#0x11              ;108
00019c  0a000018          BEQ      |L1.516|
0001a0  e3540013          CMP      r4,#0x13              ;108
0001a4  0a000019          BEQ      |L1.528|
0001a8  e3540014          CMP      r4,#0x14              ;108
0001ac  1a00001d          BNE      |L1.552|
0001b0  ea000019          B        |L1.540|
                  |L1.436|
0001b4  e1a00000          MOV      r0,r0                 ;110
0001b8  e3a06001          MOV      r6,#1                 ;111
0001bc  ea000019          B        |L1.552|
                  |L1.448|
0001c0  e1a00000          MOV      r0,r0                 ;113
0001c4  e3a06001          MOV      r6,#1                 ;114
0001c8  ea000016          B        |L1.552|
                  |L1.460|
0001cc  e1a00000          MOV      r0,r0                 ;116
0001d0  e3a06001          MOV      r6,#1                 ;117
0001d4  ea000013          B        |L1.552|
                  |L1.472|
0001d8  e1a00000          MOV      r0,r0                 ;119
0001dc  e3a06001          MOV      r6,#1                 ;120
0001e0  ea000010          B        |L1.552|
                  |L1.484|
0001e4  e1a00000          MOV      r0,r0                 ;122
0001e8  e3a00079          MOV      r0,#0x79              ;123
0001ec  ebfffffe          BL       SetGuiResponseVal
0001f0  e3a06001          MOV      r6,#1                 ;124
0001f4  ea00000b          B        |L1.552|
                  |L1.504|
0001f8  e1a00000          MOV      r0,r0                 ;126
0001fc  e3a06001          MOV      r6,#1                 ;127
000200  ea000008          B        |L1.552|
                  |L1.516|
000204  e1a00000          MOV      r0,r0                 ;129
000208  e3a06001          MOV      r6,#1                 ;130
00020c  ea000005          B        |L1.552|
                  |L1.528|
000210  e1a00000          MOV      r0,r0                 ;132
000214  e3a06001          MOV      r6,#1                 ;133
000218  ea000002          B        |L1.552|
                  |L1.540|
00021c  e1a00000          MOV      r0,r0                 ;135
000220  e3a06001          MOV      r6,#1                 ;136
000224  e1a00000          MOV      r0,r0                 ;137
                  |L1.552|
000228  e1a00000          MOV      r0,r0                 ;112
                  |L1.556|
00022c  e1a00006          MOV      r0,r6                 ;145
000230  eaffffc7          B        |L1.340|
                  |L1.564|
000234  6b657974          DCB      "keytesting",0
000238  65737469
00023c  6e6700  
00023f  00                DCB      0
                  |L1.576|
000240  62757a7a          DCB      "buzzer will sound when press\n",0
000244  65722077
000248  696c6c20
00024c  736f756e
000250  64207768
000254  656e2070
000258  72657373
00025c  0a00    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  70726573          DCB      "press confirm to exit test\n",0
000264  7320636f
000268  6e666972
00026c  6d20746f
000270  20657869
000274  74207465
000278  73740a00
                  |L1.636|
00027c  205b494e          DCB      " [INFO GUI] <TesterKeypad> updateData: [%d]. \n",0
000280  464f2047
000284  55495d20
000288  3c546573
00028c  7465724b
000290  65797061
000294  643e2075
000298  70646174
00029c  65446174
0002a0  613a205b
0002a4  25645d2e
0002a8  200a00  
0002ab  00                DCB      0
                  |L1.684|
                          DCD      tickStart
                  |L1.688|
                          DCD      ||.constdata||
                  |L1.692|
                          DCD      powerStatus
                  |L1.696|
                          DCD      pGuiGetInterface
                  |L1.700|
                          DCD      keyIgnoreFlag
                  |L1.704|
0002c0  205b494e          DCB      " [INFO GUI] <TesterKeypad> Key:  ignore...\n",0
0002c4  464f2047
0002c8  55495d20
0002cc  3c546573
0002d0  7465724b
0002d4  65797061
0002d8  643e204b
0002dc  65793a20
0002e0  2069676e
0002e4  6f72652e
0002e8  2e2e0a00
                          ENDP

                  GuiTesterKeypadTimerCallback PROC
;;;147    BOOL GuiTesterKeypadTimerCallback(uint8_t timerIndex)
0002ec  e92d4010          PUSH     {r4,lr}
;;;148    {
0002f0  e1a04000          MOV      r4,r0
;;;149        //sysprintf(" [INFO GUI] <TesterKeypad> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;150        keyIgnoreFlag = TRUE;
0002f4  e3a00001          MOV      r0,#1
0002f8  e51f1044          LDR      r1,|L1.700|
0002fc  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;151        switch(timerIndex)
000300  e3540000          CMP      r4,#0
000304  0a000004          BEQ      |L1.796|
000308  e3540001          CMP      r4,#1
00030c  0a000005          BEQ      |L1.808|
000310  e3540002          CMP      r4,#2
000314  1a000008          BNE      |L1.828|
000318  ea000005          B        |L1.820|
                  |L1.796|
;;;152        {
;;;153            case UPDATE_BG_TIMER:
00031c  e1a00000          MOV      r0,r0
;;;154                updateBG();
000320  ebfffffe          BL       updateBG
;;;155                break;
000324  ea000004          B        |L1.828|
                  |L1.808|
;;;156            case UPDATE_DATA_TIMER:
000328  e1a00000          MOV      r0,r0
;;;157                updateData();
00032c  ebfffffe          BL       updateData
;;;158                break;
000330  ea000001          B        |L1.828|
                  |L1.820|
;;;159            case EXIT_TIMER:     
000334  e1a00000          MOV      r0,r0
;;;160                break;
000338  e1a00000          MOV      r0,r0
                  |L1.828|
00033c  e1a00000          MOV      r0,r0                 ;155
;;;161    
;;;162        }
;;;163        keyIgnoreFlag = FALSE;
000340  e3a00000          MOV      r0,#0
000344  e51f1090          LDR      r1,|L1.700|
000348  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;164        return TRUE;
00034c  e3a00001          MOV      r0,#1
;;;165    }
000350  e8bd8010          POP      {r4,pc}
;;;166    
                          ENDP

                  GuiTesterKeypadPowerCallbackFunc PROC
;;;167    BOOL GuiTesterKeypadPowerCallbackFunc(uint8_t type, int flag)
000354  e1a02000          MOV      r2,r0
;;;168    {
;;;169        //sysprintf(" [INFO GUI] <TesterKeypad> power [%d] : flag = %d!!\n", type, flag);
;;;170        switch(type)
000358  e3520001          CMP      r2,#1
00035c  0a000006          BEQ      |L1.892|
000360  e3520002          CMP      r2,#2
000364  0a000008          BEQ      |L1.908|
000368  e3520003          CMP      r2,#3
00036c  0a000008          BEQ      |L1.916|
000370  e3520004          CMP      r2,#4
000374  1a00000a          BNE      |L1.932|
000378  ea000007          B        |L1.924|
                  |L1.892|
;;;171        {
;;;172            case GUI_POWER_STATUS_INDEX:
00037c  e1a00000          MOV      r0,r0
;;;173                return powerStatus;
000380  e51f00d4          LDR      r0,|L1.692|
000384  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.904|
;;;174            case GUI_POWER_ON_INDEX:
;;;175                //pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);
;;;176                break;
;;;177            case GUI_POWER_OFF_INDEX:
;;;178                break;
;;;179            case GUI_POWER_PREV_OFF_INDEX:
;;;180                break;
;;;181        }
;;;182        return TRUE;
;;;183    }
000388  e12fff1e          BX       lr
                  |L1.908|
00038c  e1a00000          MOV      r0,r0                 ;174
000390  ea000003          B        |L1.932|
                  |L1.916|
000394  e1a00000          MOV      r0,r0                 ;177
000398  ea000001          B        |L1.932|
                  |L1.924|
00039c  e1a00000          MOV      r0,r0                 ;179
0003a0  e1a00000          MOV      r0,r0                 ;180
                  |L1.932|
0003a4  e1a00000          MOV      r0,r0                 ;176
0003a8  e3a00001          MOV      r0,#1                 ;182
0003ac  eafffff5          B        |L1.904|
;;;184    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c546573          DCB      0x3c,0x54,0x65,0x73
000010  7465724b          DCB      0x74,0x65,0x72,0x4b
000014  65797061          DCB      0x65,0x79,0x70,0x61
000018  643e204f          DCB      0x64,0x3e,0x20,0x4f
00001c  6e447261          DCB      0x6e,0x44,0x72,0x61
000020  77202866          DCB      0x77,0x20,0x28,0x66
000024  726f6d20          DCB      0x72,0x6f,0x6d,0x20
000028  47756949          DCB      0x47,0x75,0x69,0x49
00002c  64203d20          DCB      0x64,0x20,0x3d,0x20
000030  25642c20          DCB      0x25,0x64,0x2c,0x20
000034  72654672          DCB      0x72,0x65,0x46,0x72
000038  65736850          DCB      0x65,0x73,0x68,0x50
00003c  61726120          DCB      0x61,0x72,0x61,0x20
000040  3d202564          DCB      0x3d,0x20,0x25,0x64
000044  2c207061          DCB      0x2c,0x20,0x70,0x61
000048  72613220          DCB      0x72,0x61,0x32,0x20
00004c  3d202564          DCB      0x3d,0x20,0x25,0x64
000050  2c207061          DCB      0x2c,0x20,0x70,0x61
000054  72613320          DCB      0x72,0x61,0x33,0x20
000058  3d202564          DCB      0x3d,0x20,0x25,0x64
00005c  290a00            DCB      0x29,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  tickStart
                          DCD      0x00000000
                  keyIgnoreFlag
00000c  00                DCB      0x00
