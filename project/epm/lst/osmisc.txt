; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\osmisc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\osmisc.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\osmisc.crf src\osmisc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _showMacroMessage PROC
;;;26     
;;;27     void _showMacroMessage(char* tag, char* file, int line)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;28     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a06002          MOV      r6,r2
;;;29         #if(ENABLE_MEM_PRINT)
;;;30         sysprintf(" ~~~~ %s ~~~~ %s -> StackHighWaterMark = %d bytes\r\n", 
000010  ebfffffe          BL       xTaskGetCurrentTaskHandle
000014  e1a09000          MOV      r9,r0
000018  ebfffffe          BL       uxTaskGetStackHighWaterMark
00001c  e1a07000          MOV      r7,r0
000020  ebfffffe          BL       xTaskGetCurrentTaskHandle
000024  e1a09000          MOV      r9,r0
000028  ebfffffe          BL       pcTaskGetName
00002c  e1a08000          MOV      r8,r0
000030  e1a03007          MOV      r3,r7
000034  e1a02008          MOV      r2,r8
000038  e1a01004          MOV      r1,r4
00003c  e28f0e1d          ADR      r0,|L1.532|
000040  ebfffffe          BL       sysprintf
;;;31                 tag, pcTaskGetTaskName(xTaskGetCurrentTaskHandle()), (int)uxTaskGetStackHighWaterMark(xTaskGetCurrentTaskHandle()));  
;;;32         sysprintf("                                at file %s line %d\r\n", file, line); 
000044  e1a02006          MOV      r2,r6
000048  e1a01005          MOV      r1,r5
00004c  e28f0f7d          ADR      r0,|L1.584|
000050  ebfffffe          BL       sysprintf
;;;33         #endif
;;;34     }
000054  e8bd87f0          POP      {r4-r10,pc}
;;;35     
                          ENDP

                  _showCurrentThreadMemoryInfo PROC
;;;36     void _showCurrentThreadMemoryInfo(void)
000058  e92d4070          PUSH     {r4-r6,lr}
;;;37     {
;;;38         #if(ENABLE_MEM_PRINT)
;;;39         sysprintf(" ::INFO:: %s-> StackHighWaterMark = %d bytes\r\n", 
00005c  ebfffffe          BL       xTaskGetCurrentTaskHandle
000060  e1a06000          MOV      r6,r0
000064  ebfffffe          BL       uxTaskGetStackHighWaterMark
000068  e1a04000          MOV      r4,r0
00006c  ebfffffe          BL       xTaskGetCurrentTaskHandle
000070  e1a06000          MOV      r6,r0
000074  ebfffffe          BL       pcTaskGetName
000078  e1a05000          MOV      r5,r0
00007c  e1a02004          MOV      r2,r4
000080  e1a01005          MOV      r1,r5
000084  e28f0f7d          ADR      r0,|L1.640|
000088  ebfffffe          BL       sysprintf
;;;40                 pcTaskGetTaskName(xTaskGetCurrentTaskHandle()), (int)uxTaskGetStackHighWaterMark(xTaskGetCurrentTaskHandle())); 
;;;41         #endif
;;;42     }
00008c  e8bd8070          POP      {r4-r6,pc}
;;;43     
                          ENDP

                  _showCurrentThreadMemoryInfoEx PROC
;;;44     void _showCurrentThreadMemoryInfoEx(char* file, int line)
000090  e92d43f8          PUSH     {r3-r9,lr}
;;;45     {
000094  e1a04000          MOV      r4,r0
000098  e1a05001          MOV      r5,r1
;;;46         #if(ENABLE_MEM_PRINT)
;;;47         //_showFreeHeapSize(file, line); 
;;;48         sysprintf(" ::INFO:: %s -> StackHighWaterMark = %d bytes, at file %s line %d\r\n", 
00009c  ebfffffe          BL       xTaskGetCurrentTaskHandle
0000a0  e1a08000          MOV      r8,r0
0000a4  ebfffffe          BL       uxTaskGetStackHighWaterMark
0000a8  e1a06000          MOV      r6,r0
0000ac  ebfffffe          BL       xTaskGetCurrentTaskHandle
0000b0  e1a08000          MOV      r8,r0
0000b4  ebfffffe          BL       pcTaskGetName
0000b8  e1a07000          MOV      r7,r0
0000bc  e1a03004          MOV      r3,r4
0000c0  e1a02006          MOV      r2,r6
0000c4  e1a01007          MOV      r1,r7
0000c8  e59f01e0          LDR      r0,|L1.688|
0000cc  e58d5000          STR      r5,[sp,#0]
0000d0  ebfffffe          BL       sysprintf
;;;49                 pcTaskGetTaskName(xTaskGetCurrentTaskHandle()), (int)uxTaskGetStackHighWaterMark(xTaskGetCurrentTaskHandle()),
;;;50                      file, line); 
;;;51         
;;;52         #endif
;;;53     }
0000d4  e8bd83f8          POP      {r3-r9,pc}
;;;54     
                          ENDP

                  _showFreeHeapSize PROC
;;;55     void _showFreeHeapSize(char* file, int line)
0000d8  e92d40f8          PUSH     {r3-r7,lr}
;;;56     {
0000dc  e1a04000          MOV      r4,r0
0000e0  e1a05001          MOV      r5,r1
;;;57         #if(ENABLE_MEM_PRINT)
;;;58         sysprintf(" ||INFO|| cxPortGetFreeHeapSize = %d bytes ( %d MB), at file %s line %d\r\n", xPortGetFreeHeapSize(), xPortGetFreeHeapSize()/1024/1024, file, line); 
0000e4  ebfffffe          BL       xPortGetFreeHeapSize
0000e8  e1a06a20          LSR      r6,r0,#20
0000ec  ebfffffe          BL       xPortGetFreeHeapSize
0000f0  e1a07000          MOV      r7,r0
0000f4  e1a03004          MOV      r3,r4
0000f8  e1a02006          MOV      r2,r6
0000fc  e1a01007          MOV      r1,r7
000100  e59f01ac          LDR      r0,|L1.692|
000104  e58d5000          STR      r5,[sp,#0]
000108  ebfffffe          BL       sysprintf
;;;59         #endif
;;;60     }
00010c  e8bd80f8          POP      {r3-r7,pc}
;;;61     
                          ENDP

                  _showMemoryInfo PROC
;;;62     void _showMemoryInfo(void)
000110  e92d4070          PUSH     {r4-r6,lr}
;;;63     {
000114  e24ddd12          SUB      sp,sp,#0x480
;;;64         //size_t xPortGetFreeHeapSize( void )
;;;65         //unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )    
;;;66       
;;;67         int      Idx;
;;;68         int16_t  tasks_nbr;
;;;69         xTaskStatusType  ProcessStatus[32] = {{0}};
000118  e3a01d12          MOV      r1,#0x480
00011c  e1a0000d          MOV      r0,sp
000120  ebfffffe          BL       __aeabi_memclr4
;;;70         tasks_nbr = uxTaskGetSystemState( ProcessStatus, 32, NULL );
000124  e3a02000          MOV      r2,#0
000128  e3a01020          MOV      r1,#0x20
00012c  e1a0000d          MOV      r0,sp
000130  ebfffffe          BL       uxTaskGetSystemState
000134  e1a00800          LSL      r0,r0,#16
000138  e1a05840          ASR      r5,r0,#16
;;;71         sysprintf("*********************************Thread Info Start************************************\r\n");    
00013c  e59f0174          LDR      r0,|L1.696|
000140  ebfffffe          BL       sysprintf
;;;72         /*Limit view size */
;;;73         if(tasks_nbr > 32)
000144  e3550020          CMP      r5,#0x20
000148  da000000          BLE      |L1.336|
;;;74         {
;;;75             tasks_nbr = 32;
00014c  e3a05020          MOV      r5,#0x20
                  |L1.336|
;;;76         }
;;;77         for (Idx = 0; Idx < tasks_nbr ; Idx ++)
000150  e3a04000          MOV      r4,#0
000154  ea00007e          B        |L1.852|
                  |L1.344|
;;;78         {
;;;79             sysprintf("   %2d: %18s, Proi:%2lu, Status:", Idx, ProcessStatus[Idx].pcTaskName, ProcessStatus[Idx].uxCurrentPriority);        
000158  e0840184          ADD      r0,r4,r4,LSL #3
00015c  e1a0100d          MOV      r1,sp
000160  e0810100          ADD      r0,r1,r0,LSL #2
000164  e5903010          LDR      r3,[r0,#0x10]
000168  e0840184          ADD      r0,r4,r4,LSL #3
00016c  e0810100          ADD      r0,r1,r0,LSL #2
000170  e1a01004          MOV      r1,r4
000174  e5902004          LDR      r2,[r0,#4]
000178  e28f0f4f          ADR      r0,|L1.700|
00017c  ebfffffe          BL       sysprintf
;;;80             
;;;81             switch (ProcessStatus[Idx].eCurrentState)
000180  e0840184          ADD      r0,r4,r4,LSL #3
000184  e1a0100d          MOV      r1,sp
000188  e0810100          ADD      r0,r1,r0,LSL #2
00018c  e5d0000c          LDRB     r0,[r0,#0xc]
000190  e3500005          CMP      r0,#5
000194  308ff100          ADDCC    pc,pc,r0,LSL #2
000198  ea00005d          B        |L1.788|
00019c  ea000017          B        |L1.512|
0001a0  ea000002          B        |L1.432|
0001a4  ea000006          B        |L1.452|
0001a8  ea00000f          B        |L1.492|
0001ac  ea000009          B        |L1.472|
                  |L1.432|
;;;82             {
;;;83             case eReady:
0001b0  e1a00000          MOV      r0,r0
;;;84                 sysprintf("%10s", "Ready");
0001b4  e28f1f49          ADR      r1,|L1.736|
0001b8  e28f0f4a          ADR      r0,|L1.744|
0001bc  ebfffffe          BL       sysprintf
;;;85                 break;
0001c0  ea000058          B        |L1.808|
                  |L1.452|
;;;86     
;;;87             case eBlocked:
0001c4  e1a00000          MOV      r0,r0
;;;88                 sysprintf("%10s", "Blocked");
0001c8  e28f1e12          ADR      r1,|L1.752|
0001cc  e28f0f45          ADR      r0,|L1.744|
0001d0  ebfffffe          BL       sysprintf
;;;89                 break;
0001d4  ea000053          B        |L1.808|
                  |L1.472|
;;;90     
;;;91             case eDeleted:
0001d8  e1a00000          MOV      r0,r0
;;;92                 sysprintf("%10s", "Deleted");
0001dc  e28f1f45          ADR      r1,|L1.760|
0001e0  e28f0c01          ADR      r0,|L1.744|
0001e4  ebfffffe          BL       sysprintf
;;;93                 break;
0001e8  ea00004e          B        |L1.808|
                  |L1.492|
;;;94     
;;;95             case eSuspended:
0001ec  e1a00000          MOV      r0,r0
;;;96                 sysprintf("%10s", "Suspended");
0001f0  e28f1f42          ADR      r1,|L1.768|
0001f4  e28f00ec          ADR      r0,|L1.744|
0001f8  ebfffffe          BL       sysprintf
;;;97                 break;
0001fc  ea000049          B        |L1.808|
                  |L1.512|
;;;98     
;;;99             case eRunning:
000200  e1a00000          MOV      r0,r0
;;;100                sysprintf("%10s", "Running");
000204  e28f1c01          ADR      r1,|L1.780|
000208  e28f00d8          ADR      r0,|L1.744|
00020c  ebfffffe          BL       sysprintf
;;;101                break;
000210  ea000044          B        |L1.808|
                  |L1.532|
000214  207e7e7e          DCB      " ~~~~ %s ~~~~ %s -> StackHighWaterMark = %d bytes\r\n",0
000218  7e202573
00021c  207e7e7e
000220  7e202573
000224  202d3e20
000228  53746163
00022c  6b486967
000230  68576174
000234  65724d61
000238  726b203d
00023c  20256420
000240  62797465
000244  730d0a00
                  |L1.584|
000248  20202020          DCB      "                                at file %s line %d\r\n",0
00024c  20202020
000250  20202020
000254  20202020
000258  20202020
00025c  20202020
000260  20202020
000264  20202020
000268  61742066
00026c  696c6520
000270  2573206c
000274  696e6520
000278  25640d0a
00027c  00      
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0
                  |L1.640|
000280  203a3a49          DCB      " ::INFO:: %s-> StackHighWaterMark = %d bytes"
000284  4e464f3a
000288  3a202573
00028c  2d3e2053
000290  7461636b
000294  48696768
000298  57617465
00029c  724d6172
0002a0  6b203d20
0002a4  25642062
0002a8  79746573
                  |L1.684|
0002ac  0d0a00            DCB      "\r\n",0
0002af  00                DCB      0
                  |L1.688|
                          DCD      ||.constdata||
                  |L1.692|
                          DCD      ||.constdata||+0x44
                  |L1.696|
                          DCD      ||.constdata||+0x90
                  |L1.700|
0002bc  20202025          DCB      "   %2d: %18s, Proi:%2lu, Status:",0
0002c0  32643a20
0002c4  25313873
0002c8  2c205072
0002cc  6f693a25
0002d0  326c752c
0002d4  20537461
0002d8  7475733a
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L1.736|
0002e0  52656164          DCB      "Ready",0
0002e4  7900    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L1.744|
0002e8  25313073          DCB      "%10s",0
0002ec  00      
0002ed  00                DCB      0
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L1.752|
0002f0  426c6f63          DCB      "Blocked",0
0002f4  6b656400
                  |L1.760|
0002f8  44656c65          DCB      "Deleted",0
0002fc  74656400
                  |L1.768|
000300  53757370          DCB      "Suspended",0
000304  656e6465
000308  6400    
00030a  00                DCB      0
00030b  00                DCB      0
                  |L1.780|
00030c  52756e6e          DCB      "Running",0
000310  696e6700
                  |L1.788|
;;;102    
;;;103            default:
000314  e1a00000          MOV      r0,r0
;;;104                sysprintf("%10s", "Unknown");
000318  e28f10fc          ADR      r1,|L1.1052|
00031c  e24f003c          ADR      r0,|L1.744|
000320  ebfffffe          BL       sysprintf
;;;105                break;
000324  e1a00000          MOV      r0,r0
                  |L1.808|
000328  e1a00000          MOV      r0,r0                 ;85
;;;106            }
;;;107            sysprintf(" => stack left :%4d ", (int)uxTaskGetStackHighWaterMark(ProcessStatus[Idx].xHandle));    
00032c  e0841184          ADD      r1,r4,r4,LSL #3
000330  e79d0101          LDR      r0,[sp,r1,LSL #2]
000334  ebfffffe          BL       uxTaskGetStackHighWaterMark
000338  e1a06000          MOV      r6,r0
00033c  e1a01006          MOV      r1,r6
000340  e28f00dc          ADR      r0,|L1.1060|
000344  ebfffffe          BL       sysprintf
;;;108            sysprintf("\r\n");
000348  e24f00a4          ADR      r0,|L1.684|
00034c  ebfffffe          BL       sysprintf
000350  e2844001          ADD      r4,r4,#1              ;77
                  |L1.852|
000354  e1540005          CMP      r4,r5                 ;77
000358  baffff7e          BLT      |L1.344|
;;;109        }     
;;;110        sysprintf("----------------------------------Thread Info End-----------------------------------\r\n");  
00035c  e59f00d8          LDR      r0,|L1.1084|
000360  ebfffffe          BL       sysprintf
;;;111    }
000364  e28ddd12          ADD      sp,sp,#0x480
000368  e8bd8070          POP      {r4-r6,pc}
;;;112    
                          ENDP

                  vApplicationStackOverflowHook PROC
;;;113    #if(configCHECK_FOR_STACK_OVERFLOW > 0)
;;;114    void vApplicationStackOverflowHook( xTaskHandle xTask, signed char *pcTaskName )
00036c  e92d4070          PUSH     {r4-r6,lr}
;;;115    {
000370  e1a05000          MOV      r5,r0
000374  e1a04001          MOV      r4,r1
;;;116        sysprintf("         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
000378  e59f00c0          LDR      r0,|L1.1088|
00037c  ebfffffe          BL       sysprintf
;;;117        sysprintf("         !!!!!!! vApplicationStackOverflowHook (Thread Name:%s)  !!!!!!!\r\n", pcTaskName);
000380  e1a01004          MOV      r1,r4
000384  e59f00b8          LDR      r0,|L1.1092|
000388  ebfffffe          BL       sysprintf
;;;118        sysprintf("         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
00038c  e59f00ac          LDR      r0,|L1.1088|
000390  ebfffffe          BL       sysprintf
;;;119    }
000394  e8bd8070          POP      {r4-r6,pc}
;;;120    #endif
                          ENDP

                  vApplicationMallocFailedHook PROC
;;;122    #if(configUSE_MALLOC_FAILED_HOOK > 0)
;;;123    void vApplicationMallocFailedHook( void )
000398  e92d4010          PUSH     {r4,lr}
;;;124    {
;;;125        sysprintf("         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
00039c  e28f00a4          ADR      r0,|L1.1096|
0003a0  ebfffffe          BL       sysprintf
;;;126        sysprintf("         !!!!!!! vApplicationMallocFailedHook !!!!!!!\r\n");
0003a4  e28f00d4          ADR      r0,|L1.1152|
0003a8  ebfffffe          BL       sysprintf
;;;127        sysprintf("         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
0003ac  e28f0094          ADR      r0,|L1.1096|
0003b0  ebfffffe          BL       sysprintf
;;;128    }
0003b4  e8bd8010          POP      {r4,pc}
;;;129    #endif
                          ENDP

                  GetFreeHeapSize PROC
;;;145    */
;;;146    size_t GetFreeHeapSize(void)
0003b8  e92d4010          PUSH     {r4,lr}
;;;147    {
;;;148        return xPortGetFreeHeapSize();
0003bc  ebfffffe          BL       xPortGetFreeHeapSize
;;;149    }
0003c0  e8bd8010          POP      {r4,pc}
;;;150    void vApplicationTickHook(void)
                          ENDP

                  vApplicationTickHook PROC
0003c4  e12fff1e          BX       lr
;;;151    {
;;;152        //sysprintf("^"); 
;;;153    }
;;;154    void vApplicationIdleHook(void)
                          ENDP

                  vApplicationIdleHook PROC
0003c8  e92d4010          PUSH     {r4,lr}
;;;155    {
;;;156        //static int timer = 0;
;;;157        //sysprintf("[%03d]\r", timer++%1000); 
;;;158        //sysprintf("'");
;;;159        __wfi();
0003cc  ebfffffe          BL       __wfi
;;;160    }
0003d0  e8bd8010          POP      {r4,pc}
;;;161    
                          ENDP

                  tickProcess PROC
                  |L1.980|
;;;163    
;;;164    void tickProcess(void)
0003d4  e92d4010          PUSH     {r4,lr}
;;;165    {
;;;166        //sysprintf(".");  
;;;167        /* Increment the tick counter. */
;;;168        if( xTaskIncrementTick() != pdFALSE )
0003d8  ebfffffe          BL       xTaskIncrementTick
0003dc  e3500000          CMP      r0,#0
0003e0  0a000000          BEQ      |L1.1000|
;;;169    	{
;;;170            /* Select a new task to run. */
;;;171            //sysprintf("*");
;;;172            vTaskSwitchContext();
0003e4  ebfffffe          BL       vTaskSwitchContext
                  |L1.1000|
;;;173    	}
;;;174    
;;;175    }
0003e8  e8bd8010          POP      {r4,pc}
;;;176    
                          ENDP

                  initTimer PROC
;;;177    
;;;178    void initTimer(void)
0003ec  e92d4010          PUSH     {r4,lr}
;;;179    {
;;;180        sysprintf("initTimer!!!\n");
0003f0  e28f00c0          ADR      r0,|L1.1208|
0003f4  ebfffffe          BL       sysprintf
;;;181        //sysSetTimerReferenceClock (TIMER0, 12000000);    
;;;182        //sysStartTimer(TIMER0, 1000, PERIODIC_MODE);
;;;183        sysStartTimer(TIMER0, 100, PERIODIC_MODE);
0003f8  e3a02001          MOV      r2,#1
0003fc  e3a01064          MOV      r1,#0x64
000400  e3a00000          MOV      r0,#0
000404  ebfffffe          BL       sysStartTimer
;;;184        sysSetTimerEvent(TIMER0, 1, (PVOID)tickProcess);
000408  e24f203c          ADR      r2,|L1.980|
00040c  e3a01001          MOV      r1,#1
000410  e3a00000          MOV      r0,#0
000414  ebfffffe          BL       sysSetTimerEvent
;;;185    }
000418  e8bd8010          POP      {r4,pc}
;;;186    
                          ENDP

                  |L1.1052|
00041c  556e6b6e          DCB      "Unknown",0
000420  6f776e00
                  |L1.1060|
000424  203d3e20          DCB      " => stack left :%4d ",0
000428  73746163
00042c  6b206c65
000430  6674203a
000434  25346420
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
                          DCD      ||.constdata||+0xec
                  |L1.1088|
                          DCD      ||.constdata||+0x144
                  |L1.1092|
                          DCD      ||.constdata||+0x198
                  |L1.1096|
000448  20202020          DCB      "         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r"
00044c  20202020
000450  20212121
000454  21212121
000458  21212121
00045c  21212121
000460  21212121
000464  21212121
000468  21212121
00046c  21212121
000470  21212121
000474  21212121
000478  21212121
00047c  210d    
00047e  0a00              DCB      "\n",0
                  |L1.1152|
000480  20202020          DCB      "         !!!!!!! vApplicationMallocFailedHook !!!!!!!\r"
000484  20202020
000488  20212121
00048c  21212121
000490  20764170
000494  706c6963
000498  6174696f
00049c  6e4d616c
0004a0  6c6f6346
0004a4  61696c65
0004a8  64486f6f
0004ac  6b202121
0004b0  21212121
0004b4  210d    
0004b6  0a00              DCB      "\n",0
                  |L1.1208|
0004b8  696e6974          DCB      "initTimer!!!\n",0
0004bc  54696d65
0004c0  72212121
0004c4  0a00    
0004c6  00                DCB      0
0004c7  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  203a3a49          DCB      0x20,0x3a,0x3a,0x49
000004  4e464f3a          DCB      0x4e,0x46,0x4f,0x3a
000008  3a202573          DCB      0x3a,0x20,0x25,0x73
00000c  202d3e20          DCB      0x20,0x2d,0x3e,0x20
000010  53746163          DCB      0x53,0x74,0x61,0x63
000014  6b486967          DCB      0x6b,0x48,0x69,0x67
000018  68576174          DCB      0x68,0x57,0x61,0x74
00001c  65724d61          DCB      0x65,0x72,0x4d,0x61
000020  726b203d          DCB      0x72,0x6b,0x20,0x3d
000024  20256420          DCB      0x20,0x25,0x64,0x20
000028  62797465          DCB      0x62,0x79,0x74,0x65
00002c  732c2061          DCB      0x73,0x2c,0x20,0x61
000030  74206669          DCB      0x74,0x20,0x66,0x69
000034  6c652025          DCB      0x6c,0x65,0x20,0x25
000038  73206c69          DCB      0x73,0x20,0x6c,0x69
00003c  6e652025          DCB      0x6e,0x65,0x20,0x25
000040  640d0a00          DCB      0x64,0x0d,0x0a,0x00
000044  207c7c49          DCB      0x20,0x7c,0x7c,0x49
000048  4e464f7c          DCB      0x4e,0x46,0x4f,0x7c
00004c  7c206378          DCB      0x7c,0x20,0x63,0x78
000050  506f7274          DCB      0x50,0x6f,0x72,0x74
000054  47657446          DCB      0x47,0x65,0x74,0x46
000058  72656548          DCB      0x72,0x65,0x65,0x48
00005c  65617053          DCB      0x65,0x61,0x70,0x53
000060  697a6520          DCB      0x69,0x7a,0x65,0x20
000064  3d202564          DCB      0x3d,0x20,0x25,0x64
000068  20627974          DCB      0x20,0x62,0x79,0x74
00006c  65732028          DCB      0x65,0x73,0x20,0x28
000070  20256420          DCB      0x20,0x25,0x64,0x20
000074  4d42292c          DCB      0x4d,0x42,0x29,0x2c
000078  20617420          DCB      0x20,0x61,0x74,0x20
00007c  66696c65          DCB      0x66,0x69,0x6c,0x65
000080  20257320          DCB      0x20,0x25,0x73,0x20
000084  6c696e65          DCB      0x6c,0x69,0x6e,0x65
000088  2025640d          DCB      0x20,0x25,0x64,0x0d
00008c  0a000000          DCB      0x0a,0x00,0x00,0x00
000090  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000094  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000098  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00009c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000a0  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000a4  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000a8  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000ac  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000b0  2a546872          DCB      0x2a,0x54,0x68,0x72
0000b4  65616420          DCB      0x65,0x61,0x64,0x20
0000b8  496e666f          DCB      0x49,0x6e,0x66,0x6f
0000bc  20537461          DCB      0x20,0x53,0x74,0x61
0000c0  72742a2a          DCB      0x72,0x74,0x2a,0x2a
0000c4  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000c8  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000cc  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000d0  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000d4  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000d8  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000dc  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000e0  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0000e4  2a2a0d0a          DCB      0x2a,0x2a,0x0d,0x0a
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000f0  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000f4  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000f8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000fc  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000100  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000104  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000108  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00010c  2d2d5468          DCB      0x2d,0x2d,0x54,0x68
000110  72656164          DCB      0x72,0x65,0x61,0x64
000114  20496e66          DCB      0x20,0x49,0x6e,0x66
000118  6f20456e          DCB      0x6f,0x20,0x45,0x6e
00011c  642d2d2d          DCB      0x64,0x2d,0x2d,0x2d
000120  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000124  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000128  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00012c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000130  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000134  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000138  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00013c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000140  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000144  20202020          DCB      0x20,0x20,0x20,0x20
000148  20202020          DCB      0x20,0x20,0x20,0x20
00014c  20212121          DCB      0x20,0x21,0x21,0x21
000150  21212121          DCB      0x21,0x21,0x21,0x21
000154  21212121          DCB      0x21,0x21,0x21,0x21
000158  21212121          DCB      0x21,0x21,0x21,0x21
00015c  21212121          DCB      0x21,0x21,0x21,0x21
000160  21212121          DCB      0x21,0x21,0x21,0x21
000164  21212121          DCB      0x21,0x21,0x21,0x21
000168  21212121          DCB      0x21,0x21,0x21,0x21
00016c  21212121          DCB      0x21,0x21,0x21,0x21
000170  21212121          DCB      0x21,0x21,0x21,0x21
000174  21212121          DCB      0x21,0x21,0x21,0x21
000178  21212121          DCB      0x21,0x21,0x21,0x21
00017c  21212121          DCB      0x21,0x21,0x21,0x21
000180  21212121          DCB      0x21,0x21,0x21,0x21
000184  21212121          DCB      0x21,0x21,0x21,0x21
000188  21212121          DCB      0x21,0x21,0x21,0x21
00018c  21212121          DCB      0x21,0x21,0x21,0x21
000190  21212121          DCB      0x21,0x21,0x21,0x21
000194  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000198  20202020          DCB      0x20,0x20,0x20,0x20
00019c  20202020          DCB      0x20,0x20,0x20,0x20
0001a0  20212121          DCB      0x20,0x21,0x21,0x21
0001a4  21212121          DCB      0x21,0x21,0x21,0x21
0001a8  20764170          DCB      0x20,0x76,0x41,0x70
0001ac  706c6963          DCB      0x70,0x6c,0x69,0x63
0001b0  6174696f          DCB      0x61,0x74,0x69,0x6f
0001b4  6e537461          DCB      0x6e,0x53,0x74,0x61
0001b8  636b4f76          DCB      0x63,0x6b,0x4f,0x76
0001bc  6572666c          DCB      0x65,0x72,0x66,0x6c
0001c0  6f77486f          DCB      0x6f,0x77,0x48,0x6f
0001c4  6f6b2028          DCB      0x6f,0x6b,0x20,0x28
0001c8  54687265          DCB      0x54,0x68,0x72,0x65
0001cc  6164204e          DCB      0x61,0x64,0x20,0x4e
0001d0  616d653a          DCB      0x61,0x6d,0x65,0x3a
0001d4  25732920          DCB      0x25,0x73,0x29,0x20
0001d8  20212121          DCB      0x20,0x21,0x21,0x21
0001dc  21212121          DCB      0x21,0x21,0x21,0x21
0001e0  0d0a0000          DCB      0x0d,0x0a,0x00,0x00

;*** Start embedded assembler ***

#line 1 "src\\osmisc.c"
	AREA ||.emb_text||, CODE, READONLY
	ARM
	EXPORT |__wfi|
#line 21
|__wfi| PROC
#line 22

 MCR p15, 0, r1, c7, c0, 4
 BX lr
	ENDP

;*** End   embedded assembler ***
