; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guialltest.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guialltest.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guialltest.crf src\user\guialltest.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateMsg PROC
;;;86     /*-----------------------------------------*/
;;;87     static void updateMsg(void){
000000  e92d4070          PUSH     {r4-r6,lr}
;;;88         EPDDrawString(GetRefresh(),GetEPDString(),X_RESULT_SHIFT,Y_RESULT_SHIFT);
000004  ebfffffe          BL       GetEPDString
000008  e1a04000          MOV      r4,r0
00000c  ebfffffe          BL       GetRefresh
000010  e1a05000          MOV      r5,r0
000014  e3a03064          MOV      r3,#0x64
000018  e3a02f83          MOV      r2,#0x20c
00001c  e1a01004          MOV      r1,r4
000020  ebfffffe          BL       EPDDrawString
;;;89         SetIsEPDDone(TRUE);
000024  e3a00001          MOV      r0,#1
000028  ebfffffe          BL       SetIsEPDDone
;;;90     }
00002c  e8bd8070          POP      {r4-r6,pc}
;;;91     
                          ENDP

                  updateBG PROC
;;;92     static void updateBG(void)
000030  e92d4070          PUSH     {r4-r6,lr}
;;;93     {
;;;94         TickType_t tickLocalStart = xTaskGetTickCount();
000034  ebfffffe          BL       xTaskGetTickCount
000038  e1a04000          MOV      r4,r0
;;;95         //sysprintf(" [INFO GUI] <Stand By> updateBG enter: cost ticks = [%d]\n", xTaskGetTickCount() - tickStart); 
;;;96         switch(refreshType)
00003c  e59f02e0          LDR      r0,|L1.804|
000040  e5d00000          LDRB     r0,[r0,#0]  ; refreshType
000044  e3500002          CMP      r0,#2
000048  0a000004          BEQ      |L1.96|
00004c  e3500003          CMP      r0,#3
000050  0a000004          BEQ      |L1.104|
000054  e3500004          CMP      r0,#4
000058  1a000006          BNE      |L1.120|
00005c  ea000003          B        |L1.112|
                  |L1.96|
;;;97         {
;;;98             case GUI_REDRAW_PARA_NORMAL:
000060  e1a00000          MOV      r0,r0
;;;99     
;;;100                break;
000064  ea000009          B        |L1.144|
                  |L1.104|
;;;101            case GUI_REDRAW_PARA_REFRESH:
000068  e1a00000          MOV      r0,r0
;;;102    
;;;103                break;
00006c  ea000007          B        |L1.144|
                  |L1.112|
;;;104            case GUI_REDRAW_PARA_CONTAIN:
000070  e1a00000          MOV      r0,r0
;;;105                
;;;106                break;
000074  ea000005          B        |L1.144|
                  |L1.120|
;;;107            default:
000078  e1a00000          MOV      r0,r0
;;;108                sysprintf(" [INFO GUI] <Stand By> updateBG refreshType ERROR :refreshType = %d\n", refreshType); 
00007c  e59f02a0          LDR      r0,|L1.804|
000080  e5d01000          LDRB     r1,[r0,#0]  ; refreshType
000084  e59f029c          LDR      r0,|L1.808|
000088  ebfffffe          BL       sysprintf
;;;109                break;
00008c  e1a00000          MOV      r0,r0
                  |L1.144|
000090  e1a00000          MOV      r0,r0                 ;100
;;;110                    
;;;111        }
;;;112        refreshType = GUI_REDRAW_PARA_NONE;
000094  e3a00001          MOV      r0,#1
000098  e59f1284          LDR      r1,|L1.804|
00009c  e5c10000          STRB     r0,[r1,#0]  ; refreshType
;;;113        //Draw BG
;;;114        EPDDrawMulti(TRUE,EPD_PICT_ALL_WHITE_INDEX,0,0);
0000a0  e3a03000          MOV      r3,#0
0000a4  e1a02003          MOV      r2,r3
0000a8  e3a01003          MOV      r1,#3
0000ac  ebfffffe          BL       EPDDrawMulti
;;;115        EPDDrawString(FALSE,"All Testing",80,4);
0000b0  e3a03004          MOV      r3,#4
0000b4  e3a02050          MOV      r2,#0x50
0000b8  e28f1f9b          ADR      r1,|L1.812|
0000bc  e3a00000          MOV      r0,#0
0000c0  ebfffffe          BL       EPDDrawString
;;;116        EPDDrawString(FALSE,"Testing Item:",170,104);
0000c4  e3a03068          MOV      r3,#0x68
0000c8  e3a020aa          MOV      r2,#0xaa
0000cc  e28f1f99          ADR      r1,|L1.824|
0000d0  e3a00000          MOV      r0,#0
0000d4  ebfffffe          BL       EPDDrawString
;;;117        EPDDrawString(TRUE,"Message:",170,254);
0000d8  e3a030fe          MOV      r3,#0xfe
0000dc  e3a020aa          MOV      r2,#0xaa
0000e0  e28f1e26          ADR      r1,|L1.840|
0000e4  e3a00001          MOV      r0,#1
0000e8  ebfffffe          BL       EPDDrawString
;;;118        
;;;119    //    UpdateClock(TRUE, FALSE);
;;;120        
;;;121    //    GetMeterData()->currentSelSpace = 0;
;;;122        
;;;123        sysprintf(" [INFO GUI] <Stand By> updateBG: **Local:[%d]**, **[%d]**\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - tickStart);  
0000ec  ebfffffe          BL       xTaskGetTickCount
0000f0  e59f125c          LDR      r1,|L1.852|
0000f4  e5911000          LDR      r1,[r1,#0]  ; tickStart
0000f8  e0405001          SUB      r5,r0,r1
0000fc  ebfffffe          BL       xTaskGetTickCount
000100  e0406004          SUB      r6,r0,r4
000104  e1a02005          MOV      r2,r5
000108  e1a01006          MOV      r1,r6
00010c  e28f0f91          ADR      r0,|L1.856|
000110  ebfffffe          BL       sysprintf
;;;124        //powerStatus = TRUE;    
;;;125    }
000114  e8bd8070          POP      {r4-r6,pc}
;;;126    static void updateData(void){
                          ENDP

                  updateData PROC
000118  e12fff1e          BX       lr
;;;127        
;;;128    }
;;;129    /*-----------------------------------------*/
                          ENDP

                  GuiAllTestOnDraw PROC
;;;131    /*-----------------------------------------*/
;;;132    BOOL GuiAllTestOnDraw(uint8_t oriGuiId, uint8_t para, int para2, int para3){ 
00011c  e92d41f0          PUSH     {r4-r8,lr}
000120  e1a05000          MOV      r5,r0
000124  e1a04001          MOV      r4,r1
000128  e1a06002          MOV      r6,r2
00012c  e1a07003          MOV      r7,r3
;;;133        if(para2==para3){
;;;134    
;;;135        }
;;;136        pGuiGetInterface = GuiGetInterface();
000130  ebfffffe          BL       GuiGetInterface
000134  e59f1258          LDR      r1,|L1.916|
000138  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;137        pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);
00013c  e2810000          ADD      r0,r1,#0
000140  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000144  e3e01000          MVN      r1,#0
000148  e590200c          LDR      r2,[r0,#0xc]
00014c  e3a00000          MOV      r0,#0
000150  e12fff32          BLX      r2
;;;138        pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL);
000154  e59f0238          LDR      r0,|L1.916|
000158  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00015c  e3a01005          MOV      r1,#5
000160  e590200c          LDR      r2,[r0,#0xc]
000164  e3a00001          MOV      r0,#1
000168  e12fff32          BLX      r2
;;;139        pGuiGetInterface->setTimeoutFunc(UPDATE_SPACE_DETECT_TIMER, UPDATE_SPACE_DETECT_INTERVAL);      
00016c  e59f0220          LDR      r0,|L1.916|
000170  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000174  e3a01ffa          MOV      r1,#0x3e8
000178  e590200c          LDR      r2,[r0,#0xc]
00017c  e3a00002          MOV      r0,#2
000180  e12fff32          BLX      r2
;;;140        
;;;141        PowerDrvSetEnable(TRUE);
000184  e3a00001          MOV      r0,#1
000188  ebfffffe          BL       PowerDrvSetEnable
;;;142        EPDSetSleepFunction(FALSE);
00018c  e3a00000          MOV      r0,#0
000190  ebfffffe          BL       EPDSetSleepFunction
;;;143        
;;;144        refreshType = para;
000194  e59f0188          LDR      r0,|L1.804|
000198  e5c04000          STRB     r4,[r0,#0]  ; refreshType
;;;145        
;;;146        pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//§óupdateScreen
00019c  e59f01f0          LDR      r0,|L1.916|
0001a0  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001a4  e5901010          LDR      r1,[r0,#0x10]
0001a8  e3a00000          MOV      r0,#0
0001ac  e12fff31          BLX      r1
;;;147        
;;;148        CardReaderSetPower(EPM_READER_CTRL_ID_GUI, FALSE);
0001b0  e3a01000          MOV      r1,#0
0001b4  e1a00001          MOV      r0,r1
0001b8  ebfffffe          BL       CardReaderSetPower
;;;149        return TRUE;
0001bc  e3a00001          MOV      r0,#1
;;;150    }
0001c0  e8bd81f0          POP      {r4-r8,pc}
;;;151    BOOL GuiAllTestUpdateData(void)
                          ENDP

                  GuiAllTestUpdateData PROC
0001c4  e92d4010          PUSH     {r4,lr}
;;;152    {    
;;;153        //tickStart = xTaskGetTickCount();
;;;154        sysprintf(" [INFO GUI] <Stand By> UpdateData\n");
0001c8  e28f0f72          ADR      r0,|L1.920|
0001cc  ebfffffe          BL       sysprintf
;;;155        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//§óupdateScreen
0001d0  e59f01bc          LDR      r0,|L1.916|
0001d4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001d8  e5901010          LDR      r1,[r0,#0x10]
0001dc  e3a00001          MOV      r0,#1
0001e0  e12fff31          BLX      r1
;;;156        return TRUE;
0001e4  e3a00001          MOV      r0,#1
;;;157    }
0001e8  e8bd8010          POP      {r4,pc}
;;;158    
                          ENDP

                  GuiAllTestKeyCallback PROC
;;;159    
;;;160    BOOL GuiAllTestKeyCallback(uint8_t keyId, uint8_t downUp)
0001ec  e92d4070          PUSH     {r4-r6,lr}
;;;161    {   
0001f0  e1a04000          MOV      r4,r0
0001f4  e1a05001          MOV      r5,r1
;;;162        BOOL reVal = FALSE; 
0001f8  e3a06000          MOV      r6,#0
;;;163        //sysprintf(" [INFO GUI] <Stand By> Key:  keyId = %d, downUp = %d\n", keyId, downUp);
;;;164        //if(keyIgnoreFlag)
;;;165        if(keyIgnoreFlag && (keyId < GUI_KEYPAD_NORMAL_ID))
0001fc  e59f01b8          LDR      r0,|L1.956|
000200  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
000204  e3500000          CMP      r0,#0
000208  0a000005          BEQ      |L1.548|
00020c  e3540010          CMP      r4,#0x10
000210  aa000003          BGE      |L1.548|
;;;166        {
;;;167            sysprintf(" [INFO GUI] <Stand By> Key:  ignore...\n"); 
000214  e28f0f69          ADR      r0,|L1.960|
000218  ebfffffe          BL       sysprintf
;;;168            return reVal;
00021c  e1a00006          MOV      r0,r6
                  |L1.544|
;;;169        }
;;;170        //Normal Key Function//
;;;171        else if((GUI_KEY_DOWN_INDEX == downUp)&!keyIgnoreFlag)
;;;172        {
;;;173            switch(keyId)
;;;174            {
;;;175            case GUI_KEYPAD_CONFIRM_ID:
;;;176                
;;;177                SetGuiResponseVal('q');
;;;178                reVal = TRUE;
;;;179                break;
;;;180            case GUI_KEYPAD_RIGHT_ID:
;;;181                
;;;182                break;
;;;183            case GUI_KEYPAD_LEFT_ID:
;;;184                
;;;185                break;
;;;186            case GUI_KEYPAD_ADD_ID:
;;;187                break;
;;;188            case GUI_KEYPAD_MINUS_ID:
;;;189                
;;;190                break;
;;;191            case GUI_KEYPAD_NORMAL_ID:
;;;192                break;
;;;193            case GUI_KEYPAD_REPLACE_BP_ID:
;;;194                break;
;;;195            case GUI_KEYPAD_TESTER_ID:
;;;196                break;
;;;197             case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;198                break;
;;;199            default:
;;;200                sysprintf(" [INFO GUI] <Stand By> Key:  not support keyId 0x%02x...\n", keyId); 
;;;201                break;
;;;202            }
;;;203        }
;;;204        //if(reVal)
;;;205        //    EPDReSetBacklightTimeout(5000);
;;;206        return reVal;
;;;207    }
000220  e8bd8070          POP      {r4-r6,pc}
                  |L1.548|
000224  e3550001          CMP      r5,#1                 ;171
000228  1a000001          BNE      |L1.564|
00022c  e3a00001          MOV      r0,#1                 ;171
000230  ea000000          B        |L1.568|
                  |L1.564|
000234  e3a00000          MOV      r0,#0                 ;171
                  |L1.568|
000238  e59f117c          LDR      r1,|L1.956|
00023c  e5d11000          LDRB     r1,[r1,#0]            ;171  ; keyIgnoreFlag
000240  e3510000          CMP      r1,#0                 ;171
000244  1a000001          BNE      |L1.592|
000248  e3a01001          MOV      r1,#1                 ;171
00024c  ea000000          B        |L1.596|
                  |L1.592|
000250  e3a01000          MOV      r1,#0                 ;171
                  |L1.596|
000254  e1100001          TST      r0,r1                 ;171
000258  0a00002f          BEQ      |L1.796|
00025c  e3540004          CMP      r4,#4                 ;173
000260  0a00001b          BEQ      |L1.724|
000264  ca000008          BGT      |L1.652|
000268  e3540000          CMP      r4,#0                 ;173
00026c  0a00000f          BEQ      |L1.688|
000270  e3540001          CMP      r4,#1                 ;173
000274  0a000018          BEQ      |L1.732|
000278  e3540002          CMP      r4,#2                 ;173
00027c  0a000010          BEQ      |L1.708|
000280  e3540003          CMP      r4,#3                 ;173
000284  1a00001e          BNE      |L1.772|
000288  ea00000f          B        |L1.716|
                  |L1.652|
00028c  e3540010          CMP      r4,#0x10              ;173
000290  0a000013          BEQ      |L1.740|
000294  e3540011          CMP      r4,#0x11              ;173
000298  0a000013          BEQ      |L1.748|
00029c  e3540013          CMP      r4,#0x13              ;173
0002a0  0a000015          BEQ      |L1.764|
0002a4  e3540014          CMP      r4,#0x14              ;173
0002a8  1a000015          BNE      |L1.772|
0002ac  ea000010          B        |L1.756|
                  |L1.688|
0002b0  e1a00000          MOV      r0,r0                 ;175
0002b4  e3a00071          MOV      r0,#0x71              ;177
0002b8  ebfffffe          BL       SetGuiResponseVal
0002bc  e3a06001          MOV      r6,#1                 ;178
0002c0  ea000014          B        |L1.792|
                  |L1.708|
0002c4  e1a00000          MOV      r0,r0                 ;180
0002c8  ea000012          B        |L1.792|
                  |L1.716|
0002cc  e1a00000          MOV      r0,r0                 ;183
0002d0  ea000010          B        |L1.792|
                  |L1.724|
0002d4  e1a00000          MOV      r0,r0                 ;186
0002d8  ea00000e          B        |L1.792|
                  |L1.732|
0002dc  e1a00000          MOV      r0,r0                 ;188
0002e0  ea00000c          B        |L1.792|
                  |L1.740|
0002e4  e1a00000          MOV      r0,r0                 ;191
0002e8  ea00000a          B        |L1.792|
                  |L1.748|
0002ec  e1a00000          MOV      r0,r0                 ;193
0002f0  ea000008          B        |L1.792|
                  |L1.756|
0002f4  e1a00000          MOV      r0,r0                 ;195
0002f8  ea000006          B        |L1.792|
                  |L1.764|
0002fc  e1a00000          MOV      r0,r0                 ;197
000300  ea000004          B        |L1.792|
                  |L1.772|
000304  e1a00000          MOV      r0,r0                 ;199
000308  e1a01004          MOV      r1,r4                 ;200
00030c  e28f00d4          ADR      r0,|L1.1000|
000310  ebfffffe          BL       sysprintf
000314  e1a00000          MOV      r0,r0                 ;201
                  |L1.792|
000318  e1a00000          MOV      r0,r0                 ;179
                  |L1.796|
00031c  e1a00006          MOV      r0,r6                 ;206
000320  eaffffbe          B        |L1.544|
                  |L1.804|
                          DCD      refreshType
                  |L1.808|
                          DCD      ||.constdata||
                  |L1.812|
00032c  416c6c20          DCB      "All Testing",0
000330  54657374
000334  696e6700
                  |L1.824|
000338  54657374          DCB      "Testing Item:",0
00033c  696e6720
000340  4974656d
000344  3a00    
000346  00                DCB      0
000347  00                DCB      0
                  |L1.840|
000348  4d657373          DCB      "Message:",0
00034c  6167653a
000350  00      
000351  00                DCB      0
000352  00                DCB      0
000353  00                DCB      0
                  |L1.852|
                          DCD      tickStart
                  |L1.856|
000358  205b494e          DCB      " [INFO GUI] <Stand By> updateBG: **Local:[%d]**, **[%d]"
00035c  464f2047
000360  55495d20
000364  3c537461
000368  6e642042
00036c  793e2075
000370  70646174
000374  6542473a
000378  202a2a4c
00037c  6f63616c
000380  3a5b2564
000384  5d2a2a2c
000388  202a2a5b
00038c  25645d  
00038f  2a2a0a00          DCB      "**\n",0
000393  00                DCB      0
                  |L1.916|
                          DCD      pGuiGetInterface
                  |L1.920|
000398  205b494e          DCB      " [INFO GUI] <Stand By> UpdateData\n",0
00039c  464f2047
0003a0  55495d20
0003a4  3c537461
0003a8  6e642042
0003ac  793e2055
0003b0  70646174
0003b4  65446174
0003b8  610a00  
0003bb  00                DCB      0
                  |L1.956|
                          DCD      keyIgnoreFlag
                  |L1.960|
0003c0  205b494e          DCB      " [INFO GUI] <Stand By> Key:  ignore...\n",0
0003c4  464f2047
0003c8  55495d20
0003cc  3c537461
0003d0  6e642042
0003d4  793e204b
0003d8  65793a20
0003dc  2069676e
0003e0  6f72652e
0003e4  2e2e0a00
                  |L1.1000|
0003e8  205b494e          DCB      " [INFO GUI] <Stand By> Key:  not support keyId 0x%02x.."
0003ec  464f2047
0003f0  55495d20
0003f4  3c537461
0003f8  6e642042
0003fc  793e204b
000400  65793a20
000404  206e6f74
000408  20737570
00040c  706f7274
000410  206b6579
000414  49642030
000418  78253032
00041c  782e2e  
00041f  2e0a00            DCB      ".\n",0
000422  00                DCB      0
000423  00                DCB      0
                          ENDP

                  GuiAllTestTimerCallback PROC
;;;208    BOOL GuiAllTestTimerCallback(uint8_t timerIndex)
000424  e92d4010          PUSH     {r4,lr}
;;;209    {
000428  e1a04000          MOV      r4,r0
;;;210        keyIgnoreFlag = TRUE;
00042c  e3a00001          MOV      r0,#1
000430  e51f107c          LDR      r1,|L1.956|
000434  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;211        //sysprintf(" [INFO GUI] <Stand By> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;212        powerStatus = FALSE;  
000438  e3a00000          MOV      r0,#0
00043c  e59f1198          LDR      r1,|L1.1500|
000440  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;213        if(powerStatusFlag == FALSE)
000444  e59f0194          LDR      r0,|L1.1504|
000448  e5d00000          LDRB     r0,[r0,#0]  ; powerStatusFlag
00044c  e3500000          CMP      r0,#0
000450  1a00002c          BNE      |L1.1288|
;;;214        {
;;;215            switch(timerIndex)
000454  e3540000          CMP      r4,#0
000458  0a000004          BEQ      |L1.1136|
00045c  e3540001          CMP      r4,#1
000460  0a000005          BEQ      |L1.1148|
000464  e3540002          CMP      r4,#2
000468  1a000025          BNE      |L1.1284|
00046c  ea000022          B        |L1.1276|
                  |L1.1136|
;;;216            {
;;;217                case UPDATE_BG_TIMER:
000470  e1a00000          MOV      r0,r0
;;;218                    updateBG();
000474  ebfffffe          BL       updateBG
;;;219                    break;
000478  ea000021          B        |L1.1284|
                  |L1.1148|
;;;220                case UPDATE_DATA_TIMER:
00047c  e1a00000          MOV      r0,r0
;;;221    //                updateMsg();
;;;222    //                
;;;223                    if(oldIndex!=nowIndex){
000480  e59f015c          LDR      r0,|L1.1508|
000484  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000488  e59f1158          LDR      r1,|L1.1512|
00048c  e5911000          LDR      r1,[r1,#0]  ; nowIndex
000490  e1500001          CMP      r0,r1
000494  0a000017          BEQ      |L1.1272|
;;;224                        //deselect item change to black
;;;225                        EPDDrawContainByIDPos(FALSE,EPD_PICT_LINE_SMALL_2_INDEX,80,104+(oldIndex*STRING_HEIGHT));
000498  e59f0144          LDR      r0,|L1.1508|
00049c  e5900000          LDR      r0,[r0,#0]  ; oldIndex
0004a0  e0801080          ADD      r1,r0,r0,LSL #1
0004a4  e0810180          ADD      r0,r1,r0,LSL #3
0004a8  e3a01068          MOV      r1,#0x68
0004ac  e0813100          ADD      r3,r1,r0,LSL #2
0004b0  e3a02050          MOV      r2,#0x50
0004b4  e3a0105c          MOV      r1,#0x5c
0004b8  e3a00000          MOV      r0,#0
0004bc  ebfffffe          BL       EPDDrawContainByIDPos
;;;226                        //select item change to white
;;;227                        EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,80,104+(nowIndex*STRING_HEIGHT));
0004c0  e59f0120          LDR      r0,|L1.1512|
0004c4  e5900000          LDR      r0,[r0,#0]  ; nowIndex
0004c8  e0801080          ADD      r1,r0,r0,LSL #1
0004cc  e0810180          ADD      r0,r1,r0,LSL #3
0004d0  e3a01068          MOV      r1,#0x68
0004d4  e0813100          ADD      r3,r1,r0,LSL #2
0004d8  e3a02050          MOV      r2,#0x50
0004dc  e3a0106b          MOV      r1,#0x6b
0004e0  e3a00001          MOV      r0,#1
0004e4  ebfffffe          BL       EPDDrawContainByIDPos
;;;228                        oldIndex=nowIndex;
0004e8  e59f00f8          LDR      r0,|L1.1512|
0004ec  e5900000          LDR      r0,[r0,#0]  ; nowIndex
0004f0  e59f10ec          LDR      r1,|L1.1508|
0004f4  e5810000          STR      r0,[r1,#0]  ; oldIndex
                  |L1.1272|
;;;229                    }
;;;230                    break;
0004f8  ea000001          B        |L1.1284|
                  |L1.1276|
;;;231                case UPDATE_SPACE_DETECT_TIMER:
0004fc  e1a00000          MOV      r0,r0
;;;232    //                StartSpaceDrv();
;;;233                    break;
000500  e1a00000          MOV      r0,r0
                  |L1.1284|
000504  e1a00000          MOV      r0,r0                 ;219
                  |L1.1288|
;;;234            }
;;;235        }
;;;236        keyIgnoreFlag = FALSE;
000508  e3a00000          MOV      r0,#0
00050c  e51f1158          LDR      r1,|L1.956|
000510  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;237        powerStatus = TRUE;
000514  e3a00001          MOV      r0,#1
000518  e59f10bc          LDR      r1,|L1.1500|
00051c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;238        return TRUE;
;;;239    }
000520  e8bd8010          POP      {r4,pc}
;;;240    
                          ENDP

                  GuiAllTestPowerCallbackFunc PROC
;;;241    BOOL GuiAllTestPowerCallbackFunc(uint8_t type, int flag)
000524  e92d4070          PUSH     {r4-r6,lr}
;;;242    {
000528  e1a04000          MOV      r4,r0
00052c  e1a05001          MOV      r5,r1
;;;243        //sysprintf(" [INFO GUI] Standby power [%d] : flag = %d!!\n", type, flag);
;;;244        switch(type)
000530  e3540001          CMP      r4,#1
000534  0a000006          BEQ      |L1.1364|
000538  e3540002          CMP      r4,#2
00053c  0a000008          BEQ      |L1.1380|
000540  e3540003          CMP      r4,#3
000544  0a00001a          BEQ      |L1.1460|
000548  e3540004          CMP      r4,#4
00054c  1a00001f          BNE      |L1.1488|
000550  ea000019          B        |L1.1468|
                  |L1.1364|
;;;245        {
;;;246            case GUI_POWER_STATUS_INDEX:
000554  e1a00000          MOV      r0,r0
;;;247                return powerStatus;
000558  e59f007c          LDR      r0,|L1.1500|
00055c  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.1376|
;;;248            case GUI_POWER_ON_INDEX:      
;;;249                if(flag == WAKEUP_SOURCE_RTC)  
;;;250                {               
;;;251                    sysprintf(" [INFO GUI] <Stand By> PowerCallbackFunc UPDATE_DATA_TIMER\n");
;;;252                    powerStatus = FALSE;                 
;;;253                    pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);
;;;254                }
;;;255                else
;;;256                {
;;;257                    sysprintf(" [INFO GUI] <Stand By> PowerCallbackFunc ignore\n");  
;;;258                }
;;;259                powerStatusFlag = FALSE;
;;;260                break;
;;;261            case GUI_POWER_OFF_INDEX:
;;;262                break;
;;;263            case GUI_POWER_PREV_OFF_INDEX:
;;;264                powerStatusFlag = TRUE;
;;;265                break;
;;;266        }
;;;267        return TRUE;
;;;268    }
000560  e8bd8070          POP      {r4-r6,pc}
                  |L1.1380|
000564  e1a00000          MOV      r0,r0                 ;248
000568  e3550001          CMP      r5,#1                 ;249
00056c  1a00000a          BNE      |L1.1436|
000570  e28f0074          ADR      r0,|L1.1516|
000574  ebfffffe          BL       sysprintf
000578  e3a00000          MOV      r0,#0                 ;252
00057c  e59f1058          LDR      r1,|L1.1500|
000580  e5c10000          STRB     r0,[r1,#0]            ;252  ; powerStatus
000584  e51f01f8          LDR      r0,|L1.916|
000588  e5900000          LDR      r0,[r0,#0]            ;253  ; pGuiGetInterface
00058c  e5901010          LDR      r1,[r0,#0x10]         ;253
000590  e3a00001          MOV      r0,#1                 ;253
000594  e12fff31          BLX      r1                    ;253
000598  ea000001          B        |L1.1444|
                  |L1.1436|
00059c  e28f0084          ADR      r0,|L1.1576|
0005a0  ebfffffe          BL       sysprintf
                  |L1.1444|
0005a4  e3a00000          MOV      r0,#0                 ;259
0005a8  e59f1030          LDR      r1,|L1.1504|
0005ac  e5c10000          STRB     r0,[r1,#0]            ;259  ; powerStatusFlag
0005b0  ea000006          B        |L1.1488|
                  |L1.1460|
0005b4  e1a00000          MOV      r0,r0                 ;261
0005b8  ea000004          B        |L1.1488|
                  |L1.1468|
0005bc  e1a00000          MOV      r0,r0                 ;263
0005c0  e3a00001          MOV      r0,#1                 ;264
0005c4  e59f1014          LDR      r1,|L1.1504|
0005c8  e5c10000          STRB     r0,[r1,#0]            ;264  ; powerStatusFlag
0005cc  e1a00000          MOV      r0,r0                 ;265
                  |L1.1488|
0005d0  e1a00000          MOV      r0,r0                 ;260
0005d4  e3a00001          MOV      r0,#1                 ;267
0005d8  eaffffe0          B        |L1.1376|
;;;269    
                          ENDP

                  |L1.1500|
                          DCD      powerStatus
                  |L1.1504|
                          DCD      powerStatusFlag
                  |L1.1508|
                          DCD      oldIndex
                  |L1.1512|
                          DCD      nowIndex
                  |L1.1516|
0005ec  205b494e          DCB      " [INFO GUI] <Stand By> PowerCallbackFunc UPDATE_DATA_TI"
0005f0  464f2047
0005f4  55495d20
0005f8  3c537461
0005fc  6e642042
000600  793e2050
000604  6f776572
000608  43616c6c
00060c  6261636b
000610  46756e63
000614  20555044
000618  4154455f
00061c  44415441
000620  5f5449  
000623  4d45520a          DCB      "MER\n",0
000627  00      
                  |L1.1576|
000628  205b494e          DCB      " [INFO GUI] <Stand By> PowerCallbackFunc ignore\n",0
00062c  464f2047
000630  55495d20
000634  3c537461
000638  6e642042
00063c  793e2050
000640  6f776572
000644  43616c6c
000648  6261636b
00064c  46756e63
000650  2069676e
000654  6f72650a
000658  00      
000659  00                DCB      0
00065a  00                DCB      0
00065b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c537461          DCB      0x3c,0x53,0x74,0x61
000010  6e642042          DCB      0x6e,0x64,0x20,0x42
000014  793e2075          DCB      0x79,0x3e,0x20,0x75
000018  70646174          DCB      0x70,0x64,0x61,0x74
00001c  65424720          DCB      0x65,0x42,0x47,0x20
000020  72656672          DCB      0x72,0x65,0x66,0x72
000024  65736854          DCB      0x65,0x73,0x68,0x54
000028  79706520          DCB      0x79,0x70,0x65,0x20
00002c  4552524f          DCB      0x45,0x52,0x52,0x4f
000030  52203a72          DCB      0x52,0x20,0x3a,0x72
000034  65667265          DCB      0x65,0x66,0x72,0x65
000038  73685479          DCB      0x73,0x68,0x54,0x79
00003c  7065203d          DCB      0x70,0x65,0x20,0x3d
000040  2025640a          DCB      0x20,0x25,0x64,0x0a
000044  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  maxSelectItem
                          DCD      0x00000000
                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000008  00                DCB      0x00
                  powerStatusFlag
000009  000000            DCB      0x00,0x00,0x00
                  tickStart
                          DCD      0x00000000
                  keyIgnoreFlag
000010  00                DCB      0x00
                  refreshType
000011  010000            DCB      0x01,0x00,0x00
                  nowIndex
                          DCD      0x00000000
                  oldIndex
                          DCD      0x00000000
                  statusStage
                          DCD      0x00000000
                  changeMsg
000020  00                DCB      0x00
                  testing
000021  00                DCB      0x00
                  keypadTestFlag
000022  0000              DCB      0x00,0x00
                  item
                          DCD      0x00000000
