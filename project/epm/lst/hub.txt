; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\hub.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hub.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\hub.crf ..\..\common\src\BSP\Library\USB_HOST\src_core\hub.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  clear_port_feature PROC
;;;144     */
;;;145    static int  clear_port_feature(HUB_DEV_T *hub, int feature_selector, int port)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;146    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a05001          MOV      r5,r1
000010  e1a06002          MOV      r6,r2
;;;147        UDEV_T     *udev = hub->iface->udev;
000014  e5940000          LDR      r0,[r4,#0]
000018  e5907000          LDR      r7,[r0,#0]
;;;148        uint32_t   read_len;
;;;149    
;;;150        return usbh_ctrl_xfer(udev, REQ_TYPE_OUT | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_OTHER,
00001c  e3a000c8          MOV      r0,#0xc8
000020  e28d1018          ADD      r1,sp,#0x18
000024  e3a02000          MOV      r2,#0
000028  e58d2004          STR      r2,[sp,#4]
00002c  e58d0010          STR      r0,[sp,#0x10]
000030  e1a00806          LSL      r0,r6,#16
000034  e1a00820          LSR      r0,r0,#16
000038  e1a03805          LSL      r3,r5,#16
00003c  e1a03823          LSR      r3,r3,#16
000040  e58d2008          STR      r2,[sp,#8]
000044  e3a02001          MOV      r2,#1
000048  e58d100c          STR      r1,[sp,#0xc]
00004c  e3a01023          MOV      r1,#0x23
000050  e58d0000          STR      r0,[sp,#0]
000054  e1a00007          MOV      r0,r7
000058  ebfffffe          BL       usbh_ctrl_xfer
00005c  e28dd01c          ADD      sp,sp,#0x1c
;;;151                              USB_REQ_CLEAR_FEATURE, feature_selector, port, 0,
;;;152                              NULL, &read_len, 200);
;;;153    }
000060  e8bd80f0          POP      {r4-r7,pc}
;;;154    
                          ENDP

                  get_port_status PROC
;;;157     */
;;;158    static int  get_port_status(HUB_DEV_T *hub, int port, uint16_t *wPortStatus, uint16_t *wPortChange)
000064  e92d47f0          PUSH     {r4-r10,lr}
;;;159    {
000068  e24dd018          SUB      sp,sp,#0x18
00006c  e1a05000          MOV      r5,r0
000070  e1a07001          MOV      r7,r1
000074  e1a08002          MOV      r8,r2
000078  e1a09003          MOV      r9,r3
;;;160        UDEV_T     *udev = hub->iface->udev;
00007c  e5950000          LDR      r0,[r5,#0]
000080  e590a000          LDR      r10,[r0,#0]
;;;161        uint8_t    *buff;
;;;162        uint32_t   read_len;
;;;163        int        ret;
;;;164    
;;;165        buff = usbh_alloc_mem(16);
000084  e3a00010          MOV      r0,#0x10
000088  ebfffffe          BL       usbh_alloc_mem
00008c  e1a04000          MOV      r4,r0
;;;166        if (buff == NULL)
000090  e3540000          CMP      r4,#0
000094  1a000002          BNE      |L1.164|
;;;167            return USBH_ERR_MEMORY_OUT;
000098  e3e00009          MVN      r0,#9
                  |L1.156|
00009c  e28dd018          ADD      sp,sp,#0x18
;;;168    
;;;169        ret =  usbh_ctrl_xfer(udev, REQ_TYPE_IN | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_OTHER,
;;;170                              USB_REQ_GET_STATUS, 0, port, 4,
;;;171                              buff, &read_len, 200);
;;;172        if (ret == 0)
;;;173        {
;;;174            if (read_len != 4)
;;;175            {
;;;176                USB_error("HUB [%s] get_port_status read_len!=4. (%d).\n", hub->pos_id, read_len);
;;;177                ret = USBH_ERR_DATA_UNDERRUN;
;;;178            }
;;;179            *wPortStatus = (buff[1] << 8) | buff[0];
;;;180            *wPortChange = (buff[3] << 8) | buff[2];
;;;181        }
;;;182        usbh_free_mem(buff, 16);
;;;183        return ret;
;;;184    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.164|
0000a4  e3a000c8          MOV      r0,#0xc8              ;169
0000a8  e28d1014          ADD      r1,sp,#0x14           ;169
0000ac  e3a02004          MOV      r2,#4                 ;169
0000b0  e58d0010          STR      r0,[sp,#0x10]         ;169
0000b4  e1a00807          LSL      r0,r7,#16             ;169
0000b8  e1a00820          LSR      r0,r0,#16             ;169
0000bc  e3a03000          MOV      r3,#0                 ;169
0000c0  e88d0015          STM      sp,{r0,r2,r4}         ;169
0000c4  e1a02003          MOV      r2,r3                 ;169
0000c8  e58d100c          STR      r1,[sp,#0xc]          ;169
0000cc  e3a010a3          MOV      r1,#0xa3              ;169
0000d0  e1a0000a          MOV      r0,r10                ;169
0000d4  ebfffffe          BL       usbh_ctrl_xfer
0000d8  e1a06000          MOV      r6,r0                 ;169
0000dc  e3560000          CMP      r6,#0                 ;172
0000e0  1a00000f          BNE      |L1.292|
0000e4  e59d0014          LDR      r0,[sp,#0x14]         ;174
0000e8  e3500004          CMP      r0,#4                 ;174
0000ec  0a000004          BEQ      |L1.260|
0000f0  e285100c          ADD      r1,r5,#0xc            ;176
0000f4  e28f0f7d          ADR      r0,|L1.752|
0000f8  e59d2014          LDR      r2,[sp,#0x14]         ;176
0000fc  ebfffffe          BL       sysprintf
000100  e3e06e12          MVN      r6,#0x120             ;177
                  |L1.260|
000104  e5d40000          LDRB     r0,[r4,#0]            ;179
000108  e5d41001          LDRB     r1,[r4,#1]            ;179
00010c  e1800401          ORR      r0,r0,r1,LSL #8       ;179
000110  e1c800b0          STRH     r0,[r8,#0]            ;179
000114  e5d40002          LDRB     r0,[r4,#2]            ;180
000118  e5d41003          LDRB     r1,[r4,#3]            ;180
00011c  e1800401          ORR      r0,r0,r1,LSL #8       ;180
000120  e1c900b0          STRH     r0,[r9,#0]            ;180
                  |L1.292|
000124  e3a01010          MOV      r1,#0x10              ;182
000128  e1a00004          MOV      r0,r4                 ;182
00012c  ebfffffe          BL       usbh_free_mem
000130  e1a00006          MOV      r0,r6                 ;183
000134  eaffffd8          B        |L1.156|
;;;185    
                          ENDP

                  set_port_feature PROC
;;;131     */
;;;132    static int  set_port_feature(HUB_DEV_T *hub, int feature_selector, int port)
000138  e92d40f0          PUSH     {r4-r7,lr}
;;;133    {
00013c  e24dd01c          SUB      sp,sp,#0x1c
000140  e1a04000          MOV      r4,r0
000144  e1a05001          MOV      r5,r1
000148  e1a06002          MOV      r6,r2
;;;134        UDEV_T     *udev = hub->iface->udev;
00014c  e5940000          LDR      r0,[r4,#0]
000150  e5907000          LDR      r7,[r0,#0]
;;;135        uint32_t   read_len;
;;;136    
;;;137        return usbh_ctrl_xfer(udev, REQ_TYPE_OUT | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_OTHER,
000154  e3a000c8          MOV      r0,#0xc8
000158  e28d1018          ADD      r1,sp,#0x18
00015c  e3a02000          MOV      r2,#0
000160  e58d2004          STR      r2,[sp,#4]
000164  e58d0010          STR      r0,[sp,#0x10]
000168  e1a00806          LSL      r0,r6,#16
00016c  e1a00820          LSR      r0,r0,#16
000170  e1a03805          LSL      r3,r5,#16
000174  e1a03823          LSR      r3,r3,#16
000178  e58d2008          STR      r2,[sp,#8]
00017c  e3a02003          MOV      r2,#3
000180  e58d100c          STR      r1,[sp,#0xc]
000184  e3a01023          MOV      r1,#0x23
000188  e58d0000          STR      r0,[sp,#0]
00018c  e1a00007          MOV      r0,r7
000190  ebfffffe          BL       usbh_ctrl_xfer
000194  e28dd01c          ADD      sp,sp,#0x1c
;;;138                              USB_REQ_SET_FEATURE, feature_selector, port, 0,
;;;139                              NULL, &read_len, 200);
;;;140    }
000198  e8bd80f0          POP      {r4-r7,pc}
;;;141    
                          ENDP

                  do_port_reset PROC
;;;406    
;;;407    static int do_port_reset(HUB_DEV_T *hub, int port)
00019c  e92d47fc          PUSH     {r2-r10,lr}
;;;408    {
0001a0  e1a07000          MOV      r7,r0
0001a4  e1a06001          MOV      r6,r1
;;;409        int         retry;
;;;410        int         reset_time;
;;;411        uint32_t    t0;
;;;412        uint16_t    wPortStatus, wPortChange;
;;;413        int         ret;
;;;414    
;;;415        reset_time = PORT_RESET_TIME_MS;        /* initial reset time                         */
0001a8  e3a09032          MOV      r9,#0x32
;;;416    
;;;417        for (retry = 0; retry < PORT_RESET_RETRY; retry++)
0001ac  e3a08000          MOV      r8,#0
0001b0  ea000033          B        |L1.644|
                  |L1.436|
;;;418        {
;;;419            ret = set_port_feature(hub, FS_PORT_RESET, port);  /* submit a port reset         */
0001b4  e1a02006          MOV      r2,r6
0001b8  e3a01004          MOV      r1,#4
0001bc  e1a00007          MOV      r0,r7
0001c0  ebfffffe          BL       set_port_feature
0001c4  e1a04000          MOV      r4,r0
;;;420            if (ret < 0)
0001c8  e3540000          CMP      r4,#0
0001cc  aa000001          BGE      |L1.472|
;;;421                return ret;                     /* class command failed                       */
0001d0  e1a00004          MOV      r0,r4
                  |L1.468|
;;;422    
;;;423            t0 = get_ticks();                   /* get start time                             */
;;;424            while (get_ticks() - t0 < (reset_time/10)+1)    /* time-out?                      */
;;;425            {
;;;426                delay_us(5000);                 /* wait 5 ms                                  */
;;;427    
;;;428                ret = get_port_status(hub, port, &wPortStatus, &wPortChange);
;;;429                if (ret < 0)
;;;430                {
;;;431                    USB_error("Failed to get Hub [%s] port %d status! (%d)\n", hub->pos_id, port, ret);
;;;432                    return ret;
;;;433                }
;;;434    
;;;435                /*
;;;436                 *  If device is disconnected or port enabled, we can stop port reset.
;;;437                 */
;;;438                if (((wPortStatus & PORT_S_CONNECTION) == 0) ||
;;;439                        ((wPortStatus & (PORT_S_CONNECTION | PORT_S_ENABLE)) == (PORT_S_CONNECTION | PORT_S_ENABLE)))
;;;440                {
;;;441                    clear_port_feature(hub, PORT_C_ENABLE, port); /* clear port enable change */
;;;442                    return USBH_OK;
;;;443                }
;;;444            }
;;;445            reset_time += PORT_RESET_RETRY_INC_MS;   /* increase reset time                   */
;;;446        }
;;;447        USB_debug("HUB [%s] port %d - port reset failed!\n", hub->pos_id, port);
;;;448        return USBH_ERR_PORT_RESET;
;;;449    }
0001d4  e8bd87fc          POP      {r2-r10,pc}
                  |L1.472|
0001d8  ebfffffe          BL       get_ticks
0001dc  e1a05000          MOV      r5,r0                 ;423
0001e0  ea00001d          B        |L1.604|
                  |L1.484|
0001e4  e59f0134          LDR      r0,|L1.800|
0001e8  ebfffffe          BL       delay_us
0001ec  e1a0300d          MOV      r3,sp                 ;428
0001f0  e28d2004          ADD      r2,sp,#4              ;428
0001f4  e1a01006          MOV      r1,r6                 ;428
0001f8  e1a00007          MOV      r0,r7                 ;428
0001fc  ebfffffe          BL       get_port_status
000200  e1a04000          MOV      r4,r0                 ;428
000204  e3540000          CMP      r4,#0                 ;429
000208  aa000006          BGE      |L1.552|
00020c  e1a03004          MOV      r3,r4                 ;431
000210  e1a02006          MOV      r2,r6                 ;431
000214  e287100c          ADD      r1,r7,#0xc            ;431
000218  e28f0f41          ADR      r0,|L1.804|
00021c  ebfffffe          BL       sysprintf
000220  e1a00004          MOV      r0,r4                 ;432
000224  eaffffea          B        |L1.468|
                  |L1.552|
000228  e1dd00b4          LDRH     r0,[sp,#4]            ;438
00022c  e3100001          TST      r0,#1                 ;438
000230  0a000003          BEQ      |L1.580|
000234  e1dd00b4          LDRH     r0,[sp,#4]            ;439
000238  e2000003          AND      r0,r0,#3              ;439
00023c  e3500003          CMP      r0,#3                 ;439
000240  1a000005          BNE      |L1.604|
                  |L1.580|
000244  e1a02006          MOV      r2,r6                 ;441
000248  e3a01002          MOV      r1,#2                 ;441
00024c  e1a00007          MOV      r0,r7                 ;441
000250  ebfffffe          BL       clear_port_feature
000254  e3a00000          MOV      r0,#0                 ;442
000258  eaffffdd          B        |L1.468|
                  |L1.604|
00025c  ebfffffe          BL       get_ticks
000260  e040a005          SUB      r10,r0,r5             ;424
000264  e3a0100a          MOV      r1,#0xa               ;424
000268  e1a00009          MOV      r0,r9                 ;424
00026c  ebfffffe          BL       __aeabi_idivmod
000270  e2800001          ADD      r0,r0,#1              ;424
000274  e15a0000          CMP      r10,r0                ;424
000278  3affffd9          BCC      |L1.484|
00027c  e28990fa          ADD      r9,r9,#0xfa           ;445
000280  e2888001          ADD      r8,r8,#1              ;417
                  |L1.644|
000284  e3580003          CMP      r8,#3                 ;417
000288  baffffc9          BLT      |L1.436|
00028c  e3e000fe          MVN      r0,#0xfe              ;448
000290  eaffffcf          B        |L1.468|
;;;450    
                          ENDP

                  alloc_hub_device PROC
;;;32     
;;;33     static HUB_DEV_T *alloc_hub_device(void)
000294  e92d4010          PUSH     {r4,lr}
;;;34     {
;;;35         int     i;
;;;36         for (i = 0; i < MAX_HUB_DEVICE; i++)
000298  e3a04000          MOV      r4,#0
00029c  ea00000f          B        |L1.736|
                  |L1.672|
;;;37         {
;;;38             if (g_hub_dev[i].iface == NULL)
0002a0  e59f00ac          LDR      r0,|L1.852|
0002a4  e7900284          LDR      r0,[r0,r4,LSL #5]
0002a8  e3500000          CMP      r0,#0
0002ac  1a00000a          BNE      |L1.732|
;;;39             {
;;;40                 memset((char *)&g_hub_dev[i], 0, sizeof(HUB_DEV_T));
0002b0  e59f109c          LDR      r1,|L1.852|
0002b4  e0810284          ADD      r0,r1,r4,LSL #5
0002b8  e3a01020          MOV      r1,#0x20
0002bc  ebfffffe          BL       __aeabi_memclr4
;;;41                 g_hub_dev[i].port_reset = do_port_reset;
0002c0  e59f0090          LDR      r0,|L1.856|
0002c4  e59f1088          LDR      r1,|L1.852|
0002c8  e0811284          ADD      r1,r1,r4,LSL #5
0002cc  e5810018          STR      r0,[r1,#0x18]
;;;42                 return &g_hub_dev[i];
0002d0  e59f007c          LDR      r0,|L1.852|
0002d4  e0800284          ADD      r0,r0,r4,LSL #5
                  |L1.728|
;;;43             }
;;;44         }
;;;45         return NULL;
;;;46     }
0002d8  e8bd8010          POP      {r4,pc}
                  |L1.732|
0002dc  e2844001          ADD      r4,r4,#1              ;36
                  |L1.736|
0002e0  e3540008          CMP      r4,#8                 ;36
0002e4  baffffed          BLT      |L1.672|
0002e8  e3a00000          MOV      r0,#0                 ;45
0002ec  eafffff9          B        |L1.728|
                  |L1.752|
0002f0  48554220          DCB      "HUB [%s] get_port_status read_len!=4. (%d).\n",0
0002f4  5b25735d
0002f8  20676574
0002fc  5f706f72
000300  745f7374
000304  61747573
000308  20726561
00030c  645f6c65
000310  6e213d34
000314  2e202825
000318  64292e0a
00031c  00      
00031d  00                DCB      0
00031e  00                DCB      0
00031f  00                DCB      0
                  |L1.800|
                          DCD      0x00001388
                  |L1.804|
000324  4661696c          DCB      "Failed to get Hub [%s] port %d status! (%d)\n",0
000328  65642074
00032c  6f206765
000330  74204875
000334  62205b25
000338  735d2070
00033c  6f727420
000340  25642073
000344  74617475
000348  73212028
00034c  2564290a
000350  00      
000351  00                DCB      0
000352  00                DCB      0
000353  00                DCB      0
                  |L1.852|
                          DCD      g_hub_dev
                  |L1.856|
                          DCD      do_port_reset
                          ENDP

                  free_hub_device PROC
;;;47     
;;;48     static void  free_hub_device(HUB_DEV_T *hub_dev)
00035c  e92d4070          PUSH     {r4-r6,lr}
;;;49     {
000360  e1a05000          MOV      r5,r0
;;;50         int     i;
;;;51         for (i = 0; i < MAX_HUB_DEVICE; i++)
000364  e3a04000          MOV      r4,#0
000368  ea000009          B        |L1.916|
                  |L1.876|
;;;52         {
;;;53             if (g_hub_dev[i].iface == hub_dev->iface)
00036c  e51f0020          LDR      r0,|L1.852|
000370  e7900284          LDR      r0,[r0,r4,LSL #5]
000374  e5951000          LDR      r1,[r5,#0]
000378  e1500001          CMP      r0,r1
00037c  1a000003          BNE      |L1.912|
;;;54             {
;;;55                 memset((char *)&g_hub_dev[i], 0, sizeof(HUB_DEV_T));
000380  e51f1034          LDR      r1,|L1.852|
000384  e0810284          ADD      r0,r1,r4,LSL #5
000388  e3a01020          MOV      r1,#0x20
00038c  ebfffffe          BL       __aeabi_memclr4
                  |L1.912|
000390  e2844001          ADD      r4,r4,#1              ;51
                  |L1.916|
000394  e3540008          CMP      r4,#8                 ;51
000398  bafffff3          BLT      |L1.876|
;;;56             }
;;;57         }
;;;58     }
00039c  e8bd8070          POP      {r4-r6,pc}
;;;59     
                          ENDP

                  find_hub_device PROC
;;;60     static HUB_DEV_T * find_hub_device(IFACE_T *iface)
0003a0  e1a02000          MOV      r2,r0
;;;61     {
;;;62         int     i;
;;;63         for (i = 0; i < MAX_HUB_DEVICE; i++)
0003a4  e3a01000          MOV      r1,#0
0003a8  ea000007          B        |L1.972|
                  |L1.940|
;;;64         {
;;;65             if (g_hub_dev[i].iface == iface)
0003ac  e51f0060          LDR      r0,|L1.852|
0003b0  e7900281          LDR      r0,[r0,r1,LSL #5]
0003b4  e1500002          CMP      r0,r2
0003b8  1a000002          BNE      |L1.968|
;;;66             {
;;;67                 return &g_hub_dev[i];
0003bc  e51f0070          LDR      r0,|L1.852|
0003c0  e0800281          ADD      r0,r0,r1,LSL #5
                  |L1.964|
;;;68             }
;;;69         }
;;;70         return NULL;
;;;71     }
0003c4  e12fff1e          BX       lr
                  |L1.968|
0003c8  e2811001          ADD      r1,r1,#1              ;63
                  |L1.972|
0003cc  e3510008          CMP      r1,#8                 ;63
0003d0  bafffff5          BLT      |L1.940|
0003d4  e3a00000          MOV      r0,#0                 ;70
0003d8  eafffff9          B        |L1.964|
;;;72     
                          ENDP

                  clear_hub_feature PROC
;;;90      */
;;;91     static int  clear_hub_feature(HUB_DEV_T *hub, int feature_selector)
0003dc  e92d4070          PUSH     {r4-r6,lr}
;;;92     {
0003e0  e24dd018          SUB      sp,sp,#0x18
0003e4  e1a04000          MOV      r4,r0
0003e8  e1a05001          MOV      r5,r1
;;;93         UDEV_T     *udev = hub->iface->udev;
0003ec  e5940000          LDR      r0,[r4,#0]
0003f0  e5906000          LDR      r6,[r0,#0]
;;;94         uint32_t   read_len;
;;;95     
;;;96         return usbh_ctrl_xfer(udev, REQ_TYPE_OUT | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_DEV,
0003f4  e3a000c8          MOV      r0,#0xc8
0003f8  e28d1014          ADD      r1,sp,#0x14
0003fc  e3a02000          MOV      r2,#0
000400  e58d2004          STR      r2,[sp,#4]
000404  e58d0010          STR      r0,[sp,#0x10]
000408  e58d100c          STR      r1,[sp,#0xc]
00040c  e58d2008          STR      r2,[sp,#8]
000410  e1a03805          LSL      r3,r5,#16
000414  e1a03823          LSR      r3,r3,#16
000418  e58d2000          STR      r2,[sp,#0]
00041c  e3a02001          MOV      r2,#1
000420  e3a01020          MOV      r1,#0x20
000424  e1a00006          MOV      r0,r6
000428  ebfffffe          BL       usbh_ctrl_xfer
00042c  e28dd018          ADD      sp,sp,#0x18
;;;97                               USB_REQ_CLEAR_FEATURE, feature_selector, 0, 0,
;;;98                               NULL, &read_len, 200);
;;;99     }
000430  e8bd8070          POP      {r4-r6,pc}
;;;100    
                          ENDP

                  get_hub_status PROC
;;;103     */
;;;104    static int  get_hub_status(HUB_DEV_T *hub, uint16_t *wHubStatus, uint16_t *wHubChange)
000434  e92d43f0          PUSH     {r4-r9,lr}
;;;105    {
000438  e24dd01c          SUB      sp,sp,#0x1c
00043c  e1a06000          MOV      r6,r0
000440  e1a07001          MOV      r7,r1
000444  e1a08002          MOV      r8,r2
;;;106        UDEV_T     *udev = hub->iface->udev;
000448  e5960000          LDR      r0,[r6,#0]
00044c  e5909000          LDR      r9,[r0,#0]
;;;107        uint8_t    *buff;
;;;108        uint32_t   read_len;
;;;109        int        ret;
;;;110    
;;;111        buff = usbh_alloc_mem(16);
000450  e3a00010          MOV      r0,#0x10
000454  ebfffffe          BL       usbh_alloc_mem
000458  e1a04000          MOV      r4,r0
;;;112        if (buff == NULL)
00045c  e3540000          CMP      r4,#0
000460  1a000002          BNE      |L1.1136|
;;;113            return USBH_ERR_MEMORY_OUT;
000464  e3e00009          MVN      r0,#9
                  |L1.1128|
000468  e28dd01c          ADD      sp,sp,#0x1c
;;;114    
;;;115        ret =  usbh_ctrl_xfer(udev, REQ_TYPE_IN | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_DEV,
;;;116                              USB_REQ_GET_STATUS, 0,  0, 4,
;;;117                              buff, &read_len, 200);
;;;118        if ((ret == 0) && (read_len != 4))
;;;119            ret = USBH_ERR_DATA_UNDERRUN;
;;;120    
;;;121        *wHubStatus = (buff[1] << 8) | buff[0];
;;;122        *wHubChange = (buff[3] << 8) | buff[2];
;;;123    
;;;124        usbh_free_mem(buff, 16);
;;;125    
;;;126        return ret;
;;;127    }
00046c  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1136|
000470  e3a000c8          MOV      r0,#0xc8              ;115
000474  e28d1018          ADD      r1,sp,#0x18           ;115
000478  e3a02004          MOV      r2,#4                 ;115
00047c  e58d0010          STR      r0,[sp,#0x10]         ;115
000480  e3a00000          MOV      r0,#0                 ;115
000484  e88d0015          STM      sp,{r0,r2,r4}         ;115
000488  e1a03000          MOV      r3,r0                 ;115
00048c  e1a02000          MOV      r2,r0                 ;115
000490  e58d100c          STR      r1,[sp,#0xc]          ;115
000494  e3a010a0          MOV      r1,#0xa0              ;115
000498  e1a00009          MOV      r0,r9                 ;115
00049c  ebfffffe          BL       usbh_ctrl_xfer
0004a0  e1a05000          MOV      r5,r0                 ;115
0004a4  e3550000          CMP      r5,#0                 ;118
0004a8  1a000003          BNE      |L1.1212|
0004ac  e59d0018          LDR      r0,[sp,#0x18]         ;118
0004b0  e3500004          CMP      r0,#4                 ;118
0004b4  0a000000          BEQ      |L1.1212|
0004b8  e3e05e12          MVN      r5,#0x120             ;119
                  |L1.1212|
0004bc  e5d40000          LDRB     r0,[r4,#0]            ;121
0004c0  e5d41001          LDRB     r1,[r4,#1]            ;121
0004c4  e1800401          ORR      r0,r0,r1,LSL #8       ;121
0004c8  e1c700b0          STRH     r0,[r7,#0]            ;121
0004cc  e5d40002          LDRB     r0,[r4,#2]            ;122
0004d0  e5d41003          LDRB     r1,[r4,#3]            ;122
0004d4  e1800401          ORR      r0,r0,r1,LSL #8       ;122
0004d8  e1c800b0          STRH     r0,[r8,#0]            ;122
0004dc  e3a01010          MOV      r1,#0x10              ;124
0004e0  e1a00004          MOV      r0,r4                 ;124
0004e4  ebfffffe          BL       usbh_free_mem
0004e8  e1a00005          MOV      r0,r5                 ;126
0004ec  eaffffdd          B        |L1.1128|
;;;128    
                          ENDP

                  hub_status_irq PROC
;;;185    
;;;186    static void hub_status_irq(UTR_T *utr)
0004f0  e92d4070          PUSH     {r4-r6,lr}
;;;187    {
0004f4  e1a04000          MOV      r4,r0
;;;188        HUB_DEV_T   *hub;
;;;189        int         i;
;;;190    
;;;191        // HUB_DBGMSG("hub_status_irq - %d, 0x%x\n", utr->xfer_len, utr->buff[0]);
;;;192    
;;;193        hub = (HUB_DEV_T *)utr->context;
0004f8  e5946080          LDR      r6,[r4,#0x80]
;;;194    
;;;195        if (utr->status != 0)
0004fc  e5940078          LDR      r0,[r4,#0x78]
000500  e3500000          CMP      r0,#0
000504  0a000003          BEQ      |L1.1304|
;;;196        {
;;;197            USB_error("hub_status_irq - has error: 0x%x\n", utr->status);
000508  e28f0f9a          ADR      r0,|L1.1912|
00050c  e5941078          LDR      r1,[r4,#0x78]
000510  ebfffffe          BL       sysprintf
                  |L1.1300|
;;;198            return;
;;;199        }
;;;200    
;;;201        if (utr->xfer_len)
;;;202        {
;;;203            for (i = 0; i < utr->xfer_len; i++)
;;;204            {
;;;205                hub->sc_bitmap |= (utr->buff[i] << (i * 8));
;;;206            }
;;;207            HUB_DBGMSG("hub_status_irq - status bitmap: 0x%x\n", hub->sc_bitmap);
;;;208        }
;;;209    }
000514  e8bd8070          POP      {r4-r6,pc}
                  |L1.1304|
000518  e594001c          LDR      r0,[r4,#0x1c]         ;201
00051c  e3500000          CMP      r0,#0                 ;201
000520  0a00000f          BEQ      |L1.1380|
000524  e3a05000          MOV      r5,#0                 ;203
000528  ea000007          B        |L1.1356|
                  |L1.1324|
00052c  e5940010          LDR      r0,[r4,#0x10]         ;205
000530  e7d00005          LDRB     r0,[r0,r5]            ;205
000534  e1a01185          LSL      r1,r5,#3              ;205
000538  e1a00110          LSL      r0,r0,r1              ;205
00053c  e1d610b8          LDRH     r1,[r6,#8]            ;205
000540  e1800001          ORR      r0,r0,r1              ;205
000544  e1c600b8          STRH     r0,[r6,#8]            ;205
000548  e2855001          ADD      r5,r5,#1              ;203
                  |L1.1356|
00054c  e594001c          LDR      r0,[r4,#0x1c]         ;203
000550  e1500005          CMP      r0,r5                 ;203
000554  8afffff4          BHI      |L1.1324|
000558  e1d610b8          LDRH     r1,[r6,#8]            ;207
00055c  e28f0f8e          ADR      r0,|L1.1948|
000560  ebfffffe          BL       sysprintf
                  |L1.1380|
000564  e1a00000          MOV      r0,r0
000568  eaffffe9          B        |L1.1300|
;;;210    
                          ENDP

                  hub_probe PROC
;;;211    int hub_probe(IFACE_T *iface)
00056c  e92d4ff0          PUSH     {r4-r11,lr}
;;;212    {
000570  e24dd024          SUB      sp,sp,#0x24
000574  e1a07000          MOV      r7,r0
;;;213        UDEV_T      *udev = iface->udev;
000578  e5978000          LDR      r8,[r7,#0]
;;;214        ALT_IFACE_T *aif = iface->aif;
00057c  e597b008          LDR      r11,[r7,#8]
;;;215        EP_INFO_T   *ep;
;;;216        HUB_DEV_T   *hub;
;;;217        UTR_T       *utr;
;;;218        uint32_t    read_len;
;;;219        int         i, ret;
;;;220        DESC_HUB_T  *desc_hub;
;;;221        char        str[2] = "0";
000580  e28f0f8f          ADR      r0,|L1.1988|
000584  e5900000          LDR      r0,[r0,#0]
000588  e58d0018          STR      r0,[sp,#0x18]
;;;222    
;;;223        /* Is this interface HID class? */
;;;224        if (aif->ifd->bInterfaceClass != USB_CLASS_HUB)
00058c  e59b0000          LDR      r0,[r11,#0]
000590  e5d00005          LDRB     r0,[r0,#5]
000594  e3500009          CMP      r0,#9
000598  0a000002          BEQ      |L1.1448|
;;;225            return USBH_ERR_NOT_MATCHED;
00059c  e3e00066          MVN      r0,#0x66
                  |L1.1440|
0005a0  e28dd024          ADD      sp,sp,#0x24
;;;226    
;;;227        /*
;;;228         *  Try to find an interrupt endpoint
;;;229         */
;;;230        for (i = 0; i < aif->ifd->bNumEndpoints; i++)
;;;231        {
;;;232            if (((aif->ep[i].bmAttributes & EP_ATTR_TT_MASK) == EP_ATTR_TT_INT) &&
;;;233                    ((aif->ep[i].bEndpointAddress & EP_ADDR_DIR_MASK) == EP_ADDR_DIR_IN))
;;;234            {
;;;235                ep = &aif->ep[i];
;;;236                break;
;;;237            }
;;;238        }
;;;239    
;;;240        if (ep == NULL)
;;;241            return USBH_ERR_NOT_MATCHED;        /* no INT-in endpoints, Ignore this interface */
;;;242    
;;;243        hub = alloc_hub_device();               /* allocate hub device                        */
;;;244        if (hub == NULL)
;;;245            return USBH_ERR_MEMORY_OUT;         /* out of memory                              */
;;;246    
;;;247        hub->iface = iface;                     /* assign interface device pointer            */
;;;248        iface->context = (void *)hub;
;;;249    
;;;250        str[0] += udev->port_num;
;;;251        if (udev->parent == NULL)               /* is connected under the root hub?           */
;;;252            strcpy(hub->pos_id, str);           /* create hub position identifier string      */
;;;253        else
;;;254        {
;;;255            strcpy(hub->pos_id, udev->parent->pos_id);
;;;256            strcat(hub->pos_id, str);
;;;257        }
;;;258    
;;;259        HUB_DBGMSG("hub found is:[%s] - device (vid=0x%x, pid=0x%x), interface %d.\n", hub->pos_id,
;;;260                   udev->descriptor.idVendor, udev->descriptor.idProduct, iface->if_num);
;;;261    
;;;262        /*------------------------------------------------------------------------------------*/
;;;263        /* Get Hub descriptor and parse to get information                                    */
;;;264        /*------------------------------------------------------------------------------------*/
;;;265        desc_hub = (DESC_HUB_T *)usbh_alloc_mem(sizeof(DESC_HUB_T));
;;;266        if (desc_hub == NULL)
;;;267            return USBH_ERR_MEMORY_OUT;
;;;268    
;;;269        ret = usbh_ctrl_xfer(udev, REQ_TYPE_IN | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_DEV,
;;;270                             USB_REQ_GET_DESCRIPTOR,
;;;271                             ((USB_DT_CLASS | 0x9) << 8),  /* Hub descriptor type: 29H   */
;;;272                             0, sizeof(DESC_HUB_T),
;;;273                             (uint8_t *)desc_hub, &read_len, 200);
;;;274        if (ret < 0)
;;;275        {
;;;276            USB_error("Failed to get hub descriptor!\n");
;;;277        }
;;;278        else
;;;279        {
;;;280            hub->bNbrPorts = desc_hub->bNbrPorts;
;;;281            hub->bPwrOn2PwrGood = desc_hub->bPwrOn2PwrGood * 2;
;;;282            HUB_DBGMSG("Hub has %d ports, power-to-power-good time is %d ms.\n", hub->bNbrPorts, hub->bPwrOn2PwrGood);
;;;283        }
;;;284        usbh_free_mem(desc_hub, sizeof(DESC_HUB_T));
;;;285    
;;;286        /*------------------------------------------------------------------------------------*/
;;;287        /* Enable all hub port power                                                          */
;;;288        /*------------------------------------------------------------------------------------*/
;;;289        for (i = 1; i <= hub->bNbrPorts; i++)
;;;290        {
;;;291            ret = set_port_feature(hub, FS_PORT_POWER, i);
;;;292            if (ret == 0)
;;;293                HUB_DBGMSG("Hub [%s] port %d power enabled.\n", hub->pos_id, i);
;;;294            else
;;;295                HUB_DBGMSG("Hub [%s] port %d power enabling failed!\n", hub->pos_id, i);
;;;296        }
;;;297    
;;;298        delay_us(hub->bPwrOn2PwrGood * 1000 + 100000);   /* delay to wait hub power ready     */
;;;299    
;;;300        utr = alloc_utr(udev);                  /* allocate an UTR for INT-in transfer        */
;;;301        if (utr == NULL)
;;;302        {
;;;303            free_hub_device(hub);
;;;304            return USBH_ERR_MEMORY_OUT;         /* out of memory                              */
;;;305        }
;;;306        hub->utr = utr;
;;;307        utr->context = hub;                     /* hook backward link to hub device           */
;;;308        utr->ep = ep;                           /* the INT-in endpoint found earlier          */
;;;309        utr->buff = usbh_alloc_mem(HUB_STATUS_MAX_BYTE);     /* INT-in data receiving buffer  */
;;;310        utr->data_len = HUB_STATUS_MAX_BYTE;    /* maximum length of data of INT-in status    */
;;;311        utr->xfer_len = 0;
;;;312        utr->func = hub_status_irq;             /* interrupt in transfer done callback        */
;;;313    
;;;314        ret = usbh_int_xfer(utr);               /* submit the INT-in transfer                 */
;;;315        if (ret < 0)
;;;316        {
;;;317            HUB_DBGMSG("Error - failed to submit interrupt read request (%d)", ret);
;;;318            usbh_free_mem(utr->buff, HUB_STATUS_MAX_BYTE);
;;;319            free_utr(utr);
;;;320            free_hub_device(hub);
;;;321            return USBH_ERR_TRANSFER;
;;;322        }
;;;323        HUB_DBGMSG("hub_probe OK.\n");
;;;324        return 0;
;;;325    }
0005a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1448|
0005a8  e3a06000          MOV      r6,#0                 ;230
0005ac  ea000012          B        |L1.1532|
                  |L1.1456|
0005b0  e0860086          ADD      r0,r6,r6,LSL #1       ;232
0005b4  e28b1004          ADD      r1,r11,#4             ;232
0005b8  e0810100          ADD      r0,r1,r0,LSL #2       ;232
0005bc  e5d00001          LDRB     r0,[r0,#1]            ;232
0005c0  e2000003          AND      r0,r0,#3              ;232
0005c4  e3500003          CMP      r0,#3                 ;232
0005c8  1a00000a          BNE      |L1.1528|
0005cc  e0860086          ADD      r0,r6,r6,LSL #1       ;233
0005d0  e28b1004          ADD      r1,r11,#4             ;233
0005d4  e7d10100          LDRB     r0,[r1,r0,LSL #2]     ;233
0005d8  e2000080          AND      r0,r0,#0x80           ;233
0005dc  e3500080          CMP      r0,#0x80              ;233
0005e0  1a000004          BNE      |L1.1528|
0005e4  e0860086          ADD      r0,r6,r6,LSL #1       ;235
0005e8  e28b1004          ADD      r1,r11,#4             ;235
0005ec  e0810100          ADD      r0,r1,r0,LSL #2       ;235
0005f0  e58d0020          STR      r0,[sp,#0x20]         ;235
0005f4  ea000004          B        |L1.1548|
                  |L1.1528|
0005f8  e2866001          ADD      r6,r6,#1              ;230
                  |L1.1532|
0005fc  e59b0000          LDR      r0,[r11,#0]           ;230
000600  e5d00004          LDRB     r0,[r0,#4]            ;230
000604  e1500006          CMP      r0,r6                 ;230
000608  caffffe8          BGT      |L1.1456|
                  |L1.1548|
00060c  e1a00000          MOV      r0,r0                 ;236
000610  e59d0020          LDR      r0,[sp,#0x20]         ;240
000614  e3500000          CMP      r0,#0                 ;240
000618  1a000001          BNE      |L1.1572|
00061c  e3e00066          MVN      r0,#0x66              ;241
000620  eaffffde          B        |L1.1440|
                  |L1.1572|
000624  ebfffffe          BL       alloc_hub_device
000628  e1a04000          MOV      r4,r0                 ;243
00062c  e3540000          CMP      r4,#0                 ;244
000630  1a000001          BNE      |L1.1596|
000634  e3e00009          MVN      r0,#9                 ;245
000638  eaffffd8          B        |L1.1440|
                  |L1.1596|
00063c  e5847000          STR      r7,[r4,#0]            ;247
000640  e58744c0          STR      r4,[r7,#0x4c0]        ;248
000644  e5dd0018          LDRB     r0,[sp,#0x18]         ;250
000648  e5d81018          LDRB     r1,[r8,#0x18]         ;250
00064c  e0800001          ADD      r0,r0,r1              ;250
000650  e5cd0018          STRB     r0,[sp,#0x18]         ;250
000654  e5980014          LDR      r0,[r8,#0x14]         ;251
000658  e3500000          CMP      r0,#0                 ;251
00065c  1a000003          BNE      |L1.1648|
000660  e28d1018          ADD      r1,sp,#0x18           ;252
000664  e284000c          ADD      r0,r4,#0xc            ;252
000668  ebfffffe          BL       strcpy
00066c  ea000006          B        |L1.1676|
                  |L1.1648|
000670  e5980014          LDR      r0,[r8,#0x14]         ;255
000674  e280100c          ADD      r1,r0,#0xc            ;255
000678  e284000c          ADD      r0,r4,#0xc            ;255
00067c  ebfffffe          BL       strcpy
000680  e28d1018          ADD      r1,sp,#0x18           ;256
000684  e284000c          ADD      r0,r4,#0xc            ;256
000688  ebfffffe          BL       strcat
                  |L1.1676|
00068c  e5d70004          LDRB     r0,[r7,#4]            ;259
000690  e58d0000          STR      r0,[sp,#0]            ;259
000694  e1d830ba          LDRH     r3,[r8,#0xa]          ;259
000698  e1d820b8          LDRH     r2,[r8,#8]            ;259
00069c  e284100c          ADD      r1,r4,#0xc            ;259
0006a0  e28f0e12          ADR      r0,|L1.1992|
0006a4  ebfffffe          BL       sysprintf
0006a8  e3a00018          MOV      r0,#0x18              ;265
0006ac  ebfffffe          BL       usbh_alloc_mem
0006b0  e1a0a000          MOV      r10,r0                ;265
0006b4  e35a0000          CMP      r10,#0                ;266
0006b8  1a000001          BNE      |L1.1732|
0006bc  e3e00009          MVN      r0,#9                 ;267
0006c0  eaffffb6          B        |L1.1440|
                  |L1.1732|
0006c4  e3a000c8          MOV      r0,#0xc8              ;269
0006c8  e28d101c          ADD      r1,sp,#0x1c           ;269
0006cc  e3a02018          MOV      r2,#0x18              ;269
0006d0  e58d0010          STR      r0,[sp,#0x10]         ;269
0006d4  e3a00000          MOV      r0,#0                 ;269
0006d8  e3a03c29          MOV      r3,#0x2900            ;269
0006dc  e88d0405          STM      sp,{r0,r2,r10}        ;269
0006e0  e3a02006          MOV      r2,#6                 ;269
0006e4  e58d100c          STR      r1,[sp,#0xc]          ;269
0006e8  e3a010a0          MOV      r1,#0xa0              ;269
0006ec  e1a00008          MOV      r0,r8                 ;269
0006f0  ebfffffe          BL       usbh_ctrl_xfer
0006f4  e1a09000          MOV      r9,r0                 ;269
0006f8  e3590000          CMP      r9,#0                 ;274
0006fc  aa000002          BGE      |L1.1804|
000700  e28f0c01          ADR      r0,|L1.2056|
000704  ebfffffe          BL       sysprintf
000708  ea000009          B        |L1.1844|
                  |L1.1804|
00070c  e5da0002          LDRB     r0,[r10,#2]           ;280
000710  e5c4000a          STRB     r0,[r4,#0xa]          ;280
000714  e5da0005          LDRB     r0,[r10,#5]           ;281
000718  e1a00c80          LSL      r0,r0,#25             ;281
00071c  e1a00c20          LSR      r0,r0,#24             ;281
000720  e5c4000b          STRB     r0,[r4,#0xb]          ;281
000724  e5d4200b          LDRB     r2,[r4,#0xb]          ;282
000728  e5d4100a          LDRB     r1,[r4,#0xa]          ;282
00072c  e28f00f4          ADR      r0,|L1.2088|
000730  ebfffffe          BL       sysprintf
                  |L1.1844|
000734  e3a01018          MOV      r1,#0x18              ;284
000738  e1a0000a          MOV      r0,r10                ;284
00073c  ebfffffe          BL       usbh_free_mem
000740  e3a06001          MOV      r6,#1                 ;289
000744  ea000053          B        |L1.2200|
                  |L1.1864|
000748  e1a02006          MOV      r2,r6                 ;291
00074c  e3a01008          MOV      r1,#8                 ;291
000750  e1a00004          MOV      r0,r4                 ;291
000754  ebfffffe          BL       set_port_feature
000758  e1a09000          MOV      r9,r0                 ;291
00075c  e3590000          CMP      r9,#0                 ;292
000760  1a000047          BNE      |L1.2180|
000764  e1a02006          MOV      r2,r6                 ;293
000768  e284100c          ADD      r1,r4,#0xc            ;293
00076c  e28f00ec          ADR      r0,|L1.2144|
000770  ebfffffe          BL       sysprintf
000774  ea000046          B        |L1.2196|
                  |L1.1912|
000778  6875625f          DCB      "hub_status_irq - has error: 0x%x\n",0
00077c  73746174
000780  75735f69
000784  7271202d
000788  20686173
00078c  20657272
000790  6f723a20
000794  30782578
000798  0a00    
00079a  00                DCB      0
00079b  00                DCB      0
                  |L1.1948|
00079c  6875625f          DCB      "hub_status_irq - status bitmap: 0x%x\n",0
0007a0  73746174
0007a4  75735f69
0007a8  7271202d
0007ac  20737461
0007b0  74757320
0007b4  6269746d
0007b8  61703a20
0007bc  30782578
0007c0  0a00    
0007c2  00                DCB      0
0007c3  00                DCB      0
                  |L1.1988|
0007c4  3000              DCB      "0",0
0007c6  00                DCB      0
0007c7  00                DCB      0
                  |L1.1992|
0007c8  68756220          DCB      "hub found is:[%s] - device (vid=0x%x, pid=0x%x), interf"
0007cc  666f756e
0007d0  64206973
0007d4  3a5b2573
0007d8  5d202d20
0007dc  64657669
0007e0  63652028
0007e4  7669643d
0007e8  30782578
0007ec  2c207069
0007f0  643d3078
0007f4  2578292c
0007f8  20696e74
0007fc  657266  
0007ff  61636520          DCB      "ace %d.\n",0
000803  25642e0a
000807  00      
                  |L1.2056|
000808  4661696c          DCB      "Failed to get hub descriptor!\n",0
00080c  65642074
000810  6f206765
000814  74206875
000818  62206465
00081c  73637269
000820  70746f72
000824  210a00  
000827  00                DCB      0
                  |L1.2088|
000828  48756220          DCB      "Hub has %d ports, power-to-power-good time is %d ms.\n",0
00082c  68617320
000830  25642070
000834  6f727473
000838  2c20706f
00083c  7765722d
000840  746f2d70
000844  6f776572
000848  2d676f6f
00084c  64207469
000850  6d652069
000854  73202564
000858  206d732e
00085c  0a00    
00085e  00                DCB      0
00085f  00                DCB      0
                  |L1.2144|
000860  48756220          DCB      "Hub [%s] port %d power enabled.\n",0
000864  5b25735d
000868  20706f72
00086c  74202564
000870  20706f77
000874  65722065
000878  6e61626c
00087c  65642e0a
000880  00      
000881  00                DCB      0
000882  00                DCB      0
000883  00                DCB      0
                  |L1.2180|
000884  e1a02006          MOV      r2,r6                 ;295
000888  e284100c          ADD      r1,r4,#0xc            ;295
00088c  e28f0f92          ADR      r0,|L1.2780|
000890  ebfffffe          BL       sysprintf
                  |L1.2196|
000894  e2866001          ADD      r6,r6,#1              ;289
                  |L1.2200|
000898  e5d4000a          LDRB     r0,[r4,#0xa]          ;289
00089c  e1500006          CMP      r0,r6                 ;289
0008a0  aaffffa8          BGE      |L1.1864|
0008a4  e5d4100b          LDRB     r1,[r4,#0xb]          ;298
0008a8  e0812081          ADD      r2,r1,r1,LSL #1       ;298
0008ac  e0621381          RSB      r1,r2,r1,LSL #7       ;298
0008b0  e59f2250          LDR      r2,|L1.2824|
0008b4  e0820181          ADD      r0,r2,r1,LSL #3       ;298
0008b8  ebfffffe          BL       delay_us
0008bc  e1a00008          MOV      r0,r8                 ;300
0008c0  ebfffffe          BL       alloc_utr
0008c4  e1a05000          MOV      r5,r0                 ;300
0008c8  e3550000          CMP      r5,#0                 ;301
0008cc  1a000003          BNE      |L1.2272|
0008d0  e1a00004          MOV      r0,r4                 ;303
0008d4  ebfffffe          BL       free_hub_device
0008d8  e3e00009          MVN      r0,#9                 ;304
0008dc  eaffff2f          B        |L1.1440|
                  |L1.2272|
0008e0  e5845004          STR      r5,[r4,#4]            ;306
0008e4  e5854080          STR      r4,[r5,#0x80]         ;307
0008e8  e59d0020          LDR      r0,[sp,#0x20]         ;308
0008ec  e585000c          STR      r0,[r5,#0xc]          ;308
0008f0  e3a00002          MOV      r0,#2                 ;309
0008f4  ebfffffe          BL       usbh_alloc_mem
0008f8  e5850010          STR      r0,[r5,#0x10]         ;309
0008fc  e3a00002          MOV      r0,#2                 ;310
000900  e5850018          STR      r0,[r5,#0x18]         ;310
000904  e3a00000          MOV      r0,#0                 ;311
000908  e585001c          STR      r0,[r5,#0x1c]         ;311
00090c  e59f01f8          LDR      r0,|L1.2828|
000910  e5850084          STR      r0,[r5,#0x84]         ;312
000914  e1a00005          MOV      r0,r5                 ;314
000918  ebfffffe          BL       usbh_int_xfer
00091c  e1a09000          MOV      r9,r0                 ;314
000920  e3590000          CMP      r9,#0                 ;315
000924  aa00000b          BGE      |L1.2392|
000928  e1a01009          MOV      r1,r9                 ;317
00092c  e28f0f77          ADR      r0,|L1.2832|
000930  ebfffffe          BL       sysprintf
000934  e3a01002          MOV      r1,#2                 ;318
000938  e5950010          LDR      r0,[r5,#0x10]         ;318
00093c  ebfffffe          BL       usbh_free_mem
000940  e1a00005          MOV      r0,r5                 ;319
000944  ebfffffe          BL       free_utr
000948  e1a00004          MOV      r0,r4                 ;320
00094c  ebfffffe          BL       free_hub_device
000950  e3e000c8          MVN      r0,#0xc8              ;321
000954  eaffff11          B        |L1.1440|
                  |L1.2392|
000958  e28f0f7a          ADR      r0,|L1.2888|
00095c  ebfffffe          BL       sysprintf
000960  e3a00000          MOV      r0,#0                 ;324
000964  eaffff0d          B        |L1.1440|
;;;326    
                          ENDP

                  usbh_find_device PROC
;;;700      */
;;;701    UDEV_T * usbh_find_device(char *hub_id, int port)
000968  e92d41f0          PUSH     {r4-r8,lr}
;;;702    {
00096c  e1a06000          MOV      r6,r0
000970  e1a07001          MOV      r7,r1
;;;703        int         i;
;;;704        HUB_DEV_T   *hub = NULL;
000974  e3a08000          MOV      r8,#0
;;;705        UDEV_T      *udev;
;;;706    
;;;707        for (i = 0; i < MAX_HUB_DEVICE; i++)
000978  e3a05000          MOV      r5,#0
00097c  ea00000e          B        |L1.2492|
                  |L1.2432|
;;;708        {
;;;709            if ((g_hub_dev[i].iface != NULL) && (strcmp(g_hub_dev[i].pos_id, hub_id) == 0))
000980  e51f0634          LDR      r0,|L1.852|
000984  e7900285          LDR      r0,[r0,r5,LSL #5]
000988  e3500000          CMP      r0,#0
00098c  0a000009          BEQ      |L1.2488|
000990  e51f1644          LDR      r1,|L1.852|
000994  e0811285          ADD      r1,r1,r5,LSL #5
000998  e281000c          ADD      r0,r1,#0xc
00099c  e1a01006          MOV      r1,r6
0009a0  ebfffffe          BL       strcmp
0009a4  e3500000          CMP      r0,#0
0009a8  1a000002          BNE      |L1.2488|
;;;710            {
;;;711                hub = &g_hub_dev[i];
0009ac  e51f0660          LDR      r0,|L1.852|
0009b0  e0808285          ADD      r8,r0,r5,LSL #5
;;;712                break;
0009b4  ea000002          B        |L1.2500|
                  |L1.2488|
0009b8  e2855001          ADD      r5,r5,#1              ;707
                  |L1.2492|
0009bc  e3550008          CMP      r5,#8                 ;707
0009c0  baffffee          BLT      |L1.2432|
                  |L1.2500|
0009c4  e1a00000          MOV      r0,r0
;;;713            }
;;;714        }
;;;715        if (hub == NULL)
0009c8  e3580000          CMP      r8,#0
0009cc  1a000001          BNE      |L1.2520|
;;;716            return NULL;
0009d0  e3a00000          MOV      r0,#0
                  |L1.2516|
;;;717    
;;;718        udev = g_udev_list;
;;;719        while (udev != NULL)
;;;720        {
;;;721            if ((udev->parent == hub) && (udev->port_num == port))
;;;722                return udev;
;;;723            udev = udev->next;
;;;724        }
;;;725        return NULL;
;;;726    }
0009d4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2520|
0009d8  e59f0178          LDR      r0,|L1.2904|
0009dc  e5904000          LDR      r4,[r0,#0]            ;718  ; g_udev_list
0009e0  ea000008          B        |L1.2568|
                  |L1.2532|
0009e4  e5940014          LDR      r0,[r4,#0x14]         ;721
0009e8  e1500008          CMP      r0,r8                 ;721
0009ec  1a000004          BNE      |L1.2564|
0009f0  e5d40018          LDRB     r0,[r4,#0x18]         ;721
0009f4  e1500007          CMP      r0,r7                 ;721
0009f8  1a000001          BNE      |L1.2564|
0009fc  e1a00004          MOV      r0,r4                 ;722
000a00  eafffff3          B        |L1.2516|
                  |L1.2564|
000a04  e5944034          LDR      r4,[r4,#0x34]         ;723
                  |L1.2568|
000a08  e3540000          CMP      r4,#0                 ;719
000a0c  1afffff4          BNE      |L1.2532|
000a10  e3a00000          MOV      r0,#0                 ;725
000a14  eaffffee          B        |L1.2516|
;;;727    
                          ENDP

                  hub_disconnect PROC
;;;326    
;;;327    void hub_disconnect(IFACE_T *iface)
000a18  e92d40f8          PUSH     {r3-r7,lr}
;;;328    {
000a1c  e1a07000          MOV      r7,r0
;;;329        HUB_DEV_T   *hub;
;;;330        UDEV_T      *udev;
;;;331        int         port;
;;;332    
;;;333        hub = find_hub_device(iface);           /* find the hub device by inface device       */
000a20  e1a00007          MOV      r0,r7
000a24  ebfffffe          BL       find_hub_device
000a28  e1a04000          MOV      r4,r0
;;;334        if (hub == NULL)
000a2c  e3540000          CMP      r4,#0
000a30  1a000002          BNE      |L1.2624|
;;;335        {
;;;336            HUB_DBGMSG("hub_disconnect - hub not found!\n");
000a34  e28f0e12          ADR      r0,|L1.2908|
000a38  ebfffffe          BL       sysprintf
                  |L1.2620|
;;;337            return;
;;;338        }
;;;339    
;;;340        /*
;;;341         *  disconnect all device under this hub
;;;342         */
;;;343        for (port = 1; port <= hub->bNbrPorts; port++)
;;;344        {
;;;345            udev = usbh_find_device(hub->pos_id, port);
;;;346            if (udev != NULL)
;;;347            {
;;;348                HUB_DBGMSG("Disconnect HUB [%s] port %d device 0x%x:0x%x\n", hub->pos_id, port, udev->descriptor.idVendor, udev->descriptor.idProduct);
;;;349                disconnect_device(udev);
;;;350            }
;;;351        }
;;;352    
;;;353        if (hub->utr)
;;;354        {
;;;355            usbh_quit_utr(hub->utr);
;;;356            usbh_free_mem(hub->utr->buff, HUB_STATUS_MAX_BYTE);
;;;357            free_utr(hub->utr);
;;;358        }
;;;359    
;;;360        HUB_DBGMSG("Disconnect HUB [%s].\n", hub->pos_id);
;;;361        free_hub_device(hub);
;;;362    }
000a3c  e8bd80f8          POP      {r3-r7,pc}
                  |L1.2624|
000a40  e3a06001          MOV      r6,#1                 ;343
000a44  ea00000f          B        |L1.2696|
                  |L1.2632|
000a48  e1a01006          MOV      r1,r6                 ;345
000a4c  e284000c          ADD      r0,r4,#0xc            ;345
000a50  ebfffffe          BL       usbh_find_device
000a54  e1a05000          MOV      r5,r0                 ;345
000a58  e3550000          CMP      r5,#0                 ;346
000a5c  0a000008          BEQ      |L1.2692|
000a60  e1d500ba          LDRH     r0,[r5,#0xa]          ;348
000a64  e58d0000          STR      r0,[sp,#0]            ;348
000a68  e1d530b8          LDRH     r3,[r5,#8]            ;348
000a6c  e1a02006          MOV      r2,r6                 ;348
000a70  e284100c          ADD      r1,r4,#0xc            ;348
000a74  e28f0f41          ADR      r0,|L1.2944|
000a78  ebfffffe          BL       sysprintf
000a7c  e1a00005          MOV      r0,r5                 ;349
000a80  ebfffffe          BL       disconnect_device
                  |L1.2692|
000a84  e2866001          ADD      r6,r6,#1              ;343
                  |L1.2696|
000a88  e5d4000a          LDRB     r0,[r4,#0xa]          ;343
000a8c  e1500006          CMP      r0,r6                 ;343
000a90  aaffffec          BGE      |L1.2632|
000a94  e5940004          LDR      r0,[r4,#4]            ;353
000a98  e3500000          CMP      r0,#0                 ;353
000a9c  0a000007          BEQ      |L1.2752|
000aa0  e5940004          LDR      r0,[r4,#4]            ;355
000aa4  ebfffffe          BL       usbh_quit_utr
000aa8  e5941004          LDR      r1,[r4,#4]            ;356
000aac  e5910010          LDR      r0,[r1,#0x10]         ;356
000ab0  e3a01002          MOV      r1,#2                 ;356
000ab4  ebfffffe          BL       usbh_free_mem
000ab8  e5940004          LDR      r0,[r4,#4]            ;357
000abc  ebfffffe          BL       free_utr
                  |L1.2752|
000ac0  e284100c          ADD      r1,r4,#0xc            ;360
000ac4  e28f00e4          ADR      r0,|L1.2992|
000ac8  ebfffffe          BL       sysprintf
000acc  e1a00004          MOV      r0,r4                 ;361
000ad0  ebfffffe          BL       free_hub_device
000ad4  e1a00000          MOV      r0,r0
000ad8  eaffffd7          B        |L1.2620|
                  |L1.2780|
000adc  48756220          DCB      "Hub [%s] port %d power enabling failed!\n",0
000ae0  5b25735d
000ae4  20706f72
000ae8  74202564
000aec  20706f77
000af0  65722065
000af4  6e61626c
000af8  696e6720
000afc  6661696c
000b00  6564210a
000b04  00      
000b05  00                DCB      0
000b06  00                DCB      0
000b07  00                DCB      0
                  |L1.2824|
                          DCD      0x000186a0
                  |L1.2828|
                          DCD      hub_status_irq
                  |L1.2832|
000b10  4572726f          DCB      "Error - failed to submit interrupt read request (%d)",0
000b14  72202d20
000b18  6661696c
000b1c  65642074
000b20  6f207375
000b24  626d6974
000b28  20696e74
000b2c  65727275
000b30  70742072
000b34  65616420
000b38  72657175
000b3c  65737420
000b40  28256429
000b44  00      
000b45  00                DCB      0
000b46  00                DCB      0
000b47  00                DCB      0
                  |L1.2888|
000b48  6875625f          DCB      "hub_probe OK.\n",0
000b4c  70726f62
000b50  65204f4b
000b54  2e0a00  
000b57  00                DCB      0
                  |L1.2904|
                          DCD      g_udev_list
                  |L1.2908|
000b5c  6875625f          DCB      "hub_disconnect - hub not found!\n",0
000b60  64697363
000b64  6f6e6e65
000b68  6374202d
000b6c  20687562
000b70  206e6f74
000b74  20666f75
000b78  6e64210a
000b7c  00      
000b7d  00                DCB      0
000b7e  00                DCB      0
000b7f  00                DCB      0
                  |L1.2944|
000b80  44697363          DCB      "Disconnect HUB [%s] port %d device 0x%x:0x%x\n",0
000b84  6f6e6e65
000b88  63742048
000b8c  5542205b
000b90  25735d20
000b94  706f7274
000b98  20256420
000b9c  64657669
000ba0  63652030
000ba4  7825783a
000ba8  30782578
000bac  0a00    
000bae  00                DCB      0
000baf  00                DCB      0
                  |L1.2992|
000bb0  44697363          DCB      "Disconnect HUB [%s].\n",0
000bb4  6f6e6e65
000bb8  63742048
000bbc  5542205b
000bc0  25735d2e
000bc4  0a00    
000bc6  00                DCB      0
000bc7  00                DCB      0
                          ENDP

                  hub_status_change PROC
;;;373    
;;;374    static int  hub_status_change(HUB_DEV_T *hub)
000bc8  e92d407c          PUSH     {r2-r6,lr}
;;;375    {
000bcc  e1a04000          MOV      r4,r0
;;;376        uint16_t    wHubStatus, wHubChange;
;;;377        int         ret;
;;;378    
;;;379        HUB_DBGMSG("Hub [%s] hub status change 0x%x.\n", hub->pos_id, hub->sc_bitmap);
000bd0  e1d420b8          LDRH     r2,[r4,#8]
000bd4  e284100c          ADD      r1,r4,#0xc
000bd8  e28f0f87          ADR      r0,|L1.3580|
000bdc  ebfffffe          BL       sysprintf
;;;380    
;;;381        ret = get_hub_status(hub, &wHubStatus, &wHubChange);
000be0  e1a0200d          MOV      r2,sp
000be4  e28d1004          ADD      r1,sp,#4
000be8  e1a00004          MOV      r0,r4
000bec  ebfffffe          BL       get_hub_status
000bf0  e1a05000          MOV      r5,r0
;;;382        if (ret < 0)
000bf4  e3550000          CMP      r5,#0
000bf8  aa000005          BGE      |L1.3092|
;;;383        {
;;;384            USB_error("Failed to get Hub [%s] status! (%d)\n", hub->pos_id, ret);
000bfc  e1a02005          MOV      r2,r5
000c00  e284100c          ADD      r1,r4,#0xc
000c04  e28f0f85          ADR      r0,|L1.3616|
000c08  ebfffffe          BL       sysprintf
;;;385            return ret;
000c0c  e1a00005          MOV      r0,r5
                  |L1.3088|
;;;386        }
;;;387    
;;;388        sysprintf("Hub [%s] status: 0x%x, change: 0x%x\n", hub->pos_id, wHubStatus, wHubChange);
;;;389    
;;;390        if (wHubChange & HUB_C_LOCAL_POWER)     /* has local power change?                    */
;;;391        {
;;;392            ret = clear_hub_feature(hub, FS_C_HUB_LOCAL_POWER); /* clear local power change   */
;;;393            if (ret < 0)
;;;394                return ret;                     /* class command failed                       */
;;;395        }
;;;396    
;;;397        if (wHubChange & HUB_C_OVERCURRENT)     /* has over-current change?                   */
;;;398        {
;;;399            ret = clear_hub_feature(hub, FS_C_HUB_OVER_CURRENT); /* clear change              */
;;;400            if (ret < 0)
;;;401                return ret;                     /* class command failed                       */
;;;402        }
;;;403    
;;;404        return 0;
;;;405    }
000c10  e8bd807c          POP      {r2-r6,pc}
                  |L1.3092|
000c14  e1dd30b0          LDRH     r3,[sp,#0]            ;388
000c18  e1dd20b4          LDRH     r2,[sp,#4]            ;388
000c1c  e284100c          ADD      r1,r4,#0xc            ;388
000c20  e28f0e22          ADR      r0,|L1.3656|
000c24  ebfffffe          BL       sysprintf
000c28  e1dd00b0          LDRH     r0,[sp,#0]            ;390
000c2c  e3100001          TST      r0,#1                 ;390
000c30  0a000007          BEQ      |L1.3156|
000c34  e3a01000          MOV      r1,#0                 ;392
000c38  e1a00004          MOV      r0,r4                 ;392
000c3c  ebfffffe          BL       clear_hub_feature
000c40  e1a05000          MOV      r5,r0                 ;392
000c44  e3550000          CMP      r5,#0                 ;393
000c48  aa000001          BGE      |L1.3156|
000c4c  e1a00005          MOV      r0,r5                 ;394
000c50  eaffffee          B        |L1.3088|
                  |L1.3156|
000c54  e1dd00b0          LDRH     r0,[sp,#0]            ;397
000c58  e3100002          TST      r0,#2                 ;397
000c5c  0a000007          BEQ      |L1.3200|
000c60  e3a01001          MOV      r1,#1                 ;399
000c64  e1a00004          MOV      r0,r4                 ;399
000c68  ebfffffe          BL       clear_hub_feature
000c6c  e1a05000          MOV      r5,r0                 ;399
000c70  e3550000          CMP      r5,#0                 ;400
000c74  aa000001          BGE      |L1.3200|
000c78  e1a00005          MOV      r0,r5                 ;401
000c7c  eaffffe3          B        |L1.3088|
                  |L1.3200|
000c80  e3a00000          MOV      r0,#0                 ;404
000c84  eaffffe1          B        |L1.3088|
;;;406    
                          ENDP

                  port_connect_change PROC
;;;450    
;;;451    static int  port_connect_change(HUB_DEV_T *hub, int port, uint16_t wPortStatus)
000c88  e92d40f7          PUSH     {r0-r2,r4-r7,lr}
;;;452    {
000c8c  e24dd008          SUB      sp,sp,#8
000c90  e1a05000          MOV      r5,r0
000c94  e1a07001          MOV      r7,r1
;;;453        UDEV_T     *udev;
;;;454        uint16_t   wPortChange;
;;;455        int        ret;
;;;456    
;;;457        if (wPortStatus & PORT_S_CONNECTION)
000c98  e1dd01b0          LDRH     r0,[sp,#0x10]
000c9c  e3100001          TST      r0,#1
000ca0  0a00004b          BEQ      |L1.3540|
;;;458        {
;;;459            /*--------------------------------------------------------------------------------*/
;;;460            /*  First of all, check if there's any previously connected device.               */
;;;461            /*--------------------------------------------------------------------------------*/
;;;462            udev = usbh_find_device(hub->pos_id, port);
000ca4  e1a01007          MOV      r1,r7
000ca8  e285000c          ADD      r0,r5,#0xc
000cac  ebfffffe          BL       usbh_find_device
000cb0  e1a04000          MOV      r4,r0
;;;463            if (udev != NULL)
000cb4  e3540000          CMP      r4,#0
000cb8  0a000001          BEQ      |L1.3268|
;;;464            {
;;;465                disconnect_device(udev);
000cbc  e1a00004          MOV      r0,r4
000cc0  ebfffffe          BL       disconnect_device
                  |L1.3268|
;;;466            }
;;;467    
;;;468            /*
;;;469             * New device connected. Do a port reset first.
;;;470             */
;;;471            ret = do_port_reset(hub, port);
000cc4  e1a01007          MOV      r1,r7
000cc8  e1a00005          MOV      r0,r5
000ccc  ebfffffe          BL       do_port_reset
000cd0  e1a06000          MOV      r6,r0
;;;472            if (ret < 0)
000cd4  e3560000          CMP      r6,#0
000cd8  aa000002          BGE      |L1.3304|
;;;473                return ret;
000cdc  e1a00006          MOV      r0,r6
                  |L1.3296|
000ce0  e28dd014          ADD      sp,sp,#0x14
;;;474    
;;;475            ret = get_port_status(hub, port, &wPortStatus, &wPortChange);
;;;476            if (ret < 0)
;;;477            {
;;;478                USB_error("Failed to get Hub [%s] port %d status! (%d)\n", hub->pos_id, port, ret);
;;;479                return ret;
;;;480            }
;;;481            sysprintf("Hub [%s] port %d, status: 0x%x, change: 0x%x\n", hub->pos_id, port, wPortStatus, wPortChange);
;;;482    
;;;483            /*
;;;484             *  Port reset success. Create and enumerate this device.
;;;485             */
;;;486            udev = alloc_device();
;;;487            if (udev == NULL)
;;;488                return USBH_ERR_MEMORY_OUT;     /* unlikely, out of memory                    */
;;;489    
;;;490            udev->parent = hub;
;;;491            udev->port_num = port;
;;;492    
;;;493            if (wPortStatus & PORT_S_HIGH_SPEED)
;;;494                udev->speed = SPEED_HIGH;
;;;495            else if (wPortStatus & PORT_S_LOW_SPEED)
;;;496                udev->speed = SPEED_LOW;
;;;497            else
;;;498                udev->speed = SPEED_FULL;
;;;499    
;;;500            udev->hc_driver = hub->iface->udev->hc_driver;
;;;501    
;;;502            ret = connect_device(udev);
;;;503            if (ret < 0)
;;;504            {
;;;505                USB_error("connect_device error! [%d]\n", ret);
;;;506                free_device(udev);
;;;507            }
;;;508        }
;;;509        else
;;;510        {
;;;511            /*
;;;512             *  Device disconnected
;;;513             */
;;;514            udev = usbh_find_device(hub->pos_id, port);
;;;515            if (udev != NULL)
;;;516            {
;;;517                disconnect_device(udev);
;;;518            }
;;;519        }
;;;520        return 0;
;;;521    }
000ce4  e8bd80f0          POP      {r4-r7,pc}
                  |L1.3304|
000ce8  e28d3004          ADD      r3,sp,#4              ;475
000cec  e28d2010          ADD      r2,sp,#0x10           ;475
000cf0  e1a01007          MOV      r1,r7                 ;475
000cf4  e1a00005          MOV      r0,r5                 ;475
000cf8  ebfffffe          BL       get_port_status
000cfc  e1a06000          MOV      r6,r0                 ;475
000d00  e3560000          CMP      r6,#0                 ;476
000d04  aa000006          BGE      |L1.3364|
000d08  e1a03006          MOV      r3,r6                 ;478
000d0c  e1a02007          MOV      r2,r7                 ;478
000d10  e285100c          ADD      r1,r5,#0xc            ;478
000d14  e59f0154          LDR      r0,|L1.3696|
000d18  ebfffffe          BL       sysprintf
000d1c  e1a00006          MOV      r0,r6                 ;479
000d20  eaffffee          B        |L1.3296|
                  |L1.3364|
000d24  e1dd00b4          LDRH     r0,[sp,#4]            ;481
000d28  e58d0000          STR      r0,[sp,#0]            ;481
000d2c  e1dd31b0          LDRH     r3,[sp,#0x10]         ;481
000d30  e1a02007          MOV      r2,r7                 ;481
000d34  e285100c          ADD      r1,r5,#0xc            ;481
000d38  e28f0f4d          ADR      r0,|L1.3700|
000d3c  ebfffffe          BL       sysprintf
000d40  ebfffffe          BL       alloc_device
000d44  e1a04000          MOV      r4,r0                 ;486
000d48  e3540000          CMP      r4,#0                 ;487
000d4c  1a000001          BNE      |L1.3416|
000d50  e3e00009          MVN      r0,#9                 ;488
000d54  eaffffe1          B        |L1.3296|
                  |L1.3416|
000d58  e5845014          STR      r5,[r4,#0x14]         ;490
000d5c  e5c47018          STRB     r7,[r4,#0x18]         ;491
000d60  e1dd01b0          LDRH     r0,[sp,#0x10]         ;493
000d64  e3100b01          TST      r0,#0x400             ;493
000d68  0a000002          BEQ      |L1.3448|
000d6c  e3a00002          MOV      r0,#2                 ;494
000d70  e5c4001b          STRB     r0,[r4,#0x1b]         ;494
000d74  ea000007          B        |L1.3480|
                  |L1.3448|
000d78  e1dd01b0          LDRH     r0,[sp,#0x10]         ;495
000d7c  e3100c02          TST      r0,#0x200             ;495
000d80  0a000002          BEQ      |L1.3472|
000d84  e3a00000          MOV      r0,#0                 ;496
000d88  e5c4001b          STRB     r0,[r4,#0x1b]         ;496
000d8c  ea000001          B        |L1.3480|
                  |L1.3472|
000d90  e3a00001          MOV      r0,#1                 ;498
000d94  e5c4001b          STRB     r0,[r4,#0x1b]         ;498
                  |L1.3480|
000d98  e5950000          LDR      r0,[r5,#0]            ;500
000d9c  e5900000          LDR      r0,[r0,#0]            ;500
000da0  e590002c          LDR      r0,[r0,#0x2c]         ;500
000da4  e584002c          STR      r0,[r4,#0x2c]         ;500
000da8  e1a00004          MOV      r0,r4                 ;502
000dac  ebfffffe          BL       connect_device
000db0  e1a06000          MOV      r6,r0                 ;502
000db4  e3560000          CMP      r6,#0                 ;503
000db8  aa00000d          BGE      |L1.3572|
000dbc  e1a01006          MOV      r1,r6                 ;505
000dc0  e28f00dc          ADR      r0,|L1.3748|
000dc4  ebfffffe          BL       sysprintf
000dc8  e1a00004          MOV      r0,r4                 ;506
000dcc  ebfffffe          BL       free_device
000dd0  ea000007          B        |L1.3572|
                  |L1.3540|
000dd4  e1a01007          MOV      r1,r7                 ;514
000dd8  e285000c          ADD      r0,r5,#0xc            ;514
000ddc  ebfffffe          BL       usbh_find_device
000de0  e1a04000          MOV      r4,r0                 ;514
000de4  e3540000          CMP      r4,#0                 ;515
000de8  0a000001          BEQ      |L1.3572|
000dec  e1a00004          MOV      r0,r4                 ;517
000df0  ebfffffe          BL       disconnect_device
                  |L1.3572|
000df4  e3a00000          MOV      r0,#0                 ;520
000df8  eaffffb8          B        |L1.3296|
                  |L1.3580|
000dfc  48756220          DCB      "Hub [%s] hub status change 0x%x.\n",0
000e00  5b25735d
000e04  20687562
000e08  20737461
000e0c  74757320
000e10  6368616e
000e14  67652030
000e18  7825782e
000e1c  0a00    
000e1e  00                DCB      0
000e1f  00                DCB      0
                  |L1.3616|
000e20  4661696c          DCB      "Failed to get Hub [%s] status! (%d)\n",0
000e24  65642074
000e28  6f206765
000e2c  74204875
000e30  62205b25
000e34  735d2073
000e38  74617475
000e3c  73212028
000e40  2564290a
000e44  00      
000e45  00                DCB      0
000e46  00                DCB      0
000e47  00                DCB      0
                  |L1.3656|
000e48  48756220          DCB      "Hub [%s] status: 0x%x, change: 0x%x\n",0
000e4c  5b25735d
000e50  20737461
000e54  7475733a
000e58  20307825
000e5c  782c2063
000e60  68616e67
000e64  653a2030
000e68  7825780a
000e6c  00      
000e6d  00                DCB      0
000e6e  00                DCB      0
000e6f  00                DCB      0
                  |L1.3696|
                          DCD      ||.text||+0x324
                  |L1.3700|
000e74  48756220          DCB      "Hub [%s] port %d, status: 0x%x, change: 0x%x\n",0
000e78  5b25735d
000e7c  20706f72
000e80  74202564
000e84  2c207374
000e88  61747573
000e8c  3a203078
000e90  25782c20
000e94  6368616e
000e98  67653a20
000e9c  30782578
000ea0  0a00    
000ea2  00                DCB      0
000ea3  00                DCB      0
                  |L1.3748|
000ea4  636f6e6e          DCB      "connect_device error! [%d]\n",0
000ea8  6563745f
000eac  64657669
000eb0  63652065
000eb4  72726f72
000eb8  21205b25
000ebc  645d0a00
                          ENDP

                  port_status_change PROC
;;;522    
;;;523    static int  port_status_change(HUB_DEV_T *hub, int port)
000ec0  e92d40fe          PUSH     {r1-r7,lr}
;;;524    {
000ec4  e1a05000          MOV      r5,r0
000ec8  e1a06001          MOV      r6,r1
;;;525        uint16_t    wPortStatus, wPortChange;
;;;526        int         ret;
;;;527    
;;;528        ret = get_port_status(hub, port, &wPortStatus, &wPortChange);
000ecc  e28d3004          ADD      r3,sp,#4
000ed0  e28d2008          ADD      r2,sp,#8
000ed4  e1a01006          MOV      r1,r6
000ed8  e1a00005          MOV      r0,r5
000edc  ebfffffe          BL       get_port_status
000ee0  e1a04000          MOV      r4,r0
;;;529        if (ret < 0)
000ee4  e3540000          CMP      r4,#0
000ee8  aa000006          BGE      |L1.3848|
;;;530        {
;;;531            USB_error("Failed to get Hub [%s] port %d status! (%d)\n", hub->pos_id, port, ret);
000eec  e1a03004          MOV      r3,r4
000ef0  e1a02006          MOV      r2,r6
000ef4  e285100c          ADD      r1,r5,#0xc
000ef8  e51f0090          LDR      r0,|L1.3696|
000efc  ebfffffe          BL       sysprintf
;;;532            return ret;
000f00  e1a00004          MOV      r0,r4
                  |L1.3844|
;;;533        }
;;;534        sysprintf("Hub [%s] port %d, status: 0x%x, change: 0x%x\n", hub->pos_id, port, wPortStatus, wPortChange);
;;;535    
;;;536        if (wPortChange & PORT_C_CONNECTION)    /* have port connection change?               */
;;;537        {
;;;538            ret = clear_port_feature(hub, FS_C_PORT_CONNECTION, port); /* clear port change   */
;;;539            if (ret < 0)
;;;540                return ret;                     /* class command failed                       */
;;;541    
;;;542            port_connect_change(hub, port, wPortStatus);
;;;543        }
;;;544    
;;;545        if (wPortChange & PORT_C_ENABLE)        /* have port enable change?                   */
;;;546        {
;;;547            ret = clear_port_feature(hub, FS_C_PORT_ENABLE, port);     /* clear port change   */
;;;548            if (ret < 0)
;;;549                return ret;                     /* class command failed                       */
;;;550        }
;;;551    
;;;552        if (wPortChange & PORT_C_SUSPEND)       /* have port suspend change?                  */
;;;553        {
;;;554            ret = clear_port_feature(hub, FS_C_PORT_SUSPEND, port);    /* clear port change   */
;;;555            if (ret < 0)
;;;556                return ret;                     /* class command failed                       */
;;;557        }
;;;558    
;;;559        if (wPortChange & PORT_C_OVERCURRENT)   /* have port over-current change?             */
;;;560        {
;;;561            ret = clear_port_feature(hub, FS_C_PORT_OVER_CURRENT, port); /* clear port change */
;;;562            if (ret < 0)
;;;563                return ret;                     /* class command failed                       */
;;;564        }
;;;565    
;;;566        if (wPortChange & FS_C_PORT_RESET)     /* have port reset change?                     */
;;;567        {
;;;568            ret = clear_port_feature(hub, FS_C_PORT_RESET, port);        /* clear port change */
;;;569            if (ret < 0)
;;;570                return ret;                     /* class command failed                       */
;;;571        }
;;;572        return 0;
;;;573    }
000f04  e8bd80fe          POP      {r1-r7,pc}
                  |L1.3848|
000f08  e1dd00b4          LDRH     r0,[sp,#4]            ;534
000f0c  e58d0000          STR      r0,[sp,#0]            ;534
000f10  e1dd30b8          LDRH     r3,[sp,#8]            ;534
000f14  e1a02006          MOV      r2,r6                 ;534
000f18  e285100c          ADD      r1,r5,#0xc            ;534
000f1c  e24f00b0          ADR      r0,|L1.3700|
000f20  ebfffffe          BL       sysprintf
000f24  e1dd00b4          LDRH     r0,[sp,#4]            ;536
000f28  e3100001          TST      r0,#1                 ;536
000f2c  0a00000c          BEQ      |L1.3940|
000f30  e1a02006          MOV      r2,r6                 ;538
000f34  e3a01010          MOV      r1,#0x10              ;538
000f38  e1a00005          MOV      r0,r5                 ;538
000f3c  ebfffffe          BL       clear_port_feature
000f40  e1a04000          MOV      r4,r0                 ;538
000f44  e3540000          CMP      r4,#0                 ;539
000f48  aa000001          BGE      |L1.3924|
000f4c  e1a00004          MOV      r0,r4                 ;540
000f50  eaffffeb          B        |L1.3844|
                  |L1.3924|
000f54  e1dd20b8          LDRH     r2,[sp,#8]            ;542
000f58  e1a01006          MOV      r1,r6                 ;542
000f5c  e1a00005          MOV      r0,r5                 ;542
000f60  ebfffffe          BL       port_connect_change
                  |L1.3940|
000f64  e1dd00b4          LDRH     r0,[sp,#4]            ;545
000f68  e3100002          TST      r0,#2                 ;545
000f6c  0a000008          BEQ      |L1.3988|
000f70  e1a02006          MOV      r2,r6                 ;547
000f74  e3a01011          MOV      r1,#0x11              ;547
000f78  e1a00005          MOV      r0,r5                 ;547
000f7c  ebfffffe          BL       clear_port_feature
000f80  e1a04000          MOV      r4,r0                 ;547
000f84  e3540000          CMP      r4,#0                 ;548
000f88  aa000001          BGE      |L1.3988|
000f8c  e1a00004          MOV      r0,r4                 ;549
000f90  eaffffdb          B        |L1.3844|
                  |L1.3988|
000f94  e1dd00b4          LDRH     r0,[sp,#4]            ;552
000f98  e3100004          TST      r0,#4                 ;552
000f9c  0a000008          BEQ      |L1.4036|
000fa0  e1a02006          MOV      r2,r6                 ;554
000fa4  e3a01012          MOV      r1,#0x12              ;554
000fa8  e1a00005          MOV      r0,r5                 ;554
000fac  ebfffffe          BL       clear_port_feature
000fb0  e1a04000          MOV      r4,r0                 ;554
000fb4  e3540000          CMP      r4,#0                 ;555
000fb8  aa000001          BGE      |L1.4036|
000fbc  e1a00004          MOV      r0,r4                 ;556
000fc0  eaffffcf          B        |L1.3844|
                  |L1.4036|
000fc4  e1dd00b4          LDRH     r0,[sp,#4]            ;559
000fc8  e3100008          TST      r0,#8                 ;559
000fcc  0a000008          BEQ      |L1.4084|
000fd0  e1a02006          MOV      r2,r6                 ;561
000fd4  e3a01013          MOV      r1,#0x13              ;561
000fd8  e1a00005          MOV      r0,r5                 ;561
000fdc  ebfffffe          BL       clear_port_feature
000fe0  e1a04000          MOV      r4,r0                 ;561
000fe4  e3540000          CMP      r4,#0                 ;562
000fe8  aa000001          BGE      |L1.4084|
000fec  e1a00004          MOV      r0,r4                 ;563
000ff0  eaffffc3          B        |L1.3844|
                  |L1.4084|
000ff4  e1dd00b4          LDRH     r0,[sp,#4]            ;566
000ff8  e3100014          TST      r0,#0x14              ;566
000ffc  0a000008          BEQ      |L1.4132|
001000  e1a02006          MOV      r2,r6                 ;568
001004  e3a01014          MOV      r1,#0x14              ;568
001008  e1a00005          MOV      r0,r5                 ;568
00100c  ebfffffe          BL       clear_port_feature
001010  e1a04000          MOV      r4,r0                 ;568
001014  e3540000          CMP      r4,#0                 ;569
001018  aa000001          BGE      |L1.4132|
00101c  e1a00004          MOV      r0,r4                 ;570
001020  eaffffb7          B        |L1.3844|
                  |L1.4132|
001024  e3a00000          MOV      r0,#0                 ;572
001028  eaffffb5          B        |L1.3844|
;;;574    
                          ENDP

                  hub_polling PROC
;;;576    
;;;577    static int  hub_polling(void)
00102c  e92d47f0          PUSH     {r4-r10,lr}
;;;578    {
;;;579        HUB_DEV_T   *hub;
;;;580        UTR_T       *utr;
;;;581        int         i, ret, port, change = 0;
001030  e3a09000          MOV      r9,#0
;;;582    
;;;583        if (_hub_polling_mutex)                 /* do nothing                                 */
001034  e59f01b8          LDR      r0,|L1.4596|
001038  e5d00000          LDRB     r0,[r0,#0]  ; _hub_polling_mutex
00103c  e3500000          CMP      r0,#0
001040  0a000001          BEQ      |L1.4172|
;;;584            return 0;
001044  e3a00000          MOV      r0,#0
                  |L1.4168|
;;;585    
;;;586        _hub_polling_mutex = 1;
;;;587    
;;;588        for (i = 0; i < MAX_HUB_DEVICE; i++)
;;;589        {
;;;590            if ((g_hub_dev[i].iface != NULL) && (g_hub_dev[i].sc_bitmap))
;;;591            {
;;;592                /*
;;;593                 *  This hub device has status change
;;;594                 */
;;;595                hub = &g_hub_dev[i];
;;;596                change = 1;
;;;597    
;;;598                HUB_DBGMSG("HUB [%s] hub status change 0x%x.\n", hub->pos_id, hub->sc_bitmap);
;;;599    
;;;600                if (hub->sc_bitmap & 0x1)
;;;601                    hub_status_change(hub);
;;;602    
;;;603                for (port = 1; port <= hub->bNbrPorts; port++)
;;;604                {
;;;605                    if (hub->sc_bitmap & (1 << port))
;;;606                    {
;;;607                        ret = port_status_change(hub, port);
;;;608                        if (ret < 0)
;;;609                            break;
;;;610                    }
;;;611                }
;;;612                hub->sc_bitmap = 0;
;;;613                /* re-submit interrupt-in transfer */
;;;614                if (ret == 0)
;;;615                {
;;;616                    utr = hub->utr;
;;;617                    utr->xfer_len = 0;
;;;618                    ret = usbh_int_xfer(utr);
;;;619                    if (ret)
;;;620                    {
;;;621                        USB_error("Failed to re-submit HUB [%s] interrupt-in request (%d)", hub->pos_id, ret);
;;;622                    }
;;;623                }
;;;624            }
;;;625        }
;;;626        _hub_polling_mutex = 0;
;;;627        return change;
;;;628    }
001048  e8bd87f0          POP      {r4-r10,pc}
                  |L1.4172|
00104c  e3a00001          MOV      r0,#1                 ;586
001050  e59f119c          LDR      r1,|L1.4596|
001054  e5c10000          STRB     r0,[r1,#0]            ;586  ; _hub_polling_mutex
001058  e3a05000          MOV      r5,#0                 ;588
00105c  ea000036          B        |L1.4412|
                  |L1.4192|
001060  e51f0d14          LDR      r0,|L1.852|
001064  e7900285          LDR      r0,[r0,r5,LSL #5]     ;590
001068  e3500000          CMP      r0,#0                 ;590
00106c  0a000031          BEQ      |L1.4408|
001070  e51f0d24          LDR      r0,|L1.852|
001074  e0800285          ADD      r0,r0,r5,LSL #5       ;590
001078  e1d000b8          LDRH     r0,[r0,#8]            ;590
00107c  e3500000          CMP      r0,#0                 ;590
001080  0a00002c          BEQ      |L1.4408|
001084  e51f0d38          LDR      r0,|L1.852|
001088  e0804285          ADD      r4,r0,r5,LSL #5       ;595
00108c  e3a09001          MOV      r9,#1                 ;596
001090  e1d420b8          LDRH     r2,[r4,#8]            ;598
001094  e284100c          ADD      r1,r4,#0xc            ;598
001098  e28f0f56          ADR      r0,|L1.4600|
00109c  ebfffffe          BL       sysprintf
0010a0  e5d40008          LDRB     r0,[r4,#8]            ;600
0010a4  e3100001          TST      r0,#1                 ;600
0010a8  0a000001          BEQ      |L1.4276|
0010ac  e1a00004          MOV      r0,r4                 ;601
0010b0  ebfffffe          BL       hub_status_change
                  |L1.4276|
0010b4  e3a07001          MOV      r7,#1                 ;603
0010b8  ea00000b          B        |L1.4332|
                  |L1.4284|
0010bc  e1d400b8          LDRH     r0,[r4,#8]            ;605
0010c0  e3a01001          MOV      r1,#1                 ;605
0010c4  e1100711          TST      r0,r1,LSL r7          ;605
0010c8  0a000006          BEQ      |L1.4328|
0010cc  e1a01007          MOV      r1,r7                 ;607
0010d0  e1a00004          MOV      r0,r4                 ;607
0010d4  ebfffffe          BL       port_status_change
0010d8  e1a06000          MOV      r6,r0                 ;607
0010dc  e3560000          CMP      r6,#0                 ;608
0010e0  aa000000          BGE      |L1.4328|
0010e4  ea000003          B        |L1.4344|
                  |L1.4328|
0010e8  e2877001          ADD      r7,r7,#1              ;603
                  |L1.4332|
0010ec  e5d4000a          LDRB     r0,[r4,#0xa]          ;603
0010f0  e1500007          CMP      r0,r7                 ;603
0010f4  aafffff0          BGE      |L1.4284|
                  |L1.4344|
0010f8  e1a00000          MOV      r0,r0                 ;609
0010fc  e3a00000          MOV      r0,#0                 ;612
001100  e1c400b8          STRH     r0,[r4,#8]            ;612
001104  e3560000          CMP      r6,#0                 ;614
001108  1a00000a          BNE      |L1.4408|
00110c  e5948004          LDR      r8,[r4,#4]            ;616
001110  e588001c          STR      r0,[r8,#0x1c]         ;617
001114  e1a00008          MOV      r0,r8                 ;618
001118  ebfffffe          BL       usbh_int_xfer
00111c  e1a06000          MOV      r6,r0                 ;618
001120  e3560000          CMP      r6,#0                 ;619
001124  0a000003          BEQ      |L1.4408|
001128  e1a02006          MOV      r2,r6                 ;621
00112c  e284100c          ADD      r1,r4,#0xc            ;621
001130  e28f00e4          ADR      r0,|L1.4636|
001134  ebfffffe          BL       sysprintf
                  |L1.4408|
001138  e2855001          ADD      r5,r5,#1              ;588
                  |L1.4412|
00113c  e3550008          CMP      r5,#8                 ;588
001140  baffffc6          BLT      |L1.4192|
001144  e3a00000          MOV      r0,#0                 ;626
001148  e59f10a4          LDR      r1,|L1.4596|
00114c  e5c10000          STRB     r0,[r1,#0]            ;626  ; _hub_polling_mutex
001150  e1a00009          MOV      r0,r9                 ;627
001154  eaffffbb          B        |L1.4168|
;;;629    
                          ENDP

                  usbh_hub_init PROC
;;;634      */
;;;635    void usbh_hub_init(void)
001158  e92d4010          PUSH     {r4,lr}
;;;636    {
;;;637        memset((char *)&g_hub_dev[0], 0, sizeof(g_hub_dev));
00115c  e3a01c01          MOV      r1,#0x100
001160  e51f0e14          LDR      r0,|L1.852|
001164  ebfffffe          BL       __aeabi_memclr4
;;;638        usbh_register_driver(&hub_driver);
001168  e59f00e4          LDR      r0,|L1.4692|
00116c  ebfffffe          BL       usbh_register_driver
;;;639    }
001170  e8bd8010          POP      {r4,pc}
;;;640    
                          ENDP

                  usbh_pooling_hubs PROC
;;;653      */
;;;654    int  usbh_pooling_hubs(void)
001174  e92d4070          PUSH     {r4-r6,lr}
;;;655    {
;;;656        int   ret, change = 0;
001178  e3a05000          MOV      r5,#0
;;;657    
;;;658    #ifdef ENABLE_EHCI
;;;659        do
00117c  e1a00000          MOV      r0,r0
                  |L1.4480|
;;;660        {
;;;661            ret = ehci_driver.rthub_polling();
001180  e59f10d0          LDR      r1,|L1.4696|
001184  e5910028          LDR      r0,[r1,#0x28]  ; ehci_driver
001188  e12fff30          BLX      r0
00118c  e1a04000          MOV      r4,r0
;;;662            if (ret)
001190  e3540000          CMP      r4,#0
001194  0a000000          BEQ      |L1.4508|
;;;663                change = 1;
001198  e3a05001          MOV      r5,#1
                  |L1.4508|
;;;664        }
;;;665        while (ret == 1);
00119c  e3540001          CMP      r4,#1
0011a0  0afffff6          BEQ      |L1.4480|
;;;666    
;;;667        // scan_isochronous_list();
;;;668    
;;;669    #endif
;;;670    
;;;671    #ifdef ENABLE_OHCI
;;;672        do
0011a4  e1a00000          MOV      r0,r0
                  |L1.4520|
;;;673        {
;;;674            ret = ohci_driver.rthub_polling();
0011a8  e59f10ac          LDR      r1,|L1.4700|
0011ac  e5910028          LDR      r0,[r1,#0x28]  ; ohci_driver
0011b0  e12fff30          BLX      r0
0011b4  e1a04000          MOV      r4,r0
;;;675            if (ret)
0011b8  e3540000          CMP      r4,#0
0011bc  0a000000          BEQ      |L1.4548|
;;;676                change = 1;
0011c0  e3a05001          MOV      r5,#1
                  |L1.4548|
;;;677        }
;;;678        while (ret == 1);
0011c4  e3540001          CMP      r4,#1
0011c8  0afffff6          BEQ      |L1.4520|
;;;679    #endif
;;;680    
;;;681    
;;;682        do
0011cc  e1a00000          MOV      r0,r0
                  |L1.4560|
;;;683        {
;;;684            ret = hub_polling();
0011d0  ebfffffe          BL       hub_polling
0011d4  e1a04000          MOV      r4,r0
;;;685            if (ret)
0011d8  e3540000          CMP      r4,#0
0011dc  0a000000          BEQ      |L1.4580|
;;;686                change = 1;
0011e0  e3a05001          MOV      r5,#1
                  |L1.4580|
;;;687        }
;;;688        while (ret == 1);
0011e4  e3540001          CMP      r4,#1
0011e8  0afffff8          BEQ      |L1.4560|
;;;689    
;;;690        return change;
0011ec  e1a00005          MOV      r0,r5
;;;691    }
0011f0  e8bd8070          POP      {r4-r6,pc}
;;;692    
                          ENDP

                  |L1.4596|
                          DCD      _hub_polling_mutex
                  |L1.4600|
0011f8  48554220          DCB      "HUB [%s] hub status change 0x%x.\n",0
0011fc  5b25735d
001200  20687562
001204  20737461
001208  74757320
00120c  6368616e
001210  67652030
001214  7825782e
001218  0a00    
00121a  00                DCB      0
00121b  00                DCB      0
                  |L1.4636|
00121c  4661696c          DCB      "Failed to re-submit HUB [%s] interrupt-in request (%d)",0
001220  65642074
001224  6f207265
001228  2d737562
00122c  6d697420
001230  48554220
001234  5b25735d
001238  20696e74
00123c  65727275
001240  70742d69
001244  6e207265
001248  71756573
00124c  74202825
001250  642900  
001253  00                DCB      0
                  |L1.4692|
                          DCD      hub_driver
                  |L1.4696|
                          DCD      ehci_driver
                  |L1.4700|
                          DCD      ohci_driver

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_hub_dev
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  hub_driver
                          DCD      hub_probe
                          DCD      hub_disconnect
                          DCD      0x00000000
                          DCD      0x00000000
                  _hub_polling_mutex
000010  00                DCB      0x00
