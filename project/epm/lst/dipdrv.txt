; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\dipdrv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dipdrv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\dipdrv.crf src\UserDrv\dipdrv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vDipDrvTask PROC
;;;56     
;;;57     static void vDipDrvTask( void *pvParameters )
000000  e28f0f55          ADR      r0,|L1.348|
;;;58     {
;;;59         sysprintf("!!! vDipDrvTask Waiting... !!!\r\n"); 
000004  ebfffffe          BL       sysprintf
;;;60         while(SysGetBooted() == FALSE)
000008  ea000001          B        |L1.20|
                  |L1.12|
;;;61         {
;;;62             vTaskDelay(500/portTICK_RATE_MS);
00000c  e3a00032          MOV      r0,#0x32
000010  ebfffffe          BL       vTaskDelay
                  |L1.20|
000014  ebfffffe          BL       SysGetBooted
000018  e3500000          CMP      r0,#0                 ;60
00001c  0afffffa          BEQ      |L1.12|
;;;63         }
;;;64         vTaskDelay(1000/portTICK_RATE_MS);
000020  e3a00064          MOV      r0,#0x64
000024  ebfffffe          BL       vTaskDelay
;;;65         sysprintf("!!! vDipDrvTask Going... !!!\r\n"); 
000028  e28f0e15          ADR      r0,|L1.384|
00002c  ebfffffe          BL       sysprintf
;;;66         xSemaphoreGive( xActionSemaphore);
000030  e3a03000          MOV      r3,#0
000034  e1a02003          MOV      r2,r3
000038  e1a01003          MOV      r1,r3
00003c  e59f015c          LDR      r0,|L1.416|
000040  e5900000          LDR      r0,[r0,#0]  ; xActionSemaphore
000044  ebfffffe          BL       xQueueGenericSend
;;;67         for(;;)
000048  e1a00000          MOV      r0,r0
                  |L1.76|
;;;68         {       
;;;69             //BOOL actionReval = TRUE;
;;;70             BaseType_t reval = xSemaphoreTake(xActionSemaphore, threadWaitTime);         
00004c  e3a03000          MOV      r3,#0
000050  e59f014c          LDR      r0,|L1.420|
000054  e1a01003          MOV      r1,r3
000058  e5902000          LDR      r2,[r0,#0]  ; threadWaitTime
00005c  e59f013c          LDR      r0,|L1.416|
000060  e5900000          LDR      r0,[r0,#0]  ; xActionSemaphore
000064  ebfffffe          BL       xQueueGenericReceive
000068  e1a05000          MOV      r5,r0
;;;71             vTaskDelay(50/portTICK_RATE_MS); 
00006c  e3a00005          MOV      r0,#5
000070  ebfffffe          BL       vTaskDelay
;;;72             if(!GPIO_ReadBit(DIP_1_PORT, DIP_1_PIN))
000074  e3a01008          MOV      r1,#8
000078  e3a00c02          MOV      r0,#0x200
00007c  ebfffffe          BL       GPIO_ReadBit
000080  e3500000          CMP      r0,#0
000084  1a000013          BNE      |L1.216|
;;;73             {            
;;;74                 if((xTaskGetTickCount() - batteryButtonTick) > (1000/portTICK_RATE_MS))
000088  ebfffffe          BL       xTaskGetTickCount
00008c  e59f1114          LDR      r1,|L1.424|
000090  e5911000          LDR      r1,[r1,#0]  ; batteryButtonTick
000094  e0400001          SUB      r0,r0,r1
000098  e3500064          CMP      r0,#0x64
00009c  9a00009b          BLS      |L1.784|
;;;75                 {
;;;76                     sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_BATTERY_REPLACE ...\r\n");
0000a0  e28f0f41          ADR      r0,|L1.428|
0000a4  ebfffffe          BL       sysprintf
;;;77                     pKeyHardwareCallbackFunc(DIP_REPLACE_BP_ID, KEY_HARDWARE_DOWN_EVENT);
0000a8  e3a01001          MOV      r1,#1
0000ac  e3a00011          MOV      r0,#0x11
0000b0  e59f212c          LDR      r2,|L1.484|
0000b4  e5922000          LDR      r2,[r2,#0]  ; pKeyHardwareCallbackFunc
0000b8  e12fff32          BLX      r2
;;;78                     prevScreenId = DIP_REPLACE_BP_ID;
0000bc  e3a00011          MOV      r0,#0x11
0000c0  e59f1120          LDR      r1,|L1.488|
0000c4  e5810000          STR      r0,[r1,#0]  ; prevScreenId
;;;79                     batteryButtonTick = xTaskGetTickCount();
0000c8  ebfffffe          BL       xTaskGetTickCount
0000cc  e59f10d4          LDR      r1,|L1.424|
0000d0  e5810000          STR      r0,[r1,#0]  ; batteryButtonTick
0000d4  ea00008d          B        |L1.784|
                  |L1.216|
;;;80                 }
;;;81                 //else
;;;82                 //{
;;;83                 //    sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_BATTERY_REPLACE ignore...\r\n");
;;;84                 //}
;;;85                
;;;86             }
;;;87             else
;;;88             {
;;;89                 UINT32 portValue = GPIO_ReadPort(GPIOH);
0000d8  e3a00d07          MOV      r0,#0x1c0
0000dc  ebfffffe          BL       GPIO_ReadPort
0000e0  e1a04000          MOV      r4,r0
;;;90                 sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_STANDBY(0x%02x, %d) ...\r\n", (portValue>>2)&0x3, (portValue>>2)&0x3); 
0000e4  e3a00003          MOV      r0,#3
0000e8  e0002124          AND      r2,r0,r4,LSR #2
0000ec  e0001124          AND      r1,r0,r4,LSR #2
0000f0  e28f00f4          ADR      r0,|L1.492|
0000f4  ebfffffe          BL       sysprintf
;;;91                 portValue = (portValue>>2)&0x3;
0000f8  e3a00003          MOV      r0,#3
0000fc  e0004124          AND      r4,r0,r4,LSR #2
;;;92                 switch(portValue)
000100  e3540000          CMP      r4,#0
000104  0a00006c          BEQ      |L1.700|
000108  e3540001          CMP      r4,#1
00010c  0a000057          BEQ      |L1.624|
000110  e3540002          CMP      r4,#2
000114  0a000053          BEQ      |L1.616|
000118  e3540003          CMP      r4,#3
00011c  1a000079          BNE      |L1.776|
;;;93                 {
;;;94                     case 3:
;;;95                         
;;;96                         if(prevScreenId != DIP_NORMAL_ID)
000120  e59f00c0          LDR      r0,|L1.488|
000124  e5900000          LDR      r0,[r0,#0]  ; prevScreenId
000128  e3500010          CMP      r0,#0x10
00012c  0a00004a          BEQ      |L1.604|
;;;97                         {
;;;98                             sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_STANDBY(11) ...\r\n"); 
000130  e28f00f0          ADR      r0,|L1.552|
000134  ebfffffe          BL       sysprintf
;;;99                             pKeyHardwareCallbackFunc(DIP_NORMAL_ID, KEY_HARDWARE_DOWN_EVENT);
000138  e3a01001          MOV      r1,#1
00013c  e3a00010          MOV      r0,#0x10
000140  e59f209c          LDR      r2,|L1.484|
000144  e5922000          LDR      r2,[r2,#0]  ; pKeyHardwareCallbackFunc
000148  e12fff32          BLX      r2
;;;100                            prevScreenId = DIP_NORMAL_ID;
00014c  e3a00010          MOV      r0,#0x10
000150  e59f1090          LDR      r1,|L1.488|
000154  e5810000          STR      r0,[r1,#0]  ; prevScreenId
000158  ea000041          B        |L1.612|
                  |L1.348|
00015c  21212120          DCB      "!!! vDipDrvTask Waiting... !!!\r\n",0
000160  76446970
000164  44727654
000168  61736b20
00016c  57616974
000170  696e672e
000174  2e2e2021
000178  21210d0a
00017c  00      
00017d  00                DCB      0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L1.384|
000180  21212120          DCB      "!!! vDipDrvTask Going... !!!\r\n",0
000184  76446970
000188  44727654
00018c  61736b20
000190  476f696e
000194  672e2e2e
000198  20212121
00019c  0d0a00  
00019f  00                DCB      0
                  |L1.416|
                          DCD      xActionSemaphore
                  |L1.420|
                          DCD      threadWaitTime
                  |L1.424|
                          DCD      batteryButtonTick
                  |L1.428|
0001ac  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_BATTERY_REPLACE ...\r\n"
0001b0  44727654
0001b4  61736b20
0001b8  4d41494e
0001bc  5f534552
0001c0  56494345
0001c4  5f535441
0001c8  5455535f
0001cc  42415454
0001d0  4552595f
0001d4  5245504c
0001d8  41434520
0001dc  2e2e2e0d
0001e0  0a      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L1.484|
                          DCD      pKeyHardwareCallbackFunc
                  |L1.488|
                          DCD      prevScreenId
                  |L1.492|
0001ec  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_STANDBY(0x%02x, %d) ..."
0001f0  44727654
0001f4  61736b20
0001f8  4d41494e
0001fc  5f534552
000200  56494345
000204  5f535441
000208  5455535f
00020c  5354414e
000210  44425928
000214  30782530
000218  32782c20
00021c  25642920
000220  2e2e2e  
000223  0d0a00            DCB      "\r\n",0
000226  00                DCB      0
000227  00                DCB      0
                  |L1.552|
000228  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_STANDBY(11) ...\r\n",0
00022c  44727654
000230  61736b20
000234  4d41494e
000238  5f534552
00023c  56494345
000240  5f535441
000244  5455535f
000248  5354414e
00024c  44425928
000250  31312920
000254  2e2e2e0d
000258  0a00    
00025a  00                DCB      0
00025b  00                DCB      0
                  |L1.604|
;;;101                        }
;;;102                        else
;;;103                        {
;;;104                            sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_STANDBY(11) ignore...\r\n"); 
00025c  e28f00b0          ADR      r0,|L1.788|
000260  ebfffffe          BL       sysprintf
                  |L1.612|
;;;105                        }
;;;106                        break;
000264  ea000027          B        |L1.776|
                  |L1.616|
;;;107                    case 2:
000268  e1a00000          MOV      r0,r0
;;;108                        //sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_SETTING_SPACE(10) ...\r\n");  
;;;109                        //actionReval = pKeyHardwareCallbackFunc(DIP_SETTING_SPACE_ID, KEY_HARDWARE_DOWN_EVENT);
;;;110                        break;
00026c  ea000025          B        |L1.776|
                  |L1.624|
;;;111                    case 1:
000270  e1a00000          MOV      r0,r0
;;;112                        
;;;113                        if(prevScreenId != DIP_TESTER_KEYPAD_ID)
000274  e51f0094          LDR      r0,|L1.488|
000278  e5900000          LDR      r0,[r0,#0]  ; prevScreenId
00027c  e3500013          CMP      r0,#0x13
000280  0a00000a          BEQ      |L1.688|
;;;114                        {
;;;115                            sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_TESTER_KEYPAD(01) ...\r\n");  
000284  e28f00c0          ADR      r0,|L1.844|
000288  ebfffffe          BL       sysprintf
;;;116                            pKeyHardwareCallbackFunc(DIP_TESTER_KEYPAD_ID, KEY_HARDWARE_DOWN_EVENT);
00028c  e3a01001          MOV      r1,#1
000290  e3a00013          MOV      r0,#0x13
000294  e51f20b8          LDR      r2,|L1.484|
000298  e5922000          LDR      r2,[r2,#0]  ; pKeyHardwareCallbackFunc
00029c  e12fff32          BLX      r2
;;;117                            prevScreenId = DIP_TESTER_KEYPAD_ID;
0002a0  e3a00013          MOV      r0,#0x13
0002a4  e51f10c4          LDR      r1,|L1.488|
0002a8  e5810000          STR      r0,[r1,#0]  ; prevScreenId
0002ac  ea000001          B        |L1.696|
                  |L1.688|
;;;118                        }
;;;119                        else
;;;120                        {
;;;121                            sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_TESTER_KEYPAD(01) ignore...\r\n"); 
0002b0  e28f00cc          ADR      r0,|L1.900|
0002b4  ebfffffe          BL       sysprintf
                  |L1.696|
;;;122                        }
;;;123                        break;
0002b8  ea000012          B        |L1.776|
                  |L1.700|
;;;124                    case 0:
0002bc  e1a00000          MOV      r0,r0
;;;125                        
;;;126                        if(prevScreenId != DIP_TESTER_ID)
0002c0  e51f00e0          LDR      r0,|L1.488|
0002c4  e5900000          LDR      r0,[r0,#0]  ; prevScreenId
0002c8  e3500014          CMP      r0,#0x14
0002cc  0a00000a          BEQ      |L1.764|
;;;127                        {
;;;128                            sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_TESTER(00) ...\r\n");  
0002d0  e28f00ec          ADR      r0,|L1.964|
0002d4  ebfffffe          BL       sysprintf
;;;129                            pKeyHardwareCallbackFunc(DIP_TESTER_ID, KEY_HARDWARE_DOWN_EVENT);
0002d8  e3a01001          MOV      r1,#1
0002dc  e3a00014          MOV      r0,#0x14
0002e0  e51f2104          LDR      r2,|L1.484|
0002e4  e5922000          LDR      r2,[r2,#0]  ; pKeyHardwareCallbackFunc
0002e8  e12fff32          BLX      r2
;;;130                            prevScreenId = DIP_TESTER_ID;
0002ec  e3a00014          MOV      r0,#0x14
0002f0  e51f1110          LDR      r1,|L1.488|
0002f4  e5810000          STR      r0,[r1,#0]  ; prevScreenId
0002f8  ea000001          B        |L1.772|
                  |L1.764|
;;;131                        }
;;;132                        else
;;;133                        {
;;;134                            sysprintf("vDipDrvTask MAIN_SERVICE_STATUS_TESTER(00) ignore...\r\n");  
0002fc  e28f00f4          ADR      r0,|L1.1016|
000300  ebfffffe          BL       sysprintf
                  |L1.772|
;;;135                        }
;;;136                        break;
000304  e1a00000          MOV      r0,r0
                  |L1.776|
000308  e1a00000          MOV      r0,r0                 ;106
;;;137                }
;;;138                
;;;139            }
00030c  e1a00000          MOV      r0,r0
                  |L1.784|
;;;140            //if(!actionReval)
;;;141            //{
;;;142           //     sysprintf("BATTERY_REPLACE fail...\r\n");
;;;143            //    vTaskDelay(3000/portTICK_RATE_MS);
;;;144            //    sysprintf("BATTERY_REPLACE retry...\r\n");
;;;145            //    xSemaphoreGive(xActionSemaphore);
;;;146            //}
;;;147        }
000310  eaffff4d          B        |L1.76|
                  |L1.788|
000314  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_STANDBY(11) ignore...\r"
000318  44727654
00031c  61736b20
000320  4d41494e
000324  5f534552
000328  56494345
00032c  5f535441
000330  5455535f
000334  5354414e
000338  44425928
00033c  31312920
000340  69676e6f
000344  72652e2e
000348  2e0d    
00034a  0a00              DCB      "\n",0
                  |L1.844|
00034c  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_TESTER_KEYPAD(01) ...\r"
000350  44727654
000354  61736b20
000358  4d41494e
00035c  5f534552
000360  56494345
000364  5f535441
000368  5455535f
00036c  54455354
000370  45525f4b
000374  45595041
000378  44283031
00037c  29202e2e
000380  2e0d    
000382  0a00              DCB      "\n",0
                  |L1.900|
000384  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_TESTER_KEYPAD(01) ignor"
000388  44727654
00038c  61736b20
000390  4d41494e
000394  5f534552
000398  56494345
00039c  5f535441
0003a0  5455535f
0003a4  54455354
0003a8  45525f4b
0003ac  45595041
0003b0  44283031
0003b4  29206967
0003b8  6e6f72  
0003bb  652e2e2e          DCB      "e...\r\n",0
0003bf  0d0a00  
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L1.964|
0003c4  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_TESTER(00) ...\r\n",0
0003c8  44727654
0003cc  61736b20
0003d0  4d41494e
0003d4  5f534552
0003d8  56494345
0003dc  5f535441
0003e0  5455535f
0003e4  54455354
0003e8  45522830
0003ec  3029202e
0003f0  2e2e0d0a
0003f4  00      
0003f5  00                DCB      0
0003f6  00                DCB      0
0003f7  00                DCB      0
                  |L1.1016|
0003f8  76446970          DCB      "vDipDrvTask MAIN_SERVICE_STATUS_TESTER(00) ignore...\r\n"
0003fc  44727654
000400  61736b20
000404  4d41494e
000408  5f534552
00040c  56494345
000410  5f535441
000414  5455535f
000418  54455354
00041c  45522830
000420  30292069
000424  676e6f72
000428  652e2e2e
00042c  0d0a    
00042e  00                DCB      0
00042f  00                DCB      0
                          ENDP

                  processAction PROC
;;;148    }
;;;149    static void processAction(void)
000430  e92d4008          PUSH     {r3,lr}
;;;150    {
;;;151        BaseType_t xHigherPriorityTaskWoken;  
;;;152        xHigherPriorityTaskWoken = pdFALSE;
000434  e3a00000          MOV      r0,#0
000438  e58d0000          STR      r0,[sp,#0]
;;;153        xSemaphoreGiveFromISR( xActionSemaphore, &xHigherPriorityTaskWoken );
00043c  e1a0100d          MOV      r1,sp
000440  e51f02a8          LDR      r0,|L1.416|
000444  e5900000          LDR      r0,[r0,#0]  ; xActionSemaphore
000448  ebfffffe          BL       xQueueGiveFromISR
;;;154        portEXIT_SWITCHING_ISR (xHigherPriorityTaskWoken);   
00044c  e59d0000          LDR      r0,[sp,#0]
000450  e3500000          CMP      r0,#0
000454  0a000000          BEQ      |L1.1116|
000458  ebfffffe          BL       vTaskSwitchContext
                  |L1.1116|
;;;155    }
00045c  e8bd8008          POP      {r3,pc}
;;;156    #if(SUPPORT_HK_10_HW)
                          ENDP

                  EINT2Callback PROC
                  |L1.1120|
;;;165    #endif
;;;166    INT32 EINT2Callback(UINT32 status, UINT32 userData)
000460  e92d4070          PUSH     {r4-r6,lr}
;;;167    {
000464  e1a04000          MOV      r4,r0
000468  e1a06001          MOV      r6,r1
;;;168        sysprintf("\r\n - EINT2 0x%08x [%04d] - \r\n", status, GPIO_ReadBit(GPIOH, DIP_2_PIN));
00046c  e3a01004          MOV      r1,#4
000470  e3a00d07          MOV      r0,#0x1c0
000474  ebfffffe          BL       GPIO_ReadBit
000478  e1a05000          MOV      r5,r0
00047c  e1a02005          MOV      r2,r5
000480  e1a01004          MOV      r1,r4
000484  e28f0e1e          ADR      r0,|L1.1644|
000488  ebfffffe          BL       sysprintf
;;;169        processAction();
00048c  ebfffffe          BL       processAction
;;;170        GPIO_ClrISRBit(DIP_2_PORT, DIP_2_PIN);
000490  e3a01004          MOV      r1,#4
000494  e3a00d07          MOV      r0,#0x1c0
000498  ebfffffe          BL       GPIO_ClrISRBit
;;;171        return 0;
00049c  e3a00000          MOV      r0,#0
;;;172    }
0004a0  e8bd8070          POP      {r4-r6,pc}
;;;173    INT32 EINT3Callback(UINT32 status, UINT32 userData)
                          ENDP

                  EINT3Callback PROC
                  |L1.1188|
0004a4  e92d4070          PUSH     {r4-r6,lr}
;;;174    {
0004a8  e1a04000          MOV      r4,r0
0004ac  e1a06001          MOV      r6,r1
;;;175        sysprintf("\r\n - EINT3 0x%08x [%04d] - \r\n", status, GPIO_ReadBit(GPIOH, DIP_3_PIN));
0004b0  e3a01008          MOV      r1,#8
0004b4  e3a00d07          MOV      r0,#0x1c0
0004b8  ebfffffe          BL       GPIO_ReadBit
0004bc  e1a05000          MOV      r5,r0
0004c0  e1a02005          MOV      r2,r5
0004c4  e1a01004          MOV      r1,r4
0004c8  e28f0f6f          ADR      r0,|L1.1676|
0004cc  ebfffffe          BL       sysprintf
;;;176        processAction();
0004d0  ebfffffe          BL       processAction
;;;177        GPIO_ClrISRBit(DIP_3_PORT, DIP_3_PIN);
0004d4  e3a01008          MOV      r1,#8
0004d8  e3a00d07          MOV      r0,#0x1c0
0004dc  ebfffffe          BL       GPIO_ClrISRBit
;;;178        return 0;
0004e0  e3a00000          MOV      r0,#0
;;;179    }
0004e4  e8bd8070          POP      {r4-r6,pc}
;;;180    static BOOL hwInit(void)
                          ENDP

                  hwInit PROC
0004e8  e92d4010          PUSH     {r4,lr}
;;;181    {
;;;182        outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
0004ec  e3a0020b          MOV      r0,#0xb0000000
0004f0  e5900218          LDR      r0,[r0,#0x218]
0004f4  e3800008          ORR      r0,r0,#8
0004f8  e3a0120b          MOV      r1,#0xb0000000
0004fc  e5810218          STR      r0,[r1,#0x218]
;;;183    #if(SUPPORT_HK_10_HW)
;;;184            /* Set PI3 to input */
;;;185        outpw(REG_SYS_GPI_MFPL,(inpw(REG_SYS_GPI_MFPL) & ~(0xFu<<12)) | (0x0u<<12));
000500  e3a0020b          MOV      r0,#0xb0000000
000504  e59000b0          LDR      r0,[r0,#0xb0]
000508  e3c00a0f          BIC      r0,r0,#0xf000
00050c  e58100b0          STR      r0,[r1,#0xb0]
;;;186        GPIO_OpenBit(DIP_1_PORT, DIP_1_PIN, DIR_INPUT, PULL_UP);
000510  e3a03001          MOV      r3,#1
000514  e3a02000          MOV      r2,#0
000518  e3a01008          MOV      r1,#8
00051c  e3a00c02          MOV      r0,#0x200
000520  ebfffffe          BL       GPIO_OpenBit
;;;187    #else
;;;188        /* Set PH4 to EINT4 */
;;;189        outpw(REG_SYS_GPH_MFPL,(inpw(REG_SYS_GPH_MFPL) & ~(0xF<<16)) | (0xF<<16));    
;;;190        /* Configure PH4 to input mode */
;;;191        GPIO_OpenBit(DIP_1_PORT, DIP_1_PIN, DIR_INPUT, PULL_UP);
;;;192        /* Confingure PH4 to both-edge trigger */
;;;193        GPIO_EnableTriggerType(GPIOH, DIP_1_PIN, FALLING);
;;;194        //EINT4
;;;195        GPIO_EnableEINT(NIRQ4, (GPIO_CALLBACK)EINT4Callback, 0);    
;;;196        GPIO_ClrISRBit(DIP_1_PORT, DIP_1_PIN);
;;;197    #endif
;;;198        
;;;199        /* Set PH2 to EINT2 */
;;;200        outpw(REG_SYS_GPH_MFPL,(inpw(REG_SYS_GPH_MFPL) & ~(0xF<<8)) | (0xF<<8));    
000524  e3a0020b          MOV      r0,#0xb0000000
000528  e59000a8          LDR      r0,[r0,#0xa8]
00052c  e3800c0f          ORR      r0,r0,#0xf00
000530  e3a0120b          MOV      r1,#0xb0000000
000534  e58100a8          STR      r0,[r1,#0xa8]
;;;201        /* Configure PH2 to input mode */
;;;202        GPIO_OpenBit(DIP_2_PORT, DIP_2_PIN, DIR_INPUT, NO_PULL_UP);
000538  e3a03000          MOV      r3,#0
00053c  e1a02003          MOV      r2,r3
000540  e3a01004          MOV      r1,#4
000544  e3a00d07          MOV      r0,#0x1c0
000548  ebfffffe          BL       GPIO_OpenBit
;;;203        /* Confingure PH2 to both-edge trigger */
;;;204        GPIO_EnableTriggerType(GPIOH, DIP_2_PIN, BOTH_EDGE);
00054c  e3a02004          MOV      r2,#4
000550  e1a01002          MOV      r1,r2
000554  e3a00d07          MOV      r0,#0x1c0
000558  ebfffffe          BL       GPIO_EnableTriggerType
;;;205        //EINT2
;;;206        GPIO_EnableEINT(NIRQ2, (GPIO_CALLBACK)EINT2Callback, 0);    
00055c  e3a02000          MOV      r2,#0
000560  e24f1f42          ADR      r1,|L1.1120|
000564  e3a00002          MOV      r0,#2
000568  ebfffffe          BL       GPIO_EnableEINT
;;;207        GPIO_ClrISRBit(DIP_2_PORT, DIP_2_PIN);
00056c  e3a01004          MOV      r1,#4
000570  e3a00d07          MOV      r0,#0x1c0
000574  ebfffffe          BL       GPIO_ClrISRBit
;;;208        
;;;209        /* Set PH3 to EINT3 */
;;;210        outpw(REG_SYS_GPH_MFPL,(inpw(REG_SYS_GPH_MFPL) & ~(0xF<<12)) | (0xF<<12));    
000578  e3a0020b          MOV      r0,#0xb0000000
00057c  e59000a8          LDR      r0,[r0,#0xa8]
000580  e3800a0f          ORR      r0,r0,#0xf000
000584  e3a0120b          MOV      r1,#0xb0000000
000588  e58100a8          STR      r0,[r1,#0xa8]
;;;211        /* Configure PH3 to input mode */
;;;212        GPIO_OpenBit(DIP_3_PORT, DIP_3_PIN, DIR_INPUT, NO_PULL_UP);
00058c  e3a03000          MOV      r3,#0
000590  e1a02003          MOV      r2,r3
000594  e3a01008          MOV      r1,#8
000598  e3a00d07          MOV      r0,#0x1c0
00059c  ebfffffe          BL       GPIO_OpenBit
;;;213        /* Confingure PH3 to both-edge trigger */
;;;214        GPIO_EnableTriggerType(GPIOH, DIP_3_PIN, BOTH_EDGE);
0005a0  e3a02004          MOV      r2,#4
0005a4  e3a01008          MOV      r1,#8
0005a8  e3a00d07          MOV      r0,#0x1c0
0005ac  ebfffffe          BL       GPIO_EnableTriggerType
;;;215        //EINT3
;;;216        GPIO_EnableEINT(NIRQ3, (GPIO_CALLBACK)EINT3Callback, 0);    
0005b0  e3a02000          MOV      r2,#0
0005b4  e24f1f46          ADR      r1,|L1.1188|
0005b8  e3a00003          MOV      r0,#3
0005bc  ebfffffe          BL       GPIO_EnableEINT
;;;217        GPIO_ClrISRBit(DIP_3_PORT, DIP_3_PIN);  
0005c0  e3a01008          MOV      r1,#8
0005c4  e3a00d07          MOV      r0,#0x1c0
0005c8  ebfffffe          BL       GPIO_ClrISRBit
;;;218        
;;;219    
;;;220        return TRUE;
0005cc  e3a00001          MOV      r0,#1
;;;221    }
0005d0  e8bd8010          POP      {r4,pc}
;;;222    static BOOL swInit(void)
                          ENDP

                  swInit PROC
0005d4  e92d401c          PUSH     {r2-r4,lr}
;;;223    {   
;;;224        xActionSemaphore = xSemaphoreCreateBinary();
0005d8  e3a02003          MOV      r2,#3
0005dc  e3a01000          MOV      r1,#0
0005e0  e3a00001          MOV      r0,#1
0005e4  ebfffffe          BL       xQueueGenericCreate
0005e8  e51f1450          LDR      r1,|L1.416|
0005ec  e5810000          STR      r0,[r1,#0]  ; xActionSemaphore
;;;225        xTaskCreate( vDipDrvTask, "vDipDrvTask", 512, NULL, DIP_THREAD_PROI, NULL);
0005f0  e3a00000          MOV      r0,#0
0005f4  e3a0100d          MOV      r1,#0xd
0005f8  e58d0004          STR      r0,[sp,#4]
0005fc  e1a03000          MOV      r3,r0
000600  e3a02c02          MOV      r2,#0x200
000604  e58d1000          STR      r1,[sp,#0]
000608  e28f109c          ADR      r1,|L1.1708|
00060c  e59f00a4          LDR      r0,|L1.1720|
000610  ebfffffe          BL       xTaskCreate
;;;226        return TRUE;
000614  e3a00001          MOV      r0,#1
;;;227    }
000618  e8bd801c          POP      {r2-r4,pc}
;;;228    
                          ENDP

                  DipDrvInit PROC
;;;231    /*-----------------------------------------*/
;;;232    BOOL DipDrvInit(BOOL testModeFlag)
00061c  e92d4010          PUSH     {r4,lr}
;;;233    {
000620  e1a04000          MOV      r4,r0
;;;234    //    sysprintf("DipDrvInit!!\n");
;;;235        if(hwInit() == FALSE)
000624  ebfffffe          BL       hwInit
000628  e3500000          CMP      r0,#0
00062c  1a000003          BNE      |L1.1600|
;;;236        {
;;;237            terninalPrintf("DipDrvInit ERROR (hwInit false)!!\n");
000630  e28f0084          ADR      r0,|L1.1724|
000634  ebfffffe          BL       terninalPrintf
;;;238            return FALSE;
000638  e3a00000          MOV      r0,#0
                  |L1.1596|
;;;239        }
;;;240        if(testModeFlag == FALSE)
;;;241        {
;;;242            if(swInit() == FALSE)
;;;243            {
;;;244                terninalPrintf("DipDrvInit ERROR (swInit false)!!\n");
;;;245                return FALSE;
;;;246            }
;;;247        }
;;;248        return TRUE;
;;;249    }
00063c  e8bd8010          POP      {r4,pc}
                  |L1.1600|
000640  e3540000          CMP      r4,#0                 ;240
000644  1a000006          BNE      |L1.1636|
000648  ebfffffe          BL       swInit
00064c  e3500000          CMP      r0,#0                 ;242
000650  1a000003          BNE      |L1.1636|
000654  e28f0084          ADR      r0,|L1.1760|
000658  ebfffffe          BL       terninalPrintf
00065c  e3a00000          MOV      r0,#0                 ;245
000660  eafffff5          B        |L1.1596|
                  |L1.1636|
000664  e3a00001          MOV      r0,#1                 ;248
000668  eafffff3          B        |L1.1596|
                  |L1.1644|
00066c  0d0a202d          DCB      "\r\n - EINT2 0x%08x [%04d] - \r\n",0
000670  2045494e
000674  54322030
000678  78253038
00067c  78205b25
000680  3034645d
000684  202d200d
000688  0a00    
00068a  00                DCB      0
00068b  00                DCB      0
                  |L1.1676|
00068c  0d0a202d          DCB      "\r\n - EINT3 0x%08x [%04d] - \r\n",0
000690  2045494e
000694  54332030
000698  78253038
00069c  78205b25
0006a0  3034645d
0006a4  202d200d
0006a8  0a00    
0006aa  00                DCB      0
0006ab  00                DCB      0
                  |L1.1708|
0006ac  76446970          DCB      "vDipDrvTask",0
0006b0  44727654
0006b4  61736b00
                  |L1.1720|
                          DCD      vDipDrvTask
                  |L1.1724|
0006bc  44697044          DCB      "DipDrvInit ERROR (hwInit false)!!\n",0
0006c0  7276496e
0006c4  69742045
0006c8  52524f52
0006cc  20286877
0006d0  496e6974
0006d4  2066616c
0006d8  73652921
0006dc  210a00  
0006df  00                DCB      0
                  |L1.1760|
0006e0  44697044          DCB      "DipDrvInit ERROR (swInit false)!!\n",0
0006e4  7276496e
0006e8  69742045
0006ec  52524f52
0006f0  20287377
0006f4  496e6974
0006f8  2066616c
0006fc  73652921
000700  210a00  
000703  00                DCB      0
                          ENDP

                  DipSetCallbackFunc PROC
;;;250    
;;;251    void DipSetCallbackFunc(keyHardwareCallbackFunc func)
000704  e51f1528          LDR      r1,|L1.484|
;;;252    {
;;;253        pKeyHardwareCallbackFunc = func;
000708  e5810000          STR      r0,[r1,#0]  ; pKeyHardwareCallbackFunc
;;;254    }
00070c  e12fff1e          BX       lr
;;;255    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  threadWaitTime
                          DCD      0xffffffff
                  prevScreenId
                          DCD      0xffffffff
                  batteryButtonTick
                          DCD      0x00000000
                  xActionSemaphore
                          DCD      0x00000000
                  pKeyHardwareCallbackFunc
                          DCD      0x00000000
