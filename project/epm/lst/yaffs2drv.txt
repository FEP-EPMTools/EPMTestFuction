; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs2drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs2drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs2drv.crf src\syshal\yaffs2drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  yaffs_regions_overlap PROC
;;;47     //static int errortimes = 0;
;;;48     static int yaffs_regions_overlap(int a, int b, int x, int y)
000000  e1a0c000          MOV      r12,r0
;;;49     {
;;;50         return  (a <= x && x <= b) ||
000004  e15c0002          CMP      r12,r2
000008  ca000001          BGT      |L1.20|
00000c  e1520001          CMP      r2,r1
000010  da00000b          BLE      |L1.68|
                  |L1.20|
;;;51                 (a <= y && y <= b) ||
000014  e15c0003          CMP      r12,r3
000018  ca000001          BGT      |L1.36|
00001c  e1530001          CMP      r3,r1
000020  da000007          BLE      |L1.68|
                  |L1.36|
;;;52                 (x <= a && a <= y) ||
000024  e152000c          CMP      r2,r12
000028  ca000001          BGT      |L1.52|
00002c  e15c0003          CMP      r12,r3
000030  da000003          BLE      |L1.68|
                  |L1.52|
;;;53                 (x <= b && b <= y);
000034  e1520001          CMP      r2,r1
000038  ca000003          BGT      |L1.76|
00003c  e1510003          CMP      r1,r3
000040  ca000001          BGT      |L1.76|
                  |L1.68|
000044  e3a00001          MOV      r0,#1                 ;50
                  |L1.72|
;;;54     }
000048  e12fff1e          BX       lr
                  |L1.76|
00004c  e3a00000          MOV      r0,#0                 ;50
000050  eafffffc          B        |L1.72|
;;;55     
                          ENDP

                  yaffs_file_type_str PROC
;;;56     
;;;57     static const char *yaffs_file_type_str(struct yaffs_stat *stat)
000054  e1a01000          MOV      r1,r0
;;;58     {
;;;59         switch (stat->st_mode & S_IFMT) {
000058  e1d100b8          LDRH     r0,[r1,#8]
00005c  e2000a0f          AND      r0,r0,#0xf000
000060  e3500901          CMP      r0,#0x4000
000064  0a000007          BEQ      |L1.136|
000068  e3500902          CMP      r0,#0x8000
00006c  0a000002          BEQ      |L1.124|
000070  e3500a0a          CMP      r0,#0xa000
000074  1a000009          BNE      |L1.160|
000078  ea000005          B        |L1.148|
                  |L1.124|
;;;60         case S_IFREG:
00007c  e1a00000          MOV      r0,r0
;;;61             return "regular file";
000080  e28f0e1a          ADR      r0,|L1.552|
                  |L1.132|
;;;62         case S_IFDIR:
;;;63             return "directory";
;;;64         case S_IFLNK:
;;;65             return "symlink";
;;;66         default:
;;;67             return "unknown";
;;;68         }
;;;69     }
000084  e12fff1e          BX       lr
                  |L1.136|
000088  e1a00000          MOV      r0,r0                 ;62
00008c  e28f0f69          ADR      r0,|L1.568|
000090  eafffffb          B        |L1.132|
                  |L1.148|
000094  e1a00000          MOV      r0,r0                 ;64
000098  e28f0f69          ADR      r0,|L1.580|
00009c  eafffff8          B        |L1.132|
                  |L1.160|
0000a0  e1a00000          MOV      r0,r0                 ;66
0000a4  e28f0e1a          ADR      r0,|L1.588|
0000a8  eafffff5          B        |L1.132|
;;;70     static const char *yaffs_error_str(void)
                          ENDP

                  yaffs_error_str PROC
0000ac  e92d4010          PUSH     {r4,lr}
;;;71     {
;;;72         int error = yaffsfs_GetLastError();
0000b0  ebfffffe          BL       yaffsfs_GetLastError
0000b4  e1a04000          MOV      r4,r0
;;;73     
;;;74         if (error < 0)
0000b8  e3540000          CMP      r4,#0
0000bc  aa000000          BGE      |L1.196|
;;;75             error = -error;
0000c0  e2644000          RSB      r4,r4,#0
                  |L1.196|
;;;76     
;;;77         switch (error) {
0000c4  e3540014          CMP      r4,#0x14
0000c8  0a00009f          BEQ      |L1.844|
0000cc  ca000016          BGT      |L1.300|
0000d0  e3540014          CMP      r4,#0x14
0000d4  308ff104          ADDCC    pc,pc,r4,LSL #2
0000d8  ea0000a7          B        |L1.892|
0000dc  ea0000a3          B        |L1.880|
0000e0  ea0000a5          B        |L1.892|
0000e4  ea00003a          B        |L1.468|
0000e8  ea0000a3          B        |L1.892|
0000ec  ea0000a2          B        |L1.892|
0000f0  ea0000a1          B        |L1.892|
0000f4  ea0000a0          B        |L1.892|
0000f8  ea00009f          B        |L1.892|
0000fc  ea00009e          B        |L1.892|
000100  ea00002a          B        |L1.432|
000104  ea00009c          B        |L1.892|
000108  ea00009b          B        |L1.892|
00010c  ea000042          B        |L1.540|
000110  ea000029          B        |L1.444|
000114  ea000086          B        |L1.820|
000118  ea000097          B        |L1.892|
00011c  ea000017          B        |L1.384|
000120  ea000086          B        |L1.832|
000124  ea000027          B        |L1.456|
000128  ea000017          B        |L1.396|
                  |L1.300|
00012c  e354001e          CMP      r4,#0x1e
000130  0a00002d          BEQ      |L1.492|
000134  ca000008          BGT      |L1.348|
000138  e3540015          CMP      r4,#0x15
00013c  0a000085          BEQ      |L1.856|
000140  e3540016          CMP      r4,#0x16
000144  0a000013          BEQ      |L1.408|
000148  e3540017          CMP      r4,#0x17
00014c  0a000014          BEQ      |L1.420|
000150  e354001c          CMP      r4,#0x1c
000154  1a000088          BNE      |L1.892|
000158  ea000020          B        |L1.480|
                  |L1.348|
00015c  e3540022          CMP      r4,#0x22
000160  0a000024          BEQ      |L1.504|
000164  e3540024          CMP      r4,#0x24
000168  0a000028          BEQ      |L1.528|
00016c  e3540027          CMP      r4,#0x27
000170  0a000023          BEQ      |L1.516|
000174  e3540028          CMP      r4,#0x28
000178  1a00007f          BNE      |L1.892|
00017c  ea000078          B        |L1.868|
                  |L1.384|
;;;78         case EBUSY:
000180  e1a00000          MOV      r0,r0
;;;79             return "Busy";
000184  e28f00c8          ADR      r0,|L1.596|
                  |L1.392|
;;;80         case ENODEV:
;;;81             return "No such device";
;;;82         case EINVAL:
;;;83             return "Invalid parameter";
;;;84         case ENFILE:
;;;85             return "Too many open files";
;;;86         case EBADF:
;;;87             return "Bad handle";
;;;88         case EACCES:
;;;89             return "Wrong permissions";
;;;90         case EXDEV:
;;;91             return "Not on same device";
;;;92         case ENOENT:
;;;93             return "No such entry";
;;;94         case ENOSPC:
;;;95             return "Device full";
;;;96         case EROFS:
;;;97             return "Read only file system";
;;;98         case ERANGE:
;;;99             return "Range error";
;;;100        case ENOTEMPTY:
;;;101            return "Not empty";
;;;102        case ENAMETOOLONG:
;;;103            return "Name too long";
;;;104        case ENOMEM:
;;;105            return "Out of memory";
;;;106        case EFAULT:
;;;107            return "Fault";
;;;108        case EEXIST:
;;;109            return "Name exists";
;;;110        case ENOTDIR:
;;;111            return "Not a directory";
;;;112        case EISDIR:
;;;113            return "Not permitted on a directory";
;;;114        case ELOOP:
;;;115            return "Symlink loop";
;;;116        case 0:
;;;117            return "No error";
;;;118        default:
;;;119            return "Unknown error";
;;;120        }
;;;121    }
000188  e8bd8010          POP      {r4,pc}
                  |L1.396|
00018c  e1a00000          MOV      r0,r0                 ;80
000190  e28f00c4          ADR      r0,|L1.604|
000194  eafffffb          B        |L1.392|
                  |L1.408|
000198  e1a00000          MOV      r0,r0                 ;82
00019c  e28f00c8          ADR      r0,|L1.620|
0001a0  eafffff8          B        |L1.392|
                  |L1.420|
0001a4  e1a00000          MOV      r0,r0                 ;84
0001a8  e28f00d0          ADR      r0,|L1.640|
0001ac  eafffff5          B        |L1.392|
                  |L1.432|
0001b0  e1a00000          MOV      r0,r0                 ;86
0001b4  e28f00d8          ADR      r0,|L1.660|
0001b8  eafffff2          B        |L1.392|
                  |L1.444|
0001bc  e1a00000          MOV      r0,r0                 ;88
0001c0  e28f00d8          ADR      r0,|L1.672|
0001c4  eaffffef          B        |L1.392|
                  |L1.456|
0001c8  e1a00000          MOV      r0,r0                 ;90
0001cc  e28f00e0          ADR      r0,|L1.692|
0001d0  eaffffec          B        |L1.392|
                  |L1.468|
0001d4  e1a00000          MOV      r0,r0                 ;92
0001d8  e28f00e8          ADR      r0,|L1.712|
0001dc  eaffffe9          B        |L1.392|
                  |L1.480|
0001e0  e1a00000          MOV      r0,r0                 ;94
0001e4  e28f00ec          ADR      r0,|L1.728|
0001e8  eaffffe6          B        |L1.392|
                  |L1.492|
0001ec  e1a00000          MOV      r0,r0                 ;96
0001f0  e28f00ec          ADR      r0,|L1.740|
0001f4  eaffffe3          B        |L1.392|
                  |L1.504|
0001f8  e1a00000          MOV      r0,r0                 ;98
0001fc  e28f00f8          ADR      r0,|L1.764|
000200  eaffffe0          B        |L1.392|
                  |L1.516|
000204  e1a00000          MOV      r0,r0                 ;100
000208  e28f00f8          ADR      r0,|L1.776|
00020c  eaffffdd          B        |L1.392|
                  |L1.528|
000210  e1a00000          MOV      r0,r0                 ;102
000214  e28f00f8          ADR      r0,|L1.788|
000218  eaffffda          B        |L1.392|
                  |L1.540|
00021c  e1a00000          MOV      r0,r0                 ;104
000220  e28f00fc          ADR      r0,|L1.804|
000224  eaffffd7          B        |L1.392|
                  |L1.552|
000228  72656775          DCB      "regular file",0
00022c  6c617220
000230  66696c65
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
                  |L1.568|
000238  64697265          DCB      "directory",0
00023c  63746f72
000240  7900    
000242  00                DCB      0
000243  00                DCB      0
                  |L1.580|
000244  73796d6c          DCB      "symlink",0
000248  696e6b00
                  |L1.588|
00024c  756e6b6e          DCB      "unknown",0
000250  6f776e00
                  |L1.596|
000254  42757379          DCB      "Busy",0
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L1.604|
00025c  4e6f2073          DCB      "No such device",0
000260  75636820
000264  64657669
000268  636500  
00026b  00                DCB      0
                  |L1.620|
00026c  496e7661          DCB      "Invalid parameter",0
000270  6c696420
000274  70617261
000278  6d657465
00027c  7200    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L1.640|
000280  546f6f20          DCB      "Too many open files",0
000284  6d616e79
000288  206f7065
00028c  6e206669
000290  6c657300
                  |L1.660|
000294  42616420          DCB      "Bad handle",0
000298  68616e64
00029c  6c6500  
00029f  00                DCB      0
                  |L1.672|
0002a0  57726f6e          DCB      "Wrong permissions",0
0002a4  67207065
0002a8  726d6973
0002ac  73696f6e
0002b0  7300    
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L1.692|
0002b4  4e6f7420          DCB      "Not on same device",0
0002b8  6f6e2073
0002bc  616d6520
0002c0  64657669
0002c4  636500  
0002c7  00                DCB      0
                  |L1.712|
0002c8  4e6f2073          DCB      "No such entry",0
0002cc  75636820
0002d0  656e7472
0002d4  7900    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L1.728|
0002d8  44657669          DCB      "Device full",0
0002dc  63652066
0002e0  756c6c00
                  |L1.740|
0002e4  52656164          DCB      "Read only file system",0
0002e8  206f6e6c
0002ec  79206669
0002f0  6c652073
0002f4  79737465
0002f8  6d00    
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L1.764|
0002fc  52616e67          DCB      "Range error",0
000300  65206572
000304  726f7200
                  |L1.776|
000308  4e6f7420          DCB      "Not empty",0
00030c  656d7074
000310  7900    
000312  00                DCB      0
000313  00                DCB      0
                  |L1.788|
000314  4e616d65          DCB      "Name too long",0
000318  20746f6f
00031c  206c6f6e
000320  6700    
000322  00                DCB      0
000323  00                DCB      0
                  |L1.804|
000324  4f757420          DCB      "Out of memory",0
000328  6f66206d
00032c  656d6f72
000330  7900    
000332  00                DCB      0
000333  00                DCB      0
                  |L1.820|
000334  e1a00000          MOV      r0,r0                 ;106
000338  e28f0f59          ADR      r0,|L1.1188|
00033c  eaffff91          B        |L1.392|
                  |L1.832|
000340  e1a00000          MOV      r0,r0                 ;108
000344  e28f0e16          ADR      r0,|L1.1196|
000348  eaffff8e          B        |L1.392|
                  |L1.844|
00034c  e1a00000          MOV      r0,r0                 ;110
000350  e28f0e16          ADR      r0,|L1.1208|
000354  eaffff8b          B        |L1.392|
                  |L1.856|
000358  e1a00000          MOV      r0,r0                 ;112
00035c  e28f0f59          ADR      r0,|L1.1224|
000360  eaffff88          B        |L1.392|
                  |L1.868|
000364  e1a00000          MOV      r0,r0                 ;114
000368  e28f0f5e          ADR      r0,|L1.1256|
00036c  eaffff85          B        |L1.392|
                  |L1.880|
000370  e1a00000          MOV      r0,r0                 ;116
000374  e28f0f5f          ADR      r0,|L1.1272|
000378  eaffff82          B        |L1.392|
                  |L1.892|
00037c  e1a00000          MOV      r0,r0                 ;118
000380  e28f0f5f          ADR      r0,|L1.1284|
000384  eaffff7f          B        |L1.392|
;;;122    static void cmd_yaffs_ls(const char *mountpt, int longlist)
                          ENDP

                  cmd_yaffs_ls PROC
000388  e92d43f0          PUSH     {r4-r9,lr}
;;;123    {
00038c  e24ddf51          SUB      sp,sp,#0x144
000390  e1a05000          MOV      r5,r0
000394  e1a06001          MOV      r6,r1
;;;124        int i;
;;;125        yaffs_DIR *d;
;;;126        struct yaffs_dirent *de;
;;;127        struct yaffs_stat stat;
;;;128        char tempstr[255];
;;;129        sysprintf("\r\n -------- cmd_yaffs_ls start --------\n");
000398  e28f0f5d          ADR      r0,|L1.1300|
00039c  ebfffffe          BL       sysprintf
;;;130        d = yaffs_opendir(mountpt);
0003a0  e1a00005          MOV      r0,r5
0003a4  ebfffffe          BL       yaffs_opendir
0003a8  e1a08000          MOV      r8,r0
;;;131    
;;;132        if (!d) 
0003ac  e3580000          CMP      r8,#0
0003b0  1a000006          BNE      |L1.976|
;;;133        {
;;;134            sysprintf("opendir failed, %s\n", yaffs_error_str());
0003b4  ebfffffe          BL       yaffs_error_str
0003b8  e1a09000          MOV      r9,r0
0003bc  e1a01009          MOV      r1,r9
0003c0  e28f0f5e          ADR      r0,|L1.1344|
0003c4  ebfffffe          BL       sysprintf
                  |L1.968|
;;;135            return;
;;;136        }
;;;137    
;;;138        for (i = 0; (de = yaffs_readdir(d)) != NULL; i++) 
;;;139        {
;;;140            
;;;141                
;;;142            if (longlist) 
;;;143            {
;;;144                sprintf(tempstr, "%s/%s", mountpt, de->d_name);
;;;145                yaffs_lstat(tempstr, &stat);
;;;146                sysprintf("%-25s\t%7ld", de->d_name, (long)stat.st_size);
;;;147                sysprintf(" %5d %s\n", stat.st_ino, yaffs_file_type_str(&stat));
;;;148            } 
;;;149            else
;;;150            {
;;;151                sysprintf("%s\n", de->d_name);
;;;152            }
;;;153            
;;;154            if(strlen (de->d_name) > 32)
;;;155            {
;;;156                sysprintf(" !! cmd_yaffs_ls : file name error, delete it\n");
;;;157                yaffs_unlink(de->d_name);
;;;158            }
;;;159            if((long)stat.st_size > (1024*1024*4))
;;;160            {
;;;161                sysprintf(" !! cmd_yaffs_ls : file size error, delete it\n");
;;;162                yaffs_unlink(de->d_name);
;;;163            }
;;;164            
;;;165            
;;;166        }
;;;167    
;;;168        yaffs_closedir(d);
;;;169        sysprintf(" -------- cmd_yaffs_ls end --------\n");
;;;170    }
0003c8  e28ddf51          ADD      sp,sp,#0x144
0003cc  e8bd83f0          POP      {r4-r9,pc}
                  |L1.976|
0003d0  e3a07000          MOV      r7,#0                 ;138
0003d4  ea000028          B        |L1.1148|
                  |L1.984|
0003d8  e3560000          CMP      r6,#0                 ;142
0003dc  0a000013          BEQ      |L1.1072|
0003e0  e284300b          ADD      r3,r4,#0xb            ;144
0003e4  e1a02005          MOV      r2,r5                 ;144
0003e8  e28f1f59          ADR      r1,|L1.1364|
0003ec  e1a0000d          MOV      r0,sp                 ;144
0003f0  ebfffffe          BL       __2sprintf
0003f4  e28d1c01          ADD      r1,sp,#0x100          ;145
0003f8  e1a0000d          MOV      r0,sp                 ;145
0003fc  ebfffffe          BL       yaffs_lstat
000400  e284100b          ADD      r1,r4,#0xb            ;146
000404  e28f0e15          ADR      r0,|L1.1372|
000408  e59d2120          LDR      r2,[sp,#0x120]        ;146
00040c  ebfffffe          BL       sysprintf
000410  e28d0c01          ADD      r0,sp,#0x100          ;147
000414  ebfffffe          BL       yaffs_file_type_str
000418  e1a09000          MOV      r9,r0                 ;147
00041c  e1a02009          MOV      r2,r9                 ;147
000420  e28f0d05          ADR      r0,|L1.1384|
000424  e59d1104          LDR      r1,[sp,#0x104]        ;147
000428  ebfffffe          BL       sysprintf
00042c  ea000002          B        |L1.1084|
                  |L1.1072|
000430  e284100b          ADD      r1,r4,#0xb            ;151
000434  e28f0f45          ADR      r0,|L1.1360|
000438  ebfffffe          BL       sysprintf
                  |L1.1084|
00043c  e284000b          ADD      r0,r4,#0xb            ;154
000440  ebfffffe          BL       strlen
000444  e3500020          CMP      r0,#0x20              ;154
000448  9a000003          BLS      |L1.1116|
00044c  e28f0e12          ADR      r0,|L1.1396|
000450  ebfffffe          BL       sysprintf
000454  e284000b          ADD      r0,r4,#0xb            ;157
000458  ebfffffe          BL       yaffs_unlink
                  |L1.1116|
00045c  e59d0120          LDR      r0,[sp,#0x120]        ;159
000460  e3500501          CMP      r0,#0x400000          ;159
000464  da000003          BLE      |L1.1144|
000468  e28f0f4d          ADR      r0,|L1.1444|
00046c  ebfffffe          BL       sysprintf
000470  e284000b          ADD      r0,r4,#0xb            ;162
000474  ebfffffe          BL       yaffs_unlink
                  |L1.1144|
000478  e2877001          ADD      r7,r7,#1              ;138
                  |L1.1148|
00047c  e1a00008          MOV      r0,r8                 ;138
000480  ebfffffe          BL       yaffs_readdir
000484  e1b04000          MOVS     r4,r0                 ;138
000488  1affffd2          BNE      |L1.984|
00048c  e1a00008          MOV      r0,r8                 ;168
000490  ebfffffe          BL       yaffs_closedir
000494  e28f0f4e          ADR      r0,|L1.1492|
000498  ebfffffe          BL       sysprintf
00049c  e1a00000          MOV      r0,r0
0004a0  eaffffc8          B        |L1.968|
                  |L1.1188|
0004a4  4661756c          DCB      "Fault",0
0004a8  7400    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L1.1196|
0004ac  4e616d65          DCB      "Name exists",0
0004b0  20657869
0004b4  73747300
                  |L1.1208|
0004b8  4e6f7420          DCB      "Not a directory",0
0004bc  61206469
0004c0  72656374
0004c4  6f727900
                  |L1.1224|
0004c8  4e6f7420          DCB      "Not permitted on a directory"
0004cc  7065726d
0004d0  69747465
0004d4  64206f6e
0004d8  20612064
0004dc  69726563
0004e0  746f7279
                  |L1.1252|
0004e4  00                DCB      0
0004e5  00                DCB      0
0004e6  00                DCB      0
0004e7  00                DCB      0
                  |L1.1256|
0004e8  53796d6c          DCB      "Symlink loop",0
0004ec  696e6b20
0004f0  6c6f6f70
0004f4  00      
0004f5  00                DCB      0
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L1.1272|
0004f8  4e6f2065          DCB      "No error",0
0004fc  72726f72
000500  00      
000501  00                DCB      0
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
000504  556e6b6e          DCB      "Unknown error",0
000508  6f776e20
00050c  6572726f
000510  7200    
000512  00                DCB      0
000513  00                DCB      0
                  |L1.1300|
000514  0d0a202d          DCB      "\r\n -------- cmd_yaffs_ls start --------\n",0
000518  2d2d2d2d
00051c  2d2d2d20
000520  636d645f
000524  79616666
000528  735f6c73
00052c  20737461
000530  7274202d
000534  2d2d2d2d
000538  2d2d2d0a
00053c  00      
00053d  00                DCB      0
00053e  00                DCB      0
00053f  00                DCB      0
                  |L1.1344|
000540  6f70656e          DCB      "opendir failed, "
000544  64697220
000548  6661696c
00054c  65642c20
                  |L1.1360|
000550  25730a00          DCB      "%s\n",0
                  |L1.1364|
000554  25732f25          DCB      "%s/%s",0
000558  7300    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  252d3235          DCB      "%-25s\t%7ld",0
000560  73092537
000564  6c6400  
000567  00                DCB      0
                  |L1.1384|
000568  20253564          DCB      " %5d %s\n",0
00056c  2025730a
000570  00      
000571  00                DCB      0
000572  00                DCB      0
000573  00                DCB      0
                  |L1.1396|
000574  20212120          DCB      " !! cmd_yaffs_ls : file name error, delete it\n",0
000578  636d645f
00057c  79616666
000580  735f6c73
000584  203a2066
000588  696c6520
00058c  6e616d65
000590  20657272
000594  6f722c20
000598  64656c65
00059c  74652069
0005a0  740a00  
0005a3  00                DCB      0
                  |L1.1444|
0005a4  20212120          DCB      " !! cmd_yaffs_ls : file size error, delete it\n",0
0005a8  636d645f
0005ac  79616666
0005b0  735f6c73
0005b4  203a2066
0005b8  696c6520
0005bc  73697a65
0005c0  20657272
0005c4  6f722c20
0005c8  64656c65
0005cc  74652069
0005d0  740a00  
0005d3  00                DCB      0
                  |L1.1492|
0005d4  202d2d2d          DCB      " -------- cmd_yaffs_ls end --------\n",0
0005d8  2d2d2d2d
0005dc  2d20636d
0005e0  645f7961
0005e4  6666735f
0005e8  6c732065
0005ec  6e64202d
0005f0  2d2d2d2d
0005f4  2d2d2d0a
0005f8  00      
0005f9  00                DCB      0
0005fa  00                DCB      0
0005fb  00                DCB      0
                          ENDP

                  cmd_yaffs_dev_ls PROC
;;;212    */
;;;213    static void cmd_yaffs_dev_ls(void)
0005fc  e92d407c          PUSH     {r2-r6,lr}
;;;214    {
;;;215        struct yaffs_dev *dev;
;;;216        int flash_dev;
;;;217        int free_space;
;;;218    
;;;219        yaffs_dev_rewind();
000600  ebfffffe          BL       yaffs_dev_rewind
;;;220    
;;;221        while (1) {
000604  ea000022          B        |L1.1684|
                  |L1.1544|
;;;222            dev = yaffs_next_dev();
000608  ebfffffe          BL       yaffs_next_dev
00060c  e1a04000          MOV      r4,r0
;;;223            if (!dev)
000610  e3540000          CMP      r4,#0
000614  1a000000          BNE      |L1.1564|
;;;224                return;
;;;225            flash_dev =
;;;226                ((unsigned) dev->driver_context - (unsigned) nand_info)/
;;;227                sizeof(nand_info[0]);
;;;228            sysprintf("%-3s %5d 0x%05x 0x%05x %s",
;;;229                      dev->param.name, flash_dev,
;;;230                      dev->param.start_block, dev->param.end_block,
;;;231                      dev->param.inband_tags ? "using inband tags, " : "");
;;;232    
;;;233            free_space = yaffs_freespace(dev->param.name);
;;;234            if (free_space < 0)
;;;235                sysprintf("not mounted\n");
;;;236            else
;;;237                sysprintf("free 0x%x\n", free_space);
;;;238    
;;;239        }
;;;240    }
000618  e8bd807c          POP      {r2-r6,pc}
                  |L1.1564|
00061c  e59f2274          LDR      r2,|L1.2200|
000620  e5941098          LDR      r1,[r4,#0x98]         ;225
000624  e0410002          SUB      r0,r1,r2              ;225
000628  e3a010b0          MOV      r1,#0xb0              ;225
00062c  ebfffffe          BL       __aeabi_uidivmod
000630  e1a06000          MOV      r6,r0                 ;225
000634  e5940004          LDR      r0,[r4,#4]            ;228
000638  e3500000          CMP      r0,#0                 ;228
00063c  0a000001          BEQ      |L1.1608|
000640  e28f1f95          ADR      r1,|L1.2204|
000644  ea000000          B        |L1.1612|
                  |L1.1608|
000648  e24f1f5b          ADR      r1,|L1.1252|
                  |L1.1612|
00064c  e5940018          LDR      r0,[r4,#0x18]         ;231
000650  e1cd00f0          STRD     r0,r1,[sp,#0]         ;231
000654  e1a02006          MOV      r2,r6                 ;231
000658  e28f0e25          ADR      r0,|L1.2224|
00065c  e5941000          LDR      r1,[r4,#0]            ;231
000660  e5943014          LDR      r3,[r4,#0x14]         ;231
000664  ebfffffe          BL       sysprintf
000668  e5940000          LDR      r0,[r4,#0]            ;233
00066c  ebfffffe          BL       yaffs_freespace
000670  e1a05000          MOV      r5,r0                 ;233
000674  e3550000          CMP      r5,#0                 ;234
000678  aa000002          BGE      |L1.1672|
00067c  e28f0f92          ADR      r0,|L1.2252|
000680  ebfffffe          BL       sysprintf
000684  ea000002          B        |L1.1684|
                  |L1.1672|
000688  e1a01005          MOV      r1,r5                 ;237
00068c  e28f0f92          ADR      r0,|L1.2268|
000690  ebfffffe          BL       sysprintf
                  |L1.1684|
000694  eaffffdb          B        |L1.1544|
;;;241    static void cmd_yaffs_devconfig(char *_mp, int flash_dev,
                          ENDP

                  cmd_yaffs_devconfig PROC
000698  e92d4fff          PUSH     {r0-r11,lr}
;;;242                             int start_block, int end_block)
;;;243    {
00069c  e24dd00c          SUB      sp,sp,#0xc
0006a0  e1a08001          MOV      r8,r1
0006a4  e1a09002          MOV      r9,r2
0006a8  e1a07003          MOV      r7,r3
;;;244        struct mtd_info *mtd = NULL;
0006ac  e1a00000          MOV      r0,r0
;;;245        struct yaffs_dev *dev = NULL;
0006b0  e1a00000          MOV      r0,r0
;;;246        struct yaffs_dev *chk;
;;;247        char *mp = NULL;
0006b4  e1a00000          MOV      r0,r0
;;;248        struct nand_chip *chip;
;;;249    
;;;250    //  dev = calloc(1, sizeof(*dev));
;;;251    //  mp = (char *)strdup(_mp);
;;;252        dev = yaffs_malloc(sizeof(*dev));
0006b8  e59f0228          LDR      r0,|L1.2280|
0006bc  ebfffffe          BL       yaffs_malloc
0006c0  e1a04000          MOV      r4,r0
;;;253        memset(dev, 0, sizeof(*dev));
0006c4  e59f121c          LDR      r1,|L1.2280|
0006c8  e1a00004          MOV      r0,r4
0006cc  ebfffffe          BL       __aeabi_memclr4
;;;254        mp = yaffs_malloc(strlen(_mp));
0006d0  e59d000c          LDR      r0,[sp,#0xc]
0006d4  ebfffffe          BL       strlen
0006d8  e58d0004          STR      r0,[sp,#4]
0006dc  ebfffffe          BL       yaffs_malloc
0006e0  e1a0a000          MOV      r10,r0
;;;255        strcpy(mp, _mp);
0006e4  e1a0000a          MOV      r0,r10
0006e8  e59d100c          LDR      r1,[sp,#0xc]
0006ec  ebfffffe          BL       strcpy
;;;256    
;;;257        mtd = &nand_info[flash_dev];
0006f0  e0880088          ADD      r0,r8,r8,LSL #1
0006f4  e0800188          ADD      r0,r0,r8,LSL #3
0006f8  e59f1198          LDR      r1,|L1.2200|
0006fc  e0815200          ADD      r5,r1,r0,LSL #4
;;;258    
;;;259        if (!dev || !mp) {
000700  e3540000          CMP      r4,#0
000704  0a000001          BEQ      |L1.1808|
000708  e35a0000          CMP      r10,#0
00070c  1a000002          BNE      |L1.1820|
                  |L1.1808|
;;;260            /* Alloc error */
;;;261            sysprintf("Failed to allocate memory\n");
000710  e28f0f75          ADR      r0,|L1.2284|
000714  ebfffffe          BL       sysprintf
;;;262            goto err;
000718  ea0000aa          B        |L1.2504|
                  |L1.1820|
;;;263        }
;;;264    
;;;265        if (flash_dev >= 1) {
00071c  e3580001          CMP      r8,#1
000720  ba000002          BLT      |L1.1840|
;;;266            sysprintf("Flash device invalid\n");
000724  e28f0f77          ADR      r0,|L1.2312|
000728  ebfffffe          BL       sysprintf
;;;267            goto err;
00072c  ea0000a5          B        |L1.2504|
                  |L1.1840|
;;;268        }
;;;269    
;;;270        if (end_block == 0)
000730  e3570000          CMP      r7,#0
000734  1a000006          BNE      |L1.1876|
;;;271            end_block = mtd->size / mtd->erasesize - 1;
000738  e285c008          ADD      r12,r5,#8
00073c  e89c1003          LDM      r12,{r0,r1,r12}
000740  e1a0200c          MOV      r2,r12
000744  e3a03000          MOV      r3,#0
000748  e1cd00f0          STRD     r0,r1,[sp,#0]
00074c  ebfffffe          BL       __aeabi_uldivmod
000750  e2507001          SUBS     r7,r0,#1
                  |L1.1876|
;;;272    
;;;273        if (end_block < start_block) {
000754  e1570009          CMP      r7,r9
000758  aa000002          BGE      |L1.1896|
;;;274            sysprintf("Bad start/end\n");
00075c  e28f0f6f          ADR      r0,|L1.2336|
000760  ebfffffe          BL       sysprintf
;;;275            goto err;
000764  ea000097          B        |L1.2504|
                  |L1.1896|
;;;276        }
;;;277    
;;;278        chip =  mtd->priv;
000768  e595b094          LDR      r11,[r5,#0x94]
;;;279    
;;;280        /* Check for any conflicts */
;;;281        yaffs_dev_rewind();
00076c  ebfffffe          BL       yaffs_dev_rewind
;;;282        while (1) {
000770  ea00001a          B        |L1.2016|
                  |L1.1908|
;;;283            chk = yaffs_next_dev();
000774  ebfffffe          BL       yaffs_next_dev
000778  e1a06000          MOV      r6,r0
;;;284            if (!chk)
00077c  e3560000          CMP      r6,#0
000780  1a000000          BNE      |L1.1928|
;;;285                break;
000784  ea000016          B        |L1.2020|
                  |L1.1928|
;;;286            if (strcmp(chk->param.name, mp) == 0) {
000788  e1a0100a          MOV      r1,r10
00078c  e5960000          LDR      r0,[r6,#0]
000790  ebfffffe          BL       strcmp
000794  e3500000          CMP      r0,#0
000798  1a000002          BNE      |L1.1960|
;;;287                sysprintf("Mount point name already used\n");
00079c  e28f0f63          ADR      r0,|L1.2352|
0007a0  ebfffffe          BL       sysprintf
;;;288                goto err;
0007a4  ea000087          B        |L1.2504|
                  |L1.1960|
;;;289            }
;;;290            if (chk->driver_context == mtd &&
0007a8  e5960098          LDR      r0,[r6,#0x98]
0007ac  e1500005          CMP      r0,r5
0007b0  1a00000a          BNE      |L1.2016|
;;;291                    yaffs_regions_overlap(
0007b4  e1a03007          MOV      r3,r7
0007b8  e1a02009          MOV      r2,r9
0007bc  e5960014          LDR      r0,[r6,#0x14]
0007c0  e5961018          LDR      r1,[r6,#0x18]
0007c4  ebfffffe          BL       yaffs_regions_overlap
0007c8  e3500000          CMP      r0,#0
0007cc  0a000003          BEQ      |L1.2016|
;;;292                        chk->param.start_block, chk->param.end_block,
;;;293                        start_block, end_block)) {
;;;294                sysprintf("Region overlaps with partition %s\n",
0007d0  e28f0f5e          ADR      r0,|L1.2384|
0007d4  e5961000          LDR      r1,[r6,#0]
0007d8  ebfffffe          BL       sysprintf
;;;295                          chk->param.name);
;;;296                goto err;
0007dc  ea000079          B        |L1.2504|
                  |L1.2016|
0007e0  eaffffe3          B        |L1.1908|
                  |L1.2020|
0007e4  e1a00000          MOV      r0,r0                 ;285
;;;297            }
;;;298    
;;;299        }
;;;300    
;;;301        /* Seems same, so configure */
;;;302        memset(dev, 0, sizeof(*dev));
0007e8  e59f10f8          LDR      r1,|L1.2280|
0007ec  e1a00004          MOV      r0,r4
0007f0  ebfffffe          BL       __aeabi_memclr4
;;;303        dev->param.name = mp;
0007f4  e584a000          STR      r10,[r4,#0]
;;;304        dev->driver_context = mtd;
0007f8  e5845098          STR      r5,[r4,#0x98]
;;;305        dev->param.start_block = start_block;
0007fc  e5849014          STR      r9,[r4,#0x14]
;;;306        dev->param.end_block = end_block;
000800  e5847018          STR      r7,[r4,#0x18]
;;;307        dev->param.chunks_per_block = mtd->erasesize / mtd->writesize;
000804  e1c501d0          LDRD     r0,r1,[r5,#0x10]
000808  ebfffffe          BL       __aeabi_uidivmod
00080c  e584000c          STR      r0,[r4,#0xc]
;;;308        dev->param.total_bytes_per_chunk = mtd->writesize;
000810  e5950014          LDR      r0,[r5,#0x14]
000814  e5840008          STR      r0,[r4,#8]
;;;309        dev->param.is_yaffs2 = 1;
000818  e3a00001          MOV      r0,#1
00081c  e5840030          STR      r0,[r4,#0x30]
;;;310        dev->param.use_nand_ecc = 1;
000820  e5840024          STR      r0,[r4,#0x24]
;;;311        dev->param.n_reserved_blocks = 5;
000824  e3a00005          MOV      r0,#5
000828  e584001c          STR      r0,[r4,#0x1c]
;;;312        if (chip->ecc.layout->oobavail <= sizeof(struct yaffs_packed_tags2))
00082c  e59b00b8          LDR      r0,[r11,#0xb8]
000830  e5900204          LDR      r0,[r0,#0x204]
000834  e350001c          CMP      r0,#0x1c
000838  8a000001          BHI      |L1.2116|
;;;313            dev->param.inband_tags = 1;
00083c  e3a00001          MOV      r0,#1
000840  e5840004          STR      r0,[r4,#4]
                  |L1.2116|
;;;314        dev->param.n_caches = 10;
000844  e3a0000a          MOV      r0,#0xa
000848  e5840020          STR      r0,[r4,#0x20]
;;;315        dev->param.write_chunk_tags_fn = nandmtd2_write_chunk_tags;
00084c  e59f0120          LDR      r0,|L1.2420|
000850  e5840058          STR      r0,[r4,#0x58]
;;;316        dev->param.read_chunk_tags_fn = nandmtd2_read_chunk_tags;
000854  e59f011c          LDR      r0,|L1.2424|
000858  e584005c          STR      r0,[r4,#0x5c]
;;;317        dev->param.erase_fn = nandmtd_EraseBlockInNAND;
00085c  e59f0118          LDR      r0,|L1.2428|
000860  e584004c          STR      r0,[r4,#0x4c]
;;;318        dev->param.initialise_flash_fn = nandmtd_InitialiseNAND;
000864  e59f0114          LDR      r0,|L1.2432|
000868  e5840050          STR      r0,[r4,#0x50]
;;;319        dev->param.bad_block_fn = nandmtd2_MarkNANDBlockBad;
00086c  e59f0110          LDR      r0,|L1.2436|
000870  e5840060          STR      r0,[r4,#0x60]
;;;320        dev->param.query_block_fn = nandmtd2_QueryNANDBlock;
000874  e59f010c          LDR      r0,|L1.2440|
000878  e5840064          STR      r0,[r4,#0x64]
;;;321    
;;;322        yaffs_add_device(dev);
00087c  e1a00004          MOV      r0,r4
000880  ebfffffe          BL       yaffs_add_device
;;;323    
;;;324        sysprintf("Configures yaffs mount %s: dev %d start block %d, end block %d %s\n",
000884  e5940004          LDR      r0,[r4,#4]
000888  e3500000          CMP      r0,#0
00088c  0a000043          BEQ      |L1.2464|
;;;325                  dev->param.name, flash_dev, start_block, end_block,
;;;326                  dev->param.inband_tags ? "using inband tags" : "");
000890  e28f00f4          ADR      r0,|L1.2444|
000894  ea000042          B        |L1.2468|
                  |L1.2200|
                          DCD      nand_info
                  |L1.2204|
00089c  7573696e          DCB      "using inband tags, ",0
0008a0  6720696e
0008a4  62616e64
0008a8  20746167
0008ac  732c2000
                  |L1.2224|
0008b0  252d3373          DCB      "%-3s %5d 0x%05x 0x%05x %s",0
0008b4  20253564
0008b8  20307825
0008bc  30357820
0008c0  30782530
0008c4  35782025
0008c8  7300    
0008ca  00                DCB      0
0008cb  00                DCB      0
                  |L1.2252|
0008cc  6e6f7420          DCB      "not mounted\n"
0008d0  6d6f756e
0008d4  7465640a
                  |L1.2264|
0008d8  00                DCB      0
0008d9  00                DCB      0
0008da  00                DCB      0
0008db  00                DCB      0
                  |L1.2268|
0008dc  66726565          DCB      "free 0x%x\n",0
0008e0  20307825
0008e4  780a00  
0008e7  00                DCB      0
                  |L1.2280|
                          DCD      0x00000e68
                  |L1.2284|
0008ec  4661696c          DCB      "Failed to allocate memory\n",0
0008f0  65642074
0008f4  6f20616c
0008f8  6c6f6361
0008fc  7465206d
000900  656d6f72
000904  790a00  
000907  00                DCB      0
                  |L1.2312|
000908  466c6173          DCB      "Flash device invalid\n",0
00090c  68206465
000910  76696365
000914  20696e76
000918  616c6964
00091c  0a00    
00091e  00                DCB      0
00091f  00                DCB      0
                  |L1.2336|
000920  42616420          DCB      "Bad start/end\n",0
000924  73746172
000928  742f656e
00092c  640a00  
00092f  00                DCB      0
                  |L1.2352|
000930  4d6f756e          DCB      "Mount point name already used\n",0
000934  7420706f
000938  696e7420
00093c  6e616d65
000940  20616c72
000944  65616479
000948  20757365
00094c  640a00  
00094f  00                DCB      0
                  |L1.2384|
000950  52656769          DCB      "Region overlaps with partition %s\n",0
000954  6f6e206f
000958  7665726c
00095c  61707320
000960  77697468
000964  20706172
000968  74697469
00096c  6f6e2025
000970  730a00  
000973  00                DCB      0
                  |L1.2420|
                          DCD      nandmtd2_write_chunk_tags
                  |L1.2424|
                          DCD      nandmtd2_read_chunk_tags
                  |L1.2428|
                          DCD      nandmtd_EraseBlockInNAND
                  |L1.2432|
                          DCD      nandmtd_InitialiseNAND
                  |L1.2436|
                          DCD      nandmtd2_MarkNANDBlockBad
                  |L1.2440|
                          DCD      nandmtd2_QueryNANDBlock
                  |L1.2444|
00098c  7573696e          DCB      "using inband tags",0
000990  6720696e
000994  62616e64
000998  20746167
00099c  7300    
00099e  00                DCB      0
00099f  00                DCB      0
                  |L1.2464|
0009a0  e24f00d0          ADR      r0,|L1.2264|
                  |L1.2468|
0009a4  e58d0004          STR      r0,[sp,#4]
0009a8  e58d7000          STR      r7,[sp,#0]
0009ac  e1a03009          MOV      r3,r9
0009b0  e1a02008          MOV      r2,r8
0009b4  e59f0138          LDR      r0,|L1.2804|
0009b8  e5941000          LDR      r1,[r4,#0]
0009bc  ebfffffe          BL       sysprintf
                  |L1.2496|
;;;327        return;
;;;328    
;;;329    err:
;;;330        yaffs_free(dev);
;;;331        yaffs_free(mp);
;;;332    }
0009c0  e28dd01c          ADD      sp,sp,#0x1c
0009c4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2504|
0009c8  e1a00000          MOV      r0,r0                 ;329
0009cc  e1a00004          MOV      r0,r4                 ;330
0009d0  ebfffffe          BL       yaffs_free
0009d4  e1a0000a          MOV      r0,r10                ;331
0009d8  ebfffffe          BL       yaffs_free
0009dc  e1a00000          MOV      r0,r0
0009e0  eafffff6          B        |L1.2496|
;;;333    static void pinInit(void)
                          ENDP

                  pinInit PROC
0009e4  e3a0020b          MOV      r0,#0xb0000000
;;;334    {
;;;335        /* enable FMI NAND */
;;;336        outpw(REG_CLK_HCLKEN, (inpw(REG_CLK_HCLKEN) | 0x300000));
0009e8  e5900210          LDR      r0,[r0,#0x210]
0009ec  e3800603          ORR      r0,r0,#0x300000
0009f0  e3a0120b          MOV      r1,#0xb0000000
0009f4  e5810210          STR      r0,[r1,#0x210]
;;;337    
;;;338        /* select NAND function pins */
;;;339        if (inpw(REG_SYS_PWRON) & 0x08000000) {
0009f8  e3a0020b          MOV      r0,#0xb0000000
0009fc  e5900004          LDR      r0,[r0,#4]
000a00  e3100302          TST      r0,#0x8000000
000a04  0a000004          BEQ      |L1.2588|
;;;340            /* Set GPI1~15 for NAND */
;;;341            outpw(REG_SYS_GPI_MFPL, 0x55555550);
000a08  e59f00e8          LDR      r0,|L1.2808|
000a0c  e58100b0          STR      r0,[r1,#0xb0]
;;;342            outpw(REG_SYS_GPI_MFPH, 0x55555555);
000a10  e1800240          ORR      r0,r0,r0,ASR #4
000a14  e58100b4          STR      r0,[r1,#0xb4]
000a18  ea000004          B        |L1.2608|
                  |L1.2588|
;;;343        } else {
;;;344            /* Set GPC0~14 for NAND */
;;;345            outpw(REG_SYS_GPC_MFPL, 0x55555555);
000a1c  e59f00d8          LDR      r0,|L1.2812|
000a20  e3a0120b          MOV      r1,#0xb0000000
000a24  e5810080          STR      r0,[r1,#0x80]
;;;346            outpw(REG_SYS_GPC_MFPH, 0x05555555);
000a28  e1a00240          ASR      r0,r0,#4
000a2c  e5810084          STR      r0,[r1,#0x84]
                  |L1.2608|
;;;347        }
;;;348    }
000a30  e12fff1e          BX       lr
;;;349    static BOOL hwInit(void)
                          ENDP

                  hwInit PROC
000a34  e92d4010          PUSH     {r4,lr}
;;;350    {   
;;;351        pinInit();
000a38  ebfffffe          BL       pinInit
;;;352        nand_init();
000a3c  ebfffffe          BL       nand_init
;;;353        //cmd_yaffs_devconfig(mtpoint, 0, 0xb0, 0x3ff);
;;;354        cmd_yaffs_devconfig(mtpoint, 0, 64, 1023);
000a40  e59f30b8          LDR      r3,|L1.2816|
000a44  e3a02040          MOV      r2,#0x40
000a48  e3a01000          MOV      r1,#0
000a4c  e59f00b0          LDR      r0,|L1.2820|
000a50  ebfffffe          BL       cmd_yaffs_devconfig
;;;355        //cmd_yaffs_dev_ls();
;;;356        yaffs_mount(mtpoint);
000a54  e59f00a8          LDR      r0,|L1.2820|
000a58  ebfffffe          BL       yaffs_mount
;;;357        cmd_yaffs_dev_ls();
000a5c  ebfffffe          BL       cmd_yaffs_dev_ls
;;;358        return TRUE;
000a60  e3a00001          MOV      r0,#1
;;;359    }
000a64  e8bd8010          POP      {r4,pc}
;;;360    static BOOL swInit(void)
                          ENDP

                  swInit PROC
000a68  e3a00001          MOV      r0,#1
;;;361    {   
;;;362        //xTaskCreate( vYaffs2DrvTestTask, "vYaffs2DrvTestTask", 8*1024, NULL, 1, NULL); 
;;;363        return TRUE;
;;;364    }
000a6c  e12fff1e          BX       lr
;;;365    /*-----------------------------------------*/
                          ENDP

                  Yaffs2DrvInit PROC
;;;368    
;;;369    BOOL Yaffs2DrvInit(void)
000a70  e92d4010          PUSH     {r4,lr}
;;;370    {
;;;371        //int i;
;;;372        sysprintf("Yaffs2DrvInit!!\n");
000a74  e28f008c          ADR      r0,|L1.2824|
000a78  ebfffffe          BL       sysprintf
;;;373        if(hwInit() == FALSE)
000a7c  ebfffffe          BL       hwInit
000a80  e3500000          CMP      r0,#0
000a84  1a000003          BNE      |L1.2712|
;;;374        {
;;;375            sysprintf("Yaffs2DrvInit ERROR (hwInit false)!!\n");
000a88  e28f008c          ADR      r0,|L1.2844|
000a8c  ebfffffe          BL       sysprintf
;;;376            return FALSE;
000a90  e3a00000          MOV      r0,#0
                  |L1.2708|
;;;377        }
;;;378        if(swInit() == FALSE)
;;;379        {
;;;380            sysprintf("Yaffs2DrvInit ERROR (swInit false)!!\n");
;;;381            return FALSE;
;;;382        }       
;;;383        //cmd_yaffs_mkdir("user");
;;;384        sysprintf("Yaffs2DrvInit OK!!\n"); 
;;;385        cmd_yaffs_ls("/", 1);
;;;386        
;;;387        return TRUE;
;;;388    }
000a94  e8bd8010          POP      {r4,pc}
                  |L1.2712|
000a98  ebfffffe          BL       swInit
000a9c  e3500000          CMP      r0,#0                 ;378
000aa0  1a000003          BNE      |L1.2740|
000aa4  e28f0098          ADR      r0,|L1.2884|
000aa8  ebfffffe          BL       sysprintf
000aac  e3a00000          MOV      r0,#0                 ;381
000ab0  eafffff7          B        |L1.2708|
                  |L1.2740|
000ab4  e28f00b0          ADR      r0,|L1.2924|
000ab8  ebfffffe          BL       sysprintf
000abc  e3a01001          MOV      r1,#1                 ;385
000ac0  e28f00b8          ADR      r0,|L1.2944|
000ac4  ebfffffe          BL       cmd_yaffs_ls
000ac8  e3a00001          MOV      r0,#1                 ;387
000acc  eafffff0          B        |L1.2708|
;;;389    void Yaffs2ListFileEx (char* dir)
                          ENDP

                  Yaffs2ListFileEx PROC
000ad0  e92d4010          PUSH     {r4,lr}
;;;390    {
000ad4  e1a04000          MOV      r4,r0
;;;391        cmd_yaffs_ls(dir, 1);
000ad8  e3a01001          MOV      r1,#1
000adc  e1a00004          MOV      r0,r4
000ae0  ebfffffe          BL       cmd_yaffs_ls
;;;392    }
000ae4  e8bd8010          POP      {r4,pc}
;;;393    const char *Yaffs2ErrorStr(void)
                          ENDP

                  Yaffs2ErrorStr PROC
000ae8  e92d4010          PUSH     {r4,lr}
;;;394    {
;;;395        return yaffs_error_str();
000aec  ebfffffe          BL       yaffs_error_str
;;;396    }
000af0  e8bd8010          POP      {r4,pc}
;;;397    
                          ENDP

                  |L1.2804|
                          DCD      ||.constdata||
                  |L1.2808|
                          DCD      0x55555550
                  |L1.2812|
                          DCD      0x55555555
                  |L1.2816|
                          DCD      0x000003ff
                  |L1.2820|
                          DCD      mtpoint
                  |L1.2824|
000b08  59616666          DCB      "Yaffs2DrvInit!!\n",0
000b0c  73324472
000b10  76496e69
000b14  7421210a
000b18  00      
000b19  00                DCB      0
000b1a  00                DCB      0
000b1b  00                DCB      0
                  |L1.2844|
000b1c  59616666          DCB      "Yaffs2DrvInit ERROR (hwInit false)!!\n",0
000b20  73324472
000b24  76496e69
000b28  74204552
000b2c  524f5220
000b30  28687749
000b34  6e697420
000b38  66616c73
000b3c  65292121
000b40  0a00    
000b42  00                DCB      0
000b43  00                DCB      0
                  |L1.2884|
000b44  59616666          DCB      "Yaffs2DrvInit ERROR (swInit false)!!\n",0
000b48  73324472
000b4c  76496e69
000b50  74204552
000b54  524f5220
000b58  28737749
000b5c  6e697420
000b60  66616c73
000b64  65292121
000b68  0a00    
000b6a  00                DCB      0
000b6b  00                DCB      0
                  |L1.2924|
000b6c  59616666          DCB      "Yaffs2DrvInit OK!!\n",0
000b70  73324472
000b74  76496e69
000b78  74204f4b
000b7c  21210a00
                  |L1.2944|
000b80  2f00              DCB      "/",0
000b82  00                DCB      0
000b83  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  436f6e66          DCB      0x43,0x6f,0x6e,0x66
000004  69677572          DCB      0x69,0x67,0x75,0x72
000008  65732079          DCB      0x65,0x73,0x20,0x79
00000c  61666673          DCB      0x61,0x66,0x66,0x73
000010  206d6f75          DCB      0x20,0x6d,0x6f,0x75
000014  6e742025          DCB      0x6e,0x74,0x20,0x25
000018  733a2064          DCB      0x73,0x3a,0x20,0x64
00001c  65762025          DCB      0x65,0x76,0x20,0x25
000020  64207374          DCB      0x64,0x20,0x73,0x74
000024  61727420          DCB      0x61,0x72,0x74,0x20
000028  626c6f63          DCB      0x62,0x6c,0x6f,0x63
00002c  6b202564          DCB      0x6b,0x20,0x25,0x64
000030  2c20656e          DCB      0x2c,0x20,0x65,0x6e
000034  6420626c          DCB      0x64,0x20,0x62,0x6c
000038  6f636b20          DCB      0x6f,0x63,0x6b,0x20
00003c  25642025          DCB      0x25,0x64,0x20,0x25
000040  730a00            DCB      0x73,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  mtpoint
000000  2f00              DCB      0x2f,0x00
