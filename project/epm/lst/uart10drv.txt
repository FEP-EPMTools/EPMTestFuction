; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uart10drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart10drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uart10drv.crf src\UserDrv\uart10drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART10SetRS232Power PROC
;;;239    }
;;;240    BOOL UART10SetRS232Power(BOOL flag)
000000  e92d4010          PUSH     {r4,lr}
;;;241    {
000004  e1a04000          MOV      r4,r0
;;;242        //if (GPIO_ReadBit(GPIOJ, BIT0)) //if SW6 F1 high, test funtion mode
;;;243        if(readMBtestFunc())
000008  ebfffffe          BL       readMBtestFunc
00000c  e3500000          CMP      r0,#0
000010  0a000009          BEQ      |L1.60|
;;;244        {
;;;245            if(flag)
000014  e3540000          CMP      r4,#0
000018  0a000003          BEQ      |L1.44|
;;;246            {         
;;;247                GPIO_ClrBit(RS232_POWER_PORT, RS232_POWER_PIN);    
00001c  e3a01b02          MOV      r1,#0x800
000020  e3a00040          MOV      r0,#0x40
000024  ebfffffe          BL       GPIO_ClrBit
000028  ea00000c          B        |L1.96|
                  |L1.44|
;;;248                   
;;;249            }
;;;250            else
;;;251            {
;;;252                GPIO_SetBit(RS232_POWER_PORT, RS232_POWER_PIN);      
00002c  e3a01b02          MOV      r1,#0x800
000030  e3a00040          MOV      r0,#0x40
000034  ebfffffe          BL       GPIO_SetBit
000038  ea000008          B        |L1.96|
                  |L1.60|
;;;253            }
;;;254        }
;;;255        else
;;;256        {
;;;257            if(flag)
00003c  e3540000          CMP      r4,#0
000040  0a000003          BEQ      |L1.84|
;;;258            {
;;;259                GPIO_SetBit(POWER_PORT_50V, POWER_PIN_50V);    
000044  e3a01010          MOV      r1,#0x10
000048  e3a00040          MOV      r0,#0x40
00004c  ebfffffe          BL       GPIO_SetBit
000050  ea000002          B        |L1.96|
                  |L1.84|
;;;260            }
;;;261            else
;;;262            {
;;;263                GPIO_ClrBit(POWER_PORT_50V, POWER_PIN_50V);      
000054  e3a01010          MOV      r1,#0x10
000058  e3a00040          MOV      r0,#0x40
00005c  ebfffffe          BL       GPIO_ClrBit
                  |L1.96|
;;;264            }
;;;265        }
;;;266        return TRUE;
000060  e3a00001          MOV      r0,#1
;;;267    }
000064  e8bd8010          POP      {r4,pc}
;;;268    INT UART10Ioctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
                          ENDP

                  UART10SetPower PROC
;;;192    
;;;193    BOOL UART10SetPower(BOOL flag)
000068  e92d4010          PUSH     {r4,lr}
;;;194    {
00006c  e1a04000          MOV      r4,r0
;;;195        //if (GPIO_ReadBit(GPIOJ, BIT0)) //if SW6 F1 high, test funtion mode
;;;196        if(readMBtestFunc())
000070  ebfffffe          BL       readMBtestFunc
000074  e3500000          CMP      r0,#0
000078  0a000013          BEQ      |L1.204|
;;;197        {
;;;198            if(flag)
00007c  e3540000          CMP      r4,#0
000080  0a000008          BEQ      |L1.168|
;;;199            {         
;;;200                //GPIO_SetBit(POWER_PORT, POWER_PIN); 
;;;201                outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<26)) | (0x1<<26));    
000084  e3a0020b          MOV      r0,#0xb0000000
000088  e5900218          LDR      r0,[r0,#0x218]
00008c  e3800301          ORR      r0,r0,#0x4000000
000090  e3a0120b          MOV      r1,#0xb0000000
000094  e5810218          STR      r0,[r1,#0x218]
;;;202                GPIO_ClrBit(POWER_PORT_33V, POWER_PIN_33V);            
000098  e3a01008          MOV      r1,#8
00009c  e3a00040          MOV      r0,#0x40
0000a0  ebfffffe          BL       GPIO_ClrBit
0000a4  ea000049          B        |L1.464|
                  |L1.168|
;;;203            }
;;;204            else
;;;205            {
;;;206                //GPIO_ClrBit(POWER_PORT, POWER_PIN);    
;;;207                outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<26)) | (0x0<<26)); 
0000a8  e3a0020b          MOV      r0,#0xb0000000
0000ac  e5900218          LDR      r0,[r0,#0x218]
0000b0  e3c00301          BIC      r0,r0,#0x4000000
0000b4  e3a0120b          MOV      r1,#0xb0000000
0000b8  e5810218          STR      r0,[r1,#0x218]
;;;208                GPIO_SetBit(POWER_PORT_33V, POWER_PIN_33V);            
0000bc  e3a01008          MOV      r1,#8
0000c0  e3a00040          MOV      r0,#0x40
0000c4  ebfffffe          BL       GPIO_SetBit
0000c8  ea000040          B        |L1.464|
                  |L1.204|
;;;209            }
;;;210        }
;;;211        else
;;;212        {
;;;213            if(flag)
0000cc  e3540000          CMP      r4,#0
0000d0  0a000023          BEQ      |L1.356|
;;;214            {
;;;215                // GPB12, 13, 14, 15 //TX, RX, RTS, CTS
;;;216                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<16)) | (0x9<<16));
0000d4  e3a0020b          MOV      r0,#0xb0000000
0000d8  e590007c          LDR      r0,[r0,#0x7c]
0000dc  e3c0080f          BIC      r0,r0,#0xf0000
0000e0  e3800809          ORR      r0,r0,#0x90000
0000e4  e3a0120b          MOV      r1,#0xb0000000
0000e8  e581007c          STR      r0,[r1,#0x7c]
;;;217                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<20)) | (0x9<<20));
0000ec  e3a0020b          MOV      r0,#0xb0000000
0000f0  e590007c          LDR      r0,[r0,#0x7c]
0000f4  e3c0060f          BIC      r0,r0,#0xf00000
0000f8  e3800609          ORR      r0,r0,#0x900000
0000fc  e581007c          STR      r0,[r1,#0x7c]
;;;218                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<24)) | (0x9<<24));
000100  e3a0020b          MOV      r0,#0xb0000000
000104  e590007c          LDR      r0,[r0,#0x7c]
000108  e3c0040f          BIC      r0,r0,#0xf000000
00010c  e3800409          ORR      r0,r0,#0x9000000
000110  e581007c          STR      r0,[r1,#0x7c]
;;;219                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xFu<<28)) | (0x9u<<28));
000114  e3a0020b          MOV      r0,#0xb0000000
000118  e590007c          LDR      r0,[r0,#0x7c]
00011c  e3c0020f          BIC      r0,r0,#0xf0000000
000120  e3800209          ORR      r0,r0,#0x90000000
000124  e581007c          STR      r0,[r1,#0x7c]
;;;220                GPIO_ClrBit(POWER_PORT_33V, POWER_PIN_33V);
000128  e3a01008          MOV      r1,#8
00012c  e3a00040          MOV      r0,#0x40
000130  ebfffffe          BL       GPIO_ClrBit
;;;221                GPIO_SetBit(POWER_PORT_12V, POWER_PIN_12V);
000134  e3a01040          MOV      r1,#0x40
000138  e3a00d06          MOV      r0,#0x180
00013c  ebfffffe          BL       GPIO_SetBit
;;;222                outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<26)) | (0x1<<26));
000140  e3a0020b          MOV      r0,#0xb0000000
000144  e5900218          LDR      r0,[r0,#0x218]
000148  e3800301          ORR      r0,r0,#0x4000000
00014c  e3a0120b          MOV      r1,#0xb0000000
000150  e5810218          STR      r0,[r1,#0x218]
;;;223                GPIO_SetBit(BV1000_TEN_PORT, BV1000_TEN_PIN);
000154  e3a01901          MOV      r1,#0x4000
000158  e3a00000          MOV      r0,#0
00015c  ebfffffe          BL       GPIO_SetBit
000160  ea00001a          B        |L1.464|
                  |L1.356|
;;;224            }
;;;225            else
;;;226            {
;;;227                GPIO_ClrBit(BV1000_TEN_PORT, BV1000_TEN_PIN);
000164  e3a01901          MOV      r1,#0x4000
000168  e3a00000          MOV      r0,#0
00016c  ebfffffe          BL       GPIO_ClrBit
;;;228               // GPIO_ClrBit(POWER_PORT_12V, POWER_PIN_12V);   not need close 12V modify by Steven 20200508
;;;229                GPIO_SetBit(POWER_PORT_33V, POWER_PIN_33V);
000170  e3a01008          MOV      r1,#8
000174  e3a00040          MOV      r0,#0x40
000178  ebfffffe          BL       GPIO_SetBit
;;;230                outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<26)) | (0x0<<26));
00017c  e3a0020b          MOV      r0,#0xb0000000
000180  e5900218          LDR      r0,[r0,#0x218]
000184  e3c00301          BIC      r0,r0,#0x4000000
000188  e3a0120b          MOV      r1,#0xb0000000
00018c  e5810218          STR      r0,[r1,#0x218]
;;;231                // GPB12, 13, 14, 15 //TX, RX, RTS, CTS
;;;232                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<16)) | (0<<16));
000190  e3a0020b          MOV      r0,#0xb0000000
000194  e590007c          LDR      r0,[r0,#0x7c]
000198  e3c0080f          BIC      r0,r0,#0xf0000
00019c  e581007c          STR      r0,[r1,#0x7c]
;;;233                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<20)) | (0<<20));
0001a0  e3a0020b          MOV      r0,#0xb0000000
0001a4  e590007c          LDR      r0,[r0,#0x7c]
0001a8  e3c0060f          BIC      r0,r0,#0xf00000
0001ac  e581007c          STR      r0,[r1,#0x7c]
;;;234                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<24)) | (0<<24));
0001b0  e3a0020b          MOV      r0,#0xb0000000
0001b4  e590007c          LDR      r0,[r0,#0x7c]
0001b8  e3c0040f          BIC      r0,r0,#0xf000000
0001bc  e581007c          STR      r0,[r1,#0x7c]
;;;235                outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xFu<<28)) | (0<<28));
0001c0  e3a0020b          MOV      r0,#0xb0000000
0001c4  e590007c          LDR      r0,[r0,#0x7c]
0001c8  e3c0020f          BIC      r0,r0,#0xf0000000
0001cc  e581007c          STR      r0,[r1,#0x7c]
                  |L1.464|
;;;236            }                
;;;237        }
;;;238        return TRUE;
0001d0  e3a00001          MOV      r0,#1
;;;239    }
0001d4  e8bd8010          POP      {r4,pc}
;;;240    BOOL UART10SetRS232Power(BOOL flag)
                          ENDP

                  hwInit PROC
;;;62     /*-----------------------------------------*/
;;;63     static BOOL hwInit(UINT32 baudRate)
0001d8  e92d4070          PUSH     {r4-r6,lr}
;;;64     {
0001dc  e1a05000          MOV      r5,r0
;;;65         int retval;
;;;66         outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
0001e0  e3a0020b          MOV      r0,#0xb0000000
0001e4  e5900218          LDR      r0,[r0,#0x218]
0001e8  e3800008          ORR      r0,r0,#8
0001ec  e3a0120b          MOV      r1,#0xb0000000
0001f0  e5810218          STR      r0,[r1,#0x218]
;;;67         
;;;68         // GPB12, 13, 14, 15 //TX, RX, RTS, CTS
;;;69         outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<16)) | (0x9<<16));
0001f4  e3a0020b          MOV      r0,#0xb0000000
0001f8  e590007c          LDR      r0,[r0,#0x7c]
0001fc  e3c0080f          BIC      r0,r0,#0xf0000
000200  e3800809          ORR      r0,r0,#0x90000
000204  e581007c          STR      r0,[r1,#0x7c]
;;;70         outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<20)) | (0x9<<20));
000208  e3a0020b          MOV      r0,#0xb0000000
00020c  e590007c          LDR      r0,[r0,#0x7c]
000210  e3c0060f          BIC      r0,r0,#0xf00000
000214  e3800609          ORR      r0,r0,#0x900000
000218  e581007c          STR      r0,[r1,#0x7c]
;;;71         outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<24)) | (0x9<<24));
00021c  e3a0020b          MOV      r0,#0xb0000000
000220  e590007c          LDR      r0,[r0,#0x7c]
000224  e3c0040f          BIC      r0,r0,#0xf000000
000228  e3800409          ORR      r0,r0,#0x9000000
00022c  e581007c          STR      r0,[r1,#0x7c]
;;;72         outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xFu<<28)) | (0x9u<<28));     
000230  e3a0020b          MOV      r0,#0xb0000000
000234  e590007c          LDR      r0,[r0,#0x7c]
000238  e3c0020f          BIC      r0,r0,#0xf0000000
00023c  e3800209          ORR      r0,r0,#0x90000000
000240  e581007c          STR      r0,[r1,#0x7c]
;;;73         
;;;74         //if (GPIO_ReadBit(GPIOJ, BIT0)) //if SW6 F1 high, test funtion mode
;;;75         if (readMBtestFunc())
000244  ebfffffe          BL       readMBtestFunc
000248  e3500000          CMP      r0,#0
00024c  0a000018          BEQ      |L1.692|
;;;76         {
;;;77             //Power pin GPB10
;;;78             outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xF<<8)) | (0x0<<8));
000250  e3a0020b          MOV      r0,#0xb0000000
000254  e590007c          LDR      r0,[r0,#0x7c]
000258  e3c00c0f          BIC      r0,r0,#0xf00
00025c  e3a0120b          MOV      r1,#0xb0000000
000260  e581007c          STR      r0,[r1,#0x7c]
;;;79             GPIO_OpenBit(POWER_PORT, POWER_PIN, DIR_OUTPUT, NO_PULL_UP); 
000264  e3a03000          MOV      r3,#0
000268  e3a02001          MOV      r2,#1
00026c  e3a01b01          MOV      r1,#0x400
000270  e3a00040          MOV      r0,#0x40
000274  ebfffffe          BL       GPIO_OpenBit
;;;80             UART10SetPower(FALSE);
000278  e3a00000          MOV      r0,#0
00027c  ebfffffe          BL       UART10SetPower
;;;81             
;;;82             //RS232 Power pin GPB11
;;;83             outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xFu<<12)) | (0x0u<<12));
000280  e3a0020b          MOV      r0,#0xb0000000
000284  e590007c          LDR      r0,[r0,#0x7c]
000288  e3c00a0f          BIC      r0,r0,#0xf000
00028c  e3a0120b          MOV      r1,#0xb0000000
000290  e581007c          STR      r0,[r1,#0x7c]
;;;84             GPIO_OpenBit(RS232_POWER_PORT, RS232_POWER_PIN, DIR_OUTPUT, NO_PULL_UP); 
000294  e3a03000          MOV      r3,#0
000298  e3a02001          MOV      r2,#1
00029c  e3a01b02          MOV      r1,#0x800
0002a0  e3a00040          MOV      r0,#0x40
0002a4  ebfffffe          BL       GPIO_OpenBit
;;;85             UART10SetRS232Power(FALSE);
0002a8  e3a00000          MOV      r0,#0
0002ac  ebfffffe          BL       UART10SetRS232Power
0002b0  ea00001f          B        |L1.820|
                  |L1.692|
;;;86         }
;;;87         else
;;;88         {
;;;89             //5.0V Power pin GPB4
;;;90             outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xFu<<16)) | (0x0u<<16));
0002b4  e3a0020b          MOV      r0,#0xb0000000
0002b8  e5900078          LDR      r0,[r0,#0x78]
0002bc  e3c0080f          BIC      r0,r0,#0xf0000
0002c0  e3a0120b          MOV      r1,#0xb0000000
0002c4  e5810078          STR      r0,[r1,#0x78]
;;;91             GPIO_OpenBit(POWER_PORT_50V, POWER_PIN_50V, DIR_OUTPUT, NO_PULL_UP); 
0002c8  e3a03000          MOV      r3,#0
0002cc  e3a02001          MOV      r2,#1
0002d0  e3a01010          MOV      r1,#0x10
0002d4  e3a00040          MOV      r0,#0x40
0002d8  ebfffffe          BL       GPIO_OpenBit
;;;92             UART10SetRS232Power(FALSE);
0002dc  e3a00000          MOV      r0,#0
0002e0  ebfffffe          BL       UART10SetRS232Power
;;;93     
;;;94             //3.3V Power pin GPB3
;;;95             outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xFu<<12)) | (0x0u<<12));
0002e4  e3a0020b          MOV      r0,#0xb0000000
0002e8  e5900078          LDR      r0,[r0,#0x78]
0002ec  e3c00a0f          BIC      r0,r0,#0xf000
0002f0  e3a0120b          MOV      r1,#0xb0000000
0002f4  e5810078          STR      r0,[r1,#0x78]
;;;96             GPIO_OpenBit(POWER_PORT_33V, POWER_PIN_33V, DIR_OUTPUT, NO_PULL_UP); 
0002f8  e3a03000          MOV      r3,#0
0002fc  e3a02001          MOV      r2,#1
000300  e3a01008          MOV      r1,#8
000304  e3a00040          MOV      r0,#0x40
000308  ebfffffe          BL       GPIO_OpenBit
;;;97             /*
;;;98             //12.0V Power pin GPG6
;;;99             outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xFu<<24)) | (0x0u<<24));
;;;100            GPIO_OpenBit(POWER_PORT_12V, POWER_PIN_12V, DIR_OUTPUT, NO_PULL_UP);
;;;101            UART10SetPower(FALSE);
;;;102            */ //already setting 12V in main function modify by Steven 20200508
;;;103            //TEN Pin GPA14
;;;104            outpw(REG_SYS_GPA_MFPH,(inpw(REG_SYS_GPA_MFPH) & ~(0xFu<<24)) | (0x0u<<24));
00030c  e3a0020b          MOV      r0,#0xb0000000
000310  e5900074          LDR      r0,[r0,#0x74]
000314  e3c0040f          BIC      r0,r0,#0xf000000
000318  e3a0120b          MOV      r1,#0xb0000000
00031c  e5810074          STR      r0,[r1,#0x74]
;;;105            GPIO_OpenBit(BV1000_TEN_PORT, BV1000_TEN_PIN, DIR_OUTPUT, NO_PULL_UP);
000320  e3a03000          MOV      r3,#0
000324  e3a02001          MOV      r2,#1
000328  e3a01901          MOV      r1,#0x4000
00032c  e1a00003          MOV      r0,r3
000330  ebfffffe          BL       GPIO_OpenBit
                  |L1.820|
;;;106        }
;;;107        /* configure UART */
;;;108        param.uFreq = 12000000;
000334  e59f022c          LDR      r0,|L1.1384|
000338  e59f122c          LDR      r1,|L1.1388|
00033c  e5810000          STR      r0,[r1,#0]  ; param
;;;109        param.uBaudRate = baudRate;
000340  e2810000          ADD      r0,r1,#0
000344  e5805004          STR      r5,[r0,#4]  ; param
;;;110        param.ucUartNo = UARTA;
000348  e3a0000a          MOV      r0,#0xa
00034c  e5c10008          STRB     r0,[r1,#8]  ; param
;;;111        param.ucDataBits = DATA_BITS_8;
000350  e3a00003          MOV      r0,#3
000354  e5c10009          STRB     r0,[r1,#9]  ; param
;;;112        param.ucStopBits = STOP_BITS_1;
000358  e3a00000          MOV      r0,#0
00035c  e5c1000a          STRB     r0,[r1,#0xa]  ; param
;;;113        param.ucParity = PARITY_NONE;
000360  e5c1000b          STRB     r0,[r1,#0xb]  ; param
;;;114        param.ucRxTriggerLevel = UART_FCR_RFITL_1BYTE;
000364  e5c1000c          STRB     r0,[r1,#0xc]  ; param
;;;115        retval = uartOpen(&param);
000368  e2810000          ADD      r0,r1,#0
00036c  ebfffffe          BL       uartOpen
000370  e1a04000          MOV      r4,r0
;;;116        if(retval != 0) 
000374  e3540000          CMP      r4,#0
000378  0a000003          BEQ      |L1.908|
;;;117        {
;;;118            sysprintf("hwInit Open UART error!\n");
00037c  e28f0f7b          ADR      r0,|L1.1392|
000380  ebfffffe          BL       sysprintf
;;;119            return FALSE;
000384  e3a00000          MOV      r0,#0
                  |L1.904|
;;;120        }
;;;121    
;;;122        /* set TX interrupt mode */
;;;123        retval = uartIoctl(param.ucUartNo, UART_IOC_SETTXMODE, UARTPOLLMODE /*UARTINTMODE*/ , 0);
;;;124        if (retval != 0) 
;;;125        {
;;;126            sysprintf("hwInit Set TX interrupt mode fail!\n");
;;;127            return FALSE;
;;;128        }
;;;129    
;;;130        /* set RX interrupt mode */
;;;131        retval = uartIoctl(param.ucUartNo, UART_IOC_SETRXMODE, UARTINTMODE, 0);
;;;132        if (retval != 0) 
;;;133        {
;;;134            sysprintf("hwInit Set RX interrupt mode fail!\n");
;;;135            return FALSE;
;;;136        }
;;;137        
;;;138        return TRUE;
;;;139    }
000388  e8bd8070          POP      {r4-r6,pc}
                  |L1.908|
00038c  e59f11d8          LDR      r1,|L1.1388|
000390  e5d10008          LDRB     r0,[r1,#8]            ;123  ; param
000394  e3a03000          MOV      r3,#0                 ;123
000398  e1a02003          MOV      r2,r3                 ;123
00039c  e3a01001          MOV      r1,#1                 ;123
0003a0  ebfffffe          BL       uartIoctl
0003a4  e1a04000          MOV      r4,r0                 ;123
0003a8  e3540000          CMP      r4,#0                 ;124
0003ac  0a000003          BEQ      |L1.960|
0003b0  e28f0f75          ADR      r0,|L1.1420|
0003b4  ebfffffe          BL       sysprintf
0003b8  e3a00000          MOV      r0,#0                 ;127
0003bc  eafffff1          B        |L1.904|
                  |L1.960|
0003c0  e59f11a4          LDR      r1,|L1.1388|
0003c4  e5d10008          LDRB     r0,[r1,#8]            ;131  ; param
0003c8  e3a03000          MOV      r3,#0                 ;131
0003cc  e3a02001          MOV      r2,#1                 ;131
0003d0  e3a01002          MOV      r1,#2                 ;131
0003d4  ebfffffe          BL       uartIoctl
0003d8  e1a04000          MOV      r4,r0                 ;131
0003dc  e3540000          CMP      r4,#0                 ;132
0003e0  0a000003          BEQ      |L1.1012|
0003e4  e28f0f71          ADR      r0,|L1.1456|
0003e8  ebfffffe          BL       sysprintf
0003ec  e3a00000          MOV      r0,#0                 ;135
0003f0  eaffffe4          B        |L1.904|
                  |L1.1012|
0003f4  e3a00001          MOV      r0,#1                 ;138
0003f8  eaffffe2          B        |L1.904|
;;;140    
                          ENDP

                  UART10DrvInit PROC
;;;143    /*-----------------------------------------*/
;;;144    BOOL UART10DrvInit(UINT32 baudRate)
0003fc  e92d4070          PUSH     {r4-r6,lr}
;;;145    {
000400  e1a05000          MOV      r5,r0
;;;146        int retval;
;;;147        sysprintf("UART10DrvInit!!\n");
000404  e28f0f72          ADR      r0,|L1.1492|
000408  ebfffffe          BL       sysprintf
;;;148        retval = hwInit(baudRate);
00040c  e1a00005          MOV      r0,r5
000410  ebfffffe          BL       hwInit
000414  e1a04000          MOV      r4,r0
;;;149        return retval;
000418  e1a00004          MOV      r0,r4
;;;150    }
00041c  e8bd8070          POP      {r4-r6,pc}
;;;151    INT32 UART10Write(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART10Write PROC
000420  e92d41f0          PUSH     {r4-r8,lr}
;;;152    {
000424  e1a04000          MOV      r4,r0
000428  e1a05001          MOV      r5,r1
;;;153        INT32  reVal;
;;;154        
;;;155        /* DEBUG LED *///terninalPrintf("CADSend>=");
;;;156        /* DEBUG LED *///for(int i=0;i<uLen;i++)
;;;157        /* DEBUG LED */// terninalPrintf("%02x ",pucBuf[i]);
;;;158        /* DEBUG LED *///terninalPrintf("\n  ");
;;;159         /*             
;;;160                       for(int k=0;k<uLen;k++)
;;;161                       {
;;;162                            if((pucBuf[k] >= 0x20) && (pucBuf[k] <= 0x7E))
;;;163                                terninalPrintf("%c",pucBuf[k]);
;;;164                       } 
;;;165                       terninalPrintf("\n"); 
;;;166        */
;;;167        //terninalPrintf("\r");
;;;168        
;;;169        /* DEBUG LED */terninalPrintf("\r");
00042c  e28f0f6d          ADR      r0,|L1.1512|
000430  ebfffffe          BL       terninalPrintf
;;;170        /* DEBUG LED */for(int i=0;i<uLen;i++)
000434  e3a06000          MOV      r6,#0
000438  ea000002          B        |L1.1096|
                  |L1.1084|
;;;171        /* DEBUG LED */ terninalPrintf("\r");
00043c  e28f0f69          ADR      r0,|L1.1512|
000440  ebfffffe          BL       terninalPrintf
000444  e2866001          ADD      r6,r6,#1              ;170
                  |L1.1096|
000448  e1560005          CMP      r6,r5                 ;170
00044c  3afffffa          BCC      |L1.1084|
;;;172        /* DEBUG LED */terninalPrintf("\r");
000450  e28f0e19          ADR      r0,|L1.1512|
000454  ebfffffe          BL       terninalPrintf
;;;173                      
;;;174                       for(int k=0;k<uLen;k++)
000458  e3a06000          MOV      r6,#0
00045c  ea000008          B        |L1.1156|
                  |L1.1120|
;;;175                       {
;;;176                            if((pucBuf[k] >= 0x20) && (pucBuf[k] <= 0x7E))
000460  e7d40006          LDRB     r0,[r4,r6]
000464  e3500020          CMP      r0,#0x20
000468  ba000004          BLT      |L1.1152|
00046c  e7d40006          LDRB     r0,[r4,r6]
000470  e350007e          CMP      r0,#0x7e
000474  ca000001          BGT      |L1.1152|
;;;177                                terninalPrintf("\r");
000478  e28f0f5a          ADR      r0,|L1.1512|
00047c  ebfffffe          BL       terninalPrintf
                  |L1.1152|
000480  e2866001          ADD      r6,r6,#1              ;174
                  |L1.1156|
000484  e1560005          CMP      r6,r5                 ;174
000488  3afffff4          BCC      |L1.1120|
;;;178                       } 
;;;179                       terninalPrintf("\r"); 
00048c  e28f0f55          ADR      r0,|L1.1512|
000490  ebfffffe          BL       terninalPrintf
;;;180        
;;;181        reVal = uartWrite(param.ucUartNo, pucBuf, uLen);
000494  e59f10d0          LDR      r1,|L1.1388|
000498  e5d10008          LDRB     r0,[r1,#8]  ; param
00049c  e1a02005          MOV      r2,r5
0004a0  e1a01004          MOV      r1,r4
0004a4  ebfffffe          BL       uartWrite
0004a8  e1a07000          MOV      r7,r0
;;;182        return reVal;
0004ac  e1a00007          MOV      r0,r7
;;;183    }
0004b0  e8bd81f0          POP      {r4-r8,pc}
;;;184    INT32 UART10Read(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART10Read PROC
0004b4  e92d4070          PUSH     {r4-r6,lr}
;;;185    {
0004b8  e1a04000          MOV      r4,r0
0004bc  e1a05001          MOV      r5,r1
;;;186        return uartRead(param.ucUartNo, pucBuf, uLen);
0004c0  e59f10a4          LDR      r1,|L1.1388|
0004c4  e5d10008          LDRB     r0,[r1,#8]  ; param
0004c8  e1a02005          MOV      r2,r5
0004cc  e1a01004          MOV      r1,r4
0004d0  ebfffffe          BL       uartRead
;;;187    }
0004d4  e8bd8070          POP      {r4-r6,pc}
;;;188    BaseType_t UART10ReadWait(TickType_t time)
                          ENDP

                  UART10ReadWait PROC
0004d8  e92d4010          PUSH     {r4,lr}
;;;189    {
0004dc  e1a04000          MOV      r4,r0
;;;190        return  uartWaitReadEvent(param.ucUartNo, time);
0004e0  e59f1084          LDR      r1,|L1.1388|
0004e4  e5d10008          LDRB     r0,[r1,#8]  ; param
0004e8  e1a01004          MOV      r1,r4
0004ec  ebfffffe          BL       uartWaitReadEvent
;;;191    }
0004f0  e8bd8010          POP      {r4,pc}
;;;192    
                          ENDP

                  UART10Ioctl PROC
;;;267    }
;;;268    INT UART10Ioctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
0004f4  e92d4070          PUSH     {r4-r6,lr}
;;;269    {
0004f8  e1a04000          MOV      r4,r0
0004fc  e1a05001          MOV      r5,r1
000500  e1a06002          MOV      r6,r2
;;;270        return uartIoctl(param.ucUartNo, uCmd, uArg0, uArg1);
000504  e59f1060          LDR      r1,|L1.1388|
000508  e5d10008          LDRB     r0,[r1,#8]  ; param
00050c  e1a03006          MOV      r3,r6
000510  e1a02005          MOV      r2,r5
000514  e1a01004          MOV      r1,r4
000518  ebfffffe          BL       uartIoctl
;;;271    }
00051c  e8bd8070          POP      {r4-r6,pc}
;;;272    
                          ENDP

                  UART10SetRTS PROC
;;;273    void UART10SetRTS(BOOL flag)
000520  e92d4010          PUSH     {r4,lr}
;;;274    {
000524  e1a04000          MOV      r4,r0
;;;275        if(flag)
000528  e3540000          CMP      r4,#0
00052c  0a000006          BEQ      |L1.1356|
;;;276            uartIoctl(param.ucUartNo, UART_IOC_SETRTSSIGNAL, UART_RTS_LOW, 0);
000530  e59f1034          LDR      r1,|L1.1388|
000534  e5d10008          LDRB     r0,[r1,#8]  ; param
000538  e3a03000          MOV      r3,#0
00053c  e1a02003          MOV      r2,r3
000540  e3a01010          MOV      r1,#0x10
000544  ebfffffe          BL       uartIoctl
000548  ea000005          B        |L1.1380|
                  |L1.1356|
;;;277        else
;;;278            uartIoctl(param.ucUartNo, UART_IOC_SETRTSSIGNAL, UART_RTS_HIGH, 0);
00054c  e59f1018          LDR      r1,|L1.1388|
000550  e5d10008          LDRB     r0,[r1,#8]  ; param
000554  e3a03000          MOV      r3,#0
000558  e3a02001          MOV      r2,#1
00055c  e3a01010          MOV      r1,#0x10
000560  ebfffffe          BL       uartIoctl
                  |L1.1380|
;;;279    }
000564  e8bd8010          POP      {r4,pc}
                  |L1.1384|
                          DCD      0x00b71b00
                  |L1.1388|
                          DCD      param
                  |L1.1392|
000570  6877496e          DCB      "hwInit Open UART error!\n",0
000574  6974204f
000578  70656e20
00057c  55415254
000580  20657272
000584  6f72210a
000588  00      
000589  00                DCB      0
00058a  00                DCB      0
00058b  00                DCB      0
                  |L1.1420|
00058c  6877496e          DCB      "hwInit Set TX interrupt mode fail!\n",0
000590  69742053
000594  65742054
000598  5820696e
00059c  74657272
0005a0  75707420
0005a4  6d6f6465
0005a8  20666169
0005ac  6c210a00
                  |L1.1456|
0005b0  6877496e          DCB      "hwInit Set RX interrupt mode fail!\n",0
0005b4  69742053
0005b8  65742052
0005bc  5820696e
0005c0  74657272
0005c4  75707420
0005c8  6d6f6465
0005cc  20666169
0005d0  6c210a00
                  |L1.1492|
0005d4  55415254          DCB      "UART10DrvInit!!\n",0
0005d8  31304472
0005dc  76496e69
0005e0  7421210a
0005e4  00      
0005e5  00                DCB      0
0005e6  00                DCB      0
0005e7  00                DCB      0
                  |L1.1512|
0005e8  0d00              DCB      "\r",0
0005ea  00                DCB      0
0005eb  00                DCB      0
                          ENDP

                  UART10FlushBuffer PROC
;;;280    
;;;281    void UART10FlushBuffer(void)
0005ec  e92d4010          PUSH     {r4,lr}
;;;282    {
;;;283        //sysprintf(" --> CardFlushBuffer\n");
;;;284        //if (pUartInterface->ioctlFunc(UART_IOC_FLUSH_TX_BUFFER, 0, 0) != 0) {
;;;285       //     sysprintf("Set TX Flush fail!\n");
;;;286        //    return;
;;;287        //}
;;;288        if (UART10Ioctl(UART_IOC_FLUSH_RX_BUFFER, 0, 0) != 0) {
0005f0  e3a02000          MOV      r2,#0
0005f4  e1a01002          MOV      r1,r2
0005f8  e3a00019          MOV      r0,#0x19
0005fc  ebfffffe          BL       UART10Ioctl
000600  e3500000          CMP      r0,#0
000604  0a000002          BEQ      |L1.1556|
;;;289            sysprintf("Set RX Flush fail!\n");
000608  e28f000c          ADR      r0,|L1.1564|
00060c  ebfffffe          BL       sysprintf
                  |L1.1552|
;;;290            return;
;;;291        }
;;;292    }
000610  e8bd8010          POP      {r4,pc}
                  |L1.1556|
000614  e1a00000          MOV      r0,r0
000618  eafffffc          B        |L1.1552|
;;;293        
                          ENDP

                  |L1.1564|
00061c  53657420          DCB      "Set RX Flush fail!\n",0
000620  52582046
000624  6c757368
000628  20666169
00062c  6c210a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  param
                          %        16
