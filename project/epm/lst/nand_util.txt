; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\nand_util.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\nand_util.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\nand_util.crf ..\..\common\src\BSP\ThirdParty\yaffs2\nand_util.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nand_read PROC
;;;54     
;;;55     static __inline int nand_read(nand_info_t *info, loff_t ofs, size_t *len, u_char *buf)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;56     {
000004  e1a04000          MOV      r4,r0
000008  e1a06002          MOV      r6,r2
00000c  e1a07003          MOV      r7,r3
000010  e59d5028          LDR      r5,[sp,#0x28]
000014  e59d802c          LDR      r8,[sp,#0x2c]
;;;57     	return info->read(info, ofs, *len, (size_t *)len, buf);
000018  e5950000          LDR      r0,[r5,#0]
00001c  e88d0121          STM      sp,{r0,r5,r8}
000020  e1a02006          MOV      r2,r6
000024  e1a03007          MOV      r3,r7
000028  e5941040          LDR      r1,[r4,#0x40]
00002c  e1a00004          MOV      r0,r4
000030  e12fff31          BLX      r1
;;;58     }
000034  e8bd83fe          POP      {r1-r9,pc}
;;;59     
                          ENDP

                  nand_write PROC
;;;60     static __inline int nand_write(nand_info_t *info, loff_t ofs, size_t *len, u_char *buf)
000038  e92d43fe          PUSH     {r1-r9,lr}
;;;61     {
00003c  e1a04000          MOV      r4,r0
000040  e1a06002          MOV      r6,r2
000044  e1a07003          MOV      r7,r3
000048  e59d5028          LDR      r5,[sp,#0x28]
00004c  e59d802c          LDR      r8,[sp,#0x2c]
;;;62     	return info->write(info, ofs, *len, (size_t *)len, buf);
000050  e5950000          LDR      r0,[r5,#0]
000054  e88d0121          STM      sp,{r0,r5,r8}
000058  e1a02006          MOV      r2,r6
00005c  e1a03007          MOV      r3,r7
000060  e5941044          LDR      r1,[r4,#0x44]
000064  e1a00004          MOV      r0,r4
000068  e12fff31          BLX      r1
;;;63     }
00006c  e8bd83fe          POP      {r1-r9,pc}
;;;64     
                          ENDP

                  nand_erase_opts PROC
;;;70      */
;;;71     int nand_erase_opts(nand_info_t *meminfo, const nand_erase_options_t *opts)
000070  e92d4ff0          PUSH     {r4-r11,lr}
;;;72     {
000074  e24dd08c          SUB      sp,sp,#0x8c
000078  e1a05000          MOV      r5,r0
00007c  e1a04001          MOV      r4,r1
;;;73     // 	struct jffs2_unknown_node cleanmarker;
;;;74     	erase_info_t erase;
;;;75     	unsigned long erase_length, erased_length; /* in blocks */
;;;76     	int bbtest = 1;
000080  e3a00001          MOV      r0,#1
000084  e58d003c          STR      r0,[sp,#0x3c]
;;;77     	int result;
;;;78     	int percent_complete = -1;
000088  e3e0b000          MVN      r11,#0
;;;79     	const char *mtd_device = meminfo->name;
00008c  e5950020          LDR      r0,[r5,#0x20]
000090  e58d0038          STR      r0,[sp,#0x38]
;;;80     	struct mtd_oob_ops oob_opts;
;;;81     	struct nand_chip *chip = meminfo->priv;
000094  e5959094          LDR      r9,[r5,#0x94]
;;;82     
;;;83     	if ((opts->offset & (meminfo->erasesize - 1)) != 0) {
000098  e1c420d8          LDRD     r2,r3,[r4,#8]
00009c  e5950010          LDR      r0,[r5,#0x10]
0000a0  e2400001          SUB      r0,r0,#1
0000a4  e0021000          AND      r1,r2,r0
0000a8  e3a0c000          MOV      r12,#0
0000ac  e021100c          EOR      r1,r1,r12
0000b0  e02c000c          EOR      r0,r12,r12
0000b4  e1900001          ORRS     r0,r0,r1
0000b8  0a000004          BEQ      |L1.208|
;;;84     		sysprintf("Attempt to erase non block-aligned data\n");
0000bc  e28f0f96          ADR      r0,|L1.796|
0000c0  ebfffffe          BL       sysprintf
;;;85     		return -1;
0000c4  e3e00000          MVN      r0,#0
                  |L1.200|
0000c8  e28dd08c          ADD      sp,sp,#0x8c
;;;86     	}
;;;87     
;;;88     	memset(&erase, 0, sizeof(erase));
;;;89     	memset(&oob_opts, 0, sizeof(oob_opts));
;;;90     
;;;91     	erase.mtd = meminfo;
;;;92     	erase.len  = meminfo->erasesize;
;;;93     	erase.addr = opts->offset;
;;;94     	erase_length = (unsigned long)lldiv(opts->length + meminfo->erasesize - 1, meminfo->erasesize);
;;;95     
;;;96     // 	cleanmarker.magic = cpu_to_je16(JFFS2_MAGIC_BITMASK);
;;;97     // 	cleanmarker.nodetype = cpu_to_je16(JFFS2_NODETYPE_CLEANMARKER);
;;;98     // 	cleanmarker.totlen = cpu_to_je32(8);
;;;99     
;;;100    	/* scrub option allows to erase badblock. To prevent internal
;;;101    	 * check from erase() method, set block check method to dummy
;;;102    	 * and disable bad block table while erasing.
;;;103    	 */
;;;104    	if (opts->scrub) {
;;;105    		erase.scrub = opts->scrub;
;;;106    		/*
;;;107    		 * We don't need the bad block table anymore...
;;;108    		 * after scrub, there are no bad blocks left!
;;;109    		 */
;;;110    		if (chip->bbt) {
;;;111    			yaffs_free(chip->bbt);
;;;112    		}
;;;113    		chip->bbt = NULL;
;;;114    	}
;;;115    
;;;116    	for (erased_length = 0;
;;;117    	     erased_length < erase_length;
;;;118    	     erase.addr += meminfo->erasesize) {
;;;119    
;;;120    		if (!opts->scrub && bbtest) {
;;;121    			int ret = meminfo->block_isbad(meminfo, erase.addr);
;;;122    			if (ret > 0) {
;;;123    				if (!opts->quiet)
;;;124    					sysprintf("\rSkipping bad block at  "
;;;125    					       "0x%08llx                 "
;;;126    					       "                         \n",
;;;127    					       erase.addr);
;;;128    
;;;129    				if (!opts->spread)
;;;130    					erased_length++;
;;;131    
;;;132    				continue;
;;;133    
;;;134    			} else if (ret < 0) {
;;;135    				sysprintf("\n%s: MTD get bad block failed: %d\n",
;;;136    				       mtd_device,
;;;137    				       ret);
;;;138    				return -1;
;;;139    			}
;;;140    		}
;;;141    
;;;142    		erased_length++;
;;;143    
;;;144    		result = meminfo->erase(meminfo, &erase);
;;;145    		if (result != 0) {
;;;146    			sysprintf("\n%s: MTD Erase failure: %d\n",
;;;147    			       mtd_device, result);
;;;148    			continue;
;;;149    		}
;;;150    
;;;151    		/* format for JFFS2 ? */
;;;152    // 		if (opts->jffs2 && chip->ecc.layout->oobavail >= 8) {
;;;153    // 			chip->ops.ooblen = 8;
;;;154    // 			chip->ops.datbuf = NULL;
;;;155    // 			chip->ops.oobbuf = (uint8_t *)&cleanmarker;
;;;156    // 			chip->ops.ooboffs = 0;
;;;157    // 			chip->ops.mode = MTD_OOB_AUTO;
;;;158    
;;;159    // 			result = meminfo->write_oob(meminfo,
;;;160    // 			                            erase.addr,
;;;161    // 			                            &chip->ops);
;;;162    // 			if (result != 0) {
;;;163    // 				sysprintf("\n%s: MTD writeoob failure: %d\n",
;;;164    // 				       mtd_device, result);
;;;165    // 				continue;
;;;166    // 			}
;;;167    // 		}
;;;168    
;;;169    		if (!opts->quiet) {
;;;170    			unsigned long long n = erased_length * 100ULL;
;;;171    			int percent;
;;;172    
;;;173    			do_div(n, erase_length);
;;;174    			percent = (int)n;
;;;175    
;;;176    			/* output progress message only at whole percent
;;;177    			 * steps to reduce the number of messages printed
;;;178    			 * on (slow) serial consoles
;;;179    			 */
;;;180    			if (percent != percent_complete) {
;;;181    				percent_complete = percent;
;;;182    
;;;183    				sysprintf("\rErasing at 0x%llx -- %3d%% complete.",
;;;184    				       erase.addr, percent);
;;;185    
;;;186    				if (opts->jffs2 && result == 0)
;;;187    					sysprintf(" Cleanmarker written at 0x%llx.",
;;;188    					       erase.addr);
;;;189    			}
;;;190    		}
;;;191    	}
;;;192    	if (!opts->quiet)
;;;193    		sysprintf("\n");
;;;194    
;;;195    	if (opts->scrub)
;;;196    		chip->scan_bbt(meminfo);
;;;197    
;;;198    	return 0;
;;;199    }
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.208|
0000d0  e3a01048          MOV      r1,#0x48              ;88
0000d4  e28d0040          ADD      r0,sp,#0x40           ;88
0000d8  ebfffffe          BL       __aeabi_memclr4
0000dc  e3a01020          MOV      r1,#0x20              ;89
0000e0  e28d0018          ADD      r0,sp,#0x18           ;89
0000e4  ebfffffe          BL       __aeabi_memclr4
0000e8  e58d5040          STR      r5,[sp,#0x40]         ;91
0000ec  e3a01000          MOV      r1,#0                 ;92
0000f0  e5950010          LDR      r0,[r5,#0x10]         ;92
0000f4  e1cd05f0          STRD     r0,r1,[sp,#0x50]      ;92
0000f8  e1c400d8          LDRD     r0,r1,[r4,#8]         ;93
0000fc  e1cd04f8          STRD     r0,r1,[sp,#0x48]      ;93
000100  e8941008          LDM      r4,{r3,r12}           ;94
000104  e5950010          LDR      r0,[r5,#0x10]         ;94
000108  e0900003          ADDS     r0,r0,r3              ;94
00010c  e2acc000          ADC      r12,r12,#0            ;94
000110  e2500001          SUBS     r0,r0,#1              ;94
000114  e2cc1000          SBC      r1,r12,#0             ;94
000118  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;94
00011c  e5952010          LDR      r2,[r5,#0x10]         ;94
000120  ebfffffe          BL       lldiv
000124  e1a06000          MOV      r6,r0                 ;94
000128  e5940018          LDR      r0,[r4,#0x18]         ;104
00012c  e3500000          CMP      r0,#0                 ;104
000130  0a000008          BEQ      |L1.344|
000134  e5940018          LDR      r0,[r4,#0x18]         ;105
000138  e58d0080          STR      r0,[sp,#0x80]         ;105
00013c  e5990110          LDR      r0,[r9,#0x110]        ;110
000140  e3500000          CMP      r0,#0                 ;110
000144  0a000001          BEQ      |L1.336|
000148  e5990110          LDR      r0,[r9,#0x110]        ;111
00014c  ebfffffe          BL       yaffs_free
                  |L1.336|
000150  e3a00000          MOV      r0,#0                 ;113
000154  e5890110          STR      r0,[r9,#0x110]        ;113
                  |L1.344|
000158  e3a07000          MOV      r7,#0                 ;116
00015c  ea00005f          B        |L1.736|
                  |L1.352|
000160  e5940018          LDR      r0,[r4,#0x18]         ;120
000164  e3500000          CMP      r0,#0                 ;120
000168  1a000025          BNE      |L1.516|
00016c  e59d003c          LDR      r0,[sp,#0x3c]         ;120
000170  e3500000          CMP      r0,#0                 ;120
000174  0a000022          BEQ      |L1.516|
000178  e59d0048          LDR      r0,[sp,#0x48]         ;121
00017c  e59d204c          LDR      r2,[sp,#0x4c]         ;121
000180  e58d0010          STR      r0,[sp,#0x10]         ;121
000184  e58d2014          STR      r2,[sp,#0x14]         ;121
000188  e1a02000          MOV      r2,r0                 ;121
00018c  e5951078          LDR      r1,[r5,#0x78]         ;121
000190  e1a00005          MOV      r0,r5                 ;121
000194  e59d3014          LDR      r3,[sp,#0x14]         ;121
000198  e12fff31          BLX      r1                    ;121
00019c  e1a0a000          MOV      r10,r0                ;121
0001a0  e35a0000          CMP      r10,#0                ;122
0001a4  da00000d          BLE      |L1.480|
0001a8  e5940010          LDR      r0,[r4,#0x10]         ;123
0001ac  e3500000          CMP      r0,#0                 ;123
0001b0  1a000005          BNE      |L1.460|
0001b4  e1cd04d8          LDRD     r0,r1,[sp,#0x48]      ;124
0001b8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;124
0001bc  e1a02000          MOV      r2,r0                 ;124
0001c0  e1a03001          MOV      r3,r1                 ;124
0001c4  e59f017c          LDR      r0,|L1.840|
0001c8  ebfffffe          BL       sysprintf
                  |L1.460|
0001cc  e594001c          LDR      r0,[r4,#0x1c]         ;129
0001d0  e3500000          CMP      r0,#0                 ;129
0001d4  1a000000          BNE      |L1.476|
0001d8  e2877001          ADD      r7,r7,#1              ;130
                  |L1.476|
0001dc  ea000039          B        |L1.712|
                  |L1.480|
0001e0  e35a0000          CMP      r10,#0                ;134
0001e4  aa000005          BGE      |L1.512|
0001e8  e1a0200a          MOV      r2,r10                ;135
0001ec  e28f0f56          ADR      r0,|L1.844|
0001f0  e59d1038          LDR      r1,[sp,#0x38]         ;135
0001f4  ebfffffe          BL       sysprintf
0001f8  e3e00000          MVN      r0,#0                 ;138
0001fc  eaffffb1          B        |L1.200|
                  |L1.512|
000200  e1a00000          MOV      r0,r0                 ;140
                  |L1.516|
000204  e2877001          ADD      r7,r7,#1              ;142
000208  e28d1040          ADD      r1,sp,#0x40           ;144
00020c  e5952034          LDR      r2,[r5,#0x34]         ;144
000210  e1a00005          MOV      r0,r5                 ;144
000214  e12fff32          BLX      r2                    ;144
000218  e1a08000          MOV      r8,r0                 ;144
00021c  e3580000          CMP      r8,#0                 ;145
000220  0a000004          BEQ      |L1.568|
000224  e1a02008          MOV      r2,r8                 ;146
000228  e28f0d05          ADR      r0,|L1.880|
00022c  e59d1038          LDR      r1,[sp,#0x38]         ;146
000230  ebfffffe          BL       sysprintf
000234  ea000023          B        |L1.712|
                  |L1.568|
000238  e5940010          LDR      r0,[r4,#0x10]         ;169
00023c  e3500000          CMP      r0,#0                 ;169
000240  1a00001f          BNE      |L1.708|
000244  e3a00064          MOV      r0,#0x64              ;170
000248  e0801097          UMULL    r1,r0,r7,r0           ;170
00024c  e58d0014          STR      r0,[sp,#0x14]         ;170
000250  e58d1010          STR      r1,[sp,#0x10]         ;170
000254  e1a02006          MOV      r2,r6                 ;173
000258  e3a03000          MOV      r3,#0                 ;173
00025c  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;173
000260  ebfffffe          BL       __aeabi_uldivmod
000264  e58d0010          STR      r0,[sp,#0x10]         ;173
000268  e59da010          LDR      r10,[sp,#0x10]        ;174
00026c  e15a000b          CMP      r10,r11               ;180
000270  0a000012          BEQ      |L1.704|
000274  e1a0b00a          MOV      r11,r10               ;181
000278  e58da000          STR      r10,[sp,#0]           ;183
00027c  e1cd04d8          LDRD     r0,r1,[sp,#0x48]      ;183
000280  e1cd00f8          STRD     r0,r1,[sp,#8]         ;183
000284  e1a02000          MOV      r2,r0                 ;183
000288  e1a03001          MOV      r3,r1                 ;183
00028c  e28f00f8          ADR      r0,|L1.908|
000290  ebfffffe          BL       sysprintf
000294  e5940014          LDR      r0,[r4,#0x14]         ;186
000298  e3500000          CMP      r0,#0                 ;186
00029c  0a000007          BEQ      |L1.704|
0002a0  e3580000          CMP      r8,#0                 ;186
0002a4  1a000005          BNE      |L1.704|
0002a8  e1cd04d8          LDRD     r0,r1,[sp,#0x48]      ;187
0002ac  e1cd00f8          STRD     r0,r1,[sp,#8]         ;187
0002b0  e1a02000          MOV      r2,r0                 ;187
0002b4  e1a03001          MOV      r3,r1                 ;187
0002b8  e28f00f4          ADR      r0,|L1.948|
0002bc  ebfffffe          BL       sysprintf
                  |L1.704|
0002c0  e1a00000          MOV      r0,r0                 ;190
                  |L1.708|
0002c4  e1a00000          MOV      r0,r0                 ;132
                  |L1.712|
0002c8  e59d1048          LDR      r1,[sp,#0x48]         ;118
0002cc  e59d304c          LDR      r3,[sp,#0x4c]         ;118
0002d0  e5950010          LDR      r0,[r5,#0x10]         ;118
0002d4  e0900001          ADDS     r0,r0,r1              ;118
0002d8  e2a31000          ADC      r1,r3,#0              ;118
0002dc  e1cd04f8          STRD     r0,r1,[sp,#0x48]      ;118
                  |L1.736|
0002e0  e1570006          CMP      r7,r6                 ;117
0002e4  3affff9d          BCC      |L1.352|
0002e8  e5940010          LDR      r0,[r4,#0x10]         ;192
0002ec  e3500000          CMP      r0,#0                 ;192
0002f0  1a000001          BNE      |L1.764|
0002f4  e28f00d8          ADR      r0,|L1.980|
0002f8  ebfffffe          BL       sysprintf
                  |L1.764|
0002fc  e5940018          LDR      r0,[r4,#0x18]         ;195
000300  e3500000          CMP      r0,#0                 ;195
000304  0a000002          BEQ      |L1.788|
000308  e1a00005          MOV      r0,r5                 ;196
00030c  e5991040          LDR      r1,[r9,#0x40]         ;196
000310  e12fff31          BLX      r1                    ;196
                  |L1.788|
000314  e3a00000          MOV      r0,#0                 ;198
000318  eaffff6a          B        |L1.200|
                  |L1.796|
00031c  41747465          DCB      "Attempt to erase non block-aligned data\n",0
000320  6d707420
000324  746f2065
000328  72617365
00032c  206e6f6e
000330  20626c6f
000334  636b2d61
000338  6c69676e
00033c  65642064
000340  6174610a
000344  00      
000345  00                DCB      0
000346  00                DCB      0
000347  00                DCB      0
                  |L1.840|
                          DCD      ||.constdata||
                  |L1.844|
00034c  0a25733a          DCB      "\n%s: MTD get bad block failed: %d\n",0
000350  204d5444
000354  20676574
000358  20626164
00035c  20626c6f
000360  636b2066
000364  61696c65
000368  643a2025
00036c  640a00  
00036f  00                DCB      0
                  |L1.880|
000370  0a25733a          DCB      "\n%s: MTD Erase failure: %d\n",0
000374  204d5444
000378  20457261
00037c  73652066
000380  61696c75
000384  72653a20
000388  25640a00
                  |L1.908|
00038c  0d457261          DCB      "\rErasing at 0x%llx -- %3d%% complete.",0
000390  73696e67
000394  20617420
000398  3078256c
00039c  6c78202d
0003a0  2d202533
0003a4  64252520
0003a8  636f6d70
0003ac  6c657465
0003b0  2e00    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L1.948|
0003b4  20436c65          DCB      " Cleanmarker written at 0x%llx.",0
0003b8  616e6d61
0003bc  726b6572
0003c0  20777269
0003c4  7474656e
0003c8  20617420
0003cc  3078256c
0003d0  6c782e00
                  |L1.980|
0003d4  0a00              DCB      "\n",0
0003d6  00                DCB      0
0003d7  00                DCB      0
                          ENDP

                  check_skip_len PROC
;;;419     */
;;;420    static int check_skip_len(nand_info_t *nand, loff_t offset, size_t length)
0003d8  e92d4ff8          PUSH     {r3-r11,lr}
;;;421    {
0003dc  e1a06000          MOV      r6,r0
0003e0  e1a04002          MOV      r4,r2
0003e4  e1a05003          MOV      r5,r3
;;;422    	size_t len_excl_bad = 0;
0003e8  e3a0b000          MOV      r11,#0
;;;423    	int ret = 0;
0003ec  e3a00000          MOV      r0,#0
0003f0  e58d0000          STR      r0,[sp,#0]
;;;424    
;;;425    	while (len_excl_bad < length) {
0003f4  ea00001c          B        |L1.1132|
                  |L1.1016|
;;;426    		size_t block_len, block_off;
;;;427    		loff_t block_start;
;;;428    
;;;429    		if (offset >= nand->size)
0003f8  e1c600d8          LDRD     r0,r1,[r6,#8]
0003fc  e0540000          SUBS     r0,r4,r0
000400  e0d50001          SBCS     r0,r5,r1
000404  3a000001          BCC      |L1.1040|
;;;430    			return -1;
000408  e3e00000          MVN      r0,#0
                  |L1.1036|
;;;431    
;;;432    		block_start = offset & ~(loff_t)(nand->erasesize - 1);
;;;433    		block_off = offset & (nand->erasesize - 1);
;;;434    		block_len = nand->erasesize - block_off;
;;;435    
;;;436    		if (!nand_block_isbad(nand, block_start))
;;;437    			len_excl_bad += block_len;
;;;438    		else
;;;439    			ret = 1;
;;;440    
;;;441    		offset += block_len;
;;;442    	}
;;;443    
;;;444    	return ret;
;;;445    }
00040c  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1040|
000410  e5960010          LDR      r0,[r6,#0x10]         ;432
000414  e2400001          SUB      r0,r0,#1              ;432
000418  e1e01000          MVN      r1,r0                 ;432
00041c  e0017004          AND      r7,r1,r4              ;432
000420  e1a08005          MOV      r8,r5                 ;432
000424  e5960010          LDR      r0,[r6,#0x10]         ;433
000428  e2400001          SUB      r0,r0,#1              ;433
00042c  e000a004          AND      r10,r0,r4             ;433
000430  e5960010          LDR      r0,[r6,#0x10]         ;434
000434  e040900a          SUB      r9,r0,r10             ;434
000438  e1a02007          MOV      r2,r7                 ;436
00043c  e1a03008          MOV      r3,r8                 ;436
000440  e1a00006          MOV      r0,r6                 ;436
000444  ebfffffe          BL       nand_block_isbad
000448  e3500000          CMP      r0,#0                 ;436
00044c  1a000001          BNE      |L1.1112|
000450  e08bb009          ADD      r11,r11,r9            ;437
000454  ea000001          B        |L1.1120|
                  |L1.1112|
000458  e3a00001          MOV      r0,#1                 ;439
00045c  e58d0000          STR      r0,[sp,#0]            ;439
                  |L1.1120|
000460  e0944009          ADDS     r4,r4,r9              ;439
000464  e2a55000          ADC      r5,r5,#0              ;439
000468  e1a00000          MOV      r0,r0                 ;442
                  |L1.1132|
00046c  e59d0028          LDR      r0,[sp,#0x28]         ;425
000470  e15b0000          CMP      r11,r0                ;425
000474  3affffdf          BCC      |L1.1016|
000478  e59d0000          LDR      r0,[sp,#0]            ;444
00047c  eaffffe2          B        |L1.1036|
;;;446    
                          ENDP

                  nand_write_skip_bad PROC
;;;484     */
;;;485    int nand_write_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
000480  e92d4ff0          PUSH     {r4-r11,lr}
;;;486    			u_char *buffer, int flags)
;;;487    {
000484  e24dd01c          SUB      sp,sp,#0x1c
000488  e1a08000          MOV      r8,r0
00048c  e1a04002          MOV      r4,r2
000490  e1a05003          MOV      r5,r3
000494  e59d6040          LDR      r6,[sp,#0x40]
;;;488    	int rval = 0, blocksize;
000498  e3a09000          MOV      r9,#0
;;;489    	size_t left_to_write = *length;
00049c  e596a000          LDR      r10,[r6,#0]
;;;490    	u_char *p_buffer = buffer;
0004a0  e59d0044          LDR      r0,[sp,#0x44]
0004a4  e58d0010          STR      r0,[sp,#0x10]
;;;491    	int need_skip;
;;;492    
;;;493    #ifdef CONFIG_CMD_NAND_YAFFS
;;;494    	if (flags & WITH_YAFFS_OOB) {
;;;495    		if (flags & ~WITH_YAFFS_OOB)
;;;496    			return -EINVAL;
;;;497    
;;;498    		int pages;
;;;499    		pages = nand->erasesize / nand->writesize;
;;;500    		blocksize = (pages * nand->oobsize) + nand->erasesize;
;;;501    		if (*length % (nand->writesize + nand->oobsize)) {
;;;502    			sysprintf("Attempt to write incomplete page"
;;;503    				" in yaffs mode\n");
;;;504    			return -EINVAL;
;;;505    		}
;;;506    	} else
;;;507    #endif
;;;508    	{
;;;509    		blocksize = nand->erasesize;
0004a8  e5980010          LDR      r0,[r8,#0x10]
0004ac  e58d0014          STR      r0,[sp,#0x14]
;;;510    	}
;;;511    
;;;512    	/*
;;;513    	 * nand_write() handles unaligned, partial page writes.
;;;514    	 *
;;;515    	 * We allow length to be unaligned, for convenience in
;;;516    	 * using the $filesize variable.
;;;517    	 *
;;;518    	 * However, starting at an unaligned offset makes the
;;;519    	 * semantics of bad block skipping ambiguous (really,
;;;520    	 * you should only start a block skipping access at a
;;;521    	 * partition boundary).  So don't try to handle that.
;;;522    	 */
;;;523    	if ((offset & (nand->writesize - 1)) != 0) {
0004b0  e5980014          LDR      r0,[r8,#0x14]
0004b4  e2400001          SUB      r0,r0,#1
0004b8  e0000004          AND      r0,r0,r4
0004bc  e3a03000          MOV      r3,#0
0004c0  e0200003          EOR      r0,r0,r3
0004c4  e0231003          EOR      r1,r3,r3
0004c8  e1900001          ORRS     r0,r0,r1
0004cc  0a000006          BEQ      |L1.1260|
;;;524    		sysprintf("Attempt to write non page-aligned data\n");
0004d0  e28f0e1e          ADR      r0,|L1.1720|
0004d4  ebfffffe          BL       sysprintf
;;;525    		*length = 0;
0004d8  e3a00000          MOV      r0,#0
0004dc  e5860000          STR      r0,[r6,#0]
;;;526    		return -EINVAL;
0004e0  e3e00015          MVN      r0,#0x15
                  |L1.1252|
0004e4  e28dd01c          ADD      sp,sp,#0x1c
;;;527    	}
;;;528    
;;;529    	need_skip = check_skip_len(nand, offset, *length);
;;;530    	if (need_skip < 0) {
;;;531    		sysprintf("Attempt to write outside the flash area\n");
;;;532    		*length = 0;
;;;533    		return -EINVAL;
;;;534    	}
;;;535    
;;;536    	if (!need_skip && !(flags & WITH_DROP_FFS)) {
;;;537    		rval = nand_write(nand, offset, length, buffer);
;;;538    		if (rval == 0)
;;;539    			return 0;
;;;540    
;;;541    		*length = 0;
;;;542    		sysprintf("NAND write to offset %llx failed %d\n",
;;;543    			offset, rval);
;;;544    		return rval;
;;;545    	}
;;;546    
;;;547    	while (left_to_write > 0) {
;;;548    		size_t block_offset = offset & (nand->erasesize - 1);
;;;549    		size_t write_size, truncated_write_size;
;;;550    
;;;551    		if (nand_block_isbad(nand, offset & ~(nand->erasesize - 1))) {
;;;552    			sysprintf("Skip bad block 0x%08llx\n",
;;;553    				offset & ~(nand->erasesize - 1));
;;;554    			offset += nand->erasesize - block_offset;
;;;555    			continue;
;;;556    		}
;;;557    
;;;558    		if (left_to_write < (blocksize - block_offset))
;;;559    			write_size = left_to_write;
;;;560    		else
;;;561    			write_size = blocksize - block_offset;
;;;562    
;;;563    #ifdef CONFIG_CMD_NAND_YAFFS
;;;564    		if (flags & WITH_YAFFS_OOB) {
;;;565    			int page, pages;
;;;566    			size_t pagesize = nand->writesize;
;;;567    			size_t pagesize_oob = pagesize + nand->oobsize;
;;;568    			struct mtd_oob_ops ops;
;;;569    
;;;570    			ops.len = pagesize;
;;;571    			ops.ooblen = nand->oobsize;
;;;572    			ops.mode = MTD_OOB_AUTO;
;;;573    			ops.ooboffs = 0;
;;;574    
;;;575    			pages = write_size / pagesize_oob;
;;;576    			for (page = 0; page < pages; page++) {
;;;577    				ops.datbuf = p_buffer;
;;;578    				ops.oobbuf = ops.datbuf + pagesize;
;;;579    
;;;580    				rval = nand->write_oob(nand, offset, &ops);
;;;581    				if (rval != 0)
;;;582    					break;
;;;583    
;;;584    				offset += pagesize;
;;;585    				p_buffer += pagesize_oob;
;;;586    			}
;;;587    		}
;;;588    		else
;;;589    #endif
;;;590    		{
;;;591    			truncated_write_size = write_size;
;;;592    #ifdef CONFIG_CMD_NAND_TRIMFFS
;;;593    			if (flags & WITH_DROP_FFS)
;;;594    				truncated_write_size = drop_ffs(nand, p_buffer,
;;;595    						&write_size);
;;;596    #endif
;;;597    
;;;598    			rval = nand_write(nand, offset, &truncated_write_size,
;;;599    					p_buffer);
;;;600    			offset += write_size;
;;;601    			p_buffer += write_size;
;;;602    		}
;;;603    
;;;604    		if (rval != 0) {
;;;605    			sysprintf("NAND write to offset %llx failed %d\n",
;;;606    				offset, rval);
;;;607    			*length -= left_to_write;
;;;608    			return rval;
;;;609    		}
;;;610    
;;;611    		left_to_write -= write_size;
;;;612    	}
;;;613    
;;;614    	return 0;
;;;615    }
0004e8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1260|
0004ec  e5960000          LDR      r0,[r6,#0]            ;529
0004f0  e1a02004          MOV      r2,r4                 ;529
0004f4  e1a03005          MOV      r3,r5                 ;529
0004f8  e58d0000          STR      r0,[sp,#0]            ;529
0004fc  e1a00008          MOV      r0,r8                 ;529
000500  ebfffffe          BL       check_skip_len
000504  e1a0b000          MOV      r11,r0                ;529
000508  e35b0000          CMP      r11,#0                ;530
00050c  aa000005          BGE      |L1.1320|
000510  e28f0f72          ADR      r0,|L1.1760|
000514  ebfffffe          BL       sysprintf
000518  e3a00000          MOV      r0,#0                 ;532
00051c  e5860000          STR      r0,[r6,#0]            ;532
000520  e3e00015          MVN      r0,#0x15              ;533
000524  eaffffee          B        |L1.1252|
                  |L1.1320|
000528  e35b0000          CMP      r11,#0                ;536
00052c  1a000017          BNE      |L1.1424|
000530  e59d0048          LDR      r0,[sp,#0x48]         ;536
000534  e3100002          TST      r0,#2                 ;536
000538  1a000014          BNE      |L1.1424|
00053c  e59d0044          LDR      r0,[sp,#0x44]         ;537
000540  e1a02004          MOV      r2,r4                 ;537
000544  e1a03005          MOV      r3,r5                 ;537
000548  e58d0004          STR      r0,[sp,#4]            ;537
00054c  e1a00008          MOV      r0,r8                 ;537
000550  e58d6000          STR      r6,[sp,#0]            ;537
000554  ebfffffe          BL       nand_write
000558  e1a09000          MOV      r9,r0                 ;537
00055c  e3590000          CMP      r9,#0                 ;538
000560  1a000001          BNE      |L1.1388|
000564  e3a00000          MOV      r0,#0                 ;539
000568  eaffffdd          B        |L1.1252|
                  |L1.1388|
00056c  e3a00000          MOV      r0,#0                 ;541
000570  e5860000          STR      r0,[r6,#0]            ;541
000574  e1a02004          MOV      r2,r4                 ;542
000578  e1a03005          MOV      r3,r5                 ;542
00057c  e28f0f62          ADR      r0,|L1.1804|
000580  e58d9000          STR      r9,[sp,#0]            ;542
000584  ebfffffe          BL       sysprintf
000588  e1a00009          MOV      r0,r9                 ;544
00058c  eaffffd4          B        |L1.1252|
                  |L1.1424|
000590  ea000044          B        |L1.1704|
                  |L1.1428|
000594  e5980010          LDR      r0,[r8,#0x10]         ;548
000598  e2400001          SUB      r0,r0,#1              ;548
00059c  e0000004          AND      r0,r0,r4              ;548
0005a0  e58d000c          STR      r0,[sp,#0xc]          ;548
0005a4  e5980010          LDR      r0,[r8,#0x10]         ;551
0005a8  e2400001          SUB      r0,r0,#1              ;551
0005ac  e1c40000          BIC      r0,r4,r0              ;551
0005b0  e3a01000          MOV      r1,#0                 ;551
0005b4  e1cd00f0          STRD     r0,r1,[sp,#0]         ;551
0005b8  e1a02000          MOV      r2,r0                 ;551
0005bc  e1a03001          MOV      r3,r1                 ;551
0005c0  e1a00008          MOV      r0,r8                 ;551
0005c4  ebfffffe          BL       nand_block_isbad
0005c8  e3500000          CMP      r0,#0                 ;551
0005cc  0a00000e          BEQ      |L1.1548|
0005d0  e5980010          LDR      r0,[r8,#0x10]         ;552
0005d4  e2400001          SUB      r0,r0,#1              ;552
0005d8  e1c40000          BIC      r0,r4,r0              ;552
0005dc  e3a01000          MOV      r1,#0                 ;552
0005e0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;552
0005e4  e1a02000          MOV      r2,r0                 ;552
0005e8  e1a03001          MOV      r3,r1                 ;552
0005ec  e28f0d05          ADR      r0,|L1.1844|
0005f0  ebfffffe          BL       sysprintf
0005f4  e5981010          LDR      r1,[r8,#0x10]         ;554
0005f8  e59d000c          LDR      r0,[sp,#0xc]          ;554
0005fc  e0410000          SUB      r0,r1,r0              ;554
000600  e0944000          ADDS     r4,r4,r0              ;554
000604  e2a55000          ADC      r5,r5,#0              ;554
000608  ea000026          B        |L1.1704|
                  |L1.1548|
00060c  e59d0014          LDR      r0,[sp,#0x14]         ;558
000610  e59d100c          LDR      r1,[sp,#0xc]          ;558
000614  e0400001          SUB      r0,r0,r1              ;558
000618  e150000a          CMP      r0,r10                ;558
00061c  9a000001          BLS      |L1.1576|
000620  e1a0700a          MOV      r7,r10                ;559
000624  ea000002          B        |L1.1588|
                  |L1.1576|
000628  e59d0014          LDR      r0,[sp,#0x14]         ;561
00062c  e59d100c          LDR      r1,[sp,#0xc]          ;561
000630  e0407001          SUB      r7,r0,r1              ;561
                  |L1.1588|
000634  e58d7008          STR      r7,[sp,#8]            ;591
000638  e59d0010          LDR      r0,[sp,#0x10]         ;598
00063c  e28d1008          ADD      r1,sp,#8              ;598
000640  e1a02004          MOV      r2,r4                 ;598
000644  e1a03005          MOV      r3,r5                 ;598
000648  e58d0004          STR      r0,[sp,#4]            ;598
00064c  e1a00008          MOV      r0,r8                 ;598
000650  e58d1000          STR      r1,[sp,#0]            ;598
000654  ebfffffe          BL       nand_write
000658  e1a09000          MOV      r9,r0                 ;598
00065c  e0944007          ADDS     r4,r4,r7              ;598
000660  e2a55000          ADC      r5,r5,#0              ;598
000664  e59d0010          LDR      r0,[sp,#0x10]         ;601
000668  e0800007          ADD      r0,r0,r7              ;601
00066c  e58d0010          STR      r0,[sp,#0x10]         ;601
000670  e3590000          CMP      r9,#0                 ;604
000674  0a000009          BEQ      |L1.1696|
000678  e1a02004          MOV      r2,r4                 ;605
00067c  e1a03005          MOV      r3,r5                 ;605
000680  e28f0084          ADR      r0,|L1.1804|
000684  e58d9000          STR      r9,[sp,#0]            ;605
000688  ebfffffe          BL       sysprintf
00068c  e5960000          LDR      r0,[r6,#0]            ;607
000690  e040000a          SUB      r0,r0,r10             ;607
000694  e5860000          STR      r0,[r6,#0]            ;607
000698  e1a00009          MOV      r0,r9                 ;608
00069c  eaffff90          B        |L1.1252|
                  |L1.1696|
0006a0  e04aa007          SUB      r10,r10,r7            ;611
0006a4  e1a00000          MOV      r0,r0                 ;555
                  |L1.1704|
0006a8  e35a0000          CMP      r10,#0                ;547
0006ac  1affffb8          BNE      |L1.1428|
0006b0  e3a00000          MOV      r0,#0                 ;614
0006b4  eaffff8a          B        |L1.1252|
                  |L1.1720|
0006b8  41747465          DCB      "Attempt to write non page-aligned data\n",0
0006bc  6d707420
0006c0  746f2077
0006c4  72697465
0006c8  206e6f6e
0006cc  20706167
0006d0  652d616c
0006d4  69676e65
0006d8  64206461
0006dc  74610a00
                  |L1.1760|
0006e0  41747465          DCB      "Attempt to write outside the flash area\n",0
0006e4  6d707420
0006e8  746f2077
0006ec  72697465
0006f0  206f7574
0006f4  73696465
0006f8  20746865
0006fc  20666c61
000700  73682061
000704  7265610a
000708  00      
000709  00                DCB      0
00070a  00                DCB      0
00070b  00                DCB      0
                  |L1.1804|
00070c  4e414e44          DCB      "NAND write to offset %llx failed %d\n",0
000710  20777269
000714  74652074
000718  6f206f66
00071c  66736574
000720  20256c6c
000724  78206661
000728  696c6564
00072c  2025640a
000730  00      
000731  00                DCB      0
000732  00                DCB      0
000733  00                DCB      0
                  |L1.1844|
000734  536b6970          DCB      "Skip bad block 0x%08llx\n",0
000738  20626164
00073c  20626c6f
000740  636b2030
000744  78253038
000748  6c6c780a
00074c  00      
00074d  00                DCB      0
00074e  00                DCB      0
00074f  00                DCB      0
                          ENDP

                  nand_read_skip_bad PROC
;;;630     */
;;;631    int nand_read_skip_bad(nand_info_t *nand, loff_t offset, size_t *length,
000750  e92d5fff          PUSH     {r0-r12,lr}
;;;632    		       u_char *buffer)
;;;633    {
000754  e1a07000          MOV      r7,r0
000758  e1a04002          MOV      r4,r2
00075c  e1a05003          MOV      r5,r3
000760  e59d8038          LDR      r8,[sp,#0x38]
;;;634    	int rval;
;;;635    	size_t left_to_read = *length;
000764  e5989000          LDR      r9,[r8,#0]
;;;636    	u_char *p_buffer = buffer;
000768  e59d003c          LDR      r0,[sp,#0x3c]
00076c  e58d000c          STR      r0,[sp,#0xc]
;;;637    	int need_skip;
;;;638    
;;;639    	if ((offset & (nand->writesize - 1)) != 0) {
000770  e5970014          LDR      r0,[r7,#0x14]
000774  e2400001          SUB      r0,r0,#1
000778  e0000004          AND      r0,r0,r4
00077c  e3a03000          MOV      r3,#0
000780  e0200003          EOR      r0,r0,r3
000784  e0231003          EOR      r1,r3,r3
000788  e1900001          ORRS     r0,r0,r1
00078c  0a000006          BEQ      |L1.1964|
;;;640    		sysprintf("Attempt to read non page-aligned data\n");
000790  e28f0e1e          ADR      r0,|L1.2424|
000794  ebfffffe          BL       sysprintf
;;;641    		*length = 0;
000798  e3a00000          MOV      r0,#0
00079c  e5880000          STR      r0,[r8,#0]
;;;642    		return -EINVAL;
0007a0  e3e00015          MVN      r0,#0x15
                  |L1.1956|
0007a4  e28dd010          ADD      sp,sp,#0x10
;;;643    	}
;;;644    
;;;645    	need_skip = check_skip_len(nand, offset, *length);
;;;646    	if (need_skip < 0) {
;;;647    		sysprintf("Attempt to read outside the flash area\n");
;;;648    		*length = 0;
;;;649    		return -EINVAL;
;;;650    	}
;;;651    
;;;652    	if (!need_skip) {
;;;653    		rval = nand_read(nand, offset, length, buffer);
;;;654    		if (!rval || rval == -EUCLEAN)
;;;655    			return 0;
;;;656    
;;;657    		*length = 0;
;;;658    		sysprintf("NAND read from offset %llx failed %d\n",
;;;659    			offset, rval);
;;;660    		return rval;
;;;661    	}
;;;662    
;;;663    	while (left_to_read > 0) {
;;;664    		size_t block_offset = offset & (nand->erasesize - 1);
;;;665    		size_t read_length;
;;;666    
;;;667    		if (nand_block_isbad(nand, offset & ~(nand->erasesize - 1))) {
;;;668    			sysprintf("Skipping bad block 0x%08llx\n",
;;;669    				offset & ~(nand->erasesize - 1));
;;;670    			offset += nand->erasesize - block_offset;
;;;671    			continue;
;;;672    		}
;;;673    
;;;674    		if (left_to_read < (nand->erasesize - block_offset))
;;;675    			read_length = left_to_read;
;;;676    		else
;;;677    			read_length = nand->erasesize - block_offset;
;;;678    
;;;679    		rval = nand_read(nand, offset, &read_length, p_buffer);
;;;680    		if (rval && rval != -EUCLEAN) {
;;;681    			sysprintf("NAND read from offset %llx failed %d\n",
;;;682    				offset, rval);
;;;683    			*length -= left_to_read;
;;;684    			return rval;
;;;685    		}
;;;686    
;;;687    		left_to_read -= read_length;
;;;688    		offset       += read_length;
;;;689    		p_buffer     += read_length;
;;;690    	}
;;;691    
;;;692    	return 0;
;;;693    }
0007a8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1964|
0007ac  e5980000          LDR      r0,[r8,#0]            ;645
0007b0  e1a02004          MOV      r2,r4                 ;645
0007b4  e1a03005          MOV      r3,r5                 ;645
0007b8  e58d0000          STR      r0,[sp,#0]            ;645
0007bc  e1a00007          MOV      r0,r7                 ;645
0007c0  ebfffffe          BL       check_skip_len
0007c4  e1a0a000          MOV      r10,r0                ;645
0007c8  e35a0000          CMP      r10,#0                ;646
0007cc  aa000005          BGE      |L1.2024|
0007d0  e28f0f72          ADR      r0,|L1.2464|
0007d4  ebfffffe          BL       sysprintf
0007d8  e3a00000          MOV      r0,#0                 ;648
0007dc  e5880000          STR      r0,[r8,#0]            ;648
0007e0  e3e00015          MVN      r0,#0x15              ;649
0007e4  eaffffee          B        |L1.1956|
                  |L1.2024|
0007e8  e35a0000          CMP      r10,#0                ;652
0007ec  1a000016          BNE      |L1.2124|
0007f0  e59d003c          LDR      r0,[sp,#0x3c]         ;653
0007f4  e1a02004          MOV      r2,r4                 ;653
0007f8  e1a03005          MOV      r3,r5                 ;653
0007fc  e58d0004          STR      r0,[sp,#4]            ;653
000800  e1a00007          MOV      r0,r7                 ;653
000804  e58d8000          STR      r8,[sp,#0]            ;653
000808  ebfffffe          BL       nand_read
00080c  e1a06000          MOV      r6,r0                 ;653
000810  e3560000          CMP      r6,#0                 ;654
000814  0a000001          BEQ      |L1.2080|
000818  e3760075          CMN      r6,#0x75              ;654
00081c  1a000001          BNE      |L1.2088|
                  |L1.2080|
000820  e3a00000          MOV      r0,#0                 ;655
000824  eaffffde          B        |L1.1956|
                  |L1.2088|
000828  e3a00000          MOV      r0,#0                 ;657
00082c  e5880000          STR      r0,[r8,#0]            ;657
000830  e1a02004          MOV      r2,r4                 ;658
000834  e1a03005          MOV      r3,r5                 ;658
000838  e28f0f62          ADR      r0,|L1.2504|
00083c  e58d6000          STR      r6,[sp,#0]            ;658
000840  ebfffffe          BL       sysprintf
000844  e1a00006          MOV      r0,r6                 ;660
000848  eaffffd5          B        |L1.1956|
                  |L1.2124|
00084c  ea000045          B        |L1.2408|
                  |L1.2128|
000850  e5970010          LDR      r0,[r7,#0x10]         ;664
000854  e2400001          SUB      r0,r0,#1              ;664
000858  e000b004          AND      r11,r0,r4             ;664
00085c  e5970010          LDR      r0,[r7,#0x10]         ;667
000860  e2400001          SUB      r0,r0,#1              ;667
000864  e1c40000          BIC      r0,r4,r0              ;667
000868  e3a01000          MOV      r1,#0                 ;667
00086c  e1cd00f0          STRD     r0,r1,[sp,#0]         ;667
000870  e1a02000          MOV      r2,r0                 ;667
000874  e1a03001          MOV      r3,r1                 ;667
000878  e1a00007          MOV      r0,r7                 ;667
00087c  ebfffffe          BL       nand_block_isbad
000880  e3500000          CMP      r0,#0                 ;667
000884  0a00000d          BEQ      |L1.2240|
000888  e5970010          LDR      r0,[r7,#0x10]         ;668
00088c  e2400001          SUB      r0,r0,#1              ;668
000890  e1c40000          BIC      r0,r4,r0              ;668
000894  e3a01000          MOV      r1,#0                 ;668
000898  e1cd00f0          STRD     r0,r1,[sp,#0]         ;668
00089c  e1a02000          MOV      r2,r0                 ;668
0008a0  e1a03001          MOV      r3,r1                 ;668
0008a4  e28f0f51          ADR      r0,|L1.2544|
0008a8  ebfffffe          BL       sysprintf
0008ac  e5970010          LDR      r0,[r7,#0x10]         ;670
0008b0  e040000b          SUB      r0,r0,r11             ;670
0008b4  e0944000          ADDS     r4,r4,r0              ;670
0008b8  e2a55000          ADC      r5,r5,#0              ;670
0008bc  ea000029          B        |L1.2408|
                  |L1.2240|
0008c0  e5970010          LDR      r0,[r7,#0x10]         ;674
0008c4  e040000b          SUB      r0,r0,r11             ;674
0008c8  e1500009          CMP      r0,r9                 ;674
0008cc  9a000001          BLS      |L1.2264|
0008d0  e58d9008          STR      r9,[sp,#8]            ;675
0008d4  ea000002          B        |L1.2276|
                  |L1.2264|
0008d8  e5970010          LDR      r0,[r7,#0x10]         ;677
0008dc  e040000b          SUB      r0,r0,r11             ;677
0008e0  e58d0008          STR      r0,[sp,#8]            ;677
                  |L1.2276|
0008e4  e59d000c          LDR      r0,[sp,#0xc]          ;679
0008e8  e28d1008          ADD      r1,sp,#8              ;679
0008ec  e1a02004          MOV      r2,r4                 ;679
0008f0  e1a03005          MOV      r3,r5                 ;679
0008f4  e58d0004          STR      r0,[sp,#4]            ;679
0008f8  e1a00007          MOV      r0,r7                 ;679
0008fc  e58d1000          STR      r1,[sp,#0]            ;679
000900  ebfffffe          BL       nand_read
000904  e1a06000          MOV      r6,r0                 ;679
000908  e3560000          CMP      r6,#0                 ;680
00090c  0a00000b          BEQ      |L1.2368|
000910  e3760075          CMN      r6,#0x75              ;680
000914  0a000009          BEQ      |L1.2368|
000918  e1a02004          MOV      r2,r4                 ;681
00091c  e1a03005          MOV      r3,r5                 ;681
000920  e28f00a0          ADR      r0,|L1.2504|
000924  e58d6000          STR      r6,[sp,#0]            ;681
000928  ebfffffe          BL       sysprintf
00092c  e5980000          LDR      r0,[r8,#0]            ;683
000930  e0400009          SUB      r0,r0,r9              ;683
000934  e5880000          STR      r0,[r8,#0]            ;683
000938  e1a00006          MOV      r0,r6                 ;684
00093c  eaffff98          B        |L1.1956|
                  |L1.2368|
000940  e59d0008          LDR      r0,[sp,#8]            ;687
000944  e0499000          SUB      r9,r9,r0              ;687
000948  e59d0008          LDR      r0,[sp,#8]            ;688
00094c  e0944000          ADDS     r4,r4,r0              ;688
000950  e2a55000          ADC      r5,r5,#0              ;688
000954  e59d000c          LDR      r0,[sp,#0xc]          ;689
000958  e59d1008          LDR      r1,[sp,#8]            ;689
00095c  e0800001          ADD      r0,r0,r1              ;689
000960  e58d000c          STR      r0,[sp,#0xc]          ;689
000964  e1a00000          MOV      r0,r0                 ;671
                  |L1.2408|
000968  e3590000          CMP      r9,#0                 ;663
00096c  1affffb7          BNE      |L1.2128|
000970  e3a00000          MOV      r0,#0                 ;692
000974  eaffff8a          B        |L1.1956|
                  |L1.2424|
000978  41747465          DCB      "Attempt to read non page-aligned data\n",0
00097c  6d707420
000980  746f2072
000984  65616420
000988  6e6f6e20
00098c  70616765
000990  2d616c69
000994  676e6564
000998  20646174
00099c  610a00  
00099f  00                DCB      0
                  |L1.2464|
0009a0  41747465          DCB      "Attempt to read outside the flash area\n",0
0009a4  6d707420
0009a8  746f2072
0009ac  65616420
0009b0  6f757473
0009b4  69646520
0009b8  74686520
0009bc  666c6173
0009c0  68206172
0009c4  65610a00
                  |L1.2504|
0009c8  4e414e44          DCB      "NAND read from offset %llx failed %d\n",0
0009cc  20726561
0009d0  64206672
0009d4  6f6d206f
0009d8  66667365
0009dc  7420256c
0009e0  6c782066
0009e4  61696c65
0009e8  64202564
0009ec  0a00    
0009ee  00                DCB      0
0009ef  00                DCB      0
                  |L1.2544|
0009f0  536b6970          DCB      "Skipping bad block 0x%08llx\n",0
0009f4  70696e67
0009f8  20626164
0009fc  20626c6f
000a00  636b2030
000a04  78253038
000a08  6c6c780a
000a0c  00      
000a0d  00                DCB      0
000a0e  00                DCB      0
000a0f  00                DCB      0
                          ENDP

                  nand_block_isbad PROC
;;;64     
;;;65     static __inline int nand_block_isbad(nand_info_t *info, loff_t ofs)
000a10  e92d4070          PUSH     {r4-r6,lr}
;;;66     {
000a14  e1a04000          MOV      r4,r0
000a18  e1a05002          MOV      r5,r2
000a1c  e1a06003          MOV      r6,r3
;;;67     	return info->block_isbad(info, ofs);
000a20  e1a02005          MOV      r2,r5
000a24  e1a03006          MOV      r3,r6
000a28  e5941078          LDR      r1,[r4,#0x78]
000a2c  e1a00004          MOV      r0,r4
000a30  e12fff31          BLX      r1
;;;68     }
000a34  e8bd8070          POP      {r4-r6,pc}
;;;69     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0d536b69          DCB      0x0d,0x53,0x6b,0x69
000004  7070696e          DCB      0x70,0x70,0x69,0x6e
000008  67206261          DCB      0x67,0x20,0x62,0x61
00000c  6420626c          DCB      0x64,0x20,0x62,0x6c
000010  6f636b20          DCB      0x6f,0x63,0x6b,0x20
000014  61742020          DCB      0x61,0x74,0x20,0x20
000018  30782530          DCB      0x30,0x78,0x25,0x30
00001c  386c6c78          DCB      0x38,0x6c,0x6c,0x78
000020  20202020          DCB      0x20,0x20,0x20,0x20
000024  20202020          DCB      0x20,0x20,0x20,0x20
000028  20202020          DCB      0x20,0x20,0x20,0x20
00002c  20202020          DCB      0x20,0x20,0x20,0x20
000030  20202020          DCB      0x20,0x20,0x20,0x20
000034  20202020          DCB      0x20,0x20,0x20,0x20
000038  20202020          DCB      0x20,0x20,0x20,0x20
00003c  20202020          DCB      0x20,0x20,0x20,0x20
000040  20202020          DCB      0x20,0x20,0x20,0x20
000044  20202020          DCB      0x20,0x20,0x20,0x20
000048  20200a00          DCB      0x20,0x20,0x0a,0x00
