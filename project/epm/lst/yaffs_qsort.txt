; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_qsort.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_qsort.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_qsort.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_qsort.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  swapfunc PROC
;;;50     static __inline void
;;;51     swapfunc(char *a, char *b, int n, int swaptype)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;52     {
000004  e1a04003          MOV      r4,r3
;;;53     	if (swaptype <= 1)
000008  e3540001          CMP      r4,#1
00000c  ca00000c          BGT      |L1.68|
;;;54     		swapcode(long, a, b, n);
000010  e1a00000          MOV      r0,r0
000014  e1a05122          LSR      r5,r2,#2
000018  e1a03000          MOV      r3,r0
00001c  e1a0c001          MOV      r12,r1
000020  e1a00000          MOV      r0,r0
                  |L1.36|
000024  e5936000          LDR      r6,[r3,#0]
000028  e59c7000          LDR      r7,[r12,#0]
00002c  e4837004          STR      r7,[r3],#4
000030  e48c6004          STR      r6,[r12],#4
000034  e2456001          SUB      r6,r5,#1
000038  e2565000          SUBS     r5,r6,#0
00003c  cafffff8          BGT      |L1.36|
000040  ea00000c          B        |L1.120|
                  |L1.68|
;;;55     	else
;;;56     		swapcode(char, a, b, n);
000044  e1a00000          MOV      r0,r0
000048  e1a05002          MOV      r5,r2
00004c  e1a03000          MOV      r3,r0
000050  e1a0c001          MOV      r12,r1
000054  e1a00000          MOV      r0,r0
                  |L1.88|
000058  e5d36000          LDRB     r6,[r3,#0]
00005c  e5dc7000          LDRB     r7,[r12,#0]
000060  e4c37001          STRB     r7,[r3],#1
000064  e4cc6001          STRB     r6,[r12],#1
000068  e2456001          SUB      r6,r5,#1
00006c  e2565000          SUBS     r5,r6,#0
000070  cafffff8          BGT      |L1.88|
000074  e1a00000          MOV      r0,r0
                  |L1.120|
;;;57     }
000078  e8bd80f0          POP      {r4-r7,pc}
;;;58     
                          ENDP

                  med3 PROC
;;;70     static __inline char *
;;;71     med3(char *a, char *b, char *c, int (*cmp)(const void *, const void *))
00007c  e92d41f0          PUSH     {r4-r8,lr}
;;;72     {
000080  e1a07000          MOV      r7,r0
000084  e1a05001          MOV      r5,r1
000088  e1a06002          MOV      r6,r2
00008c  e1a04003          MOV      r4,r3
;;;73     	return cmp(a, b) < 0 ?
000090  e1a01005          MOV      r1,r5
000094  e1a00007          MOV      r0,r7
000098  e12fff34          BLX      r4
00009c  e3500000          CMP      r0,#0
0000a0  aa00000f          BGE      |L1.228|
;;;74     		(cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a))
0000a4  e1a01006          MOV      r1,r6
0000a8  e1a00005          MOV      r0,r5
0000ac  e12fff34          BLX      r4
0000b0  e3500000          CMP      r0,#0
0000b4  aa000001          BGE      |L1.192|
0000b8  e1a00005          MOV      r0,r5
                  |L1.188|
;;;75     		: (cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c));
;;;76     }
0000bc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.192|
0000c0  e1a01006          MOV      r1,r6                 ;74
0000c4  e1a00007          MOV      r0,r7                 ;74
0000c8  e12fff34          BLX      r4                    ;74
0000cc  e3500000          CMP      r0,#0                 ;74
0000d0  aa000001          BGE      |L1.220|
0000d4  e1a00006          MOV      r0,r6                 ;74
0000d8  eafffff7          B        |L1.188|
                  |L1.220|
0000dc  e1a00007          MOV      r0,r7                 ;74
0000e0  eafffff5          B        |L1.188|
                  |L1.228|
0000e4  e1a01006          MOV      r1,r6                 ;75
0000e8  e1a00005          MOV      r0,r5                 ;75
0000ec  e12fff34          BLX      r4                    ;75
0000f0  e3500000          CMP      r0,#0                 ;75
0000f4  da000001          BLE      |L1.256|
0000f8  e1a00005          MOV      r0,r5                 ;75
0000fc  eaffffee          B        |L1.188|
                  |L1.256|
000100  e1a01006          MOV      r1,r6                 ;75
000104  e1a00007          MOV      r0,r7                 ;75
000108  e12fff34          BLX      r4                    ;75
00010c  e3500000          CMP      r0,#0                 ;75
000110  aa000001          BGE      |L1.284|
000114  e1a00007          MOV      r0,r7                 ;75
000118  eaffffe7          B        |L1.188|
                  |L1.284|
00011c  e1a00006          MOV      r0,r6                 ;75
000120  eaffffe5          B        |L1.188|
;;;77     
                          ENDP

                  yaffs_qsort PROC
;;;81     
;;;82     void yaffs_qsort(void *aa, size_t n, size_t es,
000124  e92d4fff          PUSH     {r0-r11,lr}
;;;83     	int (*cmp)(const void *, const void *))
;;;84     {
000128  e24dd01c          SUB      sp,sp,#0x1c
00012c  e1a09001          MOV      r9,r1
000130  e1a04002          MOV      r4,r2
;;;85     	char *pa, *pb, *pc, *pd, *pl, *pm, *pn;
;;;86     	int d, r, swaptype, swap_cnt;
;;;87     	register char *a = aa;
000134  e59d601c          LDR      r6,[sp,#0x1c]
;;;88     
;;;89     loop:	SWAPINIT(a, es);
000138  e1a00000          MOV      r0,r0
                  |L1.316|
00013c  e2460000          SUB      r0,r6,#0
000140  e3100003          TST      r0,#3
000144  1a000001          BNE      |L1.336|
000148  e3140003          TST      r4,#3
00014c  0a000001          BEQ      |L1.344|
                  |L1.336|
000150  e3a00002          MOV      r0,#2
000154  ea000004          B        |L1.364|
                  |L1.344|
000158  e3540004          CMP      r4,#4
00015c  0a000001          BEQ      |L1.360|
000160  e3a00001          MOV      r0,#1
000164  ea000000          B        |L1.364|
                  |L1.360|
000168  e3a00000          MOV      r0,#0
                  |L1.364|
00016c  e58d0008          STR      r0,[sp,#8]
;;;90     	swap_cnt = 0;
000170  e3a00000          MOV      r0,#0
000174  e58d0004          STR      r0,[sp,#4]
;;;91     	if (n < 7) {
000178  e3590007          CMP      r9,#7
00017c  2a000023          BCS      |L1.528|
;;;92     		for (pm = (char *)a + es; pm < (char *) a + n * es; pm += es)
000180  e086a004          ADD      r10,r6,r4
000184  ea00001c          B        |L1.508|
                  |L1.392|
;;;93     			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0;
000188  e1a0500a          MOV      r5,r10
00018c  ea000011          B        |L1.472|
                  |L1.400|
;;;94     			     pl -= es)
;;;95     				yswap(pl, pl - es);
000190  e1a00000          MOV      r0,r0
000194  e59d0008          LDR      r0,[sp,#8]
000198  e3500000          CMP      r0,#0
00019c  1a000006          BNE      |L1.444|
0001a0  e5950000          LDR      r0,[r5,#0]
0001a4  e0451004          SUB      r1,r5,r4
0001a8  e5911000          LDR      r1,[r1,#0]
0001ac  e5851000          STR      r1,[r5,#0]
0001b0  e0451004          SUB      r1,r5,r4
0001b4  e5810000          STR      r0,[r1,#0]
0001b8  ea000004          B        |L1.464|
                  |L1.444|
0001bc  e0451004          SUB      r1,r5,r4
0001c0  e1a02004          MOV      r2,r4
0001c4  e1a00005          MOV      r0,r5
0001c8  e59d3008          LDR      r3,[sp,#8]
0001cc  ebfffffe          BL       swapfunc
                  |L1.464|
0001d0  e1a00000          MOV      r0,r0
0001d4  e0455004          SUB      r5,r5,r4              ;94
                  |L1.472|
0001d8  e1550006          CMP      r5,r6                 ;93
0001dc  9a000005          BLS      |L1.504|
0001e0  e0450004          SUB      r0,r5,r4              ;93
0001e4  e1a01005          MOV      r1,r5                 ;93
0001e8  e59d2028          LDR      r2,[sp,#0x28]         ;93
0001ec  e12fff32          BLX      r2                    ;93
0001f0  e3500000          CMP      r0,#0                 ;93
0001f4  caffffe5          BGT      |L1.400|
                  |L1.504|
0001f8  e08aa004          ADD      r10,r10,r4            ;92
                  |L1.508|
0001fc  e0206499          MLA      r0,r9,r4,r6           ;92
000200  e150000a          CMP      r0,r10                ;92
000204  8affffdf          BHI      |L1.392|
                  |L1.520|
;;;96     		return;
;;;97     	}
;;;98     	pm = (char *)a + (n / 2) * es;
;;;99     	if (n > 7) {
;;;100    		pl = (char *)a;
;;;101    		pn = (char *)a + (n - 1) * es;
;;;102    		if (n > 40) {
;;;103    			d = (n / 8) * es;
;;;104    			pl = med3(pl, pl + d, pl + 2 * d, cmp);
;;;105    			pm = med3(pm - d, pm, pm + d, cmp);
;;;106    			pn = med3(pn - 2 * d, pn - d, pn, cmp);
;;;107    		}
;;;108    		pm = med3(pl, pm, pn, cmp);
;;;109    	}
;;;110    	yswap(a, pm);
;;;111    	pa = pb = (char *)a + es;
;;;112    
;;;113    	pc = pd = (char *)a + (n - 1) * es;
;;;114    	for (;;) {
;;;115    		while (pb <= pc && (r = cmp(pb, a)) <= 0) {
;;;116    			if (r == 0) {
;;;117    				swap_cnt = 1;
;;;118    				yswap(pa, pb);
;;;119    				pa += es;
;;;120    			}
;;;121    			pb += es;
;;;122    		}
;;;123    		while (pb <= pc && (r = cmp(pc, a)) >= 0) {
;;;124    			if (r == 0) {
;;;125    				swap_cnt = 1;
;;;126    				yswap(pc, pd);
;;;127    				pd -= es;
;;;128    			}
;;;129    			pc -= es;
;;;130    		}
;;;131    		if (pb > pc)
;;;132    			break;
;;;133    		yswap(pb, pc);
;;;134    		swap_cnt = 1;
;;;135    		pb += es;
;;;136    		pc -= es;
;;;137    	}
;;;138    	if (swap_cnt == 0) {  /* Switch to insertion sort */
;;;139    		for (pm = (char *) a + es; pm < (char *) a + n * es; pm += es)
;;;140    			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0;
;;;141    			     pl -= es)
;;;142    				yswap(pl, pl - es);
;;;143    		return;
;;;144    	}
;;;145    
;;;146    	pn = (char *)a + n * es;
;;;147    	r = min(pa - (char *)a, pb - pa);
;;;148    	vecswap(a, pb - r, r);
;;;149    	r = min((long)(pd - pc), (long)(pn - pd - es));
;;;150    	vecswap(pb, pn - r, r);
;;;151    	r = pb - pa;
;;;152    	if (r > es)
;;;153    		yaffs_qsort(a, r / es, es, cmp);
;;;154    	r = pd - pc;
;;;155    	if (r > es) {
;;;156    		/* Iterate rather than recurse to save stack space */
;;;157    		a = pn - r;
;;;158    		n = r / es;
;;;159    		goto loop;
;;;160    	}
;;;161    /*		yaffs_qsort(pn - r, r / es, es, cmp);*/
;;;162    }
000208  e28dd02c          ADD      sp,sp,#0x2c
00020c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.528|
000210  e1a000a9          LSR      r0,r9,#1              ;98
000214  e02a6490          MLA      r10,r0,r4,r6          ;98
000218  e3590007          CMP      r9,#7                 ;99
00021c  9a000026          BLS      |L1.700|
000220  e1a05006          MOV      r5,r6                 ;100
000224  e2490001          SUB      r0,r9,#1              ;101
000228  e0206094          MLA      r0,r4,r0,r6           ;101
00022c  e58d0010          STR      r0,[sp,#0x10]         ;101
000230  e3590028          CMP      r9,#0x28              ;102
000234  9a00001a          BLS      |L1.676|
000238  e1a001a9          LSR      r0,r9,#3              ;103
00023c  e0000094          MUL      r0,r4,r0              ;103
000240  e58d000c          STR      r0,[sp,#0xc]          ;103
000244  e3a03002          MOV      r3,#2                 ;104
000248  e59d000c          LDR      r0,[sp,#0xc]          ;104
00024c  e0225093          MLA      r2,r3,r0,r5           ;104
000250  e0851000          ADD      r1,r5,r0              ;104
000254  e1a00005          MOV      r0,r5                 ;104
000258  e59d3028          LDR      r3,[sp,#0x28]         ;104
00025c  ebfffffe          BL       med3
000260  e1a05000          MOV      r5,r0                 ;104
000264  e59d100c          LDR      r1,[sp,#0xc]          ;105
000268  e08a2001          ADD      r2,r10,r1             ;105
00026c  e04a0001          SUB      r0,r10,r1             ;105
000270  e1a0100a          MOV      r1,r10                ;105
000274  e59d3028          LDR      r3,[sp,#0x28]         ;105
000278  ebfffffe          BL       med3
00027c  e1a0a000          MOV      r10,r0                ;105
000280  e59d200c          LDR      r2,[sp,#0xc]          ;106
000284  e59d3010          LDR      r3,[sp,#0x10]         ;106
000288  e0431002          SUB      r1,r3,r2              ;106
00028c  e1a03082          LSL      r3,r2,#1              ;106
000290  e59d2010          LDR      r2,[sp,#0x10]         ;106
000294  e0420003          SUB      r0,r2,r3              ;106
000298  e59d3028          LDR      r3,[sp,#0x28]         ;106
00029c  ebfffffe          BL       med3
0002a0  e58d0010          STR      r0,[sp,#0x10]         ;106
                  |L1.676|
0002a4  e1a0100a          MOV      r1,r10                ;108
0002a8  e1a00005          MOV      r0,r5                 ;108
0002ac  e59d2010          LDR      r2,[sp,#0x10]         ;108
0002b0  e59d3028          LDR      r3,[sp,#0x28]         ;108
0002b4  ebfffffe          BL       med3
0002b8  e1a0a000          MOV      r10,r0                ;108
                  |L1.700|
0002bc  e1a00000          MOV      r0,r0                 ;110
0002c0  e59d0008          LDR      r0,[sp,#8]            ;110
0002c4  e3500000          CMP      r0,#0                 ;110
0002c8  1a000004          BNE      |L1.736|
0002cc  e5960000          LDR      r0,[r6,#0]            ;110
0002d0  e59a1000          LDR      r1,[r10,#0]           ;110
0002d4  e5861000          STR      r1,[r6,#0]            ;110
0002d8  e58a0000          STR      r0,[r10,#0]           ;110
0002dc  ea000004          B        |L1.756|
                  |L1.736|
0002e0  e1a02004          MOV      r2,r4                 ;110
0002e4  e1a0100a          MOV      r1,r10                ;110
0002e8  e1a00006          MOV      r0,r6                 ;110
0002ec  e59d3008          LDR      r3,[sp,#8]            ;110
0002f0  ebfffffe          BL       swapfunc
                  |L1.756|
0002f4  e1a00000          MOV      r0,r0                 ;110
0002f8  e0860004          ADD      r0,r6,r4              ;111
0002fc  e1a07000          MOV      r7,r0                 ;111
000300  e58d0018          STR      r0,[sp,#0x18]         ;111
000304  e2490001          SUB      r0,r9,#1              ;113
000308  e0206094          MLA      r0,r4,r0,r6           ;113
00030c  e58d0014          STR      r0,[sp,#0x14]         ;113
000310  e1a08000          MOV      r8,r0                 ;113
000314  e1a00000          MOV      r0,r0                 ;114
                  |L1.792|
000318  ea000018          B        |L1.896|
                  |L1.796|
00031c  e35b0000          CMP      r11,#0                ;116
000320  1a000015          BNE      |L1.892|
000324  e3a00001          MOV      r0,#1                 ;117
000328  e58d0004          STR      r0,[sp,#4]            ;117
00032c  e1a00000          MOV      r0,r0                 ;118
000330  e59d0008          LDR      r0,[sp,#8]            ;118
000334  e3500000          CMP      r0,#0                 ;118
000338  1a000006          BNE      |L1.856|
00033c  e59d1018          LDR      r1,[sp,#0x18]         ;118
000340  e5910000          LDR      r0,[r1,#0]            ;118
000344  e5972000          LDR      r2,[r7,#0]            ;118
000348  e59d1018          LDR      r1,[sp,#0x18]         ;118
00034c  e5812000          STR      r2,[r1,#0]            ;118
000350  e5870000          STR      r0,[r7,#0]            ;118
000354  ea000004          B        |L1.876|
                  |L1.856|
000358  e1a02004          MOV      r2,r4                 ;118
00035c  e1a01007          MOV      r1,r7                 ;118
000360  e59d0018          LDR      r0,[sp,#0x18]         ;118
000364  e59d3008          LDR      r3,[sp,#8]            ;118
000368  ebfffffe          BL       swapfunc
                  |L1.876|
00036c  e1a00000          MOV      r0,r0                 ;118
000370  e59d0018          LDR      r0,[sp,#0x18]         ;119
000374  e0800004          ADD      r0,r0,r4              ;119
000378  e58d0018          STR      r0,[sp,#0x18]         ;119
                  |L1.892|
00037c  e0877004          ADD      r7,r7,r4              ;121
                  |L1.896|
000380  e1570008          CMP      r7,r8                 ;115
000384  8a000005          BHI      |L1.928|
000388  e1a01006          MOV      r1,r6                 ;115
00038c  e1a00007          MOV      r0,r7                 ;115
000390  e59d2028          LDR      r2,[sp,#0x28]         ;115
000394  e12fff32          BLX      r2                    ;115
000398  e250b000          SUBS     r11,r0,#0             ;115
00039c  daffffde          BLE      |L1.796|
                  |L1.928|
0003a0  ea000018          B        |L1.1032|
                  |L1.932|
0003a4  e35b0000          CMP      r11,#0                ;124
0003a8  1a000015          BNE      |L1.1028|
0003ac  e3a00001          MOV      r0,#1                 ;125
0003b0  e58d0004          STR      r0,[sp,#4]            ;125
0003b4  e1a00000          MOV      r0,r0                 ;126
0003b8  e59d0008          LDR      r0,[sp,#8]            ;126
0003bc  e3500000          CMP      r0,#0                 ;126
0003c0  1a000006          BNE      |L1.992|
0003c4  e5980000          LDR      r0,[r8,#0]            ;126
0003c8  e59d1014          LDR      r1,[sp,#0x14]         ;126
0003cc  e5911000          LDR      r1,[r1,#0]            ;126
0003d0  e5881000          STR      r1,[r8,#0]            ;126
0003d4  e59d1014          LDR      r1,[sp,#0x14]         ;126
0003d8  e5810000          STR      r0,[r1,#0]            ;126
0003dc  ea000004          B        |L1.1012|
                  |L1.992|
0003e0  e1a02004          MOV      r2,r4                 ;126
0003e4  e1a00008          MOV      r0,r8                 ;126
0003e8  e59d1014          LDR      r1,[sp,#0x14]         ;126
0003ec  e59d3008          LDR      r3,[sp,#8]            ;126
0003f0  ebfffffe          BL       swapfunc
                  |L1.1012|
0003f4  e1a00000          MOV      r0,r0                 ;126
0003f8  e59d0014          LDR      r0,[sp,#0x14]         ;127
0003fc  e0400004          SUB      r0,r0,r4              ;127
000400  e58d0014          STR      r0,[sp,#0x14]         ;127
                  |L1.1028|
000404  e0488004          SUB      r8,r8,r4              ;129
                  |L1.1032|
000408  e1570008          CMP      r7,r8                 ;123
00040c  8a000005          BHI      |L1.1064|
000410  e1a01006          MOV      r1,r6                 ;123
000414  e1a00008          MOV      r0,r8                 ;123
000418  e59d2028          LDR      r2,[sp,#0x28]         ;123
00041c  e12fff32          BLX      r2                    ;123
000420  e250b000          SUBS     r11,r0,#0             ;123
000424  aaffffde          BGE      |L1.932|
                  |L1.1064|
000428  e1570008          CMP      r7,r8                 ;131
00042c  9a000000          BLS      |L1.1076|
000430  ea000013          B        |L1.1156|
                  |L1.1076|
000434  e1a00000          MOV      r0,r0                 ;133
000438  e59d0008          LDR      r0,[sp,#8]            ;133
00043c  e3500000          CMP      r0,#0                 ;133
000440  1a000004          BNE      |L1.1112|
000444  e5970000          LDR      r0,[r7,#0]            ;133
000448  e5981000          LDR      r1,[r8,#0]            ;133
00044c  e5871000          STR      r1,[r7,#0]            ;133
000450  e5880000          STR      r0,[r8,#0]            ;133
000454  ea000004          B        |L1.1132|
                  |L1.1112|
000458  e1a02004          MOV      r2,r4                 ;133
00045c  e1a01008          MOV      r1,r8                 ;133
000460  e1a00007          MOV      r0,r7                 ;133
000464  e59d3008          LDR      r3,[sp,#8]            ;133
000468  ebfffffe          BL       swapfunc
                  |L1.1132|
00046c  e1a00000          MOV      r0,r0                 ;133
000470  e3a00001          MOV      r0,#1                 ;134
000474  e58d0004          STR      r0,[sp,#4]            ;134
000478  e0877004          ADD      r7,r7,r4              ;135
00047c  e0488004          SUB      r8,r8,r4              ;136
000480  eaffffa4          B        |L1.792|
                  |L1.1156|
000484  e1a00000          MOV      r0,r0                 ;132
000488  e59d0004          LDR      r0,[sp,#4]            ;138
00048c  e3500000          CMP      r0,#0                 ;138
000490  1a000022          BNE      |L1.1312|
000494  e086a004          ADD      r10,r6,r4             ;139
000498  ea00001c          B        |L1.1296|
                  |L1.1180|
00049c  e1a0500a          MOV      r5,r10                ;140
0004a0  ea000011          B        |L1.1260|
                  |L1.1188|
0004a4  e1a00000          MOV      r0,r0                 ;142
0004a8  e59d0008          LDR      r0,[sp,#8]            ;142
0004ac  e3500000          CMP      r0,#0                 ;142
0004b0  1a000006          BNE      |L1.1232|
0004b4  e5950000          LDR      r0,[r5,#0]            ;142
0004b8  e0451004          SUB      r1,r5,r4              ;142
0004bc  e5911000          LDR      r1,[r1,#0]            ;142
0004c0  e5851000          STR      r1,[r5,#0]            ;142
0004c4  e0451004          SUB      r1,r5,r4              ;142
0004c8  e5810000          STR      r0,[r1,#0]            ;142
0004cc  ea000004          B        |L1.1252|
                  |L1.1232|
0004d0  e0451004          SUB      r1,r5,r4              ;142
0004d4  e1a02004          MOV      r2,r4                 ;142
0004d8  e1a00005          MOV      r0,r5                 ;142
0004dc  e59d3008          LDR      r3,[sp,#8]            ;142
0004e0  ebfffffe          BL       swapfunc
                  |L1.1252|
0004e4  e1a00000          MOV      r0,r0                 ;142
0004e8  e0455004          SUB      r5,r5,r4              ;141
                  |L1.1260|
0004ec  e1550006          CMP      r5,r6                 ;140
0004f0  9a000005          BLS      |L1.1292|
0004f4  e0450004          SUB      r0,r5,r4              ;140
0004f8  e1a01005          MOV      r1,r5                 ;140
0004fc  e59d2028          LDR      r2,[sp,#0x28]         ;140
000500  e12fff32          BLX      r2                    ;140
000504  e3500000          CMP      r0,#0                 ;140
000508  caffffe5          BGT      |L1.1188|
                  |L1.1292|
00050c  e08aa004          ADD      r10,r10,r4            ;139
                  |L1.1296|
000510  e0206499          MLA      r0,r9,r4,r6           ;139
000514  e150000a          CMP      r0,r10                ;139
000518  8affffdf          BHI      |L1.1180|
00051c  eaffff39          B        |L1.520|
                  |L1.1312|
000520  e0206499          MLA      r0,r9,r4,r6           ;146
000524  e58d0010          STR      r0,[sp,#0x10]         ;146
000528  e59d0018          LDR      r0,[sp,#0x18]         ;147
00052c  e0401006          SUB      r1,r0,r6              ;147
000530  e0470000          SUB      r0,r7,r0              ;147
000534  e1510000          CMP      r1,r0                 ;147
000538  aa000002          BGE      |L1.1352|
00053c  e59d0018          LDR      r0,[sp,#0x18]         ;147
000540  e0400006          SUB      r0,r0,r6              ;147
000544  ea000001          B        |L1.1360|
                  |L1.1352|
000548  e59d0018          LDR      r0,[sp,#0x18]         ;147
00054c  e0470000          SUB      r0,r7,r0              ;147
                  |L1.1360|
000550  e1a0b000          MOV      r11,r0                ;147
000554  e35b0000          CMP      r11,#0                ;148
000558  da000004          BLE      |L1.1392|
00055c  e047100b          SUB      r1,r7,r11             ;148
000560  e1a0200b          MOV      r2,r11                ;148
000564  e1a00006          MOV      r0,r6                 ;148
000568  e59d3008          LDR      r3,[sp,#8]            ;148
00056c  ebfffffe          BL       swapfunc
                  |L1.1392|
000570  e59d0014          LDR      r0,[sp,#0x14]         ;149
000574  e0402008          SUB      r2,r0,r8              ;149
000578  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;149
00057c  e0400001          SUB      r0,r0,r1              ;149
000580  e0400004          SUB      r0,r0,r4              ;149
000584  e1520000          CMP      r2,r0                 ;149
000588  aa000002          BGE      |L1.1432|
00058c  e59d0014          LDR      r0,[sp,#0x14]         ;149
000590  e0400008          SUB      r0,r0,r8              ;149
000594  ea000002          B        |L1.1444|
                  |L1.1432|
000598  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;149
00059c  e0400001          SUB      r0,r0,r1              ;149
0005a0  e0400004          SUB      r0,r0,r4              ;149
                  |L1.1444|
0005a4  e1a0b000          MOV      r11,r0                ;149
0005a8  e35b0000          CMP      r11,#0                ;150
0005ac  da000005          BLE      |L1.1480|
0005b0  e59d0010          LDR      r0,[sp,#0x10]         ;150
0005b4  e040100b          SUB      r1,r0,r11             ;150
0005b8  e1a0200b          MOV      r2,r11                ;150
0005bc  e1a00007          MOV      r0,r7                 ;150
0005c0  e59d3008          LDR      r3,[sp,#8]            ;150
0005c4  ebfffffe          BL       swapfunc
                  |L1.1480|
0005c8  e59d0018          LDR      r0,[sp,#0x18]         ;151
0005cc  e047b000          SUB      r11,r7,r0             ;151
0005d0  e15b0004          CMP      r11,r4                ;152
0005d4  9a000008          BLS      |L1.1532|
0005d8  e1a01004          MOV      r1,r4                 ;153
0005dc  e1a0000b          MOV      r0,r11                ;153
0005e0  ebfffffe          BL       __aeabi_uidivmod
0005e4  e58d0000          STR      r0,[sp,#0]            ;153
0005e8  e1a02004          MOV      r2,r4                 ;153
0005ec  e1a01000          MOV      r1,r0                 ;153
0005f0  e1a00006          MOV      r0,r6                 ;153
0005f4  e59d3028          LDR      r3,[sp,#0x28]         ;153
0005f8  ebfffffe          BL       yaffs_qsort
                  |L1.1532|
0005fc  e59d0014          LDR      r0,[sp,#0x14]         ;154
000600  e040b008          SUB      r11,r0,r8             ;154
000604  e15b0004          CMP      r11,r4                ;155
000608  9a000006          BLS      |L1.1576|
00060c  e59d0010          LDR      r0,[sp,#0x10]         ;157
000610  e040600b          SUB      r6,r0,r11             ;157
000614  e1a01004          MOV      r1,r4                 ;158
000618  e1a0000b          MOV      r0,r11                ;158
00061c  ebfffffe          BL       __aeabi_uidivmod
000620  e1a09000          MOV      r9,r0                 ;158
000624  eafffec4          B        |L1.316|
                  |L1.1576|
000628  e1a00000          MOV      r0,r0
00062c  eafffef5          B        |L1.520|
                          ENDP

