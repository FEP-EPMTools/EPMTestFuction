; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guioff.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guioff.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guioff.crf src\user\guioff.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;52     /*-----------------------------------------*/
;;;53     static void updateBG(void)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;54     {
;;;55         TickType_t tickLocalStart = xTaskGetTickCount();
000004  ebfffffe          BL       xTaskGetTickCount
000008  e1a04000          MOV      r4,r0
;;;56         //sysprintf(" [INFO GUI] <Off> updateBG enter: cost ticks = [%d]\n", xTaskGetTickCount() - tickStart);  
;;;57     //    EPDShowBGScreen(EPD_PICT_INDEX_OFF, TRUE); 
;;;58         sysprintf(" [INFO GUI] <Off> updateBG: **Local:[%d]**, **[%d]**\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - tickStart);    
00000c  ebfffffe          BL       xTaskGetTickCount
000010  e59f11fc          LDR      r1,|L1.532|
000014  e5911000          LDR      r1,[r1,#0]  ; tickStart
000018  e0405001          SUB      r5,r0,r1
00001c  ebfffffe          BL       xTaskGetTickCount
000020  e0406004          SUB      r6,r0,r4
000024  e1a02005          MOV      r2,r5
000028  e1a01006          MOV      r1,r6
00002c  e28f0f79          ADR      r0,|L1.536|
000030  ebfffffe          BL       sysprintf
;;;59      
;;;60     }
000034  e8bd8070          POP      {r4-r6,pc}
;;;61     static void updateData(void)
                          ENDP

                  updateData PROC
000038  e92d4010          PUSH     {r4,lr}
;;;62     {
;;;63         TickType_t tickLocalStart = xTaskGetTickCount();
00003c  ebfffffe          BL       xTaskGetTickCount
000040  e1a04000          MOV      r4,r0
;;;64         //sysprintf(" [INFO GUI] <Off> updateData enter: cost ticks = [%d]\n", xTaskGetTickCount() - tickStart);  
;;;65         
;;;66         //sysprintf(" [INFO GUI] <Off> updateData: [%d]. Key tick = ![%d]!\n", xTaskGetTickCount() - tickLocalStart, xTaskGetTickCount() - keyStart);
;;;67         //sysDelay(100);
;;;68     }
000044  e8bd8010          POP      {r4,pc}
;;;69     
                          ENDP

                  GuiOffOnDraw PROC
;;;72     /*-----------------------------------------*/
;;;73     BOOL GuiOffOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int para2, int para3)
000048  e92d40f8          PUSH     {r3-r7,lr}
;;;74     {
00004c  e1a04000          MOV      r4,r0
000050  e1a05001          MOV      r5,r1
000054  e1a06002          MOV      r6,r2
000058  e1a07003          MOV      r7,r3
;;;75         tickStart = xTaskGetTickCount();
00005c  ebfffffe          BL       xTaskGetTickCount
000060  e59f11ac          LDR      r1,|L1.532|
000064  e5810000          STR      r0,[r1,#0]  ; tickStart
;;;76         sysprintf(" [INFO GUI] <Off> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
000068  e1a03006          MOV      r3,r6
00006c  e1a02005          MOV      r2,r5
000070  e1a01004          MOV      r1,r4
000074  e59f01d4          LDR      r0,|L1.592|
000078  e58d7000          STR      r7,[sp,#0]
00007c  ebfffffe          BL       sysprintf
;;;77         powerStatus = TRUE;
000080  e3a00001          MOV      r0,#1
000084  e59f11c8          LDR      r1,|L1.596|
000088  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;78         pGuiGetInterface = GuiGetInterface();
00008c  ebfffffe          BL       GuiGetInterface
000090  e59f11c0          LDR      r1,|L1.600|
000094  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;79         pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
000098  e2810000          ADD      r0,r1,#0
00009c  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000a0  e3e01000          MVN      r1,#0
0000a4  e590200c          LDR      r2,[r0,#0xc]
0000a8  e3a00000          MOV      r0,#0
0000ac  e12fff32          BLX      r2
;;;80         pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
0000b0  e59f01a0          LDR      r0,|L1.600|
0000b4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000b8  e3a010c8          MOV      r1,#0xc8
0000bc  e590200c          LDR      r2,[r0,#0xc]
0000c0  e3a00001          MOV      r0,#1
0000c4  e12fff32          BLX      r2
;;;81         
;;;82         pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
0000c8  e59f0188          LDR      r0,|L1.600|
0000cc  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0000d0  e5901010          LDR      r1,[r0,#0x10]
0000d4  e3a00000          MOV      r0,#0
0000d8  e12fff31          BLX      r1
;;;83         //sysprintf(" [INFO GUI] <Off> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;84         return TRUE;
0000dc  e3a00001          MOV      r0,#1
;;;85     }
0000e0  e8bd80f8          POP      {r3-r7,pc}
;;;86     BOOL GuiOffKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiOffKeyCallback PROC
0000e4  e92d4070          PUSH     {r4-r6,lr}
;;;87     {
0000e8  e1a04000          MOV      r4,r0
0000ec  e1a05001          MOV      r5,r1
;;;88         //sysprintf(" [INFO GUI] <Off> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;89         BOOL reVal = FALSE; 
0000f0  e3a06000          MOV      r6,#0
;;;90         if(keyIgnoreFlag)
0000f4  e59f0160          LDR      r0,|L1.604|
0000f8  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
0000fc  e3500000          CMP      r0,#0
000100  0a000003          BEQ      |L1.276|
;;;91         {
;;;92             sysprintf(" [INFO GUI] <Off> Key:  ignore...\n"); 
000104  e28f0f55          ADR      r0,|L1.608|
000108  ebfffffe          BL       sysprintf
;;;93             return reVal;
00010c  e1a00006          MOV      r0,r6
                  |L1.272|
;;;94         }
;;;95         //pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
;;;96         if(GUI_KEY_DOWN_INDEX == downUp)
;;;97         {
;;;98             switch(keyId)
;;;99             {
;;;100                case GUI_KEYPAD_LEFT_ID:
;;;101                   
;;;102                    break;
;;;103                case GUI_KEYPAD_RIGHT_ID:
;;;104                    
;;;105                    break;
;;;106                case GUI_KEYPAD_ADD_ID:
;;;107                   
;;;108                    break;
;;;109                case GUI_KEYPAD_MINUS_ID:
;;;110                    
;;;111                    break;
;;;112            #if(SUPPORT_HK_10_HW)
;;;113                case GUI_KEYPAD_QRCODE_ID:
;;;114            #else
;;;115                case GUI_KEYPAD_CONFIRM_ID:
;;;116            #endif
;;;117                    
;;;118                    break;
;;;119                case GUI_KEYPAD_REPLACE_BP_ID:
;;;120                    EPDReSetBacklightTimeout(portMAX_DELAY);
;;;121                    GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;122                    reVal = TRUE;
;;;123                    break;
;;;124                
;;;125                case GUI_KEYPAD_TESTER_ID:
;;;126                    EPDReSetBacklightTimeout(portMAX_DELAY);
;;;127                    GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;128                    reVal = TRUE;
;;;129                    break;
;;;130                
;;;131                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;132                    EPDReSetBacklightTimeout(portMAX_DELAY);
;;;133                    GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;134                    reVal = TRUE;
;;;135                    break;
;;;136            }
;;;137        }
;;;138        else
;;;139        {
;;;140            
;;;141        }
;;;142        return reVal;
;;;143    }
000110  e8bd8070          POP      {r4-r6,pc}
                  |L1.276|
000114  e3550001          CMP      r5,#1                 ;96
000118  1a00003b          BNE      |L1.524|
00011c  e3540004          CMP      r4,#4                 ;98
000120  0a000014          BEQ      |L1.376|
000124  ca000008          BGT      |L1.332|
000128  e3540000          CMP      r4,#0                 ;98
00012c  0a000015          BEQ      |L1.392|
000130  e3540001          CMP      r4,#1                 ;98
000134  0a000011          BEQ      |L1.384|
000138  e3540002          CMP      r4,#2                 ;98
00013c  0a00000b          BEQ      |L1.368|
000140  e3540003          CMP      r4,#3                 ;98
000144  1a00002f          BNE      |L1.520|
000148  ea000006          B        |L1.360|
                  |L1.332|
00014c  e3540011          CMP      r4,#0x11              ;98
000150  0a00000e          BEQ      |L1.400|
000154  e3540013          CMP      r4,#0x13              ;98
000158  0a000020          BEQ      |L1.480|
00015c  e3540014          CMP      r4,#0x14              ;98
000160  1a000028          BNE      |L1.520|
000164  ea000013          B        |L1.440|
                  |L1.360|
000168  e1a00000          MOV      r0,r0                 ;100
00016c  ea000025          B        |L1.520|
                  |L1.368|
000170  e1a00000          MOV      r0,r0                 ;103
000174  ea000023          B        |L1.520|
                  |L1.376|
000178  e1a00000          MOV      r0,r0                 ;106
00017c  ea000021          B        |L1.520|
                  |L1.384|
000180  e1a00000          MOV      r0,r0                 ;109
000184  ea00001f          B        |L1.520|
                  |L1.392|
000188  e1a00000          MOV      r0,r0                 ;113
00018c  ea00001d          B        |L1.520|
                  |L1.400|
000190  e1a00000          MOV      r0,r0                 ;119
000194  e3e00000          MVN      r0,#0                 ;120
000198  ebfffffe          BL       EPDReSetBacklightTimeout
00019c  e3a03000          MOV      r3,#0                 ;121
0001a0  e1a02003          MOV      r2,r3                 ;121
0001a4  e3a01003          MOV      r1,#3                 ;121
0001a8  e3a00008          MOV      r0,#8                 ;121
0001ac  ebfffffe          BL       GuiManagerShowScreen
0001b0  e3a06001          MOV      r6,#1                 ;122
0001b4  ea000013          B        |L1.520|
                  |L1.440|
0001b8  e1a00000          MOV      r0,r0                 ;125
0001bc  e3e00000          MVN      r0,#0                 ;126
0001c0  ebfffffe          BL       EPDReSetBacklightTimeout
0001c4  e3a03000          MOV      r3,#0                 ;127
0001c8  e1a02003          MOV      r2,r3                 ;127
0001cc  e3a01003          MOV      r1,#3                 ;127
0001d0  e3a00009          MOV      r0,#9                 ;127
0001d4  ebfffffe          BL       GuiManagerShowScreen
0001d8  e3a06001          MOV      r6,#1                 ;128
0001dc  ea000009          B        |L1.520|
                  |L1.480|
0001e0  e1a00000          MOV      r0,r0                 ;131
0001e4  e3e00000          MVN      r0,#0                 ;132
0001e8  ebfffffe          BL       EPDReSetBacklightTimeout
0001ec  e3a03000          MOV      r3,#0                 ;133
0001f0  e1a02003          MOV      r2,r3                 ;133
0001f4  e3a01003          MOV      r1,#3                 ;133
0001f8  e3a0000a          MOV      r0,#0xa               ;133
0001fc  ebfffffe          BL       GuiManagerShowScreen
000200  e3a06001          MOV      r6,#1                 ;134
000204  e1a00000          MOV      r0,r0                 ;135
                  |L1.520|
000208  e1a00000          MOV      r0,r0                 ;102
                  |L1.524|
00020c  e1a00006          MOV      r0,r6                 ;142
000210  eaffffbe          B        |L1.272|
                  |L1.532|
                          DCD      tickStart
                  |L1.536|
000218  205b494e          DCB      " [INFO GUI] <Off> updateBG: **Local:[%d]**, **[%d]**\n",0
00021c  464f2047
000220  55495d20
000224  3c4f6666
000228  3e207570
00022c  64617465
000230  42473a20
000234  2a2a4c6f
000238  63616c3a
00023c  5b25645d
000240  2a2a2c20
000244  2a2a5b25
000248  645d2a2a
00024c  0a00    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L1.592|
                          DCD      ||.constdata||
                  |L1.596|
                          DCD      powerStatus
                  |L1.600|
                          DCD      pGuiGetInterface
                  |L1.604|
                          DCD      keyIgnoreFlag
                  |L1.608|
000260  205b494e          DCB      " [INFO GUI] <Off> Key:  ignore...\n",0
000264  464f2047
000268  55495d20
00026c  3c4f6666
000270  3e204b65
000274  793a2020
000278  69676e6f
00027c  72652e2e
000280  2e0a00  
000283  00                DCB      0
                          ENDP

                  GuiOffTimerCallback PROC
;;;144    BOOL GuiOffTimerCallback(uint8_t timerIndex)
000284  e92d4010          PUSH     {r4,lr}
;;;145    {
000288  e1a04000          MOV      r4,r0
;;;146        //sysprintf(" [INFO GUI] <Off> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;147        keyIgnoreFlag = TRUE;
00028c  e3a00001          MOV      r0,#1
000290  e51f103c          LDR      r1,|L1.604|
000294  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;148        switch(timerIndex)
000298  e3540000          CMP      r4,#0
00029c  0a000004          BEQ      |L1.692|
0002a0  e3540001          CMP      r4,#1
0002a4  0a000005          BEQ      |L1.704|
0002a8  e3540002          CMP      r4,#2
0002ac  1a000008          BNE      |L1.724|
0002b0  ea000005          B        |L1.716|
                  |L1.692|
;;;149        {
;;;150            case UPDATE_BG_TIMER:
0002b4  e1a00000          MOV      r0,r0
;;;151                updateBG();
0002b8  ebfffffe          BL       updateBG
;;;152                break;
0002bc  ea000004          B        |L1.724|
                  |L1.704|
;;;153            case UPDATE_DATA_TIMER:
0002c0  e1a00000          MOV      r0,r0
;;;154                updateData();
0002c4  ebfffffe          BL       updateData
;;;155                break;
0002c8  ea000001          B        |L1.724|
                  |L1.716|
;;;156            case EXIT_TIMER:
0002cc  e1a00000          MOV      r0,r0
;;;157                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);        
;;;158                break;
0002d0  e1a00000          MOV      r0,r0
                  |L1.724|
0002d4  e1a00000          MOV      r0,r0                 ;152
;;;159    
;;;160        }
;;;161        keyIgnoreFlag = FALSE;
0002d8  e3a00000          MOV      r0,#0
0002dc  e51f1088          LDR      r1,|L1.604|
0002e0  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;162        return TRUE;
0002e4  e3a00001          MOV      r0,#1
;;;163    }
0002e8  e8bd8010          POP      {r4,pc}
;;;164    
                          ENDP

                  GuiOffPowerCallbackFunc PROC
;;;165    BOOL GuiOffPowerCallbackFunc(uint8_t type, int flag)
0002ec  e1a02000          MOV      r2,r0
;;;166    {
;;;167        //sysprintf(" [INFO GUI] <Off> power [%d] : flag = %d!!\n", type, flag);
;;;168        switch(type)
0002f0  e3520001          CMP      r2,#1
0002f4  0a000006          BEQ      |L1.788|
0002f8  e3520002          CMP      r2,#2
0002fc  0a000008          BEQ      |L1.804|
000300  e3520003          CMP      r2,#3
000304  0a000008          BEQ      |L1.812|
000308  e3520004          CMP      r2,#4
00030c  1a00000a          BNE      |L1.828|
000310  ea000007          B        |L1.820|
                  |L1.788|
;;;169        {
;;;170            case GUI_POWER_STATUS_INDEX:
000314  e1a00000          MOV      r0,r0
;;;171                return powerStatus;
000318  e51f00cc          LDR      r0,|L1.596|
00031c  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.800|
;;;172            case GUI_POWER_ON_INDEX:
;;;173                break;
;;;174            case GUI_POWER_OFF_INDEX:
;;;175                break;
;;;176            case GUI_POWER_PREV_OFF_INDEX:
;;;177                break;
;;;178        }
;;;179        return TRUE;
;;;180    }
000320  e12fff1e          BX       lr
                  |L1.804|
000324  e1a00000          MOV      r0,r0                 ;172
000328  ea000003          B        |L1.828|
                  |L1.812|
00032c  e1a00000          MOV      r0,r0                 ;174
000330  ea000001          B        |L1.828|
                  |L1.820|
000334  e1a00000          MOV      r0,r0                 ;176
000338  e1a00000          MOV      r0,r0                 ;177
                  |L1.828|
00033c  e1a00000          MOV      r0,r0                 ;173
000340  e3a00001          MOV      r0,#1                 ;179
000344  eafffff5          B        |L1.800|
;;;181    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c4f6666          DCB      0x3c,0x4f,0x66,0x66
000010  3e204f6e          DCB      0x3e,0x20,0x4f,0x6e
000014  44726177          DCB      0x44,0x72,0x61,0x77
000018  20286672          DCB      0x20,0x28,0x66,0x72
00001c  6f6d2047          DCB      0x6f,0x6d,0x20,0x47
000020  75694964          DCB      0x75,0x69,0x49,0x64
000024  203d2025          DCB      0x20,0x3d,0x20,0x25
000028  642c2072          DCB      0x64,0x2c,0x20,0x72
00002c  65467265          DCB      0x65,0x46,0x72,0x65
000030  73685061          DCB      0x73,0x68,0x50,0x61
000034  7261203d          DCB      0x72,0x61,0x20,0x3d
000038  2025642c          DCB      0x20,0x25,0x64,0x2c
00003c  20706172          DCB      0x20,0x70,0x61,0x72
000040  6132203d          DCB      0x61,0x32,0x20,0x3d
000044  2025642c          DCB      0x20,0x25,0x64,0x2c
000048  20706172          DCB      0x20,0x70,0x61,0x72
00004c  6133203d          DCB      0x61,0x33,0x20,0x3d
000050  20256429          DCB      0x20,0x25,0x64,0x29
000054  0a00              DCB      0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  01000000          DCB      0x01,0x00,0x00,0x00
                  tickStart
                          DCD      0x00000000
                  keyIgnoreFlag
00000c  00                DCB      0x00
