; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\diskio.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\diskio.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\diskio.crf src\SysHal\fatfs\diskio.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  disk_initialize PROC
;;;30     void sysprintf(PINT8 pcStr,...);
;;;31     DSTATUS disk_initialize (BYTE pdrv)       /* Physical drive number (0..) */
000000  e92d4070          PUSH     {r4-r6,lr}
;;;32     {
000004  e1a04000          MOV      r4,r0
;;;33         //sysprintf(" >> disk_initialize - pdrv:%d <<\n", pdrv);
;;;34         if(FatfsGetCallback(pdrv) == NULL)
000008  e1a00004          MOV      r0,r4
00000c  ebfffffe          BL       FatfsGetCallback
000010  e3500000          CMP      r0,#0
000014  1a000001          BNE      |L1.32|
;;;35             sysprintf(" >> FatfsGetCallback(pdrv) == NULL <<\n");
000018  e28f0f92          ADR      r0,|L1.616|
00001c  ebfffffe          BL       sysprintf
                  |L1.32|
;;;36         if(FatfsGetCallback(pdrv)->diskInitFunc(pdrv))
000020  e1a00004          MOV      r0,r4
000024  ebfffffe          BL       FatfsGetCallback
000028  e5905004          LDR      r5,[r0,#4]
00002c  e1a00004          MOV      r0,r4
000030  e12fff35          BLX      r5
000034  e3500000          CMP      r0,#0
000038  0a000001          BEQ      |L1.68|
;;;37             return RES_OK;
00003c  e3a00000          MOV      r0,#0
                  |L1.64|
;;;38         else
;;;39             return STA_NOINIT;
;;;40     
;;;41     }
000040  e8bd8070          POP      {r4-r6,pc}
                  |L1.68|
000044  e3a00001          MOV      r0,#1                 ;39
000048  eafffffc          B        |L1.64|
;;;42     
                          ENDP

                  disk_status PROC
;;;47     
;;;48     DSTATUS disk_status (BYTE pdrv)       /* Physical drive number (0..) */
00004c  e92d4070          PUSH     {r4-r6,lr}
;;;49     {
000050  e1a04000          MOV      r4,r0
;;;50         //sysprintf(" >> disk_status - pdrv:%d <<\n", pdrv);
;;;51         if(FatfsGetCallback(pdrv) == NULL)
000054  e1a00004          MOV      r0,r4
000058  ebfffffe          BL       FatfsGetCallback
00005c  e3500000          CMP      r0,#0
000060  1a000001          BNE      |L1.108|
;;;52             sysprintf(" >> FatfsGetCallback(pdrv) == NULL <<\n");
000064  e28f0f7f          ADR      r0,|L1.616|
000068  ebfffffe          BL       sysprintf
                  |L1.108|
;;;53         if(FatfsGetCallback(pdrv)->diskStatusFunc(pdrv))
00006c  e1a00004          MOV      r0,r4
000070  ebfffffe          BL       FatfsGetCallback
000074  e5905008          LDR      r5,[r0,#8]
000078  e1a00004          MOV      r0,r4
00007c  e12fff35          BLX      r5
000080  e3500000          CMP      r0,#0
000084  0a000001          BEQ      |L1.144|
;;;54             return RES_OK;
000088  e3a00000          MOV      r0,#0
                  |L1.140|
;;;55         else
;;;56             return STA_NOINIT;
;;;57     }
00008c  e8bd8070          POP      {r4-r6,pc}
                  |L1.144|
000090  e3a00001          MOV      r0,#1                 ;56
000094  eafffffc          B        |L1.140|
;;;58     
                          ENDP

                  disk_read PROC
;;;64     
;;;65     DRESULT disk_read (
000098  e92d47f0          PUSH     {r4-r10,lr}
;;;66         BYTE pdrv,      /* Physical drive number (0..) */
;;;67         BYTE *buff,     /* Data buffer to store read data */
;;;68         DWORD sector,   /* Sector address (LBA) */
;;;69         UINT count      /* Number of sectors to read (1..128) */
;;;70     )
;;;71     {
00009c  e1a04000          MOV      r4,r0
0000a0  e1a06001          MOV      r6,r1
0000a4  e1a08002          MOV      r8,r2
0000a8  e1a07003          MOV      r7,r3
;;;72         DRESULT   ret;
;;;73     
;;;74        
;;;75         //sysprintf("disk_read - drv:%d, sec:%d, cnt:%d, buff:0x%x\n", pdrv, sector, count, (UINT32)buff);
;;;76         if(FatfsGetCallback(pdrv) == NULL)
0000ac  e1a00004          MOV      r0,r4
0000b0  ebfffffe          BL       FatfsGetCallback
0000b4  e3500000          CMP      r0,#0
0000b8  1a000001          BNE      |L1.196|
;;;77             sysprintf(" >> FatfsGetCallback(pdrv) == NULL <<\n");
0000bc  e28f0f69          ADR      r0,|L1.616|
0000c0  ebfffffe          BL       sysprintf
                  |L1.196|
;;;78         
;;;79         if (!((UINT32)buff & 0x80000000)) 
0000c4  e3160102          TST      r6,#0x80000000
0000c8  1a00001d          BNE      |L1.324|
;;;80         {
;;;81             /* Disk read buffer is not non-cachable buffer. Use my non-cachable to do disk read. */
;;;82             //if (count * 512 > _MAX_SS)
;;;83             //    return RES_ERROR;
;;;84             //sysprintf(" >> disk_read(cache) - pdrv:%d, sec:0x%08, cnt:%d <<\n", pdrv, sector, count);
;;;85             fatfs_win_buff[pdrv] = (BYTE *)((unsigned int)fatfs_win_buff_pool[pdrv] | 0x80000000);
0000cc  e59f01bc          LDR      r0,|L1.656|
0000d0  e0800604          ADD      r0,r0,r4,LSL #12
0000d4  e3800102          ORR      r0,r0,#0x80000000
0000d8  e59f11b4          LDR      r1,|L1.660|
0000dc  e7810104          STR      r0,[r1,r4,LSL #2]
;;;86             //outpw(REG_SDH_GCTL, SDH_GCTL_SDEN_Msk);
;;;87             //ret = (DRESULT) SD_Read(SD_PORT0, fatfs_win_buff, sector, count);
;;;88             if(FatfsGetCallback(pdrv)->diskReadFunc(pdrv, fatfs_win_buff[pdrv], sector, count))
0000e0  e1a00004          MOV      r0,r4
0000e4  ebfffffe          BL       FatfsGetCallback
0000e8  e590a00c          LDR      r10,[r0,#0xc]
0000ec  e59f01a0          LDR      r0,|L1.660|
0000f0  e7909104          LDR      r9,[r0,r4,LSL #2]
0000f4  e1a03007          MOV      r3,r7
0000f8  e1a02008          MOV      r2,r8
0000fc  e1a01009          MOV      r1,r9
000100  e1a00004          MOV      r0,r4
000104  e12fff3a          BLX      r10
000108  e3500000          CMP      r0,#0
00010c  0a00000a          BEQ      |L1.316|
;;;89             {
;;;90                 memcpy(buff, fatfs_win_buff[pdrv], count * FatfsGetCallback(pdrv)->diskSectorSize);
000110  e1a00004          MOV      r0,r4
000114  ebfffffe          BL       FatfsGetCallback
000118  e1d001b8          LDRH     r0,[r0,#0x18]
00011c  e0090790          MUL      r9,r0,r7
000120  e59f016c          LDR      r0,|L1.660|
000124  e7901104          LDR      r1,[r0,r4,LSL #2]
000128  e1a02009          MOV      r2,r9
00012c  e1a00006          MOV      r0,r6
000130  ebfffffe          BL       __aeabi_memcpy
;;;91                 ret = RES_OK;
000134  e3a05000          MOV      r5,#0
000138  ea00000e          B        |L1.376|
                  |L1.316|
;;;92             }
;;;93             else
;;;94             {
;;;95                 ret =  RES_ERROR;
00013c  e3a05001          MOV      r5,#1
000140  ea00000c          B        |L1.376|
                  |L1.324|
;;;96             }  
;;;97         } 
;;;98         else 
;;;99         {
;;;100            //sysprintf(" >> disk_read - pdrv:%d, sec:0x%08, cnt:%d <<\n", pdrv, sector, count);
;;;101            if(FatfsGetCallback(pdrv)->diskReadFunc(pdrv, buff, sector, count))
000144  e1a00004          MOV      r0,r4
000148  ebfffffe          BL       FatfsGetCallback
00014c  e1a03007          MOV      r3,r7
000150  e1a02008          MOV      r2,r8
000154  e1a01006          MOV      r1,r6
000158  e590900c          LDR      r9,[r0,#0xc]
00015c  e1a00004          MOV      r0,r4
000160  e12fff39          BLX      r9
000164  e3500000          CMP      r0,#0
000168  0a000001          BEQ      |L1.372|
;;;102            {
;;;103                ret = RES_OK;
00016c  e3a05000          MOV      r5,#0
000170  ea000000          B        |L1.376|
                  |L1.372|
;;;104            }
;;;105            else
;;;106            {
;;;107                ret =  RES_ERROR;
000174  e3a05001          MOV      r5,#1
                  |L1.376|
;;;108            }  
;;;109        }
;;;110        return ret;
000178  e1a00005          MOV      r0,r5
;;;111    }
00017c  e8bd87f0          POP      {r4-r10,pc}
;;;112    
                          ENDP

                  disk_write PROC
;;;118    
;;;119    DRESULT disk_write (
000180  e92d47f0          PUSH     {r4-r10,lr}
;;;120        BYTE pdrv,          /* Physical drive number (0..) */
;;;121        const BYTE *buff,   /* Data to be written */
;;;122        DWORD sector,       /* Sector address (LBA) */
;;;123        UINT count          /* Number of sectors to write (1..128) */
;;;124    )
;;;125    {
000184  e1a04000          MOV      r4,r0
000188  e1a06001          MOV      r6,r1
00018c  e1a08002          MOV      r8,r2
000190  e1a07003          MOV      r7,r3
;;;126        DRESULT   ret;
;;;127    
;;;128        
;;;129        //sysprintf("disk_write - drv:%d, sec:%d, cnt:%d, buff:0x%x\n", pdrv, sector, count, (UINT32)buff);
;;;130        if(FatfsGetCallback(pdrv) == NULL)
000194  e1a00004          MOV      r0,r4
000198  ebfffffe          BL       FatfsGetCallback
00019c  e3500000          CMP      r0,#0
0001a0  1a000001          BNE      |L1.428|
;;;131            sysprintf(" >> FatfsGetCallback(pdrv) == NULL <<\n");
0001a4  e28f00bc          ADR      r0,|L1.616|
0001a8  ebfffffe          BL       sysprintf
                  |L1.428|
;;;132        
;;;133        if (!((UINT32)buff & 0x80000000)) {
0001ac  e3160102          TST      r6,#0x80000000
0001b0  1a00001d          BNE      |L1.556|
;;;134            /* Disk write buffer is not non-cachable buffer. Use my non-cachable to do disk write. */
;;;135            // if (count * 512 > _MAX_SS)
;;;136            //     return RES_ERROR;
;;;137            //sysprintf(" >> disk_write(cache) - pdrv:%d, sec:0x%08, cnt:%d <<\n", pdrv, sector, count);
;;;138            fatfs_win_buff[pdrv] = (BYTE *)((unsigned int)fatfs_win_buff_pool[pdrv] | 0x80000000);
0001b4  e59f00d4          LDR      r0,|L1.656|
0001b8  e0800604          ADD      r0,r0,r4,LSL #12
0001bc  e3800102          ORR      r0,r0,#0x80000000
0001c0  e59f10cc          LDR      r1,|L1.660|
0001c4  e7810104          STR      r0,[r1,r4,LSL #2]
;;;139            memcpy(fatfs_win_buff[pdrv], buff, count * FatfsGetCallback(pdrv)->diskSectorSize);
0001c8  e1a00004          MOV      r0,r4
0001cc  ebfffffe          BL       FatfsGetCallback
0001d0  e1d001b8          LDRH     r0,[r0,#0x18]
0001d4  e0090790          MUL      r9,r0,r7
0001d8  e59f10b4          LDR      r1,|L1.660|
0001dc  e7910104          LDR      r0,[r1,r4,LSL #2]
0001e0  e1a02009          MOV      r2,r9
0001e4  e1a01006          MOV      r1,r6
0001e8  ebfffffe          BL       __aeabi_memcpy
;;;140            if(FatfsGetCallback(pdrv)->diskWriteFunc(pdrv, fatfs_win_buff[pdrv], sector, count))
0001ec  e1a00004          MOV      r0,r4
0001f0  ebfffffe          BL       FatfsGetCallback
0001f4  e590a010          LDR      r10,[r0,#0x10]
0001f8  e59f0094          LDR      r0,|L1.660|
0001fc  e7909104          LDR      r9,[r0,r4,LSL #2]
000200  e1a03007          MOV      r3,r7
000204  e1a02008          MOV      r2,r8
000208  e1a01009          MOV      r1,r9
00020c  e1a00004          MOV      r0,r4
000210  e12fff3a          BLX      r10
000214  e3500000          CMP      r0,#0
000218  0a000001          BEQ      |L1.548|
;;;141            {
;;;142                ret = RES_OK;
00021c  e3a05000          MOV      r5,#0
000220  ea00000e          B        |L1.608|
                  |L1.548|
;;;143            }
;;;144            else
;;;145            {
;;;146                ret =  RES_ERROR;
000224  e3a05001          MOV      r5,#1
000228  ea00000c          B        |L1.608|
                  |L1.556|
;;;147            }  
;;;148        } 
;;;149        else 
;;;150        {
;;;151            if(FatfsGetCallback(pdrv)->diskWriteFunc(pdrv, (uint8_t*)buff, sector, count))
00022c  e1a00004          MOV      r0,r4
000230  ebfffffe          BL       FatfsGetCallback
000234  e1a03007          MOV      r3,r7
000238  e1a02008          MOV      r2,r8
00023c  e1a01006          MOV      r1,r6
000240  e5909010          LDR      r9,[r0,#0x10]
000244  e1a00004          MOV      r0,r4
000248  e12fff39          BLX      r9
00024c  e3500000          CMP      r0,#0
000250  0a000001          BEQ      |L1.604|
;;;152            {
;;;153                ret = RES_OK;
000254  e3a05000          MOV      r5,#0
000258  ea000000          B        |L1.608|
                  |L1.604|
;;;154            }
;;;155            else
;;;156            {
;;;157                ret =  RES_ERROR;
00025c  e3a05001          MOV      r5,#1
                  |L1.608|
;;;158            }  
;;;159        }
;;;160        return ret;
000260  e1a00005          MOV      r0,r5
;;;161    }
000264  e8bd87f0          POP      {r4-r10,pc}
                  |L1.616|
000268  203e3e20          DCB      " >> FatfsGetCallback(pdrv) == NULL <<\n",0
00026c  46617466
000270  73476574
000274  43616c6c
000278  6261636b
00027c  28706472
000280  7629203d
000284  3d204e55
000288  4c4c203c
00028c  3c0a00  
00028f  00                DCB      0
                  |L1.656|
                          DCD      fatfs_win_buff_pool
                  |L1.660|
                          DCD      fatfs_win_buff
                          ENDP

                  disk_ioctl PROC
;;;167    
;;;168    DRESULT disk_ioctl (
000298  e92d41f0          PUSH     {r4-r8,lr}
;;;169        BYTE pdrv,      /* Physical drive number (0..) */
;;;170        BYTE cmd,       /* Control code */
;;;171        void *buff      /* Buffer to send/receive control data */
;;;172    )
;;;173    {
00029c  e1a04000          MOV      r4,r0
0002a0  e1a05001          MOV      r5,r1
0002a4  e1a06002          MOV      r6,r2
;;;174        DRESULT res = RES_OK;
0002a8  e3a07000          MOV      r7,#0
;;;175        if(FatfsGetCallback(pdrv) == NULL)
0002ac  e1a00004          MOV      r0,r4
0002b0  ebfffffe          BL       FatfsGetCallback
0002b4  e3500000          CMP      r0,#0
0002b8  1a000001          BNE      |L1.708|
;;;176            sysprintf(" >> FatfsGetCallback(pdrv) == NULL <<\n");
0002bc  e24f005c          ADR      r0,|L1.616|
0002c0  ebfffffe          BL       sysprintf
                  |L1.708|
;;;177        if(FatfsGetCallback(pdrv)->diskIoctlFunc(pdrv, cmd, buff))
0002c4  e1a00004          MOV      r0,r4
0002c8  ebfffffe          BL       FatfsGetCallback
0002cc  e1a02006          MOV      r2,r6
0002d0  e1a01005          MOV      r1,r5
0002d4  e5908014          LDR      r8,[r0,#0x14]
0002d8  e1a00004          MOV      r0,r4
0002dc  e12fff38          BLX      r8
0002e0  e3500000          CMP      r0,#0
0002e4  0a000001          BEQ      |L1.752|
;;;178        {
;;;179            res = RES_OK;
0002e8  e3a07000          MOV      r7,#0
0002ec  ea000000          B        |L1.756|
                  |L1.752|
;;;180        }
;;;181        else
;;;182        {
;;;183            res =  RES_PARERR;
0002f0  e3a07004          MOV      r7,#4
                  |L1.756|
;;;184        }  
;;;185        return res;   
0002f4  e1a00007          MOV      r0,r7
;;;186    }
0002f8  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  fatfs_win_buff_pool
                          %        12288
                  fatfs_win_buff
                          %        12
