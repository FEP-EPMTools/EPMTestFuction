; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\yaffs_nameval.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\yaffs_nameval.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\yaffs_nameval.crf ..\..\common\src\BSP\ThirdParty\yaffs2\yaffs_nameval.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nval_find PROC
;;;31     
;;;32     static int nval_find(const char *xb, int xb_size, const YCHAR *name,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;33     		     int *exist_size)
;;;34     {
000004  e1a06000          MOV      r6,r0
000008  e1a07001          MOV      r7,r1
00000c  e1a08002          MOV      r8,r2
000010  e1a05003          MOV      r5,r3
;;;35     	int pos = 0;
000014  e3a04000          MOV      r4,#0
;;;36     	int size;
;;;37     
;;;38     	memcpy(&size, xb, sizeof(int));
000018  e3a02004          MOV      r2,#4
00001c  e1a01006          MOV      r1,r6
000020  e1a0000d          MOV      r0,sp
000024  ebfffffe          BL       __aeabi_memcpy
;;;39     	while (size > 0 && (size < xb_size) && (pos + size < xb_size)) {
000028  ea000018          B        |L1.144|
                  |L1.44|
;;;40     		if (!yaffs_strncmp((YCHAR *) (xb + pos + sizeof(int)),
00002c  e0861004          ADD      r1,r6,r4
000030  e2810004          ADD      r0,r1,#4
000034  e1a01008          MOV      r1,r8
000038  e59d2000          LDR      r2,[sp,#0]
00003c  ebfffffe          BL       strncmp
000040  e3500000          CMP      r0,#0
000044  1a000005          BNE      |L1.96|
;;;41     				name, size)) {
;;;42     			if (exist_size)
000048  e3550000          CMP      r5,#0
00004c  0a000001          BEQ      |L1.88|
;;;43     				*exist_size = size;
000050  e59d0000          LDR      r0,[sp,#0]
000054  e5850000          STR      r0,[r5,#0]
                  |L1.88|
;;;44     			return pos;
000058  e1a00004          MOV      r0,r4
                  |L1.92|
;;;45     		}
;;;46     		pos += size;
;;;47     		if (pos < xb_size - sizeof(int))
;;;48     			memcpy(&size, xb + pos, sizeof(int));
;;;49     		else
;;;50     			size = 0;
;;;51     	}
;;;52     	if (exist_size)
;;;53     		*exist_size = 0;
;;;54     	return -ENODATA;
;;;55     }
00005c  e8bd83f8          POP      {r3-r9,pc}
                  |L1.96|
000060  e59d0000          LDR      r0,[sp,#0]            ;46
000064  e0844000          ADD      r4,r4,r0              ;46
000068  e2470004          SUB      r0,r7,#4              ;47
00006c  e1500004          CMP      r0,r4                 ;47
000070  9a000004          BLS      |L1.136|
000074  e0861004          ADD      r1,r6,r4              ;48
000078  e3a02004          MOV      r2,#4                 ;48
00007c  e1a0000d          MOV      r0,sp                 ;48
000080  ebfffffe          BL       __aeabi_memcpy
000084  ea000001          B        |L1.144|
                  |L1.136|
000088  e3a00000          MOV      r0,#0                 ;50
00008c  e58d0000          STR      r0,[sp,#0]            ;50
                  |L1.144|
000090  e59d0000          LDR      r0,[sp,#0]            ;39
000094  e3500000          CMP      r0,#0                 ;39
000098  da000006          BLE      |L1.184|
00009c  e59d0000          LDR      r0,[sp,#0]            ;39
0000a0  e1500007          CMP      r0,r7                 ;39
0000a4  aa000003          BGE      |L1.184|
0000a8  e59d0000          LDR      r0,[sp,#0]            ;39
0000ac  e0800004          ADD      r0,r0,r4              ;39
0000b0  e1500007          CMP      r0,r7                 ;39
0000b4  baffffdc          BLT      |L1.44|
                  |L1.184|
0000b8  e3550000          CMP      r5,#0                 ;52
0000bc  0a000001          BEQ      |L1.200|
0000c0  e3a00000          MOV      r0,#0                 ;53
0000c4  e5850000          STR      r0,[r5,#0]            ;53
                  |L1.200|
0000c8  e3e0003c          MVN      r0,#0x3c              ;54
0000cc  eaffffe2          B        |L1.92|
;;;56     
                          ENDP

                  nval_used PROC
;;;57     static int nval_used(const char *xb, int xb_size)
0000d0  e92d40f8          PUSH     {r3-r7,lr}
;;;58     {
0000d4  e1a06000          MOV      r6,r0
0000d8  e1a05001          MOV      r5,r1
;;;59     	int pos = 0;
0000dc  e3a04000          MOV      r4,#0
;;;60     	int size;
;;;61     
;;;62     	memcpy(&size, xb + pos, sizeof(int));
0000e0  e0861004          ADD      r1,r6,r4
0000e4  e3a02004          MOV      r2,#4
0000e8  e1a0000d          MOV      r0,sp
0000ec  ebfffffe          BL       __aeabi_memcpy
;;;63     	while (size > 0 && (size < xb_size) && (pos + size < xb_size)) {
0000f0  ea00000b          B        |L1.292|
                  |L1.244|
;;;64     		pos += size;
0000f4  e59d0000          LDR      r0,[sp,#0]
0000f8  e0844000          ADD      r4,r4,r0
;;;65     		if (pos < xb_size - sizeof(int))
0000fc  e2450004          SUB      r0,r5,#4
000100  e1500004          CMP      r0,r4
000104  9a000004          BLS      |L1.284|
;;;66     			memcpy(&size, xb + pos, sizeof(int));
000108  e0861004          ADD      r1,r6,r4
00010c  e3a02004          MOV      r2,#4
000110  e1a0000d          MOV      r0,sp
000114  ebfffffe          BL       __aeabi_memcpy
000118  ea000001          B        |L1.292|
                  |L1.284|
;;;67     		else
;;;68     			size = 0;
00011c  e3a00000          MOV      r0,#0
000120  e58d0000          STR      r0,[sp,#0]
                  |L1.292|
000124  e59d0000          LDR      r0,[sp,#0]            ;63
000128  e3500000          CMP      r0,#0                 ;63
00012c  da000006          BLE      |L1.332|
000130  e59d0000          LDR      r0,[sp,#0]            ;63
000134  e1500005          CMP      r0,r5                 ;63
000138  aa000003          BGE      |L1.332|
00013c  e59d0000          LDR      r0,[sp,#0]            ;63
000140  e0800004          ADD      r0,r0,r4              ;63
000144  e1500005          CMP      r0,r5                 ;63
000148  baffffe9          BLT      |L1.244|
                  |L1.332|
;;;69     	}
;;;70     	return pos;
00014c  e1a00004          MOV      r0,r4
;;;71     }
000150  e8bd80f8          POP      {r3-r7,pc}
;;;72     
                          ENDP

                  nval_del PROC
;;;73     int nval_del(char *xb, int xb_size, const YCHAR *name)
000154  e92d40f8          PUSH     {r3-r7,lr}
;;;74     {
000158  e1a05000          MOV      r5,r0
00015c  e1a06001          MOV      r6,r1
000160  e1a07002          MOV      r7,r2
;;;75     	int pos = nval_find(xb, xb_size, name, NULL);
000164  e3a03000          MOV      r3,#0
000168  e1a02007          MOV      r2,r7
00016c  e1a01006          MOV      r1,r6
000170  e1a00005          MOV      r0,r5
000174  ebfffffe          BL       nval_find
000178  e1a04000          MOV      r4,r0
;;;76     	int size;
;;;77     
;;;78     	if (pos < 0 || pos >= xb_size)
00017c  e3540000          CMP      r4,#0
000180  ba000001          BLT      |L1.396|
000184  e1540006          CMP      r4,r6
000188  ba000001          BLT      |L1.404|
                  |L1.396|
;;;79     		return -ENODATA;
00018c  e3e0003c          MVN      r0,#0x3c
                  |L1.400|
;;;80     
;;;81     	/* Find size, shift rest over this record,
;;;82     	 * then zero out the rest of buffer */
;;;83     	memcpy(&size, xb + pos, sizeof(int));
;;;84     	memcpy(xb + pos, xb + pos + size, xb_size - (pos + size));
;;;85     	memset(xb + (xb_size - size), 0, size);
;;;86     	return 0;
;;;87     }
000190  e8bd80f8          POP      {r3-r7,pc}
                  |L1.404|
000194  e0851004          ADD      r1,r5,r4              ;83
000198  e3a02004          MOV      r2,#4                 ;83
00019c  e1a0000d          MOV      r0,sp                 ;83
0001a0  ebfffffe          BL       __aeabi_memcpy
0001a4  e59d3000          LDR      r3,[sp,#0]            ;84
0001a8  e0833004          ADD      r3,r3,r4              ;84
0001ac  e0462003          SUB      r2,r6,r3              ;84
0001b0  e0853004          ADD      r3,r5,r4              ;84
0001b4  e59dc000          LDR      r12,[sp,#0]           ;84
0001b8  e083100c          ADD      r1,r3,r12             ;84
0001bc  e0850004          ADD      r0,r5,r4              ;84
0001c0  ebfffffe          BL       __aeabi_memcpy
0001c4  e59d1000          LDR      r1,[sp,#0]            ;85
0001c8  e0461001          SUB      r1,r6,r1              ;85
0001cc  e0810005          ADD      r0,r1,r5              ;85
0001d0  e59d1000          LDR      r1,[sp,#0]            ;85
0001d4  ebfffffe          BL       __aeabi_memclr
0001d8  e3a00000          MOV      r0,#0                 ;86
0001dc  eaffffeb          B        |L1.400|
;;;88     
                          ENDP

                  nval_set PROC
;;;89     int nval_set(char *xb, int xb_size, const YCHAR *name, const char *buf,
0001e0  e92d4fff          PUSH     {r0-r11,lr}
;;;90     		int bsize, int flags)
;;;91     {
0001e4  e24dd00c          SUB      sp,sp,#0xc
0001e8  e1a06000          MOV      r6,r0
0001ec  e1a07001          MOV      r7,r1
0001f0  e1a08002          MOV      r8,r2
0001f4  e59d9040          LDR      r9,[sp,#0x40]
;;;92     	int pos;
;;;93     	int namelen = yaffs_strnlen(name, xb_size);
0001f8  e1a00008          MOV      r0,r8
0001fc  ebfffffe          BL       strlen
000200  e1500007          CMP      r0,r7
000204  9a000001          BLS      |L1.528|
000208  e1a00007          MOV      r0,r7
00020c  ea000001          B        |L1.536|
                  |L1.528|
000210  e1a00008          MOV      r0,r8
000214  ebfffffe          BL       strlen
                  |L1.536|
000218  e1a0a000          MOV      r10,r0
;;;94     	int reclen;
;;;95     	int size_exist = 0;
00021c  e3a00000          MOV      r0,#0
000220  e58d0004          STR      r0,[sp,#4]
;;;96     	int space;
;;;97     	int start;
;;;98     
;;;99     	pos = nval_find(xb, xb_size, name, &size_exist);
000224  e28d3004          ADD      r3,sp,#4
000228  e1a02008          MOV      r2,r8
00022c  e1a01007          MOV      r1,r7
000230  e1a00006          MOV      r0,r6
000234  ebfffffe          BL       nval_find
000238  e1a04000          MOV      r4,r0
;;;100    
;;;101    	if (flags & XATTR_CREATE && pos >= 0)
00023c  e59d0044          LDR      r0,[sp,#0x44]
000240  e3100001          TST      r0,#1
000244  0a000004          BEQ      |L1.604|
000248  e3540000          CMP      r4,#0
00024c  ba000002          BLT      |L1.604|
;;;102    		return -EEXIST;
000250  e3e00010          MVN      r0,#0x10
                  |L1.596|
000254  e28dd01c          ADD      sp,sp,#0x1c
;;;103    	if (flags & XATTR_REPLACE && pos < 0)
;;;104    		return -ENODATA;
;;;105    
;;;106    	start = nval_used(xb, xb_size);
;;;107    	space = xb_size - start + size_exist;
;;;108    
;;;109    	reclen = (sizeof(int) + namelen + 1 + bsize);
;;;110    
;;;111    	if (reclen > space)
;;;112    		return -ENOSPC;
;;;113    
;;;114    	if (pos >= 0) {
;;;115    		nval_del(xb, xb_size, name);
;;;116    		start = nval_used(xb, xb_size);
;;;117    	}
;;;118    
;;;119    	pos = start;
;;;120    
;;;121    	memcpy(xb + pos, &reclen, sizeof(int));
;;;122    	pos += sizeof(int);
;;;123    	yaffs_strncpy((YCHAR *) (xb + pos), name, reclen);
;;;124    	pos += (namelen + 1);
;;;125    	memcpy(xb + pos, buf, bsize);
;;;126    	return 0;
;;;127    }
000258  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.604|
00025c  e59d0044          LDR      r0,[sp,#0x44]         ;103
000260  e3100002          TST      r0,#2                 ;103
000264  0a000003          BEQ      |L1.632|
000268  e3540000          CMP      r4,#0                 ;103
00026c  aa000001          BGE      |L1.632|
000270  e3e0003c          MVN      r0,#0x3c              ;104
000274  eafffff6          B        |L1.596|
                  |L1.632|
000278  e1a01007          MOV      r1,r7                 ;106
00027c  e1a00006          MOV      r0,r6                 ;106
000280  ebfffffe          BL       nval_used
000284  e1a05000          MOV      r5,r0                 ;106
000288  e0470005          SUB      r0,r7,r5              ;107
00028c  e59d1004          LDR      r1,[sp,#4]            ;107
000290  e080b001          ADD      r11,r0,r1             ;107
000294  e28a0005          ADD      r0,r10,#5             ;109
000298  e0800009          ADD      r0,r0,r9              ;109
00029c  e58d0008          STR      r0,[sp,#8]            ;109
0002a0  e59d0008          LDR      r0,[sp,#8]            ;111
0002a4  e150000b          CMP      r0,r11                ;111
0002a8  da000001          BLE      |L1.692|
0002ac  e3e0001b          MVN      r0,#0x1b              ;112
0002b0  eaffffe7          B        |L1.596|
                  |L1.692|
0002b4  e3540000          CMP      r4,#0                 ;114
0002b8  ba000007          BLT      |L1.732|
0002bc  e1a02008          MOV      r2,r8                 ;115
0002c0  e1a01007          MOV      r1,r7                 ;115
0002c4  e1a00006          MOV      r0,r6                 ;115
0002c8  ebfffffe          BL       nval_del
0002cc  e1a01007          MOV      r1,r7                 ;116
0002d0  e1a00006          MOV      r0,r6                 ;116
0002d4  ebfffffe          BL       nval_used
0002d8  e1a05000          MOV      r5,r0                 ;116
                  |L1.732|
0002dc  e1a04005          MOV      r4,r5                 ;119
0002e0  e0860004          ADD      r0,r6,r4              ;121
0002e4  e3a02004          MOV      r2,#4                 ;121
0002e8  e28d1008          ADD      r1,sp,#8              ;121
0002ec  ebfffffe          BL       __aeabi_memcpy
0002f0  e2844004          ADD      r4,r4,#4              ;122
0002f4  e0860004          ADD      r0,r6,r4              ;123
0002f8  e1a01008          MOV      r1,r8                 ;123
0002fc  e59d2008          LDR      r2,[sp,#8]            ;123
000300  ebfffffe          BL       strncpy
000304  e28a0001          ADD      r0,r10,#1             ;124
000308  e0844000          ADD      r4,r4,r0              ;124
00030c  e0860004          ADD      r0,r6,r4              ;125
000310  e1a02009          MOV      r2,r9                 ;125
000314  e59d1018          LDR      r1,[sp,#0x18]         ;125
000318  ebfffffe          BL       __aeabi_memcpy
00031c  e3a00000          MOV      r0,#0                 ;126
000320  eaffffcb          B        |L1.596|
;;;128    
                          ENDP

                  nval_get PROC
;;;129    int nval_get(const char *xb, int xb_size, const YCHAR * name, char *buf,
000324  e92d43f8          PUSH     {r3-r9,lr}
;;;130    	     int bsize)
;;;131    {
000328  e1a05000          MOV      r5,r0
00032c  e1a06001          MOV      r6,r1
000330  e1a09002          MOV      r9,r2
000334  e1a07003          MOV      r7,r3
000338  e59d8020          LDR      r8,[sp,#0x20]
;;;132    	int pos = nval_find(xb, xb_size, name, NULL);
00033c  e3a03000          MOV      r3,#0
000340  e1a02009          MOV      r2,r9
000344  e1a01006          MOV      r1,r6
000348  e1a00005          MOV      r0,r5
00034c  ebfffffe          BL       nval_find
000350  e1a04000          MOV      r4,r0
;;;133    	int size;
;;;134    
;;;135    	if (pos >= 0 && pos < xb_size) {
000354  e3540000          CMP      r4,#0
000358  ba000027          BLT      |L1.1020|
00035c  e1540006          CMP      r4,r6
000360  aa000025          BGE      |L1.1020|
;;;136    
;;;137    		memcpy(&size, xb + pos, sizeof(int));
000364  e0851004          ADD      r1,r5,r4
000368  e3a02004          MOV      r2,#4
00036c  e1a0000d          MOV      r0,sp
000370  ebfffffe          BL       __aeabi_memcpy
;;;138    		pos += sizeof(int);	/* advance past record length */
000374  e2844004          ADD      r4,r4,#4
;;;139    		size -= sizeof(int);
000378  e59d0000          LDR      r0,[sp,#0]
00037c  e2400004          SUB      r0,r0,#4
000380  e58d0000          STR      r0,[sp,#0]
;;;140    
;;;141    		/* Advance over name string */
;;;142    		while (xb[pos] && size > 0 && pos < xb_size) {
000384  ea000003          B        |L1.920|
                  |L1.904|
;;;143    			pos++;
000388  e2844001          ADD      r4,r4,#1
;;;144    			size--;
00038c  e59d0000          LDR      r0,[sp,#0]
000390  e2400001          SUB      r0,r0,#1
000394  e58d0000          STR      r0,[sp,#0]
                  |L1.920|
000398  e7d50004          LDRB     r0,[r5,r4]            ;142
00039c  e3500000          CMP      r0,#0                 ;142
0003a0  0a000004          BEQ      |L1.952|
0003a4  e59d0000          LDR      r0,[sp,#0]            ;142
0003a8  e3500000          CMP      r0,#0                 ;142
0003ac  da000001          BLE      |L1.952|
0003b0  e1540006          CMP      r4,r6                 ;142
0003b4  bafffff3          BLT      |L1.904|
                  |L1.952|
;;;145    		}
;;;146    		/*Advance over NUL */
;;;147    		pos++;
0003b8  e2844001          ADD      r4,r4,#1
;;;148    		size--;
0003bc  e59d0000          LDR      r0,[sp,#0]
0003c0  e2400001          SUB      r0,r0,#1
0003c4  e58d0000          STR      r0,[sp,#0]
;;;149    
;;;150    		/* If bsize is zero then this is a size query.
;;;151    		 * Return the size, but don't copy.
;;;152    		 */
;;;153    		if (!bsize)
0003c8  e3580000          CMP      r8,#0
0003cc  1a000001          BNE      |L1.984|
;;;154    			return size;
0003d0  e59d0000          LDR      r0,[sp,#0]
                  |L1.980|
;;;155    
;;;156    		if (size <= bsize) {
;;;157    			memcpy(buf, xb + pos, size);
;;;158    			return size;
;;;159    		}
;;;160    	}
;;;161    	if (pos >= 0)
;;;162    		return -ERANGE;
;;;163    
;;;164    	return -ENODATA;
;;;165    }
0003d4  e8bd83f8          POP      {r3-r9,pc}
                  |L1.984|
0003d8  e59d0000          LDR      r0,[sp,#0]            ;156
0003dc  e1500008          CMP      r0,r8                 ;156
0003e0  ca000005          BGT      |L1.1020|
0003e4  e0851004          ADD      r1,r5,r4              ;157
0003e8  e1a00007          MOV      r0,r7                 ;157
0003ec  e59d2000          LDR      r2,[sp,#0]            ;157
0003f0  ebfffffe          BL       __aeabi_memcpy
0003f4  e59d0000          LDR      r0,[sp,#0]            ;158
0003f8  eafffff5          B        |L1.980|
                  |L1.1020|
0003fc  e3540000          CMP      r4,#0                 ;161
000400  ba000001          BLT      |L1.1036|
000404  e3e00021          MVN      r0,#0x21              ;162
000408  eafffff1          B        |L1.980|
                  |L1.1036|
00040c  e3e0003c          MVN      r0,#0x3c              ;164
000410  eaffffef          B        |L1.980|
;;;166    
                          ENDP

                  nval_list PROC
;;;167    int nval_list(const char *xb, int xb_size, char *buf, int bsize)
000414  e92d4ff8          PUSH     {r3-r11,lr}
;;;168    {
000418  e1a05000          MOV      r5,r0
00041c  e1a08001          MOV      r8,r1
000420  e1a06002          MOV      r6,r2
000424  e1a0a003          MOV      r10,r3
;;;169    	int pos = 0;
000428  e3a04000          MOV      r4,#0
;;;170    	int size;
;;;171    	int name_len;
;;;172    	int ncopied = 0;
00042c  e3a09000          MOV      r9,#0
;;;173    	int filled = 0;
000430  e3a0b000          MOV      r11,#0
;;;174    
;;;175    	memcpy(&size, xb + pos, sizeof(int));
000434  e0851004          ADD      r1,r5,r4
000438  e3a02004          MOV      r2,#4
00043c  e1a0000d          MOV      r0,sp
000440  ebfffffe          BL       __aeabi_memcpy
;;;176    	while (size > sizeof(int) &&
000444  ea000029          B        |L1.1264|
                  |L1.1096|
;;;177    		size <= xb_size &&
;;;178    		(pos + size) < xb_size &&
;;;179    		!filled) {
;;;180    		pos += sizeof(int);
000448  e2844004          ADD      r4,r4,#4
;;;181    		size -= sizeof(int);
00044c  e59d0000          LDR      r0,[sp,#0]
000450  e2400004          SUB      r0,r0,#4
000454  e58d0000          STR      r0,[sp,#0]
;;;182    		name_len = yaffs_strnlen((YCHAR *) (xb + pos), size);
000458  e0850004          ADD      r0,r5,r4
00045c  ebfffffe          BL       strlen
000460  e59d1000          LDR      r1,[sp,#0]
000464  e1500001          CMP      r0,r1
000468  9a000001          BLS      |L1.1140|
00046c  e59d0000          LDR      r0,[sp,#0]
000470  ea000001          B        |L1.1148|
                  |L1.1140|
000474  e0850004          ADD      r0,r5,r4
000478  ebfffffe          BL       strlen
                  |L1.1148|
00047c  e1a07000          MOV      r7,r0
;;;183    		if (ncopied + name_len + 1 < bsize) {
000480  e0890007          ADD      r0,r9,r7
000484  e2800001          ADD      r0,r0,#1
000488  e150000a          CMP      r0,r10
00048c  aa00000a          BGE      |L1.1212|
;;;184    			memcpy(buf, xb + pos, name_len * sizeof(YCHAR));
000490  e1a02007          MOV      r2,r7
000494  e0851004          ADD      r1,r5,r4
000498  e1a00006          MOV      r0,r6
00049c  ebfffffe          BL       __aeabi_memcpy
;;;185    			buf += name_len;
0004a0  e0866007          ADD      r6,r6,r7
;;;186    			*buf = '\0';
0004a4  e3a00000          MOV      r0,#0
0004a8  e5c60000          STRB     r0,[r6,#0]
;;;187    			buf++;
0004ac  e2866001          ADD      r6,r6,#1
;;;188    			if (sizeof(YCHAR) > 1) {
;;;189    				*buf = '\0';
;;;190    				buf++;
;;;191    			}
;;;192    			ncopied += (name_len + 1);
0004b0  e2870001          ADD      r0,r7,#1
0004b4  e0899000          ADD      r9,r9,r0
0004b8  ea000000          B        |L1.1216|
                  |L1.1212|
;;;193    		} else {
;;;194    			filled = 1;
0004bc  e3a0b001          MOV      r11,#1
                  |L1.1216|
;;;195    		}
;;;196    		pos += size;
0004c0  e59d0000          LDR      r0,[sp,#0]
0004c4  e0844000          ADD      r4,r4,r0
;;;197    		if (pos < xb_size - sizeof(int))
0004c8  e2480004          SUB      r0,r8,#4
0004cc  e1500004          CMP      r0,r4
0004d0  9a000004          BLS      |L1.1256|
;;;198    			memcpy(&size, xb + pos, sizeof(int));
0004d4  e0851004          ADD      r1,r5,r4
0004d8  e3a02004          MOV      r2,#4
0004dc  e1a0000d          MOV      r0,sp
0004e0  ebfffffe          BL       __aeabi_memcpy
0004e4  ea000001          B        |L1.1264|
                  |L1.1256|
;;;199    		else
;;;200    			size = 0;
0004e8  e3a00000          MOV      r0,#0
0004ec  e58d0000          STR      r0,[sp,#0]
                  |L1.1264|
0004f0  e59d0000          LDR      r0,[sp,#0]            ;176
0004f4  e3500004          CMP      r0,#4                 ;176
0004f8  9a000008          BLS      |L1.1312|
0004fc  e59d0000          LDR      r0,[sp,#0]            ;177
000500  e1500008          CMP      r0,r8                 ;177
000504  ca000005          BGT      |L1.1312|
000508  e59d0000          LDR      r0,[sp,#0]            ;178
00050c  e0800004          ADD      r0,r0,r4              ;178
000510  e1500008          CMP      r0,r8                 ;178
000514  aa000001          BGE      |L1.1312|
000518  e35b0000          CMP      r11,#0                ;179
00051c  0affffc9          BEQ      |L1.1096|
                  |L1.1312|
;;;201    	}
;;;202    	return ncopied;
000520  e1a00009          MOV      r0,r9
;;;203    }
000524  e8bd8ff8          POP      {r3-r11,pc}
;;;204    
                          ENDP

                  nval_hasvalues PROC
;;;205    int nval_hasvalues(const char *xb, int xb_size)
000528  e92d4070          PUSH     {r4-r6,lr}
;;;206    {
00052c  e1a04000          MOV      r4,r0
000530  e1a05001          MOV      r5,r1
;;;207    	return nval_used(xb, xb_size) > 0;
000534  e1a01005          MOV      r1,r5
000538  e1a00004          MOV      r0,r4
00053c  ebfffffe          BL       nval_used
000540  e3500000          CMP      r0,#0
000544  da000001          BLE      |L1.1360|
000548  e3a00001          MOV      r0,#1
                  |L1.1356|
;;;208    }
00054c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1360|
000550  e3a00000          MOV      r0,#0                 ;207
000554  eafffffc          B        |L1.1356|
                          ENDP

