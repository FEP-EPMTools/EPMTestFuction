; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guinull.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guinull.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guinull.crf src\user\guinull.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GuiNullOnDraw PROC
;;;73     /*-----------------------------------------*/
;;;74     BOOL GuiNullOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int para2, int para3)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;75     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a06002          MOV      r6,r2
000010  e1a07003          MOV      r7,r3
;;;76     //    tickStart = xTaskGetTickCount();
;;;77         // sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
;;;78         powerStatus = TRUE;
000014  e3a00001          MOV      r0,#1
000018  e59f120c          LDR      r1,|L1.556|
00001c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;79         pGuiGetInterface = GuiGetInterface();
000020  ebfffffe          BL       GuiGetInterface
000024  e59f1204          LDR      r1,|L1.560|
000028  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;80         pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
00002c  e2810000          ADD      r0,r1,#0
000030  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000034  e3e01000          MVN      r1,#0
000038  e590200c          LDR      r2,[r0,#0xc]
00003c  e3a00000          MOV      r0,#0
000040  e12fff32          BLX      r2
;;;81         pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
000044  e59f01e4          LDR      r0,|L1.560|
000048  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00004c  e3e01000          MVN      r1,#0
000050  e590200c          LDR      r2,[r0,#0xc]
000054  e3a00001          MOV      r0,#1
000058  e12fff32          BLX      r2
;;;82         
;;;83         pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
00005c  e59f01cc          LDR      r0,|L1.560|
000060  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000064  e5901010          LDR      r1,[r0,#0x10]
000068  e3a00000          MOV      r0,#0
00006c  e12fff31          BLX      r1
;;;84         //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;85         return TRUE;
000070  e3a00001          MOV      r0,#1
;;;86     }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;87     BOOL GuiNullUpdateData(void)
                          ENDP

                  GuiNullUpdateData PROC
000078  e92d4010          PUSH     {r4,lr}
;;;88     {    
;;;89         //tickStart = xTaskGetTickCount();
;;;90         pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更updateScreen
00007c  e59f01ac          LDR      r0,|L1.560|
000080  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000084  e5901010          LDR      r1,[r0,#0x10]
000088  e3a00001          MOV      r0,#1
00008c  e12fff31          BLX      r1
;;;91         return TRUE;
000090  e3a00001          MOV      r0,#1
;;;92     }
000094  e8bd8010          POP      {r4,pc}
;;;93     BOOL GuiNullKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiNullKeyCallback PROC
000098  e92d4070          PUSH     {r4-r6,lr}
;;;94     {
00009c  e1a04000          MOV      r4,r0
0000a0  e1a05001          MOV      r5,r1
;;;95         //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;96         BOOL reVal = FALSE; 
0000a4  e3a06000          MOV      r6,#0
;;;97         if(keyIgnoreFlag)
0000a8  e59f0184          LDR      r0,|L1.564|
0000ac  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
0000b0  e3500000          CMP      r0,#0
0000b4  0a000003          BEQ      |L1.200|
;;;98         {
;;;99             sysprintf(" [INFO GUI] <Free> Key:  ignore...\n"); 
0000b8  e28f0f5e          ADR      r0,|L1.568|
0000bc  ebfffffe          BL       sysprintf
;;;100            return reVal;
0000c0  e1a00006          MOV      r0,r6
                  |L1.196|
;;;101        }
;;;102        //pGuiGetInterface->setTimeoutFunc(EXIT_TIMER, EXIT_INTERVAL); 
;;;103        if(GUI_KEY_DOWN_INDEX == downUp)
;;;104        {
;;;105            switch(keyId)
;;;106            {
;;;107                case GUI_KEYPAD_LEFT_ID:
;;;108                    //reVal = TRUE;
;;;109                    break;
;;;110                case GUI_KEYPAD_RIGHT_ID:
;;;111                    //reVal = TRUE;
;;;112                    break;
;;;113                case GUI_KEYPAD_ADD_ID:
;;;114                    //reVal = TRUE;
;;;115                    break;
;;;116                case GUI_KEYPAD_MINUS_ID:
;;;117                    //SetGuiResponseVal('q');
;;;118                    //reVal = TRUE;
;;;119                    break;
;;;120            #if(SUPPORT_HK_10_HW)
;;;121                case GUI_KEYPAD_QRCODE_ID:
;;;122                    SetGuiResponseVal('q');
;;;123                    reVal = TRUE;
;;;124                    break;
;;;125            #else
;;;126                case GUI_KEYPAD_CONFIRM_ID:
;;;127            #endif
;;;128                    //reVal = TRUE;
;;;129                    break;
;;;130                case GUI_KEYPAD_REPLACE_BP_ID:
;;;131                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;132                    //GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;133                    //reVal = TRUE;
;;;134                    break;
;;;135                
;;;136                case GUI_KEYPAD_TESTER_ID:
;;;137                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;138                    //GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;139                    //reVal = TRUE;
;;;140                    break;
;;;141                
;;;142                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;143                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;144                    //GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;145                    //reVal = TRUE;
;;;146                    break;
;;;147            }
;;;148        }
;;;149        else
;;;150        {
;;;151            
;;;152        }
;;;153       // setPrintfFlag(FALSE);
;;;154        return reVal;
;;;155    }
0000c4  e8bd8070          POP      {r4-r6,pc}
                  |L1.200|
0000c8  e3550001          CMP      r5,#1                 ;103
0000cc  1a000026          BNE      |L1.364|
0000d0  e3540004          CMP      r4,#4                 ;105
0000d4  0a000014          BEQ      |L1.300|
0000d8  ca000008          BGT      |L1.256|
0000dc  e3540000          CMP      r4,#0                 ;105
0000e0  0a000015          BEQ      |L1.316|
0000e4  e3540001          CMP      r4,#1                 ;105
0000e8  0a000011          BEQ      |L1.308|
0000ec  e3540002          CMP      r4,#2                 ;105
0000f0  0a00000b          BEQ      |L1.292|
0000f4  e3540003          CMP      r4,#3                 ;105
0000f8  1a00001a          BNE      |L1.360|
0000fc  ea000006          B        |L1.284|
                  |L1.256|
000100  e3540011          CMP      r4,#0x11              ;105
000104  0a000011          BEQ      |L1.336|
000108  e3540013          CMP      r4,#0x13              ;105
00010c  0a000013          BEQ      |L1.352|
000110  e3540014          CMP      r4,#0x14              ;105
000114  1a000013          BNE      |L1.360|
000118  ea00000e          B        |L1.344|
                  |L1.284|
00011c  e1a00000          MOV      r0,r0                 ;107
000120  ea000010          B        |L1.360|
                  |L1.292|
000124  e1a00000          MOV      r0,r0                 ;110
000128  ea00000e          B        |L1.360|
                  |L1.300|
00012c  e1a00000          MOV      r0,r0                 ;113
000130  ea00000c          B        |L1.360|
                  |L1.308|
000134  e1a00000          MOV      r0,r0                 ;116
000138  ea00000a          B        |L1.360|
                  |L1.316|
00013c  e1a00000          MOV      r0,r0                 ;121
000140  e3a00071          MOV      r0,#0x71              ;122
000144  ebfffffe          BL       SetGuiResponseVal
000148  e3a06001          MOV      r6,#1                 ;123
00014c  ea000005          B        |L1.360|
                  |L1.336|
000150  e1a00000          MOV      r0,r0                 ;130
000154  ea000003          B        |L1.360|
                  |L1.344|
000158  e1a00000          MOV      r0,r0                 ;136
00015c  ea000001          B        |L1.360|
                  |L1.352|
000160  e1a00000          MOV      r0,r0                 ;142
000164  e1a00000          MOV      r0,r0                 ;146
                  |L1.360|
000168  e1a00000          MOV      r0,r0                 ;109
                  |L1.364|
00016c  e1a00006          MOV      r0,r6                 ;154
000170  eaffffd3          B        |L1.196|
;;;156    BOOL GuiNullTimerCallback(uint8_t timerIndex)
                          ENDP

                  GuiNullTimerCallback PROC
000174  e1a01000          MOV      r1,r0
;;;157    {
;;;158        //sysprintf(" [INFO GUI] <Free> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;159        keyIgnoreFlag = TRUE;
000178  e3a00001          MOV      r0,#1
00017c  e59f20b0          LDR      r2,|L1.564|
000180  e5c20000          STRB     r0,[r2,#0]  ; keyIgnoreFlag
;;;160        switch(timerIndex)
000184  e3510000          CMP      r1,#0
000188  0a000004          BEQ      |L1.416|
00018c  e3510001          CMP      r1,#1
000190  0a000004          BEQ      |L1.424|
000194  e3510002          CMP      r1,#2
000198  1a000006          BNE      |L1.440|
00019c  ea000003          B        |L1.432|
                  |L1.416|
;;;161        {
;;;162            case UPDATE_BG_TIMER:
0001a0  e1a00000          MOV      r0,r0
;;;163    
;;;164                break;
0001a4  ea000003          B        |L1.440|
                  |L1.424|
;;;165            case UPDATE_DATA_TIMER:
0001a8  e1a00000          MOV      r0,r0
;;;166    
;;;167                break;
0001ac  ea000001          B        |L1.440|
                  |L1.432|
;;;168            case EXIT_TIMER:
0001b0  e1a00000          MOV      r0,r0
;;;169                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);        
;;;170                break;
0001b4  e1a00000          MOV      r0,r0
                  |L1.440|
0001b8  e1a00000          MOV      r0,r0                 ;164
;;;171    
;;;172        }
;;;173        keyIgnoreFlag = FALSE;
0001bc  e3a00000          MOV      r0,#0
0001c0  e59f206c          LDR      r2,|L1.564|
0001c4  e5c20000          STRB     r0,[r2,#0]  ; keyIgnoreFlag
;;;174        return TRUE;
0001c8  e3a00001          MOV      r0,#1
;;;175    }
0001cc  e12fff1e          BX       lr
;;;176    
                          ENDP

                  GuiNullPowerCallbackFunc PROC
;;;177    BOOL GuiNullPowerCallbackFunc(uint8_t type, int flag)
0001d0  e1a02000          MOV      r2,r0
;;;178    {
;;;179        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;180        switch(type)
0001d4  e3520001          CMP      r2,#1
0001d8  0a000006          BEQ      |L1.504|
0001dc  e3520002          CMP      r2,#2
0001e0  0a000008          BEQ      |L1.520|
0001e4  e3520003          CMP      r2,#3
0001e8  0a000008          BEQ      |L1.528|
0001ec  e3520004          CMP      r2,#4
0001f0  1a00000a          BNE      |L1.544|
0001f4  ea000007          B        |L1.536|
                  |L1.504|
;;;181        {
;;;182            case GUI_POWER_STATUS_INDEX:
0001f8  e1a00000          MOV      r0,r0
;;;183                return powerStatus;
0001fc  e59f0028          LDR      r0,|L1.556|
000200  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.516|
;;;184            case GUI_POWER_ON_INDEX:
;;;185                break;
;;;186            case GUI_POWER_OFF_INDEX:
;;;187                break;
;;;188            case GUI_POWER_PREV_OFF_INDEX:
;;;189                break;
;;;190        }
;;;191        return TRUE;
;;;192    }
000204  e12fff1e          BX       lr
                  |L1.520|
000208  e1a00000          MOV      r0,r0                 ;184
00020c  ea000003          B        |L1.544|
                  |L1.528|
000210  e1a00000          MOV      r0,r0                 ;186
000214  ea000001          B        |L1.544|
                  |L1.536|
000218  e1a00000          MOV      r0,r0                 ;188
00021c  e1a00000          MOV      r0,r0                 ;189
                  |L1.544|
000220  e1a00000          MOV      r0,r0                 ;185
000224  e3a00001          MOV      r0,#1                 ;191
000228  eafffff5          B        |L1.516|
;;;193    
                          ENDP

                  |L1.556|
                          DCD      powerStatus
                  |L1.560|
                          DCD      pGuiGetInterface
                  |L1.564|
                          DCD      keyIgnoreFlag
                  |L1.568|
000238  205b494e          DCB      " [INFO GUI] <Free> Key:  ignore...\n",0
00023c  464f2047
000240  55495d20
000244  3c467265
000248  653e204b
00024c  65793a20
000250  2069676e
000254  6f72652e
000258  2e2e0a00

                          AREA ||.data||, DATA, ALIGN=2

                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000004  01                DCB      0x01
                  keyIgnoreFlag
000005  00                DCB      0x00
