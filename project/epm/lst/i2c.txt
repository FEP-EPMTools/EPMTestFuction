; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\i2c.crf ..\..\common\src\BSP\Driver\Source\i2c.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _i2cSetSpeed PROC
;;;83       */
;;;84     static int32_t _i2cSetSpeed(i2c_dev *dev, int32_t sp)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;85     {
000004  e1a05000          MOV      r5,r0
000008  e1a04001          MOV      r4,r1
;;;86         uint32_t d;
;;;87     
;;;88         if( sp != 100 && sp != 400)
00000c  e3540064          CMP      r4,#0x64
000010  0a000003          BEQ      |L1.36|
000014  e3540e19          CMP      r4,#0x190
000018  0a000001          BEQ      |L1.36|
;;;89             return(I2C_ERR_NOTTY);
00001c  e59f043c          LDR      r0,|L1.1120|
                  |L1.32|
;;;90     
;;;91         d = I2C_INPUT_CLOCK/(sp * 5) -1;
;;;92     
;;;93         i2c_out(dev, d & 0xffff, I2C_DIVIDER);
;;;94     
;;;95         return 0;
;;;96     }
000020  e8bd8070          POP      {r4-r6,pc}
                  |L1.36|
000024  e0841104          ADD      r1,r4,r4,LSL #2       ;91
000028  e59f0434          LDR      r0,|L1.1124|
00002c  ebfffffe          BL       __aeabi_idivmod
000030  e2406001          SUB      r6,r0,#1              ;91
000034  e1a00806          LSL      r0,r6,#16             ;93
000038  e1a00820          LSR      r0,r0,#16             ;93
00003c  e5951000          LDR      r1,[r5,#0]            ;93
000040  e5810004          STR      r0,[r1,#4]            ;93
000044  e3a00000          MOV      r0,#0                 ;95
000048  eafffff4          B        |L1.32|
;;;97     
                          ENDP

                  _i2cCommand PROC
;;;103      */
;;;104    static void _i2cCommand(i2c_dev *dev, int32_t cmd)
00004c  e2012002          AND      r2,r1,#2
;;;105    {
;;;106        bNackValid = (cmd & I2C_CMD_WRITE) ? 1 : 0;
000050  e1a020a2          LSR      r2,r2,#1
000054  e59f340c          LDR      r3,|L1.1128|
000058  e5832000          STR      r2,[r3,#0]  ; bNackValid
;;;107        i2c_out(dev, cmd, I2C_CMDR);
00005c  e5902000          LDR      r2,[r0,#0]
000060  e5821008          STR      r1,[r2,#8]
;;;108    }
000064  e12fff1e          BX       lr
;;;109    
                          ENDP

                  _i2cCalcAddr PROC
;;;115      */
;;;116    static void _i2cCalcAddr(i2c_dev *dev, int32_t mode)
000068  e92d4010          PUSH     {r4,lr}
;;;117    {
00006c  e1a02001          MOV      r2,r1
;;;118        int32_t i;
;;;119        uint32_t subaddr;
;;;120    
;;;121        subaddr = dev->subaddr;
000070  e5903014          LDR      r3,[r0,#0x14]
;;;122    
;;;123        dev->buffer[0] = (((dev->addr << 1) & 0xfe) | I2C_WRITE) & 0xff;
000074  e3a040fe          MOV      r4,#0xfe
000078  e590c00c          LDR      r12,[r0,#0xc]
00007c  e004c08c          AND      r12,r4,r12,LSL #1
000080  e5c0c01c          STRB     r12,[r0,#0x1c]
;;;124    
;;;125        for(i = dev->subaddr_len; i > 0; i--) {
000084  e5901018          LDR      r1,[r0,#0x18]
000088  ea000003          B        |L1.156|
                  |L1.140|
;;;126            dev->buffer[i] = subaddr & 0xff;
00008c  e280401c          ADD      r4,r0,#0x1c
000090  e7c43001          STRB     r3,[r4,r1]
;;;127            subaddr >>= 8;
000094  e1a03423          LSR      r3,r3,#8
000098  e2411001          SUB      r1,r1,#1              ;125
                  |L1.156|
00009c  e3510000          CMP      r1,#0                 ;125
0000a0  cafffff9          BGT      |L1.140|
;;;128        }
;;;129    
;;;130        if(mode == I2C_STATE_READ) {
0000a4  e3520001          CMP      r2,#1
0000a8  1a000007          BNE      |L1.204|
;;;131            i = dev->subaddr_len + 1;
0000ac  e590c018          LDR      r12,[r0,#0x18]
0000b0  e28c1001          ADD      r1,r12,#1
;;;132            dev->buffer[i] = (((dev->addr << 1) & 0xfe)) | I2C_READ;
0000b4  e3a040fe          MOV      r4,#0xfe
0000b8  e590c00c          LDR      r12,[r0,#0xc]
0000bc  e004c08c          AND      r12,r4,r12,LSL #1
0000c0  e38cc001          ORR      r12,r12,#1
0000c4  e280401c          ADD      r4,r0,#0x1c
0000c8  e7c4c001          STRB     r12,[r4,r1]
                  |L1.204|
;;;133        }
;;;134    }
0000cc  e8bd8010          POP      {r4,pc}
;;;135    
                          ENDP

                  _i2cReset PROC
;;;140      */
;;;141    static void _i2cReset(i2c_dev *dev)
0000d0  e3e01000          MVN      r1,#0
;;;142    {
;;;143        dev->addr = -1;
0000d4  e580100c          STR      r1,[r0,#0xc]
;;;144        dev->last_error = 0;
0000d8  e3a01000          MOV      r1,#0
0000dc  e5801010          STR      r1,[r0,#0x10]
;;;145        dev->subaddr = 0;
0000e0  e5801014          STR      r1,[r0,#0x14]
;;;146        dev->subaddr_len = 0;
0000e4  e5801018          STR      r1,[r0,#0x18]
;;;147    }
0000e8  e12fff1e          BX       lr
;;;148    
                          ENDP

                  i2c0ISR PROC
;;;153      */
;;;154    static void i2c0ISR(void)
0000ec  e92d4070          PUSH     {r4-r6,lr}
;;;155    {
;;;156        int32_t csr, val;
;;;157        i2c_dev *dev;
;;;158    
;;;159        dev = (i2c_dev *) ( (uint32_t)&i2c_device[0] );
0000f0  e59f4374          LDR      r4,|L1.1132|
;;;160    
;;;161        csr = i2c_in(dev, I2C_CSR);
0000f4  e5940000          LDR      r0,[r4,#0]
0000f8  e5906000          LDR      r6,[r0,#0]
;;;162        csr |= 0x04;
0000fc  e3866004          ORR      r6,r6,#4
;;;163    
;;;164        i2c_out(dev, csr, I2C_CSR);  /* clear interrupt flag */
000100  e5940000          LDR      r0,[r4,#0]
000104  e5806000          STR      r6,[r0,#0]
;;;165    
;;;166        if(dev->state == I2C_STATE_NOP)
000108  e5940008          LDR      r0,[r4,#8]
00010c  e3500000          CMP      r0,#0
000110  1a000000          BNE      |L1.280|
                  |L1.276|
;;;167            return;
;;;168    
;;;169        if((csr & 0x800) && bNackValid) {   /* NACK only valid in WRITE */
;;;170            dev->last_error = I2C_ERR_NACK;
;;;171            _i2cCommand(dev, I2C_CMD_STOP);
;;;172            dev->state = I2C_STATE_NOP;
;;;173        } else if(csr & 0x200) {            /* Arbitration lost */
;;;174            sysprintf("Arbitration lost\n");
;;;175            dev->last_error = I2C_ERR_LOSTARBITRATION;
;;;176            dev->state = I2C_STATE_NOP;
;;;177        } else if(!(csr & 0x100)) {         /* transmit complete */
;;;178            if(dev->pos < dev->subaddr_len + 1) {   /* send address state */
;;;179                val = dev->buffer[dev->pos++] & 0xff;
;;;180                i2c_out(dev, val, I2C_TxR);
;;;181                _i2cCommand(dev, I2C_CMD_WRITE);
;;;182            } else if(dev->state == I2C_STATE_READ) {
;;;183    
;;;184                /* sub address send over , begin restart a read command */
;;;185    
;;;186                if(dev->pos == dev->subaddr_len + 1) {
;;;187                    val = dev->buffer[dev->pos++];
;;;188                    i2c_out(dev, val, I2C_TxR);
;;;189                    _i2cCommand(dev, I2C_CMD_START | I2C_CMD_WRITE);
;;;190                } else {
;;;191    
;;;192                    dev->buffer[dev->pos++] = i2c_in(dev, I2C_RxR) & 0xff;
;;;193    
;;;194                    if( dev->pos < dev->len) {
;;;195                        if(dev->pos == dev->len -1 )    /* last character */
;;;196                            _i2cCommand(dev, I2C_CMD_READ |
;;;197                                        I2C_CMD_STOP |
;;;198                                        I2C_CMD_NACK);
;;;199                        else
;;;200                            _i2cCommand(dev, I2C_CMD_READ);
;;;201                    } else {
;;;202                        dev->state = I2C_STATE_NOP;
;;;203                    }
;;;204                }
;;;205            } else if(dev->state == I2C_STATE_WRITE) { /* write data */
;;;206    
;;;207                if( dev->pos < dev->len) {
;;;208                    val = dev->buffer[dev->pos];
;;;209    
;;;210                    i2c_out(dev, val, I2C_TxR);
;;;211    
;;;212                    if(dev->pos == dev->len -1 )    /* last character */
;;;213                        _i2cCommand(dev, I2C_CMD_WRITE| I2C_CMD_STOP);
;;;214                    else
;;;215                        _i2cCommand(dev, I2C_CMD_WRITE);
;;;216    
;;;217                    dev->pos ++;
;;;218                } else {
;;;219                    dev->state = I2C_STATE_NOP;
;;;220                }
;;;221            }
;;;222        }
;;;223    }
000114  e8bd8070          POP      {r4-r6,pc}
                  |L1.280|
000118  e3160b02          TST      r6,#0x800             ;169
00011c  0a00000b          BEQ      |L1.336|
000120  e59f0340          LDR      r0,|L1.1128|
000124  e5900000          LDR      r0,[r0,#0]            ;169  ; bNackValid
000128  e3500000          CMP      r0,#0                 ;169
00012c  0a000007          BEQ      |L1.336|
000130  e59f0338          LDR      r0,|L1.1136|
000134  e5840010          STR      r0,[r4,#0x10]         ;170
000138  e3a01008          MOV      r1,#8                 ;171
00013c  e1a00004          MOV      r0,r4                 ;171
000140  ebfffffe          BL       _i2cCommand
000144  e3a00000          MOV      r0,#0                 ;172
000148  e5840008          STR      r0,[r4,#8]            ;172
00014c  ea000066          B        |L1.748|
                  |L1.336|
000150  e3160c02          TST      r6,#0x200             ;173
000154  0a000006          BEQ      |L1.372|
000158  e28f0fc5          ADR      r0,|L1.1140|
00015c  ebfffffe          BL       sysprintf
000160  e59f0320          LDR      r0,|L1.1160|
000164  e5840010          STR      r0,[r4,#0x10]         ;175
000168  e3a00000          MOV      r0,#0                 ;176
00016c  e5840008          STR      r0,[r4,#8]            ;176
000170  ea00005d          B        |L1.748|
                  |L1.372|
000174  e3160c01          TST      r6,#0x100             ;177
000178  1a00005b          BNE      |L1.748|
00017c  e59401e0          LDR      r0,[r4,#0x1e0]        ;178
000180  e5941018          LDR      r1,[r4,#0x18]         ;178
000184  e2811001          ADD      r1,r1,#1              ;178
000188  e1500001          CMP      r0,r1                 ;178
00018c  2a00000a          BCS      |L1.444|
000190  e59401e0          LDR      r0,[r4,#0x1e0]        ;179
000194  e2801001          ADD      r1,r0,#1              ;179
000198  e58411e0          STR      r1,[r4,#0x1e0]        ;179
00019c  e284101c          ADD      r1,r4,#0x1c           ;179
0001a0  e7d15000          LDRB     r5,[r1,r0]            ;179
0001a4  e5940000          LDR      r0,[r4,#0]            ;180
0001a8  e5805014          STR      r5,[r0,#0x14]         ;180
0001ac  e3a01002          MOV      r1,#2                 ;181
0001b0  e1a00004          MOV      r0,r4                 ;181
0001b4  ebfffffe          BL       _i2cCommand
0001b8  ea00004b          B        |L1.748|
                  |L1.444|
0001bc  e5940008          LDR      r0,[r4,#8]            ;182
0001c0  e3500001          CMP      r0,#1                 ;182
0001c4  1a00002a          BNE      |L1.628|
0001c8  e59401e0          LDR      r0,[r4,#0x1e0]        ;186
0001cc  e5941018          LDR      r1,[r4,#0x18]         ;186
0001d0  e2811001          ADD      r1,r1,#1              ;186
0001d4  e1500001          CMP      r0,r1                 ;186
0001d8  1a00000a          BNE      |L1.520|
0001dc  e59401e0          LDR      r0,[r4,#0x1e0]        ;187
0001e0  e2801001          ADD      r1,r0,#1              ;187
0001e4  e58411e0          STR      r1,[r4,#0x1e0]        ;187
0001e8  e284101c          ADD      r1,r4,#0x1c           ;187
0001ec  e7d15000          LDRB     r5,[r1,r0]            ;187
0001f0  e5940000          LDR      r0,[r4,#0]            ;188
0001f4  e5805014          STR      r5,[r0,#0x14]         ;188
0001f8  e3a01012          MOV      r1,#0x12              ;189
0001fc  e1a00004          MOV      r0,r4                 ;189
000200  ebfffffe          BL       _i2cCommand
000204  ea000038          B        |L1.748|
                  |L1.520|
000208  e5941000          LDR      r1,[r4,#0]            ;192
00020c  e5911010          LDR      r1,[r1,#0x10]         ;192
000210  e59401e0          LDR      r0,[r4,#0x1e0]        ;192
000214  e2802001          ADD      r2,r0,#1              ;192
000218  e58421e0          STR      r2,[r4,#0x1e0]        ;192
00021c  e284201c          ADD      r2,r4,#0x1c           ;192
000220  e7c21000          STRB     r1,[r2,r0]            ;192
000224  e59401e0          LDR      r0,[r4,#0x1e0]        ;194
000228  e59411e4          LDR      r1,[r4,#0x1e4]        ;194
00022c  e1500001          CMP      r0,r1                 ;194
000230  2a00000c          BCS      |L1.616|
000234  e59401e0          LDR      r0,[r4,#0x1e0]        ;195
000238  e59411e4          LDR      r1,[r4,#0x1e4]        ;195
00023c  e2411001          SUB      r1,r1,#1              ;195
000240  e1500001          CMP      r0,r1                 ;195
000244  1a000003          BNE      |L1.600|
000248  e3a0100d          MOV      r1,#0xd               ;196
00024c  e1a00004          MOV      r0,r4                 ;196
000250  ebfffffe          BL       _i2cCommand
000254  ea000024          B        |L1.748|
                  |L1.600|
000258  e3a01004          MOV      r1,#4                 ;200
00025c  e1a00004          MOV      r0,r4                 ;200
000260  ebfffffe          BL       _i2cCommand
000264  ea000020          B        |L1.748|
                  |L1.616|
000268  e3a00000          MOV      r0,#0                 ;202
00026c  e5840008          STR      r0,[r4,#8]            ;202
000270  ea00001d          B        |L1.748|
                  |L1.628|
000274  e5940008          LDR      r0,[r4,#8]            ;205
000278  e3500002          CMP      r0,#2                 ;205
00027c  1a00001a          BNE      |L1.748|
000280  e59401e0          LDR      r0,[r4,#0x1e0]        ;207
000284  e59411e4          LDR      r1,[r4,#0x1e4]        ;207
000288  e1500001          CMP      r0,r1                 ;207
00028c  2a000014          BCS      |L1.740|
000290  e59401e0          LDR      r0,[r4,#0x1e0]        ;208
000294  e284101c          ADD      r1,r4,#0x1c           ;208
000298  e7d15000          LDRB     r5,[r1,r0]            ;208
00029c  e5940000          LDR      r0,[r4,#0]            ;210
0002a0  e5805014          STR      r5,[r0,#0x14]         ;210
0002a4  e59401e0          LDR      r0,[r4,#0x1e0]        ;212
0002a8  e59411e4          LDR      r1,[r4,#0x1e4]        ;212
0002ac  e2411001          SUB      r1,r1,#1              ;212
0002b0  e1500001          CMP      r0,r1                 ;212
0002b4  1a000003          BNE      |L1.712|
0002b8  e3a0100a          MOV      r1,#0xa               ;213
0002bc  e1a00004          MOV      r0,r4                 ;213
0002c0  ebfffffe          BL       _i2cCommand
0002c4  ea000002          B        |L1.724|
                  |L1.712|
0002c8  e3a01002          MOV      r1,#2                 ;215
0002cc  e1a00004          MOV      r0,r4                 ;215
0002d0  ebfffffe          BL       _i2cCommand
                  |L1.724|
0002d4  e59401e0          LDR      r0,[r4,#0x1e0]        ;217
0002d8  e2800001          ADD      r0,r0,#1              ;217
0002dc  e58401e0          STR      r0,[r4,#0x1e0]        ;217
0002e0  ea000001          B        |L1.748|
                  |L1.740|
0002e4  e3a00000          MOV      r0,#0                 ;219
0002e8  e5840008          STR      r0,[r4,#8]            ;219
                  |L1.748|
0002ec  e1a00000          MOV      r0,r0
0002f0  eaffff87          B        |L1.276|
;;;224    
                          ENDP

                  i2c1ISR PROC
;;;229      */
;;;230    static void i2c1ISR(void)
0002f4  e92d4070          PUSH     {r4-r6,lr}
;;;231    {
;;;232        int32_t csr, val;
;;;233        i2c_dev *dev;
;;;234    
;;;235        dev = (i2c_dev *) ( (uint32_t)&i2c_device[1] );
0002f8  e59f418c          LDR      r4,|L1.1164|
;;;236    
;;;237        csr = i2c_in(dev, I2C_CSR);
0002fc  e5940000          LDR      r0,[r4,#0]
000300  e5906000          LDR      r6,[r0,#0]
;;;238        csr |= 0x04;
000304  e3866004          ORR      r6,r6,#4
;;;239    
;;;240        i2c_out(dev, csr, I2C_CSR);  /* clear interrupt flag */
000308  e5940000          LDR      r0,[r4,#0]
00030c  e5806000          STR      r6,[r0,#0]
;;;241    
;;;242        if(dev->state == I2C_STATE_NOP)
000310  e5940008          LDR      r0,[r4,#8]
000314  e3500000          CMP      r0,#0
000318  1a000000          BNE      |L1.800|
                  |L1.796|
;;;243            return;
;;;244    
;;;245        if((csr & 0x800) && bNackValid) {   /* NACK only valid in WRITE */
;;;246            dev->last_error = I2C_ERR_NACK;
;;;247            _i2cCommand(dev, I2C_CMD_STOP);
;;;248            dev->state = I2C_STATE_NOP;
;;;249        } else if(csr & 0x200) {            /* Arbitration lost */
;;;250            sysprintf("Arbitration lost\n");
;;;251            dev->last_error = I2C_ERR_LOSTARBITRATION;
;;;252            dev->state = I2C_STATE_NOP;
;;;253        } else if(!(csr & 0x100)) {         /* transmit complete */
;;;254            if(dev->pos < dev->subaddr_len + 1) {   /* send address state */
;;;255                val = dev->buffer[dev->pos++] & 0xff;
;;;256                i2c_out(dev, val, I2C_TxR);
;;;257                _i2cCommand(dev, I2C_CMD_WRITE);
;;;258            } else if(dev->state == I2C_STATE_READ) {
;;;259    
;;;260                /* sub address send over , begin restart a read command */
;;;261    
;;;262                if(dev->pos == dev->subaddr_len + 1) {
;;;263                    val = dev->buffer[dev->pos++];
;;;264                    i2c_out(dev, val, I2C_TxR);
;;;265                    _i2cCommand(dev, I2C_CMD_START | I2C_CMD_WRITE);
;;;266                } else {
;;;267    
;;;268                    dev->buffer[dev->pos++] = i2c_in(dev, I2C_RxR) & 0xff;
;;;269    
;;;270                    if( dev->pos < dev->len) {
;;;271                        if(dev->pos == dev->len -1 )    /* last character */
;;;272                            _i2cCommand(dev, I2C_CMD_READ |
;;;273                                        I2C_CMD_STOP |
;;;274                                        I2C_CMD_NACK);
;;;275                        else
;;;276                            _i2cCommand(dev, I2C_CMD_READ);
;;;277                    } else {
;;;278                        dev->state = I2C_STATE_NOP;
;;;279                    }
;;;280                }
;;;281            } else if(dev->state == I2C_STATE_WRITE) { /* write data */
;;;282    
;;;283                if( dev->pos < dev->len) {
;;;284                    val = dev->buffer[dev->pos];
;;;285    
;;;286                    i2c_out(dev, val, I2C_TxR);
;;;287    
;;;288                    if(dev->pos == dev->len -1 )    /* last character */
;;;289                        _i2cCommand(dev, I2C_CMD_WRITE| I2C_CMD_STOP);
;;;290                    else
;;;291                        _i2cCommand(dev, I2C_CMD_WRITE);
;;;292    
;;;293                    dev->pos ++;
;;;294                } else {
;;;295                    dev->state = I2C_STATE_NOP;
;;;296                }
;;;297            }
;;;298        }
;;;299    }
00031c  e8bd8070          POP      {r4-r6,pc}
                  |L1.800|
000320  e3160b02          TST      r6,#0x800             ;245
000324  0a00000b          BEQ      |L1.856|
000328  e59f0138          LDR      r0,|L1.1128|
00032c  e5900000          LDR      r0,[r0,#0]            ;245  ; bNackValid
000330  e3500000          CMP      r0,#0                 ;245
000334  0a000007          BEQ      |L1.856|
000338  e59f0130          LDR      r0,|L1.1136|
00033c  e5840010          STR      r0,[r4,#0x10]         ;246
000340  e3a01008          MOV      r1,#8                 ;247
000344  e1a00004          MOV      r0,r4                 ;247
000348  ebfffffe          BL       _i2cCommand
00034c  e3a00000          MOV      r0,#0                 ;248
000350  e5840008          STR      r0,[r4,#8]            ;248
000354  ea000072          B        |L1.1316|
                  |L1.856|
000358  e3160c02          TST      r6,#0x200             ;249
00035c  0a000006          BEQ      |L1.892|
000360  e28f0f43          ADR      r0,|L1.1140|
000364  ebfffffe          BL       sysprintf
000368  e59f0118          LDR      r0,|L1.1160|
00036c  e5840010          STR      r0,[r4,#0x10]         ;251
000370  e3a00000          MOV      r0,#0                 ;252
000374  e5840008          STR      r0,[r4,#8]            ;252
000378  ea000069          B        |L1.1316|
                  |L1.892|
00037c  e3160c01          TST      r6,#0x100             ;253
000380  1a000067          BNE      |L1.1316|
000384  e59401e0          LDR      r0,[r4,#0x1e0]        ;254
000388  e5941018          LDR      r1,[r4,#0x18]         ;254
00038c  e2811001          ADD      r1,r1,#1              ;254
000390  e1500001          CMP      r0,r1                 ;254
000394  2a00000a          BCS      |L1.964|
000398  e59401e0          LDR      r0,[r4,#0x1e0]        ;255
00039c  e2801001          ADD      r1,r0,#1              ;255
0003a0  e58411e0          STR      r1,[r4,#0x1e0]        ;255
0003a4  e284101c          ADD      r1,r4,#0x1c           ;255
0003a8  e7d15000          LDRB     r5,[r1,r0]            ;255
0003ac  e5940000          LDR      r0,[r4,#0]            ;256
0003b0  e5805014          STR      r5,[r0,#0x14]         ;256
0003b4  e3a01002          MOV      r1,#2                 ;257
0003b8  e1a00004          MOV      r0,r4                 ;257
0003bc  ebfffffe          BL       _i2cCommand
0003c0  ea000057          B        |L1.1316|
                  |L1.964|
0003c4  e5940008          LDR      r0,[r4,#8]            ;258
0003c8  e3500001          CMP      r0,#1                 ;258
0003cc  1a000036          BNE      |L1.1196|
0003d0  e59401e0          LDR      r0,[r4,#0x1e0]        ;262
0003d4  e5941018          LDR      r1,[r4,#0x18]         ;262
0003d8  e2811001          ADD      r1,r1,#1              ;262
0003dc  e1500001          CMP      r0,r1                 ;262
0003e0  1a00000a          BNE      |L1.1040|
0003e4  e59401e0          LDR      r0,[r4,#0x1e0]        ;263
0003e8  e2801001          ADD      r1,r0,#1              ;263
0003ec  e58411e0          STR      r1,[r4,#0x1e0]        ;263
0003f0  e284101c          ADD      r1,r4,#0x1c           ;263
0003f4  e7d15000          LDRB     r5,[r1,r0]            ;263
0003f8  e5940000          LDR      r0,[r4,#0]            ;264
0003fc  e5805014          STR      r5,[r0,#0x14]         ;264
000400  e3a01012          MOV      r1,#0x12              ;265
000404  e1a00004          MOV      r0,r4                 ;265
000408  ebfffffe          BL       _i2cCommand
00040c  ea000044          B        |L1.1316|
                  |L1.1040|
000410  e5941000          LDR      r1,[r4,#0]            ;268
000414  e5911010          LDR      r1,[r1,#0x10]         ;268
000418  e59401e0          LDR      r0,[r4,#0x1e0]        ;268
00041c  e2802001          ADD      r2,r0,#1              ;268
000420  e58421e0          STR      r2,[r4,#0x1e0]        ;268
000424  e284201c          ADD      r2,r4,#0x1c           ;268
000428  e7c21000          STRB     r1,[r2,r0]            ;268
00042c  e59401e0          LDR      r0,[r4,#0x1e0]        ;270
000430  e59411e4          LDR      r1,[r4,#0x1e4]        ;270
000434  e1500001          CMP      r0,r1                 ;270
000438  2a000018          BCS      |L1.1184|
00043c  e59401e0          LDR      r0,[r4,#0x1e0]        ;271
000440  e59411e4          LDR      r1,[r4,#0x1e4]        ;271
000444  e2411001          SUB      r1,r1,#1              ;271
000448  e1500001          CMP      r0,r1                 ;271
00044c  1a00000f          BNE      |L1.1168|
000450  e3a0100d          MOV      r1,#0xd               ;272
000454  e1a00004          MOV      r0,r4                 ;272
000458  ebfffffe          BL       _i2cCommand
00045c  ea000030          B        |L1.1316|
                  |L1.1120|
                          DCD      0xffff1108
                  |L1.1124|
                          DCD      0x000080e8
                  |L1.1128|
                          DCD      bNackValid
                  |L1.1132|
                          DCD      i2c_device
                  |L1.1136|
                          DCD      0xffff1103
                  |L1.1140|
000474  41726269          DCB      "Arbitration lost\n",0
000478  74726174
00047c  696f6e20
000480  6c6f7374
000484  0a00    
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
                          DCD      0xffff1101
                  |L1.1164|
                          DCD      i2c_device+0x1e8
                  |L1.1168|
000490  e3a01004          MOV      r1,#4                 ;276
000494  e1a00004          MOV      r0,r4                 ;276
000498  ebfffffe          BL       _i2cCommand
00049c  ea000020          B        |L1.1316|
                  |L1.1184|
0004a0  e3a00000          MOV      r0,#0                 ;278
0004a4  e5840008          STR      r0,[r4,#8]            ;278
0004a8  ea00001d          B        |L1.1316|
                  |L1.1196|
0004ac  e5940008          LDR      r0,[r4,#8]            ;281
0004b0  e3500002          CMP      r0,#2                 ;281
0004b4  1a00001a          BNE      |L1.1316|
0004b8  e59401e0          LDR      r0,[r4,#0x1e0]        ;283
0004bc  e59411e4          LDR      r1,[r4,#0x1e4]        ;283
0004c0  e1500001          CMP      r0,r1                 ;283
0004c4  2a000014          BCS      |L1.1308|
0004c8  e59401e0          LDR      r0,[r4,#0x1e0]        ;284
0004cc  e284101c          ADD      r1,r4,#0x1c           ;284
0004d0  e7d15000          LDRB     r5,[r1,r0]            ;284
0004d4  e5940000          LDR      r0,[r4,#0]            ;286
0004d8  e5805014          STR      r5,[r0,#0x14]         ;286
0004dc  e59401e0          LDR      r0,[r4,#0x1e0]        ;288
0004e0  e59411e4          LDR      r1,[r4,#0x1e4]        ;288
0004e4  e2411001          SUB      r1,r1,#1              ;288
0004e8  e1500001          CMP      r0,r1                 ;288
0004ec  1a000003          BNE      |L1.1280|
0004f0  e3a0100a          MOV      r1,#0xa               ;289
0004f4  e1a00004          MOV      r0,r4                 ;289
0004f8  ebfffffe          BL       _i2cCommand
0004fc  ea000002          B        |L1.1292|
                  |L1.1280|
000500  e3a01002          MOV      r1,#2                 ;291
000504  e1a00004          MOV      r0,r4                 ;291
000508  ebfffffe          BL       _i2cCommand
                  |L1.1292|
00050c  e59401e0          LDR      r0,[r4,#0x1e0]        ;293
000510  e2800001          ADD      r0,r0,#1              ;293
000514  e58401e0          STR      r0,[r4,#0x1e0]        ;293
000518  ea000001          B        |L1.1316|
                  |L1.1308|
00051c  e3a00000          MOV      r0,#0                 ;295
000520  e5840008          STR      r0,[r4,#8]            ;295
                  |L1.1316|
000524  e1a00000          MOV      r0,r0
000528  eaffff7b          B        |L1.796|
;;;300    
                          ENDP

                  i2cEnterCriticalSection PROC
;;;303    //add by sam
;;;304    void i2cEnterCriticalSection(int32_t fd)
00052c  e92d4010          PUSH     {r4,lr}
;;;305    {
000530  e1a04000          MOV      r4,r0
;;;306        if(i2c_device[fd].openflag == 0)
000534  e0840084          ADD      r0,r4,r4,LSL #1
000538  e0600304          RSB      r0,r0,r4,LSL #6
00053c  e51f10d8          LDR      r1,|L1.1132|
000540  e0810180          ADD      r0,r1,r0,LSL #3
000544  e5900004          LDR      r0,[r0,#4]
000548  e3500000          CMP      r0,#0
00054c  1a000007          BNE      |L1.1392|
;;;307        {
;;;308            sysprintf("i2cEnterCriticalSection[%d](openflag = %d), ignore\r\n", fd, i2c_device[fd].openflag);
000550  e0840084          ADD      r0,r4,r4,LSL #1
000554  e0600304          RSB      r0,r0,r4,LSL #6
000558  e0810180          ADD      r0,r1,r0,LSL #3
00055c  e1a01004          MOV      r1,r4
000560  e5902004          LDR      r2,[r0,#4]
000564  e28f0fb7          ADR      r0,|L1.2120|
000568  ebfffffe          BL       sysprintf
                  |L1.1388|
;;;309            return ;
;;;310        }
;;;311        xSemaphoreTake(xi2cSemaphore[fd], portMAX_DELAY);
;;;312    }
00056c  e8bd8010          POP      {r4,pc}
                  |L1.1392|
000570  e59f1308          LDR      r1,|L1.2176|
000574  e7910104          LDR      r0,[r1,r4,LSL #2]     ;311
000578  e3a03000          MOV      r3,#0                 ;311
00057c  e3e02000          MVN      r2,#0                 ;311
000580  e1a01003          MOV      r1,r3                 ;311
000584  ebfffffe          BL       xQueueGenericReceive
000588  e1a00000          MOV      r0,r0
00058c  eafffff6          B        |L1.1388|
;;;313    
                          ENDP

                  i2cExitCriticalSection PROC
;;;314    void i2cExitCriticalSection(int32_t fd)
000590  e92d4010          PUSH     {r4,lr}
;;;315    {
000594  e1a04000          MOV      r4,r0
;;;316        if(i2c_device[fd].openflag == 0)
000598  e0840084          ADD      r0,r4,r4,LSL #1
00059c  e0600304          RSB      r0,r0,r4,LSL #6
0005a0  e51f113c          LDR      r1,|L1.1132|
0005a4  e0810180          ADD      r0,r1,r0,LSL #3
0005a8  e5900004          LDR      r0,[r0,#4]
0005ac  e3500000          CMP      r0,#0
0005b0  1a000007          BNE      |L1.1492|
;;;317        {
;;;318            sysprintf("i2cExitCriticalSection[%d](openflag = %d), ignore\r\n", fd, i2c_device[fd].openflag);
0005b4  e0840084          ADD      r0,r4,r4,LSL #1
0005b8  e0600304          RSB      r0,r0,r4,LSL #6
0005bc  e0810180          ADD      r0,r1,r0,LSL #3
0005c0  e1a01004          MOV      r1,r4
0005c4  e5902004          LDR      r2,[r0,#4]
0005c8  e28f0fad          ADR      r0,|L1.2180|
0005cc  ebfffffe          BL       sysprintf
                  |L1.1488|
;;;319            return ;
;;;320        }
;;;321        xSemaphoreGive(xi2cSemaphore[fd]);
;;;322    }
0005d0  e8bd8010          POP      {r4,pc}
                  |L1.1492|
0005d4  e59f12a4          LDR      r1,|L1.2176|
0005d8  e7910104          LDR      r0,[r1,r4,LSL #2]     ;321
0005dc  e3a03000          MOV      r3,#0                 ;321
0005e0  e1a02003          MOV      r2,r3                 ;321
0005e4  e1a01003          MOV      r1,r3                 ;321
0005e8  ebfffffe          BL       xQueueGenericSend
0005ec  e1a00000          MOV      r0,r0
0005f0  eafffff6          B        |L1.1488|
;;;323    
                          ENDP

                  i2cOpen PROC
;;;332      */
;;;333    int32_t i2cOpen(PVOID param)
0005f4  e92d4070          PUSH     {r4-r6,lr}
;;;334    {
0005f8  e1a04000          MOV      r4,r0
;;;335        i2c_dev *dev;
;;;336    
;;;337        if( (uint32_t)param >= I2C_NUMBER)
0005fc  e3540002          CMP      r4,#2
000600  3a000001          BCC      |L1.1548|
;;;338            return I2C_ERR_NODEV;
000604  e59f02ac          LDR      r0,|L1.2232|
                  |L1.1544|
;;;339    
;;;340        dev = (i2c_dev *)((uint32_t)&i2c_device[(uint32_t)param] );
;;;341    
;;;342        if( dev->openflag != 0 )        /* a card slot can open only once */
;;;343            return(I2C_ERR_BUSY);
;;;344    
;;;345        /* Enable engine clock */
;;;346        if((uint32_t)param == 0)
;;;347            outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | 0x1);
;;;348        else
;;;349            outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | 0x2);
;;;350    
;;;351        memset(dev, 0, sizeof(i2c_dev));
;;;352        dev->base = ((uint32_t)param) ? I2C1_BA : I2C0_BA;
;;;353    
;;;354        _i2cReset(dev);
;;;355    
;;;356        dev->openflag = 1;
;;;357        
;;;358        // by sam
;;;359        //vSemaphoreCreateBinary(xi2cSemaphore[(uint32_t)param]);
;;;360        xi2cSemaphore[(uint32_t)param] = xSemaphoreCreateMutex();
;;;361    
;;;362        return 0;
;;;363    }
000608  e8bd8070          POP      {r4-r6,pc}
                  |L1.1548|
00060c  e0840084          ADD      r0,r4,r4,LSL #1       ;340
000610  e0600304          RSB      r0,r0,r4,LSL #6       ;340
000614  e51f11b0          LDR      r1,|L1.1132|
000618  e0815180          ADD      r5,r1,r0,LSL #3       ;340
00061c  e5950004          LDR      r0,[r5,#4]            ;342
000620  e3500000          CMP      r0,#0                 ;342
000624  0a000001          BEQ      |L1.1584|
000628  e59f028c          LDR      r0,|L1.2236|
00062c  eafffff5          B        |L1.1544|
                  |L1.1584|
000630  e3540000          CMP      r4,#0                 ;346
000634  1a000005          BNE      |L1.1616|
000638  e3a0020b          MOV      r0,#0xb0000000        ;347
00063c  e590021c          LDR      r0,[r0,#0x21c]        ;347
000640  e3800001          ORR      r0,r0,#1              ;347
000644  e3a0120b          MOV      r1,#0xb0000000        ;347
000648  e581021c          STR      r0,[r1,#0x21c]        ;347
00064c  ea000004          B        |L1.1636|
                  |L1.1616|
000650  e3a0020b          MOV      r0,#0xb0000000        ;349
000654  e590021c          LDR      r0,[r0,#0x21c]        ;349
000658  e3800002          ORR      r0,r0,#2              ;349
00065c  e3a0120b          MOV      r1,#0xb0000000        ;349
000660  e581021c          STR      r0,[r1,#0x21c]        ;349
                  |L1.1636|
000664  e3a01f7a          MOV      r1,#0x1e8             ;351
000668  e1a00005          MOV      r0,r5                 ;351
00066c  ebfffffe          BL       __aeabi_memclr4
000670  e3540000          CMP      r4,#0                 ;352
000674  0a000001          BEQ      |L1.1664|
000678  e59f0240          LDR      r0,|L1.2240|
00067c  ea000000          B        |L1.1668|
                  |L1.1664|
000680  e59f023c          LDR      r0,|L1.2244|
                  |L1.1668|
000684  e5850000          STR      r0,[r5,#0]            ;352
000688  e1a00005          MOV      r0,r5                 ;354
00068c  ebfffffe          BL       _i2cReset
000690  e3a00001          MOV      r0,#1                 ;356
000694  e5850004          STR      r0,[r5,#4]            ;356
000698  ebfffffe          BL       xQueueCreateMutex
00069c  e59f11dc          LDR      r1,|L1.2176|
0006a0  e7810104          STR      r0,[r1,r4,LSL #2]     ;360
0006a4  e3a00000          MOV      r0,#0                 ;362
0006a8  eaffffd6          B        |L1.1544|
;;;364    
                          ENDP

                  i2cClose PROC
;;;371      */
;;;372    int32_t i2cClose(int32_t fd)
0006ac  e92d4070          PUSH     {r4-r6,lr}
;;;373    {
0006b0  e1a04000          MOV      r4,r0
;;;374        i2c_dev *dev;
;;;375    
;;;376        if(fd != 0 && fd != 1)
0006b4  e3540000          CMP      r4,#0
0006b8  0a000003          BEQ      |L1.1740|
0006bc  e3540001          CMP      r4,#1
0006c0  0a000001          BEQ      |L1.1740|
;;;377            return(I2C_ERR_NODEV);
0006c4  e59f01ec          LDR      r0,|L1.2232|
                  |L1.1736|
;;;378    
;;;379        dev = (i2c_dev *)( (uint32_t)&i2c_device[fd] );
;;;380    
;;;381        dev->openflag = 0;
;;;382    
;;;383        if(fd == 0)
;;;384            sysDisableInterrupt(I2C0_IRQn);
;;;385        else
;;;386            sysDisableInterrupt(I2C1_IRQn);
;;;387        
;;;388        //by sam
;;;389        vSemaphoreDelete(xi2cSemaphore[fd]);
;;;390        return 0;
;;;391    }
0006c8  e8bd8070          POP      {r4-r6,pc}
                  |L1.1740|
0006cc  e0840084          ADD      r0,r4,r4,LSL #1       ;379
0006d0  e0600304          RSB      r0,r0,r4,LSL #6       ;379
0006d4  e51f1270          LDR      r1,|L1.1132|
0006d8  e0815180          ADD      r5,r1,r0,LSL #3       ;379
0006dc  e3a00000          MOV      r0,#0                 ;381
0006e0  e5850004          STR      r0,[r5,#4]            ;381
0006e4  e3540000          CMP      r4,#0                 ;383
0006e8  1a000002          BNE      |L1.1784|
0006ec  e3a00035          MOV      r0,#0x35              ;384
0006f0  ebfffffe          BL       sysDisableInterrupt
0006f4  ea000001          B        |L1.1792|
                  |L1.1784|
0006f8  e3a00036          MOV      r0,#0x36              ;386
0006fc  ebfffffe          BL       sysDisableInterrupt
                  |L1.1792|
000700  e59f1178          LDR      r1,|L1.2176|
000704  e7910104          LDR      r0,[r1,r4,LSL #2]     ;389
000708  ebfffffe          BL       vQueueDelete
00070c  e3a00000          MOV      r0,#0                 ;390
000710  eaffffec          B        |L1.1736|
;;;392    
                          ENDP

                  i2cRead PROC
;;;405      */
;;;406    int32_t i2cRead(int32_t fd, uint8_t* buf, uint32_t len)
000714  e92d41f0          PUSH     {r4-r8,lr}
;;;407    {
000718  e1a06000          MOV      r6,r0
00071c  e1a07001          MOV      r7,r1
000720  e1a05002          MOV      r5,r2
;;;408        i2c_dev *dev;
;;;409    
;;;410        if(fd != 1 && fd != 0)
000724  e3560001          CMP      r6,#1
000728  0a000003          BEQ      |L1.1852|
00072c  e3560000          CMP      r6,#0
000730  0a000001          BEQ      |L1.1852|
;;;411            return(I2C_ERR_NODEV);
000734  e59f017c          LDR      r0,|L1.2232|
                  |L1.1848|
;;;412    
;;;413        dev = (i2c_dev *)( (uint32_t)&i2c_device[fd] );
;;;414    
;;;415        if(dev->openflag == 0)
;;;416            return(I2C_ERR_IO);
;;;417    
;;;418        if(len == 0)
;;;419            return 0;
;;;420    
;;;421        if(!i2cIsBusFree(dev))
;;;422            return(I2C_ERR_BUSY);
;;;423    
;;;424        if(len > I2C_MAX_BUF_LEN - 10)
;;;425            len = I2C_MAX_BUF_LEN - 10;
;;;426    
;;;427        dev->state = I2C_STATE_READ;
;;;428        dev->pos = 1;
;;;429        /* Current ISR design will get one garbage byte */
;;;430        dev->len = dev->subaddr_len + 1 + len + 2;  /* plus 1 unused char                           */
;;;431        dev->last_error = 0;
;;;432    
;;;433        _i2cCalcAddr(dev, I2C_STATE_READ);
;;;434    
;;;435        i2cEnable(dev);
;;;436    
;;;437        i2c_out(dev, dev->buffer[0] & 0xff, I2C_TxR);
;;;438    
;;;439        if(!i2cIsBusFree(dev))
;;;440            return(I2C_ERR_BUSY);
;;;441    
;;;442        _i2cCommand(dev, I2C_CMD_START | I2C_CMD_WRITE);
;;;443    
;;;444        while(dev->state != I2C_STATE_NOP);
;;;445    
;;;446        i2cDisable(dev);
;;;447    
;;;448        if(dev->last_error)
;;;449            return(dev->last_error);
;;;450    
;;;451        memcpy(buf, dev->buffer + dev->subaddr_len + 3, len);
;;;452    
;;;453        dev->subaddr += len;
;;;454    
;;;455        return len;
;;;456    }
000738  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1852|
00073c  e0860086          ADD      r0,r6,r6,LSL #1       ;413
000740  e0600306          RSB      r0,r0,r6,LSL #6       ;413
000744  e51f12e0          LDR      r1,|L1.1132|
000748  e0814180          ADD      r4,r1,r0,LSL #3       ;413
00074c  e5940004          LDR      r0,[r4,#4]            ;415
000750  e3500000          CMP      r0,#0                 ;415
000754  1a000001          BNE      |L1.1888|
000758  e59f0168          LDR      r0,|L1.2248|
00075c  eafffff5          B        |L1.1848|
                  |L1.1888|
000760  e3550000          CMP      r5,#0                 ;418
000764  1a000001          BNE      |L1.1904|
000768  e3a00000          MOV      r0,#0                 ;419
00076c  eafffff1          B        |L1.1848|
                  |L1.1904|
000770  e5940000          LDR      r0,[r4,#0]            ;421
000774  e590000c          LDR      r0,[r0,#0xc]          ;421
000778  e2000018          AND      r0,r0,#0x18           ;421
00077c  e3500018          CMP      r0,#0x18              ;421
000780  1a000003          BNE      |L1.1940|
000784  e5940000          LDR      r0,[r4,#0]            ;421
000788  e5900000          LDR      r0,[r0,#0]            ;421
00078c  e3100b01          TST      r0,#0x400             ;421
000790  0a000001          BEQ      |L1.1948|
                  |L1.1940|
000794  e3a00001          MOV      r0,#1                 ;421
000798  ea000000          B        |L1.1952|
                  |L1.1948|
00079c  e3a00000          MOV      r0,#0                 ;421
                  |L1.1952|
0007a0  e3500000          CMP      r0,#0                 ;421
0007a4  0a000001          BEQ      |L1.1968|
0007a8  e59f010c          LDR      r0,|L1.2236|
0007ac  eaffffe1          B        |L1.1848|
                  |L1.1968|
0007b0  e3550f6e          CMP      r5,#0x1b8             ;424
0007b4  9a000000          BLS      |L1.1980|
0007b8  e3a05f6e          MOV      r5,#0x1b8             ;425
                  |L1.1980|
0007bc  e3a00001          MOV      r0,#1                 ;427
0007c0  e5840008          STR      r0,[r4,#8]            ;427
0007c4  e58401e0          STR      r0,[r4,#0x1e0]        ;428
0007c8  e5940018          LDR      r0,[r4,#0x18]         ;430
0007cc  e2800001          ADD      r0,r0,#1              ;430
0007d0  e0800005          ADD      r0,r0,r5              ;430
0007d4  e2800002          ADD      r0,r0,#2              ;430
0007d8  e58401e4          STR      r0,[r4,#0x1e4]        ;430
0007dc  e3a00000          MOV      r0,#0                 ;431
0007e0  e5840010          STR      r0,[r4,#0x10]         ;431
0007e4  e3a01001          MOV      r1,#1                 ;433
0007e8  e1a00004          MOV      r0,r4                 ;433
0007ec  ebfffffe          BL       _i2cCalcAddr
0007f0  e3a00003          MOV      r0,#3                 ;435
0007f4  e5941000          LDR      r1,[r4,#0]            ;435
0007f8  e5810000          STR      r0,[r1,#0]            ;435
0007fc  e5d4001c          LDRB     r0,[r4,#0x1c]         ;437
000800  e5941000          LDR      r1,[r4,#0]            ;437
000804  e5810014          STR      r0,[r1,#0x14]         ;437
000808  e5940000          LDR      r0,[r4,#0]            ;439
00080c  e590000c          LDR      r0,[r0,#0xc]          ;439
000810  e2000018          AND      r0,r0,#0x18           ;439
000814  e3500018          CMP      r0,#0x18              ;439
000818  1a000003          BNE      |L1.2092|
00081c  e5940000          LDR      r0,[r4,#0]            ;439
000820  e5900000          LDR      r0,[r0,#0]            ;439
000824  e3100b01          TST      r0,#0x400             ;439
000828  0a000001          BEQ      |L1.2100|
                  |L1.2092|
00082c  e3a00001          MOV      r0,#1                 ;439
000830  ea000000          B        |L1.2104|
                  |L1.2100|
000834  e3a00000          MOV      r0,#0                 ;439
                  |L1.2104|
000838  e3500000          CMP      r0,#0                 ;439
00083c  0a000022          BEQ      |L1.2252|
000840  e59f0074          LDR      r0,|L1.2236|
000844  eaffffbb          B        |L1.1848|
                  |L1.2120|
000848  69326345          DCB      "i2cEnterCriticalSection[%d](openflag = %d), ignore\r\n",0
00084c  6e746572
000850  43726974
000854  6963616c
000858  53656374
00085c  696f6e5b
000860  25645d28
000864  6f70656e
000868  666c6167
00086c  203d2025
000870  64292c20
000874  69676e6f
000878  72650d0a
00087c  00      
00087d  00                DCB      0
00087e  00                DCB      0
00087f  00                DCB      0
                  |L1.2176|
                          DCD      xi2cSemaphore
                  |L1.2180|
000884  69326345          DCB      "i2cExitCriticalSection[%d](openflag = %d), ignore\r\n",0
000888  78697443
00088c  72697469
000890  63616c53
000894  65637469
000898  6f6e5b25
00089c  645d286f
0008a0  70656e66
0008a4  6c616720
0008a8  3d202564
0008ac  292c2069
0008b0  676e6f72
0008b4  650d0a00
                  |L1.2232|
                          DCD      0xffff1105
                  |L1.2236|
                          DCD      0xffff1106
                  |L1.2240|
                          DCD      0xb8006100
                  |L1.2244|
                          DCD      0xb8006000
                  |L1.2248|
                          DCD      0xffff1107
                  |L1.2252|
0008cc  e3a01012          MOV      r1,#0x12              ;442
0008d0  e1a00004          MOV      r0,r4                 ;442
0008d4  ebfffffe          BL       _i2cCommand
0008d8  e1a00000          MOV      r0,r0                 ;444
                  |L1.2268|
0008dc  e5940008          LDR      r0,[r4,#8]            ;444
0008e0  e3500000          CMP      r0,#0                 ;444
0008e4  1afffffc          BNE      |L1.2268|
0008e8  e3a00000          MOV      r0,#0                 ;446
0008ec  e5941000          LDR      r1,[r4,#0]            ;446
0008f0  e5810000          STR      r0,[r1,#0]            ;446
0008f4  e5940010          LDR      r0,[r4,#0x10]         ;448
0008f8  e3500000          CMP      r0,#0                 ;448
0008fc  0a000001          BEQ      |L1.2312|
000900  e5940010          LDR      r0,[r4,#0x10]         ;449
000904  eaffff8b          B        |L1.1848|
                  |L1.2312|
000908  e5940018          LDR      r0,[r4,#0x18]         ;451
00090c  e284201c          ADD      r2,r4,#0x1c           ;451
000910  e0800002          ADD      r0,r0,r2              ;451
000914  e2801003          ADD      r1,r0,#3              ;451
000918  e1a02005          MOV      r2,r5                 ;451
00091c  e1a00007          MOV      r0,r7                 ;451
000920  ebfffffe          BL       __aeabi_memcpy
000924  e5940014          LDR      r0,[r4,#0x14]         ;453
000928  e0800005          ADD      r0,r0,r5              ;453
00092c  e5840014          STR      r0,[r4,#0x14]         ;453
000930  e1a00005          MOV      r0,r5                 ;455
000934  eaffff7f          B        |L1.1848|
;;;457    
                          ENDP

                  i2cWrite PROC
;;;470      */
;;;471    int32_t i2cWrite(int32_t fd, uint8_t* buf, uint32_t len)
000938  e92d41f0          PUSH     {r4-r8,lr}
;;;472    {
00093c  e1a06000          MOV      r6,r0
000940  e1a07001          MOV      r7,r1
000944  e1a05002          MOV      r5,r2
;;;473        i2c_dev *dev;
;;;474    
;;;475        if(fd != 1 && fd != 0)
000948  e3560001          CMP      r6,#1
00094c  0a000003          BEQ      |L1.2400|
000950  e3560000          CMP      r6,#0
000954  0a000001          BEQ      |L1.2400|
;;;476            return(I2C_ERR_NODEV);
000958  e51f00a8          LDR      r0,|L1.2232|
                  |L1.2396|
;;;477    
;;;478        dev = (i2c_dev *)( (uint32_t)&i2c_device[fd] );
;;;479    
;;;480        if(dev->openflag == 0)
;;;481            return(I2C_ERR_IO);
;;;482    
;;;483        if(len == 0)
;;;484            return 0;
;;;485    
;;;486        if(!i2cIsBusFree(dev))
;;;487            return(I2C_ERR_BUSY);
;;;488    
;;;489        if(len > I2C_MAX_BUF_LEN - 10)
;;;490            len = I2C_MAX_BUF_LEN - 10;
;;;491    
;;;492        memcpy(dev->buffer + dev->subaddr_len + 1 , buf, len);
;;;493    
;;;494        dev->state = I2C_STATE_WRITE;
;;;495        dev->pos = 1;
;;;496        dev->len = dev->subaddr_len + 1 + len;
;;;497        dev->last_error = 0;
;;;498    
;;;499        _i2cCalcAddr(dev, I2C_STATE_WRITE);
;;;500    
;;;501        i2cEnable(dev);
;;;502    
;;;503        i2c_out(dev, dev->buffer[0] & 0xff, I2C_TxR);
;;;504    
;;;505        if(!i2cIsBusFree(dev))
;;;506            return(I2C_ERR_BUSY);
;;;507    
;;;508        _i2cCommand(dev, I2C_CMD_START | I2C_CMD_WRITE);
;;;509    
;;;510        while(dev->state != I2C_STATE_NOP);
;;;511    
;;;512        i2cDisable(dev);
;;;513    
;;;514        if(dev->last_error)
;;;515            return(dev->last_error);
;;;516    
;;;517        dev->subaddr += len;
;;;518    
;;;519        return len;
;;;520    }
00095c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2400|
000960  e0860086          ADD      r0,r6,r6,LSL #1       ;478
000964  e0600306          RSB      r0,r0,r6,LSL #6       ;478
000968  e51f1504          LDR      r1,|L1.1132|
00096c  e0814180          ADD      r4,r1,r0,LSL #3       ;478
000970  e5940004          LDR      r0,[r4,#4]            ;480
000974  e3500000          CMP      r0,#0                 ;480
000978  1a000001          BNE      |L1.2436|
00097c  e51f00bc          LDR      r0,|L1.2248|
000980  eafffff5          B        |L1.2396|
                  |L1.2436|
000984  e3550000          CMP      r5,#0                 ;483
000988  1a000001          BNE      |L1.2452|
00098c  e3a00000          MOV      r0,#0                 ;484
000990  eafffff1          B        |L1.2396|
                  |L1.2452|
000994  e5940000          LDR      r0,[r4,#0]            ;486
000998  e590000c          LDR      r0,[r0,#0xc]          ;486
00099c  e2000018          AND      r0,r0,#0x18           ;486
0009a0  e3500018          CMP      r0,#0x18              ;486
0009a4  1a000003          BNE      |L1.2488|
0009a8  e5940000          LDR      r0,[r4,#0]            ;486
0009ac  e5900000          LDR      r0,[r0,#0]            ;486
0009b0  e3100b01          TST      r0,#0x400             ;486
0009b4  0a000001          BEQ      |L1.2496|
                  |L1.2488|
0009b8  e3a00001          MOV      r0,#1                 ;486
0009bc  ea000000          B        |L1.2500|
                  |L1.2496|
0009c0  e3a00000          MOV      r0,#0                 ;486
                  |L1.2500|
0009c4  e3500000          CMP      r0,#0                 ;486
0009c8  0a000001          BEQ      |L1.2516|
0009cc  e51f0118          LDR      r0,|L1.2236|
0009d0  eaffffe1          B        |L1.2396|
                  |L1.2516|
0009d4  e3550f6e          CMP      r5,#0x1b8             ;489
0009d8  9a000000          BLS      |L1.2528|
0009dc  e3a05f6e          MOV      r5,#0x1b8             ;490
                  |L1.2528|
0009e0  e5941018          LDR      r1,[r4,#0x18]         ;492
0009e4  e284201c          ADD      r2,r4,#0x1c           ;492
0009e8  e0811002          ADD      r1,r1,r2              ;492
0009ec  e2810001          ADD      r0,r1,#1              ;492
0009f0  e1a02005          MOV      r2,r5                 ;492
0009f4  e1a01007          MOV      r1,r7                 ;492
0009f8  ebfffffe          BL       __aeabi_memcpy
0009fc  e3a00002          MOV      r0,#2                 ;494
000a00  e5840008          STR      r0,[r4,#8]            ;494
000a04  e3a00001          MOV      r0,#1                 ;495
000a08  e58401e0          STR      r0,[r4,#0x1e0]        ;495
000a0c  e5940018          LDR      r0,[r4,#0x18]         ;496
000a10  e2800001          ADD      r0,r0,#1              ;496
000a14  e0800005          ADD      r0,r0,r5              ;496
000a18  e58401e4          STR      r0,[r4,#0x1e4]        ;496
000a1c  e3a00000          MOV      r0,#0                 ;497
000a20  e5840010          STR      r0,[r4,#0x10]         ;497
000a24  e3a01002          MOV      r1,#2                 ;499
000a28  e1a00004          MOV      r0,r4                 ;499
000a2c  ebfffffe          BL       _i2cCalcAddr
000a30  e3a00003          MOV      r0,#3                 ;501
000a34  e5941000          LDR      r1,[r4,#0]            ;501
000a38  e5810000          STR      r0,[r1,#0]            ;501
000a3c  e5d4001c          LDRB     r0,[r4,#0x1c]         ;503
000a40  e5941000          LDR      r1,[r4,#0]            ;503
000a44  e5810014          STR      r0,[r1,#0x14]         ;503
000a48  e5940000          LDR      r0,[r4,#0]            ;505
000a4c  e590000c          LDR      r0,[r0,#0xc]          ;505
000a50  e2000018          AND      r0,r0,#0x18           ;505
000a54  e3500018          CMP      r0,#0x18              ;505
000a58  1a000003          BNE      |L1.2668|
000a5c  e5940000          LDR      r0,[r4,#0]            ;505
000a60  e5900000          LDR      r0,[r0,#0]            ;505
000a64  e3100b01          TST      r0,#0x400             ;505
000a68  0a000001          BEQ      |L1.2676|
                  |L1.2668|
000a6c  e3a00001          MOV      r0,#1                 ;505
000a70  ea000000          B        |L1.2680|
                  |L1.2676|
000a74  e3a00000          MOV      r0,#0                 ;505
                  |L1.2680|
000a78  e3500000          CMP      r0,#0                 ;505
000a7c  0a000001          BEQ      |L1.2696|
000a80  e51f01cc          LDR      r0,|L1.2236|
000a84  eaffffb4          B        |L1.2396|
                  |L1.2696|
000a88  e3a01012          MOV      r1,#0x12              ;508
000a8c  e1a00004          MOV      r0,r4                 ;508
000a90  ebfffffe          BL       _i2cCommand
000a94  e1a00000          MOV      r0,r0                 ;510
                  |L1.2712|
000a98  e5940008          LDR      r0,[r4,#8]            ;510
000a9c  e3500000          CMP      r0,#0                 ;510
000aa0  1afffffc          BNE      |L1.2712|
000aa4  e3a00000          MOV      r0,#0                 ;512
000aa8  e5941000          LDR      r1,[r4,#0]            ;512
000aac  e5810000          STR      r0,[r1,#0]            ;512
000ab0  e5940010          LDR      r0,[r4,#0x10]         ;514
000ab4  e3500000          CMP      r0,#0                 ;514
000ab8  0a000001          BEQ      |L1.2756|
000abc  e5940010          LDR      r0,[r4,#0x10]         ;515
000ac0  eaffffa5          B        |L1.2396|
                  |L1.2756|
000ac4  e5940014          LDR      r0,[r4,#0x14]         ;517
000ac8  e0800005          ADD      r0,r0,r5              ;517
000acc  e5840014          STR      r0,[r4,#0x14]         ;517
000ad0  e1a00005          MOV      r0,r5                 ;519
000ad4  eaffffa0          B        |L1.2396|
;;;521    
                          ENDP

                  i2cIoctl PROC
;;;533      */
;;;534    int32_t i2cIoctl(int32_t fd, uint32_t cmd, uint32_t arg0, uint32_t arg1)
000ad8  e92d41f0          PUSH     {r4-r8,lr}
;;;535    {
000adc  e1a05000          MOV      r5,r0
000ae0  e1a08001          MOV      r8,r1
000ae4  e1a06002          MOV      r6,r2
000ae8  e1a07003          MOV      r7,r3
;;;536        i2c_dev *dev;
;;;537    
;;;538        if(fd != 0 && fd != 1)
000aec  e3550000          CMP      r5,#0
000af0  0a000003          BEQ      |L1.2820|
000af4  e3550001          CMP      r5,#1
000af8  0a000001          BEQ      |L1.2820|
;;;539            return(I2C_ERR_NODEV);
000afc  e51f024c          LDR      r0,|L1.2232|
                  |L1.2816|
;;;540    
;;;541        dev = (i2c_dev *)((uint32_t)&i2c_device[fd] );
;;;542        if(dev->openflag == 0)
;;;543            return(I2C_ERR_IO);
;;;544    
;;;545        switch(cmd) {
;;;546        case I2C_IOC_SET_DEV_ADDRESS:
;;;547            dev->addr = arg0;
;;;548            break;
;;;549    
;;;550        case I2C_IOC_SET_SPEED:
;;;551    
;;;552            return(_i2cSetSpeed(dev, (int32_t)arg0));
;;;553    
;;;554        case I2C_IOC_SET_SUB_ADDRESS:
;;;555    
;;;556            if(arg1 > 4) {
;;;557                return(I2C_ERR_NOTTY);
;;;558            }
;;;559    
;;;560            dev->subaddr = arg0;
;;;561            dev->subaddr_len = arg1;
;;;562            break;
;;;563    
;;;564        default:
;;;565            return(I2C_ERR_NOTTY);
;;;566        }
;;;567    
;;;568        return (0);
;;;569    }
000b00  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2820|
000b04  e0850085          ADD      r0,r5,r5,LSL #1       ;541
000b08  e0600305          RSB      r0,r0,r5,LSL #6       ;541
000b0c  e51f16a8          LDR      r1,|L1.1132|
000b10  e0814180          ADD      r4,r1,r0,LSL #3       ;541
000b14  e5940004          LDR      r0,[r4,#4]            ;542
000b18  e3500000          CMP      r0,#0                 ;542
000b1c  1a000001          BNE      |L1.2856|
000b20  e51f0260          LDR      r0,|L1.2248|
000b24  eafffff5          B        |L1.2816|
                  |L1.2856|
000b28  e3580000          CMP      r8,#0                 ;545
000b2c  0a000004          BEQ      |L1.2884|
000b30  e3580001          CMP      r8,#1                 ;545
000b34  0a00000a          BEQ      |L1.2916|
000b38  e3580002          CMP      r8,#2                 ;545
000b3c  1a000010          BNE      |L1.2948|
000b40  ea000002          B        |L1.2896|
                  |L1.2884|
000b44  e1a00000          MOV      r0,r0                 ;546
000b48  e584600c          STR      r6,[r4,#0xc]          ;547
000b4c  ea00000f          B        |L1.2960|
                  |L1.2896|
000b50  e1a00000          MOV      r0,r0                 ;550
000b54  e1a01006          MOV      r1,r6                 ;552
000b58  e1a00004          MOV      r0,r4                 ;552
000b5c  ebfffffe          BL       _i2cSetSpeed
000b60  eaffffe6          B        |L1.2816|
                  |L1.2916|
000b64  e1a00000          MOV      r0,r0                 ;554
000b68  e3570004          CMP      r7,#4                 ;556
000b6c  9a000001          BLS      |L1.2936|
000b70  e51f0718          LDR      r0,|L1.1120|
000b74  eaffffe1          B        |L1.2816|
                  |L1.2936|
000b78  e5846014          STR      r6,[r4,#0x14]         ;560
000b7c  e5847018          STR      r7,[r4,#0x18]         ;561
000b80  ea000002          B        |L1.2960|
                  |L1.2948|
000b84  e1a00000          MOV      r0,r0                 ;564
000b88  e51f0730          LDR      r0,|L1.1120|
000b8c  eaffffdb          B        |L1.2816|
                  |L1.2960|
000b90  e1a00000          MOV      r0,r0                 ;548
000b94  e3a00000          MOV      r0,#0                 ;568
000b98  eaffffd8          B        |L1.2816|
;;;570    
                          ENDP

                  i2cExit PROC
;;;575      */
;;;576    int32_t i2cExit(void)
000b9c  e3a00000          MOV      r0,#0
;;;577    {
;;;578        return(0);
;;;579    }
000ba0  e12fff1e          BX       lr
;;;580    
                          ENDP

                  i2cInit PROC
;;;586      */
;;;587    int32_t i2cInit(int32_t fd)
000ba4  e92d4010          PUSH     {r4,lr}
;;;588    {
000ba8  e1a04000          MOV      r4,r0
;;;589        if(fd == 0) {
000bac  e3540000          CMP      r4,#0
000bb0  1a000009          BNE      |L1.3036|
;;;590            sysInstallISR(IRQ_LEVEL_1, I2C0_IRQn, (PVOID)i2c0ISR);
000bb4  e59f2054          LDR      r2,|L1.3088|
000bb8  e3a01035          MOV      r1,#0x35
000bbc  e3a00001          MOV      r0,#1
000bc0  ebfffffe          BL       sysInstallISR
;;;591            sysEnableInterrupt(I2C0_IRQn);
000bc4  e3a00035          MOV      r0,#0x35
000bc8  ebfffffe          BL       sysEnableInterrupt
;;;592            memset((void *)&i2c_device[0], 0, sizeof(i2c_dev));
000bcc  e3a01f7a          MOV      r1,#0x1e8
000bd0  e51f076c          LDR      r0,|L1.1132|
000bd4  ebfffffe          BL       __aeabi_memclr4
000bd8  ea000008          B        |L1.3072|
                  |L1.3036|
;;;593        } else {
;;;594            sysInstallISR(IRQ_LEVEL_1, I2C1_IRQn, (PVOID)i2c1ISR);
000bdc  e59f2030          LDR      r2,|L1.3092|
000be0  e3a01036          MOV      r1,#0x36
000be4  e3a00001          MOV      r0,#1
000be8  ebfffffe          BL       sysInstallISR
;;;595            sysEnableInterrupt(I2C1_IRQn);
000bec  e3a00036          MOV      r0,#0x36
000bf0  ebfffffe          BL       sysEnableInterrupt
;;;596            memset((void *)&i2c_device[1], 0, sizeof(i2c_dev));
000bf4  e3a01f7a          MOV      r1,#0x1e8
000bf8  e51f0774          LDR      r0,|L1.1164|
000bfc  ebfffffe          BL       __aeabi_memclr4
                  |L1.3072|
;;;597        }
;;;598    
;;;599        sysSetLocalInterrupt(ENABLE_IRQ);
000c00  e3a0007f          MOV      r0,#0x7f
000c04  ebfffffe          BL       sysSetLocalInterrupt
;;;600    
;;;601        return(0);
000c08  e3a00000          MOV      r0,#0
;;;602    }
000c0c  e8bd8010          POP      {r4,pc}
;;;603    /*@}*/ /* end of group NUC970_I2C_EXPORTED_FUNCTIONS */
                          ENDP

                  |L1.3088|
                          DCD      i2c0ISR
                  |L1.3092|
                          DCD      i2c1ISR

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i2c_device
                          %        976

                          AREA ||.data||, DATA, ALIGN=2

                  xi2cSemaphore
                          %        8
                  bNackValid
                          DCD      0x00000000
