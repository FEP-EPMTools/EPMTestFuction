; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\rwl.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\rwl.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\rwl.crf src\syshal\octopus\rwl.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  printfBuffData PROC
;;;90     
;;;91     static void printfBuffData(char* str, uint8_t* data, int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;92     {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
00000c  e1a07002          MOV      r7,r2
;;;93         int i;
;;;94         terninalPrintf("\r\n %s: len = %d start -->\r\n", str, len);
000010  e1a02007          MOV      r2,r7
000014  e1a01005          MOV      r1,r5
000018  e28f0f9b          ADR      r0,|L1.652|
00001c  ebfffffe          BL       terninalPrintf
;;;95         
;;;96         for(i = 0; i<len; i++)
000020  e3a04000          MOV      r4,#0
000024  ea000003          B        |L1.56|
                  |L1.40|
;;;97         { 
;;;98             #if(0)
;;;99             terninalPrintf("[%02d:0x%02x], ",i, (unsigned char)data[i]);
;;;100            if((i%16) == 15)
;;;101                terninalPrintf("\r\n");
;;;102            #else
;;;103            terninalPrintf("  0x%02x, ", (unsigned char)data[i]);
000028  e7d61004          LDRB     r1,[r6,r4]
00002c  e28f0f9d          ADR      r0,|L1.680|
000030  ebfffffe          BL       terninalPrintf
000034  e2844001          ADD      r4,r4,#1              ;96
                  |L1.56|
000038  e1540007          CMP      r4,r7                 ;96
00003c  bafffff9          BLT      |L1.40|
;;;104            #endif
;;;105        }
;;;106        terninalPrintf("<-- %s end\r\n\r\n", str);
000040  e1a01005          MOV      r1,r5
000044  e28f0f9a          ADR      r0,|L1.692|
000048  ebfffffe          BL       terninalPrintf
;;;107        
;;;108    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;109    #if(0)
                          ENDP

                  ComFlush PROC
;;;198    
;;;199    void ComFlush (void)
000050  e92d4010          PUSH     {r4,lr}
;;;200    {
;;;201        OctopusReaderFlushBuffer();
000054  ebfffffe          BL       OctopusReaderFlushBuffer
;;;202    #if(0)
;;;203        if(hComPort&&(fOpened==1))
;;;204            /* clean the line and activate the settings */
;;;205            tcflush (hComPort, TCIFLUSH);
;;;206    #endif
;;;207    }
000058  e8bd8010          POP      {r4,pc}
;;;208    
                          ENDP

                  com_out PROC
;;;155    /* put a character to COM port, wait till all sent */
;;;156    void com_out (BYTE *msg, INT len, BYTE u8_DataType)
00005c  e92d4070          PUSH     {r4-r6,lr}
;;;157    {   
000060  e1a06000          MOV      r6,r0
000064  e1a04001          MOV      r4,r1
000068  e1a05002          MOV      r5,r2
;;;158        //terninalPrintf(" com_out  %d bytes..\n", len);
;;;159        //printfBuffData(" -- [com_out] --", msg, len);
;;;160        /*
;;;161        terninalPrintf("*msg => ");
;;;162        for(int i=0 ; i<len ; i++)
;;;163            terninalPrintf("%02x ", msg[i]);
;;;164        terninalPrintf("\n");
;;;165        */
;;;166        vTaskDelay(10/portTICK_RATE_MS);
00006c  e3a00001          MOV      r0,#1
000070  ebfffffe          BL       vTaskDelay
;;;167        if(len > 0 )
000074  e3540000          CMP      r4,#0
000078  da000009          BLE      |L1.164|
;;;168        {
;;;169            if(OctopusReaderCheckHangUpEnable())
00007c  ebfffffe          BL       OctopusReaderCheckHangUpEnable
000080  e3500000          CMP      r0,#0
000084  0a000003          BEQ      |L1.152|
;;;170                outMsgFlag = TRUE;
000088  e3a00001          MOV      r0,#1
00008c  e59f1230          LDR      r1,|L1.708|
000090  e5c10000          STRB     r0,[r1,#0]  ; outMsgFlag
000094  ea000002          B        |L1.164|
                  |L1.152|
;;;171            else
;;;172                outMsgFlag = FALSE;
000098  e3a00000          MOV      r0,#0
00009c  e59f1220          LDR      r1,|L1.708|
0000a0  e5c10000          STRB     r0,[r1,#0]  ; outMsgFlag
                  |L1.164|
;;;173        }
;;;174        ComFlush();	//flush any date receive but not read    
0000a4  ebfffffe          BL       ComFlush
;;;175        GetTime(CMD_START);
0000a8  e28f0f86          ADR      r0,|L1.712|
0000ac  ebfffffe          BL       GetTime
;;;176        OctopusReaderWrite(msg, len); 
0000b0  e1a01004          MOV      r1,r4
0000b4  e1a00006          MOV      r0,r6
0000b8  ebfffffe          BL       OctopusReaderWrite
;;;177        
;;;178       // write(hComPort, msg, len);
;;;179        //tcdrain(hComPort);
;;;180    
;;;181        switch (u8_DataType)
0000bc  e3550001          CMP      r5,#1
0000c0  0a000004          BEQ      |L1.216|
0000c4  e3550002          CMP      r5,#2
0000c8  0a000006          BEQ      |L1.232|
0000cc  e3550003          CMP      r5,#3
0000d0  1a00000c          BNE      |L1.264|
0000d4  ea000007          B        |L1.248|
                  |L1.216|
;;;182        {
;;;183        case CMD_DATA_TYPE:
0000d8  e1a00000          MOV      r0,r0
;;;184            GetTime(CMD_SENT);
0000dc  e28f0e1f          ADR      r0,|L1.724|
0000e0  ebfffffe          BL       GetTime
;;;185            break;
0000e4  ea00000b          B        |L1.280|
                  |L1.232|
;;;186        case ACK_DATA_TYPE:
0000e8  e1a00000          MOV      r0,r0
;;;187            GetTime(ACK_SEND);
0000ec  e28f0f7b          ADR      r0,|L1.736|
0000f0  ebfffffe          BL       GetTime
;;;188            break;
0000f4  ea000007          B        |L1.280|
                  |L1.248|
;;;189        case NAK_DATA_TYPE:
0000f8  e1a00000          MOV      r0,r0
;;;190            GetTime(NAK_SEND);
0000fc  e28f0f7a          ADR      r0,|L1.748|
000100  ebfffffe          BL       GetTime
;;;191            break;
000104  ea000003          B        |L1.280|
                  |L1.264|
;;;192        default:
000108  e1a00000          MOV      r0,r0
;;;193            GetTime("UNKNOWN DATA");
00010c  e28f0f79          ADR      r0,|L1.760|
000110  ebfffffe          BL       GetTime
;;;194            break;
000114  e1a00000          MOV      r0,r0
                  |L1.280|
000118  e1a00000          MOV      r0,r0                 ;185
;;;195        }
;;;196        
;;;197    }
00011c  e8bd8070          POP      {r4-r6,pc}
;;;198    
                          ENDP

                  ReadData PROC
;;;209    //INT ReadData(BYTE *Msg, INT iExpect, struct timeval *st_TimeOut)
;;;210    INT ReadData (BYTE *Msg, INT iExpect, TickType_t* st_TimeOut)
000120  e92d47f0          PUSH     {r4-r10,lr}
;;;211    {
000124  e1a05000          MOV      r5,r0
000128  e1a06001          MOV      r6,r1
00012c  e1a07002          MOV      r7,r2
;;;212    #if(1)
;;;213        INT i=0;
000130  e3a04000          MOV      r4,#0
;;;214        int m_nBytes = 0;
000134  e3a08000          MOV      r8,#0
;;;215        TickType_t tickLocalStart = xTaskGetTickCount();
000138  ebfffffe          BL       xTaskGetTickCount
00013c  e1a09000          MOV      r9,r0
;;;216        //vTaskDelay(2000/portTICK_RATE_MS);
;;;217        //terninalPrintf(" ReadData [iExpect = %d, st_TimeOut = %d] enter ..\n", iExpect, *st_TimeOut);
;;;218        while(1)
000140  ea000014          B        |L1.408|
                  |L1.324|
;;;219        {
;;;220            m_nBytes = OctopusReaderRead(Msg+i, iExpect);      
000144  e0850004          ADD      r0,r5,r4
000148  e1a01006          MOV      r1,r6
00014c  ebfffffe          BL       OctopusReaderRead
000150  e1a08000          MOV      r8,r0
;;;221            
;;;222            /*
;;;223            terninalPrintf("<= ");
;;;224            for(int j=0 ; j<iExpect ; j++)
;;;225                terninalPrintf("%02x ", Msg[j]);
;;;226            terninalPrintf("\n");
;;;227            */
;;;228            
;;;229            //if(m_nBytes>=0)
;;;230            if(m_nBytes > 0)
000154  e3580000          CMP      r8,#0
000158  da000006          BLE      |L1.376|
;;;231            {   
;;;232                i+=(USHORT)m_nBytes;
00015c  e1a00808          LSL      r0,r8,#16
000160  e1a00820          LSR      r0,r0,#16
000164  e0844000          ADD      r4,r4,r0
;;;233                
;;;234                //terninalPrintf(" ReadData [iExpect = %d, st_TimeOut = %d] Read %d [%d] bytes..\n", iExpect, *st_TimeOut, m_nBytes, i);
;;;235                //printfBuffData(" -- [ReadData] --", Msg, i);
;;;236                
;;;237                if(i==iExpect)
000168  e1540006          CMP      r4,r6
00016c  1a000001          BNE      |L1.376|
;;;238                    return i;
000170  e1a00004          MOV      r0,r4
                  |L1.372|
;;;239                //else
;;;240                //    return 0;
;;;241            }
;;;242            //terninalPrintf(" ReadData [iExpect = %d, st_TimeOut = %d] compare %d vs %d ..\n", iExpect, *st_TimeOut, (xTaskGetTickCount() - tickLocalStart), *st_TimeOut);
;;;243            //terninalPrintf(".");
;;;244            if((xTaskGetTickCount() - tickLocalStart) > *st_TimeOut)
;;;245            {
;;;246                //terninalPrintf(" ReadData [iExpect = %d, st_TimeOut = %d] Break ..\n", iExpect, *st_TimeOut);
;;;247                break;
;;;248            }
;;;249            vTaskDelay(10/portTICK_RATE_MS);
;;;250        }
;;;251        return 0;
;;;252    #else
;;;253        INT i=0;
;;;254        ssize_t m_nBytes;
;;;255        fd_set ReadCom;
;;;256        FD_ZERO (&ReadCom);
;;;257        FD_SET (hComPort, &ReadCom);
;;;258    
;;;259        if(!fOpened)
;;;260            return -1;
;;;261    
;;;262        if(Msg==NULL)
;;;263            return -1;
;;;264    
;;;265        if(select (hComPort+1, &ReadCom, NULL, NULL, st_TimeOut)>0)
;;;266        {
;;;267            if(FD_ISSET (hComPort, &ReadCom))
;;;268            {
;;;269                m_nBytes=read (hComPort, Msg+i, iExpect);
;;;270                if(m_nBytes>=0)
;;;271                {
;;;272                    i+=(USHORT)m_nBytes;
;;;273                    if(i==iExpect)
;;;274                        return i;
;;;275                    else
;;;276                        return 0;
;;;277                }
;;;278            }
;;;279        }
;;;280    
;;;281        return 0; //no data return within timeout period
;;;282    #endif
;;;283    }
000174  e8bd87f0          POP      {r4-r10,pc}
                  |L1.376|
000178  ebfffffe          BL       xTaskGetTickCount
00017c  e0400009          SUB      r0,r0,r9              ;244
000180  e5971000          LDR      r1,[r7,#0]            ;244
000184  e1500001          CMP      r0,r1                 ;244
000188  9a000000          BLS      |L1.400|
00018c  ea000002          B        |L1.412|
                  |L1.400|
000190  e3a00001          MOV      r0,#1                 ;249
000194  ebfffffe          BL       vTaskDelay
                  |L1.408|
000198  eaffffe9          B        |L1.324|
                  |L1.412|
00019c  e1a00000          MOV      r0,r0                 ;247
0001a0  e3a00000          MOV      r0,#0                 ;251
0001a4  eafffff2          B        |L1.372|
;;;284    
                          ENDP

                  getStateStr PROC
;;;287    //======================================================================
;;;288    static char* getStateStr(int index)
0001a8  e1a01000          MOV      r1,r0
;;;289    {
;;;290        switch(index)
0001ac  e3510011          CMP      r1,#0x11
0001b0  308ff101          ADDCC    pc,pc,r1,LSL #2
0001b4  ea000084          B        |L1.972|
0001b8  ea00000f          B        |L1.508|
0001bc  ea000011          B        |L1.520|
0001c0  ea000013          B        |L1.532|
0001c4  ea000015          B        |L1.544|
0001c8  ea000017          B        |L1.556|
0001cc  ea000019          B        |L1.568|
0001d0  ea00001b          B        |L1.580|
0001d4  ea00001d          B        |L1.592|
0001d8  ea00001f          B        |L1.604|
0001dc  ea000021          B        |L1.616|
0001e0  ea000023          B        |L1.628|
0001e4  ea000025          B        |L1.640|
0001e8  ea000068          B        |L1.912|
0001ec  ea00006a          B        |L1.924|
0001f0  ea00006c          B        |L1.936|
0001f4  ea00006e          B        |L1.948|
0001f8  ea000070          B        |L1.960|
                  |L1.508|
;;;291        {
;;;292            case 0:
0001fc  e1a00000          MOV      r0,r0
;;;293                return "ST_SENDNAK";
000200  e28f0c01          ADR      r0,|L1.776|
                  |L1.516|
;;;294            case 1:
;;;295                return "ST_PREAMBLE";
;;;296            case 2:
;;;297                return "ST_START1";
;;;298            case 3:
;;;299                return "ST_START2";
;;;300            case 4:
;;;301                return "ST_LEN";
;;;302            case 5:
;;;303                return "ST_LCS";
;;;304            case 6:
;;;305                return "ST_DATA";
;;;306            case 7:
;;;307                return "ST_DCS";
;;;308            case 8:
;;;309                return "ST_POSTAMBLE";
;;;310            case 9:
;;;311                return "ST_ACKPOSTAMBLE";
;;;312            case 10:
;;;313                return "ST_NAKPOSTAMBLE";
;;;314            
;;;315            case 11:
;;;316                return "ST_NAK";
;;;317            case 12:
;;;318                return "ST_COMPLETE";
;;;319            case 13:
;;;320                return "ST_LEN_EX1";
;;;321            case 14:
;;;322                return "ST_LEN_EX2";
;;;323            case 15:
;;;324                return "ST_DCS1";
;;;325            case 16:
;;;326                return "ST_DCS2";
;;;327            default:
;;;328                return "OTHER";
;;;329            
;;;330        }
;;;331    }
000204  e12fff1e          BX       lr
                  |L1.520|
000208  e1a00000          MOV      r0,r0                 ;294
00020c  e28f0c01          ADR      r0,|L1.788|
000210  eafffffb          B        |L1.516|
                  |L1.532|
000214  e1a00000          MOV      r0,r0                 ;296
000218  e28f0c01          ADR      r0,|L1.800|
00021c  eafffff8          B        |L1.516|
                  |L1.544|
000220  e1a00000          MOV      r0,r0                 ;298
000224  e28f0c01          ADR      r0,|L1.812|
000228  eafffff5          B        |L1.516|
                  |L1.556|
00022c  e1a00000          MOV      r0,r0                 ;300
000230  e28f0c01          ADR      r0,|L1.824|
000234  eafffff2          B        |L1.516|
                  |L1.568|
000238  e1a00000          MOV      r0,r0                 ;302
00023c  e28f00fc          ADR      r0,|L1.832|
000240  eaffffef          B        |L1.516|
                  |L1.580|
000244  e1a00000          MOV      r0,r0                 ;304
000248  e28f00f8          ADR      r0,|L1.840|
00024c  eaffffec          B        |L1.516|
                  |L1.592|
000250  e1a00000          MOV      r0,r0                 ;306
000254  e28f00f4          ADR      r0,|L1.848|
000258  eaffffe9          B        |L1.516|
                  |L1.604|
00025c  e1a00000          MOV      r0,r0                 ;308
000260  e28f00f0          ADR      r0,|L1.856|
000264  eaffffe6          B        |L1.516|
                  |L1.616|
000268  e1a00000          MOV      r0,r0                 ;310
00026c  e28f00f4          ADR      r0,|L1.872|
000270  eaffffe3          B        |L1.516|
                  |L1.628|
000274  e1a00000          MOV      r0,r0                 ;312
000278  e28f00f8          ADR      r0,|L1.888|
00027c  eaffffe0          B        |L1.516|
                  |L1.640|
000280  e1a00000          MOV      r0,r0                 ;315
000284  e28f00fc          ADR      r0,|L1.904|
000288  eaffffdd          B        |L1.516|
                  |L1.652|
00028c  0d0a2025          DCB      "\r\n %s: len = %d start -->\r\n",0
000290  733a206c
000294  656e203d
000298  20256420
00029c  73746172
0002a0  74202d2d
0002a4  3e0d0a00
                  |L1.680|
0002a8  20203078          DCB      "  0x%02x, ",0
0002ac  25303278
0002b0  2c2000  
0002b3  00                DCB      0
                  |L1.692|
0002b4  3c2d2d20          DCB      "<-- %s end\r\n\r\n",0
0002b8  25732065
0002bc  6e640d0a
0002c0  0d0a00  
0002c3  00                DCB      0
                  |L1.708|
                          DCD      outMsgFlag
                  |L1.712|
0002c8  434d4420          DCB      "CMD START",0
0002cc  53544152
0002d0  5400    
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L1.724|
0002d4  434d4420          DCB      "CMD SENT",0
0002d8  53454e54
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L1.736|
0002e0  41434b20          DCB      "ACK SEND",0
0002e4  53454e44
0002e8  00      
0002e9  00                DCB      0
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L1.748|
0002ec  4e414b20          DCB      "NAK SEND",0
0002f0  53454e44
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L1.760|
0002f8  554e4b4e          DCB      "UNKNOWN DATA",0
0002fc  4f574e20
000300  44415441
000304  00      
000305  00                DCB      0
000306  00                DCB      0
000307  00                DCB      0
                  |L1.776|
000308  53545f53          DCB      "ST_SENDNAK",0
00030c  454e444e
000310  414b00  
000313  00                DCB      0
                  |L1.788|
000314  53545f50          DCB      "ST_PREAMBLE",0
000318  5245414d
00031c  424c4500
                  |L1.800|
000320  53545f53          DCB      "ST_START1",0
000324  54415254
000328  3100    
00032a  00                DCB      0
00032b  00                DCB      0
                  |L1.812|
00032c  53545f53          DCB      "ST_START2",0
000330  54415254
000334  3200    
000336  00                DCB      0
000337  00                DCB      0
                  |L1.824|
000338  53545f4c          DCB      "ST_LEN",0
00033c  454e00  
00033f  00                DCB      0
                  |L1.832|
000340  53545f4c          DCB      "ST_LCS",0
000344  435300  
000347  00                DCB      0
                  |L1.840|
000348  53545f44          DCB      "ST_DATA",0
00034c  41544100
                  |L1.848|
000350  53545f44          DCB      "ST_DCS",0
000354  435300  
000357  00                DCB      0
                  |L1.856|
000358  53545f50          DCB      "ST_POSTAMBLE",0
00035c  4f535441
000360  4d424c45
000364  00      
000365  00                DCB      0
000366  00                DCB      0
000367  00                DCB      0
                  |L1.872|
000368  53545f41          DCB      "ST_ACKPOSTAMBLE",0
00036c  434b504f
000370  5354414d
000374  424c4500
                  |L1.888|
000378  53545f4e          DCB      "ST_NAKPOSTAMBLE",0
00037c  414b504f
000380  5354414d
000384  424c4500
                  |L1.904|
000388  53545f4e          DCB      "ST_NAK",0
00038c  414b00  
00038f  00                DCB      0
                  |L1.912|
000390  e1a00000          MOV      r0,r0                 ;317
000394  e28f0e2e          ADR      r0,|L1.1660|
000398  eaffff99          B        |L1.516|
                  |L1.924|
00039c  e1a00000          MOV      r0,r0                 ;319
0003a0  e28f0e2e          ADR      r0,|L1.1672|
0003a4  eaffff96          B        |L1.516|
                  |L1.936|
0003a8  e1a00000          MOV      r0,r0                 ;321
0003ac  e28f0e2e          ADR      r0,|L1.1684|
0003b0  eaffff93          B        |L1.516|
                  |L1.948|
0003b4  e1a00000          MOV      r0,r0                 ;323
0003b8  e28f0e2e          ADR      r0,|L1.1696|
0003bc  eaffff90          B        |L1.516|
                  |L1.960|
0003c0  e1a00000          MOV      r0,r0                 ;325
0003c4  e28f0fb7          ADR      r0,|L1.1704|
0003c8  eaffff8d          B        |L1.516|
                  |L1.972|
0003cc  e1a00000          MOV      r0,r0                 ;327
0003d0  e28f0fb6          ADR      r0,|L1.1712|
0003d4  eaffff8a          B        |L1.516|
;;;332    //[00:0x00], [01:0x00], [02:0x00], [03:0x00], [04:0x00], [05:0x80], [06:0x07], [07:0xFB], [08:0x03], [09:0x01], [10:0x00], [11:0x07], [12:0x03],
                          ENDP

                  End2 PROC
;;;599    
;;;600    USHORT End2 (USHORT s)
0003d8  e1a01000          MOV      r1,r0
;;;601    {
;;;602        return ((s>>8)|(s<<8));
0003dc  e1a00441          ASR      r0,r1,#8
0003e0  e1800401          ORR      r0,r0,r1,LSL #8
0003e4  e1a00800          LSL      r0,r0,#16
0003e8  e1a00820          LSR      r0,r0,#16
;;;603    }
0003ec  e12fff1e          BX       lr
;;;604    
                          ENDP

                  GetINT2 PROC
;;;617    /***********************************************************/
;;;618    USHORT GetINT2 (BYTE *p)
0003f0  e1a01000          MOV      r1,r0
;;;619    {
;;;620        /* Returns a 2 byte Big-Endian number */
;;;621        return p[0]*256+p[1];
0003f4  e5d12001          LDRB     r2,[r1,#1]
0003f8  e5d10000          LDRB     r0,[r1,#0]
0003fc  e0820400          ADD      r0,r2,r0,LSL #8
000400  e3c00801          BIC      r0,r0,#0x10000
;;;622    }
000404  e12fff1e          BX       lr
;;;623    
                          ENDP

                  LongCS PROC
;;;638    // extend command message format
;;;639    USHORT LongCS (BYTE *addr, UINT count)
000408  e92d4070          PUSH     {r4-r6,lr}
;;;640    {
00040c  e1a05000          MOV      r5,r0
000410  e1a04001          MOV      r4,r1
;;;641        /* Compute Internet Checksum for "count" bytes
;;;642         *         beginning at location "addr".  */
;;;643        ULONG sum=0;
000414  e3a03000          MOV      r3,#0
;;;644    
;;;645        while(count>1)
000418  ea000006          B        |L1.1080|
                  |L1.1052|
;;;646        {
;;;647            /*  This is the inner loop */
;;;648            sum+=End2 (GetINT2 (addr));
00041c  e1a00005          MOV      r0,r5
000420  ebfffffe          BL       GetINT2
000424  e1a06000          MOV      r6,r0
000428  ebfffffe          BL       End2
00042c  e0833000          ADD      r3,r3,r0
;;;649            addr+=2;
000430  e2855002          ADD      r5,r5,#2
;;;650            count-=2;
000434  e2444002          SUB      r4,r4,#2
                  |L1.1080|
000438  e3540001          CMP      r4,#1                 ;645
00043c  8afffff6          BHI      |L1.1052|
;;;651        }
;;;652    
;;;653        /*  Add left-over byte, if any */
;;;654        if(count>0)
000440  e3540000          CMP      r4,#0
000444  0a000001          BEQ      |L1.1104|
;;;655            sum+=*(BYTE *)addr;
000448  e5d50000          LDRB     r0,[r5,#0]
00044c  e0833000          ADD      r3,r3,r0
                  |L1.1104|
;;;656    
;;;657        /*  Fold 32-bit sum to 16 bits */
;;;658        while(sum>>16)
000450  ea000002          B        |L1.1120|
                  |L1.1108|
;;;659            sum=(sum&0xffff)+(sum>>16);
000454  e1a00803          LSL      r0,r3,#16
000458  e1a00820          LSR      r0,r0,#16
00045c  e0803823          ADD      r3,r0,r3,LSR #16
                  |L1.1120|
000460  e1b00823          LSRS     r0,r3,#16             ;658
000464  1afffffa          BNE      |L1.1108|
;;;660    
;;;661        sum=End2 (sum);
000468  e1a00803          LSL      r0,r3,#16
00046c  e1a00820          LSR      r0,r0,#16
000470  ebfffffe          BL       End2
000474  e1a03000          MOV      r3,r0
;;;662        return (USHORT)~sum;
000478  e1e00003          MVN      r0,r3
00047c  e1a00800          LSL      r0,r0,#16
000480  e1a00820          LSR      r0,r0,#16
;;;663    }
000484  e8bd8070          POP      {r4-r6,pc}
;;;664    
                          ENDP

                  ReadBlock PROC
;;;361    */
;;;362    INT ReadBlock (BYTE *inbuff)
000488  e92d4ff0          PUSH     {r4-r11,lr}
;;;363    {
00048c  e24dd04c          SUB      sp,sp,#0x4c
000490  e1a08000          MOV      r8,r0
;;;364    #if(0)
;;;365        return 0;
;;;366    #else
;;;367        INT _maxMsgRetries=1;
000494  e3a00001          MOV      r0,#1
000498  e58d0048          STR      r0,[sp,#0x48]
;;;368        INT	retries;
;;;369        INT state, result, cs, i;
;;;370        INT len=0;
00049c  e3a04000          MOV      r4,#0
;;;371        BYTE extend=0;
0004a0  e3a0b000          MOV      r11,#0
;;;372        BYTE response;
;;;373        BYTE tempBuf[50];
;;;374        INT  tempoint = 0;
0004a4  e3a00000          MOV      r0,#0
0004a8  e58d0008          STR      r0,[sp,#8]
;;;375    //    BYTE responseTmp[128];
;;;376        //struct timeval st_AckTO = {0, 100000};
;;;377        //struct timeval st_DataTO={3, 500000};
;;;378        //struct timeval st_TimeOut;
;;;379        TickType_t st_AckTO = (100000/1000/portTICK_RATE_MS);//0.1sec (100ms)
0004ac  e3a0000a          MOV      r0,#0xa
0004b0  e58d0004          STR      r0,[sp,#4]
;;;380        //TickType_t st_AckTO = (3000000/1000/portTICK_RATE_MS);
;;;381        TickType_t st_DataTO = (3500000/1000/portTICK_RATE_MS);//3.5secs (3500ms)
0004b4  e2807f55          ADD      r7,r0,#0x154
;;;382        //TickType_t st_DataTO = (10000000/1000/portTICK_RATE_MS);
;;;383        TickType_t st_TimeOut;
;;;384    
;;;385        retries=_maxMsgRetries;
0004b8  e59d0048          LDR      r0,[sp,#0x48]
0004bc  e58d0044          STR      r0,[sp,#0x44]
;;;386        state=ST_PREAMBLE;
0004c0  e3a05001          MOV      r5,#1
;;;387        g_AckExpired=g_RespExpired=0;
0004c4  e3a00000          MOV      r0,#0
0004c8  e59f11e8          LDR      r1,|L1.1720|
0004cc  e5c10000          STRB     r0,[r1,#0]  ; g_RespExpired
0004d0  e59f11e4          LDR      r1,|L1.1724|
0004d4  e5c10000          STRB     r0,[r1,#0]  ; g_AckExpired
;;;388        memcpy (&st_TimeOut, &st_AckTO, sizeof (st_TimeOut));
0004d8  e59d0004          LDR      r0,[sp,#4]
0004dc  e58d0000          STR      r0,[sp,#0]
;;;389    
;;;390        while((state!=ST_NAK)&&(state!=ST_COMPLETE))
0004e0  ea000109          B        |L1.2316|
                  |L1.1252|
;;;391        {
;;;392            //terninalPrintf(" ReadBlock start   :  [state = %s]\n", getStateStr(state));
;;;393            if(state!=ST_SENDNAK)
0004e4  e3550000          CMP      r5,#0
0004e8  0a000023          BEQ      |L1.1404|
;;;394            {
;;;395                result=ReadData (&response, 1, &st_TimeOut);		//read 1 byte data
0004ec  e1a0200d          MOV      r2,sp
0004f0  e3a01001          MOV      r1,#1
0004f4  e28d0040          ADD      r0,sp,#0x40
0004f8  ebfffffe          BL       ReadData
0004fc  e1a09000          MOV      r9,r0
;;;396                //result=ReadData(responseTmp, sizeof(responseTmp), &st_TimeOut);		//read 1 byte data
;;;397    
;;;398                if(result==0)
000500  e3590000          CMP      r9,#0
000504  1a000010          BNE      |L1.1356|
;;;399                {
;;;400                    if(outMsgFlag)
000508  e51f024c          LDR      r0,|L1.708|
00050c  e5d00000          LDRB     r0,[r0,#0]  ; outMsgFlag
000510  e3500000          CMP      r0,#0
000514  0a000009          BEQ      |L1.1344|
;;;401                    {
;;;402                        if(OctopusReaderCheckHangUpEnable())
000518  ebfffffe          BL       OctopusReaderCheckHangUpEnable
00051c  e3500000          CMP      r0,#0
000520  0a000003          BEQ      |L1.1332|
;;;403                            OctopusReaderCheckHangUp(outMsgFlag);
000524  e51f0268          LDR      r0,|L1.708|
000528  e5d00000          LDRB     r0,[r0,#0]  ; outMsgFlag
00052c  ebfffffe          BL       OctopusReaderCheckHangUp
000530  ea000002          B        |L1.1344|
                  |L1.1332|
;;;404                        else
;;;405                            outMsgFlag = FALSE;
000534  e3a00000          MOV      r0,#0
000538  e51f127c          LDR      r1,|L1.708|
00053c  e5c10000          STRB     r0,[r1,#0]  ; outMsgFlag
                  |L1.1344|
;;;406                    }
;;;407                    //terninalPrintf("<= NoMsg\n");
;;;408                    return 0;
000540  e3a00000          MOV      r0,#0
                  |L1.1348|
000544  e28dd04c          ADD      sp,sp,#0x4c
;;;409                }
;;;410                else
;;;411                    outMsgFlag = FALSE;
;;;412                
;;;413                if(tempoint < 50)
;;;414                    tempBuf[tempoint++] =  response ;
;;;415            }
;;;416            //response = responseTmp[0];
;;;417            //terninalPrintf(" ReadBlock after I  :  [state = %s, data = 0x%02x]\n", getStateStr(state), response);
;;;418            switch(state)
;;;419            {
;;;420                case ST_SENDNAK:
;;;421                    if((retries-1)<0)
;;;422                        return 0;
;;;423                    retries--;
;;;424                    state=ST_PREAMBLE;
;;;425                    sendNAK();
;;;426                    break;
;;;427    
;;;428                case ST_PREAMBLE:
;;;429                    if(response==0)		//ACK or NAK first preamble
;;;430                        state=ST_START1;
;;;431                    else
;;;432                        state=ST_SENDNAK;
;;;433                    break;
;;;434    
;;;435                case ST_START1:
;;;436                    if(response==0)		//ACK or NAK first byte of packet start indicator
;;;437                        state=ST_START2;
;;;438                    else
;;;439                        state=ST_SENDNAK;
;;;440                    break;
;;;441    
;;;442                case ST_START2:
;;;443                    if(response==0xff)	//ACK or NAK second byte of packet start indicator
;;;444                        state=ST_LEN;
;;;445                    else if(response==0xcc)	//extend msg second byte of packet start indicator
;;;446                        state=ST_LEN_EX1;
;;;447                    else if(response!=0)	//error happen
;;;448                        state=ST_SENDNAK;
;;;449                    break;
;;;450    
;;;451                case ST_LEN:
;;;452                    extend=0;
;;;453                    len=response;		//Len = 0 for ACk, Len = 0xFF for NAK
;;;454                    state=ST_LCS;
;;;455                    break;
;;;456    
;;;457                case ST_LEN_EX1:
;;;458                    extend=1;
;;;459                    len=(response<<8)&0xFF00;		//extend msg len consist of two bytes, first Len byte
;;;460                    state=ST_LEN_EX2;
;;;461                    break;
;;;462    
;;;463                case ST_LEN_EX2:
;;;464                    len|=response&0xFF;		//extend msg len consist of two bytes, second Len byte
;;;465                    state=ST_LCS;
;;;466                    break;
;;;467    
;;;468                case ST_LCS:
;;;469                    if((len==0)&&(response==0xff)) /* ACK */
;;;470                        state=ST_ACKPOSTAMBLE;		//wait for postamble of the ACK
;;;471                    else if((len==0xff)&&(response==0)) /* NAK */
;;;472                        state=ST_NAKPOSTAMBLE;		//wait for postamble of the NAK
;;;473                    else if((len==0)&&(response==0))
;;;474                        state=ST_START2;
;;;475                    else if((extend==0)&&((len+response)&0xff)==0)
;;;476                    { /* data */
;;;477                        cs=0;
;;;478                        GetTime (DATA_START);
;;;479                        memcpy (&st_TimeOut, &st_DataTO, sizeof (st_TimeOut));
;;;480                        state=ST_DATA;
;;;481                    }
;;;482                    else if((extend==1)&&((((len>>8)&0xFF)+(len&0xFF)+response)&0xFF)==0)
;;;483                    {
;;;484                        cs=0;
;;;485                        GetTime (DATA_START);
;;;486                        memcpy (&st_TimeOut, &st_DataTO, sizeof (st_TimeOut));
;;;487                        state=ST_DATA;
;;;488                    }
;;;489                    else
;;;490                        state=ST_SENDNAK;
;;;491                    break;
;;;492    
;;;493                case ST_ACKPOSTAMBLE:
;;;494                    if(response==0)
;;;495                    {
;;;496                        GetTime (ACK_RECV);
;;;497                        memcpy (&st_TimeOut, &st_DataTO, sizeof (st_TimeOut));
;;;498                        state=ST_PREAMBLE; /* wait for data again */
;;;499                    }
;;;500                    else
;;;501                        state=ST_SENDNAK;
;;;502                    break;
;;;503    
;;;504                case ST_NAKPOSTAMBLE:
;;;505                    if(response==0)
;;;506                    {
;;;507                        GetTime ("NAK RECV");
;;;508                        state=ST_NAK;
;;;509                    }
;;;510                    else
;;;511                        state=ST_SENDNAK;
;;;512                    break;
;;;513    
;;;514                case ST_DATA:
;;;515                    memcpy (&st_TimeOut, &st_DataTO, sizeof (st_TimeOut));
;;;516                    inbuff[cs++]=response;
;;;517                    if(cs>=len)
;;;518                    {
;;;519                        if(extend==0)
;;;520                            state=ST_DCS;
;;;521                        else
;;;522                            state=ST_DCS1;
;;;523                    }
;;;524                    break;
;;;525    
;;;526                case ST_DCS:
;;;527                    for(i=cs=0; i<len; i++)
;;;528                        cs+=inbuff[i];
;;;529                    if(((cs+response)&0xff)!=0)
;;;530                        state=ST_SENDNAK;
;;;531                    else
;;;532                        state=ST_POSTAMBLE;
;;;533                    break;
;;;534    
;;;535                case ST_DCS1:
;;;536                    cs=response&0xFF;
;;;537                    state=ST_DCS2;
;;;538                    break;
;;;539    
;;;540                case ST_DCS2:
;;;541                    cs|=(response<<8)&0xFF00;
;;;542                    if(LongCS (inbuff, len)!=End2 (cs))
;;;543                        state=ST_SENDNAK;
;;;544                    else
;;;545                        state=ST_POSTAMBLE;
;;;546                    break;
;;;547    
;;;548                case ST_POSTAMBLE:
;;;549                    state=ST_COMPLETE;
;;;550                    GetTime ("DATA END");
;;;551                    break;
;;;552            }
;;;553            //terninalPrintf(" ReadBlock after II :  [state = %s, data = 0x%02x]\n\r\n", getStateStr(state), response);
;;;554        }
;;;555        /*
;;;556        terninalPrintf("<= ");
;;;557        for(int j=0 ; j<tempoint ; j++)
;;;558            terninalPrintf("%02x ", tempBuf[j]);
;;;559        terninalPrintf("\n");
;;;560        */
;;;561        vTaskDelay(10/portTICK_RATE_MS);
;;;562        if(tempoint > 0)
;;;563            outMsgFlag = FALSE;
;;;564        
;;;565        
;;;566        if(state==ST_NAK)
;;;567            return 0;
;;;568    
;;;569        return (len);
;;;570    #endif
;;;571    }
000548  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1356|
00054c  e3a00000          MOV      r0,#0                 ;411
000550  e51f1294          LDR      r1,|L1.708|
000554  e5c10000          STRB     r0,[r1,#0]            ;411  ; outMsgFlag
000558  e59d0008          LDR      r0,[sp,#8]            ;413
00055c  e3500032          CMP      r0,#0x32              ;413
000560  aa000005          BGE      |L1.1404|
000564  e5dd1040          LDRB     r1,[sp,#0x40]         ;414
000568  e59d0008          LDR      r0,[sp,#8]            ;414
00056c  e2802001          ADD      r2,r0,#1              ;414
000570  e58d2008          STR      r2,[sp,#8]            ;414
000574  e28d200c          ADD      r2,sp,#0xc            ;414
000578  e7c21000          STRB     r1,[r2,r0]            ;414
                  |L1.1404|
00057c  e3550011          CMP      r5,#0x11              ;418
000580  308ff105          ADDCC    pc,pc,r5,LSL #2       ;418
000584  ea0000df          B        |L1.2312|
000588  ea00000f          B        |L1.1484|
00058c  ea00001a          B        |L1.1532|
000590  ea000021          B        |L1.1564|
000594  ea000028          B        |L1.1596|
000598  ea000048          B        |L1.1728|
00059c  ea000058          B        |L1.1796|
0005a0  ea00009d          B        |L1.2076|
0005a4  ea0000aa          B        |L1.2132|
0005a8  ea0000d1          B        |L1.2292|
0005ac  ea000085          B        |L1.1992|
0005b0  ea00008f          B        |L1.2036|
0005b4  ea0000d3          B        |L1.2312|
0005b8  ea0000d2          B        |L1.2312|
0005bc  ea000044          B        |L1.1748|
0005c0  ea00004a          B        |L1.1776|
0005c4  ea0000b4          B        |L1.2204|
0005c8  ea0000b7          B        |L1.2220|
                  |L1.1484|
0005cc  e1a00000          MOV      r0,r0                 ;420
0005d0  e59d0044          LDR      r0,[sp,#0x44]         ;421
0005d4  e2500001          SUBS     r0,r0,#1              ;421
0005d8  5a000001          BPL      |L1.1508|
0005dc  e3a00000          MOV      r0,#0                 ;422
0005e0  eaffffd7          B        |L1.1348|
                  |L1.1508|
0005e4  e59d0044          LDR      r0,[sp,#0x44]         ;423
0005e8  e2400001          SUB      r0,r0,#1              ;423
0005ec  e58d0044          STR      r0,[sp,#0x44]         ;423
0005f0  e3a05001          MOV      r5,#1                 ;424
0005f4  ebfffffe          BL       sendNAK
0005f8  ea0000c2          B        |L1.2312|
                  |L1.1532|
0005fc  e1a00000          MOV      r0,r0                 ;428
000600  e5dd0040          LDRB     r0,[sp,#0x40]         ;429
000604  e3500000          CMP      r0,#0                 ;429
000608  1a000001          BNE      |L1.1556|
00060c  e3a05002          MOV      r5,#2                 ;430
000610  ea000000          B        |L1.1560|
                  |L1.1556|
000614  e3a05000          MOV      r5,#0                 ;432
                  |L1.1560|
000618  ea0000ba          B        |L1.2312|
                  |L1.1564|
00061c  e1a00000          MOV      r0,r0                 ;435
000620  e5dd0040          LDRB     r0,[sp,#0x40]         ;436
000624  e3500000          CMP      r0,#0                 ;436
000628  1a000001          BNE      |L1.1588|
00062c  e3a05003          MOV      r5,#3                 ;437
000630  ea000000          B        |L1.1592|
                  |L1.1588|
000634  e3a05000          MOV      r5,#0                 ;439
                  |L1.1592|
000638  ea0000b2          B        |L1.2312|
                  |L1.1596|
00063c  e1a00000          MOV      r0,r0                 ;442
000640  e5dd0040          LDRB     r0,[sp,#0x40]         ;443
000644  e35000ff          CMP      r0,#0xff              ;443
000648  1a000001          BNE      |L1.1620|
00064c  e3a05004          MOV      r5,#4                 ;444
000650  ea000008          B        |L1.1656|
                  |L1.1620|
000654  e5dd0040          LDRB     r0,[sp,#0x40]         ;445
000658  e35000cc          CMP      r0,#0xcc              ;445
00065c  1a000001          BNE      |L1.1640|
000660  e3a0500d          MOV      r5,#0xd               ;446
000664  ea000003          B        |L1.1656|
                  |L1.1640|
000668  e5dd0040          LDRB     r0,[sp,#0x40]         ;447
00066c  e3500000          CMP      r0,#0                 ;447
000670  0a000000          BEQ      |L1.1656|
000674  e3a05000          MOV      r5,#0                 ;448
                  |L1.1656|
000678  ea0000a2          B        |L1.2312|
                  |L1.1660|
00067c  53545f43          DCB      "ST_COMPLETE",0
000680  4f4d504c
000684  45544500
                  |L1.1672|
000688  53545f4c          DCB      "ST_LEN_EX1",0
00068c  454e5f45
000690  583100  
000693  00                DCB      0
                  |L1.1684|
000694  53545f4c          DCB      "ST_LEN_EX2",0
000698  454e5f45
00069c  583200  
00069f  00                DCB      0
                  |L1.1696|
0006a0  53545f44          DCB      "ST_DCS1",0
0006a4  43533100
                  |L1.1704|
0006a8  53545f44          DCB      "ST_DCS2",0
0006ac  43533200
                  |L1.1712|
0006b0  4f544845          DCB      "OTHER",0
0006b4  5200    
0006b6  00                DCB      0
0006b7  00                DCB      0
                  |L1.1720|
                          DCD      g_RespExpired
                  |L1.1724|
                          DCD      g_AckExpired
                  |L1.1728|
0006c0  e1a00000          MOV      r0,r0                 ;451
0006c4  e3a0b000          MOV      r11,#0                ;452
0006c8  e5dd4040          LDRB     r4,[sp,#0x40]         ;453
0006cc  e3a05005          MOV      r5,#5                 ;454
0006d0  ea00008c          B        |L1.2312|
                  |L1.1748|
0006d4  e1a00000          MOV      r0,r0                 ;457
0006d8  e3a0b001          MOV      r11,#1                ;458
0006dc  e5dd0040          LDRB     r0,[sp,#0x40]         ;459
0006e0  e3a01cff          MOV      r1,#0xff00            ;459
0006e4  e0014400          AND      r4,r1,r0,LSL #8       ;459
0006e8  e3a0500e          MOV      r5,#0xe               ;460
0006ec  ea000085          B        |L1.2312|
                  |L1.1776|
0006f0  e1a00000          MOV      r0,r0                 ;463
0006f4  e5dd0040          LDRB     r0,[sp,#0x40]         ;464
0006f8  e1844000          ORR      r4,r4,r0              ;464
0006fc  e3a05005          MOV      r5,#5                 ;465
000700  ea000080          B        |L1.2312|
                  |L1.1796|
000704  e1a00000          MOV      r0,r0                 ;468
000708  e3540000          CMP      r4,#0                 ;469
00070c  1a000004          BNE      |L1.1828|
000710  e5dd0040          LDRB     r0,[sp,#0x40]         ;469
000714  e35000ff          CMP      r0,#0xff              ;469
000718  1a000001          BNE      |L1.1828|
00071c  e3a05009          MOV      r5,#9                 ;470
000720  ea000027          B        |L1.1988|
                  |L1.1828|
000724  e35400ff          CMP      r4,#0xff              ;471
000728  1a000004          BNE      |L1.1856|
00072c  e5dd0040          LDRB     r0,[sp,#0x40]         ;471
000730  e3500000          CMP      r0,#0                 ;471
000734  1a000001          BNE      |L1.1856|
000738  e3a0500a          MOV      r5,#0xa               ;472
00073c  ea000020          B        |L1.1988|
                  |L1.1856|
000740  e3540000          CMP      r4,#0                 ;473
000744  1a000004          BNE      |L1.1884|
000748  e5dd0040          LDRB     r0,[sp,#0x40]         ;473
00074c  e3500000          CMP      r0,#0                 ;473
000750  1a000001          BNE      |L1.1884|
000754  e3a05003          MOV      r5,#3                 ;474
000758  ea000019          B        |L1.1988|
                  |L1.1884|
00075c  e35b0000          CMP      r11,#0                ;475
000760  1a000009          BNE      |L1.1932|
000764  e5dd0040          LDRB     r0,[sp,#0x40]         ;475
000768  e0800004          ADD      r0,r0,r4              ;475
00076c  e31000ff          TST      r0,#0xff              ;475
000770  1a000005          BNE      |L1.1932|
000774  e3a06000          MOV      r6,#0                 ;477
000778  e28f0f75          ADR      r0,|L1.2388|
00077c  ebfffffe          BL       GetTime
000780  e58d7000          STR      r7,[sp,#0]            ;479
000784  e3a05006          MOV      r5,#6                 ;480
000788  ea00000d          B        |L1.1988|
                  |L1.1932|
00078c  e35b0001          CMP      r11,#1                ;482
000790  1a00000a          BNE      |L1.1984|
000794  e0840444          ADD      r0,r4,r4,ASR #8       ;482
000798  e5dd1040          LDRB     r1,[sp,#0x40]         ;482
00079c  e0800001          ADD      r0,r0,r1              ;482
0007a0  e31000ff          TST      r0,#0xff              ;482
0007a4  1a000005          BNE      |L1.1984|
0007a8  e3a06000          MOV      r6,#0                 ;484
0007ac  e28f0e1a          ADR      r0,|L1.2388|
0007b0  ebfffffe          BL       GetTime
0007b4  e58d7000          STR      r7,[sp,#0]            ;486
0007b8  e3a05006          MOV      r5,#6                 ;487
0007bc  ea000000          B        |L1.1988|
                  |L1.1984|
0007c0  e3a05000          MOV      r5,#0                 ;490
                  |L1.1988|
0007c4  ea00004f          B        |L1.2312|
                  |L1.1992|
0007c8  e1a00000          MOV      r0,r0                 ;493
0007cc  e5dd0040          LDRB     r0,[sp,#0x40]         ;494
0007d0  e3500000          CMP      r0,#0                 ;494
0007d4  1a000004          BNE      |L1.2028|
0007d8  e28f0d06          ADR      r0,|L1.2400|
0007dc  ebfffffe          BL       GetTime
0007e0  e58d7000          STR      r7,[sp,#0]            ;497
0007e4  e3a05001          MOV      r5,#1                 ;498
0007e8  ea000000          B        |L1.2032|
                  |L1.2028|
0007ec  e3a05000          MOV      r5,#0                 ;501
                  |L1.2032|
0007f0  ea000044          B        |L1.2312|
                  |L1.2036|
0007f4  e1a00000          MOV      r0,r0                 ;504
0007f8  e5dd0040          LDRB     r0,[sp,#0x40]         ;505
0007fc  e3500000          CMP      r0,#0                 ;505
000800  1a000003          BNE      |L1.2068|
000804  e28f0e16          ADR      r0,|L1.2412|
000808  ebfffffe          BL       GetTime
00080c  e3a0500b          MOV      r5,#0xb               ;508
000810  ea000000          B        |L1.2072|
                  |L1.2068|
000814  e3a05000          MOV      r5,#0                 ;511
                  |L1.2072|
000818  ea00003a          B        |L1.2312|
                  |L1.2076|
00081c  e1a00000          MOV      r0,r0                 ;514
000820  e58d7000          STR      r7,[sp,#0]            ;515
000824  e5dd1040          LDRB     r1,[sp,#0x40]         ;516
000828  e1a00006          MOV      r0,r6                 ;516
00082c  e2866001          ADD      r6,r6,#1              ;516
000830  e7c81000          STRB     r1,[r8,r0]            ;516
000834  e1560004          CMP      r6,r4                 ;517
000838  ba000004          BLT      |L1.2128|
00083c  e35b0000          CMP      r11,#0                ;519
000840  1a000001          BNE      |L1.2124|
000844  e3a05007          MOV      r5,#7                 ;520
000848  ea000000          B        |L1.2128|
                  |L1.2124|
00084c  e3a0500f          MOV      r5,#0xf               ;522
                  |L1.2128|
000850  ea00002c          B        |L1.2312|
                  |L1.2132|
000854  e1a00000          MOV      r0,r0                 ;526
000858  e3a00000          MOV      r0,#0                 ;527
00085c  e1a06000          MOV      r6,r0                 ;527
000860  e1a0a000          MOV      r10,r0                ;527
000864  ea000002          B        |L1.2164|
                  |L1.2152|
000868  e7d8000a          LDRB     r0,[r8,r10]           ;528
00086c  e0866000          ADD      r6,r6,r0              ;528
000870  e28aa001          ADD      r10,r10,#1            ;527
                  |L1.2164|
000874  e15a0004          CMP      r10,r4                ;527
000878  bafffffa          BLT      |L1.2152|
00087c  e5dd0040          LDRB     r0,[sp,#0x40]         ;529
000880  e0800006          ADD      r0,r0,r6              ;529
000884  e31000ff          TST      r0,#0xff              ;529
000888  0a000001          BEQ      |L1.2196|
00088c  e3a05000          MOV      r5,#0                 ;530
000890  ea000000          B        |L1.2200|
                  |L1.2196|
000894  e3a05008          MOV      r5,#8                 ;532
                  |L1.2200|
000898  ea00001a          B        |L1.2312|
                  |L1.2204|
00089c  e1a00000          MOV      r0,r0                 ;535
0008a0  e5dd6040          LDRB     r6,[sp,#0x40]         ;536
0008a4  e3a05010          MOV      r5,#0x10              ;537
0008a8  ea000016          B        |L1.2312|
                  |L1.2220|
0008ac  e1a00000          MOV      r0,r0                 ;540
0008b0  e5dd0040          LDRB     r0,[sp,#0x40]         ;541
0008b4  e3a01cff          MOV      r1,#0xff00            ;541
0008b8  e0010400          AND      r0,r1,r0,LSL #8       ;541
0008bc  e1866000          ORR      r6,r6,r0              ;541
0008c0  e1a01004          MOV      r1,r4                 ;542
0008c4  e1a00008          MOV      r0,r8                 ;542
0008c8  ebfffffe          BL       LongCS
0008cc  e1a02000          MOV      r2,r0                 ;542
0008d0  e1a00806          LSL      r0,r6,#16             ;542
0008d4  e1a00820          LSR      r0,r0,#16             ;542
0008d8  ebfffffe          BL       End2
0008dc  e1520000          CMP      r2,r0                 ;542
0008e0  0a000001          BEQ      |L1.2284|
0008e4  e3a05000          MOV      r5,#0                 ;543
0008e8  ea000000          B        |L1.2288|
                  |L1.2284|
0008ec  e3a05008          MOV      r5,#8                 ;545
                  |L1.2288|
0008f0  ea000004          B        |L1.2312|
                  |L1.2292|
0008f4  e1a00000          MOV      r0,r0                 ;548
0008f8  e3a0500c          MOV      r5,#0xc               ;549
0008fc  e28f0074          ADR      r0,|L1.2424|
000900  ebfffffe          BL       GetTime
000904  e1a00000          MOV      r0,r0                 ;551
                  |L1.2312|
000908  e1a00000          MOV      r0,r0                 ;426
                  |L1.2316|
00090c  e355000b          CMP      r5,#0xb               ;390
000910  0a000001          BEQ      |L1.2332|
000914  e355000c          CMP      r5,#0xc               ;390
000918  1afffef1          BNE      |L1.1252|
                  |L1.2332|
00091c  e3a00001          MOV      r0,#1                 ;561
000920  ebfffffe          BL       vTaskDelay
000924  e59d0008          LDR      r0,[sp,#8]            ;562
000928  e3500000          CMP      r0,#0                 ;562
00092c  da000002          BLE      |L1.2364|
000930  e3a00000          MOV      r0,#0                 ;563
000934  e51f1678          LDR      r1,|L1.708|
000938  e5c10000          STRB     r0,[r1,#0]            ;563  ; outMsgFlag
                  |L1.2364|
00093c  e355000b          CMP      r5,#0xb               ;566
000940  1a000001          BNE      |L1.2380|
000944  e3a00000          MOV      r0,#0                 ;567
000948  eafffefd          B        |L1.1348|
                  |L1.2380|
00094c  e1a00004          MOV      r0,r4                 ;569
000950  eafffefb          B        |L1.1348|
                  |L1.2388|
000954  44415441          DCB      "DATA START",0
000958  20535441
00095c  525400  
00095f  00                DCB      0
                  |L1.2400|
000960  41434b20          DCB      "ACK RECV",0
000964  52454356
000968  00      
000969  00                DCB      0
00096a  00                DCB      0
00096b  00                DCB      0
                  |L1.2412|
00096c  4e414b20          DCB      "NAK RECV",0
000970  52454356
000974  00      
000975  00                DCB      0
000976  00                DCB      0
000977  00                DCB      0
                  |L1.2424|
000978  44415441          DCB      "DATA END",0
00097c  20454e44
000980  00      
000981  00                DCB      0
000982  00                DCB      0
000983  00                DCB      0
                          ENDP

                  InitComm PROC
;;;572    
;;;573    INT InitComm (BYTE sPort, INT sBaud)
000984  e92d4070          PUSH     {r4-r6,lr}
;;;574    {
000988  e1a04000          MOV      r4,r0
00098c  e1a05001          MOV      r5,r1
;;;575    #if(1)
;;;576        sprintf(theRWL.OTPFILEDIR, "0:");
000990  e28f1e19          ADR      r1,|L1.2856|
000994  e59f0190          LDR      r0,|L1.2860|
000998  ebfffffe          BL       __2sprintf
;;;577        return 0;
00099c  e3a00000          MOV      r0,#0
;;;578    #else
;;;579        CHAR tmp[FILELEN*2];
;;;580    
;;;581        theRWL.CommPort=sPort;
;;;582        theRWL.CommBaud=sBaud;
;;;583        GetPrivateProfileStringX ("COMM", "PORTTYPE", "S", theRWL.CommPortType, FILELEN, ININAME);
;;;584        if(InitCommunication ()>=0)
;;;585        {
;;;586            //Maintenance file path
;;;587            GetPrivateProfileStringX ("METAFILE", "FILEDIR", "/SAMPLE/DOWNLOAD", theRWL.OTPFILEDIR, FILELEN, ININAME);
;;;588            GetPrivateProfileStringX ("EXCHANGE", "FILEDIR", "/SAMPLE/UPLOAD", theRWL.UPLOADDIR, FILELEN, ININAME);
;;;589    
;;;590            //Keyname under COMM
;;;591            GetPrivateProfileStringX ("COMM", "TIME1", "1", tmp, sizeof (tmp), ININAME);
;;;592            theRWL.Time1=atoi (tmp);	//number of read retry
;;;593    
;;;594            return ERR_NOERR;
;;;595        }
;;;596        return ERR_FILE_COM;
;;;597    #endif
;;;598    }
0009a0  e8bd8070          POP      {r4-r6,pc}
;;;599    
                          ENDP

                  End4 PROC
;;;604    
;;;605    UINT End4 (UINT i)
0009a4  e1a01000          MOV      r1,r0
;;;606    {
;;;607        return (i<<24)|((i<<8)&0x00FF0000)|((i>>8)&0x0000FF00)|(i>>24);
0009a8  e3a008ff          MOV      r0,#0xff0000
0009ac  e0000401          AND      r0,r0,r1,LSL #8
0009b0  e1800c01          ORR      r0,r0,r1,LSL #24
0009b4  e3a02cff          MOV      r2,#0xff00
0009b8  e0022421          AND      r2,r2,r1,LSR #8
0009bc  e1800002          ORR      r0,r0,r2
0009c0  e1800c21          ORR      r0,r0,r1,LSR #24
;;;608    }
0009c4  e12fff1e          BX       lr
;;;609    
                          ENDP

                  GetINT4 PROC
;;;631    /***********************************************************/
;;;632    UINT GetINT4 (BYTE *p)
0009c8  e1a01000          MOV      r1,r0
;;;633    {
;;;634        /* Returns a 4 bytes Big-Endian number */
;;;635        return (((p[0]*256)+p[1])*256+p[2])*256+p[3];
0009cc  e5d12001          LDRB     r2,[r1,#1]
0009d0  e5d10000          LDRB     r0,[r1,#0]
0009d4  e0820400          ADD      r0,r2,r0,LSL #8
0009d8  e5d12002          LDRB     r2,[r1,#2]
0009dc  e0820400          ADD      r0,r2,r0,LSL #8
0009e0  e5d12003          LDRB     r2,[r1,#3]
0009e4  e0820400          ADD      r0,r2,r0,LSL #8
;;;636    }
0009e8  e12fff1e          BX       lr
;;;637    
                          ENDP

                  DbgDump PROC
;;;752    */
;;;753    void DbgDump (BYTE *bBuf, INT iLen)
0009ec  e92d41f0          PUSH     {r4-r8,lr}
;;;754    {
0009f0  e1a06000          MOV      r6,r0
0009f4  e1a04001          MOV      r4,r1
;;;755        INT i;
;;;756        BYTE u8_LineFeed=20;
0009f8  e3a07014          MOV      r7,#0x14
;;;757    
;;;758        sysprintf (" DBG (%d) ", iLen);
0009fc  e1a01004          MOV      r1,r4
000a00  e28f0f4a          ADR      r0,|L1.2864|
000a04  ebfffffe          BL       sysprintf
;;;759    
;;;760        //fflush(stdout);
;;;761    
;;;762        if(iLen<1)
000a08  e3540001          CMP      r4,#1
000a0c  aa000000          BGE      |L1.2580|
                  |L1.2576|
;;;763            return;
;;;764    
;;;765        if(iLen>50)
;;;766            u8_LineFeed=30;
;;;767    
;;;768        if(iLen>100)
;;;769            u8_LineFeed=50;
;;;770    
;;;771        for(i=0; i<iLen; i++)
;;;772        {
;;;773            if(i%u8_LineFeed==0)
;;;774                sysprintf ("\n");
;;;775            sysprintf ("%02X ", bBuf[i]);
;;;776        }
;;;777        sysprintf ("\n");
;;;778    }
000a10  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2580|
000a14  e3540032          CMP      r4,#0x32              ;765
000a18  da000000          BLE      |L1.2592|
000a1c  e3a0701e          MOV      r7,#0x1e              ;766
                  |L1.2592|
000a20  e3540064          CMP      r4,#0x64              ;768
000a24  da000000          BLE      |L1.2604|
000a28  e3a07032          MOV      r7,#0x32              ;769
                  |L1.2604|
000a2c  e3a05000          MOV      r5,#0                 ;771
000a30  ea00000a          B        |L1.2656|
                  |L1.2612|
000a34  e1a01007          MOV      r1,r7                 ;773
000a38  e1a00005          MOV      r0,r5                 ;773
000a3c  ebfffffe          BL       __aeabi_idivmod
000a40  e3510000          CMP      r1,#0                 ;773
000a44  1a000001          BNE      |L1.2640|
000a48  e28f00ec          ADR      r0,|L1.2876|
000a4c  ebfffffe          BL       sysprintf
                  |L1.2640|
000a50  e7d61005          LDRB     r1,[r6,r5]            ;775
000a54  e28f00e4          ADR      r0,|L1.2880|
000a58  ebfffffe          BL       sysprintf
000a5c  e2855001          ADD      r5,r5,#1              ;771
                  |L1.2656|
000a60  e1550004          CMP      r5,r4                 ;771
000a64  bafffff2          BLT      |L1.2612|
000a68  e28f00cc          ADR      r0,|L1.2876|
000a6c  ebfffffe          BL       sysprintf
000a70  e1a00000          MOV      r0,r0
000a74  eaffffe5          B        |L1.2576|
;;;779    
                          ENDP

                  DbgCmdDump PROC
;;;780    void DbgCmdDump (BYTE *bBuf, INT iLen)
000a78  e92d4010          PUSH     {r4,lr}
;;;781    {
000a7c  e1a0c000          MOV      r12,r0
;;;782        UINT i;
;;;783        BYTE u8_LineFeed=20;
000a80  e3a03014          MOV      r3,#0x14
;;;784        UINT u32_CmdHdr;
;;;785        UINT u32_DumpLen;
;;;786    
;;;787        if(iLen>255)
000a84  e35100ff          CMP      r1,#0xff
000a88  da000001          BLE      |L1.2708|
;;;788            u32_CmdHdr=6;
000a8c  e3a00006          MOV      r0,#6
000a90  ea000000          B        |L1.2712|
                  |L1.2708|
;;;789        else
;;;790            u32_CmdHdr=5;
000a94  e3a00005          MOV      r0,#5
                  |L1.2712|
;;;791    
;;;792        iLen-=u32_CmdHdr;
000a98  e0411000          SUB      r1,r1,r0
;;;793    
;;;794        //limit the data dump length
;;;795        if(iLen>200)
000a9c  e35100c8          CMP      r1,#0xc8
000aa0  da000001          BLE      |L1.2732|
;;;796            u32_DumpLen=200;
000aa4  e3a020c8          MOV      r2,#0xc8
000aa8  ea000000          B        |L1.2736|
                  |L1.2732|
;;;797        else
;;;798            u32_DumpLen=iLen;
000aac  e1a02001          MOV      r2,r1
                  |L1.2736|
;;;799    
;;;800        //by sam
;;;801        //printf ("\nCMD Header(%d) >>> ", u32_CmdHdr);
;;;802        
;;;803     /*   
;;;804        for(i=0; i<u32_CmdHdr; i++)
;;;805        {
;;;806            if(i%u8_LineFeed==0)
;;;807                printf ("\n");
;;;808            printf ("%02X ", bBuf[i]);
;;;809        }
;;;810        //by sam
;;;811        
;;;812        printf ("\nCMD (%d) >>> ", iLen);
;;;813    */
;;;814        //fflush(stdout);
;;;815    
;;;816        if(iLen<1)
000ab0  e3510001          CMP      r1,#1
000ab4  aa000000          BGE      |L1.2748|
                  |L1.2744|
;;;817            return;
;;;818    
;;;819        if(iLen>50)
;;;820            u8_LineFeed=30;
;;;821    
;;;822        if(iLen>100)
;;;823            u8_LineFeed=50;
;;;824    /*
;;;825        for(i=0; i<u32_DumpLen; i++)
;;;826        {
;;;827            if(i%u8_LineFeed==0)
;;;828                printf ("\n");
;;;829            printf ("%02X ", bBuf[i+u32_CmdHdr]);
;;;830        }
;;;831        printf ("\n");
;;;832        
;;;833        */
;;;834    }
000ab8  e8bd8010          POP      {r4,pc}
                  |L1.2748|
000abc  e3510032          CMP      r1,#0x32              ;819
000ac0  da000000          BLE      |L1.2760|
000ac4  e3a0301e          MOV      r3,#0x1e              ;820
                  |L1.2760|
000ac8  e3510064          CMP      r1,#0x64              ;822
000acc  da000000          BLE      |L1.2772|
000ad0  e3a03032          MOV      r3,#0x32              ;823
                  |L1.2772|
000ad4  e1a00000          MOV      r0,r0
000ad8  eafffff6          B        |L1.2744|
;;;835    
                          ENDP

                  DbgRspDump PROC
;;;836    void DbgRspDump (BYTE *bBuf, INT iLen)
000adc  e1a03000          MOV      r3,r0
;;;837    {
;;;838        UINT i;
;;;839        BYTE u8_LineFeed=20;
000ae0  e3a00014          MOV      r0,#0x14
;;;840        UINT u32_DumpLen=0;
000ae4  e3a02000          MOV      r2,#0
;;;841    
;;;842        //limit the data dump length
;;;843        if(iLen>400)
000ae8  e3510e19          CMP      r1,#0x190
000aec  da000001          BLE      |L1.2808|
;;;844            u32_DumpLen=400;
000af0  e3a02e19          MOV      r2,#0x190
000af4  ea000000          B        |L1.2812|
                  |L1.2808|
;;;845        else
;;;846            u32_DumpLen=iLen;
000af8  e1a02001          MOV      r2,r1
                  |L1.2812|
;;;847    
;;;848       // printf ("\nRSP (%d) <<< ", iLen);
;;;849    
;;;850        //fflush(stdout);
;;;851    
;;;852        if(iLen<1)
000afc  e3510001          CMP      r1,#1
000b00  aa000000          BGE      |L1.2824|
                  |L1.2820|
;;;853            return;
;;;854    
;;;855        if(iLen>50)
;;;856            u8_LineFeed=30;
;;;857    
;;;858        if(iLen>100)
;;;859            u8_LineFeed=50;
;;;860    /*
;;;861        for(i=0; i<u32_DumpLen; i++)
;;;862        {
;;;863            if(i%u8_LineFeed==0)
;;;864                printf ("\n");
;;;865            printf ("%02X ", bBuf[i]);
;;;866        }
;;;867        printf ("\n");
;;;868        */
;;;869    }
000b04  e12fff1e          BX       lr
                  |L1.2824|
000b08  e3510032          CMP      r1,#0x32              ;855
000b0c  da000000          BLE      |L1.2836|
000b10  e3a0001e          MOV      r0,#0x1e              ;856
                  |L1.2836|
000b14  e3510064          CMP      r1,#0x64              ;858
000b18  da000000          BLE      |L1.2848|
000b1c  e3a00032          MOV      r0,#0x32              ;859
                  |L1.2848|
000b20  e1a00000          MOV      r0,r0
000b24  eafffff6          B        |L1.2820|
                          ENDP

                  |L1.2856|
000b28  303a00            DCB      "0:",0
000b2b  00                DCB      0
                  |L1.2860|
                          DCD      theRWL
                  |L1.2864|
000b30  20444247          DCB      " DBG (%d) ",0
000b34  20282564
000b38  292000  
000b3b  00                DCB      0
                  |L1.2876|
000b3c  0a00              DCB      "\n",0
000b3e  00                DCB      0
000b3f  00                DCB      0
                  |L1.2880|
000b40  25303258          DCB      "%02X ",0
000b44  2000    
000b46  00                DCB      0
000b47  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_inbuff
                          %        5000
                  theRWL
                          %        429

                          AREA ||.data||, DATA, ALIGN=2

                  outMsgFlag
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_len
                          DCD      0x00000000
