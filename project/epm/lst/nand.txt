; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\nand.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\nand.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\nand.crf ..\..\common\src\BSP\ThirdParty\yaffs2\nand.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  nand_register PROC
;;;47     /* Register an initialized NAND mtd device with the U-Boot NAND command. */
;;;48     int nand_register(int devnum)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;49     {
000004  e1a04000          MOV      r4,r0
;;;50     	struct mtd_info *mtd;
;;;51     
;;;52     	if (devnum >= CONFIG_SYS_MAX_NAND_DEVICE)
000008  e3540001          CMP      r4,#1
00000c  ba000001          BLT      |L1.24|
;;;53     		return -EINVAL;
000010  e3e00015          MVN      r0,#0x15
                  |L1.20|
;;;54     
;;;55     	mtd = &nand_info[devnum];
;;;56     
;;;57     	sprintf(dev_name[devnum], "nand%d", devnum);
;;;58     	mtd->name = dev_name[devnum];
;;;59     
;;;60     	/*
;;;61     	 * Add MTD device so that we can reference it later
;;;62     	 * via the mtdcore infrastructure (e.g. ubi).
;;;63     	 */
;;;64     	add_mtd_device(mtd);
;;;65     
;;;66     	total_nand_size += mtd->size / 1024;
;;;67     
;;;68     	if (nand_curr_device == -1)
;;;69     		nand_curr_device = devnum;
;;;70     
;;;71         sysprintf("%s\n", mtd->name);
;;;72     
;;;73     	return 0;
;;;74     }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L1.24|
000018  e0840084          ADD      r0,r4,r4,LSL #1       ;55
00001c  e0800184          ADD      r0,r0,r4,LSL #3       ;55
000020  e59f1140          LDR      r1,|L1.360|
000024  e0815200          ADD      r5,r1,r0,LSL #4       ;55
000028  e59f113c          LDR      r1,|L1.364|
00002c  e0810184          ADD      r0,r1,r4,LSL #3       ;57
000030  e1a02004          MOV      r2,r4                 ;57
000034  e28f1f4d          ADR      r1,|L1.368|
000038  ebfffffe          BL       __2sprintf
00003c  e59f0128          LDR      r0,|L1.364|
000040  e0800184          ADD      r0,r0,r4,LSL #3       ;58
000044  e5850020          STR      r0,[r5,#0x20]         ;58
000048  e1a00005          MOV      r0,r5                 ;64
00004c  ebfffffe          BL       add_mtd_device
000050  e3a02b01          MOV      r2,#0x400             ;66
000054  e3a03000          MOV      r3,#0                 ;66
000058  e5956008          LDR      r6,[r5,#8]            ;66
00005c  e1a00006          MOV      r0,r6                 ;66
000060  e595100c          LDR      r1,[r5,#0xc]          ;66
000064  ebfffffe          BL       __aeabi_uldivmod
000068  e59f1108          LDR      r1,|L1.376|
00006c  e5911000          LDR      r1,[r1,#0]            ;66  ; total_nand_size
000070  e0900001          ADDS     r0,r0,r1              ;66
000074  e59f10fc          LDR      r1,|L1.376|
000078  e5810000          STR      r0,[r1,#0]            ;66  ; total_nand_size
00007c  e59f00f8          LDR      r0,|L1.380|
000080  e5900000          LDR      r0,[r0,#0]            ;68  ; nand_curr_device
000084  e3700001          CMN      r0,#1                 ;68
000088  1a000001          BNE      |L1.148|
00008c  e59f00e8          LDR      r0,|L1.380|
000090  e5804000          STR      r4,[r0,#0]            ;69  ; nand_curr_device
                  |L1.148|
000094  e28f00e4          ADR      r0,|L1.384|
000098  e5951020          LDR      r1,[r5,#0x20]         ;71
00009c  ebfffffe          BL       sysprintf
0000a0  e3a00000          MOV      r0,#0                 ;73
0000a4  eaffffda          B        |L1.20|
;;;75     
                          ENDP

                  nand_init_chip PROC
;;;76     static void nand_init_chip(int i)
0000a8  e92d41f0          PUSH     {r4-r8,lr}
;;;77     {
0000ac  e1a05000          MOV      r5,r0
;;;78     	struct mtd_info *mtd = &nand_info[i];
0000b0  e0850085          ADD      r0,r5,r5,LSL #1
0000b4  e0800185          ADD      r0,r0,r5,LSL #3
0000b8  e59f10a8          LDR      r1,|L1.360|
0000bc  e0816200          ADD      r6,r1,r0,LSL #4
;;;79     	struct nand_chip *nand = &nand_chip[i];
0000c0  e0850105          ADD      r0,r5,r5,LSL #2
0000c4  e0800285          ADD      r0,r0,r5,LSL #5
0000c8  e59f10b4          LDR      r1,|L1.388|
0000cc  e0814180          ADD      r4,r1,r0,LSL #3
;;;80     	int maxchips = CONFIG_SYS_NAND_MAX_CHIPS;
0000d0  e3a07001          MOV      r7,#1
;;;81     
;;;82     	if (maxchips < 1)
0000d4  e3570001          CMP      r7,#1
0000d8  aa000000          BGE      |L1.224|
;;;83     		maxchips = 1;
0000dc  e1a00000          MOV      r0,r0
                  |L1.224|
;;;84     
;;;85     	mtd->priv = nand;
0000e0  e5864094          STR      r4,[r6,#0x94]
;;;86     	nand->IO_ADDR_R = nand->IO_ADDR_W = (void  __iomem *)0xB000D8B8;
0000e4  e59f009c          LDR      r0,|L1.392|
0000e8  e5840004          STR      r0,[r4,#4]
0000ec  e5840000          STR      r0,[r4,#0]
;;;87     
;;;88     	if (board_nand_init(nand))
0000f0  e1a00004          MOV      r0,r4
0000f4  ebfffffe          BL       board_nand_init
0000f8  e3500000          CMP      r0,#0
0000fc  0a000000          BEQ      |L1.260|
                  |L1.256|
;;;89     		return;
;;;90     
;;;91     	if (nand_scan(mtd, maxchips))
;;;92     		return;
;;;93     
;;;94     	nand_register(i);
;;;95     }
000100  e8bd81f0          POP      {r4-r8,pc}
                  |L1.260|
000104  e1a01007          MOV      r1,r7                 ;91
000108  e1a00006          MOV      r0,r6                 ;91
00010c  ebfffffe          BL       nand_scan
000110  e3500000          CMP      r0,#0                 ;91
000114  0a000000          BEQ      |L1.284|
000118  eafffff8          B        |L1.256|
                  |L1.284|
00011c  e1a00005          MOV      r0,r5                 ;94
000120  ebfffffe          BL       nand_register
000124  e1a00000          MOV      r0,r0
000128  eafffff4          B        |L1.256|
;;;96     
                          ENDP

                  nand_init PROC
;;;97     void nand_init(void)
00012c  e92d4010          PUSH     {r4,lr}
;;;98     {
;;;99     	int i;
;;;100    
;;;101        YAFFS_InitializeMemoryPool();
000130  ebfffffe          BL       YAFFS_InitializeMemoryPool
;;;102    	for (i = 0; i < CONFIG_SYS_MAX_NAND_DEVICE; i++)
000134  e3a04000          MOV      r4,#0
000138  ea000002          B        |L1.328|
                  |L1.316|
;;;103    		nand_init_chip(i);
00013c  e1a00004          MOV      r0,r4
000140  ebfffffe          BL       nand_init_chip
000144  e2844001          ADD      r4,r4,#1              ;102
                  |L1.328|
000148  e3540001          CMP      r4,#1                 ;102
00014c  bafffffa          BLT      |L1.316|
;;;104    
;;;105    	sysprintf("%lu MiB\n", total_nand_size / 1024);
000150  e59f0020          LDR      r0,|L1.376|
000154  e5900000          LDR      r0,[r0,#0]  ; total_nand_size
000158  e1a01520          LSR      r1,r0,#10
00015c  e28f0028          ADR      r0,|L1.396|
000160  ebfffffe          BL       sysprintf
;;;106    
;;;107    }
000164  e8bd8010          POP      {r4,pc}
                          ENDP

                  |L1.360|
                          DCD      nand_info
                  |L1.364|
                          DCD      dev_name
                  |L1.368|
000170  6e616e64          DCB      "nand%d",0
000174  256400  
000177  00                DCB      0
                  |L1.376|
                          DCD      total_nand_size
                  |L1.380|
                          DCD      nand_curr_device
                  |L1.384|
000180  25730a00          DCB      "%s\n",0
                  |L1.388|
                          DCD      nand_chip
                  |L1.392|
                          DCD      0xb000d8b8
                  |L1.396|
00018c  256c7520          DCB      "%lu MiB\n",0
000190  4d69420a
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  nand_info
                          %        176
                  nand_chip
                          %        296

                          AREA ||.data||, DATA, ALIGN=2

                  nand_curr_device
                          DCD      0xffffffff
                  dev_name
                          %        8
                  total_nand_size
                          DCD      0x00000000
