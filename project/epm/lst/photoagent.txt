; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\photoagent.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\photoagent.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\photoagent.crf src\SysHal\photoagent.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  PhotoAgentPreOffCallback PROC
;;;74     /*-----------------------------------------*/
;;;75     static BOOL PhotoAgentPreOffCallback(int flag)
000000  e1a01000          MOV      r1,r0
;;;76     {
;;;77         BOOL reVal = TRUE;
000004  e3a00001          MOV      r0,#1
;;;78         photoAgentIgnoreRun = TRUE;
000008  e3a02001          MOV      r2,#1
00000c  e59f328c          LDR      r3,|L1.672|
000010  e5c32000          STRB     r2,[r3,#0]  ; photoAgentIgnoreRun
;;;79         //sysprintf("### PhotoAgent OFF Callback [%s] ###\r\n", photoAgentPowerCallabck.drvName);    
;;;80         return reVal;    
;;;81     }
000014  e12fff1e          BX       lr
;;;82     static BOOL PhotoAgentOffCallback(int flag)
                          ENDP

                  PhotoAgentOffCallback PROC
000018  e92d4070          PUSH     {r4-r6,lr}
;;;83     {
00001c  e1a05000          MOV      r5,r0
;;;84         int timers = 2000/10;
000020  e3a040c8          MOV      r4,#0xc8
;;;85         while(!photoAgentPowerStatus)
000024  ea000008          B        |L1.76|
                  |L1.40|
;;;86         {
;;;87             sysprintf("[s]");
000028  e28f0f9d          ADR      r0,|L1.676|
00002c  ebfffffe          BL       sysprintf
;;;88             if(timers-- == 0)
000030  e1b00004          MOVS     r0,r4
000034  e2444001          SUB      r4,r4,#1
000038  1a000001          BNE      |L1.68|
;;;89             {
;;;90                 return FALSE;
00003c  e3a00000          MOV      r0,#0
                  |L1.64|
;;;91             }
;;;92             vTaskDelay(10/portTICK_RATE_MS); 
;;;93         }
;;;94         return TRUE;    
;;;95     }
000040  e8bd8070          POP      {r4-r6,pc}
                  |L1.68|
000044  e3a00001          MOV      r0,#1                 ;92
000048  ebfffffe          BL       vTaskDelay
                  |L1.76|
00004c  e59f0254          LDR      r0,|L1.680|
000050  e5d00000          LDRB     r0,[r0,#0]            ;85  ; photoAgentPowerStatus
000054  e3500000          CMP      r0,#0                 ;85
000058  0afffff2          BEQ      |L1.40|
00005c  e3a00001          MOV      r0,#1                 ;94
000060  eafffff6          B        |L1.64|
;;;96     static BOOL PhotoAgentOnCallback(int flag)
                          ENDP

                  PhotoAgentOnCallback PROC
000064  e1a01000          MOV      r1,r0
;;;97     {
;;;98         BOOL reVal = TRUE;
000068  e3a00001          MOV      r0,#1
;;;99         //sysprintf("### PhotoAgent ON Callback [%s] ###\r\n", photoAgentPowerCallabck.drvName);    
;;;100        return reVal;    
;;;101    }
00006c  e12fff1e          BX       lr
;;;102    static BOOL PhotoAgentCheckStatus(int flag)
                          ENDP

                  PhotoAgentCheckStatus PROC
000070  e1a01000          MOV      r1,r0
;;;103    {
;;;104        //BOOL reVal = TRUE;
;;;105        //sysprintf("### PhotoAgent STATUS Callback [%s] ###\r\n", photoAgentPowerCallabck.drvName); 
;;;106        photoAgentIgnoreRun = FALSE;
000074  e3a00000          MOV      r0,#0
000078  e59f2220          LDR      r2,|L1.672|
00007c  e5c20000          STRB     r0,[r2,#0]  ; photoAgentIgnoreRun
;;;107        return photoAgentPowerStatus;    
000080  e59f0220          LDR      r0,|L1.680|
000084  e5d00000          LDRB     r0,[r0,#0]  ; photoAgentPowerStatus
;;;108    }
000088  e12fff1e          BX       lr
;;;109    
                          ENDP

                  swTestInitPure PROC
;;;110    static BOOL swTestInitPure(void)
00008c  e92d4010          PUSH     {r4,lr}
;;;111    {
;;;112        pCameraInterface = CameraGetInterface(CAMERA_UVC_INTERFACE_INDEX);
000090  e3a00000          MOV      r0,#0
000094  ebfffffe          BL       CameraGetInterface
000098  e59f120c          LDR      r1,|L1.684|
00009c  e5810000          STR      r0,[r1,#0]  ; pCameraInterface
;;;113        if (pCameraInterface == NULL)
0000a0  e2810000          ADD      r0,r1,#0
0000a4  e5900000          LDR      r0,[r0,#0]  ; pCameraInterface
0000a8  e3500000          CMP      r0,#0
0000ac  1a000003          BNE      |L1.192|
;;;114        {
;;;115            sysprintf("usbCamTest ERROR (pCameraInterface == NULL)!!\n");
0000b0  e28f0f7e          ADR      r0,|L1.688|
0000b4  ebfffffe          BL       sysprintf
;;;116            return FALSE;
0000b8  e3a00000          MOV      r0,#0
                  |L1.188|
;;;117        }
;;;118        if (pCameraInterface->initBurningFunc(FALSE) == FALSE)  
;;;119        {
;;;120            sysprintf("usbCamTest ERROR (pCameraInterface->initBurningFunc(FALSE) == FALSE)!!\n");
;;;121            return FALSE;
;;;122        }
;;;123        return TRUE;
;;;124    }
0000bc  e8bd8010          POP      {r4,pc}
                  |L1.192|
0000c0  e59f01e4          LDR      r0,|L1.684|
0000c4  e5900000          LDR      r0,[r0,#0]            ;118  ; pCameraInterface
0000c8  e590100c          LDR      r1,[r0,#0xc]          ;118
0000cc  e3a00000          MOV      r0,#0                 ;118
0000d0  e12fff31          BLX      r1                    ;118
0000d4  e3500000          CMP      r0,#0                 ;118
0000d8  1a000003          BNE      |L1.236|
0000dc  e59f01fc          LDR      r0,|L1.736|
0000e0  ebfffffe          BL       sysprintf
0000e4  e3a00000          MOV      r0,#0                 ;121
0000e8  eafffff3          B        |L1.188|
                  |L1.236|
0000ec  e3a00001          MOV      r0,#1                 ;123
0000f0  eafffff1          B        |L1.188|
;;;125    
                          ENDP

                  vPhotoAgentTakePhotoTask PROC
;;;126    
;;;127    static void vPhotoAgentTakePhotoTask( void *pvParameters )
0000f4  e28f0f7a          ADR      r0,|L1.740|
;;;128    {
;;;129        //vTaskDelay(2000/portTICK_RATE_MS); 
;;;130        sysprintf("vPhotoAgentTakePhotoTask Going...\r\n");     
0000f8  ebfffffe          BL       sysprintf
;;;131        for(;;)
0000fc  e1a00000          MOV      r0,r0
                  |L1.256|
;;;132        {     
;;;133            photoAgentPowerStatus = TRUE;
000100  e3a00001          MOV      r0,#1
000104  e59f119c          LDR      r1,|L1.680|
000108  e5c10000          STRB     r0,[r1,#0]  ; photoAgentPowerStatus
;;;134            BaseType_t reval = xSemaphoreTake(xTakePhotoSemaphore, threadTakePhotoWaitTime);  
00010c  e3a03000          MOV      r3,#0
000110  e59f01f0          LDR      r0,|L1.776|
000114  e1a01003          MOV      r1,r3
000118  e5902000          LDR      r2,[r0,#0]  ; threadTakePhotoWaitTime
00011c  e59f01e8          LDR      r0,|L1.780|
000120  e5900000          LDR      r0,[r0,#0]  ; xTakePhotoSemaphore
000124  ebfffffe          BL       xQueueGenericReceive
000128  e1a04000          MOV      r4,r0
;;;135            if(photoAgentIgnoreRun)
00012c  e59f016c          LDR      r0,|L1.672|
000130  e5d00000          LDRB     r0,[r0,#0]  ; photoAgentIgnoreRun
000134  e3500000          CMP      r0,#0
000138  0a000002          BEQ      |L1.328|
;;;136            {
;;;137                sysprintf("vPhotoAgentTakePhotoTask ignore...\r\n"); 
00013c  e28f0f73          ADR      r0,|L1.784|
000140  ebfffffe          BL       sysprintf
;;;138                continue;
000144  eaffffed          B        |L1.256|
                  |L1.328|
000148  eaffffec          B        |L1.256|
;;;139            }
;;;140            if(reval != pdTRUE)
;;;141            {//timeout
;;;142    
;;;143            }
;;;144            else
;;;145            {
;;;146                #if(0)
;;;147                {
;;;148                    uint8_t* photoPr;
;;;149                    int photoLen = 0;;
;;;150                    
;;;151                    char targetFileNameTmp[_MAX_LFN];
;;;152                    memset(targetFileNameTmp, 0x0, sizeof(targetFileNameTmp));
;;;153                    if(photoCurrentTime != 0)
;;;154                    {
;;;155                        char timeStr[_MAX_LFN];
;;;156                        //sprintf(targetFileNameTmp,"%08d_%010d.%s", GetMeterData()->epmid, photoCurrentTime, PHOTO_FILE_EXTENSION); 
;;;157                        if(UTCTimeToString(photoCurrentTime, timeStr))
;;;158                        {
;;;159                            sprintf(targetFileNameTmp,"%08d_%s.%s", GetMeterData()->epmid, timeStr, PHOTO_FILE_EXTENSION); 
;;;160                        }
;;;161                    }
;;;162                    else
;;;163                    {
;;;164                        RTC_TIME_DATA_T pt;
;;;165                        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
;;;166                        {
;;;167                            sprintf(targetFileNameTmp,"%08d_%04d%02d%02d%02d%02d_.%s", GetMeterData()->epmid, pt.u32Year, pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute, PHOTO_FILE_EXTENSION);                         
;;;168                        }
;;;169                        else
;;;170                        {
;;;171                            sprintf(targetFileNameTmp,"%08d_%010d_.%s", GetMeterData()->epmid, 999999, PHOTO_FILE_EXTENSION); 
;;;172                        }
;;;173                    }
;;;174                    
;;;175                    sysprintf("\r\n !! Start PCT08TakePhoto (%s)!!\r\n", targetFileNameTmp); 
;;;176                    //ModemAgentStartSend(DATA_PROCESS_ID_PHOTO);                
;;;177                    if(PCT08TakePhoto(&photoPr, &photoLen, PHOTO_SAVE_POSITION, PHOTO_FILE_DIR, targetFileNameTmp))
;;;178                    {
;;;179                        //sysprintf("\r\n !! PCT08TakePhoto OK:  photoLen = %d!!...\r\n", photoLen);
;;;180                        //sysprintf("!! PCT08TakePhoto OK:  photoLen = %d!!, start send file...\r\n", photoLen);
;;;181                        //#if(BUILD_RELEASE_VERSION)
;;;182                        //    ModemAgentStartSend(DATA_PROCESS_ID_PHOTO);
;;;183                        //#endif
;;;184                        {
;;;185                        char str[256];
;;;186                            sprintf(str, " ![PHOTO]! PCT08TakePhoto OK [%s] : photoLen = %d !!...\r\n", targetFileNameTmp, photoLen);
;;;187                        LoglibPrintf(LOG_TYPE_INFO, str);
;;;188                        }
;;;189                    }
;;;190                    else
;;;191                    {
;;;192                        //sysprintf("\r\n !! PCT08TakePhoto error:  photoLen = %d!!\r\n");
;;;193                        {
;;;194                            char str[256];
;;;195                            sprintf(str, " ![PHOTO]! PCT08TakePhoto ERROR [%s]...\r\n", targetFileNameTmp);
;;;196                            LoglibPrintf(LOG_TYPE_ERROR, str);
;;;197                        }
;;;198                    }
;;;199                }
;;;200                #endif
;;;201            }  
;;;202    
;;;203        }
;;;204       
;;;205    }
;;;206    
                          ENDP

                  vUVCameraTestTask PROC
;;;207    #if (ENABLE_BURNIN_TESTER)
;;;208    static void vUVCameraTestTask(void *pvParameters)
00014c  e24dd0d8          SUB      sp,sp,#0xd8
;;;209    {
;;;210        time_t lastTime = GetCurrentUTCTime();
000150  ebfffffe          BL       GetCurrentUTCTime
000154  e1a06000          MOV      r6,r0
;;;211        time_t currentTime;
;;;212        RTC_TIME_DATA_T pt;
;;;213        BOOL testLoop = FALSE;
000158  e3a07000          MOV      r7,#0
;;;214        char targetFileNameTmp[BURNIN_LOG_FILENAME_BUFFER_LENGTH];
;;;215        char targetFilePathTmp[BURNIN_LOG_FILENAME_BUFFER_LENGTH];
;;;216        uint8_t* ptrPhoto;
;;;217        int photoLen = 0;
00015c  e3a00000          MOV      r0,#0
000160  e58d0020          STR      r0,[sp,#0x20]
;;;218        int uvcIndex;
;;;219        int CamInitCounter = 0;
000164  e1a00000          MOV      r0,r0
;;;220        terninalPrintf("vUVCameraTestTask Going...\r\n");
000168  e28f0f72          ADR      r0,|L1.824|
00016c  ebfffffe          BL       terninalPrintf
;;;221        
;;;222        while (TRUE)
000170  ea0000b4          B        |L1.1096|
                  |L1.372|
;;;223        {
;;;224            if (GetPrepareStopBurninFlag())
000174  ebfffffe          BL       GetPrepareStopBurninFlag
000178  e3500000          CMP      r0,#0
00017c  0a000003          BEQ      |L1.400|
;;;225            {
;;;226                terninalPrintf("vUVCameraTestTask Terminated !!\r\n");
000180  e28f0e1d          ADR      r0,|L1.856|
000184  ebfffffe          BL       terninalPrintf
;;;227                vTaskDelete(NULL);
000188  e3a00000          MOV      r0,#0
00018c  ebfffffe          BL       vTaskDelete
                  |L1.400|
;;;228            }
;;;229            currentTime = GetCurrentUTCTime();
000190  ebfffffe          BL       GetCurrentUTCTime
000194  e1a05000          MOV      r5,r0
;;;230            if ((currentTime - lastTime) > BURNIN_CAMERA_INTERVAL)
000198  e0450006          SUB      r0,r5,r6
00019c  e3500014          CMP      r0,#0x14
0001a0  9a000000          BLS      |L1.424|
;;;231            {
;;;232                //terninalPrintf("vUVCameraTestTask heartbeat.\r\n");
;;;233                testLoop = TRUE;
0001a4  e3a07001          MOV      r7,#1
                  |L1.424|
;;;234            }
;;;235            if (!testLoop)
0001a8  e3570000          CMP      r7,#0
0001ac  1a000002          BNE      |L1.444|
;;;236            {
;;;237                vTaskDelay(100 / portTICK_RATE_MS);
0001b0  e3a0000a          MOV      r0,#0xa
0001b4  ebfffffe          BL       vTaskDelay
;;;238                continue;
0001b8  ea0000a2          B        |L1.1096|
                  |L1.444|
;;;239            }
;;;240            
;;;241            testLoop = FALSE;
0001bc  e3a07000          MOV      r7,#0
;;;242            for (uvcIndex = UVCAMERA_INDEX_0 ; uvcIndex <= UVCAMERA_INDEX_1; uvcIndex++)
0001c0  e3a04000          MOV      r4,#0
0001c4  ea000095          B        |L1.1056|
                  |L1.456|
;;;243            {
;;;244                RTC_Read(RTC_CURRENT_TIME, &pt);
0001c8  e28d10a8          ADD      r1,sp,#0xa8
0001cc  e3a00000          MOV      r0,#0
0001d0  ebfffffe          BL       RTC_Read
;;;245                sprintf(targetFileNameTmp, "uvc_%d_%08d_%04d%02d%02d%02d%02d%02d.%s", uvcIndex, GetDeviceID(), pt.u32Year, pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute, pt.u32cSecond, PHOTO_FILE_EXTENSION);
0001d4  ebfffffe          BL       GetDeviceID
0001d8  e1a08000          MOV      r8,r0
0001dc  e28f3f66          ADR      r3,|L1.892|
0001e0  e59d00ac          LDR      r0,[sp,#0xac]
0001e4  e59d20b0          LDR      r2,[sp,#0xb0]
0001e8  e59d10b4          LDR      r1,[sp,#0xb4]
0001ec  e58d0014          STR      r0,[sp,#0x14]
0001f0  e58d3018          STR      r3,[sp,#0x18]
0001f4  e58d100c          STR      r1,[sp,#0xc]
0001f8  e58d2010          STR      r2,[sp,#0x10]
0001fc  e59d00bc          LDR      r0,[sp,#0xbc]
000200  e59d20c0          LDR      r2,[sp,#0xc0]
000204  e59d10c4          LDR      r1,[sp,#0xc4]
000208  e1a03008          MOV      r3,r8
00020c  e88d0006          STM      sp,{r1,r2}
000210  e1a02004          MOV      r2,r4
000214  e28f1f59          ADR      r1,|L1.896|
000218  e58d0008          STR      r0,[sp,#8]
00021c  e28d0068          ADD      r0,sp,#0x68
000220  ebfffffe          BL       __2sprintf
;;;246                sprintf(targetFilePathTmp, "0:\\%08d\\uvc%d", GetDeviceID(), uvcIndex);
000224  ebfffffe          BL       GetDeviceID
000228  e1a08000          MOV      r8,r0
00022c  e1a03004          MOV      r3,r4
000230  e1a02008          MOV      r2,r8
000234  e28f1f5b          ADR      r1,|L1.936|
000238  e28d0028          ADD      r0,sp,#0x28
00023c  ebfffffe          BL       __2sprintf
;;;247                if (pCameraInterface->takePhotoFunc(uvcIndex, &ptrPhoto, &photoLen, FILE_AGENT_STORAGE_TYPE_FATFS, targetFilePathTmp, targetFileNameTmp, FALSE, 1, 0) == FALSE)
000240  e3a00000          MOV      r0,#0
000244  e3a01001          MOV      r1,#1
000248  e28d3068          ADD      r3,sp,#0x68
00024c  e1cd00f8          STRD     r0,r1,[sp,#8]
000250  e58d3004          STR      r3,[sp,#4]
000254  e58d0010          STR      r0,[sp,#0x10]
000258  e28d0028          ADD      r0,sp,#0x28
00025c  e58d0000          STR      r0,[sp,#0]
000260  e59f0044          LDR      r0,|L1.684|
000264  e5900000          LDR      r0,[r0,#0]  ; pCameraInterface
000268  e3a03002          MOV      r3,#2
00026c  e28d2020          ADD      r2,sp,#0x20
000270  e28d1024          ADD      r1,sp,#0x24
000274  e590c004          LDR      r12,[r0,#4]
000278  e1a00004          MOV      r0,r4
00027c  e12fff3c          BLX      r12
000280  e3500000          CMP      r0,#0
000284  1a00004c          BNE      |L1.956|
;;;248                {
;;;249                    cameraBurninPhotoErrorCounter[uvcIndex]++;
000288  e59f0128          LDR      r0,|L1.952|
00028c  e7900104          LDR      r0,[r0,r4,LSL #2]
000290  e2800001          ADD      r0,r0,#1
000294  e59f111c          LDR      r1,|L1.952|
000298  e7810104          STR      r0,[r1,r4,LSL #2]
00029c  ea000059          B        |L1.1032|
                  |L1.672|
                          DCD      photoAgentIgnoreRun
                  |L1.676|
0002a4  5b735d00          DCB      "[s]",0
                  |L1.680|
                          DCD      photoAgentPowerStatus
                  |L1.684|
                          DCD      pCameraInterface
                  |L1.688|
0002b0  75736243          DCB      "usbCamTest ERROR (pCameraInterface == NULL)!!\n",0
0002b4  616d5465
0002b8  73742045
0002bc  52524f52
0002c0  20287043
0002c4  616d6572
0002c8  61496e74
0002cc  65726661
0002d0  6365203d
0002d4  3d204e55
0002d8  4c4c2921
0002dc  210a00  
0002df  00                DCB      0
                  |L1.736|
                          DCD      ||.constdata||
                  |L1.740|
0002e4  7650686f          DCB      "vPhotoAgentTakePhotoTask Going...\r\n",0
0002e8  746f4167
0002ec  656e7454
0002f0  616b6550
0002f4  686f746f
0002f8  5461736b
0002fc  20476f69
000300  6e672e2e
000304  2e0d0a00
                  |L1.776|
                          DCD      threadTakePhotoWaitTime
                  |L1.780|
                          DCD      xTakePhotoSemaphore
                  |L1.784|
000310  7650686f          DCB      "vPhotoAgentTakePhotoTask ignore...\r\n",0
000314  746f4167
000318  656e7454
00031c  616b6550
000320  686f746f
000324  5461736b
000328  2069676e
00032c  6f72652e
000330  2e2e0d0a
000334  00      
000335  00                DCB      0
000336  00                DCB      0
000337  00                DCB      0
                  |L1.824|
000338  76555643          DCB      "vUVCameraTestTask Going...\r\n",0
00033c  616d6572
000340  61546573
000344  74546173
000348  6b20476f
00034c  696e672e
000350  2e2e0d0a
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
                  |L1.856|
000358  76555643          DCB      "vUVCameraTestTask Terminated !!\r\n",0
00035c  616d6572
000360  61546573
000364  74546173
000368  6b205465
00036c  726d696e
000370  61746564
000374  2021210d
000378  0a00    
00037a  00                DCB      0
00037b  00                DCB      0
                  |L1.892|
00037c  6a706700          DCB      "jpg",0
                  |L1.896|
000380  7576635f          DCB      "uvc_%d_%08d_%04d%02d%02d%02d%02d%02d.%s",0
000384  25645f25
000388  3038645f
00038c  25303464
000390  25303264
000394  25303264
000398  25303264
00039c  25303264
0003a0  25303264
0003a4  2e257300
                  |L1.936|
0003a8  303a5c25          DCB      "0:\\%08d\\uvc%d",0
0003ac  3038645c
0003b0  75766325
0003b4  6400    
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L1.952|
                          DCD      cameraBurninPhotoErrorCounter
                  |L1.956|
;;;250                }
;;;251                else
;;;252                {
;;;253                    //terninalPrintf("vUVCameraTestTask[0], PhotoLength = %d\r\n", photoLen);
;;;254                    if (FileAgentAddData(FILE_AGENT_STORAGE_TYPE_FATFS, targetFilePathTmp, targetFileNameTmp, ptrPhoto, photoLen, FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, FALSE, TRUE, FALSE) == FILE_AGENT_RETURN_ERROR)
0003bc  e3a00000          MOV      r0,#0
0003c0  e3a01001          MOV      r1,#1
0003c4  e58d0004          STR      r0,[sp,#4]
0003c8  e1cd00f8          STRD     r0,r1,[sp,#8]
0003cc  e58d0010          STR      r0,[sp,#0x10]
0003d0  e59d0020          LDR      r0,[sp,#0x20]
0003d4  e58d0000          STR      r0,[sp,#0]
0003d8  e59d3024          LDR      r3,[sp,#0x24]
0003dc  e28d2068          ADD      r2,sp,#0x68
0003e0  e28d1028          ADD      r1,sp,#0x28
0003e4  e3a00002          MOV      r0,#2
0003e8  ebfffffe          BL       FileAgentAddData
0003ec  e3500000          CMP      r0,#0
0003f0  1a000004          BNE      |L1.1032|
;;;255                    {
;;;256                        cameraBurninFileErrorCounter[uvcIndex]++;
0003f4  e59f0224          LDR      r0,|L1.1568|
0003f8  e7900104          LDR      r0,[r0,r4,LSL #2]
0003fc  e2800001          ADD      r0,r0,#1
000400  e59f1218          LDR      r1,|L1.1568|
000404  e7810104          STR      r0,[r1,r4,LSL #2]
                  |L1.1032|
;;;257                    }
;;;258                }
;;;259                cameraBurninCounter[uvcIndex]++;
000408  e59f0214          LDR      r0,|L1.1572|
00040c  e7900104          LDR      r0,[r0,r4,LSL #2]
000410  e2800001          ADD      r0,r0,#1
000414  e59f1208          LDR      r1,|L1.1572|
000418  e7810104          STR      r0,[r1,r4,LSL #2]
00041c  e2844001          ADD      r4,r4,#1              ;242
                  |L1.1056|
000420  e3540001          CMP      r4,#1                 ;242
000424  daffff67          BLE      |L1.456|
;;;260            }
;;;261            lastTime = GetCurrentUTCTime();
000428  ebfffffe          BL       GetCurrentUTCTime
00042c  e1a06000          MOV      r6,r0
;;;262            
;;;263            //CamInitCounter++;
;;;264            
;;;265            //if(CamInitCounter >= 100)
;;;266            //{
;;;267                //CamInitCounter = 0;
;;;268                vTaskDelay(500 / portTICK_RATE_MS);
000430  e3a00032          MOV      r0,#0x32
000434  ebfffffe          BL       vTaskDelay
;;;269                swTestInitPure();
000438  ebfffffe          BL       swTestInitPure
;;;270                vTaskDelay(500 / portTICK_RATE_MS);
00043c  e3a00032          MOV      r0,#0x32
000440  ebfffffe          BL       vTaskDelay
000444  e1a00000          MOV      r0,r0                 ;238
                  |L1.1096|
000448  eaffff49          B        |L1.372|
;;;271            //}
;;;272        }
;;;273    }
;;;274    #endif
                          ENDP

                  swInit PROC
;;;275    
;;;276    static BOOL swInit(void)
00044c  e92d401c          PUSH     {r2-r4,lr}
;;;277    {   
;;;278        PowerRegCallback(&photoAgentPowerCallabck);
000450  e59f01d0          LDR      r0,|L1.1576|
000454  ebfffffe          BL       PowerRegCallback
;;;279        xTakePhotoSemaphore = xSemaphoreCreateBinary();
000458  e3a02003          MOV      r2,#3
00045c  e3a01000          MOV      r1,#0
000460  e3a00001          MOV      r0,#1
000464  ebfffffe          BL       xQueueGenericCreate
000468  e51f1164          LDR      r1,|L1.780|
00046c  e5810000          STR      r0,[r1,#0]  ; xTakePhotoSemaphore
;;;280        xTaskCreate( vPhotoAgentTakePhotoTask, "vPhotoAgentTakePhotoTask", 1024*10, NULL, METER_TAKE_PHOTO_PROCESS_THREAD_PROI, NULL );
000470  e3a00000          MOV      r0,#0
000474  e3a01005          MOV      r1,#5
000478  e58d0004          STR      r0,[sp,#4]
00047c  e1a03000          MOV      r3,r0
000480  e3a02b0a          MOV      r2,#0x2800
000484  e58d1000          STR      r1,[sp,#0]
000488  e28f1f67          ADR      r1,|L1.1580|
00048c  e59f01b4          LDR      r0,|L1.1608|
000490  ebfffffe          BL       xTaskCreate
;;;281        return TRUE;
000494  e3a00001          MOV      r0,#1
;;;282    }
000498  e8bd801c          POP      {r2-r4,pc}
;;;283    
                          ENDP

                  swTestInit PROC
;;;284    #if (ENABLE_BURNIN_TESTER)
;;;285    static BOOL swTestInit(void)
00049c  e92d401c          PUSH     {r2-r4,lr}
;;;286    {
;;;287        //PowerRegCallback(&photoAgentPowerCallabck);
;;;288        //if (GPIO_ReadBit(DIP_CARD_READER_SELECT_PORT, DIP_CARD_READER_SELECT_PIN))
;;;289        //{
;;;290            pCameraInterface = CameraGetInterface(CAMERA_UVC_INTERFACE_INDEX);
0004a0  e3a00000          MOV      r0,#0
0004a4  ebfffffe          BL       CameraGetInterface
0004a8  e51f1204          LDR      r1,|L1.684|
0004ac  e5810000          STR      r0,[r1,#0]  ; pCameraInterface
;;;291            if (pCameraInterface == NULL)
0004b0  e2810000          ADD      r0,r1,#0
0004b4  e5900000          LDR      r0,[r0,#0]  ; pCameraInterface
0004b8  e3500000          CMP      r0,#0
0004bc  1a000003          BNE      |L1.1232|
;;;292            {
;;;293                sysprintf("usbCamTest ERROR (pCameraInterface == NULL)!!\n");
0004c0  e24f0f86          ADR      r0,|L1.688|
0004c4  ebfffffe          BL       sysprintf
;;;294                return FALSE;
0004c8  e3a00000          MOV      r0,#0
                  |L1.1228|
;;;295            }
;;;296            if (pCameraInterface->initFunc(FALSE) == FALSE)
;;;297            {
;;;298                sysprintf("usbCamTest ERROR (pCameraInterface->initFunc(FALSE) == FALSE)!!\n");
;;;299                return FALSE;
;;;300            }
;;;301            xTaskCreate(vUVCameraTestTask, "vUVCameraTestTask", 1024*10, NULL, CAMERA_TEST_THREAD_PROI, NULL);
;;;302        //}
;;;303        return TRUE;
;;;304    }
0004cc  e8bd801c          POP      {r2-r4,pc}
                  |L1.1232|
0004d0  e51f022c          LDR      r0,|L1.684|
0004d4  e5900000          LDR      r0,[r0,#0]            ;296  ; pCameraInterface
0004d8  e5901000          LDR      r1,[r0,#0]            ;296
0004dc  e3a00000          MOV      r0,#0                 ;296
0004e0  e12fff31          BLX      r1                    ;296
0004e4  e3500000          CMP      r0,#0                 ;296
0004e8  1a000003          BNE      |L1.1276|
0004ec  e59f0158          LDR      r0,|L1.1612|
0004f0  ebfffffe          BL       sysprintf
0004f4  e3a00000          MOV      r0,#0                 ;299
0004f8  eafffff3          B        |L1.1228|
                  |L1.1276|
0004fc  e3a00000          MOV      r0,#0                 ;301
000500  e3a01005          MOV      r1,#5                 ;301
000504  e58d0004          STR      r0,[sp,#4]            ;301
000508  e1a03000          MOV      r3,r0                 ;301
00050c  e3a02b0a          MOV      r2,#0x2800            ;301
000510  e58d1000          STR      r1,[sp,#0]            ;301
000514  e28f1f4d          ADR      r1,|L1.1616|
000518  e59f0144          LDR      r0,|L1.1636|
00051c  ebfffffe          BL       xTaskCreate
000520  e3a00001          MOV      r0,#1                 ;303
000524  eaffffe8          B        |L1.1228|
;;;305    #endif
                          ENDP

                  PhotoAgentInit PROC
;;;309    /*-----------------------------------------*/
;;;310    BOOL PhotoAgentInit(BOOL testModeFlag)
000528  e92d4010          PUSH     {r4,lr}
;;;311    {
00052c  e1a04000          MOV      r4,r0
;;;312        sysprintf("PhotoAgentInit!!\n");
000530  e28f0e13          ADR      r0,|L1.1640|
000534  ebfffffe          BL       sysprintf
;;;313       
;;;314        if(swInit() == FALSE)
000538  ebfffffe          BL       swInit
00053c  e3500000          CMP      r0,#0
000540  1a000003          BNE      |L1.1364|
;;;315        {
;;;316            sysprintf("PhotoAgentInit ERROR (swInit false)!!\n");
000544  e28f0e13          ADR      r0,|L1.1660|
000548  ebfffffe          BL       sysprintf
;;;317            return FALSE;
00054c  e3a00000          MOV      r0,#0
                  |L1.1360|
;;;318        }
;;;319        
;;;320        sysprintf("PhotoAgentInit OK!!\n");
;;;321        return TRUE;
;;;322    }
000550  e8bd8010          POP      {r4,pc}
                  |L1.1364|
000554  e28f0f52          ADR      r0,|L1.1700|
000558  ebfffffe          BL       sysprintf
00055c  e3a00001          MOV      r0,#1                 ;321
000560  eafffffa          B        |L1.1360|
;;;323    
                          ENDP

                  PhotoAgentStartTakePhoto PROC
;;;324    void PhotoAgentStartTakePhoto(uint32_t currentTime)
000564  e92d4010          PUSH     {r4,lr}
;;;325    {
000568  e1a04000          MOV      r4,r0
;;;326        //sysprintf(">> PhotoAgentStartTakePhoto!!\n");
;;;327        if(xTakePhotoSemaphore == NULL)
00056c  e51f0268          LDR      r0,|L1.780|
000570  e5900000          LDR      r0,[r0,#0]  ; xTakePhotoSemaphore
000574  e3500000          CMP      r0,#0
000578  1a000000          BNE      |L1.1408|
                  |L1.1404|
;;;328            return;
;;;329        #if(ENABLE_MODEM_AGENT_DRIVER)
;;;330        #else
;;;331        FileAgentFatfsDeleteFile("1:", FILE_EXTENSION_EX(PHOTO_FILE_EXTENSION));
;;;332        FileAgentFatfsDeleteFile("2:", FILE_EXTENSION_EX(PHOTO_FILE_EXTENSION));
;;;333        #endif
;;;334        photoAgentPowerStatus = FALSE;
;;;335        //if(currentTime == 0)
;;;336        //{
;;;337        //    currentTime = GetCurrentUTCTime();
;;;338        //}
;;;339        photoCurrentTime = currentTime;
;;;340        xSemaphoreGive(xTakePhotoSemaphore);
;;;341    }
00057c  e8bd8010          POP      {r4,pc}
                  |L1.1408|
000580  e3a00000          MOV      r0,#0                 ;334
000584  e51f12e4          LDR      r1,|L1.680|
000588  e5c10000          STRB     r0,[r1,#0]            ;334  ; photoAgentPowerStatus
00058c  e59f0128          LDR      r0,|L1.1724|
000590  e5804000          STR      r4,[r0,#0]            ;339  ; photoCurrentTime
000594  e3a03000          MOV      r3,#0                 ;340
000598  e1a02003          MOV      r2,r3                 ;340
00059c  e1a01003          MOV      r1,r3                 ;340
0005a0  e51f029c          LDR      r0,|L1.780|
0005a4  e5900000          LDR      r0,[r0,#0]            ;340  ; xTakePhotoSemaphore
0005a8  ebfffffe          BL       xQueueGenericSend
0005ac  e1a00000          MOV      r0,r0
0005b0  eafffff1          B        |L1.1404|
;;;342    
                          ENDP

                  UVCameraTestInit PROC
;;;343    #if (ENABLE_BURNIN_TESTER)
;;;344    BOOL UVCameraTestInit(BOOL testModeFlag)
0005b4  e92d4010          PUSH     {r4,lr}
;;;345    {
0005b8  e1a04000          MOV      r4,r0
;;;346        sysprintf("UVCameraTestInit!!\n");
0005bc  e28f00fc          ADR      r0,|L1.1728|
0005c0  ebfffffe          BL       sysprintf
;;;347        
;;;348        if (swTestInit() == FALSE)
0005c4  ebfffffe          BL       swTestInit
0005c8  e3500000          CMP      r0,#0
0005cc  1a000003          BNE      |L1.1504|
;;;349        {
;;;350            sysprintf("UVCameraTestInit ERROR (swInit false)!!\n");
0005d0  e28f00fc          ADR      r0,|L1.1748|
0005d4  ebfffffe          BL       sysprintf
;;;351            return FALSE;
0005d8  e3a00000          MOV      r0,#0
                  |L1.1500|
;;;352        }
;;;353        
;;;354        sysprintf("UVCameraTestInit OK!!\n");
;;;355        return TRUE;
;;;356    }
0005dc  e8bd8010          POP      {r4,pc}
                  |L1.1504|
0005e0  e28f0f46          ADR      r0,|L1.1792|
0005e4  ebfffffe          BL       sysprintf
0005e8  e3a00001          MOV      r0,#1                 ;355
0005ec  eafffffa          B        |L1.1500|
;;;357    
                          ENDP

                  GetCameraBurninTestCounter PROC
;;;358    uint32_t GetCameraBurninTestCounter(int cameraIndex)
0005f0  e1a01000          MOV      r1,r0
;;;359    {
;;;360        return cameraBurninCounter[cameraIndex];
0005f4  e59f0028          LDR      r0,|L1.1572|
0005f8  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;361    }
0005fc  e12fff1e          BX       lr
;;;362    
                          ENDP

                  GetCameraBurninPhotoErrorCounter PROC
;;;363    uint32_t GetCameraBurninPhotoErrorCounter(int cameraIndex)
000600  e1a01000          MOV      r1,r0
;;;364    {
;;;365        return cameraBurninPhotoErrorCounter[cameraIndex];
000604  e51f0254          LDR      r0,|L1.952|
000608  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;366    }
00060c  e12fff1e          BX       lr
;;;367    
                          ENDP

                  GetCameraBurninFileErrorCounter PROC
;;;368    uint32_t GetCameraBurninFileErrorCounter(int cameraIndex)
000610  e1a01000          MOV      r1,r0
;;;369    {
;;;370        return cameraBurninFileErrorCounter[cameraIndex];
000614  e59f0004          LDR      r0,|L1.1568|
000618  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;371    }
00061c  e12fff1e          BX       lr
;;;372    #endif
                          ENDP

                  |L1.1568|
                          DCD      cameraBurninFileErrorCounter
                  |L1.1572|
                          DCD      cameraBurninCounter
                  |L1.1576|
                          DCD      photoAgentPowerCallabck
                  |L1.1580|
00062c  7650686f          DCB      "vPhotoAgentTakePhotoTask",0
000630  746f4167
000634  656e7454
000638  616b6550
00063c  686f746f
000640  5461736b
000644  00      
000645  00                DCB      0
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
                          DCD      vPhotoAgentTakePhotoTask
                  |L1.1612|
                          DCD      ||.constdata||+0x48
                  |L1.1616|
000650  76555643          DCB      "vUVCameraTestTask",0
000654  616d6572
000658  61546573
00065c  74546173
000660  6b00    
000662  00                DCB      0
000663  00                DCB      0
                  |L1.1636|
                          DCD      vUVCameraTestTask
                  |L1.1640|
000668  50686f74          DCB      "PhotoAgentInit!!\n",0
00066c  6f416765
000670  6e74496e
000674  69742121
000678  0a00    
00067a  00                DCB      0
00067b  00                DCB      0
                  |L1.1660|
00067c  50686f74          DCB      "PhotoAgentInit ERROR (swInit false)!!\n",0
000680  6f416765
000684  6e74496e
000688  69742045
00068c  52524f52
000690  20287377
000694  496e6974
000698  2066616c
00069c  73652921
0006a0  210a00  
0006a3  00                DCB      0
                  |L1.1700|
0006a4  50686f74          DCB      "PhotoAgentInit OK!!\n",0
0006a8  6f416765
0006ac  6e74496e
0006b0  6974204f
0006b4  4b21210a
0006b8  00      
0006b9  00                DCB      0
0006ba  00                DCB      0
0006bb  00                DCB      0
                  |L1.1724|
                          DCD      photoCurrentTime
                  |L1.1728|
0006c0  55564361          DCB      "UVCameraTestInit!!\n",0
0006c4  6d657261
0006c8  54657374
0006cc  496e6974
0006d0  21210a00
                  |L1.1748|
0006d4  55564361          DCB      "UVCameraTestInit ERROR (swInit false)!!\n",0
0006d8  6d657261
0006dc  54657374
0006e0  496e6974
0006e4  20455252
0006e8  4f522028
0006ec  7377496e
0006f0  69742066
0006f4  616c7365
0006f8  2921210a
0006fc  00      
0006fd  00                DCB      0
0006fe  00                DCB      0
0006ff  00                DCB      0
                  |L1.1792|
000700  55564361          DCB      "UVCameraTestInit OK!!\n",0
000704  6d657261
000708  54657374
00070c  496e6974
000710  204f4b21
000714  210a00  
000717  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  75736243          DCB      0x75,0x73,0x62,0x43
000004  616d5465          DCB      0x61,0x6d,0x54,0x65
000008  73742045          DCB      0x73,0x74,0x20,0x45
00000c  52524f52          DCB      0x52,0x52,0x4f,0x52
000010  20287043          DCB      0x20,0x28,0x70,0x43
000014  616d6572          DCB      0x61,0x6d,0x65,0x72
000018  61496e74          DCB      0x61,0x49,0x6e,0x74
00001c  65726661          DCB      0x65,0x72,0x66,0x61
000020  63652d3e          DCB      0x63,0x65,0x2d,0x3e
000024  696e6974          DCB      0x69,0x6e,0x69,0x74
000028  4275726e          DCB      0x42,0x75,0x72,0x6e
00002c  696e6746          DCB      0x69,0x6e,0x67,0x46
000030  756e6328          DCB      0x75,0x6e,0x63,0x28
000034  46414c53          DCB      0x46,0x41,0x4c,0x53
000038  4529203d          DCB      0x45,0x29,0x20,0x3d
00003c  3d204641          DCB      0x3d,0x20,0x46,0x41
000040  4c534529          DCB      0x4c,0x53,0x45,0x29
000044  21210a00          DCB      0x21,0x21,0x0a,0x00
000048  75736243          DCB      0x75,0x73,0x62,0x43
00004c  616d5465          DCB      0x61,0x6d,0x54,0x65
000050  73742045          DCB      0x73,0x74,0x20,0x45
000054  52524f52          DCB      0x52,0x52,0x4f,0x52
000058  20287043          DCB      0x20,0x28,0x70,0x43
00005c  616d6572          DCB      0x61,0x6d,0x65,0x72
000060  61496e74          DCB      0x61,0x49,0x6e,0x74
000064  65726661          DCB      0x65,0x72,0x66,0x61
000068  63652d3e          DCB      0x63,0x65,0x2d,0x3e
00006c  696e6974          DCB      0x69,0x6e,0x69,0x74
000070  46756e63          DCB      0x46,0x75,0x6e,0x63
000074  2846414c          DCB      0x28,0x46,0x41,0x4c
000078  53452920          DCB      0x53,0x45,0x29,0x20
00007c  3d3d2046          DCB      0x3d,0x3d,0x20,0x46
000080  414c5345          DCB      0x41,0x4c,0x53,0x45
000084  2921210a          DCB      0x29,0x21,0x21,0x0a
000088  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  205b5068          DCB      " [PhotoAgent] ",0
000004  6f746f41
000008  67656e74
00000c  5d2000  

                          AREA ||.data||, DATA, ALIGN=2

                  pCameraInterface
                          DCD      0x00000000
                  cameraBurninCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  cameraBurninPhotoErrorCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  cameraBurninFileErrorCounter
                          DCD      0x00000000
                          DCD      0x00000000
                  threadTakePhotoWaitTime
                          DCD      0xffffffff
                  photoAgentPowerStatus
000020  01                DCB      0x01
                  photoAgentIgnoreRun
000021  000000            DCB      0x00,0x00,0x00
                  photoAgentPowerCallabck
                          DCD      ||.conststring||
                          DCD      PhotoAgentPreOffCallback
                          DCD      PhotoAgentOffCallback
                          DCD      PhotoAgentOnCallback
                          DCD      PhotoAgentCheckStatus
                  xTakePhotoSemaphore
                          DCD      0x00000000
                  photoCurrentTime
                          DCD      0x00000000
