; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\mtpprocedure.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mtpprocedure.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\mtpprocedure.crf src\syshal\MtpProcedure.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  reflect PROC
;;;125    // reflects the lower 'bitnum' bits of 'crc'
;;;126    static uint32_t reflect(uint32_t crc, int bitnum)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;127    {
000004  e1a02000          MOV      r2,r0
000008  e1a03001          MOV      r3,r1
;;;128        uint32_t i, j = 1, crcout = 0;
00000c  e3a0c001          MOV      r12,#1
000010  e3a00000          MOV      r0,#0
;;;129        for (i = (uint32_t)1 << (bitnum - 1) ; i != 0 ; i >>= 1)
000014  e2434001          SUB      r4,r3,#1
000018  e3a05001          MOV      r5,#1
00001c  e1a01415          LSL      r1,r5,r4
000020  ea000004          B        |L1.56|
                  |L1.36|
;;;130        {
;;;131            if ((crc & i) != 0) {
000024  e1120001          TST      r2,r1
000028  0a000000          BEQ      |L1.48|
;;;132                crcout |= j;
00002c  e180000c          ORR      r0,r0,r12
                  |L1.48|
;;;133            }
;;;134            j <<= 1;
000030  e1a0c08c          LSL      r12,r12,#1
000034  e1a010a1          LSR      r1,r1,#1              ;129
                  |L1.56|
000038  e3510000          CMP      r1,#0                 ;129
00003c  1afffff8          BNE      |L1.36|
;;;135        }
;;;136        return crcout;
;;;137    }
000040  e8bd8030          POP      {r4,r5,pc}
;;;138    
                          ENDP

                  generate_crc_table PROC
;;;139    // make CRC lookup table used by table algorithms
;;;140    static void generate_crc_table(void)
000044  e92d41f0          PUSH     {r4-r8,lr}
;;;141    {
;;;142        int i, j;
;;;143        uint32_t bit, crc;
;;;144        
;;;145        for (i = 0 ; i < 256 ; i++)
000048  e3a05000          MOV      r5,#0
00004c  ea000029          B        |L1.248|
                  |L1.80|
;;;146        {
;;;147            crc = (uint32_t)i;
000050  e1a04005          MOV      r4,r5
;;;148            if (refin != 0) {
000054  e59f0984          LDR      r0,|L1.2528|
000058  e5900000          LDR      r0,[r0,#0]  ; refin
00005c  e3500000          CMP      r0,#0
000060  0a000003          BEQ      |L1.116|
;;;149                crc = reflect(crc, 8);
000064  e3a01008          MOV      r1,#8
000068  e1a00004          MOV      r0,r4
00006c  ebfffffe          BL       reflect
000070  e1a04000          MOV      r4,r0
                  |L1.116|
;;;150            }
;;;151            crc <<= order - 8;
000074  e59f0968          LDR      r0,|L1.2532|
000078  e5d00000          LDRB     r0,[r0,#0]  ; order
00007c  e2400008          SUB      r0,r0,#8
000080  e1a04014          LSL      r4,r4,r0
;;;152            
;;;153            for (j = 0 ; j < 8 ; j++)
000084  e3a06000          MOV      r6,#0
000088  ea000009          B        |L1.180|
                  |L1.140|
;;;154            {
;;;155                bit = crc & crchighbit;
00008c  e59f0954          LDR      r0,|L1.2536|
000090  e5900000          LDR      r0,[r0,#0]  ; crchighbit
000094  e0047000          AND      r7,r4,r0
;;;156                crc <<= 1;
000098  e1a04084          LSL      r4,r4,#1
;;;157                if (bit != 0) {
00009c  e3570000          CMP      r7,#0
0000a0  0a000002          BEQ      |L1.176|
;;;158                    crc ^= polynom;
0000a4  e59f0940          LDR      r0,|L1.2540|
0000a8  e5900000          LDR      r0,[r0,#0]  ; polynom
0000ac  e0244000          EOR      r4,r4,r0
                  |L1.176|
0000b0  e2866001          ADD      r6,r6,#1              ;153
                  |L1.180|
0000b4  e3560008          CMP      r6,#8                 ;153
0000b8  bafffff3          BLT      |L1.140|
;;;159                }
;;;160            }
;;;161            
;;;162            if (refin != 0)
0000bc  e59f091c          LDR      r0,|L1.2528|
0000c0  e5900000          LDR      r0,[r0,#0]  ; refin
0000c4  e3500000          CMP      r0,#0
0000c8  0a000004          BEQ      |L1.224|
;;;163            {
;;;164                crc = reflect(crc, order);
0000cc  e59f0910          LDR      r0,|L1.2532|
0000d0  e5901000          LDR      r1,[r0,#0]  ; order
0000d4  e1a00004          MOV      r0,r4
0000d8  ebfffffe          BL       reflect
0000dc  e1a04000          MOV      r4,r0
                  |L1.224|
;;;165            }
;;;166            crc &= crcmask;
0000e0  e59f0908          LDR      r0,|L1.2544|
0000e4  e5900000          LDR      r0,[r0,#0]  ; crcmask
0000e8  e0044000          AND      r4,r4,r0
;;;167            crctab[i]= crc;
0000ec  e59f0900          LDR      r0,|L1.2548|
0000f0  e7804105          STR      r4,[r0,r5,LSL #2]
0000f4  e2855001          ADD      r5,r5,#1              ;145
                  |L1.248|
0000f8  e3550c01          CMP      r5,#0x100             ;145
0000fc  baffffd3          BLT      |L1.80|
;;;168        }
;;;169    }
000100  e8bd81f0          POP      {r4-r8,pc}
;;;170    
                          ENDP

                  CryptoService_IRQHandler PROC
;;;175    *************************************************************************************/
;;;176    static void CryptoService_IRQHandler()
000104  e59f08ec          LDR      r0,|L1.2552|
;;;177    {
;;;178        if (TDES_GET_INT_FLAG())
000108  e5900004          LDR      r0,[r0,#4]
00010c  e3100c03          TST      r0,#0x300
000110  0a000005          BEQ      |L1.300|
;;;179        {
;;;180            CryptoDoneFlag = 1;
000114  e3a00001          MOV      r0,#1
000118  e59f18dc          LDR      r1,|L1.2556|
00011c  e5810000          STR      r0,[r1,#0]  ; CryptoDoneFlag
;;;181            TDES_CLR_INT_FLAG();
000120  e3a00c03          MOV      r0,#0x300
000124  e59f18cc          LDR      r1,|L1.2552|
000128  e5810004          STR      r0,[r1,#4]
                  |L1.300|
;;;182        }
;;;183        if (PRNG_GET_INT_FLAG())
00012c  e59f08c4          LDR      r0,|L1.2552|
000130  e5900004          LDR      r0,[r0,#4]
000134  e3100801          TST      r0,#0x10000
000138  0a000005          BEQ      |L1.340|
;;;184        {
;;;185            CryptoDoneFlag = 1;
00013c  e3a00001          MOV      r0,#1
000140  e59f18b4          LDR      r1,|L1.2556|
000144  e5810000          STR      r0,[r1,#0]  ; CryptoDoneFlag
;;;186            PRNG_CLR_INT_FLAG();
000148  e3a00801          MOV      r0,#0x10000
00014c  e59f18a4          LDR      r1,|L1.2552|
000150  e5810004          STR      r0,[r1,#4]
                  |L1.340|
;;;187        }
;;;188    }
000154  e12fff1e          BX       lr
;;;189    
                          ENDP

                  CryptoService PROC
;;;197    *************************************************************************************/
;;;198    static void CryptoService(int CryptoMode, uint8_t *inputBuffer, int inputLength, uint8_t *CryptoKey, BOOL expandKeyFlag)
000158  e92d41f0          PUSH     {r4-r8,lr}
;;;199    {
00015c  e24dd018          SUB      sp,sp,#0x18
000160  e1a04000          MOV      r4,r0
000164  e1a07001          MOV      r7,r1
000168  e1a05002          MOV      r5,r2
00016c  e1a06003          MOV      r6,r3
000170  e59d8030          LDR      r8,[sp,#0x30]
;;;200        uint8_t TripleDES_3Keys[3][8];
;;;201        
;;;202        memcpy(CryptoInputCipher_Pool, inputBuffer, inputLength);
000174  e1a02005          MOV      r2,r5
000178  e1a01007          MOV      r1,r7
00017c  e59f087c          LDR      r0,|L1.2560|
000180  ebfffffe          BL       __aeabi_memcpy
;;;203        TDES_Open(TDES_CHANNEL_0, CryptoMode, TDES_MODE_ECB, TDES_IN_OUT_WHL_SWAP);
000184  e3a03007          MOV      r3,#7
000188  e3a02004          MOV      r2,#4
00018c  e1a01004          MOV      r1,r4
000190  e3a00000          MOV      r0,#0
000194  ebfffffe          BL       TDES_Open
;;;204        if (expandKeyFlag)
000198  e3580000          CMP      r8,#0
00019c  0a000008          BEQ      |L1.452|
;;;205        {
;;;206            // Expand key from 128-bits to 192-bits
;;;207            memcpy(&TripleDES_3Keys[0][0], CryptoKey, SECURITY_KEY_LENGTH_BYTES);   // Set Key1(64-bits), Key2(64-bits) from original key
0001a0  e3a02010          MOV      r2,#0x10
0001a4  e1a01006          MOV      r1,r6
0001a8  e1a0000d          MOV      r0,sp
0001ac  ebfffffe          BL       __aeabi_memcpy
;;;208            memcpy(&TripleDES_3Keys[2][0], CryptoKey, EXPANDED_KEY_LENGTH_BYTES);   // Expanded Key3(64-bits) from Key1
0001b0  e3a02008          MOV      r2,#8
0001b4  e1a01006          MOV      r1,r6
0001b8  e28d0010          ADD      r0,sp,#0x10
0001bc  ebfffffe          BL       __aeabi_memcpy
0001c0  ea000003          B        |L1.468|
                  |L1.452|
;;;209        }
;;;210        else {
;;;211            memcpy(&TripleDES_3Keys[0][0], CryptoKey, (SECURITY_KEY_LENGTH_BYTES + EXPANDED_KEY_LENGTH_BYTES));
0001c4  e3a02018          MOV      r2,#0x18
0001c8  e1a01006          MOV      r1,r6
0001cc  e1a0000d          MOV      r0,sp
0001d0  ebfffffe          BL       __aeabi_memcpy
                  |L1.468|
;;;212        }
;;;213        TDES_SetKey(TDES_CHANNEL_0, TripleDES_3Keys);
0001d4  e1a0100d          MOV      r1,sp
0001d8  e3a00000          MOV      r0,#0
0001dc  ebfffffe          BL       TDES_SetKey
;;;214        TDES_SetInitVect(TDES_CHANNEL_0, InitialVector[0], InitialVector[1]);
0001e0  e59f081c          LDR      r0,|L1.2564|
0001e4  e5902004          LDR      r2,[r0,#4]  ; InitialVector
0001e8  e5901000          LDR      r1,[r0,#0]  ; InitialVector
0001ec  e3a00000          MOV      r0,#0
0001f0  ebfffffe          BL       TDES_SetInitVect
;;;215        TDES_SetDMATransfer(TDES_CHANNEL_0, (uint32_t)CryptoInputCipher, (uint32_t)CryptoOutputCipher, inputLength);
0001f4  e1a03005          MOV      r3,r5
0001f8  e59f0808          LDR      r0,|L1.2568|
0001fc  e5902000          LDR      r2,[r0,#0]  ; CryptoOutputCipher
000200  e59f0804          LDR      r0,|L1.2572|
000204  e5901000          LDR      r1,[r0,#0]  ; CryptoInputCipher
000208  e3a00000          MOV      r0,#0
00020c  ebfffffe          BL       TDES_SetDMATransfer
;;;216        
;;;217        CryptoDoneFlag = 0;
000210  e3a00000          MOV      r0,#0
000214  e59f17e0          LDR      r1,|L1.2556|
000218  e5810000          STR      r0,[r1,#0]  ; CryptoDoneFlag
;;;218        TDES_Start(TDES_CHANNEL_0, CRYPTO_DMA_ONE_SHOT);
00021c  e3a01005          MOV      r1,#5
000220  ebfffffe          BL       TDES_Start
;;;219        while (!CryptoDoneFlag);
000224  e1a00000          MOV      r0,r0
                  |L1.552|
000228  e59f07cc          LDR      r0,|L1.2556|
00022c  e5900000          LDR      r0,[r0,#0]  ; CryptoDoneFlag
000230  e3500000          CMP      r0,#0
000234  0afffffb          BEQ      |L1.552|
;;;220    }
000238  e28dd018          ADD      sp,sp,#0x18
00023c  e8bd81f0          POP      {r4-r8,pc}
;;;221    
                          ENDP

                  CRCTool_TableFast PROC
;;;687    // only usable with polynom orders of 8, 16, 24 or 32.
;;;688    uint32_t CRCTool_TableFast(uint8_t *p, int p_len)
000240  e92d41f0          PUSH     {r4-r8,lr}
;;;689    {
000244  e1a06000          MOV      r6,r0
000248  e1a07001          MOV      r7,r1
;;;690        uint32_t crc = crcinit_direct;
00024c  e59f07bc          LDR      r0,|L1.2576|
000250  e5905000          LDR      r5,[r0,#0]  ; crcinit_direct
;;;691        int i;
;;;692        
;;;693        if (refin != 0) {
000254  e59f0784          LDR      r0,|L1.2528|
000258  e5900000          LDR      r0,[r0,#0]  ; refin
00025c  e3500000          CMP      r0,#0
000260  0a000004          BEQ      |L1.632|
;;;694            crc = reflect(crc, order);
000264  e59f0778          LDR      r0,|L1.2532|
000268  e5901000          LDR      r1,[r0,#0]  ; order
00026c  e1a00005          MOV      r0,r5
000270  ebfffffe          BL       reflect
000274  e1a05000          MOV      r5,r0
                  |L1.632|
;;;695        }
;;;696        if (refin == 0)
000278  e59f0760          LDR      r0,|L1.2528|
00027c  e5900000          LDR      r0,[r0,#0]  ; refin
000280  e3500000          CMP      r0,#0
000284  1a00000f          BNE      |L1.712|
;;;697        {
;;;698            for (i = 0 ; i < p_len ; i++ ) {
000288  e3a04000          MOV      r4,#0
00028c  ea00000a          B        |L1.700|
                  |L1.656|
;;;699                crc = (crc << 8) ^ crctab[((crc >> (order - 8)) & 0xff) ^ p[i]];
000290  e59f074c          LDR      r0,|L1.2532|
000294  e5d00000          LDRB     r0,[r0,#0]  ; order
000298  e2400008          SUB      r0,r0,#8
00029c  e1a00035          LSR      r0,r5,r0
0002a0  e20000ff          AND      r0,r0,#0xff
0002a4  e7d61004          LDRB     r1,[r6,r4]
0002a8  e0200001          EOR      r0,r0,r1
0002ac  e59f1740          LDR      r1,|L1.2548|
0002b0  e7910100          LDR      r0,[r1,r0,LSL #2]
0002b4  e0205405          EOR      r5,r0,r5,LSL #8
0002b8  e2844001          ADD      r4,r4,#1              ;698
                  |L1.700|
0002bc  e1540007          CMP      r4,r7                 ;698
0002c0  bafffff2          BLT      |L1.656|
0002c4  ea00000a          B        |L1.756|
                  |L1.712|
;;;700            }
;;;701        }
;;;702        else
;;;703        {
;;;704            for (i = 0 ; i < p_len ; i++) {
0002c8  e3a04000          MOV      r4,#0
0002cc  ea000006          B        |L1.748|
                  |L1.720|
;;;705                crc = (crc >> 8) ^ crctab[(crc & 0xff) ^ p[i]];
0002d0  e20500ff          AND      r0,r5,#0xff
0002d4  e7d61004          LDRB     r1,[r6,r4]
0002d8  e0200001          EOR      r0,r0,r1
0002dc  e59f1710          LDR      r1,|L1.2548|
0002e0  e7910100          LDR      r0,[r1,r0,LSL #2]
0002e4  e0205425          EOR      r5,r0,r5,LSR #8
0002e8  e2844001          ADD      r4,r4,#1              ;704
                  |L1.748|
0002ec  e1540007          CMP      r4,r7                 ;704
0002f0  bafffff6          BLT      |L1.720|
                  |L1.756|
;;;706            }
;;;707        }
;;;708        if ((refout ^ refin) != 0) {
0002f4  e59f0718          LDR      r0,|L1.2580|
0002f8  e5900000          LDR      r0,[r0,#0]  ; refout
0002fc  e59f16dc          LDR      r1,|L1.2528|
000300  e5911000          LDR      r1,[r1,#0]  ; refin
000304  e1300001          TEQ      r0,r1
000308  0a000004          BEQ      |L1.800|
;;;709            crc = reflect(crc, order);
00030c  e59f06d0          LDR      r0,|L1.2532|
000310  e5901000          LDR      r1,[r0,#0]  ; order
000314  e1a00005          MOV      r0,r5
000318  ebfffffe          BL       reflect
00031c  e1a05000          MOV      r5,r0
                  |L1.800|
;;;710        }
;;;711        crc ^= crcxor;
000320  e59f06f0          LDR      r0,|L1.2584|
000324  e5900000          LDR      r0,[r0,#0]  ; crcxor
000328  e0255000          EOR      r5,r5,r0
;;;712        crc&= crcmask;
00032c  e59f06bc          LDR      r0,|L1.2544|
000330  e5900000          LDR      r0,[r0,#0]  ; crcmask
000334  e0055000          AND      r5,r5,r0
;;;713        return crc;
000338  e1a00005          MOV      r0,r5
;;;714    }
00033c  e8bd81f0          POP      {r4-r8,pc}
;;;715    
                          ENDP

                  RTC_CommonReplyCommand PROC
;;;221    
;;;222    static void RTC_CommonReplyCommand(uint8_t replyCode)
000340  e92d4070          PUSH     {r4-r6,lr}
;;;223    {
000344  e1a04000          MOV      r4,r0
;;;224        TxCounter = 0;
000348  e3a00000          MOV      r0,#0
00034c  e59f16c8          LDR      r1,|L1.2588|
000350  e5810000          STR      r0,[r1,#0]  ; TxCounter
;;;225        TxBuffer[TxCounter++] = CMD_PARAMETER_MODE_COMMON_REPLY;
000354  e3a0009b          MOV      r0,#0x9b
000358  e5911000          LDR      r1,[r1,#0]  ; TxCounter
00035c  e59f26b8          LDR      r2,|L1.2588|
000360  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000364  e2822001          ADD      r2,r2,#1
000368  e59f36ac          LDR      r3,|L1.2588|
00036c  e5832000          STR      r2,[r3,#0]  ; TxCounter
000370  e59f26a8          LDR      r2,|L1.2592|
000374  e7c20001          STRB     r0,[r2,r1]
;;;226        TxBuffer[TxCounter++] = 0x01;
000378  e3a00001          MOV      r0,#1
00037c  e2831000          ADD      r1,r3,#0
000380  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000384  e2832000          ADD      r2,r3,#0
000388  e5922000          LDR      r2,[r2,#0]  ; TxCounter
00038c  e2822001          ADD      r2,r2,#1
000390  e5832000          STR      r2,[r3,#0]  ; TxCounter
000394  e59f2684          LDR      r2,|L1.2592|
000398  e7c20001          STRB     r0,[r2,r1]
;;;227        TxBuffer[TxCounter++] = replyCode;
00039c  e2830000          ADD      r0,r3,#0
0003a0  e5900000          LDR      r0,[r0,#0]  ; TxCounter
0003a4  e2831000          ADD      r1,r3,#0
0003a8  e5911000          LDR      r1,[r1,#0]  ; TxCounter
0003ac  e2811001          ADD      r1,r1,#1
0003b0  e2832000          ADD      r2,r3,#0
0003b4  e5821000          STR      r1,[r2,#0]  ; TxCounter
0003b8  e59f1660          LDR      r1,|L1.2592|
0003bc  e7c14000          STRB     r4,[r1,r0]
;;;228        
;;;229        // Calculate CRC Result
;;;230        uint16_t CRCResult = CRCTool_TableFast(TxBuffer, TxCounter);
0003c0  e2820000          ADD      r0,r2,#0
0003c4  e5901000          LDR      r1,[r0,#0]  ; TxCounter
0003c8  e59f0650          LDR      r0,|L1.2592|
0003cc  ebfffffe          BL       CRCTool_TableFast
0003d0  e1a05800          LSL      r5,r0,#16
0003d4  e1a05825          LSR      r5,r5,#16
;;;231        TxBuffer[TxCounter++] = (uint8_t)(CRCResult >> 8);
0003d8  e1a00445          ASR      r0,r5,#8
0003dc  e59f1638          LDR      r1,|L1.2588|
0003e0  e5911000          LDR      r1,[r1,#0]  ; TxCounter
0003e4  e59f2630          LDR      r2,|L1.2588|
0003e8  e5922000          LDR      r2,[r2,#0]  ; TxCounter
0003ec  e2822001          ADD      r2,r2,#1
0003f0  e59f3624          LDR      r3,|L1.2588|
0003f4  e5832000          STR      r2,[r3,#0]  ; TxCounter
0003f8  e59f2620          LDR      r2,|L1.2592|
0003fc  e7c20001          STRB     r0,[r2,r1]
;;;232        TxBuffer[TxCounter++] = (uint8_t)CRCResult;
000400  e2831000          ADD      r1,r3,#0
000404  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000408  e2832000          ADD      r2,r3,#0
00040c  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000410  e2822001          ADD      r2,r2,#1
000414  e5832000          STR      r2,[r3,#0]  ; TxCounter
000418  e59f2600          LDR      r2,|L1.2592|
00041c  e7c25001          STRB     r5,[r2,r1]
;;;233        pCommunicationInterface->writeFunc(TxBuffer, TxCounter);
000420  e59f05fc          LDR      r0,|L1.2596|
000424  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
000428  e5902004          LDR      r2,[r0,#4]
00042c  e2830000          ADD      r0,r3,#0
000430  e5901000          LDR      r1,[r0,#0]  ; TxCounter
000434  e59f05e4          LDR      r0,|L1.2592|
000438  e12fff32          BLX      r2
;;;234    }
00043c  e8bd8070          POP      {r4-r6,pc}
;;;235    
                          ENDP

                  RTC_ExecuteUpdateRTCTime PROC
;;;236    static BOOL RTC_ExecuteUpdateRTCTime(void)
000440  e92d4ffe          PUSH     {r1-r11,lr}
;;;237    {
;;;238        //uint8_t tempBuff[256];
;;;239        //uint32_t utcTime = (uint32_t)(RTCBuffer[3] << 24) + (uint32_t)(RTCBuffer[2] << 16) + (uint32_t)(RTCBuffer[1] << 8) + RTCBuffer[0];
;;;240        //sprintf((char *)tempBuff, "UTCTime : %d\r\n", utcTime);
;;;241        //pCommunicationInterface->writeFunc(tempBuff, strlen((char *)tempBuff));
;;;242        //vTaskDelay(100);
;;;243        
;;;244        uint32_t rtcYear, rtcMonth, rtcDay, rtcDayOfWeek, rtcHour, rtcMinute, rtcSecond;
;;;245        rtcYear = (uint32_t)(RTCBuffer[5] << 8) + (uint32_t)RTCBuffer[4];
000444  e59f05dc          LDR      r0,|L1.2600|
000448  e5d00004          LDRB     r0,[r0,#4]  ; RTCBuffer
00044c  e59f15d4          LDR      r1,|L1.2600|
000450  e5d11005          LDRB     r1,[r1,#5]  ; RTCBuffer
000454  e0804401          ADD      r4,r0,r1,LSL #8
;;;246        rtcMonth = (uint32_t)RTCBuffer[6];
000458  e59f05c8          LDR      r0,|L1.2600|
00045c  e5d05006          LDRB     r5,[r0,#6]  ; RTCBuffer
;;;247        rtcDay = (uint32_t)RTCBuffer[7];
000460  e5d06007          LDRB     r6,[r0,#7]  ; RTCBuffer
;;;248        rtcDayOfWeek = (uint32_t)RTCBuffer[8];
000464  e5d0a008          LDRB     r10,[r0,#8]  ; RTCBuffer
;;;249        rtcHour = (uint32_t)RTCBuffer[9];
000468  e5d07009          LDRB     r7,[r0,#9]  ; RTCBuffer
;;;250        rtcMinute = (uint32_t)RTCBuffer[10];
00046c  e5d0800a          LDRB     r8,[r0,#0xa]  ; RTCBuffer
;;;251        rtcSecond = (uint32_t)RTCBuffer[11];
000470  e5d0900b          LDRB     r9,[r0,#0xb]  ; RTCBuffer
;;;252        return (SetOSTime(rtcYear, rtcMonth, rtcDay, rtcHour, rtcMinute, rtcSecond, rtcDayOfWeek));
000474  e1a03007          MOV      r3,r7
000478  e1a02006          MOV      r2,r6
00047c  e1a01005          MOV      r1,r5
000480  e1a00004          MOV      r0,r4
000484  e88d0700          STM      sp,{r8-r10}
000488  ebfffffe          BL       SetOSTime
;;;253    }
00048c  e8bd8ffe          POP      {r1-r11,pc}
;;;254    
                          ENDP

                  RTC_ExecuteSetDeviceID PROC
;;;255    #define MANUFACTURE_DEVICE_ID_LENGTH    (SET_DEVICE_PARAMETER_MESSAGE_LENGTH - sizeof(uint32_t) - sizeof(uint32_t))
;;;256    static BOOL RTC_ExecuteSetDeviceID(void)
000490  e92d4010          PUSH     {r4,lr}
;;;257    {
000494  e24dd040          SUB      sp,sp,#0x40
;;;258        typedef struct
;;;259        {
;;;260            uint32_t deviceID;
;;;261            uint32_t burninTime;
;;;262            uint8_t manufactureDeviceID[MANUFACTURE_DEVICE_ID_LENGTH];
;;;263        } _deviceParameter;
;;;264        _deviceParameter oldDeviceParameter, newDeviceParameter;
;;;265        
;;;266        BOOL status = SFlashLoadStorage(SFLASH_STORAGE_EPM_SERIAL_ID_INDEX_BASE, (uint8_t*)&oldDeviceParameter, sizeof(oldDeviceParameter));
000498  e3a02020          MOV      r2,#0x20
00049c  e28d1020          ADD      r1,sp,#0x20
0004a0  e3a00000          MOV      r0,#0
0004a4  ebfffffe          BL       SFlashLoadStorage
0004a8  e1a04000          MOV      r4,r0
;;;267        
;;;268        newDeviceParameter.deviceID = (uint32_t)(DeviceParameterBuffer[3] << 24) + (uint32_t)(DeviceParameterBuffer[2] << 16) + (uint32_t)(DeviceParameterBuffer[1] << 8) + DeviceParameterBuffer[0];
0004ac  e59f0578          LDR      r0,|L1.2604|
0004b0  e5d00003          LDRB     r0,[r0,#3]  ; DeviceParameterBuffer
0004b4  e1a00c00          LSL      r0,r0,#24
0004b8  e59f156c          LDR      r1,|L1.2604|
0004bc  e5d11002          LDRB     r1,[r1,#2]  ; DeviceParameterBuffer
0004c0  e0800801          ADD      r0,r0,r1,LSL #16
0004c4  e59f1560          LDR      r1,|L1.2604|
0004c8  e5d11001          LDRB     r1,[r1,#1]  ; DeviceParameterBuffer
0004cc  e0800401          ADD      r0,r0,r1,LSL #8
0004d0  e59f1554          LDR      r1,|L1.2604|
0004d4  e5d11000          LDRB     r1,[r1,#0]  ; DeviceParameterBuffer
0004d8  e0800001          ADD      r0,r0,r1
0004dc  e58d0000          STR      r0,[sp,#0]
;;;269        if (newDeviceParameter.deviceID == 0) {
0004e0  e59d0000          LDR      r0,[sp,#0]
0004e4  e3500000          CMP      r0,#0
0004e8  1a000001          BNE      |L1.1268|
;;;270            newDeviceParameter.deviceID = oldDeviceParameter.deviceID;
0004ec  e59d0020          LDR      r0,[sp,#0x20]
0004f0  e58d0000          STR      r0,[sp,#0]
                  |L1.1268|
;;;271        }
;;;272        
;;;273        newDeviceParameter.burninTime = (uint32_t)(DeviceParameterBuffer[7] << 24) + (uint32_t)(DeviceParameterBuffer[6] << 16) + (uint32_t)(DeviceParameterBuffer[5] << 8) + DeviceParameterBuffer[4];
0004f4  e59f0530          LDR      r0,|L1.2604|
0004f8  e5d00007          LDRB     r0,[r0,#7]  ; DeviceParameterBuffer
0004fc  e1a00c00          LSL      r0,r0,#24
000500  e59f1524          LDR      r1,|L1.2604|
000504  e5d11006          LDRB     r1,[r1,#6]  ; DeviceParameterBuffer
000508  e0800801          ADD      r0,r0,r1,LSL #16
00050c  e59f1518          LDR      r1,|L1.2604|
000510  e5d11005          LDRB     r1,[r1,#5]  ; DeviceParameterBuffer
000514  e0800401          ADD      r0,r0,r1,LSL #8
000518  e59f150c          LDR      r1,|L1.2604|
00051c  e5d11004          LDRB     r1,[r1,#4]  ; DeviceParameterBuffer
000520  e0800001          ADD      r0,r0,r1
000524  e58d0004          STR      r0,[sp,#4]
;;;274        if (newDeviceParameter.burninTime == 0xFFFFFFFF) {
000528  e59d0004          LDR      r0,[sp,#4]
00052c  e3700001          CMN      r0,#1
000530  1a000001          BNE      |L1.1340|
;;;275            newDeviceParameter.burninTime = oldDeviceParameter.burninTime;
000534  e59d0024          LDR      r0,[sp,#0x24]
000538  e58d0004          STR      r0,[sp,#4]
                  |L1.1340|
;;;276        }
;;;277        
;;;278        if (DeviceParameterBuffer[8] == 0x00) {
00053c  e59f04e8          LDR      r0,|L1.2604|
000540  e5d00008          LDRB     r0,[r0,#8]  ; DeviceParameterBuffer
000544  e3500000          CMP      r0,#0
000548  1a000004          BNE      |L1.1376|
;;;279            memcpy(newDeviceParameter.manufactureDeviceID, oldDeviceParameter.manufactureDeviceID, MANUFACTURE_DEVICE_ID_LENGTH);
00054c  e3a02018          MOV      r2,#0x18
000550  e28d1028          ADD      r1,sp,#0x28
000554  e28d0008          ADD      r0,sp,#8
000558  ebfffffe          BL       __aeabi_memcpy4
00055c  ea000003          B        |L1.1392|
                  |L1.1376|
;;;280        }
;;;281        else {
;;;282            memcpy(newDeviceParameter.manufactureDeviceID, &DeviceParameterBuffer[8], MANUFACTURE_DEVICE_ID_LENGTH);
000560  e3a02018          MOV      r2,#0x18
000564  e59f14c4          LDR      r1,|L1.2608|
000568  e28d0008          ADD      r0,sp,#8
00056c  ebfffffe          BL       __aeabi_memcpy4
                  |L1.1392|
;;;283        }
;;;284        return (SFlashSaveStorage(SFLASH_STORAGE_EPM_SERIAL_ID_INDEX, (uint8_t*)&newDeviceParameter, SET_DEVICE_PARAMETER_MESSAGE_LENGTH));
000570  e3a02020          MOV      r2,#0x20
000574  e1a0100d          MOV      r1,sp
000578  e3a00000          MOV      r0,#0
00057c  ebfffffe          BL       SFlashSaveStorage
000580  e28dd040          ADD      sp,sp,#0x40
;;;285        
;;;286        //uint32_t deviceID = (uint32_t)(DeviceParameterBuffer[3] << 24) + (uint32_t)(DeviceParameterBuffer[2] << 16) + (uint32_t)(DeviceParameterBuffer[1] << 8) + DeviceParameterBuffer[0];
;;;287        //return (SFlashSaveStorage(SFLASH_STORAGE_EPM_SERIAL_ID_INDEX, (uint8_t*)&deviceID, SET_DEVICE_PARAMETER_MESSAGE_LENGTH));
;;;288    }
000584  e8bd8010          POP      {r4,pc}
;;;289    
                          ENDP

                  RandomNumberService PROC
;;;296    *************************************************************************************/
;;;297    static void RandomNumberService(int generateType, uint8_t *outBuffer)
000588  e92d4070          PUSH     {r4-r6,lr}
;;;298    {
00058c  e1a05000          MOV      r5,r0
000590  e1a04001          MOV      r4,r1
;;;299        PRNG_Open(generateType, 0, 0);
000594  e3a02000          MOV      r2,#0
000598  e1a01002          MOV      r1,r2
00059c  e1a00005          MOV      r0,r5
0005a0  ebfffffe          BL       PRNG_Open
;;;300        CryptoDoneFlag = 0;
0005a4  e3a00000          MOV      r0,#0
0005a8  e59f144c          LDR      r1,|L1.2556|
0005ac  e5810000          STR      r0,[r1,#0]  ; CryptoDoneFlag
;;;301        PRNG_Start();
0005b0  ebfffffe          BL       PRNG_Start
;;;302        while (!CryptoDoneFlag);
0005b4  e1a00000          MOV      r0,r0
                  |L1.1464|
0005b8  e59f043c          LDR      r0,|L1.2556|
0005bc  e5900000          LDR      r0,[r0,#0]  ; CryptoDoneFlag
0005c0  e3500000          CMP      r0,#0
0005c4  0afffffb          BEQ      |L1.1464|
;;;303        PRNG_Read((uint32_t *)outBuffer);
0005c8  e1a00004          MOV      r0,r4
0005cc  ebfffffe          BL       PRNG_Read
;;;304    }
0005d0  e8bd8070          POP      {r4-r6,pc}
;;;305    
                          ENDP

                  MTP_BuildAuthenSessionKey PROC
;;;311    *************************************************************************************/
;;;312    static void MTP_BuildAuthenSessionKey(uint8_t *Rnd_A, uint8_t *Rnd_B)
0005d4  e92d4070          PUSH     {r4-r6,lr}
;;;313    {
0005d8  e1a04000          MOV      r4,r0
0005dc  e1a05001          MOV      r5,r1
;;;314        memset(AuthenSessionKey, 0x00, sizeof(AuthenSessionKey));
0005e0  e3a01018          MOV      r1,#0x18
0005e4  e59f0448          LDR      r0,|L1.2612|
0005e8  ebfffffe          BL       __aeabi_memclr4
;;;315        memcpy(&AuthenSessionKey[0], &Rnd_B[4], 4);
0005ec  e3a02004          MOV      r2,#4
0005f0  e2851004          ADD      r1,r5,#4
0005f4  e59f0438          LDR      r0,|L1.2612|
0005f8  ebfffffe          BL       __aeabi_memcpy
;;;316        memcpy(&AuthenSessionKey[4], &Rnd_A[0], 4);
0005fc  e3a02004          MOV      r2,#4
000600  e1a01004          MOV      r1,r4
000604  e59f042c          LDR      r0,|L1.2616|
000608  ebfffffe          BL       __aeabi_memcpy
;;;317        memcpy(&AuthenSessionKey[8], &Rnd_A[4], 4);
00060c  e3a02004          MOV      r2,#4
000610  e2841004          ADD      r1,r4,#4
000614  e59f0420          LDR      r0,|L1.2620|
000618  ebfffffe          BL       __aeabi_memcpy
;;;318        memcpy(&AuthenSessionKey[12], &Rnd_B[0], 4);
00061c  e3a02004          MOV      r2,#4
000620  e1a01005          MOV      r1,r5
000624  e59f0414          LDR      r0,|L1.2624|
000628  ebfffffe          BL       __aeabi_memcpy
;;;319        memcpy(&AuthenSessionKey[16], &Rnd_A[2], 4);
00062c  e3a02004          MOV      r2,#4
000630  e2841002          ADD      r1,r4,#2
000634  e59f0408          LDR      r0,|L1.2628|
000638  ebfffffe          BL       __aeabi_memcpy
;;;320        memcpy(&AuthenSessionKey[20], &Rnd_B[2], 4);
00063c  e3a02004          MOV      r2,#4
000640  e2851002          ADD      r1,r5,#2
000644  e59f03fc          LDR      r0,|L1.2632|
000648  ebfffffe          BL       __aeabi_memcpy
;;;321        EnableAuthenSessionKeyFlag = TRUE;
00064c  e3a00001          MOV      r0,#1
000650  e59f13f4          LDR      r1,|L1.2636|
000654  e5c10000          STRB     r0,[r1,#0]  ; EnableAuthenSessionKeyFlag
;;;322    }
000658  e8bd8070          POP      {r4-r6,pc}
;;;323    
                          ENDP

                  MTP_SendMutualAuthenticate PROC
;;;328    *************************************************************************************/
;;;329    static void MTP_SendMutualAuthenticate(uint8_t *Rnd_B)
00065c  e92d40f8          PUSH     {r3-r7,lr}
;;;330    {
000660  e1a04000          MOV      r4,r0
;;;331        uint16_t CRCResult;
;;;332        uint8_t KeyIndex;
;;;333        
;;;334        KeyIndex = Rnd_B[RANDOM_NUMBER_LENGTH - 1] % 10;
000664  e5d40007          LDRB     r0,[r4,#7]
000668  e3a0100a          MOV      r1,#0xa
00066c  ebfffffe          BL       __aeabi_idivmod
000670  e20160ff          AND      r6,r1,#0xff
;;;335        TxCounter = 0;
000674  e3a00000          MOV      r0,#0
000678  e59f139c          LDR      r1,|L1.2588|
00067c  e5810000          STR      r0,[r1,#0]  ; TxCounter
;;;336        TxBuffer[TxCounter++] = CMD_MUTUAL_AUTHENTICATE;
000680  e3a00092          MOV      r0,#0x92
000684  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000688  e59f238c          LDR      r2,|L1.2588|
00068c  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000690  e2822001          ADD      r2,r2,#1
000694  e59f3380          LDR      r3,|L1.2588|
000698  e5832000          STR      r2,[r3,#0]  ; TxCounter
00069c  e59f237c          LDR      r2,|L1.2592|
0006a0  e7c20001          STRB     r0,[r2,r1]
;;;337        TxBuffer[TxCounter++] = RANDOM_NUMBER_LENGTH + 1;
0006a4  e3a00009          MOV      r0,#9
0006a8  e2831000          ADD      r1,r3,#0
0006ac  e5911000          LDR      r1,[r1,#0]  ; TxCounter
0006b0  e2832000          ADD      r2,r3,#0
0006b4  e5922000          LDR      r2,[r2,#0]  ; TxCounter
0006b8  e2822001          ADD      r2,r2,#1
0006bc  e5832000          STR      r2,[r3,#0]  ; TxCounter
0006c0  e59f2358          LDR      r2,|L1.2592|
0006c4  e7c20001          STRB     r0,[r2,r1]
;;;338        TxBuffer[TxCounter++] = KeyIndex;
0006c8  e2830000          ADD      r0,r3,#0
0006cc  e5900000          LDR      r0,[r0,#0]  ; TxCounter
0006d0  e2831000          ADD      r1,r3,#0
0006d4  e5911000          LDR      r1,[r1,#0]  ; TxCounter
0006d8  e2811001          ADD      r1,r1,#1
0006dc  e2832000          ADD      r2,r3,#0
0006e0  e5821000          STR      r1,[r2,#0]  ; TxCounter
0006e4  e59f1334          LDR      r1,|L1.2592|
0006e8  e7c16000          STRB     r6,[r1,r0]
;;;339        
;;;340        CryptoService(CRYPTO_MODE_ENCRYPT, Rnd_B, RANDOM_NUMBER_LENGTH, &SECURITY_KEY[KeyIndex][0], TRUE);
0006ec  e3a00001          MOV      r0,#1
0006f0  e58d0000          STR      r0,[sp,#0]
0006f4  e59f0354          LDR      r0,|L1.2640|
0006f8  e0803206          ADD      r3,r0,r6,LSL #4
0006fc  e3a02008          MOV      r2,#8
000700  e1a01004          MOV      r1,r4
000704  e3a00001          MOV      r0,#1
000708  ebfffffe          BL       CryptoService
;;;341        memcpy(&TxBuffer[TxCounter], CryptoOutputCipher, RANDOM_NUMBER_LENGTH);
00070c  e59f130c          LDR      r1,|L1.2592|
000710  e59f2304          LDR      r2,|L1.2588|
000714  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000718  e0810002          ADD      r0,r1,r2
00071c  e3a02008          MOV      r2,#8
000720  e59f12e0          LDR      r1,|L1.2568|
000724  e5911000          LDR      r1,[r1,#0]  ; CryptoOutputCipher
000728  ebfffffe          BL       __aeabi_memcpy
;;;342        TxCounter += RANDOM_NUMBER_LENGTH;
00072c  e59f02e8          LDR      r0,|L1.2588|
000730  e5900000          LDR      r0,[r0,#0]  ; TxCounter
000734  e2800008          ADD      r0,r0,#8
000738  e59f12dc          LDR      r1,|L1.2588|
00073c  e5810000          STR      r0,[r1,#0]  ; TxCounter
;;;343        
;;;344        // Calculate & Compare CRC Result
;;;345        CRCResult = CRCTool_TableFast(TxBuffer, TxCounter);
000740  e2810000          ADD      r0,r1,#0
000744  e5901000          LDR      r1,[r0,#0]  ; TxCounter
000748  e59f02d0          LDR      r0,|L1.2592|
00074c  ebfffffe          BL       CRCTool_TableFast
000750  e1a05800          LSL      r5,r0,#16
000754  e1a05825          LSR      r5,r5,#16
;;;346        TxBuffer[TxCounter++] = (uint8_t)(CRCResult >> 8);
000758  e1a00445          ASR      r0,r5,#8
00075c  e59f12b8          LDR      r1,|L1.2588|
000760  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000764  e59f22b0          LDR      r2,|L1.2588|
000768  e5922000          LDR      r2,[r2,#0]  ; TxCounter
00076c  e2822001          ADD      r2,r2,#1
000770  e59f32a4          LDR      r3,|L1.2588|
000774  e5832000          STR      r2,[r3,#0]  ; TxCounter
000778  e59f22a0          LDR      r2,|L1.2592|
00077c  e7c20001          STRB     r0,[r2,r1]
;;;347        TxBuffer[TxCounter++] = (uint8_t)CRCResult;
000780  e2831000          ADD      r1,r3,#0
000784  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000788  e2832000          ADD      r2,r3,#0
00078c  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000790  e2822001          ADD      r2,r2,#1
000794  e5832000          STR      r2,[r3,#0]  ; TxCounter
000798  e59f2280          LDR      r2,|L1.2592|
00079c  e7c25001          STRB     r5,[r2,r1]
;;;348        pCommunicationInterface->writeFunc(TxBuffer, TxCounter);
0007a0  e59f027c          LDR      r0,|L1.2596|
0007a4  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
0007a8  e5902004          LDR      r2,[r0,#4]
0007ac  e2830000          ADD      r0,r3,#0
0007b0  e5901000          LDR      r1,[r0,#0]  ; TxCounter
0007b4  e59f0264          LDR      r0,|L1.2592|
0007b8  e12fff32          BLX      r2
;;;349    }
0007bc  e8bd80f8          POP      {r3-r7,pc}
;;;350    
                          ENDP

                  MTP_ExecuteWriteHashKey PROC
;;;355    *************************************************************************************/
;;;356    static BOOL MTP_ExecuteWriteHashKey(void)
0007c0  e92d4070          PUSH     {r4-r6,lr}
;;;357    {
0007c4  e24ddf42          SUB      sp,sp,#0x108
;;;358        uint16_t CRCResult;
;;;359        uint8_t tempBuff[256];
;;;360        uint32_t *pMTPHashKey = (uint32_t *)MTP_HashKey;;
0007c8  e59f5284          LDR      r5,|L1.2644|
;;;361        sprintf((char *)tempBuff, "Convert2Interger : %d\r\n", *pMTPHashKey);
0007cc  e28f1fa1          ADR      r1,|L1.2648|
0007d0  e28d0008          ADD      r0,sp,#8
0007d4  e5952000          LDR      r2,[r5,#0]
0007d8  ebfffffe          BL       __2sprintf
;;;362        pCommunicationInterface->writeFunc(tempBuff, strlen((char *)tempBuff));
0007dc  e28d0008          ADD      r0,sp,#8
0007e0  ebfffffe          BL       strlen
0007e4  e1a06000          MOV      r6,r0
0007e8  e59f0234          LDR      r0,|L1.2596|
0007ec  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
0007f0  e1a01006          MOV      r1,r6
0007f4  e5902004          LDR      r2,[r0,#4]
0007f8  e28d0008          ADD      r0,sp,#8
0007fc  e12fff32          BLX      r2
;;;363        sprintf((char *)tempBuff, "MTP Key : 0x%02x 0x%02x 0x%02x 0x%02x\r\n", MTP_HashKey[0], MTP_HashKey[1], MTP_HashKey[2], MTP_HashKey[3]);
000800  e2850000          ADD      r0,r5,#0
000804  e5d00003          LDRB     r0,[r0,#3]  ; MTP_HashKey
000808  e2851000          ADD      r1,r5,#0
00080c  e5d11002          LDRB     r1,[r1,#2]  ; MTP_HashKey
000810  e58d0004          STR      r0,[sp,#4]
000814  e2850000          ADD      r0,r5,#0
000818  e58d1000          STR      r1,[sp,#0]
00081c  e5d03001          LDRB     r3,[r0,#1]  ; MTP_HashKey
000820  e5d02000          LDRB     r2,[r0,#0]  ; MTP_HashKey
000824  e28f1f91          ADR      r1,|L1.2672|
000828  e28d0008          ADD      r0,sp,#8
00082c  ebfffffe          BL       __2sprintf
;;;364        pCommunicationInterface->writeFunc(tempBuff, strlen((char *)tempBuff));
000830  e28d0008          ADD      r0,sp,#8
000834  ebfffffe          BL       strlen
000838  e1a06000          MOV      r6,r0
00083c  e59f01e0          LDR      r0,|L1.2596|
000840  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
000844  e1a01006          MOV      r1,r6
000848  e5902004          LDR      r2,[r0,#4]
00084c  e28d0008          ADD      r0,sp,#8
000850  e12fff32          BLX      r2
;;;365        vTaskDelay(100);
000854  e3a00064          MOV      r0,#0x64
000858  ebfffffe          BL       vTaskDelay
;;;366        
;;;367        /* enable MTP clock */
;;;368    	outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | (1 << 26));
00085c  e3a0020b          MOV      r0,#0xb0000000
000860  e590021c          LDR      r0,[r0,#0x21c]
000864  e3800301          ORR      r0,r0,#0x4000000
000868  e3a0120b          MOV      r1,#0xb0000000
00086c  e581021c          STR      r0,[r1,#0x21c]
;;;369    	// Dealy 1 tick circle
;;;370    	vTaskDelay(1);
000870  e3a00001          MOV      r0,#1
000874  ebfffffe          BL       vTaskDelay
;;;371    	TxCounter = 0;
000878  e3a00000          MOV      r0,#0
00087c  e59f1198          LDR      r1,|L1.2588|
000880  e5810000          STR      r0,[r1,#0]  ; TxCounter
;;;372        TxBuffer[TxCounter++] = CMD_MTP_HASH_KEY_RESULT;
000884  e3a00094          MOV      r0,#0x94
000888  e5911000          LDR      r1,[r1,#0]  ; TxCounter
00088c  e59f2188          LDR      r2,|L1.2588|
000890  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000894  e2822001          ADD      r2,r2,#1
000898  e59f317c          LDR      r3,|L1.2588|
00089c  e5832000          STR      r2,[r3,#0]  ; TxCounter
0008a0  e59f2178          LDR      r2,|L1.2592|
0008a4  e7c20001          STRB     r0,[r2,r1]
;;;373        TxBuffer[TxCounter++] = 0x01;
0008a8  e3a00001          MOV      r0,#1
0008ac  e2831000          ADD      r1,r3,#0
0008b0  e5911000          LDR      r1,[r1,#0]  ; TxCounter
0008b4  e2832000          ADD      r2,r3,#0
0008b8  e5922000          LDR      r2,[r2,#0]  ; TxCounter
0008bc  e2822001          ADD      r2,r2,#1
0008c0  e5832000          STR      r2,[r3,#0]  ; TxCounter
0008c4  e59f2154          LDR      r2,|L1.2592|
0008c8  e7c20001          STRB     r0,[r2,r1]
;;;374        
;;;375        if (MTP_Enable() != MTP_RET_OK) {
0008cc  ebfffffe          BL       MTP_Enable
0008d0  e3500000          CMP      r0,#0
0008d4  0a00000a          BEQ      |L1.2308|
;;;376            TxBuffer[TxCounter++] = ASCII_NAK;
0008d8  e3a00015          MOV      r0,#0x15
0008dc  e59f1138          LDR      r1,|L1.2588|
0008e0  e5911000          LDR      r1,[r1,#0]  ; TxCounter
0008e4  e59f2130          LDR      r2,|L1.2588|
0008e8  e5922000          LDR      r2,[r2,#0]  ; TxCounter
0008ec  e2822001          ADD      r2,r2,#1
0008f0  e59f3124          LDR      r3,|L1.2588|
0008f4  e5832000          STR      r2,[r3,#0]  ; TxCounter
0008f8  e59f2120          LDR      r2,|L1.2592|
0008fc  e7c20001          STRB     r0,[r2,r1]
000900  ea000009          B        |L1.2348|
                  |L1.2308|
;;;377        }
;;;378        else
;;;379        {
;;;380            //MTP_Program(pMTPHashKey, MTP_OptionData);
;;;381            //while (MTP->STATUS & MTP_STATUS_BUSY);
;;;382            TxBuffer[TxCounter++] = ASCII_ACK;
000904  e3a00006          MOV      r0,#6
000908  e59f110c          LDR      r1,|L1.2588|
00090c  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000910  e59f2104          LDR      r2,|L1.2588|
000914  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000918  e2822001          ADD      r2,r2,#1
00091c  e59f30f8          LDR      r3,|L1.2588|
000920  e5832000          STR      r2,[r3,#0]  ; TxCounter
000924  e59f20f4          LDR      r2,|L1.2592|
000928  e7c20001          STRB     r0,[r2,r1]
                  |L1.2348|
;;;383        }
;;;384        
;;;385        // Calculate CRC Result
;;;386        CRCResult = CRCTool_TableFast(TxBuffer, TxCounter);
00092c  e59f00e8          LDR      r0,|L1.2588|
000930  e5901000          LDR      r1,[r0,#0]  ; TxCounter
000934  e59f00e4          LDR      r0,|L1.2592|
000938  ebfffffe          BL       CRCTool_TableFast
00093c  e1a04800          LSL      r4,r0,#16
000940  e1a04824          LSR      r4,r4,#16
;;;387        TxBuffer[TxCounter++] = (uint8_t)(CRCResult >> 8);
000944  e1a00444          ASR      r0,r4,#8
000948  e59f10cc          LDR      r1,|L1.2588|
00094c  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000950  e59f20c4          LDR      r2,|L1.2588|
000954  e5922000          LDR      r2,[r2,#0]  ; TxCounter
000958  e2822001          ADD      r2,r2,#1
00095c  e59f30b8          LDR      r3,|L1.2588|
000960  e5832000          STR      r2,[r3,#0]  ; TxCounter
000964  e59f20b4          LDR      r2,|L1.2592|
000968  e7c20001          STRB     r0,[r2,r1]
;;;388        TxBuffer[TxCounter++] = (uint8_t)CRCResult;
00096c  e2831000          ADD      r1,r3,#0
000970  e5911000          LDR      r1,[r1,#0]  ; TxCounter
000974  e2832000          ADD      r2,r3,#0
000978  e5922000          LDR      r2,[r2,#0]  ; TxCounter
00097c  e2822001          ADD      r2,r2,#1
000980  e5832000          STR      r2,[r3,#0]  ; TxCounter
000984  e59f2094          LDR      r2,|L1.2592|
000988  e7c24001          STRB     r4,[r2,r1]
;;;389        pCommunicationInterface->writeFunc(TxBuffer, TxCounter);
00098c  e59f0090          LDR      r0,|L1.2596|
000990  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
000994  e5902004          LDR      r2,[r0,#4]
000998  e2830000          ADD      r0,r3,#0
00099c  e5901000          LDR      r1,[r0,#0]  ; TxCounter
0009a0  e59f0078          LDR      r0,|L1.2592|
0009a4  e12fff32          BLX      r2
;;;390        
;;;391        /* disable MTP clock */
;;;392        outpw(REG_CLK_PCLKEN1,(inpw(REG_CLK_PCLKEN1) & ~(0x1 << 26)) | (0x0 << 26));
0009a8  e3a0020b          MOV      r0,#0xb0000000
0009ac  e590021c          LDR      r0,[r0,#0x21c]
0009b0  e3c00301          BIC      r0,r0,#0x4000000
0009b4  e3a0120b          MOV      r1,#0xb0000000
0009b8  e581021c          STR      r0,[r1,#0x21c]
;;;393        
;;;394        if (TxBuffer[2] == ASCII_NAK) {
0009bc  e59f005c          LDR      r0,|L1.2592|
0009c0  e5d00002          LDRB     r0,[r0,#2]  ; TxBuffer
0009c4  e3500015          CMP      r0,#0x15
0009c8  1a000002          BNE      |L1.2520|
;;;395            return FALSE;
0009cc  e3a00000          MOV      r0,#0
                  |L1.2512|
0009d0  e28ddf42          ADD      sp,sp,#0x108
;;;396        }
;;;397        return TRUE;
;;;398    }
0009d4  e8bd8070          POP      {r4-r6,pc}
                  |L1.2520|
0009d8  e3a00001          MOV      r0,#1                 ;397
0009dc  eafffffb          B        |L1.2512|
                  |L1.2528|
                          DCD      refin
                  |L1.2532|
                          DCD      order
                  |L1.2536|
                          DCD      crchighbit
                  |L1.2540|
                          DCD      polynom
                  |L1.2544|
                          DCD      crcmask
                  |L1.2548|
                          DCD      crctab
                  |L1.2552|
                          DCD      0xb000f000
                  |L1.2556|
                          DCD      CryptoDoneFlag
                  |L1.2560|
                          DCD      CryptoInputCipher_Pool
                  |L1.2564|
                          DCD      InitialVector
                  |L1.2568|
                          DCD      CryptoOutputCipher
                  |L1.2572|
                          DCD      CryptoInputCipher
                  |L1.2576|
                          DCD      crcinit_direct
                  |L1.2580|
                          DCD      refout
                  |L1.2584|
                          DCD      crcxor
                  |L1.2588|
                          DCD      TxCounter
                  |L1.2592|
                          DCD      TxBuffer
                  |L1.2596|
                          DCD      pCommunicationInterface
                  |L1.2600|
                          DCD      RTCBuffer
                  |L1.2604|
                          DCD      DeviceParameterBuffer
                  |L1.2608|
                          DCD      DeviceParameterBuffer+0x8
                  |L1.2612|
                          DCD      AuthenSessionKey
                  |L1.2616|
                          DCD      AuthenSessionKey+0x4
                  |L1.2620|
                          DCD      AuthenSessionKey+0x8
                  |L1.2624|
                          DCD      AuthenSessionKey+0xc
                  |L1.2628|
                          DCD      AuthenSessionKey+0x10
                  |L1.2632|
                          DCD      AuthenSessionKey+0x14
                  |L1.2636|
                          DCD      EnableAuthenSessionKeyFlag
                  |L1.2640|
                          DCD      SECURITY_KEY
                  |L1.2644|
                          DCD      MTP_HashKey
                  |L1.2648|
000a58  436f6e76          DCB      "Convert2Interger : %d\r\n",0
000a5c  65727432
000a60  496e7465
000a64  72676572
000a68  203a2025
000a6c  640d0a00
                  |L1.2672|
000a70  4d545020          DCB      "MTP Key : 0x%02x 0x%02x 0x%02x 0x%02x\r\n",0
000a74  4b657920
000a78  3a203078
000a7c  25303278
000a80  20307825
000a84  30327820
000a88  30782530
000a8c  32782030
000a90  78253032
000a94  780d0a00
                          ENDP

                  MTP_WaitHostCommand PROC
;;;405    *************************************************************************************/
;;;406    static void MTP_WaitHostCommand(void)
000a98  e92d4030          PUSH     {r4,r5,lr}
;;;407    {
000a9c  e24dd044          SUB      sp,sp,#0x44
;;;408        uint8_t tmpBuffer[64];
;;;409        RxCounter = 0;
000aa0  e3a00000          MOV      r0,#0
000aa4  e59f19ac          LDR      r1,|L1.5208|
000aa8  e5810000          STR      r0,[r1,#0]  ; RxCounter
;;;410        memset(RxBuffer, 0x00, sizeof(RxBuffer));
000aac  e3a01c01          MOV      r1,#0x100
000ab0  e59f09a4          LDR      r0,|L1.5212|
000ab4  ebfffffe          BL       __aeabi_memclr4
;;;411        memset(tmpBuffer, 0x00, sizeof(tmpBuffer));
000ab8  e3a01040          MOV      r1,#0x40
000abc  e28d0004          ADD      r0,sp,#4
000ac0  ebfffffe          BL       __aeabi_memclr4
;;;412        
;;;413        while (1)
000ac4  ea00002b          B        |L1.2936|
                  |L1.2760|
;;;414        {
;;;415            BaseType_t reval = pCommunicationInterface->readWaitFunc(portMAX_DELAY);
000ac8  e51f00ac          LDR      r0,|L1.2596|
000acc  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
000ad0  e590100c          LDR      r1,[r0,#0xc]
000ad4  e3e00000          MVN      r0,#0
000ad8  e12fff31          BLX      r1
000adc  e1a05000          MOV      r5,r0
;;;416            //BaseType_t reval = RS232CommDrvReadWait(portMAX_DELAY);
;;;417            vTaskDelay(10 / portTICK_RATE_MS);  //vTaskDelay(100 / portTICK_RATE_MS);
000ae0  e3a00001          MOV      r0,#1
000ae4  ebfffffe          BL       vTaskDelay
;;;418            
;;;419            int retval = pCommunicationInterface->readFunc(tmpBuffer, sizeof(tmpBuffer));
000ae8  e51f00cc          LDR      r0,|L1.2596|
000aec  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
000af0  e3a01040          MOV      r1,#0x40
000af4  e5902008          LDR      r2,[r0,#8]
000af8  e28d0004          ADD      r0,sp,#4
000afc  e12fff32          BLX      r2
000b00  e1a04000          MOV      r4,r0
;;;420            //int retval = RS232CommDrvRead(tmpBuffer, sizeof(tmpBuffer));
;;;421            if(retval > 0)
000b04  e3540000          CMP      r4,#0
000b08  da000019          BLE      |L1.2932|
;;;422            {
;;;423                memcpy(&RxBuffer[RxCounter], tmpBuffer, retval);
000b0c  e59f1948          LDR      r1,|L1.5212|
000b10  e59f2940          LDR      r2,|L1.5208|
000b14  e5922000          LDR      r2,[r2,#0]  ; RxCounter
000b18  e0810002          ADD      r0,r1,r2
000b1c  e1a02004          MOV      r2,r4
000b20  e28d1004          ADD      r1,sp,#4
000b24  ebfffffe          BL       __aeabi_memcpy
;;;424                RxCounter = RxCounter + retval;
000b28  e59f0928          LDR      r0,|L1.5208|
000b2c  e5900000          LDR      r0,[r0,#0]  ; RxCounter
000b30  e0800004          ADD      r0,r0,r4
000b34  e59f191c          LDR      r1,|L1.5208|
000b38  e5810000          STR      r0,[r1,#0]  ; RxCounter
;;;425                if ((RxCounter > 2) && (RxCounter >= ((int)RxBuffer[1] + 4)))
000b3c  e2810000          ADD      r0,r1,#0
000b40  e5900000          LDR      r0,[r0,#0]  ; RxCounter
000b44  e3500002          CMP      r0,#2
000b48  da000009          BLE      |L1.2932|
000b4c  e59f0908          LDR      r0,|L1.5212|
000b50  e5d00001          LDRB     r0,[r0,#1]  ; RxBuffer
000b54  e2800004          ADD      r0,r0,#4
000b58  e5911000          LDR      r1,[r1,#0]  ; RxCounter
000b5c  e1500001          CMP      r0,r1
000b60  ca000003          BGT      |L1.2932|
;;;426                {
;;;427                    isStartFlag = TRUE;
000b64  e3a00001          MOV      r0,#1
000b68  e59f18f0          LDR      r1,|L1.5216|
000b6c  e5c10000          STRB     r0,[r1,#0]  ; isStartFlag
;;;428                    break;
000b70  ea000001          B        |L1.2940|
                  |L1.2932|
;;;429                }
;;;430            }
;;;431        }
000b74  e1a00000          MOV      r0,r0
                  |L1.2936|
000b78  eaffffd2          B        |L1.2760|
                  |L1.2940|
000b7c  e1a00000          MOV      r0,r0                 ;428
;;;432        //pCommunicationInterface->writeFunc(RxBuffer, RxCounter);
;;;433    }
000b80  e28dd044          ADD      sp,sp,#0x44
000b84  e8bd8030          POP      {r4,r5,pc}
;;;434    
                          ENDP

                  MTP_ParseHostCommand PROC
;;;439    *************************************************************************************/
;;;440    static BOOL MTP_ParseHostCommand(void)
000b88  e92d4010          PUSH     {r4,lr}
;;;441    {
000b8c  e24dd038          SUB      sp,sp,#0x38
;;;442        uint8_t CRCBuffer[2];
;;;443        uint16_t CRCResult;
;;;444        
;;;445        if (RxCounter < 4) {
000b90  e59f08c0          LDR      r0,|L1.5208|
000b94  e5900000          LDR      r0,[r0,#0]  ; RxCounter
000b98  e3500004          CMP      r0,#4
000b9c  aa000002          BGE      |L1.2988|
;;;446            return FALSE;
000ba0  e3a00000          MOV      r0,#0
                  |L1.2980|
000ba4  e28dd038          ADD      sp,sp,#0x38
;;;447        }
;;;448        
;;;449        // Calculate & Compare CRC Result
;;;450        CRCResult = CRCTool_TableFast(RxBuffer, RxCounter - 2);
;;;451        CRCBuffer[0] = (uint8_t)(CRCResult >> 8);
;;;452        CRCBuffer[1] = (uint8_t)CRCResult;
;;;453        //pCommunicationInterface->writeFunc(CRCBuffer, 2);
;;;454        if ((CRCBuffer[0] != RxBuffer[RxCounter - 2]) || (CRCBuffer[1] != RxBuffer[RxCounter - 1])) {
;;;455            return FALSE;
;;;456        }
;;;457        
;;;458        // Decrypted Message
;;;459        if (RxBuffer[0] == CMD_INITAIL_AUTHENTICATE)
;;;460        {
;;;461            uint8_t Random_A[RANDOM_NUMBER_LENGTH], Random_B[RANDOM_NUMBER_LENGTH];
;;;462            
;;;463            if (RxBuffer[1] != (RANDOM_NUMBER_LENGTH + 1)) {        // Wrong Message Length
;;;464                return FALSE;
;;;465            }
;;;466            if (RxBuffer[2] > MAXIMUM_KEY_INDEX) {                  // Wrong Security Key Index
;;;467                return FALSE;
;;;468            }
;;;469            CryptoService(CRYPTO_MODE_DECRYPT, &RxBuffer[3], RANDOM_NUMBER_LENGTH, &SECURITY_KEY[RxBuffer[2]][0], TRUE);
;;;470            memcpy(Random_A, CryptoOutputCipher, RANDOM_NUMBER_LENGTH);
;;;471            
;;;472            RandomNumberService(PRNG_KEY_SIZE_64, Random_B);
;;;473            MTP_BuildAuthenSessionKey(Random_A, Random_B);
;;;474            //pCommunicationInterface->writeFunc(AuthenSessionKey, sizeof(AuthenSessionKey));
;;;475            //vTaskDelay(100);
;;;476            MTP_SendMutualAuthenticate(Random_B);
;;;477        }
;;;478        else if (RxBuffer[0] == CMD_WRITE_MTP_HASH_KEY)
;;;479        {
;;;480            uint8_t DecryptedMessage[WRITE_MTP_MESSAGE_LENGTH];
;;;481            
;;;482            if (EnableAuthenSessionKeyFlag == FALSE) {
;;;483                return FALSE;
;;;484            }
;;;485            if (RxBuffer[1] != WRITE_MTP_MESSAGE_LENGTH) {          // Wrong Message Length
;;;486                return FALSE;
;;;487            }
;;;488            
;;;489            CryptoService(CRYPTO_MODE_DECRYPT, &RxBuffer[2], WRITE_MTP_MESSAGE_LENGTH, AuthenSessionKey, FALSE);
;;;490            memcpy(DecryptedMessage, CryptoOutputCipher, WRITE_MTP_MESSAGE_LENGTH);
;;;491            if (memcmp(MTP_MessageHeader, &DecryptedMessage[0], MTP_MESSAGE_HEADER_LENGTH) != 0) {
;;;492                return FALSE;
;;;493            }
;;;494            if (memcmp(MTP_MessageTail, &DecryptedMessage[MTP_MESSAGE_HEADER_LENGTH + MTP_HASHKEY_LENGTH + 1], MTP_MESSAGE_TAIL_LENGTH) != 0) {
;;;495                return FALSE;
;;;496            }
;;;497            
;;;498            memcpy(MTP_HashKey, &DecryptedMessage[MTP_MESSAGE_HEADER_LENGTH], MTP_HASHKEY_LENGTH);
;;;499            MTP_OptionData = DecryptedMessage[MTP_MESSAGE_HEADER_LENGTH + MTP_HASHKEY_LENGTH];
;;;500            if (MTP_ExecuteWriteHashKey() == FALSE) {
;;;501                return FALSE;
;;;502            }
;;;503        }
;;;504        else if (RxBuffer[0] == CMD_SWITCH_PARAMETER_MODE)
;;;505        {
;;;506            enabledSwitchRTCMode = TRUE;
;;;507            RTC_CommonReplyCommand(ASCII_ACK);
;;;508        }
;;;509        else if (RxBuffer[0] == CMD_UPDATE_RTC_REQUEST)
;;;510        {
;;;511            memcpy(RTCBuffer, &RxBuffer[2], UPDATE_RTC_MESSAGE_LENGTH);
;;;512            if (RTC_ExecuteUpdateRTCTime()) {
;;;513                RTC_CommonReplyCommand(ASCII_ACK);
;;;514            }
;;;515            else {
;;;516                RTC_CommonReplyCommand(ASCII_NAK);
;;;517            }
;;;518        }
;;;519        else if (RxBuffer[0] == CMD_SET_DEVICE_PARAMETER_REQUEST)
;;;520        {
;;;521            memcpy(DeviceParameterBuffer, &RxBuffer[2], SET_DEVICE_PARAMETER_MESSAGE_LENGTH);
;;;522            if (RTC_ExecuteSetDeviceID()) {
;;;523                RTC_CommonReplyCommand(ASCII_ACK);
;;;524            }
;;;525            else {
;;;526                RTC_CommonReplyCommand(ASCII_NAK);
;;;527            }
;;;528        }
;;;529        else {
;;;530            return FALSE;
;;;531        }
;;;532        return TRUE;
;;;533    }
000ba8  e8bd8010          POP      {r4,pc}
                  |L1.2988|
000bac  e59f08a4          LDR      r0,|L1.5208|
000bb0  e5900000          LDR      r0,[r0,#0]            ;450  ; RxCounter
000bb4  e2401002          SUB      r1,r0,#2              ;450
000bb8  e59f089c          LDR      r0,|L1.5212|
000bbc  ebfffffe          BL       CRCTool_TableFast
000bc0  e1a04800          LSL      r4,r0,#16             ;450
000bc4  e1a04824          LSR      r4,r4,#16             ;450
000bc8  e1a00444          ASR      r0,r4,#8              ;451
000bcc  e5cd0034          STRB     r0,[sp,#0x34]         ;451
000bd0  e5cd4035          STRB     r4,[sp,#0x35]         ;452
000bd4  e5dd0034          LDRB     r0,[sp,#0x34]         ;454
000bd8  e59f1878          LDR      r1,|L1.5208|
000bdc  e5911000          LDR      r1,[r1,#0]            ;454  ; RxCounter
000be0  e2411002          SUB      r1,r1,#2              ;454
000be4  e59f2870          LDR      r2,|L1.5212|
000be8  e7d21001          LDRB     r1,[r2,r1]            ;454
000bec  e1500001          CMP      r0,r1                 ;454
000bf0  1a000006          BNE      |L1.3088|
000bf4  e5dd0035          LDRB     r0,[sp,#0x35]         ;454
000bf8  e59f1858          LDR      r1,|L1.5208|
000bfc  e5911000          LDR      r1,[r1,#0]            ;454  ; RxCounter
000c00  e2411001          SUB      r1,r1,#1              ;454
000c04  e7d21001          LDRB     r1,[r2,r1]            ;454
000c08  e1500001          CMP      r0,r1                 ;454
000c0c  0a000001          BEQ      |L1.3096|
                  |L1.3088|
000c10  e3a00000          MOV      r0,#0                 ;455
000c14  eaffffe2          B        |L1.2980|
                  |L1.3096|
000c18  e59f083c          LDR      r0,|L1.5212|
000c1c  e5d00000          LDRB     r0,[r0,#0]            ;459  ; RxBuffer
000c20  e3500091          CMP      r0,#0x91              ;459
000c24  1a000023          BNE      |L1.3256|
000c28  e59f082c          LDR      r0,|L1.5212|
000c2c  e5d00001          LDRB     r0,[r0,#1]            ;463  ; RxBuffer
000c30  e3500009          CMP      r0,#9                 ;463
000c34  0a000001          BEQ      |L1.3136|
000c38  e3a00000          MOV      r0,#0                 ;464
000c3c  eaffffd8          B        |L1.2980|
                  |L1.3136|
000c40  e59f0814          LDR      r0,|L1.5212|
000c44  e5d00002          LDRB     r0,[r0,#2]            ;466  ; RxBuffer
000c48  e3500009          CMP      r0,#9                 ;466
000c4c  da000001          BLE      |L1.3160|
000c50  e3a00000          MOV      r0,#0                 ;467
000c54  eaffffd2          B        |L1.2980|
                  |L1.3160|
000c58  e3a00001          MOV      r0,#1                 ;469
000c5c  e58d0000          STR      r0,[sp,#0]            ;469
000c60  e59f07f4          LDR      r0,|L1.5212|
000c64  e5d00002          LDRB     r0,[r0,#2]            ;469  ; RxBuffer
000c68  e51f1220          LDR      r1,|L1.2640|
000c6c  e0813200          ADD      r3,r1,r0,LSL #4       ;469
000c70  e3a02008          MOV      r2,#8                 ;469
000c74  e59f17e8          LDR      r1,|L1.5220|
000c78  e3a00000          MOV      r0,#0                 ;469
000c7c  ebfffffe          BL       CryptoService
000c80  e3a02008          MOV      r2,#8                 ;470
000c84  e51f0284          LDR      r0,|L1.2568|
000c88  e5901000          LDR      r1,[r0,#0]            ;470  ; CryptoOutputCipher
000c8c  e28d002c          ADD      r0,sp,#0x2c           ;470
000c90  ebfffffe          BL       __aeabi_memcpy
000c94  e28d1024          ADD      r1,sp,#0x24           ;472
000c98  e3a00000          MOV      r0,#0                 ;472
000c9c  ebfffffe          BL       RandomNumberService
000ca0  e28d1024          ADD      r1,sp,#0x24           ;473
000ca4  e28d002c          ADD      r0,sp,#0x2c           ;473
000ca8  ebfffffe          BL       MTP_BuildAuthenSessionKey
000cac  e28d0024          ADD      r0,sp,#0x24           ;476
000cb0  ebfffffe          BL       MTP_SendMutualAuthenticate
000cb4  ea000065          B        |L1.3664|
                  |L1.3256|
000cb8  e59f079c          LDR      r0,|L1.5212|
000cbc  e5d00000          LDRB     r0,[r0,#0]            ;478  ; RxBuffer
000cc0  e3500093          CMP      r0,#0x93              ;478
000cc4  1a000033          BNE      |L1.3480|
000cc8  e51f0284          LDR      r0,|L1.2636|
000ccc  e5d00000          LDRB     r0,[r0,#0]            ;482  ; EnableAuthenSessionKeyFlag
000cd0  e3500000          CMP      r0,#0                 ;482
000cd4  1a000001          BNE      |L1.3296|
000cd8  e3a00000          MOV      r0,#0                 ;483
000cdc  eaffffb0          B        |L1.2980|
                  |L1.3296|
000ce0  e59f0774          LDR      r0,|L1.5212|
000ce4  e5d00001          LDRB     r0,[r0,#1]            ;485  ; RxBuffer
000ce8  e3500030          CMP      r0,#0x30              ;485
000cec  0a000001          BEQ      |L1.3320|
000cf0  e3a00000          MOV      r0,#0                 ;486
000cf4  eaffffaa          B        |L1.2980|
                  |L1.3320|
000cf8  e3a00000          MOV      r0,#0                 ;489
000cfc  e51f32d0          LDR      r3,|L1.2612|
000d00  e3a02030          MOV      r2,#0x30              ;489
000d04  e59f175c          LDR      r1,|L1.5224|
000d08  e58d0000          STR      r0,[sp,#0]            ;489
000d0c  ebfffffe          BL       CryptoService
000d10  e3a02030          MOV      r2,#0x30              ;490
000d14  e51f0314          LDR      r0,|L1.2568|
000d18  e5901000          LDR      r1,[r0,#0]            ;490  ; CryptoOutputCipher
000d1c  e28d0004          ADD      r0,sp,#4              ;490
000d20  ebfffffe          BL       __aeabi_memcpy
000d24  e3a02008          MOV      r2,#8                 ;491
000d28  e28d1004          ADD      r1,sp,#4              ;491
000d2c  e59f0738          LDR      r0,|L1.5228|
000d30  ebfffffe          BL       memcmp
000d34  e3500000          CMP      r0,#0                 ;491
000d38  0a000001          BEQ      |L1.3396|
000d3c  e3a00000          MOV      r0,#0                 ;492
000d40  eaffff97          B        |L1.2980|
                  |L1.3396|
000d44  e3a02007          MOV      r2,#7                 ;494
000d48  e28d102d          ADD      r1,sp,#0x2d           ;494
000d4c  e59f071c          LDR      r0,|L1.5232|
000d50  ebfffffe          BL       memcmp
000d54  e3500000          CMP      r0,#0                 ;494
000d58  0a000001          BEQ      |L1.3428|
000d5c  e3a00000          MOV      r0,#0                 ;495
000d60  eaffff8f          B        |L1.2980|
                  |L1.3428|
000d64  e3a02020          MOV      r2,#0x20              ;498
000d68  e28d100c          ADD      r1,sp,#0xc            ;498
000d6c  e51f0320          LDR      r0,|L1.2644|
000d70  ebfffffe          BL       __aeabi_memcpy4
000d74  e5dd002c          LDRB     r0,[sp,#0x2c]         ;499
000d78  e59f16f4          LDR      r1,|L1.5236|
000d7c  e5c10000          STRB     r0,[r1,#0]            ;499  ; MTP_OptionData
000d80  ebfffffe          BL       MTP_ExecuteWriteHashKey
000d84  e3500000          CMP      r0,#0                 ;500
000d88  1a000001          BNE      |L1.3476|
000d8c  e3a00000          MOV      r0,#0                 ;501
000d90  eaffff83          B        |L1.2980|
                  |L1.3476|
000d94  ea00002d          B        |L1.3664|
                  |L1.3480|
000d98  e59f06bc          LDR      r0,|L1.5212|
000d9c  e5d00000          LDRB     r0,[r0,#0]            ;504  ; RxBuffer
000da0  e350009a          CMP      r0,#0x9a              ;504
000da4  1a000005          BNE      |L1.3520|
000da8  e3a00001          MOV      r0,#1                 ;506
000dac  e59f16c4          LDR      r1,|L1.5240|
000db0  e5c10000          STRB     r0,[r1,#0]            ;506  ; enabledSwitchRTCMode
000db4  e3a00006          MOV      r0,#6                 ;507
000db8  ebfffffe          BL       RTC_CommonReplyCommand
000dbc  ea000023          B        |L1.3664|
                  |L1.3520|
000dc0  e59f0694          LDR      r0,|L1.5212|
000dc4  e5d00000          LDRB     r0,[r0,#0]            ;509  ; RxBuffer
000dc8  e350009c          CMP      r0,#0x9c              ;509
000dcc  1a00000c          BNE      |L1.3588|
000dd0  e3a0200c          MOV      r2,#0xc               ;511
000dd4  e59f168c          LDR      r1,|L1.5224|
000dd8  e51f03b8          LDR      r0,|L1.2600|
000ddc  ebfffffe          BL       __aeabi_memcpy
000de0  ebfffffe          BL       RTC_ExecuteUpdateRTCTime
000de4  e3500000          CMP      r0,#0                 ;512
000de8  0a000002          BEQ      |L1.3576|
000dec  e3a00006          MOV      r0,#6                 ;513
000df0  ebfffffe          BL       RTC_CommonReplyCommand
000df4  ea000015          B        |L1.3664|
                  |L1.3576|
000df8  e3a00015          MOV      r0,#0x15              ;516
000dfc  ebfffffe          BL       RTC_CommonReplyCommand
000e00  ea000012          B        |L1.3664|
                  |L1.3588|
000e04  e59f0650          LDR      r0,|L1.5212|
000e08  e5d00000          LDRB     r0,[r0,#0]            ;519  ; RxBuffer
000e0c  e350009d          CMP      r0,#0x9d              ;519
000e10  1a00000c          BNE      |L1.3656|
000e14  e3a02020          MOV      r2,#0x20              ;521
000e18  e59f1648          LDR      r1,|L1.5224|
000e1c  e51f03f8          LDR      r0,|L1.2604|
000e20  ebfffffe          BL       __aeabi_memcpy
000e24  ebfffffe          BL       RTC_ExecuteSetDeviceID
000e28  e3500000          CMP      r0,#0                 ;522
000e2c  0a000002          BEQ      |L1.3644|
000e30  e3a00006          MOV      r0,#6                 ;523
000e34  ebfffffe          BL       RTC_CommonReplyCommand
000e38  ea000004          B        |L1.3664|
                  |L1.3644|
000e3c  e3a00015          MOV      r0,#0x15              ;526
000e40  ebfffffe          BL       RTC_CommonReplyCommand
000e44  ea000001          B        |L1.3664|
                  |L1.3656|
000e48  e3a00000          MOV      r0,#0                 ;530
000e4c  eaffff54          B        |L1.2980|
                  |L1.3664|
000e50  e3a00001          MOV      r0,#1                 ;532
000e54  eaffff52          B        |L1.2980|
;;;534    
                          ENDP

                  CRCTool_Init PROC
;;;619    
;;;620    void CRCTool_Init(int CodingType)
000e58  e92d41f0          PUSH     {r4-r8,lr}
;;;621    {
000e5c  e1a07000          MOV      r7,r0
;;;622        uint32_t bit, crc;
;;;623        int i;
;;;624        
;;;625        switch (CodingType)
000e60  e3570001          CMP      r7,#1
000e64  0a000004          BEQ      |L1.3708|
000e68  e3570002          CMP      r7,#2
000e6c  0a000017          BEQ      |L1.3792|
000e70  e3570003          CMP      r7,#3
000e74  1a00003e          BNE      |L1.3956|
000e78  ea000028          B        |L1.3872|
                  |L1.3708|
;;;626        {
;;;627            case CRCCode_CRC_CCITT:
000e7c  e1a00000          MOV      r0,r0
;;;628                order = 16; direct = 1; polynom = 0x1021; crcinit = 0xFFFF; crcxor = 0x0000; refin = 0; refout = 0;
000e80  e3a00010          MOV      r0,#0x10
000e84  e51f14a8          LDR      r1,|L1.2532|
000e88  e5810000          STR      r0,[r1,#0]  ; order
000e8c  e3a00001          MOV      r0,#1
000e90  e59f15e4          LDR      r1,|L1.5244|
000e94  e5810000          STR      r0,[r1,#0]  ; direct
000e98  e59f05e0          LDR      r0,|L1.5248|
000e9c  e51f14b8          LDR      r1,|L1.2540|
000ea0  e5810000          STR      r0,[r1,#0]  ; polynom
000ea4  e59f05d8          LDR      r0,|L1.5252|
000ea8  e59f15d8          LDR      r1,|L1.5256|
000eac  e5810000          STR      r0,[r1,#0]  ; crcinit
000eb0  e3a00000          MOV      r0,#0
000eb4  e51f14a4          LDR      r1,|L1.2584|
000eb8  e5810000          STR      r0,[r1,#0]  ; crcxor
000ebc  e51f14e4          LDR      r1,|L1.2528|
000ec0  e5810000          STR      r0,[r1,#0]  ; refin
000ec4  e51f14b8          LDR      r1,|L1.2580|
000ec8  e5810000          STR      r0,[r1,#0]  ; refout
;;;629                break;
000ecc  ea000028          B        |L1.3956|
                  |L1.3792|
;;;630            case CRCCode_CRC16:
000ed0  e1a00000          MOV      r0,r0
;;;631                order = 16; direct = 1; polynom = 0x8005; crcinit = 0x0000; crcxor = 0x0000; refin = 0; refout = 0;
000ed4  e3a00010          MOV      r0,#0x10
000ed8  e51f14fc          LDR      r1,|L1.2532|
000edc  e5810000          STR      r0,[r1,#0]  ; order
000ee0  e3a00001          MOV      r0,#1
000ee4  e59f1590          LDR      r1,|L1.5244|
000ee8  e5810000          STR      r0,[r1,#0]  ; direct
000eec  e59f0598          LDR      r0,|L1.5260|
000ef0  e51f150c          LDR      r1,|L1.2540|
000ef4  e5810000          STR      r0,[r1,#0]  ; polynom
000ef8  e3a00000          MOV      r0,#0
000efc  e59f1584          LDR      r1,|L1.5256|
000f00  e5810000          STR      r0,[r1,#0]  ; crcinit
000f04  e51f14f4          LDR      r1,|L1.2584|
000f08  e5810000          STR      r0,[r1,#0]  ; crcxor
000f0c  e51f1534          LDR      r1,|L1.2528|
000f10  e5810000          STR      r0,[r1,#0]  ; refin
000f14  e51f1508          LDR      r1,|L1.2580|
000f18  e5810000          STR      r0,[r1,#0]  ; refout
;;;632                break;
000f1c  ea000014          B        |L1.3956|
                  |L1.3872|
;;;633            case CRCCode_CRC32:
000f20  e1a00000          MOV      r0,r0
;;;634                order = 32; direct = 1; polynom = 0x4c11db7; crcinit = 0xFFFFFFFF; crcxor = 0xFFFFFFFF; refin = 1; refout = 1;
000f24  e3a00020          MOV      r0,#0x20
000f28  e51f154c          LDR      r1,|L1.2532|
000f2c  e5810000          STR      r0,[r1,#0]  ; order
000f30  e3a00001          MOV      r0,#1
000f34  e59f1540          LDR      r1,|L1.5244|
000f38  e5810000          STR      r0,[r1,#0]  ; direct
000f3c  e59f054c          LDR      r0,|L1.5264|
000f40  e51f155c          LDR      r1,|L1.2540|
000f44  e5810000          STR      r0,[r1,#0]  ; polynom
000f48  e3e00000          MVN      r0,#0
000f4c  e59f1534          LDR      r1,|L1.5256|
000f50  e5810000          STR      r0,[r1,#0]  ; crcinit
000f54  e51f1544          LDR      r1,|L1.2584|
000f58  e5810000          STR      r0,[r1,#0]  ; crcxor
000f5c  e3a00001          MOV      r0,#1
000f60  e51f1588          LDR      r1,|L1.2528|
000f64  e5810000          STR      r0,[r1,#0]  ; refin
000f68  e51f155c          LDR      r1,|L1.2580|
000f6c  e5810000          STR      r0,[r1,#0]  ; refout
;;;635                break;
000f70  e1a00000          MOV      r0,r0
                  |L1.3956|
000f74  e1a00000          MOV      r0,r0                 ;629
;;;636        }
;;;637        
;;;638        // Initialize all variables for seeding and builing based upon the given coding type
;;;639        // at first, compute constant bit masks for whole CRC and CRC high bit
;;;640        crcmask = ((((uint32_t)1 << (order -1 )) - 1) << 1) | 1;
000f78  e51f059c          LDR      r0,|L1.2532|
000f7c  e5d00000          LDRB     r0,[r0,#0]  ; order
000f80  e2400001          SUB      r0,r0,#1
000f84  e3a01001          MOV      r1,#1
000f88  e1a00011          LSL      r0,r1,r0
000f8c  e2400001          SUB      r0,r0,#1
000f90  e1810080          ORR      r0,r1,r0,LSL #1
000f94  e51f15ac          LDR      r1,|L1.2544|
000f98  e5810000          STR      r0,[r1,#0]  ; crcmask
;;;641        crchighbit = (uint32_t)1 << (order - 1);
000f9c  e51f05c0          LDR      r0,|L1.2532|
000fa0  e5d00000          LDRB     r0,[r0,#0]  ; order
000fa4  e2400001          SUB      r0,r0,#1
000fa8  e3a01001          MOV      r1,#1
000fac  e1a00011          LSL      r0,r1,r0
000fb0  e51f15d0          LDR      r1,|L1.2536|
000fb4  e5810000          STR      r0,[r1,#0]  ; crchighbit
;;;642        
;;;643        // generate lookup table
;;;644        generate_crc_table();
000fb8  ebfffffe          BL       generate_crc_table
;;;645        
;;;646        if (direct == 0)
000fbc  e59f04b8          LDR      r0,|L1.5244|
000fc0  e5900000          LDR      r0,[r0,#0]  ; direct
000fc4  e3500000          CMP      r0,#0
000fc8  1a00001b          BNE      |L1.4156|
;;;647        {
;;;648            crcinit_nondirect = crcinit;
000fcc  e59f04b4          LDR      r0,|L1.5256|
000fd0  e5900000          LDR      r0,[r0,#0]  ; crcinit
000fd4  e59f14b8          LDR      r1,|L1.5268|
000fd8  e5810000          STR      r0,[r1,#0]  ; crcinit_nondirect
;;;649            crc = crcinit;
000fdc  e59f04a4          LDR      r0,|L1.5256|
000fe0  e5904000          LDR      r4,[r0,#0]  ; crcinit
;;;650            for (i = 0 ; i < order ; i++)
000fe4  e3a05000          MOV      r5,#0
000fe8  ea000009          B        |L1.4116|
                  |L1.4076|
;;;651            {
;;;652                bit = crc & crchighbit;
000fec  e51f060c          LDR      r0,|L1.2536|
000ff0  e5900000          LDR      r0,[r0,#0]  ; crchighbit
000ff4  e0046000          AND      r6,r4,r0
;;;653                crc <<= 1;
000ff8  e1a04084          LSL      r4,r4,#1
;;;654                if (bit != 0) {
000ffc  e3560000          CMP      r6,#0
001000  0a000002          BEQ      |L1.4112|
;;;655                    crc ^= polynom;
001004  e51f0620          LDR      r0,|L1.2540|
001008  e5900000          LDR      r0,[r0,#0]  ; polynom
00100c  e0244000          EOR      r4,r4,r0
                  |L1.4112|
001010  e2855001          ADD      r5,r5,#1              ;650
                  |L1.4116|
001014  e51f0638          LDR      r0,|L1.2532|
001018  e5900000          LDR      r0,[r0,#0]            ;650  ; order
00101c  e1550000          CMP      r5,r0                 ;650
001020  bafffff1          BLT      |L1.4076|
;;;656                }
;;;657            }
;;;658            crc &= crcmask;
001024  e51f063c          LDR      r0,|L1.2544|
001028  e5900000          LDR      r0,[r0,#0]  ; crcmask
00102c  e0044000          AND      r4,r4,r0
;;;659            crcinit_direct = crc;
001030  e51f0628          LDR      r0,|L1.2576|
001034  e5804000          STR      r4,[r0,#0]  ; crcinit_direct
001038  ea00001a          B        |L1.4264|
                  |L1.4156|
;;;660        }
;;;661        else
;;;662        {
;;;663            crcinit_direct = crcinit;
00103c  e59f0444          LDR      r0,|L1.5256|
001040  e5900000          LDR      r0,[r0,#0]  ; crcinit
001044  e51f163c          LDR      r1,|L1.2576|
001048  e5810000          STR      r0,[r1,#0]  ; crcinit_direct
;;;664            crc = crcinit;
00104c  e59f0434          LDR      r0,|L1.5256|
001050  e5904000          LDR      r4,[r0,#0]  ; crcinit
;;;665            for (i = 0 ; i < order ; i++)
001054  e3a05000          MOV      r5,#0
001058  ea00000c          B        |L1.4240|
                  |L1.4188|
;;;666            {
;;;667                bit = crc & 1;
00105c  e2046001          AND      r6,r4,#1
;;;668                if (bit != 0) {
001060  e3560000          CMP      r6,#0
001064  0a000002          BEQ      |L1.4212|
;;;669                    crc ^= polynom;
001068  e51f0684          LDR      r0,|L1.2540|
00106c  e5900000          LDR      r0,[r0,#0]  ; polynom
001070  e0244000          EOR      r4,r4,r0
                  |L1.4212|
;;;670                }
;;;671                crc >>= 1;
001074  e1a040a4          LSR      r4,r4,#1
;;;672                if (bit != 0) {
001078  e3560000          CMP      r6,#0
00107c  0a000002          BEQ      |L1.4236|
;;;673                    crc |= crchighbit;
001080  e51f06a0          LDR      r0,|L1.2536|
001084  e5900000          LDR      r0,[r0,#0]  ; crchighbit
001088  e1844000          ORR      r4,r4,r0
                  |L1.4236|
00108c  e2855001          ADD      r5,r5,#1              ;665
                  |L1.4240|
001090  e51f06b4          LDR      r0,|L1.2532|
001094  e5900000          LDR      r0,[r0,#0]            ;665  ; order
001098  e1550000          CMP      r5,r0                 ;665
00109c  baffffee          BLT      |L1.4188|
;;;674                }
;;;675            }
;;;676            crcinit_nondirect = crc;
0010a0  e59f03ec          LDR      r0,|L1.5268|
0010a4  e5804000          STR      r4,[r0,#0]  ; crcinit_nondirect
                  |L1.4264|
;;;677        }
;;;678    }
0010a8  e8bd81f0          POP      {r4-r8,pc}
;;;679    
                          ENDP

                  MTP_ProcedureInit PROC
;;;538    
;;;539    BOOL MTP_ProcedureInit(void)
0010ac  e92d4010          PUSH     {r4,lr}
;;;540    {
;;;541        //pCommunicationInterface = CommunicationGetInterface(COMMUNICATION_RS232_INTERFACE_INDEX);
;;;542        pCommunicationInterface = CommunicationGetInterface(MTP_RS232_INTERFACE_INDEX);
0010b0  e3a00001          MOV      r0,#1
0010b4  ebfffffe          BL       CommunicationGetInterface
0010b8  e51f169c          LDR      r1,|L1.2596|
0010bc  e5810000          STR      r0,[r1,#0]  ; pCommunicationInterface
;;;543       //pCommunicationInterface = CommunicationGetInterface(0);
;;;544        if (pCommunicationInterface == NULL)
0010c0  e2810000          ADD      r0,r1,#0
0010c4  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
0010c8  e3500000          CMP      r0,#0
0010cc  1a000001          BNE      |L1.4312|
;;;545        {
;;;546            //terninalPrintf("CommunicationGetInterface(MTP_RS232_INTERFACE_INDEX) NULL\r\n");
;;;547            return FALSE;
0010d0  e3a00000          MOV      r0,#0
                  |L1.4308|
;;;548        }
;;;549        if (pCommunicationInterface->initFunc() == FALSE)
;;;550        //if (RS232CommDrvInit() == FALSE)
;;;551        {
;;;552            //terninalPrintf("CommunicationGetInterface(MTP_RS232_INTERFACE_INDEX) init fail\r\n");
;;;553            return FALSE;
;;;554        }
;;;555        
;;;556        /* Enable Crypto clock */
;;;557        
;;;558        outpw(REG_CLK_HCLKEN, inpw(REG_CLK_HCLKEN) | (1 << 23));
;;;559        CryptoInputCipher = (uint8_t *)((uint32_t)CryptoInputCipher_Pool | 0x80000000);
;;;560        CryptoOutputCipher = (uint8_t *)((uint32_t)CryptoOutputCipher_Pool | 0x80000000);
;;;561        sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, CRPT_IRQn, (PVOID)CryptoService_IRQHandler);
;;;562        sysSetLocalInterrupt(ENABLE_IRQ);
;;;563        sysEnableInterrupt(CRPT_IRQn);
;;;564        TDES_ENABLE_INT();
;;;565        PRNG_ENABLE_INT();
;;;566        CRCTool_Init(CRCCode_CRC16);
;;;567        
;;;568        EnableAuthenSessionKeyFlag = FALSE;
;;;569        isStartFlag = FALSE;
;;;570        enabledSwitchRTCMode = FALSE;
;;;571        return TRUE;
;;;572    }
0010d4  e8bd8010          POP      {r4,pc}
                  |L1.4312|
0010d8  e51f16bc          LDR      r1,|L1.2596|
0010dc  e5911000          LDR      r1,[r1,#0]            ;549  ; pCommunicationInterface
0010e0  e5910000          LDR      r0,[r1,#0]            ;549
0010e4  e12fff30          BLX      r0                    ;549
0010e8  e3500000          CMP      r0,#0                 ;549
0010ec  1a000001          BNE      |L1.4344|
0010f0  e3a00000          MOV      r0,#0                 ;553
0010f4  eafffff6          B        |L1.4308|
                  |L1.4344|
0010f8  e3a0020b          MOV      r0,#0xb0000000        ;558
0010fc  e5900210          LDR      r0,[r0,#0x210]        ;558
001100  e3800502          ORR      r0,r0,#0x800000       ;558
001104  e3a0120b          MOV      r1,#0xb0000000        ;558
001108  e5810210          STR      r0,[r1,#0x210]        ;558
00110c  e51f0714          LDR      r0,|L1.2560|
001110  e3800102          ORR      r0,r0,#0x80000000     ;559
001114  e51f1710          LDR      r1,|L1.2572|
001118  e5810000          STR      r0,[r1,#0]            ;559  ; CryptoInputCipher
00111c  e59f0374          LDR      r0,|L1.5272|
001120  e3800102          ORR      r0,r0,#0x80000000     ;560
001124  e51f1724          LDR      r1,|L1.2568|
001128  e5810000          STR      r0,[r1,#0]            ;560  ; CryptoOutputCipher
00112c  e59f2368          LDR      r2,|L1.5276|
001130  e3a01023          MOV      r1,#0x23              ;561
001134  e3a00041          MOV      r0,#0x41              ;561
001138  ebfffffe          BL       sysInstallISR
00113c  e3a0007f          MOV      r0,#0x7f              ;562
001140  ebfffffe          BL       sysSetLocalInterrupt
001144  e3a00023          MOV      r0,#0x23              ;563
001148  ebfffffe          BL       sysEnableInterrupt
00114c  e51f075c          LDR      r0,|L1.2552|
001150  e5900000          LDR      r0,[r0,#0]            ;564
001154  e3800c03          ORR      r0,r0,#0x300          ;564
001158  e51f1768          LDR      r1,|L1.2552|
00115c  e5810000          STR      r0,[r1,#0]            ;564
001160  e1a00001          MOV      r0,r1                 ;565
001164  e5900000          LDR      r0,[r0,#0]            ;565
001168  e3800801          ORR      r0,r0,#0x10000        ;565
00116c  e5810000          STR      r0,[r1,#0]            ;565
001170  e3a00002          MOV      r0,#2                 ;566
001174  ebfffffe          BL       CRCTool_Init
001178  e3a00000          MOV      r0,#0                 ;568
00117c  e51f1738          LDR      r1,|L1.2636|
001180  e5c10000          STRB     r0,[r1,#0]            ;568  ; EnableAuthenSessionKeyFlag
001184  e59f12d4          LDR      r1,|L1.5216|
001188  e5c10000          STRB     r0,[r1,#0]            ;569  ; isStartFlag
00118c  e59f12e4          LDR      r1,|L1.5240|
001190  e5c10000          STRB     r0,[r1,#0]            ;570  ; enabledSwitchRTCMode
001194  e3a00001          MOV      r0,#1                 ;571
001198  eaffffcd          B        |L1.4308|
;;;573    
                          ENDP

                  MTP_IsExitProcedure PROC
;;;574    BOOL MTP_IsExitProcedure(void)
00119c  e92d4010          PUSH     {r4,lr}
;;;575    {
;;;576        MTP_WaitHostCommand();
0011a0  ebfffffe          BL       MTP_WaitHostCommand
;;;577        if (RxBuffer[0] == CMD_MTP_PROCEDURE_EXIT)
0011a4  e59f02b0          LDR      r0,|L1.5212|
0011a8  e5d00000          LDRB     r0,[r0,#0]  ; RxBuffer
0011ac  e3500099          CMP      r0,#0x99
0011b0  1a000007          BNE      |L1.4564|
;;;578        {
;;;579            memset(AuthenSessionKey, 0x00, sizeof(AuthenSessionKey));
0011b4  e3a01018          MOV      r1,#0x18
0011b8  e51f078c          LDR      r0,|L1.2612|
0011bc  ebfffffe          BL       __aeabi_memclr4
;;;580            EnableAuthenSessionKeyFlag = FALSE;
0011c0  e3a00000          MOV      r0,#0
0011c4  e51f1780          LDR      r1,|L1.2636|
0011c8  e5c10000          STRB     r0,[r1,#0]  ; EnableAuthenSessionKeyFlag
;;;581            return TRUE;
0011cc  e3a00001          MOV      r0,#1
                  |L1.4560|
;;;582        }
;;;583        if (MTP_ParseHostCommand() == FALSE)
;;;584        {
;;;585            memset(AuthenSessionKey, 0x00, sizeof(AuthenSessionKey));
;;;586            EnableAuthenSessionKeyFlag = FALSE;
;;;587            return TRUE;
;;;588        }
;;;589        return FALSE;
;;;590    }
0011d0  e8bd8010          POP      {r4,pc}
                  |L1.4564|
0011d4  ebfffffe          BL       MTP_ParseHostCommand
0011d8  e3500000          CMP      r0,#0                 ;583
0011dc  1a000007          BNE      |L1.4608|
0011e0  e3a01018          MOV      r1,#0x18              ;585
0011e4  e51f07b8          LDR      r0,|L1.2612|
0011e8  ebfffffe          BL       __aeabi_memclr4
0011ec  e3a00000          MOV      r0,#0                 ;586
0011f0  e51f17ac          LDR      r1,|L1.2636|
0011f4  e5c10000          STRB     r0,[r1,#0]            ;586  ; EnableAuthenSessionKeyFlag
0011f8  e3a00001          MOV      r0,#1                 ;587
0011fc  eafffff3          B        |L1.4560|
                  |L1.4608|
001200  e3a00000          MOV      r0,#0                 ;589
001204  eafffff1          B        |L1.4560|
;;;591    
                          ENDP

                  MTP_ProcedureDeInit PROC
;;;592    void MTP_ProcedureDeInit(void)
001208  e51f0818          LDR      r0,|L1.2552|
;;;593    {
;;;594        TDES_DISABLE_INT();
00120c  e5900000          LDR      r0,[r0,#0]
001210  e3c00c03          BIC      r0,r0,#0x300
001214  e51f1824          LDR      r1,|L1.2552|
001218  e5810000          STR      r0,[r1,#0]
;;;595        PRNG_DISABLE_INT();
00121c  e1a00001          MOV      r0,r1
001220  e5900000          LDR      r0,[r0,#0]
001224  e3c00801          BIC      r0,r0,#0x10000
001228  e5810000          STR      r0,[r1,#0]
;;;596        /* disable Crypto clock */
;;;597        outpw(REG_CLK_HCLKEN,(inpw(REG_CLK_HCLKEN) & ~(0x1 << 23)) | (0x0 << 23));
00122c  e3a0020b          MOV      r0,#0xb0000000
001230  e5900210          LDR      r0,[r0,#0x210]
001234  e3c00502          BIC      r0,r0,#0x800000
001238  e3a0120b          MOV      r1,#0xb0000000
00123c  e5810210          STR      r0,[r1,#0x210]
;;;598        // Disabled RDA_IEN bit (Receive Data Available Interrupt Enable Control)
;;;599        outpw(REG_UART0_IER, (inpw(REG_UART0_IER) & 0xFFFFFFFE));
001240  e3a0032e          MOV      r0,#0xb8000000
001244  e5900004          LDR      r0,[r0,#4]
001248  e3c00001          BIC      r0,r0,#1
00124c  e3a0132e          MOV      r1,#0xb8000000
001250  e5810004          STR      r0,[r1,#4]
;;;600    }
001254  e12fff1e          BX       lr
;;;601    
                          ENDP

                  MTP_WaitingStartMessage PROC
;;;602    void MTP_WaitingStartMessage(void)
001258  e92d4010          PUSH     {r4,lr}
;;;603    {
00125c  e24dd018          SUB      sp,sp,#0x18
;;;604        char msgBuffer[24];
;;;605        memset(msgBuffer, 0x00, sizeof(msgBuffer));
001260  e3a01018          MOV      r1,#0x18
001264  e1a0000d          MOV      r0,sp
001268  ebfffffe          BL       __aeabi_memclr4
;;;606        sprintf(msgBuffer, "ReadyForMTPStart\r\n");
00126c  e28f1f8b          ADR      r1,|L1.5280|
001270  e1a0000d          MOV      r0,sp
001274  ebfffffe          BL       __2sprintf
;;;607        pCommunicationInterface->writeFunc((uint8_t *)msgBuffer, strlen(msgBuffer) + 2);
001278  e1a0000d          MOV      r0,sp
00127c  ebfffffe          BL       strlen
001280  e2804002          ADD      r4,r0,#2
001284  e51f0868          LDR      r0,|L1.2596|
001288  e5900000          LDR      r0,[r0,#0]  ; pCommunicationInterface
00128c  e1a01004          MOV      r1,r4
001290  e5902004          LDR      r2,[r0,#4]
001294  e1a0000d          MOV      r0,sp
001298  e12fff32          BLX      r2
;;;608    }
00129c  e28dd018          ADD      sp,sp,#0x18
0012a0  e8bd8010          POP      {r4,pc}
;;;609    
                          ENDP

                  MTP_GetProcedureFlag PROC
;;;610    BOOL MTP_GetProcedureFlag(void)
0012a4  e59f01b4          LDR      r0,|L1.5216|
;;;611    {
;;;612        return isStartFlag;
0012a8  e5d00000          LDRB     r0,[r0,#0]  ; isStartFlag
;;;613    }
0012ac  e12fff1e          BX       lr
;;;614    
                          ENDP

                  MTP_GetSwitchRTCFlag PROC
;;;615    BOOL MTP_GetSwitchRTCFlag(void)
0012b0  e59f01c0          LDR      r0,|L1.5240|
;;;616    {
;;;617        return enabledSwitchRTCMode;
0012b4  e5d00000          LDRB     r0,[r0,#0]  ; enabledSwitchRTCMode
;;;618    }
0012b8  e12fff1e          BX       lr
;;;619    
                          ENDP

                  CRCTool_Table PROC
;;;717    // only usable with polynom orders of 8, 16, 24 or 32.
;;;718    uint32_t CRCTool_Table(uint8_t *p, int p_len)
0012bc  e92d41f0          PUSH     {r4-r8,lr}
;;;719    {
0012c0  e1a06000          MOV      r6,r0
0012c4  e1a07001          MOV      r7,r1
;;;720        uint32_t crc = crcinit_nondirect;
0012c8  e59f01c4          LDR      r0,|L1.5268|
0012cc  e5905000          LDR      r5,[r0,#0]  ; crcinit_nondirect
;;;721        int i;
;;;722        
;;;723        if (refin != 0) {
0012d0  e51f08f8          LDR      r0,|L1.2528|
0012d4  e5900000          LDR      r0,[r0,#0]  ; refin
0012d8  e3500000          CMP      r0,#0
0012dc  0a000004          BEQ      |L1.4852|
;;;724            crc = reflect(crc, order);
0012e0  e51f0904          LDR      r0,|L1.2532|
0012e4  e5901000          LDR      r1,[r0,#0]  ; order
0012e8  e1a00005          MOV      r0,r5
0012ec  ebfffffe          BL       reflect
0012f0  e1a05000          MOV      r5,r0
                  |L1.4852|
;;;725        }
;;;726        if (refin == 0)
0012f4  e51f091c          LDR      r0,|L1.2528|
0012f8  e5900000          LDR      r0,[r0,#0]  ; refin
0012fc  e3500000          CMP      r0,#0
001300  1a00000f          BNE      |L1.4932|
;;;727        {
;;;728            for (i = 0 ; i < p_len ; i++) {
001304  e3a04000          MOV      r4,#0
001308  ea00000a          B        |L1.4920|
                  |L1.4876|
;;;729                crc = ((crc << 8) | p[i]) ^ crctab[(crc >> (order - 8)) & 0xff];
00130c  e7d60004          LDRB     r0,[r6,r4]
001310  e1800405          ORR      r0,r0,r5,LSL #8
001314  e51f1938          LDR      r1,|L1.2532|
001318  e5d11000          LDRB     r1,[r1,#0]  ; order
00131c  e2411008          SUB      r1,r1,#8
001320  e1a01135          LSR      r1,r5,r1
001324  e20110ff          AND      r1,r1,#0xff
001328  e51f293c          LDR      r2,|L1.2548|
00132c  e7921101          LDR      r1,[r2,r1,LSL #2]
001330  e0205001          EOR      r5,r0,r1
001334  e2844001          ADD      r4,r4,#1              ;728
                  |L1.4920|
001338  e1540007          CMP      r4,r7                 ;728
00133c  bafffff2          BLT      |L1.4876|
001340  ea00000e          B        |L1.4992|
                  |L1.4932|
;;;730            }
;;;731        }
;;;732        else
;;;733        {
;;;734            for (i = 0 ; i < p_len ; i++) {
001344  e3a04000          MOV      r4,#0
001348  ea00000a          B        |L1.4984|
                  |L1.4940|
;;;735                crc = (uint32_t)(((uint32_t)(crc >> 8) | (p[i] << (order - 8))) ^ (int)crctab[crc & 0xff]);
00134c  e7d60004          LDRB     r0,[r6,r4]
001350  e51f1974          LDR      r1,|L1.2532|
001354  e5d11000          LDRB     r1,[r1,#0]  ; order
001358  e2411008          SUB      r1,r1,#8
00135c  e1a00110          LSL      r0,r0,r1
001360  e1800425          ORR      r0,r0,r5,LSR #8
001364  e20510ff          AND      r1,r5,#0xff
001368  e51f297c          LDR      r2,|L1.2548|
00136c  e7921101          LDR      r1,[r2,r1,LSL #2]
001370  e0205001          EOR      r5,r0,r1
001374  e2844001          ADD      r4,r4,#1              ;734
                  |L1.4984|
001378  e1540007          CMP      r4,r7                 ;734
00137c  bafffff2          BLT      |L1.4940|
                  |L1.4992|
;;;736            }
;;;737        }
;;;738        if (refin == 0)
001380  e51f09a8          LDR      r0,|L1.2528|
001384  e5900000          LDR      r0,[r0,#0]  ; refin
001388  e3500000          CMP      r0,#0
00138c  1a000011          BNE      |L1.5080|
;;;739        {
;;;740            for (i = 0 ; i < order / 8 ; i++) {
001390  e3a04000          MOV      r4,#0
001394  ea000008          B        |L1.5052|
                  |L1.5016|
;;;741                crc = (crc << 8) ^ crctab[(crc >> (order - 8)) & 0xff];
001398  e51f09bc          LDR      r0,|L1.2532|
00139c  e5d00000          LDRB     r0,[r0,#0]  ; order
0013a0  e2400008          SUB      r0,r0,#8
0013a4  e1a00035          LSR      r0,r5,r0
0013a8  e20000ff          AND      r0,r0,#0xff
0013ac  e51f19c0          LDR      r1,|L1.2548|
0013b0  e7910100          LDR      r0,[r1,r0,LSL #2]
0013b4  e0205405          EOR      r5,r0,r5,LSL #8
0013b8  e2844001          ADD      r4,r4,#1              ;740
                  |L1.5052|
0013bc  e51f19e0          LDR      r1,|L1.2532|
0013c0  e5910000          LDR      r0,[r1,#0]            ;740  ; order
0013c4  e1a01fc0          ASR      r1,r0,#31             ;740
0013c8  e0801ea1          ADD      r1,r0,r1,LSR #29      ;740
0013cc  e15401c1          CMP      r4,r1,ASR #3          ;740
0013d0  bafffff0          BLT      |L1.5016|
0013d4  ea00000c          B        |L1.5132|
                  |L1.5080|
;;;742            }
;;;743        }
;;;744        else
;;;745        {
;;;746            for (i = 0 ; i < order / 8 ; i++) {
0013d8  e3a04000          MOV      r4,#0
0013dc  ea000004          B        |L1.5108|
                  |L1.5088|
;;;747                crc = (crc >> 8) ^ crctab[crc & 0xff];
0013e0  e20500ff          AND      r0,r5,#0xff
0013e4  e51f19f8          LDR      r1,|L1.2548|
0013e8  e7910100          LDR      r0,[r1,r0,LSL #2]
0013ec  e0205425          EOR      r5,r0,r5,LSR #8
0013f0  e2844001          ADD      r4,r4,#1              ;746
                  |L1.5108|
0013f4  e51f1a18          LDR      r1,|L1.2532|
0013f8  e5910000          LDR      r0,[r1,#0]            ;746  ; order
0013fc  e1a01fc0          ASR      r1,r0,#31             ;746
001400  e0801ea1          ADD      r1,r0,r1,LSR #29      ;746
001404  e15401c1          CMP      r4,r1,ASR #3          ;746
001408  bafffff4          BLT      |L1.5088|
                  |L1.5132|
;;;748            }
;;;749        }
;;;750        
;;;751        if ((refout ^ refin) != 0) {
00140c  e51f0a00          LDR      r0,|L1.2580|
001410  e5900000          LDR      r0,[r0,#0]  ; refout
001414  e51f1a3c          LDR      r1,|L1.2528|
001418  e5911000          LDR      r1,[r1,#0]  ; refin
00141c  e1300001          TEQ      r0,r1
001420  0a000004          BEQ      |L1.5176|
;;;752            crc = reflect(crc, order);
001424  e51f0a48          LDR      r0,|L1.2532|
001428  e5901000          LDR      r1,[r0,#0]  ; order
00142c  e1a00005          MOV      r0,r5
001430  ebfffffe          BL       reflect
001434  e1a05000          MOV      r5,r0
                  |L1.5176|
;;;753        }
;;;754        crc ^= crcxor;
001438  e51f0a28          LDR      r0,|L1.2584|
00143c  e5900000          LDR      r0,[r0,#0]  ; crcxor
001440  e0255000          EOR      r5,r5,r0
;;;755        crc &= crcmask;
001444  e51f0a5c          LDR      r0,|L1.2544|
001448  e5900000          LDR      r0,[r0,#0]  ; crcmask
00144c  e0055000          AND      r5,r5,r0
;;;756        return crc;
001450  e1a00005          MOV      r0,r5
;;;757    }
001454  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5208|
                          DCD      RxCounter
                  |L1.5212|
                          DCD      RxBuffer
                  |L1.5216|
                          DCD      isStartFlag
                  |L1.5220|
                          DCD      RxBuffer+0x3
                  |L1.5224|
                          DCD      RxBuffer+0x2
                  |L1.5228|
                          DCD      MTP_MessageHeader
                  |L1.5232|
                          DCD      MTP_MessageTail
                  |L1.5236|
                          DCD      MTP_OptionData
                  |L1.5240|
                          DCD      enabledSwitchRTCMode
                  |L1.5244|
                          DCD      direct
                  |L1.5248|
                          DCD      0x00001021
                  |L1.5252|
                          DCD      0x0000ffff
                  |L1.5256|
                          DCD      crcinit
                  |L1.5260|
                          DCD      0x00008005
                  |L1.5264|
                          DCD      0x04c11db7
                  |L1.5268|
                          DCD      crcinit_nondirect
                  |L1.5272|
                          DCD      CryptoOutputCipher_Pool
                  |L1.5276|
                          DCD      CryptoService_IRQHandler
                  |L1.5280|
0014a0  52656164          DCB      "ReadyForMTPStart\r\n",0
0014a4  79466f72
0014a8  4d545053
0014ac  74617274
0014b0  0d0a00  
0014b3  00                DCB      0
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  RxBuffer
                          %        256
                  TxBuffer
                          %        256
                  AuthenSessionKey
                          %        24
                  MTP_HashKey
                          %        32
                  RTCBuffer
                          %        12
                  DeviceParameterBuffer
                          %        60
                  CryptoInputCipher_Pool
                          %        64
                  CryptoOutputCipher_Pool
                          %        64
                  crctab
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  InitialVector
                          DCD      0x00000000
                          DCD      0x00000000
                  SECURITY_KEY
000008  480c81a3          DCB      0x48,0x0c,0x81,0xa3
00000c  0e150303          DCB      0x0e,0x15,0x03,0x03
000010  0bb5c125          DCB      0x0b,0xb5,0xc1,0x25
000014  79a4977d          DCB      0x79,0xa4,0x97,0x7d
000018  d80f1201          DCB      0xd8,0x0f,0x12,0x01
00001c  7dfcd2ec          DCB      0x7d,0xfc,0xd2,0xec
000020  2df1512a          DCB      0x2d,0xf1,0x51,0x2a
000024  050af2e6          DCB      0x05,0x0a,0xf2,0xe6
000028  d3c6be4f          DCB      0xd3,0xc6,0xbe,0x4f
00002c  0740b23d          DCB      0x07,0x40,0xb2,0x3d
000030  351e14a4          DCB      0x35,0x1e,0x14,0xa4
000034  ab8d24c6          DCB      0xab,0x8d,0x24,0xc6
000038  bf6305db          DCB      0xbf,0x63,0x05,0xdb
00003c  9941f9c7          DCB      0x99,0x41,0xf9,0xc7
000040  8e99e4b2          DCB      0x8e,0x99,0xe4,0xb2
000044  1871a2c1          DCB      0x18,0x71,0xa2,0xc1
000048  5db2fbce          DCB      0x5d,0xb2,0xfb,0xce
00004c  244abe88          DCB      0x24,0x4a,0xbe,0x88
000050  ad733946          DCB      0xad,0x73,0x39,0x46
000054  429b38cb          DCB      0x42,0x9b,0x38,0xcb
000058  756e070f          DCB      0x75,0x6e,0x07,0x0f
00005c  449f45bc          DCB      0x44,0x9f,0x45,0xbc
000060  365b3fae          DCB      0x36,0x5b,0x3f,0xae
000064  81eed699          DCB      0x81,0xee,0xd6,0x99
000068  dae75bd8          DCB      0xda,0xe7,0x5b,0xd8
00006c  6b1664af          DCB      0x6b,0x16,0x64,0xaf
000070  718b20a9          DCB      0x71,0x8b,0x20,0xa9
000074  c8c5017d          DCB      0xc8,0xc5,0x01,0x7d
000078  7f8ffe91          DCB      0x7f,0x8f,0xfe,0x91
00007c  3e43889c          DCB      0x3e,0x43,0x88,0x9c
000080  bfa1e013          DCB      0xbf,0xa1,0xe0,0x13
000084  230cc9aa          DCB      0x23,0x0c,0xc9,0xaa
000088  5ed983ff          DCB      0x5e,0xd9,0x83,0xff
00008c  3ff16b50          DCB      0x3f,0xf1,0x6b,0x50
000090  1baf5a40          DCB      0x1b,0xaf,0x5a,0x40
000094  4362c556          DCB      0x43,0x62,0xc5,0x56
000098  c0b773d1          DCB      0xc0,0xb7,0x73,0xd1
00009c  6e2e9370          DCB      0x6e,0x2e,0x93,0x70
0000a0  20b54048          DCB      0x20,0xb5,0x40,0x48
0000a4  a7ce0ab8          DCB      0xa7,0xce,0x0a,0xb8
                  MTP_MessageHeader
0000a8  728394a5          DCB      0x72,0x83,0x94,0xa5
0000ac  b6c7d8e9          DCB      0xb6,0xc7,0xd8,0xe9
                  MTP_MessageTail
0000b0  cfbead9c          DCB      0xcf,0xbe,0xad,0x9c
0000b4  8b7a6900          DCB      0x8b,0x7a,0x69,0x00
                  pCommunicationInterface
                          DCD      0x00000000
                  RxCounter
                          DCD      0x00000000
                  TxCounter
                          DCD      0x00000000
                  EnableAuthenSessionKeyFlag
0000c4  00                DCB      0x00
                  isStartFlag
0000c5  00                DCB      0x00
                  enabledSwitchRTCMode
0000c6  0000              DCB      0x00,0x00
                  CryptoDoneFlag
                          DCD      0x00000000
                  order
                          DCD      0x00000010
                  polynom
                          DCD      0x00001021
                  direct
                          DCD      0x00000001
                  crcinit
                          DCD      0x0000ffff
                  crcxor
                          DCD      0x00000000
                  refin
                          DCD      0x00000000
                  refout
                          DCD      0x00000000
                  MTP_OptionData
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
                  CryptoInputCipher
                          DCD      0x00000000
                  CryptoOutputCipher
                          DCD      0x00000000
                  crcmask
                          DCD      0x00000000
                  crchighbit
                          DCD      0x00000000
                  crcinit_direct
                          DCD      0x00000000
                  crcinit_nondirect
                          DCD      0x00000000
