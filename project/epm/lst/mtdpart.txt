; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\mtdpart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mtdpart.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\mtdpart.crf ..\..\common\src\BSP\ThirdParty\yaffs2\mtdpart.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  part_read PROC
;;;61     
;;;62     static int part_read(struct mtd_info *mtd, loff_t from, size_t len,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;63     		size_t *retlen, u_char *buf)
;;;64     {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a05002          MOV      r5,r2
000010  e1a06003          MOV      r6,r3
000014  e59db040          LDR      r11,[sp,#0x40]
;;;65     	struct mtd_part *part = PART(mtd);
000018  e1a09004          MOV      r9,r4
;;;66     	struct mtd_ecc_stats stats;
;;;67     	int res;
;;;68     
;;;69     	stats = part->master->ecc_stats;
00001c  e59930b0          LDR      r3,[r9,#0xb0]
000020  e5931080          LDR      r1,[r3,#0x80]
000024  e2833084          ADD      r3,r3,#0x84
000028  e893000d          LDM      r3,{r0,r2,r3}
00002c  e28d7010          ADD      r7,sp,#0x10
000030  e887000d          STM      r7,{r0,r2,r3}
000034  e58d100c          STR      r1,[sp,#0xc]
;;;70     
;;;71     	if (from >= mtd->size)
000038  e1c400d8          LDRD     r0,r1,[r4,#8]
00003c  e0550000          SUBS     r0,r5,r0
000040  e0d60001          SBCS     r0,r6,r1
000044  3a000001          BCC      |L1.80|
;;;72     		len = 0;
000048  e3a0b000          MOV      r11,#0
00004c  ea000007          B        |L1.112|
                  |L1.80|
;;;73     	else if (from + len > mtd->size)
000050  e095300b          ADDS     r3,r5,r11
000054  e2a62000          ADC      r2,r6,#0
000058  e1c400d8          LDRD     r0,r1,[r4,#8]
00005c  e0500003          SUBS     r0,r0,r3
000060  e0d10002          SBCS     r0,r1,r2
000064  2a000001          BCS      |L1.112|
;;;74     		len = mtd->size - from;
000068  e5940008          LDR      r0,[r4,#8]
00006c  e050b005          SUBS     r11,r0,r5
                  |L1.112|
;;;75     	res = part->master->read(part->master, from + part->offset,
000070  e59d0048          LDR      r0,[sp,#0x48]
000074  e59d1044          LDR      r1,[sp,#0x44]
000078  e58d0008          STR      r0,[sp,#8]
00007c  e58d1004          STR      r1,[sp,#4]
000080  e58db000          STR      r11,[sp,#0]
000084  e1c92bd8          LDRD     r2,r3,[r9,#0xb8]
000088  e0927005          ADDS     r7,r2,r5
00008c  e0a33006          ADC      r3,r3,r6
000090  e59900b0          LDR      r0,[r9,#0xb0]
000094  e1a02007          MOV      r2,r7
000098  e5901040          LDR      r1,[r0,#0x40]
00009c  e12fff31          BLX      r1
0000a0  e1a0a000          MOV      r10,r0
;;;76     				   len, retlen, buf);
;;;77     	if (res) {
0000a4  e35a0000          CMP      r10,#0
0000a8  0a000011          BEQ      |L1.244|
;;;78     		if (res == -EUCLEAN)
0000ac  e37a0075          CMN      r10,#0x75
0000b0  1a000006          BNE      |L1.208|
;;;79     			mtd->ecc_stats.corrected += part->master->ecc_stats.corrected - stats.corrected;
0000b4  e59900b0          LDR      r0,[r9,#0xb0]
0000b8  e5900080          LDR      r0,[r0,#0x80]
0000bc  e59d100c          LDR      r1,[sp,#0xc]
0000c0  e0400001          SUB      r0,r0,r1
0000c4  e5941080          LDR      r1,[r4,#0x80]
0000c8  e0800001          ADD      r0,r0,r1
0000cc  e5840080          STR      r0,[r4,#0x80]
                  |L1.208|
;;;80     		if (res == -EBADMSG)
0000d0  e37a004a          CMN      r10,#0x4a
0000d4  1a000006          BNE      |L1.244|
;;;81     			mtd->ecc_stats.failed += part->master->ecc_stats.failed - stats.failed;
0000d8  e59900b0          LDR      r0,[r9,#0xb0]
0000dc  e5900084          LDR      r0,[r0,#0x84]
0000e0  e59d1010          LDR      r1,[sp,#0x10]
0000e4  e0400001          SUB      r0,r0,r1
0000e8  e5941084          LDR      r1,[r4,#0x84]
0000ec  e0800001          ADD      r0,r0,r1
0000f0  e5840084          STR      r0,[r4,#0x84]
                  |L1.244|
;;;82     	}
;;;83     	return res;
0000f4  e1a0000a          MOV      r0,r10
0000f8  e28dd01c          ADD      sp,sp,#0x1c
;;;84     }
0000fc  e8bd8ff0          POP      {r4-r11,pc}
;;;85     
                          ENDP

                  part_read_oob PROC
;;;86     static int part_read_oob(struct mtd_info *mtd, loff_t from,
000100  e92d4ff8          PUSH     {r3-r11,lr}
;;;87     		struct mtd_oob_ops *ops)
;;;88     {
000104  e1a04000          MOV      r4,r0
000108  e1a05002          MOV      r5,r2
00010c  e1a06003          MOV      r6,r3
000110  e59db028          LDR      r11,[sp,#0x28]
;;;89     	struct mtd_part *part = PART(mtd);
000114  e1a0a004          MOV      r10,r4
;;;90     	int res;
;;;91     
;;;92     	if (from >= mtd->size)
000118  e1c400d8          LDRD     r0,r1,[r4,#8]
00011c  e0550000          SUBS     r0,r5,r0
000120  e0d60001          SBCS     r0,r6,r1
000124  3a000001          BCC      |L1.304|
;;;93     		return -EINVAL;
000128  e3e00015          MVN      r0,#0x15
                  |L1.300|
;;;94     	if (ops->datbuf && from + ops->len > mtd->size)
;;;95     		return -EINVAL;
;;;96     	res = part->master->read_oob(part->master, from + part->offset, ops);
;;;97     
;;;98     	if (res) {
;;;99     		if (res == -EUCLEAN)
;;;100    			mtd->ecc_stats.corrected++;
;;;101    		if (res == -EBADMSG)
;;;102    			mtd->ecc_stats.failed++;
;;;103    	}
;;;104    	return res;
;;;105    }
00012c  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.304|
000130  e59b0018          LDR      r0,[r11,#0x18]        ;94
000134  e3500000          CMP      r0,#0                 ;94
000138  0a000009          BEQ      |L1.356|
00013c  e5941008          LDR      r1,[r4,#8]            ;94
000140  e594200c          LDR      r2,[r4,#0xc]          ;94
000144  e59b0004          LDR      r0,[r11,#4]           ;94
000148  e0900005          ADDS     r0,r0,r5              ;94
00014c  e2a63000          ADC      r3,r6,#0              ;94
000150  e0510000          SUBS     r0,r1,r0              ;94
000154  e0d20003          SBCS     r0,r2,r3              ;94
000158  2a000001          BCS      |L1.356|
00015c  e3e00015          MVN      r0,#0x15              ;95
000160  eafffff1          B        |L1.300|
                  |L1.356|
000164  e58db000          STR      r11,[sp,#0]           ;96
000168  e1ca2bd8          LDRD     r2,r3,[r10,#0xb8]     ;96
00016c  e0927005          ADDS     r7,r2,r5              ;96
000170  e0a33006          ADC      r3,r3,r6              ;96
000174  e59a00b0          LDR      r0,[r10,#0xb0]        ;96
000178  e1a02007          MOV      r2,r7                 ;96
00017c  e590104c          LDR      r1,[r0,#0x4c]         ;96
000180  e12fff31          BLX      r1                    ;96
000184  e1a09000          MOV      r9,r0                 ;96
000188  e3590000          CMP      r9,#0                 ;98
00018c  0a000009          BEQ      |L1.440|
000190  e3790075          CMN      r9,#0x75              ;99
000194  1a000002          BNE      |L1.420|
000198  e5940080          LDR      r0,[r4,#0x80]         ;100
00019c  e2800001          ADD      r0,r0,#1              ;100
0001a0  e5840080          STR      r0,[r4,#0x80]         ;100
                  |L1.420|
0001a4  e379004a          CMN      r9,#0x4a              ;101
0001a8  1a000002          BNE      |L1.440|
0001ac  e5940084          LDR      r0,[r4,#0x84]         ;102
0001b0  e2800001          ADD      r0,r0,#1              ;102
0001b4  e5840084          STR      r0,[r4,#0x84]         ;102
                  |L1.440|
0001b8  e1a00009          MOV      r0,r9                 ;104
0001bc  eaffffda          B        |L1.300|
;;;106    
                          ENDP

                  part_read_user_prot_reg PROC
;;;107    static int part_read_user_prot_reg(struct mtd_info *mtd, loff_t from,
0001c0  e92d4ffe          PUSH     {r1-r11,lr}
;;;108    		size_t len, size_t *retlen, u_char *buf)
;;;109    {
0001c4  e1a04000          MOV      r4,r0
0001c8  e1a06002          MOV      r6,r2
0001cc  e1a07003          MOV      r7,r3
0001d0  e28da030          ADD      r10,sp,#0x30
0001d4  e89a0700          LDM      r10,{r8-r10}
;;;110    	struct mtd_part *part = PART(mtd);
0001d8  e1a05004          MOV      r5,r4
;;;111    	return part->master->read_user_prot_reg(part->master, from,
0001dc  e88d0700          STM      sp,{r8-r10}
0001e0  e59500b0          LDR      r0,[r5,#0xb0]
0001e4  e1a02006          MOV      r2,r6
0001e8  e1a03007          MOV      r3,r7
0001ec  e5901060          LDR      r1,[r0,#0x60]
0001f0  e12fff31          BLX      r1
;;;112    					len, retlen, buf);
;;;113    }
0001f4  e8bd8ffe          POP      {r1-r11,pc}
;;;114    
                          ENDP

                  part_get_user_prot_info PROC
;;;115    static int part_get_user_prot_info(struct mtd_info *mtd,
0001f8  e92d41f0          PUSH     {r4-r8,lr}
;;;116    		struct otp_info *buf, size_t len)
;;;117    {
0001fc  e1a04000          MOV      r4,r0
000200  e1a06001          MOV      r6,r1
000204  e1a07002          MOV      r7,r2
;;;118    	struct mtd_part *part = PART(mtd);
000208  e1a05004          MOV      r5,r4
;;;119    	return part->master->get_user_prot_info(part->master, buf, len);
00020c  e59500b0          LDR      r0,[r5,#0xb0]
000210  e1a02007          MOV      r2,r7
000214  e1a01006          MOV      r1,r6
000218  e590305c          LDR      r3,[r0,#0x5c]
00021c  e12fff33          BLX      r3
;;;120    }
000220  e8bd81f0          POP      {r4-r8,pc}
;;;121    
                          ENDP

                  part_read_fact_prot_reg PROC
;;;122    static int part_read_fact_prot_reg(struct mtd_info *mtd, loff_t from,
000224  e92d4ffe          PUSH     {r1-r11,lr}
;;;123    		size_t len, size_t *retlen, u_char *buf)
;;;124    {
000228  e1a04000          MOV      r4,r0
00022c  e1a06002          MOV      r6,r2
000230  e1a07003          MOV      r7,r3
000234  e28da030          ADD      r10,sp,#0x30
000238  e89a0700          LDM      r10,{r8-r10}
;;;125    	struct mtd_part *part = PART(mtd);
00023c  e1a05004          MOV      r5,r4
;;;126    	return part->master->read_fact_prot_reg(part->master, from,
000240  e88d0700          STM      sp,{r8-r10}
000244  e59500b0          LDR      r0,[r5,#0xb0]
000248  e1a02006          MOV      r2,r6
00024c  e1a03007          MOV      r3,r7
000250  e5901058          LDR      r1,[r0,#0x58]
000254  e12fff31          BLX      r1
;;;127    					len, retlen, buf);
;;;128    }
000258  e8bd8ffe          POP      {r1-r11,pc}
;;;129    
                          ENDP

                  part_get_fact_prot_info PROC
;;;130    static int part_get_fact_prot_info(struct mtd_info *mtd, struct otp_info *buf,
00025c  e92d41f0          PUSH     {r4-r8,lr}
;;;131    		size_t len)
;;;132    {
000260  e1a04000          MOV      r4,r0
000264  e1a06001          MOV      r6,r1
000268  e1a07002          MOV      r7,r2
;;;133    	struct mtd_part *part = PART(mtd);
00026c  e1a05004          MOV      r5,r4
;;;134    	return part->master->get_fact_prot_info(part->master, buf, len);
000270  e59500b0          LDR      r0,[r5,#0xb0]
000274  e1a02007          MOV      r2,r7
000278  e1a01006          MOV      r1,r6
00027c  e5903054          LDR      r3,[r0,#0x54]
000280  e12fff33          BLX      r3
;;;135    }
000284  e8bd81f0          POP      {r4-r8,pc}
;;;136    
                          ENDP

                  part_write PROC
;;;137    static int part_write(struct mtd_info *mtd, loff_t to, size_t len,
000288  e92d4ffe          PUSH     {r1-r11,lr}
;;;138    		size_t *retlen, const u_char *buf)
;;;139    {
00028c  e1a06000          MOV      r6,r0
000290  e1a04002          MOV      r4,r2
000294  e1a05003          MOV      r5,r3
000298  e59d9030          LDR      r9,[sp,#0x30]
00029c  e59db034          LDR      r11,[sp,#0x34]
;;;140    	struct mtd_part *part = PART(mtd);
0002a0  e1a0a006          MOV      r10,r6
;;;141    	if (!(mtd->flags & MTD_WRITEABLE))
0002a4  e1d600b4          LDRH     r0,[r6,#4]
0002a8  e3100b01          TST      r0,#0x400
0002ac  1a000001          BNE      |L1.696|
;;;142    		return -EROFS;
0002b0  e3e0001d          MVN      r0,#0x1d
                  |L1.692|
;;;143    	if (to >= mtd->size)
;;;144    		len = 0;
;;;145    	else if (to + len > mtd->size)
;;;146    		len = mtd->size - to;
;;;147    	return part->master->write(part->master, to + part->offset,
;;;148    				    len, retlen, buf);
;;;149    }
0002b4  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.696|
0002b8  e5961008          LDR      r1,[r6,#8]            ;143
0002bc  e0541001          SUBS     r1,r4,r1              ;143
0002c0  e596000c          LDR      r0,[r6,#0xc]          ;143
0002c4  e0d50000          SBCS     r0,r5,r0              ;143
0002c8  3a000001          BCC      |L1.724|
0002cc  e3a09000          MOV      r9,#0                 ;144
0002d0  ea000007          B        |L1.756|
                  |L1.724|
0002d4  e0943009          ADDS     r3,r4,r9              ;145
0002d8  e2a52000          ADC      r2,r5,#0              ;145
0002dc  e1c600d8          LDRD     r0,r1,[r6,#8]         ;145
0002e0  e0500003          SUBS     r0,r0,r3              ;145
0002e4  e0d10002          SBCS     r0,r1,r2              ;145
0002e8  2a000001          BCS      |L1.756|
0002ec  e5960008          LDR      r0,[r6,#8]            ;146
0002f0  e0509004          SUBS     r9,r0,r4              ;146
                  |L1.756|
0002f4  e59d0038          LDR      r0,[sp,#0x38]         ;147
0002f8  e58d0008          STR      r0,[sp,#8]            ;147
0002fc  e88d0a00          STM      sp,{r9,r11}           ;147
000300  e1ca2bd8          LDRD     r2,r3,[r10,#0xb8]     ;147
000304  e0927004          ADDS     r7,r2,r4              ;147
000308  e0a33005          ADC      r3,r3,r5              ;147
00030c  e59a00b0          LDR      r0,[r10,#0xb0]        ;147
000310  e1a02007          MOV      r2,r7                 ;147
000314  e5901044          LDR      r1,[r0,#0x44]         ;147
000318  e12fff31          BLX      r1                    ;147
00031c  eaffffe4          B        |L1.692|
;;;150    
                          ENDP

                  part_panic_write PROC
;;;151    static int part_panic_write(struct mtd_info *mtd, loff_t to, size_t len,
000320  e92d4ffe          PUSH     {r1-r11,lr}
;;;152    		size_t *retlen, const u_char *buf)
;;;153    {
000324  e1a06000          MOV      r6,r0
000328  e1a04002          MOV      r4,r2
00032c  e1a05003          MOV      r5,r3
000330  e59d9030          LDR      r9,[sp,#0x30]
000334  e59db034          LDR      r11,[sp,#0x34]
;;;154    	struct mtd_part *part = PART(mtd);
000338  e1a0a006          MOV      r10,r6
;;;155    	if (!(mtd->flags & MTD_WRITEABLE))
00033c  e1d600b4          LDRH     r0,[r6,#4]
000340  e3100b01          TST      r0,#0x400
000344  1a000001          BNE      |L1.848|
;;;156    		return -EROFS;
000348  e3e0001d          MVN      r0,#0x1d
                  |L1.844|
;;;157    	if (to >= mtd->size)
;;;158    		len = 0;
;;;159    	else if (to + len > mtd->size)
;;;160    		len = mtd->size - to;
;;;161    	return part->master->panic_write(part->master, to + part->offset,
;;;162    				    len, retlen, buf);
;;;163    }
00034c  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.848|
000350  e5961008          LDR      r1,[r6,#8]            ;157
000354  e0541001          SUBS     r1,r4,r1              ;157
000358  e596000c          LDR      r0,[r6,#0xc]          ;157
00035c  e0d50000          SBCS     r0,r5,r0              ;157
000360  3a000001          BCC      |L1.876|
000364  e3a09000          MOV      r9,#0                 ;158
000368  ea000007          B        |L1.908|
                  |L1.876|
00036c  e0943009          ADDS     r3,r4,r9              ;159
000370  e2a52000          ADC      r2,r5,#0              ;159
000374  e1c600d8          LDRD     r0,r1,[r6,#8]         ;159
000378  e0500003          SUBS     r0,r0,r3              ;159
00037c  e0d10002          SBCS     r0,r1,r2              ;159
000380  2a000001          BCS      |L1.908|
000384  e5960008          LDR      r0,[r6,#8]            ;160
000388  e0509004          SUBS     r9,r0,r4              ;160
                  |L1.908|
00038c  e59d0038          LDR      r0,[sp,#0x38]         ;161
000390  e58d0008          STR      r0,[sp,#8]            ;161
000394  e88d0a00          STM      sp,{r9,r11}           ;161
000398  e1ca2bd8          LDRD     r2,r3,[r10,#0xb8]     ;161
00039c  e0927004          ADDS     r7,r2,r4              ;161
0003a0  e0a33005          ADC      r3,r3,r5              ;161
0003a4  e59a00b0          LDR      r0,[r10,#0xb0]        ;161
0003a8  e1a02007          MOV      r2,r7                 ;161
0003ac  e5901048          LDR      r1,[r0,#0x48]         ;161
0003b0  e12fff31          BLX      r1                    ;161
0003b4  eaffffe4          B        |L1.844|
;;;164    
                          ENDP

                  part_write_oob PROC
;;;165    static int part_write_oob(struct mtd_info *mtd, loff_t to,
0003b8  e92d4ff8          PUSH     {r3-r11,lr}
;;;166    		struct mtd_oob_ops *ops)
;;;167    {
0003bc  e1a06000          MOV      r6,r0
0003c0  e1a04002          MOV      r4,r2
0003c4  e1a05003          MOV      r5,r3
0003c8  e59da028          LDR      r10,[sp,#0x28]
;;;168    	struct mtd_part *part = PART(mtd);
0003cc  e1a09006          MOV      r9,r6
;;;169    
;;;170    	if (!(mtd->flags & MTD_WRITEABLE))
0003d0  e1d600b4          LDRH     r0,[r6,#4]
0003d4  e3100b01          TST      r0,#0x400
0003d8  1a000001          BNE      |L1.996|
;;;171    		return -EROFS;
0003dc  e3e0001d          MVN      r0,#0x1d
                  |L1.992|
;;;172    
;;;173    	if (to >= mtd->size)
;;;174    		return -EINVAL;
;;;175    	if (ops->datbuf && to + ops->len > mtd->size)
;;;176    		return -EINVAL;
;;;177    	return part->master->write_oob(part->master, to + part->offset, ops);
;;;178    }
0003e0  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.996|
0003e4  e1c600d8          LDRD     r0,r1,[r6,#8]         ;173
0003e8  e0540000          SUBS     r0,r4,r0              ;173
0003ec  e0d50001          SBCS     r0,r5,r1              ;173
0003f0  3a000001          BCC      |L1.1020|
0003f4  e3e00015          MVN      r0,#0x15              ;174
0003f8  eafffff8          B        |L1.992|
                  |L1.1020|
0003fc  e59a0018          LDR      r0,[r10,#0x18]        ;175
000400  e3500000          CMP      r0,#0                 ;175
000404  0a000009          BEQ      |L1.1072|
000408  e5961008          LDR      r1,[r6,#8]            ;175
00040c  e596200c          LDR      r2,[r6,#0xc]          ;175
000410  e59a0004          LDR      r0,[r10,#4]           ;175
000414  e0900004          ADDS     r0,r0,r4              ;175
000418  e2a53000          ADC      r3,r5,#0              ;175
00041c  e0510000          SUBS     r0,r1,r0              ;175
000420  e0d20003          SBCS     r0,r2,r3              ;175
000424  2a000001          BCS      |L1.1072|
000428  e3e00015          MVN      r0,#0x15              ;176
00042c  eaffffeb          B        |L1.992|
                  |L1.1072|
000430  e58da000          STR      r10,[sp,#0]           ;177
000434  e1c92bd8          LDRD     r2,r3,[r9,#0xb8]      ;177
000438  e0927004          ADDS     r7,r2,r4              ;177
00043c  e0a33005          ADC      r3,r3,r5              ;177
000440  e59900b0          LDR      r0,[r9,#0xb0]         ;177
000444  e1a02007          MOV      r2,r7                 ;177
000448  e5901050          LDR      r1,[r0,#0x50]         ;177
00044c  e12fff31          BLX      r1                    ;177
000450  eaffffe2          B        |L1.992|
;;;179    
                          ENDP

                  part_write_user_prot_reg PROC
;;;180    static int part_write_user_prot_reg(struct mtd_info *mtd, loff_t from,
000454  e92d4ffe          PUSH     {r1-r11,lr}
;;;181    		size_t len, size_t *retlen, u_char *buf)
;;;182    {
000458  e1a04000          MOV      r4,r0
00045c  e1a06002          MOV      r6,r2
000460  e1a07003          MOV      r7,r3
000464  e28da030          ADD      r10,sp,#0x30
000468  e89a0700          LDM      r10,{r8-r10}
;;;183    	struct mtd_part *part = PART(mtd);
00046c  e1a05004          MOV      r5,r4
;;;184    	return part->master->write_user_prot_reg(part->master, from,
000470  e88d0700          STM      sp,{r8-r10}
000474  e59500b0          LDR      r0,[r5,#0xb0]
000478  e1a02006          MOV      r2,r6
00047c  e1a03007          MOV      r3,r7
000480  e5901064          LDR      r1,[r0,#0x64]
000484  e12fff31          BLX      r1
;;;185    					len, retlen, buf);
;;;186    }
000488  e8bd8ffe          POP      {r1-r11,pc}
;;;187    
                          ENDP

                  part_lock_user_prot_reg PROC
;;;188    static int part_lock_user_prot_reg(struct mtd_info *mtd, loff_t from,
00048c  e92d43f8          PUSH     {r3-r9,lr}
;;;189    		size_t len)
;;;190    {
000490  e1a04000          MOV      r4,r0
000494  e1a06002          MOV      r6,r2
000498  e1a07003          MOV      r7,r3
00049c  e59d8020          LDR      r8,[sp,#0x20]
;;;191    	struct mtd_part *part = PART(mtd);
0004a0  e1a05004          MOV      r5,r4
;;;192    	return part->master->lock_user_prot_reg(part->master, from, len);
0004a4  e58d8000          STR      r8,[sp,#0]
0004a8  e59500b0          LDR      r0,[r5,#0xb0]
0004ac  e1a02006          MOV      r2,r6
0004b0  e1a03007          MOV      r3,r7
0004b4  e5901068          LDR      r1,[r0,#0x68]
0004b8  e12fff31          BLX      r1
;;;193    }
0004bc  e8bd83f8          POP      {r3-r9,pc}
;;;194    
                          ENDP

                  part_erase PROC
;;;195    static int part_erase(struct mtd_info *mtd, struct erase_info *instr)
0004c0  e92d41f0          PUSH     {r4-r8,lr}
;;;196    {
0004c4  e1a06000          MOV      r6,r0
0004c8  e1a04001          MOV      r4,r1
;;;197    	struct mtd_part *part = PART(mtd);
0004cc  e1a05006          MOV      r5,r6
;;;198    	int ret;
;;;199    	if (!(mtd->flags & MTD_WRITEABLE))
0004d0  e1d600b4          LDRH     r0,[r6,#4]
0004d4  e3100b01          TST      r0,#0x400
0004d8  1a000001          BNE      |L1.1252|
;;;200    		return -EROFS;
0004dc  e3e0001d          MVN      r0,#0x1d
                  |L1.1248|
;;;201    	if (instr->addr >= mtd->size)
;;;202    		return -EINVAL;
;;;203    	instr->addr += part->offset;
;;;204    	ret = part->master->erase(part->master, instr);
;;;205    	if (ret) {
;;;206    		if (instr->fail_addr != (uint64_t)MTD_FAIL_ADDR_UNKNOWN)
;;;207    			instr->fail_addr -= part->offset;
;;;208    		instr->addr -= part->offset;
;;;209    	}
;;;210    	return ret;
;;;211    }
0004e0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1252|
0004e4  e1c420d8          LDRD     r2,r3,[r4,#8]         ;201
0004e8  e1c600d8          LDRD     r0,r1,[r6,#8]         ;201
0004ec  e0520000          SUBS     r0,r2,r0              ;201
0004f0  e0d30001          SBCS     r0,r3,r1              ;201
0004f4  3a000001          BCC      |L1.1280|
0004f8  e3e00015          MVN      r0,#0x15              ;202
0004fc  eafffff7          B        |L1.1248|
                  |L1.1280|
000500  e1c420d8          LDRD     r2,r3,[r4,#8]         ;203
000504  e1c50bd8          LDRD     r0,r1,[r5,#0xb8]      ;203
000508  e0900002          ADDS     r0,r0,r2              ;203
00050c  e0a11003          ADC      r1,r1,r3              ;203
000510  e1c400f8          STRD     r0,r1,[r4,#8]         ;203
000514  e59500b0          LDR      r0,[r5,#0xb0]         ;204
000518  e1a01004          MOV      r1,r4                 ;204
00051c  e5902034          LDR      r2,[r0,#0x34]         ;204
000520  e12fff32          BLX      r2                    ;204
000524  e1a07000          MOV      r7,r0                 ;204
000528  e3570000          CMP      r7,#0                 ;205
00052c  0a000014          BEQ      |L1.1412|
000530  e3e03000          MVN      r3,#0                 ;206
000534  e5941018          LDR      r1,[r4,#0x18]         ;206
000538  e0211003          EOR      r1,r1,r3              ;206
00053c  e594001c          LDR      r0,[r4,#0x1c]         ;206
000540  e0200003          EOR      r0,r0,r3              ;206
000544  e1900001          ORRS     r0,r0,r1              ;206
000548  0a000006          BEQ      |L1.1384|
00054c  e1c421d8          LDRD     r2,r3,[r4,#0x18]      ;207
000550  e59510b8          LDR      r1,[r5,#0xb8]         ;207
000554  e0521001          SUBS     r1,r2,r1              ;207
000558  e59500bc          LDR      r0,[r5,#0xbc]         ;207
00055c  e0c30000          SBC      r0,r3,r0              ;207
000560  e584001c          STR      r0,[r4,#0x1c]         ;207
000564  e5841018          STR      r1,[r4,#0x18]         ;207
                  |L1.1384|
000568  e5940008          LDR      r0,[r4,#8]            ;208
00056c  e594300c          LDR      r3,[r4,#0xc]          ;208
000570  e59510b8          LDR      r1,[r5,#0xb8]         ;208
000574  e59520bc          LDR      r2,[r5,#0xbc]         ;208
000578  e0500001          SUBS     r0,r0,r1              ;208
00057c  e0c31002          SBC      r1,r3,r2              ;208
000580  e1c400f8          STRD     r0,r1,[r4,#8]         ;208
                  |L1.1412|
000584  e1a00007          MOV      r0,r7                 ;210
000588  eaffffd4          B        |L1.1248|
;;;212    
                          ENDP

                  mtd_erase_callback PROC
;;;213    void mtd_erase_callback(struct erase_info *instr)
00058c  e92d4010          PUSH     {r4,lr}
;;;214    {
000590  e1a04000          MOV      r4,r0
;;;215    	if (instr->mtd->erase == part_erase) {
000594  e5940000          LDR      r0,[r4,#0]
000598  e5900034          LDR      r0,[r0,#0x34]
00059c  e59f1638          LDR      r1,|L1.3036|
0005a0  e1500001          CMP      r0,r1
0005a4  1a000019          BNE      |L1.1552|
;;;216    		struct mtd_part *part = PART(instr->mtd);
0005a8  e5940000          LDR      r0,[r4,#0]
;;;217    
;;;218    		if (instr->fail_addr != (uint64_t)MTD_FAIL_ADDR_UNKNOWN)
0005ac  e3e03000          MVN      r3,#0
0005b0  e1a01003          MOV      r1,r3
0005b4  e594c018          LDR      r12,[r4,#0x18]
0005b8  e023300c          EOR      r3,r3,r12
0005bc  e594201c          LDR      r2,[r4,#0x1c]
0005c0  e0211002          EOR      r1,r1,r2
0005c4  e1911003          ORRS     r1,r1,r3
0005c8  0a000007          BEQ      |L1.1516|
;;;219    			instr->fail_addr -= part->offset;
0005cc  e5941018          LDR      r1,[r4,#0x18]
0005d0  e594301c          LDR      r3,[r4,#0x1c]
0005d4  e590c0b8          LDR      r12,[r0,#0xb8]
0005d8  e051100c          SUBS     r1,r1,r12
0005dc  e59020bc          LDR      r2,[r0,#0xbc]
0005e0  e0c32002          SBC      r2,r3,r2
0005e4  e5841018          STR      r1,[r4,#0x18]
0005e8  e584201c          STR      r2,[r4,#0x1c]
                  |L1.1516|
;;;220    		instr->addr -= part->offset;
0005ec  e594200c          LDR      r2,[r4,#0xc]
0005f0  e594c008          LDR      r12,[r4,#8]
0005f4  e59010b8          LDR      r1,[r0,#0xb8]
0005f8  e59030bc          LDR      r3,[r0,#0xbc]
0005fc  e05c1001          SUBS     r1,r12,r1
000600  e0c22003          SBC      r2,r2,r3
000604  e5841008          STR      r1,[r4,#8]
000608  e584200c          STR      r2,[r4,#0xc]
;;;221    	}
00060c  e1a00000          MOV      r0,r0
                  |L1.1552|
;;;222    	if (instr->callback)
000610  e5940030          LDR      r0,[r4,#0x30]
000614  e3500000          CMP      r0,#0
000618  0a000002          BEQ      |L1.1576|
;;;223    		instr->callback(instr);
00061c  e5941030          LDR      r1,[r4,#0x30]
000620  e1a00004          MOV      r0,r4
000624  e12fff31          BLX      r1
                  |L1.1576|
;;;224    }
000628  e8bd8010          POP      {r4,pc}
;;;225    
                          ENDP

                  part_lock PROC
;;;226    static int part_lock(struct mtd_info *mtd, loff_t ofs, uint64_t len)
00062c  e92d5ffc          PUSH     {r2-r12,lr}
;;;227    {
000630  e1a0b000          MOV      r11,r0
000634  e1a04002          MOV      r4,r2
000638  e1a05003          MOV      r5,r3
00063c  e1cd63d0          LDRD     r6,r7,[sp,#0x30]
;;;228    	struct mtd_part *part = PART(mtd);
000640  e1a0a00b          MOV      r10,r11
;;;229    	if ((len + ofs) > mtd->size)
000644  e0962004          ADDS     r2,r6,r4
000648  e0a73005          ADC      r3,r7,r5
00064c  e1cb00d8          LDRD     r0,r1,[r11,#8]
000650  e0500002          SUBS     r0,r0,r2
000654  e0d10003          SBCS     r0,r1,r3
000658  2a000001          BCS      |L1.1636|
;;;230    		return -EINVAL;
00065c  e3e00015          MVN      r0,#0x15
                  |L1.1632|
;;;231    	return part->master->lock(part->master, ofs + part->offset, len);
;;;232    }
000660  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.1636|
000664  e1cd60f0          STRD     r6,r7,[sp,#0]         ;231
000668  e1ca2bd8          LDRD     r2,r3,[r10,#0xb8]     ;231
00066c  e0928004          ADDS     r8,r2,r4              ;231
000670  e0a33005          ADC      r3,r3,r5              ;231
000674  e59a00b0          LDR      r0,[r10,#0xb0]        ;231
000678  e1a02008          MOV      r2,r8                 ;231
00067c  e5901070          LDR      r1,[r0,#0x70]         ;231
000680  e12fff31          BLX      r1                    ;231
000684  eafffff5          B        |L1.1632|
;;;233    
                          ENDP

                  part_unlock PROC
;;;234    static int part_unlock(struct mtd_info *mtd, loff_t ofs, uint64_t len)
000688  e92d5ffc          PUSH     {r2-r12,lr}
;;;235    {
00068c  e1a0b000          MOV      r11,r0
000690  e1a04002          MOV      r4,r2
000694  e1a05003          MOV      r5,r3
000698  e1cd63d0          LDRD     r6,r7,[sp,#0x30]
;;;236    	struct mtd_part *part = PART(mtd);
00069c  e1a0a00b          MOV      r10,r11
;;;237    	if ((len + ofs) > mtd->size)
0006a0  e0962004          ADDS     r2,r6,r4
0006a4  e0a73005          ADC      r3,r7,r5
0006a8  e1cb00d8          LDRD     r0,r1,[r11,#8]
0006ac  e0500002          SUBS     r0,r0,r2
0006b0  e0d10003          SBCS     r0,r1,r3
0006b4  2a000001          BCS      |L1.1728|
;;;238    		return -EINVAL;
0006b8  e3e00015          MVN      r0,#0x15
                  |L1.1724|
;;;239    	return part->master->unlock(part->master, ofs + part->offset, len);
;;;240    }
0006bc  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.1728|
0006c0  e1cd60f0          STRD     r6,r7,[sp,#0]         ;239
0006c4  e1ca2bd8          LDRD     r2,r3,[r10,#0xb8]     ;239
0006c8  e0928004          ADDS     r8,r2,r4              ;239
0006cc  e0a33005          ADC      r3,r3,r5              ;239
0006d0  e59a00b0          LDR      r0,[r10,#0xb0]        ;239
0006d4  e1a02008          MOV      r2,r8                 ;239
0006d8  e5901074          LDR      r1,[r0,#0x74]         ;239
0006dc  e12fff31          BLX      r1                    ;239
0006e0  eafffff5          B        |L1.1724|
;;;241    
                          ENDP

                  part_sync PROC
;;;242    static void part_sync(struct mtd_info *mtd)
0006e4  e92d4070          PUSH     {r4-r6,lr}
;;;243    {
0006e8  e1a04000          MOV      r4,r0
;;;244    	struct mtd_part *part = PART(mtd);
0006ec  e1a05004          MOV      r5,r4
;;;245    	part->master->sync(part->master);
0006f0  e59500b0          LDR      r0,[r5,#0xb0]
0006f4  e590106c          LDR      r1,[r0,#0x6c]
0006f8  e12fff31          BLX      r1
;;;246    }
0006fc  e8bd8070          POP      {r4-r6,pc}
;;;247    
                          ENDP

                  part_block_isbad PROC
;;;248    static int part_block_isbad(struct mtd_info *mtd, loff_t ofs)
000700  e92d41f0          PUSH     {r4-r8,lr}
;;;249    {
000704  e1a07000          MOV      r7,r0
000708  e1a04002          MOV      r4,r2
00070c  e1a05003          MOV      r5,r3
;;;250    	struct mtd_part *part = PART(mtd);
000710  e1a06007          MOV      r6,r7
;;;251    	if (ofs >= mtd->size)
000714  e1c700d8          LDRD     r0,r1,[r7,#8]
000718  e0540000          SUBS     r0,r4,r0
00071c  e0d50001          SBCS     r0,r5,r1
000720  3a000001          BCC      |L1.1836|
;;;252    		return -EINVAL;
000724  e3e00015          MVN      r0,#0x15
                  |L1.1832|
;;;253    	ofs += part->offset;
;;;254    	return part->master->block_isbad(part->master, ofs);
;;;255    }
000728  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1836|
00072c  e1c60bd8          LDRD     r0,r1,[r6,#0xb8]      ;253
000730  e0944000          ADDS     r4,r4,r0              ;253
000734  e0a55001          ADC      r5,r5,r1              ;253
000738  e59600b0          LDR      r0,[r6,#0xb0]         ;254
00073c  e1a02004          MOV      r2,r4                 ;254
000740  e1a03005          MOV      r3,r5                 ;254
000744  e5901078          LDR      r1,[r0,#0x78]         ;254
000748  e12fff31          BLX      r1                    ;254
00074c  eafffff5          B        |L1.1832|
;;;256    
                          ENDP

                  part_block_markbad PROC
;;;257    static int part_block_markbad(struct mtd_info *mtd, loff_t ofs)
000750  e92d41f0          PUSH     {r4-r8,lr}
;;;258    {
000754  e1a04000          MOV      r4,r0
000758  e1a05002          MOV      r5,r2
00075c  e1a06003          MOV      r6,r3
;;;259    	struct mtd_part *part = PART(mtd);
000760  e1a07004          MOV      r7,r4
;;;260    	int res;
;;;261    
;;;262    	if (!(mtd->flags & MTD_WRITEABLE))
000764  e1d400b4          LDRH     r0,[r4,#4]
000768  e3100b01          TST      r0,#0x400
00076c  1a000001          BNE      |L1.1912|
;;;263    		return -EROFS;
000770  e3e0001d          MVN      r0,#0x1d
                  |L1.1908|
;;;264    	if (ofs >= mtd->size)
;;;265    		return -EINVAL;
;;;266    	ofs += part->offset;
;;;267    	res = part->master->block_markbad(part->master, ofs);
;;;268    	if (!res)
;;;269    		mtd->ecc_stats.badblocks++;
;;;270    	return res;
;;;271    }
000774  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1912|
000778  e5941008          LDR      r1,[r4,#8]            ;264
00077c  e0551001          SUBS     r1,r5,r1              ;264
000780  e594000c          LDR      r0,[r4,#0xc]          ;264
000784  e0d60000          SBCS     r0,r6,r0              ;264
000788  3a000001          BCC      |L1.1940|
00078c  e3e00015          MVN      r0,#0x15              ;265
000790  eafffff7          B        |L1.1908|
                  |L1.1940|
000794  e1c70bd8          LDRD     r0,r1,[r7,#0xb8]      ;266
000798  e0955000          ADDS     r5,r5,r0              ;266
00079c  e0a66001          ADC      r6,r6,r1              ;266
0007a0  e59700b0          LDR      r0,[r7,#0xb0]         ;267
0007a4  e1a02005          MOV      r2,r5                 ;267
0007a8  e1a03006          MOV      r3,r6                 ;267
0007ac  e590107c          LDR      r1,[r0,#0x7c]         ;267
0007b0  e12fff31          BLX      r1                    ;267
0007b4  e1a08000          MOV      r8,r0                 ;267
0007b8  e3580000          CMP      r8,#0                 ;268
0007bc  1a000002          BNE      |L1.1996|
0007c0  e5940088          LDR      r0,[r4,#0x88]         ;269
0007c4  e2800001          ADD      r0,r0,#1              ;269
0007c8  e5840088          STR      r0,[r4,#0x88]         ;269
                  |L1.1996|
0007cc  e1a00008          MOV      r0,r8                 ;270
0007d0  eaffffe7          B        |L1.1908|
;;;272    
                          ENDP

                  del_mtd_partitions PROC
;;;277    
;;;278    int del_mtd_partitions(struct mtd_info *master)
0007d4  e92d4070          PUSH     {r4-r6,lr}
;;;279    {
0007d8  e1a05000          MOV      r5,r0
;;;280    	struct mtd_part *slave, *next;
;;;281    
;;;282    //	list_for_each_entry_safe(slave, next, &mtd_partitions, list)
;;;283    
;;;284    	for (slave = list_entry((&mtd_partitions)->next, struct mtd_part, list),
0007dc  e59f03fc          LDR      r0,|L1.3040|
0007e0  e5900000          LDR      r0,[r0,#0]  ; mtd_partitions
0007e4  e24040c4          SUB      r4,r0,#0xc4
;;;285    		next = list_entry(slave->list.next, struct mtd_part, list);
0007e8  e59400c4          LDR      r0,[r4,#0xc4]
0007ec  e24060c4          SUB      r6,r0,#0xc4
0007f0  ea000016          B        |L1.2128|
                  |L1.2036|
;;;286    	     &slave->list != (&mtd_partitions);
;;;287    	     slave = next, next = list_entry(next->list.next, struct mtd_part, list))
;;;288        {
;;;289    		if (slave->master == master) {
0007f4  e59400b0          LDR      r0,[r4,#0xb0]
0007f8  e1500005          CMP      r0,r5
0007fc  1a000010          BNE      |L1.2116|
;;;290    			list_del(&slave->list);
000800  e1a00000          MOV      r0,r0
000804  e59400c8          LDR      r0,[r4,#0xc8]
000808  e59410c4          LDR      r1,[r4,#0xc4]
00080c  e5810004          STR      r0,[r1,#4]
000810  e5801000          STR      r1,[r0,#0]
000814  e1a00000          MOV      r0,r0
000818  e3a00000          MOV      r0,#0
00081c  e58400c4          STR      r0,[r4,#0xc4]
000820  e58400c8          STR      r0,[r4,#0xc8]
000824  e1a00000          MOV      r0,r0
;;;291    			if (slave->registered)
000828  e59400cc          LDR      r0,[r4,#0xcc]
00082c  e3500000          CMP      r0,#0
000830  0a000001          BEQ      |L1.2108|
;;;292    				del_mtd_device(&slave->mtd);
000834  e1a00004          MOV      r0,r4
000838  ebfffffe          BL       del_mtd_device
                  |L1.2108|
;;;293    			yaffs_free(slave);
00083c  e1a00004          MOV      r0,r4
000840  ebfffffe          BL       yaffs_free
                  |L1.2116|
000844  e1a04006          MOV      r4,r6                 ;287
000848  e59600c4          LDR      r0,[r6,#0xc4]         ;287
00084c  e24060c4          SUB      r6,r0,#0xc4           ;287
                  |L1.2128|
000850  e28400c4          ADD      r0,r4,#0xc4           ;286
000854  e59f1384          LDR      r1,|L1.3040|
000858  e1500001          CMP      r0,r1                 ;286
00085c  1affffe4          BNE      |L1.2036|
;;;294    		}
;;;295        }
;;;296    	return 0;
000860  e3a00000          MOV      r0,#0
;;;297    }
000864  e8bd8070          POP      {r4-r6,pc}
;;;298    
                          ENDP

                  add_one_partition PROC
;;;299    static struct mtd_part *add_one_partition(struct mtd_info *master,
000868  e92d4ffe          PUSH     {r1-r11,lr}
;;;300    		const struct mtd_partition *part, int partno,
;;;301    		uint64_t cur_offset)
;;;302    {
00086c  e1a09000          MOV      r9,r0
000870  e1a0a001          MOV      r10,r1
000874  e1a0b002          MOV      r11,r2
000878  e59d5030          LDR      r5,[sp,#0x30]
00087c  e59d6034          LDR      r6,[sp,#0x34]
;;;303    	struct mtd_part *slave;
;;;304    
;;;305    	/* allocate the partition structure */
;;;306    	slave = yaffs_malloc(sizeof(*slave));
000880  e3a000d0          MOV      r0,#0xd0
000884  ebfffffe          BL       yaffs_malloc
000888  e1a04000          MOV      r4,r0
;;;307    	if (!slave) {
00088c  e3540000          CMP      r4,#0
000890  1a000006          BNE      |L1.2224|
;;;308    		printk(KERN_ERR"memory allocation error while creating partitions for \"%s\"\n",
000894  e28f0fd2          ADR      r0,|L1.3044|
000898  e5991020          LDR      r1,[r9,#0x20]
00089c  ebfffffe          BL       sysprintf
;;;309    			master->name);
;;;310    		del_mtd_partitions(master);
0008a0  e1a00009          MOV      r0,r9
0008a4  ebfffffe          BL       del_mtd_partitions
;;;311    		return NULL;
0008a8  e3a00000          MOV      r0,#0
                  |L1.2220|
;;;312    	}
;;;313        memset(slave, 0, sizeof(*slave));
;;;314    	list_add(&slave->list, &mtd_partitions);
;;;315    
;;;316    	/* set up the MTD object for this partition */
;;;317    	slave->mtd.type = master->type;
;;;318    	slave->mtd.flags = master->flags & ~part->mask_flags;
;;;319    	slave->mtd.size = part->size;
;;;320    	slave->mtd.writesize = master->writesize;
;;;321    	slave->mtd.oobsize = master->oobsize;
;;;322    	slave->mtd.oobavail = master->oobavail;
;;;323    	slave->mtd.subpage_sft = master->subpage_sft;
;;;324    
;;;325    	slave->mtd.name = part->name;
;;;326    	slave->mtd.owner = master->owner;
;;;327    
;;;328    	slave->mtd.read = part_read;
;;;329    	slave->mtd.write = part_write;
;;;330    
;;;331    	if (master->panic_write)
;;;332    		slave->mtd.panic_write = part_panic_write;
;;;333    
;;;334    	if (master->read_oob)
;;;335    		slave->mtd.read_oob = part_read_oob;
;;;336    	if (master->write_oob)
;;;337    		slave->mtd.write_oob = part_write_oob;
;;;338    	if (master->read_user_prot_reg)
;;;339    		slave->mtd.read_user_prot_reg = part_read_user_prot_reg;
;;;340    	if (master->read_fact_prot_reg)
;;;341    		slave->mtd.read_fact_prot_reg = part_read_fact_prot_reg;
;;;342    	if (master->write_user_prot_reg)
;;;343    		slave->mtd.write_user_prot_reg = part_write_user_prot_reg;
;;;344    	if (master->lock_user_prot_reg)
;;;345    		slave->mtd.lock_user_prot_reg = part_lock_user_prot_reg;
;;;346    	if (master->get_user_prot_info)
;;;347    		slave->mtd.get_user_prot_info = part_get_user_prot_info;
;;;348    	if (master->get_fact_prot_info)
;;;349    		slave->mtd.get_fact_prot_info = part_get_fact_prot_info;
;;;350    	if (master->sync)
;;;351    		slave->mtd.sync = part_sync;
;;;352    	if (master->lock)
;;;353    		slave->mtd.lock = part_lock;
;;;354    	if (master->unlock)
;;;355    		slave->mtd.unlock = part_unlock;
;;;356    	if (master->block_isbad)
;;;357    		slave->mtd.block_isbad = part_block_isbad;
;;;358    	if (master->block_markbad)
;;;359    		slave->mtd.block_markbad = part_block_markbad;
;;;360    	slave->mtd.erase = part_erase;
;;;361    	slave->master = master;
;;;362    	slave->offset = part->offset;
;;;363    	slave->index = partno;
;;;364    
;;;365    	if (slave->offset == (uint64_t)MTDPART_OFS_APPEND)
;;;366    		slave->offset = cur_offset;
;;;367    	if (slave->offset == (uint64_t)MTDPART_OFS_NXTBLK) {
;;;368    		slave->offset = cur_offset;
;;;369    		if (mtd_mod_by_eb(cur_offset, master) != 0) {
;;;370    			/* Round up to next erasesize */
;;;371    			slave->offset = (mtd_div_by_eb(cur_offset, master) + 1) * master->erasesize;
;;;372    			printk(KERN_NOTICE "Moving partition %d: "
;;;373    			       "0x%012llx -> 0x%012llx\n", partno,
;;;374    			       (unsigned long long)cur_offset, (unsigned long long)slave->offset);
;;;375    		}
;;;376    	}
;;;377    	if (slave->mtd.size == MTDPART_SIZ_FULL)
;;;378    		slave->mtd.size = master->size - slave->offset;
;;;379    
;;;380    	printk(KERN_NOTICE "0x%012llx-0x%012llx : \"%s\"\n", (unsigned long long)slave->offset,
;;;381    		(unsigned long long)(slave->offset + slave->mtd.size), slave->mtd.name);
;;;382    
;;;383    	/* let's do some sanity checks */
;;;384    	if (slave->offset >= master->size) {
;;;385    		/* let's register it anyway to preserve ordering */
;;;386    		slave->offset = 0;
;;;387    		slave->mtd.size = 0;
;;;388    		printk(KERN_ERR"mtd: partition \"%s\" is out of reach -- disabled\n",
;;;389    			part->name);
;;;390    		goto out_register;
;;;391    	}
;;;392    	if (slave->offset + slave->mtd.size > master->size) {
;;;393    		slave->mtd.size = master->size - slave->offset;
;;;394    		printk(KERN_WARNING"mtd: partition \"%s\" extends beyond the end of device \"%s\" -- size truncated to %#llx\n",
;;;395    			part->name, master->name, (unsigned long long)slave->mtd.size);
;;;396    	}
;;;397    	if (master->numeraseregions > 1) {
;;;398    		/* Deal with variable erase size stuff */
;;;399    		int i, max = master->numeraseregions;
;;;400    		u64 end = slave->offset + slave->mtd.size;
;;;401    		struct mtd_erase_region_info *regions = master->eraseregions;
;;;402    
;;;403    		/* Find the first erase regions which is part of this
;;;404    		 * partition. */
;;;405    		for (i = 0; i < max && regions[i].offset <= slave->offset; i++)
;;;406    			;
;;;407    		/* The loop searched for the region _behind_ the first one */
;;;408    		i--;
;;;409    
;;;410    		/* Pick biggest erasesize */
;;;411    		for (; i < max && regions[i].offset < end; i++) {
;;;412    			if (slave->mtd.erasesize < regions[i].erasesize) {
;;;413    				slave->mtd.erasesize = regions[i].erasesize;
;;;414    			}
;;;415    		}
;;;416    		BUG_ON(slave->mtd.erasesize == 0);
;;;417    	} else {
;;;418    		/* Single erase size */
;;;419    		slave->mtd.erasesize = master->erasesize;
;;;420    	}
;;;421    
;;;422    	if ((slave->mtd.flags & MTD_WRITEABLE) &&
;;;423    	    mtd_mod_by_eb(slave->offset, &slave->mtd)) {
;;;424    		/* Doesn't start on a boundary of major erase size */
;;;425    		/* FIXME: Let it be writable if it is on a boundary of
;;;426    		 * _minor_ erase size though */
;;;427    		slave->mtd.flags &= ~MTD_WRITEABLE;
;;;428    		printk(KERN_WARNING"mtd: partition \"%s\" doesn't start on an erase block boundary -- force read-only\n",
;;;429    			part->name);
;;;430    	}
;;;431    	if ((slave->mtd.flags & MTD_WRITEABLE) &&
;;;432    	    mtd_mod_by_eb(slave->mtd.size, &slave->mtd)) {
;;;433    		slave->mtd.flags &= ~MTD_WRITEABLE;
;;;434    		printk(KERN_WARNING"mtd: partition \"%s\" doesn't end on an erase block -- force read-only\n",
;;;435    			part->name);
;;;436    	}
;;;437    
;;;438    	slave->mtd.ecclayout = master->ecclayout;
;;;439    	if (master->block_isbad) {
;;;440    		uint64_t offs = 0;
;;;441    
;;;442    		while (offs < slave->mtd.size) {
;;;443    			if (master->block_isbad(master,
;;;444    						offs + slave->offset))
;;;445    				slave->mtd.ecc_stats.badblocks++;
;;;446    			offs += slave->mtd.erasesize;
;;;447    		}
;;;448    	}
;;;449    
;;;450    out_register:
;;;451    	if (part->mtdp) {
;;;452    		/* store the object pointer (caller may or may not register it*/
;;;453    		*part->mtdp = &slave->mtd;
;;;454    		slave->registered = 0;
;;;455    	} else {
;;;456    		/* register our partition */
;;;457    		add_mtd_device(&slave->mtd);
;;;458    		slave->registered = 1;
;;;459    	}
;;;460    	return slave;
;;;461    }
0008ac  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.2224|
0008b0  e3a010d0          MOV      r1,#0xd0              ;313
0008b4  e1a00004          MOV      r0,r4                 ;313
0008b8  ebfffffe          BL       __aeabi_memclr4
0008bc  e28400c4          ADD      r0,r4,#0xc4           ;314
0008c0  e59f1318          LDR      r1,|L1.3040|
0008c4  e5912000          LDR      r2,[r1,#0]            ;314
0008c8  e5820004          STR      r0,[r2,#4]            ;314
0008cc  e5802000          STR      r2,[r0,#0]            ;314
0008d0  e5801004          STR      r1,[r0,#4]            ;314
0008d4  e5810000          STR      r0,[r1,#0]            ;314
0008d8  e1a00000          MOV      r0,r0                 ;314
0008dc  e1a00000          MOV      r0,r0                 ;314
0008e0  e5d90000          LDRB     r0,[r9,#0]            ;317
0008e4  e5c40000          STRB     r0,[r4,#0]            ;317
0008e8  e5990004          LDR      r0,[r9,#4]            ;318
0008ec  e59a1018          LDR      r1,[r10,#0x18]        ;318
0008f0  e1c00001          BIC      r0,r0,r1              ;318
0008f4  e5840004          STR      r0,[r4,#4]            ;318
0008f8  e1ca00d8          LDRD     r0,r1,[r10,#8]        ;319
0008fc  e1c400f8          STRD     r0,r1,[r4,#8]         ;319
000900  e5990014          LDR      r0,[r9,#0x14]         ;320
000904  e5840014          STR      r0,[r4,#0x14]         ;320
000908  e5990018          LDR      r0,[r9,#0x18]         ;321
00090c  e5840018          STR      r0,[r4,#0x18]         ;321
000910  e599001c          LDR      r0,[r9,#0x1c]         ;322
000914  e584001c          STR      r0,[r4,#0x1c]         ;322
000918  e5990090          LDR      r0,[r9,#0x90]         ;323
00091c  e5840090          STR      r0,[r4,#0x90]         ;323
000920  e59a0000          LDR      r0,[r10,#0]           ;325
000924  e5840020          STR      r0,[r4,#0x20]         ;325
000928  e5990098          LDR      r0,[r9,#0x98]         ;326
00092c  e5840098          STR      r0,[r4,#0x98]         ;326
000930  e59f02e8          LDR      r0,|L1.3104|
000934  e5840040          STR      r0,[r4,#0x40]         ;328
000938  e59f02e4          LDR      r0,|L1.3108|
00093c  e5840044          STR      r0,[r4,#0x44]         ;329
000940  e5990048          LDR      r0,[r9,#0x48]         ;331
000944  e3500000          CMP      r0,#0                 ;331
000948  0a000001          BEQ      |L1.2388|
00094c  e59f02d4          LDR      r0,|L1.3112|
000950  e5840048          STR      r0,[r4,#0x48]         ;332
                  |L1.2388|
000954  e599004c          LDR      r0,[r9,#0x4c]         ;334
000958  e3500000          CMP      r0,#0                 ;334
00095c  0a000001          BEQ      |L1.2408|
000960  e59f02c4          LDR      r0,|L1.3116|
000964  e584004c          STR      r0,[r4,#0x4c]         ;335
                  |L1.2408|
000968  e5990050          LDR      r0,[r9,#0x50]         ;336
00096c  e3500000          CMP      r0,#0                 ;336
000970  0a000001          BEQ      |L1.2428|
000974  e59f02b4          LDR      r0,|L1.3120|
000978  e5840050          STR      r0,[r4,#0x50]         ;337
                  |L1.2428|
00097c  e5990060          LDR      r0,[r9,#0x60]         ;338
000980  e3500000          CMP      r0,#0                 ;338
000984  0a000001          BEQ      |L1.2448|
000988  e59f02a4          LDR      r0,|L1.3124|
00098c  e5840060          STR      r0,[r4,#0x60]         ;339
                  |L1.2448|
000990  e5990058          LDR      r0,[r9,#0x58]         ;340
000994  e3500000          CMP      r0,#0                 ;340
000998  0a000001          BEQ      |L1.2468|
00099c  e59f0294          LDR      r0,|L1.3128|
0009a0  e5840058          STR      r0,[r4,#0x58]         ;341
                  |L1.2468|
0009a4  e5990064          LDR      r0,[r9,#0x64]         ;342
0009a8  e3500000          CMP      r0,#0                 ;342
0009ac  0a000001          BEQ      |L1.2488|
0009b0  e59f0284          LDR      r0,|L1.3132|
0009b4  e5840064          STR      r0,[r4,#0x64]         ;343
                  |L1.2488|
0009b8  e5990068          LDR      r0,[r9,#0x68]         ;344
0009bc  e3500000          CMP      r0,#0                 ;344
0009c0  0a000001          BEQ      |L1.2508|
0009c4  e59f0274          LDR      r0,|L1.3136|
0009c8  e5840068          STR      r0,[r4,#0x68]         ;345
                  |L1.2508|
0009cc  e599005c          LDR      r0,[r9,#0x5c]         ;346
0009d0  e3500000          CMP      r0,#0                 ;346
0009d4  0a000001          BEQ      |L1.2528|
0009d8  e59f0264          LDR      r0,|L1.3140|
0009dc  e584005c          STR      r0,[r4,#0x5c]         ;347
                  |L1.2528|
0009e0  e5990054          LDR      r0,[r9,#0x54]         ;348
0009e4  e3500000          CMP      r0,#0                 ;348
0009e8  0a000001          BEQ      |L1.2548|
0009ec  e59f0254          LDR      r0,|L1.3144|
0009f0  e5840054          STR      r0,[r4,#0x54]         ;349
                  |L1.2548|
0009f4  e599006c          LDR      r0,[r9,#0x6c]         ;350
0009f8  e3500000          CMP      r0,#0                 ;350
0009fc  0a000001          BEQ      |L1.2568|
000a00  e59f0244          LDR      r0,|L1.3148|
000a04  e584006c          STR      r0,[r4,#0x6c]         ;351
                  |L1.2568|
000a08  e5990070          LDR      r0,[r9,#0x70]         ;352
000a0c  e3500000          CMP      r0,#0                 ;352
000a10  0a000001          BEQ      |L1.2588|
000a14  e59f0234          LDR      r0,|L1.3152|
000a18  e5840070          STR      r0,[r4,#0x70]         ;353
                  |L1.2588|
000a1c  e5990074          LDR      r0,[r9,#0x74]         ;354
000a20  e3500000          CMP      r0,#0                 ;354
000a24  0a000001          BEQ      |L1.2608|
000a28  e59f0224          LDR      r0,|L1.3156|
000a2c  e5840074          STR      r0,[r4,#0x74]         ;355
                  |L1.2608|
000a30  e5990078          LDR      r0,[r9,#0x78]         ;356
000a34  e3500000          CMP      r0,#0                 ;356
000a38  0a000001          BEQ      |L1.2628|
000a3c  e59f0214          LDR      r0,|L1.3160|
000a40  e5840078          STR      r0,[r4,#0x78]         ;357
                  |L1.2628|
000a44  e599007c          LDR      r0,[r9,#0x7c]         ;358
000a48  e3500000          CMP      r0,#0                 ;358
000a4c  0a000001          BEQ      |L1.2648|
000a50  e59f0204          LDR      r0,|L1.3164|
000a54  e584007c          STR      r0,[r4,#0x7c]         ;359
                  |L1.2648|
000a58  e59f017c          LDR      r0,|L1.3036|
000a5c  e5840034          STR      r0,[r4,#0x34]         ;360
000a60  e58490b0          STR      r9,[r4,#0xb0]         ;361
000a64  e1ca01d0          LDRD     r0,r1,[r10,#0x10]     ;362
000a68  e1c40bf8          STRD     r0,r1,[r4,#0xb8]      ;362
000a6c  e584b0c0          STR      r11,[r4,#0xc0]        ;363
000a70  e3e02000          MVN      r2,#0                 ;365
000a74  e59410b8          LDR      r1,[r4,#0xb8]         ;365
000a78  e59430bc          LDR      r3,[r4,#0xbc]         ;365
000a7c  e0211002          EOR      r1,r1,r2              ;365
000a80  e0230002          EOR      r0,r3,r2              ;365
000a84  e1900001          ORRS     r0,r0,r1              ;365
000a88  1a000001          BNE      |L1.2708|
000a8c  e58450b8          STR      r5,[r4,#0xb8]         ;366
000a90  e58460bc          STR      r6,[r4,#0xbc]         ;366
                  |L1.2708|
000a94  e3e00001          MVN      r0,#1                 ;367
000a98  e3e02000          MVN      r2,#0                 ;367
000a9c  e59410b8          LDR      r1,[r4,#0xb8]         ;367
000aa0  e59430bc          LDR      r3,[r4,#0xbc]         ;367
000aa4  e0200001          EOR      r0,r0,r1              ;367
000aa8  e0231002          EOR      r1,r3,r2              ;367
000aac  e1900001          ORRS     r0,r0,r1              ;367
000ab0  1a00001d          BNE      |L1.2860|
000ab4  e58450b8          STR      r5,[r4,#0xb8]         ;368
000ab8  e58460bc          STR      r6,[r4,#0xbc]         ;368
000abc  e1a02009          MOV      r2,r9                 ;369
000ac0  e1a00005          MOV      r0,r5                 ;369
000ac4  e1a01006          MOV      r1,r6                 ;369
000ac8  ebfffffe          BL       mtd_mod_by_eb
000acc  e3500000          CMP      r0,#0                 ;369
000ad0  0a000015          BEQ      |L1.2860|
000ad4  e1a07005          MOV      r7,r5                 ;371
000ad8  e1a08006          MOV      r8,r6                 ;371
000adc  e599c010          LDR      r12,[r9,#0x10]        ;371
000ae0  e1a0200c          MOV      r2,r12                ;371
000ae4  e3a03000          MOV      r3,#0                 ;371
000ae8  e1a00007          MOV      r0,r7                 ;371
000aec  e1a01008          MOV      r1,r8                 ;371
000af0  ebfffffe          BL       __aeabi_uldivmod
000af4  e1a07000          MOV      r7,r0                 ;371
000af8  e1a00007          MOV      r0,r7                 ;371
000afc  e2800001          ADD      r0,r0,#1              ;371
000b00  e5991010          LDR      r1,[r9,#0x10]         ;371
000b04  e0000091          MUL      r0,r1,r0              ;371
000b08  e3a01000          MOV      r1,#0                 ;371
000b0c  e1c40bf8          STRD     r0,r1,[r4,#0xb8]      ;371
000b10  e1c40bd8          LDRD     r0,r1,[r4,#0xb8]      ;372
000b14  e1a02005          MOV      r2,r5                 ;372
000b18  e1a03006          MOV      r3,r6                 ;372
000b1c  e1cd00f0          STRD     r0,r1,[sp,#0]         ;372
000b20  e1a0100b          MOV      r1,r11                ;372
000b24  e28f0f4d          ADR      r0,|L1.3168|
000b28  ebfffffe          BL       sysprintf
                  |L1.2860|
000b2c  e3a02000          MOV      r2,#0                 ;377
000b30  e5940008          LDR      r0,[r4,#8]            ;377
000b34  e594300c          LDR      r3,[r4,#0xc]          ;377
000b38  e0200002          EOR      r0,r0,r2              ;377
000b3c  e0231002          EOR      r1,r3,r2              ;377
000b40  e1900001          ORRS     r0,r0,r1              ;377
000b44  1a000005          BNE      |L1.2912|
000b48  e599200c          LDR      r2,[r9,#0xc]          ;378
000b4c  e5993008          LDR      r3,[r9,#8]            ;378
000b50  e1c40bd8          LDRD     r0,r1,[r4,#0xb8]      ;378
000b54  e0530000          SUBS     r0,r3,r0              ;378
000b58  e0c21001          SBC      r1,r2,r1              ;378
000b5c  e1c400f8          STRD     r0,r1,[r4,#8]         ;378
                  |L1.2912|
000b60  e5940020          LDR      r0,[r4,#0x20]         ;380
000b64  e58d0008          STR      r0,[sp,#8]            ;380
000b68  e59420b8          LDR      r2,[r4,#0xb8]         ;380
000b6c  e5943008          LDR      r3,[r4,#8]            ;380
000b70  e0922003          ADDS     r2,r2,r3              ;380
000b74  e594000c          LDR      r0,[r4,#0xc]          ;380
000b78  e59410bc          LDR      r1,[r4,#0xbc]         ;380
000b7c  e0a00001          ADC      r0,r0,r1              ;380
000b80  e58d0004          STR      r0,[sp,#4]            ;380
000b84  e58d2000          STR      r2,[sp,#0]            ;380
000b88  e59470b8          LDR      r7,[r4,#0xb8]         ;380
000b8c  e1a02007          MOV      r2,r7                 ;380
000b90  e28f00f8          ADR      r0,|L1.3216|
000b94  e59430bc          LDR      r3,[r4,#0xbc]         ;380
000b98  ebfffffe          BL       sysprintf
000b9c  e59400b8          LDR      r0,[r4,#0xb8]         ;384
000ba0  e59420bc          LDR      r2,[r4,#0xbc]         ;384
000ba4  e5993008          LDR      r3,[r9,#8]            ;384
000ba8  e0500003          SUBS     r0,r0,r3              ;384
000bac  e599100c          LDR      r1,[r9,#0xc]          ;384
000bb0  e0d20001          SBCS     r0,r2,r1              ;384
000bb4  3a000049          BCC      |L1.3296|
000bb8  e3a01000          MOV      r1,#0                 ;384
000bbc  e58410b8          STR      r1,[r4,#0xb8]         ;386
000bc0  e58410bc          STR      r1,[r4,#0xbc]         ;386
000bc4  e5841008          STR      r1,[r4,#8]            ;387
000bc8  e584100c          STR      r1,[r4,#0xc]          ;387
000bcc  e28f00d8          ADR      r0,|L1.3244|
000bd0  e59a1000          LDR      r1,[r10,#0]           ;388
000bd4  ebfffffe          BL       sysprintf
000bd8  ea0000db          B        |L1.3916|
                  |L1.3036|
                          DCD      part_erase
                  |L1.3040|
                          DCD      mtd_partitions
                  |L1.3044|
000be4  6d656d6f          DCB      "memory allocation error while creating partitions for """
000be8  72792061
000bec  6c6c6f63
000bf0  6174696f
000bf4  6e206572
000bf8  726f7220
000bfc  7768696c
000c00  65206372
000c04  65617469
000c08  6e672070
000c0c  61727469
000c10  74696f6e
000c14  7320666f
000c18  722022  
000c1b  2573220a          DCB      "%s""\n",0
000c1f  00      
                  |L1.3104|
                          DCD      part_read
                  |L1.3108|
                          DCD      part_write
                  |L1.3112|
                          DCD      part_panic_write
                  |L1.3116|
                          DCD      part_read_oob
                  |L1.3120|
                          DCD      part_write_oob
                  |L1.3124|
                          DCD      part_read_user_prot_reg
                  |L1.3128|
                          DCD      part_read_fact_prot_reg
                  |L1.3132|
                          DCD      part_write_user_prot_reg
                  |L1.3136|
                          DCD      part_lock_user_prot_reg
                  |L1.3140|
                          DCD      part_get_user_prot_info
                  |L1.3144|
                          DCD      part_get_fact_prot_info
                  |L1.3148|
                          DCD      part_sync
                  |L1.3152|
                          DCD      part_lock
                  |L1.3156|
                          DCD      part_unlock
                  |L1.3160|
                          DCD      part_block_isbad
                  |L1.3164|
                          DCD      part_block_markbad
                  |L1.3168|
000c60  4d6f7669          DCB      "Moving partition %d: 0x%012llx -> 0x%012llx\n",0
000c64  6e672070
000c68  61727469
000c6c  74696f6e
000c70  2025643a
000c74  20307825
000c78  3031326c
000c7c  6c78202d
000c80  3e203078
000c84  25303132
000c88  6c6c780a
000c8c  00      
000c8d  00                DCB      0
000c8e  00                DCB      0
000c8f  00                DCB      0
                  |L1.3216|
000c90  30782530          DCB      "0x%012llx-0x%012llx : ""%s""\n",0
000c94  31326c6c
000c98  782d3078
000c9c  25303132
000ca0  6c6c7820
000ca4  3a202225
000ca8  73220a00
                  |L1.3244|
000cac  6d74643a          DCB      "mtd: partition ""%s"" is out of reach -- disabled\n",0
000cb0  20706172
000cb4  74697469
000cb8  6f6e2022
000cbc  25732220
000cc0  6973206f
000cc4  7574206f
000cc8  66207265
000ccc  61636820
000cd0  2d2d2064
000cd4  69736162
000cd8  6c65640a
000cdc  00      
000cdd  00                DCB      0
000cde  00                DCB      0
000cdf  00                DCB      0
                  |L1.3296|
000ce0  e5940008          LDR      r0,[r4,#8]            ;392
000ce4  e594300c          LDR      r3,[r4,#0xc]          ;392
000ce8  e59420b8          LDR      r2,[r4,#0xb8]         ;392
000cec  e0922000          ADDS     r2,r2,r0              ;392
000cf0  e59410bc          LDR      r1,[r4,#0xbc]         ;392
000cf4  e0a11003          ADC      r1,r1,r3              ;392
000cf8  e5990008          LDR      r0,[r9,#8]            ;392
000cfc  e599300c          LDR      r3,[r9,#0xc]          ;392
000d00  e0500002          SUBS     r0,r0,r2              ;392
000d04  e0d30001          SBCS     r0,r3,r1              ;392
000d08  2a00000c          BCS      |L1.3392|
000d0c  e5990008          LDR      r0,[r9,#8]            ;393
000d10  e599200c          LDR      r2,[r9,#0xc]          ;393
000d14  e59410b8          LDR      r1,[r4,#0xb8]         ;393
000d18  e59430bc          LDR      r3,[r4,#0xbc]         ;393
000d1c  e0500001          SUBS     r0,r0,r1              ;393
000d20  e0c21003          SBC      r1,r2,r3              ;393
000d24  e1c400f8          STRD     r0,r1,[r4,#8]         ;393
000d28  e1c400d8          LDRD     r0,r1,[r4,#8]         ;394
000d2c  e1cd00f0          STRD     r0,r1,[sp,#0]         ;394
000d30  e5992020          LDR      r2,[r9,#0x20]         ;394
000d34  e59f02f0          LDR      r0,|L1.4140|
000d38  e59a1000          LDR      r1,[r10,#0]           ;394
000d3c  ebfffffe          BL       sysprintf
                  |L1.3392|
000d40  e599002c          LDR      r0,[r9,#0x2c]         ;397
000d44  e3500001          CMP      r0,#1                 ;397
000d48  da00003c          BLE      |L1.3648|
000d4c  e599002c          LDR      r0,[r9,#0x2c]         ;399
000d50  e58d0008          STR      r0,[sp,#8]            ;399
000d54  e5941008          LDR      r1,[r4,#8]            ;400
000d58  e1c42bd8          LDRD     r2,r3,[r4,#0xb8]      ;400
000d5c  e0911002          ADDS     r1,r1,r2              ;400
000d60  e594000c          LDR      r0,[r4,#0xc]          ;400
000d64  e0a00003          ADC      r0,r0,r3              ;400
000d68  e58d0004          STR      r0,[sp,#4]            ;400
000d6c  e58d1000          STR      r1,[sp,#0]            ;400
000d70  e5998030          LDR      r8,[r9,#0x30]         ;401
000d74  e3a07000          MOV      r7,#0                 ;405
000d78  ea000000          B        |L1.3456|
                  |L1.3452|
000d7c  e2877001          ADD      r7,r7,#1              ;405
                  |L1.3456|
000d80  e59d0008          LDR      r0,[sp,#8]            ;405
000d84  e1570000          CMP      r7,r0                 ;405
000d88  aa000008          BGE      |L1.3504|
000d8c  e0870087          ADD      r0,r7,r7,LSL #1       ;405
000d90  e0880180          ADD      r0,r8,r0,LSL #3       ;405
000d94  e59410b8          LDR      r1,[r4,#0xb8]         ;405
000d98  e59430bc          LDR      r3,[r4,#0xbc]         ;405
000d9c  e5902000          LDR      r2,[r0,#0]            ;405
000da0  e5900004          LDR      r0,[r0,#4]            ;405
000da4  e0511002          SUBS     r1,r1,r2              ;405
000da8  e0d30000          SBCS     r0,r3,r0              ;405
000dac  2afffff2          BCS      |L1.3452|
                  |L1.3504|
000db0  e2477001          SUB      r7,r7,#1              ;408
000db4  ea00000a          B        |L1.3556|
                  |L1.3512|
000db8  e0871087          ADD      r1,r7,r7,LSL #1       ;412
000dbc  e0881181          ADD      r1,r8,r1,LSL #3       ;412
000dc0  e5940010          LDR      r0,[r4,#0x10]         ;412
000dc4  e5911008          LDR      r1,[r1,#8]            ;412
000dc8  e1500001          CMP      r0,r1                 ;412
000dcc  2a000003          BCS      |L1.3552|
000dd0  e0870087          ADD      r0,r7,r7,LSL #1       ;413
000dd4  e0880180          ADD      r0,r8,r0,LSL #3       ;413
000dd8  e5900008          LDR      r0,[r0,#8]            ;413
000ddc  e5840010          STR      r0,[r4,#0x10]         ;413
                  |L1.3552|
000de0  e2877001          ADD      r7,r7,#1              ;411
                  |L1.3556|
000de4  e59d0008          LDR      r0,[sp,#8]            ;411
000de8  e1570000          CMP      r7,r0                 ;411
000dec  aa000007          BGE      |L1.3600|
000df0  e0870087          ADD      r0,r7,r7,LSL #1       ;411
000df4  e0880180          ADD      r0,r8,r0,LSL #3       ;411
000df8  e1c020d0          LDRD     r2,r3,[r0,#0]         ;411
000dfc  e59d1000          LDR      r1,[sp,#0]            ;411
000e00  e0521001          SUBS     r1,r2,r1              ;411
000e04  e59d0004          LDR      r0,[sp,#4]            ;411
000e08  e0d30000          SBCS     r0,r3,r0              ;411
000e0c  3affffe9          BCC      |L1.3512|
                  |L1.3600|
000e10  e1a00000          MOV      r0,r0                 ;416
000e14  e5940010          LDR      r0,[r4,#0x10]         ;416
000e18  e3500000          CMP      r0,#0                 ;416
000e1c  1a000005          BNE      |L1.3640|
000e20  e1a00000          MOV      r0,r0                 ;416
000e24  e3a02e1a          MOV      r2,#0x1a0             ;416
000e28  e28f1c02          ADR      r1,|L1.4144|
000e2c  e28f0e23          ADR      r0,|L1.4196|
000e30  ebfffffe          BL       sysprintf
000e34  e1a00000          MOV      r0,r0                 ;416
                  |L1.3640|
000e38  e1a00000          MOV      r0,r0                 ;416
000e3c  ea000001          B        |L1.3656|
                  |L1.3648|
000e40  e5990010          LDR      r0,[r9,#0x10]         ;419
000e44  e5840010          STR      r0,[r4,#0x10]         ;419
                  |L1.3656|
000e48  e1d400b4          LDRH     r0,[r4,#4]            ;422
000e4c  e3100b01          TST      r0,#0x400             ;422
000e50  0a00000c          BEQ      |L1.3720|
000e54  e59410bc          LDR      r1,[r4,#0xbc]         ;423
000e58  e59470b8          LDR      r7,[r4,#0xb8]         ;423
000e5c  e1a02004          MOV      r2,r4                 ;423
000e60  e1a00007          MOV      r0,r7                 ;423
000e64  ebfffffe          BL       mtd_mod_by_eb
000e68  e3500000          CMP      r0,#0                 ;423
000e6c  0a000005          BEQ      |L1.3720|
000e70  e5940004          LDR      r0,[r4,#4]            ;427
000e74  e3c00b01          BIC      r0,r0,#0x400          ;427
000e78  e5840004          STR      r0,[r4,#4]            ;427
000e7c  e59f01f8          LDR      r0,|L1.4220|
000e80  e59a1000          LDR      r1,[r10,#0]           ;428
000e84  ebfffffe          BL       sysprintf
                  |L1.3720|
000e88  e1d400b4          LDRH     r0,[r4,#4]            ;431
000e8c  e3100b01          TST      r0,#0x400             ;431
000e90  0a00000c          BEQ      |L1.3784|
000e94  e594100c          LDR      r1,[r4,#0xc]          ;432
000e98  e5947008          LDR      r7,[r4,#8]            ;432
000e9c  e1a02004          MOV      r2,r4                 ;432
000ea0  e1a00007          MOV      r0,r7                 ;432
000ea4  ebfffffe          BL       mtd_mod_by_eb
000ea8  e3500000          CMP      r0,#0                 ;432
000eac  0a000005          BEQ      |L1.3784|
000eb0  e5940004          LDR      r0,[r4,#4]            ;433
000eb4  e3c00b01          BIC      r0,r0,#0x400          ;433
000eb8  e5840004          STR      r0,[r4,#4]            ;433
000ebc  e59f01bc          LDR      r0,|L1.4224|
000ec0  e59a1000          LDR      r1,[r10,#0]           ;434
000ec4  ebfffffe          BL       sysprintf
                  |L1.3784|
000ec8  e5990028          LDR      r0,[r9,#0x28]         ;438
000ecc  e5840028          STR      r0,[r4,#0x28]         ;438
000ed0  e5990078          LDR      r0,[r9,#0x78]         ;439
000ed4  e3500000          CMP      r0,#0                 ;439
000ed8  0a00001a          BEQ      |L1.3912|
000edc  e3a00000          MOV      r0,#0                 ;439
000ee0  e1a07000          MOV      r7,r0                 ;440
000ee4  e1a08000          MOV      r8,r0                 ;440
000ee8  ea000011          B        |L1.3892|
                  |L1.3820|
000eec  e59400b8          LDR      r0,[r4,#0xb8]         ;443
000ef0  e59420bc          LDR      r2,[r4,#0xbc]         ;443
000ef4  e0900007          ADDS     r0,r0,r7              ;443
000ef8  e0a22008          ADC      r2,r2,r8              ;443
000efc  e88d0005          STM      sp,{r0,r2}            ;443
000f00  e1a02000          MOV      r2,r0                 ;443
000f04  e5991078          LDR      r1,[r9,#0x78]         ;443
000f08  e1a00009          MOV      r0,r9                 ;443
000f0c  e59d3004          LDR      r3,[sp,#4]            ;443
000f10  e12fff31          BLX      r1                    ;443
000f14  e3500000          CMP      r0,#0                 ;443
000f18  0a000002          BEQ      |L1.3880|
000f1c  e5940088          LDR      r0,[r4,#0x88]         ;445
000f20  e2800001          ADD      r0,r0,#1              ;445
000f24  e5840088          STR      r0,[r4,#0x88]         ;445
                  |L1.3880|
000f28  e5940010          LDR      r0,[r4,#0x10]         ;446
000f2c  e0977000          ADDS     r7,r7,r0              ;446
000f30  e2a88000          ADC      r8,r8,#0              ;446
                  |L1.3892|
000f34  e1c400d8          LDRD     r0,r1,[r4,#8]         ;442
000f38  e0570000          SUBS     r0,r7,r0              ;442
000f3c  e0d80001          SBCS     r0,r8,r1              ;442
000f40  3affffe9          BCC      |L1.3820|
000f44  e1a00000          MOV      r0,r0                 ;448
                  |L1.3912|
000f48  e1a00000          MOV      r0,r0                 ;450
                  |L1.3916|
000f4c  e59a0020          LDR      r0,[r10,#0x20]        ;451
000f50  e3500000          CMP      r0,#0                 ;451
000f54  0a000004          BEQ      |L1.3948|
000f58  e59a0020          LDR      r0,[r10,#0x20]        ;453
000f5c  e5804000          STR      r4,[r0,#0]            ;453
000f60  e3a00000          MOV      r0,#0                 ;454
000f64  e58400cc          STR      r0,[r4,#0xcc]         ;454
000f68  ea000003          B        |L1.3964|
                  |L1.3948|
000f6c  e1a00004          MOV      r0,r4                 ;457
000f70  ebfffffe          BL       add_mtd_device
000f74  e3a00001          MOV      r0,#1                 ;458
000f78  e58400cc          STR      r0,[r4,#0xcc]         ;458
                  |L1.3964|
000f7c  e1a00004          MOV      r0,r4                 ;460
000f80  eafffe49          B        |L1.2220|
;;;462    
                          ENDP

                  add_mtd_partitions PROC
;;;471    
;;;472    int add_mtd_partitions(struct mtd_info *master,
000f84  e92d47fc          PUSH     {r2-r10,lr}
;;;473    		       const struct mtd_partition *parts,
;;;474    		       int nbparts)
;;;475    {
000f88  e1a09000          MOV      r9,r0
000f8c  e1a0a001          MOV      r10,r1
000f90  e1a08002          MOV      r8,r2
000f94  e3a01000          MOV      r1,#0
;;;476    	struct mtd_part *slave;
;;;477    	uint64_t cur_offset = 0;
000f98  e1a06001          MOV      r6,r1
000f9c  e1a07001          MOV      r7,r1
;;;478    	int i;
;;;479    
;;;480    	/*
;;;481    	 * Need to init the list here, since LIST_INIT() does not
;;;482    	 * work on platforms where relocation has problems (like MIPS
;;;483    	 * & PPC).
;;;484    	 */
;;;485    	if (mtd_partitions.next == NULL)
000fa0  e51f03c8          LDR      r0,|L1.3040|
000fa4  e5900000          LDR      r0,[r0,#0]  ; mtd_partitions
000fa8  e3500000          CMP      r0,#0
000fac  1a000004          BNE      |L1.4036|
;;;486    		INIT_LIST_HEAD(&mtd_partitions);
000fb0  e51f03d8          LDR      r0,|L1.3040|
000fb4  e5800000          STR      r0,[r0,#0]
000fb8  e5800004          STR      r0,[r0,#4]
000fbc  e1a00000          MOV      r0,r0
000fc0  e1a00000          MOV      r0,r0
                  |L1.4036|
;;;487    
;;;488    	printk(KERN_NOTICE "Creating %d MTD partitions on \"%s\":\n", nbparts, master->name);
000fc4  e1a01008          MOV      r1,r8
000fc8  e28f00b4          ADR      r0,|L1.4228|
000fcc  e5992020          LDR      r2,[r9,#0x20]
000fd0  ebfffffe          BL       sysprintf
;;;489    
;;;490    	for (i = 0; i < nbparts; i++) {
000fd4  e3a05000          MOV      r5,#0
000fd8  ea00000f          B        |L1.4124|
                  |L1.4060|
;;;491    		slave = add_one_partition(master, parts + i, i, cur_offset);
000fdc  e0850105          ADD      r0,r5,r5,LSL #2
000fe0  e08a1180          ADD      r1,r10,r0,LSL #3
000fe4  e1a02005          MOV      r2,r5
000fe8  e1a00009          MOV      r0,r9
000fec  e1cd60f0          STRD     r6,r7,[sp,#0]
000ff0  ebfffffe          BL       add_one_partition
000ff4  e1a04000          MOV      r4,r0
;;;492    		if (!slave)
000ff8  e3540000          CMP      r4,#0
000ffc  1a000001          BNE      |L1.4104|
;;;493    			return -ENOMEM;
001000  e3e0000b          MVN      r0,#0xb
                  |L1.4100|
;;;494    		cur_offset = slave->offset + slave->mtd.size;
;;;495    	}
;;;496    
;;;497    	return 0;
;;;498    }
001004  e8bd87fc          POP      {r2-r10,pc}
                  |L1.4104|
001008  e1c400d8          LDRD     r0,r1,[r4,#8]         ;494
00100c  e1c42bd8          LDRD     r2,r3,[r4,#0xb8]      ;494
001010  e0926000          ADDS     r6,r2,r0              ;494
001014  e0a37001          ADC      r7,r3,r1              ;494
001018  e2855001          ADD      r5,r5,#1              ;490
                  |L1.4124|
00101c  e1550008          CMP      r5,r8                 ;490
001020  baffffed          BLT      |L1.4060|
001024  e3a00000          MOV      r0,#0                 ;497
001028  eafffff5          B        |L1.4100|
                  |L1.4140|
                          DCD      ||.constdata||
                  |L1.4144|
001030  2e2e5c2e          DCB      "..\\..\\common\\src\\BSP\\ThirdParty\\yaffs2\\mtdpart.c"
001034  2e5c636f
001038  6d6d6f6e
00103c  5c737263
001040  5c425350
001044  5c546869
001048  72645061
00104c  7274795c
001050  79616666
001054  73325c6d
001058  74647061
00105c  72742e63
001060  00                DCB      0
001061  00                DCB      0
001062  00                DCB      0
001063  00                DCB      0
                  |L1.4196|
001064  552d426f          DCB      "U-Boot BUG at %s:%d!\n",0
001068  6f742042
00106c  55472061
001070  74202573
001074  3a256421
001078  0a00    
00107a  00                DCB      0
00107b  00                DCB      0
                  |L1.4220|
                          DCD      ||.constdata||+0x58
                  |L1.4224|
                          DCD      ||.constdata||+0xac
                  |L1.4228|
001084  43726561          DCB      "Creating %d MTD partitions on ""%s"":\n",0
001088  74696e67
00108c  20256420
001090  4d544420
001094  70617274
001098  6974696f
00109c  6e73206f
0010a0  6e202225
0010a4  73223a0a
0010a8  00      
0010a9  00                DCB      0
0010aa  00                DCB      0
0010ab  00                DCB      0
                          ENDP

                  mtd_mod_by_eb PROC
;;;232    
;;;233    static __inline uint32_t mtd_mod_by_eb(uint64_t sz, struct mtd_info *mtd)
0010ac  e92d4070          PUSH     {r4-r6,lr}
;;;234    {
0010b0  e1a04000          MOV      r4,r0
0010b4  e1a05001          MOV      r5,r1
0010b8  e1a06002          MOV      r6,r2
;;;235    	return do_div(sz, mtd->erasesize);
0010bc  e596c010          LDR      r12,[r6,#0x10]
0010c0  e1a0200c          MOV      r2,r12
0010c4  e3a03000          MOV      r3,#0
0010c8  e1a00004          MOV      r0,r4
0010cc  e1a01005          MOV      r1,r5
0010d0  ebfffffe          BL       __aeabi_uldivmod
0010d4  e1a04000          MOV      r4,r0
0010d8  e1a05001          MOV      r5,r1
;;;236    }
0010dc  e8bd8070          POP      {r4-r6,pc}
;;;237    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  6d74643a          DCB      0x6d,0x74,0x64,0x3a
000004  20706172          DCB      0x20,0x70,0x61,0x72
000008  74697469          DCB      0x74,0x69,0x74,0x69
00000c  6f6e2022          DCB      0x6f,0x6e,0x20,0x22
000010  25732220          DCB      0x25,0x73,0x22,0x20
000014  65787465          DCB      0x65,0x78,0x74,0x65
000018  6e647320          DCB      0x6e,0x64,0x73,0x20
00001c  6265796f          DCB      0x62,0x65,0x79,0x6f
000020  6e642074          DCB      0x6e,0x64,0x20,0x74
000024  68652065          DCB      0x68,0x65,0x20,0x65
000028  6e64206f          DCB      0x6e,0x64,0x20,0x6f
00002c  66206465          DCB      0x66,0x20,0x64,0x65
000030  76696365          DCB      0x76,0x69,0x63,0x65
000034  20222573          DCB      0x20,0x22,0x25,0x73
000038  22202d2d          DCB      0x22,0x20,0x2d,0x2d
00003c  2073697a          DCB      0x20,0x73,0x69,0x7a
000040  65207472          DCB      0x65,0x20,0x74,0x72
000044  756e6361          DCB      0x75,0x6e,0x63,0x61
000048  74656420          DCB      0x74,0x65,0x64,0x20
00004c  746f2025          DCB      0x74,0x6f,0x20,0x25
000050  236c6c78          DCB      0x23,0x6c,0x6c,0x78
000054  0a000000          DCB      0x0a,0x00,0x00,0x00
000058  6d74643a          DCB      0x6d,0x74,0x64,0x3a
00005c  20706172          DCB      0x20,0x70,0x61,0x72
000060  74697469          DCB      0x74,0x69,0x74,0x69
000064  6f6e2022          DCB      0x6f,0x6e,0x20,0x22
000068  25732220          DCB      0x25,0x73,0x22,0x20
00006c  646f6573          DCB      0x64,0x6f,0x65,0x73
000070  6e277420          DCB      0x6e,0x27,0x74,0x20
000074  73746172          DCB      0x73,0x74,0x61,0x72
000078  74206f6e          DCB      0x74,0x20,0x6f,0x6e
00007c  20616e20          DCB      0x20,0x61,0x6e,0x20
000080  65726173          DCB      0x65,0x72,0x61,0x73
000084  6520626c          DCB      0x65,0x20,0x62,0x6c
000088  6f636b20          DCB      0x6f,0x63,0x6b,0x20
00008c  626f756e          DCB      0x62,0x6f,0x75,0x6e
000090  64617279          DCB      0x64,0x61,0x72,0x79
000094  202d2d20          DCB      0x20,0x2d,0x2d,0x20
000098  666f7263          DCB      0x66,0x6f,0x72,0x63
00009c  65207265          DCB      0x65,0x20,0x72,0x65
0000a0  61642d6f          DCB      0x61,0x64,0x2d,0x6f
0000a4  6e6c790a          DCB      0x6e,0x6c,0x79,0x0a
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  6d74643a          DCB      0x6d,0x74,0x64,0x3a
0000b0  20706172          DCB      0x20,0x70,0x61,0x72
0000b4  74697469          DCB      0x74,0x69,0x74,0x69
0000b8  6f6e2022          DCB      0x6f,0x6e,0x20,0x22
0000bc  25732220          DCB      0x25,0x73,0x22,0x20
0000c0  646f6573          DCB      0x64,0x6f,0x65,0x73
0000c4  6e277420          DCB      0x6e,0x27,0x74,0x20
0000c8  656e6420          DCB      0x65,0x6e,0x64,0x20
0000cc  6f6e2061          DCB      0x6f,0x6e,0x20,0x61
0000d0  6e206572          DCB      0x6e,0x20,0x65,0x72
0000d4  61736520          DCB      0x61,0x73,0x65,0x20
0000d8  626c6f63          DCB      0x62,0x6c,0x6f,0x63
0000dc  6b202d2d          DCB      0x6b,0x20,0x2d,0x2d
0000e0  20666f72          DCB      0x20,0x66,0x6f,0x72
0000e4  63652072          DCB      0x63,0x65,0x20,0x72
0000e8  6561642d          DCB      0x65,0x61,0x64,0x2d
0000ec  6f6e6c79          DCB      0x6f,0x6e,0x6c,0x79
0000f0  0a00              DCB      0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  mtd_partitions
                          %        8
