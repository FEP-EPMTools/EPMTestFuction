; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uvc_core.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uvc_core.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uvc_core.crf ..\..\common\src\BSP\Library\USB_HOST\src_uvc\uvc_core.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dump_parameter_block PROC
;;;36     
;;;37     static void  dump_parameter_block(UVC_CTRL_PARAM_T *param)
000000  e12fff1e          BX       lr
;;;38     {
;;;39     #if 1
;;;40         UVC_DBGMSG("\n\nbmHint          = 0x%x\n", param->bmHint);
;;;41         UVC_DBGMSG("bFormatIndex    = %d\n", param->bFormatIndex);
;;;42         UVC_DBGMSG("bFrameIndex     = %d\n", param->bFrameIndex);
;;;43         UVC_DBGMSG("dwFrameInterval = %d\n", param->dwFrameInterval);
;;;44         UVC_DBGMSG("wKeyFrameRate   = %d\n", param->wKeyFrameRate);
;;;45         UVC_DBGMSG("wPFrameRate     = %d\n", param->wPFrameRate);
;;;46         UVC_DBGMSG("dwMaxVideoFrameSize      = %d\n", param->dwMaxVideoFrameSize);
;;;47         UVC_DBGMSG("dwMaxPayloadTransferSize = %d\n", param->dwMaxPayloadTransferSize);
;;;48         UVC_DBGMSG("bmFramingInfo   = 0x%x\n", param->bmFramingInfo);
;;;49         UVC_DBGMSG("bUsage          = 0x%x\n", param->bUsage);
;;;50         UVC_DBGMSG("bmSettings      = 0x%x\n", param->bmSettings);
;;;51     #endif
;;;52     }
;;;53     
                          ENDP

                  usbh_uvc_probe_control PROC
;;;71      */
;;;72     int usbh_uvc_probe_control(UVC_DEV_T *vdev, uint8_t req, UVC_CTRL_PARAM_T *param)
000004  e92d41f0          PUSH     {r4-r8,lr}
;;;73     {
000008  e24dd018          SUB      sp,sp,#0x18
00000c  e1a05000          MOV      r5,r0
000010  e1a04001          MOV      r4,r1
000014  e1a06002          MOV      r6,r2
;;;74         uint8_t     bmRequestType;
;;;75         uint32_t    xfer_len;
;;;76         int         ret;
;;;77     
;;;78         if (req & 0x80)
000018  e3140080          TST      r4,#0x80
00001c  0a000001          BEQ      |L1.40|
;;;79             bmRequestType = REQ_TYPE_IN | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_IFACE;
000020  e3a070a1          MOV      r7,#0xa1
000024  ea000000          B        |L1.44|
                  |L1.40|
;;;80         else
;;;81             bmRequestType = REQ_TYPE_OUT | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_IFACE;
000028  e3a07021          MOV      r7,#0x21
                  |L1.44|
;;;82     
;;;83         ret = usbh_ctrl_xfer(vdev->udev, bmRequestType, req,
00002c  e3a00032          MOV      r0,#0x32
000030  e28d1014          ADD      r1,sp,#0x14
000034  e3a02030          MOV      r2,#0x30
000038  e58d0010          STR      r0,[sp,#0x10]
00003c  e58d100c          STR      r1,[sp,#0xc]
000040  e98d0044          STMIB    sp,{r2,r6}
000044  e59500d8          LDR      r0,[r5,#0xd8]
000048  e5d00004          LDRB     r0,[r0,#4]
00004c  e58d0000          STR      r0,[sp,#0]
000050  e3a03c01          MOV      r3,#0x100
000054  e1a02004          MOV      r2,r4
000058  e1a01007          MOV      r1,r7
00005c  e5950000          LDR      r0,[r5,#0]
000060  ebfffffe          BL       usbh_ctrl_xfer
000064  e1a08000          MOV      r8,r0
;;;84                              (VS_PROBE_CONTROL << 8),    /* wValue - Control Selector (CS)    */
;;;85                              vdev->iface_stream->if_num, /* wIndex - Zero and Interface       */
;;;86                              sizeof(UVC_CTRL_PARAM_T),   /* wLength - Length of parameter block */
;;;87                              (uint8_t *)param,           /* parameter block                   */
;;;88                              &xfer_len, UVC_REQ_TIMEOUT);
;;;89         if (ret != 0)
000068  e3580000          CMP      r8,#0
00006c  1a000003          BNE      |L1.128|
;;;90         {
;;;91             UVC_DBGMSG("usbh_uvc_probe_control incorrect transfer length! %d %d\n", ret, xfer_len);
;;;92         }
;;;93         else if (req == UVC_GET_CUR)
000070  e3540081          CMP      r4,#0x81
000074  1a000001          BNE      |L1.128|
;;;94         {
;;;95             dump_parameter_block(param);
000078  e1a00006          MOV      r0,r6
00007c  ebfffffe          BL       dump_parameter_block
                  |L1.128|
;;;96         }
;;;97         return ret;
000080  e1a00008          MOV      r0,r8
000084  e28dd018          ADD      sp,sp,#0x18
;;;98     }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;99     
                          ENDP

                  usbh_uvc_commit_control PROC
;;;107     */
;;;108    static int usbh_uvc_commit_control(UVC_DEV_T *vdev, UVC_CTRL_PARAM_T *param)
00008c  e92d4070          PUSH     {r4-r6,lr}
;;;109    {
000090  e24dd018          SUB      sp,sp,#0x18
000094  e1a04000          MOV      r4,r0
000098  e1a05001          MOV      r5,r1
;;;110        uint8_t     bmRequestType;
;;;111        uint32_t    xfer_len;
;;;112    
;;;113        bmRequestType = REQ_TYPE_OUT | REQ_TYPE_CLASS_DEV | REQ_TYPE_TO_IFACE;
00009c  e3a06021          MOV      r6,#0x21
;;;114    
;;;115        return usbh_ctrl_xfer(vdev->udev, bmRequestType, UVC_SET_CUR,
0000a0  e3a00032          MOV      r0,#0x32
0000a4  e28d1014          ADD      r1,sp,#0x14
0000a8  e3a02030          MOV      r2,#0x30
0000ac  e58d0010          STR      r0,[sp,#0x10]
0000b0  e58d100c          STR      r1,[sp,#0xc]
0000b4  e98d0024          STMIB    sp,{r2,r5}
0000b8  e59400d8          LDR      r0,[r4,#0xd8]
0000bc  e5d00004          LDRB     r0,[r0,#4]
0000c0  e58d0000          STR      r0,[sp,#0]
0000c4  e3a03c02          MOV      r3,#0x200
0000c8  e3a02001          MOV      r2,#1
0000cc  e1a01006          MOV      r1,r6
0000d0  e5940000          LDR      r0,[r4,#0]
0000d4  ebfffffe          BL       usbh_ctrl_xfer
0000d8  e28dd018          ADD      sp,sp,#0x18
;;;116                              (VS_COMMIT_CONTROL << 8),   /* wValue - Control Selector (CS)    */
;;;117                              vdev->iface_stream->if_num, /* wIndex - Zero and Interface       */
;;;118                              sizeof(UVC_CTRL_PARAM_T),   /* wLength - Length of parameter block */
;;;119                              (uint8_t *)param,           /* parameter block                   */
;;;120                              &xfer_len, UVC_REQ_TIMEOUT);
;;;121    }
0000dc  e8bd8070          POP      {r4-r6,pc}
;;;122    
                          ENDP

                  usbh_uvc_select_alt_interface PROC
;;;127     */
;;;128    static int  usbh_uvc_select_alt_interface(UVC_DEV_T *vdev)
0000e0  e92d47f0          PUSH     {r4-r10,lr}
;;;129    {
0000e4  e1a06000          MOV      r6,r0
;;;130        IFACE_T      *iface;
;;;131        UVC_STRM_T   *vs = &vdev->vs;
0000e8  e28650aa          ADD      r5,r6,#0xaa
;;;132        uint32_t     payload_size = vdev->param.dwMaxPayloadTransferSize;
0000ec  e28600f2          ADD      r0,r6,#0xf2
0000f0  ebfffffe          BL       __aeabi_uread4
0000f4  e1a0a000          MOV      r10,r0
;;;133        int          i, ret, best = -1;
0000f8  e3e07000          MVN      r7,#0
;;;134    
;;;135        /*------------------------------------------------------------------------------------*/
;;;136        /*  Find the streaming interface                                                      */
;;;137        /*------------------------------------------------------------------------------------*/
;;;138        iface = vdev->udev->iface_list;
0000fc  e5960000          LDR      r0,[r6,#0]
000100  e5908030          LDR      r8,[r0,#0x30]
;;;139        while (iface != NULL)
000104  ea000006          B        |L1.292|
                  |L1.264|
;;;140        {
;;;141            if (iface->if_num == vdev->iface_stream->if_num)
000108  e5d80004          LDRB     r0,[r8,#4]
00010c  e59610d8          LDR      r1,[r6,#0xd8]
000110  e5d11004          LDRB     r1,[r1,#4]
000114  e1500001          CMP      r0,r1
000118  1a000000          BNE      |L1.288|
;;;142                break;
00011c  ea000002          B        |L1.300|
                  |L1.288|
;;;143            iface = iface->next;
000120  e59884c4          LDR      r8,[r8,#0x4c4]
                  |L1.292|
000124  e3580000          CMP      r8,#0                 ;139
000128  1afffff6          BNE      |L1.264|
                  |L1.300|
00012c  e1a00000          MOV      r0,r0                 ;142
;;;144        }
;;;145        if (iface == NULL)
000130  e3580000          CMP      r8,#0
000134  1a000001          BNE      |L1.320|
;;;146        {
;;;147            UVC_DBGMSG("Can't find UVC streaming interface!\n");
;;;148            return UVC_RET_NOT_SUPPORT;
000138  e59f0894          LDR      r0,|L1.2516|
                  |L1.316|
;;;149        }
;;;150    
;;;151        /*------------------------------------------------------------------------------------*/
;;;152        /*  Find the the best alternative interface                                           */
;;;153        /*------------------------------------------------------------------------------------*/
;;;154        if (payload_size > 3072)
;;;155            payload_size = 3072;
;;;156    
;;;157        /*
;;;158         *  Find the largest one of those "wMaxPacketSize <= 3072" settings
;;;159         */
;;;160        for (i = 0; i < vs->num_of_alt; i++)
;;;161        {
;;;162            if (vs->max_pktsz[i] <= 3072)
;;;163            {
;;;164                if (best == -1)
;;;165                    best = i;
;;;166                else
;;;167                {
;;;168                    if (vs->max_pktsz[i] > vs->max_pktsz[best])
;;;169                        best = i;
;;;170                }
;;;171            }
;;;172        }
;;;173    
;;;174        for (i = 0; i < vs->num_of_alt; i++)
;;;175        {
;;;176            UVC_DBGMSG("i=%d, best=%d, %d, %d\n", i, best, vs->max_pktsz[i], payload_size);
;;;177            if ((vs->max_pktsz[i] >= payload_size) && (vs->max_pktsz[i] <= 3072))
;;;178            {
;;;179                if (best == -1)
;;;180                    best = i;
;;;181                else
;;;182                {
;;;183                    if (vs->max_pktsz[i] < vs->max_pktsz[best])
;;;184                        best = i;
;;;185                }
;;;186            }
;;;187        }
;;;188    
;;;189        if (best == -1)
;;;190        {
;;;191            UVC_DBGMSG("Bandwidth - Cannot find available alternative interface! %d\n", payload_size);
;;;192            return UVC_RET_NOT_SUPPORT;
;;;193        }
;;;194    
;;;195        UVC_DBGMSG("Select UVC streaming interface %d alternative setting %d.\n", iface->if_num, vs->alt_no[best]);
;;;196        ret = usbh_set_interface(iface, vs->alt_no[best]);
;;;197        if (ret != 0)
;;;198        {
;;;199            UVC_DBGMSG("Fail to set UVC streaming interface! %d, %d\n", iface->if_num, vs->alt_no[best]);
;;;200            return ret;
;;;201        }
;;;202    
;;;203        vdev->ep_iso_in = usbh_iface_find_ep(iface, 0, EP_ADDR_DIR_IN | EP_ATTR_TT_ISO);
;;;204        if (vdev->ep_iso_in == NULL)
;;;205        {
;;;206            UVC_DBGMSG("Can't find iso-in enpoint in the selected streaming interface! %d, %d\n", iface->if_num, best);
;;;207            return UVC_RET_NOT_SUPPORT;
;;;208        }
;;;209    
;;;210        return 0;
;;;211    }
00013c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.320|
000140  e35a0b03          CMP      r10,#0xc00            ;154
000144  9a000000          BLS      |L1.332|
000148  e3a0ab03          MOV      r10,#0xc00            ;155
                  |L1.332|
00014c  e3a04000          MOV      r4,#0                 ;160
000150  ea000012          B        |L1.416|
                  |L1.340|
000154  e285000e          ADD      r0,r5,#0xe            ;162
000158  e0800084          ADD      r0,r0,r4,LSL #1       ;162
00015c  e1d000b0          LDRH     r0,[r0,#0]            ;162
000160  e3500b03          CMP      r0,#0xc00             ;162
000164  ca00000c          BGT      |L1.412|
000168  e3770001          CMN      r7,#1                 ;164
00016c  1a000001          BNE      |L1.376|
000170  e1a07004          MOV      r7,r4                 ;165
000174  ea000008          B        |L1.412|
                  |L1.376|
000178  e285000e          ADD      r0,r5,#0xe            ;168
00017c  e0800084          ADD      r0,r0,r4,LSL #1       ;168
000180  e1d000b0          LDRH     r0,[r0,#0]            ;168
000184  e285100e          ADD      r1,r5,#0xe            ;168
000188  e0811087          ADD      r1,r1,r7,LSL #1       ;168
00018c  e1d110b0          LDRH     r1,[r1,#0]            ;168
000190  e1500001          CMP      r0,r1                 ;168
000194  da000000          BLE      |L1.412|
000198  e1a07004          MOV      r7,r4                 ;169
                  |L1.412|
00019c  e2844001          ADD      r4,r4,#1              ;160
                  |L1.416|
0001a0  e5d50001          LDRB     r0,[r5,#1]            ;160
0001a4  e1500004          CMP      r0,r4                 ;160
0001a8  caffffe9          BGT      |L1.340|
0001ac  e3a04000          MOV      r4,#0                 ;174
0001b0  ea000017          B        |L1.532|
                  |L1.436|
0001b4  e285000e          ADD      r0,r5,#0xe            ;177
0001b8  e0800084          ADD      r0,r0,r4,LSL #1       ;177
0001bc  e1d000b0          LDRH     r0,[r0,#0]            ;177
0001c0  e150000a          CMP      r0,r10                ;177
0001c4  3a000011          BCC      |L1.528|
0001c8  e285000e          ADD      r0,r5,#0xe            ;177
0001cc  e0800084          ADD      r0,r0,r4,LSL #1       ;177
0001d0  e1d000b0          LDRH     r0,[r0,#0]            ;177
0001d4  e3500b03          CMP      r0,#0xc00             ;177
0001d8  ca00000c          BGT      |L1.528|
0001dc  e3770001          CMN      r7,#1                 ;179
0001e0  1a000001          BNE      |L1.492|
0001e4  e1a07004          MOV      r7,r4                 ;180
0001e8  ea000008          B        |L1.528|
                  |L1.492|
0001ec  e285000e          ADD      r0,r5,#0xe            ;183
0001f0  e0800084          ADD      r0,r0,r4,LSL #1       ;183
0001f4  e1d000b0          LDRH     r0,[r0,#0]            ;183
0001f8  e285100e          ADD      r1,r5,#0xe            ;183
0001fc  e0811087          ADD      r1,r1,r7,LSL #1       ;183
000200  e1d110b0          LDRH     r1,[r1,#0]            ;183
000204  e1500001          CMP      r0,r1                 ;183
000208  aa000000          BGE      |L1.528|
00020c  e1a07004          MOV      r7,r4                 ;184
                  |L1.528|
000210  e2844001          ADD      r4,r4,#1              ;174
                  |L1.532|
000214  e5d50001          LDRB     r0,[r5,#1]            ;174
000218  e1500004          CMP      r0,r4                 ;174
00021c  caffffe4          BGT      |L1.436|
000220  e3770001          CMN      r7,#1                 ;189
000224  1a000001          BNE      |L1.560|
000228  e59f07a4          LDR      r0,|L1.2516|
00022c  eaffffc2          B        |L1.316|
                  |L1.560|
000230  e2850002          ADD      r0,r5,#2              ;196
000234  e7d01007          LDRB     r1,[r0,r7]            ;196
000238  e1a00008          MOV      r0,r8                 ;196
00023c  ebfffffe          BL       usbh_set_interface
000240  e1a09000          MOV      r9,r0                 ;196
000244  e3590000          CMP      r9,#0                 ;197
000248  0a000001          BEQ      |L1.596|
00024c  e1a00009          MOV      r0,r9                 ;200
000250  eaffffb9          B        |L1.316|
                  |L1.596|
000254  e3a02081          MOV      r2,#0x81              ;203
000258  e3a01000          MOV      r1,#0                 ;203
00025c  e1a00008          MOV      r0,r8                 ;203
000260  ebfffffe          BL       usbh_iface_find_ep
000264  e5860110          STR      r0,[r6,#0x110]        ;203
000268  e5960110          LDR      r0,[r6,#0x110]        ;204
00026c  e3500000          CMP      r0,#0                 ;204
000270  1a000001          BNE      |L1.636|
000274  e59f0758          LDR      r0,|L1.2516|
000278  eaffffaf          B        |L1.316|
                  |L1.636|
00027c  e3a00000          MOV      r0,#0                 ;210
000280  eaffffad          B        |L1.316|
;;;212    
                          ENDP

                  usbh_get_video_format PROC
;;;228     */
;;;229    int  usbh_get_video_format(UVC_DEV_T *vdev, int index, IMAGE_FORMAT_E *format, int *width, int *height)
000284  e92d4030          PUSH     {r4,r5,lr}
;;;230    {
000288  e1a0c000          MOV      r12,r0
00028c  e1a04002          MOV      r4,r2
000290  e59d500c          LDR      r5,[sp,#0xc]
;;;231        UVC_CTRL_T  *vc;
;;;232    
;;;233        if (vdev == NULL)
000294  e35c0000          CMP      r12,#0
000298  1a000001          BNE      |L1.676|
;;;234            return UVC_RET_DEV_NOT_FOUND;
00029c  e59f0734          LDR      r0,|L1.2520|
                  |L1.672|
;;;235    
;;;236        vc = &vdev->vc;
;;;237    
;;;238        if (index >= vc->num_of_frames)
;;;239            return -1;
;;;240    
;;;241        *format = vc->frame_format[index];
;;;242        *width  = vc->width[index];
;;;243        *height = vc->height[index];
;;;244        return 0;
;;;245    }
0002a0  e8bd8030          POP      {r4,r5,pc}
                  |L1.676|
0002a4  e28c2006          ADD      r2,r12,#6             ;236
0002a8  e5d20012          LDRB     r0,[r2,#0x12]         ;238
0002ac  e1500001          CMP      r0,r1                 ;238
0002b0  ca000001          BGT      |L1.700|
0002b4  e3e00000          MVN      r0,#0                 ;239
0002b8  eafffff8          B        |L1.672|
                  |L1.700|
0002bc  e282002b          ADD      r0,r2,#0x2b           ;241
0002c0  e7d00001          LDRB     r0,[r0,r1]            ;241
0002c4  e5c40000          STRB     r0,[r4,#0]            ;241
0002c8  e2820044          ADD      r0,r2,#0x44           ;242
0002cc  e0800081          ADD      r0,r0,r1,LSL #1       ;242
0002d0  e1d000b0          LDRH     r0,[r0,#0]            ;242
0002d4  e5830000          STR      r0,[r3,#0]            ;242
0002d8  e2820074          ADD      r0,r2,#0x74           ;243
0002dc  e0800081          ADD      r0,r0,r1,LSL #1       ;243
0002e0  e1d000b0          LDRH     r0,[r0,#0]            ;243
0002e4  e5850000          STR      r0,[r5,#0]            ;243
0002e8  e3a00000          MOV      r0,#0                 ;244
0002ec  eaffffeb          B        |L1.672|
;;;246    
                          ENDP

                  usbh_set_video_format PROC
;;;257     */
;;;258    int  usbh_set_video_format(UVC_DEV_T *vdev, IMAGE_FORMAT_E format, int width, int height)
0002f0  e92d5fff          PUSH     {r0-r12,lr}
;;;259    {
0002f4  e1a08000          MOV      r8,r0
0002f8  e1a0b001          MOV      r11,r1
;;;260        UVC_CTRL_T       *vc;
;;;261        UVC_CTRL_PARAM_T *param;
;;;262        int    format_index = -1, frame_index = -1;
0002fc  e3e09000          MVN      r9,#0
000300  e3e0a000          MVN      r10,#0
;;;263        int    i, ret;
;;;264    
;;;265        if (vdev == NULL)
000304  e3580000          CMP      r8,#0
000308  1a000002          BNE      |L1.792|
;;;266            return UVC_RET_DEV_NOT_FOUND;
00030c  e59f06c4          LDR      r0,|L1.2520|
                  |L1.784|
000310  e28dd010          ADD      sp,sp,#0x10
;;;267    
;;;268        vc = &vdev->vc;
;;;269        param = &vdev->param;
;;;270    
;;;271        /*------------------------------------------------------------------------------------*/
;;;272        /*  Find video format index                                                           */
;;;273        /*------------------------------------------------------------------------------------*/
;;;274        for (i = 0; i < vc->num_of_formats; i++)
;;;275        {
;;;276            if (vc->format[i] == format)
;;;277            {
;;;278                format_index = vc->format_idx[i];
;;;279                break;
;;;280            }
;;;281        }
;;;282        if (format_index == -1)
;;;283        {
;;;284            UVC_DBGMSG("Video format 0x%x not supported!\n", format);
;;;285            return UVC_RET_NOT_SUPPORT;
;;;286        }
;;;287    
;;;288        /*------------------------------------------------------------------------------------*/
;;;289        /*  Find video frame index                                                            */
;;;290        /*------------------------------------------------------------------------------------*/
;;;291        for (i = 0; i < vc->num_of_frames; i++)
;;;292        {
;;;293            if (vc->frame_format[i] != format)
;;;294                continue;
;;;295    
;;;296            if ((vc->width[i] == width) && (vc->height[i] == height))
;;;297            {
;;;298                frame_index = vc->frame_idx[i];
;;;299                break;
;;;300            }
;;;301        }
;;;302        if (frame_index == -1)
;;;303        {
;;;304            UVC_DBGMSG("Video size %d x %d not supported!\n", width, height);
;;;305            return UVC_RET_NOT_SUPPORT;
;;;306        }
;;;307    
;;;308        UVC_DBGMSG("Video format found, bFormatIndex=%d, bFrameIndex=%d\n", format_index, frame_index);
;;;309    
;;;310        /*------------------------------------------------------------------------------------*/
;;;311        /*  Get Video Probe Control                                                           */
;;;312        /*------------------------------------------------------------------------------------*/
;;;313        ret = usbh_uvc_probe_control(vdev, UVC_GET_CUR, param);
;;;314        if (ret < 0)
;;;315        {
;;;316            UVC_DBGMSG("Get Video Probe Control failed! %d\n", ret);
;;;317            return ret;
;;;318        }
;;;319    
;;;320        if ((param->bFormatIndex == format_index) && (param->bFrameIndex == frame_index))
;;;321        {
;;;322            goto commit;
;;;323        }
;;;324    
;;;325        /*------------------------------------------------------------------------------------*/
;;;326        /*  Set Video Probe Control                                                           */
;;;327        /*------------------------------------------------------------------------------------*/
;;;328    
;;;329        param->bFormatIndex = format_index;
;;;330        param->bFrameIndex = frame_index;
;;;331    
;;;332    //param->dwFrameInterval *= 3;
;;;333    
;;;334        ret = usbh_uvc_probe_control(vdev, UVC_SET_CUR, param);
;;;335        if (ret < 0)
;;;336        {
;;;337            UVC_DBGMSG("Set Video Probe Control failed! %d\n", ret);
;;;338            return ret;
;;;339        }
;;;340    
;;;341        ret = usbh_uvc_probe_control(vdev, UVC_GET_CUR, param);
;;;342        if (ret < 0)
;;;343        {
;;;344            UVC_DBGMSG("Get Video Probe Control failed! %d\n", ret);
;;;345            return ret;
;;;346        }
;;;347    
;;;348        if ((param->bFormatIndex != format_index) && (param->bFrameIndex != frame_index))
;;;349        {
;;;350            return UVC_RET_NOT_SUPPORT;
;;;351        }
;;;352    
;;;353    commit:
;;;354        /*------------------------------------------------------------------------------------*/
;;;355        /*  Set Video Commit Control                                                          */
;;;356        /*------------------------------------------------------------------------------------*/
;;;357        ret = usbh_uvc_commit_control(vdev, param);
;;;358        if (ret < 0)
;;;359        {
;;;360            UVC_DBGMSG("Get Video Probe Control failed! %d\n", ret);
;;;361            return ret;
;;;362        }
;;;363        return ret;
;;;364    }
000314  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.792|
000318  e2885006          ADD      r5,r8,#6              ;268
00031c  e28860dc          ADD      r6,r8,#0xdc           ;269
000320  e3a04000          MOV      r4,#0                 ;274
000324  ea000007          B        |L1.840|
                  |L1.808|
000328  e285000a          ADD      r0,r5,#0xa            ;276
00032c  e7d00004          LDRB     r0,[r0,r4]            ;276
000330  e150000b          CMP      r0,r11                ;276
000334  1a000002          BNE      |L1.836|
000338  e2850002          ADD      r0,r5,#2              ;278
00033c  e7d09004          LDRB     r9,[r0,r4]            ;278
000340  ea000003          B        |L1.852|
                  |L1.836|
000344  e2844001          ADD      r4,r4,#1              ;274
                  |L1.840|
000348  e5d50001          LDRB     r0,[r5,#1]            ;274
00034c  e1500004          CMP      r0,r4                 ;274
000350  cafffff4          BGT      |L1.808|
                  |L1.852|
000354  e1a00000          MOV      r0,r0                 ;279
000358  e3790001          CMN      r9,#1                 ;282
00035c  1a000001          BNE      |L1.872|
000360  e59f066c          LDR      r0,|L1.2516|
000364  eaffffe9          B        |L1.784|
                  |L1.872|
000368  e3a04000          MOV      r4,#0                 ;291
00036c  ea000015          B        |L1.968|
                  |L1.880|
000370  e285002b          ADD      r0,r5,#0x2b           ;293
000374  e7d00004          LDRB     r0,[r0,r4]            ;293
000378  e150000b          CMP      r0,r11                ;293
00037c  0a000000          BEQ      |L1.900|
000380  ea00000f          B        |L1.964|
                  |L1.900|
000384  e2850044          ADD      r0,r5,#0x44           ;296
000388  e0800084          ADD      r0,r0,r4,LSL #1       ;296
00038c  e1d010b0          LDRH     r1,[r0,#0]            ;296
000390  e59d0008          LDR      r0,[sp,#8]            ;296
000394  e1510000          CMP      r1,r0                 ;296
000398  1a000008          BNE      |L1.960|
00039c  e2850074          ADD      r0,r5,#0x74           ;296
0003a0  e0800084          ADD      r0,r0,r4,LSL #1       ;296
0003a4  e1d010b0          LDRH     r1,[r0,#0]            ;296
0003a8  e59d000c          LDR      r0,[sp,#0xc]          ;296
0003ac  e1510000          CMP      r1,r0                 ;296
0003b0  1a000002          BNE      |L1.960|
0003b4  e2850013          ADD      r0,r5,#0x13           ;298
0003b8  e7d0a004          LDRB     r10,[r0,r4]           ;298
0003bc  ea000004          B        |L1.980|
                  |L1.960|
0003c0  e1a00000          MOV      r0,r0                 ;294
                  |L1.964|
0003c4  e2844001          ADD      r4,r4,#1              ;291
                  |L1.968|
0003c8  e5d50012          LDRB     r0,[r5,#0x12]         ;291
0003cc  e1500004          CMP      r0,r4                 ;291
0003d0  caffffe6          BGT      |L1.880|
                  |L1.980|
0003d4  e1a00000          MOV      r0,r0                 ;299
0003d8  e37a0001          CMN      r10,#1                ;302
0003dc  1a000001          BNE      |L1.1000|
0003e0  e59f05ec          LDR      r0,|L1.2516|
0003e4  eaffffc9          B        |L1.784|
                  |L1.1000|
0003e8  e1a02006          MOV      r2,r6                 ;313
0003ec  e3a01081          MOV      r1,#0x81              ;313
0003f0  e1a00008          MOV      r0,r8                 ;313
0003f4  ebfffffe          BL       usbh_uvc_probe_control
0003f8  e1a07000          MOV      r7,r0                 ;313
0003fc  e3570000          CMP      r7,#0                 ;314
000400  aa000001          BGE      |L1.1036|
000404  e1a00007          MOV      r0,r7                 ;317
000408  eaffffc0          B        |L1.784|
                  |L1.1036|
00040c  e5d60002          LDRB     r0,[r6,#2]            ;320
000410  e1500009          CMP      r0,r9                 ;320
000414  1a000003          BNE      |L1.1064|
000418  e5d60003          LDRB     r0,[r6,#3]            ;320
00041c  e150000a          CMP      r0,r10                ;320
000420  1a000000          BNE      |L1.1064|
000424  ea00001c          B        |L1.1180|
                  |L1.1064|
000428  e5c69002          STRB     r9,[r6,#2]            ;329
00042c  e5c6a003          STRB     r10,[r6,#3]           ;330
000430  e1a02006          MOV      r2,r6                 ;334
000434  e3a01001          MOV      r1,#1                 ;334
000438  e1a00008          MOV      r0,r8                 ;334
00043c  ebfffffe          BL       usbh_uvc_probe_control
000440  e1a07000          MOV      r7,r0                 ;334
000444  e3570000          CMP      r7,#0                 ;335
000448  aa000001          BGE      |L1.1108|
00044c  e1a00007          MOV      r0,r7                 ;338
000450  eaffffae          B        |L1.784|
                  |L1.1108|
000454  e1a02006          MOV      r2,r6                 ;341
000458  e3a01081          MOV      r1,#0x81              ;341
00045c  e1a00008          MOV      r0,r8                 ;341
000460  ebfffffe          BL       usbh_uvc_probe_control
000464  e1a07000          MOV      r7,r0                 ;341
000468  e3570000          CMP      r7,#0                 ;342
00046c  aa000001          BGE      |L1.1144|
000470  e1a00007          MOV      r0,r7                 ;345
000474  eaffffa5          B        |L1.784|
                  |L1.1144|
000478  e5d60002          LDRB     r0,[r6,#2]            ;348
00047c  e1500009          CMP      r0,r9                 ;348
000480  0a000004          BEQ      |L1.1176|
000484  e5d60003          LDRB     r0,[r6,#3]            ;348
000488  e150000a          CMP      r0,r10                ;348
00048c  0a000001          BEQ      |L1.1176|
000490  e59f053c          LDR      r0,|L1.2516|
000494  eaffff9d          B        |L1.784|
                  |L1.1176|
000498  e1a00000          MOV      r0,r0                 ;353
                  |L1.1180|
00049c  e1a01006          MOV      r1,r6                 ;357
0004a0  e1a00008          MOV      r0,r8                 ;357
0004a4  ebfffffe          BL       usbh_uvc_commit_control
0004a8  e1a07000          MOV      r7,r0                 ;357
0004ac  e3570000          CMP      r7,#0                 ;358
0004b0  aa000001          BGE      |L1.1212|
0004b4  e1a00007          MOV      r0,r7                 ;361
0004b8  eaffff94          B        |L1.784|
                  |L1.1212|
0004bc  e1a00007          MOV      r0,r7                 ;363
0004c0  eaffff92          B        |L1.784|
;;;365    
                          ENDP

                  uvc_parse_streaming_data PROC
;;;369    
;;;370    void  uvc_parse_streaming_data(UVC_DEV_T *vdev, uint8_t *buff, int pkt_len)
0004c4  e92d41f0          PUSH     {r4-r8,lr}
;;;371    {
0004c8  e1a04000          MOV      r4,r0
0004cc  e1a05001          MOV      r5,r1
0004d0  e1a08002          MOV      r8,r2
;;;372        UVC_STRM_T   *vs = &vdev->vs;
0004d4  e28460aa          ADD      r6,r4,#0xaa
;;;373        int          data_len;
;;;374    
;;;375        if (pkt_len < 2)
0004d8  e3580002          CMP      r8,#2
0004dc  aa000000          BGE      |L1.1252|
                  |L1.1248|
;;;376            return;                             /* invalid packet                             */
;;;377    
;;;378        if (pkt_len < buff[0])
;;;379            return;                             /* unlikely pakcet length error               */
;;;380    
;;;381        data_len = pkt_len - buff[0];
;;;382        
;;;383        //if (buff[0] != 12)
;;;384        //	sysprintf("!![%02x] %02x %d\n", buff[0], buff[1], pkt_len);
;;;385        //else
;;;386        //	sysprintf("%02x %d\n", buff[1], pkt_len);
;;;387    
;;;388        if (vs->current_frame_error)
;;;389        {
;;;390            if (buff[1] & UVC_PL_EOF)           /* error cleared only if EOF met              */
;;;391            {
;;;392                vs->current_frame_error = 0;
;;;393                vdev->img_size = 0;
;;;394            }
;;;395            return;
;;;396        }
;;;397    
;;;398        if (vdev->img_size == 0)                /* Start of a new image                       */
;;;399        {
;;;400            vs->current_frame_toggle = buff[1] & UVC_PL_FID;
;;;401            if (data_len > 0)
;;;402            {
;;;403                //memcpy(vdev->img_buff, buff+buff[0], data_len);   20200916
;;;404                vdev->img_size = data_len;
;;;405                // sysprintf("![%d] %x %x %x %x %x\n", vdev->img_size, vdev->img_buff[0], vdev->img_buff[1], vdev->img_buff[2], vdev->img_buff[3], vdev->img_buff[4]);
;;;406                return;
;;;407            }
;;;408        }
;;;409        else
;;;410        {
;;;411            if ((buff[1] & UVC_PL_FID) != vs->current_frame_toggle)
;;;412            {
;;;413                UVC_DBGMSG("FID toggle error!\n");
;;;414                vs->current_frame_error = 1;
;;;415                return;
;;;416            }
;;;417            if (buff[1] & UVC_PL_ERR)
;;;418            {
;;;419                UVC_DBGMSG("Payload ERR bit error!\n");
;;;420                vs->current_frame_error = 1;
;;;421                return;
;;;422            }
;;;423    
;;;424            if ((buff[1] & UVC_PL_RES) && (buff[1] & UVC_PL_PTS))
;;;425            {
;;;426                if (vdev->func_rx && (vdev->img_size > 0))
;;;427                    vdev->func_rx(vdev, vdev->img_buff, vdev->img_size);
;;;428                vdev->img_size = 0;
;;;429                return;
;;;430            }
;;;431    
;;;432            if (vdev->img_size + data_len > vdev->img_buff_size)
;;;433            {
;;;434                UVC_DBGMSG("Image data overrun!\n");
;;;435                vs->current_frame_error = 1;
;;;436                return;
;;;437            }
;;;438    
;;;439            if (data_len > 0)
;;;440            {
;;;441            	//memcpy(vdev->img_buff + vdev->img_size, buff+buff[0], data_len);     20200916
;;;442            	vdev->img_size += data_len;
;;;443            }
;;;444    
;;;445            if (buff[1] & UVC_PL_EOF)
;;;446            {
;;;447                if (vdev->func_rx && (vdev->img_size > 0))
;;;448                    vdev->func_rx(vdev, vdev->img_buff, vdev->img_size);
;;;449                vdev->img_size = 0;
;;;450            }
;;;451        }
;;;452    }
0004e0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1252|
0004e4  e5d50000          LDRB     r0,[r5,#0]            ;378
0004e8  e1500008          CMP      r0,r8                 ;378
0004ec  da000000          BLE      |L1.1268|
0004f0  eafffffa          B        |L1.1248|
                  |L1.1268|
0004f4  e5d50000          LDRB     r0,[r5,#0]            ;381
0004f8  e0487000          SUB      r7,r8,r0              ;381
0004fc  e5d60026          LDRB     r0,[r6,#0x26]         ;388
000500  e3500000          CMP      r0,#0                 ;388
000504  0a000006          BEQ      |L1.1316|
000508  e5d50001          LDRB     r0,[r5,#1]            ;390
00050c  e3100002          TST      r0,#2                 ;390
000510  0a000002          BEQ      |L1.1312|
000514  e3a00000          MOV      r0,#0                 ;392
000518  e5c60026          STRB     r0,[r6,#0x26]         ;392
00051c  e5840130          STR      r0,[r4,#0x130]        ;393
                  |L1.1312|
000520  eaffffee          B        |L1.1248|
                  |L1.1316|
000524  e5940130          LDR      r0,[r4,#0x130]        ;398
000528  e3500000          CMP      r0,#0                 ;398
00052c  1a000006          BNE      |L1.1356|
000530  e5d50001          LDRB     r0,[r5,#1]            ;400
000534  e2000001          AND      r0,r0,#1              ;400
000538  e5c60027          STRB     r0,[r6,#0x27]         ;400
00053c  e3570000          CMP      r7,#0                 ;401
000540  da000040          BLE      |L1.1608|
000544  e5847130          STR      r7,[r4,#0x130]        ;404
000548  eaffffe4          B        |L1.1248|
                  |L1.1356|
00054c  e5d50001          LDRB     r0,[r5,#1]            ;411
000550  e2000001          AND      r0,r0,#1              ;411
000554  e5d61027          LDRB     r1,[r6,#0x27]         ;411
000558  e1500001          CMP      r0,r1                 ;411
00055c  0a000002          BEQ      |L1.1388|
000560  e3a00001          MOV      r0,#1                 ;414
000564  e5c60026          STRB     r0,[r6,#0x26]         ;414
000568  eaffffdc          B        |L1.1248|
                  |L1.1388|
00056c  e5d50001          LDRB     r0,[r5,#1]            ;417
000570  e3100040          TST      r0,#0x40              ;417
000574  0a000002          BEQ      |L1.1412|
000578  e3a00001          MOV      r0,#1                 ;420
00057c  e5c60026          STRB     r0,[r6,#0x26]         ;420
000580  eaffffd6          B        |L1.1248|
                  |L1.1412|
000584  e5d50001          LDRB     r0,[r5,#1]            ;424
000588  e3100010          TST      r0,#0x10              ;424
00058c  0a000010          BEQ      |L1.1492|
000590  e5d50001          LDRB     r0,[r5,#1]            ;424
000594  e3100004          TST      r0,#4                 ;424
000598  0a00000d          BEQ      |L1.1492|
00059c  e5940134          LDR      r0,[r4,#0x134]        ;426
0005a0  e3500000          CMP      r0,#0                 ;426
0005a4  0a000007          BEQ      |L1.1480|
0005a8  e5940130          LDR      r0,[r4,#0x130]        ;426
0005ac  e3500000          CMP      r0,#0                 ;426
0005b0  da000004          BLE      |L1.1480|
0005b4  e5941128          LDR      r1,[r4,#0x128]        ;427
0005b8  e5942130          LDR      r2,[r4,#0x130]        ;427
0005bc  e5943134          LDR      r3,[r4,#0x134]        ;427
0005c0  e1a00004          MOV      r0,r4                 ;427
0005c4  e12fff33          BLX      r3                    ;427
                  |L1.1480|
0005c8  e3a00000          MOV      r0,#0                 ;428
0005cc  e5840130          STR      r0,[r4,#0x130]        ;428
0005d0  eaffffc2          B        |L1.1248|
                  |L1.1492|
0005d4  e5940130          LDR      r0,[r4,#0x130]        ;432
0005d8  e0800007          ADD      r0,r0,r7              ;432
0005dc  e594112c          LDR      r1,[r4,#0x12c]        ;432
0005e0  e1500001          CMP      r0,r1                 ;432
0005e4  da000002          BLE      |L1.1524|
0005e8  e3a00001          MOV      r0,#1                 ;435
0005ec  e5c60026          STRB     r0,[r6,#0x26]         ;435
0005f0  eaffffba          B        |L1.1248|
                  |L1.1524|
0005f4  e3570000          CMP      r7,#0                 ;439
0005f8  da000002          BLE      |L1.1544|
0005fc  e5940130          LDR      r0,[r4,#0x130]        ;442
000600  e0800007          ADD      r0,r0,r7              ;442
000604  e5840130          STR      r0,[r4,#0x130]        ;442
                  |L1.1544|
000608  e5d50001          LDRB     r0,[r5,#1]            ;445
00060c  e3100002          TST      r0,#2                 ;445
000610  0a00000c          BEQ      |L1.1608|
000614  e5940134          LDR      r0,[r4,#0x134]        ;447
000618  e3500000          CMP      r0,#0                 ;447
00061c  0a000007          BEQ      |L1.1600|
000620  e5940130          LDR      r0,[r4,#0x130]        ;447
000624  e3500000          CMP      r0,#0                 ;447
000628  da000004          BLE      |L1.1600|
00062c  e5941128          LDR      r1,[r4,#0x128]        ;448
000630  e5942130          LDR      r2,[r4,#0x130]        ;448
000634  e5943134          LDR      r3,[r4,#0x134]        ;448
000638  e1a00004          MOV      r0,r4                 ;448
00063c  e12fff33          BLX      r3                    ;448
                  |L1.1600|
000640  e3a00000          MOV      r0,#0                 ;449
000644  e5840130          STR      r0,[r4,#0x130]        ;449
                  |L1.1608|
000648  e1a00000          MOV      r0,r0
00064c  eaffffa3          B        |L1.1248|
;;;453    
                          ENDP

                  iso_in_irq PROC
;;;454    
;;;455    static void iso_in_irq(UTR_T *utr)
000650  e92d41f0          PUSH     {r4-r8,lr}
;;;456    {
000654  e1a04000          MOV      r4,r0
;;;457        UVC_DEV_T   *vdev = (UVC_DEV_T *)utr->context;
000658  e5946080          LDR      r6,[r4,#0x80]
;;;458        int         i, ret;
;;;459    
;;;460        /* We don't want to do anything if we are about to be removed! */
;;;461        if (!vdev || !vdev->udev)
00065c  e3560000          CMP      r6,#0
000660  0a000002          BEQ      |L1.1648|
000664  e5960000          LDR      r0,[r6,#0]
000668  e3500000          CMP      r0,#0
00066c  1a000000          BNE      |L1.1652|
                  |L1.1648|
;;;462            return;
;;;463    
;;;464        if (vdev->is_streaming == 0)
;;;465        {
;;;466            UVC_DBGMSG("iso_in_irq stop utr 0x%x\n", (int)utr);
;;;467            utr->status = USBH_ERR_ABORT;
;;;468            return;
;;;469        }
;;;470    
;;;471        // UVC_DBGMSG("SF=%d, 0x%x\n", utr->iso_sf, (int)utr);
;;;472    
;;;473        utr->bIsoNewSched = 0;
;;;474    
;;;475        for (i = 0; i < IF_PER_UTR; i++)
;;;476        {
;;;477            if (utr->iso_status[i] == 0)
;;;478            {
;;;479                uvc_parse_streaming_data(vdev, utr->iso_buff[i], utr->iso_xlen[i]);
;;;480            }
;;;481            else
;;;482            {
;;;483                // UVC_DBGMSG("Iso %d err - %d\n", i, utr->iso_status[i]);
;;;484                if ((utr->iso_status[i] == USBH_ERR_NOT_ACCESS0) || (utr->iso_status[i] == USBH_ERR_NOT_ACCESS1))
;;;485                    utr->bIsoNewSched = 1;
;;;486            }
;;;487            utr->iso_xlen[i] = utr->ep->wMaxPacketSize;
;;;488        }
;;;489    
;;;490        /* schedule the following isochronous transfers */
;;;491        ret = usbh_iso_xfer(utr);
;;;492        if (ret < 0)
;;;493        {
;;;494            UVC_DBGMSG("usbh_iso_xfer failed!\n");
;;;495            utr->status = USBH_ERR_ABORT;
;;;496        }
;;;497    }
000670  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1652|
000674  e5d6010c          LDRB     r0,[r6,#0x10c]        ;464
000678  e3500000          CMP      r0,#0                 ;464
00067c  1a000002          BNE      |L1.1676|
000680  e3e000cc          MVN      r0,#0xcc              ;467
000684  e5840078          STR      r0,[r4,#0x78]         ;467
000688  eafffff8          B        |L1.1648|
                  |L1.1676|
00068c  e3a00000          MOV      r0,#0                 ;473
000690  e5c40020          STRB     r0,[r4,#0x20]         ;473
000694  e3a05000          MOV      r5,#0                 ;475
000698  ea00001d          B        |L1.1812|
                  |L1.1692|
00069c  e2840054          ADD      r0,r4,#0x54           ;477
0006a0  e7900105          LDR      r0,[r0,r5,LSL #2]     ;477
0006a4  e3500000          CMP      r0,#0                 ;477
0006a8  1a000007          BNE      |L1.1740|
0006ac  e2840024          ADD      r0,r4,#0x24           ;479
0006b0  e0800085          ADD      r0,r0,r5,LSL #1       ;479
0006b4  e1d020b0          LDRH     r2,[r0,#0]            ;479
0006b8  e2840034          ADD      r0,r4,#0x34           ;479
0006bc  e7901105          LDR      r1,[r0,r5,LSL #2]     ;479
0006c0  e1a00006          MOV      r0,r6                 ;479
0006c4  ebfffffe          BL       uvc_parse_streaming_data
0006c8  ea00000b          B        |L1.1788|
                  |L1.1740|
0006cc  e2840054          ADD      r0,r4,#0x54           ;484
0006d0  e7900105          LDR      r0,[r0,r5,LSL #2]     ;484
0006d4  e2801c01          ADD      r1,r0,#0x100          ;484
0006d8  e2911026          ADDS     r1,r1,#0x26           ;484
0006dc  0a000004          BEQ      |L1.1780|
0006e0  e2840054          ADD      r0,r4,#0x54           ;484
0006e4  e7900105          LDR      r0,[r0,r5,LSL #2]     ;484
0006e8  e2801c01          ADD      r1,r0,#0x100          ;484
0006ec  e2911027          ADDS     r1,r1,#0x27           ;484
0006f0  1a000001          BNE      |L1.1788|
                  |L1.1780|
0006f4  e3a00001          MOV      r0,#1                 ;485
0006f8  e5c40020          STRB     r0,[r4,#0x20]         ;485
                  |L1.1788|
0006fc  e594000c          LDR      r0,[r4,#0xc]          ;487
000700  e1d000b4          LDRH     r0,[r0,#4]            ;487
000704  e2841024          ADD      r1,r4,#0x24           ;487
000708  e0811085          ADD      r1,r1,r5,LSL #1       ;487
00070c  e1c100b0          STRH     r0,[r1,#0]            ;487
000710  e2855001          ADD      r5,r5,#1              ;475
                  |L1.1812|
000714  e3550008          CMP      r5,#8                 ;475
000718  baffffdf          BLT      |L1.1692|
00071c  e1a00004          MOV      r0,r4                 ;491
000720  ebfffffe          BL       usbh_iso_xfer
000724  e1a07000          MOV      r7,r0                 ;491
000728  e3570000          CMP      r7,#0                 ;492
00072c  aa000001          BGE      |L1.1848|
000730  e3e000cc          MVN      r0,#0xcc              ;495
000734  e5840078          STR      r0,[r4,#0x78]         ;495
                  |L1.1848|
000738  e1a00000          MOV      r0,r0
00073c  eaffffcb          B        |L1.1648|
;;;498    
                          ENDP

                  usbh_uvc_set_video_buffer PROC
;;;507     */
;;;508    void usbh_uvc_set_video_buffer(UVC_DEV_T *vdev, uint8_t *image_buff, int img_buff_size)
000740  e5801128          STR      r1,[r0,#0x128]
;;;509    {
;;;510        vdev->img_buff = image_buff;
;;;511        vdev->img_buff_size = img_buff_size;
000744  e580212c          STR      r2,[r0,#0x12c]
;;;512        vdev->img_size = 0;
000748  e3a03000          MOV      r3,#0
00074c  e5803130          STR      r3,[r0,#0x130]
;;;513    }
000750  e12fff1e          BX       lr
;;;514    
                          ENDP

                  usbh_uvc_start_streaming PROC
;;;523     */
;;;524    int usbh_uvc_start_streaming(UVC_DEV_T *vdev, UVC_CB_FUNC *func)
000754  e92d5ff0          PUSH     {r4-r12,lr}
;;;525    {
000758  e1a04000          MOV      r4,r0
00075c  e1a09001          MOV      r9,r1
;;;526        UDEV_T       *udev = vdev->udev;
000760  e594b000          LDR      r11,[r4,#0]
;;;527        EP_INFO_T    *ep;
;;;528        UTR_T        *utr;
;;;529        int          i, j, ret;
;;;530    
;;;531        if ((vdev == NULL) || (func == NULL))
000764  e3540000          CMP      r4,#0
000768  0a000001          BEQ      |L1.1908|
00076c  e3590000          CMP      r9,#0
000770  1a000001          BNE      |L1.1916|
                  |L1.1908|
;;;532            return UVC_RET_INVALID;
000774  e59f0260          LDR      r0,|L1.2524|
                  |L1.1912|
;;;533    
;;;534        if (vdev->is_streaming)
;;;535            return UVC_RET_IS_STREAMING;
;;;536    
;;;537        /*
;;;538         *  Select the best alternative streaming interface and also determine the endpoint.
;;;539         */
;;;540        ret = usbh_uvc_select_alt_interface(vdev);
;;;541        if (ret != 0)
;;;542        {
;;;543            UVC_ERRMSG("Failed to select UVC alternative interface!\n");
;;;544            return ret;
;;;545        }
;;;546        ep = vdev->ep_iso_in;
;;;547    
;;;548        vdev->func_rx = func;
;;;549    
;;;550    #ifdef UVC_DEBUG
;;;551        UVC_DBGMSG("Actived isochronous-in endpoint =>");
;;;552        usbh_dump_ep_info(ep);
;;;553    #endif
;;;554    
;;;555        /*------------------------------------------------------------------------------------*/
;;;556        /*  Allocate isochronous in UTRs and assign transfer buffer                           */
;;;557        /*------------------------------------------------------------------------------------*/
;;;558        for (i = 0; i < UVC_UTR_PER_STREAM; i++)
;;;559        {
;;;560            if (vdev->utr_rx[i] != NULL)
;;;561            {
;;;562                vdev->utr_rx[i]->status = 0;
;;;563                continue;
;;;564            }
;;;565    
;;;566            utr = alloc_utr(udev);              /* allocate UTR                               */
;;;567            if (utr == NULL)
;;;568            {
;;;569                ret = USBH_ERR_MEMORY_OUT;      /* memory allocate failed                     */
;;;570                goto err_2;                     /* abort                                      */
;;;571            }
;;;572            vdev->utr_rx[i] = utr;
;;;573            utr->buff = vdev->in_buff + i * UVC_UTR_INBUF_SIZE;
;;;574            utr->data_len = UVC_UTR_INBUF_SIZE;
;;;575    
;;;576            for (j = 0; j < IF_PER_UTR; j++)
;;;577            {
;;;578                utr->iso_buff[j] = utr->buff + j * 3072;
;;;579                utr->iso_xlen[j] = ep->wMaxPacketSize;
;;;580            }
;;;581        }
;;;582    
;;;583        /*------------------------------------------------------------------------------------*/
;;;584        /*  Start UTRs                                                                        */
;;;585        /*------------------------------------------------------------------------------------*/
;;;586    
;;;587        vdev->utr_rx[0]->bIsoNewSched = 1;
;;;588        vdev->is_streaming = 1;
;;;589    
;;;590        for (i = 0; i < UVC_UTR_PER_STREAM; i++)
;;;591        {
;;;592            utr = vdev->utr_rx[i];
;;;593            utr->context = vdev;
;;;594            utr->ep = ep;
;;;595            utr->func = iso_in_irq;
;;;596            ret = usbh_iso_xfer(utr);
;;;597            if (ret < 0)
;;;598            {
;;;599                UVC_DBGMSG("Error - failed to start UTR %d isochronous-in transfer (%d)", i, ret);
;;;600                goto err_1;
;;;601            }
;;;602        }
;;;603    
;;;604        return UVC_RET_OK;
;;;605    
;;;606    err_1:
;;;607        for (i = 0; i < UVC_UTR_PER_STREAM; i++)
;;;608        {
;;;609            usbh_quit_utr(vdev->utr_rx[i]);         /* quit all UTRs                          */
;;;610        }
;;;611    
;;;612    err_2:
;;;613        for (i = 0; i < UVC_UTR_PER_STREAM; i++)    /* free all UTRs                          */
;;;614        {
;;;615            if (vdev->utr_rx[i] != NULL)
;;;616            {
;;;617                free_utr(vdev->utr_rx[i]);
;;;618                vdev->utr_rx[i] = NULL;
;;;619            }
;;;620        }
;;;621    
;;;622        return ret;
;;;623    }
000778  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1916|
00077c  e5d4010c          LDRB     r0,[r4,#0x10c]        ;534
000780  e3500000          CMP      r0,#0                 ;534
000784  0a000001          BEQ      |L1.1936|
000788  e59f0250          LDR      r0,|L1.2528|
00078c  eafffff9          B        |L1.1912|
                  |L1.1936|
000790  e1a00004          MOV      r0,r4                 ;540
000794  ebfffffe          BL       usbh_uvc_select_alt_interface
000798  e1a08000          MOV      r8,r0                 ;540
00079c  e3580000          CMP      r8,#0                 ;541
0007a0  0a000003          BEQ      |L1.1972|
0007a4  e28f0f8e          ADR      r0,|L1.2532|
0007a8  ebfffffe          BL       sysprintf
0007ac  e1a00008          MOV      r0,r8                 ;544
0007b0  eafffff0          B        |L1.1912|
                  |L1.1972|
0007b4  e594a110          LDR      r10,[r4,#0x110]       ;546
0007b8  e5849134          STR      r9,[r4,#0x134]        ;548
0007bc  e3a05000          MOV      r5,#0                 ;558
0007c0  ea000027          B        |L1.2148|
                  |L1.1988|
0007c4  e2840f46          ADD      r0,r4,#0x118          ;560
0007c8  e7900105          LDR      r0,[r0,r5,LSL #2]     ;560
0007cc  e3500000          CMP      r0,#0                 ;560
0007d0  0a000004          BEQ      |L1.2024|
0007d4  e3a00000          MOV      r0,#0                 ;562
0007d8  e2841f46          ADD      r1,r4,#0x118          ;562
0007dc  e7911105          LDR      r1,[r1,r5,LSL #2]     ;562
0007e0  e5810078          STR      r0,[r1,#0x78]         ;562
0007e4  ea00001d          B        |L1.2144|
                  |L1.2024|
0007e8  e1a0000b          MOV      r0,r11                ;566
0007ec  ebfffffe          BL       alloc_utr
0007f0  e1a06000          MOV      r6,r0                 ;566
0007f4  e3560000          CMP      r6,#0                 ;567
0007f8  1a000001          BNE      |L1.2052|
0007fc  e3e08009          MVN      r8,#9                 ;569
000800  ea00003a          B        |L1.2288|
                  |L1.2052|
000804  e2840f46          ADD      r0,r4,#0x118          ;572
000808  e7806105          STR      r6,[r0,r5,LSL #2]     ;572
00080c  e0851085          ADD      r1,r5,r5,LSL #1       ;573
000810  e5940114          LDR      r0,[r4,#0x114]        ;573
000814  e0800681          ADD      r0,r0,r1,LSL #13      ;573
000818  e5860010          STR      r0,[r6,#0x10]         ;573
00081c  e3a00a06          MOV      r0,#0x6000            ;574
000820  e5860018          STR      r0,[r6,#0x18]         ;574
000824  e3a07000          MOV      r7,#0                 ;576
000828  ea000009          B        |L1.2132|
                  |L1.2092|
00082c  e0871087          ADD      r1,r7,r7,LSL #1       ;578
000830  e5960010          LDR      r0,[r6,#0x10]         ;578
000834  e0800501          ADD      r0,r0,r1,LSL #10      ;578
000838  e2861034          ADD      r1,r6,#0x34           ;578
00083c  e7810107          STR      r0,[r1,r7,LSL #2]     ;578
000840  e1da00b4          LDRH     r0,[r10,#4]           ;579
000844  e2861024          ADD      r1,r6,#0x24           ;579
000848  e0811087          ADD      r1,r1,r7,LSL #1       ;579
00084c  e1c100b0          STRH     r0,[r1,#0]            ;579
000850  e2877001          ADD      r7,r7,#1              ;576
                  |L1.2132|
000854  e3570008          CMP      r7,#8                 ;576
000858  bafffff3          BLT      |L1.2092|
00085c  e1a00000          MOV      r0,r0                 ;563
                  |L1.2144|
000860  e2855001          ADD      r5,r5,#1              ;558
                  |L1.2148|
000864  e3550004          CMP      r5,#4                 ;558
000868  baffffd5          BLT      |L1.1988|
00086c  e3a00001          MOV      r0,#1                 ;587
000870  e5941118          LDR      r1,[r4,#0x118]        ;587
000874  e5c10020          STRB     r0,[r1,#0x20]         ;587
000878  e5c4010c          STRB     r0,[r4,#0x10c]        ;588
00087c  e3a05000          MOV      r5,#0                 ;590
000880  ea00000c          B        |L1.2232|
                  |L1.2180|
000884  e2840f46          ADD      r0,r4,#0x118          ;592
000888  e7906105          LDR      r6,[r0,r5,LSL #2]     ;592
00088c  e5864080          STR      r4,[r6,#0x80]         ;593
000890  e586a00c          STR      r10,[r6,#0xc]         ;594
000894  e59f0178          LDR      r0,|L1.2580|
000898  e5860084          STR      r0,[r6,#0x84]         ;595
00089c  e1a00006          MOV      r0,r6                 ;596
0008a0  ebfffffe          BL       usbh_iso_xfer
0008a4  e1a08000          MOV      r8,r0                 ;596
0008a8  e3580000          CMP      r8,#0                 ;597
0008ac  aa000000          BGE      |L1.2228|
0008b0  ea000004          B        |L1.2248|
                  |L1.2228|
0008b4  e2855001          ADD      r5,r5,#1              ;590
                  |L1.2232|
0008b8  e3550004          CMP      r5,#4                 ;590
0008bc  bafffff0          BLT      |L1.2180|
0008c0  e3a00000          MOV      r0,#0                 ;604
0008c4  eaffffab          B        |L1.1912|
                  |L1.2248|
0008c8  e1a00000          MOV      r0,r0                 ;606
0008cc  e3a05000          MOV      r5,#0                 ;607
0008d0  ea000003          B        |L1.2276|
                  |L1.2260|
0008d4  e2841f46          ADD      r1,r4,#0x118          ;609
0008d8  e7910105          LDR      r0,[r1,r5,LSL #2]     ;609
0008dc  ebfffffe          BL       usbh_quit_utr
0008e0  e2855001          ADD      r5,r5,#1              ;607
                  |L1.2276|
0008e4  e3550004          CMP      r5,#4                 ;607
0008e8  bafffff9          BLT      |L1.2260|
0008ec  e1a00000          MOV      r0,r0                 ;612
                  |L1.2288|
0008f0  e3a05000          MOV      r5,#0                 ;613
0008f4  ea00000a          B        |L1.2340|
                  |L1.2296|
0008f8  e2840f46          ADD      r0,r4,#0x118          ;615
0008fc  e7900105          LDR      r0,[r0,r5,LSL #2]     ;615
000900  e3500000          CMP      r0,#0                 ;615
000904  0a000005          BEQ      |L1.2336|
000908  e2841f46          ADD      r1,r4,#0x118          ;617
00090c  e7910105          LDR      r0,[r1,r5,LSL #2]     ;617
000910  ebfffffe          BL       free_utr
000914  e3a00000          MOV      r0,#0                 ;618
000918  e2841f46          ADD      r1,r4,#0x118          ;618
00091c  e7810105          STR      r0,[r1,r5,LSL #2]     ;618
                  |L1.2336|
000920  e2855001          ADD      r5,r5,#1              ;613
                  |L1.2340|
000924  e3550004          CMP      r5,#4                 ;613
000928  bafffff2          BLT      |L1.2296|
00092c  e1a00008          MOV      r0,r8                 ;622
000930  eaffff90          B        |L1.1912|
;;;624    
                          ENDP

                  usbh_uvc_stop_streaming PROC
;;;632     */
;;;633    int usbh_uvc_stop_streaming(UVC_DEV_T *vdev)
000934  e92d4070          PUSH     {r4-r6,lr}
;;;634    {
000938  e1a04000          MOV      r4,r0
;;;635        IFACE_T   *iface;
;;;636        int       ret;
;;;637    
;;;638        if (vdev == NULL)
00093c  e3540000          CMP      r4,#0
000940  1a000001          BNE      |L1.2380|
;;;639            return UVC_RET_INVALID;
000944  e59f0090          LDR      r0,|L1.2524|
                  |L1.2376|
;;;640    
;;;641        if (!vdev->is_streaming)
;;;642            return UVC_RET_OK;                  /* UVC is currently not straming, do nothing  */
;;;643    
;;;644        vdev->is_streaming = 0;
;;;645    
;;;646        /*------------------------------------------------------------------------------------*/
;;;647        /*  Find the streaming interface                                                      */
;;;648        /*------------------------------------------------------------------------------------*/
;;;649        iface = vdev->udev->iface_list;
;;;650        while (iface != NULL)
;;;651        {
;;;652            if (iface->if_num == vdev->iface_stream->if_num)
;;;653                break;
;;;654            iface = iface->next;
;;;655        }
;;;656        if (iface == NULL)
;;;657        {
;;;658            UVC_DBGMSG("Can't find UVC streaming interface!\n");
;;;659            return UVC_RET_NOT_SUPPORT;
;;;660        }
;;;661    
;;;662        ret = usbh_set_interface(iface, 0);     /* select alternative setting (0 bandwidth)   */
;;;663        if (ret != 0)
;;;664        {
;;;665            UVC_DBGMSG("Fail to select UVC streaming interface alt. 0! %d\n", iface->if_num);
;;;666            return ret;
;;;667        }
;;;668    
;;;669        return 0;
;;;670    }
000948  e8bd8070          POP      {r4-r6,pc}
                  |L1.2380|
00094c  e5d4010c          LDRB     r0,[r4,#0x10c]        ;641
000950  e3500000          CMP      r0,#0                 ;641
000954  1a000001          BNE      |L1.2400|
000958  e3a00000          MOV      r0,#0                 ;642
00095c  eafffff9          B        |L1.2376|
                  |L1.2400|
000960  e3a00000          MOV      r0,#0                 ;644
000964  e5c4010c          STRB     r0,[r4,#0x10c]        ;644
000968  e5940000          LDR      r0,[r4,#0]            ;649
00096c  e5905030          LDR      r5,[r0,#0x30]         ;649
000970  ea000006          B        |L1.2448|
                  |L1.2420|
000974  e5d50004          LDRB     r0,[r5,#4]            ;652
000978  e59410d8          LDR      r1,[r4,#0xd8]         ;652
00097c  e5d11004          LDRB     r1,[r1,#4]            ;652
000980  e1500001          CMP      r0,r1                 ;652
000984  1a000000          BNE      |L1.2444|
000988  ea000002          B        |L1.2456|
                  |L1.2444|
00098c  e59554c4          LDR      r5,[r5,#0x4c4]        ;654
                  |L1.2448|
000990  e3550000          CMP      r5,#0                 ;650
000994  1afffff6          BNE      |L1.2420|
                  |L1.2456|
000998  e1a00000          MOV      r0,r0                 ;653
00099c  e3550000          CMP      r5,#0                 ;656
0009a0  1a000001          BNE      |L1.2476|
0009a4  e59f0028          LDR      r0,|L1.2516|
0009a8  eaffffe6          B        |L1.2376|
                  |L1.2476|
0009ac  e3a01000          MOV      r1,#0                 ;662
0009b0  e1a00005          MOV      r0,r5                 ;662
0009b4  ebfffffe          BL       usbh_set_interface
0009b8  e1a06000          MOV      r6,r0                 ;662
0009bc  e3560000          CMP      r6,#0                 ;663
0009c0  0a000001          BEQ      |L1.2508|
0009c4  e1a00006          MOV      r0,r6                 ;666
0009c8  eaffffde          B        |L1.2376|
                  |L1.2508|
0009cc  e3a00000          MOV      r0,#0                 ;669
0009d0  eaffffdc          B        |L1.2376|
                  |L1.2516|
                          DCD      0xfffff43c
                  |L1.2520|
                          DCD      0xfffff447
                  |L1.2524|
                          DCD      0xfffff443
                  |L1.2528|
                          DCD      0xfffff439
                  |L1.2532|
0009e4  4661696c          DCB      "Failed to select UVC alternative interface!\n",0
0009e8  65642074
0009ec  6f207365
0009f0  6c656374
0009f4  20555643
0009f8  20616c74
0009fc  65726e61
000a00  74697665
000a04  20696e74
000a08  65726661
000a0c  6365210a
000a10  00      
000a11  00                DCB      0
000a12  00                DCB      0
000a13  00                DCB      0
                  |L1.2580|
                          DCD      iso_in_irq
                          ENDP

