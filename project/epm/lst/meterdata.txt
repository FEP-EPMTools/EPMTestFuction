; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\meterdata.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\meterdata.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\meterdata.crf src\User\meterdata.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  MeterDataPreOffCallback PROC
;;;134    /*-----------------------------------------*/
;;;135    static BOOL MeterDataPreOffCallback(int flag)
000000  e1a01000          MOV      r1,r0
;;;136    {
;;;137        BOOL reVal = TRUE;
000004  e3a00001          MOV      r0,#1
;;;138        meterDataIgnoreRun = TRUE;
000008  e3a02001          MOV      r2,#1
00000c  e59f3214          LDR      r3,|L1.552|
000010  e5c32000          STRB     r2,[r3,#0]  ; meterDataIgnoreRun
;;;139        //sysprintf("### MeterData OFF Callback [%s] ###\r\n", meterDataPowerCallabck.drvName);    
;;;140        return reVal;    
;;;141    }
000014  e12fff1e          BX       lr
;;;142    static BOOL MeterDataOffCallback(int flag)
                          ENDP

                  MeterDataOffCallback PROC
000018  e92d4070          PUSH     {r4-r6,lr}
;;;143    {
00001c  e1a05000          MOV      r5,r0
;;;144        int timers = 2000/10;
000020  e3a040c8          MOV      r4,#0xc8
;;;145        while(!meterDataPowerStatus)
000024  ea000008          B        |L1.76|
                  |L1.40|
;;;146        {
;;;147            sysprintf("[m]");
000028  e28f0f7f          ADR      r0,|L1.556|
00002c  ebfffffe          BL       sysprintf
;;;148            if(timers-- == 0)
000030  e1b00004          MOVS     r0,r4
000034  e2444001          SUB      r4,r4,#1
000038  1a000001          BNE      |L1.68|
;;;149            {
;;;150                return FALSE;
00003c  e3a00000          MOV      r0,#0
                  |L1.64|
;;;151            }
;;;152            vTaskDelay(10/portTICK_RATE_MS); 
;;;153        }
;;;154        return TRUE;    
;;;155    }
000040  e8bd8070          POP      {r4-r6,pc}
                  |L1.68|
000044  e3a00001          MOV      r0,#1                 ;152
000048  ebfffffe          BL       vTaskDelay
                  |L1.76|
00004c  e59f01dc          LDR      r0,|L1.560|
000050  e5d00000          LDRB     r0,[r0,#0]            ;145  ; meterDataPowerStatus
000054  e3500000          CMP      r0,#0                 ;145
000058  0afffff2          BEQ      |L1.40|
00005c  e3a00001          MOV      r0,#1                 ;154
000060  eafffff6          B        |L1.64|
;;;156    static BOOL MeterDataOnCallback(int flag)
                          ENDP

                  MeterDataOnCallback PROC
000064  e92d4070          PUSH     {r4-r6,lr}
;;;157    {
000068  e1a05000          MOV      r5,r0
;;;158        BOOL reVal = TRUE;
00006c  e3a04001          MOV      r4,#1
;;;159        meterDataPowerStatus = FALSE;
000070  e3a00000          MOV      r0,#0
000074  e59f11b4          LDR      r1,|L1.560|
000078  e5c10000          STRB     r0,[r1,#0]  ; meterDataPowerStatus
;;;160        meterDataIgnoreRun = FALSE;
00007c  e59f11a4          LDR      r1,|L1.552|
000080  e5c10000          STRB     r0,[r1,#0]  ; meterDataIgnoreRun
;;;161        xSemaphoreGive(xMeterDataActionSemaphore);
000084  e3a03000          MOV      r3,#0
000088  e1a02003          MOV      r2,r3
00008c  e1a01003          MOV      r1,r3
000090  e59f019c          LDR      r0,|L1.564|
000094  e5900000          LDR      r0,[r0,#0]  ; xMeterDataActionSemaphore
000098  ebfffffe          BL       xQueueGenericSend
;;;162        //sysprintf("### MeterData ON Callback [%s] ###\r\n", meterDataPowerCallabck.drvName);    
;;;163        return reVal;    
00009c  e1a00004          MOV      r0,r4
;;;164    }
0000a0  e8bd8070          POP      {r4-r6,pc}
;;;165    static BOOL MeterDataCheckStatus(int flag)
                          ENDP

                  MeterDataCheckStatus PROC
0000a4  e1a01000          MOV      r1,r0
;;;166    {
;;;167        //BOOL reVal = TRUE;
;;;168        //sysprintf("### MeterData STATUS Callback [%s] ###\r\n", meterDataPowerCallabck.drvName); 
;;;169        return meterDataPowerStatus;    
0000a8  e59f0180          LDR      r0,|L1.560|
0000ac  e5d00000          LDRB     r0,[r0,#0]  ; meterDataPowerStatus
;;;170    }
0000b0  e12fff1e          BX       lr
;;;171    
                          ENDP

                  getSpaceStatus PROC
;;;172    
;;;173    static BOOL getSpaceStatus(uint8_t index)
0000b4  e92d4070          PUSH     {r4-r6,lr}
;;;174    {
0000b8  e1a04000          MOV      r4,r0
;;;175        if(GetMeterPara()->meterPosition-1 == index)
0000bc  ebfffffe          BL       GetMeterPara
0000c0  e2805064          ADD      r5,r0,#0x64
0000c4  e1a00005          MOV      r0,r5
0000c8  ebfffffe          BL       __aeabi_uread4
0000cc  e2400001          SUB      r0,r0,#1
0000d0  e1500004          CMP      r0,r4
0000d4  1a000002          BNE      |L1.228|
;;;176        {//前一個
;;;177            return GetSpaceStatus(SPACE_INDEX_1);
0000d8  e3a00000          MOV      r0,#0
0000dc  ebfffffe          BL       GetSpaceStatus
                  |L1.224|
;;;178        }
;;;179        else if(GetMeterPara()->meterPosition == index)
;;;180        {//後一個
;;;181            return GetSpaceStatus(SPACE_INDEX_2);
;;;182        }
;;;183        else
;;;184        {
;;;185            return FALSE;
;;;186        }
;;;187        
;;;188    }
0000e0  e8bd8070          POP      {r4-r6,pc}
                  |L1.228|
0000e4  ebfffffe          BL       GetMeterPara
0000e8  e2805064          ADD      r5,r0,#0x64           ;179
0000ec  e1a00005          MOV      r0,r5                 ;179
0000f0  ebfffffe          BL       __aeabi_uread4
0000f4  e1500004          CMP      r0,r4                 ;179
0000f8  1a000002          BNE      |L1.264|
0000fc  e3a00001          MOV      r0,#1                 ;181
000100  ebfffffe          BL       GetSpaceStatus
000104  eafffff5          B        |L1.224|
                  |L1.264|
000108  e3a00000          MOV      r0,#0                 ;185
00010c  eafffff3          B        |L1.224|
;;;189    
                          ENDP

                  updateTariffDataRoutine PROC
;;;190    static BOOL updateTariffDataRoutine(time_t currentTime)
000110  e92d4010          PUSH     {r4,lr}
;;;191    {
000114  e1a04000          MOV      r4,r0
;;;192        TariffUpdateCurrentTariffData(); 
000118  ebfffffe          BL       TariffUpdateCurrentTariffData
;;;193        return TRUE;
00011c  e3a00001          MOV      r0,#1
;;;194    }
000120  e8bd8010          POP      {r4,pc}
;;;195    static BOOL updateTariffDataRoutineCondition(time_t currentTime)
                          ENDP

                  updateTariffDataRoutineCondition PROC
000124  e92d4010          PUSH     {r4,lr}
;;;196    {
000128  e1a04000          MOV      r4,r0
;;;197        if(GuiManagerCompareCurrentScreenId(GUI_STANDBY_ID) || 
00012c  e3a00001          MOV      r0,#1
000130  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000134  e3500000          CMP      r0,#0
000138  1a00000b          BNE      |L1.364|
;;;198                GuiManagerCompareCurrentScreenId(GUI_FILE_DOWNLOAD_ID) || 
00013c  e3a0000b          MOV      r0,#0xb
000140  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000144  e3500000          CMP      r0,#0
000148  1a000007          BNE      |L1.364|
;;;199                GuiManagerCompareCurrentScreenId(GUI_FREE_ID) || 
00014c  e3a0000c          MOV      r0,#0xc
000150  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000154  e3500000          CMP      r0,#0
000158  1a000003          BNE      |L1.364|
;;;200                GuiManagerCompareCurrentScreenId(GUI_OFF_ID))
00015c  e3a0000d          MOV      r0,#0xd
000160  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000164  e3500000          CMP      r0,#0
000168  0a000001          BEQ      |L1.372|
                  |L1.364|
;;;201        {
;;;202            return TRUE;
00016c  e3a00001          MOV      r0,#1
                  |L1.368|
;;;203        }
;;;204        else
;;;205        {
;;;206            return FALSE;
;;;207        }
;;;208    }
000170  e8bd8010          POP      {r4,pc}
                  |L1.372|
000174  e3a00000          MOV      r0,#0                 ;206
000178  eafffffc          B        |L1.368|
;;;209    static BOOL sendLedHeartbeatRoutine(time_t currentTime)
                          ENDP

                  sendLedHeartbeatRoutine PROC
00017c  e92d4010          PUSH     {r4,lr}
;;;210    {
000180  e1a04000          MOV      r4,r0
;;;211        LedSendHeartbeat(NULL); 
000184  e3a00000          MOV      r0,#0
000188  ebfffffe          BL       LedSendHeartbeat
;;;212        return TRUE;
00018c  e3a00001          MOV      r0,#1
;;;213    }
000190  e8bd8010          POP      {r4,pc}
;;;214    
                          ENDP

                  takePhotoRoutine PROC
;;;215    static BOOL takePhotoRoutine(time_t currentTime)
000194  e92d4010          PUSH     {r4,lr}
;;;216    {
000198  e1a04000          MOV      r4,r0
;;;217        #warning just test
;;;218        PhotoAgentStartTakePhoto(0);
00019c  e3a00000          MOV      r0,#0
0001a0  ebfffffe          BL       PhotoAgentStartTakePhoto
;;;219        return TRUE;
0001a4  e3a00001          MOV      r0,#1
;;;220    }
0001a8  e8bd8010          POP      {r4,pc}
;;;221    
                          ENDP

                  GetMeterData PROC
;;;528    
;;;529    MeterData* GetMeterData(void)
0001ac  e59f0084          LDR      r0,|L1.568|
;;;530    {
;;;531        return &meterData;
;;;532    }
0001b0  e12fff1e          BX       lr
;;;533    BOOL UpdateMeterDepositTime(time_t time)
                          ENDP

                  MeterGetCurrentDCFFileName PROC
;;;780    static char currentDCFFileName[_MAX_LFN];
;;;781    char*  MeterGetCurrentDCFFileName(RTC_TIME_DATA_T* pt)
0001b4  e92d4070          PUSH     {r4-r6,lr}
;;;782    {    
0001b8  e24dd018          SUB      sp,sp,#0x18
0001bc  e1a04000          MOV      r4,r0
;;;783        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, pt))
0001c0  e1a01004          MOV      r1,r4
0001c4  e3a00000          MOV      r0,#0
0001c8  ebfffffe          BL       RTC_Read
0001cc  e3500000          CMP      r0,#0
0001d0  1a000011          BNE      |L1.540|
;;;784        {
;;;785            #if(BUILD_RELEASE_VERSION)
;;;786            sprintf(currentDCFFileName, "%08d_%04d%02d%02d%02d.%s", GetMeterData()->epmid, pt->u32Year, pt->u32cMonth, pt->u32cDay, pt->u32cHour, DCF_FILE_EXTENSION); 
;;;787            #else
;;;788            sprintf(currentDCFFileName, "%08d_%04d%02d%02d%02d%02d.%s", GetMeterData()->epmid, pt->u32Year, pt->u32cMonth, pt->u32cDay, pt->u32cHour, (pt->u32cMinute)/20, DCF_FILE_EXTENSION);  
0001d4  e3a01014          MOV      r1,#0x14
0001d8  e5940008          LDR      r0,[r4,#8]
0001dc  ebfffffe          BL       __aeabi_uidivmod
0001e0  e1a05000          MOV      r5,r0
0001e4  ebfffffe          BL       GetMeterData
0001e8  e28f204c          ADR      r2,|L1.572|
0001ec  e5906004          LDR      r6,[r0,#4]
0001f0  e5940014          LDR      r0,[r4,#0x14]
0001f4  e594100c          LDR      r1,[r4,#0xc]
0001f8  e98d0023          STMIB    sp,{r0,r1,r5}
0001fc  e58d2010          STR      r2,[sp,#0x10]
000200  e5940018          LDR      r0,[r4,#0x18]
000204  e58d0000          STR      r0,[sp,#0]
000208  e1a02006          MOV      r2,r6
00020c  e28f102c          ADR      r1,|L1.576|
000210  e59f0048          LDR      r0,|L1.608|
000214  e594301c          LDR      r3,[r4,#0x1c]
000218  ebfffffe          BL       __2sprintf
                  |L1.540|
;;;789            #endif
;;;790             
;;;791             
;;;792        }  
;;;793        return currentDCFFileName;
00021c  e59f003c          LDR      r0,|L1.608|
000220  e28dd018          ADD      sp,sp,#0x18
;;;794    }
000224  e8bd8070          POP      {r4-r6,pc}
                  |L1.552|
                          DCD      meterDataIgnoreRun
                  |L1.556|
00022c  5b6d5d00          DCB      "[m]",0
                  |L1.560|
                          DCD      meterDataPowerStatus
                  |L1.564|
                          DCD      xMeterDataActionSemaphore
                  |L1.568|
                          DCD      meterData
                  |L1.572|
00023c  64636600          DCB      "dcf",0
                  |L1.576|
000240  25303864          DCB      "%08d_%04d%02d%02d%02d%02d.%s",0
000244  5f253034
000248  64253032
00024c  64253032
000250  64253032
000254  64253032
000258  642e2573
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
                          DCD      currentDCFFileName
                          ENDP

                  takeTransactionRoutine PROC
;;;223    
;;;224    static BOOL takeTransactionRoutine(time_t currentTime)
000264  e92d47f0          PUSH     {r4-r10,lr}
;;;225    {
000268  e24ddf5e          SUB      sp,sp,#0x178
00026c  e1a04000          MOV      r4,r0
;;;226        #warning just test
;;;227        RTC_TIME_DATA_T pt;
;;;228        cJSON *extend_json;
;;;229        char* outUnformatted;
;;;230        time_t currentTimeTmp;
;;;231        DataProcessSendData(currentTime, GetMeterData()->currentSelSpace, GetMeterData()->currentSelTime,GetMeterData()->currentSelCost, currentTime, DATA_TYPE_ID_TRANSACTION, "transaction");
000270  ebfffffe          BL       GetMeterData
000274  e2800c01          ADD      r0,r0,#0x100
000278  e1d070bc          LDRH     r7,[r0,#0xc]
00027c  ebfffffe          BL       GetMeterData
000280  e2800c01          ADD      r0,r0,#0x100
000284  e1d080ba          LDRH     r8,[r0,#0xa]
000288  ebfffffe          BL       GetMeterData
00028c  e5d09108          LDRB     r9,[r0,#0x108]
000290  e28f0e1e          ADR      r0,|L1.1144|
000294  e3a01000          MOV      r1,#0
000298  e1a03007          MOV      r3,r7
00029c  e1a02008          MOV      r2,r8
0002a0  e58d1004          STR      r1,[sp,#4]
0002a4  e1a01009          MOV      r1,r9
0002a8  e58d0008          STR      r0,[sp,#8]
0002ac  e58d4000          STR      r4,[sp,#0]
0002b0  e1a00004          MOV      r0,r4
0002b4  ebfffffe          BL       DataProcessSendData
;;;232    
;;;233        Time2RTC(currentTime, &pt);    
0002b8  e28d1f52          ADD      r1,sp,#0x148
0002bc  e1a00004          MOV      r0,r4
0002c0  ebfffffe          BL       Time2RTC
;;;234        currentTimeTmp = pt.u32cDay*1000000 + pt.u32cHour*10000 + pt.u32cMinute*100 + pt.u32cSecond;
0002c4  e59d015c          LDR      r0,[sp,#0x15c]
0002c8  e59f11b4          LDR      r1,|L1.1156|
0002cc  e0000091          MUL      r0,r1,r0
0002d0  e59d1154          LDR      r1,[sp,#0x154]
0002d4  e59f21ac          LDR      r2,|L1.1160|
0002d8  e0010192          MUL      r1,r2,r1
0002dc  e0800201          ADD      r0,r0,r1,LSL #4
0002e0  e59d1150          LDR      r1,[sp,#0x150]
0002e4  e0812181          ADD      r2,r1,r1,LSL #3
0002e8  e0821201          ADD      r1,r2,r1,LSL #4
0002ec  e0800101          ADD      r0,r0,r1,LSL #2
0002f0  e59d114c          LDR      r1,[sp,#0x14c]
0002f4  e0806001          ADD      r6,r0,r1
;;;235        
;;;236        extend_json = JsonCmdCreateTransactionStatusData(GetMeterData()->currentSelSpace, GetMeterData()->currentSelTime,GetMeterData()->currentSelCost, currentTimeTmp);
0002f8  ebfffffe          BL       GetMeterData
0002fc  e2800c01          ADD      r0,r0,#0x100
000300  e1d070bc          LDRH     r7,[r0,#0xc]
000304  ebfffffe          BL       GetMeterData
000308  e2800c01          ADD      r0,r0,#0x100
00030c  e1d080ba          LDRH     r8,[r0,#0xa]
000310  ebfffffe          BL       GetMeterData
000314  e5d09108          LDRB     r9,[r0,#0x108]
000318  e1a03006          MOV      r3,r6
00031c  e1a02007          MOV      r2,r7
000320  e1a01008          MOV      r1,r8
000324  e1a00009          MOV      r0,r9
000328  ebfffffe          BL       JsonCmdCreateTransactionStatusData
00032c  e1a05000          MOV      r5,r0
;;;237        if(extend_json != NULL)
000330  e3550000          CMP      r5,#0
000334  0a000035          BEQ      |L1.1040|
;;;238        {
;;;239            RTC_TIME_DATA_T pt;
;;;240            char targetDSFFileName[_MAX_LFN];
;;;241            char* targetDCFFileName = MeterGetCurrentDCFFileName(&pt);
000338  e28d0f46          ADD      r0,sp,#0x118
00033c  ebfffffe          BL       MeterGetCurrentDCFFileName
000340  e1a08000          MOV      r8,r0
;;;242            //sprintf(targetDSFFileName,"%08d_%010d.%s", GetMeterData()->epmid, (int)currentTime, DSF_FILE_EXTENSION); 
;;;243            sprintf(targetDSFFileName,"%08d_%04d%02d%02d%02d%02d.%s", GetMeterData()->epmid, pt.u32Year, pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute, DSF_FILE_EXTENSION); 
000344  ebfffffe          BL       GetMeterData
000348  e28f3f4f          ADR      r3,|L1.1164|
00034c  e5907004          LDR      r7,[r0,#4]
000350  e59d0120          LDR      r0,[sp,#0x120]
000354  e59d2124          LDR      r2,[sp,#0x124]
000358  e59d112c          LDR      r1,[sp,#0x12c]
00035c  e58d000c          STR      r0,[sp,#0xc]
000360  e58d3010          STR      r3,[sp,#0x10]
000364  e98d0006          STMIB    sp,{r1,r2}
000368  e59d0130          LDR      r0,[sp,#0x130]
00036c  e58d0000          STR      r0,[sp,#0]
000370  e1a02007          MOV      r2,r7
000374  e24f1f4f          ADR      r1,|L1.576|
000378  e59d3134          LDR      r3,[sp,#0x134]
00037c  e28d0018          ADD      r0,sp,#0x18
000380  ebfffffe          BL       __2sprintf
;;;244            outUnformatted = cJSON_PrintUnformatted(extend_json); 
000384  e1a00005          MOV      r0,r5
000388  ebfffffe          BL       cJSON_PrintUnformatted
00038c  e1a0a000          MOV      r10,r0
;;;245            cJSON_Delete(extend_json);
000390  e1a00005          MOV      r0,r5
000394  ebfffffe          BL       cJSON_Delete
;;;246            if(FileAgentAddData(DSF_FILE_SAVE_POSITION, DSF_FILE_DIR, targetDSFFileName, (uint8_t*)outUnformatted, strlen(outUnformatted), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, TRUE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
000398  e1a0000a          MOV      r0,r10
00039c  ebfffffe          BL       strlen
0003a0  e1a07000          MOV      r7,r0
0003a4  e3a00001          MOV      r0,#1
0003a8  e3a03000          MOV      r3,#0
0003ac  e58d0008          STR      r0,[sp,#8]
0003b0  e58d3004          STR      r3,[sp,#4]
0003b4  e58d000c          STR      r0,[sp,#0xc]
0003b8  e1a0300a          MOV      r3,r10
0003bc  e58d0010          STR      r0,[sp,#0x10]
0003c0  e58d7000          STR      r7,[sp,#0]
0003c4  e28d2018          ADD      r2,sp,#0x18
0003c8  e28f10c0          ADR      r1,|L1.1168|
0003cc  e3a00000          MOV      r0,#0
0003d0  ebfffffe          BL       FileAgentAddData
;;;247            {
;;;248                #if(ENABLE_MODEM_AGENT_DRIVER)
;;;249                #else
;;;250                FileAgentDelFile(DSF_FILE_SAVE_POSITION, DSF_FILE_DIR, targetDSFFileName);
;;;251                #endif
;;;252                //return TRUE;           
;;;253            }
;;;254            if(FileAgentAddData(DCF_FILE_SAVE_POSITION, DCF_FILE_DIR, targetDCFFileName, (uint8_t*)outUnformatted, strlen(outUnformatted), FILE_AGENT_ADD_DATA_TYPE_APPEND, TRUE, FALSE, FALSE) !=  FILE_AGENT_RETURN_ERROR )
0003d4  e1a0000a          MOV      r0,r10
0003d8  ebfffffe          BL       strlen
0003dc  e1a07000          MOV      r7,r0
0003e0  e3a00000          MOV      r0,#0
0003e4  e3a02001          MOV      r2,#1
0003e8  e58d2004          STR      r2,[sp,#4]
0003ec  e58d000c          STR      r0,[sp,#0xc]
0003f0  e58d2008          STR      r2,[sp,#8]
0003f4  e1a0300a          MOV      r3,r10
0003f8  e1a02008          MOV      r2,r8
0003fc  e28f108c          ADR      r1,|L1.1168|
000400  e58d0010          STR      r0,[sp,#0x10]
000404  e58d7000          STR      r7,[sp,#0]
000408  ebfffffe          BL       FileAgentAddData
;;;255            {
;;;256                #if(ENABLE_MODEM_AGENT_DRIVER)
;;;257                #else
;;;258                FileAgentDelFile(DCF_FILE_SAVE_POSITION, DCF_FILE_DIR, targetDCFFileName);
;;;259                #endif
;;;260                //return TRUE;           
;;;261            }
;;;262        }   
00040c  e1a00000          MOV      r0,r0
                  |L1.1040|
;;;263        PhotoAgentStartTakePhoto(currentTime); 
000410  e1a00004          MOV      r0,r4
000414  ebfffffe          BL       PhotoAgentStartTakePhoto
;;;264        return TRUE;
000418  e3a00001          MOV      r0,#1
00041c  e28ddf5e          ADD      sp,sp,#0x178
;;;265    }
000420  e8bd87f0          POP      {r4-r10,pc}
;;;266    
                          ENDP

                  modemAgentTransmitRoutine PROC
;;;267    static BOOL modemAgentTransmitRoutine(time_t currentTime)
000424  e92d4010          PUSH     {r4,lr}
;;;268    {
000428  e1a04000          MOV      r4,r0
;;;269        DataProcessSendStatusData(currentTime, "Routine");
00042c  e28f1060          ADR      r1,|L1.1172|
000430  e1a00004          MOV      r0,r4
000434  ebfffffe          BL       DataProcessSendStatusData
;;;270        
;;;271        ModemAgentStartSend(DATA_PROCESS_ID_ESF);
000438  e3a00002          MOV      r0,#2
00043c  ebfffffe          BL       ModemAgentStartSend
;;;272        ModemAgentStartSend(DATA_PROCESS_ID_LOG);//Log順便送上去 
000440  e3a00001          MOV      r0,#1
000444  ebfffffe          BL       ModemAgentStartSend
;;;273        ModemAgentStartSend(DATA_PROCESS_ID_PHOTO);  
000448  e3a00003          MOV      r0,#3
00044c  ebfffffe          BL       ModemAgentStartSend
;;;274    
;;;275        ModemAgentStartSend(DATA_PROCESS_ID_DCF);  
000450  e3a00006          MOV      r0,#6
000454  ebfffffe          BL       ModemAgentStartSend
;;;276        ModemAgentStartSend(DATA_PROCESS_ID_DSF);      
000458  e3a00005          MOV      r0,#5
00045c  ebfffffe          BL       ModemAgentStartSend
;;;277    
;;;278        ModemAgentStartSend(DATA_PROCESS_ID_TRE);  
000460  e3a00004          MOV      r0,#4
000464  ebfffffe          BL       ModemAgentStartSend
;;;279        ModemAgentStartSend(DATA_PROCESS_ID_PARA);  
000468  e3a00007          MOV      r0,#7
00046c  ebfffffe          BL       ModemAgentStartSend
;;;280        return TRUE;
000470  e3a00001          MOV      r0,#1
;;;281    }
000474  e8bd8010          POP      {r4,pc}
                  |L1.1144|
000478  7472616e          DCB      "transaction",0
00047c  73616374
000480  696f6e00
                  |L1.1156|
                          DCD      0x000f4240
                  |L1.1160|
                          DCD      0x00000271
                  |L1.1164|
00048c  64736600          DCB      "dsf",0
                  |L1.1168|
000490  313a00            DCB      "1:",0
000493  00                DCB      0
                  |L1.1172|
000494  526f7574          DCB      "Routine",0
000498  696e6500
                          ENDP

                  routineCounterTimer PROC
;;;282    
;;;283    static void routineCounterTimer(void)
00049c  e92d4070          PUSH     {r4-r6,lr}
;;;284    {
;;;285        time_t rawTime = GetCurrentUTCTime();
0004a0  ebfffffe          BL       GetCurrentUTCTime
0004a4  e1a05000          MOV      r5,r0
;;;286        if(rawTime != 0)
0004a8  e3550000          CMP      r5,#0
0004ac  0a00004c          BEQ      |L1.1508|
;;;287        {
;;;288            int i;
;;;289            BOOL runFlag;
;;;290            for (i = 0; ; i++)
0004b0  e3a04000          MOV      r4,#0
0004b4  e1a00000          MOV      r0,r0
                  |L1.1208|
;;;291            {
;;;292                if(routineItem[i].routineName == NULL)
0004b8  e0840104          ADD      r0,r4,r4,LSL #2
0004bc  e59f14fc          LDR      r1,|L1.2496|
0004c0  e7910100          LDR      r0,[r1,r0,LSL #2]
0004c4  e3500000          CMP      r0,#0
0004c8  1a000000          BNE      |L1.1232|
;;;293                    break;
0004cc  ea000042          B        |L1.1500|
                  |L1.1232|
;;;294                runFlag = FALSE;
0004d0  e3a06000          MOV      r6,#0
;;;295                if(routineItem[i].conditionFunc != 0)
0004d4  e0840104          ADD      r0,r4,r4,LSL #2
0004d8  e59f14e0          LDR      r1,|L1.2496|
0004dc  e0810100          ADD      r0,r1,r0,LSL #2
0004e0  e5900008          LDR      r0,[r0,#8]
0004e4  e3500000          CMP      r0,#0
0004e8  0a000009          BEQ      |L1.1300|
;;;296                {
;;;297                    if(routineItem[i].conditionFunc(rawTime))
0004ec  e0840104          ADD      r0,r4,r4,LSL #2
0004f0  e2812000          ADD      r2,r1,#0
0004f4  e0820100          ADD      r0,r2,r0,LSL #2
0004f8  e5901008          LDR      r1,[r0,#8]
0004fc  e1a00005          MOV      r0,r5
000500  e12fff31          BLX      r1
000504  e3500000          CMP      r0,#0
000508  0a000002          BEQ      |L1.1304|
;;;298                    {
;;;299                        runFlag = TRUE;
00050c  e3a06001          MOV      r6,#1
000510  ea000000          B        |L1.1304|
                  |L1.1300|
;;;300                    }
;;;301                }
;;;302                else
;;;303                {
;;;304                    runFlag = TRUE;
000514  e3a06001          MOV      r6,#1
                  |L1.1304|
;;;305                }
;;;306                if(runFlag)
000518  e3560000          CMP      r6,#0
00051c  0a00002c          BEQ      |L1.1492|
;;;307                {
;;;308                    if(((rawTime - routineItem[i].lastProcessTime) > routineItem[i].processTimeInterval) || (rawTime < routineItem[i].lastProcessTime))
000520  e0840104          ADD      r0,r4,r4,LSL #2
000524  e59f1494          LDR      r1,|L1.2496|
000528  e0810100          ADD      r0,r1,r0,LSL #2
00052c  e5900010          LDR      r0,[r0,#0x10]
000530  e0450000          SUB      r0,r5,r0
000534  e0841104          ADD      r1,r4,r4,LSL #2
000538  e59f2480          LDR      r2,|L1.2496|
00053c  e0821101          ADD      r1,r2,r1,LSL #2
000540  e591100c          LDR      r1,[r1,#0xc]
000544  e1500001          CMP      r0,r1
000548  8a000005          BHI      |L1.1380|
00054c  e0840104          ADD      r0,r4,r4,LSL #2
000550  e2821000          ADD      r1,r2,#0
000554  e0810100          ADD      r0,r1,r0,LSL #2
000558  e5900010          LDR      r0,[r0,#0x10]
00055c  e1500005          CMP      r0,r5
000560  9a00001b          BLS      |L1.1492|
                  |L1.1380|
;;;309                    {
;;;310                        sysprintf(" --- INFO ----> routineCounterTimer(%d) <%s> (lastProcessTime = %d) start ...\r\n", rawTime, routineItem[i].routineName, routineItem[i].lastProcessTime); 
000564  e0840104          ADD      r0,r4,r4,LSL #2
000568  e59f1450          LDR      r1,|L1.2496|
00056c  e0810100          ADD      r0,r1,r0,LSL #2
000570  e5903010          LDR      r3,[r0,#0x10]
000574  e0840104          ADD      r0,r4,r4,LSL #2
000578  e7912100          LDR      r2,[r1,r0,LSL #2]
00057c  e1a01005          MOV      r1,r5
000580  e59f043c          LDR      r0,|L1.2500|
000584  ebfffffe          BL       sysprintf
;;;311                        routineItem[i].routineFunc(rawTime);  
000588  e0840104          ADD      r0,r4,r4,LSL #2
00058c  e59f242c          LDR      r2,|L1.2496|
000590  e0820100          ADD      r0,r2,r0,LSL #2
000594  e5901004          LDR      r1,[r0,#4]
000598  e1a00005          MOV      r0,r5
00059c  e12fff31          BLX      r1
;;;312                        sysprintf(" --- INFO ----> routineCounterTimer(%d) <%s> (lastProcessTime = %d) end ...\r\n", rawTime, routineItem[i].routineName, routineItem[i].lastProcessTime); 
0005a0  e0840104          ADD      r0,r4,r4,LSL #2
0005a4  e59f1414          LDR      r1,|L1.2496|
0005a8  e0810100          ADD      r0,r1,r0,LSL #2
0005ac  e5903010          LDR      r3,[r0,#0x10]
0005b0  e0840104          ADD      r0,r4,r4,LSL #2
0005b4  e7912100          LDR      r2,[r1,r0,LSL #2]
0005b8  e1a01005          MOV      r1,r5
0005bc  e59f0404          LDR      r0,|L1.2504|
0005c0  ebfffffe          BL       sysprintf
;;;313                        routineItem[i].lastProcessTime = rawTime;
0005c4  e0840104          ADD      r0,r4,r4,LSL #2
0005c8  e59f13f0          LDR      r1,|L1.2496|
0005cc  e0810100          ADD      r0,r1,r0,LSL #2
0005d0  e5805010          STR      r5,[r0,#0x10]
                  |L1.1492|
0005d4  e2844001          ADD      r4,r4,#1              ;290
0005d8  eaffffb6          B        |L1.1208|
                  |L1.1500|
0005dc  e1a00000          MOV      r0,r0                 ;293
;;;314                    }
;;;315                }
;;;316            }
;;;317        }
0005e0  e1a00000          MOV      r0,r0
                  |L1.1508|
;;;318    }
0005e4  e8bd8070          POP      {r4-r6,pc}
;;;319    
                          ENDP

                  AutoUpdateMeterData PROC
;;;564    
;;;565    void AutoUpdateMeterData(void)
0005e8  e92d4ff0          PUSH     {r4-r11,lr}
;;;566    {
0005ec  e24ddf4d          SUB      sp,sp,#0x134
;;;567        int i;
;;;568        #if(0)
;;;569        sysprintf(" [INFO DATA] <AutoUpdateMeterData>  Start!!!.\n");    
;;;570        TickType_t tickLocalStart = xTaskGetTickCount();
;;;571        #endif
;;;572        BOOL beepFlag = FALSE;
0005f0  e3a08000          MOV      r8,#0
;;;573        BOOL takePictFlag = FALSE;
0005f4  e3a09000          MOV      r9,#0
;;;574        BOOL refreshFlag = FALSE;
0005f8  e3a0a000          MOV      r10,#0
;;;575        RTC_TIME_DATA_T pt;
;;;576    
;;;577        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
0005fc  e28d1f41          ADD      r1,sp,#0x104
000600  e3a00000          MOV      r0,#0
000604  ebfffffe          BL       RTC_Read
000608  e3500000          CMP      r0,#0
00060c  1a000077          BNE      |L1.2032|
;;;578        {
;;;579            time_t rawTime = RTC2Time(&pt);
000610  e28d0f41          ADD      r0,sp,#0x104
000614  ebfffffe          BL       RTC2Time
000618  e1a05000          MOV      r5,r0
;;;580            time_t timeTmp;
;;;581            for(i = 0; i<GetMeterPara()->spaceEnableNum; i++)
00061c  e3a04000          MOV      r4,#0
000620  ea000062          B        |L1.1968|
                  |L1.1572|
;;;582            {
;;;583                uint8_t previousStatus = meterData.spaceSepositStatus[i];
000624  e51f03f4          LDR      r0,|L1.568|
000628  e3e01e11          MVN      r1,#0x110
00062c  e0400001          SUB      r0,r0,r1
000630  e7d07004          LDRB     r7,[r0,r4]
;;;584                if(GetMeterStorageData()->depositEndTime[i] > rawTime)
000634  ebfffffe          BL       GetMeterStorageData
000638  e280001b          ADD      r0,r0,#0x1b
00063c  e080b104          ADD      r11,r0,r4,LSL #2
000640  e1a0000b          MOV      r0,r11
000644  ebfffffe          BL       __aeabi_uread4
000648  e1500005          CMP      r0,r5
00064c  9a000013          BLS      |L1.1696|
;;;585                {
;;;586                    timeTmp = GetMeterStorageData()->depositEndTime[i] - rawTime;
000650  ebfffffe          BL       GetMeterStorageData
000654  e280001b          ADD      r0,r0,#0x1b
000658  e080b104          ADD      r11,r0,r4,LSL #2
00065c  e1a0000b          MOV      r0,r11
000660  ebfffffe          BL       __aeabi_uread4
000664  e0406005          SUB      r6,r0,r5
;;;587                    SetDepositTimeBmpIdInfo(i, timeTmp + 59); //為了顯示 不要少一分鐘
000668  e20400ff          AND      r0,r4,#0xff
00066c  e286103b          ADD      r1,r6,#0x3b
000670  ebfffffe          BL       SetDepositTimeBmpIdInfo
;;;588                    meterData.spaceSepositStatus[i] = SPACE_DEPOSIT_STATUS_OK;
000674  e3a00001          MOV      r0,#1
000678  e51f1448          LDR      r1,|L1.568|
00067c  e3e02e11          MVN      r2,#0x110
000680  e0411002          SUB      r1,r1,r2
000684  e7c10004          STRB     r0,[r1,r4]
;;;589                    bayColorLocal[i] = LIGHT_COLOR_GREEN;
000688  e59f133c          LDR      r1,|L1.2508|
00068c  e7c10004          STRB     r0,[r1,r4]
;;;590                    if(timeTmp < 3)
000690  e3560003          CMP      r6,#3
000694  2a00003b          BCS      |L1.1928|
;;;591                    {
;;;592                        beepFlag = TRUE;
000698  e3a08001          MOV      r8,#1
00069c  ea000039          B        |L1.1928|
                  |L1.1696|
;;;593                    }
;;;594                }
;;;595                else
;;;596                {
;;;597                    GetMeterStorageData()->depositStartTime[i] = 0;
0006a0  ebfffffe          BL       GetMeterStorageData
0006a4  e2800003          ADD      r0,r0,#3
0006a8  e080b104          ADD      r11,r0,r4,LSL #2
0006ac  e1a0100b          MOV      r1,r11
0006b0  e3a00000          MOV      r0,#0
0006b4  ebfffffe          BL       __aeabi_uwrite4
;;;598                    GetMeterStorageData()->depositEndTime[i] = 0;
0006b8  ebfffffe          BL       GetMeterStorageData
0006bc  e280001b          ADD      r0,r0,#0x1b
0006c0  e080b104          ADD      r11,r0,r4,LSL #2
0006c4  e1a0100b          MOV      r1,r11
0006c8  e3a00000          MOV      r0,#0
0006cc  ebfffffe          BL       __aeabi_uwrite4
;;;599                    SetDepositTimeBmpIdInfo(i, 0); //為了顯示 不要少一分鐘
0006d0  e20400ff          AND      r0,r4,#0xff
0006d4  e3a01000          MOV      r1,#0
0006d8  ebfffffe          BL       SetDepositTimeBmpIdInfo
;;;600                    
;;;601                    if(getSpaceStatus(i))
0006dc  e20400ff          AND      r0,r4,#0xff
0006e0  ebfffffe          BL       getSpaceStatus
0006e4  e3500000          CMP      r0,#0
0006e8  0a00001e          BEQ      |L1.1896|
;;;602                    {
;;;603                        
;;;604                        meterData.spaceSepositStatus[i] = SPACE_DEPOSIT_STATUS_EXCEED_TIME;
0006ec  e3a00002          MOV      r0,#2
0006f0  e51f14c0          LDR      r1,|L1.568|
0006f4  e3e02e11          MVN      r2,#0x110
0006f8  e0411002          SUB      r1,r1,r2
0006fc  e7c10004          STRB     r0,[r1,r4]
;;;605                        bayColorLocal[i] = LIGHT_COLOR_RED;
000700  e59f12c4          LDR      r1,|L1.2508|
000704  e7c10004          STRB     r0,[r1,r4]
;;;606                        
;;;607                        if(previousStatus != SPACE_DEPOSIT_STATUS_EXCEED_TIME)//just send one time
000708  e3570002          CMP      r7,#2
00070c  0a00001d          BEQ      |L1.1928|
;;;608                        {
;;;609                            //CmdSendExceedTime(i + 1, rawTime, GetMeterStorageData()->depositEndTime[i]); //spaceId 需要+1
;;;610                            DataProcessSendData(rawTime, i + 1, 0, 0, 0, DATA_TYPE_ID_EXPIRED, "expired");
000710  e28f0fae          ADR      r0,|L1.2512|
000714  e3a01001          MOV      r1,#1
000718  e3a02000          MOV      r2,#0
00071c  e58d2000          STR      r2,[sp,#0]
000720  e1a03002          MOV      r3,r2
000724  e58d1004          STR      r1,[sp,#4]
000728  e2841001          ADD      r1,r4,#1
00072c  e58d0008          STR      r0,[sp,#8]
000730  e1a00005          MOV      r0,r5
000734  ebfffffe          BL       DataProcessSendData
;;;611                            ModemAgentStartSend(DATA_PROCESS_ID_ESF); 
000738  e3a00002          MOV      r0,#2
00073c  ebfffffe          BL       ModemAgentStartSend
;;;612                            takePictFlag = TRUE;
000740  e3a09001          MOV      r9,#1
;;;613                            {
;;;614                            char str[256];
;;;615                            sprintf(str, "  - expired - %d: bayid= %d...\r\n", (int)rawTime, i + 1);
000744  e2843001          ADD      r3,r4,#1
000748  e1a02005          MOV      r2,r5
00074c  e28f1fa1          ADR      r1,|L1.2520|
000750  e28d0004          ADD      r0,sp,#4
000754  ebfffffe          BL       __2sprintf
;;;616                            LoglibPrintf(LOG_TYPE_INFO, str);
000758  e28d1004          ADD      r1,sp,#4
00075c  e3a00000          MOV      r0,#0
000760  ebfffffe          BL       LoglibPrintf
;;;617                            }
000764  ea000007          B        |L1.1928|
                  |L1.1896|
;;;618                        }
;;;619                    }
;;;620                    else
;;;621                    {
;;;622                        meterData.spaceSepositStatus[i] = SPACE_DEPOSIT_STATUS_STANBY;
000768  e3a00003          MOV      r0,#3
00076c  e51f153c          LDR      r1,|L1.568|
000770  e3e02e11          MVN      r2,#0x110
000774  e0411002          SUB      r1,r1,r2
000778  e7c10004          STRB     r0,[r1,r4]
;;;623                        bayColorLocal[i] = LIGHT_COLOR_RED;
00077c  e3a00002          MOV      r0,#2
000780  e59f1244          LDR      r1,|L1.2508|
000784  e7c10004          STRB     r0,[r1,r4]
                  |L1.1928|
;;;624                    }
;;;625                }  
;;;626                if(previousStatus != SPACE_DEPOSIT_STATUS_INIT)
000788  e3570000          CMP      r7,#0
00078c  0a000006          BEQ      |L1.1964|
;;;627                {
;;;628                    if(previousStatus != meterData.spaceSepositStatus[i])
000790  e51f0560          LDR      r0,|L1.568|
000794  e3e01e11          MVN      r1,#0x110
000798  e0400001          SUB      r0,r0,r1
00079c  e7d00004          LDRB     r0,[r0,r4]
0007a0  e1500007          CMP      r0,r7
0007a4  0a000000          BEQ      |L1.1964|
;;;629                    {
;;;630                        refreshFlag = TRUE;                    
0007a8  e3a0a001          MOV      r10,#1
                  |L1.1964|
0007ac  e2844001          ADD      r4,r4,#1              ;581
                  |L1.1968|
0007b0  ebfffffe          BL       GetMeterPara
0007b4  e2807068          ADD      r7,r0,#0x68           ;581
0007b8  e1a00007          MOV      r0,r7                 ;581
0007bc  ebfffffe          BL       __aeabi_uread4
0007c0  e1500004          CMP      r0,r4                 ;581
0007c4  caffff96          BGT      |L1.1572|
;;;631                    }
;;;632                }
;;;633                //sysprintf(" [INFO DATA] <spaceSepositStatus>  [%d] : %d.\n", i, meterData.spaceSepositStatus[i]);  
;;;634            }
;;;635            
;;;636            if(refreshFlag)
0007c8  e35a0000          CMP      r10,#0
0007cc  0a000000          BEQ      |L1.2004|
;;;637            {
;;;638                GuiManagerUpdateScreen();
0007d0  ebfffffe          BL       GuiManagerUpdateScreen
                  |L1.2004|
;;;639                //CmdSendVersion(0xffff);
;;;640            }
;;;641            
;;;642            if(takePictFlag)
0007d4  e3590000          CMP      r9,#0
0007d8  0a000003          BEQ      |L1.2028|
;;;643            {
;;;644                PhotoAgentStartTakePhoto(rawTime);
0007dc  e1a00005          MOV      r0,r5
0007e0  ebfffffe          BL       PhotoAgentStartTakePhoto
;;;645                ModemAgentStartSend(DATA_PROCESS_ID_PHOTO);
0007e4  e3a00003          MOV      r0,#3
0007e8  ebfffffe          BL       ModemAgentStartSend
                  |L1.2028|
;;;646            }
;;;647        }
0007ec  e1a00000          MOV      r0,r0
                  |L1.2032|
;;;648        
;;;649        if(beepFlag)
0007f0  e3580000          CMP      r8,#0
0007f4  0a000004          BEQ      |L1.2060|
;;;650        {
;;;651            BuzzerPlay(30, 0, 1, TRUE);
0007f8  e3a03001          MOV      r3,#1
0007fc  e1a02003          MOV      r2,r3
000800  e3a01000          MOV      r1,#0
000804  e3a0001e          MOV      r0,#0x1e
000808  ebfffffe          BL       BuzzerPlay
                  |L1.2060|
;;;652        }
;;;653        
;;;654        LedSetColor(bayColorLocal, LIGHT_COLOR_IGNORE, TRUE);  
00080c  e3a02001          MOV      r2,#1
000810  e3a010ff          MOV      r1,#0xff
000814  e59f01b0          LDR      r0,|L1.2508|
000818  ebfffffe          BL       LedSetColor
;;;655        //LedSetColor(bayColorLocal, LIGHT_COLOR_YELLOW, TRUE); 
;;;656       
;;;657        
;;;658        #if(0)
;;;659        sysprintf(" [INFO DATA] <AutoUpdateMeterData>  [%d].\n", xTaskGetTickCount() - tickLocalStart);    
;;;660        #endif
;;;661    }
00081c  e28ddf4d          ADD      sp,sp,#0x134
000820  e8bd8ff0          POP      {r4-r11,pc}
;;;662    
                          ENDP

                  vMeterDataProcessTask PROC
;;;322    
;;;323    static void vMeterDataProcessTask( void *pvParameters )
000824  e3a000c8          MOV      r0,#0xc8
;;;324    {
;;;325        vTaskDelay(2000/portTICK_RATE_MS); 
000828  ebfffffe          BL       vTaskDelay
;;;326        sysprintf("vMeterDataProcessTask Going...\r\n");     
00082c  e28f0f72          ADR      r0,|L1.2556|
000830  ebfffffe          BL       sysprintf
;;;327        
;;;328        for(;;)
000834  e1a00000          MOV      r0,r0
                  |L1.2104|
;;;329        {         
;;;330            meterDataPowerStatus = TRUE;
000838  e3a00001          MOV      r0,#1
00083c  e51f1614          LDR      r1,|L1.560|
000840  e5c10000          STRB     r0,[r1,#0]  ; meterDataPowerStatus
;;;331            BaseType_t reval = xSemaphoreTake(xMeterDataActionSemaphore, 1000/portTICK_RATE_MS); 
000844  e3a03000          MOV      r3,#0
000848  e3a02064          MOV      r2,#0x64
00084c  e1a01003          MOV      r1,r3
000850  e51f0624          LDR      r0,|L1.564|
000854  e5900000          LDR      r0,[r0,#0]  ; xMeterDataActionSemaphore
000858  ebfffffe          BL       xQueueGenericReceive
00085c  e1a05000          MOV      r5,r0
;;;332            if(meterDataIgnoreRun)
000860  e51f0640          LDR      r0,|L1.552|
000864  e5d00000          LDRB     r0,[r0,#0]  ; meterDataIgnoreRun
000868  e3500000          CMP      r0,#0
00086c  0a000002          BEQ      |L1.2172|
;;;333            {
;;;334                sysprintf("vMeterDataProcessTask ignore run...\r\n");
000870  e28f0f6a          ADR      r0,|L1.2592|
000874  ebfffffe          BL       sysprintf
;;;335                continue;
000878  eaffffee          B        |L1.2104|
                  |L1.2172|
;;;336            }
;;;337            meterDataPowerStatus = FALSE;
00087c  e3a00000          MOV      r0,#0
000880  e51f1658          LDR      r1,|L1.560|
000884  e5c10000          STRB     r0,[r1,#0]  ; meterDataPowerStatus
;;;338    
;;;339            routineCounterTimer();
000888  ebfffffe          BL       routineCounterTimer
;;;340    
;;;341            AutoUpdateMeterData(); 
00088c  ebfffffe          BL       AutoUpdateMeterData
;;;342            
;;;343            //sysprintf("    >> == (Tariff:[%s] (type = %d), Para:[%s], FormatCounter = %08d, FlashError = %08d) == <<\r\n", 
;;;344            //            TariffGetFileName(), TariffGetCurrentTariffType()->type, GetMeterPara()->name, FileAgentGetFatFsAutoFormatCounter(), FlashDrvExGetErrorTimes());  
;;;345    #if(ENABLE_MODEM_AGENT_DRIVER)
;;;346            if((strlen(TariffGetFileName()) == 0) || (strlen(GetMeterPara()->name) == 0))
000890  ebfffffe          BL       TariffGetFileName
000894  e1a04000          MOV      r4,r0
000898  ebfffffe          BL       strlen
00089c  e3500000          CMP      r0,#0
0008a0  0a000005          BEQ      |L1.2236|
0008a4  ebfffffe          BL       GetMeterPara
0008a8  e2804004          ADD      r4,r0,#4
0008ac  e1a00004          MOV      r0,r4
0008b0  ebfffffe          BL       strlen
0008b4  e3500000          CMP      r0,#0
0008b8  1a000010          BNE      |L1.2304|
                  |L1.2236|
;;;347            {
;;;348                if(GuiManagerShowScreen(GUI_FILE_DOWNLOAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0) == GUI_SHOW_SCREEN_OK)
0008bc  e3a03000          MOV      r3,#0
0008c0  e1a02003          MOV      r2,r3
0008c4  e3a01003          MOV      r1,#3
0008c8  e3a0000b          MOV      r0,#0xb
0008cc  ebfffffe          BL       GuiManagerShowScreen
0008d0  e3500001          CMP      r0,#1
0008d4  1a000038          BNE      |L1.2492|
;;;349                {
;;;350                    DataProcessSendStatusData(0, "FileDownload");
0008d8  e28f1f5a          ADR      r1,|L1.2632|
0008dc  e3a00000          MOV      r0,#0
0008e0  ebfffffe          BL       DataProcessSendStatusData
;;;351            
;;;352                    ModemAgentStartSend(DATA_PROCESS_ID_ESF);
0008e4  e3a00002          MOV      r0,#2
0008e8  ebfffffe          BL       ModemAgentStartSend
;;;353                    ModemAgentStartSend(DATA_PROCESS_ID_TRE);  
0008ec  e3a00004          MOV      r0,#4
0008f0  ebfffffe          BL       ModemAgentStartSend
;;;354                    ModemAgentStartSend(DATA_PROCESS_ID_PARA); 
0008f4  e3a00007          MOV      r0,#7
0008f8  ebfffffe          BL       ModemAgentStartSend
0008fc  ea00002e          B        |L1.2492|
                  |L1.2304|
;;;355                }
;;;356            }
;;;357            else
;;;358    #endif
;;;359            {
;;;360                //sysprintf("vMeterDataProcessTask Going (TariffGetFileName() = %s, type = %d)...\r\n", TariffGetFileName(), TariffGetCurrentTariffType()->type);  
;;;361                switch(TariffGetCurrentTariffType()->type)
000900  ebfffffe          BL       TariffGetCurrentTariffType
000904  e5900000          LDR      r0,[r0,#0]
000908  e3500000          CMP      r0,#0
00090c  0a000004          BEQ      |L1.2340|
000910  e3500001          CMP      r0,#1
000914  0a00000d          BEQ      |L1.2384|
000918  e3500002          CMP      r0,#2
00091c  1a000025          BNE      |L1.2488|
000920  ea000015          B        |L1.2428|
                  |L1.2340|
;;;362                {
;;;363                    case TARIFF_TARIFF_TYPE_FREE:              
000924  e1a00000          MOV      r0,r0
;;;364                        if(GuiManagerCompareCurrentScreenId(GUI_FREE_ID) != TRUE)                    
000928  e3a0000c          MOV      r0,#0xc
00092c  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000930  e3500001          CMP      r0,#1
000934  0a000004          BEQ      |L1.2380|
;;;365                            GuiManagerShowScreen(GUI_FREE_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
000938  e3a03000          MOV      r3,#0
00093c  e1a02003          MOV      r2,r3
000940  e3a01003          MOV      r1,#3
000944  e3a0000c          MOV      r0,#0xc
000948  ebfffffe          BL       GuiManagerShowScreen
                  |L1.2380|
;;;366                        break;
00094c  ea000019          B        |L1.2488|
                  |L1.2384|
;;;367                    case TARIFF_TARIFF_TYPE_OFF:
000950  e1a00000          MOV      r0,r0
;;;368                        if(GuiManagerCompareCurrentScreenId(GUI_OFF_ID) != TRUE)   
000954  e3a0000d          MOV      r0,#0xd
000958  ebfffffe          BL       GuiManagerCompareCurrentScreenId
00095c  e3500001          CMP      r0,#1
000960  0a000004          BEQ      |L1.2424|
;;;369                            GuiManagerShowScreen(GUI_OFF_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
000964  e3a03000          MOV      r3,#0
000968  e1a02003          MOV      r2,r3
00096c  e3a01003          MOV      r1,#3
000970  e3a0000d          MOV      r0,#0xd
000974  ebfffffe          BL       GuiManagerShowScreen
                  |L1.2424|
;;;370                        break;
000978  ea00000e          B        |L1.2488|
                  |L1.2428|
;;;371                    case TARIFF_TARIFF_TYPE_LINEAR:
00097c  e1a00000          MOV      r0,r0
;;;372                        if(GuiManagerCompareCurrentScreenId(GUI_FREE_ID) || GuiManagerCompareCurrentScreenId(GUI_OFF_ID))
000980  e3a0000c          MOV      r0,#0xc
000984  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000988  e3500000          CMP      r0,#0
00098c  1a000003          BNE      |L1.2464|
000990  e3a0000d          MOV      r0,#0xd
000994  ebfffffe          BL       GuiManagerCompareCurrentScreenId
000998  e3500000          CMP      r0,#0
00099c  0a000004          BEQ      |L1.2484|
                  |L1.2464|
;;;373                        {
;;;374                            GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
0009a0  e3a03000          MOV      r3,#0
0009a4  e1a02003          MOV      r2,r3
0009a8  e3a01003          MOV      r1,#3
0009ac  e3a00001          MOV      r0,#1
0009b0  ebfffffe          BL       GuiManagerShowScreen
                  |L1.2484|
;;;375                        }
;;;376                        break;
0009b4  e1a00000          MOV      r0,r0
                  |L1.2488|
0009b8  e1a00000          MOV      r0,r0                 ;366
                  |L1.2492|
0009bc  eaffff9d          B        |L1.2104|
                  |L1.2496|
                          DCD      routineItem
                  |L1.2500|
                          DCD      ||.constdata||
                  |L1.2504|
                          DCD      ||.constdata||+0x50
                  |L1.2508|
                          DCD      bayColorLocal
                  |L1.2512|
0009d0  65787069          DCB      "expired",0
0009d4  72656400
                  |L1.2520|
0009d8  20202d20          DCB      "  - expired - %d: bayid= %d...\r\n",0
0009dc  65787069
0009e0  72656420
0009e4  2d202564
0009e8  3a206261
0009ec  7969643d
0009f0  2025642e
0009f4  2e2e0d0a
0009f8  00      
0009f9  00                DCB      0
0009fa  00                DCB      0
0009fb  00                DCB      0
                  |L1.2556|
0009fc  764d6574          DCB      "vMeterDataProcessTask Going...\r\n",0
000a00  65724461
000a04  74615072
000a08  6f636573
000a0c  73546173
000a10  6b20476f
000a14  696e672e
000a18  2e2e0d0a
000a1c  00      
000a1d  00                DCB      0
000a1e  00                DCB      0
000a1f  00                DCB      0
                  |L1.2592|
000a20  764d6574          DCB      "vMeterDataProcessTask ignore run...\r\n",0
000a24  65724461
000a28  74615072
000a2c  6f636573
000a30  73546173
000a34  6b206967
000a38  6e6f7265
000a3c  2072756e
000a40  2e2e2e0d
000a44  0a00    
000a46  00                DCB      0
000a47  00                DCB      0
                  |L1.2632|
000a48  46696c65          DCB      "FileDownload",0
000a4c  446f776e
000a50  6c6f6164
000a54  00      
000a55  00                DCB      0
000a56  00                DCB      0
000a57  00                DCB      0
                          ENDP

                  getEpmID PROC
;;;385    
;;;386    static BOOL getEpmID(void)
000a58  e92d4010          PUSH     {r4,lr}
;;;387    {
;;;388        sysprintf("   -- getEpmID --\r\n"); 
000a5c  e28f0f79          ADR      r0,|L1.3144|
000a60  ebfffffe          BL       sysprintf
;;;389    #if(EPM_ID_FROM_JSON_FILE)
;;;390        uint8_t* dataTmp;
;;;391        size_t dataTmpLen;
;;;392        BOOL needFree;
;;;393        FileAgentReturn reVal; 
;;;394        
;;;395         //__SHOW_FREE_HEAP_SIZE__
;;;396        
;;;397        reVal = FileAgentGetData(EPM_ID_SAVE_POSITION, EPM_ID_FILE_DIR, EPM_ID_FILE_NAME, &dataTmp, &dataTmpLen, &needFree, FALSE);
;;;398        sysprintf("   -- getEpmID(len = %d) --[%s]\r\n", dataTmpLen, dataTmp); 
;;;399        if(reVal != FILE_AGENT_RETURN_ERROR)
;;;400        {
;;;401            cJSON *root_json = cJSON_Parse((char*)dataTmp);
;;;402            cJSON *tmp_json;
;;;403            if (NULL == root_json)
;;;404            {
;;;405                sysprintf("error((NULL == root_json)):%s\n", cJSON_GetErrorPtr());                        
;;;406                goto jsonExit;
;;;407            }
;;;408            
;;;409            
;;;410            tmp_json = cJSON_GetObjectItem(root_json, "epmid");
;;;411            if (tmp_json != NULL)
;;;412            {
;;;413                //sysprintf(" >> 0x%04x, 0x%04x\n", (tmp_json->valueint), (uint16_t)(tmp_json->valueint));
;;;414                meterData.epmid = tmp_json->valueint;
;;;415                sysprintf(" >> meterPara.epmid:%d\n", meterData.epmid);
;;;416            }
;;;417            else
;;;418            {
;;;419                cJSON_Delete(root_json);
;;;420                goto jsonExit;
;;;421            }
;;;422            
;;;423            cJSON_Delete(root_json);
;;;424            if(needFree)
;;;425            {
;;;426                vPortFree(dataTmp);
;;;427            }
;;;428            
;;;429             //__SHOW_FREE_HEAP_SIZE__ 
;;;430            return TRUE;
;;;431        }
;;;432        
;;;433    
;;;434    jsonExit:    
;;;435        if(needFree)
;;;436        {
;;;437            vPortFree(dataTmp);
;;;438        }
;;;439        //__SHOW_FREE_HEAP_SIZE__ 
;;;440        sysprintf("   -- getEpmID ERROR--\r\n");
;;;441        return FALSE;
;;;442    
;;;443    #else
;;;444        //GPJ 0 ~ 3
;;;445        outpw(REG_SYS_GPJ_MFPL,(inpw(REG_SYS_GPJ_MFPL) & ~(0xFFFF<<0)) | (0x0000u<<0));
000a64  e3a0020b          MOV      r0,#0xb0000000
000a68  e59000b8          LDR      r0,[r0,#0xb8]
000a6c  e1a00820          LSR      r0,r0,#16
000a70  e1a00800          LSL      r0,r0,#16
000a74  e3a0120b          MOV      r1,#0xb0000000
000a78  e58100b8          STR      r0,[r1,#0xb8]
;;;446        UINT32 portValue = GPIO_ReadPort(GPIOJ);
000a7c  e3a00d09          MOV      r0,#0x240
000a80  ebfffffe          BL       GPIO_ReadPort
000a84  e1a04000          MOV      r4,r0
;;;447        meterData.epmid = portValue&0xF;
000a88  e204000f          AND      r0,r4,#0xf
000a8c  e51f185c          LDR      r1,|L1.568|
000a90  e5810004          STR      r0,[r1,#4]  ; meterData
;;;448        sysprintf(" >> meterPara.epmid:%d (from DIP Setting)\n", meterData.epmid);
000a94  e2810000          ADD      r0,r1,#0
000a98  e5901004          LDR      r1,[r0,#4]  ; meterData
000a9c  e28f0f6e          ADR      r0,|L1.3164|
000aa0  ebfffffe          BL       sysprintf
;;;449        return TRUE;
000aa4  e3a00001          MOV      r0,#1
;;;450    #endif
;;;451    }
000aa8  e8bd8010          POP      {r4,pc}
;;;452    
                          ENDP

                  swInit PROC
;;;454    
;;;455    static BOOL swInit(void)
000aac  e92d407c          PUSH     {r2-r6,lr}
;;;456    {   
;;;457        int i;
;;;458        PowerRegCallback(&meterDataPowerCallabck);
000ab0  e59f01d0          LDR      r0,|L1.3208|
000ab4  ebfffffe          BL       PowerRegCallback
;;;459        
;;;460        meterData.currentSelSpace = 0;
000ab8  e3a00000          MOV      r0,#0
000abc  e51f188c          LDR      r1,|L1.568|
000ac0  e5c10108          STRB     r0,[r1,#0x108]  ; meterData
;;;461        meterData.currentSelTime = 0;
000ac4  e2811c01          ADD      r1,r1,#0x100
000ac8  e1c100ba          STRH     r0,[r1,#0xa]
;;;462        meterData.currentSelCost = 0;
000acc  e1c100bc          STRH     r0,[r1,#0xc]
;;;463        meterData.runningStatus = RUNNING_STATUS_INIT;
000ad0  e2411c01          SUB      r1,r1,#0x100
000ad4  e5c10110          STRB     r0,[r1,#0x110]  ; meterData
;;;464        //meterData.meterErrorCode = 0;///不能初始化 需靠原來的 0
;;;465        for(i = 0; i<EPM_TOTAL_METER_SPACE_NUM; i++)
000ad8  e3a04000          MOV      r4,#0
000adc  ea000005          B        |L1.2808|
                  |L1.2784|
;;;466        {
;;;467            meterData.spaceSepositStatus[i] = SPACE_DEPOSIT_STATUS_INIT; 
000ae0  e3a00000          MOV      r0,#0
000ae4  e51f18b4          LDR      r1,|L1.568|
000ae8  e3e02e11          MVN      r2,#0x110
000aec  e0411002          SUB      r1,r1,r2
000af0  e7c10004          STRB     r0,[r1,r4]
000af4  e2844001          ADD      r4,r4,#1              ;465
                  |L1.2808|
000af8  e3540006          CMP      r4,#6                 ;465
000afc  bafffff7          BLT      |L1.2784|
;;;468        }
;;;469        
;;;470        
;;;471        if(getEpmID() == FALSE)
000b00  ebfffffe          BL       getEpmID
000b04  e3500000          CMP      r0,#0
000b08  1a000001          BNE      |L1.2836|
;;;472        {
;;;473            return FALSE;
000b0c  e3a00000          MOV      r0,#0
                  |L1.2832|
;;;474        }
;;;475        if(TariffLibInit() == FALSE)
;;;476        {
;;;477            GetMeterData()->runningStatus = RUNNING_STATUS_FILE_DOWNLOAD;
;;;478            sysprintf("MeterDataInit (swInit) set GetMeterData()->runningStatus = %d!!\n", GetMeterData()->runningStatus);
;;;479            //return FALSE;
;;;480        }
;;;481        
;;;482        sprintf(meterData.buildStr, "%d.%d.%d(%d)", MAJOR_VERSION, MINOR_VERSION, REVISION_VERSION, meterData.buildVer);
;;;483        sprintf(meterData.epmIdStr, "%08d", meterData.epmid);
;;;484        strcpy(meterData.tariffFileFTPPath, DEFAULT_TARIFF_FILE_FTP_PATH);
;;;485        strcpy(meterData.paraFileFTPPath, DEFAULT_PARA_FILE_FTP_PATH);
;;;486        strcpy(meterData.dcfFileFTPPath, DEFAULT_DCF_FILE_FTP_PATH);
;;;487        strcpy(meterData.dsfFileFTPPath, DEFAULT_DSF_FILE_FTP_PATH);
;;;488        strcpy(meterData.jpgFileFTPPath, DEFAULT_JPG_FILE_FTP_PATH);
;;;489        strcpy(meterData.logFileFTPPath, DEFAULT_LOG_FILE_FTP_PATH);
;;;490    
;;;491        
;;;492        calculateDeviceIDPositionInfo(meterData.epmid);
;;;493        
;;;494        AutoUpdateMeterData(); 
;;;495        
;;;496        xMeterDataActionSemaphore = xSemaphoreCreateBinary();       
;;;497        xTaskCreate( vMeterDataProcessTask, "vMeterDataProcessTask", 1024*10, NULL, METER_DATA_PROCESS_THREAD_PROI, NULL );
;;;498        
;;;499        return TRUE;
;;;500    }
000b10  e8bd807c          POP      {r2-r6,pc}
                  |L1.2836|
000b14  ebfffffe          BL       TariffLibInit
000b18  e3500000          CMP      r0,#0                 ;475
000b1c  1a000007          BNE      |L1.2880|
000b20  ebfffffe          BL       GetMeterData
000b24  e3a01001          MOV      r1,#1                 ;477
000b28  e5c01110          STRB     r1,[r0,#0x110]        ;477
000b2c  ebfffffe          BL       GetMeterData
000b30  e5d05110          LDRB     r5,[r0,#0x110]        ;478
000b34  e1a01005          MOV      r1,r5                 ;478
000b38  e59f014c          LDR      r0,|L1.3212|
000b3c  ebfffffe          BL       sysprintf
                  |L1.2880|
000b40  e51f0910          LDR      r0,|L1.568|
000b44  e5900000          LDR      r0,[r0,#0]            ;482  ; meterData
000b48  e3a01007          MOV      r1,#7                 ;482
000b4c  e3a03009          MOV      r3,#9                 ;482
000b50  e3a02001          MOV      r2,#1                 ;482
000b54  e58d1000          STR      r1,[sp,#0]            ;482
000b58  e28f1e13          ADR      r1,|L1.3216|
000b5c  e58d0004          STR      r0,[sp,#4]            ;482
000b60  e59f0138          LDR      r0,|L1.3232|
000b64  ebfffffe          BL       __2sprintf
000b68  e51f0938          LDR      r0,|L1.568|
000b6c  e28f1e13          ADR      r1,|L1.3236|
000b70  e5902004          LDR      r2,[r0,#4]            ;483  ; meterData
000b74  e2800088          ADD      r0,r0,#0x88           ;483
000b78  ebfffffe          BL       __2sprintf
000b7c  e28f1f4a          ADR      r1,|L1.3244|
000b80  e59f0130          LDR      r0,|L1.3256|
000b84  ebfffffe          BL       strcpy
000b88  e28f1f4b          ADR      r1,|L1.3260|
000b8c  e59f0130          LDR      r0,|L1.3268|
000b90  ebfffffe          BL       strcpy
000b94  e28f1f4b          ADR      r1,|L1.3272|
000b98  e59f0134          LDR      r0,|L1.3284|
000b9c  ebfffffe          BL       strcpy
000ba0  e28f1e12          ADR      r1,|L1.3272|
000ba4  e59f012c          LDR      r0,|L1.3288|
000ba8  ebfffffe          BL       strcpy
000bac  e28f1f4a          ADR      r1,|L1.3292|
000bb0  e59f012c          LDR      r0,|L1.3300|
000bb4  ebfffffe          BL       strcpy
000bb8  e28f1f4a          ADR      r1,|L1.3304|
000bbc  e59f012c          LDR      r0,|L1.3312|
000bc0  ebfffffe          BL       strcpy
000bc4  e51f1994          LDR      r1,|L1.568|
000bc8  e5910004          LDR      r0,[r1,#4]            ;492  ; meterData
000bcc  ebfffffe          BL       calculateDeviceIDPositionInfo
000bd0  ebfffffe          BL       AutoUpdateMeterData
000bd4  e3a02003          MOV      r2,#3                 ;496
000bd8  e3a01000          MOV      r1,#0                 ;496
000bdc  e3a00001          MOV      r0,#1                 ;496
000be0  ebfffffe          BL       xQueueGenericCreate
000be4  e51f19b8          LDR      r1,|L1.564|
000be8  e5810000          STR      r0,[r1,#0]            ;496  ; xMeterDataActionSemaphore
000bec  e3a00000          MOV      r0,#0                 ;497
000bf0  e3a01006          MOV      r1,#6                 ;497
000bf4  e58d0004          STR      r0,[sp,#4]            ;497
000bf8  e1a03000          MOV      r3,r0                 ;497
000bfc  e3a02b0a          MOV      r2,#0x2800            ;497
000c00  e58d1000          STR      r1,[sp,#0]            ;497
000c04  e28f10e8          ADR      r1,|L1.3316|
000c08  e59f00fc          LDR      r0,|L1.3340|
000c0c  ebfffffe          BL       xTaskCreate
000c10  e3a00001          MOV      r0,#1                 ;499
000c14  eaffffbd          B        |L1.2832|
;;;501    
                          ENDP

                  applyData PROC
;;;502    static BOOL applyData(void)
000c18  e3a00001          MOV      r0,#1
;;;503    { 
;;;504        
;;;505        return TRUE;
;;;506    }
000c1c  e12fff1e          BX       lr
;;;507        
                          ENDP

                  MeterDataInit PROC
;;;510    /*-----------------------------------------*/
;;;511    BOOL MeterDataInit(void)
000c20  e92d4010          PUSH     {r4,lr}
;;;512    {
;;;513        sysprintf("MeterDataInit!!\n");
000c24  e28f00e4          ADR      r0,|L1.3344|
000c28  ebfffffe          BL       sysprintf
;;;514        if(swInit() == FALSE)
000c2c  ebfffffe          BL       swInit
000c30  e3500000          CMP      r0,#0
000c34  1a000044          BNE      |L1.3404|
;;;515        {
;;;516            sysprintf("MeterDataInit ERROR (swInit false)!!\n");
000c38  e28f00e4          ADR      r0,|L1.3364|
000c3c  ebfffffe          BL       sysprintf
;;;517            return FALSE;
000c40  e3a00000          MOV      r0,#0
                  |L1.3140|
;;;518        }
;;;519        if(applyData() == FALSE)
;;;520        {
;;;521            sysprintf("MeterDataInit ERROR (applyData false)!!\n");
;;;522            return FALSE;
;;;523        }
;;;524        
;;;525        sysprintf("MeterDataInit OK!!\n");
;;;526        return TRUE;
;;;527    }
000c44  e8bd8010          POP      {r4,pc}
                  |L1.3144|
000c48  2020202d          DCB      "   -- getEpmID --\r\n",0
000c4c  2d206765
000c50  7445706d
000c54  4944202d
000c58  2d0d0a00
                  |L1.3164|
000c5c  203e3e20          DCB      " >> meterPara.epmid:%d (from DIP Setting)\n",0
000c60  6d657465
000c64  72506172
000c68  612e6570
000c6c  6d69643a
000c70  25642028
000c74  66726f6d
000c78  20444950
000c7c  20536574
000c80  74696e67
000c84  290a00  
000c87  00                DCB      0
                  |L1.3208|
                          DCD      meterDataPowerCallabck
                  |L1.3212|
                          DCD      ||.constdata||+0xa0
                  |L1.3216|
000c90  25642e25          DCB      "%d.%d.%d(%d)",0
000c94  642e2564
000c98  28256429
000c9c  00      
000c9d  00                DCB      0
000c9e  00                DCB      0
000c9f  00                DCB      0
                  |L1.3232|
                          DCD      meterData+0x8
                  |L1.3236|
000ca4  25303864          DCB      "%08d",0
000ca8  00      
000ca9  00                DCB      0
000caa  00                DCB      0
000cab  00                DCB      0
                  |L1.3244|
000cac  74617269          DCB      "tariffdir",0
000cb0  66666469
000cb4  7200    
000cb6  00                DCB      0
000cb7  00                DCB      0
                  |L1.3256|
                          DCD      meterData+0x517
                  |L1.3260|
000cbc  70617261          DCB      "paradir",0
000cc0  64697200
                  |L1.3268|
                          DCD      meterData+0x616
                  |L1.3272|
000cc8  64636664          DCB      "dcfdsfdir",0
000ccc  73666469
000cd0  7200    
000cd2  00                DCB      0
000cd3  00                DCB      0
                  |L1.3284|
                          DCD      meterData+0x913
                  |L1.3288|
                          DCD      meterData+0x814
                  |L1.3292|
000cdc  6a706764          DCB      "jpgdir",0
000ce0  697200  
000ce3  00                DCB      0
                  |L1.3300|
                          DCD      meterData+0x715
                  |L1.3304|
000ce8  6c6f6764          DCB      "logdir",0
000cec  697200  
000cef  00                DCB      0
                  |L1.3312|
                          DCD      meterData+0xa12
                  |L1.3316|
000cf4  764d6574          DCB      "vMeterDataProcessTask",0
000cf8  65724461
000cfc  74615072
000d00  6f636573
000d04  73546173
000d08  6b00    
000d0a  00                DCB      0
000d0b  00                DCB      0
                  |L1.3340|
                          DCD      vMeterDataProcessTask
                  |L1.3344|
000d10  4d657465          DCB      "MeterDataInit!!\n",0
000d14  72446174
000d18  61496e69
000d1c  7421210a
000d20  00      
000d21  00                DCB      0
000d22  00                DCB      0
000d23  00                DCB      0
                  |L1.3364|
000d24  4d657465          DCB      "MeterDataInit ERROR (swInit false)!!\n",0
000d28  72446174
000d2c  61496e69
000d30  74204552
000d34  524f5220
000d38  28737749
000d3c  6e697420
000d40  66616c73
000d44  65292121
000d48  0a00    
000d4a  00                DCB      0
000d4b  00                DCB      0
                  |L1.3404|
000d4c  ebfffffe          BL       applyData
000d50  e3500000          CMP      r0,#0                 ;519
000d54  1a000003          BNE      |L1.3432|
000d58  e28f0fad          ADR      r0,|L1.4116|
000d5c  ebfffffe          BL       sysprintf
000d60  e3a00000          MOV      r0,#0                 ;522
000d64  eaffffb6          B        |L1.3140|
                  |L1.3432|
000d68  e28f0e2d          ADR      r0,|L1.4160|
000d6c  ebfffffe          BL       sysprintf
000d70  e3a00001          MOV      r0,#1                 ;526
000d74  eaffffb2          B        |L1.3140|
;;;528    
                          ENDP

                  UpdateMeterDepositTime PROC
;;;532    }
;;;533    BOOL UpdateMeterDepositTime(time_t time)
000d78  e92d47f0          PUSH     {r4-r10,lr}
;;;534    {
000d7c  e1a04000          MOV      r4,r0
;;;535        uint16_t    currentSelCostTmp = TariffGetCurrentTariffType()->basecost +
000d80  ebfffffe          BL       TariffGetCurrentTariffType
000d84  e590900c          LDR      r9,[r0,#0xc]
000d88  ebfffffe          BL       TariffGetCurrentTariffType
000d8c  e5906008          LDR      r6,[r0,#8]
000d90  ebfffffe          BL       TariffGetCurrentTariffType
000d94  e5900008          LDR      r0,[r0,#8]
000d98  e0447000          SUB      r7,r4,r0
000d9c  e1a01006          MOV      r1,r6
000da0  e1a00007          MOV      r0,r7
000da4  ebfffffe          BL       __aeabi_uidivmod
000da8  e1a08000          MOV      r8,r0
000dac  ebfffffe          BL       TariffGetCurrentTariffType
000db0  e5900010          LDR      r0,[r0,#0x10]
000db4  e0209098          MLA      r0,r8,r0,r9
000db8  e1a05800          LSL      r5,r0,#16
000dbc  e1a05825          LSR      r5,r5,#16
;;;536                                ((time - TariffGetCurrentTariffType()->timeunit)/TariffGetCurrentTariffType()->timeunit/*SEL_TIME_INTERVAL_TIME*/) * TariffGetCurrentTariffType()->costunit; 
;;;537        sysprintf("UpdateMeterDepositTime (currentSelCostTmp = %d, maxcost = %d) !!\n", currentSelCostTmp, TariffGetCurrentTariffType()->maxcost);
000dc0  ebfffffe          BL       TariffGetCurrentTariffType
000dc4  e5906014          LDR      r6,[r0,#0x14]
000dc8  e1a02006          MOV      r2,r6
000dcc  e1a01005          MOV      r1,r5
000dd0  e59f027c          LDR      r0,|L1.4180|
000dd4  ebfffffe          BL       sysprintf
;;;538        if(currentSelCostTmp <=  TariffGetCurrentTariffType()->maxcost)
000dd8  ebfffffe          BL       TariffGetCurrentTariffType
000ddc  e5900014          LDR      r0,[r0,#0x14]
000de0  e1500005          CMP      r0,r5
000de4  ba000007          BLT      |L1.3592|
;;;539        {        
;;;540            GetMeterData()->currentSelTime = time;
000de8  ebfffffe          BL       GetMeterData
000dec  e2800c01          ADD      r0,r0,#0x100
000df0  e1c040ba          STRH     r4,[r0,#0xa]
;;;541            GetMeterData()->currentSelCost = currentSelCostTmp; 
000df4  ebfffffe          BL       GetMeterData
000df8  e2800c01          ADD      r0,r0,#0x100
000dfc  e1c050bc          STRH     r5,[r0,#0xc]
;;;542            return TRUE;
000e00  e3a00001          MOV      r0,#1
                  |L1.3588|
;;;543        }
;;;544        return FALSE;
;;;545    }
000e04  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3592|
000e08  e3a00000          MOV      r0,#0                 ;544
000e0c  eafffffc          B        |L1.3588|
;;;546    
                          ENDP

                  UpdateMeterCurrentSelSpace PROC
;;;547    void UpdateMeterCurrentSelSpace(int value, BOOL setFlag)
000e10  e92d41f0          PUSH     {r4-r8,lr}
;;;548    {
000e14  e1a04000          MOV      r4,r0
000e18  e1a05001          MOV      r5,r1
;;;549        if(setFlag)
000e1c  e3550000          CMP      r5,#0
000e20  0a000002          BEQ      |L1.3632|
;;;550        {
;;;551            GetMeterData()->currentSelSpace = value;
000e24  ebfffffe          BL       GetMeterData
000e28  e5c04108          STRB     r4,[r0,#0x108]
000e2c  ea000005          B        |L1.3656|
                  |L1.3632|
;;;552        }
;;;553        else
;;;554        {
;;;555            GetMeterData()->currentSelSpace = GetMeterData()->currentSelSpace + value;
000e30  ebfffffe          BL       GetMeterData
000e34  e5d00108          LDRB     r0,[r0,#0x108]
000e38  e0800004          ADD      r0,r0,r4
000e3c  e20010ff          AND      r1,r0,#0xff
000e40  ebfffffe          BL       GetMeterData
000e44  e5c01108          STRB     r1,[r0,#0x108]
                  |L1.3656|
;;;556        }
;;;557        if(GetMeterData()->currentSelSpace > GetMeterPara()->spaceEnableNum)
000e48  ebfffffe          BL       GetMeterData
000e4c  e5d07108          LDRB     r7,[r0,#0x108]
000e50  ebfffffe          BL       GetMeterPara
000e54  e2806068          ADD      r6,r0,#0x68
000e58  e1a00006          MOV      r0,r6
000e5c  ebfffffe          BL       __aeabi_uread4
000e60  e1570000          CMP      r7,r0
000e64  da000002          BLE      |L1.3700|
;;;558            GetMeterData()->currentSelSpace = 1;
000e68  ebfffffe          BL       GetMeterData
000e6c  e3a01001          MOV      r1,#1
000e70  e5c01108          STRB     r1,[r0,#0x108]
                  |L1.3700|
;;;559    
;;;560        if(GetMeterData()->currentSelSpace == 0)
000e74  ebfffffe          BL       GetMeterData
000e78  e5d00108          LDRB     r0,[r0,#0x108]
000e7c  e3500000          CMP      r0,#0
000e80  1a000006          BNE      |L1.3744|
;;;561            GetMeterData()->currentSelSpace = GetMeterPara()->spaceEnableNum;
000e84  ebfffffe          BL       GetMeterPara
000e88  e2806068          ADD      r6,r0,#0x68
000e8c  e1a00006          MOV      r0,r6
000e90  ebfffffe          BL       __aeabi_uread4
000e94  e20010ff          AND      r1,r0,#0xff
000e98  ebfffffe          BL       GetMeterData
000e9c  e5c01108          STRB     r1,[r0,#0x108]
                  |L1.3744|
;;;562    }
000ea0  e8bd81f0          POP      {r4-r8,pc}
;;;563    
                          ENDP

                  MeterSetErrorCode PROC
;;;664    
;;;665    void MeterSetErrorCode(meterErrorCode code)
000ea4  e92d4010          PUSH     {r4,lr}
;;;666    {
000ea8  e1a04000          MOV      r4,r0
;;;667        sysprintf("\r\n *************    MeterSetErrorCode [code:0x%04x] !!!   *************\r\n", code);    
000eac  e1a01004          MOV      r1,r4
000eb0  e59f01a0          LDR      r0,|L1.4184|
000eb4  ebfffffe          BL       sysprintf
;;;668        meterData.meterErrorCode = meterData.meterErrorCode | code;
000eb8  e59f019c          LDR      r0,|L1.4188|
000ebc  e1d000be          LDRH     r0,[r0,#0xe]
000ec0  e1800004          ORR      r0,r0,r4
000ec4  e59f1190          LDR      r1,|L1.4188|
000ec8  e1c100be          STRH     r0,[r1,#0xe]
;;;669    	//{
;;;670        //    char str[256];
;;;671        //    sprintf(str, "******* !!! MeterSetErrorCode [code:0x%04x, meterErrorCode:0x%04x] !!!   ******\r\n", code, meterData.meterErrorCode);
;;;672        //    LoglibPrintf(LOG_TYPE_ERROR, str);
;;;673        //}
;;;674    }
000ecc  e8bd8010          POP      {r4,pc}
;;;675    void MeterUpdateExpiredTitle(uint8_t selectItemId)
                          ENDP

                  MeterUpdateExpiredTitle PROC
000ed0  e92d43f8          PUSH     {r3-r9,lr}
;;;676    {
000ed4  e1a04000          MOV      r4,r0
;;;677        sysprintf("\r\n ****    MeterUpdateExpiredTitle selectItemId = %d [%d:%d, %d] !!!   ****\r\n", selectItemId, GetMeterData()->currentSelSpace, GetMeterPara()->meterPosition, GetMeterPara()->meterPosition+1);
000ed8  ebfffffe          BL       GetMeterPara
000edc  e2808064          ADD      r8,r0,#0x64
000ee0  e1a00008          MOV      r0,r8
000ee4  ebfffffe          BL       __aeabi_uread4
000ee8  e2805001          ADD      r5,r0,#1
000eec  ebfffffe          BL       GetMeterPara
000ef0  e2808064          ADD      r8,r0,#0x64
000ef4  e1a00008          MOV      r0,r8
000ef8  ebfffffe          BL       __aeabi_uread4
000efc  e1a06000          MOV      r6,r0
000f00  ebfffffe          BL       GetMeterData
000f04  e5d07108          LDRB     r7,[r0,#0x108]
000f08  e1a03006          MOV      r3,r6
000f0c  e1a02007          MOV      r2,r7
000f10  e1a01004          MOV      r1,r4
000f14  e59f0144          LDR      r0,|L1.4192|
000f18  e58d5000          STR      r5,[sp,#0]
000f1c  ebfffffe          BL       sysprintf
;;;678        #warning 
;;;679        if(GetMeterPara()->spaceEnableNum != 2)
000f20  ebfffffe          BL       GetMeterPara
000f24  e2805068          ADD      r5,r0,#0x68
000f28  e1a00005          MOV      r0,r5
000f2c  ebfffffe          BL       __aeabi_uread4
000f30  e3500002          CMP      r0,#2
000f34  0a000002          BEQ      |L1.3908|
;;;680        {
;;;681            sysprintf("\r\n ****    MeterUpdateExpiredTitle ignore ****\r\n");
000f38  e28f0f49          ADR      r0,|L1.4196|
000f3c  ebfffffe          BL       sysprintf
                  |L1.3904|
;;;682            return;
;;;683       
;;;684        }
;;;685        switch(GetMeterData()->spaceSepositStatus[GetMeterPara()->meterPosition - 1])
;;;686        {
;;;687            case SPACE_DEPOSIT_STATUS_INIT:
;;;688    
;;;689                break;
;;;690           case SPACE_DEPOSIT_STATUS_OK:
;;;691                if(selectItemId == 0)
;;;692                {
;;;693                    ShowExpired(EPD_PICT_INDEX_EXPIRED_BG, TRUE, FALSE, FALSE);
;;;694                } 
;;;695                break;
;;;696            case SPACE_DEPOSIT_STATUS_EXCEED_TIME:
;;;697                if(selectItemId == 0)
;;;698                {
;;;699                    ShowExpired(EPD_PICT_INDEX_EXPIRED_W, TRUE, FALSE, FALSE);
;;;700                }            
;;;701                else if((GetMeterData()->currentSelSpace) == (GetMeterPara()->meterPosition))
;;;702                {
;;;703                    ShowExpired(EPD_PICT_INDEX_EXPIRED_B, TRUE, FALSE, FALSE);
;;;704                }
;;;705                else
;;;706                {
;;;707                    ShowExpired(EPD_PICT_INDEX_EXPIRED_W, TRUE, FALSE, FALSE);
;;;708                }
;;;709                break;
;;;710            case SPACE_DEPOSIT_STATUS_STANBY:
;;;711                if(selectItemId == 0)
;;;712                {
;;;713                    ShowExpired(EPD_PICT_INDEX_EXPIRED_BG, TRUE, FALSE, FALSE);
;;;714                } 
;;;715                break;
;;;716        }
;;;717        switch(GetMeterData()->spaceSepositStatus[GetMeterPara()->meterPosition + 1 - 1])
;;;718        {
;;;719            case SPACE_DEPOSIT_STATUS_INIT:
;;;720    
;;;721                break;
;;;722             case SPACE_DEPOSIT_STATUS_OK:
;;;723                if(selectItemId == 0)
;;;724                {
;;;725                    ShowExpired(EPD_PICT_INDEX_EXPIRED_BG, FALSE, TRUE, FALSE);
;;;726                } 
;;;727                break;
;;;728            case SPACE_DEPOSIT_STATUS_EXCEED_TIME:
;;;729                if(selectItemId == 0)
;;;730                {
;;;731                    ShowExpired(EPD_PICT_INDEX_EXPIRED_W, FALSE, TRUE, FALSE);
;;;732                } 
;;;733                else if((GetMeterData()->currentSelSpace) == (GetMeterPara()->meterPosition + 1))
;;;734                {
;;;735                    ShowExpired(EPD_PICT_INDEX_EXPIRED_B, FALSE, TRUE, FALSE);
;;;736                }
;;;737                else
;;;738                {
;;;739                    ShowExpired(EPD_PICT_INDEX_EXPIRED_W, FALSE, TRUE, FALSE);
;;;740                }
;;;741                break;
;;;742            case SPACE_DEPOSIT_STATUS_STANBY:
;;;743                if(selectItemId == 0)
;;;744                {
;;;745                    ShowExpired(EPD_PICT_INDEX_EXPIRED_BG, FALSE, TRUE, FALSE);
;;;746                } 
;;;747                break;
;;;748        }
;;;749    }
000f40  e8bd83f8          POP      {r3-r9,pc}
                  |L1.3908|
000f44  ebfffffe          BL       GetMeterData
000f48  e3e01e11          MVN      r1,#0x110             ;685
000f4c  e0406001          SUB      r6,r0,r1              ;685
000f50  ebfffffe          BL       GetMeterPara
000f54  e2805064          ADD      r5,r0,#0x64           ;685
000f58  e1a00005          MOV      r0,r5                 ;685
000f5c  ebfffffe          BL       __aeabi_uread4
000f60  e2400001          SUB      r0,r0,#1              ;685
000f64  e7d60000          LDRB     r0,[r6,r0]            ;685
000f68  e3500000          CMP      r0,#0                 ;685
000f6c  0a000006          BEQ      |L1.3980|
000f70  e3500001          CMP      r0,#1                 ;685
000f74  0a000006          BEQ      |L1.3988|
000f78  e3500002          CMP      r0,#2                 ;685
000f7c  0a00000d          BEQ      |L1.4024|
000f80  e3500003          CMP      r0,#3                 ;685
000f84  1a000052          BNE      |L1.4308|
000f88  ea000048          B        |L1.4272|
                  |L1.3980|
000f8c  e1a00000          MOV      r0,r0                 ;687
000f90  ea00004f          B        |L1.4308|
                  |L1.3988|
000f94  e1a00000          MOV      r0,r0                 ;690
000f98  e3540000          CMP      r4,#0                 ;691
000f9c  1a000004          BNE      |L1.4020|
000fa0  e3a03000          MOV      r3,#0                 ;693
000fa4  e1a02003          MOV      r2,r3                 ;693
000fa8  e3a01001          MOV      r1,#1                 ;693
000fac  e3a000ad          MOV      r0,#0xad              ;693
000fb0  ebfffffe          BL       ShowExpired
                  |L1.4020|
000fb4  ea000046          B        |L1.4308|
                  |L1.4024|
000fb8  e1a00000          MOV      r0,r0                 ;696
000fbc  e3540000          CMP      r4,#0                 ;697
000fc0  1a000005          BNE      |L1.4060|
000fc4  e3a03000          MOV      r3,#0                 ;699
000fc8  e1a02003          MOV      r2,r3                 ;699
000fcc  e3a01001          MOV      r1,#1                 ;699
000fd0  e3a000ae          MOV      r0,#0xae              ;699
000fd4  ebfffffe          BL       ShowExpired
000fd8  ea000033          B        |L1.4268|
                  |L1.4060|
000fdc  ebfffffe          BL       GetMeterData
000fe0  e5d06108          LDRB     r6,[r0,#0x108]        ;701
000fe4  ebfffffe          BL       GetMeterPara
000fe8  e2805064          ADD      r5,r0,#0x64           ;701
000fec  e1a00005          MOV      r0,r5                 ;701
000ff0  ebfffffe          BL       __aeabi_uread4
000ff4  e1560000          CMP      r6,r0                 ;701
000ff8  1a000026          BNE      |L1.4248|
000ffc  e3a03000          MOV      r3,#0                 ;703
001000  e1a02003          MOV      r2,r3                 ;703
001004  e3a01001          MOV      r1,#1                 ;703
001008  e3a000af          MOV      r0,#0xaf              ;703
00100c  ebfffffe          BL       ShowExpired
001010  ea000025          B        |L1.4268|
                  |L1.4116|
001014  4d657465          DCB      "MeterDataInit ERROR (applyData false)!!\n",0
001018  72446174
00101c  61496e69
001020  74204552
001024  524f5220
001028  28617070
00102c  6c794461
001030  74612066
001034  616c7365
001038  2921210a
00103c  00      
00103d  00                DCB      0
00103e  00                DCB      0
00103f  00                DCB      0
                  |L1.4160|
001040  4d657465          DCB      "MeterDataInit OK!!\n",0
001044  72446174
001048  61496e69
00104c  74204f4b
001050  21210a00
                  |L1.4180|
                          DCD      ||.constdata||+0xe4
                  |L1.4184|
                          DCD      ||.constdata||+0x128
                  |L1.4188|
                          DCD      meterData+0x100
                  |L1.4192|
                          DCD      ||.constdata||+0x174
                  |L1.4196|
001064  0d0a202a          DCB      "\r\n ****    MeterUpdateExpiredTitle ignore ****\r\n",0
001068  2a2a2a20
00106c  2020204d
001070  65746572
001074  55706461
001078  74654578
00107c  70697265
001080  64546974
001084  6c652069
001088  676e6f72
00108c  65202a2a
001090  2a2a0d0a
001094  00      
001095  00                DCB      0
001096  00                DCB      0
001097  00                DCB      0
                  |L1.4248|
001098  e3a03000          MOV      r3,#0                 ;707
00109c  e1a02003          MOV      r2,r3                 ;707
0010a0  e3a01001          MOV      r1,#1                 ;707
0010a4  e3a000ae          MOV      r0,#0xae              ;707
0010a8  ebfffffe          BL       ShowExpired
                  |L1.4268|
0010ac  ea000008          B        |L1.4308|
                  |L1.4272|
0010b0  e1a00000          MOV      r0,r0                 ;710
0010b4  e3540000          CMP      r4,#0                 ;711
0010b8  1a000004          BNE      |L1.4304|
0010bc  e3a03000          MOV      r3,#0                 ;713
0010c0  e1a02003          MOV      r2,r3                 ;713
0010c4  e3a01001          MOV      r1,#1                 ;713
0010c8  e3a000ad          MOV      r0,#0xad              ;713
0010cc  ebfffffe          BL       ShowExpired
                  |L1.4304|
0010d0  e1a00000          MOV      r0,r0                 ;715
                  |L1.4308|
0010d4  e1a00000          MOV      r0,r0                 ;689
0010d8  ebfffffe          BL       GetMeterData
0010dc  e3e01e11          MVN      r1,#0x110             ;717
0010e0  e0406001          SUB      r6,r0,r1              ;717
0010e4  ebfffffe          BL       GetMeterPara
0010e8  e2805064          ADD      r5,r0,#0x64           ;717
0010ec  e1a00005          MOV      r0,r5                 ;717
0010f0  ebfffffe          BL       __aeabi_uread4
0010f4  e7d60000          LDRB     r0,[r6,r0]            ;717
0010f8  e3500000          CMP      r0,#0                 ;717
0010fc  0a000006          BEQ      |L1.4380|
001100  e3500001          CMP      r0,#1                 ;717
001104  0a000006          BEQ      |L1.4388|
001108  e3500002          CMP      r0,#2                 ;717
00110c  0a00000d          BEQ      |L1.4424|
001110  e3500003          CMP      r0,#3                 ;717
001114  1a000032          BNE      |L1.4580|
001118  ea000028          B        |L1.4544|
                  |L1.4380|
00111c  e1a00000          MOV      r0,r0                 ;719
001120  ea00002f          B        |L1.4580|
                  |L1.4388|
001124  e1a00000          MOV      r0,r0                 ;722
001128  e3540000          CMP      r4,#0                 ;723
00112c  1a000004          BNE      |L1.4420|
001130  e3a03000          MOV      r3,#0                 ;725
001134  e3a02001          MOV      r2,#1                 ;725
001138  e1a01003          MOV      r1,r3                 ;725
00113c  e3a000ad          MOV      r0,#0xad              ;725
001140  ebfffffe          BL       ShowExpired
                  |L1.4420|
001144  ea000026          B        |L1.4580|
                  |L1.4424|
001148  e1a00000          MOV      r0,r0                 ;728
00114c  e3540000          CMP      r4,#0                 ;729
001150  1a000005          BNE      |L1.4460|
001154  e3a03000          MOV      r3,#0                 ;731
001158  e3a02001          MOV      r2,#1                 ;731
00115c  e1a01003          MOV      r1,r3                 ;731
001160  e3a000ae          MOV      r0,#0xae              ;731
001164  ebfffffe          BL       ShowExpired
001168  ea000013          B        |L1.4540|
                  |L1.4460|
00116c  ebfffffe          BL       GetMeterData
001170  e5d06108          LDRB     r6,[r0,#0x108]        ;733
001174  ebfffffe          BL       GetMeterPara
001178  e2805064          ADD      r5,r0,#0x64           ;733
00117c  e1a00005          MOV      r0,r5                 ;733
001180  ebfffffe          BL       __aeabi_uread4
001184  e2800001          ADD      r0,r0,#1              ;733
001188  e1560000          CMP      r6,r0                 ;733
00118c  1a000005          BNE      |L1.4520|
001190  e3a03000          MOV      r3,#0                 ;735
001194  e3a02001          MOV      r2,#1                 ;735
001198  e1a01003          MOV      r1,r3                 ;735
00119c  e3a000af          MOV      r0,#0xaf              ;735
0011a0  ebfffffe          BL       ShowExpired
0011a4  ea000004          B        |L1.4540|
                  |L1.4520|
0011a8  e3a03000          MOV      r3,#0                 ;739
0011ac  e3a02001          MOV      r2,#1                 ;739
0011b0  e1a01003          MOV      r1,r3                 ;739
0011b4  e3a000ae          MOV      r0,#0xae              ;739
0011b8  ebfffffe          BL       ShowExpired
                  |L1.4540|
0011bc  ea000008          B        |L1.4580|
                  |L1.4544|
0011c0  e1a00000          MOV      r0,r0                 ;742
0011c4  e3540000          CMP      r4,#0                 ;743
0011c8  1a000004          BNE      |L1.4576|
0011cc  e3a03000          MOV      r3,#0                 ;745
0011d0  e3a02001          MOV      r2,#1                 ;745
0011d4  e1a01003          MOV      r1,r3                 ;745
0011d8  e3a000ad          MOV      r0,#0xad              ;745
0011dc  ebfffffe          BL       ShowExpired
                  |L1.4576|
0011e0  e1a00000          MOV      r0,r0                 ;747
                  |L1.4580|
0011e4  e1a00000          MOV      r0,r0                 ;721
0011e8  e1a00000          MOV      r0,r0
0011ec  eaffff53          B        |L1.3904|
;;;750    
                          ENDP

                  MeterSetBuildVer PROC
;;;751    void MeterSetBuildVer(uint32_t buildVer)
0011f0  e52de004          PUSH     {lr}
;;;752    {
0011f4  e1a01000          MOV      r1,r0
;;;753        GetMeterData()->buildVer = buildVer;
0011f8  ebfffffe          BL       GetMeterData
0011fc  e5801000          STR      r1,[r0,#0]
;;;754    }
001200  e49df004          POP      {pc}
;;;755    BOOL MeterUpdateLedHeartbeat(void)
                          ENDP

                  MeterUpdateLedHeartbeat PROC
001204  e92d4010          PUSH     {r4,lr}
;;;756    {
;;;757        return sendLedHeartbeatRoutine(0);
001208  e3a00000          MOV      r0,#0
00120c  ebfffffe          BL       sendLedHeartbeatRoutine
;;;758    }
001210  e8bd8010          POP      {r4,pc}
;;;759    
                          ENDP

                  MeterUpdateModemAgentLastTime PROC
;;;760    void MeterUpdateModemAgentLastTime(void)
001214  e92d4010          PUSH     {r4,lr}
;;;761    {
;;;762        time_t rawTime = GetCurrentUTCTime();
001218  ebfffffe          BL       GetCurrentUTCTime
00121c  e1a04000          MOV      r4,r0
;;;763        if(rawTime != 0)
001220  e3540000          CMP      r4,#0
001224  0a000017          BEQ      |L1.4744|
;;;764        {
;;;765            int i;
;;;766            for (i = 0; ; i++)
001228  e3a00000          MOV      r0,#0
00122c  e1a00000          MOV      r0,r0
                  |L1.4656|
;;;767            {
;;;768                if(routineItem[i].routineName == NULL)
001230  e0801100          ADD      r1,r0,r0,LSL #2
001234  e51f287c          LDR      r2,|L1.2496|
001238  e7921101          LDR      r1,[r2,r1,LSL #2]
00123c  e3510000          CMP      r1,#0
001240  1a000000          BNE      |L1.4680|
;;;769                {
;;;770                    break;
001244  ea00000d          B        |L1.4736|
                  |L1.4680|
;;;771                }
;;;772                if(routineItem[i].routineFunc == modemAgentTransmitRoutine)
001248  e0801100          ADD      r1,r0,r0,LSL #2
00124c  e51f2894          LDR      r2,|L1.2496|
001250  e0821101          ADD      r1,r2,r1,LSL #2
001254  e5911004          LDR      r1,[r1,#4]
001258  e59f202c          LDR      r2,|L1.4748|
00125c  e1510002          CMP      r1,r2
001260  1a000004          BNE      |L1.4728|
;;;773                {
;;;774                    routineItem[i].lastProcessTime = rawTime;
001264  e0801100          ADD      r1,r0,r0,LSL #2
001268  e51f28b0          LDR      r2,|L1.2496|
00126c  e0821101          ADD      r1,r2,r1,LSL #2
001270  e5814010          STR      r4,[r1,#0x10]
;;;775                    break;
001274  ea000001          B        |L1.4736|
                  |L1.4728|
001278  e2800001          ADD      r0,r0,#1              ;766
00127c  eaffffeb          B        |L1.4656|
                  |L1.4736|
001280  e1a00000          MOV      r0,r0                 ;770
;;;776                }
;;;777            }
;;;778        }
001284  e1a00000          MOV      r0,r0
                  |L1.4744|
;;;779    }
001288  e8bd8010          POP      {r4,pc}
;;;780    static char currentDCFFileName[_MAX_LFN];
                          ENDP

                  |L1.4748|
                          DCD      modemAgentTransmitRoutine

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  meterData
                          %        2836
                  currentDCFFileName
                          %        255

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  202d2d2d          DCB      0x20,0x2d,0x2d,0x2d
000004  20494e46          DCB      0x20,0x49,0x4e,0x46
000008  4f202d2d          DCB      0x4f,0x20,0x2d,0x2d
00000c  2d2d3e20          DCB      0x2d,0x2d,0x3e,0x20
000010  726f7574          DCB      0x72,0x6f,0x75,0x74
000014  696e6543          DCB      0x69,0x6e,0x65,0x43
000018  6f756e74          DCB      0x6f,0x75,0x6e,0x74
00001c  65725469          DCB      0x65,0x72,0x54,0x69
000020  6d657228          DCB      0x6d,0x65,0x72,0x28
000024  25642920          DCB      0x25,0x64,0x29,0x20
000028  3c25733e          DCB      0x3c,0x25,0x73,0x3e
00002c  20286c61          DCB      0x20,0x28,0x6c,0x61
000030  73745072          DCB      0x73,0x74,0x50,0x72
000034  6f636573          DCB      0x6f,0x63,0x65,0x73
000038  7354696d          DCB      0x73,0x54,0x69,0x6d
00003c  65203d20          DCB      0x65,0x20,0x3d,0x20
000040  25642920          DCB      0x25,0x64,0x29,0x20
000044  73746172          DCB      0x73,0x74,0x61,0x72
000048  74202e2e          DCB      0x74,0x20,0x2e,0x2e
00004c  2e0d0a00          DCB      0x2e,0x0d,0x0a,0x00
000050  202d2d2d          DCB      0x20,0x2d,0x2d,0x2d
000054  20494e46          DCB      0x20,0x49,0x4e,0x46
000058  4f202d2d          DCB      0x4f,0x20,0x2d,0x2d
00005c  2d2d3e20          DCB      0x2d,0x2d,0x3e,0x20
000060  726f7574          DCB      0x72,0x6f,0x75,0x74
000064  696e6543          DCB      0x69,0x6e,0x65,0x43
000068  6f756e74          DCB      0x6f,0x75,0x6e,0x74
00006c  65725469          DCB      0x65,0x72,0x54,0x69
000070  6d657228          DCB      0x6d,0x65,0x72,0x28
000074  25642920          DCB      0x25,0x64,0x29,0x20
000078  3c25733e          DCB      0x3c,0x25,0x73,0x3e
00007c  20286c61          DCB      0x20,0x28,0x6c,0x61
000080  73745072          DCB      0x73,0x74,0x50,0x72
000084  6f636573          DCB      0x6f,0x63,0x65,0x73
000088  7354696d          DCB      0x73,0x54,0x69,0x6d
00008c  65203d20          DCB      0x65,0x20,0x3d,0x20
000090  25642920          DCB      0x25,0x64,0x29,0x20
000094  656e6420          DCB      0x65,0x6e,0x64,0x20
000098  2e2e2e0d          DCB      0x2e,0x2e,0x2e,0x0d
00009c  0a000000          DCB      0x0a,0x00,0x00,0x00
0000a0  4d657465          DCB      0x4d,0x65,0x74,0x65
0000a4  72446174          DCB      0x72,0x44,0x61,0x74
0000a8  61496e69          DCB      0x61,0x49,0x6e,0x69
0000ac  74202873          DCB      0x74,0x20,0x28,0x73
0000b0  77496e69          DCB      0x77,0x49,0x6e,0x69
0000b4  74292073          DCB      0x74,0x29,0x20,0x73
0000b8  65742047          DCB      0x65,0x74,0x20,0x47
0000bc  65744d65          DCB      0x65,0x74,0x4d,0x65
0000c0  74657244          DCB      0x74,0x65,0x72,0x44
0000c4  61746128          DCB      0x61,0x74,0x61,0x28
0000c8  292d3e72          DCB      0x29,0x2d,0x3e,0x72
0000cc  756e6e69          DCB      0x75,0x6e,0x6e,0x69
0000d0  6e675374          DCB      0x6e,0x67,0x53,0x74
0000d4  61747573          DCB      0x61,0x74,0x75,0x73
0000d8  203d2025          DCB      0x20,0x3d,0x20,0x25
0000dc  6421210a          DCB      0x64,0x21,0x21,0x0a
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  55706461          DCB      0x55,0x70,0x64,0x61
0000e8  74654d65          DCB      0x74,0x65,0x4d,0x65
0000ec  74657244          DCB      0x74,0x65,0x72,0x44
0000f0  65706f73          DCB      0x65,0x70,0x6f,0x73
0000f4  69745469          DCB      0x69,0x74,0x54,0x69
0000f8  6d652028          DCB      0x6d,0x65,0x20,0x28
0000fc  63757272          DCB      0x63,0x75,0x72,0x72
000100  656e7453          DCB      0x65,0x6e,0x74,0x53
000104  656c436f          DCB      0x65,0x6c,0x43,0x6f
000108  7374546d          DCB      0x73,0x74,0x54,0x6d
00010c  70203d20          DCB      0x70,0x20,0x3d,0x20
000110  25642c20          DCB      0x25,0x64,0x2c,0x20
000114  6d617863          DCB      0x6d,0x61,0x78,0x63
000118  6f737420          DCB      0x6f,0x73,0x74,0x20
00011c  3d202564          DCB      0x3d,0x20,0x25,0x64
000120  29202121          DCB      0x29,0x20,0x21,0x21
000124  0a000000          DCB      0x0a,0x00,0x00,0x00
000128  0d0a202a          DCB      0x0d,0x0a,0x20,0x2a
00012c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000130  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000134  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000138  20202020          DCB      0x20,0x20,0x20,0x20
00013c  4d657465          DCB      0x4d,0x65,0x74,0x65
000140  72536574          DCB      0x72,0x53,0x65,0x74
000144  4572726f          DCB      0x45,0x72,0x72,0x6f
000148  72436f64          DCB      0x72,0x43,0x6f,0x64
00014c  65205b63          DCB      0x65,0x20,0x5b,0x63
000150  6f64653a          DCB      0x6f,0x64,0x65,0x3a
000154  30782530          DCB      0x30,0x78,0x25,0x30
000158  34785d20          DCB      0x34,0x78,0x5d,0x20
00015c  21212120          DCB      0x21,0x21,0x21,0x20
000160  20202a2a          DCB      0x20,0x20,0x2a,0x2a
000164  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000168  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00016c  2a2a2a0d          DCB      0x2a,0x2a,0x2a,0x0d
000170  0a000000          DCB      0x0a,0x00,0x00,0x00
000174  0d0a202a          DCB      0x0d,0x0a,0x20,0x2a
000178  2a2a2a20          DCB      0x2a,0x2a,0x2a,0x20
00017c  2020204d          DCB      0x20,0x20,0x20,0x4d
000180  65746572          DCB      0x65,0x74,0x65,0x72
000184  55706461          DCB      0x55,0x70,0x64,0x61
000188  74654578          DCB      0x74,0x65,0x45,0x78
00018c  70697265          DCB      0x70,0x69,0x72,0x65
000190  64546974          DCB      0x64,0x54,0x69,0x74
000194  6c652073          DCB      0x6c,0x65,0x20,0x73
000198  656c6563          DCB      0x65,0x6c,0x65,0x63
00019c  74497465          DCB      0x74,0x49,0x74,0x65
0001a0  6d496420          DCB      0x6d,0x49,0x64,0x20
0001a4  3d202564          DCB      0x3d,0x20,0x25,0x64
0001a8  205b2564          DCB      0x20,0x5b,0x25,0x64
0001ac  3a25642c          DCB      0x3a,0x25,0x64,0x2c
0001b0  2025645d          DCB      0x20,0x25,0x64,0x5d
0001b4  20212121          DCB      0x20,0x21,0x21,0x21
0001b8  2020202a          DCB      0x20,0x20,0x20,0x2a
0001bc  2a2a2a0d          DCB      0x2a,0x2a,0x2a,0x0d
0001c0  0a00              DCB      0x0a,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  202a2075          DCB      " * update tariff data * ",0
000004  70646174
000008  65207461
00000c  72696666
000010  20646174
000014  61202a20
000018  00      
000019  202a2075          DCB      " * update led heartbeat * ",0
00001d  70646174
000021  65206c65
000025  64206865
000029  61727462
00002d  65617420
000031  2a2000  
000034  202a2074          DCB      " * take photo * ",0
000038  616b6520
00003c  70686f74
000040  6f202a20
000044  00      
000045  202a2074          DCB      " * transaction * ",0
000049  72616e73
00004d  61637469
000051  6f6e202a
000055  2000    
000057  202a206d          DCB      " * modem agent * ",0
00005b  6f64656d
00005f  20616765
000063  6e74202a
000067  2000    
000069  205b4d65          DCB      " [MeterData] ",0
00006d  74657244
000071  6174615d
000075  2000    

                          AREA ||.data||, DATA, ALIGN=2

                  routineItem
                          DCD      ||.conststring||
                          DCD      updateTariffDataRoutine
                          DCD      updateTariffDataRoutineCondition
                          DCD      0x0000003b
                          DCD      0x00000000
                          DCD      ||.conststring||+0x19
                          DCD      sendLedHeartbeatRoutine
                          DCD      0x00000000
                          DCD      0x0000067e
                          DCD      0x00000000
                          DCD      ||.conststring||+0x34
                          DCD      takePhotoRoutine
                          DCD      0x00000000
                          DCD      0x00000253
                          DCD      0x00000000
                          DCD      ||.conststring||+0x45
                          DCD      takeTransactionRoutine
                          DCD      0x00000000
                          DCD      0x00000127
                          DCD      0x00000000
                          DCD      ||.conststring||+0x57
                          DCD      modemAgentTransmitRoutine
                          DCD      0x00000000
                          DCD      0x00000384
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  meterDataPowerStatus
000078  01                DCB      0x01
                  meterDataIgnoreRun
000079  000000            DCB      0x00,0x00,0x00
                  meterDataPowerCallabck
                          DCD      ||.conststring||+0x69
                          DCD      MeterDataPreOffCallback
                          DCD      MeterDataOffCallback
                          DCD      MeterDataOnCallback
                          DCD      MeterDataCheckStatus
                  bayColorLocal
                          DCD      0x00000000
000094  00000000          DCB      0x00,0x00,0x00,0x00
                  xMeterDataActionSemaphore
                          DCD      0x00000000
