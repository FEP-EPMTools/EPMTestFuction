; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\sys_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_uart.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\sys_uart.crf ..\..\common\src\BSP\Driver\Source\sys_uart.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _PutChar_f PROC
;;;19     
;;;20     void _PutChar_f(UINT8 ch)
000000  e1a00000          MOV      r0,r0
                  |L1.4|
;;;21     {
;;;22         volatile int loop;
;;;23         while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000004  e3a0132e          MOV      r1,#0xb8000000
000008  e5911018          LDR      r1,[r1,#0x18]
00000c  e3110502          TST      r1,#0x800000
000010  1afffffb          BNE      |L1.4|
;;;24         outpw(REG_UART0_THR, ch);
000014  e3a0132e          MOV      r1,#0xb8000000
000018  e5810000          STR      r0,[r1,#0]
;;;25         if(ch == '\n') {
00001c  e350000a          CMP      r0,#0xa
000020  1a000007          BNE      |L1.68|
;;;26             while((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000024  e1a00000          MOV      r0,r0
                  |L1.40|
000028  e3a0132e          MOV      r1,#0xb8000000
00002c  e5911018          LDR      r1,[r1,#0x18]
000030  e3110502          TST      r1,#0x800000
000034  1afffffb          BNE      |L1.40|
;;;27             outpw(REG_UART0_THR, '\r');
000038  e3a0100d          MOV      r1,#0xd
00003c  e3a0232e          MOV      r2,#0xb8000000
000040  e5821000          STR      r1,[r2,#0]
                  |L1.68|
;;;28         }
;;;29     }
000044  e12fff1e          BX       lr
;;;30     
                          ENDP

                  sysPutString PROC
;;;31     
;;;32     void sysPutString(INT8 *string)
000048  e52de004          PUSH     {lr}
;;;33     {
00004c  e1a03000          MOV      r3,r0
;;;34         while (*string != '\0') {
000050  ea000002          B        |L1.96|
                  |L1.84|
;;;35             _PutChar_f(*string);
000054  e5d30000          LDRB     r0,[r3,#0]
000058  ebfffffe          BL       _PutChar_f
;;;36             string++;
00005c  e2833001          ADD      r3,r3,#1
                  |L1.96|
000060  e5d30000          LDRB     r0,[r3,#0]            ;34
000064  e3500000          CMP      r0,#0                 ;34
000068  1afffff9          BNE      |L1.84|
;;;37         }
;;;38     }
00006c  e49df004          POP      {pc}
;;;39     
                          ENDP

                  sysPutRepChar PROC
;;;40     
;;;41     static void sysPutRepChar(INT8 c, INT count)
000070  e92d4010          PUSH     {r4,lr}
;;;42     {
000074  e1a04000          MOV      r4,r0
000078  e1a03001          MOV      r3,r1
;;;43         while (count--)
00007c  ea000001          B        |L1.136|
                  |L1.128|
;;;44             _PutChar_f(c);
000080  e1a00004          MOV      r0,r4
000084  ebfffffe          BL       _PutChar_f
                  |L1.136|
000088  e1b00003          MOVS     r0,r3                 ;43
00008c  e2433001          SUB      r3,r3,#1              ;43
000090  1afffffa          BNE      |L1.128|
;;;45     }
000094  e8bd8010          POP      {r4,pc}
;;;46     
                          ENDP

                  sysPutStringReverse PROC
;;;47     
;;;48     static void sysPutStringReverse(INT8 *s, INT index)
000098  e92d4010          PUSH     {r4,lr}
;;;49     {
00009c  e1a04000          MOV      r4,r0
0000a0  e1a03001          MOV      r3,r1
;;;50         while ((index--) > 0)
0000a4  ea000001          B        |L1.176|
                  |L1.168|
;;;51             _PutChar_f(s[index]);
0000a8  e7d40003          LDRB     r0,[r4,r3]
0000ac  ebfffffe          BL       _PutChar_f
                  |L1.176|
0000b0  e2530000          SUBS     r0,r3,#0              ;50
0000b4  e2433001          SUB      r3,r3,#1              ;50
0000b8  cafffffa          BGT      |L1.168|
;;;52     }
0000bc  e8bd8010          POP      {r4,pc}
;;;53     
                          ENDP

                  sysPutNumber PROC
;;;54     
;;;55     static void sysPutNumber(INT value, INT radix, INT width, INT8 fill)
0000c0  e92d4ff0          PUSH     {r4-r11,lr}
;;;56     {
0000c4  e24dd02c          SUB      sp,sp,#0x2c
0000c8  e1a07000          MOV      r7,r0
0000cc  e1a08001          MOV      r8,r1
0000d0  e1a04002          MOV      r4,r2
0000d4  e1a09003          MOV      r9,r3
;;;57         INT8    buffer[40];
;;;58         INT     bi = 0;
0000d8  e3a05000          MOV      r5,#0
;;;59         UINT32  uvalue;
;;;60         UINT16  digit;
;;;61         UINT16  left = FALSE;
0000dc  e3a0b000          MOV      r11,#0
;;;62         UINT16  negative = FALSE;
0000e0  e3a00000          MOV      r0,#0
0000e4  e58d0000          STR      r0,[sp,#0]
;;;63     
;;;64         if (fill == 0)
0000e8  e3590000          CMP      r9,#0
0000ec  1a000000          BNE      |L1.244|
;;;65             fill = ' ';
0000f0  e3a09020          MOV      r9,#0x20
                  |L1.244|
;;;66     
;;;67         if (width < 0) {
0000f4  e3540000          CMP      r4,#0
0000f8  aa000001          BGE      |L1.260|
;;;68             width = -width;
0000fc  e2644000          RSB      r4,r4,#0
;;;69             left = TRUE;
000100  e3a0b001          MOV      r11,#1
                  |L1.260|
;;;70         }
;;;71     
;;;72         if (width < 0 || width > 80)
000104  e3540000          CMP      r4,#0
000108  ba000001          BLT      |L1.276|
00010c  e3540050          CMP      r4,#0x50
000110  da000000          BLE      |L1.280|
                  |L1.276|
;;;73             width = 0;
000114  e3a04000          MOV      r4,#0
                  |L1.280|
;;;74     
;;;75         if (radix < 0) {
000118  e3580000          CMP      r8,#0
00011c  aa000005          BGE      |L1.312|
;;;76             radix = -radix;
000120  e2688000          RSB      r8,r8,#0
;;;77             if (value < 0) {
000124  e3570000          CMP      r7,#0
000128  aa000002          BGE      |L1.312|
;;;78                 negative = TRUE;
00012c  e3a00001          MOV      r0,#1
000130  e58d0000          STR      r0,[sp,#0]
;;;79                 value = -value;
000134  e2677000          RSB      r7,r7,#0
                  |L1.312|
;;;80             }
;;;81         }
;;;82     
;;;83         uvalue = value;
000138  e1a06007          MOV      r6,r7
;;;84     
;;;85         do {
00013c  e1a00000          MOV      r0,r0
                  |L1.320|
;;;86             if (radix != 16) {
000140  e3580010          CMP      r8,#0x10
000144  0a000009          BEQ      |L1.368|
;;;87                 digit = uvalue % radix;
000148  e1a01008          MOV      r1,r8
00014c  e1a00006          MOV      r0,r6
000150  ebfffffe          BL       __aeabi_uidivmod
000154  e1a0a801          LSL      r10,r1,#16
000158  e1a0a82a          LSR      r10,r10,#16
;;;88                 uvalue = uvalue / radix;
00015c  e1a01008          MOV      r1,r8
000160  e1a00006          MOV      r0,r6
000164  ebfffffe          BL       __aeabi_uidivmod
000168  e1a06000          MOV      r6,r0
00016c  ea000001          B        |L1.376|
                  |L1.368|
;;;89             } else {
;;;90                 digit = uvalue & 0xf;
000170  e206a00f          AND      r10,r6,#0xf
;;;91                 uvalue = uvalue >> 4;
000174  e1a06226          LSR      r6,r6,#4
                  |L1.376|
;;;92             }
;;;93             buffer[bi] = digit + ((digit <= 9) ? '0' : ('A' - 10));
000178  e35a0009          CMP      r10,#9
00017c  ca000001          BGT      |L1.392|
000180  e3a00030          MOV      r0,#0x30
000184  ea000000          B        |L1.396|
                  |L1.392|
000188  e3a00037          MOV      r0,#0x37
                  |L1.396|
00018c  e080000a          ADD      r0,r0,r10
000190  e28d1004          ADD      r1,sp,#4
000194  e7c10005          STRB     r0,[r1,r5]
;;;94             bi++;
000198  e2855001          ADD      r5,r5,#1
;;;95             #if(0)
;;;96             if (uvalue != 0) {
;;;97                 if ((radix == 10)
;;;98                         && ((bi == 3) || (bi == 7) || (bi == 11) | (bi == 15))) {
;;;99                     buffer[bi++] = ',';
;;;100                }
;;;101            }
;;;102            #endif
;;;103        } while (uvalue != 0);
00019c  e3560000          CMP      r6,#0
0001a0  1affffe6          BNE      |L1.320|
;;;104    
;;;105        if (negative) {
0001a4  e59d0000          LDR      r0,[sp,#0]
0001a8  e3500000          CMP      r0,#0
0001ac  0a000003          BEQ      |L1.448|
;;;106            buffer[bi] = '-';
0001b0  e3a0002d          MOV      r0,#0x2d
0001b4  e28d1004          ADD      r1,sp,#4
0001b8  e7c10005          STRB     r0,[r1,r5]
;;;107            bi += 1;
0001bc  e2855001          ADD      r5,r5,#1
                  |L1.448|
;;;108        }
;;;109    
;;;110        if (width <= bi)
0001c0  e1540005          CMP      r4,r5
0001c4  ca000003          BGT      |L1.472|
;;;111            sysPutStringReverse(buffer, bi);
0001c8  e1a01005          MOV      r1,r5
0001cc  e28d0004          ADD      r0,sp,#4
0001d0  ebfffffe          BL       sysPutStringReverse
0001d4  ea00000d          B        |L1.528|
                  |L1.472|
;;;112        else {
;;;113            width -= bi;
0001d8  e0444005          SUB      r4,r4,r5
;;;114            if (!left)
0001dc  e35b0000          CMP      r11,#0
0001e0  1a000002          BNE      |L1.496|
;;;115                sysPutRepChar(fill, width);
0001e4  e1a01004          MOV      r1,r4
0001e8  e1a00009          MOV      r0,r9
0001ec  ebfffffe          BL       sysPutRepChar
                  |L1.496|
;;;116            sysPutStringReverse(buffer, bi);
0001f0  e1a01005          MOV      r1,r5
0001f4  e28d0004          ADD      r0,sp,#4
0001f8  ebfffffe          BL       sysPutStringReverse
;;;117            if (left)
0001fc  e35b0000          CMP      r11,#0
000200  0a000002          BEQ      |L1.528|
;;;118                sysPutRepChar(fill, width);
000204  e1a01004          MOV      r1,r4
000208  e1a00009          MOV      r0,r9
00020c  ebfffffe          BL       sysPutRepChar
                  |L1.528|
;;;119        }
;;;120    }
000210  e28dd02c          ADD      sp,sp,#0x2c
000214  e8bd8ff0          POP      {r4-r11,pc}
;;;121    
                          ENDP

                  FormatItem PROC
;;;122    
;;;123    static INT8 *FormatItem(INT8 *f, INT a)
000218  e92d5ff0          PUSH     {r4-r12,lr}
;;;124    {
00021c  e1a06000          MOV      r6,r0
000220  e1a08001          MOV      r8,r1
;;;125        INT8   c;
;;;126        INT    fieldwidth = 0;
000224  e3a04000          MOV      r4,#0
;;;127        INT    leftjust = FALSE;
000228  e3a07000          MOV      r7,#0
;;;128        INT    radix = 0;
00022c  e3a09000          MOV      r9,#0
;;;129        INT8   fill = ' ';
000230  e3a0a020          MOV      r10,#0x20
;;;130    
;;;131        if (*f == '0')
000234  e5d60000          LDRB     r0,[r6,#0]
000238  e3500030          CMP      r0,#0x30
00023c  1a000000          BNE      |L1.580|
;;;132            fill = '0';
000240  e3a0a030          MOV      r10,#0x30
                  |L1.580|
;;;133    
;;;134        while ((c = *f++) != 0) {
000244  ea000075          B        |L1.1056|
                  |L1.584|
;;;135            if (c >= '0' && c <= '9') {
000248  e3550030          CMP      r5,#0x30
00024c  ba000005          BLT      |L1.616|
000250  e3550039          CMP      r5,#0x39
000254  ca000003          BGT      |L1.616|
;;;136                fieldwidth = (fieldwidth * 10) + (c - '0');
000258  e2450030          SUB      r0,r5,#0x30
00025c  e0841104          ADD      r1,r4,r4,LSL #2
000260  e0804081          ADD      r4,r0,r1,LSL #1
000264  ea000069          B        |L1.1040|
                  |L1.616|
;;;137            } else if (c == 'l')
000268  e355006c          CMP      r5,#0x6c
00026c  1a000000          BNE      |L1.628|
;;;138                continue;
000270  ea00006a          B        |L1.1056|
                  |L1.628|
;;;139            else
;;;140                switch (c) {
000274  e3550064          CMP      r5,#0x64
000278  0a00004d          BEQ      |L1.948|
00027c  ca00000e          BGT      |L1.700|
000280  e3550058          CMP      r5,#0x58
000284  0a000054          BEQ      |L1.988|
000288  ca000006          BGT      |L1.680|
00028c  e3550000          CMP      r5,#0
000290  0a000016          BEQ      |L1.752|
000294  e3550025          CMP      r5,#0x25
000298  0a000018          BEQ      |L1.768|
00029c  e355002d          CMP      r5,#0x2d
0002a0  1a000056          BNE      |L1.1024|
0002a4  ea00001a          B        |L1.788|
                  |L1.680|
0002a8  e3550062          CMP      r5,#0x62
0002ac  0a000050          BEQ      |L1.1012|
0002b0  e3550063          CMP      r5,#0x63
0002b4  1a000051          BNE      |L1.1024|
0002b8  ea000018          B        |L1.800|
                  |L1.700|
0002bc  e3550073          CMP      r5,#0x73
0002c0  0a000026          BEQ      |L1.864|
0002c4  ca000004          BGT      |L1.732|
0002c8  e3550069          CMP      r5,#0x69
0002cc  0a00003a          BEQ      |L1.956|
0002d0  e355006f          CMP      r5,#0x6f
0002d4  1a000049          BNE      |L1.1024|
0002d8  ea000042          B        |L1.1000|
                  |L1.732|
0002dc  e3550075          CMP      r5,#0x75
0002e0  0a000037          BEQ      |L1.964|
0002e4  e3550078          CMP      r5,#0x78
0002e8  1a000044          BNE      |L1.1024|
0002ec  ea000037          B        |L1.976|
                  |L1.752|
;;;141                case '\000':
0002f0  e1a00000          MOV      r0,r0
;;;142                    return (--f);
0002f4  e2460001          SUB      r0,r6,#1
0002f8  e1a06000          MOV      r6,r0
                  |L1.764|
;;;143                case '%':
;;;144                    _PutChar_f('%');
;;;145                    return (f);
;;;146                case '-':
;;;147                    leftjust = TRUE;
;;;148                    break;
;;;149                case 'c': {
;;;150                    if (leftjust)
;;;151                        _PutChar_f(a & 0x7f);
;;;152    
;;;153                    if (fieldwidth > 0)
;;;154                        sysPutRepChar(fill, fieldwidth - 1);
;;;155    
;;;156                    if (!leftjust)
;;;157                        _PutChar_f(a & 0x7f);
;;;158                    return (f);
;;;159                }
;;;160                case 's': {
;;;161                    if (leftjust)
;;;162                        sysPutString((PINT8)a);
;;;163    
;;;164                    if (fieldwidth > strlen((PINT8)a))
;;;165                        sysPutRepChar(fill, fieldwidth - strlen((PINT8)a));
;;;166    
;;;167                    if (!leftjust)
;;;168                        sysPutString((PINT8)a);
;;;169                    return (f);
;;;170                }
;;;171                case 'd':
;;;172                case 'i':
;;;173                    radix = -10;
;;;174                    break;
;;;175                case 'u':
;;;176                    radix = 10;
;;;177                    break;
;;;178                case 'x':
;;;179                    radix = 16;
;;;180                    break;
;;;181                case 'X':
;;;182                    radix = 16;
;;;183                    break;
;;;184                case 'o':
;;;185                    radix = 8;
;;;186                    break;
;;;187                case 'b':
;;;188                    radix = 2;
;;;189                    break;
;;;190                default:
;;;191                    radix = 3;
;;;192                    break;      /* unknown switch! */
;;;193                }
;;;194            if (radix)
;;;195                break;
;;;196        }
;;;197    
;;;198        if (leftjust)
;;;199            fieldwidth = -fieldwidth;
;;;200    
;;;201        sysPutNumber(a, radix, fieldwidth, fill);
;;;202    
;;;203        return (f);
;;;204    }
0002fc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.768|
000300  e1a00000          MOV      r0,r0                 ;143
000304  e3a00025          MOV      r0,#0x25              ;144
000308  ebfffffe          BL       _PutChar_f
00030c  e1a00006          MOV      r0,r6                 ;145
000310  eafffff9          B        |L1.764|
                  |L1.788|
000314  e1a00000          MOV      r0,r0                 ;146
000318  e3a07001          MOV      r7,#1                 ;147
00031c  ea00003a          B        |L1.1036|
                  |L1.800|
000320  e1a00000          MOV      r0,r0                 ;149
000324  e3570000          CMP      r7,#0                 ;150
000328  0a000001          BEQ      |L1.820|
00032c  e208007f          AND      r0,r8,#0x7f           ;151
000330  ebfffffe          BL       _PutChar_f
                  |L1.820|
000334  e3540000          CMP      r4,#0                 ;153
000338  da000002          BLE      |L1.840|
00033c  e2441001          SUB      r1,r4,#1              ;154
000340  e1a0000a          MOV      r0,r10                ;154
000344  ebfffffe          BL       sysPutRepChar
                  |L1.840|
000348  e3570000          CMP      r7,#0                 ;156
00034c  1a000001          BNE      |L1.856|
000350  e208007f          AND      r0,r8,#0x7f           ;157
000354  ebfffffe          BL       _PutChar_f
                  |L1.856|
000358  e1a00006          MOV      r0,r6                 ;158
00035c  eaffffe6          B        |L1.764|
                  |L1.864|
000360  e1a00000          MOV      r0,r0                 ;160
000364  e3570000          CMP      r7,#0                 ;161
000368  0a000001          BEQ      |L1.884|
00036c  e1a00008          MOV      r0,r8                 ;162
000370  ebfffffe          BL       sysPutString
                  |L1.884|
000374  e1a00008          MOV      r0,r8                 ;164
000378  ebfffffe          BL       strlen
00037c  e1500004          CMP      r0,r4                 ;164
000380  2a000005          BCS      |L1.924|
000384  e1a00008          MOV      r0,r8                 ;165
000388  ebfffffe          BL       strlen
00038c  e044b000          SUB      r11,r4,r0             ;165
000390  e1a0100b          MOV      r1,r11                ;165
000394  e1a0000a          MOV      r0,r10                ;165
000398  ebfffffe          BL       sysPutRepChar
                  |L1.924|
00039c  e3570000          CMP      r7,#0                 ;167
0003a0  1a000001          BNE      |L1.940|
0003a4  e1a00008          MOV      r0,r8                 ;168
0003a8  ebfffffe          BL       sysPutString
                  |L1.940|
0003ac  e1a00006          MOV      r0,r6                 ;169
0003b0  eaffffd1          B        |L1.764|
                  |L1.948|
0003b4  e1a00000          MOV      r0,r0                 ;171
0003b8  e1a00000          MOV      r0,r0                 ;172
                  |L1.956|
0003bc  e3e09009          MVN      r9,#9                 ;173
0003c0  ea000011          B        |L1.1036|
                  |L1.964|
0003c4  e1a00000          MOV      r0,r0                 ;175
0003c8  e3a0900a          MOV      r9,#0xa               ;176
0003cc  ea00000e          B        |L1.1036|
                  |L1.976|
0003d0  e1a00000          MOV      r0,r0                 ;178
0003d4  e3a09010          MOV      r9,#0x10              ;179
0003d8  ea00000b          B        |L1.1036|
                  |L1.988|
0003dc  e1a00000          MOV      r0,r0                 ;181
0003e0  e3a09010          MOV      r9,#0x10              ;182
0003e4  ea000008          B        |L1.1036|
                  |L1.1000|
0003e8  e1a00000          MOV      r0,r0                 ;184
0003ec  e3a09008          MOV      r9,#8                 ;185
0003f0  ea000005          B        |L1.1036|
                  |L1.1012|
0003f4  e1a00000          MOV      r0,r0                 ;187
0003f8  e3a09002          MOV      r9,#2                 ;188
0003fc  ea000002          B        |L1.1036|
                  |L1.1024|
000400  e1a00000          MOV      r0,r0                 ;190
000404  e3a09003          MOV      r9,#3                 ;191
000408  e1a00000          MOV      r0,r0                 ;192
                  |L1.1036|
00040c  e1a00000          MOV      r0,r0                 ;148
                  |L1.1040|
000410  e3590000          CMP      r9,#0                 ;194
000414  0a000000          BEQ      |L1.1052|
000418  ea000003          B        |L1.1068|
                  |L1.1052|
00041c  e1a00000          MOV      r0,r0                 ;138
                  |L1.1056|
000420  e4d65001          LDRB     r5,[r6],#1            ;134
000424  e3550000          CMP      r5,#0                 ;134
000428  1affff86          BNE      |L1.584|
                  |L1.1068|
00042c  e1a00000          MOV      r0,r0                 ;195
000430  e3570000          CMP      r7,#0                 ;198
000434  0a000000          BEQ      |L1.1084|
000438  e2644000          RSB      r4,r4,#0              ;199
                  |L1.1084|
00043c  e1a0300a          MOV      r3,r10                ;201
000440  e1a02004          MOV      r2,r4                 ;201
000444  e1a01009          MOV      r1,r9                 ;201
000448  e1a00008          MOV      r0,r8                 ;201
00044c  ebfffffe          BL       sysPutNumber
000450  e1a00006          MOV      r0,r6                 ;203
000454  eaffffa8          B        |L1.764|
;;;205    
                          ENDP

                  sysIsKbHit PROC
;;;206    
;;;207    INT  sysIsKbHit()
000458  e3a0032e          MOV      r0,#0xb8000000
;;;208    {
;;;209        //terninalPrintf("sysIsKbHit\n");
;;;210        //terninalPrintf("FSR=%d  \n",inpw(REG_UART0_FSR));
;;;211        if (inpw(REG_UART0_FSR) & (1 << 14))
00045c  e5900018          LDR      r0,[r0,#0x18]
000460  e3100901          TST      r0,#0x4000
000464  0a000001          BEQ      |L1.1136|
;;;212            return 0;
000468  e3a00000          MOV      r0,#0
                  |L1.1132|
;;;213        else
;;;214            return 1;
;;;215    }
00046c  e12fff1e          BX       lr
                  |L1.1136|
000470  e3a00001          MOV      r0,#1                 ;214
000474  eafffffc          B        |L1.1132|
;;;216    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysInitializeUART PROC
;;;223     */
;;;224    INT32 sysInitializeUART(void)
000478  e3a0020b          MOV      r0,#0xb0000000
;;;225    {
;;;226        /* enable UART0 clock */
;;;227        outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0) | 0x10000);
00047c  e5900218          LDR      r0,[r0,#0x218]
000480  e3800801          ORR      r0,r0,#0x10000
000484  e3a0120b          MOV      r1,#0xb0000000
000488  e5810218          STR      r0,[r1,#0x218]
;;;228    
;;;229        /* GPE0, GPE1 */
;;;230        outpw(REG_SYS_GPE_MFPL, (inpw(REG_SYS_GPE_MFPL) & 0xffffff00) | 0x99);  // UART0 multi-function
00048c  e3a0020b          MOV      r0,#0xb0000000
000490  e5900090          LDR      r0,[r0,#0x90]
000494  e3c000ff          BIC      r0,r0,#0xff
000498  e3800099          ORR      r0,r0,#0x99
00049c  e5810090          STR      r0,[r1,#0x90]
;;;231    
;;;232        /* UART0 line configuration for (115200,n,8,1) */
;;;233        outpw(REG_UART0_LCR, inpw(REG_UART0_LCR) | 0x7);
0004a0  e3a0032e          MOV      r0,#0xb8000000
0004a4  e590000c          LDR      r0,[r0,#0xc]
0004a8  e3800007          ORR      r0,r0,#7
0004ac  e3a0132e          MOV      r1,#0xb8000000
0004b0  e581000c          STR      r0,[r1,#0xc]
;;;234        outpw(REG_UART0_BAUD, 0x30000066); /* 12MHz reference clock input, 115200 */
0004b4  e59f0168          LDR      r0,|L1.1572|
0004b8  e5810024          STR      r0,[r1,#0x24]
;;;235        return 0;
0004bc  e3a00000          MOV      r0,#0
;;;236    }
0004c0  e12fff1e          BX       lr
;;;237    
                          ENDP

                  setPrintfFlag PROC
;;;238    static BOOL justTerminalPrintfFlag = FALSE;
;;;239    void setPrintfFlag(BOOL flag)
0004c4  e59f115c          LDR      r1,|L1.1576|
;;;240    {
;;;241        justTerminalPrintfFlag = flag;
0004c8  e5c10000          STRB     r0,[r1,#0]  ; justTerminalPrintfFlag
;;;242    }
0004cc  e12fff1e          BX       lr
;;;243    /**
                          ENDP

                  sysprintf PROC
;;;249     */
;;;250    void sysprintf(PINT8 pcStr,...)
0004d0  e92d000f          PUSH     {r0-r3}
;;;251    {
0004d4  e92d4010          PUSH     {r4,lr}
;;;252        INT8  *argP;
;;;253        if(justTerminalPrintfFlag)
0004d8  e59f0148          LDR      r0,|L1.1576|
0004dc  e5d00000          LDRB     r0,[r0,#0]  ; justTerminalPrintfFlag
0004e0  e3500000          CMP      r0,#0
0004e4  0a000001          BEQ      |L1.1264|
                  |L1.1256|
;;;254            return;
;;;255        vaStart(argP, pcStr);       /* point at the end of the format string */
;;;256        while (*pcStr)
;;;257        {
;;;258            /* this works because args are all ints */
;;;259            if (*pcStr == '%')
;;;260                pcStr = FormatItem(pcStr + 1, vaArg(argP, INT));
;;;261            else
;;;262                _PutChar_f(*pcStr++);
;;;263        }
;;;264    }
0004e8  e49d4004          POP      {r4}
0004ec  e49df014          LDR      pc,[sp],#0x14
                  |L1.1264|
0004f0  e28d400c          ADD      r4,sp,#0xc            ;255
0004f4  ea000011          B        |L1.1344|
                  |L1.1272|
0004f8  e59d0008          LDR      r0,[sp,#8]            ;259
0004fc  e5d00000          LDRB     r0,[r0,#0]            ;259
000500  e3500025          CMP      r0,#0x25              ;259
000504  1a000007          BNE      |L1.1320|
000508  e2840004          ADD      r0,r4,#4              ;260
00050c  e1a04000          MOV      r4,r0                 ;260
000510  e5101004          LDR      r1,[r0,#-4]           ;260
000514  e59d0008          LDR      r0,[sp,#8]            ;260
000518  e2800001          ADD      r0,r0,#1              ;260
00051c  ebfffffe          BL       FormatItem
000520  e58d0008          STR      r0,[sp,#8]            ;260
000524  ea000005          B        |L1.1344|
                  |L1.1320|
000528  e59d1008          LDR      r1,[sp,#8]            ;262
00052c  e5d10000          LDRB     r0,[r1,#0]            ;262
000530  e59d2008          LDR      r2,[sp,#8]            ;262
000534  e2822001          ADD      r2,r2,#1              ;262
000538  e58d2008          STR      r2,[sp,#8]            ;262
00053c  ebfffffe          BL       _PutChar_f
                  |L1.1344|
000540  e59d0008          LDR      r0,[sp,#8]            ;256
000544  e5d00000          LDRB     r0,[r0,#0]            ;256
000548  e3500000          CMP      r0,#0                 ;256
00054c  1affffe9          BNE      |L1.1272|
000550  e1a00000          MOV      r0,r0
000554  eaffffe3          B        |L1.1256|
;;;265    
                          ENDP

                  terninalPrintf PROC
;;;273     */
;;;274    void terninalPrintf(PINT8 pcStr,...)
000558  e92d000f          PUSH     {r0-r3}
;;;275    {
00055c  e92d4010          PUSH     {r4,lr}
;;;276        INT8  *argP;
;;;277    
;;;278        vaStart(argP, pcStr);       /* point at the end of the format string */
000560  e28d400c          ADD      r4,sp,#0xc
;;;279        while (*pcStr) {
000564  ea000011          B        |L1.1456|
                  |L1.1384|
;;;280            /* this works because args are all ints */
;;;281            if (*pcStr == '%')
000568  e59d0008          LDR      r0,[sp,#8]
00056c  e5d00000          LDRB     r0,[r0,#0]
000570  e3500025          CMP      r0,#0x25
000574  1a000007          BNE      |L1.1432|
;;;282                pcStr = FormatItem(pcStr + 1, vaArg(argP, INT));
000578  e2840004          ADD      r0,r4,#4
00057c  e1a04000          MOV      r4,r0
000580  e5101004          LDR      r1,[r0,#-4]
000584  e59d0008          LDR      r0,[sp,#8]
000588  e2800001          ADD      r0,r0,#1
00058c  ebfffffe          BL       FormatItem
000590  e58d0008          STR      r0,[sp,#8]
000594  ea000005          B        |L1.1456|
                  |L1.1432|
;;;283            else
;;;284                _PutChar_f(*pcStr++);
000598  e59d1008          LDR      r1,[sp,#8]
00059c  e5d10000          LDRB     r0,[r1,#0]
0005a0  e59d2008          LDR      r2,[sp,#8]
0005a4  e2822001          ADD      r2,r2,#1
0005a8  e58d2008          STR      r2,[sp,#8]
0005ac  ebfffffe          BL       _PutChar_f
                  |L1.1456|
0005b0  e59d0008          LDR      r0,[sp,#8]            ;279
0005b4  e5d00000          LDRB     r0,[r0,#0]            ;279
0005b8  e3500000          CMP      r0,#0                 ;279
0005bc  1affffe9          BNE      |L1.1384|
;;;285        }
;;;286    }
0005c0  e49d4004          POP      {r4}
0005c4  e49df014          LDR      pc,[sp],#0x14
;;;287    
                          ENDP

                  sysGetChar PROC
;;;293     */
;;;294    INT8 sysGetChar(void)
0005c8  ea00000c          B        |L1.1536|
                  |L1.1484|
;;;295    {
;;;296        int i;
;;;297        while (1) {
;;;298            for(i=0; i<0x1000; i++);
0005cc  e3a01000          MOV      r1,#0
0005d0  ea000000          B        |L1.1496|
                  |L1.1492|
0005d4  e2811001          ADD      r1,r1,#1
                  |L1.1496|
0005d8  e3510a01          CMP      r1,#0x1000
0005dc  bafffffc          BLT      |L1.1492|
;;;299            if (!(inpw(REG_UART0_FSR) & (1 << 14))) {
0005e0  e3a0032e          MOV      r0,#0xb8000000
0005e4  e5900018          LDR      r0,[r0,#0x18]
0005e8  e3100901          TST      r0,#0x4000
0005ec  1a000003          BNE      |L1.1536|
;;;300                return (inpw(REG_UART0_RBR));
0005f0  e3a0032e          MOV      r0,#0xb8000000
0005f4  e5900000          LDR      r0,[r0,#0]
0005f8  e20000ff          AND      r0,r0,#0xff
;;;301            }
;;;302        }
;;;303    }
0005fc  e12fff1e          BX       lr
                  |L1.1536|
000600  eafffff1          B        |L1.1484|
;;;304    
                          ENDP

                  sysPutChar PROC
;;;311     */
;;;312    void sysPutChar(UINT8 ucCh)
000604  e1a00000          MOV      r0,r0
                  |L1.1544|
;;;313    {
;;;314        volatile int loop;
;;;315        while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000608  e3a0132e          MOV      r1,#0xb8000000
00060c  e5911018          LDR      r1,[r1,#0x18]
000610  e3110502          TST      r1,#0x800000
000614  1afffffb          BNE      |L1.1544|
;;;316        outpw(REG_UART0_THR, ucCh);
000618  e3a0132e          MOV      r1,#0xb8000000
00061c  e5810000          STR      r0,[r1,#0]
;;;317    }
000620  e12fff1e          BX       lr
;;;318    
                          ENDP

                  |L1.1572|
                          DCD      0x30000066
                  |L1.1576|
                          DCD      justTerminalPrintfFlag

                          AREA ||.data||, DATA, ALIGN=0

                  justTerminalPrintfFlag
000000  00                DCB      0x00
