; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\fileagent.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fileagent.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\fileagent.crf src\syshal\fileagent.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  FileAgentPreOffCallback PROC
;;;112    
;;;113    static BOOL FileAgentPreOffCallback(int flag)
000000  e1a01000          MOV      r1,r0
;;;114    {
;;;115        BOOL reVal = TRUE;
000004  e3a00001          MOV      r0,#1
;;;116        fileAgentPowerStatusFlag = TRUE;
000008  e3a02001          MOV      r2,#1
00000c  e59f3224          LDR      r3,|L1.568|
000010  e5c32000          STRB     r2,[r3,#0]  ; fileAgentPowerStatusFlag
;;;117        //sysprintf("### FileAgent OFF Callback [%s] ###\r\n", fileAgentPowerCallabck.drvName);    
;;;118        return reVal;    
;;;119    }
000014  e12fff1e          BX       lr
;;;120    static BOOL FileAgentOffCallback(int flag)
                          ENDP

                  FileAgentOffCallback PROC
000018  e92d4070          PUSH     {r4-r6,lr}
;;;121    {
00001c  e1a05000          MOV      r5,r0
;;;122        int timers;
;;;123        if(flag)
000020  e3550000          CMP      r5,#0
000024  0a000001          BEQ      |L1.48|
;;;124        {
;;;125            timers = 10000/10;
000028  e3a04ffa          MOV      r4,#0x3e8
00002c  ea000000          B        |L1.52|
                  |L1.48|
;;;126        }
;;;127        else
;;;128        {
;;;129            timers = 2000/10;
000030  e3a040c8          MOV      r4,#0xc8
                  |L1.52|
;;;130        }
;;;131        
;;;132        while(!fileAgentPowerStatus)
000034  ea00000a          B        |L1.100|
                  |L1.56|
;;;133        {
;;;134            sysprintf("[f]");
000038  e28f0f7f          ADR      r0,|L1.572|
00003c  ebfffffe          BL       sysprintf
;;;135            if(timers-- == 0)
000040  e1b00004          MOVS     r0,r4
000044  e2444001          SUB      r4,r4,#1
000048  1a000003          BNE      |L1.92|
;;;136            {
;;;137                sysprintf("\r\n ####  [FileAgentOffCallback FALSE]  ####  \r\n");
00004c  e28f0f7b          ADR      r0,|L1.576|
000050  ebfffffe          BL       sysprintf
;;;138                return FALSE;
000054  e3a00000          MOV      r0,#0
                  |L1.88|
;;;139            }
;;;140            vTaskDelay(10/portTICK_RATE_MS); 
;;;141        }
;;;142        return TRUE;   
;;;143    }
000058  e8bd8070          POP      {r4-r6,pc}
                  |L1.92|
00005c  e3a00001          MOV      r0,#1                 ;140
000060  ebfffffe          BL       vTaskDelay
                  |L1.100|
000064  e59f0204          LDR      r0,|L1.624|
000068  e5d00000          LDRB     r0,[r0,#0]            ;132  ; fileAgentPowerStatus
00006c  e3500000          CMP      r0,#0                 ;132
000070  0afffff0          BEQ      |L1.56|
000074  e3a00001          MOV      r0,#1                 ;142
000078  eafffff6          B        |L1.88|
;;;144    static BOOL FileAgentOnCallback(int flag)
                          ENDP

                  FileAgentOnCallback PROC
00007c  e1a01000          MOV      r1,r0
;;;145    {
;;;146        BOOL reVal = TRUE;
000080  e3a00001          MOV      r0,#1
;;;147        fileAgentPowerStatusFlag = FALSE;
000084  e3a02000          MOV      r2,#0
000088  e59f31a8          LDR      r3,|L1.568|
00008c  e5c32000          STRB     r2,[r3,#0]  ; fileAgentPowerStatusFlag
;;;148        return reVal;    
;;;149    }
000090  e12fff1e          BX       lr
;;;150    static BOOL FileAgentCheckStatus(int flag)
                          ENDP

                  FileAgentCheckStatus PROC
000094  e1a01000          MOV      r1,r0
;;;151    {
;;;152        //BOOL reVal = TRUE;
;;;153        //sysprintf("### fileAgent STATUS Callback [%s] ###\r\n", fileAgentPowerCallabck.drvName); 
;;;154        return fileAgentPowerStatus;    
000098  e59f01d0          LDR      r0,|L1.624|
00009c  e5d00000          LDRB     r0,[r0,#0]  ; fileAgentPowerStatus
;;;155    }
0000a0  e12fff1e          BX       lr
;;;156    
                          ENDP

                  getChecksum PROC
;;;174    */
;;;175    static uint16_t getChecksum(uint8_t* pTarget, uint16_t len, char* str)
0000a4  e92d4030          PUSH     {r4,r5,lr}
;;;176    {
0000a8  e1a03000          MOV      r3,r0
0000ac  e1a0c001          MOV      r12,r1
0000b0  e1a04002          MOV      r4,r2
;;;177        int i;
;;;178        uint16_t checksum = 0;
0000b4  e3a00000          MOV      r0,#0
;;;179        uint8_t* pr = (uint8_t*)pTarget;
0000b8  e1a02003          MOV      r2,r3
;;;180        for(i = 0; i< len; i++) //???checksum ?????
0000bc  e3a01000          MOV      r1,#0
0000c0  ea000004          B        |L1.216|
                  |L1.196|
;;;181        {
;;;182            checksum = checksum + pr[i];
0000c4  e7d25001          LDRB     r5,[r2,r1]
0000c8  e0855000          ADD      r5,r5,r0
0000cc  e1a00805          LSL      r0,r5,#16
0000d0  e1a00820          LSR      r0,r0,#16
0000d4  e2811001          ADD      r1,r1,#1              ;180
                  |L1.216|
0000d8  e151000c          CMP      r1,r12                ;180
0000dc  bafffff8          BLT      |L1.196|
;;;183        }
;;;184        //sysprintf("  -- getChecksum (%s) : checksum = 0x%x (%d)\r\n", str, checksum, checksum); 
;;;185        return checksum;
;;;186    }
0000e0  e8bd8030          POP      {r4,r5,pc}
;;;187    
                          ENDP

                  fatfsMkdir PROC
;;;188    static FRESULT fatfsMkdir(char* dir)
0000e4  e92d47f0          PUSH     {r4-r10,lr}
;;;189    {
0000e8  e24ddc01          SUB      sp,sp,#0x100
0000ec  e1a04000          MOV      r4,r0
;;;190        //reval = f_mkdir("0:\\Test1");
;;;191        //reval = f_mkdir("0:\\Test1\\Test2");
;;;192        //reval = f_mkdir("0:\\Test1\\Test2\\Test3");
;;;193        int dirLength = strlen(dir);
0000f0  e1a00004          MOV      r0,r4
0000f4  ebfffffe          BL       strlen
0000f8  e1a06000          MOV      r6,r0
;;;194        if (dir[dirLength-1] == ':') {
0000fc  e2460001          SUB      r0,r6,#1
000100  e7d40000          LDRB     r0,[r4,r0]
000104  e350003a          CMP      r0,#0x3a
000108  1a000002          BNE      |L1.280|
;;;195            return FR_OK;
00010c  e3a00000          MOV      r0,#0
                  |L1.272|
000110  e28ddc01          ADD      sp,sp,#0x100
;;;196        }
;;;197        //If last character is slash symbol, cut it !!
;;;198        if ((dir[dirLength-1] == '\\') || (dir[dirLength-1] == '/'))
;;;199        {
;;;200            dir[dirLength-1] = 0x00;
;;;201            dirLength--;
;;;202        }
;;;203        
;;;204        int pathLevel = 0;
;;;205        int i;
;;;206        //Calculate the number of Levels of sub-directory
;;;207        for (i = 0 ; i < dirLength ; i++)
;;;208        {
;;;209            if ((dir[i] == '\\') || (dir[i] == '/')) {
;;;210                pathLevel++;
;;;211            }
;;;212        }
;;;213        if (pathLevel == 0) {
;;;214            return FR_OK;
;;;215        }
;;;216        
;;;217        char pathName[256];
;;;218        int buffIdx = 0;
;;;219        memset(pathName, 0x00, sizeof(pathName));
;;;220        //Check and mkdir ==> level by level
;;;221        for (i = 1 ; i <= pathLevel ; i++)
;;;222        {
;;;223            int hits = 0;
;;;224            for (buffIdx = 0 ; buffIdx < dirLength ; buffIdx++)
;;;225            {
;;;226                if ((dir[buffIdx] == '\\') || (dir[buffIdx] == '/'))
;;;227                {
;;;228                    hits++;
;;;229                    if (hits == (i + 1)) {
;;;230                        break;
;;;231                    }
;;;232                }
;;;233                pathName[buffIdx] = dir[buffIdx];
;;;234            }
;;;235            if (f_chdir(pathName) != FR_OK)
;;;236            {
;;;237                FRESULT reval = f_mkdir(pathName);
;;;238                if (reval != FR_OK) {
;;;239                    return reval;
;;;240                }
;;;241            }
;;;242        }
;;;243        return FR_OK;
;;;244    }
000114  e8bd87f0          POP      {r4-r10,pc}
                  |L1.280|
000118  e2460001          SUB      r0,r6,#1              ;198
00011c  e7d40000          LDRB     r0,[r4,r0]            ;198
000120  e350005c          CMP      r0,#0x5c              ;198
000124  0a000003          BEQ      |L1.312|
000128  e2460001          SUB      r0,r6,#1              ;198
00012c  e7d40000          LDRB     r0,[r4,r0]            ;198
000130  e350002f          CMP      r0,#0x2f              ;198
000134  1a000003          BNE      |L1.328|
                  |L1.312|
000138  e3a00000          MOV      r0,#0                 ;200
00013c  e2461001          SUB      r1,r6,#1              ;200
000140  e7c40001          STRB     r0,[r4,r1]            ;200
000144  e2466001          SUB      r6,r6,#1              ;201
                  |L1.328|
000148  e3a08000          MOV      r8,#0                 ;204
00014c  e3a05000          MOV      r5,#0                 ;207
000150  ea000007          B        |L1.372|
                  |L1.340|
000154  e7d40005          LDRB     r0,[r4,r5]            ;209
000158  e350005c          CMP      r0,#0x5c              ;209
00015c  0a000002          BEQ      |L1.364|
000160  e7d40005          LDRB     r0,[r4,r5]            ;209
000164  e350002f          CMP      r0,#0x2f              ;209
000168  1a000000          BNE      |L1.368|
                  |L1.364|
00016c  e2888001          ADD      r8,r8,#1              ;210
                  |L1.368|
000170  e2855001          ADD      r5,r5,#1              ;207
                  |L1.372|
000174  e1550006          CMP      r5,r6                 ;207
000178  bafffff5          BLT      |L1.340|
00017c  e3580000          CMP      r8,#0                 ;213
000180  1a000001          BNE      |L1.396|
000184  e3a00000          MOV      r0,#0                 ;214
000188  eaffffe0          B        |L1.272|
                  |L1.396|
00018c  e3a07000          MOV      r7,#0                 ;218
000190  e3a01c01          MOV      r1,#0x100             ;219
000194  e1a0000d          MOV      r0,sp                 ;219
000198  ebfffffe          BL       __aeabi_memclr4
00019c  e3a05001          MOV      r5,#1                 ;221
0001a0  ea000020          B        |L1.552|
                  |L1.420|
0001a4  e3a09000          MOV      r9,#0                 ;223
0001a8  e3a07000          MOV      r7,#0                 ;224
0001ac  ea00000d          B        |L1.488|
                  |L1.432|
0001b0  e7d40007          LDRB     r0,[r4,r7]            ;226
0001b4  e350005c          CMP      r0,#0x5c              ;226
0001b8  0a000002          BEQ      |L1.456|
0001bc  e7d40007          LDRB     r0,[r4,r7]            ;226
0001c0  e350002f          CMP      r0,#0x2f              ;226
0001c4  1a000004          BNE      |L1.476|
                  |L1.456|
0001c8  e2899001          ADD      r9,r9,#1              ;228
0001cc  e2850001          ADD      r0,r5,#1              ;229
0001d0  e1590000          CMP      r9,r0                 ;229
0001d4  1a000000          BNE      |L1.476|
0001d8  ea000004          B        |L1.496|
                  |L1.476|
0001dc  e7d40007          LDRB     r0,[r4,r7]            ;233
0001e0  e7cd0007          STRB     r0,[sp,r7]            ;233
0001e4  e2877001          ADD      r7,r7,#1              ;224
                  |L1.488|
0001e8  e1570006          CMP      r7,r6                 ;224
0001ec  baffffef          BLT      |L1.432|
                  |L1.496|
0001f0  e1a00000          MOV      r0,r0                 ;230
0001f4  e1a0000d          MOV      r0,sp                 ;235
0001f8  ebfffffe          BL       f_chdir
0001fc  e3500000          CMP      r0,#0                 ;235
000200  0a000007          BEQ      |L1.548|
000204  e1a0000d          MOV      r0,sp                 ;237
000208  ebfffffe          BL       f_mkdir
00020c  e1a0a000          MOV      r10,r0                ;237
000210  e35a0000          CMP      r10,#0                ;238
000214  0a000001          BEQ      |L1.544|
000218  e1a0000a          MOV      r0,r10                ;239
00021c  eaffffbb          B        |L1.272|
                  |L1.544|
000220  e1a00000          MOV      r0,r0                 ;241
                  |L1.548|
000224  e2855001          ADD      r5,r5,#1              ;221
                  |L1.552|
000228  e1550008          CMP      r5,r8                 ;221
00022c  daffffdc          BLE      |L1.420|
000230  e3a00000          MOV      r0,#0                 ;243
000234  eaffffb5          B        |L1.272|
                  |L1.568|
                          DCD      fileAgentPowerStatusFlag
                  |L1.572|
00023c  5b665d00          DCB      "[f]",0
                  |L1.576|
000240  0d0a2023          DCB      "\r\n ####  [FileAgentOffCallback FALSE]  ####  \r\n",0
000244  23232320
000248  205b4669
00024c  6c654167
000250  656e744f
000254  66664361
000258  6c6c6261
00025c  636b2046
000260  414c5345
000264  5d202023
000268  23232320
00026c  200d0a00
                  |L1.624|
                          DCD      fileAgentPowerStatus
                          ENDP

                  fatfsSaveToFile PROC
;;;245    
;;;246    static BOOL fatfsSaveToFile(char* dir,char* name, FileAgentAddType addType, uint8_t* buff, size_t buffLen, BOOL checkMode)
000274  e92d5ff0          PUSH     {r4-r12,lr}
;;;247    {    
000278  e24ddd45          SUB      sp,sp,#0x1140
00027c  e1a05000          MOV      r5,r0
000280  e1a0a001          MOV      r10,r1
000284  e1a07002          MOV      r7,r2
000288  e1a08003          MOV      r8,r3
00028c  e28d0a01          ADD      r0,sp,#0x1000
000290  e5906168          LDR      r6,[r0,#0x168]
000294  e590b16c          LDR      r11,[r0,#0x16c]
;;;248        FIL MyFile;
;;;249        uint32_t bytesWritten = 0;
000298  e3a01000          MOV      r1,#0
00029c  e58d1118          STR      r1,[sp,#0x118]
;;;250        FRESULT reval;
;;;251        char fileName[_MAX_LFN];
;;;252        xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY); 
0002a0  e3a03000          MOV      r3,#0
0002a4  e3e02000          MVN      r2,#0
0002a8  e1a01003          MOV      r1,r3
0002ac  e59f02e4          LDR      r0,|L1.1432|
0002b0  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
0002b4  ebfffffe          BL       xQueueGenericReceive
;;;253        //sysprintf("fatfsSaveToFile %s%s (addType:%d, buffLen:%d): [%s]\r\n", dir, name, addType, buffLen, buff);
;;;254        //sysprintf("fatfsSaveToFile %s%s (addType:%d, buffLen:%d)\r\n", dir, name, addType, buffLen);
;;;255        
;;;256        // 20200601 reference original burning program and modify by Steven-------------------- 
;;;257        //sprintf(fileName, "%s%s", dir, name);
;;;258        
;;;259        fatfsMkdir(dir);
0002b8  e1a00005          MOV      r0,r5
0002bc  ebfffffe          BL       fatfsMkdir
;;;260        int dirLength = strlen(dir);
0002c0  e1a00005          MOV      r0,r5
0002c4  ebfffffe          BL       strlen
0002c8  e1a09000          MOV      r9,r0
;;;261        if ((dir[dirLength-1] == ':') || (dir[dirLength-1] == '\\') || (dir[dirLength-1] == '/')) {
0002cc  e2490001          SUB      r0,r9,#1
0002d0  e7d50000          LDRB     r0,[r5,r0]
0002d4  e350003a          CMP      r0,#0x3a
0002d8  0a000007          BEQ      |L1.764|
0002dc  e2490001          SUB      r0,r9,#1
0002e0  e7d50000          LDRB     r0,[r5,r0]
0002e4  e350005c          CMP      r0,#0x5c
0002e8  0a000003          BEQ      |L1.764|
0002ec  e2490001          SUB      r0,r9,#1
0002f0  e7d50000          LDRB     r0,[r5,r0]
0002f4  e350002f          CMP      r0,#0x2f
0002f8  1a000005          BNE      |L1.788|
                  |L1.764|
;;;262            sprintf(fileName, "%s%s", dir, name);
0002fc  e1a0300a          MOV      r3,r10
000300  e1a02005          MOV      r2,r5
000304  e28f1e29          ADR      r1,|L1.1436|
000308  e28d0018          ADD      r0,sp,#0x18
00030c  ebfffffe          BL       __2sprintf
000310  ea000004          B        |L1.808|
                  |L1.788|
;;;263        }
;;;264        else {
;;;265            sprintf(fileName, "%s\\%s", dir, name);
000314  e1a0300a          MOV      r3,r10
000318  e1a02005          MOV      r2,r5
00031c  e28f1d0a          ADR      r1,|L1.1444|
000320  e28d0018          ADD      r0,sp,#0x18
000324  ebfffffe          BL       __2sprintf
                  |L1.808|
;;;266        }
;;;267        //-------------------------------------------------------------------------------------
;;;268        switch(addType)
000328  e3570000          CMP      r7,#0
00032c  0a000002          BEQ      |L1.828|
000330  e3570001          CMP      r7,#1
000334  1a000010          BNE      |L1.892|
000338  ea000008          B        |L1.864|
                  |L1.828|
;;;269        {
;;;270            case FILE_AGENT_ADD_DATA_TYPE_OVERWRITE:
00033c  e1a00000          MOV      r0,r0
;;;271                f_unlink(fileName);
000340  e28d0018          ADD      r0,sp,#0x18
000344  ebfffffe          BL       f_unlink
;;;272                reval = f_open(&MyFile, fileName, FA_CREATE_NEW|FA_WRITE);
000348  e3a02006          MOV      r2,#6
00034c  e28d1018          ADD      r1,sp,#0x18
000350  e28d0f47          ADD      r0,sp,#0x11c
000354  ebfffffe          BL       f_open
000358  e1a04000          MOV      r4,r0
;;;273                //reval = f_open(&MyFile, fileName, FA_CREATE_ALWAYS|FA_WRITE);
;;;274                break;
00035c  ea000006          B        |L1.892|
                  |L1.864|
;;;275            case FILE_AGENT_ADD_DATA_TYPE_APPEND:
000360  e1a00000          MOV      r0,r0
;;;276                reval = f_open(&MyFile, fileName, FA_OPEN_ALWAYS|FA_WRITE);
000364  e3a02012          MOV      r2,#0x12
000368  e28d1018          ADD      r1,sp,#0x18
00036c  e28d0f47          ADD      r0,sp,#0x11c
000370  ebfffffe          BL       f_open
000374  e1a04000          MOV      r4,r0
;;;277                break;    
000378  e1a00000          MOV      r0,r0
                  |L1.892|
00037c  e1a00000          MOV      r0,r0                 ;274
;;;278        }    
;;;279        //sysprintf("fatfsSaveToFile %s%s OPEN OK\r\n", dir, name);
;;;280        if(reval != FR_OK) 
000380  e3540000          CMP      r4,#0
000384  0a00000c          BEQ      |L1.956|
;;;281        {
;;;282            sysprintf("fatfsSaveToFile %s : open error[%d]\r\n", fileName, reval);
000388  e1a02004          MOV      r2,r4
00038c  e28d1018          ADD      r1,sp,#0x18
000390  e28f0f85          ADR      r0,|L1.1452|
000394  ebfffffe          BL       sysprintf
;;;283            xSemaphoreGive(xFatfsReadWriteMutex); 
000398  e3a03000          MOV      r3,#0
00039c  e1a02003          MOV      r2,r3
0003a0  e1a01003          MOV      r1,r3
0003a4  e59f01ec          LDR      r0,|L1.1432|
0003a8  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
0003ac  ebfffffe          BL       xQueueGenericSend
;;;284            return FALSE;
0003b0  e3a00000          MOV      r0,#0
                  |L1.948|
0003b4  e28ddd45          ADD      sp,sp,#0x1140
;;;285        }
;;;286        
;;;287        switch(addType)
;;;288        {
;;;289            case FILE_AGENT_ADD_DATA_TYPE_OVERWRITE:
;;;290                break;
;;;291            case FILE_AGENT_ADD_DATA_TYPE_APPEND:
;;;292                //sysprintf("fatfsSaveToFile %s : f_lseek %d \r\n", fileName, f_size(&MyFile));
;;;293                f_lseek(&MyFile, f_size(&MyFile));
;;;294                break;    
;;;295        }
;;;296        if(checkMode)
;;;297        {
;;;298            faHeader.Len = buffLen;
;;;299            reval= f_write (&MyFile, &faHeader, sizeof(faHeader), (void *)&bytesWritten);
;;;300            if((bytesWritten != sizeof(faHeader)) || (reval != FR_OK)) /*EOF or Error*/
;;;301            {
;;;302                sysprintf("fatfsSaveToFile %s : write faHeader error (%d)\r\n", fileName, reval);
;;;303                f_close(&MyFile); 
;;;304                reval = f_unlink(fileName);
;;;305                sysprintf("fatfsSaveToFile %s : delete it (errorcode: %d)\r\n", fileName, reval);
;;;306                xSemaphoreGive(xFatfsReadWriteMutex); 
;;;307                return FALSE;
;;;308            }
;;;309        }
;;;310        //sysprintf("fatfsSaveToFile %s%s START WRITE\r\n", dir, name);
;;;311        reval= f_write (&MyFile, buff, buffLen, (void *)&bytesWritten);    
;;;312        if((bytesWritten != buffLen) || (reval != FR_OK)) /*EOF or Error*/
;;;313        {
;;;314            sysprintf("fatfsSaveToFile %s : write error\r\n", fileName);
;;;315            f_close(&MyFile); 
;;;316            reval = f_unlink(fileName);
;;;317            sysprintf("fatfsSaveToFile %s : delete it (errorcode: %d)\r\n", fileName, reval);
;;;318            xSemaphoreGive(xFatfsReadWriteMutex); 
;;;319            return FALSE;
;;;320        }
;;;321        //sysprintf("fatfsSaveToFile %s%s WRITE OK\r\n", dir, name);
;;;322        if(checkMode)
;;;323        {
;;;324            faEnd.checksum = getChecksum(buff, buffLen, "fatfsSaveToFile");
;;;325            reval= f_write (&MyFile, &faEnd, sizeof(faEnd), (void *)&bytesWritten);
;;;326            if((bytesWritten != sizeof(faEnd)) || (reval != FR_OK)) /*EOF or Error*/
;;;327            {
;;;328                sysprintf("fatfsSaveToFile %s : write faEnd error (%d)\r\n", fileName, reval);
;;;329                f_close(&MyFile); 
;;;330                reval = f_unlink(fileName);
;;;331                sysprintf("fatfsSaveToFile %s : delete it (errorcode: %d)\r\n", fileName, reval);
;;;332                xSemaphoreGive(xFatfsReadWriteMutex); 
;;;333                return FALSE;
;;;334            }
;;;335        }
;;;336        
;;;337        reval = f_close(&MyFile);
;;;338        if(reval != FR_OK)
;;;339        {
;;;340            sysprintf("fatfsSaveToFile %s : close error (%d)\r\n", fileName, reval);
;;;341            reval = f_unlink(fileName);
;;;342            sysprintf("fatfsSaveToFile %s : delete it (errorcode: %d)\r\n", fileName, reval);
;;;343            xSemaphoreGive(xFatfsReadWriteMutex); 
;;;344            return FALSE;
;;;345        }
;;;346        //sysprintf("\r\n !!! fatfsSaveToFile %s : Success[%s]\r\n", fileName, buff);
;;;347        sysprintf("\r\n !![Information FileAgent]!! fatfsSaveToFile %s : Success\r\n", fileName);
;;;348        //FatfsListFileEx(dir);
;;;349        //sysprintf("[OK]");
;;;350        xSemaphoreGive(xFatfsReadWriteMutex); 
;;;351        return TRUE;
;;;352    }     
0003b8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.956|
0003bc  e3570000          CMP      r7,#0                 ;287
0003c0  0a000002          BEQ      |L1.976|
0003c4  e3570001          CMP      r7,#1                 ;287
0003c8  1a000007          BNE      |L1.1004|
0003cc  ea000001          B        |L1.984|
                  |L1.976|
0003d0  e1a00000          MOV      r0,r0                 ;289
0003d4  ea000004          B        |L1.1004|
                  |L1.984|
0003d8  e1a00000          MOV      r0,r0                 ;291
0003dc  e59d1128          LDR      r1,[sp,#0x128]        ;293
0003e0  e28d0f47          ADD      r0,sp,#0x11c          ;293
0003e4  ebfffffe          BL       f_lseek
0003e8  e1a00000          MOV      r0,r0                 ;294
                  |L1.1004|
0003ec  e1a00000          MOV      r0,r0                 ;290
0003f0  e35b0000          CMP      r11,#0                ;296
0003f4  0a000020          BEQ      |L1.1148|
0003f8  e59f11d4          LDR      r1,|L1.1492|
0003fc  e1c160b2          STRH     r6,[r1,#2]            ;298  ; faHeader
000400  e28d3f46          ADD      r3,sp,#0x118          ;299
000404  e3a02004          MOV      r2,#4                 ;299
000408  e28d0f47          ADD      r0,sp,#0x11c          ;299
00040c  ebfffffe          BL       f_write
000410  e1a04000          MOV      r4,r0                 ;299
000414  e59d0118          LDR      r0,[sp,#0x118]        ;300
000418  e3500004          CMP      r0,#4                 ;300
00041c  1a000001          BNE      |L1.1064|
000420  e3540000          CMP      r4,#0                 ;300
000424  0a000014          BEQ      |L1.1148|
                  |L1.1064|
000428  e1a02004          MOV      r2,r4                 ;302
00042c  e28d1018          ADD      r1,sp,#0x18           ;302
000430  e28f0e1a          ADR      r0,|L1.1496|
000434  ebfffffe          BL       sysprintf
000438  e28d0f47          ADD      r0,sp,#0x11c          ;303
00043c  ebfffffe          BL       f_close
000440  e28d0018          ADD      r0,sp,#0x18           ;304
000444  ebfffffe          BL       f_unlink
000448  e1a04000          MOV      r4,r0                 ;304
00044c  e1a02004          MOV      r2,r4                 ;305
000450  e28d1018          ADD      r1,sp,#0x18           ;305
000454  e28f0e1b          ADR      r0,|L1.1548|
000458  ebfffffe          BL       sysprintf
00045c  e3a03000          MOV      r3,#0                 ;306
000460  e1a02003          MOV      r2,r3                 ;306
000464  e1a01003          MOV      r1,r3                 ;306
000468  e59f0128          LDR      r0,|L1.1432|
00046c  e5900000          LDR      r0,[r0,#0]            ;306  ; xFatfsReadWriteMutex
000470  ebfffffe          BL       xQueueGenericSend
000474  e3a00000          MOV      r0,#0                 ;307
000478  eaffffcd          B        |L1.948|
                  |L1.1148|
00047c  e28d3f46          ADD      r3,sp,#0x118          ;311
000480  e1a02006          MOV      r2,r6                 ;311
000484  e1a01008          MOV      r1,r8                 ;311
000488  e28d0f47          ADD      r0,sp,#0x11c          ;311
00048c  ebfffffe          BL       f_write
000490  e1a04000          MOV      r4,r0                 ;311
000494  e59d1118          LDR      r1,[sp,#0x118]        ;312
000498  e1510006          CMP      r1,r6                 ;312
00049c  1a000001          BNE      |L1.1192|
0004a0  e3540000          CMP      r4,#0                 ;312
0004a4  0a000013          BEQ      |L1.1272|
                  |L1.1192|
0004a8  e28d1018          ADD      r1,sp,#0x18           ;314
0004ac  e28f0f63          ADR      r0,|L1.1600|
0004b0  ebfffffe          BL       sysprintf
0004b4  e28d0f47          ADD      r0,sp,#0x11c          ;315
0004b8  ebfffffe          BL       f_close
0004bc  e28d0018          ADD      r0,sp,#0x18           ;316
0004c0  ebfffffe          BL       f_unlink
0004c4  e1a04000          MOV      r4,r0                 ;316
0004c8  e1a02004          MOV      r2,r4                 ;317
0004cc  e28d1018          ADD      r1,sp,#0x18           ;317
0004d0  e28f0f4d          ADR      r0,|L1.1548|
0004d4  ebfffffe          BL       sysprintf
0004d8  e3a03000          MOV      r3,#0                 ;318
0004dc  e1a02003          MOV      r2,r3                 ;318
0004e0  e1a01003          MOV      r1,r3                 ;318
0004e4  e59f00ac          LDR      r0,|L1.1432|
0004e8  e5900000          LDR      r0,[r0,#0]            ;318  ; xFatfsReadWriteMutex
0004ec  ebfffffe          BL       xQueueGenericSend
0004f0  e3a00000          MOV      r0,#0                 ;319
0004f4  eaffffae          B        |L1.948|
                  |L1.1272|
0004f8  e35b0000          CMP      r11,#0                ;322
0004fc  0a000069          BEQ      |L1.1704|
000500  e1a01806          LSL      r1,r6,#16             ;324
000504  e1a01821          LSR      r1,r1,#16             ;324
000508  e28f2f55          ADR      r2,|L1.1636|
00050c  e1a00008          MOV      r0,r8                 ;324
000510  ebfffffe          BL       getChecksum
000514  e59f1158          LDR      r1,|L1.1652|
000518  e1c100b0          STRH     r0,[r1,#0]            ;324  ; faEnd
00051c  e28d3f46          ADD      r3,sp,#0x118          ;325
000520  e3a02004          MOV      r2,#4                 ;325
000524  e28d0f47          ADD      r0,sp,#0x11c          ;325
000528  ebfffffe          BL       f_write
00052c  e1a04000          MOV      r4,r0                 ;325
000530  e59d0118          LDR      r0,[sp,#0x118]        ;326
000534  e3500004          CMP      r0,#4                 ;326
000538  1a000001          BNE      |L1.1348|
00053c  e3540000          CMP      r4,#0                 ;326
000540  0a000058          BEQ      |L1.1704|
                  |L1.1348|
000544  e1a02004          MOV      r2,r4                 ;328
000548  e28d1018          ADD      r1,sp,#0x18           ;328
00054c  e28f0f49          ADR      r0,|L1.1656|
000550  ebfffffe          BL       sysprintf
000554  e28d0f47          ADD      r0,sp,#0x11c          ;329
000558  ebfffffe          BL       f_close
00055c  e28d0018          ADD      r0,sp,#0x18           ;330
000560  ebfffffe          BL       f_unlink
000564  e1a04000          MOV      r4,r0                 ;330
000568  e1a02004          MOV      r2,r4                 ;331
00056c  e28d1018          ADD      r1,sp,#0x18           ;331
000570  e28f0094          ADR      r0,|L1.1548|
000574  ebfffffe          BL       sysprintf
000578  e3a03000          MOV      r3,#0                 ;332
00057c  e1a02003          MOV      r2,r3                 ;332
000580  e1a01003          MOV      r1,r3                 ;332
000584  e59f000c          LDR      r0,|L1.1432|
000588  e5900000          LDR      r0,[r0,#0]            ;332  ; xFatfsReadWriteMutex
00058c  ebfffffe          BL       xQueueGenericSend
000590  e3a00000          MOV      r0,#0                 ;333
000594  eaffff86          B        |L1.948|
                  |L1.1432|
                          DCD      xFatfsReadWriteMutex
                  |L1.1436|
00059c  25732573          DCB      "%s%s",0
0005a0  00      
0005a1  00                DCB      0
0005a2  00                DCB      0
0005a3  00                DCB      0
                  |L1.1444|
0005a4  25735c25          DCB      "%s\\%s",0
0005a8  7300    
0005aa  00                DCB      0
0005ab  00                DCB      0
                  |L1.1452|
0005ac  66617466          DCB      "fatfsSaveToFile %s : open error[%d]\r\n",0
0005b0  73536176
0005b4  65546f46
0005b8  696c6520
0005bc  2573203a
0005c0  206f7065
0005c4  6e206572
0005c8  726f725b
0005cc  25645d0d
0005d0  0a00    
0005d2  00                DCB      0
0005d3  00                DCB      0
                  |L1.1492|
                          DCD      faHeader
                  |L1.1496|
0005d8  66617466          DCB      "fatfsSaveToFile %s : write faHeader error (%d)\r\n",0
0005dc  73536176
0005e0  65546f46
0005e4  696c6520
0005e8  2573203a
0005ec  20777269
0005f0  74652066
0005f4  61486561
0005f8  64657220
0005fc  6572726f
000600  72202825
000604  64290d0a
000608  00      
000609  00                DCB      0
00060a  00                DCB      0
00060b  00                DCB      0
                  |L1.1548|
00060c  66617466          DCB      "fatfsSaveToFile %s : delete it (errorcode: %d)\r\n",0
000610  73536176
000614  65546f46
000618  696c6520
00061c  2573203a
000620  2064656c
000624  65746520
000628  69742028
00062c  6572726f
000630  72636f64
000634  653a2025
000638  64290d0a
00063c  00      
00063d  00                DCB      0
00063e  00                DCB      0
00063f  00                DCB      0
                  |L1.1600|
000640  66617466          DCB      "fatfsSaveToFile %s : write error\r\n",0
000644  73536176
000648  65546f46
00064c  696c6520
000650  2573203a
000654  20777269
000658  74652065
00065c  72726f72
000660  0d0a00  
000663  00                DCB      0
                  |L1.1636|
000664  66617466          DCB      "fatfsSaveToFile",0
000668  73536176
00066c  65546f46
000670  696c6500
                  |L1.1652|
                          DCD      faEnd
                  |L1.1656|
000678  66617466          DCB      "fatfsSaveToFile %s : write faEnd error (%d)\r\n",0
00067c  73536176
000680  65546f46
000684  696c6520
000688  2573203a
00068c  20777269
000690  74652066
000694  61456e64
000698  20657272
00069c  6f722028
0006a0  2564290d
0006a4  0a00    
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  e28d0f47          ADD      r0,sp,#0x11c          ;337
0006ac  ebfffffe          BL       f_close
0006b0  e1a04000          MOV      r4,r0                 ;337
0006b4  e3540000          CMP      r4,#0                 ;338
0006b8  0a000012          BEQ      |L1.1800|
0006bc  e1a02004          MOV      r2,r4                 ;340
0006c0  e28d1018          ADD      r1,sp,#0x18           ;340
0006c4  e28f0e23          ADR      r0,|L1.2300|
0006c8  ebfffffe          BL       sysprintf
0006cc  e28d0018          ADD      r0,sp,#0x18           ;341
0006d0  ebfffffe          BL       f_unlink
0006d4  e1a04000          MOV      r4,r0                 ;341
0006d8  e1a02004          MOV      r2,r4                 ;342
0006dc  e28d1018          ADD      r1,sp,#0x18           ;342
0006e0  e24f00dc          ADR      r0,|L1.1548|
0006e4  ebfffffe          BL       sysprintf
0006e8  e3a03000          MOV      r3,#0                 ;343
0006ec  e1a02003          MOV      r2,r3                 ;343
0006f0  e1a01003          MOV      r1,r3                 ;343
0006f4  e51f0164          LDR      r0,|L1.1432|
0006f8  e5900000          LDR      r0,[r0,#0]            ;343  ; xFatfsReadWriteMutex
0006fc  ebfffffe          BL       xQueueGenericSend
000700  e3a00000          MOV      r0,#0                 ;344
000704  eaffff2a          B        |L1.948|
                  |L1.1800|
000708  e28d1018          ADD      r1,sp,#0x18           ;347
00070c  e28f0e21          ADR      r0,|L1.2340|
000710  ebfffffe          BL       sysprintf
000714  e3a03000          MOV      r3,#0                 ;350
000718  e1a02003          MOV      r2,r3                 ;350
00071c  e1a01003          MOV      r1,r3                 ;350
000720  e51f0190          LDR      r0,|L1.1432|
000724  e5900000          LDR      r0,[r0,#0]            ;350  ; xFatfsReadWriteMutex
000728  ebfffffe          BL       xQueueGenericSend
00072c  e3a00001          MOV      r0,#1                 ;351
000730  eaffff1f          B        |L1.948|
;;;353    
                          ENDP

                  fatfsGetReturnValueByDir PROC
;;;355    
;;;356    static FileAgentReturn fatfsGetReturnValueByDir(char* dir)
000734  e92d4070          PUSH     {r4-r6,lr}
;;;357    {
000738  e1a05000          MOV      r5,r0
;;;358        int i;
;;;359        for(i = 0; i < FatFsGetCounter(); i++)
00073c  e3a04000          MOV      r4,#0
000740  ea00001e          B        |L1.1984|
                  |L1.1860|
;;;360        {
;;;361            if(FatFsGetExistFlag((FatfsIndex)i))
000744  e20400ff          AND      r0,r4,#0xff
000748  ebfffffe          BL       FatFsGetExistFlag
00074c  e3500000          CMP      r0,#0
000750  0a000019          BEQ      |L1.1980|
;;;362            {
;;;363                if(strcmp(FatFsGetRootStr((FatfsIndex)i), dir) == 0)
000754  e20400ff          AND      r0,r4,#0xff
000758  ebfffffe          BL       FatFsGetRootStr
00075c  e1a06000          MOV      r6,r0
000760  e1a01005          MOV      r1,r5
000764  ebfffffe          BL       strcmp
000768  e3500000          CMP      r0,#0
00076c  1a000012          BNE      |L1.1980|
;;;364                {
;;;365                    switch(i)
000770  e3540000          CMP      r4,#0
000774  0a000004          BEQ      |L1.1932|
000778  e3540001          CMP      r4,#1
00077c  0a000005          BEQ      |L1.1944|
000780  e3540002          CMP      r4,#2
000784  1a000009          BNE      |L1.1968|
000788  ea000005          B        |L1.1956|
                  |L1.1932|
;;;366                    {
;;;367                        case 0:
00078c  e1a00000          MOV      r0,r0
;;;368                            return FILE_AGENT_RETURN_OK_FATFS_0;
000790  e3a00002          MOV      r0,#2
                  |L1.1940|
;;;369                        case 1:
;;;370                            return FILE_AGENT_RETURN_OK_FATFS_1;
;;;371                        case 2:
;;;372                            return FILE_AGENT_RETURN_OK_FATFS_2;
;;;373                        default:
;;;374                            return FILE_AGENT_RETURN_ERROR;
;;;375                    }                
;;;376                }
;;;377            }
;;;378        }
;;;379        return FILE_AGENT_RETURN_ERROR;
;;;380    }   
000794  e8bd8070          POP      {r4-r6,pc}
                  |L1.1944|
000798  e1a00000          MOV      r0,r0                 ;369
00079c  e3a00004          MOV      r0,#4                 ;370
0007a0  eafffffb          B        |L1.1940|
                  |L1.1956|
0007a4  e1a00000          MOV      r0,r0                 ;371
0007a8  e3a00008          MOV      r0,#8                 ;372
0007ac  eafffff8          B        |L1.1940|
                  |L1.1968|
0007b0  e1a00000          MOV      r0,r0                 ;373
0007b4  e3a00000          MOV      r0,#0                 ;374
0007b8  eafffff5          B        |L1.1940|
                  |L1.1980|
0007bc  e2844001          ADD      r4,r4,#1              ;359
                  |L1.1984|
0007c0  ebfffffe          BL       FatFsGetCounter
0007c4  e1500004          CMP      r0,r4                 ;359
0007c8  caffffdd          BGT      |L1.1860|
0007cc  e3a00000          MOV      r0,#0                 ;379
0007d0  eaffffef          B        |L1.1940|
;;;381    
                          ENDP

                  FileAgentParserAutoData PROC
;;;1048   
;;;1049   BOOL FileAgentParserAutoData(uint8_t* srcData, size_t srcDataLen, uint8_t** targetData, size_t* targetDataLen)
0007d4  e92d4ff8          PUSH     {r3-r11,lr}
;;;1050   {
0007d8  e1a05000          MOV      r5,r0
0007dc  e1a07001          MOV      r7,r1
0007e0  e1a08002          MOV      r8,r2
0007e4  e1a09003          MOV      r9,r3
;;;1051       FAHeader* pFAHeader = (FAHeader*)srcData;  
0007e8  e1a04005          MOV      r4,r5
;;;1052       
;;;1053       //sysprintf("\r\FileAgentParserAutoData[0x%02x, 0x%02x] len = %d:...\r\n", pFAHeader->value[0], pFAHeader->value[1], pFAHeader->Len);
;;;1054       if((pFAHeader->value[0] == FA_HEADER_VALUE) && 
0007ec  e5d40000          LDRB     r0,[r4,#0]
0007f0  e35000da          CMP      r0,#0xda
0007f4  1a000035          BNE      |L1.2256|
;;;1055           (pFAHeader->value[1] == FA_HEADER_VALUE2) && 
0007f8  e5d40001          LDRB     r0,[r4,#1]
0007fc  e35000ad          CMP      r0,#0xad
000800  1a000032          BNE      |L1.2256|
;;;1056           (pFAHeader->Len == (srcDataLen-sizeof(FAHeader) - sizeof(FAEnd))) 
000804  e5d40003          LDRB     r0,[r4,#3]
000808  e5d41002          LDRB     r1,[r4,#2]
00080c  e1810400          ORR      r0,r1,r0,LSL #8
000810  e2471008          SUB      r1,r7,#8
000814  e1500001          CMP      r0,r1
000818  1a00002c          BNE      |L1.2256|
;;;1057          )
;;;1058       {
;;;1059               uint16_t checkSum = getChecksum(srcData + sizeof(FAHeader), pFAHeader->Len, "<parser>") ; 
00081c  e5d40003          LDRB     r0,[r4,#3]
000820  e5d42002          LDRB     r2,[r4,#2]
000824  e1821400          ORR      r1,r2,r0,LSL #8
000828  e28f2f4d          ADR      r2,|L1.2404|
00082c  e2850004          ADD      r0,r5,#4
000830  ebfffffe          BL       getChecksum
000834  e1a0a000          MOV      r10,r0
;;;1060               FAEnd* pFAEnd = (FAEnd*)(srcData + srcDataLen - sizeof(FAEnd));
000838  e0850007          ADD      r0,r5,r7
00083c  e2406004          SUB      r6,r0,#4
;;;1061               if((checkSum == pFAEnd->checksum)  &&
000840  e5d60001          LDRB     r0,[r6,#1]
000844  e5d61000          LDRB     r1,[r6,#0]
000848  e1810400          ORR      r0,r1,r0,LSL #8
00084c  e150000a          CMP      r0,r10
000850  1a000015          BNE      |L1.2220|
;;;1062                   (pFAEnd->value[0] == FA_END_VALUE) && 
000854  e5d60002          LDRB     r0,[r6,#2]
000858  e350001f          CMP      r0,#0x1f
00085c  1a000012          BNE      |L1.2220|
;;;1063                   (pFAEnd->value[1] == FA_END_VALUE2)  )
000860  e5d60003          LDRB     r0,[r6,#3]
000864  e35000f1          CMP      r0,#0xf1
000868  1a00000f          BNE      |L1.2220|
;;;1064               {
;;;1065                   *targetData = srcData + sizeof(FAHeader);
00086c  e2850004          ADD      r0,r5,#4
000870  e5880000          STR      r0,[r8,#0]
;;;1066                   *targetDataLen = pFAHeader->Len;
000874  e5d40003          LDRB     r0,[r4,#3]
000878  e5d41002          LDRB     r1,[r4,#2]
00087c  e1810400          ORR      r0,r1,r0,LSL #8
000880  e5890000          STR      r0,[r9,#0]
;;;1067                   srcData[pFAHeader->Len + sizeof(FAHeader)] = 0x0;
000884  e3a00000          MOV      r0,#0
000888  e5d41003          LDRB     r1,[r4,#3]
00088c  e5d42002          LDRB     r2,[r4,#2]
000890  e1821401          ORR      r1,r2,r1,LSL #8
000894  e2811004          ADD      r1,r1,#4
000898  e7c50001          STRB     r0,[r5,r1]
;;;1068                   //sysprintf("\r\nFileAgentParserAutoData OK [%s].\r\n", *targetData);
;;;1069                   sysprintf("\r\nFileAgentParserAutoData OK .\r\n");
00089c  e28f00cc          ADR      r0,|L1.2416|
0008a0  ebfffffe          BL       sysprintf
;;;1070                   return TRUE;
0008a4  e3a00001          MOV      r0,#1
                  |L1.2216|
;;;1071               }
;;;1072               else
;;;1073               {
;;;1074                   sysprintf("\r\nFileAgentParserAutoData End ERROR [0x%02x, 0x%02x] checkSum = %d (%d)...\r\n", pFAEnd->value[0], pFAEnd->value[1], pFAEnd->checksum, checkSum);
;;;1075               }
;;;1076       }
;;;1077       else
;;;1078       {
;;;1079           sysprintf("\r\nFileAgentParserAutoData Header ERROR [0x%02x, 0x%02x] len = %d (%d)...\r\n", pFAHeader->value[0], pFAHeader->value[1], pFAHeader->Len, (srcDataLen-sizeof(FAHeader) - sizeof(FAEnd)));
;;;1080       }
;;;1081       return FALSE;
;;;1082   }
0008a8  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.2220|
0008ac  e58da000          STR      r10,[sp,#0]           ;1074
0008b0  e5d60001          LDRB     r0,[r6,#1]            ;1074
0008b4  e5d6c000          LDRB     r12,[r6,#0]           ;1074
0008b8  e18c3400          ORR      r3,r12,r0,LSL #8      ;1074
0008bc  e5d62003          LDRB     r2,[r6,#3]            ;1074
0008c0  e5d61002          LDRB     r1,[r6,#2]            ;1074
0008c4  e59f00c8          LDR      r0,|L1.2452|
0008c8  ebfffffe          BL       sysprintf
0008cc  ea000008          B        |L1.2292|
                  |L1.2256|
0008d0  e2470008          SUB      r0,r7,#8              ;1079
0008d4  e58d0000          STR      r0,[sp,#0]            ;1079
0008d8  e5d40003          LDRB     r0,[r4,#3]            ;1079
0008dc  e5d4c002          LDRB     r12,[r4,#2]           ;1079
0008e0  e18c3400          ORR      r3,r12,r0,LSL #8      ;1079
0008e4  e5d42001          LDRB     r2,[r4,#1]            ;1079
0008e8  e5d41000          LDRB     r1,[r4,#0]            ;1079
0008ec  e59f00a4          LDR      r0,|L1.2456|
0008f0  ebfffffe          BL       sysprintf
                  |L1.2292|
0008f4  e3a00000          MOV      r0,#0                 ;1081
0008f8  eaffffea          B        |L1.2216|
                  |L1.2300|
0008fc  66617466          DCB      "fatfsSaveToFile %s : close error (%d)\r\n",0
000900  73536176
000904  65546f46
000908  696c6520
00090c  2573203a
000910  20636c6f
000914  73652065
000918  72726f72
00091c  20282564
000920  290d0a00
                  |L1.2340|
000924  0d0a2021          DCB      "\r\n !![Information FileAgent]!! fatfsSaveToFile %s : S"
000928  215b496e
00092c  666f726d
000930  6174696f
000934  6e204669
000938  6c654167
00093c  656e745d
000940  21212066
000944  61746673
000948  53617665
00094c  546f4669
000950  6c652025
000954  73203a20
000958  53      
000959  75636365          DCB      "uccess\r\n",0
00095d  73730d0a
000961  00      
000962  00                DCB      0
000963  00                DCB      0
                  |L1.2404|
000964  3c706172          DCB      "<parser>",0
000968  7365723e
00096c  00      
00096d  00                DCB      0
00096e  00                DCB      0
00096f  00                DCB      0
                  |L1.2416|
000970  0d0a4669          DCB      "\r\nFileAgentParserAutoData OK .\r\n",0
000974  6c654167
000978  656e7450
00097c  61727365
000980  72417574
000984  6f446174
000988  61204f4b
00098c  202e0d0a
000990  00      
000991  00                DCB      0
000992  00                DCB      0
000993  00                DCB      0
                  |L1.2452|
                          DCD      ||.constdata||
                  |L1.2456|
                          DCD      ||.constdata||+0x50
                          ENDP

                  fatfsGetFromFile PROC
;;;382    
;;;383    static BOOL fatfsGetFromFile(char* dir, char* name, uint8_t** buff, size_t* buffLen, BOOL checkMode)
00099c  e92d5ff0          PUSH     {r4-r12,lr}
;;;384    {
0009a0  e24ddd45          SUB      sp,sp,#0x1140
0009a4  e1a06000          MOV      r6,r0
0009a8  e1a07001          MOV      r7,r1
0009ac  e1a04002          MOV      r4,r2
0009b0  e1a05003          MOV      r5,r3
;;;385        FIL MyFile;
;;;386        FRESULT res;
;;;387        uint16_t NumByteToRead;
;;;388        char fileName[_MAX_LFN];
;;;389        xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY); 
0009b4  e3a03000          MOV      r3,#0
0009b8  e3e02000          MVN      r2,#0
0009bc  e1a01003          MOV      r1,r3
0009c0  e51f0430          LDR      r0,|L1.1432|
0009c4  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
0009c8  ebfffffe          BL       xQueueGenericReceive
;;;390        sprintf(fileName, "%s%s", dir, name);  
0009cc  e1a03007          MOV      r3,r7
0009d0  e1a02006          MOV      r2,r6
0009d4  e59f1268          LDR      r1,|L1.3140|
0009d8  e28d0018          ADD      r0,sp,#0x18
0009dc  ebfffffe          BL       __2sprintf
;;;391        FRESULT reval = f_open(&MyFile, fileName, FA_READ);  
0009e0  e3a02001          MOV      r2,#1
0009e4  e28d1018          ADD      r1,sp,#0x18
0009e8  e28d0f47          ADD      r0,sp,#0x11c
0009ec  ebfffffe          BL       f_open
0009f0  e1a09000          MOV      r9,r0
;;;392        //sysprintf("fatfsGetFromFile %s enter \r\n", fileName);
;;;393        if(reval != FR_OK) 
0009f4  e3590000          CMP      r9,#0
0009f8  0a00000c          BEQ      |L1.2608|
;;;394        {
;;;395            sysprintf("fatfsGetFromFile %s : open error[%d]\r\n", fileName, reval);
0009fc  e1a02009          MOV      r2,r9
000a00  e28d1018          ADD      r1,sp,#0x18
000a04  e28f0f8f          ADR      r0,|L1.3144|
000a08  ebfffffe          BL       sysprintf
;;;396            xSemaphoreGive(xFatfsReadWriteMutex); 
000a0c  e3a03000          MOV      r3,#0
000a10  e1a02003          MOV      r2,r3
000a14  e1a01003          MOV      r1,r3
000a18  e51f0488          LDR      r0,|L1.1432|
000a1c  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
000a20  ebfffffe          BL       xQueueGenericSend
;;;397            return FALSE;
000a24  e3a00000          MOV      r0,#0
                  |L1.2600|
000a28  e28ddd45          ADD      sp,sp,#0x1140
;;;398        }
;;;399        else
;;;400        {     
;;;401            *buffLen = f_size(&MyFile);//MyFile.fsize;
;;;402            if(*buffLen > 0)
;;;403            {
;;;404                *buff =  pvPortMalloc(*buffLen);   
;;;405                if(buff != NULL)
;;;406                {
;;;407                    res = f_read(&MyFile, *buff, *buffLen, (void *)&NumByteToRead);
;;;408                    f_close(&MyFile);        
;;;409                    if((NumByteToRead == 0) || (NumByteToRead != *buffLen) || (res != FR_OK)) /*EOF, len error or Error*/
;;;410                    {
;;;411                        sysprintf("fatfsGetFromFile %s : read error\r\n", fileName);
;;;412                        xSemaphoreGive(xFatfsReadWriteMutex); 
;;;413                        return FALSE;
;;;414                    }
;;;415                }
;;;416                else
;;;417                {
;;;418                    sysprintf("fatfsGetFromFile %s : pvPortMalloc error\r\n", fileName);
;;;419                    f_close(&MyFile);
;;;420                    xSemaphoreGive(xFatfsReadWriteMutex);                 
;;;421                    return FALSE;
;;;422                }
;;;423            }
;;;424            else
;;;425            {
;;;426                sysprintf("fatfsGetFromFile %s : f_size(&MyFile) error\r\n", fileName);
;;;427                f_close(&MyFile);
;;;428                xSemaphoreGive(xFatfsReadWriteMutex); 
;;;429                return FALSE;
;;;430            }
;;;431            f_close(&MyFile);
;;;432                  
;;;433        }
;;;434        
;;;435        if(checkMode)
;;;436        {
;;;437            uint8_t* buffTmp = *buff;
;;;438            size_t buffLenTmp = *buffLen;
;;;439            uint8_t* targetData;
;;;440            size_t targetDataLen;
;;;441            
;;;442            //printfBuffData("-- FileAgentGetData --", buffTmp, buffLenTmp);
;;;443            if(FileAgentParserAutoData(buffTmp, buffLenTmp, &targetData, &targetDataLen))
;;;444            {
;;;445                //sysprintf("[ INFO ]processRead parser (len = %d):[%s]...\r\n", targetDataLen, targetData); 
;;;446                *buff =  pvPortMalloc(targetDataLen);   
;;;447                if(buff != NULL)
;;;448                {
;;;449                    *buffLen = targetDataLen;
;;;450                    memcpy(*buff, targetData, targetDataLen);     
;;;451                    vPortFree(buffTmp);                
;;;452                }
;;;453                else
;;;454                {
;;;455                    sysprintf("fatfsGetFromFile %s : pvPortMalloc error\r\n", fileName);
;;;456                    vPortFree(buffTmp);
;;;457                    xSemaphoreGive(xFatfsReadWriteMutex); 
;;;458                    return FALSE;
;;;459                }
;;;460                //sysprintf("processRead Free data...\r\n"); 
;;;461                
;;;462            }
;;;463            else
;;;464            {
;;;465                sysprintf("\r\n !![Information FileAgent]!! fatfsGetFromFile %s : parser error delete it \r\n", fileName);
;;;466                f_unlink(fileName);
;;;467                xSemaphoreGive(xFatfsReadWriteMutex); 
;;;468                return FALSE;
;;;469            }
;;;470        }
;;;471        sysprintf("\r\n !![Information FileAgent]!! fatfsGetFromFile %s : Success\r\n", fileName);
;;;472        //FatfsListFileEx(dir);
;;;473        //sysprintf("[OK]\r\n");
;;;474        xSemaphoreGive(xFatfsReadWriteMutex); 
;;;475        return TRUE;
;;;476    
;;;477    }
000a2c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2608|
000a30  e59d0128          LDR      r0,[sp,#0x128]        ;401
000a34  e5850000          STR      r0,[r5,#0]            ;401
000a38  e5950000          LDR      r0,[r5,#0]            ;402
000a3c  e3500000          CMP      r0,#0                 ;402
000a40  0a00002f          BEQ      |L1.2820|
000a44  e5950000          LDR      r0,[r5,#0]            ;404
000a48  ebfffffe          BL       pvPortMalloc
000a4c  e5840000          STR      r0,[r4,#0]            ;404
000a50  e3540000          CMP      r4,#0                 ;405
000a54  0a00001d          BEQ      |L1.2768|
000a58  e5952000          LDR      r2,[r5,#0]            ;407
000a5c  e28d3f46          ADD      r3,sp,#0x118          ;407
000a60  e28d0f47          ADD      r0,sp,#0x11c          ;407
000a64  e5941000          LDR      r1,[r4,#0]            ;407
000a68  ebfffffe          BL       f_read
000a6c  e1a08000          MOV      r8,r0                 ;407
000a70  e28d0f47          ADD      r0,sp,#0x11c          ;408
000a74  ebfffffe          BL       f_close
000a78  e28d0c01          ADD      r0,sp,#0x100          ;409
000a7c  e1d001b8          LDRH     r0,[r0,#0x18]         ;409
000a80  e3500000          CMP      r0,#0                 ;409
000a84  0a000006          BEQ      |L1.2724|
000a88  e28d0c01          ADD      r0,sp,#0x100          ;409
000a8c  e5951000          LDR      r1,[r5,#0]            ;409
000a90  e1d001b8          LDRH     r0,[r0,#0x18]         ;409
000a94  e1510000          CMP      r1,r0                 ;409
000a98  1a000001          BNE      |L1.2724|
000a9c  e3580000          CMP      r8,#0                 ;409
000aa0  0a000024          BEQ      |L1.2872|
                  |L1.2724|
000aa4  e28d1018          ADD      r1,sp,#0x18           ;411
000aa8  e28f0d07          ADR      r0,|L1.3184|
000aac  ebfffffe          BL       sysprintf
000ab0  e3a03000          MOV      r3,#0                 ;412
000ab4  e1a02003          MOV      r2,r3                 ;412
000ab8  e1a01003          MOV      r1,r3                 ;412
000abc  e51f052c          LDR      r0,|L1.1432|
000ac0  e5900000          LDR      r0,[r0,#0]            ;412  ; xFatfsReadWriteMutex
000ac4  ebfffffe          BL       xQueueGenericSend
000ac8  e3a00000          MOV      r0,#0                 ;413
000acc  eaffffd5          B        |L1.2600|
                  |L1.2768|
000ad0  e28d1018          ADD      r1,sp,#0x18           ;418
000ad4  e28f0f6e          ADR      r0,|L1.3220|
000ad8  ebfffffe          BL       sysprintf
000adc  e28d0f47          ADD      r0,sp,#0x11c          ;419
000ae0  ebfffffe          BL       f_close
000ae4  e3a03000          MOV      r3,#0                 ;420
000ae8  e1a02003          MOV      r2,r3                 ;420
000aec  e1a01003          MOV      r1,r3                 ;420
000af0  e51f0560          LDR      r0,|L1.1432|
000af4  e5900000          LDR      r0,[r0,#0]            ;420  ; xFatfsReadWriteMutex
000af8  ebfffffe          BL       xQueueGenericSend
000afc  e3a00000          MOV      r0,#0                 ;421
000b00  eaffffc8          B        |L1.2600|
                  |L1.2820|
000b04  e28d1018          ADD      r1,sp,#0x18           ;426
000b08  e28f0e1b          ADR      r0,|L1.3264|
000b0c  ebfffffe          BL       sysprintf
000b10  e28d0f47          ADD      r0,sp,#0x11c          ;427
000b14  ebfffffe          BL       f_close
000b18  e3a03000          MOV      r3,#0                 ;428
000b1c  e1a02003          MOV      r2,r3                 ;428
000b20  e1a01003          MOV      r1,r3                 ;428
000b24  e51f0594          LDR      r0,|L1.1432|
000b28  e5900000          LDR      r0,[r0,#0]            ;428  ; xFatfsReadWriteMutex
000b2c  ebfffffe          BL       xQueueGenericSend
000b30  e3a00000          MOV      r0,#0                 ;429
000b34  eaffffbb          B        |L1.2600|
                  |L1.2872|
000b38  e28d0f47          ADD      r0,sp,#0x11c          ;431
000b3c  ebfffffe          BL       f_close
000b40  e28d0a01          ADD      r0,sp,#0x1000         ;435
000b44  e5900168          LDR      r0,[r0,#0x168]        ;435
000b48  e3500000          CMP      r0,#0                 ;435
000b4c  0a000031          BEQ      |L1.3096|
000b50  e594a000          LDR      r10,[r4,#0]           ;437
000b54  e595b000          LDR      r11,[r5,#0]           ;438
000b58  e28d3010          ADD      r3,sp,#0x10           ;443
000b5c  e28d2014          ADD      r2,sp,#0x14           ;443
000b60  e1a0100b          MOV      r1,r11                ;443
000b64  e1a0000a          MOV      r0,r10                ;443
000b68  ebfffffe          BL       FileAgentParserAutoData
000b6c  e3500000          CMP      r0,#0                 ;443
000b70  0a00001a          BEQ      |L1.3040|
000b74  e59d0010          LDR      r0,[sp,#0x10]         ;446
000b78  ebfffffe          BL       pvPortMalloc
000b7c  e5840000          STR      r0,[r4,#0]            ;446
000b80  e3540000          CMP      r4,#0                 ;447
000b84  0a000008          BEQ      |L1.2988|
000b88  e59d0010          LDR      r0,[sp,#0x10]         ;449
000b8c  e5850000          STR      r0,[r5,#0]            ;449
000b90  e5940000          LDR      r0,[r4,#0]            ;450
000b94  e59d1014          LDR      r1,[sp,#0x14]         ;450
000b98  e59d2010          LDR      r2,[sp,#0x10]         ;450
000b9c  ebfffffe          BL       __aeabi_memcpy
000ba0  e1a0000a          MOV      r0,r10                ;451
000ba4  ebfffffe          BL       vPortFree
000ba8  ea000019          B        |L1.3092|
                  |L1.2988|
000bac  e28d1018          ADD      r1,sp,#0x18           ;455
000bb0  e28f00dc          ADR      r0,|L1.3220|
000bb4  ebfffffe          BL       sysprintf
000bb8  e1a0000a          MOV      r0,r10                ;456
000bbc  ebfffffe          BL       vPortFree
000bc0  e3a03000          MOV      r3,#0                 ;457
000bc4  e1a02003          MOV      r2,r3                 ;457
000bc8  e1a01003          MOV      r1,r3                 ;457
000bcc  e51f063c          LDR      r0,|L1.1432|
000bd0  e5900000          LDR      r0,[r0,#0]            ;457  ; xFatfsReadWriteMutex
000bd4  ebfffffe          BL       xQueueGenericSend
000bd8  e3a00000          MOV      r0,#0                 ;458
000bdc  eaffff91          B        |L1.2600|
                  |L1.3040|
000be0  e28d1018          ADD      r1,sp,#0x18           ;465
000be4  e59f0104          LDR      r0,|L1.3312|
000be8  ebfffffe          BL       sysprintf
000bec  e28d0018          ADD      r0,sp,#0x18           ;466
000bf0  ebfffffe          BL       f_unlink
000bf4  e3a03000          MOV      r3,#0                 ;467
000bf8  e1a02003          MOV      r2,r3                 ;467
000bfc  e1a01003          MOV      r1,r3                 ;467
000c00  e51f0670          LDR      r0,|L1.1432|
000c04  e5900000          LDR      r0,[r0,#0]            ;467  ; xFatfsReadWriteMutex
000c08  ebfffffe          BL       xQueueGenericSend
000c0c  e3a00000          MOV      r0,#0                 ;468
000c10  eaffff84          B        |L1.2600|
                  |L1.3092|
000c14  e1a00000          MOV      r0,r0                 ;470
                  |L1.3096|
000c18  e28d1018          ADD      r1,sp,#0x18           ;471
000c1c  e28f00d0          ADR      r0,|L1.3316|
000c20  ebfffffe          BL       sysprintf
000c24  e3a03000          MOV      r3,#0                 ;474
000c28  e1a02003          MOV      r2,r3                 ;474
000c2c  e1a01003          MOV      r1,r3                 ;474
000c30  e51f06a0          LDR      r0,|L1.1432|
000c34  e5900000          LDR      r0,[r0,#0]            ;474  ; xFatfsReadWriteMutex
000c38  ebfffffe          BL       xQueueGenericSend
000c3c  e3a00001          MOV      r0,#1                 ;475
000c40  eaffff78          B        |L1.2600|
                  |L1.3140|
                          DCD      ||.text||+0x59c
                  |L1.3144|
000c48  66617466          DCB      "fatfsGetFromFile %s : open error[%d]\r\n",0
000c4c  73476574
000c50  46726f6d
000c54  46696c65
000c58  20257320
000c5c  3a206f70
000c60  656e2065
000c64  72726f72
000c68  5b25645d
000c6c  0d0a00  
000c6f  00                DCB      0
                  |L1.3184|
000c70  66617466          DCB      "fatfsGetFromFile %s : read error\r\n",0
000c74  73476574
000c78  46726f6d
000c7c  46696c65
000c80  20257320
000c84  3a207265
000c88  61642065
000c8c  72726f72
000c90  0d0a00  
000c93  00                DCB      0
                  |L1.3220|
000c94  66617466          DCB      "fatfsGetFromFile %s : pvPortMalloc error\r\n",0
000c98  73476574
000c9c  46726f6d
000ca0  46696c65
000ca4  20257320
000ca8  3a207076
000cac  506f7274
000cb0  4d616c6c
000cb4  6f632065
000cb8  72726f72
000cbc  0d0a00  
000cbf  00                DCB      0
                  |L1.3264|
000cc0  66617466          DCB      "fatfsGetFromFile %s : f_size(&MyFile) error\r\n",0
000cc4  73476574
000cc8  46726f6d
000ccc  46696c65
000cd0  20257320
000cd4  3a20665f
000cd8  73697a65
000cdc  28264d79
000ce0  46696c65
000ce4  29206572
000ce8  726f720d
000cec  0a00    
000cee  00                DCB      0
000cef  00                DCB      0
                  |L1.3312|
                          DCD      ||.constdata||+0x9c
                  |L1.3316|
000cf4  0d0a2021          DCB      "\r\n !![Information FileAgent]!! fatfsGetFromFile %s : "
000cf8  215b496e
000cfc  666f726d
000d00  6174696f
000d04  6e204669
000d08  6c654167
000d0c  656e745d
000d10  21212066
000d14  61746673
000d18  47657446
000d1c  726f6d46
000d20  696c6520
000d24  2573203a
000d28  20      
000d29  53756363          DCB      "Success\r\n",0
000d2d  6573730d
000d31  0a00    
000d33  00                DCB      0
                          ENDP

                  FileAgentFatFsFormat PROC
;;;1298   
;;;1299   BOOL FileAgentFatFsFormat(char* dir)
000d34  e92d4030          PUSH     {r4,r5,lr}
;;;1300   {
000d38  e24dd084          SUB      sp,sp,#0x84
000d3c  e1a04000          MOV      r4,r0
;;;1301       BOOL reval;
;;;1302       char message[128]; 
;;;1303       xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY); 
000d40  e3a03000          MOV      r3,#0
000d44  e3e02000          MVN      r2,#0
000d48  e1a01003          MOV      r1,r3
000d4c  e51f07bc          LDR      r0,|L1.1432|
000d50  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
000d54  ebfffffe          BL       xQueueGenericReceive
;;;1304       if(FatFsFormat(dir))
000d58  e1a00004          MOV      r0,r4
000d5c  ebfffffe          BL       FatFsFormat
000d60  e3500000          CMP      r0,#0
000d64  0a00000b          BEQ      |L1.3480|
;;;1305       {     
;;;1306           sysprintf("\r\n [OK] FileAgentFatFsFormat [%s] !!\n", dir);
000d68  e1a01004          MOV      r1,r4
000d6c  e28f0f92          ADR      r0,|L1.4028|
000d70  ebfffffe          BL       sysprintf
;;;1307           sprintf(message, "f_mkfs_%s_OK", dir);
000d74  e1a02004          MOV      r2,r4
000d78  e28f1f99          ADR      r1,|L1.4068|
000d7c  e28d0004          ADD      r0,sp,#4
000d80  ebfffffe          BL       __2sprintf
;;;1308           DataProcessSendStatusData(0, message);
000d84  e28d1004          ADD      r1,sp,#4
000d88  e3a00000          MOV      r0,#0
000d8c  ebfffffe          BL       DataProcessSendStatusData
;;;1309           reval = TRUE; 
000d90  e3a05001          MOV      r5,#1
000d94  ea00000a          B        |L1.3524|
                  |L1.3480|
;;;1310       }
;;;1311       else
;;;1312       {
;;;1313           sysprintf("\r\n [ERROR] FileAgentFatFsFormat [%s] !!\n", dir);
000d98  e1a01004          MOV      r1,r4
000d9c  e28f0e25          ADR      r0,|L1.4084|
000da0  ebfffffe          BL       sysprintf
;;;1314           sprintf(message, "f_mkfs_%s_ERROR", dir);
000da4  e1a02004          MOV      r2,r4
000da8  e28f1e27          ADR      r1,|L1.4128|
000dac  e28d0004          ADD      r0,sp,#4
000db0  ebfffffe          BL       __2sprintf
;;;1315           DataProcessSendStatusData(0, message);
000db4  e28d1004          ADD      r1,sp,#4
000db8  e3a00000          MOV      r0,#0
000dbc  ebfffffe          BL       DataProcessSendStatusData
;;;1316           reval = FALSE;
000dc0  e3a05000          MOV      r5,#0
                  |L1.3524|
;;;1317       }
;;;1318       xSemaphoreGive(xFatfsReadWriteMutex); 
000dc4  e3a03000          MOV      r3,#0
000dc8  e1a02003          MOV      r2,r3
000dcc  e1a01003          MOV      r1,r3
000dd0  e51f0840          LDR      r0,|L1.1432|
000dd4  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
000dd8  ebfffffe          BL       xQueueGenericSend
;;;1319       return reval;
000ddc  e1a00005          MOV      r0,r5
000de0  e28dd084          ADD      sp,sp,#0x84
;;;1320   }
000de4  e8bd8030          POP      {r4,r5,pc}
;;;1321   
                          ENDP

                  fatfsAutoSaveToFile PROC
;;;479    #define AUTO_SAVE_RETRY_TIMES    10
;;;480    static FileAgentReturn fatfsAutoSaveToFile(char* name, FileAgentAddType addType, uint8_t* buff, size_t buffLen, BOOL checkMode)
000de8  e92d4ff0          PUSH     {r4-r11,lr}
;;;481    {
000dec  e24ddf83          SUB      sp,sp,#0x20c
000df0  e1a06000          MOV      r6,r0
000df4  e1a07001          MOV      r7,r1
000df8  e1a08002          MOV      r8,r2
000dfc  e1a09003          MOV      r9,r3
;;;482        //sysprintf(" -> fatfsAutoSaveToFile %s (addType:%d, buffLen:%d): [%s]\r\n", name, addType, buffLen, buff);
;;;483        int i;
;;;484        char fileNameTmp[_MAX_LFN];
;;;485        FileAgentReturn reVal = FILE_AGENT_RETURN_ERROR;
000e00  e3a0a000          MOV      r10,#0
;;;486        int reTryCounter = 0;
000e04  e3a05000          MOV      r5,#0
;;;487        char* targetFile = name;
000e08  e58d6108          STR      r6,[sp,#0x108]
;;;488        for(i = 0; i < FatFsGetCounter(); i++)
000e0c  e3a04000          MOV      r4,#0
000e10  ea0000b9          B        |L1.4348|
                  |L1.3604|
;;;489        {
;;;490            if(FatFsGetExistFlag((FatfsIndex)i))
000e14  e20400ff          AND      r0,r4,#0xff
000e18  ebfffffe          BL       FatFsGetExistFlag
000e1c  e3500000          CMP      r0,#0
000e20  0a0000b4          BEQ      |L1.4344|
;;;491            {
;;;492                reTryCounter = 0;
000e24  e3a05000          MOV      r5,#0
;;;493                while(reTryCounter < AUTO_SAVE_RETRY_TIMES)
000e28  ea000037          B        |L1.3852|
                  |L1.3628|
;;;494                {
;;;495                    if(fatfsSaveToFile(FatFsGetRootStr((FatfsIndex)i), targetFile, addType, buff, buffLen, checkMode))
000e2c  e20400ff          AND      r0,r4,#0xff
000e30  ebfffffe          BL       FatFsGetRootStr
000e34  e1a0b000          MOV      r11,r0
000e38  e59d0230          LDR      r0,[sp,#0x230]
000e3c  e1a03008          MOV      r3,r8
000e40  e1a02007          MOV      r2,r7
000e44  e58d0004          STR      r0,[sp,#4]
000e48  e58d9000          STR      r9,[sp,#0]
000e4c  e1a0000b          MOV      r0,r11
000e50  e59d1108          LDR      r1,[sp,#0x108]
000e54  ebfffffe          BL       fatfsSaveToFile
000e58  e3500000          CMP      r0,#0
000e5c  0a000005          BEQ      |L1.3704|
;;;496                    {
;;;497                        reVal = reVal|fatfsGetReturnValueByDir(FatFsGetRootStr((FatfsIndex)i));
000e60  e20400ff          AND      r0,r4,#0xff
000e64  ebfffffe          BL       FatFsGetRootStr
000e68  e1a0b000          MOV      r11,r0
000e6c  ebfffffe          BL       fatfsGetReturnValueByDir
000e70  e18aa000          ORR      r10,r10,r0
;;;498                        break;
000e74  ea000026          B        |L1.3860|
                  |L1.3704|
;;;499                    }
;;;500                    else
;;;501                    {
;;;502                        char purefileName[_MAX_LFN];                    
;;;503                        char *pureExtendName = strchr(name, '.');
000e78  e3a0102e          MOV      r1,#0x2e
000e7c  e1a00006          MOV      r0,r6
000e80  ebfffffe          BL       strchr
000e84  e58d0004          STR      r0,[sp,#4]
;;;504                        memset(purefileName, 0x0, _MAX_LFN);
000e88  e3a01c01          MOV      r1,#0x100
000e8c  e28d0008          ADD      r0,sp,#8
000e90  ebfffffe          BL       __aeabi_memclr4
;;;505                        strncpy(purefileName, name, strlen(name) - strlen(pureExtendName));
000e94  e1a00006          MOV      r0,r6
000e98  ebfffffe          BL       strlen
000e9c  e1a0b000          MOV      r11,r0
000ea0  e59d0004          LDR      r0,[sp,#4]
000ea4  ebfffffe          BL       strlen
000ea8  e04b0000          SUB      r0,r11,r0
000eac  e58d0000          STR      r0,[sp,#0]
000eb0  e1a02000          MOV      r2,r0
000eb4  e1a01006          MOV      r1,r6
000eb8  e28d0008          ADD      r0,sp,#8
000ebc  ebfffffe          BL       strncpy
;;;506                        reTryCounter++;
000ec0  e2855001          ADD      r5,r5,#1
;;;507                        sprintf(fileNameTmp, "%s_%02d%s", purefileName, reTryCounter, pureExtendName);                    
000ec4  e59d0004          LDR      r0,[sp,#4]
000ec8  e1a03005          MOV      r3,r5
000ecc  e58d0000          STR      r0,[sp,#0]
000ed0  e28d2008          ADD      r2,sp,#8
000ed4  e28f1f55          ADR      r1,|L1.4144|
000ed8  e28d0f43          ADD      r0,sp,#0x10c
000edc  ebfffffe          BL       __2sprintf
;;;508                        sysprintf(" -> fatfsAutoSaveToFile %s%s ERROR: retry %d\r\n", FatFsGetRootStr((FatfsIndex)i), fileNameTmp, reTryCounter); 
000ee0  e20400ff          AND      r0,r4,#0xff
000ee4  ebfffffe          BL       FatFsGetRootStr
000ee8  e1a0b000          MOV      r11,r0
000eec  e1a03005          MOV      r3,r5
000ef0  e28d2f43          ADD      r2,sp,#0x10c
000ef4  e1a0100b          MOV      r1,r11
000ef8  e28f0f4f          ADR      r0,|L1.4156|
000efc  ebfffffe          BL       sysprintf
;;;509                        targetFile = fileNameTmp;
000f00  e28d0f43          ADD      r0,sp,#0x10c
000f04  e58d0108          STR      r0,[sp,#0x108]
;;;510                    }
000f08  e1a00000          MOV      r0,r0
                  |L1.3852|
000f0c  e355000a          CMP      r5,#0xa               ;493
000f10  baffffc5          BLT      |L1.3628|
                  |L1.3860|
000f14  e1a00000          MOV      r0,r0                 ;498
;;;511                }
;;;512                if(reTryCounter == AUTO_SAVE_RETRY_TIMES)
000f18  e355000a          CMP      r5,#0xa
000f1c  1a000075          BNE      |L1.4344|
;;;513                {
;;;514                    autoFormatCounter1++;
000f20  e59f0144          LDR      r0,|L1.4204|
000f24  e5900000          LDR      r0,[r0,#0]  ; autoFormatCounter1
000f28  e2800001          ADD      r0,r0,#1
000f2c  e59f1138          LDR      r1,|L1.4204|
000f30  e5810000          STR      r0,[r1,#0]  ; autoFormatCounter1
;;;515                    if((autoFormatCounter1%3) == 2)
000f34  e3a01003          MOV      r1,#3
000f38  e59f012c          LDR      r0,|L1.4204|
000f3c  e5900000          LDR      r0,[r0,#0]  ; autoFormatCounter1
000f40  ebfffffe          BL       __aeabi_idivmod
000f44  e3510002          CMP      r1,#2
000f48  1a000062          BNE      |L1.4312|
;;;516                    {
;;;517                        sysprintf("[ERROR] fatfsAutoSaveToFile [%s]  Retry (%d) ERROR!!, go format\n", FatFsGetRootStr((FatfsIndex)i), autoFormatCounter1);   
000f4c  e20400ff          AND      r0,r4,#0xff
000f50  ebfffffe          BL       FatFsGetRootStr
000f54  e1a0b000          MOV      r11,r0
000f58  e59f010c          LDR      r0,|L1.4204|
000f5c  e1a0100b          MOV      r1,r11
000f60  e5902000          LDR      r2,[r0,#0]  ; autoFormatCounter1
000f64  e59f0104          LDR      r0,|L1.4208|
000f68  ebfffffe          BL       sysprintf
;;;518                        if(FileAgentFatFsFormat(FatFsGetRootStr((FatfsIndex)i)))
000f6c  e20400ff          AND      r0,r4,#0xff
000f70  ebfffffe          BL       FatFsGetRootStr
000f74  e1a0b000          MOV      r11,r0
000f78  ebfffffe          BL       FileAgentFatFsFormat
000f7c  e3500000          CMP      r0,#0
000f80  0a000006          BEQ      |L1.4000|
;;;519                        {     
;;;520                            sysprintf("[ERROR] fatfsAutoSaveToFile [%s]  f_mkfs OK!!\n", FatFsGetRootStr((FatfsIndex)i));           
000f84  e20400ff          AND      r0,r4,#0xff
000f88  ebfffffe          BL       FatFsGetRootStr
000f8c  e1a0b000          MOV      r11,r0
000f90  e1a0100b          MOV      r1,r11
000f94  e28f00d8          ADR      r0,|L1.4212|
000f98  ebfffffe          BL       sysprintf
000f9c  ea000055          B        |L1.4344|
                  |L1.4000|
;;;521                        }
;;;522                        else
;;;523                        {
;;;524                            sysprintf("[ERROR] fatfsAutoSaveToFile [%s]  f_mkfs error!!\n", FatFsGetRootStr((FatfsIndex)i));
000fa0  e20400ff          AND      r0,r4,#0xff
000fa4  ebfffffe          BL       FatFsGetRootStr
000fa8  e1a0b000          MOV      r11,r0
000fac  e1a0100b          MOV      r1,r11
000fb0  e28f00ec          ADR      r0,|L1.4260|
000fb4  ebfffffe          BL       sysprintf
000fb8  ea00004e          B        |L1.4344|
                  |L1.4028|
000fbc  0d0a205b          DCB      "\r\n [OK] FileAgentFatFsFormat [%s] !!\n",0
000fc0  4f4b5d20
000fc4  46696c65
000fc8  4167656e
000fcc  74466174
000fd0  4673466f
000fd4  726d6174
000fd8  205b2573
000fdc  5d202121
000fe0  0a00    
000fe2  00                DCB      0
000fe3  00                DCB      0
                  |L1.4068|
000fe4  665f6d6b          DCB      "f_mkfs_%s_OK",0
000fe8  66735f25
000fec  735f4f4b
000ff0  00      
000ff1  00                DCB      0
000ff2  00                DCB      0
000ff3  00                DCB      0
                  |L1.4084|
000ff4  0d0a205b          DCB      "\r\n [ERROR] FileAgentFatFsFormat [%s] !!\n",0
000ff8  4552524f
000ffc  525d2046
001000  696c6541
001004  67656e74
001008  46617446
00100c  73466f72
001010  6d617420
001014  5b25735d
001018  2021210a
00101c  00      
00101d  00                DCB      0
00101e  00                DCB      0
00101f  00                DCB      0
                  |L1.4128|
001020  665f6d6b          DCB      "f_mkfs_%s_ERROR",0
001024  66735f25
001028  735f4552
00102c  524f5200
                  |L1.4144|
001030  25735f25          DCB      "%s_%02d%s",0
001034  30326425
001038  7300    
00103a  00                DCB      0
00103b  00                DCB      0
                  |L1.4156|
00103c  202d3e20          DCB      " -> fatfsAutoSaveToFile %s%s ERROR: retry %d\r\n",0
001040  66617466
001044  73417574
001048  6f536176
00104c  65546f46
001050  696c6520
001054  25732573
001058  20455252
00105c  4f523a20
001060  72657472
001064  79202564
001068  0d0a00  
00106b  00                DCB      0
                  |L1.4204|
                          DCD      autoFormatCounter1
                  |L1.4208|
                          DCD      ||.constdata||+0xec
                  |L1.4212|
001074  5b455252          DCB      "[ERROR] fatfsAutoSaveToFile [%s]  f_mkfs OK!!\n",0
001078  4f525d20
00107c  66617466
001080  73417574
001084  6f536176
001088  65546f46
00108c  696c6520
001090  5b25735d
001094  2020665f
001098  6d6b6673
00109c  204f4b21
0010a0  210a00  
0010a3  00                DCB      0
                  |L1.4260|
0010a4  5b455252          DCB      "[ERROR] fatfsAutoSaveToFile [%s]  f_mkfs error!!\n",0
0010a8  4f525d20
0010ac  66617466
0010b0  73417574
0010b4  6f536176
0010b8  65546f46
0010bc  696c6520
0010c0  5b25735d
0010c4  2020665f
0010c8  6d6b6673
0010cc  20657272
0010d0  6f722121
0010d4  0a00    
0010d6  00                DCB      0
0010d7  00                DCB      0
                  |L1.4312|
;;;525                        }
;;;526                    }
;;;527                    else
;;;528                    {
;;;529                        sysprintf("[ERROR] fatfsAutoSaveToFile [%s]  Retry (%d) ERROR, ignore format!!\n", FatFsGetRootStr((FatfsIndex)i), autoFormatCounter1);  
0010d8  e20400ff          AND      r0,r4,#0xff
0010dc  ebfffffe          BL       FatFsGetRootStr
0010e0  e1a0b000          MOV      r11,r0
0010e4  e51f0080          LDR      r0,|L1.4204|
0010e8  e1a0100b          MOV      r1,r11
0010ec  e5902000          LDR      r2,[r0,#0]  ; autoFormatCounter1
0010f0  e59f02d8          LDR      r0,|L1.5072|
0010f4  ebfffffe          BL       sysprintf
                  |L1.4344|
0010f8  e2844001          ADD      r4,r4,#1              ;488
                  |L1.4348|
0010fc  ebfffffe          BL       FatFsGetCounter
001100  e1500004          CMP      r0,r4                 ;488
001104  caffff42          BGT      |L1.3604|
;;;530                    }
;;;531                }
;;;532            }
;;;533        }
;;;534        return reVal;
001108  e1a0000a          MOV      r0,r10
00110c  e28ddf83          ADD      sp,sp,#0x20c
;;;535    }  
001110  e8bd8ff0          POP      {r4-r11,pc}
;;;536    
                          ENDP

                  fatfsAutoGetFromFile PROC
;;;537    
;;;538    static FileAgentReturn fatfsAutoGetFromFile(char* name, uint8_t** buff, size_t* buffLen, BOOL checkMode)
001114  e92d4ff8          PUSH     {r3-r11,lr}
;;;539    {
001118  e1a05000          MOV      r5,r0
00111c  e1a06001          MOV      r6,r1
001120  e1a07002          MOV      r7,r2
001124  e1a08003          MOV      r8,r3
;;;540        //sysprintf(" -> fatfsAutoGetFromFile %s (addType:%d, buffLen:%d): [%s]\r\n", name, addType, buffLen, buff);
;;;541        int i;
;;;542        FileAgentReturn reVal = FILE_AGENT_RETURN_ERROR;
001128  e3a09000          MOV      r9,#0
;;;543        for(i = 0; i < FatFsGetCounter(); i++)
00112c  e3a04000          MOV      r4,#0
001130  ea000017          B        |L1.4500|
                  |L1.4404|
;;;544        {
;;;545            if(FatFsGetExistFlag((FatfsIndex)i))
001134  e20400ff          AND      r0,r4,#0xff
001138  ebfffffe          BL       FatFsGetExistFlag
00113c  e3500000          CMP      r0,#0
001140  0a000012          BEQ      |L1.4496|
;;;546            {
;;;547                if(fatfsGetFromFile(FatFsGetRootStr((FatfsIndex)i), name, buff, buffLen, checkMode))
001144  e20400ff          AND      r0,r4,#0xff
001148  ebfffffe          BL       FatFsGetRootStr
00114c  e1a0a000          MOV      r10,r0
001150  e1a03007          MOV      r3,r7
001154  e1a02006          MOV      r2,r6
001158  e1a01005          MOV      r1,r5
00115c  e58d8000          STR      r8,[sp,#0]
001160  ebfffffe          BL       fatfsGetFromFile
001164  e3500000          CMP      r0,#0
001168  0a000008          BEQ      |L1.4496|
;;;548                {
;;;549                    reVal = reVal|fatfsGetReturnValueByDir(FatFsGetRootStr((FatfsIndex)i));;
00116c  e20400ff          AND      r0,r4,#0xff
001170  ebfffffe          BL       FatFsGetRootStr
001174  e1a0a000          MOV      r10,r0
001178  ebfffffe          BL       fatfsGetReturnValueByDir
00117c  e1899000          ORR      r9,r9,r0
;;;550                    sysprintf(" -> fatfsAutoGetFromFile %s Get it , break...\r\n", name);
001180  e1a01005          MOV      r1,r5
001184  e28f0f92          ADR      r0,|L1.5076|
001188  ebfffffe          BL       sysprintf
;;;551                    break;
00118c  ea000003          B        |L1.4512|
                  |L1.4496|
001190  e2844001          ADD      r4,r4,#1              ;543
                  |L1.4500|
001194  ebfffffe          BL       FatFsGetCounter
001198  e1500004          CMP      r0,r4                 ;543
00119c  caffffe4          BGT      |L1.4404|
                  |L1.4512|
0011a0  e1a00000          MOV      r0,r0
;;;552                }
;;;553            }
;;;554        }
;;;555        return reVal;
0011a4  e1a00009          MOV      r0,r9
;;;556    } 
0011a8  e8bd8ff8          POP      {r3-r11,pc}
;;;557    
                          ENDP

                  fatfsAutoDelFile PROC
;;;558    static FileAgentReturn fatfsAutoDelFile(char* name)
0011ac  e92d41f0          PUSH     {r4-r8,lr}
;;;559    {
0011b0  e24ddc01          SUB      sp,sp,#0x100
0011b4  e1a05000          MOV      r5,r0
;;;560        //sysprintf(" -> fatfsAutoDelFile %s (addType:%d, buffLen:%d): [%s]\r\n", name, addType, buffLen, buff);
;;;561        int i;
;;;562        FileAgentReturn reVal = FILE_AGENT_RETURN_ERROR;
0011b8  e3a06000          MOV      r6,#0
;;;563        for(i = 0; i < FatFsGetCounter(); i++)
0011bc  e3a04000          MOV      r4,#0
0011c0  ea00001f          B        |L1.4676|
                  |L1.4548|
;;;564        {
;;;565            if(FatFsGetExistFlag((FatfsIndex)i))
0011c4  e20400ff          AND      r0,r4,#0xff
0011c8  ebfffffe          BL       FatFsGetExistFlag
0011cc  e3500000          CMP      r0,#0
0011d0  0a00001a          BEQ      |L1.4672|
;;;566            {
;;;567                char fileName[_MAX_LFN];
;;;568                FRESULT reval;
;;;569                sprintf(fileName, "%s%s", FatFsGetRootStr((FatfsIndex)i), name); 
0011d4  e20400ff          AND      r0,r4,#0xff
0011d8  ebfffffe          BL       FatFsGetRootStr
0011dc  e1a08000          MOV      r8,r0
0011e0  e1a03005          MOV      r3,r5
0011e4  e1a02008          MOV      r2,r8
0011e8  e51f15ac          LDR      r1,|L1.3140|
0011ec  e1a0000d          MOV      r0,sp
0011f0  ebfffffe          BL       __2sprintf
;;;570                reval = f_unlink(fileName);
0011f4  e1a0000d          MOV      r0,sp
0011f8  ebfffffe          BL       f_unlink
0011fc  e1a07000          MOV      r7,r0
;;;571                if(reval == FR_OK) 
001200  e3570000          CMP      r7,#0
001204  1a000008          BNE      |L1.4652|
;;;572                {
;;;573                    reVal = reVal|fatfsGetReturnValueByDir(FatFsGetRootStr((FatfsIndex)i));
001208  e20400ff          AND      r0,r4,#0xff
00120c  ebfffffe          BL       FatFsGetRootStr
001210  e1a08000          MOV      r8,r0
001214  ebfffffe          BL       fatfsGetReturnValueByDir
001218  e1866000          ORR      r6,r6,r0
;;;574                    sysprintf("\r\n !![Information FileAgent]!! fatfsAutoDelFile %s : Success\r\n", fileName);
00121c  e1a0100d          MOV      r1,sp
001220  e28f0f77          ADR      r0,|L1.5124|
001224  ebfffffe          BL       sysprintf
001228  ea000003          B        |L1.4668|
                  |L1.4652|
;;;575                    //break;
;;;576                }
;;;577                else
;;;578                {
;;;579                    sysprintf("\r\n !![Information FileAgent]!! fatfsAutoDelFile %s : Error (errorcode: %d)\r\n", fileName, reval);
00122c  e1a02007          MOV      r2,r7
001230  e1a0100d          MOV      r1,sp
001234  e59f0208          LDR      r0,|L1.5188|
001238  ebfffffe          BL       sysprintf
                  |L1.4668|
;;;580                }
;;;581            }
00123c  e1a00000          MOV      r0,r0
                  |L1.4672|
001240  e2844001          ADD      r4,r4,#1              ;563
                  |L1.4676|
001244  ebfffffe          BL       FatFsGetCounter
001248  e1500004          CMP      r0,r4                 ;563
00124c  caffffdc          BGT      |L1.4548|
;;;582        }
;;;583        return reVal;
001250  e1a00006          MOV      r0,r6
001254  e28ddc01          ADD      sp,sp,#0x100
;;;584    } 
001258  e8bd81f0          POP      {r4-r8,pc}
;;;585    
                          ENDP

                  FileAgentGetFatfsList PROC
;;;1166   }
;;;1167   BOOL FileAgentGetFatfsList(char* dir, char* extensionName, char* excludeFileName, fileAgentFatfsListCallback callback, void* para1, void* para2, void* para3, void* para4)
00125c  e92d4ff0          PUSH     {r4-r11,lr}
;;;1168   {
001260  e24ddfd5          SUB      sp,sp,#0x354
001264  e1a04000          MOV      r4,r0
001268  e1a06001          MOV      r6,r1
00126c  e1a07002          MOV      r7,r2
001270  e1a05003          MOV      r5,r3
001274  e59da37c          LDR      r10,[sp,#0x37c]
001278  e59db380          LDR      r11,[sp,#0x380]
;;;1169       //BOOL reVal = FALSE;
;;;1170       FRESULT fr;     /* Return value */
;;;1171       DIR dj;         /* Directory search object */
;;;1172       FILINFO fno;    /* File information */
;;;1173   #if(USER_NEW_FATFS)
;;;1174   #else
;;;1175       TCHAR lfname[_MAX_LFN]; 
;;;1176   #endif    
;;;1177       TCHAR nameTmp[_MAX_LFN]; 
;;;1178       int warningFileNum = 0;
00127c  e3a09000          MOV      r9,#0
;;;1179       BOOL reVal = TRUE;    
001280  e3a00001          MOV      r0,#1
001284  e58d0108          STR      r0,[sp,#0x108]
;;;1180       sysprintf("\r\n >==>  FileAgentGetFatfsList start [%s] [%s] <==<\r\n", dir, extensionName);
001288  e1a02006          MOV      r2,r6
00128c  e1a01004          MOV      r1,r4
001290  e28f0e1b          ADR      r0,|L1.5192|
001294  ebfffffe          BL       sysprintf
;;;1181       if(dir == NULL)
001298  e3540000          CMP      r4,#0
00129c  1a000002          BNE      |L1.4780|
;;;1182       {
;;;1183           return reVal;
0012a0  e59d0108          LDR      r0,[sp,#0x108]
                  |L1.4772|
0012a4  e28ddfd5          ADD      sp,sp,#0x354
;;;1184       }    
;;;1185   #if(USER_NEW_FATFS)
;;;1186   #else    
;;;1187       fno.lfname = lfname; 
;;;1188       fno.lfsize = _MAX_LFN - 1;
;;;1189   #endif    
;;;1190       fr = f_findfirst(&dj, &fno, dir, extensionName);  /* Start to search for photo files */
;;;1191       while (fr == FR_OK && fno.fname[0]) 
;;;1192       {   /* Repeat while an item is found */
;;;1193           #if(USER_NEW_FATFS)
;;;1194           strcpy(nameTmp, fno.fname);
;;;1195           //sysprintf(" FatfsList > get File Name(long)[%d]:[%s] [%s] \r\n", index, nameTmp, fno.lfname);            
;;;1196           
;;;1197           #else
;;;1198           if(strlen(fno.lfname) != 0)
;;;1199           {            
;;;1200               strcpy(nameTmp, fno.lfname);
;;;1201               //sysprintf(" FatfsList > get File Name(long)[%d]:[%s] [%s] \r\n", index, nameTmp, fno.lfname);            
;;;1202           }
;;;1203           else
;;;1204           {
;;;1205               strcpy(nameTmp, fno.fname);
;;;1206               //sysprintf(" FatfsList > get File Name(short)[%d]:[%s] [%s] \r\n", index, nameTmp, fno.fname);
;;;1207           }
;;;1208           #endif
;;;1209           if((fno.fsize == 0xFFFFFFFF) || (fno.fsize == 0))
;;;1210           {
;;;1211               FRESULT reval;
;;;1212               char fileName[_MAX_LFN];        
;;;1213               sprintf(fileName, "%s%s", dir, nameTmp);
;;;1214               reval = f_unlink(fileName);
;;;1215               warningFileNum++;
;;;1216               sysprintf("    >-del->  [%s] [%s] : [%s] return: %d <--<\r\n", dir, nameTmp, fileName, reval);
;;;1217               
;;;1218           }
;;;1219           else
;;;1220           {
;;;1221               if(callback != NULL)
;;;1222               {
;;;1223                   if(excludeFileName != NULL)
;;;1224                   {
;;;1225                       if(strcmp(excludeFileName, nameTmp) != 0)
;;;1226                       {
;;;1227                           sysprintf("    >-->  [%s] [%s] (len = %d) <--<\r\n", dir, nameTmp, fno.fsize);
;;;1228                           if(callback(dir, nameTmp, fno.fsize, para1, para2, para3, para4) == FALSE)
;;;1229                           {
;;;1230                               reVal = FALSE;
;;;1231                           }
;;;1232                       }
;;;1233                   }
;;;1234                   else
;;;1235                   {
;;;1236                       sysprintf("    >-->  [%s] [%s] (len = %d) <--<\r\n", dir, nameTmp, fno.fsize);
;;;1237                       if(callback(dir, nameTmp, fno.fsize, para1, para2, para3, para4) == FALSE)
;;;1238                       {
;;;1239                           reVal = FALSE;
;;;1240                       }
;;;1241                   }
;;;1242                  
;;;1243               }
;;;1244           }
;;;1245           if(reVal == FALSE)
;;;1246           {
;;;1247               sysprintf("    FileAgentGetFatfsList ERROR Break <--<\r\n", dir, nameTmp, fno.fsize);
;;;1248               break;
;;;1249           }
;;;1250           fr = f_findnext(&dj, &fno);               /* Search for next item */
;;;1251       }
;;;1252       sysprintf(" >==>  FileAgentGetFatfsList exit  [%s] [%s] (warningFileNum = %d) <==<\r\n", dir, extensionName, warningFileNum);
;;;1253       f_closedir(&dj);
;;;1254       
;;;1255       if(warningFileNum >= 128)
;;;1256       {        
;;;1257           autoFormatCounter2++;
;;;1258           sysprintf("[ERROR] FileAgentGetFatfsList [%s]  Start f_mkfs!!\n", dir);
;;;1259           if(FileAgentFatFsFormat(dir))
;;;1260           {     
;;;1261               sysprintf("[ERROR] FileAgentGetFatfsList [%s]  f_mkfs OK!!\n", dir);           
;;;1262           }
;;;1263           else
;;;1264           {
;;;1265               sysprintf("[ERROR] FileAgentGetFatfsList [%s]  f_mkfs error!!\n", dir);
;;;1266           }
;;;1267       }
;;;1268       return reVal;
;;;1269   }
0012a8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4780|
0012ac  e28d0f83          ADD      r0,sp,#0x20c          ;1187
0012b0  e58d0324          STR      r0,[sp,#0x324]        ;1187
0012b4  e3a000fe          MOV      r0,#0xfe              ;1188
0012b8  e58d0328          STR      r0,[sp,#0x328]        ;1188
0012bc  e1a03006          MOV      r3,r6                 ;1190
0012c0  e1a02004          MOV      r2,r4                 ;1190
0012c4  e28d1fc3          ADD      r1,sp,#0x30c          ;1190
0012c8  e28d0fcb          ADD      r0,sp,#0x32c          ;1190
0012cc  ebfffffe          BL       f_findfirst
0012d0  e1a08000          MOV      r8,r0                 ;1190
0012d4  ea00009d          B        |L1.5456|
                  |L1.4824|
0012d8  e59d0324          LDR      r0,[sp,#0x324]        ;1198
0012dc  ebfffffe          BL       strlen
0012e0  e3500000          CMP      r0,#0                 ;1198
0012e4  0a000003          BEQ      |L1.4856|
0012e8  e59d1324          LDR      r1,[sp,#0x324]        ;1200
0012ec  e28d0f43          ADD      r0,sp,#0x10c          ;1200
0012f0  ebfffffe          BL       strcpy
0012f4  ea000003          B        |L1.4872|
                  |L1.4856|
0012f8  e28d1c03          ADD      r1,sp,#0x300          ;1205
0012fc  e2811015          ADD      r1,r1,#0x15           ;1205
001300  e28d0f43          ADD      r0,sp,#0x10c          ;1205
001304  ebfffffe          BL       strcpy
                  |L1.4872|
001308  e59d030c          LDR      r0,[sp,#0x30c]        ;1209
00130c  e3700001          CMN      r0,#1                 ;1209
001310  0a000002          BEQ      |L1.4896|
001314  e59d030c          LDR      r0,[sp,#0x30c]        ;1209
001318  e3500000          CMP      r0,#0                 ;1209
00131c  1a000010          BNE      |L1.4964|
                  |L1.4896|
001320  e28d3f43          ADD      r3,sp,#0x10c          ;1213
001324  e1a02004          MOV      r2,r4                 ;1213
001328  e51f16ec          LDR      r1,|L1.3140|
00132c  e28d0004          ADD      r0,sp,#4              ;1213
001330  ebfffffe          BL       __2sprintf
001334  e28d0004          ADD      r0,sp,#4              ;1214
001338  ebfffffe          BL       f_unlink
00133c  e58d0104          STR      r0,[sp,#0x104]        ;1214
001340  e2899001          ADD      r9,r9,#1              ;1215
001344  e59d0104          LDR      r0,[sp,#0x104]        ;1216
001348  e58d0000          STR      r0,[sp,#0]            ;1216
00134c  e28d3004          ADD      r3,sp,#4              ;1216
001350  e28d2f43          ADD      r2,sp,#0x10c          ;1216
001354  e1a01004          MOV      r1,r4                 ;1216
001358  e28f0e12          ADR      r0,|L1.5248|
00135c  ebfffffe          BL       sysprintf
001360  ea00006d          B        |L1.5404|
                  |L1.4964|
001364  e3550000          CMP      r5,#0                 ;1221
001368  0a00006b          BEQ      |L1.5404|
00136c  e3570000          CMP      r7,#0                 ;1223
001370  0a000058          BEQ      |L1.5336|
001374  e28d1f43          ADD      r1,sp,#0x10c          ;1225
001378  e1a00007          MOV      r0,r7                 ;1225
00137c  ebfffffe          BL       strcmp
001380  e3500000          CMP      r0,#0                 ;1225
001384  0a000064          BEQ      |L1.5404|
001388  e59d330c          LDR      r3,[sp,#0x30c]        ;1227
00138c  e28d2f43          ADD      r2,sp,#0x10c          ;1227
001390  e1a01004          MOV      r1,r4                 ;1227
001394  e28f0f45          ADR      r0,|L1.5296|
001398  ebfffffe          BL       sysprintf
00139c  e59d0384          LDR      r0,[sp,#0x384]        ;1228
0013a0  e58d0008          STR      r0,[sp,#8]            ;1228
0013a4  e1cda0f0          STRD     r10,r11,[sp,#0]       ;1228
0013a8  e59d230c          LDR      r2,[sp,#0x30c]        ;1228
0013ac  e59d3378          LDR      r3,[sp,#0x378]        ;1228
0013b0  e28d1f43          ADD      r1,sp,#0x10c          ;1228
0013b4  e1a00004          MOV      r0,r4                 ;1228
0013b8  e12fff35          BLX      r5                    ;1228
0013bc  e3500000          CMP      r0,#0                 ;1228
0013c0  1a000055          BNE      |L1.5404|
0013c4  e3a00000          MOV      r0,#0                 ;1230
0013c8  e58d0108          STR      r0,[sp,#0x108]        ;1230
0013cc  ea000052          B        |L1.5404|
                  |L1.5072|
                          DCD      ||.constdata||+0x130
                  |L1.5076|
0013d4  202d3e20          DCB      " -> fatfsAutoGetFromFile %s Get it , break...\r\n",0
0013d8  66617466
0013dc  73417574
0013e0  6f476574
0013e4  46726f6d
0013e8  46696c65
0013ec  20257320
0013f0  47657420
0013f4  6974202c
0013f8  20627265
0013fc  616b2e2e
001400  2e0d0a00
                  |L1.5124|
001404  0d0a2021          DCB      "\r\n !![Information FileAgent]!! fatfsAutoDelFile %s : "
001408  215b496e
00140c  666f726d
001410  6174696f
001414  6e204669
001418  6c654167
00141c  656e745d
001420  21212066
001424  61746673
001428  4175746f
00142c  44656c46
001430  696c6520
001434  2573203a
001438  20      
001439  53756363          DCB      "Success\r\n",0
00143d  6573730d
001441  0a00    
001443  00                DCB      0
                  |L1.5188|
                          DCD      ||.constdata||+0x178
                  |L1.5192|
001448  0d0a203e          DCB      "\r\n >==>  FileAgentGetFatfsList start [%s] [%s] <==<\r"
00144c  3d3d3e20
001450  2046696c
001454  65416765
001458  6e744765
00145c  74466174
001460  66734c69
001464  73742073
001468  74617274
00146c  205b2573
001470  5d205b25
001474  735d203c
001478  3d3d3c0d
00147c  0a00              DCB      "\n",0
00147e  00                DCB      0
00147f  00                DCB      0
                  |L1.5248|
001480  20202020          DCB      "    >-del->  [%s] [%s] : [%s] return: %d <--<\r\n",0
001484  3e2d6465
001488  6c2d3e20
00148c  205b2573
001490  5d205b25
001494  735d203a
001498  205b2573
00149c  5d207265
0014a0  7475726e
0014a4  3a202564
0014a8  203c2d2d
0014ac  3c0d0a00
                  |L1.5296|
0014b0  20202020          DCB      "    >-->  [%s] [%s] (len = %d) <--<\r\n",0
0014b4  3e2d2d3e
0014b8  20205b25
0014bc  735d205b
0014c0  25735d20
0014c4  286c656e
0014c8  203d2025
0014cc  6429203c
0014d0  2d2d3c0d
0014d4  0a00    
0014d6  00                DCB      0
0014d7  00                DCB      0
                  |L1.5336|
0014d8  e59d330c          LDR      r3,[sp,#0x30c]        ;1236
0014dc  e28d2f43          ADD      r2,sp,#0x10c          ;1236
0014e0  e1a01004          MOV      r1,r4                 ;1236
0014e4  e24f003c          ADR      r0,|L1.5296|
0014e8  ebfffffe          BL       sysprintf
0014ec  e59d0384          LDR      r0,[sp,#0x384]        ;1237
0014f0  e58d0008          STR      r0,[sp,#8]            ;1237
0014f4  e1cda0f0          STRD     r10,r11,[sp,#0]       ;1237
0014f8  e59d230c          LDR      r2,[sp,#0x30c]        ;1237
0014fc  e59d3378          LDR      r3,[sp,#0x378]        ;1237
001500  e28d1f43          ADD      r1,sp,#0x10c          ;1237
001504  e1a00004          MOV      r0,r4                 ;1237
001508  e12fff35          BLX      r5                    ;1237
00150c  e3500000          CMP      r0,#0                 ;1237
001510  1a000001          BNE      |L1.5404|
001514  e3a00000          MOV      r0,#0                 ;1239
001518  e58d0108          STR      r0,[sp,#0x108]        ;1239
                  |L1.5404|
00151c  e59d0108          LDR      r0,[sp,#0x108]        ;1245
001520  e3500000          CMP      r0,#0                 ;1245
001524  1a000005          BNE      |L1.5440|
001528  e59d330c          LDR      r3,[sp,#0x30c]        ;1247
00152c  e28d2f43          ADD      r2,sp,#0x10c          ;1247
001530  e1a01004          MOV      r1,r4                 ;1247
001534  e28f0f82          ADR      r0,|L1.5956|
001538  ebfffffe          BL       sysprintf
00153c  ea000008          B        |L1.5476|
                  |L1.5440|
001540  e28d1fc3          ADD      r1,sp,#0x30c          ;1250
001544  e28d0fcb          ADD      r0,sp,#0x32c          ;1250
001548  ebfffffe          BL       f_findnext
00154c  e1a08000          MOV      r8,r0                 ;1250
                  |L1.5456|
001550  e3580000          CMP      r8,#0                 ;1191
001554  1a000002          BNE      |L1.5476|
001558  e5dd0315          LDRB     r0,[sp,#0x315]        ;1191
00155c  e3500000          CMP      r0,#0                 ;1191
001560  1affff5c          BNE      |L1.4824|
                  |L1.5476|
001564  e1a00000          MOV      r0,r0                 ;1248
001568  e1a03009          MOV      r3,r9                 ;1252
00156c  e1a02006          MOV      r2,r6                 ;1252
001570  e1a01004          MOV      r1,r4                 ;1252
001574  e59f01f8          LDR      r0,|L1.6004|
001578  ebfffffe          BL       sysprintf
00157c  e28d0fcb          ADD      r0,sp,#0x32c          ;1253
001580  ebfffffe          BL       f_closedir
001584  e3590080          CMP      r9,#0x80              ;1255
001588  ba000012          BLT      |L1.5592|
00158c  e59f01e4          LDR      r0,|L1.6008|
001590  e5900000          LDR      r0,[r0,#0]            ;1257  ; autoFormatCounter2
001594  e2800001          ADD      r0,r0,#1              ;1257
001598  e59f11d8          LDR      r1,|L1.6008|
00159c  e5810000          STR      r0,[r1,#0]            ;1257  ; autoFormatCounter2
0015a0  e1a01004          MOV      r1,r4                 ;1258
0015a4  e28f0e1d          ADR      r0,|L1.6012|
0015a8  ebfffffe          BL       sysprintf
0015ac  e1a00004          MOV      r0,r4                 ;1259
0015b0  ebfffffe          BL       FileAgentFatFsFormat
0015b4  e3500000          CMP      r0,#0                 ;1259
0015b8  0a000003          BEQ      |L1.5580|
0015bc  e1a01004          MOV      r1,r4                 ;1261
0015c0  e28f0f7a          ADR      r0,|L1.6064|
0015c4  ebfffffe          BL       sysprintf
0015c8  ea000002          B        |L1.5592|
                  |L1.5580|
0015cc  e1a01004          MOV      r1,r4                 ;1265
0015d0  e28f0f83          ADR      r0,|L1.6116|
0015d4  ebfffffe          BL       sysprintf
                  |L1.5592|
0015d8  e59d0108          LDR      r0,[sp,#0x108]        ;1268
0015dc  eaffff30          B        |L1.4772|
;;;1270   static BOOL listCallback(char* dir, char* filename, int fileLen, void* para1, void* para2, void* para3, void* para4)
                          ENDP

                  fatfsAutoGetList PROC
;;;585    
;;;586    static FileAgentReturn fatfsAutoGetList(char* extensionName, char* excludeFileName, fileAgentFatfsListCallback callback, void* para1, void* para2, void* para3, void* para4)
0015e0  e92d4ff0          PUSH     {r4-r11,lr}
;;;587    {
0015e4  e24dd014          SUB      sp,sp,#0x14
0015e8  e1a05000          MOV      r5,r0
0015ec  e1a06001          MOV      r6,r1
0015f0  e1a07002          MOV      r7,r2
0015f4  e1a08003          MOV      r8,r3
0015f8  e1cda3d8          LDRD     r10,r11,[sp,#0x38]
;;;588        //sysprintf(" -> fatfsAutoGetList %s (addType:%d, buffLen:%d): [%s]\r\n", name, addType, buffLen, buff);
;;;589        int i;
;;;590        FileAgentReturn reVal = FILE_AGENT_RETURN_ERROR;
0015fc  e3a09000          MOV      r9,#0
;;;591        for(i = 0; i < FatFsGetCounter(); i++)
001600  e3a04000          MOV      r4,#0
001604  ea000016          B        |L1.5732|
                  |L1.5640|
;;;592        {
;;;593            if(FatFsGetExistFlag((FatfsIndex)i))
001608  e20400ff          AND      r0,r4,#0xff
00160c  ebfffffe          BL       FatFsGetExistFlag
001610  e3500000          CMP      r0,#0
001614  0a000011          BEQ      |L1.5728|
;;;594            {
;;;595                if(FileAgentGetFatfsList(FatFsGetRootStr((FatfsIndex)i), extensionName, excludeFileName, callback, para1, para2, para3, para4) )
001618  e20400ff          AND      r0,r4,#0xff
00161c  ebfffffe          BL       FatFsGetRootStr
001620  e58d0010          STR      r0,[sp,#0x10]
001624  e59d0040          LDR      r0,[sp,#0x40]
001628  e1a03007          MOV      r3,r7
00162c  e1a02006          MOV      r2,r6
001630  e1a01005          MOV      r1,r5
001634  e58d000c          STR      r0,[sp,#0xc]
001638  e88d0d00          STM      sp,{r8,r10,r11}
00163c  e59d0010          LDR      r0,[sp,#0x10]
001640  ebfffffe          BL       FileAgentGetFatfsList
001644  e3500000          CMP      r0,#0
001648  0a000004          BEQ      |L1.5728|
;;;596                {
;;;597                    reVal = reVal|fatfsGetReturnValueByDir(FatFsGetRootStr((FatfsIndex)i));;
00164c  e20400ff          AND      r0,r4,#0xff
001650  ebfffffe          BL       FatFsGetRootStr
001654  e58d0010          STR      r0,[sp,#0x10]
001658  ebfffffe          BL       fatfsGetReturnValueByDir
00165c  e1899000          ORR      r9,r9,r0
                  |L1.5728|
001660  e2844001          ADD      r4,r4,#1              ;591
                  |L1.5732|
001664  ebfffffe          BL       FatFsGetCounter
001668  e1500004          CMP      r0,r4                 ;591
00166c  caffffe5          BGT      |L1.5640|
;;;598                    //break;
;;;599                }
;;;600            }
;;;601        }
;;;602        return reVal;
001670  e1a00009          MOV      r0,r9
001674  e28dd014          ADD      sp,sp,#0x14
;;;603    } 
001678  e8bd8ff0          POP      {r4-r11,pc}
;;;604    
                          ENDP

                  yaffs2SaveToFile PROC
;;;605    static BOOL yaffs2SaveToFile(char* fileName, FileAgentAddType addType, uint8_t* buff, size_t buffLen, BOOL checkMode)
00167c  e92d5ff0          PUSH     {r4-r12,lr}
;;;606    {    
001680  e1a09000          MOV      r9,r0
001684  e1a07001          MOV      r7,r1
001688  e1a08002          MOV      r8,r2
00168c  e1a04003          MOV      r4,r3
001690  e59da028          LDR      r10,[sp,#0x28]
;;;607        uint32_t bytesWritten = 0;
001694  e3a06000          MOV      r6,#0
;;;608        int outh;
;;;609        xSemaphoreTake(xYaffs2ReadWriteMutex, portMAX_DELAY); 
001698  e3a03000          MOV      r3,#0
00169c  e3e02000          MVN      r2,#0
0016a0  e1a01003          MOV      r1,r3
0016a4  e59f016c          LDR      r0,|L1.6168|
0016a8  e5900000          LDR      r0,[r0,#0]  ; xYaffs2ReadWriteMutex
0016ac  ebfffffe          BL       xQueueGenericReceive
;;;610        //sysprintf("yaffs2SaveToFile %s (addType:%d, buffLen:%d): [%s]\r\n", fileName, addType, buffLen, buff);
;;;611        switch(addType)
0016b0  e3570000          CMP      r7,#0
0016b4  0a000002          BEQ      |L1.5828|
0016b8  e3570001          CMP      r7,#1
0016bc  1a00000e          BNE      |L1.5884|
0016c0  ea000006          B        |L1.5856|
                  |L1.5828|
;;;612        {
;;;613            case FILE_AGENT_ADD_DATA_TYPE_OVERWRITE:
0016c4  e1a00000          MOV      r0,r0
;;;614                outh = yaffs_open(fileName, O_CREAT | O_RDWR | O_TRUNC, S_IREAD | S_IWRITE);            
0016c8  e3a02d06          MOV      r2,#0x180
0016cc  e28210c2          ADD      r1,r2,#0xc2
0016d0  e1a00009          MOV      r0,r9
0016d4  ebfffffe          BL       yaffs_open
0016d8  e1a05000          MOV      r5,r0
;;;615                break;
0016dc  ea000006          B        |L1.5884|
                  |L1.5856|
;;;616            case FILE_AGENT_ADD_DATA_TYPE_APPEND:
0016e0  e1a00000          MOV      r0,r0
;;;617                outh = yaffs_open(fileName, O_CREAT | O_RDWR | O_APPEND, S_IREAD | S_IWRITE);  
0016e4  e3a02d06          MOV      r2,#0x180
0016e8  e59f112c          LDR      r1,|L1.6172|
0016ec  e1a00009          MOV      r0,r9
0016f0  ebfffffe          BL       yaffs_open
0016f4  e1a05000          MOV      r5,r0
;;;618                break;    
0016f8  e1a00000          MOV      r0,r0
                  |L1.5884|
0016fc  e1a00000          MOV      r0,r0                 ;615
;;;619        }    
;;;620    
;;;621        if (outh < 0) 
001700  e3550000          CMP      r5,#0
001704  aa000050          BGE      |L1.6220|
;;;622        {
;;;623            sysprintf("yaffs2SaveToFile %s : open error %d, %s\n", fileName, outh, Yaffs2ErrorStr());
001708  ebfffffe          BL       Yaffs2ErrorStr
00170c  e1a0b000          MOV      r11,r0
001710  e1a0300b          MOV      r3,r11
001714  e1a02005          MOV      r2,r5
001718  e1a01009          MOV      r1,r9
00171c  e28f00fc          ADR      r0,|L1.6176|
001720  ebfffffe          BL       sysprintf
;;;624            xSemaphoreGive(xYaffs2ReadWriteMutex); 
001724  e3a03000          MOV      r3,#0
001728  e1a02003          MOV      r2,r3
00172c  e1a01003          MOV      r1,r3
001730  e59f00e0          LDR      r0,|L1.6168|
001734  e5900000          LDR      r0,[r0,#0]  ; xYaffs2ReadWriteMutex
001738  ebfffffe          BL       xQueueGenericSend
;;;625            return FILE_AGENT_RETURN_ERROR;
00173c  e3a00000          MOV      r0,#0
                  |L1.5952|
;;;626        }
;;;627        
;;;628        switch(addType)
;;;629        {
;;;630            case FILE_AGENT_ADD_DATA_TYPE_OVERWRITE:                   
;;;631                break;
;;;632            case FILE_AGENT_ADD_DATA_TYPE_APPEND:
;;;633                //yaffs_lseek(outh, 0, SEEK_END);         
;;;634                break;    
;;;635        }
;;;636        
;;;637        if(checkMode)
;;;638        {
;;;639            faHeader.Len = buffLen;    
;;;640            bytesWritten = yaffs_write(outh, &faHeader, sizeof(faHeader)); 
;;;641            if(bytesWritten != sizeof(faHeader)) /*EOF or Error*/
;;;642            {
;;;643                sysprintf("yaffs2SaveToFile %s : write faHeader error (%d)\r\n", fileName, bytesWritten);
;;;644                yaffs_close(outh); 
;;;645                xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;646                return FILE_AGENT_RETURN_ERROR;
;;;647            }
;;;648        }
;;;649        
;;;650        bytesWritten = yaffs_write(outh, buff, buffLen);  
;;;651        if(bytesWritten != buffLen) /*EOF or Error*/
;;;652        {
;;;653            sysprintf("yaffs2SaveToFile %s : write error\r\n", fileName);
;;;654            yaffs_close(outh);
;;;655            xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;656            return FILE_AGENT_RETURN_ERROR;
;;;657        }
;;;658        if(checkMode)
;;;659        {
;;;660            faEnd.checksum = getChecksum(buff, buffLen, "fatfsSaveToFile");  
;;;661            bytesWritten = yaffs_write(outh, &faEnd, sizeof(faEnd)); 
;;;662            if(bytesWritten != sizeof(faEnd)) /*EOF or Error*/
;;;663            {
;;;664                sysprintf("yaffs2SaveToFile %s : write faEnd error (%d)\r\n", fileName, bytesWritten);
;;;665                yaffs_close(outh); 
;;;666                xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;667                return FILE_AGENT_RETURN_ERROR;
;;;668            }
;;;669        }
;;;670        //sysprintf("yaffs2SaveToFile %s : Success[%s]\r\n", fileName, buff);
;;;671        //Yaffs2ListFileEx("/");
;;;672        yaffs_close(outh);
;;;673        sysprintf("[ok]");
;;;674        xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;675        return FILE_AGENT_RETURN_OK_YAFFS2;
;;;676    }   
001740  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5956|
001744  20202020          DCB      "    FileAgentGetFatfsList ERROR Break <--<\r\n",0
001748  46696c65
00174c  4167656e
001750  74476574
001754  46617466
001758  734c6973
00175c  74204552
001760  524f5220
001764  42726561
001768  6b203c2d
00176c  2d3c0d0a
001770  00      
001771  00                DCB      0
001772  00                DCB      0
001773  00                DCB      0
                  |L1.6004|
                          DCD      ||.constdata||+0x1c8
                  |L1.6008|
                          DCD      autoFormatCounter2
                  |L1.6012|
00177c  5b455252          DCB      "[ERROR] FileAgentGetFatfsList [%s]  Start f_mkfs!!\n",0
001780  4f525d20
001784  46696c65
001788  4167656e
00178c  74476574
001790  46617466
001794  734c6973
001798  74205b25
00179c  735d2020
0017a0  53746172
0017a4  7420665f
0017a8  6d6b6673
0017ac  21210a00
                  |L1.6064|
0017b0  5b455252          DCB      "[ERROR] FileAgentGetFatfsList [%s]  f_mkfs OK!!\n",0
0017b4  4f525d20
0017b8  46696c65
0017bc  4167656e
0017c0  74476574
0017c4  46617466
0017c8  734c6973
0017cc  74205b25
0017d0  735d2020
0017d4  665f6d6b
0017d8  6673204f
0017dc  4b21210a
0017e0  00      
0017e1  00                DCB      0
0017e2  00                DCB      0
0017e3  00                DCB      0
                  |L1.6116|
0017e4  5b455252          DCB      "[ERROR] FileAgentGetFatfsList [%s]  f_mkfs error!!\n",0
0017e8  4f525d20
0017ec  46696c65
0017f0  4167656e
0017f4  74476574
0017f8  46617466
0017fc  734c6973
001800  74205b25
001804  735d2020
001808  665f6d6b
00180c  66732065
001810  72726f72
001814  21210a00
                  |L1.6168|
                          DCD      xYaffs2ReadWriteMutex
                  |L1.6172|
                          DCD      0x00000442
                  |L1.6176|
001820  79616666          DCB      "yaffs2SaveToFile %s : open error %d, %s\n",0
001824  73325361
001828  7665546f
00182c  46696c65
001830  20257320
001834  3a206f70
001838  656e2065
00183c  72726f72
001840  2025642c
001844  2025730a
001848  00      
001849  00                DCB      0
00184a  00                DCB      0
00184b  00                DCB      0
                  |L1.6220|
00184c  e3570000          CMP      r7,#0                 ;628
001850  0a000002          BEQ      |L1.6240|
001854  e3570001          CMP      r7,#1                 ;628
001858  1a000004          BNE      |L1.6256|
00185c  ea000001          B        |L1.6248|
                  |L1.6240|
001860  e1a00000          MOV      r0,r0                 ;630
001864  ea000001          B        |L1.6256|
                  |L1.6248|
001868  e1a00000          MOV      r0,r0                 ;632
00186c  e1a00000          MOV      r0,r0                 ;634
                  |L1.6256|
001870  e1a00000          MOV      r0,r0                 ;631
001874  e35a0000          CMP      r10,#0                ;637
001878  0a000015          BEQ      |L1.6356|
00187c  e59f1298          LDR      r1,|L1.6940|
001880  e1c140b2          STRH     r4,[r1,#2]            ;639  ; faHeader
001884  e3a02004          MOV      r2,#4                 ;640
001888  e1a00005          MOV      r0,r5                 ;640
00188c  ebfffffe          BL       yaffs_write
001890  e1a06000          MOV      r6,r0                 ;640
001894  e3560004          CMP      r6,#4                 ;641
001898  0a00000d          BEQ      |L1.6356|
00189c  e1a02006          MOV      r2,r6                 ;643
0018a0  e1a01009          MOV      r1,r9                 ;643
0018a4  e28f0f9d          ADR      r0,|L1.6944|
0018a8  ebfffffe          BL       sysprintf
0018ac  e1a00005          MOV      r0,r5                 ;644
0018b0  ebfffffe          BL       yaffs_close
0018b4  e3a03000          MOV      r3,#0                 ;645
0018b8  e1a02003          MOV      r2,r3                 ;645
0018bc  e1a01003          MOV      r1,r3                 ;645
0018c0  e51f00b0          LDR      r0,|L1.6168|
0018c4  e5900000          LDR      r0,[r0,#0]            ;645  ; xYaffs2ReadWriteMutex
0018c8  ebfffffe          BL       xQueueGenericSend
0018cc  e3a00000          MOV      r0,#0                 ;646
0018d0  eaffff9a          B        |L1.5952|
                  |L1.6356|
0018d4  e1a02004          MOV      r2,r4                 ;650
0018d8  e1a01008          MOV      r1,r8                 ;650
0018dc  e1a00005          MOV      r0,r5                 ;650
0018e0  ebfffffe          BL       yaffs_write
0018e4  e1a06000          MOV      r6,r0                 ;650
0018e8  e1560004          CMP      r6,r4                 ;651
0018ec  0a00000c          BEQ      |L1.6436|
0018f0  e1a01009          MOV      r1,r9                 ;653
0018f4  e28f0f96          ADR      r0,|L1.6996|
0018f8  ebfffffe          BL       sysprintf
0018fc  e1a00005          MOV      r0,r5                 ;654
001900  ebfffffe          BL       yaffs_close
001904  e3a03000          MOV      r3,#0                 ;655
001908  e1a02003          MOV      r2,r3                 ;655
00190c  e1a01003          MOV      r1,r3                 ;655
001910  e51f0100          LDR      r0,|L1.6168|
001914  e5900000          LDR      r0,[r0,#0]            ;655  ; xYaffs2ReadWriteMutex
001918  ebfffffe          BL       xQueueGenericSend
00191c  e3a00000          MOV      r0,#0                 ;656
001920  eaffff86          B        |L1.5952|
                  |L1.6436|
001924  e35a0000          CMP      r10,#0                ;658
001928  0a00001a          BEQ      |L1.6552|
00192c  e1a01804          LSL      r1,r4,#16             ;660
001930  e1a01821          LSR      r1,r1,#16             ;660
001934  e59f223c          LDR      r2,|L1.7032|
001938  e1a00008          MOV      r0,r8                 ;660
00193c  ebfffffe          BL       getChecksum
001940  e59f1234          LDR      r1,|L1.7036|
001944  e1c100b0          STRH     r0,[r1,#0]            ;660  ; faEnd
001948  e3a02004          MOV      r2,#4                 ;661
00194c  e1a00005          MOV      r0,r5                 ;661
001950  ebfffffe          BL       yaffs_write
001954  e1a06000          MOV      r6,r0                 ;661
001958  e3560004          CMP      r6,#4                 ;662
00195c  0a00000d          BEQ      |L1.6552|
001960  e1a02006          MOV      r2,r6                 ;664
001964  e1a01009          MOV      r1,r9                 ;664
001968  e28f0e21          ADR      r0,|L1.7040|
00196c  ebfffffe          BL       sysprintf
001970  e1a00005          MOV      r0,r5                 ;665
001974  ebfffffe          BL       yaffs_close
001978  e3a03000          MOV      r3,#0                 ;666
00197c  e1a02003          MOV      r2,r3                 ;666
001980  e1a01003          MOV      r1,r3                 ;666
001984  e51f0174          LDR      r0,|L1.6168|
001988  e5900000          LDR      r0,[r0,#0]            ;666  ; xYaffs2ReadWriteMutex
00198c  ebfffffe          BL       xQueueGenericSend
001990  e3a00000          MOV      r0,#0                 ;667
001994  eaffff69          B        |L1.5952|
                  |L1.6552|
001998  e1a00005          MOV      r0,r5                 ;672
00199c  ebfffffe          BL       yaffs_close
0019a0  e28f0f82          ADR      r0,|L1.7088|
0019a4  ebfffffe          BL       sysprintf
0019a8  e3a03000          MOV      r3,#0                 ;674
0019ac  e1a02003          MOV      r2,r3                 ;674
0019b0  e1a01003          MOV      r1,r3                 ;674
0019b4  e51f01a4          LDR      r0,|L1.6168|
0019b8  e5900000          LDR      r0,[r0,#0]            ;674  ; xYaffs2ReadWriteMutex
0019bc  ebfffffe          BL       xQueueGenericSend
0019c0  e3a00001          MOV      r0,#1                 ;675
0019c4  eaffff5d          B        |L1.5952|
;;;677    
                          ENDP

                  yaffs2GetFromFile PROC
;;;678    
;;;679    static FileAgentReturn yaffs2GetFromFile(char* fileName, uint8_t** buff, size_t* buffLen, BOOL checkMode)
0019c8  e92d47f0          PUSH     {r4-r10,lr}
;;;680    {
0019cc  e24dd048          SUB      sp,sp,#0x48
0019d0  e1a07000          MOV      r7,r0
0019d4  e1a05001          MOV      r5,r1
0019d8  e1a04002          MOV      r4,r2
0019dc  e1a08003          MOV      r8,r3
;;;681        int outh;
;;;682        struct yaffs_stat stat;
;;;683        xSemaphoreTake(xYaffs2ReadWriteMutex, portMAX_DELAY); 
0019e0  e3a03000          MOV      r3,#0
0019e4  e3e02000          MVN      r2,#0
0019e8  e1a01003          MOV      r1,r3
0019ec  e51f01dc          LDR      r0,|L1.6168|
0019f0  e5900000          LDR      r0,[r0,#0]  ; xYaffs2ReadWriteMutex
0019f4  ebfffffe          BL       xQueueGenericReceive
;;;684        outh= yaffs_open(fileName, O_RDWR, 0);
0019f8  e3a02000          MOV      r2,#0
0019fc  e3a01002          MOV      r1,#2
001a00  e1a00007          MOV      r0,r7
001a04  ebfffffe          BL       yaffs_open
001a08  e1a06000          MOV      r6,r0
;;;685        if (outh < 0) 
001a0c  e3560000          CMP      r6,#0
001a10  aa00000f          BGE      |L1.6740|
;;;686        {
;;;687            sysprintf("yaffs2GetFromFile %s : open error %d, %s\n", fileName, outh, Yaffs2ErrorStr());
001a14  ebfffffe          BL       Yaffs2ErrorStr
001a18  e1a09000          MOV      r9,r0
001a1c  e1a03009          MOV      r3,r9
001a20  e1a02006          MOV      r2,r6
001a24  e1a01007          MOV      r1,r7
001a28  e28f0f62          ADR      r0,|L1.7096|
001a2c  ebfffffe          BL       sysprintf
;;;688            xSemaphoreGive(xYaffs2ReadWriteMutex); 
001a30  e3a03000          MOV      r3,#0
001a34  e1a02003          MOV      r2,r3
001a38  e1a01003          MOV      r1,r3
001a3c  e51f022c          LDR      r0,|L1.6168|
001a40  e5900000          LDR      r0,[r0,#0]  ; xYaffs2ReadWriteMutex
001a44  ebfffffe          BL       xQueueGenericSend
;;;689            return FILE_AGENT_RETURN_ERROR;
001a48  e3a00000          MOV      r0,#0
                  |L1.6732|
001a4c  e28dd048          ADD      sp,sp,#0x48
;;;690        }
;;;691        if(yaffs_fstat(outh, &stat) == 0)
;;;692        {
;;;693            *buffLen = stat.st_size;
;;;694            if(*buffLen > 0)
;;;695            {
;;;696                *buff =  pvPortMalloc(*buffLen);   
;;;697                if(buff != NULL)
;;;698                {
;;;699                    int readLen = yaffs_read(outh, *buff, *buffLen);
;;;700                    yaffs_close(outh);
;;;701                    if(*buffLen == readLen)
;;;702                    {
;;;703                    }
;;;704                    else
;;;705                    {
;;;706                        sysprintf("yaffs2GetFromFile %s : yaffs_read error (%d, %d)\r\n", fileName, *buffLen, readLen);
;;;707                        xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;708                        return FILE_AGENT_RETURN_ERROR;
;;;709                    }
;;;710                }
;;;711                else
;;;712                {
;;;713                    sysprintf("yaffs2GetFromFile %s : pvPortMalloc error\r\n", fileName);
;;;714                    xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;715                    return FILE_AGENT_RETURN_ERROR;
;;;716                }
;;;717            }
;;;718            else
;;;719            {
;;;720                sysprintf("yaffs2GetFromFile %s : stat.st_size error\r\n", fileName);
;;;721                xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;722                return FILE_AGENT_RETURN_ERROR;
;;;723            }
;;;724        }
;;;725        else
;;;726        {
;;;727            sysprintf("yaffs2GetFromFile %s : yaffs_fstat(outh, &stat) error\r\n", fileName);
;;;728            xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;729            return FILE_AGENT_RETURN_ERROR;
;;;730        }
;;;731        
;;;732        if(checkMode)
;;;733        {
;;;734            uint8_t* buffTmp = *buff;
;;;735            size_t buffLenTmp = *buffLen;
;;;736            uint8_t* targetData;
;;;737            size_t targetDataLen;
;;;738            if(FileAgentParserAutoData(buffTmp, buffLenTmp, &targetData, &targetDataLen))
;;;739            {
;;;740                //sysprintf("[ INFO ]processRead parser (len = %d):[%s]...\r\n", targetDataLen, targetData); 
;;;741                *buff =  pvPortMalloc(targetDataLen);   
;;;742                if(buff != NULL)
;;;743                {
;;;744                    *buffLen = targetDataLen;
;;;745                    memcpy(*buff, targetData, targetDataLen);
;;;746                    vPortFree(buffTmp);   
;;;747                }
;;;748                else
;;;749                {
;;;750                    sysprintf("fatfsGetFromFile %s : pvPortMalloc error\r\n", fileName);
;;;751                    vPortFree(buffTmp);
;;;752                    xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;753                    return FILE_AGENT_RETURN_ERROR;
;;;754                }
;;;755               
;;;756            }
;;;757            else
;;;758            {
;;;759                sysprintf("yaffs2GetFromFile %s : parser error\r\n", fileName);
;;;760                xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;761                return FILE_AGENT_RETURN_ERROR;
;;;762            }
;;;763        }        
;;;764        //sysprintf("yaffs2GetFromFile %s : Success\r\n", fileName);
;;;765        sysprintf("[ok]");
;;;766        xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;767        return FILE_AGENT_RETURN_OK_YAFFS2;
;;;768    }
001a50  e8bd87f0          POP      {r4-r10,pc}
                  |L1.6740|
001a54  e28d1008          ADD      r1,sp,#8              ;691
001a58  e1a00006          MOV      r0,r6                 ;691
001a5c  ebfffffe          BL       yaffs_fstat
001a60  e3500000          CMP      r0,#0                 ;691
001a64  1a000081          BNE      |L1.7280|
001a68  e59d0028          LDR      r0,[sp,#0x28]         ;693
001a6c  e5840000          STR      r0,[r4,#0]            ;693
001a70  e5940000          LDR      r0,[r4,#0]            ;694
001a74  e3500000          CMP      r0,#0                 ;694
001a78  0a000071          BEQ      |L1.7236|
001a7c  e5940000          LDR      r0,[r4,#0]            ;696
001a80  ebfffffe          BL       pvPortMalloc
001a84  e5850000          STR      r0,[r5,#0]            ;696
001a88  e3550000          CMP      r5,#0                 ;697
001a8c  0a000017          BEQ      |L1.6896|
001a90  e5942000          LDR      r2,[r4,#0]            ;699
001a94  e1a00006          MOV      r0,r6                 ;699
001a98  e5951000          LDR      r1,[r5,#0]            ;699
001a9c  ebfffffe          BL       yaffs_read
001aa0  e1a09000          MOV      r9,r0                 ;699
001aa4  e1a00006          MOV      r0,r6                 ;700
001aa8  ebfffffe          BL       yaffs_close
001aac  e5940000          LDR      r0,[r4,#0]            ;701
001ab0  e1500009          CMP      r0,r9                 ;701
001ab4  0a00000c          BEQ      |L1.6892|
001ab8  e1a03009          MOV      r3,r9                 ;706
001abc  e1a01007          MOV      r1,r7                 ;706
001ac0  e28f0f47          ADR      r0,|L1.7140|
001ac4  e5942000          LDR      r2,[r4,#0]            ;706
001ac8  ebfffffe          BL       sysprintf
001acc  e3a03000          MOV      r3,#0                 ;707
001ad0  e1a02003          MOV      r2,r3                 ;707
001ad4  e1a01003          MOV      r1,r3                 ;707
001ad8  e51f02c8          LDR      r0,|L1.6168|
001adc  e5900000          LDR      r0,[r0,#0]            ;707  ; xYaffs2ReadWriteMutex
001ae0  ebfffffe          BL       xQueueGenericSend
001ae4  e3a00000          MOV      r0,#0                 ;708
001ae8  eaffffd7          B        |L1.6732|
                  |L1.6892|
001aec  ea00006a          B        |L1.7324|
                  |L1.6896|
001af0  e1a01007          MOV      r1,r7                 ;713
001af4  e28f0f47          ADR      r0,|L1.7192|
001af8  ebfffffe          BL       sysprintf
001afc  e3a03000          MOV      r3,#0                 ;714
001b00  e1a02003          MOV      r2,r3                 ;714
001b04  e1a01003          MOV      r1,r3                 ;714
001b08  e51f02f8          LDR      r0,|L1.6168|
001b0c  e5900000          LDR      r0,[r0,#0]            ;714  ; xYaffs2ReadWriteMutex
001b10  ebfffffe          BL       xQueueGenericSend
001b14  e3a00000          MOV      r0,#0                 ;715
001b18  eaffffcb          B        |L1.6732|
                  |L1.6940|
                          DCD      faHeader
                  |L1.6944|
001b20  79616666          DCB      "yaffs2SaveToFile %s : write faHeader error (%d)\r\n",0
001b24  73325361
001b28  7665546f
001b2c  46696c65
001b30  20257320
001b34  3a207772
001b38  69746520
001b3c  66614865
001b40  61646572
001b44  20657272
001b48  6f722028
001b4c  2564290d
001b50  0a00    
001b52  00                DCB      0
001b53  00                DCB      0
                  |L1.6996|
001b54  79616666          DCB      "yaffs2SaveToFile %s : write error\r\n",0
001b58  73325361
001b5c  7665546f
001b60  46696c65
001b64  20257320
001b68  3a207772
001b6c  69746520
001b70  6572726f
001b74  720d0a00
                  |L1.7032|
                          DCD      ||.text||+0x664
                  |L1.7036|
                          DCD      faEnd
                  |L1.7040|
001b80  79616666          DCB      "yaffs2SaveToFile %s : write faEnd error (%d)\r\n",0
001b84  73325361
001b88  7665546f
001b8c  46696c65
001b90  20257320
001b94  3a207772
001b98  69746520
001b9c  6661456e
001ba0  64206572
001ba4  726f7220
001ba8  28256429
001bac  0d0a00  
001baf  00                DCB      0
                  |L1.7088|
001bb0  5b6f6b5d          DCB      "[ok]",0
001bb4  00      
001bb5  00                DCB      0
001bb6  00                DCB      0
001bb7  00                DCB      0
                  |L1.7096|
001bb8  79616666          DCB      "yaffs2GetFromFile %s : open error %d, %s\n",0
001bbc  73324765
001bc0  7446726f
001bc4  6d46696c
001bc8  65202573
001bcc  203a206f
001bd0  70656e20
001bd4  6572726f
001bd8  72202564
001bdc  2c202573
001be0  0a00    
001be2  00                DCB      0
001be3  00                DCB      0
                  |L1.7140|
001be4  79616666          DCB      "yaffs2GetFromFile %s : yaffs_read error (%d, %d)\r\n",0
001be8  73324765
001bec  7446726f
001bf0  6d46696c
001bf4  65202573
001bf8  203a2079
001bfc  61666673
001c00  5f726561
001c04  64206572
001c08  726f7220
001c0c  2825642c
001c10  20256429
001c14  0d0a00  
001c17  00                DCB      0
                  |L1.7192|
001c18  79616666          DCB      "yaffs2GetFromFile %s : pvPortMalloc error\r\n",0
001c1c  73324765
001c20  7446726f
001c24  6d46696c
001c28  65202573
001c2c  203a2070
001c30  76506f72
001c34  744d616c
001c38  6c6f6320
001c3c  6572726f
001c40  720d0a00
                  |L1.7236|
001c44  e1a01007          MOV      r1,r7                 ;720
001c48  e28f0f89          ADR      r0,|L1.7796|
001c4c  ebfffffe          BL       sysprintf
001c50  e3a03000          MOV      r3,#0                 ;721
001c54  e1a02003          MOV      r2,r3                 ;721
001c58  e1a01003          MOV      r1,r3                 ;721
001c5c  e51f044c          LDR      r0,|L1.6168|
001c60  e5900000          LDR      r0,[r0,#0]            ;721  ; xYaffs2ReadWriteMutex
001c64  ebfffffe          BL       xQueueGenericSend
001c68  e3a00000          MOV      r0,#0                 ;722
001c6c  eaffff76          B        |L1.6732|
                  |L1.7280|
001c70  e1a01007          MOV      r1,r7                 ;727
001c74  e28f0f89          ADR      r0,|L1.7840|
001c78  ebfffffe          BL       sysprintf
001c7c  e3a03000          MOV      r3,#0                 ;728
001c80  e1a02003          MOV      r2,r3                 ;728
001c84  e1a01003          MOV      r1,r3                 ;728
001c88  e51f0478          LDR      r0,|L1.6168|
001c8c  e5900000          LDR      r0,[r0,#0]            ;728  ; xYaffs2ReadWriteMutex
001c90  ebfffffe          BL       xQueueGenericSend
001c94  e3a00000          MOV      r0,#0                 ;729
001c98  eaffff6b          B        |L1.6732|
                  |L1.7324|
001c9c  e3580000          CMP      r8,#0                 ;732
001ca0  0a00002f          BEQ      |L1.7524|
001ca4  e5959000          LDR      r9,[r5,#0]            ;734
001ca8  e594a000          LDR      r10,[r4,#0]           ;735
001cac  e1a0300d          MOV      r3,sp                 ;738
001cb0  e28d2004          ADD      r2,sp,#4              ;738
001cb4  e1a0100a          MOV      r1,r10                ;738
001cb8  e1a00009          MOV      r0,r9                 ;738
001cbc  ebfffffe          BL       FileAgentParserAutoData
001cc0  e3500000          CMP      r0,#0                 ;738
001cc4  0a00001a          BEQ      |L1.7476|
001cc8  e59d0000          LDR      r0,[sp,#0]            ;741
001ccc  ebfffffe          BL       pvPortMalloc
001cd0  e5850000          STR      r0,[r5,#0]            ;741
001cd4  e3550000          CMP      r5,#0                 ;742
001cd8  0a000008          BEQ      |L1.7424|
001cdc  e59d0000          LDR      r0,[sp,#0]            ;744
001ce0  e5840000          STR      r0,[r4,#0]            ;744
001ce4  e5950000          LDR      r0,[r5,#0]            ;745
001ce8  e59d1004          LDR      r1,[sp,#4]            ;745
001cec  e59d2000          LDR      r2,[sp,#0]            ;745
001cf0  ebfffffe          BL       __aeabi_memcpy
001cf4  e1a00009          MOV      r0,r9                 ;746
001cf8  ebfffffe          BL       vPortFree
001cfc  ea000017          B        |L1.7520|
                  |L1.7424|
001d00  e1a01007          MOV      r1,r7                 ;750
001d04  e59f01cc          LDR      r0,|L1.7896|
001d08  ebfffffe          BL       sysprintf
001d0c  e1a00009          MOV      r0,r9                 ;751
001d10  ebfffffe          BL       vPortFree
001d14  e3a03000          MOV      r3,#0                 ;752
001d18  e1a02003          MOV      r2,r3                 ;752
001d1c  e1a01003          MOV      r1,r3                 ;752
001d20  e51f0510          LDR      r0,|L1.6168|
001d24  e5900000          LDR      r0,[r0,#0]            ;752  ; xYaffs2ReadWriteMutex
001d28  ebfffffe          BL       xQueueGenericSend
001d2c  e3a00000          MOV      r0,#0                 ;753
001d30  eaffff45          B        |L1.6732|
                  |L1.7476|
001d34  e1a01007          MOV      r1,r7                 ;759
001d38  e28f0f67          ADR      r0,|L1.7900|
001d3c  ebfffffe          BL       sysprintf
001d40  e3a03000          MOV      r3,#0                 ;760
001d44  e1a02003          MOV      r2,r3                 ;760
001d48  e1a01003          MOV      r1,r3                 ;760
001d4c  e51f053c          LDR      r0,|L1.6168|
001d50  e5900000          LDR      r0,[r0,#0]            ;760  ; xYaffs2ReadWriteMutex
001d54  ebfffffe          BL       xQueueGenericSend
001d58  e3a00000          MOV      r0,#0                 ;761
001d5c  eaffff3a          B        |L1.6732|
                  |L1.7520|
001d60  e1a00000          MOV      r0,r0                 ;763
                  |L1.7524|
001d64  e24f0f6f          ADR      r0,|L1.7088|
001d68  ebfffffe          BL       sysprintf
001d6c  e3a03000          MOV      r3,#0                 ;766
001d70  e1a02003          MOV      r2,r3                 ;766
001d74  e1a01003          MOV      r1,r3                 ;766
001d78  e51f0568          LDR      r0,|L1.6168|
001d7c  e5900000          LDR      r0,[r0,#0]            ;766  ; xYaffs2ReadWriteMutex
001d80  ebfffffe          BL       xQueueGenericSend
001d84  e3a00001          MOV      r0,#1                 ;767
001d88  eaffff2f          B        |L1.6732|
;;;769    
                          ENDP

                  processWrite PROC
;;;770    static FileAgentReturn processWrite(FileAgentDataItem item)
001d8c  e92d000f          PUSH     {r0-r3}
;;;771    {
001d90  e92d401c          PUSH     {r2-r4,lr}
;;;772        FileAgentReturn saveReval = FILE_AGENT_RETURN_ERROR;
001d94  e3a04000          MOV      r4,#0
;;;773        //sysprintf("[1:%s]", pcTaskGetTaskName(xTaskGetCurrentTaskHandle()));
;;;774        //xSemaphoreTake(xReadWriteMutex, portMAX_DELAY); 
;;;775        switch(item.storageType)
001d98  e5dd0010          LDRB     r0,[sp,#0x10]
001d9c  e3500000          CMP      r0,#0
001da0  0a000004          BEQ      |L1.7608|
001da4  e3500001          CMP      r0,#1
001da8  0a00000c          BEQ      |L1.7648|
001dac  e3500002          CMP      r0,#2
001db0  1a00001f          BNE      |L1.7732|
001db4  ea000013          B        |L1.7688|
                  |L1.7608|
;;;776        {
;;;777            case FILE_AGENT_STORAGE_TYPE_AUTO:
001db8  e1a00000          MOV      r0,r0
;;;778                //if(yaffs2SaveToFile(item.name, item.addType, item.data, item.dataLen, TRUE))
;;;779                //    saveReval = TRUE;
;;;780                saveReval = fatfsAutoSaveToFile(item.name, item.addType, item.data, item.dataLen, item.checkMode);
001dbc  e5dd021a          LDRB     r0,[sp,#0x21a]
001dc0  e58d0000          STR      r0,[sp,#0]
001dc4  e59d2210          LDR      r2,[sp,#0x210]
001dc8  e59d3214          LDR      r3,[sp,#0x214]
001dcc  e5dd1219          LDRB     r1,[sp,#0x219]
001dd0  e28d0e11          ADD      r0,sp,#0x110
001dd4  ebfffffe          BL       fatfsAutoSaveToFile
001dd8  e1a04000          MOV      r4,r0
;;;781                break;
001ddc  ea000014          B        |L1.7732|
                  |L1.7648|
;;;782                
;;;783            case FILE_AGENT_STORAGE_TYPE_YAFFS2:
001de0  e1a00000          MOV      r0,r0
;;;784                saveReval = yaffs2SaveToFile(item.name, item.addType, item.data, item.dataLen, FALSE);
001de4  e3a00000          MOV      r0,#0
001de8  e58d0000          STR      r0,[sp,#0]
001dec  e59d2210          LDR      r2,[sp,#0x210]
001df0  e59d3214          LDR      r3,[sp,#0x214]
001df4  e5dd1219          LDRB     r1,[sp,#0x219]
001df8  e28d0e11          ADD      r0,sp,#0x110
001dfc  ebfffffe          BL       yaffs2SaveToFile
001e00  e1a04000          MOV      r4,r0
;;;785                break;
001e04  ea00000a          B        |L1.7732|
                  |L1.7688|
;;;786            
;;;787            case FILE_AGENT_STORAGE_TYPE_FATFS:            
001e08  e1a00000          MOV      r0,r0
;;;788                saveReval = fatfsSaveToFile(item.dir, item.name, item.addType, item.data, item.dataLen, FALSE);
001e0c  e3a01000          MOV      r1,#0
001e10  e59d0214          LDR      r0,[sp,#0x214]
001e14  e1cd00f0          STRD     r0,r1,[sp,#0]
001e18  e59d3210          LDR      r3,[sp,#0x210]
001e1c  e5dd2219          LDRB     r2,[sp,#0x219]
001e20  e28d1e11          ADD      r1,sp,#0x110
001e24  e28d0011          ADD      r0,sp,#0x11
001e28  ebfffffe          BL       fatfsSaveToFile
001e2c  e1a04000          MOV      r4,r0
;;;789                
;;;790                break;
001e30  e1a00000          MOV      r0,r0
                  |L1.7732|
001e34  e1a00000          MOV      r0,r0                 ;781
;;;791        }    
;;;792        //xSemaphoreGive(xReadWriteMutex); 
;;;793        if(saveReval != FILE_AGENT_RETURN_ERROR)
001e38  e3540000          CMP      r4,#0
001e3c  0a000004          BEQ      |L1.7764|
;;;794        {
;;;795            error++;
001e40  e59f00bc          LDR      r0,|L1.7940|
001e44  e5900000          LDR      r0,[r0,#0]  ; error
001e48  e2800001          ADD      r0,r0,#1
001e4c  e59f10b0          LDR      r1,|L1.7940|
001e50  e5810000          STR      r0,[r1,#0]  ; error
                  |L1.7764|
;;;796        }
;;;797        if(item.dataNeedFreeFlag)
001e54  e5dd0218          LDRB     r0,[sp,#0x218]
001e58  e3500000          CMP      r0,#0
001e5c  0a000001          BEQ      |L1.7784|
;;;798            vPortFree(item.data);
001e60  e59d0210          LDR      r0,[sp,#0x210]
001e64  ebfffffe          BL       vPortFree
                  |L1.7784|
;;;799        
;;;800        return saveReval;
001e68  e1a00004          MOV      r0,r4
001e6c  e8bd001c          POP      {r2-r4}
;;;801    }
001e70  e49df014          LDR      pc,[sp],#0x14
                  |L1.7796|
001e74  79616666          DCB      "yaffs2GetFromFile %s : stat.st_size error\r\n",0
001e78  73324765
001e7c  7446726f
001e80  6d46696c
001e84  65202573
001e88  203a2073
001e8c  7461742e
001e90  73745f73
001e94  697a6520
001e98  6572726f
001e9c  720d0a00
                  |L1.7840|
001ea0  79616666          DCB      "yaffs2GetFromFile %s : yaffs_fstat(outh, &stat) error\r"
001ea4  73324765
001ea8  7446726f
001eac  6d46696c
001eb0  65202573
001eb4  203a2079
001eb8  61666673
001ebc  5f667374
001ec0  6174286f
001ec4  7574682c
001ec8  20267374
001ecc  61742920
001ed0  6572726f
001ed4  720d    
001ed6  0a00              DCB      "\n",0
                  |L1.7896|
                          DCD      ||.text||+0xc94
                  |L1.7900|
001edc  79616666          DCB      "yaffs2GetFromFile %s : parser error\r\n",0
001ee0  73324765
001ee4  7446726f
001ee8  6d46696c
001eec  65202573
001ef0  203a2070
001ef4  61727365
001ef8  72206572
001efc  726f720d
001f00  0a00    
001f02  00                DCB      0
001f03  00                DCB      0
                  |L1.7940|
                          DCD      error
                          ENDP

                  processRead PROC
;;;802    
;;;803    static FileAgentReturn processRead(StorageType storageType, char* dir, char* name, uint8_t** buff, size_t* buffLen, BOOL checkMode)
001f08  e92d4ff8          PUSH     {r3-r11,lr}
;;;804    {
001f0c  e1a06000          MOV      r6,r0
001f10  e1a07001          MOV      r7,r1
001f14  e1a04002          MOV      r4,r2
001f18  e1a05003          MOV      r5,r3
001f1c  e59d8028          LDR      r8,[sp,#0x28]
001f20  e59da02c          LDR      r10,[sp,#0x2c]
;;;805        FileAgentReturn saveReval = FILE_AGENT_RETURN_ERROR;
001f24  e3a09000          MOV      r9,#0
;;;806        //xSemaphoreTake(xReadWriteMutex, portMAX_DELAY); 
;;;807        switch(storageType)
001f28  e3560000          CMP      r6,#0
001f2c  0a000004          BEQ      |L1.8004|
001f30  e3560001          CMP      r6,#1
001f34  0a00000a          BEQ      |L1.8036|
001f38  e3560002          CMP      r6,#2
001f3c  1a00001a          BNE      |L1.8108|
001f40  ea00000f          B        |L1.8068|
                  |L1.8004|
;;;808        {
;;;809            case FILE_AGENT_STORAGE_TYPE_AUTO:    
001f44  e1a00000          MOV      r0,r0
;;;810                //saveReval = yaffs2GetFromFile(name, buff, buffLen, TRUE);
;;;811                //if(saveReval == FILE_AGENT_RETURN_ERROR)
;;;812                {
;;;813                    saveReval = fatfsAutoGetFromFile(name, buff, buffLen, checkMode);
001f48  e1a0300a          MOV      r3,r10
001f4c  e1a02008          MOV      r2,r8
001f50  e1a01005          MOV      r1,r5
001f54  e1a00004          MOV      r0,r4
001f58  ebfffffe          BL       fatfsAutoGetFromFile
001f5c  e1a09000          MOV      r9,r0
;;;814                }
;;;815                break;
001f60  ea000011          B        |L1.8108|
                  |L1.8036|
;;;816            case FILE_AGENT_STORAGE_TYPE_YAFFS2:
001f64  e1a00000          MOV      r0,r0
;;;817                saveReval = yaffs2GetFromFile(name, buff, buffLen, FALSE); 
001f68  e3a03000          MOV      r3,#0
001f6c  e1a02008          MOV      r2,r8
001f70  e1a01005          MOV      r1,r5
001f74  e1a00004          MOV      r0,r4
001f78  ebfffffe          BL       yaffs2GetFromFile
001f7c  e1a09000          MOV      r9,r0
;;;818                break;
001f80  ea000009          B        |L1.8108|
                  |L1.8068|
;;;819            case FILE_AGENT_STORAGE_TYPE_FATFS:
001f84  e1a00000          MOV      r0,r0
;;;820                saveReval = fatfsGetFromFile(dir, name, buff, buffLen, FALSE);            
001f88  e3a00000          MOV      r0,#0
001f8c  e1a03008          MOV      r3,r8
001f90  e1a02005          MOV      r2,r5
001f94  e1a01004          MOV      r1,r4
001f98  e58d0000          STR      r0,[sp,#0]
001f9c  e1a00007          MOV      r0,r7
001fa0  ebfffffe          BL       fatfsGetFromFile
001fa4  e1a09000          MOV      r9,r0
;;;821                break;
001fa8  e1a00000          MOV      r0,r0
                  |L1.8108|
001fac  e1a00000          MOV      r0,r0                 ;815
;;;822        }    
;;;823        //xSemaphoreGive(xReadWriteMutex); 
;;;824        if(saveReval == FILE_AGENT_RETURN_ERROR)
001fb0  e3590000          CMP      r9,#0
001fb4  1a000004          BNE      |L1.8140|
;;;825        {
;;;826            error++;
001fb8  e51f00bc          LDR      r0,|L1.7940|
001fbc  e5900000          LDR      r0,[r0,#0]  ; error
001fc0  e2800001          ADD      r0,r0,#1
001fc4  e51f10c8          LDR      r1,|L1.7940|
001fc8  e5810000          STR      r0,[r1,#0]  ; error
                  |L1.8140|
;;;827        }
;;;828        return saveReval;
001fcc  e1a00009          MOV      r0,r9
;;;829    }
001fd0  e8bd8ff8          POP      {r3-r11,pc}
;;;830    
                          ENDP

                  vFileAgentTask PROC
;;;831    static void vFileAgentTask( void *pvParameters )
001fd4  e24ddc02          SUB      sp,sp,#0x200
;;;832    {
;;;833        
;;;834        vTaskDelay(1000/portTICK_RATE_MS); 
001fd8  e3a00064          MOV      r0,#0x64
001fdc  ebfffffe          BL       vTaskDelay
;;;835        sysprintf("vFileAgentTask Going...\r\n"); 
001fe0  e28f0c02          ADR      r0,|L1.8680|
001fe4  ebfffffe          BL       sysprintf
;;;836    
;;;837        for(;;)
001fe8  e1a00000          MOV      r0,r0
                  |L1.8172|
;;;838        {        
;;;839            fileAgentPowerStatus = TRUE;
001fec  e3a00001          MOV      r0,#1
001ff0  e59f120c          LDR      r1,|L1.8708|
001ff4  e5c10000          STRB     r0,[r1,#0]  ; fileAgentPowerStatus
;;;840            BaseType_t reval = xSemaphoreTake(xSemaphore, threadWaitTime); 
001ff8  e3a03000          MOV      r3,#0
001ffc  e59f0204          LDR      r0,|L1.8712|
002000  e1a01003          MOV      r1,r3
002004  e5902000          LDR      r2,[r0,#0]  ; threadWaitTime
002008  e59f01fc          LDR      r0,|L1.8716|
00200c  e5900000          LDR      r0,[r0,#0]  ; xSemaphore
002010  ebfffffe          BL       xQueueGenericReceive
002014  e1a04000          MOV      r4,r0
;;;841            //sysprintf("\r\n [INFO]vFileAgentTask Go [%d:%d]...\r\n", endIndex, headerIndex);
;;;842            
;;;843            if(fileAgentPowerStatusFlag == FALSE)
002018  e59f01f0          LDR      r0,|L1.8720|
00201c  e5d00000          LDRB     r0,[r0,#0]  ; fileAgentPowerStatusFlag
002020  e3500000          CMP      r0,#0
002024  1a00005a          BNE      |L1.8596|
;;;844            {
;;;845                fileAgentPowerStatus = FALSE;
002028  e3a00000          MOV      r0,#0
00202c  e59f11d0          LDR      r1,|L1.8708|
002030  e5c10000          STRB     r0,[r1,#0]  ; fileAgentPowerStatus
;;;846                while(headerIndex != endIndex)   
002034  ea000050          B        |L1.8572|
                  |L1.8248|
;;;847                {            
;;;848                    sysprintf("\r\n [INFO]vFileAgentTask Process Start [%d:%d]...\r\n", endIndex, headerIndex);
002038  e59f01d4          LDR      r0,|L1.8724|
00203c  e5902000          LDR      r2,[r0,#0]  ; headerIndex
002040  e59f01d0          LDR      r0,|L1.8728|
002044  e5901000          LDR      r1,[r0,#0]  ; endIndex
002048  e28f0f73          ADR      r0,|L1.8732|
00204c  ebfffffe          BL       sysprintf
;;;849                    if(processWrite(fileAgentDataItem[endIndex]) != FILE_AGENT_RETURN_ERROR)
002050  e59f01c0          LDR      r0,|L1.8728|
002054  e5900000          LDR      r0,[r0,#0]  ; endIndex
002058  e0802080          ADD      r2,r0,r0,LSL #1
00205c  e0820380          ADD      r0,r2,r0,LSL #7
002060  e59f21e8          LDR      r2,|L1.8784|
002064  e0820100          ADD      r0,r2,r0,LSL #2
002068  e2801010          ADD      r1,r0,#0x10
00206c  e3a02f7f          MOV      r2,#0x1fc
002070  e1a0000d          MOV      r0,sp
002074  ebfffffe          BL       __aeabi_memcpy4
002078  e59f0198          LDR      r0,|L1.8728|
00207c  e5900000          LDR      r0,[r0,#0]  ; endIndex
002080  e0801080          ADD      r1,r0,r0,LSL #1
002084  e0810380          ADD      r0,r1,r0,LSL #7
002088  e59f11c0          LDR      r1,|L1.8784|
00208c  e081c100          ADD      r12,r1,r0,LSL #2
002090  e5dc100c          LDRB     r1,[r12,#0xc]
002094  e1a03001          MOV      r3,r1
002098  e5dc100d          LDRB     r1,[r12,#0xd]
00209c  e1833401          ORR      r3,r3,r1,LSL #8
0020a0  e5dc100e          LDRB     r1,[r12,#0xe]
0020a4  e1833801          ORR      r3,r3,r1,LSL #16
0020a8  e5dc000f          LDRB     r0,[r12,#0xf]
0020ac  e1833c00          ORR      r3,r3,r0,LSL #24
0020b0  e5dc1008          LDRB     r1,[r12,#8]
0020b4  e1a02001          MOV      r2,r1
0020b8  e5dc1009          LDRB     r1,[r12,#9]
0020bc  e1822401          ORR      r2,r2,r1,LSL #8
0020c0  e5dc100a          LDRB     r1,[r12,#0xa]
0020c4  e1822801          ORR      r2,r2,r1,LSL #16
0020c8  e5dc000b          LDRB     r0,[r12,#0xb]
0020cc  e1822c00          ORR      r2,r2,r0,LSL #24
0020d0  e5dc5004          LDRB     r5,[r12,#4]
0020d4  e1a01005          MOV      r1,r5
0020d8  e5dc5005          LDRB     r5,[r12,#5]
0020dc  e1811405          ORR      r1,r1,r5,LSL #8
0020e0  e5dc5006          LDRB     r5,[r12,#6]
0020e4  e1811805          ORR      r1,r1,r5,LSL #16
0020e8  e5dc0007          LDRB     r0,[r12,#7]
0020ec  e1811c00          ORR      r1,r1,r0,LSL #24
0020f0  e5dc6000          LDRB     r6,[r12,#0]
0020f4  e1a00006          MOV      r0,r6
0020f8  e5dc6001          LDRB     r6,[r12,#1]
0020fc  e1800406          ORR      r0,r0,r6,LSL #8
002100  e5dc6002          LDRB     r6,[r12,#2]
002104  e1800806          ORR      r0,r0,r6,LSL #16
002108  e5dc5003          LDRB     r5,[r12,#3]
00210c  e1800c05          ORR      r0,r0,r5,LSL #24
002110  ebfffffe          BL       processWrite
002114  e3500000          CMP      r0,#0
002118  0a000011          BEQ      |L1.8548|
;;;850                    {
;;;851                        //xSemaphoreTake(xReadWriteMutex, portMAX_DELAY);
;;;852                        //vTaskDelay(200/portTICK_RATE_MS);             
;;;853                        //xSemaphoreGive(xReadWriteMutex);             
;;;854                        endIndex++;
00211c  e59f00f4          LDR      r0,|L1.8728|
002120  e5900000          LDR      r0,[r0,#0]  ; endIndex
002124  e2800001          ADD      r0,r0,#1
002128  e59f10e8          LDR      r1,|L1.8728|
00212c  e5810000          STR      r0,[r1,#0]  ; endIndex
;;;855                        if(endIndex == FILE_DATA_QUEUE_SIZE)
002130  e2810000          ADD      r0,r1,#0
002134  e5900000          LDR      r0,[r0,#0]  ; endIndex
002138  e3500080          CMP      r0,#0x80
00213c  1a000001          BNE      |L1.8520|
;;;856                        {
;;;857                            endIndex = 0;
002140  e3a00000          MOV      r0,#0
002144  e5810000          STR      r0,[r1,#0]  ; endIndex
                  |L1.8520|
;;;858                        }
;;;859                        sysprintf("\r\n [INFO]vFileAgentTask Process OK [%d:%d]...\r\n", endIndex, headerIndex);
002148  e59f00c4          LDR      r0,|L1.8724|
00214c  e5902000          LDR      r2,[r0,#0]  ; headerIndex
002150  e59f00c0          LDR      r0,|L1.8728|
002154  e5901000          LDR      r1,[r0,#0]  ; endIndex
002158  e28f00f4          ADR      r0,|L1.8788|
00215c  ebfffffe          BL       sysprintf
002160  ea000005          B        |L1.8572|
                  |L1.8548|
;;;860                    }
;;;861                    else
;;;862                    {
;;;863                        sysprintf("\r\n [INFO]vFileAgentTask Process ERROR [%d:%d]...\r\n", endIndex, headerIndex);
002164  e59f00a8          LDR      r0,|L1.8724|
002168  e5902000          LDR      r2,[r0,#0]  ; headerIndex
00216c  e59f00a4          LDR      r0,|L1.8728|
002170  e5901000          LDR      r1,[r0,#0]  ; endIndex
002174  e28f0f42          ADR      r0,|L1.8836|
002178  ebfffffe          BL       sysprintf
                  |L1.8572|
00217c  e59f0090          LDR      r0,|L1.8724|
002180  e5900000          LDR      r0,[r0,#0]            ;846  ; headerIndex
002184  e59f108c          LDR      r1,|L1.8728|
002188  e5911000          LDR      r1,[r1,#0]            ;846  ; endIndex
00218c  e1500001          CMP      r0,r1                 ;846
002190  1affffa8          BNE      |L1.8248|
                  |L1.8596|
;;;864                    }
;;;865                }   
;;;866            }
;;;867            
;;;868            //sysprintf("\r\n [INFO]vFileAgentTask End [%d:%d]...\r\n", endIndex, headerIndex);        
;;;869        }
002194  eaffff94          B        |L1.8172|
;;;870    }
;;;871    
                          ENDP

                  FileAgentAddData PROC
;;;965    
;;;966    BOOL FileAgentAddData(StorageType storageType, char* dir, char* name, uint8_t* data, int dataLen, FileAgentAddType addType, BOOL dataNeedFreeFlag, BOOL blockFlag, BOOL checkMode)
002198  e92d5ff0          PUSH     {r4-r12,lr}
;;;967    {    
00219c  e24dde41          SUB      sp,sp,#0x410
0021a0  e1a04000          MOV      r4,r0
0021a4  e1a08001          MOV      r8,r1
0021a8  e1a09002          MOV      r9,r2
0021ac  e1a05003          MOV      r5,r3
0021b0  e59d643c          LDR      r6,[sp,#0x43c]
0021b4  e59db440          LDR      r11,[sp,#0x440]
0021b8  e59d7448          LDR      r7,[sp,#0x448]
0021bc  e59da438          LDR      r10,[sp,#0x438]
;;;968        if(initFlag == FALSE)
0021c0  e59f00f0          LDR      r0,|L1.8888|
0021c4  e5d00000          LDRB     r0,[r0,#0]  ; initFlag
0021c8  e3500000          CMP      r0,#0
0021cc  1a000049          BNE      |L1.8952|
;;;969        {
;;;970            sysprintf("\r\nFileAgentAddData [%s] : ERROR (initFlag == FALSE)...\r\n", name);
0021d0  e1a01009          MOV      r1,r9
0021d4  e28f00e0          ADR      r0,|L1.8892|
0021d8  ebfffffe          BL       sysprintf
;;;971            return FALSE;
0021dc  e3a00000          MOV      r0,#0
                  |L1.8672|
0021e0  e28dde41          ADD      sp,sp,#0x410
;;;972        }
;;;973        if((storageType == FILE_AGENT_STORAGE_TYPE_FATFS) && (dir == NULL))
;;;974        {
;;;975            sysprintf("\r\nFileAgentAddData [%s] : ERROR ((addType == FILE_AGENT_STORAGE_TYPE_FATFS) && (dir == NULL))...\r\n", name);
;;;976            return FALSE;
;;;977        }
;;;978        
;;;979        if((checkMode == TRUE) && (addType == FILE_AGENT_ADD_DATA_TYPE_APPEND))
;;;980        {
;;;981            sysprintf("\r\nFileAgentAddData [%s] : ERROR (checkMode == TRUE) && (addType == FILE_AGENT_ADD_DATA_TYPE_APPEND)...\r\n", name);
;;;982            return FALSE;
;;;983        }
;;;984        
;;;985        if(blockFlag)
;;;986        {
;;;987            FileAgentDataItem tmpItem;
;;;988            sysprintf("FileAgentAddData [%s%s] : BLOCK !! \n", dir, name);        
;;;989            tmpItem.storageType = storageType;
;;;990            strcpy(tmpItem.dir, (const char*)dir);
;;;991            strcpy(tmpItem.name, (const char*)name);
;;;992            tmpItem.data = data;
;;;993            tmpItem.dataLen = dataLen;
;;;994            tmpItem.addType= addType;
;;;995            tmpItem.dataNeedFreeFlag = dataNeedFreeFlag;
;;;996            tmpItem.checkMode = checkMode;
;;;997            
;;;998            processWrite(tmpItem);  
;;;999        }
;;;1000       else
;;;1001       {        
;;;1002           
;;;1003           xSemaphoreTake(xAddDataMutex, portMAX_DELAY); 
;;;1004           fileAgentPowerStatus = FALSE;
;;;1005           sysprintf("\r\nFileAgentAddData [%s] : non BLOCK !! start [%d:%d]...\r\n", name, endIndex, headerIndex);
;;;1006           fileAgentDataItem[headerIndex].storageType = storageType;
;;;1007           strcpy(fileAgentDataItem[headerIndex].dir, (const char*)dir);
;;;1008           strcpy(fileAgentDataItem[headerIndex].name, (const char*)name);
;;;1009           fileAgentDataItem[headerIndex].data = data;
;;;1010           fileAgentDataItem[headerIndex].dataLen = dataLen;
;;;1011           fileAgentDataItem[headerIndex].addType= addType;
;;;1012           fileAgentDataItem[headerIndex].dataNeedFreeFlag = dataNeedFreeFlag;
;;;1013           fileAgentDataItem[headerIndex].checkMode = checkMode;
;;;1014           
;;;1015           headerIndex++;
;;;1016           if(headerIndex == FILE_DATA_QUEUE_SIZE)
;;;1017           {
;;;1018               headerIndex = 0;
;;;1019           }
;;;1020   
;;;1021           if(headerIndex == endIndex)
;;;1022           {
;;;1023               endIndex++;
;;;1024           }
;;;1025           //sysprintf("\r\nFileAgentAddData [%s] : non BLOCK !! end [%d:%d]...\r\n", name, endIndex, headerIndex);
;;;1026           xSemaphoreGive(xAddDataMutex); 
;;;1027           
;;;1028           
;;;1029           xSemaphoreGive(xSemaphore); 
;;;1030           
;;;1031       }
;;;1032       return TRUE;
;;;1033   }
0021e4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.8680|
0021e8  7646696c          DCB      "vFileAgentTask Going...\r\n",0
0021ec  65416765
0021f0  6e745461
0021f4  736b2047
0021f8  6f696e67
0021fc  2e2e2e0d
002200  0a00    
002202  00                DCB      0
002203  00                DCB      0
                  |L1.8708|
                          DCD      fileAgentPowerStatus
                  |L1.8712|
                          DCD      threadWaitTime
                  |L1.8716|
                          DCD      xSemaphore
                  |L1.8720|
                          DCD      fileAgentPowerStatusFlag
                  |L1.8724|
                          DCD      headerIndex
                  |L1.8728|
                          DCD      endIndex
                  |L1.8732|
00221c  0d0a205b          DCB      "\r\n [INFO]vFileAgentTask Process Start [%d:%d]...\r\n",0
002220  494e464f
002224  5d764669
002228  6c654167
00222c  656e7454
002230  61736b20
002234  50726f63
002238  65737320
00223c  53746172
002240  74205b25
002244  643a2564
002248  5d2e2e2e
00224c  0d0a00  
00224f  00                DCB      0
                  |L1.8784|
                          DCD      fileAgentDataItem
                  |L1.8788|
002254  0d0a205b          DCB      "\r\n [INFO]vFileAgentTask Process OK [%d:%d]...\r\n",0
002258  494e464f
00225c  5d764669
002260  6c654167
002264  656e7454
002268  61736b20
00226c  50726f63
002270  65737320
002274  4f4b205b
002278  25643a25
00227c  645d2e2e
002280  2e0d0a00
                  |L1.8836|
002284  0d0a205b          DCB      "\r\n [INFO]vFileAgentTask Process ERROR [%d:%d]...\r\n",0
002288  494e464f
00228c  5d764669
002290  6c654167
002294  656e7454
002298  61736b20
00229c  50726f63
0022a0  65737320
0022a4  4552524f
0022a8  52205b25
0022ac  643a2564
0022b0  5d2e2e2e
0022b4  0d0a00  
0022b7  00                DCB      0
                  |L1.8888|
                          DCD      initFlag
                  |L1.8892|
0022bc  0d0a4669          DCB      "\r\nFileAgentAddData [%s] : ERROR (initFlag == FALSE).."
0022c0  6c654167
0022c4  656e7441
0022c8  64644461
0022cc  7461205b
0022d0  25735d20
0022d4  3a204552
0022d8  524f5220
0022dc  28696e69
0022e0  74466c61
0022e4  67203d3d
0022e8  2046414c
0022ec  5345292e
0022f0  2e      
0022f1  2e0d0a00          DCB      ".\r\n",0
0022f5  00                DCB      0
0022f6  00                DCB      0
0022f7  00                DCB      0
                  |L1.8952|
0022f8  e3540002          CMP      r4,#2                 ;973
0022fc  1a000006          BNE      |L1.8988|
002300  e3580000          CMP      r8,#0                 ;973
002304  1a000004          BNE      |L1.8988|
002308  e1a01009          MOV      r1,r9                 ;975
00230c  e59f0258          LDR      r0,|L1.9580|
002310  ebfffffe          BL       sysprintf
002314  e3a00000          MOV      r0,#0                 ;976
002318  eaffffb0          B        |L1.8672|
                  |L1.8988|
00231c  e3570001          CMP      r7,#1                 ;979
002320  1a000006          BNE      |L1.9024|
002324  e3560001          CMP      r6,#1                 ;979
002328  1a000004          BNE      |L1.9024|
00232c  e1a01009          MOV      r1,r9                 ;981
002330  e59f0238          LDR      r0,|L1.9584|
002334  ebfffffe          BL       sysprintf
002338  e3a00000          MOV      r0,#0                 ;982
00233c  eaffffa7          B        |L1.8672|
                  |L1.9024|
002340  e59d0444          LDR      r0,[sp,#0x444]        ;985
002344  e3500000          CMP      r0,#0                 ;985
002348  0a000018          BEQ      |L1.9136|
00234c  e1a02009          MOV      r2,r9                 ;988
002350  e1a01008          MOV      r1,r8                 ;988
002354  e28f0f86          ADR      r0,|L1.9588|
002358  ebfffffe          BL       sysprintf
00235c  e5cd4204          STRB     r4,[sp,#0x204]        ;989
002360  e1a01008          MOV      r1,r8                 ;990
002364  e28d0c02          ADD      r0,sp,#0x200          ;990
002368  e2800005          ADD      r0,r0,#5              ;990
00236c  ebfffffe          BL       strcpy
002370  e1a01009          MOV      r1,r9                 ;991
002374  e28d0fc1          ADD      r0,sp,#0x304          ;991
002378  ebfffffe          BL       strcpy
00237c  e58d5404          STR      r5,[sp,#0x404]        ;992
002380  e58da408          STR      r10,[sp,#0x408]       ;993
002384  e5cd640d          STRB     r6,[sp,#0x40d]        ;994
002388  e5cdb40c          STRB     r11,[sp,#0x40c]       ;995
00238c  e5cd740e          STRB     r7,[sp,#0x40e]        ;996
002390  e3a02f7f          MOV      r2,#0x1fc             ;998
002394  e28d1f85          ADD      r1,sp,#0x214          ;998
002398  e1a0000d          MOV      r0,sp                 ;998
00239c  ebfffffe          BL       __aeabi_memcpy4
0023a0  e28d3f81          ADD      r3,sp,#0x204          ;998
0023a4  e893000f          LDM      r3,{r0-r3}            ;998
0023a8  ebfffffe          BL       processWrite
0023ac  ea00006c          B        |L1.9572|
                  |L1.9136|
0023b0  e3a03000          MOV      r3,#0                 ;1003
0023b4  e3e02000          MVN      r2,#0                 ;1003
0023b8  e1a01003          MOV      r1,r3                 ;1003
0023bc  e59f01d8          LDR      r0,|L1.9628|
0023c0  e5900000          LDR      r0,[r0,#0]            ;1003  ; xAddDataMutex
0023c4  ebfffffe          BL       xQueueGenericReceive
0023c8  e3a00000          MOV      r0,#0                 ;1004
0023cc  e51f11d0          LDR      r1,|L1.8708|
0023d0  e5c10000          STRB     r0,[r1,#0]            ;1004  ; fileAgentPowerStatus
0023d4  e51f01c8          LDR      r0,|L1.8724|
0023d8  e5903000          LDR      r3,[r0,#0]            ;1005  ; headerIndex
0023dc  e51f01cc          LDR      r0,|L1.8728|
0023e0  e1a01009          MOV      r1,r9                 ;1005
0023e4  e5902000          LDR      r2,[r0,#0]            ;1005  ; endIndex
0023e8  e28f0e1b          ADR      r0,|L1.9632|
0023ec  ebfffffe          BL       sysprintf
0023f0  e51f01e4          LDR      r0,|L1.8724|
0023f4  e5900000          LDR      r0,[r0,#0]            ;1006  ; headerIndex
0023f8  e0801080          ADD      r1,r0,r0,LSL #1       ;1006
0023fc  e0810380          ADD      r0,r1,r0,LSL #7       ;1006
002400  e51f11b8          LDR      r1,|L1.8784|
002404  e7c14100          STRB     r4,[r1,r0,LSL #2]     ;1006
002408  e51f11fc          LDR      r1,|L1.8724|
00240c  e5911000          LDR      r1,[r1,#0]            ;1007  ; headerIndex
002410  e0812081          ADD      r2,r1,r1,LSL #1       ;1007
002414  e0821381          ADD      r1,r2,r1,LSL #7       ;1007
002418  e51f21d0          LDR      r2,|L1.8784|
00241c  e0821101          ADD      r1,r2,r1,LSL #2       ;1007
002420  e2810001          ADD      r0,r1,#1              ;1007
002424  e1a01008          MOV      r1,r8                 ;1007
002428  ebfffffe          BL       strcpy
00242c  e51f1220          LDR      r1,|L1.8724|
002430  e5911000          LDR      r1,[r1,#0]            ;1008  ; headerIndex
002434  e0812081          ADD      r2,r1,r1,LSL #1       ;1008
002438  e0821381          ADD      r1,r2,r1,LSL #7       ;1008
00243c  e51f21f4          LDR      r2,|L1.8784|
002440  e0821101          ADD      r1,r2,r1,LSL #2       ;1008
002444  e2810c01          ADD      r0,r1,#0x100          ;1008
002448  e1a01009          MOV      r1,r9                 ;1008
00244c  ebfffffe          BL       strcpy
002450  e51f0244          LDR      r0,|L1.8724|
002454  e5900000          LDR      r0,[r0,#0]            ;1009  ; headerIndex
002458  e0801080          ADD      r1,r0,r0,LSL #1       ;1009
00245c  e0810380          ADD      r0,r1,r0,LSL #7       ;1009
002460  e51f1218          LDR      r1,|L1.8784|
002464  e0810100          ADD      r0,r1,r0,LSL #2       ;1009
002468  e5805200          STR      r5,[r0,#0x200]        ;1009
00246c  e51f0260          LDR      r0,|L1.8724|
002470  e5900000          LDR      r0,[r0,#0]            ;1010  ; headerIndex
002474  e0801080          ADD      r1,r0,r0,LSL #1       ;1010
002478  e0810380          ADD      r0,r1,r0,LSL #7       ;1010
00247c  e51f1234          LDR      r1,|L1.8784|
002480  e0810100          ADD      r0,r1,r0,LSL #2       ;1010
002484  e580a204          STR      r10,[r0,#0x204]       ;1010
002488  e51f027c          LDR      r0,|L1.8724|
00248c  e5900000          LDR      r0,[r0,#0]            ;1011  ; headerIndex
002490  e0801080          ADD      r1,r0,r0,LSL #1       ;1011
002494  e0810380          ADD      r0,r1,r0,LSL #7       ;1011
002498  e51f1250          LDR      r1,|L1.8784|
00249c  e0810100          ADD      r0,r1,r0,LSL #2       ;1011
0024a0  e5c06209          STRB     r6,[r0,#0x209]        ;1011
0024a4  e51f0298          LDR      r0,|L1.8724|
0024a8  e5900000          LDR      r0,[r0,#0]            ;1012  ; headerIndex
0024ac  e0801080          ADD      r1,r0,r0,LSL #1       ;1012
0024b0  e0810380          ADD      r0,r1,r0,LSL #7       ;1012
0024b4  e51f126c          LDR      r1,|L1.8784|
0024b8  e0810100          ADD      r0,r1,r0,LSL #2       ;1012
0024bc  e5c0b208          STRB     r11,[r0,#0x208]       ;1012
0024c0  e51f02b4          LDR      r0,|L1.8724|
0024c4  e5900000          LDR      r0,[r0,#0]            ;1013  ; headerIndex
0024c8  e0801080          ADD      r1,r0,r0,LSL #1       ;1013
0024cc  e0810380          ADD      r0,r1,r0,LSL #7       ;1013
0024d0  e51f1288          LDR      r1,|L1.8784|
0024d4  e0810100          ADD      r0,r1,r0,LSL #2       ;1013
0024d8  e5c0720a          STRB     r7,[r0,#0x20a]        ;1013
0024dc  e51f02d0          LDR      r0,|L1.8724|
0024e0  e5900000          LDR      r0,[r0,#0]            ;1015  ; headerIndex
0024e4  e2800001          ADD      r0,r0,#1              ;1015
0024e8  e51f12dc          LDR      r1,|L1.8724|
0024ec  e5810000          STR      r0,[r1,#0]            ;1015  ; headerIndex
0024f0  e2810000          ADD      r0,r1,#0              ;1016
0024f4  e5900000          LDR      r0,[r0,#0]            ;1016  ; headerIndex
0024f8  e3500080          CMP      r0,#0x80              ;1016
0024fc  1a000001          BNE      |L1.9480|
002500  e3a00000          MOV      r0,#0                 ;1018
002504  e5810000          STR      r0,[r1,#0]            ;1018  ; headerIndex
                  |L1.9480|
002508  e51f02fc          LDR      r0,|L1.8724|
00250c  e5900000          LDR      r0,[r0,#0]            ;1021  ; headerIndex
002510  e51f1300          LDR      r1,|L1.8728|
002514  e5911000          LDR      r1,[r1,#0]            ;1021  ; endIndex
002518  e1500001          CMP      r0,r1                 ;1021
00251c  1a000004          BNE      |L1.9524|
002520  e51f0310          LDR      r0,|L1.8728|
002524  e5900000          LDR      r0,[r0,#0]            ;1023  ; endIndex
002528  e2800001          ADD      r0,r0,#1              ;1023
00252c  e51f131c          LDR      r1,|L1.8728|
002530  e5810000          STR      r0,[r1,#0]            ;1023  ; endIndex
                  |L1.9524|
002534  e3a03000          MOV      r3,#0                 ;1026
002538  e1a02003          MOV      r2,r3                 ;1026
00253c  e1a01003          MOV      r1,r3                 ;1026
002540  e59f0054          LDR      r0,|L1.9628|
002544  e5900000          LDR      r0,[r0,#0]            ;1026  ; xAddDataMutex
002548  ebfffffe          BL       xQueueGenericSend
00254c  e3a03000          MOV      r3,#0                 ;1029
002550  e1a02003          MOV      r2,r3                 ;1029
002554  e1a01003          MOV      r1,r3                 ;1029
002558  e51f0354          LDR      r0,|L1.8716|
00255c  e5900000          LDR      r0,[r0,#0]            ;1029  ; xSemaphore
002560  ebfffffe          BL       xQueueGenericSend
                  |L1.9572|
002564  e3a00001          MOV      r0,#1                 ;1032
002568  eaffff1c          B        |L1.8672|
                  |L1.9580|
                          DCD      ||.constdata||+0x214
                  |L1.9584|
                          DCD      ||.constdata||+0x278
                  |L1.9588|
002574  46696c65          DCB      "FileAgentAddData [%s%s] : BLOCK !! \n",0
002578  4167656e
00257c  74416464
002580  44617461
002584  205b2573
002588  25735d20
00258c  3a20424c
002590  4f434b20
002594  2121200a
002598  00      
002599  00                DCB      0
00259a  00                DCB      0
00259b  00                DCB      0
                  |L1.9628|
                          DCD      xAddDataMutex
                  |L1.9632|
0025a0  0d0a4669          DCB      "\r\nFileAgentAddData [%s] : non BLOCK !! start [%d:%d]."
0025a4  6c654167
0025a8  656e7441
0025ac  64644461
0025b0  7461205b
0025b4  25735d20
0025b8  3a206e6f
0025bc  6e20424c
0025c0  4f434b20
0025c4  21212073
0025c8  74617274
0025cc  205b2564
0025d0  3a25645d
0025d4  2e      
0025d5  2e2e0d0a          DCB      "..\r\n",0
0025d9  00      
0025da  00                DCB      0
0025db  00                DCB      0
                          ENDP

                  vSDCardTestTask PROC
;;;873    time_t GetCurrentUTCTime(void);
;;;874    static void vSDCardTestTask(void *pvParameters)
0025dc  e24dd018          SUB      sp,sp,#0x18
;;;875    {
;;;876        time_t lastTime = GetCurrentUTCTime();
0025e0  ebfffffe          BL       GetCurrentUTCTime
0025e4  e1a05000          MOV      r5,r0
;;;877        time_t currentTime;
;;;878        BOOL writeLogLoop = FALSE;
0025e8  e3a06000          MOV      r6,#0
;;;879        terninalPrintf("vSDCardTestTask Going...\r\n");
0025ec  e28f0f91          ADR      r0,|L1.10296|
0025f0  ebfffffe          BL       terninalPrintf
;;;880        memset(burninErrMsgBuffer, 0x00, BURNIN_ERRMSG_BUFFER_MAX);
0025f4  e3a01b0a          MOV      r1,#0x2800
0025f8  e59f0254          LDR      r0,|L1.10324|
0025fc  ebfffffe          BL       __aeabi_memclr4
;;;881        
;;;882        while (TRUE)
002600  ea000011          B        |L1.9804|
                  |L1.9732|
;;;883        {
;;;884            if (GetDeviceID() != 0)
002604  ebfffffe          BL       GetDeviceID
002608  e3500000          CMP      r0,#0
00260c  0a00000c          BEQ      |L1.9796|
;;;885            {
;;;886                sprintf(burninErrLogFilename, "Burnin_%08d_Error.log", GetDeviceID());
002610  ebfffffe          BL       GetDeviceID
002614  e1a07000          MOV      r7,r0
002618  e1a02007          MOV      r2,r7
00261c  e28f1f8d          ADR      r1,|L1.10328|
002620  e59f0248          LDR      r0,|L1.10352|
002624  ebfffffe          BL       __2sprintf
;;;887                sprintf(burninErrLogFilepath, "0:\\%08d", GetDeviceID());
002628  ebfffffe          BL       GetDeviceID
00262c  e1a07000          MOV      r7,r0
002630  e1a02007          MOV      r2,r7
002634  e28f1f8e          ADR      r1,|L1.10356|
002638  e59f023c          LDR      r0,|L1.10364|
00263c  ebfffffe          BL       __2sprintf
;;;888                break;
002640  ea000002          B        |L1.9808|
                  |L1.9796|
;;;889            }
;;;890            vTaskDelay(200 / portTICK_RATE_MS);
002644  e3a00014          MOV      r0,#0x14
002648  ebfffffe          BL       vTaskDelay
                  |L1.9804|
00264c  eaffffec          B        |L1.9732|
                  |L1.9808|
002650  e1a00000          MOV      r0,r0                 ;888
;;;891        }
;;;892        
;;;893        //Test for Multi-Level Path
;;;894        //RTC_TIME_DATA_T pt;
;;;895        //RTC_Read(RTC_CURRENT_TIME, &pt);
;;;896        //char *reportBuffer = BuildBurninTestReport(&pt);
;;;897        //FileAgentAddData(FILE_AGENT_STORAGE_TYPE_FATFS, "0:\\Test1\\Test2\\Test3", "Test4.log", (uint8_t *)reportBuffer, strlen(reportBuffer), FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, FALSE, TRUE, FALSE);
;;;898        
;;;899        while (TRUE)
002654  ea000042          B        |L1.10084|
                  |L1.9816|
;;;900        {
;;;901            currentTime = GetCurrentUTCTime();
002658  ebfffffe          BL       GetCurrentUTCTime
00265c  e1a04000          MOV      r4,r0
;;;902            if (((currentTime - lastTime) > BURNIN_ERROR_LOG_INTERVAL) || (GetPrepareStopBurninFlag() && GetBurninTerminatedFlag()))
002660  e0440005          SUB      r0,r4,r5
002664  e35000b4          CMP      r0,#0xb4
002668  ca000005          BGT      |L1.9860|
00266c  ebfffffe          BL       GetPrepareStopBurninFlag
002670  e3500000          CMP      r0,#0
002674  0a000004          BEQ      |L1.9868|
002678  ebfffffe          BL       GetBurninTerminatedFlag
00267c  e3500000          CMP      r0,#0
002680  0a000001          BEQ      |L1.9868|
                  |L1.9860|
;;;903            {
;;;904                lastTime = currentTime;
002684  e1a05004          MOV      r5,r4
;;;905                writeLogLoop = TRUE;
002688  e3a06001          MOV      r6,#1
                  |L1.9868|
;;;906            }
;;;907            if (!writeLogLoop)
00268c  e3560000          CMP      r6,#0
002690  1a000002          BNE      |L1.9888|
;;;908            {
;;;909                vTaskDelay(100 / portTICK_RATE_MS);
002694  e3a0000a          MOV      r0,#0xa
002698  ebfffffe          BL       vTaskDelay
;;;910                continue;
00269c  ea000030          B        |L1.10084|
                  |L1.9888|
;;;911            }
;;;912            
;;;913            writeLogLoop = FALSE;
0026a0  e3a06000          MOV      r6,#0
;;;914            if (burninErrMsgLength > 0)
0026a4  e59f01d4          LDR      r0,|L1.10368|
0026a8  e5900000          LDR      r0,[r0,#0]  ; burninErrMsgLength
0026ac  e3500000          CMP      r0,#0
0026b0  0a000020          BEQ      |L1.10040|
;;;915            {
;;;916                xSemaphoreTake(xBurninErrorMessageMutex, portMAX_DELAY);
0026b4  e3a03000          MOV      r3,#0
0026b8  e3e02000          MVN      r2,#0
0026bc  e1a01003          MOV      r1,r3
0026c0  e59f01bc          LDR      r0,|L1.10372|
0026c4  e5900000          LDR      r0,[r0,#0]  ; xBurninErrorMessageMutex
0026c8  ebfffffe          BL       xQueueGenericReceive
;;;917                FileAgentAddData(FILE_AGENT_STORAGE_TYPE_FATFS, burninErrLogFilepath, burninErrLogFilename, (uint8_t *)burninErrMsgBuffer, burninErrMsgLength, FILE_AGENT_ADD_DATA_TYPE_APPEND, FALSE, TRUE, FALSE);
0026cc  e3a00000          MOV      r0,#0
0026d0  e3a01001          MOV      r1,#1
0026d4  e58d0008          STR      r0,[sp,#8]
0026d8  e58d1004          STR      r1,[sp,#4]
0026dc  e58d0010          STR      r0,[sp,#0x10]
0026e0  e59f0198          LDR      r0,|L1.10368|
0026e4  e58d100c          STR      r1,[sp,#0xc]
0026e8  e5900000          LDR      r0,[r0,#0]  ; burninErrMsgLength
0026ec  e59f3160          LDR      r3,|L1.10324|
0026f0  e59f2178          LDR      r2,|L1.10352|
0026f4  e59f1180          LDR      r1,|L1.10364|
0026f8  e58d0000          STR      r0,[sp,#0]
0026fc  e3a00002          MOV      r0,#2
002700  ebfffffe          BL       FileAgentAddData
;;;918                memset(burninErrMsgBuffer, 0x00, burninErrMsgLength);
002704  e59f0174          LDR      r0,|L1.10368|
002708  e5901000          LDR      r1,[r0,#0]  ; burninErrMsgLength
00270c  e59f0140          LDR      r0,|L1.10324|
002710  ebfffffe          BL       __aeabi_memclr4
;;;919                burninErrMsgLength = 0;
002714  e3a00000          MOV      r0,#0
002718  e59f1160          LDR      r1,|L1.10368|
00271c  e5810000          STR      r0,[r1,#0]  ; burninErrMsgLength
;;;920                xSemaphoreGive(xBurninErrorMessageMutex);
002720  e3a03000          MOV      r3,#0
002724  e1a02003          MOV      r2,r3
002728  e1a01003          MOV      r1,r3
00272c  e59f0150          LDR      r0,|L1.10372|
002730  e5900000          LDR      r0,[r0,#0]  ; xBurninErrorMessageMutex
002734  ebfffffe          BL       xQueueGenericSend
                  |L1.10040|
;;;921            }
;;;922            if (GetPrepareStopBurninFlag() && GetBurninTerminatedFlag())
002738  ebfffffe          BL       GetPrepareStopBurninFlag
00273c  e3500000          CMP      r0,#0
002740  0a000006          BEQ      |L1.10080|
002744  ebfffffe          BL       GetBurninTerminatedFlag
002748  e3500000          CMP      r0,#0
00274c  0a000003          BEQ      |L1.10080|
;;;923            {
;;;924                terninalPrintf("vSDCardTestTask Terminated !!\r\n");
002750  e28f0e13          ADR      r0,|L1.10376|
002754  ebfffffe          BL       terninalPrintf
;;;925                vTaskDelete(NULL);
002758  e3a00000          MOV      r0,#0
00275c  ebfffffe          BL       vTaskDelete
                  |L1.10080|
002760  e1a00000          MOV      r0,r0                 ;910
                  |L1.10084|
002764  eaffffbb          B        |L1.9816|
;;;926            }
;;;927        }
;;;928    }
;;;929    #endif
                          ENDP

                  FileAgentInit PROC
;;;934    /*-----------------------------------------*/
;;;935    BOOL FileAgentInit(void)
002768  e92d401c          PUSH     {r2-r4,lr}
;;;936    {
;;;937        sysprintf("FileAgentInit [0x%02x, 0x%02x] [0x%02x, 0x%02x]!! \n", faHeader.value[0], faHeader.value[1], faEnd.value[0], faEnd.value[1] );
00276c  e51f0bf8          LDR      r0,|L1.7036|
002770  e5d00003          LDRB     r0,[r0,#3]
002774  e58d0000          STR      r0,[sp,#0]
002778  e51f0c04          LDR      r0,|L1.7036|
00277c  e5d03002          LDRB     r3,[r0,#2]  ; faEnd
002780  e51f0c6c          LDR      r0,|L1.6940|
002784  e5d02001          LDRB     r2,[r0,#1]  ; faHeader
002788  e5d01000          LDRB     r1,[r0,#0]  ; faHeader
00278c  e28f0f45          ADR      r0,|L1.10408|
002790  ebfffffe          BL       sysprintf
;;;938        PowerRegCallback(&fileAgentPowerCallabck);
002794  e59f0140          LDR      r0,|L1.10460|
002798  ebfffffe          BL       PowerRegCallback
;;;939        
;;;940        xSemaphore = xSemaphoreCreateBinary();  
00279c  e3a02003          MOV      r2,#3
0027a0  e3a01000          MOV      r1,#0
0027a4  e3a00001          MOV      r0,#1
0027a8  ebfffffe          BL       xQueueGenericCreate
0027ac  e51f15a8          LDR      r1,|L1.8716|
0027b0  e5810000          STR      r0,[r1,#0]  ; xSemaphore
;;;941        xAddDataMutex = xSemaphoreCreateMutex(); 
0027b4  e3a00001          MOV      r0,#1
0027b8  ebfffffe          BL       xQueueCreateMutex
0027bc  e51f1228          LDR      r1,|L1.9628|
0027c0  e5810000          STR      r0,[r1,#0]  ; xAddDataMutex
;;;942        xFatfsReadWriteMutex = xSemaphoreCreateMutex(); 
0027c4  e3a00001          MOV      r0,#1
0027c8  ebfffffe          BL       xQueueCreateMutex
0027cc  e59f110c          LDR      r1,|L1.10464|
0027d0  e5810000          STR      r0,[r1,#0]  ; xFatfsReadWriteMutex
;;;943        xYaffs2ReadWriteMutex = xSemaphoreCreateMutex(); 
0027d4  e3a00001          MOV      r0,#1
0027d8  ebfffffe          BL       xQueueCreateMutex
0027dc  e51f1fcc          LDR      r1,|L1.6168|
0027e0  e5810000          STR      r0,[r1,#0]  ; xYaffs2ReadWriteMutex
;;;944        //xTaskCreate( vFileAgentTask, "vFileAgentTask", 1024*10, NULL, FILE_AGENT_THREAD_PROI, NULL ); 
;;;945        
;;;946      
;;;947        initFlag = TRUE;
0027e4  e3a00001          MOV      r0,#1
0027e8  e51f1538          LDR      r1,|L1.8888|
0027ec  e5c10000          STRB     r0,[r1,#0]  ; initFlag
;;;948        //xTaskCreate( vFatFsDrvAgentTestTask, "A", 1024*10, NULL, FILE_AGENT_THREAD_PROI+1, NULL ); 
;;;949        //xTaskCreate( vFatFsDrvAgentTestTask, "B", 1024*10, NULL, FILE_AGENT_THREAD_PROI+1, NULL ); 
;;;950        //xTaskCreate( vFatFsDrvAgentTestTask, "C", 1024*10, NULL, FILE_AGENT_THREAD_PROI+1, NULL ); 
;;;951        //xTaskCreate( vFatFsDrvAgentTestTask, "D", 1024*10, NULL, FILE_AGENT_THREAD_PROI+1, NULL ); 
;;;952        //xTaskCreate( vFatFsDrvAgentTestTask, "E", 1024*10, NULL, FILE_AGENT_THREAD_PROI+1, NULL );
;;;953        //xTaskCreate( vFatFsDrvAgentTestTask, "F", 1024*10, NULL, FILE_AGENT_THREAD_PROI+1, NULL );
;;;954    #if (ENABLE_BURNIN_TESTER)
;;;955        if (EnabledBurninTestMode())
0027f0  ebfffffe          BL       EnabledBurninTestMode
0027f4  e3500000          CMP      r0,#0
0027f8  0a00000c          BEQ      |L1.10288|
;;;956        {
;;;957            //memset(lastBurninLogFilename, 0x00, sizeof(lastBurninLogFilename));
;;;958            xBurninErrorMessageMutex = xSemaphoreCreateMutex();
0027fc  e3a00001          MOV      r0,#1
002800  ebfffffe          BL       xQueueCreateMutex
002804  e59f1078          LDR      r1,|L1.10372|
002808  e5810000          STR      r0,[r1,#0]  ; xBurninErrorMessageMutex
;;;959            xTaskCreate(vSDCardTestTask, "vSDCardTestTask", 1024*5, NULL, SD_CARD_TEST_THREAD_PROI, NULL);
00280c  e3a00000          MOV      r0,#0
002810  e3a01004          MOV      r1,#4
002814  e58d0004          STR      r0,[sp,#4]
002818  e1a03000          MOV      r3,r0
00281c  e3a02b05          MOV      r2,#0x1400
002820  e58d1000          STR      r1,[sp,#0]
002824  e28f10b8          ADR      r1,|L1.10468|
002828  e59f00c4          LDR      r0,|L1.10484|
00282c  ebfffffe          BL       xTaskCreate
                  |L1.10288|
;;;960        }
;;;961    #endif
;;;962        
;;;963        return TRUE;
002830  e3a00001          MOV      r0,#1
;;;964    }
002834  e8bd801c          POP      {r2-r4,pc}
                  |L1.10296|
002838  76534443          DCB      "vSDCardTestTask Going...\r\n",0
00283c  61726454
002840  65737454
002844  61736b20
002848  476f696e
00284c  672e2e2e
002850  0d0a00  
002853  00                DCB      0
                  |L1.10324|
                          DCD      burninErrMsgBuffer
                  |L1.10328|
002858  4275726e          DCB      "Burnin_%08d_Error.log",0
00285c  696e5f25
002860  3038645f
002864  4572726f
002868  722e6c6f
00286c  6700    
00286e  00                DCB      0
00286f  00                DCB      0
                  |L1.10352|
                          DCD      burninErrLogFilename
                  |L1.10356|
002874  303a5c25          DCB      "0:\\%08d",0
002878  30386400
                  |L1.10364|
                          DCD      burninErrLogFilepath
                  |L1.10368|
                          DCD      burninErrMsgLength
                  |L1.10372|
                          DCD      xBurninErrorMessageMutex
                  |L1.10376|
002888  76534443          DCB      "vSDCardTestTask Terminated !!\r\n",0
00288c  61726454
002890  65737454
002894  61736b20
002898  5465726d
00289c  696e6174
0028a0  65642021
0028a4  210d0a00
                  |L1.10408|
0028a8  46696c65          DCB      "FileAgentInit [0x%02x, 0x%02x] [0x%02x, 0x%02x]!! \n",0
0028ac  4167656e
0028b0  74496e69
0028b4  74205b30
0028b8  78253032
0028bc  782c2030
0028c0  78253032
0028c4  785d205b
0028c8  30782530
0028cc  32782c20
0028d0  30782530
0028d4  32785d21
0028d8  21200a00
                  |L1.10460|
                          DCD      fileAgentPowerCallabck
                  |L1.10464|
                          DCD      xFatfsReadWriteMutex
                  |L1.10468|
0028e4  76534443          DCB      "vSDCardTestTask",0
0028e8  61726454
0028ec  65737454
0028f0  61736b00
                  |L1.10484|
                          DCD      vSDCardTestTask
                          ENDP

                  FileAgentGetData PROC
;;;1033   }
;;;1034   FileAgentReturn FileAgentGetData(StorageType storageType, char* dir, char* name, uint8_t** data, size_t* buffLen, BOOL* needFree, BOOL checkMode)
0028f8  e92d5ffc          PUSH     {r2-r12,lr}
;;;1035   {
0028fc  e1a06000          MOV      r6,r0
002900  e1a07001          MOV      r7,r1
002904  e1a08002          MOV      r8,r2
002908  e1a09003          MOV      r9,r3
00290c  e59d4034          LDR      r4,[sp,#0x34]
002910  e59db038          LDR      r11,[sp,#0x38]
002914  e59da030          LDR      r10,[sp,#0x30]
;;;1036       FileAgentReturn reVal = processRead(storageType, dir, name, data, buffLen, checkMode);
002918  e1a03009          MOV      r3,r9
00291c  e1a02008          MOV      r2,r8
002920  e1a01007          MOV      r1,r7
002924  e1a00006          MOV      r0,r6
002928  e1cda0f0          STRD     r10,r11,[sp,#0]
00292c  ebfffffe          BL       processRead
002930  e1a05000          MOV      r5,r0
;;;1037       if(reVal != FILE_AGENT_RETURN_ERROR)
002934  e3550000          CMP      r5,#0
002938  0a000002          BEQ      |L1.10568|
;;;1038       {
;;;1039            *needFree = TRUE;
00293c  e3a00001          MOV      r0,#1
002940  e5c40000          STRB     r0,[r4,#0]
002944  ea000001          B        |L1.10576|
                  |L1.10568|
;;;1040           
;;;1041       }
;;;1042       else
;;;1043       {
;;;1044           *needFree = FALSE;
002948  e3a00000          MOV      r0,#0
00294c  e5c40000          STRB     r0,[r4,#0]
                  |L1.10576|
;;;1045       }
;;;1046       return reVal;
002950  e1a00005          MOV      r0,r5
;;;1047   }
002954  e8bd9ffc          POP      {r2-r12,pc}
;;;1048   
                          ENDP

                  FileAgentDelFile PROC
;;;1082   }
;;;1083   FileAgentReturn FileAgentDelFile(StorageType storageType, char* dir, char* name)
002958  e92d41f0          PUSH     {r4-r8,lr}
;;;1084   {
00295c  e24ddc01          SUB      sp,sp,#0x100
002960  e1a06000          MOV      r6,r0
002964  e1a04001          MOV      r4,r1
002968  e1a05002          MOV      r5,r2
;;;1085       FileAgentReturn delReval = FILE_AGENT_RETURN_ERROR;
00296c  e3a07000          MOV      r7,#0
;;;1086       char fileName[_MAX_LFN];
;;;1087       
;;;1088       sprintf(fileName, "%s%s", dir, name);
002970  e1a03005          MOV      r3,r5
002974  e1a02004          MOV      r2,r4
002978  e59f12cc          LDR      r1,|L1.11340|
00297c  e1a0000d          MOV      r0,sp
002980  ebfffffe          BL       __2sprintf
;;;1089       switch(storageType)
002984  e3560000          CMP      r6,#0
002988  0a000004          BEQ      |L1.10656|
00298c  e3560001          CMP      r6,#1
002990  0a000013          BEQ      |L1.10724|
002994  e3560002          CMP      r6,#2
002998  1a00003e          BNE      |L1.10904|
00299c  ea000023          B        |L1.10800|
                  |L1.10656|
;;;1090       {
;;;1091           case FILE_AGENT_STORAGE_TYPE_AUTO:  
0029a0  e1a00000          MOV      r0,r0
;;;1092               xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY);
0029a4  e3a03000          MOV      r3,#0
0029a8  e3e02000          MVN      r2,#0
0029ac  e1a01003          MOV      r1,r3
0029b0  e51f00d8          LDR      r0,|L1.10464|
0029b4  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
0029b8  ebfffffe          BL       xQueueGenericReceive
;;;1093               delReval = fatfsAutoDelFile(name);        
0029bc  e1a00005          MOV      r0,r5
0029c0  ebfffffe          BL       fatfsAutoDelFile
0029c4  e1a07000          MOV      r7,r0
;;;1094               xSemaphoreGive(xFatfsReadWriteMutex);  
0029c8  e3a03000          MOV      r3,#0
0029cc  e1a02003          MOV      r2,r3
0029d0  e1a01003          MOV      r1,r3
0029d4  e51f00fc          LDR      r0,|L1.10464|
0029d8  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
0029dc  ebfffffe          BL       xQueueGenericSend
;;;1095               break;
0029e0  ea00002c          B        |L1.10904|
                  |L1.10724|
;;;1096           case FILE_AGENT_STORAGE_TYPE_YAFFS2:
0029e4  e1a00000          MOV      r0,r0
;;;1097               xSemaphoreTake(xYaffs2ReadWriteMutex, portMAX_DELAY); 
0029e8  e3a03000          MOV      r3,#0
0029ec  e3e02000          MVN      r2,#0
0029f0  e1a01003          MOV      r1,r3
0029f4  e59f0254          LDR      r0,|L1.11344|
0029f8  e5900000          LDR      r0,[r0,#0]  ; xYaffs2ReadWriteMutex
0029fc  ebfffffe          BL       xQueueGenericReceive
;;;1098               if(yaffs_unlink(name) < 0)
002a00  e1a00005          MOV      r0,r5
002a04  ebfffffe          BL       yaffs_unlink
002a08  e3500000          CMP      r0,#0
002a0c  ba000000          BLT      |L1.10772|
;;;1099               {
;;;1100               }
;;;1101               else
;;;1102               {
;;;1103                   delReval = FILE_AGENT_RETURN_OK_YAFFS2; 
002a10  e3a07001          MOV      r7,#1
                  |L1.10772|
;;;1104               }
;;;1105               xSemaphoreGive(xYaffs2ReadWriteMutex); 
002a14  e3a03000          MOV      r3,#0
002a18  e1a02003          MOV      r2,r3
002a1c  e1a01003          MOV      r1,r3
002a20  e59f0228          LDR      r0,|L1.11344|
002a24  e5900000          LDR      r0,[r0,#0]  ; xYaffs2ReadWriteMutex
002a28  ebfffffe          BL       xQueueGenericSend
;;;1106               break;
002a2c  ea000019          B        |L1.10904|
                  |L1.10800|
;;;1107           case FILE_AGENT_STORAGE_TYPE_FATFS:
002a30  e1a00000          MOV      r0,r0
;;;1108           {
;;;1109               FRESULT res;
;;;1110               xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY);
002a34  e3a03000          MOV      r3,#0
002a38  e3e02000          MVN      r2,#0
002a3c  e1a01003          MOV      r1,r3
002a40  e51f0168          LDR      r0,|L1.10464|
002a44  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
002a48  ebfffffe          BL       xQueueGenericReceive
;;;1111               res = f_unlink(fileName);    
002a4c  e1a0000d          MOV      r0,sp
002a50  ebfffffe          BL       f_unlink
002a54  e1a08000          MOV      r8,r0
;;;1112               if(res == FR_OK)   
002a58  e3580000          CMP      r8,#0
002a5c  1a000003          BNE      |L1.10864|
;;;1113               {
;;;1114                   delReval = fatfsGetReturnValueByDir(dir);
002a60  e1a00004          MOV      r0,r4
002a64  ebfffffe          BL       fatfsGetReturnValueByDir
002a68  e1a07000          MOV      r7,r0
002a6c  ea000002          B        |L1.10876|
                  |L1.10864|
;;;1115               }
;;;1116               else
;;;1117               {
;;;1118                   sysprintf("\r\n FileAgentDelFile f_unlink (%s) ERROR ...\r\n", fileName);
002a70  e1a0100d          MOV      r1,sp
002a74  e28f0f76          ADR      r0,|L1.11348|
002a78  ebfffffe          BL       sysprintf
                  |L1.10876|
;;;1119               }
;;;1120               xSemaphoreGive(xFatfsReadWriteMutex);    
002a7c  e3a03000          MOV      r3,#0
002a80  e1a02003          MOV      r2,r3
002a84  e1a01003          MOV      r1,r3
002a88  e51f01b0          LDR      r0,|L1.10464|
002a8c  e5900000          LDR      r0,[r0,#0]  ; xFatfsReadWriteMutex
002a90  ebfffffe          BL       xQueueGenericSend
;;;1121           }            
;;;1122               break;
002a94  e1a00000          MOV      r0,r0
                  |L1.10904|
002a98  e1a00000          MOV      r0,r0                 ;1095
;;;1123       }    
;;;1124       //xSemaphoreGive(xReadWriteMutex); 
;;;1125       if(delReval == FILE_AGENT_RETURN_ERROR)
002a9c  e3570000          CMP      r7,#0
002aa0  1a000004          BNE      |L1.10936|
;;;1126       {
;;;1127           error++;
002aa4  e51f0ba8          LDR      r0,|L1.7940|
002aa8  e5900000          LDR      r0,[r0,#0]  ; error
002aac  e2800001          ADD      r0,r0,#1
002ab0  e51f1bb4          LDR      r1,|L1.7940|
002ab4  e5810000          STR      r0,[r1,#0]  ; error
                  |L1.10936|
;;;1128       }
;;;1129       return delReval;
002ab8  e1a00007          MOV      r0,r7
002abc  e28ddc01          ADD      sp,sp,#0x100
;;;1130   }
002ac0  e8bd81f0          POP      {r4-r8,pc}
;;;1131   BOOL FileAgentGetList(StorageType storageType, char* dir, char* extensionName, char* excludeFileName, fileAgentFatfsListCallback callback, void* para1, void* para2, void* para3, void* para4)
                          ENDP

                  FileAgentGetList PROC
002ac4  e92d5fff          PUSH     {r0-r12,lr}
;;;1132   {
002ac8  e1a06000          MOV      r6,r0
002acc  e1a07001          MOV      r7,r1
002ad0  e1a04002          MOV      r4,r2
002ad4  e1a05003          MOV      r5,r3
002ad8  e28da040          ADD      r10,sp,#0x40
002adc  e89a0700          LDM      r10,{r8-r10}
;;;1133       BOOL getReval = TRUE;
002ae0  e3a0b001          MOV      r11,#1
;;;1134       switch(storageType)
002ae4  e3560000          CMP      r6,#0
002ae8  0a000004          BEQ      |L1.11008|
002aec  e3560001          CMP      r6,#1
002af0  0a00000c          BEQ      |L1.11048|
002af4  e3560002          CMP      r6,#2
002af8  1a000018          BNE      |L1.11104|
002afc  ea00000b          B        |L1.11056|
                  |L1.11008|
;;;1135       {
;;;1136           case FILE_AGENT_STORAGE_TYPE_AUTO:   
002b00  e1a00000          MOV      r0,r0
;;;1137               //xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY);          
;;;1138               if(fatfsAutoGetList( extensionName, excludeFileName, callback, para1, para2, para3, para4) == FILE_AGENT_RETURN_ERROR)
002b04  e88d0700          STM      sp,{r8-r10}
002b08  e1a01005          MOV      r1,r5
002b0c  e1a00004          MOV      r0,r4
002b10  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
002b14  ebfffffe          BL       fatfsAutoGetList
002b18  e3500000          CMP      r0,#0
002b1c  1a000000          BNE      |L1.11044|
;;;1139               {
;;;1140                   getReval = FALSE;
002b20  e3a0b000          MOV      r11,#0
                  |L1.11044|
;;;1141               }
;;;1142               //xSemaphoreGive(xFatfsReadWriteMutex);  
;;;1143               break;
002b24  ea00000d          B        |L1.11104|
                  |L1.11048|
;;;1144           case FILE_AGENT_STORAGE_TYPE_YAFFS2:
002b28  e1a00000          MOV      r0,r0
;;;1145               //xSemaphoreTake(xYaffs2ReadWriteMutex, portMAX_DELAY); 
;;;1146               //xSemaphoreGive(xYaffs2ReadWriteMutex); 
;;;1147               break;
002b2c  ea00000b          B        |L1.11104|
                  |L1.11056|
;;;1148           case FILE_AGENT_STORAGE_TYPE_FATFS:
002b30  e1a00000          MOV      r0,r0
;;;1149           {
;;;1150               //xSemaphoreTake(xFatfsReadWriteMutex, portMAX_DELAY);     
;;;1151          
;;;1152               if(FALSE == FileAgentGetFatfsList(dir, extensionName, excludeFileName, callback, para1, para2, para3, para4) )   
002b34  e59d003c          LDR      r0,[sp,#0x3c]
002b38  e88d0701          STM      sp,{r0,r8-r10}
002b3c  e1a02005          MOV      r2,r5
002b40  e1a01004          MOV      r1,r4
002b44  e1a00007          MOV      r0,r7
002b48  e59d3038          LDR      r3,[sp,#0x38]
002b4c  ebfffffe          BL       FileAgentGetFatfsList
002b50  e3500000          CMP      r0,#0
002b54  1a000000          BNE      |L1.11100|
;;;1153               {
;;;1154                   getReval = FALSE;
002b58  e3a0b000          MOV      r11,#0
                  |L1.11100|
;;;1155               }
;;;1156               //xSemaphoreGive(xFatfsReadWriteMutex);    
;;;1157           }            
;;;1158               break;
002b5c  e1a00000          MOV      r0,r0
                  |L1.11104|
002b60  e1a00000          MOV      r0,r0                 ;1143
;;;1159       }    
;;;1160       //xSemaphoreGive(xReadWriteMutex); 
;;;1161       if(getReval == FALSE)
002b64  e35b0000          CMP      r11,#0
002b68  1a000004          BNE      |L1.11136|
;;;1162       {
;;;1163           error++;
002b6c  e51f0c70          LDR      r0,|L1.7940|
002b70  e5900000          LDR      r0,[r0,#0]  ; error
002b74  e2800001          ADD      r0,r0,#1
002b78  e51f1c7c          LDR      r1,|L1.7940|
002b7c  e5810000          STR      r0,[r1,#0]  ; error
                  |L1.11136|
;;;1164       }
;;;1165       return getReval;
002b80  e1a0000b          MOV      r0,r11
002b84  e28dd010          ADD      sp,sp,#0x10
;;;1166   }
002b88  e8bd9ff0          POP      {r4-r12,pc}
;;;1167   BOOL FileAgentGetFatfsList(char* dir, char* extensionName, char* excludeFileName, fileAgentFatfsListCallback callback, void* para1, void* para2, void* para3, void* para4)
                          ENDP

                  listCallback PROC
;;;1269   }
;;;1270   static BOOL listCallback(char* dir, char* filename, int fileLen, void* para1, void* para2, void* para3, void* para4)
002b8c  e92d4070          PUSH     {r4-r6,lr}
;;;1271   {
002b90  e1a06000          MOV      r6,r0
002b94  e59d4014          LDR      r4,[sp,#0x14]
002b98  e59d5018          LDR      r5,[sp,#0x18]
002b9c  e59dc010          LDR      r12,[sp,#0x10]
;;;1272       //sysprintf(" listCallback > [%s][%s], Len = %d (0x%x)\r\n", dir, filename, fileLen, fileLen);
;;;1273       return TRUE;
002ba0  e3a00001          MOV      r0,#1
;;;1274   }
002ba4  e8bd8070          POP      {r4-r6,pc}
;;;1275   static BOOL delCallback(char* dir, char* filename, int fileLen, void* para1, void* para2, void* para3, void* para4)
                          ENDP

                  delCallback PROC
002ba8  e92d47f0          PUSH     {r4-r10,lr}
;;;1276   {
002bac  e24ddc01          SUB      sp,sp,#0x100
002bb0  e1a04000          MOV      r4,r0
002bb4  e1a05001          MOV      r5,r1
002bb8  e1a06002          MOV      r6,r2
002bbc  e1a0a003          MOV      r10,r3
002bc0  e28d9e12          ADD      r9,sp,#0x120
002bc4  e8990380          LDM      r9,{r7-r9}
;;;1277       char fileName[_MAX_LFN];
;;;1278       sysprintf(" delCallback > [%s][%s], Len = %d\r\n", dir, filename, fileLen);
002bc8  e1a03006          MOV      r3,r6
002bcc  e1a02005          MOV      r2,r5
002bd0  e1a01004          MOV      r1,r4
002bd4  e28f00a8          ADR      r0,|L1.11396|
002bd8  ebfffffe          BL       sysprintf
;;;1279       sprintf(fileName, "%s%s", dir, filename);
002bdc  e1a03005          MOV      r3,r5
002be0  e1a02004          MOV      r2,r4
002be4  e59f1060          LDR      r1,|L1.11340|
002be8  e1a0000d          MOV      r0,sp
002bec  ebfffffe          BL       __2sprintf
;;;1280       f_unlink(fileName);
002bf0  e1a0000d          MOV      r0,sp
002bf4  ebfffffe          BL       f_unlink
;;;1281       return TRUE;
002bf8  e3a00001          MOV      r0,#1
002bfc  e28ddc01          ADD      sp,sp,#0x100
;;;1282   }
002c00  e8bd87f0          POP      {r4-r10,pc}
;;;1283   BOOL FileAgentFatfsListFile (char* dir, char* extensionName)
                          ENDP

                  FileAgentFatfsListFile PROC
002c04  e92d407f          PUSH     {r0-r6,lr}
;;;1284   {
002c08  e1a04000          MOV      r4,r0
002c0c  e1a05001          MOV      r5,r1
;;;1285       //sysprintf("\r\n ===[ INFO ]=== FileAgentFatfsListFile [%s][%s] Start ===[ INFO ]=== \r\n", dir, extensionName);    
;;;1286       FileAgentGetFatfsList(dir, extensionName, NULL, listCallback, NULL, NULL, NULL, NULL);
002c10  e3a00000          MOV      r0,#0
002c14  e58d0000          STR      r0,[sp,#0]
002c18  e58d0004          STR      r0,[sp,#4]
002c1c  e58d0008          STR      r0,[sp,#8]
002c20  e59f3080          LDR      r3,|L1.11432|
002c24  e58d000c          STR      r0,[sp,#0xc]
002c28  e1a02000          MOV      r2,r0
002c2c  e1a01005          MOV      r1,r5
002c30  e1a00004          MOV      r0,r4
002c34  ebfffffe          BL       FileAgentGetFatfsList
;;;1287       FatfsGetDiskUseage(dir);
002c38  e1a00004          MOV      r0,r4
002c3c  ebfffffe          BL       FatfsGetDiskUseage
;;;1288       //sysprintf("\r\n ===[ INFO ]=== FileAgentFatfsListFile [%s][%s] End ===[ INFO ]=== \r\n", dir, extensionName);
;;;1289       return TRUE;
002c40  e3a00001          MOV      r0,#1
002c44  e28dd010          ADD      sp,sp,#0x10
;;;1290   }
002c48  e8bd8070          POP      {r4-r6,pc}
                  |L1.11340|
                          DCD      ||.text||+0x59c
                  |L1.11344|
                          DCD      xYaffs2ReadWriteMutex
                  |L1.11348|
002c54  0d0a2046          DCB      "\r\n FileAgentDelFile f_unlink (%s) ERROR ...\r\n",0
002c58  696c6541
002c5c  67656e74
002c60  44656c46
002c64  696c6520
002c68  665f756e
002c6c  6c696e6b
002c70  20282573
002c74  29204552
002c78  524f5220
002c7c  2e2e2e0d
002c80  0a00    
002c82  00                DCB      0
002c83  00                DCB      0
                  |L1.11396|
002c84  2064656c          DCB      " delCallback > [%s][%s], Len = %d\r\n",0
002c88  43616c6c
002c8c  6261636b
002c90  203e205b
002c94  25735d5b
002c98  25735d2c
002c9c  204c656e
002ca0  203d2025
002ca4  640d0a00
                  |L1.11432|
                          DCD      listCallback
                          ENDP

                  FileAgentFatfsDeleteFile PROC
;;;1291   BOOL FileAgentFatfsDeleteFile (char* dir, char* extensionName)
002cac  e92d407f          PUSH     {r0-r6,lr}
;;;1292   {
002cb0  e1a04000          MOV      r4,r0
002cb4  e1a05001          MOV      r5,r1
;;;1293       //sysprintf("\r\n ===[ INFO ]=== FileAgentFatfsDeleteFile [%s][%s] Start ===[ INFO ]=== \r\n", dir, extensionName);
;;;1294       FileAgentGetFatfsList(dir, extensionName, NULL, delCallback, NULL, NULL, NULL, NULL);
002cb8  e3a00000          MOV      r0,#0
002cbc  e58d0000          STR      r0,[sp,#0]
002cc0  e58d0004          STR      r0,[sp,#4]
002cc4  e58d0008          STR      r0,[sp,#8]
002cc8  e59f3150          LDR      r3,|L1.11808|
002ccc  e58d000c          STR      r0,[sp,#0xc]
002cd0  e1a02000          MOV      r2,r0
002cd4  e1a01005          MOV      r1,r5
002cd8  e1a00004          MOV      r0,r4
002cdc  ebfffffe          BL       FileAgentGetFatfsList
;;;1295      // sysprintf("\r\n ===[ INFO ]=== FileAgentFatfsDeleteFile [%s][%s] End ===[ INFO ]=== \r\n", dir, extensionName);
;;;1296       return TRUE;
002ce0  e3a00001          MOV      r0,#1
002ce4  e28dd010          ADD      sp,sp,#0x10
;;;1297   }
002ce8  e8bd8070          POP      {r4-r6,pc}
;;;1298   
                          ENDP

                  FileAgentGetFatFsAutoFormatCounter PROC
;;;1321   
;;;1322   int FileAgentGetFatFsAutoFormatCounter(void)
002cec  e59f0130          LDR      r0,|L1.11812|
;;;1323   {
;;;1324       return (autoFormatCounter2 * 1000) + autoFormatCounter1;
002cf0  e5900000          LDR      r0,[r0,#0]  ; autoFormatCounter2
002cf4  e0801080          ADD      r1,r0,r0,LSL #1
002cf8  e0610380          RSB      r0,r1,r0,LSL #7
002cfc  e59f1124          LDR      r1,|L1.11816|
002d00  e5911000          LDR      r1,[r1,#0]  ; autoFormatCounter1
002d04  e0810180          ADD      r0,r1,r0,LSL #3
;;;1325   }
002d08  e12fff1e          BX       lr
;;;1326   
                          ENDP

                  AppendBurninErrorLog PROC
;;;1328   #define TIMESTAMP_STRING_LENGTH     22
;;;1329   BOOL AppendBurninErrorLog(char *msgBuffer, uint32_t msgLength)
002d0c  e92d4030          PUSH     {r4,r5,lr}
;;;1330   {
002d10  e24dd064          SUB      sp,sp,#0x64
002d14  e1a05000          MOV      r5,r0
002d18  e1a04001          MOV      r4,r1
;;;1331       if ((burninErrMsgLength + msgLength + TIMESTAMP_STRING_LENGTH) > BURNIN_ERRMSG_BUFFER_MAX) {
002d1c  e51f04a4          LDR      r0,|L1.10368|
002d20  e5900000          LDR      r0,[r0,#0]  ; burninErrMsgLength
002d24  e0800004          ADD      r0,r0,r4
002d28  e2800016          ADD      r0,r0,#0x16
002d2c  e3500b0a          CMP      r0,#0x2800
002d30  9a000002          BLS      |L1.11584|
;;;1332           return FALSE;
002d34  e3a00000          MOV      r0,#0
                  |L1.11576|
002d38  e28dd064          ADD      sp,sp,#0x64
;;;1333       }
;;;1334       RTC_TIME_DATA_T pt;
;;;1335       char timeStamp[32];
;;;1336       if (E_RTC_SUCCESS != RTC_Read(RTC_CURRENT_TIME, &pt)) {
;;;1337           return FALSE;
;;;1338       }
;;;1339       
;;;1340       //terninalPrintf("ABurninErrorLog Take before\r\n");
;;;1341       
;;;1342       xSemaphoreTake(xBurninErrorMessageMutex, portMAX_DELAY);
;;;1343       
;;;1344       //terninalPrintf("ABurninErrorLog Take after\r\n");
;;;1345       
;;;1346       sprintf(timeStamp, "%04d/%02d/%02d% 02d:%02d:%02d - ", pt.u32Year, pt.u32cMonth, pt.u32cDay, pt.u32cHour, pt.u32cMinute, pt.u32cSecond);
;;;1347       memcpy(&burninErrMsgBuffer[burninErrMsgLength], timeStamp, TIMESTAMP_STRING_LENGTH);
;;;1348       burninErrMsgLength += TIMESTAMP_STRING_LENGTH;
;;;1349       memcpy(&burninErrMsgBuffer[burninErrMsgLength], msgBuffer, msgLength);
;;;1350       burninErrMsgLength += msgLength;
;;;1351       xSemaphoreGive(xBurninErrorMessageMutex);
;;;1352       return TRUE;
;;;1353   }
002d3c  e8bd8030          POP      {r4,r5,pc}
                  |L1.11584|
002d40  e28d1034          ADD      r1,sp,#0x34           ;1336
002d44  e3a00000          MOV      r0,#0                 ;1336
002d48  ebfffffe          BL       RTC_Read
002d4c  e3500000          CMP      r0,#0                 ;1336
002d50  0a000001          BEQ      |L1.11612|
002d54  e3a00000          MOV      r0,#0                 ;1337
002d58  eafffff6          B        |L1.11576|
                  |L1.11612|
002d5c  e3a03000          MOV      r3,#0                 ;1342
002d60  e3e02000          MVN      r2,#0                 ;1342
002d64  e1a01003          MOV      r1,r3                 ;1342
002d68  e51f04ec          LDR      r0,|L1.10372|
002d6c  e5900000          LDR      r0,[r0,#0]            ;1342  ; xBurninErrorMessageMutex
002d70  ebfffffe          BL       xQueueGenericReceive
002d74  e28d3038          ADD      r3,sp,#0x38           ;1346
002d78  e893000b          LDM      r3,{r0,r1,r3}         ;1346
002d7c  e59d2048          LDR      r2,[sp,#0x48]         ;1346
002d80  e58d000c          STR      r0,[sp,#0xc]          ;1346
002d84  e58d1008          STR      r1,[sp,#8]            ;1346
002d88  e1cd20f0          STRD     r2,r3,[sp,#0]         ;1346
002d8c  e28f1098          ADR      r1,|L1.11820|
002d90  e59d2050          LDR      r2,[sp,#0x50]         ;1346
002d94  e59d304c          LDR      r3,[sp,#0x4c]         ;1346
002d98  e28d0014          ADD      r0,sp,#0x14           ;1346
002d9c  ebfffffe          BL       __2sprintf
002da0  e51f1554          LDR      r1,|L1.10324|
002da4  e51f252c          LDR      r2,|L1.10368|
002da8  e5922000          LDR      r2,[r2,#0]            ;1347  ; burninErrMsgLength
002dac  e0810002          ADD      r0,r1,r2              ;1347
002db0  e3a02016          MOV      r2,#0x16              ;1347
002db4  e28d1014          ADD      r1,sp,#0x14           ;1347
002db8  ebfffffe          BL       __aeabi_memcpy
002dbc  e51f0544          LDR      r0,|L1.10368|
002dc0  e5900000          LDR      r0,[r0,#0]            ;1348  ; burninErrMsgLength
002dc4  e2800016          ADD      r0,r0,#0x16           ;1348
002dc8  e51f1550          LDR      r1,|L1.10368|
002dcc  e5810000          STR      r0,[r1,#0]            ;1348  ; burninErrMsgLength
002dd0  e51f1584          LDR      r1,|L1.10324|
002dd4  e51f255c          LDR      r2,|L1.10368|
002dd8  e5922000          LDR      r2,[r2,#0]            ;1349  ; burninErrMsgLength
002ddc  e0810002          ADD      r0,r1,r2              ;1349
002de0  e1a02004          MOV      r2,r4                 ;1349
002de4  e1a01005          MOV      r1,r5                 ;1349
002de8  ebfffffe          BL       __aeabi_memcpy
002dec  e51f0574          LDR      r0,|L1.10368|
002df0  e5900000          LDR      r0,[r0,#0]            ;1350  ; burninErrMsgLength
002df4  e0800004          ADD      r0,r0,r4              ;1350
002df8  e51f1580          LDR      r1,|L1.10368|
002dfc  e5810000          STR      r0,[r1,#0]            ;1350  ; burninErrMsgLength
002e00  e3a03000          MOV      r3,#0                 ;1351
002e04  e1a02003          MOV      r2,r3                 ;1351
002e08  e1a01003          MOV      r1,r3                 ;1351
002e0c  e51f0590          LDR      r0,|L1.10372|
002e10  e5900000          LDR      r0,[r0,#0]            ;1351  ; xBurninErrorMessageMutex
002e14  ebfffffe          BL       xQueueGenericSend
002e18  e3a00001          MOV      r0,#1                 ;1352
002e1c  eaffffc5          B        |L1.11576|
;;;1354   #endif
                          ENDP

                  |L1.11808|
                          DCD      delCallback
                  |L1.11812|
                          DCD      autoFormatCounter2
                  |L1.11816|
                          DCD      autoFormatCounter1
                  |L1.11820|
002e2c  25303464          DCB      "%04d/%02d/%02d% 02d:%02d:%02d - ",0
002e30  2f253032
002e34  642f2530
002e38  32642520
002e3c  3032643a
002e40  25303264
002e44  3a253032
002e48  64202d20
002e4c  00      
002e4d  00                DCB      0
002e4e  00                DCB      0
002e4f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fileAgentDataItem
                          %        67072
                  burninErrLogFilename
                          %        64
                  burninErrLogFilepath
                          %        64
                  burninErrMsgBuffer
                          %        10240

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0d0a4669          DCB      0x0d,0x0a,0x46,0x69
000004  6c654167          DCB      0x6c,0x65,0x41,0x67
000008  656e7450          DCB      0x65,0x6e,0x74,0x50
00000c  61727365          DCB      0x61,0x72,0x73,0x65
000010  72417574          DCB      0x72,0x41,0x75,0x74
000014  6f446174          DCB      0x6f,0x44,0x61,0x74
000018  6120456e          DCB      0x61,0x20,0x45,0x6e
00001c  64204552          DCB      0x64,0x20,0x45,0x52
000020  524f5220          DCB      0x52,0x4f,0x52,0x20
000024  5b307825          DCB      0x5b,0x30,0x78,0x25
000028  3032782c          DCB      0x30,0x32,0x78,0x2c
00002c  20307825          DCB      0x20,0x30,0x78,0x25
000030  3032785d          DCB      0x30,0x32,0x78,0x5d
000034  20636865          DCB      0x20,0x63,0x68,0x65
000038  636b5375          DCB      0x63,0x6b,0x53,0x75
00003c  6d203d20          DCB      0x6d,0x20,0x3d,0x20
000040  25642028          DCB      0x25,0x64,0x20,0x28
000044  2564292e          DCB      0x25,0x64,0x29,0x2e
000048  2e2e0d0a          DCB      0x2e,0x2e,0x0d,0x0a
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  0d0a4669          DCB      0x0d,0x0a,0x46,0x69
000054  6c654167          DCB      0x6c,0x65,0x41,0x67
000058  656e7450          DCB      0x65,0x6e,0x74,0x50
00005c  61727365          DCB      0x61,0x72,0x73,0x65
000060  72417574          DCB      0x72,0x41,0x75,0x74
000064  6f446174          DCB      0x6f,0x44,0x61,0x74
000068  61204865          DCB      0x61,0x20,0x48,0x65
00006c  61646572          DCB      0x61,0x64,0x65,0x72
000070  20455252          DCB      0x20,0x45,0x52,0x52
000074  4f52205b          DCB      0x4f,0x52,0x20,0x5b
000078  30782530          DCB      0x30,0x78,0x25,0x30
00007c  32782c20          DCB      0x32,0x78,0x2c,0x20
000080  30782530          DCB      0x30,0x78,0x25,0x30
000084  32785d20          DCB      0x32,0x78,0x5d,0x20
000088  6c656e20          DCB      0x6c,0x65,0x6e,0x20
00008c  3d202564          DCB      0x3d,0x20,0x25,0x64
000090  20282564          DCB      0x20,0x28,0x25,0x64
000094  292e2e2e          DCB      0x29,0x2e,0x2e,0x2e
000098  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
00009c  0d0a2021          DCB      0x0d,0x0a,0x20,0x21
0000a0  215b496e          DCB      0x21,0x5b,0x49,0x6e
0000a4  666f726d          DCB      0x66,0x6f,0x72,0x6d
0000a8  6174696f          DCB      0x61,0x74,0x69,0x6f
0000ac  6e204669          DCB      0x6e,0x20,0x46,0x69
0000b0  6c654167          DCB      0x6c,0x65,0x41,0x67
0000b4  656e745d          DCB      0x65,0x6e,0x74,0x5d
0000b8  21212066          DCB      0x21,0x21,0x20,0x66
0000bc  61746673          DCB      0x61,0x74,0x66,0x73
0000c0  47657446          DCB      0x47,0x65,0x74,0x46
0000c4  726f6d46          DCB      0x72,0x6f,0x6d,0x46
0000c8  696c6520          DCB      0x69,0x6c,0x65,0x20
0000cc  2573203a          DCB      0x25,0x73,0x20,0x3a
0000d0  20706172          DCB      0x20,0x70,0x61,0x72
0000d4  73657220          DCB      0x73,0x65,0x72,0x20
0000d8  6572726f          DCB      0x65,0x72,0x72,0x6f
0000dc  72206465          DCB      0x72,0x20,0x64,0x65
0000e0  6c657465          DCB      0x6c,0x65,0x74,0x65
0000e4  20697420          DCB      0x20,0x69,0x74,0x20
0000e8  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
0000ec  5b455252          DCB      0x5b,0x45,0x52,0x52
0000f0  4f525d20          DCB      0x4f,0x52,0x5d,0x20
0000f4  66617466          DCB      0x66,0x61,0x74,0x66
0000f8  73417574          DCB      0x73,0x41,0x75,0x74
0000fc  6f536176          DCB      0x6f,0x53,0x61,0x76
000100  65546f46          DCB      0x65,0x54,0x6f,0x46
000104  696c6520          DCB      0x69,0x6c,0x65,0x20
000108  5b25735d          DCB      0x5b,0x25,0x73,0x5d
00010c  20205265          DCB      0x20,0x20,0x52,0x65
000110  74727920          DCB      0x74,0x72,0x79,0x20
000114  28256429          DCB      0x28,0x25,0x64,0x29
000118  20455252          DCB      0x20,0x45,0x52,0x52
00011c  4f522121          DCB      0x4f,0x52,0x21,0x21
000120  2c20676f          DCB      0x2c,0x20,0x67,0x6f
000124  20666f72          DCB      0x20,0x66,0x6f,0x72
000128  6d61740a          DCB      0x6d,0x61,0x74,0x0a
00012c  00000000          DCB      0x00,0x00,0x00,0x00
000130  5b455252          DCB      0x5b,0x45,0x52,0x52
000134  4f525d20          DCB      0x4f,0x52,0x5d,0x20
000138  66617466          DCB      0x66,0x61,0x74,0x66
00013c  73417574          DCB      0x73,0x41,0x75,0x74
000140  6f536176          DCB      0x6f,0x53,0x61,0x76
000144  65546f46          DCB      0x65,0x54,0x6f,0x46
000148  696c6520          DCB      0x69,0x6c,0x65,0x20
00014c  5b25735d          DCB      0x5b,0x25,0x73,0x5d
000150  20205265          DCB      0x20,0x20,0x52,0x65
000154  74727920          DCB      0x74,0x72,0x79,0x20
000158  28256429          DCB      0x28,0x25,0x64,0x29
00015c  20455252          DCB      0x20,0x45,0x52,0x52
000160  4f522c20          DCB      0x4f,0x52,0x2c,0x20
000164  69676e6f          DCB      0x69,0x67,0x6e,0x6f
000168  72652066          DCB      0x72,0x65,0x20,0x66
00016c  6f726d61          DCB      0x6f,0x72,0x6d,0x61
000170  7421210a          DCB      0x74,0x21,0x21,0x0a
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  0d0a2021          DCB      0x0d,0x0a,0x20,0x21
00017c  215b496e          DCB      0x21,0x5b,0x49,0x6e
000180  666f726d          DCB      0x66,0x6f,0x72,0x6d
000184  6174696f          DCB      0x61,0x74,0x69,0x6f
000188  6e204669          DCB      0x6e,0x20,0x46,0x69
00018c  6c654167          DCB      0x6c,0x65,0x41,0x67
000190  656e745d          DCB      0x65,0x6e,0x74,0x5d
000194  21212066          DCB      0x21,0x21,0x20,0x66
000198  61746673          DCB      0x61,0x74,0x66,0x73
00019c  4175746f          DCB      0x41,0x75,0x74,0x6f
0001a0  44656c46          DCB      0x44,0x65,0x6c,0x46
0001a4  696c6520          DCB      0x69,0x6c,0x65,0x20
0001a8  2573203a          DCB      0x25,0x73,0x20,0x3a
0001ac  20457272          DCB      0x20,0x45,0x72,0x72
0001b0  6f722028          DCB      0x6f,0x72,0x20,0x28
0001b4  6572726f          DCB      0x65,0x72,0x72,0x6f
0001b8  72636f64          DCB      0x72,0x63,0x6f,0x64
0001bc  653a2025          DCB      0x65,0x3a,0x20,0x25
0001c0  64290d0a          DCB      0x64,0x29,0x0d,0x0a
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  203e3d3d          DCB      0x20,0x3e,0x3d,0x3d
0001cc  3e202046          DCB      0x3e,0x20,0x20,0x46
0001d0  696c6541          DCB      0x69,0x6c,0x65,0x41
0001d4  67656e74          DCB      0x67,0x65,0x6e,0x74
0001d8  47657446          DCB      0x47,0x65,0x74,0x46
0001dc  61746673          DCB      0x61,0x74,0x66,0x73
0001e0  4c697374          DCB      0x4c,0x69,0x73,0x74
0001e4  20657869          DCB      0x20,0x65,0x78,0x69
0001e8  7420205b          DCB      0x74,0x20,0x20,0x5b
0001ec  25735d20          DCB      0x25,0x73,0x5d,0x20
0001f0  5b25735d          DCB      0x5b,0x25,0x73,0x5d
0001f4  20287761          DCB      0x20,0x28,0x77,0x61
0001f8  726e696e          DCB      0x72,0x6e,0x69,0x6e
0001fc  6746696c          DCB      0x67,0x46,0x69,0x6c
000200  654e756d          DCB      0x65,0x4e,0x75,0x6d
000204  203d2025          DCB      0x20,0x3d,0x20,0x25
000208  6429203c          DCB      0x64,0x29,0x20,0x3c
00020c  3d3d3c0d          DCB      0x3d,0x3d,0x3c,0x0d
000210  0a000000          DCB      0x0a,0x00,0x00,0x00
000214  0d0a4669          DCB      0x0d,0x0a,0x46,0x69
000218  6c654167          DCB      0x6c,0x65,0x41,0x67
00021c  656e7441          DCB      0x65,0x6e,0x74,0x41
000220  64644461          DCB      0x64,0x64,0x44,0x61
000224  7461205b          DCB      0x74,0x61,0x20,0x5b
000228  25735d20          DCB      0x25,0x73,0x5d,0x20
00022c  3a204552          DCB      0x3a,0x20,0x45,0x52
000230  524f5220          DCB      0x52,0x4f,0x52,0x20
000234  28286164          DCB      0x28,0x28,0x61,0x64
000238  64547970          DCB      0x64,0x54,0x79,0x70
00023c  65203d3d          DCB      0x65,0x20,0x3d,0x3d
000240  2046494c          DCB      0x20,0x46,0x49,0x4c
000244  455f4147          DCB      0x45,0x5f,0x41,0x47
000248  454e545f          DCB      0x45,0x4e,0x54,0x5f
00024c  53544f52          DCB      0x53,0x54,0x4f,0x52
000250  4147455f          DCB      0x41,0x47,0x45,0x5f
000254  54595045          DCB      0x54,0x59,0x50,0x45
000258  5f464154          DCB      0x5f,0x46,0x41,0x54
00025c  46532920          DCB      0x46,0x53,0x29,0x20
000260  26262028          DCB      0x26,0x26,0x20,0x28
000264  64697220          DCB      0x64,0x69,0x72,0x20
000268  3d3d204e          DCB      0x3d,0x3d,0x20,0x4e
00026c  554c4c29          DCB      0x55,0x4c,0x4c,0x29
000270  292e2e2e          DCB      0x29,0x2e,0x2e,0x2e
000274  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000278  0d0a4669          DCB      0x0d,0x0a,0x46,0x69
00027c  6c654167          DCB      0x6c,0x65,0x41,0x67
000280  656e7441          DCB      0x65,0x6e,0x74,0x41
000284  64644461          DCB      0x64,0x64,0x44,0x61
000288  7461205b          DCB      0x74,0x61,0x20,0x5b
00028c  25735d20          DCB      0x25,0x73,0x5d,0x20
000290  3a204552          DCB      0x3a,0x20,0x45,0x52
000294  524f5220          DCB      0x52,0x4f,0x52,0x20
000298  28636865          DCB      0x28,0x63,0x68,0x65
00029c  636b4d6f          DCB      0x63,0x6b,0x4d,0x6f
0002a0  6465203d          DCB      0x64,0x65,0x20,0x3d
0002a4  3d205452          DCB      0x3d,0x20,0x54,0x52
0002a8  55452920          DCB      0x55,0x45,0x29,0x20
0002ac  26262028          DCB      0x26,0x26,0x20,0x28
0002b0  61646454          DCB      0x61,0x64,0x64,0x54
0002b4  79706520          DCB      0x79,0x70,0x65,0x20
0002b8  3d3d2046          DCB      0x3d,0x3d,0x20,0x46
0002bc  494c455f          DCB      0x49,0x4c,0x45,0x5f
0002c0  4147454e          DCB      0x41,0x47,0x45,0x4e
0002c4  545f4144          DCB      0x54,0x5f,0x41,0x44
0002c8  445f4441          DCB      0x44,0x5f,0x44,0x41
0002cc  54415f54          DCB      0x54,0x41,0x5f,0x54
0002d0  5950455f          DCB      0x59,0x50,0x45,0x5f
0002d4  41505045          DCB      0x41,0x50,0x50,0x45
0002d8  4e44292e          DCB      0x4e,0x44,0x29,0x2e
0002dc  2e2e0d0a          DCB      0x2e,0x2e,0x0d,0x0a
0002e0  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  205b4669          DCB      " [FileAgent] ",0
000004  6c654167
000008  656e745d
00000c  2000    

                          AREA ||.data||, DATA, ALIGN=2

                  initFlag
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  headerIndex
                          DCD      0x00000000
                  endIndex
                          DCD      0x00000000
                  threadWaitTime
                          DCD      0xffffffff
                  error
                          DCD      0x00000000
                  autoFormatCounter1
                          DCD      0x00000000
                  autoFormatCounter2
                          DCD      0x00000000
                  faHeader
00001c  daad              DCB      0xda,0xad
00001e  0000              DCW      0x0000
                  faEnd
000020  0000              DCW      0x0000
000022  1ff1              DCB      0x1f,0xf1
                  fileAgentPowerStatus
000024  01                DCB      0x01
                  fileAgentPowerStatusFlag
000025  000000            DCB      0x00,0x00,0x00
                  fileAgentPowerCallabck
                          DCD      ||.conststring||
                          DCD      FileAgentPreOffCallback
                          DCD      FileAgentOffCallback
                          DCD      FileAgentOnCallback
                          DCD      FileAgentCheckStatus
                  burninErrMsgLength
                          DCD      0x00000000
                  xSemaphore
                          DCD      0x00000000
                  xAddDataMutex
                          DCD      0x00000000
                  xFatfsReadWriteMutex
                          DCD      0x00000000
                  xYaffs2ReadWriteMutex
                          DCD      0x00000000
                  xBurninErrorMessageMutex
                          DCD      0x00000000
