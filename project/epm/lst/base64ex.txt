; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\base64ex.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\base64ex.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\base64ex.crf src\syshal\base64ex\base64ex.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Base64decode_len PROC
;;;110    
;;;111    int Base64decode_len(const char *bufcoded)
000000  e92d4010          PUSH     {r4,lr}
;;;112    {
000004  e1a01000          MOV      r1,r0
;;;113        int nbytesdecoded;
;;;114        register const unsigned char *bufin;
;;;115        register int nprbytes;
;;;116    
;;;117        bufin = (const unsigned char *) bufcoded;
000008  e1a02001          MOV      r2,r1
;;;118        while (pr2six[*(bufin++)] <= 63);
00000c  e1a00000          MOV      r0,r0
                  |L1.16|
000010  e4d20001          LDRB     r0,[r2],#1
000014  e59f42ec          LDR      r4,|L1.776|
000018  e7d40000          LDRB     r0,[r4,r0]
00001c  e350003f          CMP      r0,#0x3f
000020  dafffffa          BLE      |L1.16|
;;;119    
;;;120        nprbytes = (bufin - (const unsigned char *) bufcoded) - 1;
000024  e0420001          SUB      r0,r2,r1
000028  e240c001          SUB      r12,r0,#1
;;;121        nbytesdecoded = ((nprbytes + 3) / 4) * 3;
00002c  e28c0003          ADD      r0,r12,#3
000030  e1a04fc0          ASR      r4,r0,#31
000034  e0804f24          ADD      r4,r0,r4,LSR #30
000038  e1a04144          ASR      r4,r4,#2
00003c  e0843084          ADD      r3,r4,r4,LSL #1
;;;122    
;;;123        return nbytesdecoded + 1;
000040  e2830001          ADD      r0,r3,#1
;;;124    }
000044  e8bd8010          POP      {r4,pc}
;;;125    
                          ENDP

                  Base64decode PROC
;;;126    int Base64decode(char *bufplain, const char *bufcoded)
000048  e92d40f0          PUSH     {r4-r7,lr}
;;;127    {
00004c  e1a04000          MOV      r4,r0
000050  e1a0c001          MOV      r12,r1
;;;128        int nbytesdecoded;
;;;129        register const unsigned char *bufin;
;;;130        register unsigned char *bufout;
;;;131        register int nprbytes;
;;;132    
;;;133        bufin = (const unsigned char *) bufcoded;
000054  e1a0100c          MOV      r1,r12
;;;134        while (pr2six[*(bufin++)] <= 63);
000058  e1a00000          MOV      r0,r0
                  |L1.92|
00005c  e4d15001          LDRB     r5,[r1],#1
000060  e59f62a0          LDR      r6,|L1.776|
000064  e7d65005          LDRB     r5,[r6,r5]
000068  e355003f          CMP      r5,#0x3f
00006c  dafffffa          BLE      |L1.92|
;;;135        nprbytes = (bufin - (const unsigned char *) bufcoded) - 1;
000070  e041500c          SUB      r5,r1,r12
000074  e2453001          SUB      r3,r5,#1
;;;136        nbytesdecoded = ((nprbytes + 3) / 4) * 3;
000078  e2835003          ADD      r5,r3,#3
00007c  e1a06fc5          ASR      r6,r5,#31
000080  e0856f26          ADD      r6,r5,r6,LSR #30
000084  e1a06146          ASR      r6,r6,#2
000088  e0860086          ADD      r0,r6,r6,LSL #1
;;;137    
;;;138        bufout = (unsigned char *) bufplain;
00008c  e1a02004          MOV      r2,r4
;;;139        bufin = (const unsigned char *) bufcoded;
000090  e1a0100c          MOV      r1,r12
;;;140    
;;;141        while (nprbytes > 4) {
000094  ea000019          B        |L1.256|
                  |L1.152|
;;;142        *(bufout++) =
000098  e5d15000          LDRB     r5,[r1,#0]
00009c  e59f6264          LDR      r6,|L1.776|
0000a0  e7d65005          LDRB     r5,[r6,r5]
0000a4  e1a05105          LSL      r5,r5,#2
0000a8  e5d16001          LDRB     r6,[r1,#1]
0000ac  e59f7254          LDR      r7,|L1.776|
0000b0  e7d76006          LDRB     r6,[r7,r6]
0000b4  e1855246          ORR      r5,r5,r6,ASR #4
0000b8  e4c25001          STRB     r5,[r2],#1
;;;143            (unsigned char) (pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);
;;;144        *(bufout++) =
0000bc  e5d15001          LDRB     r5,[r1,#1]
0000c0  e2876000          ADD      r6,r7,#0
0000c4  e7d65005          LDRB     r5,[r6,r5]
0000c8  e1a05205          LSL      r5,r5,#4
0000cc  e5d16002          LDRB     r6,[r1,#2]
0000d0  e7d76006          LDRB     r6,[r7,r6]
0000d4  e1855146          ORR      r5,r5,r6,ASR #2
0000d8  e4c25001          STRB     r5,[r2],#1
;;;145            (unsigned char) (pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);
;;;146        *(bufout++) =
0000dc  e5d15003          LDRB     r5,[r1,#3]
0000e0  e2876000          ADD      r6,r7,#0
0000e4  e7d65005          LDRB     r5,[r6,r5]
0000e8  e5d16002          LDRB     r6,[r1,#2]
0000ec  e7d76006          LDRB     r6,[r7,r6]
0000f0  e1855306          ORR      r5,r5,r6,LSL #6
0000f4  e4c25001          STRB     r5,[r2],#1
;;;147            (unsigned char) (pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);
;;;148        bufin += 4;
0000f8  e2811004          ADD      r1,r1,#4
;;;149        nprbytes -= 4;
0000fc  e2433004          SUB      r3,r3,#4
                  |L1.256|
000100  e3530004          CMP      r3,#4                 ;141
000104  caffffe3          BGT      |L1.152|
;;;150        }
;;;151    
;;;152        /* Note: (nprbytes == 1) would be an error, so just ingore that case */
;;;153        if (nprbytes > 1) {
000108  e3530001          CMP      r3,#1
00010c  da000008          BLE      |L1.308|
;;;154        *(bufout++) =
000110  e5d15000          LDRB     r5,[r1,#0]
000114  e59f61ec          LDR      r6,|L1.776|
000118  e7d65005          LDRB     r5,[r6,r5]
00011c  e1a05105          LSL      r5,r5,#2
000120  e5d16001          LDRB     r6,[r1,#1]
000124  e59f71dc          LDR      r7,|L1.776|
000128  e7d76006          LDRB     r6,[r7,r6]
00012c  e1855246          ORR      r5,r5,r6,ASR #4
000130  e4c25001          STRB     r5,[r2],#1
                  |L1.308|
;;;155            (unsigned char) (pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);
;;;156        }
;;;157        if (nprbytes > 2) {
000134  e3530002          CMP      r3,#2
000138  da000008          BLE      |L1.352|
;;;158        *(bufout++) =
00013c  e5d15001          LDRB     r5,[r1,#1]
000140  e59f61c0          LDR      r6,|L1.776|
000144  e7d65005          LDRB     r5,[r6,r5]
000148  e1a05205          LSL      r5,r5,#4
00014c  e5d16002          LDRB     r6,[r1,#2]
000150  e59f71b0          LDR      r7,|L1.776|
000154  e7d76006          LDRB     r6,[r7,r6]
000158  e1855146          ORR      r5,r5,r6,ASR #2
00015c  e4c25001          STRB     r5,[r2],#1
                  |L1.352|
;;;159            (unsigned char) (pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);
;;;160        }
;;;161        if (nprbytes > 3) {
000160  e3530003          CMP      r3,#3
000164  da000007          BLE      |L1.392|
;;;162        *(bufout++) =
000168  e5d15003          LDRB     r5,[r1,#3]
00016c  e59f6194          LDR      r6,|L1.776|
000170  e7d65005          LDRB     r5,[r6,r5]
000174  e5d16002          LDRB     r6,[r1,#2]
000178  e59f7188          LDR      r7,|L1.776|
00017c  e7d76006          LDRB     r6,[r7,r6]
000180  e1855306          ORR      r5,r5,r6,LSL #6
000184  e4c25001          STRB     r5,[r2],#1
                  |L1.392|
;;;163            (unsigned char) (pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);
;;;164        }
;;;165    
;;;166        *(bufout++) = '\0';
000188  e3a05000          MOV      r5,#0
00018c  e4c25001          STRB     r5,[r2],#1
;;;167        nbytesdecoded -= (4 - nprbytes) & 3;
000190  e2635004          RSB      r5,r3,#4
000194  e2055003          AND      r5,r5,#3
000198  e0400005          SUB      r0,r0,r5
;;;168        return nbytesdecoded;
;;;169    }
00019c  e8bd80f0          POP      {r4-r7,pc}
;;;170    
                          ENDP

                  Base64encode_len PROC
;;;173    
;;;174    int Base64encode_len(int len)
0001a0  e92d4010          PUSH     {r4,lr}
;;;175    {
0001a4  e1a04000          MOV      r4,r0
;;;176        return ((len + 2) / 3 * 4) + 1;
0001a8  e3a01003          MOV      r1,#3
0001ac  e2840002          ADD      r0,r4,#2
0001b0  ebfffffe          BL       __aeabi_idivmod
0001b4  e1a00100          LSL      r0,r0,#2
0001b8  e2800001          ADD      r0,r0,#1
;;;177    }
0001bc  e8bd8010          POP      {r4,pc}
;;;178    
                          ENDP

                  Base64encode PROC
;;;179    int Base64encode(char *encoded, const char *string, int len)
0001c0  e92d4030          PUSH     {r4,r5,lr}
;;;180    {
0001c4  e1a04000          MOV      r4,r0
0001c8  e1a03001          MOV      r3,r1
0001cc  e1a0c002          MOV      r12,r2
;;;181        int i;
;;;182        char *p;
;;;183    
;;;184        p = encoded;
0001d0  e1a01004          MOV      r1,r4
;;;185        for (i = 0; i < len - 2; i += 3) {
0001d4  e3a02000          MOV      r2,#0
0001d8  ea000020          B        |L1.608|
                  |L1.476|
;;;186        *p++ = basis_64[(string[i] >> 2) & 0x3F];
0001dc  e7d30002          LDRB     r0,[r3,r2]
0001e0  e3a0503f          MOV      r5,#0x3f
0001e4  e0050140          AND      r0,r5,r0,ASR #2
0001e8  e59f511c          LDR      r5,|L1.780|
0001ec  e7d50000          LDRB     r0,[r5,r0]
0001f0  e4c10001          STRB     r0,[r1],#1
;;;187        *p++ = basis_64[((string[i] & 0x3) << 4) |
0001f4  e7d30002          LDRB     r0,[r3,r2]
0001f8  e1a00f00          LSL      r0,r0,#30
0001fc  e1a00d20          LSR      r0,r0,#26
000200  e2825001          ADD      r5,r2,#1
000204  e7d35005          LDRB     r5,[r3,r5]
000208  e20550f0          AND      r5,r5,#0xf0
00020c  e1800245          ORR      r0,r0,r5,ASR #4
000210  e59f50f4          LDR      r5,|L1.780|
000214  e7d50000          LDRB     r0,[r5,r0]
000218  e4c10001          STRB     r0,[r1],#1
;;;188                        ((int) (string[i + 1] & 0xF0) >> 4)];
;;;189        *p++ = basis_64[((string[i + 1] & 0xF) << 2) |
00021c  e2820001          ADD      r0,r2,#1
000220  e7d30000          LDRB     r0,[r3,r0]
000224  e1a00e00          LSL      r0,r0,#28
000228  e1a00d20          LSR      r0,r0,#26
00022c  e2825002          ADD      r5,r2,#2
000230  e7d35005          LDRB     r5,[r3,r5]
000234  e20550c0          AND      r5,r5,#0xc0
000238  e1800345          ORR      r0,r0,r5,ASR #6
00023c  e59f50c8          LDR      r5,|L1.780|
000240  e7d50000          LDRB     r0,[r5,r0]
000244  e4c10001          STRB     r0,[r1],#1
;;;190                        ((int) (string[i + 2] & 0xC0) >> 6)];
;;;191        *p++ = basis_64[string[i + 2] & 0x3F];
000248  e2820002          ADD      r0,r2,#2
00024c  e7d30000          LDRB     r0,[r3,r0]
000250  e200003f          AND      r0,r0,#0x3f
000254  e7d50000          LDRB     r0,[r5,r0]
000258  e4c10001          STRB     r0,[r1],#1
00025c  e2822003          ADD      r2,r2,#3              ;185
                  |L1.608|
000260  e24c0002          SUB      r0,r12,#2             ;185
000264  e1500002          CMP      r0,r2                 ;185
000268  caffffdb          BGT      |L1.476|
;;;192        }
;;;193        if (i < len) {
00026c  e152000c          CMP      r2,r12
000270  aa000020          BGE      |L1.760|
;;;194        *p++ = basis_64[(string[i] >> 2) & 0x3F];
000274  e7d30002          LDRB     r0,[r3,r2]
000278  e3a0503f          MOV      r5,#0x3f
00027c  e0050140          AND      r0,r5,r0,ASR #2
000280  e59f5084          LDR      r5,|L1.780|
000284  e7d50000          LDRB     r0,[r5,r0]
000288  e4c10001          STRB     r0,[r1],#1
;;;195        if (i == (len - 1)) {
00028c  e24c0001          SUB      r0,r12,#1
000290  e1500002          CMP      r0,r2
000294  1a000006          BNE      |L1.692|
;;;196            *p++ = basis_64[((string[i] & 0x3) << 4)];
000298  e7d30002          LDRB     r0,[r3,r2]
00029c  e2000003          AND      r0,r0,#3
0002a0  e7d50200          LDRB     r0,[r5,r0,LSL #4]
0002a4  e4c10001          STRB     r0,[r1],#1
;;;197            *p++ = '=';
0002a8  e3a0003d          MOV      r0,#0x3d
0002ac  e4c10001          STRB     r0,[r1],#1
0002b0  ea00000e          B        |L1.752|
                  |L1.692|
;;;198        }
;;;199        else {
;;;200            *p++ = basis_64[((string[i] & 0x3) << 4) |
0002b4  e7d30002          LDRB     r0,[r3,r2]
0002b8  e1a00f00          LSL      r0,r0,#30
0002bc  e1a00d20          LSR      r0,r0,#26
0002c0  e2825001          ADD      r5,r2,#1
0002c4  e7d35005          LDRB     r5,[r3,r5]
0002c8  e20550f0          AND      r5,r5,#0xf0
0002cc  e1800245          ORR      r0,r0,r5,ASR #4
0002d0  e59f5034          LDR      r5,|L1.780|
0002d4  e7d50000          LDRB     r0,[r5,r0]
0002d8  e4c10001          STRB     r0,[r1],#1
;;;201                            ((int) (string[i + 1] & 0xF0) >> 4)];
;;;202            *p++ = basis_64[((string[i + 1] & 0xF) << 2)];
0002dc  e2820001          ADD      r0,r2,#1
0002e0  e7d30000          LDRB     r0,[r3,r0]
0002e4  e200000f          AND      r0,r0,#0xf
0002e8  e7d50100          LDRB     r0,[r5,r0,LSL #2]
0002ec  e4c10001          STRB     r0,[r1],#1
                  |L1.752|
;;;203        }
;;;204        *p++ = '=';
0002f0  e3a0003d          MOV      r0,#0x3d
0002f4  e4c10001          STRB     r0,[r1],#1
                  |L1.760|
;;;205        }
;;;206    
;;;207        *p++ = '\0';
0002f8  e3a00000          MOV      r0,#0
0002fc  e4c10001          STRB     r0,[r1],#1
;;;208        return p - encoded;
000300  e0410004          SUB      r0,r1,r4
;;;209    }
000304  e8bd8030          POP      {r4,r5,pc}
                          ENDP

                  |L1.776|
                          DCD      pr2six
                  |L1.780|
                          DCD      basis_64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  pr2six
000000  40404040          DCB      0x40,0x40,0x40,0x40
000004  40404040          DCB      0x40,0x40,0x40,0x40
000008  40404040          DCB      0x40,0x40,0x40,0x40
00000c  40404040          DCB      0x40,0x40,0x40,0x40
000010  40404040          DCB      0x40,0x40,0x40,0x40
000014  40404040          DCB      0x40,0x40,0x40,0x40
000018  40404040          DCB      0x40,0x40,0x40,0x40
00001c  40404040          DCB      0x40,0x40,0x40,0x40
000020  40404040          DCB      0x40,0x40,0x40,0x40
000024  40404040          DCB      0x40,0x40,0x40,0x40
000028  4040403e          DCB      0x40,0x40,0x40,0x3e
00002c  4040403f          DCB      0x40,0x40,0x40,0x3f
000030  34353637          DCB      0x34,0x35,0x36,0x37
000034  38393a3b          DCB      0x38,0x39,0x3a,0x3b
000038  3c3d4040          DCB      0x3c,0x3d,0x40,0x40
00003c  40404040          DCB      0x40,0x40,0x40,0x40
000040  40000102          DCB      0x40,0x00,0x01,0x02
000044  03040506          DCB      0x03,0x04,0x05,0x06
000048  0708090a          DCB      0x07,0x08,0x09,0x0a
00004c  0b0c0d0e          DCB      0x0b,0x0c,0x0d,0x0e
000050  0f101112          DCB      0x0f,0x10,0x11,0x12
000054  13141516          DCB      0x13,0x14,0x15,0x16
000058  17181940          DCB      0x17,0x18,0x19,0x40
00005c  40404040          DCB      0x40,0x40,0x40,0x40
000060  401a1b1c          DCB      0x40,0x1a,0x1b,0x1c
000064  1d1e1f20          DCB      0x1d,0x1e,0x1f,0x20
000068  21222324          DCB      0x21,0x22,0x23,0x24
00006c  25262728          DCB      0x25,0x26,0x27,0x28
000070  292a2b2c          DCB      0x29,0x2a,0x2b,0x2c
000074  2d2e2f30          DCB      0x2d,0x2e,0x2f,0x30
000078  31323340          DCB      0x31,0x32,0x33,0x40
00007c  40404040          DCB      0x40,0x40,0x40,0x40
000080  40404040          DCB      0x40,0x40,0x40,0x40
000084  40404040          DCB      0x40,0x40,0x40,0x40
000088  40404040          DCB      0x40,0x40,0x40,0x40
00008c  40404040          DCB      0x40,0x40,0x40,0x40
000090  40404040          DCB      0x40,0x40,0x40,0x40
000094  40404040          DCB      0x40,0x40,0x40,0x40
000098  40404040          DCB      0x40,0x40,0x40,0x40
00009c  40404040          DCB      0x40,0x40,0x40,0x40
0000a0  40404040          DCB      0x40,0x40,0x40,0x40
0000a4  40404040          DCB      0x40,0x40,0x40,0x40
0000a8  40404040          DCB      0x40,0x40,0x40,0x40
0000ac  40404040          DCB      0x40,0x40,0x40,0x40
0000b0  40404040          DCB      0x40,0x40,0x40,0x40
0000b4  40404040          DCB      0x40,0x40,0x40,0x40
0000b8  40404040          DCB      0x40,0x40,0x40,0x40
0000bc  40404040          DCB      0x40,0x40,0x40,0x40
0000c0  40404040          DCB      0x40,0x40,0x40,0x40
0000c4  40404040          DCB      0x40,0x40,0x40,0x40
0000c8  40404040          DCB      0x40,0x40,0x40,0x40
0000cc  40404040          DCB      0x40,0x40,0x40,0x40
0000d0  40404040          DCB      0x40,0x40,0x40,0x40
0000d4  40404040          DCB      0x40,0x40,0x40,0x40
0000d8  40404040          DCB      0x40,0x40,0x40,0x40
0000dc  40404040          DCB      0x40,0x40,0x40,0x40
0000e0  40404040          DCB      0x40,0x40,0x40,0x40
0000e4  40404040          DCB      0x40,0x40,0x40,0x40
0000e8  40404040          DCB      0x40,0x40,0x40,0x40
0000ec  40404040          DCB      0x40,0x40,0x40,0x40
0000f0  40404040          DCB      0x40,0x40,0x40,0x40
0000f4  40404040          DCB      0x40,0x40,0x40,0x40
0000f8  40404040          DCB      0x40,0x40,0x40,0x40
0000fc  40404040          DCB      0x40,0x40,0x40,0x40
                  basis_64
000100  41424344          DCB      0x41,0x42,0x43,0x44
000104  45464748          DCB      0x45,0x46,0x47,0x48
000108  494a4b4c          DCB      0x49,0x4a,0x4b,0x4c
00010c  4d4e4f50          DCB      0x4d,0x4e,0x4f,0x50
000110  51525354          DCB      0x51,0x52,0x53,0x54
000114  55565758          DCB      0x55,0x56,0x57,0x58
000118  595a6162          DCB      0x59,0x5a,0x61,0x62
00011c  63646566          DCB      0x63,0x64,0x65,0x66
000120  6768696a          DCB      0x67,0x68,0x69,0x6a
000124  6b6c6d6e          DCB      0x6b,0x6c,0x6d,0x6e
000128  6f707172          DCB      0x6f,0x70,0x71,0x72
00012c  73747576          DCB      0x73,0x74,0x75,0x76
000130  7778797a          DCB      0x77,0x78,0x79,0x7a
000134  30313233          DCB      0x30,0x31,0x32,0x33
000138  34353637          DCB      0x34,0x35,0x36,0x37
00013c  38392b2f          DCB      0x38,0x39,0x2b,0x2f
000140  00                DCB      0x00
