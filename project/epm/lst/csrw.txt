; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\csrw.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\csrw.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\csrw.crf src\syshal\octopus\csrw.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GetTime PROC
;;;82     
;;;83     void GetTime (CHAR *s)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;84     {
000004  e1a06000          MOV      r6,r0
;;;85         TickType_t usecdiff=0;
000008  e3a04000          MOV      r4,#0
;;;86         INT ret=0;
00000c  e3a05000          MOV      r5,#0
;;;87     
;;;88         //gettimeofday(&g_gettime, NULL);
;;;89         //usecdiff = (g_gettime.tv_sec - g_lastgettime.tv_sec)*1000000 + g_gettime.tv_usec - g_lastgettime.tv_usec;
;;;90         TickType_t g_gettime=xTaskGetTickCount ();
000010  ebfffffe          BL       xTaskGetTickCount
000014  e58d0000          STR      r0,[sp,#0]
;;;91         usecdiff=g_gettime-g_lastgettime;
000018  e59f12a4          LDR      r1,|L1.708|
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e5911000          LDR      r1,[r1,#0]  ; g_lastgettime
000024  e0404001          SUB      r4,r0,r1
;;;92         //terninalPrintf(" GetTime [%s] enter : usecdiff = %d..\n", s, usecdiff);
;;;93         ret=strncmp (s, ACK_RECV, strlen (ACK_RECV));
000028  e3a02008          MOV      r2,#8
00002c  e28f1fa5          ADR      r1,|L1.712|
000030  e1a00006          MOV      r0,r6
000034  ebfffffe          BL       strncmp
000038  e1a05000          MOV      r5,r0
;;;94         if(ret==0)
00003c  e3550000          CMP      r5,#0
000040  1a000004          BNE      |L1.88|
;;;95         {
;;;96             //terninalPrintf(" GetTime [ACK_RECV]: %d compare %d..\n", usecdiff, ((RWACKLMT/1000)/portTICK_RATE_MS/portTICK_RATE_MS));
;;;97             if(usecdiff>((RWACKLMT/1000)/portTICK_RATE_MS/portTICK_RATE_MS))
000044  e3540001          CMP      r4,#1
000048  9a000002          BLS      |L1.88|
;;;98             {
;;;99                 g_AckExpired=1;
00004c  e3a00001          MOV      r0,#1
000050  e59f127c          LDR      r1,|L1.724|
000054  e5c10000          STRB     r0,[r1,#0]  ; g_AckExpired
                  |L1.88|
;;;100            }
;;;101        }
;;;102    
;;;103        ret=strncmp (s, DATA_START, strlen (DATA_START));
000058  e3a0200a          MOV      r2,#0xa
00005c  e28f1f9d          ADR      r1,|L1.728|
000060  e1a00006          MOV      r0,r6
000064  ebfffffe          BL       strncmp
000068  e1a05000          MOV      r5,r0
;;;104        if(ret==0)
00006c  e3550000          CMP      r5,#0
000070  1a000005          BNE      |L1.140|
;;;105        {
;;;106            //terninalPrintf(" GetTime [DATA_START]: %d compare %d..\n", usecdiff, ((RWDATALMT/1000)/portTICK_RATE_MS/portTICK_RATE_MS));
;;;107            if(usecdiff>((RWDATALMT/1000)/portTICK_RATE_MS))
000074  e59f0268          LDR      r0,|L1.740|
000078  e1540000          CMP      r4,r0
00007c  9a000002          BLS      |L1.140|
;;;108                g_RespExpired=1;
000080  e3a00001          MOV      r0,#1
000084  e59f125c          LDR      r1,|L1.744|
000088  e5c10000          STRB     r0,[r1,#0]  ; g_RespExpired
                  |L1.140|
;;;109        }
;;;110    
;;;111        memmove (&g_lastgettime, &g_gettime, sizeof (g_gettime));
00008c  e3a02004          MOV      r2,#4
000090  e1a0100d          MOV      r1,sp
000094  e59f0228          LDR      r0,|L1.708|
000098  ebfffffe          BL       __aeabi_memmove4
;;;112        /*
;;;113        ULONG usecdiff=0;
;;;114        INT ret = 0;
;;;115    
;;;116        gettimeofday(&g_gettime, NULL);
;;;117        usecdiff = (g_gettime.tv_sec - g_lastgettime.tv_sec)*1000000 + g_gettime.tv_usec - g_lastgettime.tv_usec;
;;;118    
;;;119        ret = strncmp(s, ACK_RECV, strlen(ACK_RECV));
;;;120        if (ret == 0) {
;;;121            if (usecdiff > RWACKLMT)
;;;122                g_AckExpired = 1;
;;;123        }
;;;124    
;;;125        ret = strncmp(s, DATA_START, strlen(DATA_START));
;;;126        if (ret == 0) {
;;;127            if (usecdiff > RWDATALMT)
;;;128                g_RespExpired = 1;
;;;129        }
;;;130    
;;;131        memmove(&g_lastgettime, &g_gettime, sizeof(g_gettime));
;;;132        */
;;;133    }
00009c  e8bd80f8          POP      {r3-r7,pc}
;;;134    
                          ENDP

                  sendNAK PROC
;;;327    // send block to CSRW
;;;328    void sendNAK ()
0000a0  e92d4010          PUSH     {r4,lr}
;;;329    {
;;;330        /* NAK = \x00\x00\xFF\xFF\x00\x00 */
;;;331        GetTime (NAK_SEND);
0000a4  e28f0d09          ADR      r0,|L1.748|
0000a8  ebfffffe          BL       GetTime
;;;332        memset (szOutMsg, 0, 6);
0000ac  e3a01006          MOV      r1,#6
0000b0  e59f0240          LDR      r0,|L1.760|
0000b4  ebfffffe          BL       __aeabi_memclr
;;;333        szOutMsg[2]=szOutMsg[3]=0xFF;
0000b8  e3a000ff          MOV      r0,#0xff
0000bc  e59f1234          LDR      r1,|L1.760|
0000c0  e5c10003          STRB     r0,[r1,#3]  ; szOutMsg
0000c4  e5c10002          STRB     r0,[r1,#2]  ; szOutMsg
;;;334        com_out (szOutMsg, 6, NAK_DATA_TYPE);
0000c8  e3a02003          MOV      r2,#3
0000cc  e3a01006          MOV      r1,#6
0000d0  e59f0220          LDR      r0,|L1.760|
0000d4  ebfffffe          BL       com_out
;;;335    }
0000d8  e8bd8010          POP      {r4,pc}
;;;336    
                          ENDP

                  READBLOCK PROC
;;;134    
;;;135    void READBLOCK (BYTE b_decrypt)
0000dc  e92d4070          PUSH     {r4-r6,lr}
;;;136    {
0000e0  e1a04000          MOV      r4,r0
;;;137        INT i=0;
0000e4  e3a05000          MOV      r5,#0
;;;138    
;;;139        memset (g_inbuff, 0, MAXSTR);
0000e8  e59f120c          LDR      r1,|L1.764|
0000ec  e59f020c          LDR      r0,|L1.768|
0000f0  ebfffffe          BL       __aeabi_memclr
;;;140        g_len=ReadBlock (g_inbuff);
0000f4  e59f0204          LDR      r0,|L1.768|
0000f8  ebfffffe          BL       ReadBlock
0000fc  e59f1200          LDR      r1,|L1.772|
000100  e5810000          STR      r0,[r1,#0]  ; g_len
;;;141    
;;;142        //retry no data receive or file com error
;;;143        for(i=0; i<theRWL.Time1; i++)
000104  e1a00000          MOV      r0,r0
000108  ea00000d          B        |L1.324|
                  |L1.268|
;;;144        {
;;;145            if(g_len==0)
00010c  e59f01f0          LDR      r0,|L1.772|
000110  e5900000          LDR      r0,[r0,#0]  ; g_len
000114  e3500000          CMP      r0,#0
000118  1a000007          BNE      |L1.316|
;;;146            {
;;;147                printf ("No Data, send NAK\n");
00011c  e28f0f79          ADR      r0,|L1.776|
000120  ebfffffe          BL       terninalPrintf
;;;148                sendNAK ();
000124  ebfffffe          BL       sendNAK
;;;149                g_len=ReadBlock (g_inbuff);
000128  e59f01d0          LDR      r0,|L1.768|
00012c  ebfffffe          BL       ReadBlock
000130  e59f11cc          LDR      r1,|L1.772|
000134  e5810000          STR      r0,[r1,#0]  ; g_len
000138  ea000000          B        |L1.320|
                  |L1.316|
;;;150            }
;;;151            else
;;;152            {
;;;153                break;
00013c  ea000006          B        |L1.348|
                  |L1.320|
000140  e2855001          ADD      r5,r5,#1              ;143
                  |L1.324|
000144  e59f01d0          LDR      r0,|L1.796|
000148  e3e01f61          MVN      r1,#0x184             ;143
00014c  e0400001          SUB      r0,r0,r1              ;143
000150  ebfffffe          BL       __aeabi_uread4
000154  e1500005          CMP      r0,r5                 ;143
000158  caffffeb          BGT      |L1.268|
                  |L1.348|
00015c  e1a00000          MOV      r0,r0
;;;154            }
;;;155        }
;;;156    
;;;157        //not decrypt data for 0x7F error or file com error
;;;158        if((g_len>0)&&b_decrypt && f_encrypt&&(g_inbuff[0]!=ERR_RESP))
000160  e59f019c          LDR      r0,|L1.772|
000164  e5900000          LDR      r0,[r0,#0]  ; g_len
000168  e3500000          CMP      r0,#0
00016c  da000010          BLE      |L1.436|
000170  e3540000          CMP      r4,#0
000174  0a00000e          BEQ      |L1.436|
000178  e59f01a0          LDR      r0,|L1.800|
00017c  e5900000          LDR      r0,[r0,#0]  ; f_encrypt
000180  e3500000          CMP      r0,#0
000184  0a00000a          BEQ      |L1.436|
000188  e59f0170          LDR      r0,|L1.768|
00018c  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
000190  e350007f          CMP      r0,#0x7f
000194  0a000006          BEQ      |L1.436|
;;;159        {
;;;160            CscryptEncryptBlock (msgkey, &g_inbuff[1], (g_len-1), 0);
000198  e59f0164          LDR      r0,|L1.772|
00019c  e5900000          LDR      r0,[r0,#0]  ; g_len
0001a0  e2402001          SUB      r2,r0,#1
0001a4  e3a03000          MOV      r3,#0
0001a8  e59f1174          LDR      r1,|L1.804|
0001ac  e59f0174          LDR      r0,|L1.808|
0001b0  ebfffffe          BL       CscryptEncryptBlock
                  |L1.436|
;;;161        }
;;;162    }
0001b4  e8bd8070          POP      {r4-r6,pc}
;;;163    #include "timelib.h"
                          ENDP

                  GetRTC2000 PROC
;;;164    /* return current time as seconds from 1/1/2000 GMT */
;;;165    ULONG GetRTC2000 ()
0001b8  e92d4030          PUSH     {r4,r5,lr}
;;;166    {
0001bc  e24dd02c          SUB      sp,sp,#0x2c
;;;167        time_t t, t1;
;;;168        struct tm *gmt, tm2000={0, 0, 0, 1, 0, 100, 0, 0, 0, 0, 0};     //base on 1/1/1900
0001c0  e3a0202c          MOV      r2,#0x2c
0001c4  e59f1160          LDR      r1,|L1.812|
0001c8  e1a0000d          MOV      r0,sp
0001cc  ebfffffe          BL       __aeabi_memcpy4
;;;169    
;;;170        #if(1)
;;;171        t = GetCurrentUTCTime();
0001d0  ebfffffe          BL       GetCurrentUTCTime
0001d4  e1a04000          MOV      r4,r0
;;;172        #else
;;;173        time (&t);               /* current time */
;;;174        gmt=gmtime (&t);       /* seconds since 1/1/70 */
;;;175        t=mktime (gmt);
;;;176        #endif
;;;177        t1=mktime (&tm2000);
0001d8  e1a0000d          MOV      r0,sp
0001dc  ebfffffe          BL       mktime
0001e0  e1a05000          MOV      r5,r0
;;;178    
;;;179        //printf ("GetRTC2000 (t = %d, t1 = %d)\n", t, t1);
;;;180        return (ULONG)t-(ULONG)t1;
0001e4  e0440005          SUB      r0,r4,r5
0001e8  e28dd02c          ADD      sp,sp,#0x2c
;;;181    }
0001ec  e8bd8030          POP      {r4,r5,pc}
;;;182    
                          ENDP

                  MakeMessageHeader PROC
;;;183    INT MakeMessageHeader (BYTE *dest, INT cnt)
0001f0  e92d41f0          PUSH     {r4-r8,lr}
;;;184    {
0001f4  e1a04000          MOV      r4,r0
0001f8  e1a05001          MOV      r5,r1
;;;185        INT i;
;;;186        unsigned chkSumExt;
;;;187        BYTE cs;
;;;188    
;;;189        if(cnt<=(256-MSGSIZ_HEADER-MSGSIZ_FOOTER))
0001fc  e35500f9          CMP      r5,#0xf9
000200  ca000016          BGT      |L1.608|
;;;190        {
;;;191            // short packet can be sent by old message format
;;;192            dest[MSGOFF_HDRTYPE]=0xFF;            // sync byte for extend command
000204  e3a000ff          MOV      r0,#0xff
000208  e5c40002          STRB     r0,[r4,#2]
;;;193            dest[MSGOFF_LEN]=cnt;             // set up message length
00020c  e5c45003          STRB     r5,[r4,#3]
;;;194            dest[MSGOFF_LCS]=(256-cnt);     // length check sum
000210  e2650c01          RSB      r0,r5,#0x100
000214  e5c40004          STRB     r0,[r4,#4]
;;;195            for(cs=i=0; i<cnt; i++)      // prepare data checksum
000218  e3a06000          MOV      r6,#0
00021c  e1a07006          MOV      r7,r6
000220  ea000004          B        |L1.568|
                  |L1.548|
;;;196                cs+=dest[MSGOFF_DATA+i];
000224  e2860005          ADD      r0,r6,#5
000228  e7d40000          LDRB     r0,[r4,r0]
00022c  e0800007          ADD      r0,r0,r7
000230  e20070ff          AND      r7,r0,#0xff
000234  e2866001          ADD      r6,r6,#1              ;195
                  |L1.568|
000238  e1560005          CMP      r6,r5                 ;195
00023c  bafffff8          BLT      |L1.548|
;;;197            dest[MSGOFF_DATA+cnt]=(0x100-(cs&0xff));
000240  e2670c01          RSB      r0,r7,#0x100
000244  e2851005          ADD      r1,r5,#5
000248  e7c40001          STRB     r0,[r4,r1]
;;;198            dest[MSGOFF_DATA+cnt+1]=0;    // post amble
00024c  e3a00000          MOV      r0,#0
000250  e2851006          ADD      r1,r5,#6
000254  e7c40001          STRB     r0,[r4,r1]
;;;199            return(cnt+MSGSIZ_HEADER+MSGSIZ_FOOTER);
000258  e2850007          ADD      r0,r5,#7
                  |L1.604|
;;;200        }
;;;201        else
;;;202        {
;;;203            // long packet need to sent by extend message format
;;;204            dest[MSGOFF_HDRTYPE]=0xCC;                                    // sync byte for extend command
;;;205            dest[MSGOFF_LEN]=((cnt>>8)&0xFF);             // set up message length
;;;206            dest[MSGOFF_LEN+1]=((cnt)&0xFF);              // set up message length
;;;207            dest[MSGOFF_LCS_EXT]=(0x100-((dest[MSGOFF_LEN]+dest[MSGOFF_LEN+1])&0xFF));
;;;208            chkSumExt=LongCS (&szOutMsg[MSGSIZ_HEADER_EXT], cnt);
;;;209            dest[MSGSIZ_HEADER_EXT+cnt]=(chkSumExt&0xFF);
;;;210            dest[MSGSIZ_HEADER_EXT+cnt+1]=((chkSumExt>>8)&0xFF);
;;;211            dest[MSGSIZ_HEADER_EXT+cnt+2]=0;                   // post amble
;;;212            return(cnt+MSGSIZ_HEADER_EXT+MSGSIZ_FOOTER_EXT);
;;;213        }
;;;214    }
00025c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.608|
000260  e3a000cc          MOV      r0,#0xcc              ;204
000264  e5c40002          STRB     r0,[r4,#2]            ;204
000268  e1a00805          LSL      r0,r5,#16             ;205
00026c  e1a00c20          LSR      r0,r0,#24             ;205
000270  e5c40003          STRB     r0,[r4,#3]            ;205
000274  e5c45004          STRB     r5,[r4,#4]            ;206
000278  e5d40003          LDRB     r0,[r4,#3]            ;207
00027c  e5d41004          LDRB     r1,[r4,#4]            ;207
000280  e0800001          ADD      r0,r0,r1              ;207
000284  e2600c01          RSB      r0,r0,#0x100          ;207
000288  e5c40005          STRB     r0,[r4,#5]            ;207
00028c  e1a01005          MOV      r1,r5                 ;208
000290  e59f0098          LDR      r0,|L1.816|
000294  ebfffffe          BL       LongCS
000298  e1a08000          MOV      r8,r0                 ;208
00029c  e2851006          ADD      r1,r5,#6              ;209
0002a0  e7c48001          STRB     r8,[r4,r1]            ;209
0002a4  e1a00428          LSR      r0,r8,#8              ;210
0002a8  e2851007          ADD      r1,r5,#7              ;210
0002ac  e7c40001          STRB     r0,[r4,r1]            ;210
0002b0  e3a00000          MOV      r0,#0                 ;211
0002b4  e2851008          ADD      r1,r5,#8              ;211
0002b8  e7c40001          STRB     r0,[r4,r1]            ;211
0002bc  e2850009          ADD      r0,r5,#9              ;212
0002c0  eaffffe5          B        |L1.604|
                  |L1.708|
                          DCD      g_lastgettime
                  |L1.712|
0002c8  41434b20          DCB      "ACK RECV",0
0002cc  52454356
0002d0  00      
0002d1  00                DCB      0
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L1.724|
                          DCD      g_AckExpired
                  |L1.728|
0002d8  44415441          DCB      "DATA START",0
0002dc  20535441
0002e0  525400  
0002e3  00                DCB      0
                  |L1.740|
                          DCD      0x0000015e
                  |L1.744|
                          DCD      g_RespExpired
                  |L1.748|
0002ec  4e414b20          DCB      "NAK SEND",0
0002f0  53454e44
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L1.760|
                          DCD      szOutMsg
                  |L1.764|
                          DCD      0x00001388
                  |L1.768|
                          DCD      g_inbuff
                  |L1.772|
                          DCD      g_len
                  |L1.776|
000308  4e6f2044          DCB      "No Data, send NAK\n",0
00030c  6174612c
000310  2073656e
000314  64204e41
000318  4b0a00  
00031b  00                DCB      0
                  |L1.796|
                          DCD      theRWL
                  |L1.800|
                          DCD      f_encrypt
                  |L1.804|
                          DCD      g_inbuff+0x1
                  |L1.808|
                          DCD      msgkey
                  |L1.812|
                          DCD      ||.constdata||
                  |L1.816|
                          DCD      szOutMsg+0x6
                          ENDP

                  PrepMessage PROC
;;;217    // return: length of whole message
;;;218    INT PrepMessage (BYTE *dest, CHAR *src)
000334  e92d47f0          PUSH     {r4-r10,lr}
;;;219    {
000338  e1a05000          MOV      r5,r0
00033c  e1a04001          MOV      r4,r1
;;;220    #define ishex(c)    (( ((c)>='0')&&((c)<='9')) || \
;;;221                          (((c)>='A')&&((c)<='F')) || \
;;;222                          (((c)>='a')&&((c)<='f')) )
;;;223    #define tohex(c)    ((toupper(c)>='A') ? (toupper(c)+10-'A') : (c-'0'))
;;;224    
;;;225        BYTE *p;
;;;226        INT c1, c2;
;;;227        INT cnt;
;;;228    
;;;229        dest[0]=0;        // preamble
000340  e3a00000          MOV      r0,#0
000344  e5c50000          STRB     r0,[r5,#0]
;;;230        dest[1]=0;        // sync
000348  e5c50001          STRB     r0,[r5,#1]
;;;231    
;;;232        p=&dest[MSGOFF_DATA];     // start of data
00034c  e2858005          ADD      r8,r5,#5
;;;233        cnt=0;                    // data count
000350  e3a07000          MOV      r7,#0
;;;234        c1=c2='\0';             // first and second characters of a hex number
000354  e1a09000          MOV      r9,r0
000358  e1a06000          MOV      r6,r0
;;;235    
;;;236        for(; *src!='\0'; src++)
00035c  ea000033          B        |L1.1072|
                  |L1.864|
;;;237        {
;;;238            if(ishex (*src))
000360  e5d40000          LDRB     r0,[r4,#0]
000364  e3500030          CMP      r0,#0x30
000368  ba000002          BLT      |L1.888|
00036c  e5d40000          LDRB     r0,[r4,#0]
000370  e3500039          CMP      r0,#0x39
000374  da00000b          BLE      |L1.936|
                  |L1.888|
000378  e5d40000          LDRB     r0,[r4,#0]
00037c  e3500041          CMP      r0,#0x41
000380  ba000002          BLT      |L1.912|
000384  e5d40000          LDRB     r0,[r4,#0]
000388  e3500046          CMP      r0,#0x46
00038c  da000005          BLE      |L1.936|
                  |L1.912|
000390  e5d40000          LDRB     r0,[r4,#0]
000394  e3500061          CMP      r0,#0x61
000398  ba000023          BLT      |L1.1068|
00039c  e5d40000          LDRB     r0,[r4,#0]
0003a0  e3500066          CMP      r0,#0x66
0003a4  ca000020          BGT      |L1.1068|
                  |L1.936|
;;;239            {
;;;240                if(c1==0)
0003a8  e3560000          CMP      r6,#0
0003ac  1a000001          BNE      |L1.952|
;;;241                    c1=*src;
0003b0  e5d46000          LDRB     r6,[r4,#0]
0003b4  ea00001c          B        |L1.1068|
                  |L1.952|
;;;242                else
;;;243                {
;;;244                    c2=*src;
0003b8  e5d49000          LDRB     r9,[r4,#0]
;;;245                    *p++=(tohex (c1)<<4)+tohex (c2);
0003bc  e1a00009          MOV      r0,r9
0003c0  ebfffffe          BL       toupper
0003c4  e3500041          CMP      r0,#0x41
0003c8  ba000003          BLT      |L1.988|
0003cc  e1a00009          MOV      r0,r9
0003d0  ebfffffe          BL       toupper
0003d4  e240a037          SUB      r10,r0,#0x37
0003d8  ea000000          B        |L1.992|
                  |L1.988|
0003dc  e249a030          SUB      r10,r9,#0x30
                  |L1.992|
0003e0  e1a00006          MOV      r0,r6
0003e4  ebfffffe          BL       toupper
0003e8  e3500041          CMP      r0,#0x41
0003ec  ba000003          BLT      |L1.1024|
0003f0  e1a00006          MOV      r0,r6
0003f4  ebfffffe          BL       toupper
0003f8  e2400037          SUB      r0,r0,#0x37
0003fc  ea000000          B        |L1.1028|
                  |L1.1024|
000400  e2460030          SUB      r0,r6,#0x30
                  |L1.1028|
000404  e08a0200          ADD      r0,r10,r0,LSL #4
000408  e4c80001          STRB     r0,[r8],#1
;;;246                    cnt++;
00040c  e2877001          ADD      r7,r7,#1
;;;247                    if(cnt>=MAXMSG)
000410  e59f0310          LDR      r0,|L1.1832|
000414  e1570000          CMP      r7,r0
000418  ba000000          BLT      |L1.1056|
;;;248                        break;
00041c  ea000006          B        |L1.1084|
                  |L1.1056|
;;;249                    c1=c2='\0';
000420  e3a00000          MOV      r0,#0
000424  e1a09000          MOV      r9,r0
000428  e1a06000          MOV      r6,r0
                  |L1.1068|
00042c  e2844001          ADD      r4,r4,#1              ;236
                  |L1.1072|
000430  e5d40000          LDRB     r0,[r4,#0]            ;236
000434  e3500000          CMP      r0,#0                 ;236
000438  1affffc8          BNE      |L1.864|
                  |L1.1084|
00043c  e1a00000          MOV      r0,r0                 ;248
;;;250                }
;;;251            }
;;;252        }
;;;253    
;;;254        return MakeMessageHeader (dest, cnt);
000440  e1a01007          MOV      r1,r7
000444  e1a00005          MOV      r0,r5
000448  ebfffffe          BL       MakeMessageHeader
;;;255    }
00044c  e8bd87f0          POP      {r4-r10,pc}
;;;256    
                          ENDP

                  MakeMessage PROC
;;;257    INT MakeMessage (BYTE *dest, INT cnt)
000450  e92d4070          PUSH     {r4-r6,lr}
;;;258    {
000454  e1a04000          MOV      r4,r0
000458  e1a05001          MOV      r5,r1
;;;259        return MakeMessageHeader (dest, cnt);
00045c  e1a01005          MOV      r1,r5
000460  e1a00004          MOV      r0,r4
000464  ebfffffe          BL       MakeMessageHeader
;;;260    }
000468  e8bd8070          POP      {r4-r6,pc}
;;;261    
                          ENDP

                  ChangeKey PROC
;;;270    static BYTE KbKey[] = {0xB7, 0x7D, 0x72, 0x19, 0x04, 0xB5, 0x7D, 0x91};
;;;271    void ChangeKey(BYTE KeyType)
00046c  e92d4010          PUSH     {r4,lr}
;;;272    {    
000470  e24dd020          SUB      sp,sp,#0x20
000474  e1a04000          MOV      r4,r0
;;;273        BYTE ProKaKey[] = {0x18, 0x22, 0xe0, 0xdc, 0xb7, 0x52, 0x94, 0xad};
000478  e28f0fab          ADR      r0,|L1.1836|
00047c  e8900003          LDM      r0,{r0,r1}
000480  e1cd01f8          STRD     r0,r1,[sp,#0x18]
;;;274        BYTE ProKbKey[] = {0x85, 0x3e, 0x69, 0x15, 0xf8, 0x46, 0x6a, 0x04};
000484  e28f1faa          ADR      r1,|L1.1844|
000488  e8910003          LDM      r1,{r0,r1}
00048c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;275        
;;;276        BYTE TestKaKey[] = {0x16, 0xA3, 0x29, 0xC7, 0x42, 0xF1, 0x06, 0x39};
000490  e28f1fa9          ADR      r1,|L1.1852|
000494  e8910003          LDM      r1,{r0,r1}
000498  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;277        BYTE TestKbKey[] = {0xB7, 0x7D, 0x72, 0x19, 0x04, 0xB5, 0x7D, 0x91};
00049c  e28f1e2a          ADR      r1,|L1.1860|
0004a0  e8910003          LDM      r1,{r0,r1}
0004a4  e1cd00f0          STRD     r0,r1,[sp,#0]
;;;278        
;;;279        if(KeyType == OCTOPUS_USE_PRODUCTION_KEY)
0004a8  e3540001          CMP      r4,#1
0004ac  1a000008          BNE      |L1.1236|
;;;280        {
;;;281            memcpy(KaKey,ProKaKey,sizeof(ProKaKey));
0004b0  e3a02008          MOV      r2,#8
0004b4  e28d1018          ADD      r1,sp,#0x18
0004b8  e59f028c          LDR      r0,|L1.1868|
0004bc  ebfffffe          BL       __aeabi_memcpy
;;;282            memcpy(KbKey,ProKbKey,sizeof(ProKbKey));
0004c0  e3a02008          MOV      r2,#8
0004c4  e28d1010          ADD      r1,sp,#0x10
0004c8  e59f0280          LDR      r0,|L1.1872|
0004cc  ebfffffe          BL       __aeabi_memcpy
0004d0  ea000009          B        |L1.1276|
                  |L1.1236|
;;;283        }
;;;284        else if(KeyType == OCTOPUS_USE_TEST_KEY)
0004d4  e3540000          CMP      r4,#0
0004d8  1a000007          BNE      |L1.1276|
;;;285        {
;;;286            memcpy(KaKey,TestKaKey,sizeof(TestKaKey));
0004dc  e3a02008          MOV      r2,#8
0004e0  e28d1008          ADD      r1,sp,#8
0004e4  e59f0260          LDR      r0,|L1.1868|
0004e8  ebfffffe          BL       __aeabi_memcpy
;;;287            memcpy(KbKey,TestKbKey,sizeof(TestKbKey));
0004ec  e3a02008          MOV      r2,#8
0004f0  e1a0100d          MOV      r1,sp
0004f4  e59f0254          LDR      r0,|L1.1872|
0004f8  ebfffffe          BL       __aeabi_memcpy
                  |L1.1276|
;;;288        }
;;;289    }
0004fc  e28dd020          ADD      sp,sp,#0x20
000500  e8bd8010          POP      {r4,pc}
;;;290    
                          ENDP

                  GetKey PROC
;;;291    INT GetKey (BYTE* outkey)
000504  e92d4010          PUSH     {r4,lr}
;;;292    {
000508  e1a04000          MOV      r4,r0
;;;293        /*
;;;294        The Ka and Kb value here are only for demonstration purpose
;;;295        key value will be delivered in seperate channel on demand
;;;296        key storage should be encrypted and should not disclose to third parties
;;;297        Please refer to section 2.11.2 and 2.13.1.2 in New Parking Meter - Integration Specification to SIs
;;;298        for key storage requirement and encryption/decryption algorithm
;;;299        */
;;;300    #if(1)
;;;301        //?- Version = 0xFB
;;;302        //?- Ka = 0x16, 0xA3, 0x29, 0xC7, 0x42, 0xF1, 0x06, 0x39
;;;303        //?- Kb = 0xB7, 0x7D, 0x72, 0x19, 0x04, 0xB5, 0x7D, 0x91
;;;304        //Ka
;;;305        memcpy (outkey, KaKey, sizeof(KaKey));
00050c  e3a02008          MOV      r2,#8
000510  e59f1234          LDR      r1,|L1.1868|
000514  e1a00004          MOV      r0,r4
000518  ebfffffe          BL       __aeabi_memcpy
;;;306        //Kb
;;;307        memcpy (outkey+8, KbKey, sizeof(KbKey));
00051c  e3a02008          MOV      r2,#8
000520  e59f1228          LDR      r1,|L1.1872|
000524  e2840008          ADD      r0,r4,#8
000528  ebfffffe          BL       __aeabi_memcpy
;;;308    #else
;;;309        //Ka
;;;310        memcpy (outkey, 0, 8);
;;;311        //Kb
;;;312        memcpy (&outkey[8], 0xFF, 8);
;;;313    #endif
;;;314        return 0;
00052c  e3a00000          MOV      r0,#0
;;;315    }
000530  e8bd8010          POP      {r4,pc}
;;;316    //====================================================================
                          ENDP

                  sendACK PROC
;;;319    // send block to CSRW
;;;320    void sendACK ()
000534  e92d4010          PUSH     {r4,lr}
;;;321    {
;;;322        memset (szOutMsg, 0, 6);
000538  e3a01006          MOV      r1,#6
00053c  e51f024c          LDR      r0,|L1.760|
000540  ebfffffe          BL       __aeabi_memclr
;;;323        szOutMsg[2]=szOutMsg[4]=0xFF;
000544  e3a000ff          MOV      r0,#0xff
000548  e51f1258          LDR      r1,|L1.760|
00054c  e5c10004          STRB     r0,[r1,#4]  ; szOutMsg
000550  e5c10002          STRB     r0,[r1,#2]  ; szOutMsg
;;;324        com_out (szOutMsg, 6, ACK_DATA_TYPE);
000554  e3a02002          MOV      r2,#2
000558  e3a01006          MOV      r1,#6
00055c  e51f026c          LDR      r0,|L1.760|
000560  ebfffffe          BL       com_out
;;;325    }
000564  e8bd8010          POP      {r4,pc}
;;;326    
                          ENDP

                  sendblock PROC
;;;337    // send block to CSRW
;;;338    void sendblock (INT count, BYTE *block, INT encrypt)
000568  e92d47f0          PUSH     {r4-r10,lr}
;;;339    {
00056c  e1a04000          MOV      r4,r0
000570  e1a07001          MOV      r7,r1
000574  e1a08002          MOV      r8,r2
;;;340        INT i, cs=0;
000578  e3a09000          MOV      r9,#0
;;;341        INT en_cnt;             // count those for encryption
;;;342        USHORT dataCS=0;
00057c  e3a0a000          MOV      r10,#0
;;;343    
;;;344        memset (szOutMsg, 0, sizeof (szOutMsg));
000580  e51f128c          LDR      r1,|L1.764|
000584  e51f0294          LDR      r0,|L1.760|
000588  ebfffffe          BL       __aeabi_memclr
;;;345        memcpy (szOutMsg, block, count);
00058c  e1a02004          MOV      r2,r4
000590  e1a01007          MOV      r1,r7
000594  e51f02a4          LDR      r0,|L1.760|
000598  ebfffffe          BL       __aeabi_memcpy
;;;346        block=szOutMsg;
00059c  e51f72ac          LDR      r7,|L1.760|
;;;347    
;;;348        /* if encryption, start encrypting after command code */
;;;349        if(encrypt && f_encrypt)
0005a0  e3580000          CMP      r8,#0
0005a4  0a000020          BEQ      |L1.1580|
0005a8  e51f0290          LDR      r0,|L1.800|
0005ac  e5900000          LDR      r0,[r0,#0]  ; f_encrypt
0005b0  e3500000          CMP      r0,#0
0005b4  0a00001c          BEQ      |L1.1580|
;;;350        {
;;;351            /* length of data to encrypt */
;;;352            // handle extend command message format
;;;353            if(szOutMsg[MSGOFF_HDRTYPE]==0xFF)
0005b8  e2870000          ADD      r0,r7,#0
0005bc  e5d00002          LDRB     r0,[r0,#2]  ; szOutMsg
0005c0  e35000ff          CMP      r0,#0xff
0005c4  1a00000c          BNE      |L1.1532|
;;;354            {
;;;355                en_cnt=count-MSGSIZ_HEADER-MSGSIZ_FOOTER-1;
0005c8  e2445008          SUB      r5,r4,#8
;;;356                en_cnt=((en_cnt+7)/8)*8;
0005cc  e2850007          ADD      r0,r5,#7
0005d0  e1a01fc0          ASR      r1,r0,#31
0005d4  e0801ea1          ADD      r1,r0,r1,LSR #29
0005d8  e1a011c1          ASR      r1,r1,#3
0005dc  e1a05181          LSL      r5,r1,#3
;;;357    
;;;358                CscryptEncryptBlock (msgkey, &block[MSGOFF_DATA+1], en_cnt, 1);
0005e0  e3a03001          MOV      r3,#1
0005e4  e1a02005          MOV      r2,r5
0005e8  e2871006          ADD      r1,r7,#6
0005ec  e51f02cc          LDR      r0,|L1.808|
0005f0  ebfffffe          BL       CscryptEncryptBlock
;;;359                count=en_cnt+MSGSIZ_HEADER+MSGSIZ_FOOTER+1;
0005f4  e2854008          ADD      r4,r5,#8
0005f8  ea00000b          B        |L1.1580|
                  |L1.1532|
;;;360            }
;;;361            else
;;;362            {
;;;363                en_cnt=count-MSGSIZ_HEADER_EXT-MSGSIZ_FOOTER_EXT-1;
0005fc  e244500a          SUB      r5,r4,#0xa
;;;364                en_cnt=((en_cnt+7)/8)*8;
000600  e2850007          ADD      r0,r5,#7
000604  e1a01fc0          ASR      r1,r0,#31
000608  e0801ea1          ADD      r1,r0,r1,LSR #29
00060c  e1a011c1          ASR      r1,r1,#3
000610  e1a05181          LSL      r5,r1,#3
;;;365    
;;;366                CscryptEncryptBlock (msgkey, &block[MSGOFF_DATA_EXT+1], en_cnt, 1);
000614  e3a03001          MOV      r3,#1
000618  e1a02005          MOV      r2,r5
00061c  e2871007          ADD      r1,r7,#7
000620  e51f0300          LDR      r0,|L1.808|
000624  ebfffffe          BL       CscryptEncryptBlock
;;;367                count=en_cnt+MSGSIZ_HEADER_EXT+MSGSIZ_FOOTER_EXT+1;
000628  e285400a          ADD      r4,r5,#0xa
                  |L1.1580|
;;;368            }
;;;369        }
;;;370    
;;;371        /* calculate length checksum in szOutMsg[3] */
;;;372        // handle extend command message format
;;;373        if(szOutMsg[MSGOFF_HDRTYPE]==0xFF)
00062c  e51f033c          LDR      r0,|L1.760|
000630  e5d00002          LDRB     r0,[r0,#2]  ; szOutMsg
000634  e35000ff          CMP      r0,#0xff
000638  1a000007          BNE      |L1.1628|
;;;374        {
;;;375            // normal message format
;;;376            szOutMsg[MSGOFF_LEN]=count-MSGSIZ_HEADER-MSGSIZ_FOOTER;
00063c  e2440007          SUB      r0,r4,#7
000640  e51f1350          LDR      r1,|L1.760|
000644  e5c10003          STRB     r0,[r1,#3]  ; szOutMsg
;;;377            szOutMsg[MSGOFF_LCS]=0x100-szOutMsg[MSGOFF_LEN];
000648  e2810000          ADD      r0,r1,#0
00064c  e5d00003          LDRB     r0,[r0,#3]  ; szOutMsg
000650  e2600c01          RSB      r0,r0,#0x100
000654  e5c10004          STRB     r0,[r1,#4]  ; szOutMsg
000658  ea00000d          B        |L1.1684|
                  |L1.1628|
;;;378        }
;;;379        else
;;;380        {
;;;381            // new extend message format
;;;382            szOutMsg[MSGOFF_LEN]=(((count-MSGSIZ_HEADER_EXT-MSGSIZ_FOOTER_EXT)>>8)&0xFF);
00065c  e2440009          SUB      r0,r4,#9
000660  e1a00800          LSL      r0,r0,#16
000664  e1a00c20          LSR      r0,r0,#24
000668  e51f1378          LDR      r1,|L1.760|
00066c  e5c10003          STRB     r0,[r1,#3]  ; szOutMsg
;;;383            szOutMsg[MSGOFF_LEN+1]=((count-MSGSIZ_HEADER_EXT-MSGSIZ_FOOTER_EXT)&0xFF);
000670  e2440009          SUB      r0,r4,#9
000674  e5c10004          STRB     r0,[r1,#4]  ; szOutMsg
;;;384            szOutMsg[MSGOFF_LCS_EXT]=(0x100-((szOutMsg[MSGOFF_LEN]+szOutMsg[MSGOFF_LEN+1])&0xFF));
000678  e2810000          ADD      r0,r1,#0
00067c  e5d00003          LDRB     r0,[r0,#3]  ; szOutMsg
000680  e5d11004          LDRB     r1,[r1,#4]  ; szOutMsg
000684  e0800001          ADD      r0,r0,r1
000688  e2600c01          RSB      r0,r0,#0x100
00068c  e51f139c          LDR      r1,|L1.760|
000690  e5c10005          STRB     r0,[r1,#5]  ; szOutMsg
                  |L1.1684|
;;;385        }
;;;386    
;;;387        // handle extend command message format
;;;388        if(szOutMsg[MSGOFF_HDRTYPE]==0xFF)
000694  e51f03a4          LDR      r0,|L1.760|
000698  e5d00002          LDRB     r0,[r0,#2]  ; szOutMsg
00069c  e35000ff          CMP      r0,#0xff
0006a0  1a00000d          BNE      |L1.1756|
;;;389        {
;;;390            // normal message format
;;;391            for(i=MSGOFF_DATA; i<count-MSGSIZ_FOOTER; i++)
0006a4  e3a06005          MOV      r6,#5
0006a8  ea000003          B        |L1.1724|
                  |L1.1708|
;;;392                cs+=szOutMsg[i];
0006ac  e51f03bc          LDR      r0,|L1.760|
0006b0  e7d00006          LDRB     r0,[r0,r6]
0006b4  e0899000          ADD      r9,r9,r0
0006b8  e2866001          ADD      r6,r6,#1              ;391
                  |L1.1724|
0006bc  e2440002          SUB      r0,r4,#2              ;391
0006c0  e1500006          CMP      r0,r6                 ;391
0006c4  cafffff8          BGT      |L1.1708|
;;;393    
;;;394            szOutMsg[count-MSGOFFEND_DCS]=0x100-(cs&0xff);
0006c8  e2690c01          RSB      r0,r9,#0x100
0006cc  e2441002          SUB      r1,r4,#2
0006d0  e51f23e0          LDR      r2,|L1.760|
0006d4  e7c20001          STRB     r0,[r2,r1]
0006d8  ea000009          B        |L1.1796|
                  |L1.1756|
;;;395        }
;;;396        else
;;;397        {
;;;398            // new extend message format
;;;399            dataCS=LongCS (&szOutMsg[MSGSIZ_HEADER_EXT], (count-MSGSIZ_HEADER_EXT-MSGSIZ_FOOTER_EXT));
0006dc  e2441009          SUB      r1,r4,#9
0006e0  e51f03b8          LDR      r0,|L1.816|
0006e4  ebfffffe          BL       LongCS
0006e8  e1a0a000          MOV      r10,r0
;;;400            szOutMsg[count-3]=((dataCS>>8)&0xFF);
0006ec  e1a0044a          ASR      r0,r10,#8
0006f0  e2441003          SUB      r1,r4,#3
0006f4  e51f2404          LDR      r2,|L1.760|
0006f8  e7c20001          STRB     r0,[r2,r1]
;;;401            szOutMsg[count-2]=((dataCS)&0xFF);
0006fc  e2441002          SUB      r1,r4,#2
000700  e7c2a001          STRB     r10,[r2,r1]
                  |L1.1796|
;;;402        }
;;;403    
;;;404        szOutMsg[count-1]=0;             // post-amble
000704  e3a00000          MOV      r0,#0
000708  e2441001          SUB      r1,r4,#1
00070c  e51f241c          LDR      r2,|L1.760|
000710  e7c20001          STRB     r0,[r2,r1]
;;;405    
;;;406        //do not encrypt command if session has not established
;;;407        /*
;;;408        if(encrypt && f_encrypt)
;;;409            printf ("Enc Cmd Len = %d bytes\n", en_cnt+1);  //command code will not encrypt
;;;410        else
;;;411            printf ("No encryption\n");
;;;412    */
;;;413        com_out (szOutMsg, count, CMD_DATA_TYPE);
000714  e3a02001          MOV      r2,#1
000718  e1a01004          MOV      r1,r4
00071c  e51f042c          LDR      r0,|L1.760|
000720  ebfffffe          BL       com_out
;;;414    }
000724  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1832|
                          DCD      0x0000135c
                  |L1.1836|
00072c  1822e0dc          DCB      24,"""",224,220,183,"R",148,173
000730  b75294ad
                  |L1.1844|
000734  853e6915          DCB      133,">i",21,248,"Fj",4
000738  f8466a04
                  |L1.1852|
00073c  16a329c7          DCB      22,163,")",199,"B",241,6,"9"
000740  42f10639
                  |L1.1860|
000744  b77d7219          DCB      183,"}r",25,4,181,"}",145
000748  04b57d91
                  |L1.1868|
                          DCD      KaKey
                  |L1.1872|
                          DCD      KbKey
                          ENDP

                  CmdPollDeduct PROC
;;;418    /*============================================================================*/
;;;419    void CmdPollDeduct (BYTE bTimeout, INT TxnAmt, const BYTE *ai, BYTE bAlertMsgFmt)
000754  e92d47f0          PUSH     {r4-r10,lr}
;;;420    {
000758  e24ddd9d          SUB      sp,sp,#0x2740
00075c  e1a06000          MOV      r6,r0
000760  e1a05001          MOV      r5,r1
000764  e1a07002          MOV      r7,r2
000768  e1a08003          MOV      r8,r3
;;;421        CHAR szCmdData[MAXSTR];                         // detect message
;;;422        BYTE szCmdMsg[MAXSTR];          // actual detect message to send
;;;423        INT     iCmdMsgLen;
;;;424        ULONG TxnTime;
;;;425    
;;;426        strcpy (szCmdData, "70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"); //17 bytes
00076c  e28f1fb5          ADR      r1,|L1.2632|
000770  e28d0a01          ADD      r0,sp,#0x1000
000774  e2800fee          ADD      r0,r0,#0x3b8
000778  ebfffffe          BL       strcpy
;;;427    
;;;428        iCmdMsgLen=PrepMessage (szCmdMsg, szCmdData);
00077c  e28d1a01          ADD      r1,sp,#0x1000
000780  e2811fee          ADD      r1,r1,#0x3b8
000784  e28d0030          ADD      r0,sp,#0x30
000788  ebfffffe          BL       PrepMessage
00078c  e1a09000          MOV      r9,r0
;;;429        TxnTime=GetRTC2000 ();
000790  ebfffffe          BL       GetRTC2000
000794  e1a04000          MOV      r4,r0
;;;430        szCmdMsg[7]=bTimeout;
000798  e5cd6037          STRB     r6,[sp,#0x37]
;;;431        szCmdMsg[8]=(TxnAmt>>8)&0xff;
00079c  e1a00805          LSL      r0,r5,#16
0007a0  e1a01c20          LSR      r1,r0,#24
0007a4  e5cd1038          STRB     r1,[sp,#0x38]
;;;432        szCmdMsg[9]=(TxnAmt)&0xff;
0007a8  e5cd5039          STRB     r5,[sp,#0x39]
;;;433        szCmdMsg[10]=(TxnTime>>24)&0xff;
0007ac  e1a01c24          LSR      r1,r4,#24
0007b0  e5cd103a          STRB     r1,[sp,#0x3a]
;;;434        szCmdMsg[11]=(TxnTime>>16)&0xff;
0007b4  e1a00404          LSL      r0,r4,#8
0007b8  e1a01c20          LSR      r1,r0,#24
0007bc  e5cd103b          STRB     r1,[sp,#0x3b]
;;;435        szCmdMsg[12]=(TxnTime>>8)&0xff;
0007c0  e1a00804          LSL      r0,r4,#16
0007c4  e1a01c20          LSR      r1,r0,#24
0007c8  e5cd103c          STRB     r1,[sp,#0x3c]
;;;436        szCmdMsg[13]=TxnTime&0xff;
0007cc  e5cd403d          STRB     r4,[sp,#0x3d]
;;;437        memcpy (&szCmdMsg[14], ai, 7);       /* Block Info, Additional Info */
0007d0  e3a02007          MOV      r2,#7
0007d4  e1a01007          MOV      r1,r7
0007d8  e28d003e          ADD      r0,sp,#0x3e
0007dc  ebfffffe          BL       __aeabi_memcpy
;;;438        szCmdMsg[21]=bAlertMsgFmt;
0007e0  e5cd8045          STRB     r8,[sp,#0x45]
;;;439    
;;;440        DbgCmdDump (szCmdMsg, iCmdMsgLen-MSGSIZ_FOOTER);//not print the message footer
0007e4  e2491002          SUB      r1,r9,#2
0007e8  e28d0030          ADD      r0,sp,#0x30
0007ec  ebfffffe          BL       DbgCmdDump
;;;441        sendblock (iCmdMsgLen, szCmdMsg, 1);
0007f0  e3a02001          MOV      r2,#1
0007f4  e28d1030          ADD      r1,sp,#0x30
0007f8  e1a00009          MOV      r0,r9
0007fc  ebfffffe          BL       sendblock
;;;442    
;;;443        READBLOCK (1);
000800  e3a00001          MOV      r0,#1
000804  ebfffffe          BL       READBLOCK
;;;444        DbgRspDump (g_inbuff, g_len);
000808  e51f050c          LDR      r0,|L1.772|
00080c  e5901000          LDR      r1,[r0,#0]  ; g_len
000810  e51f0518          LDR      r0,|L1.768|
000814  ebfffffe          BL       DbgRspDump
;;;445    }
000818  e28ddd9d          ADD      sp,sp,#0x2740
00081c  e8bd87f0          POP      {r4-r10,pc}
;;;446    
                          ENDP

                  CmdWriteID PROC
;;;447    void CmdWriteID (UINT ID)
000820  e92d4010          PUSH     {r4,lr}
;;;448    {
000824  e1a04000          MOV      r4,r0
;;;449        INITMSG ();
000828  e59f024c          LDR      r0,|L1.2684|
00082c  e59f124c          LDR      r1,|L1.2688|
000830  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000834  e3a00000          MOV      r0,#0
000838  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00083c  e5c10000          STRB     r0,[r1,#0]
000840  e59f0238          LDR      r0,|L1.2688|
000844  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000848  e2800001          ADD      r0,r0,#1
00084c  e59f122c          LDR      r1,|L1.2688|
000850  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000854  e3a00000          MOV      r0,#0
000858  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00085c  e5c10000          STRB     r0,[r1,#0]
000860  e59f0218          LDR      r0,|L1.2688|
000864  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000868  e2800001          ADD      r0,r0,#1
00086c  e59f120c          LDR      r1,|L1.2688|
000870  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000874  e3a000ff          MOV      r0,#0xff
000878  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00087c  e5c10000          STRB     r0,[r1,#0]
000880  e59f01f8          LDR      r0,|L1.2688|
000884  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000888  e2800001          ADD      r0,r0,#1
00088c  e59f11ec          LDR      r1,|L1.2688|
000890  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000894  e3a00000          MOV      r0,#0
000898  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00089c  e5c10000          STRB     r0,[r1,#0]
0008a0  e59f01d8          LDR      r0,|L1.2688|
0008a4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0008a8  e2800001          ADD      r0,r0,#1
0008ac  e59f11cc          LDR      r1,|L1.2688|
0008b0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
0008b4  e3a00000          MOV      r0,#0
0008b8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0008bc  e5c10000          STRB     r0,[r1,#0]
0008c0  e59f01b8          LDR      r0,|L1.2688|
0008c4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0008c8  e2800001          ADD      r0,r0,#1
0008cc  e59f11ac          LDR      r1,|L1.2688|
0008d0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;450        PUTBYTE (CSCMD_WRITEID);
0008d4  e3a00036          MOV      r0,#0x36
0008d8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0008dc  e5c10000          STRB     r0,[r1,#0]
0008e0  e59f0198          LDR      r0,|L1.2688|
0008e4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0008e8  e2800001          ADD      r0,r0,#1
0008ec  e59f118c          LDR      r1,|L1.2688|
0008f0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;451        PUTBYTE (0);
0008f4  e3a00000          MOV      r0,#0
0008f8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0008fc  e5c10000          STRB     r0,[r1,#0]
000900  e59f0178          LDR      r0,|L1.2688|
000904  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000908  e2800001          ADD      r0,r0,#1
00090c  e59f116c          LDR      r1,|L1.2688|
000910  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;452        PUTLONG (ID);
000914  e1a00c24          LSR      r0,r4,#24
000918  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00091c  e5c10000          STRB     r0,[r1,#0]
000920  e59f0158          LDR      r0,|L1.2688|
000924  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000928  e2800001          ADD      r0,r0,#1
00092c  e59f114c          LDR      r1,|L1.2688|
000930  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000934  e1a00404          LSL      r0,r4,#8
000938  e1a00c20          LSR      r0,r0,#24
00093c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000940  e5c10000          STRB     r0,[r1,#0]
000944  e59f0134          LDR      r0,|L1.2688|
000948  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00094c  e2800001          ADD      r0,r0,#1
000950  e59f1128          LDR      r1,|L1.2688|
000954  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000958  e1a00804          LSL      r0,r4,#16
00095c  e1a00c20          LSR      r0,r0,#24
000960  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000964  e5c10000          STRB     r0,[r1,#0]
000968  e59f0110          LDR      r0,|L1.2688|
00096c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000970  e2800001          ADD      r0,r0,#1
000974  e59f1104          LDR      r1,|L1.2688|
000978  e5810000          STR      r0,[r1,#0]  ; g_pmsg
00097c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000980  e5c14000          STRB     r4,[r1,#0]
000984  e59f00f4          LDR      r0,|L1.2688|
000988  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00098c  e2800001          ADD      r0,r0,#1
000990  e59f10e8          LDR      r1,|L1.2688|
000994  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;453        DbgCmdDump (g_msg, (g_pmsg-g_msg));
000998  e2810000          ADD      r0,r1,#0
00099c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0009a0  e59f20d4          LDR      r2,|L1.2684|
0009a4  e0401002          SUB      r1,r0,r2
0009a8  e2820000          ADD      r0,r2,#0
0009ac  ebfffffe          BL       DbgCmdDump
;;;454        SENDBLOCK (1);
0009b0  e3a00000          MOV      r0,#0
0009b4  e59f10c4          LDR      r1,|L1.2688|
0009b8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0009bc  e5c10000          STRB     r0,[r1,#0]
0009c0  e59f00b8          LDR      r0,|L1.2688|
0009c4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0009c8  e2800001          ADD      r0,r0,#1
0009cc  e59f10ac          LDR      r1,|L1.2688|
0009d0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
0009d4  e3a00000          MOV      r0,#0
0009d8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0009dc  e5c10000          STRB     r0,[r1,#0]
0009e0  e59f0098          LDR      r0,|L1.2688|
0009e4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0009e8  e2800001          ADD      r0,r0,#1
0009ec  e59f108c          LDR      r1,|L1.2688|
0009f0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
0009f4  e51f16dc          LDR      r1,|L1.800|
0009f8  e5911000          LDR      r1,[r1,#0]  ; f_encrypt
0009fc  e3510000          CMP      r1,#0
000a00  0a000001          BEQ      |L1.2572|
000a04  e3a01001          MOV      r1,#1
000a08  ea000000          B        |L1.2576|
                  |L1.2572|
000a0c  e3a01000          MOV      r1,#0
                  |L1.2576|
000a10  e1a02001          MOV      r2,r1
000a14  e59f1064          LDR      r1,|L1.2688|
000a18  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000a1c  e59f3058          LDR      r3,|L1.2684|
000a20  e0410003          SUB      r0,r1,r3
000a24  e2831000          ADD      r1,r3,#0
000a28  ebfffffe          BL       sendblock
;;;455        READBLOCK (1);
000a2c  e3a00001          MOV      r0,#1
000a30  ebfffffe          BL       READBLOCK
;;;456        DbgRspDump (g_inbuff, g_len);
000a34  e51f0738          LDR      r0,|L1.772|
000a38  e5901000          LDR      r1,[r0,#0]  ; g_len
000a3c  e51f0744          LDR      r0,|L1.768|
000a40  ebfffffe          BL       DbgRspDump
;;;457    }
000a44  e8bd8010          POP      {r4,pc}
                  |L1.2632|
000a48  37302030          DCB      "70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",0
000a4c  30203030
000a50  20303020
000a54  30302030
000a58  30203030
000a5c  20303020
000a60  30302030
000a64  30203030
000a68  20303020
000a6c  30302030
000a70  30203030
000a74  20303020
000a78  303000  
000a7b  00                DCB      0
                  |L1.2684|
                          DCD      g_msg
                  |L1.2688|
                          DCD      g_pmsg
                          ENDP

                  CmdAntennaOff PROC
;;;459    // Antenna OFF
;;;460    void CmdAntennaOff (void)
000a84  e92d4010          PUSH     {r4,lr}
;;;461    {
;;;462        INITMSG ();
000a88  e51f0014          LDR      r0,|L1.2684|
000a8c  e51f1014          LDR      r1,|L1.2688|
000a90  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000a94  e3a00000          MOV      r0,#0
000a98  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000a9c  e5c10000          STRB     r0,[r1,#0]
000aa0  e51f0028          LDR      r0,|L1.2688|
000aa4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000aa8  e2800001          ADD      r0,r0,#1
000aac  e51f1034          LDR      r1,|L1.2688|
000ab0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000ab4  e3a00000          MOV      r0,#0
000ab8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000abc  e5c10000          STRB     r0,[r1,#0]
000ac0  e51f0048          LDR      r0,|L1.2688|
000ac4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000ac8  e2800001          ADD      r0,r0,#1
000acc  e51f1054          LDR      r1,|L1.2688|
000ad0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000ad4  e3a000ff          MOV      r0,#0xff
000ad8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000adc  e5c10000          STRB     r0,[r1,#0]
000ae0  e51f0068          LDR      r0,|L1.2688|
000ae4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000ae8  e2800001          ADD      r0,r0,#1
000aec  e51f1074          LDR      r1,|L1.2688|
000af0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000af4  e3a00000          MOV      r0,#0
000af8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000afc  e5c10000          STRB     r0,[r1,#0]
000b00  e51f0088          LDR      r0,|L1.2688|
000b04  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000b08  e2800001          ADD      r0,r0,#1
000b0c  e51f1094          LDR      r1,|L1.2688|
000b10  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000b14  e3a00000          MOV      r0,#0
000b18  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000b1c  e5c10000          STRB     r0,[r1,#0]
000b20  e51f00a8          LDR      r0,|L1.2688|
000b24  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000b28  e2800001          ADD      r0,r0,#1
000b2c  e51f10b4          LDR      r1,|L1.2688|
000b30  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;463        PUTBYTE (CSCMD_ANTENNA_CTRL);
000b34  e3a0006e          MOV      r0,#0x6e
000b38  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000b3c  e5c10000          STRB     r0,[r1,#0]
000b40  e51f00c8          LDR      r0,|L1.2688|
000b44  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000b48  e2800001          ADD      r0,r0,#1
000b4c  e51f10d4          LDR      r1,|L1.2688|
000b50  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;464        PUTBYTE (0);
000b54  e3a00000          MOV      r0,#0
000b58  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000b5c  e5c10000          STRB     r0,[r1,#0]
000b60  e51f00e8          LDR      r0,|L1.2688|
000b64  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000b68  e2800001          ADD      r0,r0,#1
000b6c  e51f10f4          LDR      r1,|L1.2688|
000b70  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;465        DbgCmdDump (g_msg, (g_pmsg-g_msg));
000b74  e2810000          ADD      r0,r1,#0
000b78  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000b7c  e51f2108          LDR      r2,|L1.2684|
000b80  e0401002          SUB      r1,r0,r2
000b84  e2820000          ADD      r0,r2,#0
000b88  ebfffffe          BL       DbgCmdDump
;;;466    
;;;467        SENDBLOCK (1);
000b8c  e3a00000          MOV      r0,#0
000b90  e51f1118          LDR      r1,|L1.2688|
000b94  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000b98  e5c10000          STRB     r0,[r1,#0]
000b9c  e51f0124          LDR      r0,|L1.2688|
000ba0  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000ba4  e2800001          ADD      r0,r0,#1
000ba8  e51f1130          LDR      r1,|L1.2688|
000bac  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000bb0  e3a00000          MOV      r0,#0
000bb4  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000bb8  e5c10000          STRB     r0,[r1,#0]
000bbc  e51f0144          LDR      r0,|L1.2688|
000bc0  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000bc4  e2800001          ADD      r0,r0,#1
000bc8  e51f1150          LDR      r1,|L1.2688|
000bcc  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000bd0  e51f18b8          LDR      r1,|L1.800|
000bd4  e5911000          LDR      r1,[r1,#0]  ; f_encrypt
000bd8  e3510000          CMP      r1,#0
000bdc  0a000001          BEQ      |L1.3048|
000be0  e3a01001          MOV      r1,#1
000be4  ea000000          B        |L1.3052|
                  |L1.3048|
000be8  e3a01000          MOV      r1,#0
                  |L1.3052|
000bec  e1a02001          MOV      r2,r1
000bf0  e51f1178          LDR      r1,|L1.2688|
000bf4  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000bf8  e51f3184          LDR      r3,|L1.2684|
000bfc  e0410003          SUB      r0,r1,r3
000c00  e2831000          ADD      r1,r3,#0
000c04  ebfffffe          BL       sendblock
;;;468        READBLOCK (1);
000c08  e3a00001          MOV      r0,#1
000c0c  ebfffffe          BL       READBLOCK
;;;469        DbgRspDump (g_inbuff, g_len);
000c10  e51f0914          LDR      r0,|L1.772|
000c14  e5901000          LDR      r1,[r0,#0]  ; g_len
000c18  e51f0920          LDR      r0,|L1.768|
000c1c  ebfffffe          BL       DbgRspDump
;;;470    }
000c20  e8bd8010          POP      {r4,pc}
;;;471    
                          ENDP

                  CmdEndSession PROC
;;;472    // End Session
;;;473    void CmdEndSession (void)
000c24  e92d4010          PUSH     {r4,lr}
;;;474    {
;;;475        INITMSG ();
000c28  e51f01b4          LDR      r0,|L1.2684|
000c2c  e51f11b4          LDR      r1,|L1.2688|
000c30  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000c34  e3a00000          MOV      r0,#0
000c38  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000c3c  e5c10000          STRB     r0,[r1,#0]
000c40  e51f01c8          LDR      r0,|L1.2688|
000c44  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000c48  e2800001          ADD      r0,r0,#1
000c4c  e51f11d4          LDR      r1,|L1.2688|
000c50  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000c54  e3a00000          MOV      r0,#0
000c58  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000c5c  e5c10000          STRB     r0,[r1,#0]
000c60  e51f01e8          LDR      r0,|L1.2688|
000c64  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000c68  e2800001          ADD      r0,r0,#1
000c6c  e51f11f4          LDR      r1,|L1.2688|
000c70  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000c74  e3a000ff          MOV      r0,#0xff
000c78  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000c7c  e5c10000          STRB     r0,[r1,#0]
000c80  e51f0208          LDR      r0,|L1.2688|
000c84  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000c88  e2800001          ADD      r0,r0,#1
000c8c  e51f1214          LDR      r1,|L1.2688|
000c90  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000c94  e3a00000          MOV      r0,#0
000c98  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000c9c  e5c10000          STRB     r0,[r1,#0]
000ca0  e51f0228          LDR      r0,|L1.2688|
000ca4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000ca8  e2800001          ADD      r0,r0,#1
000cac  e51f1234          LDR      r1,|L1.2688|
000cb0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000cb4  e3a00000          MOV      r0,#0
000cb8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000cbc  e5c10000          STRB     r0,[r1,#0]
000cc0  e51f0248          LDR      r0,|L1.2688|
000cc4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000cc8  e2800001          ADD      r0,r0,#1
000ccc  e51f1254          LDR      r1,|L1.2688|
000cd0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;476        PUTBYTE (CSCMD_END_SESSION);
000cd4  e3a0005e          MOV      r0,#0x5e
000cd8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000cdc  e5c10000          STRB     r0,[r1,#0]
000ce0  e51f0268          LDR      r0,|L1.2688|
000ce4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000ce8  e2800001          ADD      r0,r0,#1
000cec  e51f1274          LDR      r1,|L1.2688|
000cf0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;477        PUTBYTE (0);
000cf4  e3a00000          MOV      r0,#0
000cf8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000cfc  e5c10000          STRB     r0,[r1,#0]
000d00  e51f0288          LDR      r0,|L1.2688|
000d04  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000d08  e2800001          ADD      r0,r0,#1
000d0c  e51f1294          LDR      r1,|L1.2688|
000d10  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;478        DbgCmdDump (g_msg, (g_pmsg-g_msg));
000d14  e2810000          ADD      r0,r1,#0
000d18  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000d1c  e51f22a8          LDR      r2,|L1.2684|
000d20  e0401002          SUB      r1,r0,r2
000d24  e2820000          ADD      r0,r2,#0
000d28  ebfffffe          BL       DbgCmdDump
;;;479        SENDBLOCK (1);
000d2c  e3a00000          MOV      r0,#0
000d30  e51f12b8          LDR      r1,|L1.2688|
000d34  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000d38  e5c10000          STRB     r0,[r1,#0]
000d3c  e51f02c4          LDR      r0,|L1.2688|
000d40  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000d44  e2800001          ADD      r0,r0,#1
000d48  e51f12d0          LDR      r1,|L1.2688|
000d4c  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000d50  e3a00000          MOV      r0,#0
000d54  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000d58  e5c10000          STRB     r0,[r1,#0]
000d5c  e51f02e4          LDR      r0,|L1.2688|
000d60  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
000d64  e2800001          ADD      r0,r0,#1
000d68  e51f12f0          LDR      r1,|L1.2688|
000d6c  e5810000          STR      r0,[r1,#0]  ; g_pmsg
000d70  e51f1a58          LDR      r1,|L1.800|
000d74  e5911000          LDR      r1,[r1,#0]  ; f_encrypt
000d78  e3510000          CMP      r1,#0
000d7c  0a000001          BEQ      |L1.3464|
000d80  e3a01001          MOV      r1,#1
000d84  ea000000          B        |L1.3468|
                  |L1.3464|
000d88  e3a01000          MOV      r1,#0
                  |L1.3468|
000d8c  e1a02001          MOV      r2,r1
000d90  e51f1318          LDR      r1,|L1.2688|
000d94  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
000d98  e51f3324          LDR      r3,|L1.2684|
000d9c  e0410003          SUB      r0,r1,r3
000da0  e2831000          ADD      r1,r3,#0
000da4  ebfffffe          BL       sendblock
;;;480    
;;;481        READBLOCK (1);
000da8  e3a00001          MOV      r0,#1
000dac  ebfffffe          BL       READBLOCK
;;;482        DbgRspDump (g_inbuff, g_len);
000db0  e51f0ab4          LDR      r0,|L1.772|
000db4  e5901000          LDR      r1,[r0,#0]  ; g_len
000db8  e51f0ac0          LDR      r0,|L1.768|
000dbc  ebfffffe          BL       DbgRspDump
;;;483        if((g_len>0)&&(g_inbuff[0]==CSCMD_END_SESSION+1)&&(g_inbuff[1]==0))
000dc0  e51f0ac4          LDR      r0,|L1.772|
000dc4  e5900000          LDR      r0,[r0,#0]  ; g_len
000dc8  e3500000          CMP      r0,#0
000dcc  da00000a          BLE      |L1.3580|
000dd0  e51f0ad8          LDR      r0,|L1.768|
000dd4  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
000dd8  e350005f          CMP      r0,#0x5f
000ddc  1a000006          BNE      |L1.3580|
000de0  e51f0ae8          LDR      r0,|L1.768|
000de4  e5d00001          LDRB     r0,[r0,#1]  ; g_inbuff
000de8  e3500000          CMP      r0,#0
000dec  1a000002          BNE      |L1.3580|
;;;484            f_encrypt=0;
000df0  e3a00000          MOV      r0,#0
000df4  e51f1adc          LDR      r1,|L1.800|
000df8  e5810000          STR      r0,[r1,#0]  ; f_encrypt
                  |L1.3580|
;;;485    }
000dfc  e8bd8010          POP      {r4,pc}
;;;486    #include "fileagent.h"
                          ENDP

                  CmdMetaFileInitSend PROC
;;;1      /**************************************************************************//**
;;;487    void CmdMetaFileInitSend (CHAR* inFile, CHAR* inDir, int inFileLen)
000e00  e92d4ff0          PUSH     {r4-r11,lr}
;;;488    {
000e04  e24dd014          SUB      sp,sp,#0x14
000e08  e1a08000          MOV      r8,r0
000e0c  e1a0a001          MOV      r10,r1
000e10  e1a04002          MOV      r4,r2
;;;489        UINT msgLen, fileLen;
;;;490        ULONG before, after;
;;;491        CHAR *fname;
;;;492    
;;;493        //DbgPrint ("(%s %s %d) Start\n", __FILE__, __func__, __LINE__);
;;;494    
;;;495        memset (&initTranCmd, 0, sizeof (Cmd_InitTran));
000e14  e3a0102d          MOV      r1,#0x2d
000e18  e59f0254          LDR      r0,|L1.4212|
000e1c  ebfffffe          BL       __aeabi_memclr
;;;496        memset (&initTranRsp, 0, sizeof (Rsp_InitTran));
000e20  e3a01006          MOV      r1,#6
000e24  e59f024c          LDR      r0,|L1.4216|
000e28  ebfffffe          BL       __aeabi_memclr
;;;497        memset (&contTranCmd, 0, sizeof (Cmd_ContentTran));
000e2c  e59f1248          LDR      r1,|L1.4220|
000e30  e59f0248          LDR      r0,|L1.4224|
000e34  ebfffffe          BL       __aeabi_memclr
;;;498        memset (&contTranRsp, 0, sizeof (Rsp_ContentTran));
000e38  e3a01008          MOV      r1,#8
000e3c  e59f0240          LDR      r0,|L1.4228|
000e40  ebfffffe          BL       __aeabi_memclr
;;;499    #if(1)    
;;;500        BOOL needFree;
;;;501        FileAgentReturn reVal;  
;;;502        
;;;503        
;;;504        reVal = FileAgentGetData(FILE_AGENT_STORAGE_TYPE_FATFS, inDir, inFile, &OTPData, &OTPDataLen, &needFree, FALSE);
000e44  e3a00000          MOV      r0,#0
000e48  e28d100c          ADD      r1,sp,#0xc
000e4c  e59f2234          LDR      r2,|L1.4232|
000e50  e59f3234          LDR      r3,|L1.4236|
000e54  e58d2000          STR      r2,[sp,#0]
000e58  e1a02008          MOV      r2,r8
000e5c  e58d1004          STR      r1,[sp,#4]
000e60  e1a0100a          MOV      r1,r10
000e64  e58d0008          STR      r0,[sp,#8]
000e68  e3a00002          MOV      r0,#2
000e6c  ebfffffe          BL       FileAgentGetData
000e70  e1a0b000          MOV      r11,r0
;;;505        if((reVal != FILE_AGENT_RETURN_ERROR) &&(OTPDataLen == inFileLen))
000e74  e35b0000          CMP      r11,#0
000e78  0a00000a          BEQ      |L1.3752|
000e7c  e59f0204          LDR      r0,|L1.4232|
000e80  e5900000          LDR      r0,[r0,#0]  ; OTPDataLen
000e84  e1500004          CMP      r0,r4
000e88  1a000006          BNE      |L1.3752|
;;;506        {
;;;507            if(needFree)
000e8c  e5dd000c          LDRB     r0,[sp,#0xc]
000e90  e3500000          CMP      r0,#0
000e94  0a000007          BEQ      |L1.3768|
;;;508            {
;;;509                vPortFree(OTPData);
000e98  e59f01ec          LDR      r0,|L1.4236|
000e9c  e5900000          LDR      r0,[r0,#0]  ; OTPData
000ea0  ebfffffe          BL       vPortFree
000ea4  ea000003          B        |L1.3768|
                  |L1.3752|
;;;510            }
;;;511        }
;;;512        else
;;;513        {
;;;514            printf ("[WARNING!!!] FILE OPEN ERROR\n");
000ea8  e28f0e1e          ADR      r0,|L1.4240|
000eac  ebfffffe          BL       terninalPrintf
                  |L1.3760|
;;;515            return;
;;;516        }
;;;517    #else
;;;518        if((SendOTPfp=fopen (inFile, "rb"))==NULL)
;;;519        {
;;;520            printf ("[WARNING!!!] FILE OPEN ERROR\n");
;;;521            return; // file open error
;;;522        }
;;;523    #endif
;;;524        // send init packet first
;;;525        initTranCmd.f_cmdCode=CSCMD_INITTRAN; //0x5A	/* Metafile file Init transfer */
;;;526        initTranCmd.f_res=0;
;;;527        initTranCmd.f_fileType=10;//0x0A
;;;528        initTranCmd.f_verCtrl=0;
;;;529        initTranCmd.f_fileAct=0;
;;;530        fname=strrchr (inFile, 'O');
;;;531        printf ("fname:%s\n", fname);
;;;532        strncpy ((CHAR *)initTranCmd.f_name, (const CHAR *)fname, 32);
;;;533    
;;;534        //fseek (SendOTPfp, 0, SEEK_END);
;;;535        //fileLen=ftell (SendOTPfp);
;;;536        fileLen = inFileLen;
;;;537        
;;;538        initTranCmd.f_len=End4 (fileLen);
;;;539        printf ("f_len:%d\n", fileLen);
;;;540        initTranCmd.f_segSize=0;
;;;541        initTranCmd.f_segRemain=0;
;;;542    
;;;543        memcpy (&g_msg[MSGOFF_DATA], &initTranCmd, sizeof (Cmd_InitTran));
;;;544        msgLen=MakeMessage (g_msg, sizeof (Cmd_InitTran));
;;;545        DbgCmdDump (g_msg, msgLen-MSGSIZ_FOOTER); //not display footer
;;;546        sendblock (msgLen, g_msg, 1);
;;;547    
;;;548        before=GetRTC2000 ();
;;;549        after=before+10;    //just in case no repsonse from reader, set the time limit to wait for 10secs
;;;550    
;;;551        do
;;;552        {
;;;553            READBLOCK (1);
;;;554        }
;;;555        while((g_len==0)&&(GetRTC2000 ()<after));
;;;556        DbgRspDump (g_inbuff, g_len);
;;;557    
;;;558        if((g_len>0)&&(g_inbuff[0]==(CSCMD_INITTRAN+1))&&(g_inbuff[1]==0))
;;;559        {
;;;560            initTranRsp.f_rspCode=g_inbuff[0];
;;;561            initTranRsp.f_err=g_inbuff[1];
;;;562            initTranRsp.f_fileID=GetINT2 (&g_inbuff[2]);
;;;563            initTranRsp.f_segSize=GetINT2 (&g_inbuff[4]);
;;;564    
;;;565            printf ("InitTran success, fileID:%x segSize:%d\n", initTranRsp.f_fileID, initTranRsp.f_segSize);
;;;566        }
;;;567    }
000eb0  e28dd014          ADD      sp,sp,#0x14
000eb4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3768|
000eb8  e3a0005a          MOV      r0,#0x5a              ;525
000ebc  e59f11b0          LDR      r1,|L1.4212|
000ec0  e5c10000          STRB     r0,[r1,#0]            ;525  ; initTranCmd
000ec4  e3a00000          MOV      r0,#0                 ;526
000ec8  e5c10001          STRB     r0,[r1,#1]            ;526  ; initTranCmd
000ecc  e3a0000a          MOV      r0,#0xa               ;527
000ed0  e5c10002          STRB     r0,[r1,#2]            ;527  ; initTranCmd
000ed4  e3a00000          MOV      r0,#0                 ;528
000ed8  e5c10003          STRB     r0,[r1,#3]            ;528  ; initTranCmd
000edc  e5c10004          STRB     r0,[r1,#4]            ;529  ; initTranCmd
000ee0  e3a0104f          MOV      r1,#0x4f              ;530
000ee4  e1a00008          MOV      r0,r8                 ;530
000ee8  ebfffffe          BL       strrchr
000eec  e58d0010          STR      r0,[sp,#0x10]         ;530
000ef0  e28f0f6e          ADR      r0,|L1.4272|
000ef4  e59d1010          LDR      r1,[sp,#0x10]         ;531
000ef8  ebfffffe          BL       terninalPrintf
000efc  e3a02020          MOV      r2,#0x20              ;532
000f00  e59f01b4          LDR      r0,|L1.4284|
000f04  e59d1010          LDR      r1,[sp,#0x10]         ;532
000f08  ebfffffe          BL       strncpy
000f0c  e1a06004          MOV      r6,r4                 ;536
000f10  e1a00006          MOV      r0,r6                 ;538
000f14  ebfffffe          BL       End4
000f18  e59f11a0          LDR      r1,|L1.4288|
000f1c  e58d0008          STR      r0,[sp,#8]            ;538
000f20  ebfffffe          BL       __aeabi_uwrite4
000f24  e1a01006          MOV      r1,r6                 ;539
000f28  e28f0f65          ADR      r0,|L1.4292|
000f2c  ebfffffe          BL       terninalPrintf
000f30  e3a01000          MOV      r1,#0                 ;540
000f34  e59f0138          LDR      r0,|L1.4212|
000f38  e5c01029          STRB     r1,[r0,#0x29]         ;540  ; initTranCmd
000f3c  e5c0102a          STRB     r1,[r0,#0x2a]         ;540  ; initTranCmd
000f40  e5c0102b          STRB     r1,[r0,#0x2b]         ;541  ; initTranCmd
000f44  e5c0102c          STRB     r1,[r0,#0x2c]         ;541  ; initTranCmd
000f48  e3a0202d          MOV      r2,#0x2d              ;543
000f4c  e2801000          ADD      r1,r0,#0              ;543
000f50  e59f0178          LDR      r0,|L1.4304|
000f54  ebfffffe          BL       __aeabi_memcpy
000f58  e3a0102d          MOV      r1,#0x2d              ;544
000f5c  e51f04e8          LDR      r0,|L1.2684|
000f60  ebfffffe          BL       MakeMessage
000f64  e1a05000          MOV      r5,r0                 ;544
000f68  e2451002          SUB      r1,r5,#2              ;545
000f6c  e51f04f8          LDR      r0,|L1.2684|
000f70  ebfffffe          BL       DbgCmdDump
000f74  e3a02001          MOV      r2,#1                 ;546
000f78  e51f1504          LDR      r1,|L1.2684|
000f7c  e1a00005          MOV      r0,r5                 ;546
000f80  ebfffffe          BL       sendblock
000f84  ebfffffe          BL       GetRTC2000
000f88  e1a07000          MOV      r7,r0                 ;548
000f8c  e287900a          ADD      r9,r7,#0xa            ;549
000f90  e1a00000          MOV      r0,r0                 ;551
                  |L1.3988|
000f94  e3a00001          MOV      r0,#1                 ;553
000f98  ebfffffe          BL       READBLOCK
000f9c  e51f0ca0          LDR      r0,|L1.772|
000fa0  e5900000          LDR      r0,[r0,#0]            ;555  ; g_len
000fa4  e3500000          CMP      r0,#0                 ;555
000fa8  1a000002          BNE      |L1.4024|
000fac  ebfffffe          BL       GetRTC2000
000fb0  e1500009          CMP      r0,r9                 ;555
000fb4  3afffff6          BCC      |L1.3988|
                  |L1.4024|
000fb8  e51f0cbc          LDR      r0,|L1.772|
000fbc  e5901000          LDR      r1,[r0,#0]            ;556  ; g_len
000fc0  e51f0cc8          LDR      r0,|L1.768|
000fc4  ebfffffe          BL       DbgRspDump
000fc8  e51f0ccc          LDR      r0,|L1.772|
000fcc  e5900000          LDR      r0,[r0,#0]            ;558  ; g_len
000fd0  e3500000          CMP      r0,#0                 ;558
000fd4  da000024          BLE      |L1.4204|
000fd8  e51f0ce0          LDR      r0,|L1.768|
000fdc  e5d00000          LDRB     r0,[r0,#0]            ;558  ; g_inbuff
000fe0  e350005b          CMP      r0,#0x5b              ;558
000fe4  1a000020          BNE      |L1.4204|
000fe8  e51f0cf0          LDR      r0,|L1.768|
000fec  e5d00001          LDRB     r0,[r0,#1]            ;558  ; g_inbuff
000ff0  e3500000          CMP      r0,#0                 ;558
000ff4  1a00001c          BNE      |L1.4204|
000ff8  e51f0d00          LDR      r0,|L1.768|
000ffc  e5d00000          LDRB     r0,[r0,#0]            ;560  ; g_inbuff
001000  e59f1070          LDR      r1,|L1.4216|
001004  e5c10000          STRB     r0,[r1,#0]            ;560  ; initTranRsp
001008  e51f0d10          LDR      r0,|L1.768|
00100c  e5d00001          LDRB     r0,[r0,#1]            ;561  ; g_inbuff
001010  e5c10001          STRB     r0,[r1,#1]            ;561  ; initTranRsp
001014  e59f00b8          LDR      r0,|L1.4308|
001018  ebfffffe          BL       GetINT2
00101c  e59f1054          LDR      r1,|L1.4216|
001020  e5c10002          STRB     r0,[r1,#2]            ;562  ; initTranRsp
001024  e1a00420          LSR      r0,r0,#8              ;562
001028  e5c10003          STRB     r0,[r1,#3]            ;562  ; initTranRsp
00102c  e59f00a4          LDR      r0,|L1.4312|
001030  ebfffffe          BL       GetINT2
001034  e59f103c          LDR      r1,|L1.4216|
001038  e5c10004          STRB     r0,[r1,#4]            ;563  ; initTranRsp
00103c  e1a00420          LSR      r0,r0,#8              ;563
001040  e5c10005          STRB     r0,[r1,#5]            ;563  ; initTranRsp
001044  e2813000          ADD      r3,r1,#0              ;565
001048  e5d30005          LDRB     r0,[r3,#5]            ;565  ; initTranRsp
00104c  e5d33004          LDRB     r3,[r3,#4]            ;565  ; initTranRsp
001050  e1832400          ORR      r2,r3,r0,LSL #8       ;565
001054  e2813000          ADD      r3,r1,#0              ;565
001058  e5d30003          LDRB     r0,[r3,#3]            ;565  ; initTranRsp
00105c  e5d33002          LDRB     r3,[r3,#2]            ;565  ; initTranRsp
001060  e1831400          ORR      r1,r3,r0,LSL #8       ;565
001064  e28f0070          ADR      r0,|L1.4316|
001068  ebfffffe          BL       terninalPrintf
                  |L1.4204|
00106c  e1a00000          MOV      r0,r0
001070  eaffff8e          B        |L1.3760|
                  |L1.4212|
                          DCD      initTranCmd
                  |L1.4216|
                          DCD      initTranRsp
                  |L1.4220|
                          DCD      0x00000faa
                  |L1.4224|
                          DCD      contTranCmd
                  |L1.4228|
                          DCD      contTranRsp
                  |L1.4232|
                          DCD      OTPDataLen
                  |L1.4236|
                          DCD      OTPData
                  |L1.4240|
001090  5b574152          DCB      "[WARNING!!!] FILE OPEN ERROR\n",0
001094  4e494e47
001098  2121215d
00109c  2046494c
0010a0  45204f50
0010a4  454e2045
0010a8  52524f52
0010ac  0a00    
0010ae  00                DCB      0
0010af  00                DCB      0
                  |L1.4272|
0010b0  666e616d          DCB      "fname:%s\n",0
0010b4  653a2573
0010b8  0a00    
0010ba  00                DCB      0
0010bb  00                DCB      0
                  |L1.4284|
                          DCD      initTranCmd+0x5
                  |L1.4288|
                          DCD      initTranCmd+0x25
                  |L1.4292|
0010c4  665f6c65          DCB      "f_len:%d\n",0
0010c8  6e3a2564
0010cc  0a00    
0010ce  00                DCB      0
0010cf  00                DCB      0
                  |L1.4304|
                          DCD      g_msg+0x5
                  |L1.4308|
                          DCD      g_inbuff+0x2
                  |L1.4312|
                          DCD      g_inbuff+0x4
                  |L1.4316|
0010dc  496e6974          DCB      "InitTran success, fileID:%x segSize:%d\n",0
0010e0  5472616e
0010e4  20737563
0010e8  63657373
0010ec  2c206669
0010f0  6c654944
0010f4  3a257820
0010f8  73656753
0010fc  697a653a
001100  25640a00
                          ENDP

                  CmdMetaFileContSend PROC
;;;568    
;;;569    void CmdMetaFileContSend (void)
001104  e92d5ffc          PUSH     {r2-r12,lr}
;;;570    {
;;;571        
;;;572        INT nRec=0;
001108  e3a09000          MOV      r9,#0
;;;573        UINT msgLen;
;;;574        UINT fileLen=0;
00110c  e1a00000          MOV      r0,r0
;;;575        ULONG before, after;
;;;576        USHORT fileID, rByte;
;;;577        
;;;578        OTPDataIndex = 0;
001110  e3a00000          MOV      r0,#0
001114  e59f14f4          LDR      r1,|L1.5648|
001118  e5810000          STR      r0,[r1,#0]  ; OTPDataIndex
;;;579        //fseek (SendOTPfp, 0, SEEK_SET);
;;;580        
;;;581        fileID=initTranRsp.f_fileID;
00111c  e51f10ac          LDR      r1,|L1.4216|
001120  e5d10003          LDRB     r0,[r1,#3]  ; initTranRsp
001124  e5d11002          LDRB     r1,[r1,#2]  ; initTranRsp
001128  e181a400          ORR      r10,r1,r0,LSL #8
;;;582        fileLen=End4 (initTranCmd.f_len);
00112c  e51f0074          LDR      r0,|L1.4288|
001130  ebfffffe          BL       __aeabi_uread4
001134  e1a0b000          MOV      r11,r0
001138  ebfffffe          BL       End4
00113c  e1a06000          MOV      r6,r0
;;;583    
;;;584        while(fileLen>contTranRsp.f_nextOff)
001140  ea0000b5          B        |L1.5148|
                  |L1.4420|
;;;585        {
;;;586            //int targetCopyLen;
;;;587            
;;;588            contTranCmd.f_cmdCode=CSCMD_CONTTRAN;
001144  e3a0005c          MOV      r0,#0x5c
001148  e51f10d0          LDR      r1,|L1.4224|
00114c  e5c10000          STRB     r0,[r1,#0]  ; contTranCmd
;;;589            contTranCmd.f_res=0;
001150  e3a00000          MOV      r0,#0
001154  e5c10001          STRB     r0,[r1,#1]  ; contTranCmd
;;;590    
;;;591            contTranCmd.f_fileID=End2 (fileID);
001158  e1a0000a          MOV      r0,r10
00115c  ebfffffe          BL       End2
001160  e51f10e8          LDR      r1,|L1.4224|
001164  e5c10002          STRB     r0,[r1,#2]  ; contTranCmd
001168  e1a00420          LSR      r0,r0,#8
00116c  e5c10003          STRB     r0,[r1,#3]  ; contTranCmd
;;;592            contTranCmd.f_offset=End4(OTPDataIndex);//End4 (ftell (SendOTPfp));
001170  e59f0498          LDR      r0,|L1.5648|
001174  e5900000          LDR      r0,[r0,#0]  ; OTPDataIndex
001178  ebfffffe          BL       End4
00117c  e1a0b000          MOV      r11,r0
001180  e59f148c          LDR      r1,|L1.5652|
001184  ebfffffe          BL       __aeabi_uwrite4
;;;593            
;;;594            //rByte=fread (contTranCmd.f_data, sizeof (CHAR), initTranRsp.f_segSize, SendOTPfp);        
;;;595      
;;;596            if((OTPDataIndex + initTranRsp.f_segSize) > OTPDataLen)
001188  e51f1118          LDR      r1,|L1.4216|
00118c  e5d10005          LDRB     r0,[r1,#5]  ; initTranRsp
001190  e5d11004          LDRB     r1,[r1,#4]  ; initTranRsp
001194  e1810400          ORR      r0,r1,r0,LSL #8
001198  e59f1470          LDR      r1,|L1.5648|
00119c  e5911000          LDR      r1,[r1,#0]  ; OTPDataIndex
0011a0  e0800001          ADD      r0,r0,r1
0011a4  e51f1124          LDR      r1,|L1.4232|
0011a8  e5911000          LDR      r1,[r1,#0]  ; OTPDataLen
0011ac  e1500001          CMP      r0,r1
0011b0  9a000007          BLS      |L1.4564|
;;;597            {
;;;598                rByte = OTPDataLen - OTPDataIndex;
0011b4  e51f0134          LDR      r0,|L1.4232|
0011b8  e1d000b0          LDRH     r0,[r0,#0]  ; OTPDataLen
0011bc  e59f144c          LDR      r1,|L1.5648|
0011c0  e1d110b0          LDRH     r1,[r1,#0]  ; OTPDataIndex
0011c4  e0400001          SUB      r0,r0,r1
0011c8  e1a04800          LSL      r4,r0,#16
0011cc  e1a04824          LSR      r4,r4,#16
0011d0  ea000003          B        |L1.4580|
                  |L1.4564|
;;;599            }
;;;600            else
;;;601            {
;;;602                rByte = initTranRsp.f_segSize;
0011d4  e51f1164          LDR      r1,|L1.4216|
0011d8  e5d10005          LDRB     r0,[r1,#5]  ; initTranRsp
0011dc  e5d11004          LDRB     r1,[r1,#4]  ; initTranRsp
0011e0  e1814400          ORR      r4,r1,r0,LSL #8
                  |L1.4580|
;;;603            }
;;;604            memcpy(contTranCmd.f_data, OTPData + OTPDataIndex, rByte);        
0011e4  e51f0160          LDR      r0,|L1.4236|
0011e8  e5900000          LDR      r0,[r0,#0]  ; OTPData
0011ec  e59f241c          LDR      r2,|L1.5648|
0011f0  e5922000          LDR      r2,[r2,#0]  ; OTPDataIndex
0011f4  e0801002          ADD      r1,r0,r2
0011f8  e1a02004          MOV      r2,r4
0011fc  e59f0414          LDR      r0,|L1.5656|
001200  ebfffffe          BL       __aeabi_memcpy
;;;605            
;;;606            printf ("\r\n--> f_fileID 0x%04x (fileLen = %d): contTranCmd->f_offset:%d (rByte = %d)\n", End2 (contTranCmd.f_fileID), fileLen, End4 (contTranCmd.f_offset), rByte);
001204  e59f0408          LDR      r0,|L1.5652|
001208  ebfffffe          BL       __aeabi_uread4
00120c  e58d0000          STR      r0,[sp,#0]
001210  ebfffffe          BL       End4
001214  e1a0b000          MOV      r11,r0
001218  e51f21a0          LDR      r2,|L1.4224|
00121c  e5d21003          LDRB     r1,[r2,#3]  ; contTranCmd
001220  e5d22002          LDRB     r2,[r2,#2]  ; contTranCmd
001224  e1820401          ORR      r0,r2,r1,LSL #8
001228  ebfffffe          BL       End2
00122c  e1a0300b          MOV      r3,r11
001230  e1a02006          MOV      r2,r6
001234  e58d0004          STR      r0,[sp,#4]
001238  e1a01000          MOV      r1,r0
00123c  e59f03d8          LDR      r0,|L1.5660|
001240  e58d4000          STR      r4,[sp,#0]
001244  ebfffffe          BL       terninalPrintf
;;;607            contTranCmd.f_len=End2 (rByte);
001248  e1a00004          MOV      r0,r4
00124c  ebfffffe          BL       End2
001250  e51f11d8          LDR      r1,|L1.4224|
001254  e5c10008          STRB     r0,[r1,#8]  ; contTranCmd
001258  e1a00420          LSR      r0,r0,#8
00125c  e5c10009          STRB     r0,[r1,#9]  ; contTranCmd
;;;608    
;;;609            if(sizeof (Cmd_ContentTran)-sizeof (contTranCmd.f_data)+rByte>255)
001260  e284000a          ADD      r0,r4,#0xa
001264  e35000ff          CMP      r0,#0xff
001268  9a000003          BLS      |L1.4732|
;;;610                memcpy (&g_msg[MSGOFF_DATA_EXT], &contTranCmd, sizeof (Cmd_ContentTran)-sizeof (contTranCmd.f_data)+rByte);
00126c  e284200a          ADD      r2,r4,#0xa
001270  e59f03a8          LDR      r0,|L1.5664|
001274  ebfffffe          BL       __aeabi_memcpy
001278  ea000003          B        |L1.4748|
                  |L1.4732|
;;;611            else
;;;612                memcpy (&g_msg[MSGOFF_DATA], &contTranCmd, sizeof (Cmd_ContentTran)-sizeof (contTranCmd.f_data)+rByte);
00127c  e284200a          ADD      r2,r4,#0xa
001280  e51f1208          LDR      r1,|L1.4224|
001284  e51f01bc          LDR      r0,|L1.4304|
001288  ebfffffe          BL       __aeabi_memcpy
                  |L1.4748|
;;;613            
;;;614            msgLen=MakeMessage (g_msg, sizeof (Cmd_ContentTran)-sizeof (contTranCmd.f_data)+rByte);
00128c  e284100a          ADD      r1,r4,#0xa
001290  e51f081c          LDR      r0,|L1.2684|
001294  ebfffffe          BL       MakeMessage
001298  e1a05000          MOV      r5,r0
;;;615            
;;;616            if(msgLen>255)
00129c  e35500ff          CMP      r5,#0xff
0012a0  9a000003          BLS      |L1.4788|
;;;617            {
;;;618                DbgCmdDump (g_msg, msgLen-MSGSIZ_FOOTER_EXT);      //limit the debug dump size
0012a4  e2451003          SUB      r1,r5,#3
0012a8  e51f0834          LDR      r0,|L1.2684|
0012ac  ebfffffe          BL       DbgCmdDump
0012b0  ea000002          B        |L1.4800|
                  |L1.4788|
;;;619            }
;;;620            else
;;;621            {
;;;622                DbgCmdDump (g_msg, msgLen-MSGSIZ_FOOTER);      //limit the debug dump size
0012b4  e2451002          SUB      r1,r5,#2
0012b8  e51f0844          LDR      r0,|L1.2684|
0012bc  ebfffffe          BL       DbgCmdDump
                  |L1.4800|
;;;623            }
;;;624            sendblock (msgLen, g_msg, 1);
0012c0  e3a02001          MOV      r2,#1
0012c4  e51f1850          LDR      r1,|L1.2684|
0012c8  e1a00005          MOV      r0,r5
0012cc  ebfffffe          BL       sendblock
;;;625            before=GetRTC2000 ();
0012d0  ebfffffe          BL       GetRTC2000
0012d4  e1a07000          MOV      r7,r0
;;;626            after=before+10;    //just in case no repsonse from reader, set the time limit to wait for 10secs
0012d8  e287800a          ADD      r8,r7,#0xa
;;;627    
;;;628            do
0012dc  e1a00000          MOV      r0,r0
                  |L1.4832|
;;;629            {
;;;630                READBLOCK (1);
0012e0  e3a00001          MOV      r0,#1
0012e4  ebfffffe          BL       READBLOCK
;;;631            }
;;;632            while((g_len==0)&&(GetRTC2000 ()<after));
0012e8  e51f0fec          LDR      r0,|L1.772|
0012ec  e5900000          LDR      r0,[r0,#0]  ; g_len
0012f0  e3500000          CMP      r0,#0
0012f4  1a000002          BNE      |L1.4868|
0012f8  ebfffffe          BL       GetRTC2000
0012fc  e1500008          CMP      r0,r8
001300  3afffff6          BCC      |L1.4832|
                  |L1.4868|
;;;633    
;;;634            DbgRspDump (g_inbuff, g_len);
001304  e59f0318          LDR      r0,|L1.5668|
001308  e5901000          LDR      r1,[r0,#0]  ; g_len
00130c  e59f0314          LDR      r0,|L1.5672|
001310  ebfffffe          BL       DbgRspDump
;;;635            if((g_len>0)&&(g_inbuff[0]==(CSCMD_CONTTRAN+1))&&(g_inbuff[1]==0))
001314  e59f0308          LDR      r0,|L1.5668|
001318  e5900000          LDR      r0,[r0,#0]  ; g_len
00131c  e3500000          CMP      r0,#0
001320  da00002d          BLE      |L1.5084|
001324  e59f02fc          LDR      r0,|L1.5672|
001328  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
00132c  e350005d          CMP      r0,#0x5d
001330  1a000029          BNE      |L1.5084|
001334  e59f02ec          LDR      r0,|L1.5672|
001338  e5d00001          LDRB     r0,[r0,#1]  ; g_inbuff
00133c  e3500000          CMP      r0,#0
001340  1a000025          BNE      |L1.5084|
;;;636            {
;;;637                nRec++;
001344  e2899001          ADD      r9,r9,#1
;;;638                contTranRsp.f_rspCode=g_inbuff[0];
001348  e59f02d8          LDR      r0,|L1.5672|
00134c  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
001350  e51f12d4          LDR      r1,|L1.4228|
001354  e5c10000          STRB     r0,[r1,#0]  ; contTranRsp
;;;639                contTranRsp.f_err=g_inbuff[1];
001358  e59f02c8          LDR      r0,|L1.5672|
00135c  e5d00001          LDRB     r0,[r0,#1]  ; g_inbuff
001360  e5c10001          STRB     r0,[r1,#1]  ; contTranRsp
;;;640                contTranRsp.f_byteWrite=GetINT2 (&g_inbuff[2]);
001364  e51f0298          LDR      r0,|L1.4308|
001368  ebfffffe          BL       GetINT2
00136c  e51f12f0          LDR      r1,|L1.4228|
001370  e5c10002          STRB     r0,[r1,#2]  ; contTranRsp
001374  e1a00420          LSR      r0,r0,#8
001378  e5c10003          STRB     r0,[r1,#3]  ; contTranRsp
;;;641                contTranRsp.f_nextOff=GetINT4 (&g_inbuff[4]);
00137c  e51f02ac          LDR      r0,|L1.4312|
001380  ebfffffe          BL       GetINT4
001384  e1a0b000          MOV      r11,r0
001388  e59f129c          LDR      r1,|L1.5676|
00138c  ebfffffe          BL       __aeabi_uwrite4
;;;642    
;;;643                printf ("ContTran success, wByte:0x%04x(%d) nextOff:%d\n", contTranRsp.f_byteWrite, contTranRsp.f_byteWrite, contTranRsp.f_nextOff);
001390  e59f0294          LDR      r0,|L1.5676|
001394  ebfffffe          BL       __aeabi_uread4
001398  e1a0b000          MOV      r11,r0
00139c  e51f3320          LDR      r3,|L1.4228|
0013a0  e5d30003          LDRB     r0,[r3,#3]  ; contTranRsp
0013a4  e5d33002          LDRB     r3,[r3,#2]  ; contTranRsp
0013a8  e1832400          ORR      r2,r3,r0,LSL #8
0013ac  e51f3330          LDR      r3,|L1.4228|
0013b0  e5d30003          LDRB     r0,[r3,#3]  ; contTranRsp
0013b4  e5d33002          LDRB     r3,[r3,#2]  ; contTranRsp
0013b8  e1831400          ORR      r1,r3,r0,LSL #8
0013bc  e1a0300b          MOV      r3,r11
0013c0  e28f0f9a          ADR      r0,|L1.5680|
0013c4  ebfffffe          BL       terninalPrintf
;;;644                //fseek (SendOTPfp, contTranRsp.f_nextOff, SEEK_SET);
;;;645                OTPDataIndex = contTranRsp.f_nextOff;
0013c8  e59f025c          LDR      r0,|L1.5676|
0013cc  ebfffffe          BL       __aeabi_uread4
0013d0  e59f1238          LDR      r1,|L1.5648|
0013d4  e5810000          STR      r0,[r1,#0]  ; OTPDataIndex
0013d8  ea00000f          B        |L1.5148|
                  |L1.5084|
;;;646            }
;;;647            else
;;;648            {
;;;649                printf ("Fail in getting cont tran response 0x%x %d\n", contTranRsp.f_rspCode, contTranRsp.f_err);
0013dc  e51f0360          LDR      r0,|L1.4228|
0013e0  e5d02001          LDRB     r2,[r0,#1]  ; contTranRsp
0013e4  e5d01000          LDRB     r1,[r0,#0]  ; contTranRsp
0013e8  e28f0e27          ADR      r0,|L1.5728|
0013ec  ebfffffe          BL       terninalPrintf
;;;650                //fclose (SendOTPfp);
;;;651                if(OTPData != NULL)
0013f0  e51f036c          LDR      r0,|L1.4236|
0013f4  e5900000          LDR      r0,[r0,#0]  ; OTPData
0013f8  e3500000          CMP      r0,#0
0013fc  0a000005          BEQ      |L1.5144|
;;;652                {
;;;653                    vPortFree(OTPData);
001400  e51f037c          LDR      r0,|L1.4236|
001404  e5900000          LDR      r0,[r0,#0]  ; OTPData
001408  ebfffffe          BL       vPortFree
;;;654                    OTPData = NULL;
00140c  e3a00000          MOV      r0,#0
001410  e51f138c          LDR      r1,|L1.4236|
001414  e5810000          STR      r0,[r1,#0]  ; OTPData
                  |L1.5144|
;;;655                }
;;;656                return;
;;;657            }
;;;658            //printf ("fileLen:%d, rByte%d\n", fileLen, rByte);
;;;659        }
;;;660    
;;;661        //fclose (SendOTPfp);
;;;662        if(OTPData != NULL)
;;;663        {
;;;664            vPortFree(OTPData);
;;;665            OTPData = NULL;
;;;666        }
;;;667        
;;;668        if(fileLen<=contTranRsp.f_nextOff)
;;;669            f_encrypt=0;
;;;670        printf (" f_encrypt %d\n", f_encrypt);
;;;671        
;;;672    }
001418  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.5148|
00141c  e59f0208          LDR      r0,|L1.5676|
001420  ebfffffe          BL       __aeabi_uread4
001424  e1500006          CMP      r0,r6                 ;584
001428  3affff45          BCC      |L1.4420|
00142c  e51f03a8          LDR      r0,|L1.4236|
001430  e5900000          LDR      r0,[r0,#0]            ;662  ; OTPData
001434  e3500000          CMP      r0,#0                 ;662
001438  0a000005          BEQ      |L1.5204|
00143c  e51f03b8          LDR      r0,|L1.4236|
001440  e5900000          LDR      r0,[r0,#0]            ;664  ; OTPData
001444  ebfffffe          BL       vPortFree
001448  e3a00000          MOV      r0,#0                 ;665
00144c  e51f13c8          LDR      r1,|L1.4236|
001450  e5810000          STR      r0,[r1,#0]            ;665  ; OTPData
                  |L1.5204|
001454  e59f01d0          LDR      r0,|L1.5676|
001458  ebfffffe          BL       __aeabi_uread4
00145c  e1500006          CMP      r0,r6                 ;668
001460  3a000002          BCC      |L1.5232|
001464  e3a00000          MOV      r0,#0                 ;669
001468  e59f121c          LDR      r1,|L1.5772|
00146c  e5810000          STR      r0,[r1,#0]            ;669  ; f_encrypt
                  |L1.5232|
001470  e59f0214          LDR      r0,|L1.5772|
001474  e5901000          LDR      r1,[r0,#0]            ;670  ; f_encrypt
001478  e28f0e21          ADR      r0,|L1.5776|
00147c  ebfffffe          BL       terninalPrintf
001480  e1a00000          MOV      r0,r0
001484  eaffffe3          B        |L1.5144|
;;;673    
                          ENDP

                  CmdXFileInitRecv PROC
;;;674    void CmdXFileInitRecv (CHAR* outFile, UINT u32_SegmentSize)
001488  e92d41f0          PUSH     {r4-r8,lr}
;;;675    {
00148c  e1a06000          MOV      r6,r0
001490  e1a04001          MOV      r4,r1
;;;676        UINT msgLen;
;;;677    
;;;678        memset (&initRecvCmd, 0, sizeof (Cmd_InitReceive));
001494  e3a01005          MOV      r1,#5
001498  e59f0200          LDR      r0,|L1.5792|
00149c  ebfffffe          BL       __aeabi_memclr4
;;;679        memset (&initRecvRsp, 0, sizeof (Rsp_InitReceive));
0014a0  e3a01028          MOV      r1,#0x28
0014a4  e59f01f8          LDR      r0,|L1.5796|
0014a8  ebfffffe          BL       __aeabi_memclr
;;;680        memset (&contRecvCmd, 0, sizeof (Cmd_ContentReceive));
0014ac  e3a0100a          MOV      r1,#0xa
0014b0  e59f01f0          LDR      r0,|L1.5800|
0014b4  ebfffffe          BL       __aeabi_memclr
;;;681        memset (&contRecvRsp, 0, sizeof (Rsp_ContentReceive));
0014b8  e59f11ec          LDR      r1,|L1.5804|
0014bc  e59f01ec          LDR      r0,|L1.5808|
0014c0  ebfffffe          BL       __aeabi_memclr
;;;682    
;;;683        // send init packet first
;;;684        initRecvCmd.f_cmdCode=CSCMD_INITRECV;
0014c4  e3a00048          MOV      r0,#0x48
0014c8  e59f11d0          LDR      r1,|L1.5792|
0014cc  e5c10000          STRB     r0,[r1,#0]  ; initRecvCmd
;;;685        initRecvCmd.f_res=0;
0014d0  e3a00000          MOV      r0,#0
0014d4  e5c10001          STRB     r0,[r1,#1]  ; initRecvCmd
;;;686        initRecvCmd.f_fileType=1;
0014d8  e3a00001          MOV      r0,#1
0014dc  e5c10002          STRB     r0,[r1,#2]  ; initRecvCmd
;;;687        initRecvCmd.f_segSize=End2 (u32_SegmentSize);
0014e0  e1a00804          LSL      r0,r4,#16
0014e4  e1a00820          LSR      r0,r0,#16
0014e8  ebfffffe          BL       End2
0014ec  e59f11ac          LDR      r1,|L1.5792|
0014f0  e5c10003          STRB     r0,[r1,#3]  ; initRecvCmd
0014f4  e1a00420          LSR      r0,r0,#8
0014f8  e5c10004          STRB     r0,[r1,#4]  ; initRecvCmd
;;;688    
;;;689        memcpy (&g_msg[MSGOFF_DATA], &initRecvCmd, sizeof (Cmd_InitReceive));
0014fc  e3a02005          MOV      r2,#5
001500  e51f0438          LDR      r0,|L1.4304|
001504  ebfffffe          BL       __aeabi_memcpy
;;;690        msgLen=MakeMessage (g_msg, sizeof (Cmd_InitReceive));
001508  e3a01005          MOV      r1,#5
00150c  e51f0a98          LDR      r0,|L1.2684|
001510  ebfffffe          BL       MakeMessage
001514  e1a05000          MOV      r5,r0
;;;691        DbgCmdDump (g_msg, msgLen-MSGSIZ_FOOTER); //not display footer
001518  e2451002          SUB      r1,r5,#2
00151c  e51f0aa8          LDR      r0,|L1.2684|
001520  ebfffffe          BL       DbgCmdDump
;;;692        sendblock (msgLen, g_msg, 1);
001524  e3a02001          MOV      r2,#1
001528  e51f1ab4          LDR      r1,|L1.2684|
00152c  e1a00005          MOV      r0,r5
001530  ebfffffe          BL       sendblock
;;;693        READBLOCK (1);
001534  e3a00001          MOV      r0,#1
001538  ebfffffe          BL       READBLOCK
;;;694        DbgRspDump (g_inbuff, g_len);
00153c  e59f00e0          LDR      r0,|L1.5668|
001540  e5901000          LDR      r1,[r0,#0]  ; g_len
001544  e59f00dc          LDR      r0,|L1.5672|
001548  ebfffffe          BL       DbgRspDump
;;;695    
;;;696        if((g_len>0)&&(g_inbuff[0]==(CSCMD_INITRECV+1))&&(g_inbuff[1]==0))
00154c  e59f00d0          LDR      r0,|L1.5668|
001550  e5900000          LDR      r0,[r0,#0]  ; g_len
001554  e3500000          CMP      r0,#0
001558  da000020          BLE      |L1.5600|
00155c  e59f00c4          LDR      r0,|L1.5672|
001560  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
001564  e3500049          CMP      r0,#0x49
001568  1a00001c          BNE      |L1.5600|
00156c  e59f00b4          LDR      r0,|L1.5672|
001570  e5d00001          LDRB     r0,[r0,#1]  ; g_inbuff
001574  e3500000          CMP      r0,#0
001578  1a000018          BNE      |L1.5600|
;;;697        {
;;;698            initRecvRsp.f_rspCode=g_inbuff[0];
00157c  e59f00a4          LDR      r0,|L1.5672|
001580  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
001584  e59f1118          LDR      r1,|L1.5796|
001588  e5c10000          STRB     r0,[r1,#0]  ; initRecvRsp
;;;699            initRecvRsp.f_err=g_inbuff[1];
00158c  e59f0094          LDR      r0,|L1.5672|
001590  e5d00001          LDRB     r0,[r0,#1]  ; g_inbuff
001594  e5c10001          STRB     r0,[r1,#1]  ; initRecvRsp
;;;700            memcpy (&initRecvRsp.f_name[0], &g_inbuff[2], 32);
001598  e3a02020          MOV      r2,#0x20
00159c  e51f14d0          LDR      r1,|L1.4308|
0015a0  e59f010c          LDR      r0,|L1.5812|
0015a4  ebfffffe          BL       __aeabi_memcpy
;;;701            initRecvRsp.f_len=GetINT4 (&g_inbuff[34]);
0015a8  e59f0108          LDR      r0,|L1.5816|
0015ac  ebfffffe          BL       GetINT4
0015b0  e1a07000          MOV      r7,r0
0015b4  e59f1100          LDR      r1,|L1.5820|
0015b8  ebfffffe          BL       __aeabi_uwrite4
;;;702            initRecvRsp.f_fileID=GetINT2 (&g_inbuff[38]);
0015bc  e59f00fc          LDR      r0,|L1.5824|
0015c0  ebfffffe          BL       GetINT2
0015c4  e59f10d8          LDR      r1,|L1.5796|
0015c8  e5c10026          STRB     r0,[r1,#0x26]  ; initRecvRsp
0015cc  e1a00420          LSR      r0,r0,#8
0015d0  e5c10027          STRB     r0,[r1,#0x27]  ; initRecvRsp
;;;703            strcpy ((CHAR *)outFile, (const CHAR *)initRecvRsp.f_name);
0015d4  e2811002          ADD      r1,r1,#2
0015d8  e1a00006          MOV      r0,r6
0015dc  ebfffffe          BL       strcpy
                  |L1.5600|
;;;704        }
;;;705    
;;;706        printf ("InitRecv success, fileID:%x fileLen:%lu fname:%s\n", initRecvRsp.f_fileID, initRecvRsp.f_len, initRecvRsp.f_name);
0015e0  e59f00d4          LDR      r0,|L1.5820|
0015e4  ebfffffe          BL       __aeabi_uread4
0015e8  e1a07000          MOV      r7,r0
0015ec  e59f20b0          LDR      r2,|L1.5796|
0015f0  e5d20027          LDRB     r0,[r2,#0x27]  ; initRecvRsp
0015f4  e5d22026          LDRB     r2,[r2,#0x26]  ; initRecvRsp
0015f8  e1821400          ORR      r1,r2,r0,LSL #8
0015fc  e59f30b0          LDR      r3,|L1.5812|
001600  e1a02007          MOV      r2,r7
001604  e28f00b8          ADR      r0,|L1.5828|
001608  ebfffffe          BL       terninalPrintf
;;;707    }
00160c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5648|
                          DCD      OTPDataIndex
                  |L1.5652|
                          DCD      contTranCmd+0x4
                  |L1.5656|
                          DCD      contTranCmd+0xa
                  |L1.5660|
                          DCD      ||.constdata||+0x2c
                  |L1.5664|
                          DCD      g_msg+0x6
                  |L1.5668|
                          DCD      g_len
                  |L1.5672|
                          DCD      g_inbuff
                  |L1.5676|
                          DCD      contTranRsp+0x4
                  |L1.5680|
001630  436f6e74          DCB      "ContTran success, wByte:0x%04x(%d) nextOff:%d\n",0
001634  5472616e
001638  20737563
00163c  63657373
001640  2c207742
001644  7974653a
001648  30782530
00164c  34782825
001650  6429206e
001654  6578744f
001658  66663a25
00165c  640a00  
00165f  00                DCB      0
                  |L1.5728|
001660  4661696c          DCB      "Fail in getting cont tran response 0x%x %d\n",0
001664  20696e20
001668  67657474
00166c  696e6720
001670  636f6e74
001674  20747261
001678  6e207265
00167c  73706f6e
001680  73652030
001684  78257820
001688  25640a00
                  |L1.5772|
                          DCD      f_encrypt
                  |L1.5776|
001690  20665f65          DCB      " f_encrypt %d\n",0
001694  6e637279
001698  70742025
00169c  640a00  
00169f  00                DCB      0
                  |L1.5792|
                          DCD      initRecvCmd
                  |L1.5796|
                          DCD      initRecvRsp
                  |L1.5800|
                          DCD      contRecvCmd
                  |L1.5804|
                          DCD      0x00000fa8
                  |L1.5808|
                          DCD      contRecvRsp
                  |L1.5812|
                          DCD      initRecvRsp+0x2
                  |L1.5816|
                          DCD      g_inbuff+0x22
                  |L1.5820|
                          DCD      initRecvRsp+0x22
                  |L1.5824|
                          DCD      g_inbuff+0x26
                  |L1.5828|
0016c4  496e6974          DCB      "InitRecv success, fileID:%x fileLen:%lu fname:%s\n",0
0016c8  52656376
0016cc  20737563
0016d0  63657373
0016d4  2c206669
0016d8  6c654944
0016dc  3a257820
0016e0  66696c65
0016e4  4c656e3a
0016e8  256c7520
0016ec  666e616d
0016f0  653a2573
0016f4  0a00    
0016f6  00                DCB      0
0016f7  00                DCB      0
                          ENDP

                  CmdXFileContRecv PROC
;;;708    
;;;709    void CmdXFileContRecv (CHAR* outFile, UINT u32_SegmentSize)
0016f8  e92d4ff0          PUSH     {r4-r11,lr}
;;;710    {
0016fc  e24dd024          SUB      sp,sp,#0x24
001700  e1a09000          MOV      r9,r0
001704  e1a06001          MOV      r6,r1
;;;711    #if(1)
;;;712        UINT msgLen, fileLen;
;;;713        //FILE *fp;
;;;714        ULONG before, after;
;;;715        BYTE u8_LastDummyPacket=0;
001708  e3a07000          MOV      r7,#0
;;;716        USHORT fileID;
;;;717        //CHAR fname[256];
;;;718        
;;;719        uint8_t* xFileDataPr;
;;;720        int xFileDataIndex = 0;
00170c  e3a00000          MOV      r0,#0
001710  e58d0018          STR      r0,[sp,#0x18]
;;;721        int xFileDataLen = 0;
001714  e1a00000          MOV      r0,r0
;;;722    
;;;723        //sprintf (fname, "%s/%s", theRWL.UPLOADDIR, initRecvRsp.f_name);
;;;724        
;;;725        //if((fp=fopen (fname, "wb+"))==NULL)
;;;726        //{
;;;727        //    printf ("[WARNING!!!] FILE OPEN ERROR\n");
;;;728        //    return; // file open error
;;;729        //}
;;;730        fileLen=End4 (GetINT4 ((BYTE *)&initRecvRsp.f_len));
001718  e51f0064          LDR      r0,|L1.5820|
00171c  ebfffffe          BL       GetINT4
001720  e1a08000          MOV      r8,r0
001724  ebfffffe          BL       End4
001728  e1a04000          MOV      r4,r0
;;;731        xFileDataLen = fileLen;
00172c  e58d4014          STR      r4,[sp,#0x14]
;;;732        fileID=End2 (initRecvRsp.f_fileID);
001730  e51f2094          LDR      r2,|L1.5796|
001734  e5d21027          LDRB     r1,[r2,#0x27]  ; initRecvRsp
001738  e5d22026          LDRB     r2,[r2,#0x26]  ; initRecvRsp
00173c  e1820401          ORR      r0,r2,r1,LSL #8
001740  ebfffffe          BL       End2
001744  e58d001c          STR      r0,[sp,#0x1c]
;;;733        
;;;734        printf ("CmdXFileContRecv: target f_name:[%s](xFileDataLen = %d), u32_SegmentSize = %d\n", initRecvRsp.f_name, fileLen, u32_SegmentSize);
001748  e1a03006          MOV      r3,r6
00174c  e1a02004          MOV      r2,r4
001750  e51f10a4          LDR      r1,|L1.5812|
001754  e59f02e8          LDR      r0,|L1.6724|
001758  ebfffffe          BL       terninalPrintf
;;;735        
;;;736        xFileDataPr = pvPortMalloc(fileLen);
00175c  e1a00004          MOV      r0,r4
001760  ebfffffe          BL       pvPortMalloc
001764  e1a05000          MOV      r5,r0
;;;737        if(xFileDataPr == NULL)
001768  e3550000          CMP      r5,#0
00176c  1a000003          BNE      |L1.6016|
;;;738        {
;;;739            printf ("[WARNING!!!] CmdXFileContRecv pvPortMalloc ERROR\n");
001770  e28f0e2d          ADR      r0,|L1.6728|
001774  ebfffffe          BL       terninalPrintf
                  |L1.6008|
;;;740            return; // file open error
;;;741        }
;;;742        
;;;743    
;;;744        while((fileLen>0)||u8_LastDummyPacket)
;;;745        {
;;;746            contRecvCmd.f_cmdCode=CSCMD_CONTRECV;
;;;747            contRecvCmd.f_res=0;
;;;748            contRecvCmd.f_fileID=fileID;
;;;749            
;;;750            //contRecvCmd.f_offset=End4 (ftell (fp));
;;;751            contRecvCmd.f_offset=End4 (xFileDataIndex);
;;;752            
;;;753            
;;;754            if(fileLen>u32_SegmentSize)
;;;755                contRecvCmd.f_len=End2 (u32_SegmentSize);
;;;756            else
;;;757                contRecvCmd.f_len=End2 (fileLen);
;;;758    
;;;759            if(u8_LastDummyPacket)
;;;760                contRecvCmd.f_len=0;
;;;761    
;;;762            memcpy (&g_msg[MSGOFF_DATA], &contRecvCmd, sizeof (Cmd_ContentReceive));
;;;763    
;;;764            printf ("f_fileID 0x%x contRecvCmd->f_offset:0x%x(%d), left fileLen:%d\n", End2 (contRecvCmd.f_fileID), End4 (contRecvCmd.f_offset), End4 (contRecvCmd.f_offset), fileLen);
;;;765            msgLen=MakeMessage (g_msg, sizeof (Cmd_ContentReceive));
;;;766            DbgCmdDump (g_msg, msgLen-MSGSIZ_FOOTER); //not display footer
;;;767            sendblock (msgLen, g_msg, 1);
;;;768            before=GetRTC2000 ();
;;;769            after = before + 10;    //just in case no repsonse from reader, set the time limit to wait for 10secs
;;;770    
;;;771            while(1)
;;;772            {
;;;773                do
;;;774                {
;;;775                    READBLOCK (1);
;;;776                }
;;;777                while((g_len==0)&&(GetRTC2000 ()<after));
;;;778    
;;;779                DbgRspDump (g_inbuff, g_len);
;;;780    
;;;781                printf ("g_len:%d g_inbuff[0] :%x g_inbuff[1] :%x\n", g_len, g_inbuff[0], g_inbuff[1]);
;;;782    
;;;783                if((g_len>0)&&(g_inbuff[0]==(CSCMD_CONTRECV+1))&&(g_inbuff[1]==0))
;;;784                {
;;;785                    contRecvRsp.f_rspCode=g_inbuff[0];
;;;786                    contRecvRsp.f_err=g_inbuff[1];
;;;787                    contRecvRsp.f_byteRead=GetINT2 (&g_inbuff[2]);
;;;788                    contRecvRsp.f_nextOff=GetINT4 (&g_inbuff[4]);
;;;789                    memcpy (&contRecvRsp.f_data[0], &g_inbuff[8], contRecvRsp.f_byteRead);
;;;790    
;;;791                    if(!u8_LastDummyPacket)
;;;792                    {
;;;793                        //this is resend of last packet, discard this
;;;794                        if(End4 (contRecvCmd.f_offset)!=contRecvRsp.f_nextOff)
;;;795                        {
;;;796                            //fwrite (&contRecvRsp.f_data[0], 1, contRecvRsp.f_byteRead, fp);
;;;797                            memcpy(xFileDataPr+xFileDataIndex, &contRecvRsp.f_data[0], contRecvRsp.f_byteRead);
;;;798                            
;;;799                            printf ("ContRecv success, wByte:%x nextOff:%lu\n", contRecvRsp.f_byteRead, contRecvRsp.f_nextOff);
;;;800                            fileLen-=contRecvRsp.f_byteRead;
;;;801                            //fseek (fp, contRecvRsp.f_nextOff, SEEK_SET);
;;;802                            xFileDataIndex = contRecvRsp.f_nextOff;
;;;803                            
;;;804                        }
;;;805                    }
;;;806                    else
;;;807                    {
;;;808                        //fwrite (&contRecvRsp.f_data[0], 1, contRecvRsp.f_byteRead, fp);
;;;809                        memcpy(xFileDataPr+xFileDataIndex, &contRecvRsp.f_data[0], contRecvRsp.f_byteRead);
;;;810                        
;;;811                        printf ("ContRecv success (u8_LastDummyPacket), wByte:%x nextOff:%lu\n", contRecvRsp.f_byteRead, contRecvRsp.f_nextOff);
;;;812                        fileLen-=contRecvRsp.f_byteRead;
;;;813    
;;;814                        //fseek (fp, contRecvRsp.f_nextOff, SEEK_SET);
;;;815                        xFileDataIndex = contRecvRsp.f_nextOff;
;;;816                    }
;;;817    
;;;818                    if(u8_LastDummyPacket)
;;;819                    {
;;;820                        u8_LastDummyPacket=0;
;;;821                    }
;;;822                    else if(fileLen==0)
;;;823                    {//last dummy packet
;;;824    //send last dummy packet to trigger RW purge UD
;;;825                        u8_LastDummyPacket=1;
;;;826                    }
;;;827                    break;
;;;828                }
;;;829                else
;;;830                {
;;;831                    printf ("Fail in getting init recv response rspCode:%x, rspErr:%x\n", contRecvRsp.f_rspCode, contRecvRsp.f_err);
;;;832                    //fclose (fp);
;;;833                    //unlink (fname);
;;;834                    if(xFileDataPr != NULL)
;;;835                    {
;;;836                        vPortFree(OTPData);
;;;837                    }
;;;838                    return;
;;;839                }
;;;840            }
;;;841    
;;;842            printf ("fileLen:%d\n", fileLen);
;;;843        }
;;;844    
;;;845        //fclose (fp);
;;;846        sysprintf("\r\n--- xFileDataPr [%d] --->\r\n", xFileDataLen);
;;;847        for(int i = 0; i < xFileDataLen; i++)
;;;848        {
;;;849            sysprintf("0x%02x, ", xFileDataPr[i]);
;;;850            if(i%10 == 9)
;;;851                sysprintf("\r\n");
;;;852        
;;;853        }
;;;854        sysprintf("\r\n<--- xFileDataPr ---\r\n");
;;;855        
;;;856        strcpy ((CHAR *)outFile, (const CHAR *)initRecvRsp.f_name);
;;;857        //reVal = FileAgentGetData(FILE_AGENT_STORAGE_TYPE_FATFS, inDir, inFile, &OTPData, &OTPDataLen, &needFree, FALSE);
;;;858        //FileAgentReturn FileAgentAddData(StorageType storageType,char* dir, char* name, uint8_t* data, int dataLen, FileAgentAddType addType, BOOL dataNeedFreeFlag, BOOL blockFlag, BOOL checkMode);
;;;859        if(FileAgentAddData(FILE_AGENT_STORAGE_TYPE_FATFS, "0:", outFile, xFileDataPr, xFileDataLen, FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, FALSE, TRUE, FALSE) ==  FILE_AGENT_RETURN_ERROR ) 
;;;860        {
;;;861            printf ("CmdXFileContRecv: Save FAIL, outFile fname:%s\n", outFile);
;;;862        }
;;;863        else
;;;864        {
;;;865            printf ("CmdXFileContRecv: Save SUCCESS, outFile fname:%s\n", outFile);
;;;866        }
;;;867        if(xFileDataPr != NULL)
;;;868        {
;;;869            vPortFree(OTPData);
;;;870        }
;;;871        
;;;872    #else
;;;873        UINT msgLen, fileLen;
;;;874        FILE *fp;
;;;875        ULONG before, after;
;;;876        BYTE u8_LastDummyPacket=0;
;;;877        USHORT fileID;
;;;878        CHAR fname[256];
;;;879    
;;;880        sprintf (fname, "%s/%s", theRWL.UPLOADDIR, initRecvRsp.f_name);
;;;881        printf ("target fname:%s\n", fname);
;;;882        if((fp=fopen (fname, "wb+"))==NULL)
;;;883        {
;;;884            printf ("[WARNING!!!] FILE OPEN ERROR\n");
;;;885            return; // file open error
;;;886        }
;;;887        fileLen=End4 (GetINT4 ((BYTE *)&initRecvRsp.f_len));
;;;888        fileID=End2 (initRecvRsp.f_fileID);
;;;889    
;;;890        while((fileLen>0)||u8_LastDummyPacket)
;;;891        {
;;;892            contRecvCmd.f_cmdCode=CSCMD_CONTRECV;
;;;893            contRecvCmd.f_res=0;
;;;894            contRecvCmd.f_fileID=fileID;
;;;895            contRecvCmd.f_offset=End4 (ftell (fp));
;;;896            if(fileLen>u32_SegmentSize)
;;;897                contRecvCmd.f_len=End2 (u32_SegmentSize);
;;;898            else
;;;899                contRecvCmd.f_len=End2 (fileLen);
;;;900    
;;;901            if(u8_LastDummyPacket)
;;;902                contRecvCmd.f_len=0;
;;;903    
;;;904            memcpy (&g_msg[MSGOFF_DATA], &contRecvCmd, sizeof (Cmd_ContentReceive));
;;;905    
;;;906            printf ("f_fileID %x contRecvCmd->f_offset:%x fileLen:%d\n", End2 (contRecvCmd.f_fileID), End4 (contRecvCmd.f_offset), fileLen);
;;;907            msgLen=MakeMessage (g_msg, sizeof (Cmd_ContentReceive));
;;;908            DbgCmdDump (g_msg, msgLen-MSGSIZ_FOOTER); //not display footer
;;;909            sendblock (msgLen, g_msg, 1);
;;;910            before=GetRTC2000 ();
;;;911            after=before+10;    //just in case no repsonse from reader, set the time limit to wait for 10secs
;;;912    
;;;913            while(1)
;;;914            {
;;;915                do
;;;916                {
;;;917                    READBLOCK (1);
;;;918                }
;;;919                while((g_len==0)&&(GetRTC2000 ()<after));
;;;920    
;;;921                DbgRspDump (g_inbuff, g_len);
;;;922    
;;;923                printf ("g_len:%d g_inbuff[0] :%x g_inbuff[1] :%x\n", g_len, g_inbuff[0], g_inbuff[1]);
;;;924    
;;;925                if((g_len>0)&&(g_inbuff[0]==(CSCMD_CONTRECV+1))&&(g_inbuff[1]==0))
;;;926                {
;;;927                    contRecvRsp.f_rspCode=g_inbuff[0];
;;;928                    contRecvRsp.f_err=g_inbuff[1];
;;;929                    contRecvRsp.f_byteRead=GetINT2 (&g_inbuff[2]);
;;;930                    contRecvRsp.f_nextOff=GetINT4 (&g_inbuff[4]);
;;;931                    memcpy (&contRecvRsp.f_data[0], &g_inbuff[8], contRecvRsp.f_byteRead);
;;;932    
;;;933                    if(!u8_LastDummyPacket)
;;;934                    {
;;;935                        //this is resend of last packet, discard this
;;;936                        if(End4 (contRecvCmd.f_offset)!=contRecvRsp.f_nextOff)
;;;937                        {
;;;938                            fwrite (&contRecvRsp.f_data[0], 1, contRecvRsp.f_byteRead, fp);
;;;939                            printf ("ContRecv success, wByte:%x nextOff:%lu\n", contRecvRsp.f_byteRead, contRecvRsp.f_nextOff);
;;;940                            fileLen-=contRecvRsp.f_byteRead;
;;;941                            fseek (fp, contRecvRsp.f_nextOff, SEEK_SET);
;;;942                        }
;;;943                    }
;;;944                    else
;;;945                    {
;;;946                        fwrite (&contRecvRsp.f_data[0], 1, contRecvRsp.f_byteRead, fp);
;;;947                        printf ("ContRecv success, wByte:%x nextOff:%lu\n", contRecvRsp.f_byteRead, contRecvRsp.f_nextOff);
;;;948                        fileLen-=contRecvRsp.f_byteRead;
;;;949    
;;;950                        fseek (fp, contRecvRsp.f_nextOff, SEEK_SET);
;;;951                    }
;;;952    
;;;953                    if(u8_LastDummyPacket)
;;;954                        u8_LastDummyPacket=0;
;;;955                    else if(fileLen==0)
;;;956                    {//last dummy packet
;;;957    //send last dummy packet to trigger RW purge UD
;;;958                        u8_LastDummyPacket=1;
;;;959                    }
;;;960                    break;
;;;961                }
;;;962                else
;;;963                {
;;;964                    printf ("Fail in getting init recv response rspCode:%x, rspErr:%x\n", contRecvRsp.f_rspCode, contRecvRsp.f_err);
;;;965                    fclose (fp);
;;;966                    unlink (fname);
;;;967                    return;
;;;968                }
;;;969            }
;;;970    
;;;971            printf ("fileLen:%d\n", fileLen);
;;;972        }
;;;973    
;;;974        fclose (fp);
;;;975    
;;;976        strcpy ((CHAR *)outFile, (const CHAR *)initRecvRsp.f_name);
;;;977    #endif
;;;978        return;
;;;979    }
001778  e28dd024          ADD      sp,sp,#0x24
00177c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.6016|
001780  ea000118          B        |L1.7144|
                  |L1.6020|
001784  e3a0007c          MOV      r0,#0x7c              ;746
001788  e51f10e8          LDR      r1,|L1.5800|
00178c  e5c10000          STRB     r0,[r1,#0]            ;746  ; contRecvCmd
001790  e3a00000          MOV      r0,#0                 ;747
001794  e5c10001          STRB     r0,[r1,#1]            ;747  ; contRecvCmd
001798  e59d001c          LDR      r0,[sp,#0x1c]         ;748
00179c  e5c10002          STRB     r0,[r1,#2]            ;748  ; contRecvCmd
0017a0  e1a00420          LSR      r0,r0,#8              ;748
0017a4  e5c10003          STRB     r0,[r1,#3]            ;748  ; contRecvCmd
0017a8  e59d0018          LDR      r0,[sp,#0x18]         ;751
0017ac  ebfffffe          BL       End4
0017b0  e1a08000          MOV      r8,r0                 ;751
0017b4  e59f12c0          LDR      r1,|L1.6780|
0017b8  ebfffffe          BL       __aeabi_uwrite4
0017bc  e1540006          CMP      r4,r6                 ;754
0017c0  9a000007          BLS      |L1.6116|
0017c4  e1a00806          LSL      r0,r6,#16             ;755
0017c8  e1a00820          LSR      r0,r0,#16             ;755
0017cc  ebfffffe          BL       End2
0017d0  e51f1130          LDR      r1,|L1.5800|
0017d4  e5c10008          STRB     r0,[r1,#8]            ;755  ; contRecvCmd
0017d8  e1a00420          LSR      r0,r0,#8              ;755
0017dc  e5c10009          STRB     r0,[r1,#9]            ;755  ; contRecvCmd
0017e0  ea000006          B        |L1.6144|
                  |L1.6116|
0017e4  e1a00804          LSL      r0,r4,#16             ;757
0017e8  e1a00820          LSR      r0,r0,#16             ;757
0017ec  ebfffffe          BL       End2
0017f0  e51f1150          LDR      r1,|L1.5800|
0017f4  e5c10008          STRB     r0,[r1,#8]            ;757  ; contRecvCmd
0017f8  e1a00420          LSR      r0,r0,#8              ;757
0017fc  e5c10009          STRB     r0,[r1,#9]            ;757  ; contRecvCmd
                  |L1.6144|
001800  e3570000          CMP      r7,#0                 ;759
001804  0a000003          BEQ      |L1.6168|
001808  e3a00000          MOV      r0,#0                 ;760
00180c  e51f116c          LDR      r1,|L1.5800|
001810  e5c10008          STRB     r0,[r1,#8]            ;760  ; contRecvCmd
001814  e5c10009          STRB     r0,[r1,#9]            ;760  ; contRecvCmd
                  |L1.6168|
001818  e3a0200a          MOV      r2,#0xa               ;762
00181c  e51f117c          LDR      r1,|L1.5800|
001820  e51f0758          LDR      r0,|L1.4304|
001824  ebfffffe          BL       __aeabi_memcpy
001828  e59f024c          LDR      r0,|L1.6780|
00182c  ebfffffe          BL       __aeabi_uread4
001830  e58d0008          STR      r0,[sp,#8]            ;764
001834  ebfffffe          BL       End4
001838  e1a08000          MOV      r8,r0                 ;764
00183c  e59f0238          LDR      r0,|L1.6780|
001840  ebfffffe          BL       __aeabi_uread4
001844  e58d0008          STR      r0,[sp,#8]            ;764
001848  ebfffffe          BL       End4
00184c  e51f21ac          LDR      r2,|L1.5800|
001850  e58d0010          STR      r0,[sp,#0x10]         ;764
001854  e5d21003          LDRB     r1,[r2,#3]            ;764  ; contRecvCmd
001858  e5d22002          LDRB     r2,[r2,#2]            ;764  ; contRecvCmd
00185c  e1820401          ORR      r0,r2,r1,LSL #8       ;764
001860  ebfffffe          BL       End2
001864  e1a03008          MOV      r3,r8                 ;764
001868  e58d000c          STR      r0,[sp,#0xc]          ;764
00186c  e58d4000          STR      r4,[sp,#0]            ;764
001870  e1a01000          MOV      r1,r0                 ;764
001874  e28f0f81          ADR      r0,|L1.6784|
001878  e59d2010          LDR      r2,[sp,#0x10]         ;764
00187c  ebfffffe          BL       terninalPrintf
001880  e3a0100a          MOV      r1,#0xa               ;765
001884  e51f0e10          LDR      r0,|L1.2684|
001888  ebfffffe          BL       MakeMessage
00188c  e1a0a000          MOV      r10,r0                ;765
001890  e24a1002          SUB      r1,r10,#2             ;766
001894  e51f0e20          LDR      r0,|L1.2684|
001898  ebfffffe          BL       DbgCmdDump
00189c  e3a02001          MOV      r2,#1                 ;767
0018a0  e51f1e2c          LDR      r1,|L1.2684|
0018a4  e1a0000a          MOV      r0,r10                ;767
0018a8  ebfffffe          BL       sendblock
0018ac  ebfffffe          BL       GetRTC2000
0018b0  e1a0b000          MOV      r11,r0                ;768
0018b4  e28b000a          ADD      r0,r11,#0xa           ;769
0018b8  e58d0020          STR      r0,[sp,#0x20]         ;769
0018bc  ea0000c4          B        |L1.7124|
                  |L1.6336|
0018c0  e1a00000          MOV      r0,r0                 ;773
                  |L1.6340|
0018c4  e3a00001          MOV      r0,#1                 ;775
0018c8  ebfffffe          BL       READBLOCK
0018cc  e51f02b0          LDR      r0,|L1.5668|
0018d0  e5900000          LDR      r0,[r0,#0]            ;777  ; g_len
0018d4  e3500000          CMP      r0,#0                 ;777
0018d8  1a000003          BNE      |L1.6380|
0018dc  ebfffffe          BL       GetRTC2000
0018e0  e59d1020          LDR      r1,[sp,#0x20]         ;777
0018e4  e1500001          CMP      r0,r1                 ;777
0018e8  3afffff5          BCC      |L1.6340|
                  |L1.6380|
0018ec  e51f02d0          LDR      r0,|L1.5668|
0018f0  e5901000          LDR      r1,[r0,#0]            ;779  ; g_len
0018f4  e51f02d4          LDR      r0,|L1.5672|
0018f8  ebfffffe          BL       DbgRspDump
0018fc  e51f02dc          LDR      r0,|L1.5672|
001900  e5d03001          LDRB     r3,[r0,#1]            ;781  ; g_inbuff
001904  e5d02000          LDRB     r2,[r0,#0]            ;781  ; g_inbuff
001908  e51f02ec          LDR      r0,|L1.5668|
00190c  e5901000          LDR      r1,[r0,#0]            ;781  ; g_len
001910  e28f0f6a          ADR      r0,|L1.6848|
001914  ebfffffe          BL       terninalPrintf
001918  e51f02fc          LDR      r0,|L1.5668|
00191c  e5900000          LDR      r0,[r0,#0]            ;783  ; g_len
001920  e3500000          CMP      r0,#0                 ;783
001924  da00009f          BLE      |L1.7080|
001928  e51f0308          LDR      r0,|L1.5672|
00192c  e5d00000          LDRB     r0,[r0,#0]            ;783  ; g_inbuff
001930  e350007d          CMP      r0,#0x7d              ;783
001934  1a00009b          BNE      |L1.7080|
001938  e51f0318          LDR      r0,|L1.5672|
00193c  e5d00001          LDRB     r0,[r0,#1]            ;783  ; g_inbuff
001940  e3500000          CMP      r0,#0                 ;783
001944  1a000097          BNE      |L1.7080|
001948  e51f0328          LDR      r0,|L1.5672|
00194c  e5d00000          LDRB     r0,[r0,#0]            ;785  ; g_inbuff
001950  e51f12a8          LDR      r1,|L1.5808|
001954  e5c10000          STRB     r0,[r1,#0]            ;785  ; contRecvRsp
001958  e51f0338          LDR      r0,|L1.5672|
00195c  e5d00001          LDRB     r0,[r0,#1]            ;786  ; g_inbuff
001960  e5c10001          STRB     r0,[r1,#1]            ;786  ; contRecvRsp
001964  e51f0898          LDR      r0,|L1.4308|
001968  ebfffffe          BL       GetINT2
00196c  e51f12c4          LDR      r1,|L1.5808|
001970  e5c10002          STRB     r0,[r1,#2]            ;787  ; contRecvRsp
001974  e1a00420          LSR      r0,r0,#8              ;787
001978  e5c10003          STRB     r0,[r1,#3]            ;787  ; contRecvRsp
00197c  e51f08ac          LDR      r0,|L1.4312|
001980  ebfffffe          BL       GetINT4
001984  e1a08000          MOV      r8,r0                 ;788
001988  e59f115c          LDR      r1,|L1.6892|
00198c  ebfffffe          BL       __aeabi_uwrite4
001990  e51f12e8          LDR      r1,|L1.5808|
001994  e5d10003          LDRB     r0,[r1,#3]            ;789  ; contRecvRsp
001998  e5d11002          LDRB     r1,[r1,#2]            ;789  ; contRecvRsp
00199c  e1812400          ORR      r2,r1,r0,LSL #8       ;789
0019a0  e59f1148          LDR      r1,|L1.6896|
0019a4  e59f0148          LDR      r0,|L1.6900|
0019a8  ebfffffe          BL       __aeabi_memcpy
0019ac  e3570000          CMP      r7,#0                 ;791
0019b0  1a00005a          BNE      |L1.6944|
0019b4  e59f00c0          LDR      r0,|L1.6780|
0019b8  ebfffffe          BL       __aeabi_uread4
0019bc  e58d0010          STR      r0,[sp,#0x10]         ;794
0019c0  ebfffffe          BL       End4
0019c4  e1a08000          MOV      r8,r0                 ;794
0019c8  e59f011c          LDR      r0,|L1.6892|
0019cc  ebfffffe          BL       __aeabi_uread4
0019d0  e1580000          CMP      r8,r0                 ;794
0019d4  0a00006b          BEQ      |L1.7048|
0019d8  e51f3330          LDR      r3,|L1.5808|
0019dc  e5d31003          LDRB     r1,[r3,#3]            ;797  ; contRecvRsp
0019e0  e5d33002          LDRB     r3,[r3,#2]            ;797  ; contRecvRsp
0019e4  e1832401          ORR      r2,r3,r1,LSL #8       ;797
0019e8  e59d1018          LDR      r1,[sp,#0x18]         ;797
0019ec  e0850001          ADD      r0,r5,r1              ;797
0019f0  e59f10fc          LDR      r1,|L1.6900|
0019f4  ebfffffe          BL       __aeabi_memcpy
0019f8  e59f00ec          LDR      r0,|L1.6892|
0019fc  ebfffffe          BL       __aeabi_uread4
001a00  e1a08000          MOV      r8,r0                 ;799
001a04  e51f235c          LDR      r2,|L1.5808|
001a08  e5d20003          LDRB     r0,[r2,#3]            ;799  ; contRecvRsp
001a0c  e5d22002          LDRB     r2,[r2,#2]            ;799  ; contRecvRsp
001a10  e1821400          ORR      r1,r2,r0,LSL #8       ;799
001a14  e1a02008          MOV      r2,r8                 ;799
001a18  e28f00d8          ADR      r0,|L1.6904|
001a1c  ebfffffe          BL       terninalPrintf
001a20  e51f1378          LDR      r1,|L1.5808|
001a24  e5d10003          LDRB     r0,[r1,#3]            ;800  ; contRecvRsp
001a28  e5d11002          LDRB     r1,[r1,#2]            ;800  ; contRecvRsp
001a2c  e1810400          ORR      r0,r1,r0,LSL #8       ;800
001a30  e0444000          SUB      r4,r4,r0              ;800
001a34  e59f00b0          LDR      r0,|L1.6892|
001a38  ebfffffe          BL       __aeabi_uread4
001a3c  e58d0018          STR      r0,[sp,#0x18]         ;802
001a40  ea000050          B        |L1.7048|
                  |L1.6724|
                          DCD      ||.constdata||+0x7c
                  |L1.6728|
001a48  5b574152          DCB      "[WARNING!!!] CmdXFileContRecv pvPortMalloc ERROR\n",0
001a4c  4e494e47
001a50  2121215d
001a54  20436d64
001a58  5846696c
001a5c  65436f6e
001a60  74526563
001a64  76207076
001a68  506f7274
001a6c  4d616c6c
001a70  6f632045
001a74  52524f52
001a78  0a00    
001a7a  00                DCB      0
001a7b  00                DCB      0
                  |L1.6780|
                          DCD      contRecvCmd+0x4
                  |L1.6784|
001a80  665f6669          DCB      "f_fileID 0x%x contRecvCmd->f_offset:0x%x(%d), left file"
001a84  6c654944
001a88  20307825
001a8c  7820636f
001a90  6e745265
001a94  6376436d
001a98  642d3e66
001a9c  5f6f6666
001aa0  7365743a
001aa4  30782578
001aa8  28256429
001aac  2c206c65
001ab0  66742066
001ab4  696c65  
001ab7  4c656e3a          DCB      "Len:%d\n",0
001abb  25640a00
001abf  00                DCB      0
                  |L1.6848|
001ac0  675f6c65          DCB      "g_len:%d g_inbuff[0] :%x g_inbuff[1] :%x\n",0
001ac4  6e3a2564
001ac8  20675f69
001acc  6e627566
001ad0  665b305d
001ad4  203a2578
001ad8  20675f69
001adc  6e627566
001ae0  665b315d
001ae4  203a2578
001ae8  0a00    
001aea  00                DCB      0
001aeb  00                DCB      0
                  |L1.6892|
                          DCD      contRecvRsp+0x4
                  |L1.6896|
                          DCD      g_inbuff+0x8
                  |L1.6900|
                          DCD      contRecvRsp+0x8
                  |L1.6904|
001af8  436f6e74          DCB      "ContRecv success, wByte:%x nextOff:%lu\n",0
001afc  52656376
001b00  20737563
001b04  63657373
001b08  2c207742
001b0c  7974653a
001b10  2578206e
001b14  6578744f
001b18  66663a25
001b1c  6c750a00
                  |L1.6944|
001b20  e51f1478          LDR      r1,|L1.5808|
001b24  e5d13003          LDRB     r3,[r1,#3]            ;809  ; contRecvRsp
001b28  e5d11002          LDRB     r1,[r1,#2]            ;809  ; contRecvRsp
001b2c  e1812403          ORR      r2,r1,r3,LSL #8       ;809
001b30  e59d1018          LDR      r1,[sp,#0x18]         ;809
001b34  e0850001          ADD      r0,r5,r1              ;809
001b38  e51f104c          LDR      r1,|L1.6900|
001b3c  ebfffffe          BL       __aeabi_memcpy
001b40  e51f005c          LDR      r0,|L1.6892|
001b44  ebfffffe          BL       __aeabi_uread4
001b48  e1a08000          MOV      r8,r0                 ;811
001b4c  e51f24a4          LDR      r2,|L1.5808|
001b50  e5d20003          LDRB     r0,[r2,#3]            ;811  ; contRecvRsp
001b54  e5d22002          LDRB     r2,[r2,#2]            ;811  ; contRecvRsp
001b58  e1821400          ORR      r1,r2,r0,LSL #8       ;811
001b5c  e1a02008          MOV      r2,r8                 ;811
001b60  e28f0f4e          ADR      r0,|L1.7328|
001b64  ebfffffe          BL       terninalPrintf
001b68  e51f14c0          LDR      r1,|L1.5808|
001b6c  e5d10003          LDRB     r0,[r1,#3]            ;812  ; contRecvRsp
001b70  e5d11002          LDRB     r1,[r1,#2]            ;812  ; contRecvRsp
001b74  e1810400          ORR      r0,r1,r0,LSL #8       ;812
001b78  e0444000          SUB      r4,r4,r0              ;812
001b7c  e51f0098          LDR      r0,|L1.6892|
001b80  ebfffffe          BL       __aeabi_uread4
001b84  e58d0018          STR      r0,[sp,#0x18]         ;815
                  |L1.7048|
001b88  e3570000          CMP      r7,#0                 ;818
001b8c  0a000001          BEQ      |L1.7064|
001b90  e3a07000          MOV      r7,#0                 ;820
001b94  ea000002          B        |L1.7076|
                  |L1.7064|
001b98  e3540000          CMP      r4,#0                 ;822
001b9c  1a000000          BNE      |L1.7076|
001ba0  e3a07001          MOV      r7,#1                 ;825
                  |L1.7076|
001ba4  ea00000b          B        |L1.7128|
                  |L1.7080|
001ba8  e51f0500          LDR      r0,|L1.5808|
001bac  e5d02001          LDRB     r2,[r0,#1]            ;831  ; contRecvRsp
001bb0  e5d01000          LDRB     r1,[r0,#0]            ;831  ; contRecvRsp
001bb4  e28f0f49          ADR      r0,|L1.7392|
001bb8  ebfffffe          BL       terninalPrintf
001bbc  e3550000          CMP      r5,#0                 ;834
001bc0  0a000002          BEQ      |L1.7120|
001bc4  e51f0b40          LDR      r0,|L1.4236|
001bc8  e5900000          LDR      r0,[r0,#0]            ;836  ; OTPData
001bcc  ebfffffe          BL       vPortFree
                  |L1.7120|
001bd0  eafffee8          B        |L1.6008|
                  |L1.7124|
001bd4  eaffff39          B        |L1.6336|
                  |L1.7128|
001bd8  e1a00000          MOV      r0,r0                 ;827
001bdc  e1a01004          MOV      r1,r4                 ;842
001be0  e28f0f4d          ADR      r0,|L1.7452|
001be4  ebfffffe          BL       terninalPrintf
                  |L1.7144|
001be8  e3540000          CMP      r4,#0                 ;744
001bec  1afffee4          BNE      |L1.6020|
001bf0  e3570000          CMP      r7,#0                 ;744
001bf4  1afffee2          BNE      |L1.6020|
001bf8  e28f0f4a          ADR      r0,|L1.7464|
001bfc  e59d1014          LDR      r1,[sp,#0x14]         ;846
001c00  ebfffffe          BL       sysprintf
001c04  e3a08000          MOV      r8,#0                 ;847
001c08  ea00000a          B        |L1.7224|
                  |L1.7180|
001c0c  e7d51008          LDRB     r1,[r5,r8]            ;849
001c10  e28f0e13          ADR      r0,|L1.7496|
001c14  ebfffffe          BL       sysprintf
001c18  e3a0100a          MOV      r1,#0xa               ;850
001c1c  e1a00008          MOV      r0,r8                 ;850
001c20  ebfffffe          BL       __aeabi_idivmod
001c24  e3510009          CMP      r1,#9                 ;850
001c28  1a000001          BNE      |L1.7220|
001c2c  e28f0e12          ADR      r0,|L1.7508|
001c30  ebfffffe          BL       sysprintf
                  |L1.7220|
001c34  e2888001          ADD      r8,r8,#1              ;847
                  |L1.7224|
001c38  e59d0014          LDR      r0,[sp,#0x14]         ;847
001c3c  e1580000          CMP      r8,r0                 ;847
001c40  bafffff1          BLT      |L1.7180|
001c44  e28f0f43          ADR      r0,|L1.7512|
001c48  ebfffffe          BL       sysprintf
001c4c  e51f15a0          LDR      r1,|L1.5812|
001c50  e1a00009          MOV      r0,r9                 ;856
001c54  ebfffffe          BL       strcpy
001c58  e3a00000          MOV      r0,#0                 ;859
001c5c  e3a01001          MOV      r1,#1                 ;859
001c60  e58d0004          STR      r0,[sp,#4]            ;859
001c64  e1cd00f8          STRD     r0,r1,[sp,#8]         ;859
001c68  e58d0010          STR      r0,[sp,#0x10]         ;859
001c6c  e59d0014          LDR      r0,[sp,#0x14]         ;859
001c70  e1a03005          MOV      r3,r5                 ;859
001c74  e1a02009          MOV      r2,r9                 ;859
001c78  e28f10f4          ADR      r1,|L1.7540|
001c7c  e58d0000          STR      r0,[sp,#0]            ;859
001c80  e3a00002          MOV      r0,#2                 ;859
001c84  ebfffffe          BL       FileAgentAddData
001c88  e3500000          CMP      r0,#0                 ;859
001c8c  1a000045          BNE      |L1.7592|
001c90  e1a01009          MOV      r1,r9                 ;861
001c94  e28f00dc          ADR      r0,|L1.7544|
001c98  ebfffffe          BL       terninalPrintf
001c9c  ea000044          B        |L1.7604|
                  |L1.7328|
001ca0  436f6e74          DCB      "ContRecv success (u8_LastDummyPacket), wByte:%x nextOff"
001ca4  52656376
001ca8  20737563
001cac  63657373
001cb0  20287538
001cb4  5f4c6173
001cb8  7444756d
001cbc  6d795061
001cc0  636b6574
001cc4  292c2077
001cc8  42797465
001ccc  3a257820
001cd0  6e657874
001cd4  4f6666  
001cd7  3a256c75          DCB      ":%lu\n",0
001cdb  0a00    
001cdd  00                DCB      0
001cde  00                DCB      0
001cdf  00                DCB      0
                  |L1.7392|
001ce0  4661696c          DCB      "Fail in getting init recv response rspCode:%x, rspErr:%"
001ce4  20696e20
001ce8  67657474
001cec  696e6720
001cf0  696e6974
001cf4  20726563
001cf8  76207265
001cfc  73706f6e
001d00  73652072
001d04  7370436f
001d08  64653a25
001d0c  782c2072
001d10  73704572
001d14  723a25  
001d17  780a00            DCB      "x\n",0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  66696c65          DCB      "fileLen:%d\n",0
001d20  4c656e3a
001d24  25640a00
                  |L1.7464|
001d28  0d0a2d2d          DCB      "\r\n--- xFileDataPr [%d] --->\r\n",0
001d2c  2d207846
001d30  696c6544
001d34  61746150
001d38  72205b25
001d3c  645d202d
001d40  2d2d3e0d
001d44  0a00    
001d46  00                DCB      0
001d47  00                DCB      0
                  |L1.7496|
001d48  30782530          DCB      "0x%02x, ",0
001d4c  32782c20
001d50  00      
001d51  00                DCB      0
001d52  00                DCB      0
001d53  00                DCB      0
                  |L1.7508|
001d54  0d0a00            DCB      "\r\n",0
001d57  00                DCB      0
                  |L1.7512|
001d58  0d0a3c2d          DCB      "\r\n<--- xFileDataPr ---\r\n",0
001d5c  2d2d2078
001d60  46696c65
001d64  44617461
001d68  5072202d
001d6c  2d2d0d0a
001d70  00      
001d71  00                DCB      0
001d72  00                DCB      0
001d73  00                DCB      0
                  |L1.7540|
001d74  303a00            DCB      "0:",0
001d77  00                DCB      0
                  |L1.7544|
001d78  436d6458          DCB      "CmdXFileContRecv: Save FAIL, outFile fname:%s\n",0
001d7c  46696c65
001d80  436f6e74
001d84  52656376
001d88  3a205361
001d8c  76652046
001d90  41494c2c
001d94  206f7574
001d98  46696c65
001d9c  20666e61
001da0  6d653a25
001da4  730a00  
001da7  00                DCB      0
                  |L1.7592|
001da8  e1a01009          MOV      r1,r9                 ;865
001dac  e28f0fd1          ADR      r0,|L1.8440|
001db0  ebfffffe          BL       terninalPrintf
                  |L1.7604|
001db4  e3550000          CMP      r5,#0                 ;867
001db8  0a000002          BEQ      |L1.7624|
001dbc  e51f0d38          LDR      r0,|L1.4236|
001dc0  e5900000          LDR      r0,[r0,#0]            ;869  ; OTPData
001dc4  ebfffffe          BL       vPortFree
                  |L1.7624|
001dc8  e1a00000          MOV      r0,r0                 ;978
001dcc  eafffe69          B        |L1.6008|
;;;980    
                          ENDP

                  CmdAuthenticate PROC
;;;981    INT CmdAuthenticate (BYTE *u8_stage)
001dd0  e92d4030          PUSH     {r4,r5,lr}
;;;982    {
001dd4  e24dd02c          SUB      sp,sp,#0x2c
001dd8  e1a04000          MOV      r4,r0
;;;983        INT i;
;;;984        static BYTE rc[8]={1,3,5,7,9,11,13,15};
;;;985        BYTE enrc[8], enrr[8], rr[8];
;;;986        BYTE u8_key[16];
;;;987    
;;;988        f_encrypt=0;  //reset encryption flag every time try to auth
001ddc  e3a00000          MOV      r0,#0
001de0  e51f175c          LDR      r1,|L1.5772|
001de4  e5810000          STR      r0,[r1,#0]  ; f_encrypt
;;;989    
;;;990        GetKey (u8_key);
001de8  e28d0004          ADD      r0,sp,#4
001dec  ebfffffe          BL       GetKey
;;;991        memcpy (ka, u8_key, 8);
001df0  e3a02008          MOV      r2,#8
001df4  e28d1004          ADD      r1,sp,#4
001df8  e59f032c          LDR      r0,|L1.8492|
001dfc  ebfffffe          BL       __aeabi_memcpy
;;;992        memcpy (kb, u8_key+8, 8);
001e00  e3a02008          MOV      r2,#8
001e04  e28d100c          ADD      r1,sp,#0xc
001e08  e59f0320          LDR      r0,|L1.8496|
001e0c  ebfffffe          BL       __aeabi_memcpy
;;;993    
;;;994        for(i=0; i<8; i++)
001e10  e3a05000          MOV      r5,#0
001e14  ea000003          B        |L1.7720|
                  |L1.7704|
;;;995            rc[i]=rand ();
001e18  ebfffffe          BL       rand
001e1c  e59f1310          LDR      r1,|L1.8500|
001e20  e7c10005          STRB     r0,[r1,r5]
001e24  e2855001          ADD      r5,r5,#1              ;994
                  |L1.7720|
001e28  e3550008          CMP      r5,#8                 ;994
001e2c  bafffff9          BLT      |L1.7704|
;;;996    
;;;997        CscryptEncrypt (ka, rc, enrc, 1);        /* Encrypt Rc */
001e30  e3a03001          MOV      r3,#1
001e34  e28d2024          ADD      r2,sp,#0x24
001e38  e59f12f4          LDR      r1,|L1.8500|
001e3c  e59f02e8          LDR      r0,|L1.8492|
001e40  ebfffffe          BL       CscryptEncrypt
;;;998    
;;;999        *u8_stage=CSCMD_AUTH1;
001e44  e3a00004          MOV      r0,#4
001e48  e5c40000          STRB     r0,[r4,#0]
;;;1000       INITMSG ();
001e4c  e59f02e4          LDR      r0,|L1.8504|
001e50  e59f12e4          LDR      r1,|L1.8508|
001e54  e5810000          STR      r0,[r1,#0]  ; g_pmsg
001e58  e3a00000          MOV      r0,#0
001e5c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001e60  e5c10000          STRB     r0,[r1,#0]
001e64  e59f02d0          LDR      r0,|L1.8508|
001e68  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001e6c  e2800001          ADD      r0,r0,#1
001e70  e59f12c4          LDR      r1,|L1.8508|
001e74  e5810000          STR      r0,[r1,#0]  ; g_pmsg
001e78  e3a00000          MOV      r0,#0
001e7c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001e80  e5c10000          STRB     r0,[r1,#0]
001e84  e59f02b0          LDR      r0,|L1.8508|
001e88  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001e8c  e2800001          ADD      r0,r0,#1
001e90  e59f12a4          LDR      r1,|L1.8508|
001e94  e5810000          STR      r0,[r1,#0]  ; g_pmsg
001e98  e3a000ff          MOV      r0,#0xff
001e9c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001ea0  e5c10000          STRB     r0,[r1,#0]
001ea4  e59f0290          LDR      r0,|L1.8508|
001ea8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001eac  e2800001          ADD      r0,r0,#1
001eb0  e59f1284          LDR      r1,|L1.8508|
001eb4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
001eb8  e3a00000          MOV      r0,#0
001ebc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001ec0  e5c10000          STRB     r0,[r1,#0]
001ec4  e59f0270          LDR      r0,|L1.8508|
001ec8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001ecc  e2800001          ADD      r0,r0,#1
001ed0  e59f1264          LDR      r1,|L1.8508|
001ed4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
001ed8  e3a00000          MOV      r0,#0
001edc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001ee0  e5c10000          STRB     r0,[r1,#0]
001ee4  e59f0250          LDR      r0,|L1.8508|
001ee8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001eec  e2800001          ADD      r0,r0,#1
001ef0  e59f1244          LDR      r1,|L1.8508|
001ef4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1001       PUTBYTE (CSCMD_AUTH1);
001ef8  e3a00004          MOV      r0,#4
001efc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001f00  e5c10000          STRB     r0,[r1,#0]
001f04  e59f0230          LDR      r0,|L1.8508|
001f08  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001f0c  e2800001          ADD      r0,r0,#1
001f10  e59f1224          LDR      r1,|L1.8508|
001f14  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1002       PUTBYTE (0);
001f18  e3a00000          MOV      r0,#0
001f1c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001f20  e5c10000          STRB     r0,[r1,#0]
001f24  e59f0210          LDR      r0,|L1.8508|
001f28  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001f2c  e2800001          ADD      r0,r0,#1
001f30  e59f1204          LDR      r1,|L1.8508|
001f34  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1003       PUTBYTE (enrc[0]);
001f38  e5dd0024          LDRB     r0,[sp,#0x24]
001f3c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001f40  e5c10000          STRB     r0,[r1,#0]
001f44  e59f01f0          LDR      r0,|L1.8508|
001f48  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001f4c  e2800001          ADD      r0,r0,#1
001f50  e59f11e4          LDR      r1,|L1.8508|
001f54  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1004       PUTBYTE (enrc[1]);
001f58  e5dd0025          LDRB     r0,[sp,#0x25]
001f5c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001f60  e5c10000          STRB     r0,[r1,#0]
001f64  e59f01d0          LDR      r0,|L1.8508|
001f68  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001f6c  e2800001          ADD      r0,r0,#1
001f70  e59f11c4          LDR      r1,|L1.8508|
001f74  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1005       PUTBYTE (enrc[2]);
001f78  e5dd0026          LDRB     r0,[sp,#0x26]
001f7c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001f80  e5c10000          STRB     r0,[r1,#0]
001f84  e59f01b0          LDR      r0,|L1.8508|
001f88  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001f8c  e2800001          ADD      r0,r0,#1
001f90  e59f11a4          LDR      r1,|L1.8508|
001f94  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1006       PUTBYTE (enrc[3]);
001f98  e5dd0027          LDRB     r0,[sp,#0x27]
001f9c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001fa0  e5c10000          STRB     r0,[r1,#0]
001fa4  e59f0190          LDR      r0,|L1.8508|
001fa8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001fac  e2800001          ADD      r0,r0,#1
001fb0  e59f1184          LDR      r1,|L1.8508|
001fb4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1007       PUTBYTE (enrc[4]);
001fb8  e5dd0028          LDRB     r0,[sp,#0x28]
001fbc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001fc0  e5c10000          STRB     r0,[r1,#0]
001fc4  e59f0170          LDR      r0,|L1.8508|
001fc8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001fcc  e2800001          ADD      r0,r0,#1
001fd0  e59f1164          LDR      r1,|L1.8508|
001fd4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1008       PUTBYTE (enrc[5]);
001fd8  e5dd0029          LDRB     r0,[sp,#0x29]
001fdc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
001fe0  e5c10000          STRB     r0,[r1,#0]
001fe4  e59f0150          LDR      r0,|L1.8508|
001fe8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
001fec  e2800001          ADD      r0,r0,#1
001ff0  e59f1144          LDR      r1,|L1.8508|
001ff4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1009       PUTBYTE (enrc[6]);
001ff8  e5dd002a          LDRB     r0,[sp,#0x2a]
001ffc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002000  e5c10000          STRB     r0,[r1,#0]
002004  e59f0130          LDR      r0,|L1.8508|
002008  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00200c  e2800001          ADD      r0,r0,#1
002010  e59f1124          LDR      r1,|L1.8508|
002014  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1010       PUTBYTE (enrc[7]);
002018  e5dd002b          LDRB     r0,[sp,#0x2b]
00201c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002020  e5c10000          STRB     r0,[r1,#0]
002024  e59f0110          LDR      r0,|L1.8508|
002028  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00202c  e2800001          ADD      r0,r0,#1
002030  e59f1104          LDR      r1,|L1.8508|
002034  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1011       DbgCmdDump (g_msg, (g_pmsg-g_msg));
002038  e2810000          ADD      r0,r1,#0
00203c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002040  e59f20f0          LDR      r2,|L1.8504|
002044  e0401002          SUB      r1,r0,r2
002048  e2820000          ADD      r0,r2,#0
00204c  ebfffffe          BL       DbgCmdDump
;;;1012       SENDBLOCK (0);
002050  e3a00000          MOV      r0,#0
002054  e59f10e0          LDR      r1,|L1.8508|
002058  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00205c  e5c10000          STRB     r0,[r1,#0]
002060  e59f00d4          LDR      r0,|L1.8508|
002064  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002068  e2800001          ADD      r0,r0,#1
00206c  e59f10c8          LDR      r1,|L1.8508|
002070  e5810000          STR      r0,[r1,#0]  ; g_pmsg
002074  e3a00000          MOV      r0,#0
002078  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00207c  e5c10000          STRB     r0,[r1,#0]
002080  e59f00b4          LDR      r0,|L1.8508|
002084  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002088  e2800001          ADD      r0,r0,#1
00208c  e59f10a8          LDR      r1,|L1.8508|
002090  e5810000          STR      r0,[r1,#0]  ; g_pmsg
002094  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002098  e59f2098          LDR      r2,|L1.8504|
00209c  e0410002          SUB      r0,r1,r2
0020a0  e3a02000          MOV      r2,#0
0020a4  e59f108c          LDR      r1,|L1.8504|
0020a8  ebfffffe          BL       sendblock
;;;1013       READBLOCK (0);
0020ac  e3a00000          MOV      r0,#0
0020b0  ebfffffe          BL       READBLOCK
;;;1014       DbgRspDump (g_inbuff, g_len);
0020b4  e51f0a98          LDR      r0,|L1.5668|
0020b8  e5901000          LDR      r1,[r0,#0]  ; g_len
0020bc  e51f0a9c          LDR      r0,|L1.5672|
0020c0  ebfffffe          BL       DbgRspDump
;;;1015   
;;;1016       // verify response
;;;1017       if((g_inbuff[0]!=CSCMD_AUTH1+1)||(g_inbuff[1]!=0))
0020c4  e51f0aa4          LDR      r0,|L1.5672|
0020c8  e5d00000          LDRB     r0,[r0,#0]  ; g_inbuff
0020cc  e3500005          CMP      r0,#5
0020d0  1a000003          BNE      |L1.8420|
0020d4  e51f0ab4          LDR      r0,|L1.5672|
0020d8  e5d00001          LDRB     r0,[r0,#1]  ; g_inbuff
0020dc  e3500000          CMP      r0,#0
0020e0  0a00001a          BEQ      |L1.8528|
                  |L1.8420|
;;;1018       {
;;;1019           printf ("Auth 1 failed\n");
0020e4  e28f0054          ADR      r0,|L1.8512|
0020e8  ebfffffe          BL       terninalPrintf
;;;1020           return 1;
0020ec  e3a00001          MOV      r0,#1
                  |L1.8432|
0020f0  e28dd02c          ADD      sp,sp,#0x2c
;;;1021       }
;;;1022   
;;;1023       if(g_len<18)
;;;1024       {
;;;1025           printf ("Auth 1 response too short\n");
;;;1026           return 1;
;;;1027       }
;;;1028   
;;;1029       memcpy (enrc, &g_inbuff[2], 8);
;;;1030       memcpy (enrr, &g_inbuff[10], 8);
;;;1031   
;;;1032       CscryptEncrypt (kb, enrc, enrc, 0);  /* Decrypt Rc */
;;;1033       if(memcmp (rc, enrc, 8))
;;;1034       {
;;;1035           printf ("Auth 1 response failed\n");
;;;1036           return 1;
;;;1037       }
;;;1038   
;;;1039       // send auth 2 to reader
;;;1040       CscryptEncrypt (kb, enrr, rr, 0);    /* Decrypt Rr */
;;;1041       CscryptEncrypt (ka, rr, enrr, 1);    /* Encrypt Rr */
;;;1042   
;;;1043       *u8_stage=CSCMD_AUTH2;
;;;1044       INITMSG ();
;;;1045       PUTBYTE (CSCMD_AUTH2);
;;;1046       PUTBYTE (0);
;;;1047       PUTBYTE (enrr[0]);
;;;1048       PUTBYTE (enrr[1]);
;;;1049       PUTBYTE (enrr[2]);
;;;1050       PUTBYTE (enrr[3]);
;;;1051       PUTBYTE (enrr[4]);
;;;1052       PUTBYTE (enrr[5]);
;;;1053       PUTBYTE (enrr[6]);
;;;1054       PUTBYTE (enrr[7]);
;;;1055   
;;;1056       DbgCmdDump (g_msg, (g_pmsg-g_msg));
;;;1057       SENDBLOCK (0);
;;;1058       READBLOCK (0);
;;;1059       DbgRspDump (g_inbuff, g_len);
;;;1060   
;;;1061       if((g_inbuff[0]==CSCMD_AUTH2+1)&&(g_inbuff[1]==0))
;;;1062       {
;;;1063           memcpy (msgkey, rr, 8);
;;;1064           f_encrypt=1;
;;;1065           return 0;
;;;1066       }
;;;1067       else
;;;1068       {
;;;1069           printf ("Auth 2 failed\n");
;;;1070           return 1;
;;;1071       }
;;;1072   }
0020f4  e8bd8030          POP      {r4,r5,pc}
                  |L1.8440|
0020f8  436d6458          DCB      "CmdXFileContRecv: Save SUCCESS, outFile fname:%s\n",0
0020fc  46696c65
002100  436f6e74
002104  52656376
002108  3a205361
00210c  76652053
002110  55434345
002114  53532c20
002118  6f757446
00211c  696c6520
002120  666e616d
002124  653a2573
002128  0a00    
00212a  00                DCB      0
00212b  00                DCB      0
                  |L1.8492|
                          DCD      ||ka||
                  |L1.8496|
                          DCD      ||kb||
                  |L1.8500|
                          DCD      ||rc||
                  |L1.8504|
                          DCD      g_msg
                  |L1.8508|
                          DCD      g_pmsg
                  |L1.8512|
002140  41757468          DCB      "Auth 1 failed\n",0
002144  20312066
002148  61696c65
00214c  640a00  
00214f  00                DCB      0
                  |L1.8528|
002150  e51f0b34          LDR      r0,|L1.5668|
002154  e5900000          LDR      r0,[r0,#0]            ;1023  ; g_len
002158  e3500012          CMP      r0,#0x12              ;1023
00215c  aa000003          BGE      |L1.8560|
002160  e28f0e35          ADR      r0,|L1.9400|
002164  ebfffffe          BL       terninalPrintf
002168  e3a00001          MOV      r0,#1                 ;1026
00216c  eaffffdf          B        |L1.8432|
                  |L1.8560|
002170  e3a02008          MOV      r2,#8                 ;1029
002174  e59f1358          LDR      r1,|L1.9428|
002178  e28d0024          ADD      r0,sp,#0x24           ;1029
00217c  ebfffffe          BL       __aeabi_memcpy
002180  e3a02008          MOV      r2,#8                 ;1030
002184  e59f134c          LDR      r1,|L1.9432|
002188  e28d001c          ADD      r0,sp,#0x1c           ;1030
00218c  ebfffffe          BL       __aeabi_memcpy
002190  e3a03000          MOV      r3,#0                 ;1032
002194  e28d2024          ADD      r2,sp,#0x24           ;1032
002198  e28d1024          ADD      r1,sp,#0x24           ;1032
00219c  e51f0074          LDR      r0,|L1.8496|
0021a0  ebfffffe          BL       CscryptEncrypt
0021a4  e3a02008          MOV      r2,#8                 ;1033
0021a8  e28d1024          ADD      r1,sp,#0x24           ;1033
0021ac  e51f0080          LDR      r0,|L1.8500|
0021b0  ebfffffe          BL       memcmp
0021b4  e3500000          CMP      r0,#0                 ;1033
0021b8  0a000003          BEQ      |L1.8652|
0021bc  e28f0fc6          ADR      r0,|L1.9436|
0021c0  ebfffffe          BL       terninalPrintf
0021c4  e3a00001          MOV      r0,#1                 ;1036
0021c8  eaffffc8          B        |L1.8432|
                  |L1.8652|
0021cc  e3a03000          MOV      r3,#0                 ;1040
0021d0  e28d2014          ADD      r2,sp,#0x14           ;1040
0021d4  e28d101c          ADD      r1,sp,#0x1c           ;1040
0021d8  e51f00b0          LDR      r0,|L1.8496|
0021dc  ebfffffe          BL       CscryptEncrypt
0021e0  e3a03001          MOV      r3,#1                 ;1041
0021e4  e28d201c          ADD      r2,sp,#0x1c           ;1041
0021e8  e28d1014          ADD      r1,sp,#0x14           ;1041
0021ec  e51f00c8          LDR      r0,|L1.8492|
0021f0  ebfffffe          BL       CscryptEncrypt
0021f4  e3a00006          MOV      r0,#6                 ;1043
0021f8  e5c40000          STRB     r0,[r4,#0]            ;1043
0021fc  e51f00cc          LDR      r0,|L1.8504|
002200  e51f10cc          LDR      r1,|L1.8508|
002204  e5810000          STR      r0,[r1,#0]            ;1044  ; g_pmsg
002208  e3a00000          MOV      r0,#0                 ;1044
00220c  e5911000          LDR      r1,[r1,#0]            ;1044  ; g_pmsg
002210  e5c10000          STRB     r0,[r1,#0]            ;1044
002214  e51f00e0          LDR      r0,|L1.8508|
002218  e5900000          LDR      r0,[r0,#0]            ;1044  ; g_pmsg
00221c  e2800001          ADD      r0,r0,#1              ;1044
002220  e51f10ec          LDR      r1,|L1.8508|
002224  e5810000          STR      r0,[r1,#0]            ;1044  ; g_pmsg
002228  e3a00000          MOV      r0,#0                 ;1044
00222c  e5911000          LDR      r1,[r1,#0]            ;1044  ; g_pmsg
002230  e5c10000          STRB     r0,[r1,#0]            ;1044
002234  e51f0100          LDR      r0,|L1.8508|
002238  e5900000          LDR      r0,[r0,#0]            ;1044  ; g_pmsg
00223c  e2800001          ADD      r0,r0,#1              ;1044
002240  e51f110c          LDR      r1,|L1.8508|
002244  e5810000          STR      r0,[r1,#0]            ;1044  ; g_pmsg
002248  e3a000ff          MOV      r0,#0xff              ;1044
00224c  e5911000          LDR      r1,[r1,#0]            ;1044  ; g_pmsg
002250  e5c10000          STRB     r0,[r1,#0]            ;1044
002254  e51f0120          LDR      r0,|L1.8508|
002258  e5900000          LDR      r0,[r0,#0]            ;1044  ; g_pmsg
00225c  e2800001          ADD      r0,r0,#1              ;1044
002260  e51f112c          LDR      r1,|L1.8508|
002264  e5810000          STR      r0,[r1,#0]            ;1044  ; g_pmsg
002268  e3a00000          MOV      r0,#0                 ;1044
00226c  e5911000          LDR      r1,[r1,#0]            ;1044  ; g_pmsg
002270  e5c10000          STRB     r0,[r1,#0]            ;1044
002274  e51f0140          LDR      r0,|L1.8508|
002278  e5900000          LDR      r0,[r0,#0]            ;1044  ; g_pmsg
00227c  e2800001          ADD      r0,r0,#1              ;1044
002280  e51f114c          LDR      r1,|L1.8508|
002284  e5810000          STR      r0,[r1,#0]            ;1044  ; g_pmsg
002288  e3a00000          MOV      r0,#0                 ;1044
00228c  e5911000          LDR      r1,[r1,#0]            ;1044  ; g_pmsg
002290  e5c10000          STRB     r0,[r1,#0]            ;1044
002294  e51f0160          LDR      r0,|L1.8508|
002298  e5900000          LDR      r0,[r0,#0]            ;1044  ; g_pmsg
00229c  e2800001          ADD      r0,r0,#1              ;1044
0022a0  e51f116c          LDR      r1,|L1.8508|
0022a4  e5810000          STR      r0,[r1,#0]            ;1044  ; g_pmsg
0022a8  e3a00006          MOV      r0,#6                 ;1045
0022ac  e5911000          LDR      r1,[r1,#0]            ;1045  ; g_pmsg
0022b0  e5c10000          STRB     r0,[r1,#0]            ;1045
0022b4  e51f0180          LDR      r0,|L1.8508|
0022b8  e5900000          LDR      r0,[r0,#0]            ;1045  ; g_pmsg
0022bc  e2800001          ADD      r0,r0,#1              ;1045
0022c0  e51f118c          LDR      r1,|L1.8508|
0022c4  e5810000          STR      r0,[r1,#0]            ;1045  ; g_pmsg
0022c8  e3a00000          MOV      r0,#0                 ;1046
0022cc  e5911000          LDR      r1,[r1,#0]            ;1046  ; g_pmsg
0022d0  e5c10000          STRB     r0,[r1,#0]            ;1046
0022d4  e51f01a0          LDR      r0,|L1.8508|
0022d8  e5900000          LDR      r0,[r0,#0]            ;1046  ; g_pmsg
0022dc  e2800001          ADD      r0,r0,#1              ;1046
0022e0  e51f11ac          LDR      r1,|L1.8508|
0022e4  e5810000          STR      r0,[r1,#0]            ;1046  ; g_pmsg
0022e8  e5dd001c          LDRB     r0,[sp,#0x1c]         ;1047
0022ec  e5911000          LDR      r1,[r1,#0]            ;1047  ; g_pmsg
0022f0  e5c10000          STRB     r0,[r1,#0]            ;1047
0022f4  e51f01c0          LDR      r0,|L1.8508|
0022f8  e5900000          LDR      r0,[r0,#0]            ;1047  ; g_pmsg
0022fc  e2800001          ADD      r0,r0,#1              ;1047
002300  e51f11cc          LDR      r1,|L1.8508|
002304  e5810000          STR      r0,[r1,#0]            ;1047  ; g_pmsg
002308  e5dd001d          LDRB     r0,[sp,#0x1d]         ;1048
00230c  e5911000          LDR      r1,[r1,#0]            ;1048  ; g_pmsg
002310  e5c10000          STRB     r0,[r1,#0]            ;1048
002314  e51f01e0          LDR      r0,|L1.8508|
002318  e5900000          LDR      r0,[r0,#0]            ;1048  ; g_pmsg
00231c  e2800001          ADD      r0,r0,#1              ;1048
002320  e51f11ec          LDR      r1,|L1.8508|
002324  e5810000          STR      r0,[r1,#0]            ;1048  ; g_pmsg
002328  e5dd001e          LDRB     r0,[sp,#0x1e]         ;1049
00232c  e5911000          LDR      r1,[r1,#0]            ;1049  ; g_pmsg
002330  e5c10000          STRB     r0,[r1,#0]            ;1049
002334  e51f0200          LDR      r0,|L1.8508|
002338  e5900000          LDR      r0,[r0,#0]            ;1049  ; g_pmsg
00233c  e2800001          ADD      r0,r0,#1              ;1049
002340  e51f120c          LDR      r1,|L1.8508|
002344  e5810000          STR      r0,[r1,#0]            ;1049  ; g_pmsg
002348  e5dd001f          LDRB     r0,[sp,#0x1f]         ;1050
00234c  e5911000          LDR      r1,[r1,#0]            ;1050  ; g_pmsg
002350  e5c10000          STRB     r0,[r1,#0]            ;1050
002354  e51f0220          LDR      r0,|L1.8508|
002358  e5900000          LDR      r0,[r0,#0]            ;1050  ; g_pmsg
00235c  e2800001          ADD      r0,r0,#1              ;1050
002360  e51f122c          LDR      r1,|L1.8508|
002364  e5810000          STR      r0,[r1,#0]            ;1050  ; g_pmsg
002368  e5dd0020          LDRB     r0,[sp,#0x20]         ;1051
00236c  e5911000          LDR      r1,[r1,#0]            ;1051  ; g_pmsg
002370  e5c10000          STRB     r0,[r1,#0]            ;1051
002374  e51f0240          LDR      r0,|L1.8508|
002378  e5900000          LDR      r0,[r0,#0]            ;1051  ; g_pmsg
00237c  e2800001          ADD      r0,r0,#1              ;1051
002380  e51f124c          LDR      r1,|L1.8508|
002384  e5810000          STR      r0,[r1,#0]            ;1051  ; g_pmsg
002388  e5dd0021          LDRB     r0,[sp,#0x21]         ;1052
00238c  e5911000          LDR      r1,[r1,#0]            ;1052  ; g_pmsg
002390  e5c10000          STRB     r0,[r1,#0]            ;1052
002394  e51f0260          LDR      r0,|L1.8508|
002398  e5900000          LDR      r0,[r0,#0]            ;1052  ; g_pmsg
00239c  e2800001          ADD      r0,r0,#1              ;1052
0023a0  e51f126c          LDR      r1,|L1.8508|
0023a4  e5810000          STR      r0,[r1,#0]            ;1052  ; g_pmsg
0023a8  e5dd0022          LDRB     r0,[sp,#0x22]         ;1053
0023ac  e5911000          LDR      r1,[r1,#0]            ;1053  ; g_pmsg
0023b0  e5c10000          STRB     r0,[r1,#0]            ;1053
0023b4  e51f0280          LDR      r0,|L1.8508|
0023b8  e5900000          LDR      r0,[r0,#0]            ;1053  ; g_pmsg
0023bc  e2800001          ADD      r0,r0,#1              ;1053
0023c0  e51f128c          LDR      r1,|L1.8508|
0023c4  e5810000          STR      r0,[r1,#0]            ;1053  ; g_pmsg
0023c8  e5dd0023          LDRB     r0,[sp,#0x23]         ;1054
0023cc  e5911000          LDR      r1,[r1,#0]            ;1054  ; g_pmsg
0023d0  e5c10000          STRB     r0,[r1,#0]            ;1054
0023d4  e51f02a0          LDR      r0,|L1.8508|
0023d8  e5900000          LDR      r0,[r0,#0]            ;1054  ; g_pmsg
0023dc  e2800001          ADD      r0,r0,#1              ;1054
0023e0  e51f12ac          LDR      r1,|L1.8508|
0023e4  e5810000          STR      r0,[r1,#0]            ;1054  ; g_pmsg
0023e8  e2810000          ADD      r0,r1,#0              ;1056
0023ec  e5900000          LDR      r0,[r0,#0]            ;1056  ; g_pmsg
0023f0  e51f22c0          LDR      r2,|L1.8504|
0023f4  e0401002          SUB      r1,r0,r2              ;1056
0023f8  e2820000          ADD      r0,r2,#0              ;1056
0023fc  ebfffffe          BL       DbgCmdDump
002400  e3a00000          MOV      r0,#0                 ;1057
002404  e51f12d0          LDR      r1,|L1.8508|
002408  e5911000          LDR      r1,[r1,#0]            ;1057  ; g_pmsg
00240c  e5c10000          STRB     r0,[r1,#0]            ;1057
002410  e51f02dc          LDR      r0,|L1.8508|
002414  e5900000          LDR      r0,[r0,#0]            ;1057  ; g_pmsg
002418  e2800001          ADD      r0,r0,#1              ;1057
00241c  e51f12e8          LDR      r1,|L1.8508|
002420  e5810000          STR      r0,[r1,#0]            ;1057  ; g_pmsg
002424  e3a00000          MOV      r0,#0                 ;1057
002428  e5911000          LDR      r1,[r1,#0]            ;1057  ; g_pmsg
00242c  e5c10000          STRB     r0,[r1,#0]            ;1057
002430  e51f02fc          LDR      r0,|L1.8508|
002434  e5900000          LDR      r0,[r0,#0]            ;1057  ; g_pmsg
002438  e2800001          ADD      r0,r0,#1              ;1057
00243c  e51f1308          LDR      r1,|L1.8508|
002440  e5810000          STR      r0,[r1,#0]            ;1057  ; g_pmsg
002444  e5911000          LDR      r1,[r1,#0]            ;1057  ; g_pmsg
002448  e51f2318          LDR      r2,|L1.8504|
00244c  e0410002          SUB      r0,r1,r2              ;1057
002450  e3a02000          MOV      r2,#0                 ;1057
002454  e51f1324          LDR      r1,|L1.8504|
002458  ebfffffe          BL       sendblock
00245c  e3a00000          MOV      r0,#0                 ;1058
002460  ebfffffe          BL       READBLOCK
002464  e51f0e48          LDR      r0,|L1.5668|
002468  e5901000          LDR      r1,[r0,#0]            ;1059  ; g_len
00246c  e51f0e4c          LDR      r0,|L1.5672|
002470  ebfffffe          BL       DbgRspDump
002474  e51f0e54          LDR      r0,|L1.5672|
002478  e5d00000          LDRB     r0,[r0,#0]            ;1061  ; g_inbuff
00247c  e3500007          CMP      r0,#7                 ;1061
002480  1a00001c          BNE      |L1.9464|
002484  e51f0e64          LDR      r0,|L1.5672|
002488  e5d00001          LDRB     r0,[r0,#1]            ;1061  ; g_inbuff
00248c  e3500000          CMP      r0,#0                 ;1061
002490  1a000018          BNE      |L1.9464|
002494  e59f0058          LDR      r0,|L1.9460|
002498  e59d1014          LDR      r1,[sp,#0x14]         ;1063
00249c  e59d2018          LDR      r2,[sp,#0x18]         ;1063
0024a0  e8800006          STM      r0,{r1,r2}            ;1063  ; msgkey, msgkey
0024a4  e3a00001          MOV      r0,#1                 ;1064
0024a8  e51f1e24          LDR      r1,|L1.5772|
0024ac  e5810000          STR      r0,[r1,#0]            ;1064  ; f_encrypt
0024b0  e3a00000          MOV      r0,#0                 ;1065
0024b4  eaffff0d          B        |L1.8432|
                  |L1.9400|
0024b8  41757468          DCB      "Auth 1 response too short\n",0
0024bc  20312072
0024c0  6573706f
0024c4  6e736520
0024c8  746f6f20
0024cc  73686f72
0024d0  740a00  
0024d3  00                DCB      0
                  |L1.9428|
                          DCD      g_inbuff+0x2
                  |L1.9432|
                          DCD      g_inbuff+0xa
                  |L1.9436|
0024dc  41757468          DCB      "Auth 1 response failed\n",0
0024e0  20312072
0024e4  6573706f
0024e8  6e736520
0024ec  6661696c
0024f0  65640a00
                  |L1.9460|
                          DCD      msgkey
                  |L1.9464|
0024f8  e28f0fe7          ADR      r0,|L1.10396|
0024fc  ebfffffe          BL       terninalPrintf
002500  e3a00001          MOV      r0,#1                 ;1070
002504  eafffef9          B        |L1.8432|
;;;1073   
                          ENDP

                  CmdTimeVer PROC
;;;1074   void CmdTimeVer (UINT * u32_time)
002508  e92d4070          PUSH     {r4-r6,lr}
;;;1075   {
00250c  e24dd020          SUB      sp,sp,#0x20
002510  e1a04000          MOV      r4,r0
;;;1076       //46 00 07 7F 02 09 02 0B 06 13 00 00 00 00 00
;;;1077   
;;;1078       time_t sec;
;;;1079       struct tm *tms;
;;;1080       UINT u32_temp[6];
;;;1081   
;;;1082       memset (u32_temp, 0, sizeof (u32_temp));
002514  e3a01018          MOV      r1,#0x18
002518  e28d0004          ADD      r0,sp,#4
00251c  ebfffffe          BL       __aeabi_memclr4
;;;1083   
;;;1084       INITMSG ();
002520  e51f03f0          LDR      r0,|L1.8504|
002524  e51f13f0          LDR      r1,|L1.8508|
002528  e5810000          STR      r0,[r1,#0]  ; g_pmsg
00252c  e3a00000          MOV      r0,#0
002530  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002534  e5c10000          STRB     r0,[r1,#0]
002538  e51f0404          LDR      r0,|L1.8508|
00253c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002540  e2800001          ADD      r0,r0,#1
002544  e51f1410          LDR      r1,|L1.8508|
002548  e5810000          STR      r0,[r1,#0]  ; g_pmsg
00254c  e3a00000          MOV      r0,#0
002550  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002554  e5c10000          STRB     r0,[r1,#0]
002558  e51f0424          LDR      r0,|L1.8508|
00255c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002560  e2800001          ADD      r0,r0,#1
002564  e51f1430          LDR      r1,|L1.8508|
002568  e5810000          STR      r0,[r1,#0]  ; g_pmsg
00256c  e3a000ff          MOV      r0,#0xff
002570  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002574  e5c10000          STRB     r0,[r1,#0]
002578  e51f0444          LDR      r0,|L1.8508|
00257c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002580  e2800001          ADD      r0,r0,#1
002584  e51f1450          LDR      r1,|L1.8508|
002588  e5810000          STR      r0,[r1,#0]  ; g_pmsg
00258c  e3a00000          MOV      r0,#0
002590  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002594  e5c10000          STRB     r0,[r1,#0]
002598  e51f0464          LDR      r0,|L1.8508|
00259c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0025a0  e2800001          ADD      r0,r0,#1
0025a4  e51f1470          LDR      r1,|L1.8508|
0025a8  e5810000          STR      r0,[r1,#0]  ; g_pmsg
0025ac  e3a00000          MOV      r0,#0
0025b0  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0025b4  e5c10000          STRB     r0,[r1,#0]
0025b8  e51f0484          LDR      r0,|L1.8508|
0025bc  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0025c0  e2800001          ADD      r0,r0,#1
0025c4  e51f1490          LDR      r1,|L1.8508|
0025c8  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1085       /*
;;;1086       g_pmsg=g_msg;
;;;1087       *g_pmsg++=0x0;
;;;1088       *g_pmsg++=0;
;;;1089       *g_pmsg++=0xff;
;;;1090       *g_pmsg++=0;
;;;1091       *g_pmsg++=0;
;;;1092       */
;;;1093       PUTBYTE (CSCMD_TIMEVER);
0025cc  e3a00046          MOV      r0,#0x46
0025d0  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0025d4  e5c10000          STRB     r0,[r1,#0]
0025d8  e51f04a4          LDR      r0,|L1.8508|
0025dc  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0025e0  e2800001          ADD      r0,r0,#1
0025e4  e51f14b0          LDR      r1,|L1.8508|
0025e8  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1094       //*g_pmsg++=(BYTE) (b) 
;;;1095   
;;;1096       PUTBYTE (0);
0025ec  e3a00000          MOV      r0,#0
0025f0  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0025f4  e5c10000          STRB     r0,[r1,#0]
0025f8  e51f04c4          LDR      r0,|L1.8508|
0025fc  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002600  e2800001          ADD      r0,r0,#1
002604  e51f14d0          LDR      r1,|L1.8508|
002608  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1097   #if(1)
;;;1098       if(memcmp (u32_temp, u32_time, sizeof (u32_temp))==0)
00260c  e3a02018          MOV      r2,#0x18
002610  e1a01004          MOV      r1,r4
002614  e28d0004          ADD      r0,sp,#4
002618  ebfffffe          BL       memcmp
00261c  e3500000          CMP      r0,#0
002620  1a0000a6          BNE      |L1.10432|
;;;1099       {
;;;1100           time (&sec);
002624  e28d001c          ADD      r0,sp,#0x1c
002628  ebfffffe          BL       time
;;;1101           tms=gmtime (&sec);
00262c  e28d001c          ADD      r0,sp,#0x1c
002630  ebfffffe          BL       gmtime
002634  e1a05000          MOV      r5,r0
;;;1102           PUTBYTE (tms->tm_sec%10);
002638  e3a0100a          MOV      r1,#0xa
00263c  e5950000          LDR      r0,[r5,#0]
002640  ebfffffe          BL       __aeabi_idivmod
002644  e20100ff          AND      r0,r1,#0xff
002648  e51f1514          LDR      r1,|L1.8508|
00264c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002650  e5c10000          STRB     r0,[r1,#0]
002654  e51f0520          LDR      r0,|L1.8508|
002658  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00265c  e2800001          ADD      r0,r0,#1
002660  e51f152c          LDR      r1,|L1.8508|
002664  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1103           PUTBYTE (tms->tm_sec/10);
002668  e3a0100a          MOV      r1,#0xa
00266c  e5950000          LDR      r0,[r5,#0]
002670  ebfffffe          BL       __aeabi_idivmod
002674  e51f1540          LDR      r1,|L1.8508|
002678  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00267c  e5c10000          STRB     r0,[r1,#0]
002680  e51f054c          LDR      r0,|L1.8508|
002684  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002688  e2800001          ADD      r0,r0,#1
00268c  e51f1558          LDR      r1,|L1.8508|
002690  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1104           PUTBYTE (tms->tm_min%10);
002694  e3a0100a          MOV      r1,#0xa
002698  e5950004          LDR      r0,[r5,#4]
00269c  ebfffffe          BL       __aeabi_idivmod
0026a0  e20100ff          AND      r0,r1,#0xff
0026a4  e51f1570          LDR      r1,|L1.8508|
0026a8  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0026ac  e5c10000          STRB     r0,[r1,#0]
0026b0  e51f057c          LDR      r0,|L1.8508|
0026b4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0026b8  e2800001          ADD      r0,r0,#1
0026bc  e51f1588          LDR      r1,|L1.8508|
0026c0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1105           PUTBYTE (tms->tm_min/10);
0026c4  e3a0100a          MOV      r1,#0xa
0026c8  e5950004          LDR      r0,[r5,#4]
0026cc  ebfffffe          BL       __aeabi_idivmod
0026d0  e51f159c          LDR      r1,|L1.8508|
0026d4  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0026d8  e5c10000          STRB     r0,[r1,#0]
0026dc  e51f05a8          LDR      r0,|L1.8508|
0026e0  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0026e4  e2800001          ADD      r0,r0,#1
0026e8  e51f15b4          LDR      r1,|L1.8508|
0026ec  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1106           PUTBYTE (tms->tm_hour%10);
0026f0  e3a0100a          MOV      r1,#0xa
0026f4  e5950008          LDR      r0,[r5,#8]
0026f8  ebfffffe          BL       __aeabi_idivmod
0026fc  e20100ff          AND      r0,r1,#0xff
002700  e51f15cc          LDR      r1,|L1.8508|
002704  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002708  e5c10000          STRB     r0,[r1,#0]
00270c  e51f05d8          LDR      r0,|L1.8508|
002710  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002714  e2800001          ADD      r0,r0,#1
002718  e51f15e4          LDR      r1,|L1.8508|
00271c  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1107           PUTBYTE (tms->tm_hour/10);
002720  e3a0100a          MOV      r1,#0xa
002724  e5950008          LDR      r0,[r5,#8]
002728  ebfffffe          BL       __aeabi_idivmod
00272c  e51f15f8          LDR      r1,|L1.8508|
002730  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002734  e5c10000          STRB     r0,[r1,#0]
002738  e51f0604          LDR      r0,|L1.8508|
00273c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002740  e2800001          ADD      r0,r0,#1
002744  e51f1610          LDR      r1,|L1.8508|
002748  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1108           PUTBYTE (tms->tm_mday%10);
00274c  e3a0100a          MOV      r1,#0xa
002750  e595000c          LDR      r0,[r5,#0xc]
002754  ebfffffe          BL       __aeabi_idivmod
002758  e20100ff          AND      r0,r1,#0xff
00275c  e51f1628          LDR      r1,|L1.8508|
002760  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002764  e5c10000          STRB     r0,[r1,#0]
002768  e51f0634          LDR      r0,|L1.8508|
00276c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002770  e2800001          ADD      r0,r0,#1
002774  e51f1640          LDR      r1,|L1.8508|
002778  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1109           PUTBYTE (tms->tm_mday/10);
00277c  e3a0100a          MOV      r1,#0xa
002780  e595000c          LDR      r0,[r5,#0xc]
002784  ebfffffe          BL       __aeabi_idivmod
002788  e51f1654          LDR      r1,|L1.8508|
00278c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002790  e5c10000          STRB     r0,[r1,#0]
002794  e51f0660          LDR      r0,|L1.8508|
002798  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00279c  e2800001          ADD      r0,r0,#1
0027a0  e51f166c          LDR      r1,|L1.8508|
0027a4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1110           PUTBYTE ((tms->tm_mon+1)%10);
0027a8  e5951010          LDR      r1,[r5,#0x10]
0027ac  e2810001          ADD      r0,r1,#1
0027b0  e3a0100a          MOV      r1,#0xa
0027b4  ebfffffe          BL       __aeabi_idivmod
0027b8  e20100ff          AND      r0,r1,#0xff
0027bc  e51f1688          LDR      r1,|L1.8508|
0027c0  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0027c4  e5c10000          STRB     r0,[r1,#0]
0027c8  e51f0694          LDR      r0,|L1.8508|
0027cc  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0027d0  e2800001          ADD      r0,r0,#1
0027d4  e51f16a0          LDR      r1,|L1.8508|
0027d8  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1111           PUTBYTE ((tms->tm_mon+1)/10);
0027dc  e5951010          LDR      r1,[r5,#0x10]
0027e0  e2810001          ADD      r0,r1,#1
0027e4  e3a0100a          MOV      r1,#0xa
0027e8  ebfffffe          BL       __aeabi_idivmod
0027ec  e51f16b8          LDR      r1,|L1.8508|
0027f0  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0027f4  e5c10000          STRB     r0,[r1,#0]
0027f8  e51f06c4          LDR      r0,|L1.8508|
0027fc  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002800  e2800001          ADD      r0,r0,#1
002804  e51f16d0          LDR      r1,|L1.8508|
002808  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1112           PUTBYTE ((tms->tm_year+1900)%10);
00280c  e5951014          LDR      r1,[r5,#0x14]
002810  e2810b01          ADD      r0,r1,#0x400
002814  e2800fdb          ADD      r0,r0,#0x36c
002818  e3a0100a          MOV      r1,#0xa
00281c  ebfffffe          BL       __aeabi_idivmod
002820  e20100ff          AND      r0,r1,#0xff
002824  e51f16f0          LDR      r1,|L1.8508|
002828  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
00282c  e5c10000          STRB     r0,[r1,#0]
002830  e51f06fc          LDR      r0,|L1.8508|
002834  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002838  e2800001          ADD      r0,r0,#1
00283c  e51f1708          LDR      r1,|L1.8508|
002840  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1113           PUTBYTE (((tms->tm_year+1900)%100)/10);
002844  e5951014          LDR      r1,[r5,#0x14]
002848  e2810b01          ADD      r0,r1,#0x400
00284c  e2800fdb          ADD      r0,r0,#0x36c
002850  e3a01064          MOV      r1,#0x64
002854  ebfffffe          BL       __aeabi_idivmod
002858  e1a06001          MOV      r6,r1
00285c  e3a0100a          MOV      r1,#0xa
002860  e1a00006          MOV      r0,r6
002864  ebfffffe          BL       __aeabi_idivmod
002868  e51f1734          LDR      r1,|L1.8508|
00286c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002870  e5c10000          STRB     r0,[r1,#0]
002874  e51f0740          LDR      r0,|L1.8508|
002878  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00287c  e2800001          ADD      r0,r0,#1
002880  e51f174c          LDR      r1,|L1.8508|
002884  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1114           PUTBYTE (0);     //day of the week, set to 0 as not interpret by R/W
002888  e3a00000          MOV      r0,#0
00288c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002890  e5c10000          STRB     r0,[r1,#0]
002894  e51f0760          LDR      r0,|L1.8508|
002898  ea000003          B        |L1.10412|
                  |L1.10396|
00289c  41757468          DCB      "Auth 2 failed\n",0
0028a0  20322066
0028a4  61696c65
0028a8  640a00  
0028ab  00                DCB      0
                  |L1.10412|
0028ac  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0028b0  e2800001          ADD      r0,r0,#1
0028b4  e51f1780          LDR      r1,|L1.8508|
0028b8  e5810000          STR      r0,[r1,#0]  ; g_pmsg
0028bc  ea00008b          B        |L1.10992|
                  |L1.10432|
;;;1115       }
;;;1116       else
;;;1117       {
;;;1118          // terninalPrintf (" u32_time = [%d/%d/%d %d:%d:%d]\r\n", u32_time[5], u32_time[4], u32_time[3], u32_time[2], u32_time[1], u32_time[0]);
;;;1119           PUTBYTE (u32_time[0]%10);  //second
0028c0  e3a0100a          MOV      r1,#0xa
0028c4  e5940000          LDR      r0,[r4,#0]
0028c8  ebfffffe          BL       __aeabi_uidivmod
0028cc  e51f0798          LDR      r0,|L1.8508|
0028d0  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0028d4  e5c01000          STRB     r1,[r0,#0]
0028d8  e51f07a4          LDR      r0,|L1.8508|
0028dc  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0028e0  e2800001          ADD      r0,r0,#1
0028e4  e51f17b0          LDR      r1,|L1.8508|
0028e8  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1120           PUTBYTE (u32_time[0]/10);  //second
0028ec  e3a0100a          MOV      r1,#0xa
0028f0  e5940000          LDR      r0,[r4,#0]
0028f4  ebfffffe          BL       __aeabi_uidivmod
0028f8  e51f17c4          LDR      r1,|L1.8508|
0028fc  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002900  e5c10000          STRB     r0,[r1,#0]
002904  e51f07d0          LDR      r0,|L1.8508|
002908  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00290c  e2800001          ADD      r0,r0,#1
002910  e51f17dc          LDR      r1,|L1.8508|
002914  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1121           PUTBYTE (u32_time[1]%10);  //min
002918  e3a0100a          MOV      r1,#0xa
00291c  e5940004          LDR      r0,[r4,#4]
002920  ebfffffe          BL       __aeabi_uidivmod
002924  e51f07f0          LDR      r0,|L1.8508|
002928  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
00292c  e5c01000          STRB     r1,[r0,#0]
002930  e51f07fc          LDR      r0,|L1.8508|
002934  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002938  e2800001          ADD      r0,r0,#1
00293c  e51f1808          LDR      r1,|L1.8508|
002940  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1122           PUTBYTE (u32_time[1]/10);  //min
002944  e3a0100a          MOV      r1,#0xa
002948  e5940004          LDR      r0,[r4,#4]
00294c  ebfffffe          BL       __aeabi_uidivmod
002950  e51f181c          LDR      r1,|L1.8508|
002954  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002958  e5c10000          STRB     r0,[r1,#0]
00295c  e51f0828          LDR      r0,|L1.8508|
002960  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002964  e2800001          ADD      r0,r0,#1
002968  e51f1834          LDR      r1,|L1.8508|
00296c  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1123           PUTBYTE (u32_time[2]%10);  //hour
002970  e3a0100a          MOV      r1,#0xa
002974  e5940008          LDR      r0,[r4,#8]
002978  ebfffffe          BL       __aeabi_uidivmod
00297c  e51f0848          LDR      r0,|L1.8508|
002980  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002984  e5c01000          STRB     r1,[r0,#0]
002988  e51f0854          LDR      r0,|L1.8508|
00298c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002990  e2800001          ADD      r0,r0,#1
002994  e51f1860          LDR      r1,|L1.8508|
002998  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1124           PUTBYTE (u32_time[2]/10);  //hour
00299c  e3a0100a          MOV      r1,#0xa
0029a0  e5940008          LDR      r0,[r4,#8]
0029a4  ebfffffe          BL       __aeabi_uidivmod
0029a8  e51f1874          LDR      r1,|L1.8508|
0029ac  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
0029b0  e5c10000          STRB     r0,[r1,#0]
0029b4  e51f0880          LDR      r0,|L1.8508|
0029b8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0029bc  e2800001          ADD      r0,r0,#1
0029c0  e51f188c          LDR      r1,|L1.8508|
0029c4  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1125           PUTBYTE (u32_time[3]%10);  //day
0029c8  e3a0100a          MOV      r1,#0xa
0029cc  e594000c          LDR      r0,[r4,#0xc]
0029d0  ebfffffe          BL       __aeabi_uidivmod
0029d4  e51f08a0          LDR      r0,|L1.8508|
0029d8  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0029dc  e5c01000          STRB     r1,[r0,#0]
0029e0  e51f08ac          LDR      r0,|L1.8508|
0029e4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
0029e8  e2800001          ADD      r0,r0,#1
0029ec  e51f18b8          LDR      r1,|L1.8508|
0029f0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1126           PUTBYTE (u32_time[3]/10);  //day
0029f4  e3a0100a          MOV      r1,#0xa
0029f8  e594000c          LDR      r0,[r4,#0xc]
0029fc  ebfffffe          BL       __aeabi_uidivmod
002a00  e51f18cc          LDR      r1,|L1.8508|
002a04  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002a08  e5c10000          STRB     r0,[r1,#0]
002a0c  e51f08d8          LDR      r0,|L1.8508|
002a10  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002a14  e2800001          ADD      r0,r0,#1
002a18  e51f18e4          LDR      r1,|L1.8508|
002a1c  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1127           PUTBYTE (u32_time[4]%10);  //month
002a20  e3a0100a          MOV      r1,#0xa
002a24  e5940010          LDR      r0,[r4,#0x10]
002a28  ebfffffe          BL       __aeabi_uidivmod
002a2c  e51f08f8          LDR      r0,|L1.8508|
002a30  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002a34  e5c01000          STRB     r1,[r0,#0]
002a38  e51f0904          LDR      r0,|L1.8508|
002a3c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002a40  e2800001          ADD      r0,r0,#1
002a44  e51f1910          LDR      r1,|L1.8508|
002a48  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1128           PUTBYTE (u32_time[4]/10);  //month
002a4c  e3a0100a          MOV      r1,#0xa
002a50  e5940010          LDR      r0,[r4,#0x10]
002a54  ebfffffe          BL       __aeabi_uidivmod
002a58  e51f1924          LDR      r1,|L1.8508|
002a5c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002a60  e5c10000          STRB     r0,[r1,#0]
002a64  e51f0930          LDR      r0,|L1.8508|
002a68  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002a6c  e2800001          ADD      r0,r0,#1
002a70  e51f193c          LDR      r1,|L1.8508|
002a74  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1129           PUTBYTE (u32_time[5]%10);  //year 20XX
002a78  e3a0100a          MOV      r1,#0xa
002a7c  e5940014          LDR      r0,[r4,#0x14]
002a80  ebfffffe          BL       __aeabi_uidivmod
002a84  e51f0950          LDR      r0,|L1.8508|
002a88  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002a8c  e5c01000          STRB     r1,[r0,#0]
002a90  e51f095c          LDR      r0,|L1.8508|
002a94  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002a98  e2800001          ADD      r0,r0,#1
002a9c  e51f1968          LDR      r1,|L1.8508|
002aa0  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1130           PUTBYTE (u32_time[5]/10);  //year 20XX
002aa4  e3a0100a          MOV      r1,#0xa
002aa8  e5940014          LDR      r0,[r4,#0x14]
002aac  ebfffffe          BL       __aeabi_uidivmod
002ab0  e51f197c          LDR      r1,|L1.8508|
002ab4  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002ab8  e5c10000          STRB     r0,[r1,#0]
002abc  e51f0988          LDR      r0,|L1.8508|
002ac0  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002ac4  e2800001          ADD      r0,r0,#1
002ac8  e51f1994          LDR      r1,|L1.8508|
002acc  e5810000          STR      r0,[r1,#0]  ; g_pmsg
;;;1131           PUTBYTE (0);     //day of the week, set to 0 as not interpret by R/W
002ad0  e3a00000          MOV      r0,#0
002ad4  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002ad8  e5c10000          STRB     r0,[r1,#0]
002adc  e51f09a8          LDR      r0,|L1.8508|
002ae0  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002ae4  e2800001          ADD      r0,r0,#1
002ae8  e51f19b4          LDR      r1,|L1.8508|
002aec  e5810000          STR      r0,[r1,#0]  ; g_pmsg
                  |L1.10992|
;;;1132       }
;;;1133   #else
;;;1134       PUTBYTE (9);
;;;1135       PUTBYTE (0);
;;;1136       PUTBYTE (8);
;;;1137       PUTBYTE (4);
;;;1138       PUTBYTE (0);
;;;1139       PUTBYTE (1);
;;;1140       PUTBYTE (6);
;;;1141       PUTBYTE (1);
;;;1142       PUTBYTE (7);
;;;1143       PUTBYTE (0);
;;;1144       PUTBYTE (5);
;;;1145       PUTBYTE (1);
;;;1146       PUTBYTE (0);
;;;1147   #endif
;;;1148   
;;;1149       DbgCmdDump (g_msg, (g_pmsg-g_msg));
002af0  e51f09bc          LDR      r0,|L1.8508|
002af4  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002af8  e51f29c8          LDR      r2,|L1.8504|
002afc  e0401002          SUB      r1,r0,r2
002b00  e2820000          ADD      r0,r2,#0
002b04  ebfffffe          BL       DbgCmdDump
;;;1150   
;;;1151       SENDBLOCK (0);
002b08  e3a00000          MOV      r0,#0
002b0c  e51f19d8          LDR      r1,|L1.8508|
002b10  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002b14  e5c10000          STRB     r0,[r1,#0]
002b18  e51f09e4          LDR      r0,|L1.8508|
002b1c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002b20  e2800001          ADD      r0,r0,#1
002b24  e51f19f0          LDR      r1,|L1.8508|
002b28  e5810000          STR      r0,[r1,#0]  ; g_pmsg
002b2c  e3a00000          MOV      r0,#0
002b30  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002b34  e5c10000          STRB     r0,[r1,#0]
002b38  e51f0a04          LDR      r0,|L1.8508|
002b3c  e5900000          LDR      r0,[r0,#0]  ; g_pmsg
002b40  e2800001          ADD      r0,r0,#1
002b44  e51f1a10          LDR      r1,|L1.8508|
002b48  e5810000          STR      r0,[r1,#0]  ; g_pmsg
002b4c  e5911000          LDR      r1,[r1,#0]  ; g_pmsg
002b50  e51f2a20          LDR      r2,|L1.8504|
002b54  e0410002          SUB      r0,r1,r2
002b58  e3a02000          MOV      r2,#0
002b5c  e51f1a2c          LDR      r1,|L1.8504|
002b60  ebfffffe          BL       sendblock
;;;1152       READBLOCK (0);
002b64  e3a00000          MOV      r0,#0
002b68  ebfffffe          BL       READBLOCK
;;;1153   
;;;1154       DbgRspDump (g_inbuff, g_len);
002b6c  e59f0010          LDR      r0,|L1.11140|
002b70  e5901000          LDR      r1,[r0,#0]  ; g_len
002b74  e59f000c          LDR      r0,|L1.11144|
002b78  ebfffffe          BL       DbgRspDump
;;;1155   }
002b7c  e28dd020          ADD      sp,sp,#0x20
002b80  e8bd8070          POP      {r4-r6,pc}
;;;1156   
                          ENDP

                  |L1.11140|
                          DCD      g_len
                  |L1.11144|
                          DCD      g_inbuff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_msg
                          %        5000
                  szOutMsg
                          %        5000
                  contRecvCmd
                          %        10
                  initRecvRsp
                          %        40
                  contRecvRsp
                          %        4008
                  initTranCmd
                          %        45
                  contTranCmd
                          %        4010

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000064
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00002c  0d0a2d2d          DCB      0x0d,0x0a,0x2d,0x2d
000030  3e20665f          DCB      0x3e,0x20,0x66,0x5f
000034  66696c65          DCB      0x66,0x69,0x6c,0x65
000038  49442030          DCB      0x49,0x44,0x20,0x30
00003c  78253034          DCB      0x78,0x25,0x30,0x34
000040  78202866          DCB      0x78,0x20,0x28,0x66
000044  696c654c          DCB      0x69,0x6c,0x65,0x4c
000048  656e203d          DCB      0x65,0x6e,0x20,0x3d
00004c  20256429          DCB      0x20,0x25,0x64,0x29
000050  3a20636f          DCB      0x3a,0x20,0x63,0x6f
000054  6e745472          DCB      0x6e,0x74,0x54,0x72
000058  616e436d          DCB      0x61,0x6e,0x43,0x6d
00005c  642d3e66          DCB      0x64,0x2d,0x3e,0x66
000060  5f6f6666          DCB      0x5f,0x6f,0x66,0x66
000064  7365743a          DCB      0x73,0x65,0x74,0x3a
000068  25642028          DCB      0x25,0x64,0x20,0x28
00006c  72427974          DCB      0x72,0x42,0x79,0x74
000070  65203d20          DCB      0x65,0x20,0x3d,0x20
000074  2564290a          DCB      0x25,0x64,0x29,0x0a
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  436d6458          DCB      0x43,0x6d,0x64,0x58
000080  46696c65          DCB      0x46,0x69,0x6c,0x65
000084  436f6e74          DCB      0x43,0x6f,0x6e,0x74
000088  52656376          DCB      0x52,0x65,0x63,0x76
00008c  3a207461          DCB      0x3a,0x20,0x74,0x61
000090  72676574          DCB      0x72,0x67,0x65,0x74
000094  20665f6e          DCB      0x20,0x66,0x5f,0x6e
000098  616d653a          DCB      0x61,0x6d,0x65,0x3a
00009c  5b25735d          DCB      0x5b,0x25,0x73,0x5d
0000a0  28784669          DCB      0x28,0x78,0x46,0x69
0000a4  6c654461          DCB      0x6c,0x65,0x44,0x61
0000a8  74614c65          DCB      0x74,0x61,0x4c,0x65
0000ac  6e203d20          DCB      0x6e,0x20,0x3d,0x20
0000b0  2564292c          DCB      0x25,0x64,0x29,0x2c
0000b4  20753332          DCB      0x20,0x75,0x33,0x32
0000b8  5f536567          DCB      0x5f,0x53,0x65,0x67
0000bc  6d656e74          DCB      0x6d,0x65,0x6e,0x74
0000c0  53697a65          DCB      0x53,0x69,0x7a,0x65
0000c4  203d2025          DCB      0x20,0x3d,0x20,0x25
0000c8  640a00            DCB      0x64,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  f_encrypt
                          DCD      0x00000000
                  OTPData
                          DCD      0x00000000
                  g_AckExpired
000008  00                DCB      0x00
                  g_RespExpired
000009  00                DCB      0x00
                  KaKey
00000a  16a3              DCB      0x16,0xa3
00000c  29c742f1          DCB      0x29,0xc7,0x42,0xf1
000010  0639              DCB      0x06,0x39
                  KbKey
000012  b77d              DCB      0xb7,0x7d
000014  721904b5          DCB      0x72,0x19,0x04,0xb5
000018  7d91              DCB      0x7d,0x91
                  ||rc||
00001a  0103              DCB      0x01,0x03
00001c  0507090b          DCB      0x05,0x07,0x09,0x0b
000020  0d0f              DCB      0x0d,0x0f
                  ||ka||
000022  0000              DCB      0x00,0x00
                          DCD      0x00000000
000028  0000              DCB      0x00,0x00
                  ||kb||
00002a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  g_pmsg
                          DCD      0x00000000
                  msgkey
                          %        8
                  initRecvCmd
                          DCD      0x00000000
000044  00                DCB      0x00
                  initTranRsp
000045  000000            DCB      0x00,0x00,0x00
000048  000000            DCB      0x00,0x00,0x00
                  contTranRsp
00004b  00                DCB      0x00
                          DCD      0x00000000
000050  00000000          DCB      0x00,0x00,0x00,0x00
                  OTPDataLen
                          DCD      0x00000000
                  OTPDataIndex
                          DCD      0x00000000
                  g_gettime
                          DCD      0x00000000
                  g_lastgettime
                          DCD      0x00000000
                  g_timeelapse
                          DCD      0x00000000
