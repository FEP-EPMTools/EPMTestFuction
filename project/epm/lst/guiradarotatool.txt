; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guiradarotatool.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guiradarotatool.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guiradarotatool.crf src\user\guiradarotatool.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;60     /*-----------------------------------------*/
;;;61     static void updateBG(void)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;62     {
;;;63         //TickType_t tickLocalStart = xTaskGetTickCount();
;;;64         //EPDDrawContainByIDPos(TRUE,EPD_PICT_LOADING,475,250);
;;;65         EPDDrawContainByIDPos(TRUE,EPD_PICT_ALL_WHITE_INDEX,0,0);
000004  e3a03000          MOV      r3,#0
000008  e1a02003          MOV      r2,r3
00000c  e3a01003          MOV      r1,#3
000010  e3a00001          MOV      r0,#1
000014  ebfffffe          BL       EPDDrawContainByIDPos
;;;66         EPDDrawStringMax(FALSE,"RadarOTATool",90,28,FALSE);
000018  e3a00000          MOV      r0,#0
00001c  e3a0301c          MOV      r3,#0x1c
000020  e3a0205a          MOV      r2,#0x5a
000024  e28f1fc7          ADR      r1,|L1.840|
000028  e58d0000          STR      r0,[sp,#0]
00002c  ebfffffe          BL       EPDDrawStringMax
;;;67         //EPDDrawStringMax(FALSE,"xxxxxx Calibration xxxxxx",200,100,FALSE);
;;;68         //EPDDrawStringMax(FALSE,"\nx\nx\nx\nx\nx\nx\nx\nx",200,100,FALSE);
;;;69         //EPDDrawStringMax(FALSE,"\nx\nx\nx\nx\nx\nx\nx\nx",200+(24*28),100,FALSE);
;;;70         //EPDDrawStringMax(FALSE,"\n\n\n\n\n\n\n\n\nxxxxxxxxxxxxxxxxxxxxxxxxx",200,100,FALSE);
;;;71         EPDDrawStringMax(FALSE," <>:Move   {:Select    }:Exit ",BTM_DISCRIPT_BAR_X,BTM_DISCRIPT_BAR_Y,TRUE);
000030  e3a00001          MOV      r0,#1
000034  e3a03e29          MOV      r3,#0x290
000038  e3a020b4          MOV      r2,#0xb4
00003c  e28f1fc5          ADR      r1,|L1.856|
000040  e58d0000          STR      r0,[sp,#0]
000044  e3a00000          MOV      r0,#0
000048  ebfffffe          BL       EPDDrawStringMax
;;;72         
;;;73         for(int i = 0; ; i++)
00004c  e3a00000          MOV      r0,#0
000050  e1a00000          MOV      r0,r0
                  |L1.84|
;;;74         {//Dont Show Quit
;;;75             if(listItem[i].charItem == 0)
000054  e59f131c          LDR      r1,|L1.888|
000058  e5911000          LDR      r1,[r1,#0]  ; listItem
00005c  e7d11180          LDRB     r1,[r1,r0,LSL #3]
000060  e3510000          CMP      r1,#0
000064  1a000003          BNE      |L1.120|
;;;76             {
;;;77                 maxSelectItem = i-1;
000068  e2401001          SUB      r1,r0,#1
00006c  e59f2308          LDR      r2,|L1.892|
000070  e5821000          STR      r1,[r2,#0]  ; maxSelectItem
;;;78                 break;
000074  ea000001          B        |L1.128|
                  |L1.120|
000078  e2800001          ADD      r0,r0,#1              ;73
00007c  eafffff4          B        |L1.84|
                  |L1.128|
000080  e1a00000          MOV      r0,r0
;;;79             }
;;;80         }
;;;81         for(int i=0;i<maxSelectItem;i++)
000084  e3a04000          MOV      r4,#0
000088  ea000017          B        |L1.236|
                  |L1.140|
;;;82         {
;;;83             EPDDrawStringMax(FALSE,listItem[i].itemName,300+50,100+(44*(2+i)),FALSE);
00008c  e3a00000          MOV      r0,#0
000090  e58d0000          STR      r0,[sp,#0]
000094  e2840002          ADD      r0,r4,#2
000098  e3a0202c          MOV      r2,#0x2c
00009c  e0000092          MUL      r0,r2,r0
0000a0  e2803064          ADD      r3,r0,#0x64
0000a4  e59f02cc          LDR      r0,|L1.888|
0000a8  e5900000          LDR      r0,[r0,#0]  ; listItem
0000ac  e0800184          ADD      r0,r0,r4,LSL #3
0000b0  e5901004          LDR      r1,[r0,#4]
0000b4  e59f22c4          LDR      r2,|L1.896|
0000b8  e3a00000          MOV      r0,#0
0000bc  ebfffffe          BL       EPDDrawStringMax
;;;84             EPDDrawStringMax(FALSE,"-",300,100+(44*(2+i)),TRUE);
0000c0  e3a00001          MOV      r0,#1
0000c4  e58d0000          STR      r0,[sp,#0]
0000c8  e2840002          ADD      r0,r4,#2
0000cc  e3a0102c          MOV      r1,#0x2c
0000d0  e0000091          MUL      r0,r1,r0
0000d4  e2803064          ADD      r3,r0,#0x64
0000d8  e3a02f4b          MOV      r2,#0x12c
0000dc  e28f1e2a          ADR      r1,|L1.900|
0000e0  e3a00000          MOV      r0,#0
0000e4  ebfffffe          BL       EPDDrawStringMax
0000e8  e2844001          ADD      r4,r4,#1              ;81
                  |L1.236|
0000ec  e59f0288          LDR      r0,|L1.892|
0000f0  e5900000          LDR      r0,[r0,#0]            ;81  ; maxSelectItem
0000f4  e1540000          CMP      r4,r0                 ;81
0000f8  baffffe3          BLT      |L1.140|
;;;85         }
;;;86         EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,300,100+(44*(2+oldIndex)));
0000fc  e59f0284          LDR      r0,|L1.904|
000100  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000104  e2800002          ADD      r0,r0,#2
000108  e3a0102c          MOV      r1,#0x2c
00010c  e0000091          MUL      r0,r1,r0
000110  e2803064          ADD      r3,r0,#0x64
000114  e3a02f4b          MOV      r2,#0x12c
000118  e3a0106b          MOV      r1,#0x6b
00011c  e3a00001          MOV      r0,#1
000120  ebfffffe          BL       EPDDrawContainByIDPos
;;;87     }
000124  e8bd8038          POP      {r3-r5,pc}
;;;88     //static void updateData(void)
                          ENDP

                  GuiRadarOTAToolOnDraw PROC
;;;99     /*-----------------------------------------*/
;;;100    BOOL GuiRadarOTAToolOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int item, int keyinCallbackFun)
000128  e92d41f0          PUSH     {r4-r8,lr}
;;;101    {
00012c  e1a07000          MOV      r7,r0
000130  e1a04001          MOV      r4,r1
000134  e1a05002          MOV      r5,r2
000138  e1a06003          MOV      r6,r3
;;;102        if(reFreshPara == GUI_CLEAN_MESSAGE_ENABLE)
00013c  e3540007          CMP      r4,#7
000140  1a000003          BNE      |L1.340|
;;;103            cleanMsgAfterMove = TRUE;
000144  e3a00001          MOV      r0,#1
000148  e59f123c          LDR      r1,|L1.908|
00014c  e5c10000          STRB     r0,[r1,#0]  ; cleanMsgAfterMove
000150  ea00001b          B        |L1.452|
                  |L1.340|
;;;104        else
;;;105        {
;;;106            //tickStart = xTaskGetTickCount();
;;;107            // sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
;;;108            listItem = (ListItem*)item;
000154  e59f021c          LDR      r0,|L1.888|
000158  e5805000          STR      r5,[r0,#0]  ; listItem
;;;109            keyinCallback = (KeyinCallback)keyinCallbackFun;
00015c  e59f022c          LDR      r0,|L1.912|
000160  e5806000          STR      r6,[r0,#0]  ; keyinCallback
;;;110            
;;;111            powerStatus = TRUE;
000164  e3a00001          MOV      r0,#1
000168  e59f1224          LDR      r1,|L1.916|
00016c  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;112            pGuiGetInterface = GuiGetInterface();
000170  ebfffffe          BL       GuiGetInterface
000174  e59f121c          LDR      r1,|L1.920|
000178  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;113            pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
00017c  e2810000          ADD      r0,r1,#0
000180  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
000184  e3e01000          MVN      r1,#0
000188  e590200c          LDR      r2,[r0,#0xc]
00018c  e3a00000          MOV      r0,#0
000190  e12fff32          BLX      r2
;;;114            pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
000194  e59f01fc          LDR      r0,|L1.920|
000198  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
00019c  e3a01005          MOV      r1,#5
0001a0  e590200c          LDR      r2,[r0,#0xc]
0001a4  e3a00001          MOV      r0,#1
0001a8  e12fff32          BLX      r2
;;;115            updateBG();
0001ac  ebfffffe          BL       updateBG
;;;116            pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
0001b0  e59f01e0          LDR      r0,|L1.920|
0001b4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001b8  e5901010          LDR      r1,[r0,#0x10]
0001bc  e3a00000          MOV      r0,#0
0001c0  e12fff31          BLX      r1
                  |L1.452|
;;;117            //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;118        }
;;;119        return TRUE;
0001c4  e3a00001          MOV      r0,#1
;;;120    }
0001c8  e8bd81f0          POP      {r4-r8,pc}
;;;121    BOOL GuiRadarOTAToolUpdateData(void)
                          ENDP

                  GuiRadarOTAToolUpdateData PROC
0001cc  e92d4010          PUSH     {r4,lr}
;;;122    {    
;;;123        //tickStart = xTaskGetTickCount();
;;;124        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更updateScreen
0001d0  e59f01c0          LDR      r0,|L1.920|
0001d4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001d8  e5901010          LDR      r1,[r0,#0x10]
0001dc  e3a00001          MOV      r0,#1
0001e0  e12fff31          BLX      r1
;;;125        return TRUE;
0001e4  e3a00001          MOV      r0,#1
;;;126    }
0001e8  e8bd8010          POP      {r4,pc}
;;;127    BOOL GuiRadarOTAToolKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiRadarOTAToolKeyCallback PROC
0001ec  e92d4070          PUSH     {r4-r6,lr}
;;;128    {
0001f0  e1a04000          MOV      r4,r0
0001f4  e1a05001          MOV      r5,r1
;;;129        //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;130        //terninalPrintf("now[%d] old[%d]\n",nowIndex,oldIndex);
;;;131        BOOL reVal = FALSE; 
0001f8  e3a06000          MOV      r6,#0
;;;132        if(keyIgnoreFlag)
0001fc  e59f0198          LDR      r0,|L1.924|
000200  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
000204  e3500000          CMP      r0,#0
000208  0a000001          BEQ      |L1.532|
;;;133        {
;;;134            //terninalPrintf(" [INFO GUI] <EPDflashTool> Key:  ignore...\n"); 
;;;135            return reVal;
00020c  e1a00006          MOV      r0,r6
                  |L1.528|
;;;136        }
;;;137        if(keyinCallback == NULL)
;;;138        {
;;;139            terninalPrintf(" [INFO GUI] <EPDflashTool> KeyCallback:  Function Pointer ERROR!!!\n"); 
;;;140            return reVal;
;;;141        }
;;;142        if(GUI_KEY_DOWN_INDEX == downUp)
;;;143        {
;;;144            switch(keyId)
;;;145            {
;;;146                case GUI_KEYPAD_ONE:
;;;147                    if(!GetTesterFlag())
;;;148                    {
;;;149                        /*
;;;150                        EPDDrawString(FALSE,"                                 ",50,100+(44*(8)));
;;;151                        EPDDrawString(FALSE,"                                 ",50,100+(44*(9)));
;;;152                        EPDDrawString(FALSE,"                                 ",50,100+(44*(10)));
;;;153                        EPDDrawString(FALSE,"                                 ",50,100+(44*(11)));
;;;154                        EPDDrawString(TRUE,"            ",700,100+(44*(nowIndex+2)));
;;;155                        */
;;;156                        if((nowIndex>0)&&(nowIndex==oldIndex))
;;;157                        {
;;;158                            oldIndex=nowIndex;
;;;159                            nowIndex--;
;;;160                            reVal = TRUE;
;;;161                        }
;;;162                        else if((nowIndex==oldIndex)&&(nowIndex==0))
;;;163                        {
;;;164                            oldIndex=nowIndex;
;;;165                            nowIndex=maxSelectItem-1;
;;;166                            reVal = TRUE;
;;;167                        }
;;;168                    }
;;;169                    break;
;;;170                case GUI_KEYPAD_TWO:
;;;171                    if(!GetTesterFlag())
;;;172                    {
;;;173                        /*
;;;174                        EPDDrawString(FALSE,"                                 ",50,100+(44*(8)));
;;;175                        EPDDrawString(FALSE,"                                 ",50,100+(44*(9)));
;;;176                        EPDDrawString(FALSE,"                                 ",50,100+(44*(10)));
;;;177                        EPDDrawString(FALSE,"                                 ",50,100+(44*(11)));
;;;178                        EPDDrawString(TRUE,"            ",700,100+(44*(nowIndex+2)));
;;;179                        */
;;;180                        if((nowIndex<(maxSelectItem-1))&&(nowIndex==oldIndex))
;;;181                        {
;;;182                            oldIndex=nowIndex;
;;;183                            nowIndex++;
;;;184                            reVal = TRUE;
;;;185                        }
;;;186                        else if((nowIndex==oldIndex)&&(nowIndex==maxSelectItem-1))
;;;187                        {
;;;188                            oldIndex=nowIndex;
;;;189                            nowIndex=0;
;;;190                            reVal = TRUE;
;;;191                        }
;;;192                    }
;;;193                    break;
;;;194                case GUI_KEYPAD_THREE:
;;;195                    //reVal = TRUE;
;;;196                    break;
;;;197                case GUI_KEYPAD_FOUR:
;;;198                    //reVal = TRUE;
;;;199                    break;
;;;200                case GUI_KEYPAD_FIVE:
;;;201                    if(oldIndex==nowIndex)
;;;202                    {
;;;203                        cleanMsgAfterMove = TRUE;
;;;204                        keyinCallback(listItem[nowIndex].charItem);
;;;205                        reVal = TRUE;
;;;206                    }
;;;207                    break;
;;;208                case GUI_KEYPAD_SIX:
;;;209                    keyinCallback('q');
;;;210                    oldIndex = 0;
;;;211                    nowIndex = 0;
;;;212                    reVal = TRUE;
;;;213                    break;
;;;214                case GUI_KEYPAD_REPLACE_BP_ID:
;;;215                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;216                    //GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;217                    //reVal = TRUE;
;;;218                    break;
;;;219                
;;;220                case GUI_KEYPAD_TESTER_ID:
;;;221                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;222                    //GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;223                    //reVal = TRUE;
;;;224                    break;
;;;225                
;;;226                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;227                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;228                    //GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;229                    //reVal = TRUE;
;;;230                    break;
;;;231            }
;;;232        }
;;;233        else
;;;234        {
;;;235            
;;;236        }
;;;237        // setPrintfFlag(FALSE);
;;;238        return reVal;
;;;239    }
000210  e8bd8070          POP      {r4-r6,pc}
                  |L1.532|
000214  e59f0174          LDR      r0,|L1.912|
000218  e5900000          LDR      r0,[r0,#0]            ;137  ; keyinCallback
00021c  e3500000          CMP      r0,#0                 ;137
000220  1a000003          BNE      |L1.564|
000224  e59f0174          LDR      r0,|L1.928|
000228  ebfffffe          BL       terninalPrintf
00022c  e1a00006          MOV      r0,r6                 ;140
000230  eafffff6          B        |L1.528|
                  |L1.564|
000234  e3550001          CMP      r5,#1                 ;142
000238  1a0000b7          BNE      |L1.1308|
00023c  e3540004          CMP      r4,#4                 ;144
000240  0a00008a          BEQ      |L1.1136|
000244  ca000008          BGT      |L1.620|
000248  e3540000          CMP      r4,#0                 ;144
00024c  0a00009f          BEQ      |L1.1232|
000250  e3540001          CMP      r4,#1                 ;144
000254  0a000087          BEQ      |L1.1144|
000258  e3540002          CMP      r4,#2                 ;144
00025c  0a000051          BEQ      |L1.936|
000260  e3540003          CMP      r4,#3                 ;144
000264  1a0000ab          BNE      |L1.1304|
000268  ea000008          B        |L1.656|
                  |L1.620|
00026c  e3540005          CMP      r4,#5                 ;144
000270  0a000082          BEQ      |L1.1152|
000274  e3540011          CMP      r4,#0x11              ;144
000278  0a0000a0          BEQ      |L1.1280|
00027c  e3540013          CMP      r4,#0x13              ;144
000280  0a0000a2          BEQ      |L1.1296|
000284  e3540014          CMP      r4,#0x14              ;144
000288  1a0000a2          BNE      |L1.1304|
00028c  ea00009d          B        |L1.1288|
                  |L1.656|
000290  e1a00000          MOV      r0,r0                 ;146
000294  ebfffffe          BL       GetTesterFlag
000298  e3500000          CMP      r0,#0                 ;147
00029c  1a000028          BNE      |L1.836|
0002a0  e59f00fc          LDR      r0,|L1.932|
0002a4  e5900000          LDR      r0,[r0,#0]            ;156  ; nowIndex
0002a8  e3500000          CMP      r0,#0                 ;156
0002ac  da000010          BLE      |L1.756|
0002b0  e59f00ec          LDR      r0,|L1.932|
0002b4  e5900000          LDR      r0,[r0,#0]            ;156  ; nowIndex
0002b8  e59f10c8          LDR      r1,|L1.904|
0002bc  e5911000          LDR      r1,[r1,#0]            ;156  ; oldIndex
0002c0  e1500001          CMP      r0,r1                 ;156
0002c4  1a00000a          BNE      |L1.756|
0002c8  e59f00d4          LDR      r0,|L1.932|
0002cc  e5900000          LDR      r0,[r0,#0]            ;158  ; nowIndex
0002d0  e59f10b0          LDR      r1,|L1.904|
0002d4  e5810000          STR      r0,[r1,#0]            ;158  ; oldIndex
0002d8  e59f00c4          LDR      r0,|L1.932|
0002dc  e5900000          LDR      r0,[r0,#0]            ;159  ; nowIndex
0002e0  e2400001          SUB      r0,r0,#1              ;159
0002e4  e59f10b8          LDR      r1,|L1.932|
0002e8  e5810000          STR      r0,[r1,#0]            ;159  ; nowIndex
0002ec  e3a06001          MOV      r6,#1                 ;160
0002f0  ea000013          B        |L1.836|
                  |L1.756|
0002f4  e59f00a8          LDR      r0,|L1.932|
0002f8  e5900000          LDR      r0,[r0,#0]            ;162  ; nowIndex
0002fc  e59f1084          LDR      r1,|L1.904|
000300  e5911000          LDR      r1,[r1,#0]            ;162  ; oldIndex
000304  e1500001          CMP      r0,r1                 ;162
000308  1a00000d          BNE      |L1.836|
00030c  e59f0090          LDR      r0,|L1.932|
000310  e5900000          LDR      r0,[r0,#0]            ;162  ; nowIndex
000314  e3500000          CMP      r0,#0                 ;162
000318  1a000009          BNE      |L1.836|
00031c  e59f0080          LDR      r0,|L1.932|
000320  e5900000          LDR      r0,[r0,#0]            ;164  ; nowIndex
000324  e59f105c          LDR      r1,|L1.904|
000328  e5810000          STR      r0,[r1,#0]            ;164  ; oldIndex
00032c  e59f0048          LDR      r0,|L1.892|
000330  e5900000          LDR      r0,[r0,#0]            ;165  ; maxSelectItem
000334  e2400001          SUB      r0,r0,#1              ;165
000338  e59f1064          LDR      r1,|L1.932|
00033c  e5810000          STR      r0,[r1,#0]            ;165  ; nowIndex
000340  e3a06001          MOV      r6,#1                 ;166
                  |L1.836|
000344  ea000073          B        |L1.1304|
                  |L1.840|
000348  52616461          DCB      "RadarOTATool",0
00034c  724f5441
000350  546f6f6c
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
                  |L1.856|
000358  203c3e3a          DCB      " <>:Move   {:Select    }:Exit ",0
00035c  4d6f7665
000360  2020207b
000364  3a53656c
000368  65637420
00036c  2020207d
000370  3a457869
000374  742000  
000377  00                DCB      0
                  |L1.888|
                          DCD      listItem
                  |L1.892|
                          DCD      maxSelectItem
                  |L1.896|
                          DCD      0x0000015e
                  |L1.900|
000384  2d00              DCB      "-",0
000386  00                DCB      0
000387  00                DCB      0
                  |L1.904|
                          DCD      oldIndex
                  |L1.908|
                          DCD      cleanMsgAfterMove
                  |L1.912|
                          DCD      keyinCallback
                  |L1.916|
                          DCD      powerStatus
                  |L1.920|
                          DCD      pGuiGetInterface
                  |L1.924|
                          DCD      keyIgnoreFlag
                  |L1.928|
                          DCD      ||.constdata||
                  |L1.932|
                          DCD      nowIndex
                  |L1.936|
0003a8  e1a00000          MOV      r0,r0                 ;170
0003ac  ebfffffe          BL       GetTesterFlag
0003b0  e3500000          CMP      r0,#0                 ;171
0003b4  1a00002c          BNE      |L1.1132|
0003b8  e51f0044          LDR      r0,|L1.892|
0003bc  e5900000          LDR      r0,[r0,#0]            ;180  ; maxSelectItem
0003c0  e2400001          SUB      r0,r0,#1              ;180
0003c4  e51f1028          LDR      r1,|L1.932|
0003c8  e5911000          LDR      r1,[r1,#0]            ;180  ; nowIndex
0003cc  e1500001          CMP      r0,r1                 ;180
0003d0  da000010          BLE      |L1.1048|
0003d4  e51f0038          LDR      r0,|L1.932|
0003d8  e5900000          LDR      r0,[r0,#0]            ;180  ; nowIndex
0003dc  e51f105c          LDR      r1,|L1.904|
0003e0  e5911000          LDR      r1,[r1,#0]            ;180  ; oldIndex
0003e4  e1500001          CMP      r0,r1                 ;180
0003e8  1a00000a          BNE      |L1.1048|
0003ec  e51f0050          LDR      r0,|L1.932|
0003f0  e5900000          LDR      r0,[r0,#0]            ;182  ; nowIndex
0003f4  e51f1074          LDR      r1,|L1.904|
0003f8  e5810000          STR      r0,[r1,#0]            ;182  ; oldIndex
0003fc  e51f0060          LDR      r0,|L1.932|
000400  e5900000          LDR      r0,[r0,#0]            ;183  ; nowIndex
000404  e2800001          ADD      r0,r0,#1              ;183
000408  e51f106c          LDR      r1,|L1.932|
00040c  e5810000          STR      r0,[r1,#0]            ;183  ; nowIndex
000410  e3a06001          MOV      r6,#1                 ;184
000414  ea000014          B        |L1.1132|
                  |L1.1048|
000418  e51f007c          LDR      r0,|L1.932|
00041c  e5900000          LDR      r0,[r0,#0]            ;186  ; nowIndex
000420  e51f10a0          LDR      r1,|L1.904|
000424  e5911000          LDR      r1,[r1,#0]            ;186  ; oldIndex
000428  e1500001          CMP      r0,r1                 ;186
00042c  1a00000e          BNE      |L1.1132|
000430  e51f00bc          LDR      r0,|L1.892|
000434  e5900000          LDR      r0,[r0,#0]            ;186  ; maxSelectItem
000438  e2400001          SUB      r0,r0,#1              ;186
00043c  e51f10a0          LDR      r1,|L1.932|
000440  e5911000          LDR      r1,[r1,#0]            ;186  ; nowIndex
000444  e1500001          CMP      r0,r1                 ;186
000448  1a000007          BNE      |L1.1132|
00044c  e51f00b0          LDR      r0,|L1.932|
000450  e5900000          LDR      r0,[r0,#0]            ;188  ; nowIndex
000454  e51f10d4          LDR      r1,|L1.904|
000458  e5810000          STR      r0,[r1,#0]            ;188  ; oldIndex
00045c  e3a00000          MOV      r0,#0                 ;189
000460  e51f10c4          LDR      r1,|L1.932|
000464  e5810000          STR      r0,[r1,#0]            ;189  ; nowIndex
000468  e3a06001          MOV      r6,#1                 ;190
                  |L1.1132|
00046c  ea000029          B        |L1.1304|
                  |L1.1136|
000470  e1a00000          MOV      r0,r0                 ;194
000474  ea000027          B        |L1.1304|
                  |L1.1144|
000478  e1a00000          MOV      r0,r0                 ;197
00047c  ea000025          B        |L1.1304|
                  |L1.1152|
000480  e1a00000          MOV      r0,r0                 ;200
000484  e51f0104          LDR      r0,|L1.904|
000488  e5900000          LDR      r0,[r0,#0]            ;201  ; oldIndex
00048c  e51f10f0          LDR      r1,|L1.932|
000490  e5911000          LDR      r1,[r1,#0]            ;201  ; nowIndex
000494  e1500001          CMP      r0,r1                 ;201
000498  1a00000b          BNE      |L1.1228|
00049c  e3a00001          MOV      r0,#1                 ;203
0004a0  e51f111c          LDR      r1,|L1.908|
0004a4  e5c10000          STRB     r0,[r1,#0]            ;203  ; cleanMsgAfterMove
0004a8  e51f1138          LDR      r1,|L1.888|
0004ac  e5911000          LDR      r1,[r1,#0]            ;204  ; listItem
0004b0  e51f2114          LDR      r2,|L1.932|
0004b4  e5922000          LDR      r2,[r2,#0]            ;204  ; nowIndex
0004b8  e7d10182          LDRB     r0,[r1,r2,LSL #3]     ;204
0004bc  e51f1134          LDR      r1,|L1.912|
0004c0  e5911000          LDR      r1,[r1,#0]            ;204  ; keyinCallback
0004c4  e12fff31          BLX      r1                    ;204
0004c8  e3a06001          MOV      r6,#1                 ;205
                  |L1.1228|
0004cc  ea000011          B        |L1.1304|
                  |L1.1232|
0004d0  e1a00000          MOV      r0,r0                 ;208
0004d4  e3a00071          MOV      r0,#0x71              ;209
0004d8  e51f1150          LDR      r1,|L1.912|
0004dc  e5911000          LDR      r1,[r1,#0]            ;209  ; keyinCallback
0004e0  e12fff31          BLX      r1                    ;209
0004e4  e3a00000          MOV      r0,#0                 ;210
0004e8  e51f1168          LDR      r1,|L1.904|
0004ec  e5810000          STR      r0,[r1,#0]            ;210  ; oldIndex
0004f0  e51f1154          LDR      r1,|L1.932|
0004f4  e5810000          STR      r0,[r1,#0]            ;211  ; nowIndex
0004f8  e3a06001          MOV      r6,#1                 ;212
0004fc  ea000005          B        |L1.1304|
                  |L1.1280|
000500  e1a00000          MOV      r0,r0                 ;214
000504  ea000003          B        |L1.1304|
                  |L1.1288|
000508  e1a00000          MOV      r0,r0                 ;220
00050c  ea000001          B        |L1.1304|
                  |L1.1296|
000510  e1a00000          MOV      r0,r0                 ;226
000514  e1a00000          MOV      r0,r0                 ;230
                  |L1.1304|
000518  e1a00000          MOV      r0,r0                 ;169
                  |L1.1308|
00051c  e1a00006          MOV      r0,r6                 ;238
000520  eaffff3a          B        |L1.528|
;;;240    BOOL GuiRadarOTAToolTimerCallback(uint8_t timerIndex)
                          ENDP

                  GuiRadarOTAToolTimerCallback PROC
000524  e92d4010          PUSH     {r4,lr}
;;;241    {
000528  e1a04000          MOV      r4,r0
;;;242        //sysprintf(" [INFO GUI] <Free> Timer [%d] : tick = %d!!\n", timerIndex, xTaskGetTickCount());
;;;243        keyIgnoreFlag = TRUE;
00052c  e3a00001          MOV      r0,#1
000530  e51f119c          LDR      r1,|L1.924|
000534  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;244        switch(timerIndex)
000538  e3540000          CMP      r4,#0
00053c  0a000004          BEQ      |L1.1364|
000540  e3540001          CMP      r4,#1
000544  0a000004          BEQ      |L1.1372|
000548  e3540002          CMP      r4,#2
00054c  1a000048          BNE      |L1.1652|
000550  ea000045          B        |L1.1644|
                  |L1.1364|
;;;245        {
;;;246            case UPDATE_BG_TIMER:
000554  e1a00000          MOV      r0,r0
;;;247                break;
000558  ea000045          B        |L1.1652|
                  |L1.1372|
;;;248            case UPDATE_DATA_TIMER:
00055c  e1a00000          MOV      r0,r0
;;;249                if(oldIndex!=nowIndex)
000560  e51f01e0          LDR      r0,|L1.904|
000564  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000568  e51f11cc          LDR      r1,|L1.932|
00056c  e5911000          LDR      r1,[r1,#0]  ; nowIndex
000570  e1500001          CMP      r0,r1
000574  0a00003b          BEQ      |L1.1640|
;;;250                {
;;;251                    
;;;252                    if(cleanMsgAfterMove)
000578  e51f01f4          LDR      r0,|L1.908|
00057c  e5d00000          LDRB     r0,[r0,#0]  ; cleanMsgAfterMove
000580  e3500000          CMP      r0,#0
000584  0a00001f          BEQ      |L1.1544|
;;;253                    {
;;;254                        cleanMsgAfterMove = FALSE;
000588  e3a00000          MOV      r0,#0
00058c  e51f1208          LDR      r1,|L1.908|
000590  e5c10000          STRB     r0,[r1,#0]  ; cleanMsgAfterMove
;;;255                        EPDDrawString(FALSE,"                                 ",50,100+(44*(8)));
000594  e3a03f71          MOV      r3,#0x1c4
000598  e3a02032          MOV      r2,#0x32
00059c  e28f1f51          ADR      r1,|L1.1768|
0005a0  ebfffffe          BL       EPDDrawString
;;;256                        EPDDrawString(FALSE,"                                 ",50,100+(44*(9)));
0005a4  e3a03e1f          MOV      r3,#0x1f0
0005a8  e3a02032          MOV      r2,#0x32
0005ac  e28f1f4d          ADR      r1,|L1.1768|
0005b0  e3a00000          MOV      r0,#0
0005b4  ebfffffe          BL       EPDDrawString
;;;257                        EPDDrawString(FALSE,"                                 ",50,100+(44*(10)));
0005b8  e3a03f87          MOV      r3,#0x21c
0005bc  e3a02032          MOV      r2,#0x32
0005c0  e28f1e12          ADR      r1,|L1.1768|
0005c4  e3a00000          MOV      r0,#0
0005c8  ebfffffe          BL       EPDDrawString
;;;258                        EPDDrawString(FALSE,"                                 ",50,100+(44*(11)));
0005cc  e3a03f92          MOV      r3,#0x248
0005d0  e3a02032          MOV      r2,#0x32
0005d4  e28f1f43          ADR      r1,|L1.1768|
0005d8  e3a00000          MOV      r0,#0
0005dc  ebfffffe          BL       EPDDrawString
;;;259                        EPDDrawString(FALSE,"            ",700,100+(44*(2)));
0005e0  e3a030bc          MOV      r3,#0xbc
0005e4  e3a02faf          MOV      r2,#0x2bc
0005e8  e28f1f47          ADR      r1,|L1.1804|
0005ec  e3a00000          MOV      r0,#0
0005f0  ebfffffe          BL       EPDDrawString
;;;260                        EPDDrawString(TRUE,"            ",700,100+(44*(3)));
0005f4  e3a030e8          MOV      r3,#0xe8
0005f8  e3a02faf          MOV      r2,#0x2bc
0005fc  e28f1f42          ADR      r1,|L1.1804|
000600  e3a00001          MOV      r0,#1
000604  ebfffffe          BL       EPDDrawString
                  |L1.1544|
;;;261                        //EPDDrawString(TRUE,"            ",700,100+(44*(oldIndex+2)));
;;;262                    }
;;;263                    
;;;264                    //deselect item change to white
;;;265                    EPDDrawContainByIDPos(FALSE,EPD_PICT_LINE_SMALL_2_INDEX ,300,100+(44*(oldIndex+2)));
000608  e51f0288          LDR      r0,|L1.904|
00060c  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000610  e2800002          ADD      r0,r0,#2
000614  e3a0102c          MOV      r1,#0x2c
000618  e0000091          MUL      r0,r1,r0
00061c  e2803064          ADD      r3,r0,#0x64
000620  e3a02f4b          MOV      r2,#0x12c
000624  e3a0105c          MOV      r1,#0x5c
000628  e3a00000          MOV      r0,#0
00062c  ebfffffe          BL       EPDDrawContainByIDPos
;;;266                    //select item change to black
;;;267                    EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,300,100+(44*(nowIndex+2)));
000630  e51f0294          LDR      r0,|L1.932|
000634  e5900000          LDR      r0,[r0,#0]  ; nowIndex
000638  e2800002          ADD      r0,r0,#2
00063c  e3a0102c          MOV      r1,#0x2c
000640  e0000091          MUL      r0,r1,r0
000644  e2803064          ADD      r3,r0,#0x64
000648  e3a02f4b          MOV      r2,#0x12c
00064c  e3a0106b          MOV      r1,#0x6b
000650  e3a00001          MOV      r0,#1
000654  ebfffffe          BL       EPDDrawContainByIDPos
;;;268                    oldIndex=nowIndex;
000658  e51f02bc          LDR      r0,|L1.932|
00065c  e5900000          LDR      r0,[r0,#0]  ; nowIndex
000660  e51f12e0          LDR      r1,|L1.904|
000664  e5810000          STR      r0,[r1,#0]  ; oldIndex
                  |L1.1640|
;;;269                }
;;;270                break;
000668  ea000001          B        |L1.1652|
                  |L1.1644|
;;;271            case EXIT_TIMER:
00066c  e1a00000          MOV      r0,r0
;;;272                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);        
;;;273                break;
000670  e1a00000          MOV      r0,r0
                  |L1.1652|
000674  e1a00000          MOV      r0,r0                 ;247
;;;274        }
;;;275        keyIgnoreFlag = FALSE;
000678  e3a00000          MOV      r0,#0
00067c  e51f12e8          LDR      r1,|L1.924|
000680  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;276        return TRUE;
000684  e3a00001          MOV      r0,#1
;;;277    }
000688  e8bd8010          POP      {r4,pc}
;;;278    
                          ENDP

                  GuiRadarOTAToolPowerCallbackFunc PROC
;;;279    BOOL GuiRadarOTAToolPowerCallbackFunc(uint8_t type, int flag)
00068c  e1a02000          MOV      r2,r0
;;;280    {
;;;281        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;282        switch(type)
000690  e3520001          CMP      r2,#1
000694  0a000006          BEQ      |L1.1716|
000698  e3520002          CMP      r2,#2
00069c  0a000008          BEQ      |L1.1732|
0006a0  e3520003          CMP      r2,#3
0006a4  0a000008          BEQ      |L1.1740|
0006a8  e3520004          CMP      r2,#4
0006ac  1a00000a          BNE      |L1.1756|
0006b0  ea000007          B        |L1.1748|
                  |L1.1716|
;;;283        {
;;;284            case GUI_POWER_STATUS_INDEX:
0006b4  e1a00000          MOV      r0,r0
;;;285                return powerStatus;
0006b8  e51f032c          LDR      r0,|L1.916|
0006bc  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.1728|
;;;286            case GUI_POWER_ON_INDEX:
;;;287                break;
;;;288            case GUI_POWER_OFF_INDEX:
;;;289                break;
;;;290            case GUI_POWER_PREV_OFF_INDEX:
;;;291                break;
;;;292        }
;;;293        return TRUE;
;;;294    }
0006c0  e12fff1e          BX       lr
                  |L1.1732|
0006c4  e1a00000          MOV      r0,r0                 ;286
0006c8  ea000003          B        |L1.1756|
                  |L1.1740|
0006cc  e1a00000          MOV      r0,r0                 ;288
0006d0  ea000001          B        |L1.1756|
                  |L1.1748|
0006d4  e1a00000          MOV      r0,r0                 ;290
0006d8  e1a00000          MOV      r0,r0                 ;291
                  |L1.1756|
0006dc  e1a00000          MOV      r0,r0                 ;287
0006e0  e3a00001          MOV      r0,#1                 ;293
0006e4  eafffff5          B        |L1.1728|
;;;295    
                          ENDP

                  |L1.1768|
0006e8  20202020          DCB      "                                 ",0
0006ec  20202020
0006f0  20202020
0006f4  20202020
0006f8  20202020
0006fc  20202020
000700  20202020
000704  20202020
000708  2000    
00070a  00                DCB      0
00070b  00                DCB      0
                  |L1.1804|
00070c  20202020          DCB      "            ",0
000710  20202020
000714  20202020
000718  00      
000719  00                DCB      0
00071a  00                DCB      0
00071b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c455044          DCB      0x3c,0x45,0x50,0x44
000010  666c6173          DCB      0x66,0x6c,0x61,0x73
000014  68546f6f          DCB      0x68,0x54,0x6f,0x6f
000018  6c3e204b          DCB      0x6c,0x3e,0x20,0x4b
00001c  65794361          DCB      0x65,0x79,0x43,0x61
000020  6c6c6261          DCB      0x6c,0x6c,0x62,0x61
000024  636b3a20          DCB      0x63,0x6b,0x3a,0x20
000028  2046756e          DCB      0x20,0x46,0x75,0x6e
00002c  6374696f          DCB      0x63,0x74,0x69,0x6f
000030  6e20506f          DCB      0x6e,0x20,0x50,0x6f
000034  696e7465          DCB      0x69,0x6e,0x74,0x65
000038  72204552          DCB      0x72,0x20,0x45,0x52
00003c  524f5221          DCB      0x52,0x4f,0x52,0x21
000040  21210a00          DCB      0x21,0x21,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  keyinCallback
                          DCD      0x00000000
                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000008  01                DCB      0x01
                  keyIgnoreFlag
000009  000000            DCB      0x00,0x00,0x00
                  maxSelectItem
                          DCD      0x00000000
                  nowIndex
                          DCD      0x00000000
                  oldIndex
                          DCD      0x00000000
                  cleanMsgAfterMove
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  listItem
                          DCD      0x00000000
