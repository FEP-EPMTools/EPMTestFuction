; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\vl53l0x_api_strings.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\vl53l0x_api_strings.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\vl53l0x_api_strings.crf src\UserDrv\vl53l0x\core\src\vl53l0x_api_strings.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  VL53L0X_check_part_used PROC
;;;44     
;;;45     VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;46     		uint8_t *Revision,
;;;47     		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
;;;48     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a06002          MOV      r6,r2
;;;49     	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
000010  e3a07000          MOV      r7,#0
;;;50     	uint8_t ModuleIdInt;
;;;51     	char *ProductId_tmp;
;;;52     
;;;53     	LOG_FUNCTION_START("");
;;;54     
;;;55     	Status = VL53L0X_get_info_from_device(Dev, 2);
000014  e3a01002          MOV      r1,#2
000018  e1a00004          MOV      r0,r4
00001c  ebfffffe          BL       VL53L0X_get_info_from_device
000020  e1a07000          MOV      r7,r0
;;;56     
;;;57     	if (Status == VL53L0X_ERROR_NONE) {
000024  e3570000          CMP      r7,#0
000028  1a00000e          BNE      |L1.104|
;;;58     		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
00002c  e5d490f1          LDRB     r9,[r4,#0xf1]
;;;59     
;;;60     	if (ModuleIdInt == 0) {
000030  e3590000          CMP      r9,#0
000034  1a000005          BNE      |L1.80|
;;;61     		*Revision = 0;
000038  e3a00000          MOV      r0,#0
00003c  e5c50000          STRB     r0,[r5,#0]
;;;62     		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
000040  e28f0f87          ADR      r0,|L1.612|
000044  e5d00000          LDRB     r0,[r0,#0]
000048  e5c60040          STRB     r0,[r6,#0x40]
00004c  ea000005          B        |L1.104|
                  |L1.80|
;;;63     	} else {
;;;64     		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
000050  e5d400f2          LDRB     r0,[r4,#0xf2]
000054  e5c50000          STRB     r0,[r5,#0]
;;;65     		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
000058  e28480f3          ADD      r8,r4,#0xf3
;;;66     			ProductId);
;;;67     		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
00005c  e1a01008          MOV      r1,r8
000060  e2860040          ADD      r0,r6,#0x40
000064  ebfffffe          BL       strcpy
                  |L1.104|
;;;68     	}
;;;69     	}
;;;70     
;;;71     	LOG_FUNCTION_END(Status);
;;;72     	return Status;
000068  e1a00007          MOV      r0,r7
;;;73     }
00006c  e8bd87f0          POP      {r4-r10,pc}
;;;74     
                          ENDP

                  VL53L0X_get_device_info PROC
;;;75     
;;;76     VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
000070  e92d407c          PUSH     {r2-r6,lr}
;;;77     				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
;;;78     {
000074  e1a06000          MOV      r6,r0
000078  e1a04001          MOV      r4,r1
;;;79     	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
00007c  e3a05000          MOV      r5,#0
;;;80     	uint8_t revision_id;
;;;81     	uint8_t Revision;
;;;82     
;;;83     	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
000080  e1a02004          MOV      r2,r4
000084  e1a0100d          MOV      r1,sp
000088  e1a00006          MOV      r0,r6
00008c  ebfffffe          BL       VL53L0X_check_part_used
000090  e1a05000          MOV      r5,r0
;;;84     
;;;85     	if (Status == VL53L0X_ERROR_NONE) {
000094  e3550000          CMP      r5,#0
000098  1a00001d          BNE      |L1.276|
;;;86     		if (Revision == 0) {
00009c  e5dd0000          LDRB     r0,[sp,#0]
0000a0  e3500000          CMP      r0,#0
0000a4  1a000003          BNE      |L1.184|
;;;87     			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
0000a8  e28f1f6e          ADR      r1,|L1.616|
0000ac  e1a00004          MOV      r0,r4
0000b0  ebfffffe          BL       strcpy
0000b4  ea000013          B        |L1.264|
                  |L1.184|
;;;88     					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
;;;89     		} else if ((Revision <= 34) && (Revision != 32)) {
0000b8  e5dd0000          LDRB     r0,[sp,#0]
0000bc  e3500022          CMP      r0,#0x22
0000c0  ca000006          BGT      |L1.224|
0000c4  e5dd0000          LDRB     r0,[sp,#0]
0000c8  e3500020          CMP      r0,#0x20
0000cc  0a000003          BEQ      |L1.224|
;;;90     			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
0000d0  e28f1f67          ADR      r1,|L1.628|
0000d4  e1a00004          MOV      r0,r4
0000d8  ebfffffe          BL       strcpy
0000dc  ea000009          B        |L1.264|
                  |L1.224|
;;;91     					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
;;;92     		} else if (Revision < 39) {
0000e0  e5dd0000          LDRB     r0,[sp,#0]
0000e4  e3500027          CMP      r0,#0x27
0000e8  aa000003          BGE      |L1.252|
;;;93     			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
0000ec  e28f1f63          ADR      r1,|L1.640|
0000f0  e1a00004          MOV      r0,r4
0000f4  ebfffffe          BL       strcpy
0000f8  ea000002          B        |L1.264|
                  |L1.252|
;;;94     					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
;;;95     		} else {
;;;96     			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
0000fc  e28f1f62          ADR      r1,|L1.652|
000100  e1a00004          MOV      r0,r4
000104  ebfffffe          BL       strcpy
                  |L1.264|
;;;97     					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
;;;98     		}
;;;99     
;;;100    		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
000108  e28f1f65          ADR      r1,|L1.676|
00010c  e2840020          ADD      r0,r4,#0x20
000110  ebfffffe          BL       strcpy
                  |L1.276|
;;;101    				VL53L0X_STRING_DEVICE_INFO_TYPE);
;;;102    
;;;103    	}
;;;104    
;;;105    	if (Status == VL53L0X_ERROR_NONE) {
000114  e3550000          CMP      r5,#0
000118  1a000004          BNE      |L1.304|
;;;106    		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
00011c  e2842060          ADD      r2,r4,#0x60
000120  e3a010c0          MOV      r1,#0xc0
000124  e1a00006          MOV      r0,r6
000128  ebfffffe          BL       VL53L0X_RdByte
00012c  e1a05000          MOV      r5,r0
                  |L1.304|
;;;107    				&pVL53L0X_DeviceInfo->ProductType);
;;;108    	}
;;;109    
;;;110    	if (Status == VL53L0X_ERROR_NONE) {
000130  e3550000          CMP      r5,#0
000134  1a00000a          BNE      |L1.356|
;;;111    		Status = VL53L0X_RdByte(Dev,
000138  e28d2004          ADD      r2,sp,#4
00013c  e3a010c2          MOV      r1,#0xc2
000140  e1a00006          MOV      r0,r6
000144  ebfffffe          BL       VL53L0X_RdByte
000148  e1a05000          MOV      r5,r0
;;;112    			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
;;;113    				&revision_id);
;;;114    		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
00014c  e3a00001          MOV      r0,#1
000150  e5c40061          STRB     r0,[r4,#0x61]
;;;115    		pVL53L0X_DeviceInfo->ProductRevisionMinor =
000154  e5dd0004          LDRB     r0,[sp,#4]
000158  e20000f0          AND      r0,r0,#0xf0
00015c  e1a00240          ASR      r0,r0,#4
000160  e5c40062          STRB     r0,[r4,#0x62]
                  |L1.356|
;;;116    					(revision_id & 0xF0) >> 4;
;;;117    	}
;;;118    
;;;119    	return Status;
000164  e1a00005          MOV      r0,r5
;;;120    }
000168  e8bd807c          POP      {r2-r6,pc}
;;;121    
                          ENDP

                  VL53L0X_get_device_error_string PROC
;;;122    
;;;123    VL53L0X_Error VL53L0X_get_device_error_string(VL53L0X_DeviceError ErrorCode,
00016c  e92d4070          PUSH     {r4-r6,lr}
;;;124    		char *pDeviceErrorString)
;;;125    {
000170  e1a04000          MOV      r4,r0
000174  e1a05001          MOV      r5,r1
;;;126    	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
000178  e3a06000          MOV      r6,#0
;;;127    
;;;128    	LOG_FUNCTION_START("");
;;;129    
;;;130    	switch (ErrorCode) {
00017c  e354000f          CMP      r4,#0xf
000180  308ff104          ADDCC    pc,pc,r4,LSL #2
000184  ea000099          B        |L1.1008|
000188  ea00000d          B        |L1.452|
00018c  ea000011          B        |L1.472|
000190  ea000015          B        |L1.492|
000194  ea000019          B        |L1.512|
000198  ea00001d          B        |L1.532|
00019c  ea000021          B        |L1.552|
0001a0  ea000025          B        |L1.572|
0001a4  ea000029          B        |L1.592|
0001a8  ea00006d          B        |L1.868|
0001ac  ea000071          B        |L1.888|
0001b0  ea000075          B        |L1.908|
0001b4  ea000079          B        |L1.928|
0001b8  ea00007d          B        |L1.948|
0001bc  ea000081          B        |L1.968|
0001c0  ea000085          B        |L1.988|
                  |L1.452|
;;;131    	case VL53L0X_DEVICEERROR_NONE:
0001c4  e1a00000          MOV      r0,r0
;;;132    		VL53L0X_COPYSTRING(pDeviceErrorString,
0001c8  e28f10dc          ADR      r1,|L1.684|
0001cc  e1a00005          MOV      r0,r5
0001d0  ebfffffe          BL       strcpy
;;;133    			VL53L0X_STRING_DEVICEERROR_NONE);
;;;134    	break;
0001d4  ea00008a          B        |L1.1028|
                  |L1.472|
;;;135    	case VL53L0X_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
0001d8  e1a00000          MOV      r0,r0
;;;136    		VL53L0X_COPYSTRING(pDeviceErrorString,
0001dc  e28f10d4          ADR      r1,|L1.696|
0001e0  e1a00005          MOV      r0,r5
0001e4  ebfffffe          BL       strcpy
;;;137    			VL53L0X_STRING_DEVICEERROR_VCSELCONTINUITYTESTFAILURE);
;;;138    	break;
0001e8  ea000085          B        |L1.1028|
                  |L1.492|
;;;139    	case VL53L0X_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
0001ec  e1a00000          MOV      r0,r0
;;;140    		VL53L0X_COPYSTRING(pDeviceErrorString,
0001f0  e28f10e0          ADR      r1,|L1.728|
0001f4  e1a00005          MOV      r0,r5
0001f8  ebfffffe          BL       strcpy
;;;141    			VL53L0X_STRING_DEVICEERROR_VCSELWATCHDOGTESTFAILURE);
;;;142    	break;
0001fc  ea000080          B        |L1.1028|
                  |L1.512|
;;;143    	case VL53L0X_DEVICEERROR_NOVHVVALUEFOUND:
000200  e1a00000          MOV      r0,r0
;;;144    		VL53L0X_COPYSTRING(pDeviceErrorString,
000204  e28f10e8          ADR      r1,|L1.756|
000208  e1a00005          MOV      r0,r5
00020c  ebfffffe          BL       strcpy
;;;145    			VL53L0X_STRING_DEVICEERROR_NOVHVVALUEFOUND);
;;;146    	break;
000210  ea00007b          B        |L1.1028|
                  |L1.532|
;;;147    	case VL53L0X_DEVICEERROR_MSRCNOTARGET:
000214  e1a00000          MOV      r0,r0
;;;148    		VL53L0X_COPYSTRING(pDeviceErrorString,
000218  e28f10e8          ADR      r1,|L1.776|
00021c  e1a00005          MOV      r0,r5
000220  ebfffffe          BL       strcpy
;;;149    			VL53L0X_STRING_DEVICEERROR_MSRCNOTARGET);
;;;150    	break;
000224  ea000076          B        |L1.1028|
                  |L1.552|
;;;151    	case VL53L0X_DEVICEERROR_SNRCHECK:
000228  e1a00000          MOV      r0,r0
;;;152    		VL53L0X_COPYSTRING(pDeviceErrorString,
00022c  e28f10ec          ADR      r1,|L1.800|
000230  e1a00005          MOV      r0,r5
000234  ebfffffe          BL       strcpy
;;;153    			VL53L0X_STRING_DEVICEERROR_SNRCHECK);
;;;154    	break;
000238  ea000071          B        |L1.1028|
                  |L1.572|
;;;155    	case VL53L0X_DEVICEERROR_RANGEPHASECHECK:
00023c  e1a00000          MOV      r0,r0
;;;156    		VL53L0X_COPYSTRING(pDeviceErrorString,
000240  e28f10e8          ADR      r1,|L1.816|
000244  e1a00005          MOV      r0,r5
000248  ebfffffe          BL       strcpy
;;;157    			VL53L0X_STRING_DEVICEERROR_RANGEPHASECHECK);
;;;158    	break;
00024c  ea00006c          B        |L1.1028|
                  |L1.592|
;;;159    	case VL53L0X_DEVICEERROR_SIGMATHRESHOLDCHECK:
000250  e1a00000          MOV      r0,r0
;;;160    		VL53L0X_COPYSTRING(pDeviceErrorString,
000254  e28f10ec          ADR      r1,|L1.840|
000258  e1a00005          MOV      r0,r5
00025c  ebfffffe          BL       strcpy
;;;161    			VL53L0X_STRING_DEVICEERROR_SIGMATHRESHOLDCHECK);
;;;162    	break;
000260  ea000067          B        |L1.1028|
                  |L1.612|
000264  00                DCB      0
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L1.616|
000268  564c3533          DCB      "VL53L0X TS0",0
00026c  4c305820
000270  54533000
                  |L1.628|
000274  564c3533          DCB      "VL53L0X TS1",0
000278  4c305820
00027c  54533100
                  |L1.640|
000280  564c3533          DCB      "VL53L0X TS2",0
000284  4c305820
000288  54533200
                  |L1.652|
00028c  564c3533          DCB      "VL53L0X ES1 or later",0
000290  4c305820
000294  45533120
000298  6f72206c
00029c  61746572
0002a0  00      
0002a1  00                DCB      0
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L1.676|
0002a4  564c3533          DCB      "VL53L0X",0
0002a8  4c305800
                  |L1.684|
0002ac  4e6f2055          DCB      "No Update",0
0002b0  70646174
0002b4  6500    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L1.696|
0002b8  56435345          DCB      "VCSEL Continuity Test Failure",0
0002bc  4c20436f
0002c0  6e74696e
0002c4  75697479
0002c8  20546573
0002cc  74204661
0002d0  696c7572
0002d4  6500    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L1.728|
0002d8  56435345          DCB      "VCSEL Watchdog Test Failure",0
0002dc  4c205761
0002e0  74636864
0002e4  6f672054
0002e8  65737420
0002ec  4661696c
0002f0  75726500
                  |L1.756|
0002f4  4e6f2056          DCB      "No VHV Value found",0
0002f8  48562056
0002fc  616c7565
000300  20666f75
000304  6e6400  
000307  00                DCB      0
                  |L1.776|
000308  4d535243          DCB      "MSRC No Target Error",0
00030c  204e6f20
000310  54617267
000314  65742045
000318  72726f72
00031c  00      
00031d  00                DCB      0
00031e  00                DCB      0
00031f  00                DCB      0
                  |L1.800|
000320  534e5220          DCB      "SNR Check Exit",0
000324  43686563
000328  6b204578
00032c  697400  
00032f  00                DCB      0
                  |L1.816|
000330  52616e67          DCB      "Range Phase Check Error",0
000334  65205068
000338  61736520
00033c  43686563
000340  6b204572
000344  726f7200
                  |L1.840|
000348  5369676d          DCB      "Sigma Threshold Check Error",0
00034c  61205468
000350  72657368
000354  6f6c6420
000358  43686563
00035c  6b204572
000360  726f7200
                  |L1.868|
;;;163    	case VL53L0X_DEVICEERROR_TCC:
000364  e1a00000          MOV      r0,r0
;;;164    		VL53L0X_COPYSTRING(pDeviceErrorString,
000368  e28f1f53          ADR      r1,|L1.1212|
00036c  e1a00005          MOV      r0,r5
000370  ebfffffe          BL       strcpy
;;;165    			VL53L0X_STRING_DEVICEERROR_TCC);
;;;166    	break;
000374  ea000022          B        |L1.1028|
                  |L1.888|
;;;167    	case VL53L0X_DEVICEERROR_PHASECONSISTENCY:
000378  e1a00000          MOV      r0,r0
;;;168    		VL53L0X_COPYSTRING(pDeviceErrorString,
00037c  e28f1f51          ADR      r1,|L1.1224|
000380  e1a00005          MOV      r0,r5
000384  ebfffffe          BL       strcpy
;;;169    			VL53L0X_STRING_DEVICEERROR_PHASECONSISTENCY);
;;;170    	break;
000388  ea00001d          B        |L1.1028|
                  |L1.908|
;;;171    	case VL53L0X_DEVICEERROR_MINCLIP:
00038c  e1a00000          MOV      r0,r0
;;;172    		VL53L0X_COPYSTRING(pDeviceErrorString,
000390  e28f1f52          ADR      r1,|L1.1248|
000394  e1a00005          MOV      r0,r5
000398  ebfffffe          BL       strcpy
;;;173    			VL53L0X_STRING_DEVICEERROR_MINCLIP);
;;;174    	break;
00039c  ea000018          B        |L1.1028|
                  |L1.928|
;;;175    	case VL53L0X_DEVICEERROR_RANGECOMPLETE:
0003a0  e1a00000          MOV      r0,r0
;;;176    		VL53L0X_COPYSTRING(pDeviceErrorString,
0003a4  e28f1f51          ADR      r1,|L1.1264|
0003a8  e1a00005          MOV      r0,r5
0003ac  ebfffffe          BL       strcpy
;;;177    			VL53L0X_STRING_DEVICEERROR_RANGECOMPLETE);
;;;178    	break;
0003b0  ea000013          B        |L1.1028|
                  |L1.948|
;;;179    	case VL53L0X_DEVICEERROR_ALGOUNDERFLOW:
0003b4  e1a00000          MOV      r0,r0
;;;180    		VL53L0X_COPYSTRING(pDeviceErrorString,
0003b8  e28f1d05          ADR      r1,|L1.1280|
0003bc  e1a00005          MOV      r0,r5
0003c0  ebfffffe          BL       strcpy
;;;181    			VL53L0X_STRING_DEVICEERROR_ALGOUNDERFLOW);
;;;182    	break;
0003c4  ea00000e          B        |L1.1028|
                  |L1.968|
;;;183    	case VL53L0X_DEVICEERROR_ALGOOVERFLOW:
0003c8  e1a00000          MOV      r0,r0
;;;184    		VL53L0X_COPYSTRING(pDeviceErrorString,
0003cc  e28f1f52          ADR      r1,|L1.1308|
0003d0  e1a00005          MOV      r0,r5
0003d4  ebfffffe          BL       strcpy
;;;185    			VL53L0X_STRING_DEVICEERROR_ALGOOVERFLOW);
;;;186    	break;
0003d8  ea000009          B        |L1.1028|
                  |L1.988|
;;;187    	case VL53L0X_DEVICEERROR_RANGEIGNORETHRESHOLD:
0003dc  e1a00000          MOV      r0,r0
;;;188    		VL53L0X_COPYSTRING(pDeviceErrorString,
0003e0  e28f1e15          ADR      r1,|L1.1336|
0003e4  e1a00005          MOV      r0,r5
0003e8  ebfffffe          BL       strcpy
;;;189    			VL53L0X_STRING_DEVICEERROR_RANGEIGNORETHRESHOLD);
;;;190    	break;
0003ec  ea000004          B        |L1.1028|
                  |L1.1008|
;;;191    
;;;192    	default:
0003f0  e1a00000          MOV      r0,r0
;;;193    		VL53L0X_COPYSTRING(pDeviceErrorString,
0003f4  e28f1f57          ADR      r1,|L1.1368|
0003f8  e1a00005          MOV      r0,r5
0003fc  ebfffffe          BL       strcpy
000400  e1a00000          MOV      r0,r0                 ;130
                  |L1.1028|
000404  e1a00000          MOV      r0,r0                 ;134
;;;194    			VL53L0X_STRING_UNKNOW_ERROR_CODE);
;;;195    
;;;196    	}
;;;197    
;;;198    	LOG_FUNCTION_END(Status);
;;;199    	return Status;
000408  e1a00006          MOV      r0,r6
;;;200    }
00040c  e8bd8070          POP      {r4-r6,pc}
;;;201    
                          ENDP

                  VL53L0X_get_range_status_string PROC
;;;202    VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
000410  e92d4070          PUSH     {r4-r6,lr}
;;;203    		char *pRangeStatusString)
;;;204    {
000414  e1a04000          MOV      r4,r0
000418  e1a05001          MOV      r5,r1
;;;205    	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
00041c  e3a06000          MOV      r6,#0
;;;206    
;;;207    	LOG_FUNCTION_START("");
;;;208    
;;;209    	switch (RangeStatus) {
000420  e3540006          CMP      r4,#6
000424  308ff104          ADDCC    pc,pc,r4,LSL #2
000428  ea000063          B        |L1.1468|
00042c  ea000004          B        |L1.1092|
000430  ea000008          B        |L1.1112|
000434  ea00000c          B        |L1.1132|
000438  ea000010          B        |L1.1152|
00043c  ea000014          B        |L1.1172|
000440  ea000018          B        |L1.1192|
                  |L1.1092|
;;;210    	case 0:
000444  e1a00000          MOV      r0,r0
;;;211    		VL53L0X_COPYSTRING(pRangeStatusString,
000448  e28f1f47          ADR      r1,|L1.1388|
00044c  e1a00005          MOV      r0,r5
000450  ebfffffe          BL       strcpy
;;;212    			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
;;;213    	break;
000454  ea00005d          B        |L1.1488|
                  |L1.1112|
;;;214    	case 1:
000458  e1a00000          MOV      r0,r0
;;;215    		VL53L0X_COPYSTRING(pRangeStatusString,
00045c  e28f1f45          ADR      r1,|L1.1400|
000460  e1a00005          MOV      r0,r5
000464  ebfffffe          BL       strcpy
;;;216    			VL53L0X_STRING_RANGESTATUS_SIGMA);
;;;217    	break;
000468  ea000058          B        |L1.1488|
                  |L1.1132|
;;;218    	case 2:
00046c  e1a00000          MOV      r0,r0
;;;219    		VL53L0X_COPYSTRING(pRangeStatusString,
000470  e28f1f43          ADR      r1,|L1.1412|
000474  e1a00005          MOV      r0,r5
000478  ebfffffe          BL       strcpy
;;;220    			VL53L0X_STRING_RANGESTATUS_SIGNAL);
;;;221    	break;
00047c  ea000053          B        |L1.1488|
                  |L1.1152|
;;;222    	case 3:
000480  e1a00000          MOV      r0,r0
;;;223    		VL53L0X_COPYSTRING(pRangeStatusString,
000484  e28f1f41          ADR      r1,|L1.1424|
000488  e1a00005          MOV      r0,r5
00048c  ebfffffe          BL       strcpy
;;;224    			VL53L0X_STRING_RANGESTATUS_MINRANGE);
;;;225    	break;
000490  ea00004e          B        |L1.1488|
                  |L1.1172|
;;;226    	case 4:
000494  e1a00000          MOV      r0,r0
;;;227    		VL53L0X_COPYSTRING(pRangeStatusString,
000498  e28f1c01          ADR      r1,|L1.1440|
00049c  e1a00005          MOV      r0,r5
0004a0  ebfffffe          BL       strcpy
;;;228    			VL53L0X_STRING_RANGESTATUS_PHASE);
;;;229    	break;
0004a4  ea000049          B        |L1.1488|
                  |L1.1192|
;;;230    	case 5:
0004a8  e1a00000          MOV      r0,r0
;;;231    		VL53L0X_COPYSTRING(pRangeStatusString,
0004ac  e28f10f8          ADR      r1,|L1.1452|
0004b0  e1a00005          MOV      r0,r5
0004b4  ebfffffe          BL       strcpy
;;;232    			VL53L0X_STRING_RANGESTATUS_HW);
;;;233    	break;
0004b8  ea000044          B        |L1.1488|
                  |L1.1212|
0004bc  54434320          DCB      "TCC Error",0
0004c0  4572726f
0004c4  7200    
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L1.1224|
0004c8  50686173          DCB      "Phase Consistency Error",0
0004cc  6520436f
0004d0  6e736973
0004d4  74656e63
0004d8  79204572
0004dc  726f7200
                  |L1.1248|
0004e0  4d696e20          DCB      "Min Clip Error",0
0004e4  436c6970
0004e8  20457272
0004ec  6f7200  
0004ef  00                DCB      0
                  |L1.1264|
0004f0  52616e67          DCB      "Range Complete",0
0004f4  6520436f
0004f8  6d706c65
0004fc  746500  
0004ff  00                DCB      0
                  |L1.1280|
000500  52616e67          DCB      "Range Algo Underflow Error",0
000504  6520416c
000508  676f2055
00050c  6e646572
000510  666c6f77
000514  20457272
000518  6f7200  
00051b  00                DCB      0
                  |L1.1308|
00051c  52616e67          DCB      "Range Algo Overlow Error",0
000520  6520416c
000524  676f204f
000528  7665726c
00052c  6f772045
000530  72726f72
000534  00      
000535  00                DCB      0
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  52616e67          DCB      "Range Ignore Threshold Error",0
00053c  65204967
000540  6e6f7265
000544  20546872
000548  6573686f
00054c  6c642045
000550  72726f72
000554  00      
000555  00                DCB      0
000556  00                DCB      0
000557  00                DCB      0
                  |L1.1368|
000558  556e6b6e          DCB      "Unknown Error Code",0
00055c  6f776e20
000560  4572726f
000564  7220436f
000568  646500  
00056b  00                DCB      0
                  |L1.1388|
00056c  52616e67          DCB      "Range Valid",0
000570  65205661
000574  6c696400
                  |L1.1400|
000578  5369676d          DCB      "Sigma Fail",0
00057c  61204661
000580  696c00  
000583  00                DCB      0
                  |L1.1412|
000584  5369676e          DCB      "Signal Fail",0
000588  616c2046
00058c  61696c00
                  |L1.1424|
000590  4d696e20          DCB      "Min Range Fail",0
000594  52616e67
000598  65204661
00059c  696c00  
00059f  00                DCB      0
                  |L1.1440|
0005a0  50686173          DCB      "Phase Fail",0
0005a4  65204661
0005a8  696c00  
0005ab  00                DCB      0
                  |L1.1452|
0005ac  48617264          DCB      "Hardware Fail",0
0005b0  77617265
0005b4  20466169
0005b8  6c00    
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
;;;234    
;;;235    	default: /**/
0005bc  e1a00000          MOV      r0,r0
;;;236    		VL53L0X_COPYSTRING(pRangeStatusString,
0005c0  e24f1fc7          ADR      r1,|L1.684|
0005c4  e1a00005          MOV      r0,r5
0005c8  ebfffffe          BL       strcpy
0005cc  e1a00000          MOV      r0,r0                 ;209
                  |L1.1488|
0005d0  e1a00000          MOV      r0,r0                 ;213
;;;237    				VL53L0X_STRING_RANGESTATUS_NONE);
;;;238    	}
;;;239    
;;;240    	LOG_FUNCTION_END(Status);
;;;241    	return Status;
0005d4  e1a00006          MOV      r0,r6
;;;242    }
0005d8  e8bd8070          POP      {r4-r6,pc}
;;;243    
                          ENDP

                  VL53L0X_get_pal_error_string PROC
;;;244    VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
0005dc  e92d4070          PUSH     {r4-r6,lr}
;;;245    		char *pPalErrorString)
;;;246    {
0005e0  e1a04000          MOV      r4,r0
0005e4  e1a05001          MOV      r5,r1
;;;247    	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
0005e8  e3a06000          MOV      r6,#0
;;;248    
;;;249    	LOG_FUNCTION_START("");
;;;250    
;;;251    	switch (PalErrorCode) {
0005ec  e3740008          CMN      r4,#8
0005f0  0a00004e          BEQ      |L1.1840|
0005f4  ca000014          BGT      |L1.1612|
0005f8  e3740014          CMN      r4,#0x14
0005fc  0a0000a2          BEQ      |L1.2188|
000600  ca000008          BGT      |L1.1576|
000604  e3740063          CMN      r4,#0x63
000608  0a0000b3          BEQ      |L1.2268|
00060c  e3740032          CMN      r4,#0x32
000610  0a0000ac          BEQ      |L1.2248|
000614  e3740028          CMN      r4,#0x28
000618  0a0000a5          BEQ      |L1.2228|
00061c  e374001e          CMN      r4,#0x1e
000620  1a0000b2          BNE      |L1.2288|
000624  ea00009d          B        |L1.2208|
                  |L1.1576|
000628  e374000c          CMN      r4,#0xc
00062c  0a000030          BEQ      |L1.1780|
000630  e374000b          CMN      r4,#0xb
000634  0a00004c          BEQ      |L1.1900|
000638  e374000a          CMN      r4,#0xa
00063c  0a000045          BEQ      |L1.1880|
000640  e3740009          CMN      r4,#9
000644  1a0000a9          BNE      |L1.2288|
000648  ea00003d          B        |L1.1860|
                  |L1.1612|
00064c  e2840007          ADD      r0,r4,#7
000650  e3500008          CMP      r0,#8
000654  308ff100          ADDCC    pc,pc,r0,LSL #2
000658  ea0000a4          B        |L1.2288|
00065c  ea00002e          B        |L1.1820|
000660  ea000028          B        |L1.1800|
000664  ea00001d          B        |L1.1760|
000668  ea000017          B        |L1.1740|
00066c  ea000011          B        |L1.1720|
000670  ea00000b          B        |L1.1700|
000674  ea000005          B        |L1.1680|
000678  eaffffff          B        |L1.1660|
                  |L1.1660|
;;;252    	case VL53L0X_ERROR_NONE:
00067c  e1a00000          MOV      r0,r0
;;;253    		VL53L0X_COPYSTRING(pPalErrorString,
000680  e28f10f8          ADR      r1,|L1.1920|
000684  e1a00005          MOV      r0,r5
000688  ebfffffe          BL       strcpy
;;;254    			VL53L0X_STRING_ERROR_NONE);
;;;255    	break;
00068c  ea00009c          B        |L1.2308|
                  |L1.1680|
;;;256    	case VL53L0X_ERROR_CALIBRATION_WARNING:
000690  e1a00000          MOV      r0,r0
;;;257    		VL53L0X_COPYSTRING(pPalErrorString,
000694  e28f10ec          ADR      r1,|L1.1928|
000698  e1a00005          MOV      r0,r5
00069c  ebfffffe          BL       strcpy
;;;258    			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
;;;259    	break;
0006a0  ea000097          B        |L1.2308|
                  |L1.1700|
;;;260    	case VL53L0X_ERROR_MIN_CLIPPED:
0006a4  e1a00000          MOV      r0,r0
;;;261    		VL53L0X_COPYSTRING(pPalErrorString,
0006a8  e28f10f4          ADR      r1,|L1.1956|
0006ac  e1a00005          MOV      r0,r5
0006b0  ebfffffe          BL       strcpy
;;;262    			VL53L0X_STRING_ERROR_MIN_CLIPPED);
;;;263    	break;
0006b4  ea000092          B        |L1.2308|
                  |L1.1720|
;;;264    	case VL53L0X_ERROR_UNDEFINED:
0006b8  e1a00000          MOV      r0,r0
;;;265    		VL53L0X_COPYSTRING(pPalErrorString,
0006bc  e28f10f4          ADR      r1,|L1.1976|
0006c0  e1a00005          MOV      r0,r5
0006c4  ebfffffe          BL       strcpy
;;;266    			VL53L0X_STRING_ERROR_UNDEFINED);
;;;267    	break;
0006c8  ea00008d          B        |L1.2308|
                  |L1.1740|
;;;268    	case VL53L0X_ERROR_INVALID_PARAMS:
0006cc  e1a00000          MOV      r0,r0
;;;269    		VL53L0X_COPYSTRING(pPalErrorString,
0006d0  e28f10f0          ADR      r1,|L1.1992|
0006d4  e1a00005          MOV      r0,r5
0006d8  ebfffffe          BL       strcpy
;;;270    			VL53L0X_STRING_ERROR_INVALID_PARAMS);
;;;271    	break;
0006dc  ea000088          B        |L1.2308|
                  |L1.1760|
;;;272    	case VL53L0X_ERROR_NOT_SUPPORTED:
0006e0  e1a00000          MOV      r0,r0
;;;273    		VL53L0X_COPYSTRING(pPalErrorString,
0006e4  e28f10f8          ADR      r1,|L1.2020|
0006e8  e1a00005          MOV      r0,r5
0006ec  ebfffffe          BL       strcpy
;;;274    			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
;;;275    	break;
0006f0  ea000083          B        |L1.2308|
                  |L1.1780|
;;;276    	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
0006f4  e1a00000          MOV      r0,r0
;;;277    		VL53L0X_COPYSTRING(pPalErrorString,
0006f8  e28f10f8          ADR      r1,|L1.2040|
0006fc  e1a00005          MOV      r0,r5
000700  ebfffffe          BL       strcpy
;;;278    			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
;;;279    	break;
000704  ea00007e          B        |L1.2308|
                  |L1.1800|
;;;280    	case VL53L0X_ERROR_RANGE_ERROR:
000708  e1a00000          MOV      r0,r0
;;;281    		VL53L0X_COPYSTRING(pPalErrorString,
00070c  e28f10fc          ADR      r1,|L1.2064|
000710  e1a00005          MOV      r0,r5
000714  ebfffffe          BL       strcpy
;;;282    			VL53L0X_STRING_ERROR_RANGE_ERROR);
;;;283    	break;
000718  ea000079          B        |L1.2308|
                  |L1.1820|
;;;284    	case VL53L0X_ERROR_TIME_OUT:
00071c  e1a00000          MOV      r0,r0
;;;285    		VL53L0X_COPYSTRING(pPalErrorString,
000720  e28f10f4          ADR      r1,|L1.2076|
000724  e1a00005          MOV      r0,r5
000728  ebfffffe          BL       strcpy
;;;286    			VL53L0X_STRING_ERROR_TIME_OUT);
;;;287    	break;
00072c  ea000074          B        |L1.2308|
                  |L1.1840|
;;;288    	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
000730  e1a00000          MOV      r0,r0
;;;289    		VL53L0X_COPYSTRING(pPalErrorString,
000734  e28f10f0          ADR      r1,|L1.2092|
000738  e1a00005          MOV      r0,r5
00073c  ebfffffe          BL       strcpy
;;;290    			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
;;;291    	break;
000740  ea00006f          B        |L1.2308|
                  |L1.1860|
;;;292    	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
000744  e1a00000          MOV      r0,r0
;;;293    		VL53L0X_COPYSTRING(pPalErrorString,
000748  e28f10f8          ADR      r1,|L1.2120|
00074c  e1a00005          MOV      r0,r5
000750  ebfffffe          BL       strcpy
;;;294    			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
;;;295    	break;
000754  ea00006a          B        |L1.2308|
                  |L1.1880|
;;;296    	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
000758  e1a00000          MOV      r0,r0
;;;297    		VL53L0X_COPYSTRING(pPalErrorString,
00075c  e28f10f8          ADR      r1,|L1.2140|
000760  e1a00005          MOV      r0,r5
000764  ebfffffe          BL       strcpy
;;;298    			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
;;;299    	break;
000768  ea000065          B        |L1.2308|
                  |L1.1900|
;;;300    	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
00076c  e1a00000          MOV      r0,r0
;;;301    		VL53L0X_COPYSTRING(pPalErrorString,
000770  e28f10f8          ADR      r1,|L1.2160|
000774  e1a00005          MOV      r0,r5
000778  ebfffffe          BL       strcpy
;;;302    			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
;;;303    	break;
00077c  ea000060          B        |L1.2308|
                  |L1.1920|
000780  53756363          DCB      "Success",0
000784  65737300
                  |L1.1928|
000788  43616c69          DCB      "Calibration Warning Error",0
00078c  62726174
000790  696f6e20
000794  5761726e
000798  696e6720
00079c  4572726f
0007a0  7200    
0007a2  00                DCB      0
0007a3  00                DCB      0
                  |L1.1956|
0007a4  4d696e20          DCB      "Min clipped error",0
0007a8  636c6970
0007ac  70656420
0007b0  6572726f
0007b4  7200    
0007b6  00                DCB      0
0007b7  00                DCB      0
                  |L1.1976|
0007b8  556e6465          DCB      "Undefined error",0
0007bc  66696e65
0007c0  64206572
0007c4  726f7200
                  |L1.1992|
0007c8  496e7661          DCB      "Invalid parameters error",0
0007cc  6c696420
0007d0  70617261
0007d4  6d657465
0007d8  72732065
0007dc  72726f72
0007e0  00      
0007e1  00                DCB      0
0007e2  00                DCB      0
0007e3  00                DCB      0
                  |L1.2020|
0007e4  4e6f7420          DCB      "Not supported error",0
0007e8  73757070
0007ec  6f727465
0007f0  64206572
0007f4  726f7200
                  |L1.2040|
0007f8  496e7465          DCB      "Interrupt not Cleared",0
0007fc  72727570
000800  74206e6f
000804  7420436c
000808  65617265
00080c  6400    
00080e  00                DCB      0
00080f  00                DCB      0
                  |L1.2064|
000810  52616e67          DCB      "Range error",0
000814  65206572
000818  726f7200
                  |L1.2076|
00081c  54696d65          DCB      "Time out error",0
000820  206f7574
000824  20657272
000828  6f7200  
00082b  00                DCB      0
                  |L1.2092|
00082c  4d6f6465          DCB      "Mode not supported error",0
000830  206e6f74
000834  20737570
000838  706f7274
00083c  65642065
000840  72726f72
000844  00      
000845  00                DCB      0
000846  00                DCB      0
000847  00                DCB      0
                  |L1.2120|
000848  42756666          DCB      "Buffer too small",0
00084c  65722074
000850  6f6f2073
000854  6d616c6c
000858  00      
000859  00                DCB      0
00085a  00                DCB      0
00085b  00                DCB      0
                  |L1.2140|
00085c  4750494f          DCB      "GPIO not existing",0
000860  206e6f74
000864  20657869
000868  7374696e
00086c  6700    
00086e  00                DCB      0
00086f  00                DCB      0
                  |L1.2160|
000870  4750494f          DCB      "GPIO funct not supported",0
000874  2066756e
000878  6374206e
00087c  6f742073
000880  7570706f
000884  72746564
000888  00      
000889  00                DCB      0
00088a  00                DCB      0
00088b  00                DCB      0
                  |L1.2188|
;;;304    	case VL53L0X_ERROR_CONTROL_INTERFACE:
00088c  e1a00000          MOV      r0,r0
;;;305    		VL53L0X_COPYSTRING(pPalErrorString,
000890  e28f1f79          ADR      r1,|L1.2684|
000894  e1a00005          MOV      r0,r5
000898  ebfffffe          BL       strcpy
;;;306    			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
;;;307    	break;
00089c  ea000018          B        |L1.2308|
                  |L1.2208|
;;;308    	case VL53L0X_ERROR_INVALID_COMMAND:
0008a0  e1a00000          MOV      r0,r0
;;;309    		VL53L0X_COPYSTRING(pPalErrorString,
0008a4  e28f1f7a          ADR      r1,|L1.2708|
0008a8  e1a00005          MOV      r0,r5
0008ac  ebfffffe          BL       strcpy
;;;310    			VL53L0X_STRING_ERROR_INVALID_COMMAND);
;;;311    	break;
0008b0  ea000013          B        |L1.2308|
                  |L1.2228|
;;;312    	case VL53L0X_ERROR_DIVISION_BY_ZERO:
0008b4  e1a00000          MOV      r0,r0
;;;313    		VL53L0X_COPYSTRING(pPalErrorString,
0008b8  e28f1f7b          ADR      r1,|L1.2732|
0008bc  e1a00005          MOV      r0,r5
0008c0  ebfffffe          BL       strcpy
;;;314    			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
;;;315    	break;
0008c4  ea00000e          B        |L1.2308|
                  |L1.2248|
;;;316    	case VL53L0X_ERROR_REF_SPAD_INIT:
0008c8  e1a00000          MOV      r0,r0
;;;317    		VL53L0X_COPYSTRING(pPalErrorString,
0008cc  e28f1e1f          ADR      r1,|L1.2756|
0008d0  e1a00005          MOV      r0,r5
0008d4  ebfffffe          BL       strcpy
;;;318    			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
;;;319    	break;
0008d8  ea000009          B        |L1.2308|
                  |L1.2268|
;;;320    	case VL53L0X_ERROR_NOT_IMPLEMENTED:
0008dc  e1a00000          MOV      r0,r0
;;;321    		VL53L0X_COPYSTRING(pPalErrorString,
0008e0  e28f1f7e          ADR      r1,|L1.2784|
0008e4  e1a00005          MOV      r0,r5
0008e8  ebfffffe          BL       strcpy
;;;322    			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
;;;323    	break;
0008ec  ea000004          B        |L1.2308|
                  |L1.2288|
;;;324    
;;;325    	default:
0008f0  e1a00000          MOV      r0,r0
;;;326    		VL53L0X_COPYSTRING(pPalErrorString,
0008f4  e24f1fe9          ADR      r1,|L1.1368|
0008f8  e1a00005          MOV      r0,r5
0008fc  ebfffffe          BL       strcpy
000900  e1a00000          MOV      r0,r0                 ;251
                  |L1.2308|
000904  e1a00000          MOV      r0,r0                 ;255
;;;327    				VL53L0X_STRING_UNKNOW_ERROR_CODE);
;;;328    	}
;;;329    
;;;330    	LOG_FUNCTION_END(Status);
;;;331    	return Status;
000908  e1a00006          MOV      r0,r6
;;;332    }
00090c  e8bd8070          POP      {r4-r6,pc}
;;;333    
                          ENDP

                  VL53L0X_get_pal_state_string PROC
;;;334    VL53L0X_Error VL53L0X_get_pal_state_string(VL53L0X_State PalStateCode,
000910  e92d4070          PUSH     {r4-r6,lr}
;;;335    		char *pPalStateString)
;;;336    {
000914  e1a04000          MOV      r4,r0
000918  e1a05001          MOV      r5,r1
;;;337    	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
00091c  e3a06000          MOV      r6,#0
;;;338    
;;;339    	LOG_FUNCTION_START("");
;;;340    
;;;341    	switch (PalStateCode) {
000920  e3540003          CMP      r4,#3
000924  0a00001d          BEQ      |L1.2464|
000928  ca000006          BGT      |L1.2376|
00092c  e3540000          CMP      r4,#0
000930  0a00000b          BEQ      |L1.2404|
000934  e3540001          CMP      r4,#1
000938  0a00000e          BEQ      |L1.2424|
00093c  e3540002          CMP      r4,#2
000940  1a00002a          BNE      |L1.2544|
000944  ea000010          B        |L1.2444|
                  |L1.2376|
000948  e3540004          CMP      r4,#4
00094c  0a000018          BEQ      |L1.2484|
000950  e3540062          CMP      r4,#0x62
000954  0a00001b          BEQ      |L1.2504|
000958  e3540063          CMP      r4,#0x63
00095c  1a000023          BNE      |L1.2544|
000960  ea00001d          B        |L1.2524|
                  |L1.2404|
;;;342    	case VL53L0X_STATE_POWERDOWN:
000964  e1a00000          MOV      r0,r0
;;;343    		VL53L0X_COPYSTRING(pPalStateString,
000968  e28f1f62          ADR      r1,|L1.2808|
00096c  e1a00005          MOV      r0,r5
000970  ebfffffe          BL       strcpy
;;;344    			VL53L0X_STRING_STATE_POWERDOWN);
;;;345    	break;
000974  ea000022          B        |L1.2564|
                  |L1.2424|
;;;346    	case VL53L0X_STATE_WAIT_STATICINIT:
000978  e1a00000          MOV      r0,r0
;;;347    		VL53L0X_COPYSTRING(pPalStateString,
00097c  e28f1f61          ADR      r1,|L1.2824|
000980  e1a00005          MOV      r0,r5
000984  ebfffffe          BL       strcpy
;;;348    			VL53L0X_STRING_STATE_WAIT_STATICINIT);
;;;349    	break;
000988  ea00001d          B        |L1.2564|
                  |L1.2444|
;;;350    	case VL53L0X_STATE_STANDBY:
00098c  e1a00000          MOV      r0,r0
;;;351    		VL53L0X_COPYSTRING(pPalStateString,
000990  e28f1f63          ADR      r1,|L1.2852|
000994  e1a00005          MOV      r0,r5
000998  ebfffffe          BL       strcpy
;;;352    			VL53L0X_STRING_STATE_STANDBY);
;;;353    	break;
00099c  ea000018          B        |L1.2564|
                  |L1.2464|
;;;354    	case VL53L0X_STATE_IDLE:
0009a0  e1a00000          MOV      r0,r0
;;;355    		VL53L0X_COPYSTRING(pPalStateString,
0009a4  e28f1f62          ADR      r1,|L1.2868|
0009a8  e1a00005          MOV      r0,r5
0009ac  ebfffffe          BL       strcpy
;;;356    			VL53L0X_STRING_STATE_IDLE);
;;;357    	break;
0009b0  ea000013          B        |L1.2564|
                  |L1.2484|
;;;358    	case VL53L0X_STATE_RUNNING:
0009b4  e1a00000          MOV      r0,r0
;;;359    		VL53L0X_COPYSTRING(pPalStateString,
0009b8  e28f1d06          ADR      r1,|L1.2880|
0009bc  e1a00005          MOV      r0,r5
0009c0  ebfffffe          BL       strcpy
;;;360    			VL53L0X_STRING_STATE_RUNNING);
;;;361    	break;
0009c4  ea00000e          B        |L1.2564|
                  |L1.2504|
;;;362    	case VL53L0X_STATE_UNKNOWN:
0009c8  e1a00000          MOV      r0,r0
;;;363    		VL53L0X_COPYSTRING(pPalStateString,
0009cc  e28f1f5f          ADR      r1,|L1.2896|
0009d0  e1a00005          MOV      r0,r5
0009d4  ebfffffe          BL       strcpy
;;;364    			VL53L0X_STRING_STATE_UNKNOWN);
;;;365    	break;
0009d8  ea000009          B        |L1.2564|
                  |L1.2524|
;;;366    	case VL53L0X_STATE_ERROR:
0009dc  e1a00000          MOV      r0,r0
;;;367    		VL53L0X_COPYSTRING(pPalStateString,
0009e0  e28f1f5e          ADR      r1,|L1.2912|
0009e4  e1a00005          MOV      r0,r5
0009e8  ebfffffe          BL       strcpy
;;;368    			VL53L0X_STRING_STATE_ERROR);
;;;369    	break;
0009ec  ea000004          B        |L1.2564|
                  |L1.2544|
;;;370    
;;;371    	default:
0009f0  e1a00000          MOV      r0,r0
;;;372    		VL53L0X_COPYSTRING(pPalStateString,
0009f4  e28f1f55          ADR      r1,|L1.2896|
0009f8  e1a00005          MOV      r0,r5
0009fc  ebfffffe          BL       strcpy
000a00  e1a00000          MOV      r0,r0                 ;341
                  |L1.2564|
000a04  e1a00000          MOV      r0,r0                 ;345
;;;373    			VL53L0X_STRING_STATE_UNKNOWN);
;;;374    	}
;;;375    
;;;376    	LOG_FUNCTION_END(Status);
;;;377    	return Status;
000a08  e1a00006          MOV      r0,r6
;;;378    }
000a0c  e8bd8070          POP      {r4-r6,pc}
;;;379    
                          ENDP

                  VL53L0X_get_sequence_steps_info PROC
;;;380    VL53L0X_Error VL53L0X_get_sequence_steps_info(
000a10  e92d4070          PUSH     {r4-r6,lr}
;;;381    		VL53L0X_SequenceStepId SequenceStepId,
;;;382    		char *pSequenceStepsString)
;;;383    {
000a14  e1a04000          MOV      r4,r0
000a18  e1a05001          MOV      r5,r1
;;;384    	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
000a1c  e3a06000          MOV      r6,#0
;;;385    	LOG_FUNCTION_START("");
;;;386    
;;;387    	switch (SequenceStepId) {
000a20  e3540005          CMP      r4,#5
000a24  308ff104          ADDCC    pc,pc,r4,LSL #2
000a28  ea00005d          B        |L1.2980|
000a2c  ea000003          B        |L1.2624|
000a30  ea000007          B        |L1.2644|
000a34  ea00000b          B        |L1.2664|
000a38  ea00004f          B        |L1.2940|
000a3c  ea000053          B        |L1.2960|
                  |L1.2624|
;;;388    	case VL53L0X_SEQUENCESTEP_TCC:
000a40  e1a00000          MOV      r0,r0
;;;389    		VL53L0X_COPYSTRING(pSequenceStepsString,
000a44  e28f1e12          ADR      r1,|L1.2924|
000a48  e1a00005          MOV      r0,r5
000a4c  ebfffffe          BL       strcpy
;;;390    			VL53L0X_STRING_SEQUENCESTEP_TCC);
;;;391    	break;
000a50  ea000056          B        |L1.2992|
                  |L1.2644|
;;;392    	case VL53L0X_SEQUENCESTEP_DSS:
000a54  e1a00000          MOV      r0,r0
;;;393    		VL53L0X_COPYSTRING(pSequenceStepsString,
000a58  e28f1e11          ADR      r1,|L1.2928|
000a5c  e1a00005          MOV      r0,r5
000a60  ebfffffe          BL       strcpy
;;;394    			VL53L0X_STRING_SEQUENCESTEP_DSS);
;;;395    	break;
000a64  ea000051          B        |L1.2992|
                  |L1.2664|
;;;396    	case VL53L0X_SEQUENCESTEP_MSRC:
000a68  e1a00000          MOV      r0,r0
;;;397    		VL53L0X_COPYSTRING(pSequenceStepsString,
000a6c  e28f1c01          ADR      r1,|L1.2932|
000a70  e1a00005          MOV      r0,r5
000a74  ebfffffe          BL       strcpy
;;;398    			VL53L0X_STRING_SEQUENCESTEP_MSRC);
;;;399    	break;
000a78  ea00004c          B        |L1.2992|
                  |L1.2684|
000a7c  436f6e74          DCB      "Control Interface Error",0
000a80  726f6c20
000a84  496e7465
000a88  72666163
000a8c  65204572
000a90  726f7200
                  |L1.2708|
000a94  496e7661          DCB      "Invalid Command Error",0
000a98  6c696420
000a9c  436f6d6d
000aa0  616e6420
000aa4  4572726f
000aa8  7200    
000aaa  00                DCB      0
000aab  00                DCB      0
                  |L1.2732|
000aac  44697669          DCB      "Division by zero Error",0
000ab0  73696f6e
000ab4  20627920
000ab8  7a65726f
000abc  20457272
000ac0  6f7200  
000ac3  00                DCB      0
                  |L1.2756|
000ac4  52656665          DCB      "Reference Spad Init Error",0
000ac8  72656e63
000acc  65205370
000ad0  61642049
000ad4  6e697420
000ad8  4572726f
000adc  7200    
000ade  00                DCB      0
000adf  00                DCB      0
                  |L1.2784|
000ae0  4e6f7420          DCB      "Not implemented error",0
000ae4  696d706c
000ae8  656d656e
000aec  74656420
000af0  6572726f
000af4  7200    
000af6  00                DCB      0
000af7  00                DCB      0
                  |L1.2808|
000af8  504f5745          DCB      "POWERDOWN State",0
000afc  52444f57
000b00  4e205374
000b04  61746500
                  |L1.2824|
000b08  57616974          DCB      "Wait for staticinit State",0
000b0c  20666f72
000b10  20737461
000b14  74696369
000b18  6e697420
000b1c  53746174
000b20  6500    
000b22  00                DCB      0
000b23  00                DCB      0
                  |L1.2852|
000b24  5354414e          DCB      "STANDBY State",0
000b28  44425920
000b2c  53746174
000b30  6500    
000b32  00                DCB      0
000b33  00                DCB      0
                  |L1.2868|
000b34  49444c45          DCB      "IDLE State",0
000b38  20537461
000b3c  746500  
000b3f  00                DCB      0
                  |L1.2880|
000b40  52554e4e          DCB      "RUNNING State",0
000b44  494e4720
000b48  53746174
000b4c  6500    
000b4e  00                DCB      0
000b4f  00                DCB      0
                  |L1.2896|
000b50  554e4b4e          DCB      "UNKNOWN State",0
000b54  4f574e20
000b58  53746174
000b5c  6500    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  4552524f          DCB      "ERROR State",0
000b64  52205374
000b68  61746500
                  |L1.2924|
000b6c  54434300          DCB      "TCC",0
                  |L1.2928|
000b70  44535300          DCB      "DSS",0
                  |L1.2932|
000b74  4d535243          DCB      "MSRC",0
000b78  00      
000b79  00                DCB      0
000b7a  00                DCB      0
000b7b  00                DCB      0
                  |L1.2940|
;;;400    	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
000b7c  e1a00000          MOV      r0,r0
;;;401    		VL53L0X_COPYSTRING(pSequenceStepsString,
000b80  e28f1f41          ADR      r1,|L1.3212|
000b84  e1a00005          MOV      r0,r5
000b88  ebfffffe          BL       strcpy
;;;402    			VL53L0X_STRING_SEQUENCESTEP_PRE_RANGE);
;;;403    	break;
000b8c  ea000007          B        |L1.2992|
                  |L1.2960|
;;;404    	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
000b90  e1a00000          MOV      r0,r0
;;;405    		VL53L0X_COPYSTRING(pSequenceStepsString,
000b94  e28f10fc          ADR      r1,|L1.3224|
000b98  e1a00005          MOV      r0,r5
000b9c  ebfffffe          BL       strcpy
;;;406    			VL53L0X_STRING_SEQUENCESTEP_FINAL_RANGE);
;;;407    	break;
000ba0  ea000002          B        |L1.2992|
                  |L1.2980|
;;;408    
;;;409    	default:
000ba4  e1a00000          MOV      r0,r0
;;;410    		Status = VL53L0X_ERROR_INVALID_PARAMS;
000ba8  e3e06003          MVN      r6,#3
000bac  e1a00000          MOV      r0,r0                 ;387
                  |L1.2992|
000bb0  e1a00000          MOV      r0,r0                 ;391
;;;411    	}
;;;412    
;;;413    	LOG_FUNCTION_END(Status);
;;;414    
;;;415    	return Status;
000bb4  e1a00006          MOV      r0,r6
;;;416    }
000bb8  e8bd8070          POP      {r4-r6,pc}
;;;417    
                          ENDP

                  VL53L0X_get_limit_check_info PROC
;;;418    
;;;419    VL53L0X_Error VL53L0X_get_limit_check_info(VL53L0X_DEV Dev, uint16_t LimitCheckId,
000bbc  e92d41f0          PUSH     {r4-r8,lr}
;;;420    	char *pLimitCheckString)
;;;421    {
000bc0  e1a07000          MOV      r7,r0
000bc4  e1a04001          MOV      r4,r1
000bc8  e1a05002          MOV      r5,r2
;;;422    	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
000bcc  e3a06000          MOV      r6,#0
;;;423    
;;;424    	LOG_FUNCTION_START("");
;;;425    
;;;426    	switch (LimitCheckId) {
000bd0  e3540006          CMP      r4,#6
000bd4  308ff104          ADDCC    pc,pc,r4,LSL #2
000bd8  ea000023          B        |L1.3180|
000bdc  ea000004          B        |L1.3060|
000be0  ea000008          B        |L1.3080|
000be4  ea00000c          B        |L1.3100|
000be8  ea000010          B        |L1.3120|
000bec  ea000014          B        |L1.3140|
000bf0  ea000018          B        |L1.3160|
                  |L1.3060|
;;;427    	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
000bf4  e1a00000          MOV      r0,r0
;;;428    		VL53L0X_COPYSTRING(pLimitCheckString,
000bf8  e28f10a4          ADR      r1,|L1.3236|
000bfc  e1a00005          MOV      r0,r5
000c00  ebfffffe          BL       strcpy
;;;429    			VL53L0X_STRING_CHECKENABLE_SIGMA_FINAL_RANGE);
;;;430    	break;
000c04  ea00001d          B        |L1.3200|
                  |L1.3080|
;;;431    	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
000c08  e1a00000          MOV      r0,r0
;;;432    		VL53L0X_COPYSTRING(pLimitCheckString,
000c0c  e28f10a4          ADR      r1,|L1.3256|
000c10  e1a00005          MOV      r0,r5
000c14  ebfffffe          BL       strcpy
;;;433    			VL53L0X_STRING_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE);
;;;434    	break;
000c18  ea000018          B        |L1.3200|
                  |L1.3100|
;;;435    	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
000c1c  e1a00000          MOV      r0,r0
;;;436    		VL53L0X_COPYSTRING(pLimitCheckString,
000c20  e28f10a8          ADR      r1,|L1.3280|
000c24  e1a00005          MOV      r0,r5
000c28  ebfffffe          BL       strcpy
;;;437    			VL53L0X_STRING_CHECKENABLE_SIGNAL_REF_CLIP);
;;;438    	break;
000c2c  ea000013          B        |L1.3200|
                  |L1.3120|
;;;439    	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
000c30  e1a00000          MOV      r0,r0
;;;440    		VL53L0X_COPYSTRING(pLimitCheckString,
000c34  e28f10a4          ADR      r1,|L1.3296|
000c38  e1a00005          MOV      r0,r5
000c3c  ebfffffe          BL       strcpy
;;;441    			VL53L0X_STRING_CHECKENABLE_RANGE_IGNORE_THRESHOLD);
;;;442    	break;
000c40  ea00000e          B        |L1.3200|
                  |L1.3140|
;;;443    
;;;444    	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
000c44  e1a00000          MOV      r0,r0
;;;445    		VL53L0X_COPYSTRING(pLimitCheckString,
000c48  e28f10a8          ADR      r1,|L1.3320|
000c4c  e1a00005          MOV      r0,r5
000c50  ebfffffe          BL       strcpy
;;;446    			VL53L0X_STRING_CHECKENABLE_SIGNAL_RATE_MSRC);
;;;447    	break;
000c54  ea000009          B        |L1.3200|
                  |L1.3160|
;;;448    
;;;449    	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
000c58  e1a00000          MOV      r0,r0
;;;450    		VL53L0X_COPYSTRING(pLimitCheckString,
000c5c  e28f10a8          ADR      r1,|L1.3340|
000c60  e1a00005          MOV      r0,r5
000c64  ebfffffe          BL       strcpy
;;;451    			VL53L0X_STRING_CHECKENABLE_SIGNAL_RATE_PRE_RANGE);
;;;452    	break;
000c68  ea000004          B        |L1.3200|
                  |L1.3180|
;;;453    
;;;454    	default:
000c6c  e1a00000          MOV      r0,r0
;;;455    		VL53L0X_COPYSTRING(pLimitCheckString,
000c70  e59f10ac          LDR      r1,|L1.3364|
000c74  e1a00005          MOV      r0,r5
000c78  ebfffffe          BL       strcpy
000c7c  e1a00000          MOV      r0,r0                 ;426
                  |L1.3200|
000c80  e1a00000          MOV      r0,r0                 ;430
;;;456    			VL53L0X_STRING_UNKNOW_ERROR_CODE);
;;;457    
;;;458    	}
;;;459    
;;;460    	LOG_FUNCTION_END(Status);
;;;461    	return Status;
000c84  e1a00006          MOV      r0,r6
;;;462    }
000c88  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.3212|
000c8c  50524520          DCB      "PRE RANGE",0
000c90  52414e47
000c94  4500    
000c96  00                DCB      0
000c97  00                DCB      0
                  |L1.3224|
000c98  46494e41          DCB      "FINAL RANGE",0
000c9c  4c205241
000ca0  4e474500
                  |L1.3236|
000ca4  5349474d          DCB      "SIGMA FINAL RANGE",0
000ca8  41204649
000cac  4e414c20
000cb0  52414e47
000cb4  4500    
000cb6  00                DCB      0
000cb7  00                DCB      0
                  |L1.3256|
000cb8  5349474e          DCB      "SIGNAL RATE FINAL RANGE",0
000cbc  414c2052
000cc0  41544520
000cc4  46494e41
000cc8  4c205241
000ccc  4e474500
                  |L1.3280|
000cd0  5349474e          DCB      "SIGNAL REF CLIP",0
000cd4  414c2052
000cd8  45462043
000cdc  4c495000
                  |L1.3296|
000ce0  52414e47          DCB      "RANGE IGNORE THRESHOLD",0
000ce4  45204947
000ce8  4e4f5245
000cec  20544852
000cf0  4553484f
000cf4  4c4400  
000cf7  00                DCB      0
                  |L1.3320|
000cf8  5349474e          DCB      "SIGNAL RATE MSRC",0
000cfc  414c2052
000d00  41544520
000d04  4d535243
000d08  00      
000d09  00                DCB      0
000d0a  00                DCB      0
000d0b  00                DCB      0
                  |L1.3340|
000d0c  5349474e          DCB      "SIGNAL RATE PRE RANGE",0
000d10  414c2052
000d14  41544520
000d18  50524520
000d1c  52414e47
000d20  4500    
000d22  00                DCB      0
000d23  00                DCB      0
                  |L1.3364|
                          DCD      ||.text||+0x558
