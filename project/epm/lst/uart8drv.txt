; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uart8drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart8drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uart8drv.crf src\UserDrv\uart8drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART8SetPower PROC
;;;123    
;;;124    BOOL UART8SetPower(BOOL flag)
000000  e92d4010          PUSH     {r4,lr}
;;;125    {
000004  e1a04000          MOV      r4,r0
;;;126        if(flag)
000008  e3540000          CMP      r4,#0
00000c  0a000008          BEQ      |L1.52|
;;;127        {         
;;;128            GPIO_SetBit(POWER_PORT, POWER_PIN);
000010  e3a01c01          MOV      r1,#0x100
000014  e3a00d05          MOV      r0,#0x140
000018  ebfffffe          BL       GPIO_SetBit
;;;129            outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<24)) | (0x1<<24));        
00001c  e3a0020b          MOV      r0,#0xb0000000
000020  e5900218          LDR      r0,[r0,#0x218]
000024  e3800401          ORR      r0,r0,#0x1000000
000028  e3a0120b          MOV      r1,#0xb0000000
00002c  e5810218          STR      r0,[r1,#0x218]
000030  ea000007          B        |L1.84|
                  |L1.52|
;;;130        }
;;;131        else
;;;132        {
;;;133            GPIO_ClrBit(POWER_PORT, POWER_PIN);  
000034  e3a01c01          MOV      r1,#0x100
000038  e3a00d05          MOV      r0,#0x140
00003c  ebfffffe          BL       GPIO_ClrBit
;;;134            outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<24)) | (0x0<<24));         
000040  e3a0020b          MOV      r0,#0xb0000000
000044  e5900218          LDR      r0,[r0,#0x218]
000048  e3c00401          BIC      r0,r0,#0x1000000
00004c  e3a0120b          MOV      r1,#0xb0000000
000050  e5810218          STR      r0,[r1,#0x218]
                  |L1.84|
;;;135        }
;;;136        return TRUE;
000054  e3a00001          MOV      r0,#1
;;;137    }
000058  e8bd8010          POP      {r4,pc}
;;;138    BOOL UART8SetRS232Power(BOOL flag)
                          ENDP

                  hwInit PROC
;;;39     /*-----------------------------------------*/
;;;40     static BOOL hwInit(UINT32 baudRate)
00005c  e92d4070          PUSH     {r4-r6,lr}
;;;41     {
000060  e1a05000          MOV      r5,r0
;;;42         int retval;
;;;43         outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
000064  e3a0020b          MOV      r0,#0xb0000000
000068  e5900218          LDR      r0,[r0,#0x218]
00006c  e3800008          ORR      r0,r0,#8
000070  e3a0120b          MOV      r1,#0xb0000000
000074  e5810218          STR      r0,[r1,#0x218]
;;;44         
;;;45         //uart8 GPH 12 13 14 15
;;;46         outpw(REG_SYS_GPH_MFPH,(inpw(REG_SYS_GPH_MFPH) & ~(0xF<<16)) | (0x9<<16));
000078  e3a0020b          MOV      r0,#0xb0000000
00007c  e59000ac          LDR      r0,[r0,#0xac]
000080  e3c0080f          BIC      r0,r0,#0xf0000
000084  e3800809          ORR      r0,r0,#0x90000
000088  e58100ac          STR      r0,[r1,#0xac]
;;;47         outpw(REG_SYS_GPH_MFPH,(inpw(REG_SYS_GPH_MFPH) & ~(0xF<<20)) | (0x9<<20));
00008c  e3a0020b          MOV      r0,#0xb0000000
000090  e59000ac          LDR      r0,[r0,#0xac]
000094  e3c0060f          BIC      r0,r0,#0xf00000
000098  e3800609          ORR      r0,r0,#0x900000
00009c  e58100ac          STR      r0,[r1,#0xac]
;;;48         outpw(REG_SYS_GPH_MFPH,(inpw(REG_SYS_GPH_MFPH) & ~(0xF<<24)) | (0x9<<24));
0000a0  e3a0020b          MOV      r0,#0xb0000000
0000a4  e59000ac          LDR      r0,[r0,#0xac]
0000a8  e3c0040f          BIC      r0,r0,#0xf000000
0000ac  e3800409          ORR      r0,r0,#0x9000000
0000b0  e58100ac          STR      r0,[r1,#0xac]
;;;49         outpw(REG_SYS_GPH_MFPH,(inpw(REG_SYS_GPH_MFPH) & ~(0xFu<<28)) | (0x9u<<28));
0000b4  e3a0020b          MOV      r0,#0xb0000000
0000b8  e59000ac          LDR      r0,[r0,#0xac]
0000bc  e3c0020f          BIC      r0,r0,#0xf0000000
0000c0  e3800209          ORR      r0,r0,#0x90000000
0000c4  e58100ac          STR      r0,[r1,#0xac]
;;;50         
;;;51         //Power pin GPF8
;;;52         outpw(REG_SYS_GPF_MFPH,(inpw(REG_SYS_GPF_MFPH) & ~(0xFu<<0)) | (0x0u<<0));
0000c8  e3a0020b          MOV      r0,#0xb0000000
0000cc  e590009c          LDR      r0,[r0,#0x9c]
0000d0  e3c0000f          BIC      r0,r0,#0xf
0000d4  e581009c          STR      r0,[r1,#0x9c]
;;;53         GPIO_OpenBit(POWER_PORT, POWER_PIN, DIR_OUTPUT, NO_PULL_UP); 
0000d8  e3a03000          MOV      r3,#0
0000dc  e3a02001          MOV      r2,#1
0000e0  e3a01c01          MOV      r1,#0x100
0000e4  e3a00d05          MOV      r0,#0x140
0000e8  ebfffffe          BL       GPIO_OpenBit
;;;54         UART8SetPower(FALSE);
0000ec  e3a00000          MOV      r0,#0
0000f0  ebfffffe          BL       UART8SetPower
;;;55     
;;;56         /* configure UART */
;;;57         param.uFreq = 12000000;
0000f4  e59f0180          LDR      r0,|L1.636|
0000f8  e59f1180          LDR      r1,|L1.640|
0000fc  e5810000          STR      r0,[r1,#0]  ; param
;;;58         param.uBaudRate = baudRate;
000100  e2810000          ADD      r0,r1,#0
000104  e5805004          STR      r5,[r0,#4]  ; param
;;;59         param.ucUartNo = UART8;
000108  e3a00008          MOV      r0,#8
00010c  e5c10008          STRB     r0,[r1,#8]  ; param
;;;60         param.ucDataBits = DATA_BITS_8;
000110  e3a00003          MOV      r0,#3
000114  e5c10009          STRB     r0,[r1,#9]  ; param
;;;61         param.ucStopBits = STOP_BITS_1;
000118  e3a00000          MOV      r0,#0
00011c  e5c1000a          STRB     r0,[r1,#0xa]  ; param
;;;62         param.ucParity = PARITY_NONE;
000120  e5c1000b          STRB     r0,[r1,#0xb]  ; param
;;;63         param.ucRxTriggerLevel = UART_FCR_RFITL_1BYTE;
000124  e5c1000c          STRB     r0,[r1,#0xc]  ; param
;;;64         retval = uartOpen(&param);
000128  e2810000          ADD      r0,r1,#0
00012c  ebfffffe          BL       uartOpen
000130  e1a04000          MOV      r4,r0
;;;65         if(retval != 0) 
000134  e3540000          CMP      r4,#0
000138  0a000003          BEQ      |L1.332|
;;;66         {
;;;67             sysprintf("hwInit Open UART error!\n");
00013c  e28f0d05          ADR      r0,|L1.644|
000140  ebfffffe          BL       sysprintf
;;;68             return FALSE;
000144  e3a00000          MOV      r0,#0
                  |L1.328|
;;;69         }
;;;70     
;;;71         /* set TX interrupt mode */
;;;72         retval = uartIoctl(param.ucUartNo, UART_IOC_SETTXMODE, UARTPOLLMODE /*UARTINTMODE*/ , 0);
;;;73         if (retval != 0) 
;;;74         {
;;;75             sysprintf("hwInit Set TX interrupt mode fail!\n");
;;;76             return FALSE;
;;;77         }
;;;78     
;;;79         /* set RX interrupt mode */
;;;80         retval = uartIoctl(param.ucUartNo, UART_IOC_SETRXMODE, UARTINTMODE, 0);
;;;81         if (retval != 0) 
;;;82         {
;;;83             sysprintf("hwInit Set RX interrupt mode fail!\n");
;;;84             return FALSE;
;;;85         }
;;;86         
;;;87         return TRUE;
;;;88     }
000148  e8bd8070          POP      {r4-r6,pc}
                  |L1.332|
00014c  e59f112c          LDR      r1,|L1.640|
000150  e5d10008          LDRB     r0,[r1,#8]            ;72  ; param
000154  e3a03000          MOV      r3,#0                 ;72
000158  e1a02003          MOV      r2,r3                 ;72
00015c  e3a01001          MOV      r1,#1                 ;72
000160  ebfffffe          BL       uartIoctl
000164  e1a04000          MOV      r4,r0                 ;72
000168  e3540000          CMP      r4,#0                 ;73
00016c  0a000003          BEQ      |L1.384|
000170  e28f0f4a          ADR      r0,|L1.672|
000174  ebfffffe          BL       sysprintf
000178  e3a00000          MOV      r0,#0                 ;76
00017c  eafffff1          B        |L1.328|
                  |L1.384|
000180  e59f10f8          LDR      r1,|L1.640|
000184  e5d10008          LDRB     r0,[r1,#8]            ;80  ; param
000188  e3a03000          MOV      r3,#0                 ;80
00018c  e3a02001          MOV      r2,#1                 ;80
000190  e3a01002          MOV      r1,#2                 ;80
000194  ebfffffe          BL       uartIoctl
000198  e1a04000          MOV      r4,r0                 ;80
00019c  e3540000          CMP      r4,#0                 ;81
0001a0  0a000003          BEQ      |L1.436|
0001a4  e28f0f46          ADR      r0,|L1.708|
0001a8  ebfffffe          BL       sysprintf
0001ac  e3a00000          MOV      r0,#0                 ;84
0001b0  eaffffe4          B        |L1.328|
                  |L1.436|
0001b4  e3a00001          MOV      r0,#1                 ;87
0001b8  eaffffe2          B        |L1.328|
;;;89     /*-----------------------------------------*/
                          ENDP

                  UART8DrvInit PROC
;;;91     /*-----------------------------------------*/
;;;92     BOOL UART8DrvInit(UINT32 baudRate)
0001bc  e92d4070          PUSH     {r4-r6,lr}
;;;93     {
0001c0  e1a05000          MOV      r5,r0
;;;94         int retval;
;;;95         sysprintf("UART8DrvInit!!\n");
0001c4  e28f0f47          ADR      r0,|L1.744|
0001c8  ebfffffe          BL       sysprintf
;;;96         retval = hwInit(baudRate);
0001cc  e1a00005          MOV      r0,r5
0001d0  ebfffffe          BL       hwInit
0001d4  e1a04000          MOV      r4,r0
;;;97         return retval;
0001d8  e1a00004          MOV      r0,r4
;;;98     }
0001dc  e8bd8070          POP      {r4-r6,pc}
;;;99     INT32 UART8Write(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART8Write PROC
0001e0  e92d4070          PUSH     {r4-r6,lr}
;;;100    {
0001e4  e1a04000          MOV      r4,r0
0001e8  e1a05001          MOV      r5,r1
;;;101        /* DEBUG LED *///terninalPrintf("=>");
;;;102        /* DEBUG LED *///for(int i=0;i<uLen;i++)
;;;103        /* DEBUG LED *///    terninalPrintf("%02x ",pucBuf[i]);
;;;104        /* DEBUG LED *///terninalPrintf("\n");
;;;105        return uartWrite(param.ucUartNo, pucBuf, uLen);
0001ec  e59f108c          LDR      r1,|L1.640|
0001f0  e5d10008          LDRB     r0,[r1,#8]  ; param
0001f4  e1a02005          MOV      r2,r5
0001f8  e1a01004          MOV      r1,r4
0001fc  ebfffffe          BL       uartWrite
;;;106    }
000200  e8bd8070          POP      {r4-r6,pc}
;;;107    INT32 UART8Read(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART8Read PROC
000204  e92d4070          PUSH     {r4-r6,lr}
;;;108    {
000208  e1a04000          MOV      r4,r0
00020c  e1a05001          MOV      r5,r1
;;;109        /*
;;;110        int temp = uartRead(param.ucUartNo, pucBuf, uLen);  
;;;111        terninalPrintf("<=");
;;;112        for(int i=0 ; i<temp ; i++)
;;;113            terninalPrintf("%02x ",pucBuf[i]);
;;;114        terninalPrintf("\n");
;;;115        return temp;
;;;116        */
;;;117        return uartRead(param.ucUartNo, pucBuf, uLen);
000210  e59f1068          LDR      r1,|L1.640|
000214  e5d10008          LDRB     r0,[r1,#8]  ; param
000218  e1a02005          MOV      r2,r5
00021c  e1a01004          MOV      r1,r4
000220  ebfffffe          BL       uartRead
;;;118    }
000224  e8bd8070          POP      {r4-r6,pc}
;;;119    BaseType_t UART8ReadWait(TickType_t time)
                          ENDP

                  UART8ReadWait PROC
000228  e92d4010          PUSH     {r4,lr}
;;;120    {
00022c  e1a04000          MOV      r4,r0
;;;121        return  uartWaitReadEvent(param.ucUartNo, time);
000230  e59f1048          LDR      r1,|L1.640|
000234  e5d10008          LDRB     r0,[r1,#8]  ; param
000238  e1a01004          MOV      r1,r4
00023c  ebfffffe          BL       uartWaitReadEvent
;;;122    }
000240  e8bd8010          POP      {r4,pc}
;;;123    
                          ENDP

                  UART8SetRS232Power PROC
;;;137    }
;;;138    BOOL UART8SetRS232Power(BOOL flag)
000244  e1a01000          MOV      r1,r0
;;;139    {
;;;140        return FALSE;
000248  e3a00000          MOV      r0,#0
;;;141    }
00024c  e12fff1e          BX       lr
;;;142    INT UART8Ioctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
                          ENDP

                  UART8Ioctl PROC
000250  e92d4070          PUSH     {r4-r6,lr}
;;;143    {
000254  e1a04000          MOV      r4,r0
000258  e1a05001          MOV      r5,r1
00025c  e1a06002          MOV      r6,r2
;;;144        return uartIoctl(param.ucUartNo, uCmd, uArg0, uArg1);
000260  e59f1018          LDR      r1,|L1.640|
000264  e5d10008          LDRB     r0,[r1,#8]  ; param
000268  e1a03006          MOV      r3,r6
00026c  e1a02005          MOV      r2,r5
000270  e1a01004          MOV      r1,r4
000274  ebfffffe          BL       uartIoctl
;;;145    }
000278  e8bd8070          POP      {r4-r6,pc}
;;;146    
                          ENDP

                  |L1.636|
                          DCD      0x00b71b00
                  |L1.640|
                          DCD      param
                  |L1.644|
000284  6877496e          DCB      "hwInit Open UART error!\n",0
000288  6974204f
00028c  70656e20
000290  55415254
000294  20657272
000298  6f72210a
00029c  00      
00029d  00                DCB      0
00029e  00                DCB      0
00029f  00                DCB      0
                  |L1.672|
0002a0  6877496e          DCB      "hwInit Set TX interrupt mode fail!\n",0
0002a4  69742053
0002a8  65742054
0002ac  5820696e
0002b0  74657272
0002b4  75707420
0002b8  6d6f6465
0002bc  20666169
0002c0  6c210a00
                  |L1.708|
0002c4  6877496e          DCB      "hwInit Set RX interrupt mode fail!\n",0
0002c8  69742053
0002cc  65742052
0002d0  5820696e
0002d4  74657272
0002d8  75707420
0002dc  6d6f6465
0002e0  20666169
0002e4  6c210a00
                  |L1.744|
0002e8  55415254          DCB      "UART8DrvInit!!\n",0
0002ec  38447276
0002f0  496e6974
0002f4  21210a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  param
                          %        16
