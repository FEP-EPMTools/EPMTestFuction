; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\sys.crf ..\..\common\src\BSP\Driver\Source\sys.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sysIrqHandler PROC
;;;159    //__irq void sysIrqHandler()
;;;160    void sysIrqHandler()
000000  e92d401c          PUSH     {r2-r4,lr}
;;;161    {
;;;162        UINT32 volatile _mIPER, _mISNR;
;;;163    
;;;164        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000004  e59f0250          LDR      r0,|L1.604|
000008  e5900118          LDR      r0,[r0,#0x118]
00000c  e3a0103f          MOV      r1,#0x3f
000010  e0010120          AND      r0,r1,r0,LSR #2
000014  e58d0004          STR      r0,[sp,#4]
;;;165        _mISNR = inpw(REG_AIC_ISNR);
000018  e59f023c          LDR      r0,|L1.604|
00001c  e5900120          LDR      r0,[r0,#0x120]
000020  e58d0000          STR      r0,[sp,#0]
;;;166        if (_mISNR != 0)
000024  e59d0000          LDR      r0,[sp,#0]
000028  e3500000          CMP      r0,#0
00002c  0a000007          BEQ      |L1.80|
;;;167            if (_mIPER == _mISNR)
000030  e59d0004          LDR      r0,[sp,#4]
000034  e59d1000          LDR      r1,[sp,#0]
000038  e1500001          CMP      r0,r1
00003c  1a000003          BNE      |L1.80|
;;;168                (*sysIrqHandlerTable[_mISNR])();
000040  e59f1218          LDR      r1,|L1.608|
000044  e59d2000          LDR      r2,[sp,#0]
000048  e7910102          LDR      r0,[r1,r2,LSL #2]
00004c  e12fff30          BLX      r0
                  |L1.80|
;;;169        outpw(REG_AIC_EOSCR, 1);
000050  e3a00001          MOV      r0,#1
000054  e59f1200          LDR      r1,|L1.604|
000058  e5810150          STR      r0,[r1,#0x150]
;;;170    }
00005c  e8bd801c          POP      {r2-r4,pc}
;;;171    
                          ENDP

                  sysFiqHandler PROC
                  |L1.96|
;;;172    __irq void sysFiqHandler()
000060  e92d500f          PUSH     {r0-r3,r12,lr}
;;;173    {
000064  e24dd008          SUB      sp,sp,#8
;;;174        UINT32 volatile _mIPER, _mISNR;
;;;175    
;;;176        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000068  e59f01ec          LDR      r0,|L1.604|
00006c  e5900118          LDR      r0,[r0,#0x118]
000070  e3a0103f          MOV      r1,#0x3f
000074  e0010120          AND      r0,r1,r0,LSR #2
000078  e58d0004          STR      r0,[sp,#4]
;;;177        _mISNR = inpw(REG_AIC_ISNR);
00007c  e59f01d8          LDR      r0,|L1.604|
000080  e5900120          LDR      r0,[r0,#0x120]
000084  e58d0000          STR      r0,[sp,#0]
;;;178        sysprintf("ISNR = %d\n", _mISNR);
000088  e28f0f75          ADR      r0,|L1.612|
00008c  e59d1000          LDR      r1,[sp,#0]
000090  ebfffffe          BL       sysprintf
;;;179        if (_mISNR != 0)
000094  e59d0000          LDR      r0,[sp,#0]
000098  e3500000          CMP      r0,#0
00009c  0a000007          BEQ      |L1.192|
;;;180            if (_mIPER == _mISNR)
0000a0  e59d0004          LDR      r0,[sp,#4]
0000a4  e59d1000          LDR      r1,[sp,#0]
0000a8  e1500001          CMP      r0,r1
0000ac  1a000003          BNE      |L1.192|
;;;181                (*sysFiqHandlerTable[_mISNR])();
0000b0  e59f11b8          LDR      r1,|L1.624|
0000b4  e59d2000          LDR      r2,[sp,#0]
0000b8  e7910102          LDR      r0,[r1,r2,LSL #2]
0000bc  e12fff30          BLX      r0
                  |L1.192|
;;;182        outpw(REG_AIC_EOSCR, 1);
0000c0  e3a00001          MOV      r0,#1
0000c4  e59f1190          LDR      r1,|L1.604|
0000c8  e5810150          STR      r0,[r1,#0x150]
;;;183    }
0000cc  e28dd008          ADD      sp,sp,#8
0000d0  e8bd500f          POP      {r0-r3,r12,lr}
0000d4  e25ef004          SUBS     pc,lr,#4
;;;184    
                          ENDP

                  SYS_Interrupt_Shell PROC
;;;185    void SYS_Interrupt_Shell()
0000d8  e92d4010          PUSH     {r4,lr}
;;;186    {
;;;187        sysprintf("ISR not found! ISNR=%d\n", inpw(REG_AIC_ISNR));
0000dc  e59f0178          LDR      r0,|L1.604|
0000e0  e5901120          LDR      r1,[r0,#0x120]
0000e4  e28f0f62          ADR      r0,|L1.628|
0000e8  ebfffffe          BL       sysprintf
;;;188    }
0000ec  e8bd8010          POP      {r4,pc}
;;;189    
                          ENDP

                  sysInitializeAIC PROC
;;;190    void sysInitializeAIC()
0000f0  e24f0098          ADR      r0,|L1.96|
;;;191    {
;;;192        //remove by sam
;;;193        //*(unsigned int volatile *)0x38 = (unsigned int)sysIrqHandler;
;;;194        
;;;195    
;;;196        *(unsigned int volatile *)0x3C = (unsigned int)sysFiqHandler;
0000f4  e3a01000          MOV      r1,#0
0000f8  e581003c          STR      r0,[r1,#0x3c]
;;;197    }
0000fc  e12fff1e          BX       lr
;;;198    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysDisableInterrupt PROC
;;;208     */
;;;209    INT32 sysDisableInterrupt(IRQn_Type eIntNo)
000100  e1a01000          MOV      r1,r0
;;;210    {
;;;211        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000104  e351003e          CMP      r1,#0x3e
000108  ca000001          BGT      |L1.276|
00010c  e3510001          CMP      r1,#1
000110  aa000001          BGE      |L1.284|
                  |L1.276|
;;;212            return 1;
000114  e3a00001          MOV      r0,#1
                  |L1.280|
;;;213    
;;;214        if (eIntNo < 32)
;;;215            outpw(REG_AIC_MDCR, (1 << eIntNo));
;;;216        else
;;;217            outpw(REG_AIC_MDCRH, (1 << (eIntNo - 32)));
;;;218    
;;;219        return 0;
;;;220    }
000118  e12fff1e          BX       lr
                  |L1.284|
00011c  e3510020          CMP      r1,#0x20              ;214
000120  aa000004          BGE      |L1.312|
000124  e3a00001          MOV      r0,#1                 ;215
000128  e1a00110          LSL      r0,r0,r1              ;215
00012c  e59f2128          LDR      r2,|L1.604|
000130  e5820138          STR      r0,[r2,#0x138]        ;215
000134  ea000004          B        |L1.332|
                  |L1.312|
000138  e2410020          SUB      r0,r1,#0x20           ;217
00013c  e3a02001          MOV      r2,#1                 ;217
000140  e1a00012          LSL      r0,r2,r0              ;217
000144  e59f2110          LDR      r2,|L1.604|
000148  e582013c          STR      r0,[r2,#0x13c]        ;217
                  |L1.332|
00014c  e3a00000          MOV      r0,#0                 ;219
000150  eafffff0          B        |L1.280|
;;;221    
                          ENDP

                  sysEnableInterrupt PROC
;;;229     */
;;;230    INT32 sysEnableInterrupt(IRQn_Type eIntNo)
000154  e1a01000          MOV      r1,r0
;;;231    {
;;;232        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000158  e351003e          CMP      r1,#0x3e
00015c  ca000001          BGT      |L1.360|
000160  e3510001          CMP      r1,#1
000164  aa000001          BGE      |L1.368|
                  |L1.360|
;;;233            return 1;
000168  e3a00001          MOV      r0,#1
                  |L1.364|
;;;234    
;;;235        if (eIntNo < 32)
;;;236            outpw(REG_AIC_MECR, (1 << eIntNo));
;;;237        else
;;;238            outpw(REG_AIC_MECRH, (1 << (eIntNo - 32)));
;;;239    
;;;240        return 0;
;;;241    }
00016c  e12fff1e          BX       lr
                  |L1.368|
000170  e3510020          CMP      r1,#0x20              ;235
000174  aa000004          BGE      |L1.396|
000178  e3a00001          MOV      r0,#1                 ;236
00017c  e1a00110          LSL      r0,r0,r1              ;236
000180  e59f20d4          LDR      r2,|L1.604|
000184  e5820130          STR      r0,[r2,#0x130]        ;236
000188  ea000004          B        |L1.416|
                  |L1.396|
00018c  e2410020          SUB      r0,r1,#0x20           ;238
000190  e3a02001          MOV      r2,#1                 ;238
000194  e1a00012          LSL      r0,r2,r0              ;238
000198  e59f20bc          LDR      r2,|L1.604|
00019c  e5820134          STR      r0,[r2,#0x134]        ;238
                  |L1.416|
0001a0  e3a00000          MOV      r0,#0                 ;240
0001a4  eafffff0          B        |L1.364|
;;;242    
                          ENDP

                  sysInstallExceptionHandler PROC
;;;251     */
;;;252    PVOID sysInstallExceptionHandler(INT32 nExceptType, PVOID pvNewHandler)
0001a8  e1a02000          MOV      r2,r0
;;;253    {
;;;254        PVOID _mOldVect = NULL;
0001ac  e3a00000          MOV      r0,#0
;;;255    
;;;256        switch (nExceptType) {
0001b0  e3520000          CMP      r2,#0
0001b4  0a000006          BEQ      |L1.468|
0001b8  e3520001          CMP      r2,#1
0001bc  0a000009          BEQ      |L1.488|
0001c0  e3520002          CMP      r2,#2
0001c4  0a00000c          BEQ      |L1.508|
0001c8  e3520003          CMP      r2,#3
0001cc  1a000014          BNE      |L1.548|
0001d0  ea00000e          B        |L1.528|
                  |L1.468|
;;;257        case SYS_SWI:
0001d4  e1a00000          MOV      r0,r0
;;;258            _mOldVect = *(PVOID volatile *)0x28;
0001d8  e3a03000          MOV      r3,#0
0001dc  e5930028          LDR      r0,[r3,#0x28]
;;;259            *(PVOID volatile *)0x28 = pvNewHandler;
0001e0  e5831028          STR      r1,[r3,#0x28]
;;;260            break;
0001e4  ea000010          B        |L1.556|
                  |L1.488|
;;;261    
;;;262        case SYS_D_ABORT:
0001e8  e1a00000          MOV      r0,r0
;;;263            _mOldVect = *(PVOID volatile *)0x30;
0001ec  e3a03000          MOV      r3,#0
0001f0  e5930030          LDR      r0,[r3,#0x30]
;;;264            *(PVOID volatile *)0x30 = pvNewHandler;
0001f4  e5831030          STR      r1,[r3,#0x30]
;;;265            break;
0001f8  ea00000b          B        |L1.556|
                  |L1.508|
;;;266    
;;;267        case SYS_I_ABORT:
0001fc  e1a00000          MOV      r0,r0
;;;268            _mOldVect = *(PVOID volatile *)0x2C;
000200  e3a03000          MOV      r3,#0
000204  e593002c          LDR      r0,[r3,#0x2c]
;;;269            *(PVOID volatile *)0x2C = pvNewHandler;
000208  e583102c          STR      r1,[r3,#0x2c]
;;;270            break;
00020c  ea000006          B        |L1.556|
                  |L1.528|
;;;271    
;;;272        case SYS_UNDEFINE:
000210  e1a00000          MOV      r0,r0
;;;273            _mOldVect = *(PVOID volatile *)0x24;
000214  e3a03000          MOV      r3,#0
000218  e5930024          LDR      r0,[r3,#0x24]
;;;274            *(PVOID volatile *)0x24 = pvNewHandler;
00021c  e5831024          STR      r1,[r3,#0x24]
;;;275            break;
000220  ea000001          B        |L1.556|
                  |L1.548|
;;;276    
;;;277        default:
000224  e1a00000          MOV      r0,r0
000228  e1a00000          MOV      r0,r0                 ;256
                  |L1.556|
00022c  e1a00000          MOV      r0,r0                 ;260
;;;278            ;
;;;279        }
;;;280        return _mOldVect;
;;;281    }
000230  e12fff1e          BX       lr
;;;282    
                          ENDP

                  sysInstallFiqHandler PROC
;;;289     */
;;;290    PVOID sysInstallFiqHandler(PVOID pvNewISR)
000234  e1a01000          MOV      r1,r0
;;;291    {
;;;292        PVOID _mOldVect;
;;;293    
;;;294        _mOldVect = *(PVOID volatile *)0x3C;
000238  e3a02000          MOV      r2,#0
00023c  e592003c          LDR      r0,[r2,#0x3c]
;;;295        *(PVOID volatile *)0x3C = pvNewISR;
000240  e582103c          STR      r1,[r2,#0x3c]
;;;296        return _mOldVect;
;;;297    }
000244  e12fff1e          BX       lr
;;;298    
                          ENDP

                  sysInstallIrqHandler PROC
;;;305     */
;;;306    PVOID sysInstallIrqHandler(PVOID pvNewISR)
000248  e1a01000          MOV      r1,r0
;;;307    {
;;;308        PVOID _mOldVect;
;;;309    
;;;310        _mOldVect = *(PVOID volatile *)0x38;
00024c  e3a02000          MOV      r2,#0
000250  e5920038          LDR      r0,[r2,#0x38]
;;;311        *(PVOID volatile *)0x38 = pvNewISR;
000254  e5821038          STR      r1,[r2,#0x38]
;;;312        return _mOldVect;
;;;313    }
000258  e12fff1e          BX       lr
                  |L1.604|
                          DCD      0xb8002000
                  |L1.608|
                          DCD      sysIrqHandlerTable
                  |L1.612|
000264  49534e52          DCB      "ISNR = %d\n",0
000268  203d2025
00026c  640a00  
00026f  00                DCB      0
                  |L1.624|
                          DCD      sysFiqHandlerTable
                  |L1.628|
000274  49535220          DCB      "ISR not found! ISNR=%d\n",0
000278  6e6f7420
00027c  666f756e
000280  64212049
000284  534e523d
000288  25640a00
                          ENDP

                  sysInstallISR PROC
;;;325     */
;;;326    PVOID sysInstallISR(INT32 nIntTypeLevel, IRQn_Type eIntNo, PVOID pvNewISR)
00028c  e92d40f0          PUSH     {r4-r7,lr}
;;;327    {
000290  e1a04000          MOV      r4,r0
000294  e1a03001          MOV      r3,r1
;;;328        PVOID   _mOldVect;
;;;329        UINT32  _mRegAddr/*, _mRegValue*/;
;;;330        INT     shift;
;;;331    
;;;332        if (!_sys_bIsAICInitial) {
000298  e59f0688          LDR      r0,|L1.2344|
00029c  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsAICInitial
0002a0  e3500000          CMP      r0,#0
0002a4  1a000003          BNE      |L1.696|
;;;333            sysInitializeAIC();
0002a8  ebfffffe          BL       sysInitializeAIC
;;;334            _sys_bIsAICInitial = TRUE;
0002ac  e3a00001          MOV      r0,#1
0002b0  e59f1670          LDR      r1,|L1.2344|
0002b4  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsAICInitial
                  |L1.696|
;;;335        }
;;;336    
;;;337        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
0002b8  e1a00003          MOV      r0,r3
0002bc  e1a01fc3          ASR      r1,r3,#31
0002c0  e0831f21          ADD      r1,r3,r1,LSR #30
0002c4  e1a01141          ASR      r1,r1,#2
0002c8  e51fc074          LDR      r12,|L1.604|
0002cc  e08c6101          ADD      r6,r12,r1,LSL #2
;;;338        shift = (eIntNo % 4) * 8;
0002d0  e1a00003          MOV      r0,r3
0002d4  e1a01fc3          ASR      r1,r3,#31
0002d8  e0831f21          ADD      r1,r3,r1,LSR #30
0002dc  e1a01141          ASR      r1,r1,#2
0002e0  e0431101          SUB      r1,r3,r1,LSL #2
0002e4  e1a07181          LSL      r7,r1,#3
;;;339        nIntTypeLevel &= 0xff;
0002e8  e20440ff          AND      r4,r4,#0xff
;;;340        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (nIntTypeLevel << shift));
0002ec  e5960000          LDR      r0,[r6,#0]
0002f0  e3a01007          MOV      r1,#7
0002f4  e1c00711          BIC      r0,r0,r1,LSL r7
0002f8  e1800714          ORR      r0,r0,r4,LSL r7
0002fc  e5860000          STR      r0,[r6,#0]
;;;341    
;;;342        if ((nIntTypeLevel & 0x7) == FIQ_LEVEL_0) {
000300  e3140007          TST      r4,#7
000304  1a000003          BNE      |L1.792|
;;;343            _mOldVect = (PVOID) sysFiqHandlerTable[eIntNo];
000308  e51f00a0          LDR      r0,|L1.624|
00030c  e7905103          LDR      r5,[r0,r3,LSL #2]
;;;344            sysFiqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
000310  e7802103          STR      r2,[r0,r3,LSL #2]
000314  ea000002          B        |L1.804|
                  |L1.792|
;;;345        } else {
;;;346            _mOldVect = (PVOID) sysIrqHandlerTable[eIntNo];
000318  e51f00c0          LDR      r0,|L1.608|
00031c  e7905103          LDR      r5,[r0,r3,LSL #2]
;;;347            sysIrqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
000320  e7802103          STR      r2,[r0,r3,LSL #2]
                  |L1.804|
;;;348        }
;;;349        return _mOldVect;
000324  e1a00005          MOV      r0,r5
;;;350    }
000328  e8bd80f0          POP      {r4-r7,pc}
;;;351    
                          ENDP

                  sysSetGlobalInterrupt PROC
;;;352    
;;;353    INT32 sysSetGlobalInterrupt(INT32 nIntState)
00032c  e1a01000          MOV      r1,r0
;;;354    {
;;;355        switch (nIntState) {
000330  e3510000          CMP      r1,#0
000334  0a000002          BEQ      |L1.836|
000338  e3510001          CMP      r1,#1
00033c  1a00000c          BNE      |L1.884|
000340  ea000005          B        |L1.860|
                  |L1.836|
;;;356        case ENABLE_ALL_INTERRUPTS:
000344  e1a00000          MOV      r0,r0
;;;357            outpw(REG_AIC_MECR, 0xFFFFFFFF);
000348  e3e00000          MVN      r0,#0
00034c  e51f20f8          LDR      r2,|L1.604|
000350  e5820130          STR      r0,[r2,#0x130]
;;;358            outpw(REG_AIC_MECRH, 0xFFFFFFFF);
000354  e5820134          STR      r0,[r2,#0x134]
;;;359            break;
000358  ea000007          B        |L1.892|
                  |L1.860|
;;;360    
;;;361        case DISABLE_ALL_INTERRUPTS:
00035c  e1a00000          MOV      r0,r0
;;;362            outpw(REG_AIC_MDCR, 0xFFFFFFFF);
000360  e3e00000          MVN      r0,#0
000364  e51f2110          LDR      r2,|L1.604|
000368  e5820138          STR      r0,[r2,#0x138]
;;;363            outpw(REG_AIC_MDCRH, 0xFFFFFFFF);
00036c  e582013c          STR      r0,[r2,#0x13c]
;;;364            break;
000370  ea000001          B        |L1.892|
                  |L1.884|
;;;365    
;;;366        default:
000374  e1a00000          MOV      r0,r0
000378  e1a00000          MOV      r0,r0                 ;355
                  |L1.892|
00037c  e1a00000          MOV      r0,r0                 ;359
;;;367            ;
;;;368        }
;;;369        return 0;
000380  e3a00000          MOV      r0,#0
;;;370    }
000384  e12fff1e          BX       lr
;;;371    
                          ENDP

                  sysSetInterruptPriorityLevel PROC
;;;381     */
;;;382    INT32 sysSetInterruptPriorityLevel(IRQn_Type eIntNo, UINT32 uIntLevel)
000388  e92d4030          PUSH     {r4,r5,lr}
;;;383    {
00038c  e1a02000          MOV      r2,r0
;;;384        UINT32  _mRegAddr;
;;;385        INT     shift;
;;;386    
;;;387        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000390  e352003e          CMP      r2,#0x3e
000394  ca000001          BGT      |L1.928|
000398  e3520001          CMP      r2,#1
00039c  aa000001          BGE      |L1.936|
                  |L1.928|
;;;388            return 1;
0003a0  e3a00001          MOV      r0,#1
                  |L1.932|
;;;389    
;;;390        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;391        shift = (eIntNo % 4) * 8;
;;;392        uIntLevel &= 0x7;
;;;393        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (uIntLevel << shift));
;;;394    
;;;395        return 0;
;;;396    }
0003a4  e8bd8030          POP      {r4,r5,pc}
                  |L1.936|
0003a8  e1a00002          MOV      r0,r2                 ;390
0003ac  e1a04fc2          ASR      r4,r2,#31             ;390
0003b0  e0824f24          ADD      r4,r2,r4,LSR #30      ;390
0003b4  e1a04144          ASR      r4,r4,#2              ;390
0003b8  e51f5164          LDR      r5,|L1.604|
0003bc  e085c104          ADD      r12,r5,r4,LSL #2      ;390
0003c0  e1a00002          MOV      r0,r2                 ;391
0003c4  e1a04fc2          ASR      r4,r2,#31             ;391
0003c8  e0824f24          ADD      r4,r2,r4,LSR #30      ;391
0003cc  e1a04144          ASR      r4,r4,#2              ;391
0003d0  e0424104          SUB      r4,r2,r4,LSL #2       ;391
0003d4  e1a03184          LSL      r3,r4,#3              ;391
0003d8  e2011007          AND      r1,r1,#7              ;392
0003dc  e59c0000          LDR      r0,[r12,#0]           ;393
0003e0  e3a04007          MOV      r4,#7                 ;393
0003e4  e1c00314          BIC      r0,r0,r4,LSL r3       ;393
0003e8  e1800311          ORR      r0,r0,r1,LSL r3       ;393
0003ec  e58c0000          STR      r0,[r12,#0]           ;393
0003f0  e3a00000          MOV      r0,#0                 ;395
0003f4  eaffffea          B        |L1.932|
;;;397    
                          ENDP

                  sysSetInterruptType PROC
;;;398    
;;;399    INT32 sysSetInterruptType(IRQn_Type eIntNo, UINT32 uIntSourceType)
0003f8  e92d4030          PUSH     {r4,r5,lr}
;;;400    {
0003fc  e1a02000          MOV      r2,r0
;;;401        UINT32 _mRegAddr;
;;;402        INT     shift;
;;;403    
;;;404        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000400  e352003e          CMP      r2,#0x3e
000404  ca000001          BGT      |L1.1040|
000408  e3520001          CMP      r2,#1
00040c  aa000001          BGE      |L1.1048|
                  |L1.1040|
;;;405            return 1;
000410  e3a00001          MOV      r0,#1
                  |L1.1044|
;;;406    
;;;407        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;408        shift = (eIntNo % 4) * 8;
;;;409        uIntSourceType &= 0xC0;
;;;410        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0xC0 << shift)) | (uIntSourceType << shift));
;;;411    
;;;412        return 0;
;;;413    }
000414  e8bd8030          POP      {r4,r5,pc}
                  |L1.1048|
000418  e1a00002          MOV      r0,r2                 ;407
00041c  e1a04fc2          ASR      r4,r2,#31             ;407
000420  e0824f24          ADD      r4,r2,r4,LSR #30      ;407
000424  e1a04144          ASR      r4,r4,#2              ;407
000428  e51f51d4          LDR      r5,|L1.604|
00042c  e085c104          ADD      r12,r5,r4,LSL #2      ;407
000430  e1a00002          MOV      r0,r2                 ;408
000434  e1a04fc2          ASR      r4,r2,#31             ;408
000438  e0824f24          ADD      r4,r2,r4,LSR #30      ;408
00043c  e1a04144          ASR      r4,r4,#2              ;408
000440  e0424104          SUB      r4,r2,r4,LSL #2       ;408
000444  e1a03184          LSL      r3,r4,#3              ;408
000448  e20110c0          AND      r1,r1,#0xc0           ;409
00044c  e59c0000          LDR      r0,[r12,#0]           ;410
000450  e3a040c0          MOV      r4,#0xc0              ;410
000454  e1c00314          BIC      r0,r0,r4,LSL r3       ;410
000458  e1800311          ORR      r0,r0,r1,LSL r3       ;410
00045c  e58c0000          STR      r0,[r12,#0]           ;410
000460  e3a00000          MOV      r0,#0                 ;412
000464  eaffffea          B        |L1.1044|
;;;414    
                          ENDP

                  sysSetLocalInterrupt PROC
;;;423     */
;;;424    INT32 sysSetLocalInterrupt(INT32 nIntState)
000468  e1a01000          MOV      r1,r0
;;;425    {
;;;426        INT32 temp;
;;;427    
;;;428        switch (nIntState) {
00046c  e3510080          CMP      r1,#0x80
000470  0a000013          BEQ      |L1.1220|
000474  ca000006          BGT      |L1.1172|
000478  e351003f          CMP      r1,#0x3f
00047c  0a00000c          BEQ      |L1.1204|
000480  e3510040          CMP      r1,#0x40
000484  0a000010          BEQ      |L1.1228|
000488  e351007f          CMP      r1,#0x7f
00048c  1a000013          BNE      |L1.1248|
000490  ea000004          B        |L1.1192|
                  |L1.1172|
000494  e35100bf          CMP      r1,#0xbf
000498  0a000004          BEQ      |L1.1200|
00049c  e35100c0          CMP      r1,#0xc0
0004a0  1a00000e          BNE      |L1.1248|
0004a4  ea000009          B        |L1.1232|
                  |L1.1192|
;;;429        case ENABLE_IRQ:
0004a8  e1a00000          MOV      r0,r0
;;;430        case ENABLE_FIQ:
0004ac  e1a00000          MOV      r0,r0
                  |L1.1200|
;;;431        case ENABLE_FIQ_IRQ:
0004b0  e1a00000          MOV      r0,r0
                  |L1.1204|
;;;432            __asm {
;;;433                MRS    temp, CPSR
0004b4  e10f2000          MRS      r2,APSR ; formerly CPSR
;;;434                AND    temp, temp, nIntState
0004b8  e0022001          AND      r2,r2,r1
;;;435                MSR    CPSR_c, temp
0004bc  e121f002          MSR      CPSR_c,r2
;;;436            }
;;;437            break;
0004c0  ea000008          B        |L1.1256|
                  |L1.1220|
;;;438    
;;;439        case DISABLE_IRQ:
0004c4  e1a00000          MOV      r0,r0
;;;440            case DISABLE_FIQ:
0004c8  e1a00000          MOV      r0,r0
                  |L1.1228|
;;;441                case DISABLE_FIQ_IRQ:
0004cc  e1a00000          MOV      r0,r0
                  |L1.1232|
;;;442                        __asm {
;;;443                        MRS    temp, CPSR
0004d0  e10f2000          MRS      r2,APSR ; formerly CPSR
;;;444                        ORR    temp, temp, nIntState
0004d4  e1822001          ORR      r2,r2,r1
;;;445                        MSR    CPSR_c, temp
0004d8  e121f002          MSR      CPSR_c,r2
;;;446                    }
;;;447            break;
0004dc  ea000001          B        |L1.1256|
                  |L1.1248|
;;;448    
;;;449        default:
0004e0  e1a00000          MOV      r0,r0
0004e4  e1a00000          MOV      r0,r0                 ;428
                  |L1.1256|
0004e8  e1a00000          MOV      r0,r0                 ;437
;;;450                ;
;;;451        }
;;;452        return 0;
0004ec  e3a00000          MOV      r0,#0
;;;453    }
0004f0  e12fff1e          BX       lr
;;;454    
                          ENDP

                  sysGetInterruptEnableStatus PROC
;;;455    UINT32  sysGetInterruptEnableStatus(void)
0004f4  e51f02a0          LDR      r0,|L1.604|
;;;456    {
;;;457        return (inpw(REG_AIC_IMR));
0004f8  e5900128          LDR      r0,[r0,#0x128]
;;;458    }
0004fc  e12fff1e          BX       lr
;;;459    
                          ENDP

                  sysGetInterruptEnableStatusH PROC
;;;460    
;;;461    UINT32  sysGetInterruptEnableStatusH(void)
000500  e51f02ac          LDR      r0,|L1.604|
;;;462    {
;;;463        return (inpw(REG_AIC_IMRH));
000504  e590012c          LDR      r0,[r0,#0x12c]
;;;464    }
000508  e12fff1e          BX       lr
;;;465    
                          ENDP

                  sysGetIBitState PROC
;;;466    /// @cond HIDDEN_SYMBOLS
;;;467    BOOL sysGetIBitState()
00050c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;468    {
;;;469        INT32 temp;
;;;470    
;;;471        __asm {
;;;472            MRS temp, CPSR
;;;473        }
;;;474    
;;;475        if (temp & 0x80)
000510  e3110080          TST      r1,#0x80
000514  0a000001          BEQ      |L1.1312|
;;;476            return FALSE;
000518  e3a00000          MOV      r0,#0
                  |L1.1308|
;;;477        else
;;;478            return TRUE;
;;;479    }
00051c  e12fff1e          BX       lr
                  |L1.1312|
000520  e3a00001          MOV      r0,#1                 ;478
000524  eafffffc          B        |L1.1308|
;;;480    
                          ENDP

                  sysGetPLL PROC
;;;481    INT32 sysGetPLL(UINT32 reg)
000528  e92d41f0          PUSH     {r4-r8,lr}
;;;482    {
00052c  e1a04000          MOV      r4,r0
;;;483        UINT32 N,M,P;
;;;484    
;;;485        N =((inpw(reg) & 0x007F)>>0)+1;
000530  e5940000          LDR      r0,[r4,#0]
000534  e200007f          AND      r0,r0,#0x7f
000538  e2805001          ADD      r5,r0,#1
;;;486        M =((inpw(reg) & 0x1F80)>>7)+1;
00053c  e5940000          LDR      r0,[r4,#0]
000540  e2000d7e          AND      r0,r0,#0x1f80
000544  e3a01001          MOV      r1,#1
000548  e08163a0          ADD      r6,r1,r0,LSR #7
;;;487        P =((inpw(reg) & 0xE000)>>13)+1;
00054c  e5940000          LDR      r0,[r4,#0]
000550  e2000a0e          AND      r0,r0,#0xe000
000554  e08176a0          ADD      r7,r1,r0,LSR #13
;;;488    
;;;489        return (12*N/(M*P));    /* 12MHz HXT */
000558  e1610786          SMULBB   r1,r6,r7
00055c  e0852085          ADD      r2,r5,r5,LSL #1
000560  e1a00102          LSL      r0,r2,#2
000564  ebfffffe          BL       __aeabi_uidivmod
;;;490    }
000568  e8bd81f0          POP      {r4-r8,pc}
;;;491    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysGetClock PROC
;;;499     */
;;;500    UINT32 sysGetClock(CLK_Type clk)
00056c  e92d5ff0          PUSH     {r4-r12,lr}
;;;501    {
000570  e1a09000          MOV      r9,r0
;;;502        UINT32 src, divS, divN, reg, div;
;;;503    
;;;504        switch(clk) {
000574  e3590008          CMP      r9,#8
000578  308ff109          ADDCC    pc,pc,r9,LSL #2
00057c  ea0000e4          B        |L1.2324|
000580  ea0000e3          B        |L1.2324|
000584  ea000005          B        |L1.1440|
000588  ea000008          B        |L1.1456|
00058c  ea00000b          B        |L1.1472|
000590  ea000031          B        |L1.1628|
000594  ea000058          B        |L1.1788|
000598  ea000084          B        |L1.1968|
00059c  ea0000b0          B        |L1.2148|
                  |L1.1440|
;;;505        case SYS_UPLL:
0005a0  e1a00000          MOV      r0,r0
;;;506                return sysGetPLL(REG_CLK_UPLLCON);
0005a4  e59f0380          LDR      r0,|L1.2348|
0005a8  ebfffffe          BL       sysGetPLL
                  |L1.1452|
;;;507    
;;;508        case SYS_APLL:
;;;509                return sysGetPLL(REG_CLK_APLLCON);
;;;510    
;;;511        case SYS_SYSTEM: 
;;;512            {
;;;513                reg = inpw(REG_CLK_DIVCTL0);
;;;514                switch (reg & 0x18) 
;;;515                {
;;;516                    case 0x0:
;;;517                            src = 12;   /* HXT */
;;;518                        break;
;;;519                    case 0x10:
;;;520                            src = sysGetPLL(REG_CLK_APLLCON);
;;;521                            break;
;;;522                    case 0x18:
;;;523                            src = sysGetPLL(REG_CLK_UPLLCON);
;;;524                            break;
;;;525                    default:
;;;526                            return 0;
;;;527                }
;;;528                divS = (reg & 0x7) + 1;
;;;529                divN = ((reg & 0xf00) >> 8) + 1;
;;;530                return (src / divS / divN);
;;;531            }
;;;532    
;;;533        case SYS_HCLK1: 
;;;534            {
;;;535                reg = inpw(REG_CLK_DIVCTL0);
;;;536                switch (reg & 0x18) 
;;;537                {
;;;538                case 0x0:
;;;539                        src = 12;   /* HXT */
;;;540                    break;
;;;541                case 0x10:
;;;542                        src = sysGetPLL(REG_CLK_APLLCON);
;;;543                        break;
;;;544                case 0x18:
;;;545                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;546                        break;
;;;547                default:
;;;548                        return 0;
;;;549                }
;;;550                divS = (reg & 0x7) + 1;
;;;551                divN = ((reg & 0xf00) >> 8) + 1;
;;;552                return (src / divS / divN / 2);
;;;553            }
;;;554    
;;;555        case SYS_HCLK234: 
;;;556            {
;;;557                reg = inpw(REG_CLK_DIVCTL0);
;;;558                switch (reg & 0x18) 
;;;559                {
;;;560                case 0x0:
;;;561                    src = 12;   /* HXT */
;;;562                    break;
;;;563                case 0x10:
;;;564                    src = sysGetPLL(REG_CLK_APLLCON);
;;;565                    break;
;;;566                case 0x18:
;;;567                    src = sysGetPLL(REG_CLK_UPLLCON);
;;;568                    break;
;;;569                default:
;;;570                    return 0;
;;;571                }
;;;572                divS = (reg & 0x7) + 1;
;;;573                divN = ((reg & 0xf00) >> 8) + 1;
;;;574                div = ((reg & 0xf00000) >> 20) + 1;
;;;575                return (src / divS / divN / 2 / div);
;;;576            }
;;;577    
;;;578        case SYS_PCLK: 
;;;579            {
;;;580                reg = inpw(REG_CLK_DIVCTL0);
;;;581                switch (reg & 0x18) 
;;;582                {
;;;583                    case 0x0:
;;;584                        src = 12;   /* HXT */
;;;585                        break;
;;;586                    case 0x10:
;;;587                        src = sysGetPLL(REG_CLK_APLLCON);
;;;588                        break;
;;;589                    case 0x18:
;;;590                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;591                        break;
;;;592                    default:
;;;593                        return 0;
;;;594                }
;;;595                divS = (reg & 0x7) + 1;
;;;596               divN = ((reg & 0xf00) >> 8) + 1;
;;;597               div = ((reg & 0xf000000) >> 24) + 1;
;;;598               return (src / divS / divN / 2 / div);
;;;599            }
;;;600        case SYS_CPU: 
;;;601            {
;;;602                reg = inpw(REG_CLK_DIVCTL0);
;;;603                switch (reg & 0x18) 
;;;604                {
;;;605                    case 0x0:
;;;606                        src = 12;   /* HXT */
;;;607                        break;
;;;608                    case 0x10:
;;;609                        src = sysGetPLL(REG_CLK_APLLCON);
;;;610                        break;
;;;611                    case 0x18:
;;;612                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;613                        break;
;;;614                    default:
;;;615                        return 0;
;;;616                }
;;;617                divS = (reg & 0x7) + 1;
;;;618                divN = ((reg & 0xf00) >> 8) + 1;
;;;619                div = ((reg & 0xf0000) >> 16) + 1;
;;;620                return (src / divS / divN / div);
;;;621            }
;;;622    
;;;623        default:
;;;624            break;
;;;625        }
;;;626        return 0;
;;;627    }
0005ac  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1456|
0005b0  e1a00000          MOV      r0,r0                 ;508
0005b4  e59f0374          LDR      r0,|L1.2352|
0005b8  ebfffffe          BL       sysGetPLL
0005bc  eafffffa          B        |L1.1452|
                  |L1.1472|
0005c0  e1a00000          MOV      r0,r0                 ;511
0005c4  e3a0020b          MOV      r0,#0xb0000000        ;513
0005c8  e5904220          LDR      r4,[r0,#0x220]        ;513
0005cc  e2140018          ANDS     r0,r4,#0x18           ;514
0005d0  0a000004          BEQ      |L1.1512|
0005d4  e3500010          CMP      r0,#0x10              ;514
0005d8  0a000005          BEQ      |L1.1524|
0005dc  e3500018          CMP      r0,#0x18              ;514
0005e0  1a00000d          BNE      |L1.1564|
0005e4  ea000007          B        |L1.1544|
                  |L1.1512|
0005e8  e1a00000          MOV      r0,r0                 ;516
0005ec  e3a0500c          MOV      r5,#0xc               ;517
0005f0  ea00000c          B        |L1.1576|
                  |L1.1524|
0005f4  e1a00000          MOV      r0,r0                 ;519
0005f8  e59f0330          LDR      r0,|L1.2352|
0005fc  ebfffffe          BL       sysGetPLL
000600  e1a05000          MOV      r5,r0                 ;520
000604  ea000007          B        |L1.1576|
                  |L1.1544|
000608  e1a00000          MOV      r0,r0                 ;522
00060c  e59f0318          LDR      r0,|L1.2348|
000610  ebfffffe          BL       sysGetPLL
000614  e1a05000          MOV      r5,r0                 ;523
000618  ea000002          B        |L1.1576|
                  |L1.1564|
00061c  e1a00000          MOV      r0,r0                 ;525
000620  e3a00000          MOV      r0,#0                 ;526
000624  eaffffe0          B        |L1.1452|
                  |L1.1576|
000628  e1a00000          MOV      r0,r0                 ;518
00062c  e2040007          AND      r0,r4,#7              ;528
000630  e2806001          ADD      r6,r0,#1              ;528
000634  e2040c0f          AND      r0,r4,#0xf00          ;529
000638  e3a01001          MOV      r1,#1                 ;529
00063c  e0817420          ADD      r7,r1,r0,LSR #8       ;529
000640  e1a01006          MOV      r1,r6                 ;530
000644  e1a00005          MOV      r0,r5                 ;530
000648  ebfffffe          BL       __aeabi_uidivmod
00064c  e1a0a000          MOV      r10,r0                ;530
000650  e1a01007          MOV      r1,r7                 ;530
000654  ebfffffe          BL       __aeabi_uidivmod
000658  eaffffd3          B        |L1.1452|
                  |L1.1628|
00065c  e1a00000          MOV      r0,r0                 ;533
000660  e3a0020b          MOV      r0,#0xb0000000        ;535
000664  e5904220          LDR      r4,[r0,#0x220]        ;535
000668  e2140018          ANDS     r0,r4,#0x18           ;536
00066c  0a000004          BEQ      |L1.1668|
000670  e3500010          CMP      r0,#0x10              ;536
000674  0a000005          BEQ      |L1.1680|
000678  e3500018          CMP      r0,#0x18              ;536
00067c  1a00000d          BNE      |L1.1720|
000680  ea000007          B        |L1.1700|
                  |L1.1668|
000684  e1a00000          MOV      r0,r0                 ;538
000688  e3a0500c          MOV      r5,#0xc               ;539
00068c  ea00000c          B        |L1.1732|
                  |L1.1680|
000690  e1a00000          MOV      r0,r0                 ;541
000694  e59f0294          LDR      r0,|L1.2352|
000698  ebfffffe          BL       sysGetPLL
00069c  e1a05000          MOV      r5,r0                 ;542
0006a0  ea000007          B        |L1.1732|
                  |L1.1700|
0006a4  e1a00000          MOV      r0,r0                 ;544
0006a8  e59f027c          LDR      r0,|L1.2348|
0006ac  ebfffffe          BL       sysGetPLL
0006b0  e1a05000          MOV      r5,r0                 ;545
0006b4  ea000002          B        |L1.1732|
                  |L1.1720|
0006b8  e1a00000          MOV      r0,r0                 ;547
0006bc  e3a00000          MOV      r0,#0                 ;548
0006c0  eaffffb9          B        |L1.1452|
                  |L1.1732|
0006c4  e1a00000          MOV      r0,r0                 ;540
0006c8  e2040007          AND      r0,r4,#7              ;550
0006cc  e2806001          ADD      r6,r0,#1              ;550
0006d0  e2040c0f          AND      r0,r4,#0xf00          ;551
0006d4  e3a01001          MOV      r1,#1                 ;551
0006d8  e0817420          ADD      r7,r1,r0,LSR #8       ;551
0006dc  e1a01006          MOV      r1,r6                 ;552
0006e0  e1a00005          MOV      r0,r5                 ;552
0006e4  ebfffffe          BL       __aeabi_uidivmod
0006e8  e1a0a000          MOV      r10,r0                ;552
0006ec  e1a01007          MOV      r1,r7                 ;552
0006f0  ebfffffe          BL       __aeabi_uidivmod
0006f4  e1a000a0          LSR      r0,r0,#1              ;552
0006f8  eaffffab          B        |L1.1452|
                  |L1.1788|
0006fc  e1a00000          MOV      r0,r0                 ;555
000700  e3a0020b          MOV      r0,#0xb0000000        ;557
000704  e5904220          LDR      r4,[r0,#0x220]        ;557
000708  e2140018          ANDS     r0,r4,#0x18           ;558
00070c  0a000004          BEQ      |L1.1828|
000710  e3500010          CMP      r0,#0x10              ;558
000714  0a000005          BEQ      |L1.1840|
000718  e3500018          CMP      r0,#0x18              ;558
00071c  1a00000d          BNE      |L1.1880|
000720  ea000007          B        |L1.1860|
                  |L1.1828|
000724  e1a00000          MOV      r0,r0                 ;560
000728  e3a0500c          MOV      r5,#0xc               ;561
00072c  ea00000c          B        |L1.1892|
                  |L1.1840|
000730  e1a00000          MOV      r0,r0                 ;563
000734  e59f01f4          LDR      r0,|L1.2352|
000738  ebfffffe          BL       sysGetPLL
00073c  e1a05000          MOV      r5,r0                 ;564
000740  ea000007          B        |L1.1892|
                  |L1.1860|
000744  e1a00000          MOV      r0,r0                 ;566
000748  e59f01dc          LDR      r0,|L1.2348|
00074c  ebfffffe          BL       sysGetPLL
000750  e1a05000          MOV      r5,r0                 ;567
000754  ea000002          B        |L1.1892|
                  |L1.1880|
000758  e1a00000          MOV      r0,r0                 ;569
00075c  e3a00000          MOV      r0,#0                 ;570
000760  eaffff91          B        |L1.1452|
                  |L1.1892|
000764  e1a00000          MOV      r0,r0                 ;562
000768  e2040007          AND      r0,r4,#7              ;572
00076c  e2806001          ADD      r6,r0,#1              ;572
000770  e2040c0f          AND      r0,r4,#0xf00          ;573
000774  e3a01001          MOV      r1,#1                 ;573
000778  e0817420          ADD      r7,r1,r0,LSR #8       ;573
00077c  e204060f          AND      r0,r4,#0xf00000       ;574
000780  e0818a20          ADD      r8,r1,r0,LSR #20      ;574
000784  e1a01006          MOV      r1,r6                 ;575
000788  e1a00005          MOV      r0,r5                 ;575
00078c  ebfffffe          BL       __aeabi_uidivmod
000790  e1a0b000          MOV      r11,r0                ;575
000794  e1a01007          MOV      r1,r7                 ;575
000798  ebfffffe          BL       __aeabi_uidivmod
00079c  e1a0a0a0          LSR      r10,r0,#1             ;575
0007a0  e1a01008          MOV      r1,r8                 ;575
0007a4  e1a0000a          MOV      r0,r10                ;575
0007a8  ebfffffe          BL       __aeabi_uidivmod
0007ac  eaffff7e          B        |L1.1452|
                  |L1.1968|
0007b0  e1a00000          MOV      r0,r0                 ;578
0007b4  e3a0020b          MOV      r0,#0xb0000000        ;580
0007b8  e5904220          LDR      r4,[r0,#0x220]        ;580
0007bc  e2140018          ANDS     r0,r4,#0x18           ;581
0007c0  0a000004          BEQ      |L1.2008|
0007c4  e3500010          CMP      r0,#0x10              ;581
0007c8  0a000005          BEQ      |L1.2020|
0007cc  e3500018          CMP      r0,#0x18              ;581
0007d0  1a00000d          BNE      |L1.2060|
0007d4  ea000007          B        |L1.2040|
                  |L1.2008|
0007d8  e1a00000          MOV      r0,r0                 ;583
0007dc  e3a0500c          MOV      r5,#0xc               ;584
0007e0  ea00000c          B        |L1.2072|
                  |L1.2020|
0007e4  e1a00000          MOV      r0,r0                 ;586
0007e8  e59f0140          LDR      r0,|L1.2352|
0007ec  ebfffffe          BL       sysGetPLL
0007f0  e1a05000          MOV      r5,r0                 ;587
0007f4  ea000007          B        |L1.2072|
                  |L1.2040|
0007f8  e1a00000          MOV      r0,r0                 ;589
0007fc  e59f0128          LDR      r0,|L1.2348|
000800  ebfffffe          BL       sysGetPLL
000804  e1a05000          MOV      r5,r0                 ;590
000808  ea000002          B        |L1.2072|
                  |L1.2060|
00080c  e1a00000          MOV      r0,r0                 ;592
000810  e3a00000          MOV      r0,#0                 ;593
000814  eaffff64          B        |L1.1452|
                  |L1.2072|
000818  e1a00000          MOV      r0,r0                 ;585
00081c  e2040007          AND      r0,r4,#7              ;595
000820  e2806001          ADD      r6,r0,#1              ;595
000824  e2040c0f          AND      r0,r4,#0xf00          ;596
000828  e3a01001          MOV      r1,#1                 ;596
00082c  e0817420          ADD      r7,r1,r0,LSR #8       ;596
000830  e204040f          AND      r0,r4,#0xf000000      ;597
000834  e0818c20          ADD      r8,r1,r0,LSR #24      ;597
000838  e1a01006          MOV      r1,r6                 ;598
00083c  e1a00005          MOV      r0,r5                 ;598
000840  ebfffffe          BL       __aeabi_uidivmod
000844  e1a0b000          MOV      r11,r0                ;598
000848  e1a01007          MOV      r1,r7                 ;598
00084c  ebfffffe          BL       __aeabi_uidivmod
000850  e1a0a0a0          LSR      r10,r0,#1             ;598
000854  e1a01008          MOV      r1,r8                 ;598
000858  e1a0000a          MOV      r0,r10                ;598
00085c  ebfffffe          BL       __aeabi_uidivmod
000860  eaffff51          B        |L1.1452|
                  |L1.2148|
000864  e1a00000          MOV      r0,r0                 ;600
000868  e3a0020b          MOV      r0,#0xb0000000        ;602
00086c  e5904220          LDR      r4,[r0,#0x220]        ;602
000870  e2140018          ANDS     r0,r4,#0x18           ;603
000874  0a000004          BEQ      |L1.2188|
000878  e3500010          CMP      r0,#0x10              ;603
00087c  0a000005          BEQ      |L1.2200|
000880  e3500018          CMP      r0,#0x18              ;603
000884  1a00000d          BNE      |L1.2240|
000888  ea000007          B        |L1.2220|
                  |L1.2188|
00088c  e1a00000          MOV      r0,r0                 ;605
000890  e3a0500c          MOV      r5,#0xc               ;606
000894  ea00000c          B        |L1.2252|
                  |L1.2200|
000898  e1a00000          MOV      r0,r0                 ;608
00089c  e59f008c          LDR      r0,|L1.2352|
0008a0  ebfffffe          BL       sysGetPLL
0008a4  e1a05000          MOV      r5,r0                 ;609
0008a8  ea000007          B        |L1.2252|
                  |L1.2220|
0008ac  e1a00000          MOV      r0,r0                 ;611
0008b0  e59f0074          LDR      r0,|L1.2348|
0008b4  ebfffffe          BL       sysGetPLL
0008b8  e1a05000          MOV      r5,r0                 ;612
0008bc  ea000002          B        |L1.2252|
                  |L1.2240|
0008c0  e1a00000          MOV      r0,r0                 ;614
0008c4  e3a00000          MOV      r0,#0                 ;615
0008c8  eaffff37          B        |L1.1452|
                  |L1.2252|
0008cc  e1a00000          MOV      r0,r0                 ;607
0008d0  e2040007          AND      r0,r4,#7              ;617
0008d4  e2806001          ADD      r6,r0,#1              ;617
0008d8  e2040c0f          AND      r0,r4,#0xf00          ;618
0008dc  e3a01001          MOV      r1,#1                 ;618
0008e0  e0817420          ADD      r7,r1,r0,LSR #8       ;618
0008e4  e204080f          AND      r0,r4,#0xf0000        ;619
0008e8  e0818820          ADD      r8,r1,r0,LSR #16      ;619
0008ec  e1a01006          MOV      r1,r6                 ;620
0008f0  e1a00005          MOV      r0,r5                 ;620
0008f4  ebfffffe          BL       __aeabi_uidivmod
0008f8  e1a0b000          MOV      r11,r0                ;620
0008fc  e1a01007          MOV      r1,r7                 ;620
000900  ebfffffe          BL       __aeabi_uidivmod
000904  e1a0a000          MOV      r10,r0                ;620
000908  e1a01008          MOV      r1,r8                 ;620
00090c  ebfffffe          BL       __aeabi_uidivmod
000910  eaffff25          B        |L1.1452|
                  |L1.2324|
000914  e1a00000          MOV      r0,r0                 ;623
000918  e1a00000          MOV      r0,r0                 ;624
00091c  e1a00000          MOV      r0,r0                 ;624
000920  e3a00000          MOV      r0,#0                 ;626
000924  eaffff20          B        |L1.1452|
;;;628    
                          ENDP

                  |L1.2344|
                          DCD      _sys_bIsAICInitial
                  |L1.2348|
                          DCD      0xb0000264
                  |L1.2352|
                          DCD      0xb0000260

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsAICInitial
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  sysIrqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                  sysFiqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
