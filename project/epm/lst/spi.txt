; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\spi.crf ..\..\common\src\BSP\Driver\Source\spi.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  spi0ISR PROC
;;;54       */
;;;55     static void spi0ISR(void)
000000  e3a00801          MOV      r0,#0x10000
;;;56     {
;;;57         // clear interrupt flag
;;;58         outpw(REG_SPI0_CNTRL, 0x1 << 16);
000004  e59f1638          LDR      r1,|L1.1604|
000008  e5810200          STR      r0,[r1,#0x200]
;;;59         spi_device[0].intflag = 1;
00000c  e3a00001          MOV      r0,#1
000010  e59f1630          LDR      r1,|L1.1608|
000014  e5c10005          STRB     r0,[r1,#5]  ; spi_device
;;;60     }
000018  e12fff1e          BX       lr
;;;61     
                          ENDP

                  spi1ISR PROC
;;;66       */
;;;67     static void spi1ISR(void)
00001c  e3a00801          MOV      r0,#0x10000
;;;68     {
;;;69         // clear interrupt flag
;;;70         outpw(REG_SPI1_CNTRL, 0x1 << 16);
000020  e59f161c          LDR      r1,|L1.1604|
000024  e5810300          STR      r0,[r1,#0x300]
;;;71         spi_device[1].intflag = 1;
000028  e3a00001          MOV      r0,#1
00002c  e59f1614          LDR      r1,|L1.1608|
000030  e5c1000d          STRB     r0,[r1,#0xd]
;;;72     }
000034  e12fff1e          BX       lr
;;;73     
                          ENDP

                  spiSetSpeed PROC
;;;79       */
;;;80     static uint32_t spiSetSpeed(spi_dev * dev, uint32_t speed)
000038  e92d4070          PUSH     {r4-r6,lr}
;;;81     {
00003c  e1a04000          MOV      r4,r0
000040  e1a05001          MOV      r5,r1
;;;82         uint16_t div = (uint16_t)(SPI_INPUT_CLOCK / (2 * speed)) - 1;
000044  e1a01085          LSL      r1,r5,#1
000048  e59f05fc          LDR      r0,|L1.1612|
00004c  ebfffffe          BL       __aeabi_uidivmod
000050  e2400001          SUB      r0,r0,#1
000054  e1a06800          LSL      r6,r0,#16
000058  e1a06826          LSR      r6,r6,#16
;;;83     
;;;84         spi_out(dev, div, DIVIDER);
00005c  e5940000          LDR      r0,[r4,#0]
000060  e5806004          STR      r6,[r0,#4]
;;;85         return ( SPI_INPUT_CLOCK /  (2*(div+1)));
000064  e2860001          ADD      r0,r6,#1
000068  e1a01080          LSL      r1,r0,#1
00006c  e59f05d8          LDR      r0,|L1.1612|
000070  ebfffffe          BL       __aeabi_idivmod
;;;86     }
000074  e8bd8070          POP      {r4-r6,pc}
;;;87     
                          ENDP

                  spiInit PROC
;;;94       */
;;;95     int32_t  spiInit(int32_t fd)
000078  e92d4010          PUSH     {r4,lr}
;;;96     {
00007c  e1a04000          MOV      r4,r0
;;;97         if(fd == 0) {
000080  e3540000          CMP      r4,#0
000084  1a00000a          BNE      |L1.180|
;;;98             sysInstallISR(IRQ_LEVEL_1, SPI0_IRQn, (PVOID)spi0ISR);
000088  e59f25c0          LDR      r2,|L1.1616|
00008c  e3a01033          MOV      r1,#0x33
000090  e3a00001          MOV      r0,#1
000094  ebfffffe          BL       sysInstallISR
;;;99             sysEnableInterrupt(SPI0_IRQn);
000098  e3a00033          MOV      r0,#0x33
00009c  ebfffffe          BL       sysEnableInterrupt
;;;100            memset((void *)&spi_device[0], 0, sizeof(spi_dev));
0000a0  e59f05a0          LDR      r0,|L1.1608|
0000a4  e3a01000          MOV      r1,#0
0000a8  e5801000          STR      r1,[r0,#0]  ; spi_device
0000ac  e5801004          STR      r1,[r0,#4]  ; spi_device
0000b0  ea000009          B        |L1.220|
                  |L1.180|
;;;101        } else {
;;;102            sysInstallISR(IRQ_LEVEL_1, SPI1_IRQn, (PVOID)spi1ISR);
0000b4  e59f2598          LDR      r2,|L1.1620|
0000b8  e3a01034          MOV      r1,#0x34
0000bc  e3a00001          MOV      r0,#1
0000c0  ebfffffe          BL       sysInstallISR
;;;103            sysEnableInterrupt(SPI1_IRQn);
0000c4  e3a00034          MOV      r0,#0x34
0000c8  ebfffffe          BL       sysEnableInterrupt
;;;104            memset((void *)&spi_device[1], 0, sizeof(spi_dev));
0000cc  e59f0574          LDR      r0,|L1.1608|
0000d0  e3a01000          MOV      r1,#0
0000d4  e5801008          STR      r1,[r0,#8]  ; spi_device
0000d8  e580100c          STR      r1,[r0,#0xc]  ; spi_device
                  |L1.220|
;;;105        }
;;;106    
;;;107        sysSetLocalInterrupt(ENABLE_IRQ);
0000dc  e3a0007f          MOV      r0,#0x7f
0000e0  ebfffffe          BL       sysSetLocalInterrupt
;;;108    
;;;109        return(0);
0000e4  e3a00000          MOV      r0,#0
;;;110    }
0000e8  e8bd8010          POP      {r4,pc}
;;;111    
                          ENDP

                  spiIoctl PROC
;;;123      */
;;;124    int32_t spiIoctl(int32_t fd, uint32_t cmd, uint32_t arg0, uint32_t arg1)
0000ec  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
0000f0  e1a06000          MOV      r6,r0
0000f4  e1a07001          MOV      r7,r1
0000f8  e1a05002          MOV      r5,r2
0000fc  e1a08003          MOV      r8,r3
;;;126        spi_dev *dev;
;;;127    
;;;128        if(fd != 0 && fd != 1)
000100  e3560000          CMP      r6,#0
000104  0a000003          BEQ      |L1.280|
000108  e3560001          CMP      r6,#1
00010c  0a000001          BEQ      |L1.280|
;;;129            return(SPI_ERR_NODEV);
000110  e3e00000          MVN      r0,#0
                  |L1.276|
;;;130    
;;;131        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
;;;132        if(dev->openflag == 0)
;;;133            return(SPI_ERR_IO);
;;;134    
;;;135        switch(cmd) {
;;;136        case SPI_IOC_TRIGGER:
;;;137            spi_out(dev, spi_in(dev, CNTRL) | 0x1 ,CNTRL);
;;;138            break;
;;;139    
;;;140        case SPI_IOC_SET_INTERRUPT:
;;;141            if(arg0 == SPI_ENABLE_INTERRUPT)
;;;142                spi_out(dev, spi_in(dev, CNTRL) | (0x1<<17) ,CNTRL);
;;;143            else
;;;144                spi_out(dev, spi_in(dev, CNTRL) & ~(0x1<<17) ,CNTRL);
;;;145            break;
;;;146    
;;;147        case SPI_IOC_SET_SPEED:
;;;148            spiSetSpeed(dev, (uint32_t)arg0);
;;;149            break;
;;;150    
;;;151        case SPI_IOC_SET_DUAL_QUAD_MODE:
;;;152            if(arg0 == SPI_DISABLE_DUAL_QUAD) {
;;;153                spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 21)) ,CNTRL);
;;;154                break;
;;;155            }
;;;156    
;;;157            if(arg0 == SPI_DUAL_MODE)
;;;158                spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 21)) | (0x1 << 22) ,CNTRL);
;;;159            else
;;;160                spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 21)) | (0x1 << 21) ,CNTRL);
;;;161            break;
;;;162    
;;;163        case SPI_IOC_SET_DUAL_QUAD_DIR:
;;;164            if(arg0 == SPI_DUAL_QUAD_INPUT)
;;;165                spi_out(dev, spi_in(dev, CNTRL) & ~(0x1 << 20) ,CNTRL);
;;;166            else
;;;167                spi_out(dev, spi_in(dev, CNTRL) | (0x1 << 20) ,CNTRL);
;;;168            break;
;;;169    
;;;170        case SPI_IOC_SET_LSB_MSB:
;;;171            if(arg0 == SPI_MSB)
;;;172                spi_out(dev, spi_in(dev, CNTRL) & ~(0x1 << 10) ,CNTRL);
;;;173            else
;;;174                spi_out(dev, spi_in(dev, CNTRL) | (0x1 << 10) ,CNTRL);
;;;175            break;
;;;176    
;;;177        case SPI_IOC_SET_TX_NUM:
;;;178            if(arg0 < 4)
;;;179                spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 8)) | (arg0 << 8) ,CNTRL);
;;;180            else
;;;181                return SPI_ERR_ARG;
;;;182            break;
;;;183    
;;;184        case SPI_IOC_SET_TX_BITLEN:
;;;185            if(arg0 < 32)
;;;186                spi_out(dev, (spi_in(dev, CNTRL) & ~(0x1f << 3)) | (arg0 << 3) ,CNTRL);
;;;187            else
;;;188                return SPI_ERR_ARG;
;;;189            break;
;;;190    
;;;191        case SPI_IOC_SET_MODE:
;;;192            if(arg0 > SPI_MODE_3)
;;;193                return SPI_ERR_ARG;
;;;194    
;;;195            if(arg0 == SPI_MODE_0)
;;;196                spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | (1<<2) ,CNTRL);
;;;197            else if(arg0 == SPI_MODE_1)
;;;198                spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | (1<<1) ,CNTRL);
;;;199            else if(arg0 == SPI_MODE_2)
;;;200                spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | ((1UL<<31) | (1<<2)) ,CNTRL);
;;;201            else
;;;202                spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | ((1UL<<31) | (1<<1)) ,CNTRL);
;;;203            break;
;;;204    
;;;205        case SPI_IOC_ENABLE_SS:
;;;206            if(arg0 == SPI_SS_SS0)
;;;207                spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) | 0x1 ,SSR);
;;;208            else if(arg0 == SPI_SS_SS1)
;;;209                spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) | 0x2 ,SSR);
;;;210            else if(arg0 == SPI_SS_BOTH)
;;;211                spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) | 0x3 ,SSR);
;;;212            else
;;;213                return SPI_ERR_ARG;
;;;214            break;
;;;215    
;;;216        case SPI_IOC_DISABLE_SS:
;;;217            if(arg0 == SPI_SS_SS0)
;;;218                spi_out(dev, (spi_in(dev, SSR) & ~(0x1)) ,SSR);
;;;219            else if(arg0 == SPI_SS_SS1)
;;;220                spi_out(dev, (spi_in(dev, SSR) & ~(0x2)) ,SSR);
;;;221            else if(arg0 == SPI_SS_BOTH)
;;;222                spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) ,SSR);
;;;223            else
;;;224                return SPI_ERR_ARG;
;;;225            break;
;;;226    
;;;227        case SPI_IOC_SET_AUTOSS:
;;;228            if(arg0 == SPI_DISABLE_AUTOSS)
;;;229                spi_out(dev, spi_in(dev, SSR) & ~(0x1 << 3) ,SSR);
;;;230            else
;;;231                spi_out(dev, spi_in(dev, SSR) | (0x1 << 3) ,SSR);
;;;232            break;
;;;233    
;;;234        case SPI_IOC_SET_SS_ACTIVE_LEVEL:
;;;235            if(arg0 == SPI_SS_ACTIVE_LOW)
;;;236                spi_out(dev, spi_in(dev, SSR) & ~(0x1 << 2) ,SSR);
;;;237            else
;;;238                spi_out(dev, spi_in(dev, SSR) | (0x1 << 2) ,SSR);
;;;239        default:
;;;240            break;
;;;241        }
;;;242    
;;;243        return 0;
;;;244    }
000114  e8bd81f0          POP      {r4-r8,pc}
                  |L1.280|
000118  e59f0528          LDR      r0,|L1.1608|
00011c  e0804186          ADD      r4,r0,r6,LSL #3       ;131
000120  e5d40004          LDRB     r0,[r4,#4]            ;132
000124  e3500000          CMP      r0,#0                 ;132
000128  1a000001          BNE      |L1.308|
00012c  e3e00002          MVN      r0,#2                 ;133
000130  eafffff7          B        |L1.276|
                  |L1.308|
000134  e357000d          CMP      r7,#0xd               ;135
000138  308ff107          ADDCC    pc,pc,r7,LSL #2       ;135
00013c  ea0000f7          B        |L1.1312|
000140  ea00000b          B        |L1.372|
000144  ea000011          B        |L1.400|
000148  ea00001f          B        |L1.460|
00014c  ea000023          B        |L1.480|
000150  ea00003b          B        |L1.580|
000154  ea000049          B        |L1.640|
000158  ea000057          B        |L1.700|
00015c  ea000063          B        |L1.752|
000160  ea00006f          B        |L1.804|
000164  ea000095          B        |L1.960|
000168  ea0000b2          B        |L1.1080|
00016c  ea0000cd          B        |L1.1192|
000170  ea0000db          B        |L1.1252|
                  |L1.372|
000174  e1a00000          MOV      r0,r0                 ;136
000178  e5940000          LDR      r0,[r4,#0]            ;137
00017c  e5900000          LDR      r0,[r0,#0]            ;137
000180  e3800001          ORR      r0,r0,#1              ;137
000184  e5941000          LDR      r1,[r4,#0]            ;137
000188  e5810000          STR      r0,[r1,#0]            ;137
00018c  ea0000e4          B        |L1.1316|
                  |L1.400|
000190  e1a00000          MOV      r0,r0                 ;140
000194  e3550001          CMP      r5,#1                 ;141
000198  1a000005          BNE      |L1.436|
00019c  e5940000          LDR      r0,[r4,#0]            ;142
0001a0  e5900000          LDR      r0,[r0,#0]            ;142
0001a4  e3800802          ORR      r0,r0,#0x20000        ;142
0001a8  e5941000          LDR      r1,[r4,#0]            ;142
0001ac  e5810000          STR      r0,[r1,#0]            ;142
0001b0  ea000004          B        |L1.456|
                  |L1.436|
0001b4  e5940000          LDR      r0,[r4,#0]            ;144
0001b8  e5900000          LDR      r0,[r0,#0]            ;144
0001bc  e3c00802          BIC      r0,r0,#0x20000        ;144
0001c0  e5941000          LDR      r1,[r4,#0]            ;144
0001c4  e5810000          STR      r0,[r1,#0]            ;144
                  |L1.456|
0001c8  ea0000d5          B        |L1.1316|
                  |L1.460|
0001cc  e1a00000          MOV      r0,r0                 ;147
0001d0  e1a01005          MOV      r1,r5                 ;148
0001d4  e1a00004          MOV      r0,r4                 ;148
0001d8  ebfffffe          BL       spiSetSpeed
0001dc  ea0000d0          B        |L1.1316|
                  |L1.480|
0001e0  e1a00000          MOV      r0,r0                 ;151
0001e4  e3550000          CMP      r5,#0                 ;152
0001e8  1a000005          BNE      |L1.516|
0001ec  e5940000          LDR      r0,[r4,#0]            ;153
0001f0  e5900000          LDR      r0,[r0,#0]            ;153
0001f4  e3c00606          BIC      r0,r0,#0x600000       ;153
0001f8  e5941000          LDR      r1,[r4,#0]            ;153
0001fc  e5810000          STR      r0,[r1,#0]            ;153
000200  ea0000c7          B        |L1.1316|
                  |L1.516|
000204  e3550001          CMP      r5,#1                 ;157
000208  1a000006          BNE      |L1.552|
00020c  e5940000          LDR      r0,[r4,#0]            ;158
000210  e5900000          LDR      r0,[r0,#0]            ;158
000214  e3c00606          BIC      r0,r0,#0x600000       ;158
000218  e3800501          ORR      r0,r0,#0x400000       ;158
00021c  e5941000          LDR      r1,[r4,#0]            ;158
000220  e5810000          STR      r0,[r1,#0]            ;158
000224  ea000005          B        |L1.576|
                  |L1.552|
000228  e5940000          LDR      r0,[r4,#0]            ;160
00022c  e5900000          LDR      r0,[r0,#0]            ;160
000230  e3c00606          BIC      r0,r0,#0x600000       ;160
000234  e3800602          ORR      r0,r0,#0x200000       ;160
000238  e5941000          LDR      r1,[r4,#0]            ;160
00023c  e5810000          STR      r0,[r1,#0]            ;160
                  |L1.576|
000240  ea0000b7          B        |L1.1316|
                  |L1.580|
000244  e1a00000          MOV      r0,r0                 ;163
000248  e3550000          CMP      r5,#0                 ;164
00024c  1a000005          BNE      |L1.616|
000250  e5940000          LDR      r0,[r4,#0]            ;165
000254  e5900000          LDR      r0,[r0,#0]            ;165
000258  e3c00601          BIC      r0,r0,#0x100000       ;165
00025c  e5941000          LDR      r1,[r4,#0]            ;165
000260  e5810000          STR      r0,[r1,#0]            ;165
000264  ea000004          B        |L1.636|
                  |L1.616|
000268  e5940000          LDR      r0,[r4,#0]            ;167
00026c  e5900000          LDR      r0,[r0,#0]            ;167
000270  e3800601          ORR      r0,r0,#0x100000       ;167
000274  e5941000          LDR      r1,[r4,#0]            ;167
000278  e5810000          STR      r0,[r1,#0]            ;167
                  |L1.636|
00027c  ea0000a8          B        |L1.1316|
                  |L1.640|
000280  e1a00000          MOV      r0,r0                 ;170
000284  e3550000          CMP      r5,#0                 ;171
000288  1a000005          BNE      |L1.676|
00028c  e5940000          LDR      r0,[r4,#0]            ;172
000290  e5900000          LDR      r0,[r0,#0]            ;172
000294  e3c00b01          BIC      r0,r0,#0x400          ;172
000298  e5941000          LDR      r1,[r4,#0]            ;172
00029c  e5810000          STR      r0,[r1,#0]            ;172
0002a0  ea000004          B        |L1.696|
                  |L1.676|
0002a4  e5940000          LDR      r0,[r4,#0]            ;174
0002a8  e5900000          LDR      r0,[r0,#0]            ;174
0002ac  e3800b01          ORR      r0,r0,#0x400          ;174
0002b0  e5941000          LDR      r1,[r4,#0]            ;174
0002b4  e5810000          STR      r0,[r1,#0]            ;174
                  |L1.696|
0002b8  ea000099          B        |L1.1316|
                  |L1.700|
0002bc  e1a00000          MOV      r0,r0                 ;177
0002c0  e3550004          CMP      r5,#4                 ;178
0002c4  2a000006          BCS      |L1.740|
0002c8  e5940000          LDR      r0,[r4,#0]            ;179
0002cc  e5900000          LDR      r0,[r0,#0]            ;179
0002d0  e3c00c03          BIC      r0,r0,#0x300          ;179
0002d4  e1800405          ORR      r0,r0,r5,LSL #8       ;179
0002d8  e5941000          LDR      r1,[r4,#0]            ;179
0002dc  e5810000          STR      r0,[r1,#0]            ;179
0002e0  ea000001          B        |L1.748|
                  |L1.740|
0002e4  e3e00003          MVN      r0,#3                 ;181
0002e8  eaffff89          B        |L1.276|
                  |L1.748|
0002ec  ea00008c          B        |L1.1316|
                  |L1.752|
0002f0  e1a00000          MOV      r0,r0                 ;184
0002f4  e3550020          CMP      r5,#0x20              ;185
0002f8  2a000006          BCS      |L1.792|
0002fc  e5940000          LDR      r0,[r4,#0]            ;186
000300  e5900000          LDR      r0,[r0,#0]            ;186
000304  e3c000f8          BIC      r0,r0,#0xf8           ;186
000308  e1800185          ORR      r0,r0,r5,LSL #3       ;186
00030c  e5941000          LDR      r1,[r4,#0]            ;186
000310  e5810000          STR      r0,[r1,#0]            ;186
000314  ea000001          B        |L1.800|
                  |L1.792|
000318  e3e00003          MVN      r0,#3                 ;188
00031c  eaffff7c          B        |L1.276|
                  |L1.800|
000320  ea00007f          B        |L1.1316|
                  |L1.804|
000324  e1a00000          MOV      r0,r0                 ;191
000328  e3550003          CMP      r5,#3                 ;192
00032c  9a000001          BLS      |L1.824|
000330  e3e00003          MVN      r0,#3                 ;193
000334  eaffff76          B        |L1.276|
                  |L1.824|
000338  e3550000          CMP      r5,#0                 ;195
00033c  1a000006          BNE      |L1.860|
000340  e5940000          LDR      r0,[r4,#0]            ;196
000344  e5900000          LDR      r0,[r0,#0]            ;196
000348  e3c0011a          BIC      r0,r0,#0x80000006     ;196
00034c  e3800004          ORR      r0,r0,#4              ;196
000350  e5941000          LDR      r1,[r4,#0]            ;196
000354  e5810000          STR      r0,[r1,#0]            ;196
000358  ea000017          B        |L1.956|
                  |L1.860|
00035c  e3550001          CMP      r5,#1                 ;197
000360  1a000006          BNE      |L1.896|
000364  e5940000          LDR      r0,[r4,#0]            ;198
000368  e5900000          LDR      r0,[r0,#0]            ;198
00036c  e3c0011a          BIC      r0,r0,#0x80000006     ;198
000370  e3800002          ORR      r0,r0,#2              ;198
000374  e5941000          LDR      r1,[r4,#0]            ;198
000378  e5810000          STR      r0,[r1,#0]            ;198
00037c  ea00000e          B        |L1.956|
                  |L1.896|
000380  e3550002          CMP      r5,#2                 ;199
000384  1a000006          BNE      |L1.932|
000388  e5940000          LDR      r0,[r4,#0]            ;200
00038c  e5900000          LDR      r0,[r0,#0]            ;200
000390  e3c0011a          BIC      r0,r0,#0x80000006     ;200
000394  e3800112          ORR      r0,r0,#0x80000004     ;200
000398  e5941000          LDR      r1,[r4,#0]            ;200
00039c  e5810000          STR      r0,[r1,#0]            ;200
0003a0  ea000005          B        |L1.956|
                  |L1.932|
0003a4  e5940000          LDR      r0,[r4,#0]            ;202
0003a8  e5900000          LDR      r0,[r0,#0]            ;202
0003ac  e3c0011a          BIC      r0,r0,#0x80000006     ;202
0003b0  e380010a          ORR      r0,r0,#0x80000002     ;202
0003b4  e5941000          LDR      r1,[r4,#0]            ;202
0003b8  e5810000          STR      r0,[r1,#0]            ;202
                  |L1.956|
0003bc  ea000058          B        |L1.1316|
                  |L1.960|
0003c0  e1a00000          MOV      r0,r0                 ;205
0003c4  e3550000          CMP      r5,#0                 ;206
0003c8  1a000006          BNE      |L1.1000|
0003cc  e5940000          LDR      r0,[r4,#0]            ;207
0003d0  e5900008          LDR      r0,[r0,#8]            ;207
0003d4  e3c00003          BIC      r0,r0,#3              ;207
0003d8  e3800001          ORR      r0,r0,#1              ;207
0003dc  e5941000          LDR      r1,[r4,#0]            ;207
0003e0  e5810008          STR      r0,[r1,#8]            ;207
0003e4  ea000012          B        |L1.1076|
                  |L1.1000|
0003e8  e3550001          CMP      r5,#1                 ;208
0003ec  1a000006          BNE      |L1.1036|
0003f0  e5940000          LDR      r0,[r4,#0]            ;209
0003f4  e5900008          LDR      r0,[r0,#8]            ;209
0003f8  e3c00003          BIC      r0,r0,#3              ;209
0003fc  e3800002          ORR      r0,r0,#2              ;209
000400  e5941000          LDR      r1,[r4,#0]            ;209
000404  e5810008          STR      r0,[r1,#8]            ;209
000408  ea000009          B        |L1.1076|
                  |L1.1036|
00040c  e3550002          CMP      r5,#2                 ;210
000410  1a000005          BNE      |L1.1068|
000414  e5940000          LDR      r0,[r4,#0]            ;211
000418  e5900008          LDR      r0,[r0,#8]            ;211
00041c  e3800003          ORR      r0,r0,#3              ;211
000420  e5941000          LDR      r1,[r4,#0]            ;211
000424  e5810008          STR      r0,[r1,#8]            ;211
000428  ea000001          B        |L1.1076|
                  |L1.1068|
00042c  e3e00003          MVN      r0,#3                 ;213
000430  eaffff37          B        |L1.276|
                  |L1.1076|
000434  ea00003a          B        |L1.1316|
                  |L1.1080|
000438  e1a00000          MOV      r0,r0                 ;216
00043c  e3550000          CMP      r5,#0                 ;217
000440  1a000005          BNE      |L1.1116|
000444  e5940000          LDR      r0,[r4,#0]            ;218
000448  e5900008          LDR      r0,[r0,#8]            ;218
00044c  e3c00001          BIC      r0,r0,#1              ;218
000450  e5941000          LDR      r1,[r4,#0]            ;218
000454  e5810008          STR      r0,[r1,#8]            ;218
000458  ea000011          B        |L1.1188|
                  |L1.1116|
00045c  e3550001          CMP      r5,#1                 ;219
000460  1a000005          BNE      |L1.1148|
000464  e5940000          LDR      r0,[r4,#0]            ;220
000468  e5900008          LDR      r0,[r0,#8]            ;220
00046c  e3c00002          BIC      r0,r0,#2              ;220
000470  e5941000          LDR      r1,[r4,#0]            ;220
000474  e5810008          STR      r0,[r1,#8]            ;220
000478  ea000009          B        |L1.1188|
                  |L1.1148|
00047c  e3550002          CMP      r5,#2                 ;221
000480  1a000005          BNE      |L1.1180|
000484  e5940000          LDR      r0,[r4,#0]            ;222
000488  e5900008          LDR      r0,[r0,#8]            ;222
00048c  e3c00003          BIC      r0,r0,#3              ;222
000490  e5941000          LDR      r1,[r4,#0]            ;222
000494  e5810008          STR      r0,[r1,#8]            ;222
000498  ea000001          B        |L1.1188|
                  |L1.1180|
00049c  e3e00003          MVN      r0,#3                 ;224
0004a0  eaffff1b          B        |L1.276|
                  |L1.1188|
0004a4  ea00001e          B        |L1.1316|
                  |L1.1192|
0004a8  e1a00000          MOV      r0,r0                 ;227
0004ac  e3550000          CMP      r5,#0                 ;228
0004b0  1a000005          BNE      |L1.1228|
0004b4  e5940000          LDR      r0,[r4,#0]            ;229
0004b8  e5900008          LDR      r0,[r0,#8]            ;229
0004bc  e3c00008          BIC      r0,r0,#8              ;229
0004c0  e5941000          LDR      r1,[r4,#0]            ;229
0004c4  e5810008          STR      r0,[r1,#8]            ;229
0004c8  ea000004          B        |L1.1248|
                  |L1.1228|
0004cc  e5940000          LDR      r0,[r4,#0]            ;231
0004d0  e5900008          LDR      r0,[r0,#8]            ;231
0004d4  e3800008          ORR      r0,r0,#8              ;231
0004d8  e5941000          LDR      r1,[r4,#0]            ;231
0004dc  e5810008          STR      r0,[r1,#8]            ;231
                  |L1.1248|
0004e0  ea00000f          B        |L1.1316|
                  |L1.1252|
0004e4  e1a00000          MOV      r0,r0                 ;234
0004e8  e3550000          CMP      r5,#0                 ;235
0004ec  1a000005          BNE      |L1.1288|
0004f0  e5940000          LDR      r0,[r4,#0]            ;236
0004f4  e5900008          LDR      r0,[r0,#8]            ;236
0004f8  e3c00004          BIC      r0,r0,#4              ;236
0004fc  e5941000          LDR      r1,[r4,#0]            ;236
000500  e5810008          STR      r0,[r1,#8]            ;236
000504  ea000004          B        |L1.1308|
                  |L1.1288|
000508  e5940000          LDR      r0,[r4,#0]            ;238
00050c  e5900008          LDR      r0,[r0,#8]            ;238
000510  e3800004          ORR      r0,r0,#4              ;238
000514  e5941000          LDR      r1,[r4,#0]            ;238
000518  e5810008          STR      r0,[r1,#8]            ;238
                  |L1.1308|
00051c  e1a00000          MOV      r0,r0                 ;239
                  |L1.1312|
000520  e1a00000          MOV      r0,r0                 ;240
                  |L1.1316|
000524  e1a00000          MOV      r0,r0                 ;138
000528  e3a00000          MOV      r0,#0                 ;243
00052c  eafffef8          B        |L1.276|
;;;245    
                          ENDP

                  spiOpen PROC
;;;251      */
;;;252    int spiOpen(int32_t fd)
000530  e1a02000          MOV      r2,r0
;;;253    {
;;;254        spi_dev *dev;
;;;255    
;;;256        if( (uint32_t)fd >= SPI_NUMBER)
000534  e3520002          CMP      r2,#2
000538  3a000001          BCC      |L1.1348|
;;;257            return SPI_ERR_NODEV;
00053c  e3e00000          MVN      r0,#0
                  |L1.1344|
;;;258    
;;;259        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
;;;260    
;;;261        if( dev->openflag != 0 )        /* a card slot can open only once */
;;;262            return(SPI_ERR_BUSY);
;;;263    
;;;264        /* Enable engine clock */
;;;265        if((uint32_t)fd == 0)
;;;266            outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | 0x10);
;;;267        else
;;;268            outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | 0x20);
;;;269    
;;;270        memset(dev, 0, sizeof(spi_dev));
;;;271        dev->base = ((uint32_t)fd) ? SPI1_BA : SPI0_BA;
;;;272        dev->openflag = 1;
;;;273        dev->intflag = 0;
;;;274    
;;;275        return 0;
;;;276    }
000540  e12fff1e          BX       lr
                  |L1.1348|
000544  e59f00fc          LDR      r0,|L1.1608|
000548  e0801182          ADD      r1,r0,r2,LSL #3       ;259
00054c  e5d10004          LDRB     r0,[r1,#4]            ;261
000550  e3500000          CMP      r0,#0                 ;261
000554  0a000001          BEQ      |L1.1376|
000558  e3e00001          MVN      r0,#1                 ;262
00055c  eafffff7          B        |L1.1344|
                  |L1.1376|
000560  e3520000          CMP      r2,#0                 ;265
000564  1a000005          BNE      |L1.1408|
000568  e3a0020b          MOV      r0,#0xb0000000        ;266
00056c  e590021c          LDR      r0,[r0,#0x21c]        ;266
000570  e3800010          ORR      r0,r0,#0x10           ;266
000574  e3a0320b          MOV      r3,#0xb0000000        ;266
000578  e583021c          STR      r0,[r3,#0x21c]        ;266
00057c  ea000004          B        |L1.1428|
                  |L1.1408|
000580  e3a0020b          MOV      r0,#0xb0000000        ;268
000584  e590021c          LDR      r0,[r0,#0x21c]        ;268
000588  e3800020          ORR      r0,r0,#0x20           ;268
00058c  e3a0320b          MOV      r3,#0xb0000000        ;268
000590  e583021c          STR      r0,[r3,#0x21c]        ;268
                  |L1.1428|
000594  e3a00000          MOV      r0,#0                 ;270
000598  e5810000          STR      r0,[r1,#0]            ;270
00059c  e5810004          STR      r0,[r1,#4]            ;270
0005a0  e3520000          CMP      r2,#0                 ;271
0005a4  0a000001          BEQ      |L1.1456|
0005a8  e59f00a8          LDR      r0,|L1.1624|
0005ac  ea000000          B        |L1.1460|
                  |L1.1456|
0005b0  e59f00a4          LDR      r0,|L1.1628|
                  |L1.1460|
0005b4  e5810000          STR      r0,[r1,#0]            ;271
0005b8  e3a00001          MOV      r0,#1                 ;272
0005bc  e5c10004          STRB     r0,[r1,#4]            ;272
0005c0  e3a00000          MOV      r0,#0                 ;273
0005c4  e5c10005          STRB     r0,[r1,#5]            ;273
0005c8  e1a00000          MOV      r0,r0                 ;275
0005cc  eaffffdb          B        |L1.1344|
;;;277    
                          ENDP

                  spiGetBusyStatus PROC
;;;284      */
;;;285    uint8_t spiGetBusyStatus(int32_t fd)
0005d0  e1a02000          MOV      r2,r0
;;;286    {
;;;287        spi_dev *dev;
;;;288    
;;;289        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
0005d4  e59f006c          LDR      r0,|L1.1608|
0005d8  e0801182          ADD      r1,r0,r2,LSL #3
;;;290    
;;;291        if(spi_in(dev, CNTRL) & (0x1 << 17))
0005dc  e5910000          LDR      r0,[r1,#0]
0005e0  e5900000          LDR      r0,[r0,#0]
0005e4  e3100802          TST      r0,#0x20000
0005e8  0a000001          BEQ      |L1.1524|
;;;292            return dev->intflag;
0005ec  e5d10005          LDRB     r0,[r1,#5]
                  |L1.1520|
;;;293        else
;;;294            return (( spi_in(dev, CNTRL) & 0x1) == 0x1 ? 1:0);
;;;295    }
0005f0  e12fff1e          BX       lr
                  |L1.1524|
0005f4  e5910000          LDR      r0,[r1,#0]            ;294
0005f8  e5900000          LDR      r0,[r0,#0]            ;294
0005fc  e2000001          AND      r0,r0,#1              ;294
000600  eafffffa          B        |L1.1520|
;;;296    
                          ENDP

                  spiRead PROC
;;;302      */
;;;303    uint32_t spiRead(int32_t fd, uint8_t buff_id)
000604  e1a02000          MOV      r2,r0
;;;304    {
;;;305        spi_dev *dev;
;;;306    
;;;307        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
000608  e59f0038          LDR      r0,|L1.1608|
00060c  e0803182          ADD      r3,r0,r2,LSL #3
;;;308        return spi_in(dev, (RX0+4*buff_id));
000610  e1a0c101          LSL      r12,r1,#2
000614  e28cc010          ADD      r12,r12,#0x10
000618  e5930000          LDR      r0,[r3,#0]
00061c  e790000c          LDR      r0,[r0,r12]
;;;309    }
000620  e12fff1e          BX       lr
;;;310    
                          ENDP

                  spiWrite PROC
;;;317      */
;;;318    void spiWrite(int32_t fd, uint8_t buff_id, uint32_t data)
000624  e92d4010          PUSH     {r4,lr}
;;;319    {
;;;320        spi_dev *dev;
;;;321    
;;;322        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
000628  e59fc018          LDR      r12,|L1.1608|
00062c  e08c3180          ADD      r3,r12,r0,LSL #3
;;;323        spi_out(dev, data, (TX0+4*buff_id));
000630  e1a04101          LSL      r4,r1,#2
000634  e2844010          ADD      r4,r4,#0x10
000638  e593c000          LDR      r12,[r3,#0]
00063c  e78c2004          STR      r2,[r12,r4]
;;;324    }
000640  e8bd8010          POP      {r4,pc}
;;;325    
                          ENDP

                  |L1.1604|
                          DCD      0xb8006000
                  |L1.1608|
                          DCD      spi_device
                  |L1.1612|
                          DCD      0x047868c0
                  |L1.1616|
                          DCD      spi0ISR
                  |L1.1620|
                          DCD      spi1ISR
                  |L1.1624|
                          DCD      0xb8006300
                  |L1.1628|
                          DCD      0xb8006200

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  spi_device
                          %        16
