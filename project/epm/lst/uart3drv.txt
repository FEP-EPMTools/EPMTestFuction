; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uart3drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart3drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uart3drv.crf src\userdrv\uart3drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART3SetPower PROC
;;;151     
;;;152    BOOL UART3SetPower(BOOL flag)
000000  e92d4010          PUSH     {r4,lr}
;;;153    {
000004  e1a04000          MOV      r4,r0
;;;154        //sysprintf("UART3SetPower [ %d ]!! enter\n", flag);
;;;155        if(flag)
000008  e3540000          CMP      r4,#0
00000c  0a000014          BEQ      |L1.100|
;;;156        {       
;;;157            //hwInit(baudRateTemp);
;;;158            //GPIO_SetBit(POWER_PORT, POWER_PIN); 
;;;159            GPIO_ClrBit(POWER_PORT, POWER_PIN); 
000010  e3a01b02          MOV      r1,#0x800
000014  e3a00c01          MOV      r0,#0x100
000018  ebfffffe          BL       GPIO_ClrBit
;;;160            vTaskDelay(100/portTICK_RATE_MS);
00001c  e3a0000a          MOV      r0,#0xa
000020  ebfffffe          BL       vTaskDelay
;;;161            //vTaskDelay(1000/portTICK_RATE_MS);
;;;162            // GPE 12, 13 //TX, RX
;;;163            outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<16)) | (0xa<<16));
000024  e3a0020b          MOV      r0,#0xb0000000
000028  e5900094          LDR      r0,[r0,#0x94]
00002c  e3c0080f          BIC      r0,r0,#0xf0000
000030  e380080a          ORR      r0,r0,#0xa0000
000034  e3a0120b          MOV      r1,#0xb0000000
000038  e5810094          STR      r0,[r1,#0x94]
;;;164            outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<20)) | (0xa<<20));
00003c  e3a0020b          MOV      r0,#0xb0000000
000040  e5900094          LDR      r0,[r0,#0x94]
000044  e3c0060f          BIC      r0,r0,#0xf00000
000048  e380060a          ORR      r0,r0,#0xa00000
00004c  e5810094          STR      r0,[r1,#0x94]
;;;165            outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<19)) | (0x1<<19));
000050  e3a0020b          MOV      r0,#0xb0000000
000054  e5900218          LDR      r0,[r0,#0x218]
000058  e3800702          ORR      r0,r0,#0x80000
00005c  e5810218          STR      r0,[r1,#0x218]
000060  ea000011          B        |L1.172|
                  |L1.100|
;;;166        }
;;;167        else
;;;168        {
;;;169            GPIO_SetBit(POWER_PORT, POWER_PIN); 
000064  e3a01b02          MOV      r1,#0x800
000068  e3a00c01          MOV      r0,#0x100
00006c  ebfffffe          BL       GPIO_SetBit
;;;170            //GPIO_ClrBit(POWER_PORT, POWER_PIN); 
;;;171            vTaskDelay(200/portTICK_RATE_MS);
000070  e3a00014          MOV      r0,#0x14
000074  ebfffffe          BL       vTaskDelay
;;;172            // GPE 12, 13 //TX, RX        
;;;173            outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<19)) | (0x0<<19));
000078  e3a0020b          MOV      r0,#0xb0000000
00007c  e5900218          LDR      r0,[r0,#0x218]
000080  e3c00702          BIC      r0,r0,#0x80000
000084  e3a0120b          MOV      r1,#0xb0000000
000088  e5810218          STR      r0,[r1,#0x218]
;;;174            
;;;175            outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<16)) | (0x0<<16));
00008c  e3a0020b          MOV      r0,#0xb0000000
000090  e5900094          LDR      r0,[r0,#0x94]
000094  e3c0080f          BIC      r0,r0,#0xf0000
000098  e5810094          STR      r0,[r1,#0x94]
;;;176            outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<20)) | (0x0<<20));
00009c  e3a0020b          MOV      r0,#0xb0000000
0000a0  e5900094          LDR      r0,[r0,#0x94]
0000a4  e3c0060f          BIC      r0,r0,#0xf00000
0000a8  e5810094          STR      r0,[r1,#0x94]
                  |L1.172|
;;;177            
;;;178        }
;;;179        //sysprintf("UART3SetPower [ %d ]!! exit\n", flag);
;;;180        return TRUE;
0000ac  e3a00001          MOV      r0,#1
;;;181    }
0000b0  e8bd8010          POP      {r4,pc}
;;;182    BOOL UART3SetRS232Power(BOOL flag)
                          ENDP

                  hwInit PROC
;;;48     /*-----------------------------------------*/
;;;49     static BOOL hwInit(UINT32 baudRate)
0000b4  e92d4070          PUSH     {r4-r6,lr}
;;;50     {
0000b8  e1a05000          MOV      r5,r0
;;;51         int retval;
;;;52         outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
0000bc  e3a0020b          MOV      r0,#0xb0000000
0000c0  e5900218          LDR      r0,[r0,#0x218]
0000c4  e3800008          ORR      r0,r0,#8
0000c8  e3a0120b          MOV      r1,#0xb0000000
0000cc  e5810218          STR      r0,[r1,#0x218]
;;;53         
;;;54         // GPE 12, 13 //TX, RX
;;;55         outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<16)) | (0xa<<16));
0000d0  e3a0020b          MOV      r0,#0xb0000000
0000d4  e5900094          LDR      r0,[r0,#0x94]
0000d8  e3c0080f          BIC      r0,r0,#0xf0000
0000dc  e380080a          ORR      r0,r0,#0xa0000
0000e0  e5810094          STR      r0,[r1,#0x94]
;;;56         outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<20)) | (0xa<<20));
0000e4  e3a0020b          MOV      r0,#0xb0000000
0000e8  e5900094          LDR      r0,[r0,#0x94]
0000ec  e3c0060f          BIC      r0,r0,#0xf00000
0000f0  e380060a          ORR      r0,r0,#0xa00000
0000f4  e5810094          STR      r0,[r1,#0x94]
;;;57         
;;;58         //Power pin GPE11
;;;59         outpw(REG_SYS_GPE_MFPH,(inpw(REG_SYS_GPE_MFPH) & ~(0xF<<12)) | (0x0<<12));
0000f8  e3a0020b          MOV      r0,#0xb0000000
0000fc  e5900094          LDR      r0,[r0,#0x94]
000100  e3c00a0f          BIC      r0,r0,#0xf000
000104  e5810094          STR      r0,[r1,#0x94]
;;;60         GPIO_OpenBit(POWER_PORT, POWER_PIN, DIR_OUTPUT, NO_PULL_UP);
000108  e3a03000          MOV      r3,#0
00010c  e3a02001          MOV      r2,#1
000110  e3a01b02          MOV      r1,#0x800
000114  e3a00c01          MOV      r0,#0x100
000118  ebfffffe          BL       GPIO_OpenBit
;;;61         if(OTAinitFlag == FALSE)
00011c  e59f0284          LDR      r0,|L1.936|
000120  e5d00000          LDRB     r0,[r0,#0]  ; OTAinitFlag
000124  e3500000          CMP      r0,#0
000128  1a000001          BNE      |L1.308|
;;;62             UART3SetPower(FALSE);
00012c  e3a00000          MOV      r0,#0
000130  ebfffffe          BL       UART3SetPower
                  |L1.308|
;;;63         #if(SUPPORT_HK_10_HW)
;;;64         //GPB0 extern select pin
;;;65         outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xF<<0)) | (0x0<<0));
000134  e3a0020b          MOV      r0,#0xb0000000
000138  e5900078          LDR      r0,[r0,#0x78]
00013c  e3c0000f          BIC      r0,r0,#0xf
000140  e3a0120b          MOV      r1,#0xb0000000
000144  e5810078          STR      r0,[r1,#0x78]
;;;66         GPIO_OpenBit(EXT_SEL_PORT, EXT_SEL_PIN, DIR_OUTPUT, NO_PULL_UP); 
000148  e3a03000          MOV      r3,#0
00014c  e3a02001          MOV      r2,#1
000150  e1a01002          MOV      r1,r2
000154  e3a00040          MOV      r0,#0x40
000158  ebfffffe          BL       GPIO_OpenBit
;;;67         //GPIO_ClrBit(EXT_SEL_PORT, EXT_SEL_PIN); 
;;;68         GPIO_SetBit(EXT_SEL_PORT, EXT_SEL_PIN); 
00015c  e3a01001          MOV      r1,#1
000160  e3a00040          MOV      r0,#0x40
000164  ebfffffe          BL       GPIO_SetBit
;;;69         #endif   
;;;70         
;;;71         /* configure UART */
;;;72         param.uFreq = 12000000;
000168  e59f023c          LDR      r0,|L1.940|
00016c  e59f123c          LDR      r1,|L1.944|
000170  e5810000          STR      r0,[r1,#0]  ; param
;;;73         param.uBaudRate = baudRate;
000174  e2810000          ADD      r0,r1,#0
000178  e5805004          STR      r5,[r0,#4]  ; param
;;;74         param.ucUartNo = UART3;
00017c  e3a00003          MOV      r0,#3
000180  e5c10008          STRB     r0,[r1,#8]  ; param
;;;75         param.ucDataBits = DATA_BITS_8;
000184  e5c10009          STRB     r0,[r1,#9]  ; param
;;;76         param.ucStopBits = STOP_BITS_1;
000188  e3a00000          MOV      r0,#0
00018c  e5c1000a          STRB     r0,[r1,#0xa]  ; param
;;;77         param.ucParity = PARITY_NONE;
000190  e5c1000b          STRB     r0,[r1,#0xb]  ; param
;;;78         param.ucRxTriggerLevel = UART_FCR_RFITL_1BYTE;
000194  e5c1000c          STRB     r0,[r1,#0xc]  ; param
;;;79         retval = uartOpen(&param);
000198  e2810000          ADD      r0,r1,#0
00019c  ebfffffe          BL       uartOpen
0001a0  e1a04000          MOV      r4,r0
;;;80         if(retval != 0)
0001a4  e3540000          CMP      r4,#0
0001a8  0a000003          BEQ      |L1.444|
;;;81         {
;;;82             sysprintf("hwInit Open UART error!\n");
0001ac  e28f0c02          ADR      r0,|L1.948|
0001b0  ebfffffe          BL       sysprintf
;;;83             return FALSE;
0001b4  e3a00000          MOV      r0,#0
                  |L1.440|
;;;84         }
;;;85     
;;;86         /* set TX interrupt mode */
;;;87         retval = uartIoctl(param.ucUartNo, UART_IOC_SETTXMODE, UARTPOLLMODE /*UARTINTMODE*/ , 0);
;;;88         //retval = uartIoctl(param.ucUartNo, UART_IOC_SETTXMODE, UARTINTMODE , 0);
;;;89         if (retval != 0) 
;;;90         {
;;;91             sysprintf("hwInit Set TX interrupt mode fail!\n");
;;;92             return FALSE;
;;;93         }
;;;94     
;;;95         /* set RX interrupt mode */
;;;96         retval = uartIoctl(param.ucUartNo, UART_IOC_SETRXMODE, UARTINTMODE, 0);
;;;97         if (retval != 0) 
;;;98         {
;;;99             sysprintf("hwInit Set RX interrupt mode fail!\n");
;;;100            return FALSE;
;;;101        }
;;;102    
;;;103        return TRUE;
;;;104    }
0001b8  e8bd8070          POP      {r4-r6,pc}
                  |L1.444|
0001bc  e59f11ec          LDR      r1,|L1.944|
0001c0  e5d10008          LDRB     r0,[r1,#8]            ;87  ; param
0001c4  e3a03000          MOV      r3,#0                 ;87
0001c8  e1a02003          MOV      r2,r3                 ;87
0001cc  e3a01001          MOV      r1,#1                 ;87
0001d0  ebfffffe          BL       uartIoctl
0001d4  e1a04000          MOV      r4,r0                 ;87
0001d8  e3540000          CMP      r4,#0                 ;89
0001dc  0a000003          BEQ      |L1.496|
0001e0  e28f0f7a          ADR      r0,|L1.976|
0001e4  ebfffffe          BL       sysprintf
0001e8  e3a00000          MOV      r0,#0                 ;92
0001ec  eafffff1          B        |L1.440|
                  |L1.496|
0001f0  e59f11b8          LDR      r1,|L1.944|
0001f4  e5d10008          LDRB     r0,[r1,#8]            ;96  ; param
0001f8  e3a03000          MOV      r3,#0                 ;96
0001fc  e3a02001          MOV      r2,#1                 ;96
000200  e3a01002          MOV      r1,#2                 ;96
000204  ebfffffe          BL       uartIoctl
000208  e1a04000          MOV      r4,r0                 ;96
00020c  e3540000          CMP      r4,#0                 ;97
000210  0a000003          BEQ      |L1.548|
000214  e28f0f76          ADR      r0,|L1.1012|
000218  ebfffffe          BL       sysprintf
00021c  e3a00000          MOV      r0,#0                 ;100
000220  eaffffe4          B        |L1.440|
                  |L1.548|
000224  e3a00001          MOV      r0,#1                 ;103
000228  eaffffe2          B        |L1.440|
;;;105    
                          ENDP

                  UART3DrvInit PROC
;;;108    /*-----------------------------------------*/
;;;109    BOOL UART3DrvInit(UINT32 baudRate)
00022c  e92d4070          PUSH     {r4-r6,lr}
;;;110    {
000230  e1a04000          MOV      r4,r0
;;;111        int retval;
;;;112        sysprintf("UART3DrvInit!!\n");
000234  e28f0f77          ADR      r0,|L1.1048|
000238  ebfffffe          BL       sysprintf
;;;113        baudRateTemp = baudRate;
00023c  e59f01e4          LDR      r0,|L1.1064|
000240  e5804000          STR      r4,[r0,#0]  ; baudRateTemp
;;;114        retval = hwInit(baudRate);
000244  e1a00004          MOV      r0,r4
000248  ebfffffe          BL       hwInit
00024c  e1a05000          MOV      r5,r0
;;;115        return retval;
000250  e1a00005          MOV      r0,r5
;;;116    }
000254  e8bd8070          POP      {r4-r6,pc}
;;;117    INT32 UART3Write(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART3Write PROC
000258  e92d4070          PUSH     {r4-r6,lr}
;;;118    {
00025c  e1a04000          MOV      r4,r0
000260  e1a05001          MOV      r5,r1
;;;119        INT32  reVal;
;;;120        reVal = uartWrite(param.ucUartNo, pucBuf, uLen);
000264  e59f1144          LDR      r1,|L1.944|
000268  e5d10008          LDRB     r0,[r1,#8]  ; param
00026c  e1a02005          MOV      r2,r5
000270  e1a01004          MOV      r1,r4
000274  ebfffffe          BL       uartWrite
000278  e1a06000          MOV      r6,r0
;;;121        /*
;;;122        terninalPrintf("UART3Write >= ");
;;;123        for(int i=0;i<uLen;i++)
;;;124            terninalPrintf("%02x ",*(pucBuf+i));
;;;125        terninalPrintf("\r\n");
;;;126        */
;;;127        return reVal;
00027c  e1a00006          MOV      r0,r6
;;;128    }
000280  e8bd8070          POP      {r4-r6,pc}
;;;129    INT32 UART3Read(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART3Read PROC
000284  e92d4070          PUSH     {r4-r6,lr}
;;;130    {
000288  e1a04000          MOV      r4,r0
00028c  e1a05001          MOV      r5,r1
;;;131        /*
;;;132        INT32 temp;
;;;133        memset(pucBuf,0x00,uLen);
;;;134        temp = uartRead(param.ucUartNo, pucBuf, uLen);   
;;;135        if(temp > 0)
;;;136        {            
;;;137            terninalPrintf("UART3Read <= ");
;;;138            int counter = 0; 
;;;139            for(int i=0;i<temp;i++)
;;;140                terninalPrintf("%02x ",pucBuf[i]);    
;;;141            terninalPrintf("\r\n");   
;;;142            return temp;  
;;;143        }
;;;144        */
;;;145        return uartRead(param.ucUartNo, pucBuf, uLen);
000290  e59f1118          LDR      r1,|L1.944|
000294  e5d10008          LDRB     r0,[r1,#8]  ; param
000298  e1a02005          MOV      r2,r5
00029c  e1a01004          MOV      r1,r4
0002a0  ebfffffe          BL       uartRead
;;;146    }
0002a4  e8bd8070          POP      {r4-r6,pc}
;;;147    BaseType_t UART3ReadWait(TickType_t time)
                          ENDP

                  UART3ReadWait PROC
0002a8  e92d4010          PUSH     {r4,lr}
;;;148    {
0002ac  e1a04000          MOV      r4,r0
;;;149        return  uartWaitReadEvent(param.ucUartNo, time);
0002b0  e59f10f8          LDR      r1,|L1.944|
0002b4  e5d10008          LDRB     r0,[r1,#8]  ; param
0002b8  e1a01004          MOV      r1,r4
0002bc  ebfffffe          BL       uartWaitReadEvent
;;;150    }
0002c0  e8bd8010          POP      {r4,pc}
;;;151     
                          ENDP

                  UART3SetRS232Power PROC
;;;181    }
;;;182    BOOL UART3SetRS232Power(BOOL flag)
0002c4  e1a01000          MOV      r1,r0
;;;183    {
;;;184        return FALSE;
0002c8  e3a00000          MOV      r0,#0
;;;185    }
0002cc  e12fff1e          BX       lr
;;;186    INT UART3Ioctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
                          ENDP

                  UART3Ioctl PROC
0002d0  e92d4070          PUSH     {r4-r6,lr}
;;;187    {
0002d4  e1a04000          MOV      r4,r0
0002d8  e1a05001          MOV      r5,r1
0002dc  e1a06002          MOV      r6,r2
;;;188        if(uCmd == 80)
0002e0  e3540050          CMP      r4,#0x50
0002e4  1a00000a          BNE      |L1.788|
;;;189        {
;;;190            if(uArg0 == 1)
0002e8  e3550001          CMP      r5,#1
0002ec  1a000003          BNE      |L1.768|
;;;191                OTAinitFlag = TRUE;
0002f0  e3a00001          MOV      r0,#1
0002f4  e59f10ac          LDR      r1,|L1.936|
0002f8  e5c10000          STRB     r0,[r1,#0]  ; OTAinitFlag
0002fc  ea000002          B        |L1.780|
                  |L1.768|
;;;192            else 
;;;193                OTAinitFlag = FALSE;
000300  e3a00000          MOV      r0,#0
000304  e59f109c          LDR      r1,|L1.936|
000308  e5c10000          STRB     r0,[r1,#0]  ; OTAinitFlag
                  |L1.780|
;;;194            return 0;
00030c  e3a00000          MOV      r0,#0
                  |L1.784|
;;;195        }
;;;196        return uartIoctl(param.ucUartNo, uCmd, uArg0, uArg1);
;;;197    }
000310  e8bd8070          POP      {r4-r6,pc}
                  |L1.788|
000314  e59f1094          LDR      r1,|L1.944|
000318  e5d10008          LDRB     r0,[r1,#8]            ;196  ; param
00031c  e1a03006          MOV      r3,r6                 ;196
000320  e1a02005          MOV      r2,r5                 ;196
000324  e1a01004          MOV      r1,r4                 ;196
000328  ebfffffe          BL       uartIoctl
00032c  eafffff7          B        |L1.784|
;;;198    
                          ENDP

                  UART3SetRTS PROC
;;;199    void UART3SetRTS(BOOL flag)
000330  e92d4010          PUSH     {r4,lr}
;;;200    {
000334  e1a04000          MOV      r4,r0
;;;201        if(flag)
000338  e3540000          CMP      r4,#0
00033c  0a000006          BEQ      |L1.860|
;;;202            uartIoctl(param.ucUartNo, UART_IOC_SETRTSSIGNAL, UART_RTS_LOW, 0);
000340  e59f1068          LDR      r1,|L1.944|
000344  e5d10008          LDRB     r0,[r1,#8]  ; param
000348  e3a03000          MOV      r3,#0
00034c  e1a02003          MOV      r2,r3
000350  e3a01010          MOV      r1,#0x10
000354  ebfffffe          BL       uartIoctl
000358  ea000005          B        |L1.884|
                  |L1.860|
;;;203        else
;;;204            uartIoctl(param.ucUartNo, UART_IOC_SETRTSSIGNAL, UART_RTS_HIGH, 0);
00035c  e59f104c          LDR      r1,|L1.944|
000360  e5d10008          LDRB     r0,[r1,#8]  ; param
000364  e3a03000          MOV      r3,#0
000368  e3a02001          MOV      r2,#1
00036c  e3a01010          MOV      r1,#0x10
000370  ebfffffe          BL       uartIoctl
                  |L1.884|
;;;205    }
000374  e8bd8010          POP      {r4,pc}
;;;206    
                          ENDP

                  UART3FlushBuffer PROC
;;;207    void UART3FlushBuffer(void)
000378  e92d4010          PUSH     {r4,lr}
;;;208    {
;;;209        //sysprintf(" --> CardFlushBuffer\n");
;;;210        //if (pUartInterface->ioctlFunc(UART_IOC_FLUSH_TX_BUFFER, 0, 0) != 0) {
;;;211       //     sysprintf("Set TX Flush fail!\n");
;;;212        //    return;
;;;213        //}
;;;214        if (UART3Ioctl(UART_IOC_FLUSH_RX_BUFFER, 0, 0) != 0) {
00037c  e3a02000          MOV      r2,#0
000380  e1a01002          MOV      r1,r2
000384  e3a00019          MOV      r0,#0x19
000388  ebfffffe          BL       UART3Ioctl
00038c  e3500000          CMP      r0,#0
000390  0a000002          BEQ      |L1.928|
;;;215            sysprintf("Set RX Flush fail!\n");
000394  e28f0090          ADR      r0,|L1.1068|
000398  ebfffffe          BL       sysprintf
                  |L1.924|
;;;216            return;
;;;217        }
;;;218    }
00039c  e8bd8010          POP      {r4,pc}
                  |L1.928|
0003a0  e1a00000          MOV      r0,r0
0003a4  eafffffc          B        |L1.924|
                  |L1.936|
                          DCD      OTAinitFlag
                  |L1.940|
                          DCD      0x00b71b00
                  |L1.944|
                          DCD      param
                  |L1.948|
0003b4  6877496e          DCB      "hwInit Open UART error!\n",0
0003b8  6974204f
0003bc  70656e20
0003c0  55415254
0003c4  20657272
0003c8  6f72210a
0003cc  00      
0003cd  00                DCB      0
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L1.976|
0003d0  6877496e          DCB      "hwInit Set TX interrupt mode fail!\n",0
0003d4  69742053
0003d8  65742054
0003dc  5820696e
0003e0  74657272
0003e4  75707420
0003e8  6d6f6465
0003ec  20666169
0003f0  6c210a00
                  |L1.1012|
0003f4  6877496e          DCB      "hwInit Set RX interrupt mode fail!\n",0
0003f8  69742053
0003fc  65742052
000400  5820696e
000404  74657272
000408  75707420
00040c  6d6f6465
000410  20666169
000414  6c210a00
                  |L1.1048|
000418  55415254          DCB      "UART3DrvInit!!\n",0
00041c  33447276
000420  496e6974
000424  21210a00
                  |L1.1064|
                          DCD      baudRateTemp
                  |L1.1068|
00042c  53657420          DCB      "Set RX Flush fail!\n",0
000430  52582046
000434  6c757368
000438  20666169
00043c  6c210a00
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  param
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  baudRateTemp
                          DCD      0x0001c200
                  OTAinitFlag
000004  00                DCB      0x00
