L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\nand_ids.c"
N/*
N *  drivers/mtd/nandids.c
N *
N *  Copyright (C) 2002 Thomas Gleixner (tglx@linutronix.de)
N *
N * This program is free software; you can redistribute it and/or modify
N * it under the terms of the GNU General Public License version 2 as
N * published by the Free Software Foundation.
N *
N */
N
N#include "common.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\common.h" 1
N/*
N * (C) Copyright 2000-2009
N * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
N *
N * See file CREDITS for list of people who contributed to this
N * project.
N *
N * This program is free software; you can redistribute it and/or
N * modify it under the terms of the GNU General Public License as
N * published by the Free Software Foundation; either version 2 of
N * the License, or (at your option) any later version.
N *
N * This program is distributed in the hope that it will be useful,
N * but WITHOUT ANY WARRANTY; without even the implied warranty of
N * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
N * GNU General Public License for more details.
N *
N * You should have received a copy of the GNU General Public License
N * along with this program; if not, write to the Free Software
N * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
N * MA 02111-1307 USA
N */
N#if 0
S
S#ifndef __COMMON_H_
S#define __COMMON_H_	1
S
S#undef	_LINUX_CONFIG_H
S#define _LINUX_CONFIG_H 1	/* avoid reading Linux autoconf.h file	*/
S
S#ifndef __ASSEMBLY__		/* put C only stuff in this section */
S
Stypedef unsigned char		uchar;
Stypedef volatile unsigned long	vu_long;
Stypedef volatile unsigned short vu_short;
Stypedef volatile unsigned char	vu_char;
S
S#include "config.h"
S//#include <asm-offsets.h>
S#include <linux/bitops.h>
S#include <linux/types.h>
S#include <linux/string.h>
S#include <linux/stringify.h>
S#include <asm/ptrace.h>
S#include <stdarg.h>
S#if defined(CONFIG_PCI) && defined(CONFIG_4xx)
S#include <pci.h>
S#endif
S#if defined(CONFIG_8xx)
S#include <asm/8xx_immap.h>
S#if defined(CONFIG_MPC852)	|| defined(CONFIG_MPC852T)	|| \
S    defined(CONFIG_MPC859)	|| defined(CONFIG_MPC859T)	|| \
S    defined(CONFIG_MPC859DSL)	|| \
S    defined(CONFIG_MPC866)	|| defined(CONFIG_MPC866T)	|| \
S    defined(CONFIG_MPC866P)
X#if defined(CONFIG_MPC852)	|| defined(CONFIG_MPC852T)	||     defined(CONFIG_MPC859)	|| defined(CONFIG_MPC859T)	||     defined(CONFIG_MPC859DSL)	||     defined(CONFIG_MPC866)	|| defined(CONFIG_MPC866T)	||     defined(CONFIG_MPC866P)
S# define CONFIG_MPC866_FAMILY 1
S#elif defined(CONFIG_MPC870) \
S   || defined(CONFIG_MPC875) \
S   || defined(CONFIG_MPC880) \
S   || defined(CONFIG_MPC885)
X#elif defined(CONFIG_MPC870)    || defined(CONFIG_MPC875)    || defined(CONFIG_MPC880)    || defined(CONFIG_MPC885)
S# define CONFIG_MPC885_FAMILY   1
S#endif
S#if   defined(CONFIG_MPC860)	   \
S   || defined(CONFIG_MPC860T)	   \
S   || defined(CONFIG_MPC866_FAMILY) \
S   || defined(CONFIG_MPC885_FAMILY)
X#if   defined(CONFIG_MPC860)	      || defined(CONFIG_MPC860T)	      || defined(CONFIG_MPC866_FAMILY)    || defined(CONFIG_MPC885_FAMILY)
S# define CONFIG_MPC86x 1
S#endif
S#elif defined(CONFIG_5xx)
S#include <asm/5xx_immap.h>
S#elif defined(CONFIG_MPC5xxx)
S#include <mpc5xxx.h>
S#elif defined(CONFIG_MPC512X)
S#include <asm/immap_512x.h>
S#elif defined(CONFIG_MPC8220)
S#include <asm/immap_8220.h>
S#elif defined(CONFIG_8260)
S#if   defined(CONFIG_MPC8247) \
S   || defined(CONFIG_MPC8248) \
S   || defined(CONFIG_MPC8271) \
S   || defined(CONFIG_MPC8272)
X#if   defined(CONFIG_MPC8247)    || defined(CONFIG_MPC8248)    || defined(CONFIG_MPC8271)    || defined(CONFIG_MPC8272)
S#define CONFIG_MPC8272_FAMILY	1
S#endif
S#if defined(CONFIG_MPC8272_FAMILY)
S#define CONFIG_MPC8260	1
S#endif
S#include <asm/immap_8260.h>
S#endif
S#ifdef CONFIG_MPC86xx
S#include <mpc86xx.h>
S#include <asm/immap_86xx.h>
S#endif
S#ifdef CONFIG_MPC85xx
S#include <mpc85xx.h>
S#include <asm/immap_85xx.h>
S#endif
S#ifdef CONFIG_MPC83xx
S#include <mpc83xx.h>
S#include <asm/immap_83xx.h>
S#endif
S#ifdef	CONFIG_4xx
S#include <asm/ppc4xx.h>
S#endif
S#ifdef CONFIG_HYMOD
S#include <board/hymod/hymod.h>
S#endif
S#ifdef CONFIG_ARM
S#define asmlinkage	/* nothing */
S#endif
S#ifdef CONFIG_BLACKFIN
S#include <asm/blackfin.h>
S#endif
S#ifdef CONFIG_SOC_DA8XX
S#include <asm/arch/hardware.h>
S#endif
S
S#include "part.h"
S#include "flash.h"
S#include "image.h"
S
S#ifdef DEBUG
S#define _DEBUG	1
S#else
S#define _DEBUG	0
S#endif
S
S/*
S * Output a debug text when condition "cond" is met. The "cond" should be
S * computed by a preprocessor in the best case, allowing for the best
S * optimization.
S */
S#define debug_cond(cond, fmt, args...)		\
S	do {					\
S		if (cond)			\
S			sysprintf(fmt, ##args);	\
S	} while (0)
X#define debug_cond(cond, fmt, args...)			do {							if (cond)						sysprintf(fmt, ##args);		} while (0)
S
S#define debug(fmt, args...)			\
S	debug_cond(_DEBUG, fmt, ##args)
X#define debug(fmt, args...)				debug_cond(_DEBUG, fmt, ##args)
S
S/*
S * An assertion is run-time check done in debug mode only. If DEBUG is not
S * defined then it is skipped. If DEBUG is defined and the assertion fails,
S * then it calls panic*( which may or may not reset/halt U-Boot (see
S * CONFIG_PANIC_HANG), It is hoped that all failing assertions are found
S * before release, and after release it is hoped that they don't matter. But
S * in any case these failing assertions cannot be fixed with a reset (which
S * may just do the same assertion again).
S */
Svoid __assert_fail(const char *assertion, const char *file, unsigned line,
S		   const char *function);
S#define assert(x) \
S	({ if (!(x) && _DEBUG) \
S		__assert_fail(#x, __FILE__, __LINE__, __func__); })
X#define assert(x) 	({ if (!(x) && _DEBUG) 		__assert_fail(#x, __FILE__, __LINE__, __func__); })
S
S#define error(fmt, args...) do {					\
S		sysprintf("ERROR: " fmt "\nat %s:%d/%s()\n",		\
S			##args, __FILE__, __LINE__, __func__);		\
S} while (0)
X#define error(fmt, args...) do {							sysprintf("ERROR: " fmt "\nat %s:%d/%s()\n",					##args, __FILE__, __LINE__, __func__);		} while (0)
S
S#ifndef BUG
S#define BUG() do { \
S	sysprintf("BUG: failure at %s:%d/%s()!\n", __FILE__, __LINE__, __FUNCTION__); \
S	panic("BUG!"); \
S} while (0)
X#define BUG() do { 	sysprintf("BUG: failure at %s:%d/%s()!\n", __FILE__, __LINE__, __FUNCTION__); 	panic("BUG!"); } while (0)
S#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
S#endif /* BUG */
S
S/* Force a compilation error if condition is true */
S#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
S
Stypedef void (interrupt_handler_t)(void *);
S
S#include <asm/u-boot.h> /* boot information for Linux kernel */
S#include <asm/global_data.h>	/* global data used for startup functions */
S
S/*
S * enable common handling for all TQM8xxL/M boards:
S * - CONFIG_TQM8xxM will be defined for all TQM8xxM boards
S * - CONFIG_TQM8xxL will be defined for all TQM8xxL _and_ TQM8xxM boards
S *                  and for the TQM885D board
S */
S#if defined(CONFIG_TQM823M) || defined(CONFIG_TQM850M) || \
S    defined(CONFIG_TQM855M) || defined(CONFIG_TQM860M) || \
S    defined(CONFIG_TQM862M) || defined(CONFIG_TQM866M)
X#if defined(CONFIG_TQM823M) || defined(CONFIG_TQM850M) ||     defined(CONFIG_TQM855M) || defined(CONFIG_TQM860M) ||     defined(CONFIG_TQM862M) || defined(CONFIG_TQM866M)
S# ifndef CONFIG_TQM8xxM
S#  define CONFIG_TQM8xxM
S# endif
S#endif
S#if defined(CONFIG_TQM823L) || defined(CONFIG_TQM850L) || \
S    defined(CONFIG_TQM855L) || defined(CONFIG_TQM860L) || \
S    defined(CONFIG_TQM862L) || defined(CONFIG_TQM8xxM) || \
S    defined(CONFIG_TQM885D)
X#if defined(CONFIG_TQM823L) || defined(CONFIG_TQM850L) ||     defined(CONFIG_TQM855L) || defined(CONFIG_TQM860L) ||     defined(CONFIG_TQM862L) || defined(CONFIG_TQM8xxM) ||     defined(CONFIG_TQM885D)
S# ifndef CONFIG_TQM8xxL
S#  define CONFIG_TQM8xxL
S# endif
S#endif
S
S/*
S * General Purpose Utilities
S */
S#define min(X, Y)				\
S	({ typeof (X) __x = (X);		\
S		typeof (Y) __y = (Y);		\
S		(__x < __y) ? __x : __y; })
X#define min(X, Y)					({ typeof (X) __x = (X);				typeof (Y) __y = (Y);				(__x < __y) ? __x : __y; })
S
S#define max(X, Y)				\
S	({ typeof (X) __x = (X);		\
S		typeof (Y) __y = (Y);		\
S		(__x > __y) ? __x : __y; })
X#define max(X, Y)					({ typeof (X) __x = (X);				typeof (Y) __y = (Y);				(__x > __y) ? __x : __y; })
S
S#define MIN(x, y)  min(x, y)
S#define MAX(x, y)  max(x, y)
S
S/*
S * Return the absolute value of a number.
S *
S * This handles unsigned and signed longs, ints, shorts and chars.  For all
S * input types abs() returns a signed long.
S *
S * For 64-bit types, use abs64()
S */
S#define abs(x) ({						\
S		long ret;					\
S		if (sizeof(x) == sizeof(long)) {		\
S			long __x = (x);				\
S			ret = (__x < 0) ? -__x : __x;		\
S		} else {					\
S			int __x = (x);				\
S			ret = (__x < 0) ? -__x : __x;		\
S		}						\
S		ret;						\
S	})
X#define abs(x) ({								long ret;							if (sizeof(x) == sizeof(long)) {					long __x = (x);							ret = (__x < 0) ? -__x : __x;				} else {								int __x = (x);							ret = (__x < 0) ? -__x : __x;				}								ret;							})
S
S#define abs64(x) ({				\
S		s64 __x = (x);			\
S		(__x < 0) ? -__x : __x;		\
S	})
X#define abs64(x) ({						s64 __x = (x);					(__x < 0) ? -__x : __x;			})
S
S#if defined(CONFIG_ENV_IS_EMBEDDED)
S#define TOTAL_MALLOC_LEN	CONFIG_SYS_MALLOC_LEN
S#elif ( ((CONFIG_ENV_ADDR+CONFIG_ENV_SIZE) < CONFIG_SYS_MONITOR_BASE) || \
S	(CONFIG_ENV_ADDR >= (CONFIG_SYS_MONITOR_BASE + CONFIG_SYS_MONITOR_LEN)) ) || \
S      defined(CONFIG_ENV_IS_IN_NVRAM)
X#elif ( ((CONFIG_ENV_ADDR+CONFIG_ENV_SIZE) < CONFIG_SYS_MONITOR_BASE) || 	(CONFIG_ENV_ADDR >= (CONFIG_SYS_MONITOR_BASE + CONFIG_SYS_MONITOR_LEN)) ) ||       defined(CONFIG_ENV_IS_IN_NVRAM)
S#define	TOTAL_MALLOC_LEN	(CONFIG_SYS_MALLOC_LEN + CONFIG_ENV_SIZE)
S#else
S#define	TOTAL_MALLOC_LEN	CONFIG_SYS_MALLOC_LEN
S#endif
S
S/**
S * container_of - cast a member of a structure out to the containing structure
S * @ptr:	the pointer to the member.
S * @type:	the type of the container struct this is embedded in.
S * @member:	the name of the member within the struct.
S *
S */
S#define container_of(ptr, type, member) ({			\
S	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
S	(type *)( (char *)__mptr - offsetof(type,member) );})
X#define container_of(ptr, type, member) ({				const typeof( ((type *)0)->member ) *__mptr = (ptr);		(type *)( (char *)__mptr - offsetof(type,member) );})
S
S/*
S * Function Prototypes
S */
S
Svoid	hang		(void) __attribute__ ((noreturn));
S
Sint	timer_init(void);
Sint	cpu_init(void);
S
S/* */
S// phys_size_t initdram (int);
Sint	display_options (void);
Svoid	print_size(unsigned long long, const char *);
Sint print_buffer(ulong addr, const void *data, uint width, uint count,
S		 uint linelen);
S
S/* common/main.c */
Svoid	main_loop	(void);
Sint run_command(const char *cmd, int flag);
S
S/**
S * Run a list of commands separated by ; or even \0
S *
S * Note that if 'len' is not -1, then the command does not need to be nul
S * terminated, Memory will be allocated for the command in that case.
S *
S * @param cmd	List of commands to run, each separated bu semicolon
S * @param len	Length of commands excluding terminator if known (-1 if not)
S * @param flag	Execution flags (CMD_FLAG_...)
S * @return 0 on success, or != 0 on error.
S */
Sint run_command_list(const char *cmd, int len, int flag);
Sint	readline	(const char *const prompt);
Sint	readline_into_buffer(const char *const prompt, char *buffer,
S			int timeout);
Sint	parse_line (char *, char *[]);
Svoid	init_cmd_timeout(void);
Svoid	reset_cmd_timeout(void);
S#ifdef CONFIG_MENU
Sint	abortboot(int bootdelay);
S#endif
Sextern char console_buffer[];
S
S/* arch/$(ARCH)/lib/board.c */
S// void	board_init_f(ulong);
S// void	board_init_r  (gd_t *, ulong) __attribute__ ((noreturn));
S// int	checkboard    (void);
S// int	checkflash    (void);
S// int	checkdram     (void);
S// int	last_stage_init(void);
S// extern ulong monitor_flash_len;
S// int mac_read_from_eeprom(void);
S// extern u8 _binary_dt_dtb_start[];	/* embedded device tree blob */
S// int set_cpu_clk_info(void);
S// int print_cpuinfo(void);
S// int update_flash_size(int flash_size);
S
S/**
S * Show the DRAM size in a board-specific way
S *
S * This is used by boards to display DRAM information in their own way.
S *
S * @param size	Size of DRAM (which should be displayed along with other info)
S */
Svoid board_show_dram(ulong size);
S
S/* common/flash.c */
Svoid flash_perror (int);
S
S/* common/cmd_source.c */
Sint	source (ulong addr, const char *fit_uname);
S
Sextern ulong load_addr;		/* Default Load Address */
Sextern ulong save_addr;		/* Default Save Address */
Sextern ulong save_size;		/* Default Save Size */
S
S/* common/cmd_doc.c */
S// void	doc_probe(unsigned long physadr);
S
S/* common/cmd_net.c */
S// int do_tftpb(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[]);
S
S/* common/cmd_fat.c */
S// int do_fat_fsload(cmd_tbl_t *, int, int, char * const []);
S
S/* common/cmd_ext2.c */
S// int do_ext2load(cmd_tbl_t *, int, int, char * const []);
S
S/* common/cmd_nvedit.c */
S// int	env_init     (void);
S// void	env_relocate (void);
S// int	envmatch     (uchar *, int);
S// char	*getenv	     (const char *);
S// int	getenv_f     (const char *name, char *buf, unsigned len);
S// ulong getenv_ulong(const char *name, int base, ulong default_val);
S/*
S * Read an environment variable as a boolean
S * Return -1 if variable does not exist (default to true)
S */
Sint getenv_yesno(const char *var);
Sint	saveenv	     (void);
Sint	setenv	     (const char *, const char *);
Sint setenv_ulong(const char *varname, ulong value);
Sint setenv_hex(const char *varname, ulong value);
S/**
S * setenv_addr - Set an environment variable to an address in hex
S *
S * @varname:	Environmet variable to set
S * @addr:	Value to set it to
S * @return 0 if ok, 1 on error
S */
Sstatic __inline int setenv_addr(const char *varname, const void *addr)
S{
S	return setenv_hex(varname, (ulong)addr);
S}
S
S#ifdef CONFIG_ARM
S# include <asm/mach-types.h>
S# include <asm/setup.h>
S# include <asm/u-boot-arm.h>	/* ARM version to be fixed! */
S#endif /* CONFIG_ARM */
S#ifdef CONFIG_X86		/* x86 version to be fixed! */
S# include <asm/u-boot-x86.h>
S#endif /* CONFIG_X86 */
S#ifdef CONFIG_SANDBOX
S# include <asm/u-boot-sandbox.h>	/* TODO(sjg) what needs to be fixed? */
S#endif
S#ifdef CONFIG_NDS32
S# include <asm/mach-types.h>
S# include <asm/u-boot-nds32.h>
S#endif /* CONFIG_NDS32 */
S#ifdef CONFIG_MIPS
S# include <asm/u-boot-mips.h>
S#endif /* CONFIG_MIPS */
S
S#ifdef CONFIG_AUTO_COMPLETE
Sint env_complete(char *var, int maxv, char *cmdv[], int maxsz, char *buf);
S#endif
Sint get_env_id (void);
S
Svoid	pci_init      (void);
Svoid	pci_init_board(void);
Svoid	pciinfo	      (int, int);
S
S#if defined(CONFIG_PCI) && defined(CONFIG_4xx)
S    int	   pci_pre_init	       (struct pci_controller *);
S    int	   is_pci_host	       (struct pci_controller *);
S#endif
S
S#if defined(CONFIG_PCI) && (defined(CONFIG_440) || defined(CONFIG_405EX))
S#   if defined(CONFIG_SYS_PCI_TARGET_INIT)
S	void	pci_target_init	     (struct pci_controller *);
S#   endif
S#   if defined(CONFIG_SYS_PCI_MASTER_INIT)
S	void	pci_master_init	     (struct pci_controller *);
S#   endif
S#if defined(CONFIG_440SPE) || \
S    defined(CONFIG_460EX) || defined(CONFIG_460GT) || \
S    defined(CONFIG_405EX)
X#if defined(CONFIG_440SPE) ||     defined(CONFIG_460EX) || defined(CONFIG_460GT) ||     defined(CONFIG_405EX)
S   void pcie_setup_hoses(int busno);
S#endif
S#endif
S
Sint	misc_init_f   (void);
Sint	misc_init_r   (void);
S
S/* common/exports.c */
Svoid	jumptable_init(void);
S
S/* common/kallsysm.c */
Sconst char *symbol_lookup(unsigned long addr, unsigned long *caddr);
S
S/* api/api.c */
Svoid	api_init (void);
S
S/* common/memsize.c */
Slong	get_ram_size  (long *, long);
S
S/* $(BOARD)/$(BOARD).c */
Svoid	reset_phy     (void);
Svoid	fdc_hw_init   (void);
S
S/* $(BOARD)/eeprom.c */
Svoid eeprom_init  (void);
S#ifndef CONFIG_SPI
Sint  eeprom_probe (unsigned dev_addr, unsigned offset);
S#endif
Sint  eeprom_read  (unsigned dev_addr, unsigned offset, uchar *buffer, unsigned cnt);
Sint  eeprom_write (unsigned dev_addr, unsigned offset, uchar *buffer, unsigned cnt);
S#ifdef CONFIG_LWMON
Sextern uchar pic_read  (uchar reg);
Sextern void  pic_write (uchar reg, uchar val);
S#endif
S
S/*
S * Set this up regardless of board
S * type, to prevent errors.
S */
S#if defined(CONFIG_SPI) || !defined(CONFIG_SYS_I2C_EEPROM_ADDR)
S# define CONFIG_SYS_DEF_EEPROM_ADDR 0
S#else
S#if !defined(CONFIG_ENV_EEPROM_IS_ON_I2C)
S# define CONFIG_SYS_DEF_EEPROM_ADDR CONFIG_SYS_I2C_EEPROM_ADDR
S#endif
S#endif /* CONFIG_SPI || !defined(CONFIG_SYS_I2C_EEPROM_ADDR) */
S
S#if defined(CONFIG_SPI)
Sextern void spi_init_f (void);
Sextern void spi_init_r (void);
Sextern ssize_t spi_read	 (uchar *, int, uchar *, int);
Sextern ssize_t spi_write (uchar *, int, uchar *, int);
S#endif
S
S#ifdef CONFIG_RPXCLASSIC
Svoid rpxclassic_init (void);
S#endif
S
Svoid rpxlite_init (void);
S
S#ifdef CONFIG_MBX
S/* $(BOARD)/mbx8xx.c */
Svoid	mbx_init (void);
Svoid	board_serial_init (void);
Svoid	board_ether_init (void);
S#endif
S
S#ifdef CONFIG_HERMES
S/* $(BOARD)/hermes.c */
Svoid hermes_start_lxt980 (int speed);
S#endif
S
S#ifdef CONFIG_EVB64260
Svoid  evb64260_init(void);
Svoid  debug_led(int, int);
Svoid  display_mem_map(void);
Svoid  perform_soft_reset(void);
S#endif
S
S/* $(BOARD)/$(BOARD).c */
Sint board_early_init_f (void);
Sint board_late_init (void);
Sint board_postclk_init (void); /* after clocks/timebase, before env/serial */
Sint board_early_init_r (void);
Svoid board_poweroff (void);
S
S#if defined(CONFIG_SYS_DRAM_TEST)
Sint testdram(void);
S#endif /* CONFIG_SYS_DRAM_TEST */
S
S/* $(CPU)/start.S */
S#if defined(CONFIG_5xx) || \
S    defined(CONFIG_8xx)
X#if defined(CONFIG_5xx) ||     defined(CONFIG_8xx)
Suint	get_immr      (uint);
S#endif
Suint	get_pir	      (void);
S#if defined(CONFIG_MPC5xxx)
Suint	get_svr       (void);
S#endif
Suint	get_pvr	      (void);
Suint	get_svr	      (void);
Suint	rd_ic_cst     (void);
Svoid	wr_ic_cst     (uint);
Svoid	wr_ic_adr     (uint);
Suint	rd_dc_cst     (void);
Svoid	wr_dc_cst     (uint);
Svoid	wr_dc_adr     (uint);
Sint	icache_status (void);
Svoid	icache_enable (void);
Svoid	icache_disable(void);
Sint	dcache_status (void);
Svoid	dcache_enable (void);
Svoid	dcache_disable(void);
Svoid	mmu_disable(void);
Svoid	relocate_code (ulong, gd_t *, ulong) __attribute__ ((noreturn));
Sulong	get_endaddr   (void);
Svoid	trap_init     (ulong);
S#if defined (CONFIG_4xx)	|| \
S    defined (CONFIG_MPC5xxx)	|| \
S    defined (CONFIG_74xx_7xx)	|| \
S    defined (CONFIG_74x)	|| \
S    defined (CONFIG_75x)	|| \
S    defined (CONFIG_74xx)	|| \
S    defined (CONFIG_MPC8220)	|| \
S    defined (CONFIG_MPC85xx)	|| \
S    defined (CONFIG_MPC86xx)	|| \
S    defined (CONFIG_MPC83xx)
X#if defined (CONFIG_4xx)	||     defined (CONFIG_MPC5xxx)	||     defined (CONFIG_74xx_7xx)	||     defined (CONFIG_74x)	||     defined (CONFIG_75x)	||     defined (CONFIG_74xx)	||     defined (CONFIG_MPC8220)	||     defined (CONFIG_MPC85xx)	||     defined (CONFIG_MPC86xx)	||     defined (CONFIG_MPC83xx)
Sunsigned char	in8(unsigned int);
Svoid		out8(unsigned int, unsigned char);
Sunsigned short	in16(unsigned int);
Sunsigned short	in16r(unsigned int);
Svoid		out16(unsigned int, unsigned short value);
Svoid		out16r(unsigned int, unsigned short value);
Sunsigned long	in32(unsigned int);
Sunsigned long	in32r(unsigned int);
Svoid		out32(unsigned int, unsigned long value);
Svoid		out32r(unsigned int, unsigned long value);
Svoid		ppcDcbf(unsigned long value);
Svoid		ppcDcbi(unsigned long value);
Svoid		ppcSync(void);
Svoid		ppcDcbz(unsigned long value);
S#endif
S#if defined (CONFIG_MICROBLAZE)
Sunsigned short	in16(unsigned int);
Svoid		out16(unsigned int, unsigned short value);
S#endif
S
S#if defined (CONFIG_MPC83xx)
Svoid		ppcDWload(unsigned int *addr, unsigned int *ret);
Svoid		ppcDWstore(unsigned int *addr, unsigned int *value);
Svoid disable_addr_trans(void);
Svoid enable_addr_trans(void);
S#if defined(CONFIG_DDR_ECC) && !defined(CONFIG_ECC_INIT_VIA_DDRCONTROLLER)
Svoid ddr_enable_ecc(unsigned int dram_size);
S#endif
S#endif
S
S/* $(CPU)/cpu.c */
Sstatic __inline int cpumask_next(int cpu, unsigned int mask)
S{
S	for (cpu++; !((1 << cpu) & mask); cpu++)
S		;
S
S	return cpu;
S}
S
S#define for_each_cpu(iter, cpu, num_cpus, mask) \
S	for (iter = 0, cpu = cpumask_next(-1, mask); \
S		iter < num_cpus; \
S		iter++, cpu = cpumask_next(cpu, mask)) \
S
X#define for_each_cpu(iter, cpu, num_cpus, mask) 	for (iter = 0, cpu = cpumask_next(-1, mask); 		iter < num_cpus; 		iter++, cpu = cpumask_next(cpu, mask)) 
Sint	cpu_numcores  (void);
Su32	cpu_mask      (void);
Sint	is_core_valid (unsigned int);
Sint	probecpu      (void);
Sint	checkcpu      (void);
Sint	checkicache   (void);
Sint	checkdcache   (void);
Svoid	upmconfig     (unsigned int, unsigned int *, unsigned int);
Sulong	get_tbclk     (void);
Svoid	reset_cpu     (ulong addr);
S#if defined (CONFIG_OF_LIBFDT) && defined (CONFIG_OF_BOARD_SETUP)
Svoid ft_cpu_setup(void *blob, bd_t *bd);
S#ifdef CONFIG_PCI
Svoid ft_pci_setup(void *blob, bd_t *bd);
S#endif
S#endif
S
S
S/* $(CPU)/serial.c */
Sint	serial_init   (void);
Svoid	serial_setbrg (void);
Svoid	serial_putc   (const char);
Svoid	serial_putc_raw(const char);
Svoid	serial_puts   (const char *);
Sint	serial_getc   (void);
Sint	serial_tstc   (void);
S
Svoid	_serial_setbrg (const int);
Svoid	_serial_putc   (const char, const int);
Svoid	_serial_putc_raw(const char, const int);
Svoid	_serial_puts   (const char *, const int);
Sint	_serial_getc   (const int);
Sint	_serial_tstc   (const int);
S
S/* $(CPU)/speed.c */
Sint	get_clocks (void);
Sint	get_clocks_866 (void);
Sint	sdram_adjust_866 (void);
Sint	adjust_sdram_tbs_8xx (void);
S#if defined(CONFIG_8260)
Sint	prt_8260_clks (void);
S#elif defined(CONFIG_MPC5xxx)
Sint	prt_mpc5xxx_clks (void);
S#endif
S#if defined(CONFIG_MPC512X)
Sint	prt_mpc512xxx_clks (void);
S#endif
S#if defined(CONFIG_MPC8220)
Sint	prt_mpc8220_clks (void);
S#endif
S#ifdef CONFIG_4xx
Sulong	get_OPB_freq (void);
Sulong	get_PCI_freq (void);
S#endif
S#if defined(CONFIG_S3C24X0) || \
S    defined(CONFIG_LH7A40X) || \
S    defined(CONFIG_S3C6400) || \
S    defined(CONFIG_EP93XX)
X#if defined(CONFIG_S3C24X0) ||     defined(CONFIG_LH7A40X) ||     defined(CONFIG_S3C6400) ||     defined(CONFIG_EP93XX)
Sulong	get_FCLK (void);
Sulong	get_HCLK (void);
Sulong	get_PCLK (void);
Sulong	get_UCLK (void);
S#endif
S#if defined(CONFIG_LH7A40X)
Sulong	get_PLLCLK (void);
S#endif
S#if defined CONFIG_INCA_IP
Suint	incaip_get_cpuclk (void);
S#endif
S#if defined(CONFIG_IMX)
Sulong get_systemPLLCLK(void);
Sulong get_FCLK(void);
Sulong get_HCLK(void);
Sulong get_BCLK(void);
Sulong get_PERCLK1(void);
Sulong get_PERCLK2(void);
Sulong get_PERCLK3(void);
S#endif
Sulong	get_bus_freq  (ulong);
Sint get_serial_clock(void);
S
S#if defined(CONFIG_MPC83xx) || defined(CONFIG_MPC85xx)
Sulong get_ddr_freq(ulong);
S#endif
S#if defined(CONFIG_MPC85xx)
Stypedef MPC85xx_SYS_INFO sys_info_t;
Svoid	get_sys_info  ( sys_info_t * );
S#endif
S#if defined(CONFIG_MPC86xx)
Stypedef MPC86xx_SYS_INFO sys_info_t;
Svoid   get_sys_info  ( sys_info_t * );
Sstatic __inline ulong get_ddr_freq(ulong dummy)
S{
S	return get_bus_freq(dummy);
S}
S#endif
S
S#if defined(CONFIG_4xx)
S#  if defined(CONFIG_440)
S#	if defined(CONFIG_440SPE)
S	 unsigned long determine_sysper(void);
S	 unsigned long determine_pci_clock_per(void);
S#	endif
S#  endif
Stypedef PPC4xx_SYS_INFO sys_info_t;
Sint	ppc440spe_revB(void);
Svoid	get_sys_info  ( sys_info_t * );
S#endif
S
S/* $(CPU)/cpu_init.c */
S#if defined(CONFIG_8xx) || defined(CONFIG_8260)
Svoid	cpu_init_f    (volatile immap_t *immr);
S#endif
S#if defined(CONFIG_4xx) || defined(CONFIG_MPC85xx) || defined(CONFIG_MCF52x2) ||defined(CONFIG_MPC86xx)
Svoid	cpu_init_f    (void);
S#endif
S
Sint	cpu_init_r    (void);
S#if defined(CONFIG_8260)
Sint	prt_8260_rsr  (void);
S#elif defined(CONFIG_MPC83xx)
Sint	prt_83xx_rsr  (void);
S#endif
S
S/* $(CPU)/interrupts.c */
Sint	interrupt_init	   (void);
Svoid	timer_interrupt	   (struct pt_regs *);
Svoid	external_interrupt (struct pt_regs *);
Svoid	irq_install_handler(int, interrupt_handler_t *, void *);
Svoid	irq_free_handler   (int);
Svoid	reset_timer	   (void);
Sulong	get_timer	   (ulong base);
Svoid	enable_interrupts  (void);
Sint	disable_interrupts (void);
S
S/* $(CPU)/.../commproc.c */
Sint	dpram_init (void);
Suint	dpram_base(void);
Suint	dpram_base_align(uint align);
Suint	dpram_alloc(uint size);
Suint	dpram_alloc_align(uint size,uint align);
Svoid	bootcount_store (ulong);
Sulong	bootcount_load (void);
S#define BOOTCOUNT_MAGIC		0xB001C041
S
S/* $(CPU)/.../<eth> */
Svoid mii_init (void);
S
S/* $(CPU)/.../lcd.c */
Sulong	lcd_setmem (ulong);
S
S/* $(CPU)/.../video.c */
Sulong	video_setmem (ulong);
S
S/* arch/$(ARCH)/lib/cache.c */
Svoid	enable_caches(void);
Svoid	flush_cache   (unsigned long, unsigned long);
Svoid	flush_dcache_all(void);
Svoid	flush_dcache_range(unsigned long start, unsigned long stop);
Svoid	invalidate_dcache_range(unsigned long start, unsigned long stop);
Svoid	invalidate_dcache_all(void);
Svoid	invalidate_icache_all(void);
S
S/* arch/$(ARCH)/lib/ticks.S */
Sunsigned long long get_ticks(void);
Svoid	wait_ticks    (unsigned long);
S
S/* arch/$(ARCH)/lib/time.c */
Svoid	__udelay      (unsigned long);
Sulong	usec2ticks    (unsigned long usec);
Sulong	ticks2usec    (unsigned long ticks);
Sint	init_timebase (void);
S
S/* lib/gunzip.c */
Sint gunzip(void *, int, unsigned char *, unsigned long *);
Sint zunzip(void *dst, int dstlen, unsigned char *src, unsigned long *lenp,
S						int stoponerr, int offset);
S
S/* lib/qsort.c */
Svoid qsort(void *base, size_t nmemb, size_t size,
S	   int(*compar)(const void *, const void *));
Sint strcmp_compar(const void *, const void *);
S
S/* lib/time.c */
Svoid	udelay        (unsigned long);
Svoid mdelay(unsigned long);
S
S/* lib/uuid.c */
Svoid uuid_str_to_bin(const char *uuid, unsigned char *out);
Sint uuid_str_valid(const char *uuid);
S
S/* lib/vsprintf.c */
S#include "vsprintf.h"
S
S/* lib/strmhz.c */
Schar *	strmhz(char *buf, unsigned long hz);
S
S/* lib/crc32.c */
S#include "crc.h"
S
S/* lib/rand.c */
S#if defined(CONFIG_RANDOM_MACADDR) || \
S	defined(CONFIG_BOOTP_RANDOM_DELAY) || \
S	defined(CONFIG_CMD_LINK_LOCAL)
X#if defined(CONFIG_RANDOM_MACADDR) || 	defined(CONFIG_BOOTP_RANDOM_DELAY) || 	defined(CONFIG_CMD_LINK_LOCAL)
S#define RAND_MAX -1U
Svoid srand(unsigned int seed);
Sunsigned int rand(void);
Sunsigned int rand_r(unsigned int *seedp);
S#endif
S
S/* common/console.c */
Sint	console_init_f(void);	/* Before relocation; uses the serial  stuff	*/
Sint	console_init_r(void);	/* After  relocation; uses the console stuff	*/
Sint	console_assign(int file, const char *devname);	/* Assign the console	*/
Sint	ctrlc (void);
Sint	had_ctrlc (void);	/* have we had a Control-C since last clear? */
Svoid	clear_ctrlc (void);	/* clear the Control-C condition */
Sint	disable_ctrlc (int);	/* 1 to disable, 0 to enable Control-C detect */
S
S/*
S * STDIO based functions (can always be used)
S */
S/* serial stuff */
Sint	serial_printf (const char *fmt, ...)
S		__attribute__ ((format (__printf__, 1, 2)));
S/* stdin */
S// int	getc(void);
S// int	tstc(void);
S
S/* stdout */
S// void	putc(const char c);
S// void	puts(const char *s);
S// int	printf(const char *fmt, ...)
S// 		__attribute__ ((format (__printf__, 1, 2)));
Sint	vprintf(const char *fmt, va_list args);
S
S/* stderr */
S#define eputc(c)		fputc(stderr, c)
S#define eputs(s)		fputs(stderr, s)
S#define eprintf(fmt,args...)	fprintf(stderr,fmt ,##args)
S
S/*
S * FILE based functions (can only be used AFTER relocation!)
S */
S#define stdin		0
S#define stdout		1
S#define stderr		2
S#define MAX_FILES	3
S
Sint	fprintf(int file, const char *fmt, ...)
S		__attribute__ ((format (__printf__, 2, 3)));
Svoid	fputs(int file, const char *s);
Svoid	fputc(int file, const char c);
Sint	ftstc(int file);
Sint	fgetc(int file);
S
S/* lib/gzip.c */
Sint gzip(void *dst, unsigned long *lenp,
S		unsigned char *src, unsigned long srclen);
Sint zzip(void *dst, unsigned long *lenp, unsigned char *src,
S		unsigned long srclen, int stoponerr,
S		int (*func)(unsigned long, unsigned long));
S
S/* lib/net_utils.c */
S// #include <net.h>
S// static __inline IPaddr_t getenv_IPaddr(char *var)
S// {
S// 	return string_to_ip(getenv(var));
S// }
S
S/*
S * CONSOLE multiplexing.
S */
S#ifdef CONFIG_CONSOLE_MUX
S#include <iomux.h>
S#endif
S
Sint	pcmcia_init (void);
S
S#ifdef CONFIG_STATUS_LED
S# include <status_led.h>
S#endif
S
S#include "bootstage.h"
S
S#ifdef CONFIG_SHOW_ACTIVITY
Svoid show_activity(int arg);
S#endif
S
S/* Multicore arch functions */
S#ifdef CONFIG_MP
Sint cpu_status(int nr);
Sint cpu_reset(int nr);
Sint cpu_disable(int nr);
Sint cpu_release(int nr, int argc, char * const argv[]);
S#endif
S
S/* Define a null map_sysmem() if the architecture doesn't use it */
S# ifndef CONFIG_ARCH_MAP_SYSMEM
Sstatic __inline void *map_sysmem(phys_addr_t paddr, unsigned long len)
S{
S	return (void *)(uintptr_t)paddr;
S}
S
Sstatic __inline void unmap_sysmem(const void *vaddr)
S{
S}
S# endif
S
S#endif /* __ASSEMBLY__ */
S
S#ifdef CONFIG_PPC
S/*
S * Has to be included outside of the #ifndef __ASSEMBLY__ section.
S * Otherwise might lead to compilation errors in assembler files.
S */
S#include <asm/cache.h>
S#endif
S
S/* Put only stuff here that the assembler can digest */
S
S#ifdef CONFIG_POST
S#define CONFIG_HAS_POST
S#ifndef CONFIG_POST_ALT_LIST
S#define CONFIG_POST_STD_LIST
S#endif
S#endif
S
S#ifdef CONFIG_INIT_CRITICAL
S#error CONFIG_INIT_CRITICAL is deprecated!
S#error Read section CONFIG_SKIP_LOWLEVEL_INIT in README.
S#endif
S
S#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
S
S#define ROUND(a,b)		(((a) + (b) - 1) & ~((b) - 1))
S#define DIV_ROUND(n,d)		(((n) + ((d)/2)) / (d))
S#define DIV_ROUND_UP(n,d)	(((n) + (d) - 1) / (d))
S#define roundup(x, y)		((((x) + ((y) - 1)) / (y)) * (y))
S
S#define ALIGN(x,a)		__ALIGN_MASK((x),(typeof(x))(a)-1)
S#define __ALIGN_MASK(x,mask)	(((x)+(mask))&~(mask))
S
S/*
S * ARCH_DMA_MINALIGN is defined in asm/cache.h for each architecture.  It
S * is used to align DMA buffers.
S */
S#ifndef __ASSEMBLY__
S#include "asm/cache.h"
S#endif
S
S/*
S * The ALLOC_CACHE_ALIGN_BUFFER macro is used to allocate a buffer on the
S * stack that meets the minimum architecture alignment requirements for DMA.
S * Such a buffer is useful for DMA operations where flushing and invalidating
S * the cache before and after a read and/or write operation is required for
S * correct operations.
S *
S * When called the macro creates an array on the stack that is sized such
S * that:
S *
S * 1) The beginning of the array can be advanced enough to be aligned.
S *
S * 2) The size of the aligned portion of the array is a multiple of the minimum
S *    architecture alignment required for DMA.
S *
S * 3) The aligned portion contains enough space for the original number of
S *    elements requested.
S *
S * The macro then creates a pointer to the aligned portion of this array and
S * assigns to the pointer the address of the first element in the aligned
S * portion of the array.
S *
S * Calling the macro as:
S *
S *     ALLOC_CACHE_ALIGN_BUFFER(uint32_t, buffer, 1024);
S *
S * Will result in something similar to saying:
S *
S *     uint32_t    buffer[1024];
S *
S * The following differences exist:
S *
S * 1) The resulting buffer is guaranteed to be aligned to the value of
S *    ARCH_DMA_MINALIGN.
S *
S * 2) The buffer variable created by the macro is a pointer to the specified
S *    type, and NOT an array of the specified type.  This can be very important
S *    if you want the address of the buffer, which you probably do, to pass it
S *    to the DMA hardware.  The value of &buffer is different in the two cases.
S *    In the macro case it will be the address of the pointer, not the address
S *    of the space reserved for the buffer.  However, in the second case it
S *    would be the address of the buffer.  So if you are replacing hard coded
S *    stack buffers with this macro you need to make sure you remove the & from
S *    the locations where you are taking the address of the buffer.
S *
S * Note that the size parameter is the number of array elements to allocate,
S * not the number of bytes.
S *
S * This macro can not be used outside of function scope, or for the creation
S * of a function scoped static buffer.  It can not be used to create a cache
S * line aligned global buffer.
S */
S#define ALLOC_ALIGN_BUFFER(type, name, size, align)			\
S	char __##name[ROUND(size * sizeof(type), align) + (align - 1)];	\
S									\
S	type *name = (type *) ALIGN((uintptr_t)__##name, align)
X#define ALLOC_ALIGN_BUFFER(type, name, size, align)				char __##name[ROUND(size * sizeof(type), align) + (align - 1)];											type *name = (type *) ALIGN((uintptr_t)__##name, align)
S#define ALLOC_CACHE_ALIGN_BUFFER(type, name, size)			\
S	ALLOC_ALIGN_BUFFER(type, name, size, ARCH_DMA_MINALIGN)
X#define ALLOC_CACHE_ALIGN_BUFFER(type, name, size)				ALLOC_ALIGN_BUFFER(type, name, size, ARCH_DMA_MINALIGN)
S
S/*
S * DEFINE_CACHE_ALIGN_BUFFER() is similar to ALLOC_CACHE_ALIGN_BUFFER, but it's
S * purpose is to allow allocating aligned buffers outside of function scope.
S * Usage of this macro shall be avoided or used with extreme care!
S */
S#define DEFINE_ALIGN_BUFFER(type, name, size, align)			\
S	static char __##name[roundup(size * sizeof(type), align)]	\
S			__attribute__((aligned(align)));				\
S									\
S	static type *name = (type *)__##name
X#define DEFINE_ALIGN_BUFFER(type, name, size, align)				static char __##name[roundup(size * sizeof(type), align)]				__attribute__((aligned(align)));														static type *name = (type *)__##name
S#define DEFINE_CACHE_ALIGN_BUFFER(type, name, size)			\
S	DEFINE_ALIGN_BUFFER(type, name, size, ARCH_DMA_MINALIGN)
X#define DEFINE_CACHE_ALIGN_BUFFER(type, name, size)				DEFINE_ALIGN_BUFFER(type, name, size, ARCH_DMA_MINALIGN)
S
S/* Pull in stuff for the build system */
S#ifdef DO_DEPS_ONLY
S# include <environment.h>
S#endif
S
S#endif	/* __COMMON_H_ */
N#endif // if 0
L 13 "..\..\common\src\BSP\ThirdParty\yaffs2\nand_ids.c" 2
N#include "linux\nand.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\nand.h" 1
N/*
N *  linux/include/linux/mtd/nand.h
N *
N *  Copyright © 2000-2010 David Woodhouse <dwmw2@infradead.org>
N *                        Steven J. Hill <sjhill@realitydiluted.com>
N *		          Thomas Gleixner <tglx@linutronix.de>
N *
N * This program is free software; you can redistribute it and/or modify
N * it under the terms of the GNU General Public License version 2 as
N * published by the Free Software Foundation.
N *
N * Info:
N *	Contains standard defines and IDs for NAND flash devices
N *
N * Changelog:
N *	See git changelog.
N */
N#ifndef __LINUX_MTD_NAND_H
N#define __LINUX_MTD_NAND_H
N
N#include "config.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\config.h" 1
N#ifndef _LINUX_CONFIG_H
N#define _LINUX_CONFIG_H
N
N/* #include <linux/autoconf.h> */
N
N#endif
L 22 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\nand.h" 2
N
N#include "linux\mtd.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\mtd.h" 1
N/*
N * Copyright (C) 1999-2003 David Woodhouse <dwmw2@infradead.org> et al.
N *
N * Released under GPL
N */
N
N#ifndef __MTD_MTD_H__
N#define __MTD_MTD_H__
N
N#include "linux\types.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\types.h" 1
N#ifndef _LINUX_TYPES_H
N#define _LINUX_TYPES_H
N
N#ifdef	__KERNEL__
S#include <linux/config.h>
N#endif
N
N#include "linux\posix_types.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\posix_types.h" 1
N#ifndef _LINUX_POSIX_TYPES_H
N#define _LINUX_POSIX_TYPES_H
N
N#include <linux/stddef.h>
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux/stddef.h" 1
N#ifndef _LINUX_STDDEF_H
N#define _LINUX_STDDEF_H
N
N#undef NULL
N#if defined(__cplusplus)
X#if 0L
S#define NULL 0
N#else
N#define NULL ((void *)0)
N#endif
N
N#ifndef _SIZE_T
N#include "linux\types.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\types.h" 1
N#ifndef _LINUX_TYPES_H
S#define _LINUX_TYPES_H
S
S#ifdef	__KERNEL__
S#include <linux/config.h>
S#endif
S
S#include "linux\posix_types.h"
S#include "asm\types.h"
S//#include "stdbool.h"
S
S#ifndef __KERNEL_STRICT_NAMES
S
Stypedef __kernel_fd_set		fd_set;
Stypedef __kernel_dev_t		dev_t;
Stypedef __kernel_ino_t		ino_t;
Stypedef __kernel_mode_t		mode_t;
Stypedef __kernel_nlink_t	nlink_t;
Stypedef __kernel_off_t		off_t;
Stypedef __kernel_pid_t		pid_t;
Stypedef __kernel_daddr_t	daddr_t;
Stypedef __kernel_key_t		key_t;
Stypedef __kernel_suseconds_t	suseconds_t;
S
S#ifdef __KERNEL__
Stypedef __kernel_uid32_t	uid_t;
Stypedef __kernel_gid32_t	gid_t;
Stypedef __kernel_uid16_t        uid16_t;
Stypedef __kernel_gid16_t        gid16_t;
S
S#ifdef CONFIG_UID16
S/* This is defined by include/asm-{arch}/posix_types.h */
Stypedef __kernel_old_uid_t	old_uid_t;
Stypedef __kernel_old_gid_t	old_gid_t;
S#endif /* CONFIG_UID16 */
S
S/* libc5 includes this file to define uid_t, thus uid_t can never change
S * when it is included by non-kernel code
S */
S#else
Stypedef __kernel_uid_t		uid_t;
Stypedef __kernel_gid_t		gid_t;
S#endif /* __KERNEL__ */
S
S#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
Stypedef __kernel_loff_t		loff_t;
S#endif
Stypedef long long		loff_t;
S
S/*
S * The following typedefs are also protected by individual ifdefs for
S * historical reasons:
S */
S#ifndef _SIZE_T
S#define _SIZE_T
Stypedef __kernel_size_t		size_t;
S#endif
S
S#ifndef _SSIZE_T
S#define _SSIZE_T
Stypedef __kernel_ssize_t	ssize_t;
S#endif
S
S#ifndef _PTRDIFF_T
S#define _PTRDIFF_T
Stypedef __kernel_ptrdiff_t	ptrdiff_t;
S#endif
S
S#ifndef _TIME_T
S#define _TIME_T
Stypedef __kernel_time_t		time_t;
S#endif
S
S#ifndef _CLOCK_T
S#define _CLOCK_T
Stypedef __kernel_clock_t	clock_t;
S#endif
S
S#ifndef _CADDR_T
S#define _CADDR_T
Stypedef __kernel_caddr_t	caddr_t;
S#endif
S
S/* bsd */
Stypedef unsigned char		u_char;
Stypedef unsigned short		u_short;
Stypedef unsigned int		u_int;
Stypedef unsigned long		u_long;
S
S/* sysv */
Stypedef unsigned char		unchar;
Stypedef unsigned short		ushort;
Stypedef unsigned int		uint;
Stypedef unsigned long		ulong;
S
S#ifndef __BIT_TYPES_DEFINED__
S#define __BIT_TYPES_DEFINED__
S
Stypedef		__u8		u_int8_t;
S// typedef		__s8		int8_t;
Stypedef		__u16		u_int16_t;
S// typedef		__s16		int16_t;
Stypedef		__u32		u_int32_t;
S// typedef		__s32		int32_t;
S
S#endif /* !(__BIT_TYPES_DEFINED__) */
S
S// typedef		__u8		uint8_t;
S// typedef		__u16		uint16_t;
S// typedef		__u32		uint32_t;
S
S// #if defined(__GNUC__) && !defined(__STRICT_ANSI__)
Stypedef		__u64		uint64_t;
Stypedef		__u64		u_int64_t;
Stypedef		__s64		int64_t;
S// #endif
S
S#endif /* __KERNEL_STRICT_NAMES */
S
S/*
S * Below are truly Linux-specific types that should never collide with
S * any application/library that wants linux/types.h.
S */
S#ifdef __CHECKER__
S#define __bitwise__ __attribute__((bitwise))
S#else
S#define __bitwise__
S#endif
S#ifdef __CHECK_ENDIAN__
S#define __bitwise __bitwise__
S#else
S#define __bitwise
S#endif
S
Stypedef __u16 __bitwise __le16;
Stypedef __u16 __bitwise __be16;
Stypedef __u32 __bitwise __le32;
Stypedef __u32 __bitwise __be32;
S// #if defined(__GNUC__)
Stypedef __u64 __bitwise __le64;
Stypedef __u64 __bitwise __be64;
S// #endif
Stypedef __u16 __bitwise __sum16;
Stypedef __u32 __bitwise __wsum;
S
S
Stypedef unsigned __bitwise__	gfp_t;
S
Sstruct ustat {
S	__kernel_daddr_t	f_tfree;
S	__kernel_ino_t		f_tinode;
S	char			f_fname[6];
S	char			f_fpack[6];
S};
S
N#endif /* _LINUX_TYPES_H */
L 13 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux/stddef.h" 2
N#endif
N
N#ifndef __CHECKER__
N#undef offsetof
N#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
N#endif
N
N#endif
L 5 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\posix_types.h" 2
N
N/*
N * This allows for 1024 file descriptors: if NR_OPEN is ever grown
N * beyond that you'll have to change this too. But 1024 fd's seem to be
N * enough even for such "real" unices like OSF/1, so hopefully this is
N * one limit that doesn't have to be changed [again].
N *
N * Note that POSIX wants the FD_CLEAR(fd,fdsetp) defines to be in
N * <sys/time.h> (and thus <linux/time.h>) - but this is a more logical
N * place for them. Solved by having dummy defines in <sys/time.h>.
N */
N
N/*
N * Those macros may have been defined in <gnu/types.h>. But we always
N * use the ones here.
N */
N#undef __NFDBITS
N#define __NFDBITS	(8 * sizeof(unsigned long))
N
N#undef __FD_SETSIZE
N#define __FD_SETSIZE	1024
N
N#undef __FDSET_LONGS
N#define __FDSET_LONGS	(__FD_SETSIZE/__NFDBITS)
N
N#undef __FDELT
N#define	__FDELT(d)	((d) / __NFDBITS)
N
N#undef __FDMASK
N#define	__FDMASK(d)	(1UL << ((d) % __NFDBITS))
N
Ntypedef struct {
N	unsigned long fds_bits [__FDSET_LONGS];
X	unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];
N} __kernel_fd_set;
N
N/* Type of a signal handler.  */
Ntypedef void (*__kernel_sighandler_t)(int);
N
N/* Type of a SYSV IPC key.  */
Ntypedef int __kernel_key_t;
N
N#include <asm/posix_types.h>
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\asm/posix_types.h" 1
N/*
N *  linux/include/asm-arm/posix_types.h
N *
N *  Copyright (C) 1996-1998 Russell King.
N *
N * This program is free software; you can redistribute it and/or modify
N * it under the terms of the GNU General Public License version 2 as
N * published by the Free Software Foundation.
N *
N *  Changelog:
N *   27-06-1996	RMK	Created
N */
N#ifndef __ARCH_ARM_POSIX_TYPES_H
N#define __ARCH_ARM_POSIX_TYPES_H
N
N/*
N * This file is generally used by user-level software, so you need to
N * be a little careful about namespace pollution etc.  Also, we cannot
N * assume GCC is being used.
N */
N
Ntypedef unsigned short		__kernel_dev_t;
Ntypedef unsigned long		__kernel_ino_t;
Ntypedef unsigned short		__kernel_mode_t;
Ntypedef unsigned short		__kernel_nlink_t;
Ntypedef long			__kernel_off_t;
Ntypedef int			__kernel_pid_t;
Ntypedef unsigned short		__kernel_ipc_pid_t;
Ntypedef unsigned short		__kernel_uid_t;
Ntypedef unsigned short		__kernel_gid_t;
Ntypedef unsigned int		__kernel_size_t;
Ntypedef int			__kernel_ssize_t;
Ntypedef int			__kernel_ptrdiff_t;
Ntypedef long			__kernel_time_t;
Ntypedef long			__kernel_suseconds_t;
Ntypedef long			__kernel_clock_t;
Ntypedef int			__kernel_daddr_t;
Ntypedef char *			__kernel_caddr_t;
Ntypedef unsigned short		__kernel_uid16_t;
Ntypedef unsigned short		__kernel_gid16_t;
Ntypedef unsigned int		__kernel_uid32_t;
Ntypedef unsigned int		__kernel_gid32_t;
N
Ntypedef unsigned short		__kernel_old_uid_t;
Ntypedef unsigned short		__kernel_old_gid_t;
N
N#ifdef __GNUC__
Stypedef long long		__kernel_loff_t;
N#endif
N
Ntypedef struct {
N#if defined(__KERNEL__) || defined(__USE_ALL)
X#if 0L || 0L
S	int	val[2];
N#else /* !defined(__KERNEL__) && !defined(__USE_ALL) */
N	int	__val[2];
N#endif /* !defined(__KERNEL__) && !defined(__USE_ALL) */
N} __kernel_fsid_t;
N
N#if defined(__KERNEL__) || !defined(__GLIBC__) || (__GLIBC__ < 2)
X#if 0L || !0L || (__GLIBC__ < 2)
N
N#undef	__FD_SET
N#define __FD_SET(fd, fdsetp) \
N		(((fd_set *)fdsetp)->fds_bits[fd >> 5] |= (1<<(fd & 31)))
X#define __FD_SET(fd, fdsetp) 		(((fd_set *)fdsetp)->fds_bits[fd >> 5] |= (1<<(fd & 31)))
N
N#undef	__FD_CLR
N#define __FD_CLR(fd, fdsetp) \
N		(((fd_set *)fdsetp)->fds_bits[fd >> 5] &= ~(1<<(fd & 31)))
X#define __FD_CLR(fd, fdsetp) 		(((fd_set *)fdsetp)->fds_bits[fd >> 5] &= ~(1<<(fd & 31)))
N
N#undef	__FD_ISSET
N#define __FD_ISSET(fd, fdsetp) \
N		((((fd_set *)fdsetp)->fds_bits[fd >> 5] & (1<<(fd & 31))) != 0)
X#define __FD_ISSET(fd, fdsetp) 		((((fd_set *)fdsetp)->fds_bits[fd >> 5] & (1<<(fd & 31))) != 0)
N
N#undef	__FD_ZERO
N#define __FD_ZERO(fdsetp) \
N		(memset (fdsetp, 0, sizeof (*(fd_set *)fdsetp)))
X#define __FD_ZERO(fdsetp) 		(memset (fdsetp, 0, sizeof (*(fd_set *)fdsetp)))
N
N#endif
N
N#endif
L 47 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\posix_types.h" 2
N
N#endif /* _LINUX_POSIX_TYPES_H */
L 9 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\types.h" 2
N#include "asm\types.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\asm\types.h" 1
N#ifndef __ASM_ARM_TYPES_H
N#define __ASM_ARM_TYPES_H
N
Ntypedef unsigned short umode_t;
N
N/*
N * __xx is ok: it doesn't pollute the POSIX namespace. Use these in the
N * header files exported to user space
N */
N
Ntypedef char __s8;
Ntypedef unsigned char __u8;
N
Ntypedef short __s16;
Ntypedef unsigned short __u16;
N
Ntypedef int __s32;
Ntypedef unsigned int __u32;
N
Ntypedef long long __s64;
Ntypedef unsigned long long __u64;
N
N#if defined(__GNUC__)
X#if 0L
S__extension__ typedef __signed__ long long __s64;
S__extension__ typedef unsigned long long __u64;
N#endif
N
N/*
N * These aren't exported outside the kernel to avoid name space clashes
N */
N// #ifdef __KERNEL__
N
Ntypedef signed char s8;
Ntypedef unsigned char u8;
N
Ntypedef signed short s16;
Ntypedef unsigned short u16;
N
Ntypedef signed int s32;
Ntypedef unsigned int u32;
N
Ntypedef signed long long s64;
Ntypedef unsigned long long u64;
N
N#define BITS_PER_LONG 32
N
N/* Dma addresses are 32-bits wide.  */
N
Ntypedef u32 dma_addr_t;
N
Ntypedef unsigned long phys_addr_t;
Ntypedef unsigned long phys_size_t;
N
N// #endif /* __KERNEL__ */
N
N#endif
L 10 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\types.h" 2
N//#include "stdbool.h"
N
N#ifndef __KERNEL_STRICT_NAMES
N
Ntypedef __kernel_fd_set		fd_set;
Ntypedef __kernel_dev_t		dev_t;
Ntypedef __kernel_ino_t		ino_t;
Ntypedef __kernel_mode_t		mode_t;
Ntypedef __kernel_nlink_t	nlink_t;
Ntypedef __kernel_off_t		off_t;
Ntypedef __kernel_pid_t		pid_t;
Ntypedef __kernel_daddr_t	daddr_t;
Ntypedef __kernel_key_t		key_t;
Ntypedef __kernel_suseconds_t	suseconds_t;
N
N#ifdef __KERNEL__
Stypedef __kernel_uid32_t	uid_t;
Stypedef __kernel_gid32_t	gid_t;
Stypedef __kernel_uid16_t        uid16_t;
Stypedef __kernel_gid16_t        gid16_t;
S
S#ifdef CONFIG_UID16
S/* This is defined by include/asm-{arch}/posix_types.h */
Stypedef __kernel_old_uid_t	old_uid_t;
Stypedef __kernel_old_gid_t	old_gid_t;
S#endif /* CONFIG_UID16 */
S
S/* libc5 includes this file to define uid_t, thus uid_t can never change
S * when it is included by non-kernel code
S */
N#else
Ntypedef __kernel_uid_t		uid_t;
Ntypedef __kernel_gid_t		gid_t;
N#endif /* __KERNEL__ */
N
N#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
X#if 0L && !0L
Stypedef __kernel_loff_t		loff_t;
N#endif
Ntypedef long long		loff_t;
N
N/*
N * The following typedefs are also protected by individual ifdefs for
N * historical reasons:
N */
N#ifndef _SIZE_T
N#define _SIZE_T
Ntypedef __kernel_size_t		size_t;
N#endif
N
N#ifndef _SSIZE_T
N#define _SSIZE_T
Ntypedef __kernel_ssize_t	ssize_t;
N#endif
N
N#ifndef _PTRDIFF_T
N#define _PTRDIFF_T
Ntypedef __kernel_ptrdiff_t	ptrdiff_t;
N#endif
N
N#ifndef _TIME_T
N#define _TIME_T
Ntypedef __kernel_time_t		time_t;
N#endif
N
N#ifndef _CLOCK_T
N#define _CLOCK_T
Ntypedef __kernel_clock_t	clock_t;
N#endif
N
N#ifndef _CADDR_T
N#define _CADDR_T
Ntypedef __kernel_caddr_t	caddr_t;
N#endif
N
N/* bsd */
Ntypedef unsigned char		u_char;
Ntypedef unsigned short		u_short;
Ntypedef unsigned int		u_int;
Ntypedef unsigned long		u_long;
N
N/* sysv */
Ntypedef unsigned char		unchar;
Ntypedef unsigned short		ushort;
Ntypedef unsigned int		uint;
Ntypedef unsigned long		ulong;
N
N#ifndef __BIT_TYPES_DEFINED__
N#define __BIT_TYPES_DEFINED__
N
Ntypedef		__u8		u_int8_t;
N// typedef		__s8		int8_t;
Ntypedef		__u16		u_int16_t;
N// typedef		__s16		int16_t;
Ntypedef		__u32		u_int32_t;
N// typedef		__s32		int32_t;
N
N#endif /* !(__BIT_TYPES_DEFINED__) */
N
N// typedef		__u8		uint8_t;
N// typedef		__u16		uint16_t;
N// typedef		__u32		uint32_t;
N
N// #if defined(__GNUC__) && !defined(__STRICT_ANSI__)
Ntypedef		__u64		uint64_t;
Ntypedef		__u64		u_int64_t;
Ntypedef		__s64		int64_t;
N// #endif
N
N#endif /* __KERNEL_STRICT_NAMES */
N
N/*
N * Below are truly Linux-specific types that should never collide with
N * any application/library that wants linux/types.h.
N */
N#ifdef __CHECKER__
S#define __bitwise__ __attribute__((bitwise))
N#else
N#define __bitwise__
N#endif
N#ifdef __CHECK_ENDIAN__
S#define __bitwise __bitwise__
N#else
N#define __bitwise
N#endif
N
Ntypedef __u16 __bitwise __le16;
Xtypedef __u16  __le16;
Ntypedef __u16 __bitwise __be16;
Xtypedef __u16  __be16;
Ntypedef __u32 __bitwise __le32;
Xtypedef __u32  __le32;
Ntypedef __u32 __bitwise __be32;
Xtypedef __u32  __be32;
N// #if defined(__GNUC__)
Ntypedef __u64 __bitwise __le64;
Xtypedef __u64  __le64;
Ntypedef __u64 __bitwise __be64;
Xtypedef __u64  __be64;
N// #endif
Ntypedef __u16 __bitwise __sum16;
Xtypedef __u16  __sum16;
Ntypedef __u32 __bitwise __wsum;
Xtypedef __u32  __wsum;
N
N
Ntypedef unsigned __bitwise__	gfp_t;
Xtypedef unsigned 	gfp_t;
N
Nstruct ustat {
N	__kernel_daddr_t	f_tfree;
N	__kernel_ino_t		f_tinode;
N	char			f_fname[6];
N	char			f_fpack[6];
N};
N
N#endif /* _LINUX_TYPES_H */
L 11 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\mtd.h" 2
N#include "div64.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\div64.h" 1
N#ifndef _ASM_GENERIC_DIV64_H
N#define _ASM_GENERIC_DIV64_H
N/*
N * Copyright (C) 2003 Bernardo Innocenti <bernie@develer.com>
N * Based on former asm-ppc/div64.h and asm-m68knommu/div64.h
N *
N * The semantics of do_div() are:
N *
N * uint32_t do_div(uint64_t *n, uint32_t base)
N * {
N *	uint32_t remainder = *n % base;
N *	*n = *n / base;
N *	return remainder;
N * }
N *
N * NOTE: macro parameter n is evaluated multiple times,
N *       beware of side effects!
N */
N#include <stdint.h>
L 1 "C:\Keil\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
N
L 20 "..\..\common\src\BSP\ThirdParty\yaffs2\include\div64.h" 2
N#include "linux\types.h"
N
Nextern uint32_t __div64_32(uint64_t *dividend, uint32_t divisor);
N
N/* The unnecessary pointer compare is there
N * to check for type safety (n must be 64bit)
N */
N#define do_div(n,base) (n = n/base)
N
N#if 0
S#define do_div(n,base) ({   \
S	uint32_t __base = (base);   \
S	uint32_t __rem; \
S	(void)(((typeof((n)) *)0) == ((uint64_t *)0));  \
S	if (((n) >> 32) == 0) { \
S		__rem = (uint32_t)(n) % __base; \
S		(n) = (uint32_t)(n) / __base;   \
S	} else  \
S		__rem = __div64_32(&(n), __base);   \
S	__rem;  \
S})
X#define do_div(n,base) ({   	uint32_t __base = (base);   	uint32_t __rem; 	(void)(((typeof((n)) *)0) == ((uint64_t *)0));  	if (((n) >> 32) == 0) { 		__rem = (uint32_t)(n) % __base; 		(n) = (uint32_t)(n) / __base;   	} else  		__rem = __div64_32(&(n), __base);   	__rem;  })
S
S/* Wrapper for do_div(). Doesn't modify dividend and returns
S * the result, not reminder.
S */
Sstatic __inline uint64_t lldiv(uint64_t dividend, uint32_t divisor)
S{
S	uint64_t __res = dividend;
S	do_div(__res, divisor);
S	return(__res);
S}
N#endif
N#endif /* _ASM_GENERIC_DIV64_H */
L 12 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\mtd.h" 2
N#include "linux\mtd-abi.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\mtd-abi.h" 1
N/*
N * $Id: mtd-abi.h,v 1.13 2005/11/07 11:14:56 gleixner Exp $
N *
N * Portions of MTD ABI definition which are shared by kernel and user space
N */
N
N#ifndef __MTD_ABI_H__
N#define __MTD_ABI_H__
N
N#include <stdint.h>
N
N#include <linux/compiler.h>
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux/compiler.h" 1
N#ifndef __LINUX_COMPILER_H
N#define __LINUX_COMPILER_H
N
N#ifndef __ASSEMBLY__
N
N#ifdef __CHECKER__
S# define __user		__attribute__((noderef, address_space(1)))
S# define __kernel	/* default address space */
S# define __safe		__attribute__((safe))
S# define __force	__attribute__((force))
S# define __nocast	__attribute__((nocast))
S# define __iomem	__attribute__((noderef, address_space(2)))
S# define __acquires(x)	__attribute__((context(x,0,1)))
S# define __releases(x)	__attribute__((context(x,1,0)))
S# define __acquire(x)	__context__(x,1)
S# define __release(x)	__context__(x,-1)
S# define __cond_lock(x,c)	((c) ? ({ __acquire(x); 1; }) : 0)
Sextern void __chk_user_ptr(const volatile void __user *);
Sextern void __chk_io_ptr(const volatile void __iomem *);
N#else
N# define __user
N# define __kernel
N# define __safe
N# define __force
N# define __nocast
N# define __iomem
N# define __chk_user_ptr(x) (void)0
N# define __chk_io_ptr(x) (void)0
N# define __builtin_warning(x, y...) (1)
N# define __acquires(x)
N# define __releases(x)
N# define __acquire(x) (void)0
N# define __release(x) (void)0
N# define __cond_lock(x,c) (c)
N#endif
N
N#ifdef __KERNEL__
S
S#ifdef __GNUC__
S#include <linux/compiler-gcc.h>
S#endif
S
S#define notrace __attribute__((no_instrument_function))
S
S/* Intel compiler defines __GNUC__. So we will overwrite implementations
S * coming from above header files here
S */
S#ifdef __INTEL_COMPILER
S# include <linux/compiler-intel.h>
S#endif
S
S/*
S * Generic compiler-dependent macros required for kernel
S * build go below this comment. Actual compiler/compiler version
S * specific implementations come from the above header files
S */
S
Sstruct ftrace_branch_data {
S	const char *func;
S	const char *file;
S	unsigned line;
S	union {
S		struct {
S			unsigned long correct;
S			unsigned long incorrect;
S		};
S		struct {
S			unsigned long miss;
S			unsigned long hit;
S		};
S		unsigned long miss_hit[2];
S	};
S};
S
S/*
S * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code
S * to disable branch tracing on a per file basis.
S */
S#if defined(CONFIG_TRACE_BRANCH_PROFILING) \
S    && !defined(DISABLE_BRANCH_PROFILING) && !defined(__CHECKER__)
X#if defined(CONFIG_TRACE_BRANCH_PROFILING)     && !defined(DISABLE_BRANCH_PROFILING) && !defined(__CHECKER__)
Svoid ftrace_likely_update(struct ftrace_branch_data *f, int val, int expect);
S
S#define likely_notrace(x)	__builtin_expect(!!(x), 1)
S#define unlikely_notrace(x)	__builtin_expect(!!(x), 0)
S
S#define __branch_check__(x, expect) ({					\
S			int ______r;					\
S			static struct ftrace_branch_data		\
S				__attribute__((__aligned__(4)))		\
S				__attribute__((section("_ftrace_annotated_branch"))) \
S				______f = {				\
S				.func = __func__,			\
S				.file = __FILE__,			\
S				.line = __LINE__,			\
S			};						\
S			______r = likely_notrace(x);			\
S			ftrace_likely_update(&______f, ______r, expect); \
S			______r;					\
S		})
X#define __branch_check__(x, expect) ({								int ______r;								static struct ftrace_branch_data						__attribute__((__aligned__(4)))						__attribute__((section("_ftrace_annotated_branch"))) 				______f = {								.func = __func__,							.file = __FILE__,							.line = __LINE__,						};									______r = likely_notrace(x);						ftrace_likely_update(&______f, ______r, expect); 			______r;							})
S
S/*
S * Using __builtin_constant_p(x) to ignore cases where the return
S * value is always the same.  This idea is taken from a similar patch
S * written by Daniel Walker.
S */
S# ifndef likely
S#  define likely(x)	(__builtin_constant_p(x) ? !!(x) : __branch_check__(x, 1))
S# endif
S# ifndef unlikely
S#  define unlikely(x)	(__builtin_constant_p(x) ? !!(x) : __branch_check__(x, 0))
S# endif
S
S#ifdef CONFIG_PROFILE_ALL_BRANCHES
S/*
S * "Define 'is'", Bill Clinton
S * "Define 'if'", Steven Rostedt
S */
S#define if(cond, ...) __trace_if( (cond , ## __VA_ARGS__) )
S#define __trace_if(cond) \
S	if (__builtin_constant_p((cond)) ? !!(cond) :			\
S	({								\
S		int ______r;						\
S		static struct ftrace_branch_data			\
S			__attribute__((__aligned__(4)))			\
S			__attribute__((section("_ftrace_branch")))	\
S			______f = {					\
S				.func = __func__,			\
S				.file = __FILE__,			\
S				.line = __LINE__,			\
S			};						\
S		______r = !!(cond);					\
S		______f.miss_hit[______r]++;					\
S		______r;						\
S	}))
X#define __trace_if(cond) 	if (__builtin_constant_p((cond)) ? !!(cond) :				({										int ______r;								static struct ftrace_branch_data						__attribute__((__aligned__(4)))						__attribute__((section("_ftrace_branch")))				______f = {									.func = __func__,							.file = __FILE__,							.line = __LINE__,						};								______r = !!(cond);							______f.miss_hit[______r]++;							______r;							}))
S#endif /* CONFIG_PROFILE_ALL_BRANCHES */
S
S#else
S# define likely(x)	__builtin_expect(!!(x), 1)
S# define unlikely(x)	__builtin_expect(!!(x), 0)
S#endif
S
S/* Optimization barrier */
S#ifndef barrier
S# define barrier() __memory_barrier()
S#endif
S
S/* Unreachable code */
S#ifndef unreachable
S# define unreachable() do { } while (1)
S#endif
S
S#ifndef RELOC_HIDE
S# define RELOC_HIDE(ptr, off)					\
S  ({ unsigned long __ptr;					\
S     __ptr = (unsigned long) (ptr);				\
S    (typeof(ptr)) (__ptr + (off)); })
X# define RELOC_HIDE(ptr, off)					  ({ unsigned long __ptr;					     __ptr = (unsigned long) (ptr);				    (typeof(ptr)) (__ptr + (off)); })
S#endif
S
N#endif /* __KERNEL__ */
N
N#endif /* __ASSEMBLY__ */
N
N#ifdef __KERNEL__
S/*
S * Allow us to mark functions as 'deprecated' and have gcc emit a nice
S * warning for each use, in hopes of speeding the functions removal.
S * Usage is:
S * 		int __deprecated foo(void)
S */
S#ifndef __deprecated
S# define __deprecated		/* unimplemented */
S#endif
S
S#ifdef MODULE
S#define __deprecated_for_modules __deprecated
S#else
S#define __deprecated_for_modules
S#endif
S
S#ifndef __must_check
S#define __must_check
S#endif
S
S#ifndef CONFIG_ENABLE_MUST_CHECK
S#undef __must_check
S#define __must_check
S#endif
S#ifndef CONFIG_ENABLE_WARN_DEPRECATED
S#undef __deprecated
S#undef __deprecated_for_modules
S#define __deprecated
S#define __deprecated_for_modules
S#endif
S
S/*
S * Allow us to avoid 'defined but not used' warnings on functions and data,
S * as well as force them to be emitted to the assembly file.
S *
S * As of gcc 3.4, static functions that are not marked with attribute((used))
S * may be elided from the assembly file.  As of gcc 3.4, static data not so
S * marked will not be elided, but this may change in a future gcc version.
S *
S * NOTE: Because distributions shipped with a backported unit-at-a-time
S * compiler in gcc 3.3, we must define __used to be __attribute__((used))
S * for gcc >=3.3 instead of 3.4.
S *
S * In prior versions of gcc, such functions and data would be emitted, but
S * would be warned about except with attribute((unused)).
S *
S * Mark functions that are referenced only in inline assembly as __used so
S * the code is emitted even though it appears to be unreferenced.
S */
S#ifndef __used
S# define __used			/* unimplemented */
S#endif
S
S#ifndef __maybe_unused
S# define __maybe_unused		/* unimplemented */
S#endif
S
S#ifndef __always_unused
S# define __always_unused	/* unimplemented */
S#endif
S
S#ifndef noinline
S#define noinline
S#endif
S
S/*
S * Rather then using noinline to prevent stack consumption, use
S * noinline_for_stack instead.  For documentaiton reasons.
S */
S#define noinline_for_stack noinline
S
S#ifndef __always_inline
S#define __always_inline inline
S#endif
S
N#endif /* __KERNEL__ */
N
N/*
N * From the GCC manual:
N *
N * Many functions do not examine any values except their arguments,
N * and have no effects except the return value.  Basically this is
N * just slightly more strict class than the `pure' attribute above,
N * since function is not allowed to read global memory.
N *
N * Note that a function that has pointer arguments and examines the
N * data pointed to must _not_ be declared `const'.  Likewise, a
N * function that calls a non-`const' function usually must not be
N * `const'.  It does not make sense for a `const' function to return
N * `void'.
N */
N#ifndef __attribute_const__
N# define __attribute_const__	/* unimplemented */
N#endif
N
N/*
N * Tell gcc if a function is cold. The compiler will assume any path
N * directly leading to the call is unlikely.
N */
N
N#ifndef __cold
N#define __cold
N#endif
N
N/* Simple shorthand for a section definition */
N#ifndef __section
N# define __section(S) __attribute__ ((__section__(#S)))
N#endif
N
N/* Are two types/vars the same type (ignoring qualifiers)? */
N#ifndef __same_type
N# define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))
N#endif
N
N/* Compile time object size, -1 for unknown */
N#ifndef __compiletime_object_size
N# define __compiletime_object_size(obj) -1
N#endif
N#ifndef __compiletime_warning
N# define __compiletime_warning(message)
N#endif
N#ifndef __compiletime_error
N# define __compiletime_error(message)
N#endif
N
N/*
N * Prevent the compiler from merging or refetching accesses.  The compiler
N * is also forbidden from reordering successive instances of ACCESS_ONCE(),
N * but only when the compiler is aware of some particular ordering.  One way
N * to make the compiler aware of ordering is to put the two invocations of
N * ACCESS_ONCE() in different C statements.
N *
N * This macro does absolutely -nothing- to prevent the CPU from reordering,
N * merging, or refetching absolutely anything at any time.  Its main intended
N * use is to mediate communication between process-level code and irq/NMI
N * handlers, all running on the same CPU.
N */
N#define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
N
N#endif /* __LINUX_COMPILER_H */
L 13 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\mtd-abi.h" 2
N
Nstruct erase_info_user {
N	uint32_t start;
N	uint32_t length;
N};
N
Nstruct mtd_oob_buf {
N	uint32_t start;
N	uint32_t length;
N	unsigned char __user *ptr;
X	unsigned char  *ptr;
N};
N
N#define MTD_ABSENT		0
N#define MTD_RAM			1
N#define MTD_ROM			2
N#define MTD_NORFLASH		3
N#define MTD_NANDFLASH		4
N#define MTD_DATAFLASH		6
N#define MTD_UBIVOLUME		7
N
N#define MTD_WRITEABLE		0x400	/* Device is writeable */
N#define MTD_BIT_WRITEABLE	0x800	/* Single bits can be flipped */
N#define MTD_NO_ERASE		0x1000	/* No erase necessary */
N#define MTD_STUPID_LOCK		0x2000	/* Always locked after reset */
N
N/* Some common devices / combinations of capabilities */
N#define MTD_CAP_ROM		0
N#define MTD_CAP_RAM		(MTD_WRITEABLE | MTD_BIT_WRITEABLE | MTD_NO_ERASE)
N#define MTD_CAP_NORFLASH	(MTD_WRITEABLE | MTD_BIT_WRITEABLE)
N#define MTD_CAP_NANDFLASH	(MTD_WRITEABLE)
N
N/* ECC byte placement */
N#define MTD_NANDECC_OFF		0	/* Switch off ECC (Not recommended) */
N#define MTD_NANDECC_PLACE	1	/* Use the given placement in the structure (YAFFS1 legacy mode) */
N#define MTD_NANDECC_AUTOPLACE	2	/* Use the default placement scheme */
N#define MTD_NANDECC_PLACEONLY	3	/* Use the given placement in the structure (Do not store ecc result on read) */
N#define MTD_NANDECC_AUTOPL_USR	4	/* Use the given autoplacement scheme rather than using the default */
N
N/* OTP mode selection */
N#define MTD_OTP_OFF		0
N#define MTD_OTP_FACTORY		1
N#define MTD_OTP_USER		2
N
Nstruct mtd_info_user {
N	uint8_t type;
N	uint32_t flags;
N	uint32_t size;			/* Total size of the MTD */
N	uint32_t erasesize;
N	uint32_t writesize;
N	uint32_t oobsize;		/* Amount of OOB data per block (e.g. 16) */
N	/* The below two fields are obsolete and broken, do not use them
N	 * (TODO: remove at some point) */
N	uint32_t ecctype;
N	uint32_t eccsize;
N};
N
Nstruct region_info_user {
N	uint32_t offset;		/* At which this region starts,
N					 * from the beginning of the MTD */
N	uint32_t erasesize;		/* For this region */
N	uint32_t numblocks;		/* Number of blocks in this region */
N	uint32_t regionindex;
N};
N
Nstruct otp_info {
N	uint32_t start;
N	uint32_t length;
N	uint32_t locked;
N};
N
N#define MEMGETINFO		_IOR('M', 1, struct mtd_info_user)
N#define MEMERASE		_IOW('M', 2, struct erase_info_user)
N#define MEMWRITEOOB		_IOWR('M', 3, struct mtd_oob_buf)
N#define MEMREADOOB		_IOWR('M', 4, struct mtd_oob_buf)
N#define MEMLOCK			_IOW('M', 5, struct erase_info_user)
N#define MEMUNLOCK		_IOW('M', 6, struct erase_info_user)
N#define MEMGETREGIONCOUNT	_IOR('M', 7, int)
N#define MEMGETREGIONINFO	_IOWR('M', 8, struct region_info_user)
N#define MEMSETOOBSEL		_IOW('M', 9, struct nand_oobinfo)
N#define MEMGETOOBSEL		_IOR('M', 10, struct nand_oobinfo)
N#define MEMGETBADBLOCK		_IOW('M', 11, loff_t)
N#define MEMSETBADBLOCK		_IOW('M', 12, loff_t)
N#define OTPSELECT		_IOR('M', 13, int)
N#define OTPGETREGIONCOUNT	_IOW('M', 14, int)
N#define OTPGETREGIONINFO	_IOW('M', 15, struct otp_info)
N#define OTPLOCK			_IOR('M', 16, struct otp_info)
N#define ECCGETLAYOUT		_IOR('M', 17, struct nand_ecclayout)
N#define ECCGETSTATS		_IOR('M', 18, struct mtd_ecc_stats)
N#define MTDFILEMODE		_IO('M', 19)
N
N/*
N * Obsolete legacy interface. Keep it in order not to break userspace
N * interfaces
N */
Nstruct nand_oobinfo {
N	uint32_t useecc;
N	uint32_t eccbytes;
N	uint32_t oobfree[8][2];
N	uint32_t eccpos[48];
N};
N
Nstruct nand_oobfree {
N	uint32_t offset;
N	uint32_t length;
N};
N
N#define MTD_MAX_OOBFREE_ENTRIES	8
N/*
N * ECC layout control structure. Exported to userspace for
N * diagnosis and to allow creation of raw images
N */
Nstruct nand_ecclayout {
N	uint32_t eccbytes;
N	uint32_t eccpos[128];
N	uint32_t oobavail;
N	struct nand_oobfree oobfree[MTD_MAX_OOBFREE_ENTRIES];
X	struct nand_oobfree oobfree[8];
N};
N
N/**
N * struct mtd_ecc_stats - error correction stats
N *
N * @corrected:	number of corrected bits
N * @failed:	number of uncorrectable errors
N * @badblocks:	number of bad blocks in this partition
N * @bbtblocks:	number of blocks reserved for bad block tables
N */
Nstruct mtd_ecc_stats {
N	uint32_t corrected;
N	uint32_t failed;
N	uint32_t badblocks;
N	uint32_t bbtblocks;
N};
N
N/*
N * Read/write file modes for access to MTD
N */
Nenum mtd_file_modes {
N	MTD_MODE_NORMAL = MTD_OTP_OFF,
X	MTD_MODE_NORMAL = 0,
N	MTD_MODE_OTP_FACTORY = MTD_OTP_FACTORY,
X	MTD_MODE_OTP_FACTORY = 1,
N	MTD_MODE_OTP_USER = MTD_OTP_USER,
X	MTD_MODE_OTP_USER = 2,
N	MTD_MODE_RAW,
N};
N
N#endif /* __MTD_ABI_H__ */
L 13 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\mtd.h" 2
N
N#define MTD_CHAR_MAJOR 90
N#define MTD_BLOCK_MAJOR 31
N#define MAX_MTD_DEVICES 32
N
N#define MTD_ERASE_PENDING	0x01
N#define MTD_ERASING		0x02
N#define MTD_ERASE_SUSPEND	0x04
N#define MTD_ERASE_DONE          0x08
N#define MTD_ERASE_FAILED        0x10
N
N#define MTD_FAIL_ADDR_UNKNOWN	-1LL
N
N/*
N * Enumeration for NAND/OneNAND flash chip state
N */
Nenum {
N	FL_READY,
N	FL_READING,
N	FL_WRITING,
N	FL_ERASING,
N	FL_SYNCING,
N	FL_CACHEDPRG,
N	FL_RESETING,
N	FL_UNLOCKING,
N	FL_LOCKING,
N	FL_PM_SUSPENDED,
N};
N
N/* If the erase fails, fail_addr might indicate exactly which block failed.  If
N   fail_addr = MTD_FAIL_ADDR_UNKNOWN, the failure was not at the device level or was not
N   specific to any particular block. */
Nstruct erase_info {
N	struct mtd_info *mtd;
N	uint64_t addr;
N	uint64_t len;
N	uint64_t fail_addr;
N	u_long time;
N	u_long retries;
N	u_int dev;
N	u_int cell;
N	void (*callback) (struct erase_info *self);
N	u_long priv;
N	u_char state;
N	struct erase_info *next;
N	int scrub;
N};
N
Nstruct mtd_erase_region_info {
N	uint64_t offset;			/* At which this region starts, from the beginning of the MTD */
N	u_int32_t erasesize;		/* For this region */
N	u_int32_t numblocks;		/* Number of blocks of erasesize in this region */
N	unsigned long *lockmap;		/* If keeping bitmap of locks */
N};
N
N/*
N * oob operation modes
N *
N * MTD_OOB_PLACE:	oob data are placed at the given offset
N * MTD_OOB_AUTO:	oob data are automatically placed at the free areas
N *			which are defined by the ecclayout
N * MTD_OOB_RAW:		mode to read raw data+oob in one chunk. The oob data
N *			is inserted into the data. Thats a raw image of the
N *			flash contents.
N */
Ntypedef enum {
N	MTD_OOB_PLACE,
N	MTD_OOB_AUTO,
N	MTD_OOB_RAW,
N} mtd_oob_mode_t;
N
N/**
N * struct mtd_oob_ops - oob operation operands
N * @mode:	operation mode
N *
N * @len:	number of data bytes to write/read
N *
N * @retlen:	number of data bytes written/read
N *
N * @ooblen:	number of oob bytes to write/read
N * @oobretlen:	number of oob bytes written/read
N * @ooboffs:	offset of oob data in the oob area (only relevant when
N *		mode = MTD_OOB_PLACE)
N * @datbuf:	data buffer - if NULL only oob data are read/written
N * @oobbuf:	oob data buffer
N *
N * Note, it is allowed to read more then one OOB area at one go, but not write.
N * The interface assumes that the OOB write requests program only one page's
N * OOB area.
N */
Nstruct mtd_oob_ops {
N	mtd_oob_mode_t	mode;
N	size_t		len;
N	size_t		retlen;
N	size_t		ooblen;
N	size_t		oobretlen;
N	uint32_t	ooboffs;
N	uint8_t		*datbuf;
N	uint8_t		*oobbuf;
N};
N
Nstruct mtd_info {
N	u_char type;
N	u_int32_t flags;
N	uint64_t size;	 /* Total size of the MTD */
N
N	/* "Major" erase size for the device. Naïve users may take this
N	 * to be the only erase size available, or may use the more detailed
N	 * information below if they desire
N	 */
N	u_int32_t erasesize;
N	/* Minimal writable flash unit size. In case of NOR flash it is 1 (even
N	 * though individual bits can be cleared), in case of NAND flash it is
N	 * one NAND page (or half, or one-fourths of it), in case of ECC-ed NOR
N	 * it is of ECC block size, etc. It is illegal to have writesize = 0.
N	 * Any driver registering a struct mtd_info must ensure a writesize of
N	 * 1 or larger.
N	 */
N	u_int32_t writesize;
N
N	u_int32_t oobsize;   /* Amount of OOB data per block (e.g. 16) */
N	u_int32_t oobavail;  /* Available OOB bytes per block */
N
N	/* Kernel-only stuff starts here. */
N	const char *name;
N	int index;
N
N	/* ecc layout structure pointer - read only ! */
N	struct nand_ecclayout *ecclayout;
N
N	/* Data for variable erase regions. If numeraseregions is zero,
N	 * it means that the whole device has erasesize as given above.
N	 */
N	int numeraseregions;
N	struct mtd_erase_region_info *eraseregions;
N
N	/*
N	 * Erase is an asynchronous operation.  Device drivers are supposed
N	 * to call instr->callback() whenever the operation completes, even
N	 * if it completes with a failure.
N	 * Callers are supposed to pass a callback function and wait for it
N	 * to be called before writing to the block.
N	 */
N	int (*erase) (struct mtd_info *mtd, struct erase_info *instr);
N
N	/* This stuff for eXecute-In-Place */
N	/* phys is optional and may be set to NULL */
N	int (*point) (struct mtd_info *mtd, loff_t from, size_t len,
N			size_t *retlen, void **virt, phys_addr_t *phys);
N
N	/* We probably shouldn't allow XIP if the unpoint isn't a NULL */
N	void (*unpoint) (struct mtd_info *mtd, loff_t from, size_t len);
N
N
N	int (*read) (struct mtd_info *mtd, loff_t from, size_t len, size_t *retlen, u_char *buf);
N	int (*write) (struct mtd_info *mtd, loff_t to, size_t len, size_t *retlen, const u_char *buf);
N
N	/* In blackbox flight recorder like scenarios we want to make successful
N	   writes in interrupt context. panic_write() is only intended to be
N	   called when its known the kernel is about to panic and we need the
N	   write to succeed. Since the kernel is not going to be running for much
N	   longer, this function can break locks and delay to ensure the write
N	   succeeds (but not sleep). */
N
N	int (*panic_write) (struct mtd_info *mtd, loff_t to, size_t len, size_t *retlen, const u_char *buf);
N
N	int (*read_oob) (struct mtd_info *mtd, loff_t from,
N			 struct mtd_oob_ops *ops);
N	int (*write_oob) (struct mtd_info *mtd, loff_t to,
N			 struct mtd_oob_ops *ops);
N
N	/*
N	 * Methods to access the protection register area, present in some
N	 * flash devices. The user data is one time programmable but the
N	 * factory data is read only.
N	 */
N	int (*get_fact_prot_info) (struct mtd_info *mtd, struct otp_info *buf, size_t len);
N	int (*read_fact_prot_reg) (struct mtd_info *mtd, loff_t from, size_t len, size_t *retlen, u_char *buf);
N	int (*get_user_prot_info) (struct mtd_info *mtd, struct otp_info *buf, size_t len);
N	int (*read_user_prot_reg) (struct mtd_info *mtd, loff_t from, size_t len, size_t *retlen, u_char *buf);
N	int (*write_user_prot_reg) (struct mtd_info *mtd, loff_t from, size_t len, size_t *retlen, u_char *buf);
N	int (*lock_user_prot_reg) (struct mtd_info *mtd, loff_t from, size_t len);
N
N	/* Sync */
N	void (*sync) (struct mtd_info *mtd);
N
N	/* Chip-supported device locking */
N	int (*lock) (struct mtd_info *mtd, loff_t ofs, uint64_t len);
N	int (*unlock) (struct mtd_info *mtd, loff_t ofs, uint64_t len);
N
N	/* Bad block management functions */
N	int (*block_isbad) (struct mtd_info *mtd, loff_t ofs);
N	int (*block_markbad) (struct mtd_info *mtd, loff_t ofs);
N
N	/* ECC status information */
N	struct mtd_ecc_stats ecc_stats;
N	/* Subpage shift (NAND) */
N	int subpage_sft;
N
N	void *priv;
N
N	struct module *owner;
N	int usecount;
N
N	/* If the driver is something smart, like UBI, it may need to maintain
N	 * its own reference counting. The below functions are only for driver.
N	 * The driver may register its callbacks. These callbacks are not
N	 * supposed to be called by MTD users */
N	int (*get_device) (struct mtd_info *mtd);
N	void (*put_device) (struct mtd_info *mtd);
N	u_char rw_oob;
N	u_char skipfirstblk;
N};
N
Nstatic __inline uint32_t mtd_div_by_eb(uint64_t sz, struct mtd_info *mtd)
N{
N	do_div(sz, mtd->erasesize);
X	(sz = sz/mtd->erasesize);
N	return sz;
N}
N
Nstatic __inline uint32_t mtd_mod_by_eb(uint64_t sz, struct mtd_info *mtd)
N{
N	return do_div(sz, mtd->erasesize);
X	return (sz = sz/mtd->erasesize);
N}
N
N	/* Kernel-side ioctl definitions */
N
Nextern int add_mtd_device(struct mtd_info *mtd);
Nextern int del_mtd_device (struct mtd_info *mtd);
N
Nextern struct mtd_info *get_mtd_device(struct mtd_info *mtd, int num);
Nextern struct mtd_info *get_mtd_device_nm(const char *name);
N
Nextern void put_mtd_device(struct mtd_info *mtd);
Nextern void mtd_get_len_incl_bad(struct mtd_info *mtd, uint64_t offset,
N				 const uint64_t length, uint64_t *len_incl_bad,
N				 int *truncated);
N
Nvoid mtd_erase_callback(struct erase_info *instr);
N
N/*
N * Debugging macro and defines
N */
N#define MTD_DEBUG_LEVEL0	(0)	/* Quiet   */
N#define MTD_DEBUG_LEVEL1	(1)	/* Audible */
N#define MTD_DEBUG_LEVEL2	(2)	/* Loud    */
N#define MTD_DEBUG_LEVEL3	(3)	/* Noisy   */
N
N#ifdef CONFIG_MTD_DEBUG
S#define MTDDEBUG(n, args...)				\
S	do {						\
S		if (n <= CONFIG_MTD_DEBUG_VERBOSE)	\
S			sysprintf(KERN_INFO args);		\
S	} while(0)
X#define MTDDEBUG(n, args...)					do {								if (n <= CONFIG_MTD_DEBUG_VERBOSE)				sysprintf(KERN_INFO args);			} while(0)
N#else /* CONFIG_MTD_DEBUG */
N#define MTDDEBUG(n, args...)				\
N	do {						\
N		if (0)					\
N			sysprintf(args);		\
N	} while(0)
X#define MTDDEBUG(n, args...)					do {								if (0)								sysprintf(args);			} while(0)
N#endif /* CONFIG_MTD_DEBUG */
N
N#endif /* __MTD_MTD_H__ */
L 24 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\nand.h" 2
N#include "linux\bbm.h"
L 1 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\bbm.h" 1
N/*
N *  linux/include/linux/mtd/bbm.h
N *
N *  NAND family Bad Block Management (BBM) header file
N *    - Bad Block Table (BBT) implementation
N *
N *  Copyright (c) 2005-2007 Samsung Electronics
N *  Kyungmin Park <kyungmin.park@samsung.com>
N *
N *  Copyright (c) 2000-2005
N *  Thomas Gleixner <tglx@linuxtronix.de>
N *
N * This program is free software; you can redistribute it and/or modify
N * it under the terms of the GNU General Public License as published by
N * the Free Software Foundation; either version 2 of the License, or
N * (at your option) any later version.
N *
N * This program is distributed in the hope that it will be useful,
N * but WITHOUT ANY WARRANTY; without even the implied warranty of
N * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
N * GNU General Public License for more details.
N *
N * You should have received a copy of the GNU General Public License
N * along with this program; if not, write to the Free Software
N * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
N *
N */
N#ifndef __LINUX_MTD_BBM_H
N#define __LINUX_MTD_BBM_H
N
N/* The maximum number of NAND chips in an array */
N#ifndef CONFIG_SYS_NAND_MAX_CHIPS
N#define CONFIG_SYS_NAND_MAX_CHIPS	1
N#endif
N
N/**
N * struct nand_bbt_descr - bad block table descriptor
N * @param options	options for this descriptor
N * @param pages		the page(s) where we find the bbt, used with
N *			option BBT_ABSPAGE when bbt is searched,
N *			then we store the found bbts pages here.
N *			Its an array and supports up to 8 chips now
N * @param offs		offset of the pattern in the oob area of the page
N * @param veroffs	offset of the bbt version counter in the oob are of the page
N * @param version	version read from the bbt page during scan
N * @param len		length of the pattern, if 0 no pattern check is performed
N * @param maxblocks	maximum number of blocks to search for a bbt. This number of
N *			blocks is reserved at the end of the device
N *			where the tables are written.
N * @param reserved_block_code	if non-0, this pattern denotes a reserved
N *			(rather than bad) block in the stored bbt
N * @param pattern	pattern to identify bad block table or factory marked
N *			good / bad blocks, can be NULL, if len = 0
N *
N * Descriptor for the bad block table marker and the descriptor for the
N * pattern which identifies good and bad blocks. The assumption is made
N * that the pattern and the version count are always located in the oob area
N * of the first block.
N */
Nstruct nand_bbt_descr {
N	int options;
N	int pages[CONFIG_SYS_NAND_MAX_CHIPS];
X	int pages[1];
N	int offs;
N	int veroffs;
N	uint8_t version[CONFIG_SYS_NAND_MAX_CHIPS];
X	uint8_t version[1];
N	int len;
N	int maxblocks;
N	int reserved_block_code;
N	uint8_t *pattern;
N};
N
N/* Options for the bad block table descriptors */
N
N/* The number of bits used per block in the bbt on the device */
N#define NAND_BBT_NRBITS_MSK	0x0000000F
N#define NAND_BBT_1BIT		0x00000001
N#define NAND_BBT_2BIT		0x00000002
N#define NAND_BBT_4BIT		0x00000004
N#define NAND_BBT_8BIT		0x00000008
N/* The bad block table is in the last good block of the device */
N#define NAND_BBT_LASTBLOCK	0x00000010
N/* The bbt is at the given page, else we must scan for the bbt */
N#define NAND_BBT_ABSPAGE	0x00000020
N/* The bbt is at the given page, else we must scan for the bbt */
N#define NAND_BBT_SEARCH		0x00000040
N/* bbt is stored per chip on multichip devices */
N#define NAND_BBT_PERCHIP	0x00000080
N/* bbt has a version counter at offset veroffs */
N#define NAND_BBT_VERSION	0x00000100
N/* Create a bbt if none exists */
N#define NAND_BBT_CREATE		0x00000200
N/* Search good / bad pattern through all pages of a block */
N#define NAND_BBT_SCANALLPAGES	0x00000400
N/* Scan block empty during good / bad block scan */
N#define NAND_BBT_SCANEMPTY	0x00000800
N/* Write bbt if neccecary */
N#define NAND_BBT_WRITE		0x00001000
N/* Read and write back block contents when writing bbt */
N#define NAND_BBT_SAVECONTENT	0x00002000
N/* Search good / bad pattern on the first and the second page */
N#define NAND_BBT_SCAN2NDPAGE	0x00004000
N/* Search good / bad pattern on the last page of the eraseblock */
N#define NAND_BBT_SCANLASTPAGE	0x00008000
N/* Chip stores bad block marker on BOTH 1st and 6th bytes of OOB */
N#define NAND_BBT_SCANBYTE1AND6 0x00100000
N/* The nand_bbt_descr was created dynamicaly and must be freed */
N#define NAND_BBT_DYNAMICSTRUCT 0x00200000
N/* The bad block table does not OOB for marker */
N#define NAND_BBT_NO_OOB		0x00400000
N
N/* The maximum number of blocks to scan for a bbt */
N#define NAND_BBT_SCAN_MAXBLOCKS	4
N
N/*
N * Constants for oob configuration
N */
N#define ONENAND_BADBLOCK_POS	0
N
N/*
N * Bad block scanning errors
N */
N#define ONENAND_BBT_READ_ERROR          1
N#define ONENAND_BBT_READ_ECC_ERROR      2
N#define ONENAND_BBT_READ_FATAL_ERROR    4
N
N/**
N * struct bbt_info - [GENERIC] Bad Block Table data structure
N * @param bbt_erase_shift	[INTERN] number of address bits in a bbt entry
N * @param badblockpos		[INTERN] position of the bad block marker in the oob area
N * @param bbt			[INTERN] bad block table pointer
N * @param badblock_pattern	[REPLACEABLE] bad block scan pattern used for initial bad block scan
N * @param priv			[OPTIONAL] pointer to private bbm date
N */
Nstruct bbm_info {
N	int bbt_erase_shift;
N	int badblockpos;
N	int options;
N
N	uint8_t *bbt;
N
N	int (*isbad_bbt) (struct mtd_info * mtd, loff_t ofs, int allowbbt);
N
N	/* TODO Add more NAND specific fileds */
N	struct nand_bbt_descr *badblock_pattern;
N
N	void *priv;
N};
N
N/* OneNAND BBT interface */
Nextern int onenand_scan_bbt (struct mtd_info *mtd, struct nand_bbt_descr *bd);
Nextern int onenand_default_bbt (struct mtd_info *mtd);
N
N#endif				/* __LINUX_MTD_BBM_H */
L 25 "..\..\common\src\BSP\ThirdParty\yaffs2\include\linux\nand.h" 2
N
N
Nstruct mtd_info;
Nstruct nand_flash_dev;
N/* Scan and identify a NAND device */
Nextern int nand_scan (struct mtd_info *mtd, int max_chips);
N/* Separate phases of nand_scan(), allowing board driver to intervene
N * and override command or ECC setup according to flash type */
Nextern int nand_scan_ident(struct mtd_info *mtd, int max_chips,
N			   const struct nand_flash_dev *table);
Nextern int nand_scan_tail(struct mtd_info *mtd);
N
N/* Free resources held by the NAND device */
Nextern void nand_release(struct mtd_info *mtd);
N
N/* Internal helper for board drivers which need to override command function */
Nextern void nand_wait_ready(struct mtd_info *mtd);
N
N/*
N * This constant declares the max. oobsize / page, which
N * is supported now. If you add a chip with bigger oobsize/page
N * adjust this accordingly.
N */
N#define NAND_MAX_OOBSIZE	576
N#define NAND_MAX_PAGESIZE	8192
N
N/*
N * Constants for hardware specific CLE/ALE/NCE function
N *
N * These are bits which can be or'ed to set/clear multiple
N * bits in one go.
N */
N/* Select the chip by setting nCE to low */
N#define NAND_NCE		0x01
N/* Select the command latch by setting CLE to high */
N#define NAND_CLE		0x02
N/* Select the address latch by setting ALE to high */
N#define NAND_ALE		0x04
N
N#define NAND_CTRL_CLE		(NAND_NCE | NAND_CLE)
N#define NAND_CTRL_ALE		(NAND_NCE | NAND_ALE)
N#define NAND_CTRL_CHANGE	0x80
N
N/*
N * Standard NAND flash commands
N */
N#define NAND_CMD_READ0		0
N#define NAND_CMD_READ1		1
N#define NAND_CMD_RNDOUT		5
N#define NAND_CMD_PAGEPROG	0x10
N#define NAND_CMD_READOOB	0x50
N#define NAND_CMD_ERASE1		0x60
N#define NAND_CMD_STATUS		0x70
N#define NAND_CMD_STATUS_MULTI	0x71
N#define NAND_CMD_SEQIN		0x80
N#define NAND_CMD_RNDIN		0x85
N#define NAND_CMD_READID		0x90
N#define NAND_CMD_ERASE2		0xd0
N#define NAND_CMD_PARAM		0xec
N#define NAND_CMD_RESET		0xff
N
N#define NAND_CMD_LOCK		0x2a
N#define NAND_CMD_LOCK_TIGHT	0x2c
N#define NAND_CMD_UNLOCK1	0x23
N#define NAND_CMD_UNLOCK2	0x24
N#define NAND_CMD_LOCK_STATUS	0x7a
N
N/* Extended commands for large page devices */
N#define NAND_CMD_READSTART	0x30
N#define NAND_CMD_RNDOUTSTART	0xE0
N#define NAND_CMD_CACHEDPROG	0x15
N
N/* Extended commands for AG-AND device */
N/*
N * Note: the command for NAND_CMD_DEPLETE1 is really 0x00 but
N *       there is no way to distinguish that from NAND_CMD_READ0
N *       until the remaining sequence of commands has been completed
N *       so add a high order bit and mask it off in the command.
N */
N#define NAND_CMD_DEPLETE1	0x100
N#define NAND_CMD_DEPLETE2	0x38
N#define NAND_CMD_STATUS_MULTI	0x71
N#define NAND_CMD_STATUS_ERROR	0x72
N/* multi-bank error status (banks 0-3) */
N#define NAND_CMD_STATUS_ERROR0	0x73
N#define NAND_CMD_STATUS_ERROR1	0x74
N#define NAND_CMD_STATUS_ERROR2	0x75
N#define NAND_CMD_STATUS_ERROR3	0x76
N#define NAND_CMD_STATUS_RESET	0x7f
N#define NAND_CMD_STATUS_CLEAR	0xff
N
N#define NAND_CMD_NONE		-1
N
N/* Status bits */
N#define NAND_STATUS_FAIL	0x01
N#define NAND_STATUS_FAIL_N1	0x02
N#define NAND_STATUS_TRUE_READY	0x20
N#define NAND_STATUS_READY	0x40
N#define NAND_STATUS_WP		0x80
N
N/*
N * Constants for ECC_MODES
N */
Ntypedef enum {
N	NAND_ECC_NONE,
N	NAND_ECC_SOFT,
N	NAND_ECC_HW,
N	NAND_ECC_HW_SYNDROME,
N	NAND_ECC_HW_OOB_FIRST,
N	NAND_ECC_SOFT_BCH,
N} nand_ecc_modes_t;
N
N/*
N * Constants for Hardware ECC
N */
N/* Reset Hardware ECC for read */
N#define NAND_ECC_READ		0
N/* Reset Hardware ECC for write */
N#define NAND_ECC_WRITE		1
N/* Enable Hardware ECC before syndrom is read back from flash */
N#define NAND_ECC_READSYN	2
N
N/* Bit mask for flags passed to do_nand_read_ecc */
N#define NAND_GET_DEVICE		0x80
N
N
N/*
N * Option constants for bizarre disfunctionality and real
N * features.
N */
N/* Chip can not auto increment pages */
N#define NAND_NO_AUTOINCR	0x00000001
N/* Buswitdh is 16 bit */
N#define NAND_BUSWIDTH_16	0x00000002
N/* Device supports partial programming without padding */
N#define NAND_NO_PADDING		0x00000004
N/* Chip has cache program function */
N#define NAND_CACHEPRG		0x00000008
N/* Chip has copy back function */
N#define NAND_COPYBACK		0x00000010
N/*
N * AND Chip which has 4 banks and a confusing page / block
N * assignment. See Renesas datasheet for further information.
N */
N#define NAND_IS_AND		0x00000020
N/*
N * Chip has a array of 4 pages which can be read without
N * additional ready /busy waits.
N */
N#define NAND_4PAGE_ARRAY	0x00000040
N/*
N * Chip requires that BBT is periodically rewritten to prevent
N * bits from adjacent blocks from 'leaking' in altering data.
N * This happens with the Renesas AG-AND chips, possibly others.
N */
N#define BBT_AUTO_REFRESH	0x00000080
N/*
N * Chip does not require ready check on read. true
N * for all large page devices, as they do not support
N * autoincrement.
N */
N#define NAND_NO_READRDY		0x00000100
N/* Chip does not allow subpage writes */
N#define NAND_NO_SUBPAGE_WRITE	0x00000200
N
N/* Device is one of 'new' xD cards that expose fake nand command set */
N#define NAND_BROKEN_XD		0x00000400
N
N/* Device behaves just like nand, but is readonly */
N#define NAND_ROM		0x00000800
N
N/* Device supports subpage reads */
N#define NAND_SUBPAGE_READ       0x00001000
N
N/* Options valid for Samsung large page devices */
N#define NAND_SAMSUNG_LP_OPTIONS \
N	(NAND_NO_PADDING | NAND_CACHEPRG | NAND_COPYBACK)
X#define NAND_SAMSUNG_LP_OPTIONS 	(NAND_NO_PADDING | NAND_CACHEPRG | NAND_COPYBACK)
N
N/* Macros to identify the above */
N#define NAND_CANAUTOINCR(chip) (!(chip->options & NAND_NO_AUTOINCR))
N#define NAND_MUST_PAD(chip) (!(chip->options & NAND_NO_PADDING))
N#define NAND_HAS_CACHEPROG(chip) ((chip->options & NAND_CACHEPRG))
N#define NAND_HAS_COPYBACK(chip) ((chip->options & NAND_COPYBACK))
N#define NAND_HAS_SUBPAGE_READ(chip) ((chip->options & NAND_SUBPAGE_READ))
N
N/* Non chip related options */
N/*
N * Use a flash based bad block table. OOB identifier is saved in OOB area.
N * This option is passed to the default bad block table function.
N */
N#define NAND_USE_FLASH_BBT	0x00010000
N/* This option skips the bbt scan during initialization. */
N#define NAND_SKIP_BBTSCAN	0x00020000
N/*
N * This option is defined if the board driver allocates its own buffers
N * (e.g. because it needs them DMA-coherent).
N */
N#define NAND_OWN_BUFFERS	0x00040000
N/* Chip may not exist, so silence any errors in scan */
N#define NAND_SCAN_SILENT_NODEV	0x00080000
N/*
N * If passed additionally to NAND_USE_FLASH_BBT then BBT code will not touch
N * the OOB area.
N */
N#define NAND_USE_FLASH_BBT_NO_OOB	0x00800000
N/* Create an empty BBT with no vendor information if the BBT is available */
N#define NAND_CREATE_EMPTY_BBT		0x01000000
N
N/* Options set by nand scan */
N/* bbt has already been read */
N#define NAND_BBT_SCANNED	0x40000000
N/* Nand scan has allocated controller struct */
N#define NAND_CONTROLLER_ALLOC	0x80000000
N
N/* Cell info constants */
N#define NAND_CI_CHIPNR_MSK	0x03
N#define NAND_CI_CELLTYPE_MSK	0x0C
N
N/* Keep gcc happy */
Nstruct nand_chip;
N
Nstruct nand_onfi_params {
N	/* rev info and features block */
N	/* 'O' 'N' 'F' 'I'  */
N	u8 sig[4];
N	__le16 revision;
N	__le16 features;
N	__le16 opt_cmd;
N	u8 reserved[22];
N
N	/* manufacturer information block */
N	char manufacturer[12];
N	char model[20];
N	u8 jedec_id;
N	__le16 date_code;
N	u8 reserved2[13];
N
N	/* memory organization block */
N	__le32 byte_per_page;
N	__le16 spare_bytes_per_page;
N	__le32 data_bytes_per_ppage;
N	__le16 spare_bytes_per_ppage;
N	__le32 pages_per_block;
N	__le32 blocks_per_lun;
N	u8 lun_count;
N	u8 addr_cycles;
N	u8 bits_per_cell;
N	__le16 bb_per_lun;
N	__le16 block_endurance;
N	u8 guaranteed_good_blocks;
N	__le16 guaranteed_block_endurance;
N	u8 programs_per_page;
N	u8 ppage_attr;
N	u8 ecc_bits;
N	u8 interleaved_bits;
N	u8 interleaved_ops;
N	u8 reserved3[13];
N
N	/* electrical parameter block */
N	u8 io_pin_capacitance_max;
N	__le16 async_timing_mode;
N	__le16 program_cache_timing_mode;
N	__le16 t_prog;
N	__le16 t_bers;
N	__le16 t_r;
N	__le16 t_ccs;
N	__le16 src_sync_timing_mode;
N	__le16 src_ssync_features;
N	__le16 clk_pin_capacitance_typ;
N	__le16 io_pin_capacitance_typ;
N	__le16 input_pin_capacitance_typ;
N	u8 input_pin_capacitance_max;
N	u8 driver_strenght_support;
N	__le16 t_int_r;
N	__le16 t_ald;
N	u8 reserved4[7];
N
N	/* vendor */
N	u8 reserved5[90];
N
N	__le16 crc;
N} __attribute__((packed));
N
N#define ONFI_CRC_BASE	0x4F4E
N
N/**
N * struct nand_hw_control - Control structure for hardware controller (e.g ECC generator) shared among independent devices
N * @lock:               protection lock
N * @active:		the mtd device which holds the controller currently
N * @wq:			wait queue to sleep on if a NAND operation is in
N *			progress used instead of the per chip wait queue
N *			when a hw controller is available.
N */
Nstruct nand_hw_control {
N/* XXX U-BOOT XXX */
N#if 0
S	spinlock_t	 lock;
S	wait_queue_head_t wq;
N#endif
N	struct nand_chip *active;
N};
N
N/**
N * struct nand_ecc_ctrl - Control structure for ecc
N * @mode:	ecc mode
N * @steps:	number of ecc steps per page
N * @size:	data bytes per ecc step
N * @bytes:	ecc bytes per step
N * @total:	total number of ecc bytes per page
N * @prepad:	padding information for syndrome based ecc generators
N * @postpad:	padding information for syndrome based ecc generators
N * @layout:	ECC layout control struct pointer
N * @priv:	pointer to private ecc control data
N * @hwctl:	function to control hardware ecc generator. Must only
N *		be provided if an hardware ECC is available
N * @calculate:	function for ecc calculation or readback from ecc hardware
N * @correct:	function for ecc correction, matching to ecc generator (sw/hw)
N * @read_page_raw:	function to read a raw page without ECC
N * @write_page_raw:	function to write a raw page without ECC
N * @read_page:	function to read a page according to the ecc generator
N *		requirements.
N * @read_subpage:	function to read parts of the page covered by ECC.
N * @write_page:	function to write a page according to the ecc generator
N *		requirements.
N * @read_oob:	function to read chip OOB data
N * @write_oob:	function to write chip OOB data
N */
Nstruct nand_ecc_ctrl {
N	nand_ecc_modes_t mode;
N	int steps;
N	int size;
N	int bytes;
N	int total;
N	int prepad;
N	int postpad;
N	struct nand_ecclayout	*layout;
N	void *priv;
N	void (*hwctl)(struct mtd_info *mtd, int mode);
N	int (*calculate)(struct mtd_info *mtd, const uint8_t *dat,
N			uint8_t *ecc_code);
N	int (*correct)(struct mtd_info *mtd, uint8_t *dat, uint8_t *read_ecc,
N			uint8_t *calc_ecc);
N	int (*read_page_raw)(struct mtd_info *mtd, struct nand_chip *chip,
N			uint8_t *buf, int page);
N	void (*write_page_raw)(struct mtd_info *mtd, struct nand_chip *chip,
N			const uint8_t *buf);
N	int (*read_page)(struct mtd_info *mtd, struct nand_chip *chip,
N			uint8_t *buf, int page);
N	int (*read_subpage)(struct mtd_info *mtd, struct nand_chip *chip,
N			uint32_t offs, uint32_t len, uint8_t *buf);
N	void (*write_page)(struct mtd_info *mtd, struct nand_chip *chip,
N			const uint8_t *buf);
N	int (*read_oob)(struct mtd_info *mtd, struct nand_chip *chip, int page,
N			int sndcmd);
N	int (*write_oob)(struct mtd_info *mtd, struct nand_chip *chip,
N			int page);
N};
N
N/**
N * struct nand_buffers - buffer structure for read/write
N * @ecccalc:	buffer for calculated ecc
N * @ecccode:	buffer for ecc read from flash
N * @databuf:	buffer for data - dynamically sized
N *
N * Do not change the order of buffers. databuf and oobrbuf must be in
N * consecutive order.
N */
Nstruct nand_buffers {
Nuint8_t ecccalc[NAND_MAX_OOBSIZE];
Xuint8_t ecccalc[576];
Nuint8_t ecccode[NAND_MAX_OOBSIZE];
Xuint8_t ecccode[576];
Nuint8_t databuf[NAND_MAX_PAGESIZE + NAND_MAX_OOBSIZE];
Xuint8_t databuf[8192 + 576];
N};
N
N/**
N * struct nand_chip - NAND Private Flash Chip Data
N * @IO_ADDR_R:		[BOARDSPECIFIC] address to read the 8 I/O lines of the
N *			flash device
N * @IO_ADDR_W:		[BOARDSPECIFIC] address to write the 8 I/O lines of the
N *			flash device.
N * @read_byte:		[REPLACEABLE] read one byte from the chip
N * @read_word:		[REPLACEABLE] read one word from the chip
N * @write_buf:		[REPLACEABLE] write data from the buffer to the chip
N * @read_buf:		[REPLACEABLE] read data from the chip into the buffer
N * @verify_buf:		[REPLACEABLE] verify buffer contents against the chip
N *			data.
N * @select_chip:	[REPLACEABLE] select chip nr
N * @block_bad:		[REPLACEABLE] check, if the block is bad
N * @block_markbad:	[REPLACEABLE] mark the block bad
N * @cmd_ctrl:		[BOARDSPECIFIC] hardwarespecific function for controlling
N *			ALE/CLE/nCE. Also used to write command and address
N * @init_size:		[BOARDSPECIFIC] hardwarespecific function for setting
N *			mtd->oobsize, mtd->writesize and so on.
N *			@id_data contains the 8 bytes values of NAND_CMD_READID.
N *			Return with the bus width.
N * @dev_ready:		[BOARDSPECIFIC] hardwarespecific function for accesing
N *			device ready/busy line. If set to NULL no access to
N *			ready/busy is available and the ready/busy information
N *			is read from the chip status register.
N * @cmdfunc:		[REPLACEABLE] hardwarespecific function for writing
N *			commands to the chip.
N * @waitfunc:		[REPLACEABLE] hardwarespecific function for wait on
N *			ready.
N * @ecc:		[BOARDSPECIFIC] ecc control ctructure
N * @buffers:		buffer structure for read/write
N * @hwcontrol:		platform-specific hardware control structure
N * @ops:		oob operation operands
N * @erase_cmd:		[INTERN] erase command write function, selectable due
N *			to AND support.
N * @scan_bbt:		[REPLACEABLE] function to scan bad block table
N * @chip_delay:		[BOARDSPECIFIC] chip dependent delay for transferring
N *			data from array to read regs (tR).
N * @state:		[INTERN] the current state of the NAND device
N * @oob_poi:		poison value buffer
N * @page_shift:		[INTERN] number of address bits in a page (column
N *			address bits).
N * @phys_erase_shift:	[INTERN] number of address bits in a physical eraseblock
N * @bbt_erase_shift:	[INTERN] number of address bits in a bbt entry
N * @chip_shift:		[INTERN] number of address bits in one chip
N * @options:		[BOARDSPECIFIC] various chip options. They can partly
N *			be set to inform nand_scan about special functionality.
N *			See the defines for further explanation.
N * @badblockpos:	[INTERN] position of the bad block marker in the oob
N *			area.
N * @badblockbits:	[INTERN] number of bits to left-shift the bad block
N *			number
N * @cellinfo:		[INTERN] MLC/multichip data from chip ident
N * @numchips:		[INTERN] number of physical chips
N * @chipsize:		[INTERN] the size of one chip for multichip arrays
N * @pagemask:		[INTERN] page number mask = number of (pages / chip) - 1
N * @pagebuf:		[INTERN] holds the pagenumber which is currently in
N *			data_buf.
N * @subpagesize:	[INTERN] holds the subpagesize
N * @onfi_version:	[INTERN] holds the chip ONFI version (BCD encoded),
N *			non 0 if ONFI supported.
N * @onfi_params:	[INTERN] holds the ONFI page parameter when ONFI is
N *			supported, 0 otherwise.
N * @ecclayout:		[REPLACEABLE] the default ecc placement scheme
N * @bbt:		[INTERN] bad block table pointer
N * @bbt_td:		[REPLACEABLE] bad block table descriptor for flash
N *			lookup.
N * @bbt_md:		[REPLACEABLE] bad block table mirror descriptor
N * @badblock_pattern:	[REPLACEABLE] bad block scan pattern used for initial
N *			bad block scan.
N * @controller:		[REPLACEABLE] a pointer to a hardware controller
N *			structure which is shared among multiple independend
N *			devices.
N * @priv:		[OPTIONAL] pointer to private chip date
N * @errstat:		[OPTIONAL] hardware specific function to perform
N *			additional error status checks (determine if errors are
N *			correctable).
N * @write_page:		[REPLACEABLE] High-level page write function
N */
N
Nstruct nand_chip {
N	void __iomem *IO_ADDR_R;
X	void  *IO_ADDR_R;
N	void __iomem *IO_ADDR_W;
X	void  *IO_ADDR_W;
N
N	uint8_t (*read_byte)(struct mtd_info *mtd);
N	u16 (*read_word)(struct mtd_info *mtd);
N	void (*write_buf)(struct mtd_info *mtd, const uint8_t *buf, int len);
N	void (*read_buf)(struct mtd_info *mtd, uint8_t *buf, int len);
N	int (*verify_buf)(struct mtd_info *mtd, const uint8_t *buf, int len);
N	void (*select_chip)(struct mtd_info *mtd, int chip);
N	int (*block_bad)(struct mtd_info *mtd, loff_t ofs, int getchip);
N	int (*block_markbad)(struct mtd_info *mtd, loff_t ofs);
N	void (*cmd_ctrl)(struct mtd_info *mtd, int dat, unsigned int ctrl);
N	int (*init_size)(struct mtd_info *mtd, struct nand_chip *this,
N			u8 *id_data);
N	int (*dev_ready)(struct mtd_info *mtd);
N	void (*cmdfunc)(struct mtd_info *mtd, unsigned command, int column,
N			int page_addr);
N	int(*waitfunc)(struct mtd_info *mtd, struct nand_chip *this);
N	void (*erase_cmd)(struct mtd_info *mtd, int page);
N	int (*scan_bbt)(struct mtd_info *mtd);
N	int (*errstat)(struct mtd_info *mtd, struct nand_chip *this, int state,
N			int status, int page);
N	int (*write_page)(struct mtd_info *mtd, struct nand_chip *chip,
N			const uint8_t *buf, int page, int cached, int raw);
N
N	int chip_delay;
N	unsigned int options;
N
N	int page_shift;
N	int phys_erase_shift;
N	int bbt_erase_shift;
N	int chip_shift;
N	int numchips;
N	uint64_t chipsize;
N	int pagemask;
N	int pagebuf;
N	int subpagesize;
N	uint8_t cellinfo;
N	int badblockpos;
N	int badblockbits;
N
N	int onfi_version;
N#ifdef CONFIG_SYS_NAND_ONFI_DETECTION
S	struct nand_onfi_params onfi_params;
N#endif
N
N	int state;
N
N	uint8_t *oob_poi;
N	struct nand_hw_control *controller;
N	struct nand_ecclayout *ecclayout;
N
N	struct nand_ecc_ctrl ecc;
N	struct nand_buffers *buffers;
N	struct nand_hw_control hwcontrol;
N
N	struct mtd_oob_ops ops;
N
N	uint8_t *bbt;
N	struct nand_bbt_descr *bbt_td;
N	struct nand_bbt_descr *bbt_md;
N
N	struct nand_bbt_descr *badblock_pattern;
N
N	void *priv;
N};
N
N/*
N * NAND Flash Manufacturer ID Codes
N */
N#define NAND_MFR_TOSHIBA	0x98
N#define NAND_MFR_SAMSUNG	0xec
N#define NAND_MFR_FUJITSU	0x04
N#define NAND_MFR_NATIONAL	0x8f
N#define NAND_MFR_RENESAS	0x07
N#define NAND_MFR_STMICRO	0x20
N#define NAND_MFR_HYNIX		0xad
N#define NAND_MFR_MICRON		0x2c
N#define NAND_MFR_AMD		0x01
N
N/**
N * struct nand_flash_dev - NAND Flash Device ID Structure
N * @name:	Identify the device type
N * @id:		device ID code
N * @pagesize:	Pagesize in bytes. Either 256 or 512 or 0
N *		If the pagesize is 0, then the real pagesize
N *		and the eraseize are determined from the
N *		extended id bytes in the chip
N * @erasesize:	Size of an erase block in the flash device.
N * @chipsize:	Total chipsize in Mega Bytes
N * @options:	Bitfield to store chip relevant options
N */
Nstruct nand_flash_dev {
N	char *name;
N	int id;
N	unsigned long pagesize;
N	unsigned long chipsize;
N	unsigned long erasesize;
N	unsigned long options;
N};
N
N/**
N * struct nand_manufacturers - NAND Flash Manufacturer ID Structure
N * @name:	Manufacturer name
N * @id:		manufacturer ID code of device.
N*/
Nstruct nand_manufacturers {
N	int id;
N	char *name;
N};
N
Nextern const struct nand_flash_dev nand_flash_ids[];
Nextern const struct nand_manufacturers nand_manuf_ids[];
N
Nextern int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd);
Nextern int nand_update_bbt(struct mtd_info *mtd, loff_t offs);
Nextern int nand_default_bbt(struct mtd_info *mtd);
Nextern int nand_isbad_bbt(struct mtd_info *mtd, loff_t offs, int allowbbt);
Nextern int nand_erase_nand(struct mtd_info *mtd, struct erase_info *instr,
N			   int allowbbt);
Nextern int nand_do_read(struct mtd_info *mtd, loff_t from, size_t len,
N			size_t *retlen, uint8_t *buf);
N
N/*
N* Constants for oob configuration
N*/
N#define NAND_SMALL_BADBLOCK_POS		5
N#define NAND_LARGE_BADBLOCK_POS		0
N
N/**
N * struct platform_nand_chip - chip level device structure
N * @nr_chips:		max. number of chips to scan for
N * @chip_offset:	chip number offset
N * @nr_partitions:	number of partitions pointed to by partitions (or zero)
N * @partitions:		mtd partition list
N * @chip_delay:		R/B delay value in us
N * @options:		Option flags, e.g. 16bit buswidth
N * @ecclayout:		ecc layout info structure
N * @part_probe_types:	NULL-terminated array of probe types
N * @priv:		hardware controller specific settings
N */
Nstruct platform_nand_chip {
N	int nr_chips;
N	int chip_offset;
N	int nr_partitions;
N	struct mtd_partition *partitions;
N	struct nand_ecclayout *ecclayout;
N	int chip_delay;
N	unsigned int options;
N	const char **part_probe_types;
N	void *priv;
N};
N
N/* Keep gcc happy */
Nstruct platform_device;
N
N/**
N * struct platform_nand_ctrl - controller level device structure
N * @hwcontrol:		platform specific hardware control structure
N * @dev_ready:		platform specific function to read ready/busy pin
N * @select_chip:	platform specific chip select function
N * @cmd_ctrl:		platform specific function for controlling
N *			ALE/CLE/nCE. Also used to write command and address
N * @priv:		private data to transport driver specific settings
N *
N * All fields are optional and depend on the hardware driver requirements
N */
Nstruct platform_nand_ctrl {
N	void (*hwcontrol)(struct mtd_info *mtd, int cmd);
N	int (*dev_ready)(struct mtd_info *mtd);
N	void (*select_chip)(struct mtd_info *mtd, int chip);
N	void (*cmd_ctrl)(struct mtd_info *mtd, int dat, unsigned int ctrl);
N	void *priv;
N};
N
N/**
N * struct platform_nand_data - container structure for platform-specific data
N * @chip:		chip level chip structure
N * @ctrl:		controller level device structure
N */
Nstruct platform_nand_data {
N	struct platform_nand_chip chip;
N	struct platform_nand_ctrl ctrl;
N};
N
N/* Some helpers to access the data structures */
Nstatic __inline
Nstruct platform_nand_chip *get_platform_nandchip(struct mtd_info *mtd)
N{
N	struct nand_chip *chip = mtd->priv;
N
N	return chip->priv;
N}
N
N/* Standard NAND functions from nand_base.c */
Nvoid nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len);
Nvoid nand_write_buf16(struct mtd_info *mtd, const uint8_t *buf, int len);
Nvoid nand_read_buf(struct mtd_info *mtd, uint8_t *buf, int len);
Nvoid nand_read_buf16(struct mtd_info *mtd, uint8_t *buf, int len);
Nuint8_t nand_read_byte(struct mtd_info *mtd);
N
N#endif /* __LINUX_MTD_NAND_H */
L 14 "..\..\common\src\BSP\ThirdParty\yaffs2\nand_ids.c" 2
N/*
N*	Chip ID list
N*
N*	Name. ID code, pagesize, chipsize in MegaByte, eraseblock size,
N*	options
N*
N*	Pagesize; 0, 256, 512
N*	0	get this information from the extended chip ID
N+	256	256 Byte page size
N*	512	512 Byte page size
N*/
Nconst struct nand_flash_dev nand_flash_ids[] = {
N
N#ifdef CONFIG_MTD_NAND_MUSEUM_IDS
S	{"NAND 1MiB 5V 8-bit",		0x6e, 256, 1, 0x1000, 0},
S	{"NAND 2MiB 5V 8-bit",		0x64, 256, 2, 0x1000, 0},
S	{"NAND 4MiB 5V 8-bit",		0x6b, 512, 4, 0x2000, 0},
S	{"NAND 1MiB 3,3V 8-bit",	0xe8, 256, 1, 0x1000, 0},
S	{"NAND 1MiB 3,3V 8-bit",	0xec, 256, 1, 0x1000, 0},
S	{"NAND 2MiB 3,3V 8-bit",	0xea, 256, 2, 0x1000, 0},
S	{"NAND 4MiB 3,3V 8-bit", 	0xd5, 512, 4, 0x2000, 0},
S	{"NAND 4MiB 3,3V 8-bit",	0xe3, 512, 4, 0x2000, 0},
S	{"NAND 4MiB 3,3V 8-bit",	0xe5, 512, 4, 0x2000, 0},
S	{"NAND 8MiB 3,3V 8-bit",	0xd6, 512, 8, 0x2000, 0},
S
S	{"NAND 8MiB 1,8V 8-bit",	0x39, 512, 8, 0x2000, 0},
S	{"NAND 8MiB 3,3V 8-bit",	0xe6, 512, 8, 0x2000, 0},
S	{"NAND 8MiB 1,8V 16-bit",	0x49, 512, 8, 0x2000, NAND_BUSWIDTH_16},
S	{"NAND 8MiB 3,3V 16-bit",	0x59, 512, 8, 0x2000, NAND_BUSWIDTH_16},
N#endif
N
N	{"NAND 16MiB 1,8V 8-bit",	0x33, 512, 16, 0x4000, 0},
N	{"NAND 16MiB 3,3V 8-bit",	0x73, 512, 16, 0x4000, 0},
N	{"NAND 16MiB 1,8V 16-bit",	0x43, 512, 16, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 16MiB 1,8V 16-bit",	0x43, 512, 16, 0x4000, 0x00000002},
N	{"NAND 16MiB 3,3V 16-bit",	0x53, 512, 16, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 16MiB 3,3V 16-bit",	0x53, 512, 16, 0x4000, 0x00000002},
N
N	{"NAND 32MiB 1,8V 8-bit",	0x35, 512, 32, 0x4000, 0},
N	{"NAND 32MiB 3,3V 8-bit",	0x75, 512, 32, 0x4000, 0},
N	{"NAND 32MiB 1,8V 16-bit",	0x45, 512, 32, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 32MiB 1,8V 16-bit",	0x45, 512, 32, 0x4000, 0x00000002},
N	{"NAND 32MiB 3,3V 16-bit",	0x55, 512, 32, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 32MiB 3,3V 16-bit",	0x55, 512, 32, 0x4000, 0x00000002},
N
N	{"NAND 64MiB 1,8V 8-bit",	0x36, 512, 64, 0x4000, 0},
N	{"NAND 64MiB 3,3V 8-bit",	0x76, 512, 64, 0x4000, 0},
N	{"NAND 64MiB 1,8V 16-bit",	0x46, 512, 64, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 64MiB 1,8V 16-bit",	0x46, 512, 64, 0x4000, 0x00000002},
N	{"NAND 64MiB 3,3V 16-bit",	0x56, 512, 64, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 64MiB 3,3V 16-bit",	0x56, 512, 64, 0x4000, 0x00000002},
N
N	{"NAND 128MiB 1,8V 8-bit",	0x78, 512, 128, 0x4000, 0},
N	{"NAND 128MiB 1,8V 8-bit",	0x39, 512, 128, 0x4000, 0},
N	{"NAND 128MiB 3,3V 8-bit",	0x79, 512, 128, 0x4000, 0},
N	{"NAND 128MiB 1,8V 16-bit",	0x72, 512, 128, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 128MiB 1,8V 16-bit",	0x72, 512, 128, 0x4000, 0x00000002},
N	{"NAND 128MiB 1,8V 16-bit",	0x49, 512, 128, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 128MiB 1,8V 16-bit",	0x49, 512, 128, 0x4000, 0x00000002},
N	{"NAND 128MiB 3,3V 16-bit",	0x74, 512, 128, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 128MiB 3,3V 16-bit",	0x74, 512, 128, 0x4000, 0x00000002},
N	{"NAND 128MiB 3,3V 16-bit",	0x59, 512, 128, 0x4000, NAND_BUSWIDTH_16},
X	{"NAND 128MiB 3,3V 16-bit",	0x59, 512, 128, 0x4000, 0x00000002},
N
N	{"NAND 256MiB 3,3V 8-bit",	0x71, 512, 256, 0x4000, 0},
N
N	/*
N	 * These are the new chips with large page size. The pagesize and the
N	 * erasesize is determined from the extended id bytes
N	 */
N#define LP_OPTIONS (NAND_SAMSUNG_LP_OPTIONS | NAND_NO_READRDY | NAND_NO_AUTOINCR)
N#define LP_OPTIONS16 (LP_OPTIONS | NAND_BUSWIDTH_16)
N
N	/*512 Megabit */
N	{"NAND 64MiB 1,8V 8-bit",	0xA2, 0,  64, 0, LP_OPTIONS},
X	{"NAND 64MiB 1,8V 8-bit",	0xA2, 0,  64, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 64MiB 1,8V 8-bit",	0xA0, 0,  64, 0, LP_OPTIONS},
X	{"NAND 64MiB 1,8V 8-bit",	0xA0, 0,  64, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 64MiB 3,3V 8-bit",	0xF2, 0,  64, 0, LP_OPTIONS},
X	{"NAND 64MiB 3,3V 8-bit",	0xF2, 0,  64, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 64MiB 3,3V 8-bit",	0xD0, 0,  64, 0, LP_OPTIONS},
X	{"NAND 64MiB 3,3V 8-bit",	0xD0, 0,  64, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 64MiB 1,8V 16-bit",	0xB2, 0,  64, 0, LP_OPTIONS16},
X	{"NAND 64MiB 1,8V 16-bit",	0xB2, 0,  64, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 64MiB 1,8V 16-bit",	0xB0, 0,  64, 0, LP_OPTIONS16},
X	{"NAND 64MiB 1,8V 16-bit",	0xB0, 0,  64, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 64MiB 3,3V 16-bit",	0xC2, 0,  64, 0, LP_OPTIONS16},
X	{"NAND 64MiB 3,3V 16-bit",	0xC2, 0,  64, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 64MiB 3,3V 16-bit",	0xC0, 0,  64, 0, LP_OPTIONS16},
X	{"NAND 64MiB 3,3V 16-bit",	0xC0, 0,  64, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 1 Gigabit */
N	{"NAND 128MiB 1,8V 8-bit",	0xA1, 0, 128, 0, LP_OPTIONS},
X	{"NAND 128MiB 1,8V 8-bit",	0xA1, 0, 128, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 128MiB 3,3V 8-bit",	0xF1, 0, 128, 0, LP_OPTIONS},
X	{"NAND 128MiB 3,3V 8-bit",	0xF1, 0, 128, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 128MiB 3,3V 8-bit",	0xD1, 0, 128, 0, LP_OPTIONS},
X	{"NAND 128MiB 3,3V 8-bit",	0xD1, 0, 128, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 128MiB 1,8V 16-bit",	0xB1, 0, 128, 0, LP_OPTIONS16},
X	{"NAND 128MiB 1,8V 16-bit",	0xB1, 0, 128, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 128MiB 3,3V 16-bit",	0xC1, 0, 128, 0, LP_OPTIONS16},
X	{"NAND 128MiB 3,3V 16-bit",	0xC1, 0, 128, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 128MiB 1,8V 16-bit",     0xAD, 0, 128, 0, LP_OPTIONS16},
X	{"NAND 128MiB 1,8V 16-bit",     0xAD, 0, 128, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 2 Gigabit */
N	{"NAND 256MiB 1,8V 8-bit",	0xAA, 0, 256, 0, LP_OPTIONS},
X	{"NAND 256MiB 1,8V 8-bit",	0xAA, 0, 256, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 256MiB 3,3V 8-bit",	0xDA, 0, 256, 0, LP_OPTIONS},
X	{"NAND 256MiB 3,3V 8-bit",	0xDA, 0, 256, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 256MiB 1,8V 16-bit",	0xBA, 0, 256, 0, LP_OPTIONS16},
X	{"NAND 256MiB 1,8V 16-bit",	0xBA, 0, 256, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 256MiB 3,3V 16-bit",	0xCA, 0, 256, 0, LP_OPTIONS16},
X	{"NAND 256MiB 3,3V 16-bit",	0xCA, 0, 256, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 4 Gigabit */
N	{"NAND 512MiB 1,8V 8-bit",	0xAC, 0, 512, 0, LP_OPTIONS},
X	{"NAND 512MiB 1,8V 8-bit",	0xAC, 0, 512, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 512MiB 3,3V 8-bit",	0xDC, 0, 512, 0, LP_OPTIONS},
X	{"NAND 512MiB 3,3V 8-bit",	0xDC, 0, 512, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 512MiB 1,8V 16-bit",	0xBC, 0, 512, 0, LP_OPTIONS16},
X	{"NAND 512MiB 1,8V 16-bit",	0xBC, 0, 512, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 512MiB 3,3V 16-bit",	0xCC, 0, 512, 0, LP_OPTIONS16},
X	{"NAND 512MiB 3,3V 16-bit",	0xCC, 0, 512, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 8 Gigabit */
N	{"NAND 1GiB 1,8V 8-bit",	0xA3, 0, 1024, 0, LP_OPTIONS},
X	{"NAND 1GiB 1,8V 8-bit",	0xA3, 0, 1024, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 1GiB 3,3V 8-bit",	0xD3, 0, 1024, 0, LP_OPTIONS},
X	{"NAND 1GiB 3,3V 8-bit",	0xD3, 0, 1024, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 1GiB 1,8V 16-bit",	0xB3, 0, 1024, 0, LP_OPTIONS16},
X	{"NAND 1GiB 1,8V 16-bit",	0xB3, 0, 1024, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 1GiB 3,3V 16-bit",	0xC3, 0, 1024, 0, LP_OPTIONS16},
X	{"NAND 1GiB 3,3V 16-bit",	0xC3, 0, 1024, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 16 Gigabit */
N	{"NAND 2GiB 1,8V 8-bit",	0xA5, 0, 2048, 0, LP_OPTIONS},
X	{"NAND 2GiB 1,8V 8-bit",	0xA5, 0, 2048, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 2GiB 3,3V 8-bit",	0xD5, 0, 2048, 0, LP_OPTIONS},
X	{"NAND 2GiB 3,3V 8-bit",	0xD5, 0, 2048, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 2GiB 1,8V 16-bit",	0xB5, 0, 2048, 0, LP_OPTIONS16},
X	{"NAND 2GiB 1,8V 16-bit",	0xB5, 0, 2048, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 2GiB 3,3V 16-bit",	0xC5, 0, 2048, 0, LP_OPTIONS16},
X	{"NAND 2GiB 3,3V 16-bit",	0xC5, 0, 2048, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 32 Gigabit */
N	{"NAND 4GiB 1,8V 8-bit",	0xA7, 0, 4096, 0, LP_OPTIONS},
X	{"NAND 4GiB 1,8V 8-bit",	0xA7, 0, 4096, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 4GiB 3,3V 8-bit",	0xD7, 0, 4096, 0, LP_OPTIONS},
X	{"NAND 4GiB 3,3V 8-bit",	0xD7, 0, 4096, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 4GiB 1,8V 16-bit",	0xB7, 0, 4096, 0, LP_OPTIONS16},
X	{"NAND 4GiB 1,8V 16-bit",	0xB7, 0, 4096, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 4GiB 3,3V 16-bit",	0xC7, 0, 4096, 0, LP_OPTIONS16},
X	{"NAND 4GiB 3,3V 16-bit",	0xC7, 0, 4096, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 64 Gigabit */
N	{"NAND 8GiB 1,8V 8-bit",	0xAE, 0, 8192, 0, LP_OPTIONS},
X	{"NAND 8GiB 1,8V 8-bit",	0xAE, 0, 8192, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 8GiB 3,3V 8-bit",	0xDE, 0, 8192, 0, LP_OPTIONS},
X	{"NAND 8GiB 3,3V 8-bit",	0xDE, 0, 8192, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 8GiB 1,8V 16-bit",	0xBE, 0, 8192, 0, LP_OPTIONS16},
X	{"NAND 8GiB 1,8V 16-bit",	0xBE, 0, 8192, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 8GiB 3,3V 16-bit",	0xCE, 0, 8192, 0, LP_OPTIONS16},
X	{"NAND 8GiB 3,3V 16-bit",	0xCE, 0, 8192, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 128 Gigabit */
N	{"NAND 16GiB 1,8V 8-bit",	0x1A, 0, 16384, 0, LP_OPTIONS},
X	{"NAND 16GiB 1,8V 8-bit",	0x1A, 0, 16384, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 16GiB 3,3V 8-bit",	0x3A, 0, 16384, 0, LP_OPTIONS},
X	{"NAND 16GiB 3,3V 8-bit",	0x3A, 0, 16384, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 16GiB 1,8V 16-bit",	0x2A, 0, 16384, 0, LP_OPTIONS16},
X	{"NAND 16GiB 1,8V 16-bit",	0x2A, 0, 16384, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 16GiB 3,3V 16-bit",	0x4A, 0, 16384, 0, LP_OPTIONS16},
X	{"NAND 16GiB 3,3V 16-bit",	0x4A, 0, 16384, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 256 Gigabit */
N	{"NAND 32GiB 1,8V 8-bit",	0x1C, 0, 32768, 0, LP_OPTIONS},
X	{"NAND 32GiB 1,8V 8-bit",	0x1C, 0, 32768, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 32GiB 3,3V 8-bit",	0x3C, 0, 32768, 0, LP_OPTIONS},
X	{"NAND 32GiB 3,3V 8-bit",	0x3C, 0, 32768, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 32GiB 1,8V 16-bit",	0x2C, 0, 32768, 0, LP_OPTIONS16},
X	{"NAND 32GiB 1,8V 16-bit",	0x2C, 0, 32768, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 32GiB 3,3V 16-bit",	0x4C, 0, 32768, 0, LP_OPTIONS16},
X	{"NAND 32GiB 3,3V 16-bit",	0x4C, 0, 32768, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/* 512 Gigabit */
N	{"NAND 64GiB 1,8V 8-bit",	0x1E, 0, 65536, 0, LP_OPTIONS},
X	{"NAND 64GiB 1,8V 8-bit",	0x1E, 0, 65536, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 64GiB 3,3V 8-bit",	0x3E, 0, 65536, 0, LP_OPTIONS},
X	{"NAND 64GiB 3,3V 8-bit",	0x3E, 0, 65536, 0, ((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001)},
N	{"NAND 64GiB 1,8V 16-bit",	0x2E, 0, 65536, 0, LP_OPTIONS16},
X	{"NAND 64GiB 1,8V 16-bit",	0x2E, 0, 65536, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N	{"NAND 64GiB 3,3V 16-bit",	0x4E, 0, 65536, 0, LP_OPTIONS16},
X	{"NAND 64GiB 3,3V 16-bit",	0x4E, 0, 65536, 0, (((0x00000004 | 0x00000008 | 0x00000010) | 0x00000100 | 0x00000001) | 0x00000002)},
N
N	/*
N	 * Renesas AND 1 Gigabit. Those chips do not support extended id and
N	 * have a strange page/block layout !  The chosen minimum erasesize is
N	 * 4 * 2 * 2048 = 16384 Byte, as those chips have an array of 4 page
N	 * planes 1 block = 2 pages, but due to plane arrangement the blocks
N	 * 0-3 consists of page 0 + 4,1 + 5, 2 + 6, 3 + 7 Anyway JFFS2 would
N	 * increase the eraseblock size so we chose a combined one which can be
N	 * erased in one go There are more speed improvements for reads and
N	 * writes possible, but not implemented now
N	 */
N	{"AND 128MiB 3,3V 8-bit",	0x01, 2048, 128, 0x4000,
N	 NAND_IS_AND | NAND_NO_AUTOINCR |NAND_NO_READRDY | NAND_4PAGE_ARRAY |
X	 0x00000020 | 0x00000001 |0x00000100 | 0x00000040 |
N	 BBT_AUTO_REFRESH
X	 0x00000080
N	},
N
N	{NULL,}
X	{((void *)0),}
N};
N
N/*
N*	Manufacturer ID list
N*/
Nconst struct nand_manufacturers nand_manuf_ids[] = {
N	{NAND_MFR_TOSHIBA, "Toshiba"},
X	{0x98, "Toshiba"},
N	{NAND_MFR_SAMSUNG, "Samsung"},
X	{0xec, "Samsung"},
N	{NAND_MFR_FUJITSU, "Fujitsu"},
X	{0x04, "Fujitsu"},
N	{NAND_MFR_NATIONAL, "National"},
X	{0x8f, "National"},
N	{NAND_MFR_RENESAS, "Renesas"},
X	{0x07, "Renesas"},
N	{NAND_MFR_STMICRO, "ST Micro"},
X	{0x20, "ST Micro"},
N	{NAND_MFR_HYNIX, "Hynix"},
X	{0xad, "Hynix"},
N	{NAND_MFR_MICRON, "Micron"},
X	{0x2c, "Micron"},
N	{NAND_MFR_AMD, "AMD"},
X	{0x01, "AMD"},
N	{0x0, "Unknown"}
N};
