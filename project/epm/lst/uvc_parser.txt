; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uvc_parser.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uvc_parser.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uvc_parser.crf ..\..\common\src\BSP\Library\USB_HOST\src_uvc\uvc_parser.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  uvc_parse_control_interface PROC
;;;32      */
;;;33     int uvc_parse_control_interface(UVC_DEV_T *vdev, IFACE_T *iface)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;34     {
000004  e1a08000          MOV      r8,r0
000008  e1a0a001          MOV      r10,r1
;;;35         DESC_CONF_T    *config;
;;;36         DESC_IF_T      *ifd;
;;;37         DESC_VC_HDR_T  *ifd_vc_hdr;
;;;38         uint8_t        *bptr;
;;;39         int            size;
;;;40     
;;;41         UVC_DBGMSG("UVC parsing video control interface %d...\n", iface->if_num);
;;;42     
;;;43         vdev->iface_ctrl = iface;
00000c  e588a0d4          STR      r10,[r8,#0xd4]
;;;44     
;;;45         bptr = vdev->udev->cfd_buff;
000010  e5980000          LDR      r0,[r8,#0]
000014  e590501c          LDR      r5,[r0,#0x1c]
;;;46         config = (DESC_CONF_T *)bptr;
000018  e1a09005          MOV      r9,r5
;;;47     
;;;48         /* step over configuration descritpor */
;;;49         bptr += config->bLength;
00001c  e5d90000          LDRB     r0,[r9,#0]
000020  e0855000          ADD      r5,r5,r0
;;;50         size = config->wTotalLength - config->bLength;
000024  e5d90003          LDRB     r0,[r9,#3]
000028  e5d91002          LDRB     r1,[r9,#2]
00002c  e1810400          ORR      r0,r1,r0,LSL #8
000030  e5d91000          LDRB     r1,[r9,#0]
000034  e0407001          SUB      r7,r0,r1
;;;51     
;;;52         /*------------------------------------------------------------------------------------*/
;;;53         /*  Find this Standard Video Control Interface Descriptor                             */
;;;54         /*------------------------------------------------------------------------------------*/
;;;55         while (size >= sizeof(DESC_IF_T))
000038  ea000011          B        |L1.132|
                  |L1.60|
;;;56         {
;;;57             ifd = (DESC_IF_T *)bptr;
00003c  e1a04005          MOV      r4,r5
;;;58     
;;;59             if ((ifd->bDescriptorType == USB_DT_INTERFACE) && (ifd->bInterfaceNumber == iface->if_num))
000040  e5d40001          LDRB     r0,[r4,#1]
000044  e3500004          CMP      r0,#4
000048  1a000004          BNE      |L1.96|
00004c  e5d40002          LDRB     r0,[r4,#2]
000050  e5da1004          LDRB     r1,[r10,#4]
000054  e1500001          CMP      r0,r1
000058  1a000000          BNE      |L1.96|
;;;60                 break;
00005c  ea00000a          B        |L1.140|
                  |L1.96|
;;;61     
;;;62             if (ifd->bLength == 0)
000060  e5d40000          LDRB     r0,[r4,#0]
000064  e3500000          CMP      r0,#0
000068  1a000001          BNE      |L1.116|
;;;63                 return UVC_RET_PARSER;          /* prevent infinit loop                       */
00006c  e59f0364          LDR      r0,|L1.984|
                  |L1.112|
;;;64     
;;;65             bptr += ifd->bLength;
;;;66             size -= ifd->bLength;
;;;67         }
;;;68     
;;;69         if (size < sizeof(DESC_IF_T))
;;;70         {
;;;71             /* cannot find the Standard VC descriptor     */
;;;72             UVC_ERRMSG("UVC_RET_PARSER! - Can't find the Standard Video Control Interface!\n");
;;;73             return UVC_RET_PARSER;
;;;74         }
;;;75     
;;;76         vdev->version = ifd->bInterfaceProtocol;
;;;77     
;;;78         bptr += ifd->bLength;
;;;79         size -= ifd->bLength;
;;;80     
;;;81         /*------------------------------------------------------------------------------------*/
;;;82         /*  Parsing Video Control interface VC header descriptor                              */
;;;83         /*------------------------------------------------------------------------------------*/
;;;84         ifd_vc_hdr = (DESC_VC_HDR_T *)bptr;
;;;85     
;;;86         if ((ifd_vc_hdr->bDescriptorType != UVC_CS_INTERFACE) || (ifd_vc_hdr->bDescriptorSubType != VC_HEADER))
;;;87         {
;;;88             UVC_ERRMSG("UVC VC_HEADER not found!! 0x%x 0x%x\n", ifd_vc_hdr->bDescriptorType, ifd_vc_hdr->bDescriptorSubType);
;;;89             return UVC_RET_PARSER;
;;;90         }
;;;91     
;;;92         if (ifd_vc_hdr->bInCollection != 1)
;;;93         {
;;;94             UVC_ERRMSG("UVC - number of streaming interface is not 1! Not supported!! %d\n", ifd_vc_hdr->bInCollection);
;;;95             return UVC_RET_DRV_NOT_SUPPORTED;
;;;96         }
;;;97     
;;;98         UVC_DBGMSG("VC Interface VC_HEADER\n");
;;;99         UVC_DBGMSG("    bcdUVC: 0%x\n", ifd_vc_hdr->bcdUVC);
;;;100        UVC_DBGMSG("    baInterfaceNr: 0%x\n", ifd_vc_hdr->baInterfaceNr);
;;;101    
;;;102        // ifnum_strm = ifd_vc_hdr->baInterfaceNr;
;;;103        bptr += ifd_vc_hdr->bLength;
;;;104        size = ifd_vc_hdr->wTotalLength - ifd_vc_hdr->bLength;
;;;105    
;;;106        /*------------------------------------------------------------------------------------*/
;;;107        /*  Walk though Video Control interface descriptor group                              */
;;;108        /*------------------------------------------------------------------------------------*/
;;;109        while (size >= sizeof(DESC_HDR_T))
;;;110        {
;;;111    #ifdef UVC_DEBUG
;;;112            DESC_VC_IT_T  *ifd_it;
;;;113            DESC_VC_OT_T  *ifd_ot;
;;;114            DESC_VC_SU_T  *ifd_su;
;;;115            DESC_VC_PU_T  *ifd_pu;
;;;116            DESC_VC_EU_T  *ifd_eu;
;;;117            DESC_VC_ECU_T *ifd_ecu;
;;;118            int           i;
;;;119    #endif
;;;120    
;;;121            ifd = (DESC_IF_T *)bptr;
;;;122    
;;;123            //UVC_DBGMSG("Parse VC - [%d] [0x%x] [0x%x]\n", ((CS_HDR_T *)bptr)->bLength, ((CS_HDR_T *)bptr)->bDescriptorType, ((CS_HDR_T *)bptr)->bDescriptorSubtype);
;;;124    
;;;125            if (ifd->bDescriptorType == USB_DT_ENDPOINT)
;;;126                break;
;;;127    
;;;128            if (ifd->bDescriptorType != UVC_CS_INTERFACE)
;;;129            {
;;;130                UVC_DBGMSG("UVC VC descriptor parsing length error!! %d\n", size);
;;;131                return UVC_RET_PARSER;
;;;132            }
;;;133    
;;;134    #ifdef UVC_DEBUG
;;;135            ifd_it = (DESC_VC_IT_T *)ifd;
;;;136    
;;;137            switch (ifd_it->bDescriptorSubType)
;;;138            {
;;;139            case VC_INPUT_TERMINAL:
;;;140                ifd_it = (DESC_VC_IT_T *)ifd;
;;;141                UVC_DBGMSG("VC Interface VC_INPUT_TERMINAL\n");
;;;142                UVC_DBGMSG("    bTerminalID:    0x%x\n", ifd_it->bTerminalID);
;;;143                UVC_DBGMSG("    wTerminalType:  0x%x\n", ifd_it->wTerminalType);
;;;144                UVC_DBGMSG("    bAssocTerminal: 0x%x\n", ifd_it->bAssocTerminal);
;;;145                break;
;;;146    
;;;147            case VC_OUTPUT_TERMINAL:
;;;148                ifd_ot = (DESC_VC_OT_T *)ifd;
;;;149                UVC_DBGMSG("VC Interface VC_OUTPUT_TERMINAL\n");
;;;150                UVC_DBGMSG("    bTerminalID:    0x%x\n", ifd_ot->bTerminalID);
;;;151                UVC_DBGMSG("    wTerminalType:  0x%x\n", ifd_ot->wTerminalType);
;;;152                UVC_DBGMSG("    bAssocTerminal: 0x%x\n", ifd_ot->bAssocTerminal);
;;;153                UVC_DBGMSG("    bSourceID:      0x%x\n", ifd_ot->bSourceID);
;;;154                if (ifd_ot->wTerminalType == TT_STREAMING)
;;;155                {
;;;156                    UVC_DBGMSG("UVC USB OT found.\n");
;;;157                }
;;;158                break;
;;;159    
;;;160            case VC_SELECTOR_UNIT:
;;;161                ifd_su = (DESC_VC_SU_T *)ifd;
;;;162                UVC_DBGMSG("VC Interface VC_SELECTOR_UNIT\n");
;;;163                UVC_DBGMSG("    bUnitID:    0x%x\n", ifd_su->bUnitID);
;;;164                UVC_DBGMSG("    bNrInPins:  0x%x\n", ifd_su->bNrInPins);
;;;165                for (i = 0; i < ifd_su->bNrInPins; i++)
;;;166                    UVC_DBGMSG("    bSourceID:  0x%x\n", ifd_su->bSourceID[i]);
;;;167                break;
;;;168    
;;;169            case VC_PROCESSING_UNIT:
;;;170                ifd_pu = (DESC_VC_PU_T *)ifd;
;;;171                UVC_DBGMSG("VC Interface VC_PROCESSING_UNIT\n");
;;;172                UVC_DBGMSG("    bUnitID:          0x%x\n", ifd_pu->bUnitID);
;;;173                UVC_DBGMSG("    wMaxMultiplier:   0x%x\n", ifd_pu->wMaxMultiplier);
;;;174                UVC_DBGMSG("    bControlSize:     0x%x\n", ifd_pu->bControlSize);
;;;175                UVC_DBGMSG("    bmControls:       0x%02x%02x%02x\n", ifd_pu->bmControls[2], ifd_pu->bmControls[1], ifd_pu->bmControls[0]);
;;;176                UVC_DBGMSG("    bmVideoStandards: 0x%x\n", ifd_pu->bmVideoStandards);
;;;177                break;
;;;178    
;;;179            case VC_EXTENSION_UNIT:
;;;180                ifd_eu = (DESC_VC_EU_T *)ifd;
;;;181                UVC_DBGMSG("VC Interface VC_EXTENSION_UNIT\n");
;;;182                UVC_DBGMSG("    bUnitID:      0x%x\n", ifd_eu->bUnitID);
;;;183                UVC_DBGMSG("    bNumControls: 0x%x\n", ifd_eu->bNumControls);
;;;184                UVC_DBGMSG("    bNrInPins:    0x%x\n", ifd_eu->bNrInPins);
;;;185                break;
;;;186    
;;;187            case VC_ENCODING_UNIT:
;;;188                ifd_ecu = (DESC_VC_ECU_T *)ifd;
;;;189                UVC_DBGMSG("VC Interface VC_ENCODING_UNIT\n");
;;;190                UVC_DBGMSG("    bUnitID:   0x%x\n", ifd_ecu->bUnitID);
;;;191                UVC_DBGMSG("    bSourceID: 0x%x\n", ifd_ecu->bSourceID);
;;;192                UVC_DBGMSG("    iEncoding: 0x%x\n", ifd_ecu->iEncoding);
;;;193                break;
;;;194            }
;;;195    #endif
;;;196    
;;;197            if (ifd->bLength == 0)
;;;198                return UVC_RET_PARSER;          /* prevent infinite loop                      */
;;;199    
;;;200            bptr += ifd->bLength;
;;;201            size -= ifd->bLength;
;;;202        }
;;;203    
;;;204        /*------------------------------------------------------------------------------------*/
;;;205        /*  Parsing Endpoint descriptors of Video Control interface                           */
;;;206        /*------------------------------------------------------------------------------------*/
;;;207        while (size > sizeof(DESC_HDR_T))
;;;208        {
;;;209            DESC_EP_T   *epd;
;;;210    
;;;211            epd = (DESC_EP_T *)bptr;
;;;212    
;;;213            if (epd->bDescriptorType != USB_DT_ENDPOINT)
;;;214            {
;;;215                UVC_DBGMSG("UVC VC interface endpoint parsing error, remain %d bytes!\n", size);
;;;216                break;
;;;217            }
;;;218    
;;;219            if ((epd->bDescriptorType == USB_DT_ENDPOINT) && (epd->bmAttributes == 0x03))
;;;220            {
;;;221                //vdev->ep_sts = usbh_iface_find_ep(iface, epd->bEndpointAddress, 0);
;;;222                //if (vdev->ep_sts == NULL)
;;;223                //  UVC_DBGMSG("UVC find interrupt in endpoint failed!\n");
;;;224                //else
;;;225                //    UVC_DBGMSG("UVC interrupt in endpoint 0x%x foudn.\n", epd->bEndpointAddress);
;;;226            }
;;;227    
;;;228            if (ifd->bLength == 0)
;;;229                return UVC_RET_PARSER;          /* prevent infinite loop                      */
;;;230    
;;;231            bptr += epd->bLength;
;;;232            size -= epd->bLength;
;;;233    
;;;234            if (epd->bDescriptorType != USB_DT_ENDPOINT)
;;;235            {
;;;236                UVC_DBGMSG("UVC VC interface endpoint parsing error, remain %d bytes!\n", size);
;;;237                break;
;;;238            }
;;;239        }
;;;240    
;;;241        if (size != 0)
;;;242        {
;;;243            UVC_DBGMSG("Warning - VC interface parsing problem, remain %d bytes!\n", size);
;;;244        }
;;;245    
;;;246        return 0;
;;;247    }
000070  e8bd87f0          POP      {r4-r10,pc}
                  |L1.116|
000074  e5d40000          LDRB     r0,[r4,#0]            ;65
000078  e0855000          ADD      r5,r5,r0              ;65
00007c  e5d40000          LDRB     r0,[r4,#0]            ;66
000080  e0477000          SUB      r7,r7,r0              ;66
                  |L1.132|
000084  e3570009          CMP      r7,#9                 ;55
000088  2affffeb          BCS      |L1.60|
                  |L1.140|
00008c  e1a00000          MOV      r0,r0                 ;60
000090  e3570009          CMP      r7,#9                 ;69
000094  2a000003          BCS      |L1.168|
000098  e59f033c          LDR      r0,|L1.988|
00009c  ebfffffe          BL       sysprintf
0000a0  e59f0330          LDR      r0,|L1.984|
0000a4  eafffff1          B        |L1.112|
                  |L1.168|
0000a8  e5d40007          LDRB     r0,[r4,#7]            ;76
0000ac  e5c80004          STRB     r0,[r8,#4]            ;76
0000b0  e5d40000          LDRB     r0,[r4,#0]            ;78
0000b4  e0855000          ADD      r5,r5,r0              ;78
0000b8  e5d40000          LDRB     r0,[r4,#0]            ;79
0000bc  e0477000          SUB      r7,r7,r0              ;79
0000c0  e1a06005          MOV      r6,r5                 ;84
0000c4  e1a05006          MOV      r5,r6                 ;86
0000c8  e5d60001          LDRB     r0,[r6,#1]            ;86
0000cc  e3500024          CMP      r0,#0x24              ;86
0000d0  1a000002          BNE      |L1.224|
0000d4  e5d60002          LDRB     r0,[r6,#2]            ;86
0000d8  e3500001          CMP      r0,#1                 ;86
0000dc  0a000005          BEQ      |L1.248|
                  |L1.224|
0000e0  e5d62002          LDRB     r2,[r6,#2]            ;88
0000e4  e5d61001          LDRB     r1,[r6,#1]            ;88
0000e8  e28f0e2f          ADR      r0,|L1.992|
0000ec  ebfffffe          BL       sysprintf
0000f0  e59f02e0          LDR      r0,|L1.984|
0000f4  eaffffdd          B        |L1.112|
                  |L1.248|
0000f8  e5d6000b          LDRB     r0,[r6,#0xb]          ;92
0000fc  e3500001          CMP      r0,#1                 ;92
000100  0a000004          BEQ      |L1.280|
000104  e5d6100b          LDRB     r1,[r6,#0xb]          ;94
000108  e59f02f8          LDR      r0,|L1.1032|
00010c  ebfffffe          BL       sysprintf
000110  e3e00d2f          MVN      r0,#0xbc0             ;95
000114  eaffffd5          B        |L1.112|
                  |L1.280|
000118  e5d60000          LDRB     r0,[r6,#0]            ;103
00011c  e0855000          ADD      r5,r5,r0              ;103
000120  e5d60006          LDRB     r0,[r6,#6]            ;104
000124  e5d61005          LDRB     r1,[r6,#5]            ;104
000128  e1810400          ORR      r0,r1,r0,LSL #8       ;104
00012c  e5d61000          LDRB     r1,[r6,#0]            ;104
000130  e0407001          SUB      r7,r0,r1              ;104
000134  ea000012          B        |L1.388|
                  |L1.312|
000138  e1a04005          MOV      r4,r5                 ;121
00013c  e5d40001          LDRB     r0,[r4,#1]            ;125
000140  e3500005          CMP      r0,#5                 ;125
000144  1a000000          BNE      |L1.332|
000148  ea00000f          B        |L1.396|
                  |L1.332|
00014c  e5d40001          LDRB     r0,[r4,#1]            ;128
000150  e3500024          CMP      r0,#0x24              ;128
000154  0a000001          BEQ      |L1.352|
000158  e59f0278          LDR      r0,|L1.984|
00015c  eaffffc3          B        |L1.112|
                  |L1.352|
000160  e5d40000          LDRB     r0,[r4,#0]            ;197
000164  e3500000          CMP      r0,#0                 ;197
000168  1a000001          BNE      |L1.372|
00016c  e59f0264          LDR      r0,|L1.984|
000170  eaffffbe          B        |L1.112|
                  |L1.372|
000174  e5d40000          LDRB     r0,[r4,#0]            ;200
000178  e0855000          ADD      r5,r5,r0              ;200
00017c  e5d40000          LDRB     r0,[r4,#0]            ;201
000180  e0477000          SUB      r7,r7,r0              ;201
                  |L1.388|
000184  e3570002          CMP      r7,#2                 ;109
000188  2affffea          BCS      |L1.312|
                  |L1.396|
00018c  e1a00000          MOV      r0,r0                 ;126
000190  ea000012          B        |L1.480|
                  |L1.404|
000194  e1a01005          MOV      r1,r5                 ;211
000198  e5d10001          LDRB     r0,[r1,#1]            ;213
00019c  e3500005          CMP      r0,#5                 ;213
0001a0  0a000000          BEQ      |L1.424|
0001a4  ea00000f          B        |L1.488|
                  |L1.424|
0001a8  e5d40000          LDRB     r0,[r4,#0]            ;228
0001ac  e3500000          CMP      r0,#0                 ;228
0001b0  1a000001          BNE      |L1.444|
0001b4  e59f021c          LDR      r0,|L1.984|
0001b8  eaffffac          B        |L1.112|
                  |L1.444|
0001bc  e5d10000          LDRB     r0,[r1,#0]            ;231
0001c0  e0855000          ADD      r5,r5,r0              ;231
0001c4  e5d10000          LDRB     r0,[r1,#0]            ;232
0001c8  e0477000          SUB      r7,r7,r0              ;232
0001cc  e5d10001          LDRB     r0,[r1,#1]            ;234
0001d0  e3500005          CMP      r0,#5                 ;234
0001d4  0a000000          BEQ      |L1.476|
0001d8  ea000002          B        |L1.488|
                  |L1.476|
0001dc  e1a00000          MOV      r0,r0                 ;239
                  |L1.480|
0001e0  e3570002          CMP      r7,#2                 ;207
0001e4  8affffea          BHI      |L1.404|
                  |L1.488|
0001e8  e1a00000          MOV      r0,r0                 ;216
0001ec  e3a00000          MOV      r0,#0                 ;246
0001f0  eaffff9e          B        |L1.112|
;;;248    
                          ENDP

                  uvc_parse_streaming_interface PROC
;;;257     */
;;;258    int uvc_parse_streaming_interface(UVC_DEV_T *vdev, IFACE_T *iface)
0001f4  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;259    {
0001f8  e24dd01c          SUB      sp,sp,#0x1c
;;;260        DESC_CONF_T    *config;
;;;261        DESC_IF_T      *ifd;
;;;262        DESC_EP_T      *epd;
;;;263        DESC_VSI_HDR_T *ifd_vs_hdr;
;;;264        UVC_CTRL_T     *vc = &vdev->vc;
0001fc  e59d001c          LDR      r0,[sp,#0x1c]
000200  e2804006          ADD      r4,r0,#6
;;;265        UVC_STRM_T     *vs = &vdev->vs;
000204  e59d001c          LDR      r0,[sp,#0x1c]
000208  e28000aa          ADD      r0,r0,#0xaa
00020c  e58d0010          STR      r0,[sp,#0x10]
;;;266        uint8_t        *bptr;
;;;267        int            i, idx, size;
;;;268    
;;;269        UVC_DBGMSG("UVC parsing video streaming interface %d...\n", iface->if_num);
;;;270    
;;;271        vdev->iface_stream = iface;
000210  e59d0020          LDR      r0,[sp,#0x20]
000214  e59d101c          LDR      r1,[sp,#0x1c]
000218  e58100d8          STR      r0,[r1,#0xd8]
;;;272    
;;;273        bptr = vdev->udev->cfd_buff;
00021c  e59d001c          LDR      r0,[sp,#0x1c]
000220  e5900000          LDR      r0,[r0,#0]
000224  e590501c          LDR      r5,[r0,#0x1c]
;;;274        config = (DESC_CONF_T *)bptr;
000228  e58d5018          STR      r5,[sp,#0x18]
;;;275    
;;;276        /* step over configuration descritpor */
;;;277        bptr += config->bLength;
00022c  e59d0018          LDR      r0,[sp,#0x18]
000230  e5d00000          LDRB     r0,[r0,#0]
000234  e0855000          ADD      r5,r5,r0
;;;278        size = config->wTotalLength - config->bLength;
000238  e59d0018          LDR      r0,[sp,#0x18]
00023c  e5d01003          LDRB     r1,[r0,#3]
000240  e5d00002          LDRB     r0,[r0,#2]
000244  e1801401          ORR      r1,r0,r1,LSL #8
000248  e59d0018          LDR      r0,[sp,#0x18]
00024c  e5d00000          LDRB     r0,[r0,#0]
000250  e0418000          SUB      r8,r1,r0
;;;279    
;;;280        /*------------------------------------------------------------------------------------*/
;;;281        /*  Find the starting of Standard Video Streaming Interface Descriptor                */
;;;282        /*------------------------------------------------------------------------------------*/
;;;283        while (size >= sizeof(DESC_IF_T))
000254  ea00001a          B        |L1.708|
                  |L1.600|
;;;284        {
;;;285            ifd = (DESC_IF_T *)bptr;
000258  e1a06005          MOV      r6,r5
;;;286    
;;;287            if ((ifd->bDescriptorType == USB_DT_INTERFACE) && (ifd->bInterfaceNumber == iface->if_num) &&
00025c  e1a05006          MOV      r5,r6
000260  e5d60001          LDRB     r0,[r6,#1]
000264  e3500004          CMP      r0,#4
000268  1a00000b          BNE      |L1.668|
00026c  e5d61002          LDRB     r1,[r6,#2]
000270  e59d0020          LDR      r0,[sp,#0x20]
000274  e5d00004          LDRB     r0,[r0,#4]
000278  e1510000          CMP      r1,r0
00027c  1a000006          BNE      |L1.668|
;;;288                    (ifd->bInterfaceClass == USB_CLASS_VIDEO) && (ifd->bInterfaceSubClass == UVC_SC_VIDEOSTREAMING))
000280  e5d60005          LDRB     r0,[r6,#5]
000284  e350000e          CMP      r0,#0xe
000288  1a000003          BNE      |L1.668|
00028c  e5d60006          LDRB     r0,[r6,#6]
000290  e3500002          CMP      r0,#2
000294  1a000000          BNE      |L1.668|
;;;289                break;
000298  ea00000b          B        |L1.716|
                  |L1.668|
;;;290    
;;;291            if (ifd->bLength == 0)
00029c  e5d60000          LDRB     r0,[r6,#0]
0002a0  e3500000          CMP      r0,#0
0002a4  1a000002          BNE      |L1.692|
;;;292                return UVC_RET_PARSER;          /* prevent infinite loop                      */
0002a8  e59f0128          LDR      r0,|L1.984|
                  |L1.684|
0002ac  e28dd024          ADD      sp,sp,#0x24
;;;293    
;;;294            bptr += ifd->bLength;
;;;295            size -= ifd->bLength;
;;;296        }
;;;297    
;;;298        if (size < sizeof(DESC_IF_T))
;;;299        {
;;;300            UVC_ERRMSG("UVC_RET_PARSER! - Can't find the Standard Video Streaming Interface!\n");
;;;301            return UVC_RET_PARSER;
;;;302        }
;;;303    
;;;304        bptr += ifd->bLength;
;;;305        size -= ifd->bLength;
;;;306    
;;;307        /*------------------------------------------------------------------------------------*/
;;;308        /*  Parsing Video Streaming interface alternative setting 0                           */
;;;309        /*------------------------------------------------------------------------------------*/
;;;310        while (size >= sizeof(DESC_IF_T))
;;;311        {
;;;312            DESC_VSU_FORMAT_T   *vsu_format;
;;;313            DESC_VSU_FRAME_T    *vsu_frame;
;;;314            DESC_MJPG_FORMAT_T  *mjpg_format;
;;;315            DESC_MJPG_FRAME_T   *mjpg_frame;
;;;316    
;;;317            ifd = (DESC_IF_T *)bptr;
;;;318    
;;;319            // sysprintf("[%d] 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n", size, bptr[0], bptr[1], bptr[2], bptr[3], bptr[4], bptr[5], bptr[6], bptr[7]);
;;;320    
;;;321            if (ifd->bDescriptorType != UVC_CS_INTERFACE)
;;;322                break;
;;;323    
;;;324            ifd_vs_hdr = (DESC_VSI_HDR_T *)bptr;
;;;325    
;;;326            switch (ifd_vs_hdr->bDescriptorSubType)
;;;327            {
;;;328            case VS_INPUT_HEADER:
;;;329                UVC_DBGMSG("VS Interface VS_INPUT_HEADER\n");
;;;330                UVC_DBGMSG("    bNumFormats:      0x%x\n", ifd_vs_hdr->bNumFormats);
;;;331                UVC_DBGMSG("    bEndpointAddress: 0x%x\n", ifd_vs_hdr->bEndpointAddress);
;;;332                UVC_DBGMSG("    bTerminalLink:    0x%x\n", ifd_vs_hdr->bTerminalLink);
;;;333                break;
;;;334    
;;;335            case VS_FORMAT_UNCOMPRESSED:
;;;336                vsu_format = (DESC_VSU_FORMAT_T *)ifd_vs_hdr;
;;;337                UVC_DBGMSG("VS Interface VS_FORMAT_UNCOMPRESSED\n");
;;;338                UVC_DBGMSG("    bFormatIndex:         0x%x\n", vsu_format->bFormatIndex);
;;;339                UVC_DBGMSG("    bNumFrameDescriptors: 0x%x\n", vsu_format->bNumFrameDescriptors);
;;;340                UVC_DBGMSG("    guidFormat:           0x%08x%08x%08x%08x\n", vsu_format->guidFormat[0], vsu_format->guidFormat[1], vsu_format->guidFormat[2], vsu_format->guidFormat[3]);
;;;341                UVC_DBGMSG("    bBitsPerPixel         0x%x\n", vsu_format->bBitsPerPixel);
;;;342                UVC_DBGMSG("    bDefaultFrameIndex:   0x%x\n", vsu_format->bDefaultFrameIndex);
;;;343                UVC_DBGMSG("    bAspectRatioX:        0x%x\n", vsu_format->bAspectRatioX);
;;;344                UVC_DBGMSG("    bAspectRatioY:        0x%x\n", vsu_format->bAspectRatioY);
;;;345    
;;;346                idx = vc->num_of_formats;
;;;347                vc->format_idx[idx] = vsu_format->bFormatIndex;
;;;348    
;;;349                if (vsu_format->guidFormat[0] == 0x32595559)
;;;350                {
;;;351                    vc->format[idx] = UVC_FORMAT_YUY2;
;;;352                }
;;;353                else if (vsu_format->guidFormat[0] == 0x3231564E)
;;;354                {
;;;355                    vc->format[idx] = UVC_FORMAT_NV12;
;;;356                }
;;;357                else if (vsu_format->guidFormat[0] == 0x3032344D)
;;;358                {
;;;359                    vc->format[idx] = UVC_FORMAT_M420;
;;;360                }
;;;361                else if (vsu_format->guidFormat[0] == 0x30323449)
;;;362                {
;;;363                    vc->format[idx] = UVC_FORMAT_I420;
;;;364                }
;;;365                vc->num_of_formats++;
;;;366    
;;;367                /*------------------------------------------------------------------------*/
;;;368                /*  Parsing all frame descriptors under this format descriptor            */
;;;369                /*------------------------------------------------------------------------*/
;;;370                bptr += vsu_format->bLength;
;;;371                size -= vsu_format->bLength;
;;;372    
;;;373                for (i = 0; (i < vsu_format->bNumFrameDescriptors) && (vc->num_of_frames < UVC_MAX_FRAME); i++)
;;;374                {
;;;375                    vsu_frame = (DESC_VSU_FRAME_T *)bptr;
;;;376    
;;;377                    if ((vsu_frame->bDescriptorType != UVC_CS_INTERFACE) ||
;;;378                            (vsu_frame->bDescriptorSubType != VS_FRAME_UNCOMPRESSED))
;;;379                    {
;;;380                        UVC_DBGMSG("Frame parsing error!!\n");
;;;381                        return UVC_RET_PARSER;
;;;382                    }
;;;383    
;;;384                    UVC_DBGMSG("VS Interface VS_FRAME_UNCOMPRESSED\n");
;;;385                    UVC_DBGMSG("    bFormatIndex: 0x%x\n", vsu_frame->bFrameIndex);
;;;386                    UVC_DBGMSG("    wWidth:       0x%x\n", vsu_frame->wWidth);
;;;387                    UVC_DBGMSG("    wHeight       0x%x\n", vsu_frame->wHeight);
;;;388                    UVC_DBGMSG("    dwMinBitRate: 0x%x\n", vsu_frame->dwMinBitRate);
;;;389                    UVC_DBGMSG("    dwMaxBitRate: 0x%x\n", vsu_frame->dwMaxBitRate);
;;;390                    UVC_DBGMSG("    dwDefaultFrameInterval:  0x%x\n", vsu_frame->dwDefaultFrameInterval);
;;;391    
;;;392                    idx = vc->num_of_frames;
;;;393                    vc->frame_idx[idx] = vsu_frame->bFrameIndex;
;;;394                    vc->frame_format[idx] = vc->format[vc->num_of_formats-1];
;;;395                    vc->width[idx] = vsu_frame->wWidth;
;;;396                    vc->height[idx] = vsu_frame->wHeight;
;;;397                    vc->num_of_frames++;
;;;398    
;;;399                    bptr += vsu_frame->bLength;
;;;400                    size -= vsu_frame->bLength;
;;;401                }
;;;402                ifd = (DESC_IF_T *)bptr;  /* must */
;;;403                break;
;;;404    
;;;405            case VS_FRAME_UNCOMPRESSED:
;;;406                vsu_frame = (DESC_VSU_FRAME_T *)ifd_vs_hdr;
;;;407                UVC_DBGMSG("VS Interface VS_FRAME_UNCOMPRESSED\n");
;;;408                UVC_DBGMSG("    bFormatIndex: 0x%x\n", vsu_frame->bFrameIndex);
;;;409                UVC_DBGMSG("    wWidth:       0x%x\n", vsu_frame->wWidth);
;;;410                UVC_DBGMSG("    wHeight       0x%x\n", vsu_frame->wHeight);
;;;411                UVC_DBGMSG("    dwMinBitRate: 0x%x\n", vsu_frame->dwMinBitRate);
;;;412                UVC_DBGMSG("    dwMaxBitRate: 0x%x\n", vsu_frame->dwMaxBitRate);
;;;413                UVC_DBGMSG("    dwDefaultFrameInterval:  0x%x\n", vsu_frame->dwDefaultFrameInterval);
;;;414                break;
;;;415    
;;;416            case VS_FORMAT_MJPEG:
;;;417                mjpg_format = (DESC_MJPG_FORMAT_T *)ifd_vs_hdr;
;;;418                UVC_DBGMSG("VS Interface VS_FORMAT_MJPEG\n");
;;;419                UVC_DBGMSG("    bFormatIndex:         0x%x\n", mjpg_format->bFormatIndex);
;;;420                UVC_DBGMSG("    bNumFrameDescriptors: 0x%x\n", mjpg_format->bNumFrameDescriptors);
;;;421                UVC_DBGMSG("    bAspectRatioX:        0x%x\n", mjpg_format->bAspectRatioX);
;;;422                UVC_DBGMSG("    bAspectRatioY:        0x%x\n", mjpg_format->bAspectRatioY);
;;;423    
;;;424                idx = vc->num_of_formats;
;;;425                vc->format_idx[idx] = mjpg_format->bFormatIndex;
;;;426                vc->format[idx] = UVC_FORMAT_MJPEG;
;;;427                vc->num_of_formats++;
;;;428    
;;;429                /*------------------------------------------------------------------------*/
;;;430                /*  Parsing all frame descriptors under this format descriptor            */
;;;431                /*------------------------------------------------------------------------*/
;;;432                bptr += mjpg_format->bLength;
;;;433                size -= mjpg_format->bLength;
;;;434    
;;;435                for (i = 0; (i < mjpg_format->bNumFrameDescriptors) && (vc->num_of_frames < UVC_MAX_FRAME); i++)
;;;436                {
;;;437                    mjpg_frame = (DESC_MJPG_FRAME_T *)bptr;
;;;438    
;;;439                    if ((mjpg_frame->bDescriptorType != UVC_CS_INTERFACE) ||
;;;440                            (mjpg_frame->bDescriptorSubType != VS_FRAME_MJPEG))
;;;441                    {
;;;442                        UVC_DBGMSG("Frame parsing error!!\n");
;;;443                        return UVC_RET_PARSER;
;;;444                    }
;;;445    
;;;446                    UVC_DBGMSG("VS Interface VS_FRAME_MJPEG\n");
;;;447                    UVC_DBGMSG("    bFormatIndex: 0x%x\n", mjpg_frame->bFrameIndex);
;;;448                    UVC_DBGMSG("    wWidth:       0x%x\n", mjpg_frame->wWidth);
;;;449                    UVC_DBGMSG("    wHeight       0x%x\n", mjpg_frame->wHeight);
;;;450                    UVC_DBGMSG("    dwMinBitRate: 0x%x\n", mjpg_frame->dwMinBitRate);
;;;451                    UVC_DBGMSG("    dwMaxBitRate: 0x%x\n", mjpg_frame->dwMaxBitRate);
;;;452                    UVC_DBGMSG("    dwDefaultFrameInterval:  0x%x\n", mjpg_frame->dwDefaultFrameInterval);
;;;453    
;;;454                    idx = vc->num_of_frames;
;;;455                    vc->frame_idx[idx] = mjpg_frame->bFrameIndex;
;;;456                    vc->frame_format[idx] = vc->format[vc->num_of_formats-1];
;;;457                    vc->width[idx] = mjpg_frame->wWidth;
;;;458                    vc->height[idx] = mjpg_frame->wHeight;
;;;459                    vc->num_of_frames++;
;;;460    
;;;461                    bptr += mjpg_frame->bLength;
;;;462                    size -= mjpg_frame->bLength;
;;;463                }
;;;464                ifd = (DESC_IF_T *)bptr;  /* must */
;;;465                break;
;;;466    
;;;467            case VS_FRAME_MJPEG:
;;;468                mjpg_frame = (DESC_MJPG_FRAME_T *)ifd_vs_hdr;
;;;469                UVC_DBGMSG("VS Interface VS_FRAME_MJPEG\n");
;;;470                UVC_DBGMSG("    bFormatIndex: 0x%x\n", mjpg_frame->bFrameIndex);
;;;471                UVC_DBGMSG("    wWidth:       0x%x\n", mjpg_frame->wWidth);
;;;472                UVC_DBGMSG("    wHeight       0x%x\n", mjpg_frame->wHeight);
;;;473                UVC_DBGMSG("    dwMinBitRate: 0x%x\n", mjpg_frame->dwMinBitRate);
;;;474                UVC_DBGMSG("    dwMaxBitRate: 0x%x\n", mjpg_frame->dwMaxBitRate);
;;;475                UVC_DBGMSG("    dwDefaultFrameInterval:  0x%x\n", mjpg_frame->dwDefaultFrameInterval);
;;;476                break;
;;;477    
;;;478            case VS_OUTPUT_HEADER:
;;;479            case VS_UNDEFINED:
;;;480            case VC_INPUT_TERMINAL:
;;;481            case VS_FORMAT_MPEG2TS:
;;;482            case VS_FORMAT_DV:
;;;483            case VS_COLORFORMAT:
;;;484            case VS_FORMAT_FRAME_BASED:
;;;485            case VS_FRAME_FRAME_BASED:
;;;486            case VS_FORMAT_STREAM_BASED:
;;;487            case VS_FORMAT_H264:
;;;488            case VS_FRAME_H264:
;;;489            case VS_FORMAT_H264_SIMULCAST:
;;;490            case VS_FORMAT_VP8:
;;;491            case VS_FRAME_VP8:
;;;492            case VS_FORMAT_VP8_SIMULCAST:
;;;493                UVC_DBGMSG("Unsupported VS class interface descriptor 0x%x! Skip.\n", ifd_vs_hdr->bDescriptorSubType);
;;;494                break;
;;;495    
;;;496            default:
;;;497                UVC_ERRMSG("Parsing error! Unknown VS class interface descriptor 0x%x!\n", ifd_vs_hdr->bDescriptorSubType);
;;;498                return UVC_RET_PARSER;
;;;499            }
;;;500    
;;;501            if (ifd->bLength == 0)
;;;502                return UVC_RET_PARSER;          /* prevent infinite loop                      */
;;;503    
;;;504            bptr += ifd->bLength;
;;;505            size -= ifd->bLength;
;;;506        }
;;;507    
;;;508    #if 0
;;;509        /*------------------------------------------------------------------------------------*/
;;;510        /*  Find the next alternative interface                                               */
;;;511        /*------------------------------------------------------------------------------------*/
;;;512        while (size >= sizeof(DESC_IF_T))
;;;513        {
;;;514            ifd = (DESC_IF_T *)bptr;
;;;515    
;;;516            if ((ifd->bDescriptorType == USB_DT_INTERFACE) && (ifd->bInterfaceNumber == ifnum) &&
;;;517                    (ifd->bAlternateSetting != 0))
;;;518                break;                              /* done, not alternative setting 0        */
;;;519    
;;;520            if (ifd->bLength == 0)
;;;521                return UVC_RET_PARSER;          /* prevent infinite loop                      */
;;;522    
;;;523            bptr += ifd->bLength;
;;;524            size -= ifd->bLength;
;;;525        }
;;;526    
;;;527        if (size < sizeof(DESC_IF_T))
;;;528        {
;;;529            UVC_ERRMSG("UVC_RET_PARSER! - Can't find any ALT of VS interface!\n");
;;;530            return UVC_RET_PARSER;
;;;531        }
;;;532    #endif
;;;533    
;;;534        /*------------------------------------------------------------------------------------*/
;;;535        /*  Find all alternative interface of Standard Video Streaming Interface              */
;;;536        /*------------------------------------------------------------------------------------*/
;;;537        while (size >= sizeof(DESC_IF_T))
;;;538        {
;;;539            int   pksz;
;;;540    
;;;541            ifd = (DESC_IF_T *)bptr;
;;;542    
;;;543            if ((ifd->bDescriptorType != USB_DT_INTERFACE) || (ifd->bInterfaceNumber != iface->if_num) ||
;;;544                    (ifd->bInterfaceClass != USB_CLASS_VIDEO) || (ifd->bInterfaceSubClass != UVC_SC_VIDEOSTREAMING))
;;;545                break;                          /* done, the following content not belong to this interface */
;;;546    
;;;547            if (size < 8)
;;;548            {
;;;549                /* Parsing error                              */
;;;550                UVC_ERRMSG("UVC_RET_PARSER! - VS descriptor length!\n");
;;;551                return UVC_RET_PARSER;
;;;552            }
;;;553    
;;;554            UVC_DBGMSG("Parsing VS if %d, alt %d...\n", iface->if_num, ifd->bAlternateSetting);
;;;555    
;;;556            if (ifd->bNumEndpoints != 1)
;;;557            {
;;;558                UVC_DBGMSG("  [!] bNumEndpoints is not 1!\n");
;;;559            }
;;;560    
;;;561            if (ifd->bLength == 0)
;;;562                return UVC_RET_PARSER;          /* prevent infinite loop                      */
;;;563    
;;;564            bptr += ifd->bLength;
;;;565            size -= ifd->bLength;
;;;566    
;;;567            epd = (DESC_EP_T *)bptr;
;;;568    
;;;569            if (epd->bDescriptorType != USB_DT_ENDPOINT)
;;;570            {
;;;571                UVC_DBGMSG("  [!] Endpoint descriptor not found!\n");
;;;572                continue;                       /* endpoint descriptor not found!             */
;;;573            }
;;;574    
;;;575            UVC_DBGMSG("  Endpoint wMaxPacketSize = %d\n", epd->wMaxPacketSize);
;;;576    
;;;577            vs->alt_no[vs->num_of_alt] = ifd->bAlternateSetting;
;;;578            pksz = epd->wMaxPacketSize;
;;;579            pksz = (pksz & 0x07ff) * (1 + ((pksz >> 11) & 3));
;;;580            vs->max_pktsz[vs->num_of_alt] = pksz;
;;;581            vs->num_of_alt++;
;;;582    
;;;583            if (epd->bLength == 0)
;;;584                return UVC_RET_PARSER;      /* prevent infinite loop                      */
;;;585    
;;;586            bptr += epd->bLength;
;;;587            size -= epd->bLength;
;;;588        }
;;;589    
;;;590        UVC_DBGMSG("\n\n----------------------------------------------------------\n");
;;;591        UVC_DBGMSG("[Video Streaming interface parsing result dump]\n");
;;;592        for (i = 0; i < vs->num_of_alt; i++)
;;;593        {
;;;594            UVC_DBGMSG("  Alt %d, wMaxPacketSize = %d\n", vs->alt_no[i], vs->max_pktsz[i]);
;;;595        }
;;;596        return 0;
;;;597    }
0002b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.692|
0002b4  e5d60000          LDRB     r0,[r6,#0]            ;294
0002b8  e0855000          ADD      r5,r5,r0              ;294
0002bc  e5d60000          LDRB     r0,[r6,#0]            ;295
0002c0  e0488000          SUB      r8,r8,r0              ;295
                  |L1.708|
0002c4  e3580009          CMP      r8,#9                 ;283
0002c8  2affffe2          BCS      |L1.600|
                  |L1.716|
0002cc  e1a00000          MOV      r0,r0                 ;289
0002d0  e3580009          CMP      r8,#9                 ;298
0002d4  2a000003          BCS      |L1.744|
0002d8  e59f012c          LDR      r0,|L1.1036|
0002dc  ebfffffe          BL       sysprintf
0002e0  e59f00f0          LDR      r0,|L1.984|
0002e4  eafffff0          B        |L1.684|
                  |L1.744|
0002e8  e5d60000          LDRB     r0,[r6,#0]            ;304
0002ec  e0855000          ADD      r5,r5,r0              ;304
0002f0  e5d60000          LDRB     r0,[r6,#0]            ;305
0002f4  e0488000          SUB      r8,r8,r0              ;305
0002f8  ea000113          B        |L1.1868|
                  |L1.764|
0002fc  e1a06005          MOV      r6,r5                 ;317
000300  e5d60001          LDRB     r0,[r6,#1]            ;321
000304  e3500024          CMP      r0,#0x24              ;321
000308  0a000000          BEQ      |L1.784|
00030c  ea000110          B        |L1.1876|
                  |L1.784|
000310  e1a09005          MOV      r9,r5                 ;324
000314  e1a05009          MOV      r5,r9                 ;326
000318  e5d90002          LDRB     r0,[r9,#2]            ;326
00031c  e3500019          CMP      r0,#0x19              ;326
000320  308ff100          ADDCC    pc,pc,r0,LSL #2       ;326
000324  ea0000f7          B        |L1.1800|
000328  ea0000e8          B        |L1.1744|
00032c  ea000016          B        |L1.908|
000330  ea0000e7          B        |L1.1748|
000334  ea0000e3          B        |L1.1736|
000338  ea000015          B        |L1.916|
00033c  ea000091          B        |L1.1416|
000340  ea000093          B        |L1.1428|
000344  ea0000dc          B        |L1.1724|
000348  ea0000ee          B        |L1.1800|
00034c  ea0000ed          B        |L1.1800|
000350  ea0000e0          B        |L1.1752|
000354  ea0000eb          B        |L1.1800|
000358  ea0000df          B        |L1.1756|
00035c  ea0000df          B        |L1.1760|
000360  ea0000e8          B        |L1.1800|
000364  ea0000e7          B        |L1.1800|
000368  ea0000dd          B        |L1.1764|
00036c  ea0000dd          B        |L1.1768|
000370  ea0000dd          B        |L1.1772|
000374  ea0000dd          B        |L1.1776|
000378  ea0000dd          B        |L1.1780|
00037c  ea0000dd          B        |L1.1784|
000380  ea0000dd          B        |L1.1788|
000384  ea0000dd          B        |L1.1792|
000388  ea0000dd          B        |L1.1796|
                  |L1.908|
00038c  e1a00000          MOV      r0,r0                 ;328
000390  ea0000e2          B        |L1.1824|
                  |L1.916|
000394  e1a00000          MOV      r0,r0                 ;335
000398  e1a0a009          MOV      r10,r9                ;336
00039c  e5d47001          LDRB     r7,[r4,#1]            ;346
0003a0  e1a0900a          MOV      r9,r10                ;347
0003a4  e5da0003          LDRB     r0,[r10,#3]           ;347
0003a8  e2841002          ADD      r1,r4,#2              ;347
0003ac  e7c10007          STRB     r0,[r1,r7]            ;347
0003b0  e1a0900a          MOV      r9,r10                ;349
0003b4  e28a0005          ADD      r0,r10,#5             ;349
0003b8  ebfffffe          BL       __aeabi_uread4
0003bc  e59f104c          LDR      r1,|L1.1040|
0003c0  e1500001          CMP      r0,r1                 ;349
0003c4  1a000012          BNE      |L1.1044|
0003c8  e3a00001          MOV      r0,#1                 ;351
0003cc  e284100a          ADD      r1,r4,#0xa            ;351
0003d0  e7c10007          STRB     r0,[r1,r7]            ;351
0003d4  ea000028          B        |L1.1148|
                  |L1.984|
                          DCD      0xfffff43b
                  |L1.988|
                          DCD      ||.constdata||
                  |L1.992|
0003e0  55564320          DCB      "UVC VC_HEADER not found!! 0x%x 0x%x\n",0
0003e4  56435f48
0003e8  45414445
0003ec  52206e6f
0003f0  7420666f
0003f4  756e6421
0003f8  21203078
0003fc  25782030
000400  7825780a
000404  00      
000405  00                DCB      0
000406  00                DCB      0
000407  00                DCB      0
                  |L1.1032|
                          DCD      ||.constdata||+0x44
                  |L1.1036|
                          DCD      ||.constdata||+0x88
                  |L1.1040|
                          DCD      0x32595559
                  |L1.1044|
000414  e28a0005          ADD      r0,r10,#5             ;353
000418  ebfffffe          BL       __aeabi_uread4
00041c  e59f14a4          LDR      r1,|L1.2248|
000420  e1500001          CMP      r0,r1                 ;353
000424  1a000003          BNE      |L1.1080|
000428  e3a00002          MOV      r0,#2                 ;355
00042c  e284100a          ADD      r1,r4,#0xa            ;355
000430  e7c10007          STRB     r0,[r1,r7]            ;355
000434  ea000010          B        |L1.1148|
                  |L1.1080|
000438  e28a0005          ADD      r0,r10,#5             ;357
00043c  ebfffffe          BL       __aeabi_uread4
000440  e59f1484          LDR      r1,|L1.2252|
000444  e1500001          CMP      r0,r1                 ;357
000448  1a000003          BNE      |L1.1116|
00044c  e3a00003          MOV      r0,#3                 ;359
000450  e284100a          ADD      r1,r4,#0xa            ;359
000454  e7c10007          STRB     r0,[r1,r7]            ;359
000458  ea000007          B        |L1.1148|
                  |L1.1116|
00045c  e28a0005          ADD      r0,r10,#5             ;361
000460  ebfffffe          BL       __aeabi_uread4
000464  e59f1464          LDR      r1,|L1.2256|
000468  e1500001          CMP      r0,r1                 ;361
00046c  1a000002          BNE      |L1.1148|
000470  e3a00004          MOV      r0,#4                 ;363
000474  e284100a          ADD      r1,r4,#0xa            ;363
000478  e7c10007          STRB     r0,[r1,r7]            ;363
                  |L1.1148|
00047c  e5d40001          LDRB     r0,[r4,#1]            ;365
000480  e2800001          ADD      r0,r0,#1              ;365
000484  e5c40001          STRB     r0,[r4,#1]            ;365
000488  e5da0000          LDRB     r0,[r10,#0]           ;370
00048c  e0855000          ADD      r5,r5,r0              ;370
000490  e5da0000          LDRB     r0,[r10,#0]           ;371
000494  e0488000          SUB      r8,r8,r0              ;371
000498  e3a00000          MOV      r0,#0                 ;373
00049c  e58d000c          STR      r0,[sp,#0xc]          ;373
0004a0  ea00002f          B        |L1.1380|
                  |L1.1188|
0004a4  e58d5008          STR      r5,[sp,#8]            ;375
0004a8  e59d5008          LDR      r5,[sp,#8]            ;377
0004ac  e5d50001          LDRB     r0,[r5,#1]            ;377
0004b0  e3500024          CMP      r0,#0x24              ;377
0004b4  1a000003          BNE      |L1.1224|
0004b8  e59d0008          LDR      r0,[sp,#8]            ;378
0004bc  e5d00002          LDRB     r0,[r0,#2]            ;378
0004c0  e3500005          CMP      r0,#5                 ;378
0004c4  0a000001          BEQ      |L1.1232|
                  |L1.1224|
0004c8  e51f00f8          LDR      r0,|L1.984|
0004cc  eaffff76          B        |L1.684|
                  |L1.1232|
0004d0  e5d47012          LDRB     r7,[r4,#0x12]         ;392
0004d4  e59d0008          LDR      r0,[sp,#8]            ;393
0004d8  e5d00003          LDRB     r0,[r0,#3]            ;393
0004dc  e2841013          ADD      r1,r4,#0x13           ;393
0004e0  e7c10007          STRB     r0,[r1,r7]            ;393
0004e4  e5d40001          LDRB     r0,[r4,#1]            ;394
0004e8  e2400001          SUB      r0,r0,#1              ;394
0004ec  e284100a          ADD      r1,r4,#0xa            ;394
0004f0  e7d10000          LDRB     r0,[r1,r0]            ;394
0004f4  e284102b          ADD      r1,r4,#0x2b           ;394
0004f8  e7c10007          STRB     r0,[r1,r7]            ;394
0004fc  e59d0008          LDR      r0,[sp,#8]            ;395
000500  e5d01006          LDRB     r1,[r0,#6]            ;395
000504  e5d00005          LDRB     r0,[r0,#5]            ;395
000508  e1800401          ORR      r0,r0,r1,LSL #8       ;395
00050c  e2841044          ADD      r1,r4,#0x44           ;395
000510  e0811087          ADD      r1,r1,r7,LSL #1       ;395
000514  e1c100b0          STRH     r0,[r1,#0]            ;395
000518  e59d0008          LDR      r0,[sp,#8]            ;396
00051c  e5d01008          LDRB     r1,[r0,#8]            ;396
000520  e5d00007          LDRB     r0,[r0,#7]            ;396
000524  e1800401          ORR      r0,r0,r1,LSL #8       ;396
000528  e2841074          ADD      r1,r4,#0x74           ;396
00052c  e0811087          ADD      r1,r1,r7,LSL #1       ;396
000530  e1c100b0          STRH     r0,[r1,#0]            ;396
000534  e5d40012          LDRB     r0,[r4,#0x12]         ;397
000538  e2800001          ADD      r0,r0,#1              ;397
00053c  e5c40012          STRB     r0,[r4,#0x12]         ;397
000540  e59d0008          LDR      r0,[sp,#8]            ;399
000544  e5d00000          LDRB     r0,[r0,#0]            ;399
000548  e0855000          ADD      r5,r5,r0              ;399
00054c  e59d0008          LDR      r0,[sp,#8]            ;400
000550  e5d00000          LDRB     r0,[r0,#0]            ;400
000554  e0488000          SUB      r8,r8,r0              ;400
000558  e59d000c          LDR      r0,[sp,#0xc]          ;373
00055c  e2800001          ADD      r0,r0,#1              ;373
000560  e58d000c          STR      r0,[sp,#0xc]          ;373
                  |L1.1380|
000564  e5da1004          LDRB     r1,[r10,#4]           ;373
000568  e59d000c          LDR      r0,[sp,#0xc]          ;373
00056c  e1510000          CMP      r1,r0                 ;373
000570  da000002          BLE      |L1.1408|
000574  e5d40012          LDRB     r0,[r4,#0x12]         ;373
000578  e3500018          CMP      r0,#0x18              ;373
00057c  baffffc8          BLT      |L1.1188|
                  |L1.1408|
000580  e1a06005          MOV      r6,r5                 ;402
000584  ea000065          B        |L1.1824|
                  |L1.1416|
000588  e1a00000          MOV      r0,r0                 ;405
00058c  e58d9008          STR      r9,[sp,#8]            ;406
000590  ea000062          B        |L1.1824|
                  |L1.1428|
000594  e1a00000          MOV      r0,r0                 ;416
000598  e58d9004          STR      r9,[sp,#4]            ;417
00059c  e5d47001          LDRB     r7,[r4,#1]            ;424
0005a0  e59d9004          LDR      r9,[sp,#4]            ;425
0005a4  e5d90003          LDRB     r0,[r9,#3]            ;425
0005a8  e2841002          ADD      r1,r4,#2              ;425
0005ac  e7c10007          STRB     r0,[r1,r7]            ;425
0005b0  e3a0000b          MOV      r0,#0xb               ;426
0005b4  e284100a          ADD      r1,r4,#0xa            ;426
0005b8  e7c10007          STRB     r0,[r1,r7]            ;426
0005bc  e5d40001          LDRB     r0,[r4,#1]            ;427
0005c0  e2800001          ADD      r0,r0,#1              ;427
0005c4  e5c40001          STRB     r0,[r4,#1]            ;427
0005c8  e59d9004          LDR      r9,[sp,#4]            ;432
0005cc  e5d90000          LDRB     r0,[r9,#0]            ;432
0005d0  e0855000          ADD      r5,r5,r0              ;432
0005d4  e59d9004          LDR      r9,[sp,#4]            ;433
0005d8  e5d90000          LDRB     r0,[r9,#0]            ;433
0005dc  e0488000          SUB      r8,r8,r0              ;433
0005e0  e3a00000          MOV      r0,#0                 ;435
0005e4  e58d000c          STR      r0,[sp,#0xc]          ;435
0005e8  ea000029          B        |L1.1684|
                  |L1.1516|
0005ec  e1a0b005          MOV      r11,r5                ;437
0005f0  e1a0500b          MOV      r5,r11                ;439
0005f4  e5db0001          LDRB     r0,[r11,#1]           ;439
0005f8  e3500024          CMP      r0,#0x24              ;439
0005fc  1a000002          BNE      |L1.1548|
000600  e5db0002          LDRB     r0,[r11,#2]           ;440
000604  e3500007          CMP      r0,#7                 ;440
000608  0a000001          BEQ      |L1.1556|
                  |L1.1548|
00060c  e51f023c          LDR      r0,|L1.984|
000610  eaffff25          B        |L1.684|
                  |L1.1556|
000614  e5d47012          LDRB     r7,[r4,#0x12]         ;454
000618  e5db0003          LDRB     r0,[r11,#3]           ;455
00061c  e2841013          ADD      r1,r4,#0x13           ;455
000620  e7c10007          STRB     r0,[r1,r7]            ;455
000624  e5d40001          LDRB     r0,[r4,#1]            ;456
000628  e2400001          SUB      r0,r0,#1              ;456
00062c  e284100a          ADD      r1,r4,#0xa            ;456
000630  e7d10000          LDRB     r0,[r1,r0]            ;456
000634  e284102b          ADD      r1,r4,#0x2b           ;456
000638  e7c10007          STRB     r0,[r1,r7]            ;456
00063c  e5db0006          LDRB     r0,[r11,#6]           ;457
000640  e5db1005          LDRB     r1,[r11,#5]           ;457
000644  e1810400          ORR      r0,r1,r0,LSL #8       ;457
000648  e2841044          ADD      r1,r4,#0x44           ;457
00064c  e0811087          ADD      r1,r1,r7,LSL #1       ;457
000650  e1c100b0          STRH     r0,[r1,#0]            ;457
000654  e5db0008          LDRB     r0,[r11,#8]           ;458
000658  e5db1007          LDRB     r1,[r11,#7]           ;458
00065c  e1810400          ORR      r0,r1,r0,LSL #8       ;458
000660  e2841074          ADD      r1,r4,#0x74           ;458
000664  e0811087          ADD      r1,r1,r7,LSL #1       ;458
000668  e1c100b0          STRH     r0,[r1,#0]            ;458
00066c  e5d40012          LDRB     r0,[r4,#0x12]         ;459
000670  e2800001          ADD      r0,r0,#1              ;459
000674  e5c40012          STRB     r0,[r4,#0x12]         ;459
000678  e5db0000          LDRB     r0,[r11,#0]           ;461
00067c  e0855000          ADD      r5,r5,r0              ;461
000680  e5db0000          LDRB     r0,[r11,#0]           ;462
000684  e0488000          SUB      r8,r8,r0              ;462
000688  e59d000c          LDR      r0,[sp,#0xc]          ;435
00068c  e2800001          ADD      r0,r0,#1              ;435
000690  e58d000c          STR      r0,[sp,#0xc]          ;435
                  |L1.1684|
000694  e59d0004          LDR      r0,[sp,#4]            ;435
000698  e5d01004          LDRB     r1,[r0,#4]            ;435
00069c  e59d000c          LDR      r0,[sp,#0xc]          ;435
0006a0  e1510000          CMP      r1,r0                 ;435
0006a4  da000002          BLE      |L1.1716|
0006a8  e5d40012          LDRB     r0,[r4,#0x12]         ;435
0006ac  e3500018          CMP      r0,#0x18              ;435
0006b0  baffffcd          BLT      |L1.1516|
                  |L1.1716|
0006b4  e1a06005          MOV      r6,r5                 ;464
0006b8  ea000018          B        |L1.1824|
                  |L1.1724|
0006bc  e1a00000          MOV      r0,r0                 ;467
0006c0  e1a0b009          MOV      r11,r9                ;468
0006c4  ea000015          B        |L1.1824|
                  |L1.1736|
0006c8  e1a00000          MOV      r0,r0                 ;478
0006cc  e1a00000          MOV      r0,r0                 ;479
                  |L1.1744|
0006d0  e1a00000          MOV      r0,r0                 ;480
                  |L1.1748|
0006d4  e1a00000          MOV      r0,r0                 ;481
                  |L1.1752|
0006d8  e1a00000          MOV      r0,r0                 ;482
                  |L1.1756|
0006dc  e1a00000          MOV      r0,r0                 ;483
                  |L1.1760|
0006e0  e1a00000          MOV      r0,r0                 ;484
                  |L1.1764|
0006e4  e1a00000          MOV      r0,r0                 ;485
                  |L1.1768|
0006e8  e1a00000          MOV      r0,r0                 ;486
                  |L1.1772|
0006ec  e1a00000          MOV      r0,r0                 ;487
                  |L1.1776|
0006f0  e1a00000          MOV      r0,r0                 ;488
                  |L1.1780|
0006f4  e1a00000          MOV      r0,r0                 ;489
                  |L1.1784|
0006f8  e1a00000          MOV      r0,r0                 ;490
                  |L1.1788|
0006fc  e1a00000          MOV      r0,r0                 ;491
                  |L1.1792|
000700  e1a00000          MOV      r0,r0                 ;492
                  |L1.1796|
000704  ea000005          B        |L1.1824|
                  |L1.1800|
000708  e1a00000          MOV      r0,r0                 ;496
00070c  e5d91002          LDRB     r1,[r9,#2]            ;497
000710  e28f0f6f          ADR      r0,|L1.2260|
000714  ebfffffe          BL       sysprintf
000718  e51f0348          LDR      r0,|L1.984|
00071c  eafffee2          B        |L1.684|
                  |L1.1824|
000720  e1a00000          MOV      r0,r0                 ;333
000724  e5d60000          LDRB     r0,[r6,#0]            ;501
000728  e3500000          CMP      r0,#0                 ;501
00072c  1a000001          BNE      |L1.1848|
000730  e51f0360          LDR      r0,|L1.984|
000734  eafffedc          B        |L1.684|
                  |L1.1848|
000738  e5d60000          LDRB     r0,[r6,#0]            ;504
00073c  e0855000          ADD      r5,r5,r0              ;504
000740  e5d60000          LDRB     r0,[r6,#0]            ;505
000744  e0488000          SUB      r8,r8,r0              ;505
000748  e1a00000          MOV      r0,r0                 ;506
                  |L1.1868|
00074c  e3580009          CMP      r8,#9                 ;310
000750  2afffee9          BCS      |L1.764|
                  |L1.1876|
000754  e1a00000          MOV      r0,r0                 ;322
000758  ea00004a          B        |L1.2184|
                  |L1.1884|
00075c  e1a06005          MOV      r6,r5                 ;541
000760  e5d60001          LDRB     r0,[r6,#1]            ;543
000764  e3500004          CMP      r0,#4                 ;543
000768  1a00000a          BNE      |L1.1944|
00076c  e5d61002          LDRB     r1,[r6,#2]            ;543
000770  e59d0020          LDR      r0,[sp,#0x20]         ;543
000774  e5d00004          LDRB     r0,[r0,#4]            ;543
000778  e1510000          CMP      r1,r0                 ;543
00077c  1a000005          BNE      |L1.1944|
000780  e5d60005          LDRB     r0,[r6,#5]            ;544
000784  e350000e          CMP      r0,#0xe               ;544
000788  1a000002          BNE      |L1.1944|
00078c  e5d60006          LDRB     r0,[r6,#6]            ;544
000790  e3500002          CMP      r0,#2                 ;544
000794  0a000000          BEQ      |L1.1948|
                  |L1.1944|
000798  ea00003c          B        |L1.2192|
                  |L1.1948|
00079c  e3580008          CMP      r8,#8                 ;547
0007a0  aa000003          BGE      |L1.1972|
0007a4  e28f0f59          ADR      r0,|L1.2320|
0007a8  ebfffffe          BL       sysprintf
0007ac  e51f03dc          LDR      r0,|L1.984|
0007b0  eafffebd          B        |L1.684|
                  |L1.1972|
0007b4  e5d60000          LDRB     r0,[r6,#0]            ;561
0007b8  e3500000          CMP      r0,#0                 ;561
0007bc  1a000001          BNE      |L1.1992|
0007c0  e51f03f0          LDR      r0,|L1.984|
0007c4  eafffeb8          B        |L1.684|
                  |L1.1992|
0007c8  e5d60000          LDRB     r0,[r6,#0]            ;564
0007cc  e0855000          ADD      r5,r5,r0              ;564
0007d0  e5d60000          LDRB     r0,[r6,#0]            ;565
0007d4  e0488000          SUB      r8,r8,r0              ;565
0007d8  e58d5014          STR      r5,[sp,#0x14]         ;567
0007dc  e59d5014          LDR      r5,[sp,#0x14]         ;569
0007e0  e5d50001          LDRB     r0,[r5,#1]            ;569
0007e4  e3500005          CMP      r0,#5                 ;569
0007e8  0a000000          BEQ      |L1.2032|
0007ec  ea000025          B        |L1.2184|
                  |L1.2032|
0007f0  e5d61003          LDRB     r1,[r6,#3]            ;577
0007f4  e59d0010          LDR      r0,[sp,#0x10]         ;577
0007f8  e5d02001          LDRB     r2,[r0,#1]            ;577
0007fc  e2800002          ADD      r0,r0,#2              ;577
000800  e7c01002          STRB     r1,[r0,r2]            ;577
000804  e59d0014          LDR      r0,[sp,#0x14]         ;578
000808  e5d01005          LDRB     r1,[r0,#5]            ;578
00080c  e5d00004          LDRB     r0,[r0,#4]            ;578
000810  e180a401          ORR      r10,r0,r1,LSL #8      ;578
000814  e3ca0b3e          BIC      r0,r10,#0xf800        ;579
000818  e3a01003          MOV      r1,#3                 ;579
00081c  e00115ca          AND      r1,r1,r10,ASR #11     ;579
000820  e2811001          ADD      r1,r1,#1              ;579
000824  e16a0180          SMULBB   r10,r0,r1             ;579
000828  e59d0010          LDR      r0,[sp,#0x10]         ;580
00082c  e5d02001          LDRB     r2,[r0,#1]            ;580
000830  e280000e          ADD      r0,r0,#0xe            ;580
000834  e0800082          ADD      r0,r0,r2,LSL #1       ;580
000838  e1c0a0b0          STRH     r10,[r0,#0]           ;580
00083c  e59d0010          LDR      r0,[sp,#0x10]         ;581
000840  e5d00001          LDRB     r0,[r0,#1]            ;581
000844  e2800001          ADD      r0,r0,#1              ;581
000848  e20010ff          AND      r1,r0,#0xff           ;581
00084c  e59d0010          LDR      r0,[sp,#0x10]         ;581
000850  e5c01001          STRB     r1,[r0,#1]            ;581
000854  e59d0014          LDR      r0,[sp,#0x14]         ;583
000858  e5d00000          LDRB     r0,[r0,#0]            ;583
00085c  e3500000          CMP      r0,#0                 ;583
000860  1a000001          BNE      |L1.2156|
000864  e51f0494          LDR      r0,|L1.984|
000868  eafffe8f          B        |L1.684|
                  |L1.2156|
00086c  e59d0014          LDR      r0,[sp,#0x14]         ;586
000870  e5d00000          LDRB     r0,[r0,#0]            ;586
000874  e0855000          ADD      r5,r5,r0              ;586
000878  e59d0014          LDR      r0,[sp,#0x14]         ;587
00087c  e5d00000          LDRB     r0,[r0,#0]            ;587
000880  e0488000          SUB      r8,r8,r0              ;587
000884  e1a00000          MOV      r0,r0                 ;572
                  |L1.2184|
000888  e3580009          CMP      r8,#9                 ;537
00088c  2affffb2          BCS      |L1.1884|
                  |L1.2192|
000890  e1a00000          MOV      r0,r0                 ;545
000894  e3a00000          MOV      r0,#0                 ;592
000898  e58d000c          STR      r0,[sp,#0xc]          ;592
00089c  ea000002          B        |L1.2220|
                  |L1.2208|
0008a0  e59d000c          LDR      r0,[sp,#0xc]          ;592
0008a4  e2800001          ADD      r0,r0,#1              ;592
0008a8  e58d000c          STR      r0,[sp,#0xc]          ;592
                  |L1.2220|
0008ac  e59d0010          LDR      r0,[sp,#0x10]         ;592
0008b0  e5d01001          LDRB     r1,[r0,#1]            ;592
0008b4  e59d000c          LDR      r0,[sp,#0xc]          ;592
0008b8  e1510000          CMP      r1,r0                 ;592
0008bc  cafffff7          BGT      |L1.2208|
0008c0  e3a00000          MOV      r0,#0                 ;596
0008c4  eafffe78          B        |L1.684|
;;;598    
                          ENDP

                  |L1.2248|
                          DCD      0x3231564e
                  |L1.2252|
                          DCD      0x3032344d
                  |L1.2256|
                          DCD      0x30323449
                  |L1.2260|
0008d4  50617273          DCB      "Parsing error! Unknown VS class interface descriptor 0x"
0008d8  696e6720
0008dc  6572726f
0008e0  72212055
0008e4  6e6b6e6f
0008e8  776e2056
0008ec  5320636c
0008f0  61737320
0008f4  696e7465
0008f8  72666163
0008fc  65206465
000900  73637269
000904  70746f72
000908  203078  
00090b  2578210a          DCB      "%x!\n",0
00090f  00      
                  |L1.2320|
000910  5556435f          DCB      "UVC_RET_PARSER! - VS descriptor length!\n",0
000914  5245545f
000918  50415253
00091c  45522120
000920  2d205653
000924  20646573
000928  63726970
00092c  746f7220
000930  6c656e67
000934  7468210a
000938  00      
000939  00                DCB      0
00093a  00                DCB      0
00093b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  5556435f          DCB      0x55,0x56,0x43,0x5f
000004  5245545f          DCB      0x52,0x45,0x54,0x5f
000008  50415253          DCB      0x50,0x41,0x52,0x53
00000c  45522120          DCB      0x45,0x52,0x21,0x20
000010  2d204361          DCB      0x2d,0x20,0x43,0x61
000014  6e277420          DCB      0x6e,0x27,0x74,0x20
000018  66696e64          DCB      0x66,0x69,0x6e,0x64
00001c  20746865          DCB      0x20,0x74,0x68,0x65
000020  20537461          DCB      0x20,0x53,0x74,0x61
000024  6e646172          DCB      0x6e,0x64,0x61,0x72
000028  64205669          DCB      0x64,0x20,0x56,0x69
00002c  64656f20          DCB      0x64,0x65,0x6f,0x20
000030  436f6e74          DCB      0x43,0x6f,0x6e,0x74
000034  726f6c20          DCB      0x72,0x6f,0x6c,0x20
000038  496e7465          DCB      0x49,0x6e,0x74,0x65
00003c  72666163          DCB      0x72,0x66,0x61,0x63
000040  65210a00          DCB      0x65,0x21,0x0a,0x00
000044  55564320          DCB      0x55,0x56,0x43,0x20
000048  2d206e75          DCB      0x2d,0x20,0x6e,0x75
00004c  6d626572          DCB      0x6d,0x62,0x65,0x72
000050  206f6620          DCB      0x20,0x6f,0x66,0x20
000054  73747265          DCB      0x73,0x74,0x72,0x65
000058  616d696e          DCB      0x61,0x6d,0x69,0x6e
00005c  6720696e          DCB      0x67,0x20,0x69,0x6e
000060  74657266          DCB      0x74,0x65,0x72,0x66
000064  61636520          DCB      0x61,0x63,0x65,0x20
000068  6973206e          DCB      0x69,0x73,0x20,0x6e
00006c  6f742031          DCB      0x6f,0x74,0x20,0x31
000070  21204e6f          DCB      0x21,0x20,0x4e,0x6f
000074  74207375          DCB      0x74,0x20,0x73,0x75
000078  70706f72          DCB      0x70,0x70,0x6f,0x72
00007c  74656421          DCB      0x74,0x65,0x64,0x21
000080  21202564          DCB      0x21,0x20,0x25,0x64
000084  0a000000          DCB      0x0a,0x00,0x00,0x00
000088  5556435f          DCB      0x55,0x56,0x43,0x5f
00008c  5245545f          DCB      0x52,0x45,0x54,0x5f
000090  50415253          DCB      0x50,0x41,0x52,0x53
000094  45522120          DCB      0x45,0x52,0x21,0x20
000098  2d204361          DCB      0x2d,0x20,0x43,0x61
00009c  6e277420          DCB      0x6e,0x27,0x74,0x20
0000a0  66696e64          DCB      0x66,0x69,0x6e,0x64
0000a4  20746865          DCB      0x20,0x74,0x68,0x65
0000a8  20537461          DCB      0x20,0x53,0x74,0x61
0000ac  6e646172          DCB      0x6e,0x64,0x61,0x72
0000b0  64205669          DCB      0x64,0x20,0x56,0x69
0000b4  64656f20          DCB      0x64,0x65,0x6f,0x20
0000b8  53747265          DCB      0x53,0x74,0x72,0x65
0000bc  616d696e          DCB      0x61,0x6d,0x69,0x6e
0000c0  6720496e          DCB      0x67,0x20,0x49,0x6e
0000c4  74657266          DCB      0x74,0x65,0x72,0x66
0000c8  61636521          DCB      0x61,0x63,0x65,0x21
0000cc  0a00              DCB      0x0a,0x00
