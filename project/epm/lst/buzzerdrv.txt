; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\buzzerdrv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\buzzerdrv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\buzzerdrv.crf src\UserDrv\buzzerdrv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  buzzerPlay PROC
;;;45     /*-----------------------------------------*/
;;;46     static void buzzerPlay(TickType_t Time)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;47     {  
000004  e1a04000          MOV      r4,r0
;;;48         GPIO_SetBit(BUZZER_PORT, BUZZER_PIN);  
000008  e3a01902          MOV      r1,#0x8000
00000c  e3a000c0          MOV      r0,#0xc0
000010  ebfffffe          BL       GPIO_SetBit
;;;49         vTaskDelay(Time/portTICK_RATE_MS);
000014  e3a0100a          MOV      r1,#0xa
000018  e1a00004          MOV      r0,r4
00001c  ebfffffe          BL       __aeabi_uidivmod
000020  e1a05000          MOV      r5,r0
000024  ebfffffe          BL       vTaskDelay
;;;50         GPIO_ClrBit(BUZZER_PORT, BUZZER_PIN);
000028  e3a01902          MOV      r1,#0x8000
00002c  e3a000c0          MOV      r0,#0xc0
000030  ebfffffe          BL       GPIO_ClrBit
;;;51     }
000034  e8bd8070          POP      {r4-r6,pc}
;;;52     static void vBuzzerDrvTask( void *pvparamOuteters )
                          ENDP

                  vBuzzerDrvTask PROC
000038  e28f0f99          ADR      r0,|L1.676|
;;;53     {
;;;54         sysprintf("vBuzzerDrvTask Going...\r\n");  
00003c  ebfffffe          BL       sysprintf
;;;55         for(;;)
000040  e1a00000          MOV      r0,r0
                  |L1.68|
;;;56         { 
;;;57             BaseType_t reval = xSemaphoreTake(xSemaphore, threadWaitTime); 
000044  e3a03000          MOV      r3,#0
000048  e59f0270          LDR      r0,|L1.704|
00004c  e1a01003          MOV      r1,r3
000050  e5902000          LDR      r2,[r0,#0]  ; threadWaitTime
000054  e59f0268          LDR      r0,|L1.708|
000058  e5900000          LDR      r0,[r0,#0]  ; xSemaphore
00005c  ebfffffe          BL       xQueueGenericReceive
000060  e1a04000          MOV      r4,r0
;;;58             if(reval == pdTRUE)
000064  e3540001          CMP      r4,#1
000068  0a000018          BEQ      |L1.208|
;;;59             {
;;;60                 //sysprintf("\r\nvBuzzerDrvTask show...\r\n"); 
;;;61             }
;;;62             else
;;;63             {//timeout
;;;64                 //sysprintf("\r\n[ENTER:%d, %d]\n", threadWaitTime, playCounter);
;;;65                 buzzerPlay(playTime);
00006c  e59f0254          LDR      r0,|L1.712|
000070  e5900000          LDR      r0,[r0,#0]  ; playTime
000074  ebfffffe          BL       buzzerPlay
;;;66                 if(playCounter == 1)
000078  e59f024c          LDR      r0,|L1.716|
00007c  e5d00000          LDRB     r0,[r0,#0]  ; playCounter
000080  e3500001          CMP      r0,#1
000084  1a000006          BNE      |L1.164|
;;;67                 {
;;;68                     threadWaitTime = portMAX_DELAY;
000088  e3e00000          MVN      r0,#0
00008c  e59f122c          LDR      r1,|L1.704|
000090  e5810000          STR      r0,[r1,#0]  ; threadWaitTime
;;;69                     playCounter = 0;
000094  e3a00000          MOV      r0,#0
000098  e59f122c          LDR      r1,|L1.716|
00009c  e5c10000          STRB     r0,[r1,#0]  ; playCounter
0000a0  ea00000a          B        |L1.208|
                  |L1.164|
;;;70                 }
;;;71                 else
;;;72                 {
;;;73                     playCounter--;
0000a4  e59f0220          LDR      r0,|L1.716|
0000a8  e5d00000          LDRB     r0,[r0,#0]  ; playCounter
0000ac  e2400001          SUB      r0,r0,#1
0000b0  e59f1214          LDR      r1,|L1.716|
0000b4  e5c10000          STRB     r0,[r1,#0]  ; playCounter
;;;74                     threadWaitTime = playDelayTime/portTICK_RATE_MS;
0000b8  e3a0100a          MOV      r1,#0xa
0000bc  e59f020c          LDR      r0,|L1.720|
0000c0  e5900000          LDR      r0,[r0,#0]  ; playDelayTime
0000c4  ebfffffe          BL       __aeabi_uidivmod
0000c8  e59f11f0          LDR      r1,|L1.704|
0000cc  e5810000          STR      r0,[r1,#0]  ; threadWaitTime
                  |L1.208|
;;;75                 }  
;;;76                 //sysprintf("\r\n[EXIT:%d, %d]\n", threadWaitTime, playCounter);            
;;;77             }   
;;;78         }
0000d0  eaffffdb          B        |L1.68|
;;;79     }
;;;80     
                          ENDP

                  hwInit PROC
;;;81     static BOOL hwInit(void)
0000d4  e92d4010          PUSH     {r4,lr}
;;;82     {
;;;83         outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
0000d8  e3a0020b          MOV      r0,#0xb0000000
0000dc  e5900218          LDR      r0,[r0,#0x218]
0000e0  e3800008          ORR      r0,r0,#8
0000e4  e3a0120b          MOV      r1,#0xb0000000
0000e8  e5810218          STR      r0,[r1,#0x218]
;;;84         //outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | (1 << 27)); // Enable PWM engine clock
;;;85         
;;;86         //PWM PIN
;;;87         outpw(REG_SYS_GPD_MFPH,(inpw(REG_SYS_GPD_MFPH) & ~(0xFu<<28)) | (0x0u<<28));
0000ec  e3a0020b          MOV      r0,#0xb0000000
0000f0  e590008c          LDR      r0,[r0,#0x8c]
0000f4  e3c0020f          BIC      r0,r0,#0xf0000000
0000f8  e581008c          STR      r0,[r1,#0x8c]
;;;88         GPIO_OpenBit(BUZZER_PORT, BUZZER_PIN, DIR_OUTPUT, NO_PULL_UP); 
0000fc  e3a03000          MOV      r3,#0
000100  e3a02001          MOV      r2,#1
000104  e3a01902          MOV      r1,#0x8000
000108  e3a000c0          MOV      r0,#0xc0
00010c  ebfffffe          BL       GPIO_OpenBit
;;;89         GPIO_ClrBit(BUZZER_PORT, BUZZER_PIN);
000110  e3a01902          MOV      r1,#0x8000
000114  e3a000c0          MOV      r0,#0xc0
000118  ebfffffe          BL       GPIO_ClrBit
;;;90         
;;;91         buzzerPlay(200);
00011c  e3a000c8          MOV      r0,#0xc8
000120  ebfffffe          BL       buzzerPlay
;;;92         return TRUE;
000124  e3a00001          MOV      r0,#1
;;;93     }
000128  e8bd8010          POP      {r4,pc}
;;;94     static BOOL swInit(void)
                          ENDP

                  swInit PROC
00012c  e92d401c          PUSH     {r2-r4,lr}
;;;95     {
;;;96         xSemaphore = xSemaphoreCreateBinary();
000130  e3a02003          MOV      r2,#3
000134  e3a01000          MOV      r1,#0
000138  e3a00001          MOV      r0,#1
00013c  ebfffffe          BL       xQueueGenericCreate
000140  e59f117c          LDR      r1,|L1.708|
000144  e5810000          STR      r0,[r1,#0]  ; xSemaphore
;;;97         xTaskCreate( vBuzzerDrvTask, "vBuzzerDrvTask", 1024, NULL, BUZZER_DRV_THREAD_PROI, NULL );
000148  e3a00000          MOV      r0,#0
00014c  e3a0100b          MOV      r1,#0xb
000150  e58d0004          STR      r0,[sp,#4]
000154  e1a03000          MOV      r3,r0
000158  e3a02b01          MOV      r2,#0x400
00015c  e58d1000          STR      r1,[sp,#0]
000160  e28f1f5b          ADR      r1,|L1.724|
000164  e59f0178          LDR      r0,|L1.740|
000168  ebfffffe          BL       xTaskCreate
;;;98         return TRUE;
00016c  e3a00001          MOV      r0,#1
;;;99     }
000170  e8bd801c          POP      {r2-r4,pc}
;;;100    
                          ENDP

                  BuzzerDrvInit PROC
;;;103    /*-----------------------------------------*/
;;;104    BOOL BuzzerDrvInit(BOOL testMode)
000174  e92d4010          PUSH     {r4,lr}
;;;105    {
000178  e1a04000          MOV      r4,r0
;;;106        if(initFlag)
00017c  e59f0164          LDR      r0,|L1.744|
000180  e5d00000          LDRB     r0,[r0,#0]  ; initFlag
000184  e3500000          CMP      r0,#0
000188  0a000001          BEQ      |L1.404|
;;;107            return TRUE;
00018c  e3a00001          MOV      r0,#1
                  |L1.400|
;;;108        sysprintf("BuzzerDrvInit!!\n");
;;;109        if(hwInit() == FALSE)
;;;110        {
;;;111            sysprintf("BuzzerDrvInit ERROR (hwInit false)!!\n");
;;;112            return FALSE;
;;;113        }
;;;114        if(swInit() == FALSE)
;;;115        {
;;;116            sysprintf("BuzzerDrvInit ERROR (swInit false)!!\n");
;;;117            return FALSE;
;;;118        }
;;;119        initFlag = TRUE;
;;;120        return TRUE;
;;;121    }
000190  e8bd8010          POP      {r4,pc}
                  |L1.404|
000194  e28f0e15          ADR      r0,|L1.748|
000198  ebfffffe          BL       sysprintf
00019c  ebfffffe          BL       hwInit
0001a0  e3500000          CMP      r0,#0                 ;109
0001a4  1a000003          BNE      |L1.440|
0001a8  e28f0e15          ADR      r0,|L1.768|
0001ac  ebfffffe          BL       sysprintf
0001b0  e3a00000          MOV      r0,#0                 ;112
0001b4  eafffff5          B        |L1.400|
                  |L1.440|
0001b8  ebfffffe          BL       swInit
0001bc  e3500000          CMP      r0,#0                 ;114
0001c0  1a000003          BNE      |L1.468|
0001c4  e28f0f57          ADR      r0,|L1.808|
0001c8  ebfffffe          BL       sysprintf
0001cc  e3a00000          MOV      r0,#0                 ;117
0001d0  eaffffee          B        |L1.400|
                  |L1.468|
0001d4  e3a00001          MOV      r0,#1                 ;119
0001d8  e59f1108          LDR      r1,|L1.744|
0001dc  e5c10000          STRB     r0,[r1,#0]            ;119  ; initFlag
0001e0  e1a00000          MOV      r0,r0                 ;120
0001e4  eaffffe9          B        |L1.400|
;;;122    
                          ENDP

                  BuzzerPlay PROC
;;;123    
;;;124    void BuzzerPlay(uint32_t time, uint32_t delayTime, uint8_t counter, BOOL blocking)
0001e8  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
0001ec  e1a05000          MOV      r5,r0
0001f0  e1a06001          MOV      r6,r1
0001f4  e1a04002          MOV      r4,r2
0001f8  e1a07003          MOV      r7,r3
;;;126        //sysprintf("BuzzerPlay enter (%d, %d, %d, %d)!!\n",  time, delayTime, counter, blocking);
;;;127        if(xSemaphore == NULL)
0001fc  e59f00c0          LDR      r0,|L1.708|
000200  e5900000          LDR      r0,[r0,#0]  ; xSemaphore
000204  e3500000          CMP      r0,#0
000208  1a000000          BNE      |L1.528|
                  |L1.524|
;;;128            return;
;;;129        if(time == 0)
;;;130            return;
;;;131        
;;;132        if(counter >1)
;;;133        {
;;;134            if(delayTime == 0)
;;;135                return;
;;;136        }
;;;137        
;;;138        if(counter == 0)
;;;139            return;
;;;140        
;;;141        playTime = time;
;;;142        playDelayTime = delayTime;
;;;143        playCounter = counter;
;;;144        
;;;145        threadWaitTime = 0;
;;;146        xSemaphoreGive(xSemaphore);  
;;;147        if(blocking)
;;;148        {    
;;;149            while(playCounter != 0)
;;;150            {
;;;151                vTaskDelay(10/portTICK_RATE_MS);
;;;152            }
;;;153        }
;;;154        //sysprintf("BuzzerPlay exit (%d, %d, %d, %d)!!\n",  time, delayTime, counter, blocking);
;;;155    }
00020c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.528|
000210  e3550000          CMP      r5,#0                 ;129
000214  1a000000          BNE      |L1.540|
000218  eafffffb          B        |L1.524|
                  |L1.540|
00021c  e3540001          CMP      r4,#1                 ;132
000220  da000002          BLE      |L1.560|
000224  e3560000          CMP      r6,#0                 ;134
000228  1a000000          BNE      |L1.560|
00022c  eafffff6          B        |L1.524|
                  |L1.560|
000230  e3540000          CMP      r4,#0                 ;138
000234  1a000000          BNE      |L1.572|
000238  eafffff3          B        |L1.524|
                  |L1.572|
00023c  e59f0084          LDR      r0,|L1.712|
000240  e5805000          STR      r5,[r0,#0]            ;141  ; playTime
000244  e59f0084          LDR      r0,|L1.720|
000248  e5806000          STR      r6,[r0,#0]            ;142  ; playDelayTime
00024c  e59f0078          LDR      r0,|L1.716|
000250  e5c04000          STRB     r4,[r0,#0]            ;143  ; playCounter
000254  e3a00000          MOV      r0,#0                 ;145
000258  e59f1060          LDR      r1,|L1.704|
00025c  e5810000          STR      r0,[r1,#0]            ;145  ; threadWaitTime
000260  e3a03000          MOV      r3,#0                 ;146
000264  e1a02003          MOV      r2,r3                 ;146
000268  e1a01003          MOV      r1,r3                 ;146
00026c  e59f0050          LDR      r0,|L1.708|
000270  e5900000          LDR      r0,[r0,#0]            ;146  ; xSemaphore
000274  ebfffffe          BL       xQueueGenericSend
000278  e3570000          CMP      r7,#0                 ;147
00027c  0a000006          BEQ      |L1.668|
000280  ea000001          B        |L1.652|
                  |L1.644|
000284  e3a00001          MOV      r0,#1                 ;151
000288  ebfffffe          BL       vTaskDelay
                  |L1.652|
00028c  e59f0038          LDR      r0,|L1.716|
000290  e5d00000          LDRB     r0,[r0,#0]            ;149  ; playCounter
000294  e3500000          CMP      r0,#0                 ;149
000298  1afffff9          BNE      |L1.644|
                  |L1.668|
00029c  e1a00000          MOV      r0,r0
0002a0  eaffffd9          B        |L1.524|
                  |L1.676|
0002a4  7642757a          DCB      "vBuzzerDrvTask Going...\r\n",0
0002a8  7a657244
0002ac  72765461
0002b0  736b2047
0002b4  6f696e67
0002b8  2e2e2e0d
0002bc  0a00    
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L1.704|
                          DCD      threadWaitTime
                  |L1.708|
                          DCD      xSemaphore
                  |L1.712|
                          DCD      playTime
                  |L1.716|
                          DCD      playCounter
                  |L1.720|
                          DCD      playDelayTime
                  |L1.724|
0002d4  7642757a          DCB      "vBuzzerDrvTask",0
0002d8  7a657244
0002dc  72765461
0002e0  736b00  
0002e3  00                DCB      0
                  |L1.740|
                          DCD      vBuzzerDrvTask
                  |L1.744|
                          DCD      initFlag
                  |L1.748|
0002ec  42757a7a          DCB      "BuzzerDrvInit!!\n",0
0002f0  65724472
0002f4  76496e69
0002f8  7421210a
0002fc  00      
0002fd  00                DCB      0
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L1.768|
000300  42757a7a          DCB      "BuzzerDrvInit ERROR (hwInit false)!!\n",0
000304  65724472
000308  76496e69
00030c  74204552
000310  524f5220
000314  28687749
000318  6e697420
00031c  66616c73
000320  65292121
000324  0a00    
000326  00                DCB      0
000327  00                DCB      0
                  |L1.808|
000328  42757a7a          DCB      "BuzzerDrvInit ERROR (swInit false)!!\n",0
00032c  65724472
000330  76496e69
000334  74204552
000338  524f5220
00033c  28737749
000340  6e697420
000344  66616c73
000348  65292121
00034c  0a00    
00034e  00                DCB      0
00034f  00                DCB      0
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  threadWaitTime
                          DCD      0xffffffff
                  initFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  xSemaphore
                          DCD      0x00000000
                  playTime
                          DCD      0x00000000
                  playDelayTime
                          DCD      0x00000000
                  playCounter
000014  00                DCB      0x00
