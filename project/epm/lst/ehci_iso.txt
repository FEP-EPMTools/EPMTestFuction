; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\ehci_iso.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ehci_iso.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\ehci_iso.crf ..\..\common\src\BSP\Library\USB_HOST\src_core\ehci_iso.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  review_itd PROC
;;;38      */
;;;39     static int  review_itd(iTD_T *itd)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;40     {
000004  e1a06000          MOV      r6,r0
;;;41         UTR_T      *utr;
;;;42         uint32_t   frnidx = itd->sched_frnidx;
000008  e5968050          LDR      r8,[r6,#0x50]
;;;43         uint32_t   now_frame = (_ehci->UFINDR >> 3) & 0x3FF;
00000c  e59f05e8          LDR      r0,|L1.1532|
000010  e5900000          LDR      r0,[r0,#0]  ; _ehci
000014  e590002c          LDR      r0,[r0,#0x2c]
000018  e59f15e0          LDR      r1,|L1.1536|
00001c  e00191a0          AND      r9,r1,r0,LSR #3
;;;44         int        i, fidx;
;;;45     
;;;46         // sysprintf("R - %d %d, 0x%x\n", now_frame, frnidx, itd->Transaction[0]);
;;;47     
;;;48         if (now_frame == frnidx)
000020  e1590008          CMP      r9,r8
000024  1a00000b          BNE      |L1.88|
;;;49         {
;;;50             for (i = 0; i < 8; i++)
000028  e3a05000          MOV      r5,#0
00002c  ea000006          B        |L1.76|
                  |L1.48|
;;;51             {
;;;52                 if (itd->Transaction[i] & ITD_STATUS_ACTIVE)
000030  e2860004          ADD      r0,r6,#4
000034  e7900105          LDR      r0,[r0,r5,LSL #2]
000038  e3100102          TST      r0,#0x80000000
00003c  0a000001          BEQ      |L1.72|
;;;53                     return 0;                   /* have any not completed frames              */
000040  e3a00000          MOV      r0,#0
                  |L1.68|
;;;54             }
;;;55         }
;;;56         else if (now_frame > frnidx)
;;;57         {
;;;58             if ((now_frame - frnidx) > EHCI_ISO_RCLM_RANGE)
;;;59                 return 0;                       /* don't touch it                             */
;;;60         }
;;;61         else
;;;62         {
;;;63             if (now_frame + FL_SIZE - frnidx > EHCI_ISO_RCLM_RANGE)
;;;64                 return 0;                       /* don't touch it                             */
;;;65         }
;;;66     
;;;67         /*
;;;68          *  Reclaim this iTD
;;;69          */
;;;70         utr = itd->utr;
;;;71         fidx = itd->fidx;
;;;72         for (i = 0; i < 8; i++)
;;;73         {
;;;74             if (!(itd->trans_mask & (0x1<<i)))
;;;75                 continue;                       /* not scheduled micro-frame                  */
;;;76     
;;;77             if (ITD_STATUS(itd->Transaction[i]))
;;;78             {
;;;79                 if (itd->Transaction[i] & ITD_STATUS_ACTIVE)
;;;80                 {
;;;81                     utr->iso_status[fidx] = USBH_ERR_NOT_ACCESS0;
;;;82                     utr->status = USBH_ERR_NOT_ACCESS0;
;;;83                 }
;;;84                 else if (itd->Transaction[i] & ITD_STATUS_BABBLE)
;;;85                 {
;;;86                     utr->iso_status[fidx] = USBH_ERR_BABBLE_DETECTED;
;;;87                     utr->status = USBH_ERR_TRANSFER;
;;;88                 }
;;;89                 else if (itd->Transaction[i] & ITD_STATUS_BUFF_ERR)
;;;90                 {
;;;91                     utr->iso_status[fidx] = USBH_ERR_DATA_BUFF;
;;;92                     utr->status = USBH_ERR_TRANSFER;
;;;93                 }
;;;94                 else
;;;95                 {
;;;96                     utr->iso_status[fidx] = USBH_ERR_TRANSACTION;
;;;97                     utr->status = USBH_ERR_TRANSFER;
;;;98                 }
;;;99             }
;;;100            else
;;;101            {
;;;102                utr->iso_status[fidx] = 0;
;;;103                utr->iso_xlen[fidx] = ITD_XFER_LEN(itd->Transaction[i]);
;;;104            }
;;;105            fidx++;
;;;106        }
;;;107        utr->td_cnt--;
;;;108    
;;;109        if (utr->td_cnt == 0)                   /* All iTD of this UTR done                   */
;;;110        {
;;;111            utr->bIsTransferDone = 1;
;;;112            if (utr->func)
;;;113                utr->func(utr);
;;;114        }
;;;115    
;;;116        return 1;                               /* to be reclaimed                            */
;;;117    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L1.72|
000048  e2855001          ADD      r5,r5,#1              ;50
                  |L1.76|
00004c  e3550008          CMP      r5,#8                 ;50
000050  bafffff6          BLT      |L1.48|
000054  ea00000c          B        |L1.140|
                  |L1.88|
000058  e1590008          CMP      r9,r8                 ;56
00005c  9a000004          BLS      |L1.116|
000060  e0490008          SUB      r0,r9,r8              ;58
000064  e3500020          CMP      r0,#0x20              ;58
000068  9a000007          BLS      |L1.140|
00006c  e3a00000          MOV      r0,#0                 ;59
000070  eafffff3          B        |L1.68|
                  |L1.116|
000074  e2890b01          ADD      r0,r9,#0x400          ;63
000078  e0400008          SUB      r0,r0,r8              ;63
00007c  e3500020          CMP      r0,#0x20              ;63
000080  9a000001          BLS      |L1.140|
000084  e3a00000          MOV      r0,#0                 ;64
000088  eaffffed          B        |L1.68|
                  |L1.140|
00008c  e5964044          LDR      r4,[r6,#0x44]         ;70
000090  e5d6704c          LDRB     r7,[r6,#0x4c]         ;71
000094  e3a05000          MOV      r5,#0                 ;72
000098  ea000039          B        |L1.388|
                  |L1.156|
00009c  e5d6004d          LDRB     r0,[r6,#0x4d]         ;74
0000a0  e3a01001          MOV      r1,#1                 ;74
0000a4  e1100511          TST      r0,r1,LSL r5          ;74
0000a8  1a000000          BNE      |L1.176|
0000ac  ea000033          B        |L1.384|
                  |L1.176|
0000b0  e2860004          ADD      r0,r6,#4              ;77
0000b4  e7900105          LDR      r0,[r0,r5,LSL #2]     ;77
0000b8  e3a0100f          MOV      r1,#0xf               ;77
0000bc  e1110e20          TST      r1,r0,LSR #28         ;77
0000c0  0a000022          BEQ      |L1.336|
0000c4  e2860004          ADD      r0,r6,#4              ;79
0000c8  e7900105          LDR      r0,[r0,r5,LSL #2]     ;79
0000cc  e3100102          TST      r0,#0x80000000        ;79
0000d0  0a000004          BEQ      |L1.232|
0000d4  e59f0528          LDR      r0,|L1.1540|
0000d8  e2841054          ADD      r1,r4,#0x54           ;81
0000dc  e7810107          STR      r0,[r1,r7,LSL #2]     ;81
0000e0  e5840078          STR      r0,[r4,#0x78]         ;82
0000e4  ea000023          B        |L1.376|
                  |L1.232|
0000e8  e2860004          ADD      r0,r6,#4              ;84
0000ec  e7900105          LDR      r0,[r0,r5,LSL #2]     ;84
0000f0  e3100202          TST      r0,#0x20000000        ;84
0000f4  0a000005          BEQ      |L1.272|
0000f8  e59f0508          LDR      r0,|L1.1544|
0000fc  e2841054          ADD      r1,r4,#0x54           ;86
000100  e7810107          STR      r0,[r1,r7,LSL #2]     ;86
000104  e3e000c8          MVN      r0,#0xc8              ;87
000108  e5840078          STR      r0,[r4,#0x78]         ;87
00010c  ea000019          B        |L1.376|
                  |L1.272|
000110  e2860004          ADD      r0,r6,#4              ;89
000114  e7900105          LDR      r0,[r0,r5,LSL #2]     ;89
000118  e3100101          TST      r0,#0x40000000        ;89
00011c  0a000005          BEQ      |L1.312|
000120  e59f04e4          LDR      r0,|L1.1548|
000124  e2841054          ADD      r1,r4,#0x54           ;91
000128  e7810107          STR      r0,[r1,r7,LSL #2]     ;91
00012c  e3e000c8          MVN      r0,#0xc8              ;92
000130  e5840078          STR      r0,[r4,#0x78]         ;92
000134  ea00000f          B        |L1.376|
                  |L1.312|
000138  e59f04d0          LDR      r0,|L1.1552|
00013c  e2841054          ADD      r1,r4,#0x54           ;96
000140  e7810107          STR      r0,[r1,r7,LSL #2]     ;96
000144  e3e000c8          MVN      r0,#0xc8              ;97
000148  e5840078          STR      r0,[r4,#0x78]         ;97
00014c  ea000009          B        |L1.376|
                  |L1.336|
000150  e3a00000          MOV      r0,#0                 ;102
000154  e2841054          ADD      r1,r4,#0x54           ;102
000158  e7810107          STR      r0,[r1,r7,LSL #2]     ;102
00015c  e2860004          ADD      r0,r6,#4              ;103
000160  e7900105          LDR      r0,[r0,r5,LSL #2]     ;103
000164  e59f14a8          LDR      r1,|L1.1556|
000168  e0010820          AND      r0,r1,r0,LSR #16      ;103
00016c  e2841024          ADD      r1,r4,#0x24           ;103
000170  e0811087          ADD      r1,r1,r7,LSL #1       ;103
000174  e1c100b0          STRH     r0,[r1,#0]            ;103
                  |L1.376|
000178  e2877001          ADD      r7,r7,#1              ;105
00017c  e1a00000          MOV      r0,r0                 ;75
                  |L1.384|
000180  e2855001          ADD      r5,r5,#1              ;72
                  |L1.388|
000184  e3550008          CMP      r5,#8                 ;72
000188  baffffc3          BLT      |L1.156|
00018c  e5940074          LDR      r0,[r4,#0x74]         ;107
000190  e2400001          SUB      r0,r0,#1              ;107
000194  e5840074          STR      r0,[r4,#0x74]         ;107
000198  e5940074          LDR      r0,[r4,#0x74]         ;109
00019c  e3500000          CMP      r0,#0                 ;109
0001a0  1a000007          BNE      |L1.452|
0001a4  e3a00001          MOV      r0,#1                 ;111
0001a8  e5c40014          STRB     r0,[r4,#0x14]         ;111
0001ac  e5940084          LDR      r0,[r4,#0x84]         ;112
0001b0  e3500000          CMP      r0,#0                 ;112
0001b4  0a000002          BEQ      |L1.452|
0001b8  e5941084          LDR      r1,[r4,#0x84]         ;113
0001bc  e1a00004          MOV      r0,r4                 ;113
0001c0  e12fff31          BLX      r1                    ;113
                  |L1.452|
0001c4  e3a00001          MOV      r0,#1                 ;116
0001c8  eaffff9d          B        |L1.68|
;;;118    
                          ENDP

                  review_sitd PROC
;;;123     */
;;;124    static int  review_sitd(siTD_T *sitd)
0001cc  e92d47f0          PUSH     {r4-r10,lr}
;;;125    {
0001d0  e1a05000          MOV      r5,r0
;;;126        UTR_T      *utr;
;;;127        uint32_t   frnidx = sitd->sched_frnidx;
0001d4  e5957028          LDR      r7,[r5,#0x28]
;;;128        uint32_t   now_frame = (_ehci->UFINDR >> 3) & 0x3FF;
0001d8  e59f041c          LDR      r0,|L1.1532|
0001dc  e5900000          LDR      r0,[r0,#0]  ; _ehci
0001e0  e590002c          LDR      r0,[r0,#0x2c]
0001e4  e59f1414          LDR      r1,|L1.1536|
0001e8  e00181a0          AND      r8,r1,r0,LSR #3
;;;129        int        fidx;
;;;130        uint32_t   TotalBytesToTransfer;
;;;131    
;;;132        if (now_frame == frnidx)
0001ec  e1580007          CMP      r8,r7
0001f0  1a000005          BNE      |L1.524|
;;;133        {
;;;134            if (SITD_STATUS(sitd->StsCtrl) == SITD_STATUS_ACTIVE)
0001f4  e5d5000c          LDRB     r0,[r5,#0xc]
0001f8  e20000fc          AND      r0,r0,#0xfc
0001fc  e3500080          CMP      r0,#0x80
000200  1a00000e          BNE      |L1.576|
;;;135                return 0;
000204  e3a00000          MOV      r0,#0
                  |L1.520|
;;;136        }
;;;137        else if (now_frame > frnidx)
;;;138        {
;;;139            if ((now_frame - frnidx) > EHCI_ISO_RCLM_RANGE)
;;;140                return 0;                       /* don't touch it                             */
;;;141        }
;;;142        else
;;;143        {
;;;144            if (now_frame + FL_SIZE - frnidx > EHCI_ISO_RCLM_RANGE)
;;;145                return 0;                       /* don't touch it                             */
;;;146        }
;;;147    
;;;148        /*
;;;149         *  Reclaim this siTD
;;;150         */
;;;151        utr = sitd->utr;
;;;152        fidx = sitd->fidx;
;;;153    
;;;154        if (SITD_STATUS(sitd->StsCtrl))
;;;155        {
;;;156            if (sitd->StsCtrl & SITD_STATUS_ACTIVE)
;;;157            {
;;;158                utr->iso_status[fidx] = USBH_ERR_NOT_ACCESS0;
;;;159            }
;;;160            else if (sitd->StsCtrl & SITD_BABBLE_DETECTED)
;;;161            {
;;;162                utr->iso_status[fidx] = USBH_ERR_BABBLE_DETECTED;
;;;163                utr->status = USBH_ERR_TRANSFER;
;;;164            }
;;;165            else if (sitd->StsCtrl & SITD_STATUS_BUFF_ERR)
;;;166            {
;;;167                utr->iso_status[fidx] = USBH_ERR_DATA_BUFF;
;;;168                utr->status = USBH_ERR_TRANSFER;
;;;169            }
;;;170            else
;;;171            {
;;;172                utr->iso_status[fidx] = USBH_ERR_TRANSACTION;
;;;173                utr->status = USBH_ERR_TRANSFER;
;;;174            }
;;;175        }
;;;176        else
;;;177        {
;;;178            TotalBytesToTransfer = (sitd->StsCtrl & SITD_XFER_CNT_Msk) >> SITD_XFER_CNT_Pos;
;;;179            utr->iso_xlen[fidx] =  utr->iso_xlen[fidx] - TotalBytesToTransfer;
;;;180            utr->iso_status[fidx] = 0;
;;;181        }
;;;182        utr->td_cnt--;
;;;183    
;;;184        if (utr->td_cnt == 0)                   /* All iTD of this UTR done                   */
;;;185        {
;;;186            utr->bIsTransferDone = 1;
;;;187            if (utr->func)
;;;188                utr->func(utr);
;;;189        }
;;;190        return 1;                               /* to be reclaimed                            */
;;;191    }
000208  e8bd87f0          POP      {r4-r10,pc}
                  |L1.524|
00020c  e1580007          CMP      r8,r7                 ;137
000210  9a000004          BLS      |L1.552|
000214  e0480007          SUB      r0,r8,r7              ;139
000218  e3500020          CMP      r0,#0x20              ;139
00021c  9a000007          BLS      |L1.576|
000220  e3a00000          MOV      r0,#0                 ;140
000224  eafffff7          B        |L1.520|
                  |L1.552|
000228  e2880b01          ADD      r0,r8,#0x400          ;144
00022c  e0400007          SUB      r0,r0,r7              ;144
000230  e3500020          CMP      r0,#0x20              ;144
000234  9a000001          BLS      |L1.576|
000238  e3a00000          MOV      r0,#0                 ;145
00023c  eafffff1          B        |L1.520|
                  |L1.576|
000240  e5954020          LDR      r4,[r5,#0x20]         ;151
000244  e5d56024          LDRB     r6,[r5,#0x24]         ;152
000248  e5d5000c          LDRB     r0,[r5,#0xc]          ;154
00024c  e31000fc          TST      r0,#0xfc              ;154
000250  0a00001e          BEQ      |L1.720|
000254  e5d5000c          LDRB     r0,[r5,#0xc]          ;156
000258  e3100080          TST      r0,#0x80              ;156
00025c  0a000003          BEQ      |L1.624|
000260  e59f039c          LDR      r0,|L1.1540|
000264  e2841054          ADD      r1,r4,#0x54           ;158
000268  e7810106          STR      r0,[r1,r6,LSL #2]     ;158
00026c  ea000025          B        |L1.776|
                  |L1.624|
000270  e5d5000c          LDRB     r0,[r5,#0xc]          ;160
000274  e3100010          TST      r0,#0x10              ;160
000278  0a000005          BEQ      |L1.660|
00027c  e59f0384          LDR      r0,|L1.1544|
000280  e2841054          ADD      r1,r4,#0x54           ;162
000284  e7810106          STR      r0,[r1,r6,LSL #2]     ;162
000288  e3e000c8          MVN      r0,#0xc8              ;163
00028c  e5840078          STR      r0,[r4,#0x78]         ;163
000290  ea00001c          B        |L1.776|
                  |L1.660|
000294  e5d5000c          LDRB     r0,[r5,#0xc]          ;165
000298  e3100020          TST      r0,#0x20              ;165
00029c  0a000005          BEQ      |L1.696|
0002a0  e59f0364          LDR      r0,|L1.1548|
0002a4  e2841054          ADD      r1,r4,#0x54           ;167
0002a8  e7810106          STR      r0,[r1,r6,LSL #2]     ;167
0002ac  e3e000c8          MVN      r0,#0xc8              ;168
0002b0  e5840078          STR      r0,[r4,#0x78]         ;168
0002b4  ea000013          B        |L1.776|
                  |L1.696|
0002b8  e59f0350          LDR      r0,|L1.1552|
0002bc  e2841054          ADD      r1,r4,#0x54           ;172
0002c0  e7810106          STR      r0,[r1,r6,LSL #2]     ;172
0002c4  e3e000c8          MVN      r0,#0xc8              ;173
0002c8  e5840078          STR      r0,[r4,#0x78]         ;173
0002cc  ea00000d          B        |L1.776|
                  |L1.720|
0002d0  e595000c          LDR      r0,[r5,#0xc]          ;178
0002d4  e59f133c          LDR      r1,|L1.1560|
0002d8  e0000001          AND      r0,r0,r1              ;178
0002dc  e1a09820          LSR      r9,r0,#16             ;178
0002e0  e2840024          ADD      r0,r4,#0x24           ;179
0002e4  e0800086          ADD      r0,r0,r6,LSL #1       ;179
0002e8  e1d000b0          LDRH     r0,[r0,#0]            ;179
0002ec  e0400009          SUB      r0,r0,r9              ;179
0002f0  e2841024          ADD      r1,r4,#0x24           ;179
0002f4  e0811086          ADD      r1,r1,r6,LSL #1       ;179
0002f8  e1c100b0          STRH     r0,[r1,#0]            ;179
0002fc  e3a00000          MOV      r0,#0                 ;180
000300  e2841054          ADD      r1,r4,#0x54           ;180
000304  e7810106          STR      r0,[r1,r6,LSL #2]     ;180
                  |L1.776|
000308  e5940074          LDR      r0,[r4,#0x74]         ;182
00030c  e2400001          SUB      r0,r0,#1              ;182
000310  e5840074          STR      r0,[r4,#0x74]         ;182
000314  e5940074          LDR      r0,[r4,#0x74]         ;184
000318  e3500000          CMP      r0,#0                 ;184
00031c  1a000007          BNE      |L1.832|
000320  e3a00001          MOV      r0,#1                 ;186
000324  e5c40014          STRB     r0,[r4,#0x14]         ;186
000328  e5940084          LDR      r0,[r4,#0x84]         ;187
00032c  e3500000          CMP      r0,#0                 ;187
000330  0a000002          BEQ      |L1.832|
000334  e5941084          LDR      r1,[r4,#0x84]         ;188
000338  e1a00004          MOV      r0,r4                 ;188
00033c  e12fff31          BLX      r1                    ;188
                  |L1.832|
000340  e3a00001          MOV      r0,#1                 ;190
000344  eaffffaf          B        |L1.520|
;;;192    
                          ENDP

                  scan_isochronous_list PROC
;;;196     */
;;;197    void scan_isochronous_list(void)
000348  e92d5ff0          PUSH     {r4-r12,lr}
;;;198    {
;;;199        ISO_EP_T   *iso_ep = iso_ep_list;
00034c  e59f02c8          LDR      r0,|L1.1564|
000350  e5907000          LDR      r7,[r0,#0]  ; iso_ep_list
;;;200        iTD_T      *itd, *itd_pre, *p;
;;;201        siTD_T     *sitd, *sitd_pre, *sp;
;;;202        uint32_t   frnidx;
;;;203    
;;;204        DISABLE_EHCI_IRQ();
000354  e3a00017          MOV      r0,#0x17
000358  ebfffffe          BL       sysDisableInterrupt
;;;205    
;;;206        while (iso_ep != NULL)                  /* Search all activated iso endpoints         */
00035c  ea000073          B        |L1.1328|
                  |L1.864|
;;;207        {
;;;208            /*--------------------------------------------------------------------------------*/
;;;209            /*  Scan all iTDs                                                                 */
;;;210            /*--------------------------------------------------------------------------------*/
;;;211            itd = iso_ep->itd_list;             /* get the first iTD from iso_ep's iTD list   */
000360  e5974008          LDR      r4,[r7,#8]
;;;212            itd_pre = NULL;
000364  e3a0a000          MOV      r10,#0
;;;213            while (itd != NULL)                 /* traverse all iTDs of itd list              */
000368  ea000033          B        |L1.1084|
                  |L1.876|
;;;214            {
;;;215                if (review_itd(itd))            /* inspect and reclaim iTD                    */
00036c  e1a00004          MOV      r0,r4
000370  ebfffffe          BL       review_itd
000374  e3500000          CMP      r0,#0
000378  0a00002d          BEQ      |L1.1076|
;;;216                {
;;;217                    /*------------------------------------------------------------------------*/
;;;218                    /*  Remove this iTD from period frame list                                */
;;;219                    /*------------------------------------------------------------------------*/
;;;220                    frnidx = itd->sched_frnidx;
00037c  e5946050          LDR      r6,[r4,#0x50]
;;;221                    if (_PFList[frnidx] == ITD_HLNK_ITD(itd))
000380  e59f0298          LDR      r0,|L1.1568|
000384  e5900000          LDR      r0,[r0,#0]  ; _PFList
000388  e7901106          LDR      r1,[r0,r6,LSL #2]
00038c  e3c4001f          BIC      r0,r4,#0x1f
000390  e1510000          CMP      r1,r0
000394  1a000004          BNE      |L1.940|
;;;222                    {
;;;223                        /* is the first entry, just change to next     */
;;;224                        _PFList[frnidx] = itd->Next_Link;
000398  e59f1280          LDR      r1,|L1.1568|
00039c  e5940000          LDR      r0,[r4,#0]
0003a0  e5911000          LDR      r1,[r1,#0]  ; _PFList
0003a4  e7810106          STR      r0,[r1,r6,LSL #2]
0003a8  ea000015          B        |L1.1028|
                  |L1.940|
;;;225                    }
;;;226                    else
;;;227                    {
;;;228                        p = ITD_PTR(_PFList[frnidx]);     /* find the preceding iTD            */
0003ac  e59f026c          LDR      r0,|L1.1568|
0003b0  e5900000          LDR      r0,[r0,#0]  ; _PFList
0003b4  e7900106          LDR      r0,[r0,r6,LSL #2]
0003b8  e3c0801f          BIC      r8,r0,#0x1f
;;;229                        while ((ITD_PTR(p->Next_Link) != itd) && (p != NULL))
0003bc  ea000001          B        |L1.968|
                  |L1.960|
;;;230                        {
;;;231                            p = ITD_PTR(p->Next_Link);
0003c0  e5980000          LDR      r0,[r8,#0]
0003c4  e3c0801f          BIC      r8,r0,#0x1f
                  |L1.968|
0003c8  e5980000          LDR      r0,[r8,#0]            ;229
0003cc  e3c0001f          BIC      r0,r0,#0x1f           ;229
0003d0  e1500004          CMP      r0,r4                 ;229
0003d4  0a000001          BEQ      |L1.992|
0003d8  e3580000          CMP      r8,#0                 ;229
0003dc  1afffff7          BNE      |L1.960|
                  |L1.992|
;;;232                        }
;;;233    
;;;234                        if (p == NULL)                    /* link list out of control!         */
0003e0  e3580000          CMP      r8,#0
0003e4  1a000004          BNE      |L1.1020|
;;;235                        {
;;;236                            USB_error("An iTD lost refernece to periodic frame list! 0x%x -> %d\n", (int)itd, frnidx);
0003e8  e1a02006          MOV      r2,r6
0003ec  e1a01004          MOV      r1,r4
0003f0  e28f0f8b          ADR      r0,|L1.1572|
0003f4  ebfffffe          BL       sysprintf
0003f8  ea000001          B        |L1.1028|
                  |L1.1020|
;;;237                        }
;;;238                        else                              /* remove iTD from list              */
;;;239                        {
;;;240                            p->Next_Link = itd->Next_Link;
0003fc  e5940000          LDR      r0,[r4,#0]
000400  e5880000          STR      r0,[r8,#0]
                  |L1.1028|
;;;241                        }
;;;242                    }
;;;243    
;;;244                    /*------------------------------------------------------------------------*/
;;;245                    /*  Remove this iTD from iso_ep's iTD list                                */
;;;246                    /*------------------------------------------------------------------------*/
;;;247                    if (itd_pre == NULL)
000404  e35a0000          CMP      r10,#0
000408  1a000002          BNE      |L1.1048|
;;;248                    {
;;;249                        iso_ep->itd_list = itd->next;
00040c  e5940054          LDR      r0,[r4,#0x54]
000410  e5870008          STR      r0,[r7,#8]
000414  ea000001          B        |L1.1056|
                  |L1.1048|
;;;250                    }
;;;251                    else
;;;252                    {
;;;253                        itd_pre->next = itd->next;
000418  e5940054          LDR      r0,[r4,#0x54]
00041c  e58a0054          STR      r0,[r10,#0x54]
                  |L1.1056|
;;;254                    }
;;;255                    p = itd->next;
000420  e5948054          LDR      r8,[r4,#0x54]
;;;256                    free_ehci_iTD(itd);
000424  e1a00004          MOV      r0,r4
000428  ebfffffe          BL       free_ehci_iTD
;;;257                    itd = p;
00042c  e1a04008          MOV      r4,r8
000430  ea000001          B        |L1.1084|
                  |L1.1076|
;;;258                }
;;;259                else
;;;260                {
;;;261                    itd_pre = itd;
000434  e1a0a004          MOV      r10,r4
;;;262                    itd = itd->next;            /* traverse to the next iTD of iTD list       */
000438  e5944054          LDR      r4,[r4,#0x54]
                  |L1.1084|
00043c  e3540000          CMP      r4,#0                 ;213
000440  1affffc9          BNE      |L1.876|
;;;263                }
;;;264            }
;;;265    
;;;266            /*--------------------------------------------------------------------------------*/
;;;267            /*  Scan all siTDs                                                                */
;;;268            /*--------------------------------------------------------------------------------*/
;;;269            sitd = iso_ep->sitd_list;           /* get the first siTD from iso_ep's siTD list */
000444  e5975010          LDR      r5,[r7,#0x10]
;;;270            sitd_pre = NULL;
000448  e3a0b000          MOV      r11,#0
;;;271            while (sitd != NULL)                /* traverse all siTDs of sitd list            */
00044c  ea000034          B        |L1.1316|
                  |L1.1104|
;;;272            {
;;;273                if (review_sitd(sitd))          /* inspect and reclaim siTD                   */
000450  e1a00005          MOV      r0,r5
000454  ebfffffe          BL       review_sitd
000458  e3500000          CMP      r0,#0
00045c  0a00002e          BEQ      |L1.1308|
;;;274                {
;;;275                    /*------------------------------------------------------------------------*/
;;;276                    /*  Remove this siTD from period frame list                               */
;;;277                    /*------------------------------------------------------------------------*/
;;;278                    frnidx = sitd->sched_frnidx;
000460  e5956028          LDR      r6,[r5,#0x28]
;;;279                    if (_PFList[frnidx] == SITD_HLNK_SITD(sitd))
000464  e59f01b4          LDR      r0,|L1.1568|
000468  e5900000          LDR      r0,[r0,#0]  ; _PFList
00046c  e7900106          LDR      r0,[r0,r6,LSL #2]
000470  e3c5101f          BIC      r1,r5,#0x1f
000474  e3811004          ORR      r1,r1,#4
000478  e1500001          CMP      r0,r1
00047c  1a000004          BNE      |L1.1172|
;;;280                    {
;;;281                        /* is the first entry, just change to next     */
;;;282                        _PFList[frnidx] = sitd->Next_Link;
000480  e59f1198          LDR      r1,|L1.1568|
000484  e5950000          LDR      r0,[r5,#0]
000488  e5911000          LDR      r1,[r1,#0]  ; _PFList
00048c  e7810106          STR      r0,[r1,r6,LSL #2]
000490  ea000015          B        |L1.1260|
                  |L1.1172|
;;;283                    }
;;;284                    else
;;;285                    {
;;;286                        sp = SITD_PTR(_PFList[frnidx]);   /* find the preceding siTD           */
000494  e59f0184          LDR      r0,|L1.1568|
000498  e5900000          LDR      r0,[r0,#0]  ; _PFList
00049c  e7900106          LDR      r0,[r0,r6,LSL #2]
0004a0  e3c0901f          BIC      r9,r0,#0x1f
;;;287                        while ((SITD_PTR(sp->Next_Link) != sitd) && (sp != NULL))
0004a4  ea000001          B        |L1.1200|
                  |L1.1192|
;;;288                        {
;;;289                            sp = SITD_PTR(sp->Next_Link);
0004a8  e5990000          LDR      r0,[r9,#0]
0004ac  e3c0901f          BIC      r9,r0,#0x1f
                  |L1.1200|
0004b0  e5990000          LDR      r0,[r9,#0]            ;287
0004b4  e3c0001f          BIC      r0,r0,#0x1f           ;287
0004b8  e1500005          CMP      r0,r5                 ;287
0004bc  0a000001          BEQ      |L1.1224|
0004c0  e3590000          CMP      r9,#0                 ;287
0004c4  1afffff7          BNE      |L1.1192|
                  |L1.1224|
;;;290                        }
;;;291    
;;;292                        if (sp == NULL)                   /* link list out of control!         */
0004c8  e3590000          CMP      r9,#0
0004cc  1a000004          BNE      |L1.1252|
;;;293                        {
;;;294                            USB_error("An siTD lost reference to periodic frame list! 0x%x -> %d\n", (int)sitd, frnidx);
0004d0  e1a02006          MOV      r2,r6
0004d4  e1a01005          MOV      r1,r5
0004d8  e28f0d06          ADR      r0,|L1.1632|
0004dc  ebfffffe          BL       sysprintf
0004e0  ea000001          B        |L1.1260|
                  |L1.1252|
;;;295                        }
;;;296                        else                              /* remove iTD from list              */
;;;297                        {
;;;298                            sp->Next_Link = sitd->Next_Link;
0004e4  e5950000          LDR      r0,[r5,#0]
0004e8  e5890000          STR      r0,[r9,#0]
                  |L1.1260|
;;;299                        }
;;;300                    }
;;;301    
;;;302                    /*------------------------------------------------------------------------*/
;;;303                    /*  Remove this siTD from iso_ep's siTD list                              */
;;;304                    /*------------------------------------------------------------------------*/
;;;305                    if (sitd_pre == NULL)
0004ec  e35b0000          CMP      r11,#0
0004f0  1a000002          BNE      |L1.1280|
;;;306                    {
;;;307                        iso_ep->sitd_list = sitd->next;
0004f4  e595002c          LDR      r0,[r5,#0x2c]
0004f8  e5870010          STR      r0,[r7,#0x10]
0004fc  ea000001          B        |L1.1288|
                  |L1.1280|
;;;308                    }
;;;309                    else
;;;310                    {
;;;311                        sitd_pre->next = sitd->next;
000500  e595002c          LDR      r0,[r5,#0x2c]
000504  e58b002c          STR      r0,[r11,#0x2c]
                  |L1.1288|
;;;312                    }
;;;313                    sp = sitd->next;
000508  e595902c          LDR      r9,[r5,#0x2c]
;;;314                    free_ehci_siTD(sitd);
00050c  e1a00005          MOV      r0,r5
000510  ebfffffe          BL       free_ehci_siTD
;;;315                    sitd = sp;
000514  e1a05009          MOV      r5,r9
000518  ea000001          B        |L1.1316|
                  |L1.1308|
;;;316                }
;;;317                else
;;;318                {
;;;319                    sitd_pre = sitd;
00051c  e1a0b005          MOV      r11,r5
;;;320                    sitd = sitd->next;           /* traverse to the next siTD of siTD list     */
000520  e595502c          LDR      r5,[r5,#0x2c]
                  |L1.1316|
000524  e3550000          CMP      r5,#0                 ;271
000528  1affffc8          BNE      |L1.1104|
;;;321                }
;;;322            }
;;;323    
;;;324            iso_ep = iso_ep->next;
00052c  e5977018          LDR      r7,[r7,#0x18]
                  |L1.1328|
000530  e3570000          CMP      r7,#0                 ;206
000534  1affff89          BNE      |L1.864|
;;;325        }
;;;326    
;;;327        ENABLE_EHCI_IRQ();
000538  e3a00017          MOV      r0,#0x17
00053c  ebfffffe          BL       sysEnableInterrupt
;;;328    }
000540  e8bd9ff0          POP      {r4-r12,pc}
;;;329    
                          ENDP

                  write_itd_info PROC
;;;330    
;;;331    static void  write_itd_info(UTR_T *utr, iTD_T *itd)
000544  e92d40f0          PUSH     {r4-r7,lr}
;;;332    {
000548  e1a03000          MOV      r3,r0
;;;333        UDEV_T     *udev = utr->udev;
00054c  e5934000          LDR      r4,[r3,#0]
;;;334        EP_INFO_T  *ep = utr->ep;               /* reference to isochronous endpoint          */
000550  e593000c          LDR      r0,[r3,#0xc]
;;;335        uint32_t   buff_page_addr;
;;;336        int        i;
;;;337    
;;;338        buff_page_addr = itd->buff_base & 0xFFFFF000;     /* 4K page                          */
000554  e591c048          LDR      r12,[r1,#0x48]
000558  e1a0562c          LSR      r5,r12,#12
00055c  e1a05605          LSL      r5,r5,#12
;;;339    
;;;340        for (i = 0; i < 7; i++)
000560  e3a02000          MOV      r2,#0
000564  ea000004          B        |L1.1404|
                  |L1.1384|
;;;341        {
;;;342            itd->Bptr[i] = buff_page_addr + (0x1000 * i);
000568  e3a0ca01          MOV      r12,#0x1000
00056c  e02c5c92          MLA      r12,r2,r12,r5
000570  e2816024          ADD      r6,r1,#0x24
000574  e786c102          STR      r12,[r6,r2,LSL #2]
000578  e2822001          ADD      r2,r2,#1              ;340
                  |L1.1404|
00057c  e3520007          CMP      r2,#7                 ;340
000580  bafffff8          BLT      |L1.1384|
;;;343        }
;;;344        /* EndPtr  R  Device Address        */
;;;345        itd->Bptr[0] |= (udev->dev_num) | ((ep->bEndpointAddress & 0xF) << ITD_EP_NUM_Pos);
000584  e5d4c019          LDRB     r12,[r4,#0x19]
000588  e5d06000          LDRB     r6,[r0,#0]
00058c  e206600f          AND      r6,r6,#0xf
000590  e18cc406          ORR      r12,r12,r6,LSL #8
000594  e5916024          LDR      r6,[r1,#0x24]
000598  e18cc006          ORR      r12,r12,r6
00059c  e581c024          STR      r12,[r1,#0x24]
;;;346        itd->Bptr[1] |= ep->wMaxPacketSize;               /* Maximum Packet Size              */
0005a0  e591c028          LDR      r12,[r1,#0x28]
0005a4  e1d060b4          LDRH     r6,[r0,#4]
0005a8  e18cc006          ORR      r12,r12,r6
0005ac  e581c028          STR      r12,[r1,#0x28]
;;;347    
;;;348        if ((ep->bEndpointAddress & EP_ADDR_DIR_MASK) == EP_ADDR_DIR_IN) /* I/O               */
0005b0  e5d0c000          LDRB     r12,[r0,#0]
0005b4  e20cc080          AND      r12,r12,#0x80
0005b8  e35c0080          CMP      r12,#0x80
0005bc  1a000003          BNE      |L1.1488|
;;;349            itd->Bptr[1] |= ITD_DIR_IN;
0005c0  e591c028          LDR      r12,[r1,#0x28]
0005c4  e38ccb02          ORR      r12,r12,#0x800
0005c8  e581c028          STR      r12,[r1,#0x28]
0005cc  ea000001          B        |L1.1496|
                  |L1.1488|
;;;350        else
;;;351            itd->Bptr[1] |= ITD_DIR_OUT;
0005d0  e591c028          LDR      r12,[r1,#0x28]
0005d4  e581c028          STR      r12,[r1,#0x28]
                  |L1.1496|
;;;352    
;;;353        itd->Bptr[2] |= (ep->wMaxPacketSize + 1023)/1024;                /* Mult              */
0005d8  e1d060b4          LDRH     r6,[r0,#4]
0005dc  e286cc03          ADD      r12,r6,#0x300
0005e0  e28cc0ff          ADD      r12,r12,#0xff
0005e4  e1a06fcc          ASR      r6,r12,#31
0005e8  e08c6b26          ADD      r6,r12,r6,LSR #22
0005ec  e591702c          LDR      r7,[r1,#0x2c]
0005f0  e1876546          ORR      r6,r7,r6,ASR #10
0005f4  e581602c          STR      r6,[r1,#0x2c]
;;;354    }
0005f8  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1532|
                          DCD      _ehci
                  |L1.1536|
                          DCD      0x000003ff
                  |L1.1540|
                          DCD      0xfffffeda
                  |L1.1544|
                          DCD      0xfffffef0
                  |L1.1548|
                          DCD      0xfffffeee
                  |L1.1552|
                          DCD      0xfffffef1
                  |L1.1556|
                          DCD      0x00000fff
                  |L1.1560|
                          DCD      0x03ff0000
                  |L1.1564|
                          DCD      iso_ep_list
                  |L1.1568|
                          DCD      _PFList
                  |L1.1572|
000624  416e2069          DCB      "An iTD lost refernece to periodic frame list! 0x%x -> %"
000628  5444206c
00062c  6f737420
000630  72656665
000634  726e6563
000638  6520746f
00063c  20706572
000640  696f6469
000644  63206672
000648  616d6520
00064c  6c697374
000650  21203078
000654  2578202d
000658  3e2025  
00065b  640a00            DCB      "d\n",0
00065e  00                DCB      0
00065f  00                DCB      0
                  |L1.1632|
000660  416e2073          DCB      "An siTD lost reference to periodic frame list! 0x%x -> "
000664  69544420
000668  6c6f7374
00066c  20726566
000670  6572656e
000674  63652074
000678  6f207065
00067c  72696f64
000680  69632066
000684  72616d65
000688  206c6973
00068c  74212030
000690  78257820
000694  2d3e20  
000697  25640a00          DCB      "%d\n",0
00069b  00                DCB      0
                          ENDP

                  write_itd_micro_frame PROC
;;;355    
;;;356    static void  write_itd_micro_frame(UTR_T *utr, int fidx, iTD_T *itd, int mf)
00069c  e92d4070          PUSH     {r4-r6,lr}
;;;357    {
;;;358        uint32_t   buff_addr;
;;;359    
;;;360        buff_addr = (uint32_t)(utr->iso_buff[fidx]); /* xfer buffer start address of this frame */
0006a0  e2804034          ADD      r4,r0,#0x34
0006a4  e794c101          LDR      r12,[r4,r1,LSL #2]
;;;361    
;;;362        itd->Transaction[mf] = ITD_STATUS_ACTIVE |                                            /* Status */
0006a8  e1a0462c          LSR      r4,r12,#12
0006ac  e1a04604          LSL      r4,r4,#12
0006b0  e5925048          LDR      r5,[r2,#0x48]
0006b4  e1a05625          LSR      r5,r5,#12
0006b8  e1a05605          LSL      r5,r5,#12
0006bc  e0444005          SUB      r4,r4,r5
0006c0  e2805024          ADD      r5,r0,#0x24
0006c4  e0855081          ADD      r5,r5,r1,LSL #1
0006c8  e1d550b0          LDRH     r5,[r5,#0]
0006cc  e3c55a0f          BIC      r5,r5,#0xf000
0006d0  e3a06102          MOV      r6,#0x80000000
0006d4  e1865805          ORR      r5,r6,r5,LSL #16
0006d8  e1844005          ORR      r4,r4,r5
0006dc  e1cc59c6          BIC      r5,r12,r6,ASR #19
0006e0  e1844005          ORR      r4,r4,r5
0006e4  e2825004          ADD      r5,r2,#4
0006e8  e7854103          STR      r4,[r5,r3,LSL #2]
;;;363                               ((utr->iso_xlen[fidx] & 0xFFF) << ITD_XLEN_Pos) |              /* Transaction Length */
;;;364                               ((buff_addr & 0xFFFFF000) - (itd->buff_base & 0xFFFFF000)) |   /* PG */
;;;365                               (buff_addr & 0xFFF);                                           /* Transaction offset */
;;;366    }
0006ec  e8bd8070          POP      {r4-r6,pc}
;;;367    
                          ENDP

                  remove_iso_ep_from_list PROC
;;;368    
;;;369    static void remove_iso_ep_from_list(ISO_EP_T *iso_ep)
0006f0  e1a01000          MOV      r1,r0
;;;370    {
;;;371        ISO_EP_T  *p;
;;;372    
;;;373        if (iso_ep_list == iso_ep)
0006f4  e51f20e0          LDR      r2,|L1.1564|
0006f8  e5922000          LDR      r2,[r2,#0]  ; iso_ep_list
0006fc  e1520001          CMP      r2,r1
000700  1a000003          BNE      |L1.1812|
;;;374        {
;;;375            iso_ep_list = iso_ep->next;         /* it's the first entry, remove it            */
000704  e51f30f0          LDR      r3,|L1.1564|
000708  e5912018          LDR      r2,[r1,#0x18]
00070c  e5832000          STR      r2,[r3,#0]  ; iso_ep_list
                  |L1.1808|
;;;376            return;
;;;377        }
;;;378    
;;;379        p = iso_ep_list;                        /* find the previous entry of iso_ep          */
;;;380        while (p->next != NULL)
;;;381        {
;;;382            if (p->next == iso_ep)
;;;383            {
;;;384                break;
;;;385            }
;;;386            p = p->next;
;;;387        }
;;;388    
;;;389        if (p->next == NULL)
;;;390        {
;;;391            return;                             /* not found                                  */
;;;392        }
;;;393        p->next = iso_ep->next;                 /* remove iso_ep from list                    */
;;;394    }
000710  e12fff1e          BX       lr
                  |L1.1812|
000714  e51f2100          LDR      r2,|L1.1564|
000718  e5920000          LDR      r0,[r2,#0]            ;379  ; iso_ep_list
00071c  ea000004          B        |L1.1844|
                  |L1.1824|
000720  e5902018          LDR      r2,[r0,#0x18]         ;382
000724  e1520001          CMP      r2,r1                 ;382
000728  1a000000          BNE      |L1.1840|
00072c  ea000003          B        |L1.1856|
                  |L1.1840|
000730  e5900018          LDR      r0,[r0,#0x18]         ;386
                  |L1.1844|
000734  e5902018          LDR      r2,[r0,#0x18]         ;380
000738  e3520000          CMP      r2,#0                 ;380
00073c  1afffff7          BNE      |L1.1824|
                  |L1.1856|
000740  e1a00000          MOV      r0,r0                 ;384
000744  e5902018          LDR      r2,[r0,#0x18]         ;389
000748  e3520000          CMP      r2,#0                 ;389
00074c  1a000000          BNE      |L1.1876|
000750  eaffffee          B        |L1.1808|
                  |L1.1876|
000754  e5912018          LDR      r2,[r1,#0x18]         ;393
000758  e5802018          STR      r2,[r0,#0x18]         ;393
00075c  e1a00000          MOV      r0,r0
000760  eaffffea          B        |L1.1808|
;;;395    
                          ENDP

                  ehci_sitd_adjust_schedule PROC
;;;671    
;;;672    static void ehci_sitd_adjust_schedule(siTD_T *sitd)
000764  e92d4010          PUSH     {r4,lr}
;;;673    {
000768  e1a01000          MOV      r1,r0
;;;674        siTD_T     *hlink = (siTD_T  *)_PFList[sitd->sched_frnidx];
00076c  e51fc154          LDR      r12,|L1.1568|
000770  e5913028          LDR      r3,[r1,#0x28]
000774  e59cc000          LDR      r12,[r12,#0]  ; _PFList
000778  e79c0103          LDR      r0,[r12,r3,LSL #2]
;;;675        uint32_t   uframe_mask = 0x00;
00077c  e3a02000          MOV      r2,#0
;;;676    
;;;677        while (hlink && !HLINK_IS_TERMINATED(hlink) && HLINK_IS_SITD(hlink))
000780  ea000010          B        |L1.1992|
                  |L1.1924|
;;;678        {
;;;679            hlink = SITD_PTR(hlink);
000784  e3c0001f          BIC      r0,r0,#0x1f
;;;680            if (hlink != sitd)
000788  e1500001          CMP      r0,r1
00078c  0a00000b          BEQ      |L1.1984|
;;;681            {
;;;682                if ((hlink->Chrst & SITD_XFER_IO_Msk) == SITD_XFER_IN)
000790  e5903004          LDR      r3,[r0,#4]
000794  e2033102          AND      r3,r3,#0x80000000
000798  e3530102          CMP      r3,#0x80000000
00079c  1a000005          BNE      |L1.1976|
;;;683                {
;;;684                    uframe_mask |= (hlink->Sched & 0xFF);         /* mark micro-frames used by IN S-mask   */
0007a0  e5d03008          LDRB     r3,[r0,#8]
0007a4  e1822003          ORR      r2,r2,r3
;;;685                    uframe_mask |= ((hlink->Sched >> 8) & 0xFF);  /* mark micro-frames used by IN C-mask   */
0007a8  e1d030b8          LDRH     r3,[r0,#8]
0007ac  e1a03803          LSL      r3,r3,#16
0007b0  e1822c23          ORR      r2,r2,r3,LSR #24
0007b4  ea000001          B        |L1.1984|
                  |L1.1976|
;;;686                }
;;;687                else
;;;688                {
;;;689                    uframe_mask |= (hlink->Sched & 0xFF);         /* mark micro-frames used by OUT S-mask  */
0007b8  e5d03008          LDRB     r3,[r0,#8]
0007bc  e1822003          ORR      r2,r2,r3
                  |L1.1984|
;;;690                }
;;;691            }
;;;692            hlink = SITD_PTR(hlink->Next_Link);
0007c0  e5903000          LDR      r3,[r0,#0]
0007c4  e3c3001f          BIC      r0,r3,#0x1f
                  |L1.1992|
0007c8  e3500000          CMP      r0,#0                 ;677
0007cc  0a000009          BEQ      |L1.2040|
0007d0  e3100001          TST      r0,#1                 ;677
0007d4  1a000007          BNE      |L1.2040|
0007d8  e2003006          AND      r3,r0,#6              ;677
0007dc  e3530004          CMP      r3,#4                 ;677
0007e0  1a000001          BNE      |L1.2028|
0007e4  e3a03001          MOV      r3,#1                 ;677
0007e8  ea000000          B        |L1.2032|
                  |L1.2028|
0007ec  e3a03000          MOV      r3,#0                 ;677
                  |L1.2032|
0007f0  e3530000          CMP      r3,#0                 ;677
0007f4  1affffe2          BNE      |L1.1924|
                  |L1.2040|
;;;693        }
;;;694    
;;;695        uframe_mask = uframe_mask | (uframe_mask << 8);           /* mark both S-mask and C-mask           */
0007f8  e1822402          ORR      r2,r2,r2,LSL #8
;;;696    
;;;697        if (uframe_mask)
0007fc  e3520000          CMP      r2,#0
000800  0a00000f          BEQ      |L1.2116|
;;;698        {
;;;699            /*
;;;700             *  Shift afterward one micro-frame until no conflicts.
;;;701             */
;;;702            while (1)
000804  ea00000c          B        |L1.2108|
                  |L1.2056|
;;;703            {
;;;704                if (sitd->Sched & uframe_mask)
000808  e5913008          LDR      r3,[r1,#8]
00080c  e1130002          TST      r3,r2
000810  0a000008          BEQ      |L1.2104|
;;;705                {
;;;706                    sitd->Sched = (sitd->Sched & 0xFFFF0000) | ((sitd->Sched << 1) & 0xFFFF);
000814  e5913008          LDR      r3,[r1,#8]
000818  e1a03823          LSR      r3,r3,#16
00081c  e1a03803          LSL      r3,r3,#16
000820  e591c008          LDR      r12,[r1,#8]
000824  e59f4450          LDR      r4,|L1.3196|
000828  e004c08c          AND      r12,r4,r12,LSL #1
00082c  e183300c          ORR      r3,r3,r12
000830  e5813008          STR      r3,[r1,#8]
000834  ea000000          B        |L1.2108|
                  |L1.2104|
;;;707                }
;;;708                else
;;;709                {
;;;710                    break;                      /* no conflit, done.                          */
000838  ea000000          B        |L1.2112|
                  |L1.2108|
00083c  eafffff1          B        |L1.2056|
                  |L1.2112|
000840  e1a00000          MOV      r0,r0
                  |L1.2116|
;;;711                }
;;;712            }
;;;713        }
;;;714    }
000844  e8bd8010          POP      {r4,pc}
;;;715    
                          ENDP

                  write_sitd_info PROC
;;;623    
;;;624    static void  write_sitd_info(UTR_T *utr, siTD_T *sitd)
000848  e92d47f0          PUSH     {r4-r10,lr}
;;;625    {
00084c  e1a05000          MOV      r5,r0
000850  e1a04001          MOV      r4,r1
;;;626        UDEV_T     *udev = utr->udev;
000854  e5957000          LDR      r7,[r5,#0]
;;;627        EP_INFO_T  *ep = utr->ep;               /* reference to isochronous endpoint          */
000858  e595800c          LDR      r8,[r5,#0xc]
;;;628        uint32_t   buff_page_addr;
;;;629        int        xlen = utr->iso_xlen[sitd->fidx];
00085c  e5d40024          LDRB     r0,[r4,#0x24]
000860  e2851024          ADD      r1,r5,#0x24
000864  e0810080          ADD      r0,r1,r0,LSL #1
000868  e1d090b0          LDRH     r9,[r0,#0]
;;;630        int        scnt;
;;;631    
;;;632        sitd->Chrst = (udev->port_num << SITD_PORT_NUM_Pos) |
00086c  e5d70018          LDRB     r0,[r7,#0x18]
000870  e1a00c00          LSL      r0,r0,#24
000874  e5971014          LDR      r1,[r7,#0x14]
000878  e5911000          LDR      r1,[r1,#0]
00087c  e5911000          LDR      r1,[r1,#0]
000880  e5d11019          LDRB     r1,[r1,#0x19]
000884  e1800801          ORR      r0,r0,r1,LSL #16
000888  e5d81000          LDRB     r1,[r8,#0]
00088c  e201100f          AND      r1,r1,#0xf
000890  e1800401          ORR      r0,r0,r1,LSL #8
000894  e5d71019          LDRB     r1,[r7,#0x19]
000898  e1800001          ORR      r0,r0,r1
00089c  e5840004          STR      r0,[r4,#4]
;;;633                      (udev->parent->iface->udev->dev_num << SITD_HUB_ADDR_Pos) |
;;;634                      ((ep->bEndpointAddress & 0xF) << SITD_EP_NUM_Pos) |
;;;635                      (udev->dev_num << SITD_DEV_ADDR_Pos);
;;;636    
;;;637        buff_page_addr = ((uint32_t)utr->iso_buff[sitd->fidx]) & 0xFFFFF000;
0008a0  e5d40024          LDRB     r0,[r4,#0x24]
0008a4  e2851034          ADD      r1,r5,#0x34
0008a8  e7910100          LDR      r0,[r1,r0,LSL #2]
0008ac  e1a0a620          LSR      r10,r0,#12
0008b0  e1a0a60a          LSL      r10,r10,#12
;;;638        sitd->Bptr[0] = (uint32_t)(utr->iso_buff[sitd->fidx]);
0008b4  e5d40024          LDRB     r0,[r4,#0x24]
0008b8  e2851034          ADD      r1,r5,#0x34
0008bc  e7910100          LDR      r0,[r1,r0,LSL #2]
0008c0  e5840010          STR      r0,[r4,#0x10]
;;;639        sitd->Bptr[1] = buff_page_addr + 0x1000;
0008c4  e28a0a01          ADD      r0,r10,#0x1000
0008c8  e5840014          STR      r0,[r4,#0x14]
;;;640    
;;;641        scnt = (xlen + 187) / 188;
0008cc  e3a010bc          MOV      r1,#0xbc
0008d0  e28900bb          ADD      r0,r9,#0xbb
0008d4  ebfffffe          BL       __aeabi_idivmod
0008d8  e1a06000          MOV      r6,r0
;;;642    
;;;643        if ((ep->bEndpointAddress & EP_ADDR_DIR_MASK) == EP_ADDR_DIR_IN)   /* I/O               */
0008dc  e5d80000          LDRB     r0,[r8,#0]
0008e0  e2000080          AND      r0,r0,#0x80
0008e4  e3500080          CMP      r0,#0x80
0008e8  1a00000b          BNE      |L1.2332|
;;;644        {
;;;645            sitd->Chrst |= SITD_XFER_IN;
0008ec  e5940004          LDR      r0,[r4,#4]
0008f0  e3800102          ORR      r0,r0,#0x80000000
0008f4  e5840004          STR      r0,[r4,#4]
;;;646            sitd->Sched = (1 << (scnt + 2)) - 1;
0008f8  e2860002          ADD      r0,r6,#2
0008fc  e3a01001          MOV      r1,#1
000900  e1a00011          LSL      r0,r1,r0
000904  e2400001          SUB      r0,r0,#1
000908  e5840008          STR      r0,[r4,#8]
;;;647            sitd->Sched = (sitd->Sched << 10) | 0x1;
00090c  e5940008          LDR      r0,[r4,#8]
000910  e1810500          ORR      r0,r1,r0,LSL #10
000914  e5840008          STR      r0,[r4,#8]
000918  ea00000e          B        |L1.2392|
                  |L1.2332|
;;;648            //sitd->Sched <<= 1;
;;;649        }
;;;650        else
;;;651        {
;;;652            sitd->Chrst |= SITD_XFER_OUT;
00091c  e5940004          LDR      r0,[r4,#4]
000920  e5840004          STR      r0,[r4,#4]
;;;653            sitd->Sched = sitd_OUT_Smask[scnt-1];
000924  e2460001          SUB      r0,r6,#1
000928  e59f1350          LDR      r1,|L1.3200|
00092c  e0810080          ADD      r0,r1,r0,LSL #1
000930  e1d000b0          LDRH     r0,[r0,#0]
000934  e5840008          STR      r0,[r4,#8]
;;;654            if (scnt > 1)
000938  e3560001          CMP      r6,#1
00093c  da000002          BLE      |L1.2380|
;;;655            {
;;;656                sitd->Bptr[1] |= (0x1 << 3);        /* Transaction position (TP)  01b: Begin  */
000940  e5940014          LDR      r0,[r4,#0x14]
000944  e3800008          ORR      r0,r0,#8
000948  e5840014          STR      r0,[r4,#0x14]
                  |L1.2380|
;;;657            }
;;;658            sitd->Bptr[1] |= scnt;                  /* Transaction count (T-Count)            */
00094c  e5940014          LDR      r0,[r4,#0x14]
000950  e1800006          ORR      r0,r0,r6
000954  e5840014          STR      r0,[r4,#0x14]
                  |L1.2392|
;;;659        }
;;;660    
;;;661        if (sitd->fidx == IF_PER_UTR)
000958  e5d40024          LDRB     r0,[r4,#0x24]
00095c  e3500008          CMP      r0,#8
000960  1a000002          BNE      |L1.2416|
;;;662        {
;;;663            sitd->Sched |= SITD_IOC;
000964  e5940008          LDR      r0,[r4,#8]
000968  e3800102          ORR      r0,r0,#0x80000000
00096c  e5840008          STR      r0,[r4,#8]
                  |L1.2416|
;;;664        }
;;;665    
;;;666        sitd->StsCtrl = (xlen << SITD_XFER_CNT_Pos) | SITD_STATUS_ACTIVE;
000970  e3a00080          MOV      r0,#0x80
000974  e1800809          ORR      r0,r0,r9,LSL #16
000978  e584000c          STR      r0,[r4,#0xc]
;;;667    
;;;668        sitd->BackLink = SITD_LIST_END;
00097c  e3a00001          MOV      r0,#1
000980  e5840018          STR      r0,[r4,#0x18]
;;;669    }
000984  e8bd87f0          POP      {r4-r10,pc}
;;;670    
                          ENDP

                  ehci_iso_split_xfer PROC
;;;716    
;;;717    static int ehci_iso_split_xfer(UTR_T *utr, ISO_EP_T *iso_ep)
000988  e92d5ff0          PUSH     {r4-r12,lr}
;;;718    {
00098c  e1a06000          MOV      r6,r0
000990  e1a05001          MOV      r5,r1
;;;719        EP_INFO_T  *ep = utr->ep;               /* reference to isochronous endpoint          */
000994  e596b00c          LDR      r11,[r6,#0xc]
;;;720        siTD_T     *sitd, *sitd_next, *sitd_list = NULL;
000998  e3a07000          MOV      r7,#0
;;;721        int        i;
;;;722        int        fidx;                        /* index to the 8 iso frames of UTR           */
;;;723    
;;;724        if (utr->udev->parent == NULL)
00099c  e5960000          LDR      r0,[r6,#0]
0009a0  e5900014          LDR      r0,[r0,#0x14]
0009a4  e3500000          CMP      r0,#0
0009a8  1a000003          BNE      |L1.2492|
;;;725        {
;;;726            USB_error("siso xfer - parent lost!\n");
0009ac  e28f0e2d          ADR      r0,|L1.3204|
0009b0  ebfffffe          BL       sysprintf
;;;727            return USBH_ERR_INVALID_PARAM;
0009b4  e3e00068          MVN      r0,#0x68
                  |L1.2488|
;;;728        }
;;;729    
;;;730        /*------------------------------------------------------------------------------------*/
;;;731        /*  Allocate siTDs                                                                    */
;;;732        /*------------------------------------------------------------------------------------*/
;;;733        for (i = 0; i < IF_PER_UTR; i++)        /* allocate all siTDs required by UTR         */
;;;734        {
;;;735            sitd = alloc_ehci_siTD();
;;;736            if (sitd == NULL)
;;;737                goto malloc_failed;
;;;738    
;;;739            if (sitd_list == NULL)               /* link all siTDs                             */
;;;740            {
;;;741                sitd_list = sitd;
;;;742            }
;;;743            else
;;;744            {
;;;745                sitd->next = sitd_list;
;;;746                sitd_list = sitd;
;;;747            }
;;;748        }
;;;749    
;;;750        utr->td_cnt = IF_PER_UTR;
;;;751    
;;;752        /*------------------------------------------------------------------------------------*/
;;;753        /*  Fill and link all siTDs                                                           */
;;;754        /*------------------------------------------------------------------------------------*/
;;;755    
;;;756        utr->iso_sf = iso_ep->next_frame;
;;;757        fidx = 0;                               /* index to UTR iso frmes (total IF_PER_UTR)  */
;;;758    
;;;759        for (sitd = sitd_list; (sitd != NULL); fidx++)
;;;760        {
;;;761            if (fidx >= IF_PER_UTR)             /* unlikely                                   */
;;;762            {
;;;763                USB_error("EHCI driver siTD bug!?\n");
;;;764                goto malloc_failed;
;;;765            }
;;;766    
;;;767            sitd->utr = utr;
;;;768            sitd->fidx = fidx;                   /* index to UTR's n'th IF_PER_UTR frame       */
;;;769    
;;;770            write_sitd_info(utr, sitd);
;;;771    
;;;772            sitd_next = sitd->next;              /* remember the next itd                      */
;;;773    
;;;774            // USB_debug("Link iTD 0x%x, %d\n", (int)itd, iso_ep->next_frame);
;;;775            /*
;;;776             *  Link iTD to period frame list
;;;777             */
;;;778            sitd->sched_frnidx = iso_ep->next_frame;      /* remember it for reclamation scan */
;;;779            DISABLE_EHCI_IRQ();
;;;780            ehci_sitd_adjust_schedule(sitd);
;;;781            add_sitd_to_iso_ep(iso_ep, sitd);             /* add to software itd list         */
;;;782            sitd->Next_Link = _PFList[sitd->sched_frnidx];/* keep the next link               */
;;;783            _PFList[sitd->sched_frnidx] = SITD_HLNK_SITD(sitd);
;;;784            iso_ep->next_frame = (iso_ep->next_frame + ep->bInterval) % FL_SIZE;
;;;785            ENABLE_EHCI_IRQ();
;;;786    
;;;787            sitd = sitd_next;
;;;788        }
;;;789    
;;;790        _ehci->UCMDR |= HSUSBH_UCMDR_PSEN_Msk;      /* periodic list enable                   */
;;;791        return 0;
;;;792    
;;;793    malloc_failed:
;;;794    
;;;795        while (sitd_list != NULL)
;;;796        {
;;;797            sitd = sitd_list;
;;;798            sitd_list = sitd->next;
;;;799            free_ehci_siTD(sitd);
;;;800        }
;;;801        return USBH_ERR_MEMORY_OUT;
;;;802    }
0009b8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2492|
0009bc  e3a09000          MOV      r9,#0                 ;733
0009c0  ea00000b          B        |L1.2548|
                  |L1.2500|
0009c4  ebfffffe          BL       alloc_ehci_siTD
0009c8  e1a04000          MOV      r4,r0                 ;735
0009cc  e3540000          CMP      r4,#0                 ;736
0009d0  1a000000          BNE      |L1.2520|
0009d4  ea000051          B        |L1.2848|
                  |L1.2520|
0009d8  e3570000          CMP      r7,#0                 ;739
0009dc  1a000001          BNE      |L1.2536|
0009e0  e1a07004          MOV      r7,r4                 ;741
0009e4  ea000001          B        |L1.2544|
                  |L1.2536|
0009e8  e584702c          STR      r7,[r4,#0x2c]         ;745
0009ec  e1a07004          MOV      r7,r4                 ;746
                  |L1.2544|
0009f0  e2899001          ADD      r9,r9,#1              ;733
                  |L1.2548|
0009f4  e3590008          CMP      r9,#8                 ;733
0009f8  bafffff1          BLT      |L1.2500|
0009fc  e3a00008          MOV      r0,#8                 ;750
000a00  e5860074          STR      r0,[r6,#0x74]         ;750
000a04  e1d500b4          LDRH     r0,[r5,#4]            ;756
000a08  e1c602b2          STRH     r0,[r6,#0x22]         ;756
000a0c  e3a08000          MOV      r8,#0                 ;757
000a10  e1a04007          MOV      r4,r7                 ;759
000a14  ea000036          B        |L1.2804|
                  |L1.2584|
000a18  e3580008          CMP      r8,#8                 ;761
000a1c  ba000002          BLT      |L1.2604|
000a20  e28f0f9e          ADR      r0,|L1.3232|
000a24  ebfffffe          BL       sysprintf
000a28  ea00003c          B        |L1.2848|
                  |L1.2604|
000a2c  e5846020          STR      r6,[r4,#0x20]         ;767
000a30  e5c48024          STRB     r8,[r4,#0x24]         ;768
000a34  e1a01004          MOV      r1,r4                 ;770
000a38  e1a00006          MOV      r0,r6                 ;770
000a3c  ebfffffe          BL       write_sitd_info
000a40  e594a02c          LDR      r10,[r4,#0x2c]        ;772
000a44  e5950004          LDR      r0,[r5,#4]            ;778
000a48  e5840028          STR      r0,[r4,#0x28]         ;778
000a4c  e3a00017          MOV      r0,#0x17              ;779
000a50  ebfffffe          BL       sysDisableInterrupt
000a54  e1a00004          MOV      r0,r4                 ;780
000a58  ebfffffe          BL       ehci_sitd_adjust_schedule
000a5c  e1a01004          MOV      r1,r4                 ;781
000a60  e3a02000          MOV      r2,#0                 ;781
000a64  e581202c          STR      r2,[r1,#0x2c]         ;781
000a68  e5952010          LDR      r2,[r5,#0x10]         ;781
000a6c  e3520000          CMP      r2,#0                 ;781
000a70  1a000001          BNE      |L1.2684|
000a74  e5851010          STR      r1,[r5,#0x10]         ;781
000a78  ea000007          B        |L1.2716|
                  |L1.2684|
000a7c  e5950010          LDR      r0,[r5,#0x10]         ;781
000a80  ea000000          B        |L1.2696|
                  |L1.2692|
000a84  e590002c          LDR      r0,[r0,#0x2c]         ;781
                  |L1.2696|
000a88  e590202c          LDR      r2,[r0,#0x2c]         ;781
000a8c  e3520000          CMP      r2,#0                 ;781
000a90  1afffffb          BNE      |L1.2692|
000a94  e580102c          STR      r1,[r0,#0x2c]         ;781
000a98  e1a00000          MOV      r0,r0                 ;781
                  |L1.2716|
000a9c  e1a00000          MOV      r0,r0                 ;781
000aa0  e51f1488          LDR      r1,|L1.1568|
000aa4  e5940028          LDR      r0,[r4,#0x28]         ;782
000aa8  e5911000          LDR      r1,[r1,#0]            ;782  ; _PFList
000aac  e7910100          LDR      r0,[r1,r0,LSL #2]     ;782
000ab0  e5840000          STR      r0,[r4,#0]            ;782
000ab4  e3c4001f          BIC      r0,r4,#0x1f           ;783
000ab8  e3800004          ORR      r0,r0,#4              ;783
000abc  e51f24a4          LDR      r2,|L1.1568|
000ac0  e5941028          LDR      r1,[r4,#0x28]         ;783
000ac4  e5922000          LDR      r2,[r2,#0]            ;783  ; _PFList
000ac8  e7820101          STR      r0,[r2,r1,LSL #2]     ;783
000acc  e1d500b4          LDRH     r0,[r5,#4]            ;784
000ad0  e5db1002          LDRB     r1,[r11,#2]           ;784
000ad4  e0800001          ADD      r0,r0,r1              ;784
000ad8  e1a00b00          LSL      r0,r0,#22             ;784
000adc  e1a00b20          LSR      r0,r0,#22             ;784
000ae0  e5850004          STR      r0,[r5,#4]            ;784
000ae4  e3a00017          MOV      r0,#0x17              ;785
000ae8  ebfffffe          BL       sysEnableInterrupt
000aec  e1a0400a          MOV      r4,r10                ;787
000af0  e2888001          ADD      r8,r8,#1              ;759
                  |L1.2804|
000af4  e3540000          CMP      r4,#0                 ;759
000af8  1affffc6          BNE      |L1.2584|
000afc  e51f0508          LDR      r0,|L1.1532|
000b00  e5900000          LDR      r0,[r0,#0]            ;790  ; _ehci
000b04  e5900020          LDR      r0,[r0,#0x20]         ;790
000b08  e3800010          ORR      r0,r0,#0x10           ;790
000b0c  e51f1518          LDR      r1,|L1.1532|
000b10  e5911000          LDR      r1,[r1,#0]            ;790  ; _ehci
000b14  e5810020          STR      r0,[r1,#0x20]         ;790
000b18  e3a00000          MOV      r0,#0                 ;791
000b1c  eaffffa5          B        |L1.2488|
                  |L1.2848|
000b20  e1a00000          MOV      r0,r0                 ;793
000b24  ea000003          B        |L1.2872|
                  |L1.2856|
000b28  e1a04007          MOV      r4,r7                 ;797
000b2c  e594702c          LDR      r7,[r4,#0x2c]         ;798
000b30  e1a00004          MOV      r0,r4                 ;799
000b34  ebfffffe          BL       free_ehci_siTD
                  |L1.2872|
000b38  e3570000          CMP      r7,#0                 ;795
000b3c  1afffff9          BNE      |L1.2856|
000b40  e3e00009          MVN      r0,#9                 ;801
000b44  eaffff9b          B        |L1.2488|
;;;803    
                          ENDP

                  ehci_iso_xfer PROC
;;;419    
;;;420    int ehci_iso_xfer(UTR_T *utr)
000b48  e92d4ffe          PUSH     {r1-r11,lr}
;;;421    {
000b4c  e1a0a000          MOV      r10,r0
;;;422        EP_INFO_T  *ep = utr->ep;               /* reference to isochronous endpoint          */
000b50  e59a600c          LDR      r6,[r10,#0xc]
;;;423        ISO_EP_T   *iso_ep;                     /* software iso endpoint descriptor           */
;;;424        iTD_T      *itd, *itd_next, *itd_list = NULL;
000b54  e3a00000          MOV      r0,#0
000b58  e58d0004          STR      r0,[sp,#4]
;;;425        int        i, itd_cnt;
;;;426        int        trans_mask;                  /* bit mask of used xfer in an iTD            */
;;;427        int        fidx;                        /* index to the 8 iso frames of UTR           */
;;;428        int        interval;                    /* frame interval of iTD                      */
;;;429    
;;;430        if (ep->hw_pipe != NULL)
000b5c  e5960008          LDR      r0,[r6,#8]
000b60  e3500000          CMP      r0,#0
000b64  0a00000b          BEQ      |L1.2968|
;;;431        {
;;;432            iso_ep = (ISO_EP_T *)ep->hw_pipe;   /* get reference of the isochronous endpoint  */
000b68  e5965008          LDR      r5,[r6,#8]
;;;433    
;;;434            if (utr->bIsoNewSched)
000b6c  e5da0020          LDRB     r0,[r10,#0x20]
000b70  e3500000          CMP      r0,#0
000b74  0a000023          BEQ      |L1.3080|
;;;435                iso_ep->next_frame = (((_ehci->UFINDR + (EHCI_ISO_DELAY * 8)) & HSUSBH_UFINDR_FI_Msk) >> 3) & 0x3FF;
000b78  e51f0584          LDR      r0,|L1.1532|
000b7c  e5900000          LDR      r0,[r0,#0]  ; _ehci
000b80  e590002c          LDR      r0,[r0,#0x2c]
000b84  e2800010          ADD      r0,r0,#0x10
000b88  e51f1590          LDR      r1,|L1.1536|
000b8c  e00101a0          AND      r0,r1,r0,LSR #3
000b90  e5850004          STR      r0,[r5,#4]
000b94  ea00001b          B        |L1.3080|
                  |L1.2968|
;;;436        }
;;;437        else
;;;438        {
;;;439            /* first time transfer of this iso endpoint   */
;;;440            iso_ep = usbh_alloc_mem(sizeof(*iso_ep));
000b98  e3a0001c          MOV      r0,#0x1c
000b9c  ebfffffe          BL       usbh_alloc_mem
000ba0  e1a05000          MOV      r5,r0
;;;441            if (iso_ep == NULL)
000ba4  e3550000          CMP      r5,#0
000ba8  1a000001          BNE      |L1.2996|
;;;442                return USBH_ERR_MEMORY_OUT;
000bac  e3e00009          MVN      r0,#9
                  |L1.2992|
;;;443    
;;;444            memset(iso_ep, 0, sizeof(*iso_ep));
;;;445            iso_ep->ep = ep;
;;;446            iso_ep->next_frame = (((_ehci->UFINDR + (EHCI_ISO_DELAY * 8)) & HSUSBH_UFINDR_FI_Msk) >> 3) & 0x3FF;
;;;447    
;;;448            ep->hw_pipe = iso_ep;
;;;449    
;;;450            /*
;;;451             *  Add this iso_ep into iso_ep_list
;;;452             */
;;;453            DISABLE_EHCI_IRQ();
;;;454            iso_ep->next = iso_ep_list;
;;;455            iso_ep_list = iso_ep;
;;;456            ENABLE_EHCI_IRQ();
;;;457        }
;;;458    
;;;459        if (utr->udev->speed == SPEED_FULL)
;;;460            return ehci_iso_split_xfer(utr, iso_ep);
;;;461    
;;;462        /*------------------------------------------------------------------------------------*/
;;;463        /*  Allocate iTDs                                                                     */
;;;464        /*------------------------------------------------------------------------------------*/
;;;465    
;;;466        if (ep->bInterval < 2)                  /* transfer interval is 1 micro-frame         */
;;;467        {
;;;468            trans_mask = 0xFF;
;;;469            itd_cnt = 1;                        /* required 1 iTD for one UTR                 */
;;;470            interval = 1;                       /* iTD frame interval of this ednpoint        */
;;;471        }
;;;472        else if (ep->bInterval < 4)             /* transfer interval is 2 micro-frames        */
;;;473        {
;;;474            trans_mask = 0x55;
;;;475            itd_cnt = 2;                        /* required 2 iTDs for one UTR                */
;;;476            interval = 1;                       /* iTD frame interval of this ednpoint        */
;;;477        }
;;;478        else if (ep->bInterval < 8)             /* transfer interval is 4 micro-frames        */
;;;479        {
;;;480            trans_mask = 0x44;
;;;481            itd_cnt = 4;                        /* required 4 iTDs for one UTR                */
;;;482            interval = 1;                       /* iTD frame interval of this ednpoint        */
;;;483        }
;;;484        else if (ep->bInterval < 16)            /* transfer interval is 8 micro-frames        */
;;;485        {
;;;486            trans_mask = 0x08;                  /* there's 1 transfer in one iTD              */
;;;487            itd_cnt = 8;                        /* required 8 iTDs for one UTR                */
;;;488            interval = 1;                       /* iTD frame interval of this ednpoint        */
;;;489        }
;;;490        else if (ep->bInterval < 32)            /* transfer interval is 16 micro-frames       */
;;;491        {
;;;492            trans_mask = 0x10;                  /* there's 1 transfer in one iTD              */
;;;493            itd_cnt = 8;                        /* required 8 iTDs for one UTR                */
;;;494            interval = 2;                       /* iTD frame interval of this ednpoint        */
;;;495        }
;;;496        else if (ep->bInterval < 64)            /* transfer interval is 32 micro-frames       */
;;;497        {
;;;498            trans_mask = 0x02;                  /* there's 1 transfer in one iTD              */
;;;499            itd_cnt = 8;                        /* required 8 iTDs for one UTR                */
;;;500            interval = 4;                       /* iTD frame interval of this ednpoint        */
;;;501        }
;;;502        else                                    /* transfer interval is 64 micro-frames       */
;;;503        {
;;;504            trans_mask = 0x04;                  /* there's 1 transfer in one iTD              */
;;;505            itd_cnt = 8;                        /* required 8 iTDs for one UTR                */
;;;506            interval = 8;                       /* iTD frame interval of this ednpoint        */
;;;507        }
;;;508    
;;;509        for (i = 0; i < itd_cnt; i++)           /* allocate all iTDs required by UTR          */
;;;510        {
;;;511            itd = alloc_ehci_iTD();
;;;512            if (itd == NULL)
;;;513                goto malloc_failed;
;;;514    
;;;515            if (itd_list == NULL)               /* link all iTDs                              */
;;;516            {
;;;517                itd_list = itd;
;;;518            }
;;;519            else
;;;520            {
;;;521                itd->next = itd_list;
;;;522                itd_list = itd;
;;;523            }
;;;524        }
;;;525    
;;;526        utr->td_cnt = itd_cnt;
;;;527    
;;;528        /*------------------------------------------------------------------------------------*/
;;;529        /*  Fill and link all iTDs                                                            */
;;;530        /*------------------------------------------------------------------------------------*/
;;;531    
;;;532        utr->iso_sf = iso_ep->next_frame;
;;;533        fidx = 0;                               /* index to UTR iso frmes (total IF_PER_UTR)  */
;;;534    
;;;535        for (itd = itd_list; (itd != NULL); )
;;;536        {
;;;537            if (fidx >= IF_PER_UTR)             /* unlikely                                   */
;;;538            {
;;;539                USB_error("EHCI driver ITD bug!?\n");
;;;540                goto malloc_failed;
;;;541            }
;;;542    
;;;543            itd->utr = utr;
;;;544            itd->fidx = fidx;                   /* index to UTR's n'th IF_PER_UTR frame       */
;;;545            itd->buff_base = (uint32_t)(utr->iso_buff[fidx]);    /* iTD buffer base is buffer of the first UTR iso frame serviced by this iTD */
;;;546            itd->trans_mask = trans_mask;
;;;547    
;;;548            write_itd_info(utr, itd);
;;;549    
;;;550            for (i = 0; i < 8; i++)             /* settle xfer into micro-frames              */
;;;551            {
;;;552                if (!(trans_mask & (0x1<<i)))
;;;553                {
;;;554                    itd->Transaction[i] = 0;    /* not accesed                                */
;;;555                    continue;                   /* not scheduled micro-frame                  */
;;;556                }
;;;557    
;;;558                write_itd_micro_frame(utr, fidx, itd, i);
;;;559    
;;;560                fidx++;                         /* preceed to next UTR iso frame              */
;;;561    
;;;562                if (fidx == IF_PER_UTR)         /* is the last scheduled micro-frame?         */
;;;563                {
;;;564                    /* raise interrupt on completed               */
;;;565                    itd->Transaction[i] |= ITD_IOC;
;;;566                    break;
;;;567                }
;;;568            }
;;;569    
;;;570            itd_next = itd->next;               /* remember the next itd                      */
;;;571    
;;;572            // USB_debug("Link iTD 0x%x, %d\n", (int)itd, iso_ep->next_frame);
;;;573            /*
;;;574             *  Link iTD to period frame list
;;;575             */
;;;576            DISABLE_EHCI_IRQ();
;;;577            itd->sched_frnidx = iso_ep->next_frame;       /* remember it for reclamation scan */
;;;578            add_itd_to_iso_ep(iso_ep, itd);               /* add to software itd list         */
;;;579            itd->Next_Link = _PFList[itd->sched_frnidx];  /* keep the next link               */
;;;580            _PFList[itd->sched_frnidx] = ITD_HLNK_ITD(itd);
;;;581            iso_ep->next_frame = (iso_ep->next_frame + interval) % FL_SIZE;
;;;582            ENABLE_EHCI_IRQ();
;;;583    
;;;584            itd = itd_next;
;;;585        }
;;;586    
;;;587        _ehci->UCMDR |= HSUSBH_UCMDR_PSEN_Msk;      /* periodic list enable                   */
;;;588        return 0;
;;;589    
;;;590    malloc_failed:
;;;591    
;;;592        while (itd_list != NULL)
;;;593        {
;;;594            itd = itd_list;
;;;595            itd_list = itd->next;
;;;596            free_ehci_iTD(itd);
;;;597        }
;;;598        return USBH_ERR_MEMORY_OUT;
;;;599    }
000bb0  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.2996|
000bb4  e3a0101c          MOV      r1,#0x1c              ;444
000bb8  e1a00005          MOV      r0,r5                 ;444
000bbc  ebfffffe          BL       __aeabi_memclr4
000bc0  e5856000          STR      r6,[r5,#0]            ;445
000bc4  e51f05d0          LDR      r0,|L1.1532|
000bc8  e5900000          LDR      r0,[r0,#0]            ;446  ; _ehci
000bcc  e590002c          LDR      r0,[r0,#0x2c]         ;446
000bd0  e2800010          ADD      r0,r0,#0x10           ;446
000bd4  e51f15dc          LDR      r1,|L1.1536|
000bd8  e00101a0          AND      r0,r1,r0,LSR #3       ;446
000bdc  e5850004          STR      r0,[r5,#4]            ;446
000be0  e5865008          STR      r5,[r6,#8]            ;448
000be4  e3a00017          MOV      r0,#0x17              ;453
000be8  ebfffffe          BL       sysDisableInterrupt
000bec  e51f05d8          LDR      r0,|L1.1564|
000bf0  e5900000          LDR      r0,[r0,#0]            ;454  ; iso_ep_list
000bf4  e5850018          STR      r0,[r5,#0x18]         ;454
000bf8  e51f05e4          LDR      r0,|L1.1564|
000bfc  e5805000          STR      r5,[r0,#0]            ;455  ; iso_ep_list
000c00  e3a00017          MOV      r0,#0x17              ;456
000c04  ebfffffe          BL       sysEnableInterrupt
                  |L1.3080|
000c08  e59a0000          LDR      r0,[r10,#0]           ;459
000c0c  e5d0001b          LDRB     r0,[r0,#0x1b]         ;459
000c10  e3500001          CMP      r0,#1                 ;459
000c14  1a000003          BNE      |L1.3112|
000c18  e1a01005          MOV      r1,r5                 ;460
000c1c  e1a0000a          MOV      r0,r10                ;460
000c20  ebfffffe          BL       ehci_iso_split_xfer
000c24  eaffffe1          B        |L1.2992|
                  |L1.3112|
000c28  e5d60002          LDRB     r0,[r6,#2]            ;466
000c2c  e3500002          CMP      r0,#2                 ;466
000c30  aa000003          BGE      |L1.3140|
000c34  e3a090ff          MOV      r9,#0xff              ;468
000c38  e3a08001          MOV      r8,#1                 ;469
000c3c  e3a0b001          MOV      r11,#1                ;470
000c40  ea000034          B        |L1.3352|
                  |L1.3140|
000c44  e5d60002          LDRB     r0,[r6,#2]            ;472
000c48  e3500004          CMP      r0,#4                 ;472
000c4c  aa000003          BGE      |L1.3168|
000c50  e3a09055          MOV      r9,#0x55              ;474
000c54  e3a08002          MOV      r8,#2                 ;475
000c58  e3a0b001          MOV      r11,#1                ;476
000c5c  ea00002d          B        |L1.3352|
                  |L1.3168|
000c60  e5d60002          LDRB     r0,[r6,#2]            ;478
000c64  e3500008          CMP      r0,#8                 ;478
000c68  aa000012          BGE      |L1.3256|
000c6c  e3a09044          MOV      r9,#0x44              ;480
000c70  e3a08004          MOV      r8,#4                 ;481
000c74  e3a0b001          MOV      r11,#1                ;482
000c78  ea000026          B        |L1.3352|
                  |L1.3196|
                          DCD      0x0000ffff
                  |L1.3200|
                          DCD      sitd_OUT_Smask
                  |L1.3204|
000c84  7369736f          DCB      "siso xfer - parent lost!\n",0
000c88  20786665
000c8c  72202d20
000c90  70617265
000c94  6e74206c
000c98  6f737421
000c9c  0a00    
000c9e  00                DCB      0
000c9f  00                DCB      0
                  |L1.3232|
000ca0  45484349          DCB      "EHCI driver siTD bug!?\n",0
000ca4  20647269
000ca8  76657220
000cac  73695444
000cb0  20627567
000cb4  213f0a00
                  |L1.3256|
000cb8  e5d60002          LDRB     r0,[r6,#2]            ;484
000cbc  e3500010          CMP      r0,#0x10              ;484
000cc0  aa000003          BGE      |L1.3284|
000cc4  e3a09008          MOV      r9,#8                 ;486
000cc8  e3a08008          MOV      r8,#8                 ;487
000ccc  e3a0b001          MOV      r11,#1                ;488
000cd0  ea000010          B        |L1.3352|
                  |L1.3284|
000cd4  e5d60002          LDRB     r0,[r6,#2]            ;490
000cd8  e3500020          CMP      r0,#0x20              ;490
000cdc  aa000003          BGE      |L1.3312|
000ce0  e3a09010          MOV      r9,#0x10              ;492
000ce4  e3a08008          MOV      r8,#8                 ;493
000ce8  e3a0b002          MOV      r11,#2                ;494
000cec  ea000009          B        |L1.3352|
                  |L1.3312|
000cf0  e5d60002          LDRB     r0,[r6,#2]            ;496
000cf4  e3500040          CMP      r0,#0x40              ;496
000cf8  aa000003          BGE      |L1.3340|
000cfc  e3a09002          MOV      r9,#2                 ;498
000d00  e3a08008          MOV      r8,#8                 ;499
000d04  e3a0b004          MOV      r11,#4                ;500
000d08  ea000002          B        |L1.3352|
                  |L1.3340|
000d0c  e3a09004          MOV      r9,#4                 ;504
000d10  e3a08008          MOV      r8,#8                 ;505
000d14  e3a0b008          MOV      r11,#8                ;506
                  |L1.3352|
000d18  e3a07000          MOV      r7,#0                 ;509
000d1c  ea00000d          B        |L1.3416|
                  |L1.3360|
000d20  ebfffffe          BL       alloc_ehci_iTD
000d24  e1a04000          MOV      r4,r0                 ;511
000d28  e3540000          CMP      r4,#0                 ;512
000d2c  1a000000          BNE      |L1.3380|
000d30  ea000075          B        |L1.3852|
                  |L1.3380|
000d34  e59d0004          LDR      r0,[sp,#4]            ;515
000d38  e3500000          CMP      r0,#0                 ;515
000d3c  1a000001          BNE      |L1.3400|
000d40  e58d4004          STR      r4,[sp,#4]            ;517
000d44  ea000002          B        |L1.3412|
                  |L1.3400|
000d48  e59d0004          LDR      r0,[sp,#4]            ;521
000d4c  e5840054          STR      r0,[r4,#0x54]         ;521
000d50  e58d4004          STR      r4,[sp,#4]            ;522
                  |L1.3412|
000d54  e2877001          ADD      r7,r7,#1              ;509
                  |L1.3416|
000d58  e1570008          CMP      r7,r8                 ;509
000d5c  baffffef          BLT      |L1.3360|
000d60  e58a8074          STR      r8,[r10,#0x74]        ;526
000d64  e1d500b4          LDRH     r0,[r5,#4]            ;532
000d68  e1ca02b2          STRH     r0,[r10,#0x22]        ;532
000d6c  e3a00000          MOV      r0,#0                 ;533
000d70  e58d0000          STR      r0,[sp,#0]            ;533
000d74  e59d4004          LDR      r4,[sp,#4]            ;535
000d78  ea000058          B        |L1.3808|
                  |L1.3452|
000d7c  e59d0000          LDR      r0,[sp,#0]            ;537
000d80  e3500008          CMP      r0,#8                 ;537
000d84  ba000002          BLT      |L1.3476|
000d88  e28f0fb5          ADR      r0,|L1.4196|
000d8c  ebfffffe          BL       sysprintf
000d90  ea00005d          B        |L1.3852|
                  |L1.3476|
000d94  e584a044          STR      r10,[r4,#0x44]        ;543
000d98  e59d0000          LDR      r0,[sp,#0]            ;544
000d9c  e5c4004c          STRB     r0,[r4,#0x4c]         ;544
000da0  e28a1034          ADD      r1,r10,#0x34          ;545
000da4  e59d0000          LDR      r0,[sp,#0]            ;545
000da8  e7910100          LDR      r0,[r1,r0,LSL #2]     ;545
000dac  e5840048          STR      r0,[r4,#0x48]         ;545
000db0  e5c4904d          STRB     r9,[r4,#0x4d]         ;546
000db4  e1a01004          MOV      r1,r4                 ;548
000db8  e1a0000a          MOV      r0,r10                ;548
000dbc  ebfffffe          BL       write_itd_info
000dc0  e3a07000          MOV      r7,#0                 ;550
000dc4  ea000019          B        |L1.3632|
                  |L1.3528|
000dc8  e3a00001          MOV      r0,#1                 ;552
000dcc  e1190710          TST      r9,r0,LSL r7          ;552
000dd0  1a000003          BNE      |L1.3556|
000dd4  e3a00000          MOV      r0,#0                 ;554
000dd8  e2841004          ADD      r1,r4,#4              ;554
000ddc  e7810107          STR      r0,[r1,r7,LSL #2]     ;554
000de0  ea000011          B        |L1.3628|
                  |L1.3556|
000de4  e1a03007          MOV      r3,r7                 ;558
000de8  e1a02004          MOV      r2,r4                 ;558
000dec  e1a0000a          MOV      r0,r10                ;558
000df0  e59d1000          LDR      r1,[sp,#0]            ;558
000df4  ebfffffe          BL       write_itd_micro_frame
000df8  e59d0000          LDR      r0,[sp,#0]            ;560
000dfc  e2800001          ADD      r0,r0,#1              ;560
000e00  e58d0000          STR      r0,[sp,#0]            ;560
000e04  e59d0000          LDR      r0,[sp,#0]            ;562
000e08  e3500008          CMP      r0,#8                 ;562
000e0c  1a000005          BNE      |L1.3624|
000e10  e2840004          ADD      r0,r4,#4              ;565
000e14  e7900107          LDR      r0,[r0,r7,LSL #2]     ;565
000e18  e3800902          ORR      r0,r0,#0x8000         ;565
000e1c  e2841004          ADD      r1,r4,#4              ;565
000e20  e7810107          STR      r0,[r1,r7,LSL #2]     ;565
000e24  ea000003          B        |L1.3640|
                  |L1.3624|
000e28  e1a00000          MOV      r0,r0                 ;555
                  |L1.3628|
000e2c  e2877001          ADD      r7,r7,#1              ;550
                  |L1.3632|
000e30  e3570008          CMP      r7,#8                 ;550
000e34  baffffe3          BLT      |L1.3528|
                  |L1.3640|
000e38  e1a00000          MOV      r0,r0                 ;566
000e3c  e5940054          LDR      r0,[r4,#0x54]         ;570
000e40  e58d0008          STR      r0,[sp,#8]            ;570
000e44  e3a00017          MOV      r0,#0x17              ;576
000e48  ebfffffe          BL       sysDisableInterrupt
000e4c  e5950004          LDR      r0,[r5,#4]            ;577
000e50  e5840050          STR      r0,[r4,#0x50]         ;577
000e54  e1a01004          MOV      r1,r4                 ;578
000e58  e3a02000          MOV      r2,#0                 ;578
000e5c  e5812054          STR      r2,[r1,#0x54]         ;578
000e60  e5952008          LDR      r2,[r5,#8]            ;578
000e64  e3520000          CMP      r2,#0                 ;578
000e68  1a000001          BNE      |L1.3700|
000e6c  e5851008          STR      r1,[r5,#8]            ;578
000e70  ea000007          B        |L1.3732|
                  |L1.3700|
000e74  e5950008          LDR      r0,[r5,#8]            ;578
000e78  ea000000          B        |L1.3712|
                  |L1.3708|
000e7c  e5900054          LDR      r0,[r0,#0x54]         ;578
                  |L1.3712|
000e80  e5902054          LDR      r2,[r0,#0x54]         ;578
000e84  e3520000          CMP      r2,#0                 ;578
000e88  1afffffb          BNE      |L1.3708|
000e8c  e5801054          STR      r1,[r0,#0x54]         ;578
000e90  e1a00000          MOV      r0,r0                 ;578
                  |L1.3732|
000e94  e1a00000          MOV      r0,r0                 ;578
000e98  e51f1880          LDR      r1,|L1.1568|
000e9c  e5940050          LDR      r0,[r4,#0x50]         ;579
000ea0  e5911000          LDR      r1,[r1,#0]            ;579  ; _PFList
000ea4  e7910100          LDR      r0,[r1,r0,LSL #2]     ;579
000ea8  e5840000          STR      r0,[r4,#0]            ;579
000eac  e3c4001f          BIC      r0,r4,#0x1f           ;580
000eb0  e51f2898          LDR      r2,|L1.1568|
000eb4  e5941050          LDR      r1,[r4,#0x50]         ;580
000eb8  e5922000          LDR      r2,[r2,#0]            ;580  ; _PFList
000ebc  e7820101          STR      r0,[r2,r1,LSL #2]     ;580
000ec0  e1d500b4          LDRH     r0,[r5,#4]            ;581
000ec4  e080000b          ADD      r0,r0,r11             ;581
000ec8  e1a00b00          LSL      r0,r0,#22             ;581
000ecc  e1a00b20          LSR      r0,r0,#22             ;581
000ed0  e5850004          STR      r0,[r5,#4]            ;581
000ed4  e3a00017          MOV      r0,#0x17              ;582
000ed8  ebfffffe          BL       sysEnableInterrupt
000edc  e59d4008          LDR      r4,[sp,#8]            ;584
                  |L1.3808|
000ee0  e3540000          CMP      r4,#0                 ;535
000ee4  1affffa4          BNE      |L1.3452|
000ee8  e51f08f4          LDR      r0,|L1.1532|
000eec  e5900000          LDR      r0,[r0,#0]            ;587  ; _ehci
000ef0  e5900020          LDR      r0,[r0,#0x20]         ;587
000ef4  e3800010          ORR      r0,r0,#0x10           ;587
000ef8  e51f1904          LDR      r1,|L1.1532|
000efc  e5911000          LDR      r1,[r1,#0]            ;587  ; _ehci
000f00  e5810020          STR      r0,[r1,#0x20]         ;587
000f04  e3a00000          MOV      r0,#0                 ;588
000f08  eaffff28          B        |L1.2992|
                  |L1.3852|
000f0c  e1a00000          MOV      r0,r0                 ;590
000f10  ea000004          B        |L1.3880|
                  |L1.3860|
000f14  e59d4004          LDR      r4,[sp,#4]            ;594
000f18  e5940054          LDR      r0,[r4,#0x54]         ;595
000f1c  e58d0004          STR      r0,[sp,#4]            ;595
000f20  e1a00004          MOV      r0,r4                 ;596
000f24  ebfffffe          BL       free_ehci_iTD
                  |L1.3880|
000f28  e59d0004          LDR      r0,[sp,#4]            ;592
000f2c  e3500000          CMP      r0,#0                 ;592
000f30  1afffff7          BNE      |L1.3860|
000f34  e3e00009          MVN      r0,#9                 ;598
000f38  eaffff1c          B        |L1.2992|
;;;600    
                          ENDP

                  ehci_quit_iso_xfer PROC
;;;806     */
;;;807    int ehci_quit_iso_xfer(UTR_T *utr, EP_INFO_T *ep)
000f3c  e92d5ff0          PUSH     {r4-r12,lr}
;;;808    {
000f40  e1a04000          MOV      r4,r0
000f44  e1a08001          MOV      r8,r1
;;;809        ISO_EP_T   *iso_ep;
;;;810        iTD_T      *itd, *itd_next, *p;
;;;811        uint32_t   frnidx;
;;;812        uint32_t   now_frame;
;;;813    
;;;814        if (ep == NULL)
000f48  e3580000          CMP      r8,#0
000f4c  1a000009          BNE      |L1.3960|
;;;815        {
;;;816            if (utr == NULL)
000f50  e3540000          CMP      r4,#0
000f54  1a000001          BNE      |L1.3936|
;;;817                return USBH_ERR_NOT_FOUND;
000f58  e3e00069          MVN      r0,#0x69
                  |L1.3932|
;;;818    
;;;819            if (utr->ep == NULL)
;;;820                return USBH_ERR_NOT_FOUND;
;;;821    
;;;822            ep = utr->ep;
;;;823        }
;;;824    
;;;825        if ((ep->bmAttributes & EP_ATTR_TT_MASK) != EP_ATTR_TT_ISO)
;;;826            return USBH_ERR_NOT_FOUND;          /* not isochronous endpoint                   */
;;;827    
;;;828        /*------------------------------------------------------------------------------------*/
;;;829        /*  It's an iso endpoint. Remove it as required.                                      */
;;;830        /*------------------------------------------------------------------------------------*/
;;;831        iso_ep = iso_ep_list;
;;;832        while (iso_ep != NULL)                  /* Search all activated iso endpoints         */
;;;833        {
;;;834            if (iso_ep->ep == ep)
;;;835                break;
;;;836            iso_ep = iso_ep->next;
;;;837        }
;;;838        if (iso_ep == NULL)
;;;839            return 0;                           /* should have been removed                   */
;;;840    
;;;841        itd = iso_ep->itd_list;                 /* get the first iTD from iso_ep's iTD list   */
;;;842    
;;;843        while (itd != NULL)                     /* traverse all iTDs of itd list              */
;;;844        {
;;;845            itd_next = itd->next;               /* remember the next iTD                      */
;;;846            utr = itd->utr;
;;;847    
;;;848            /*--------------------------------------------------------------------------------*/
;;;849            /*  Remove this iTD from period frame list                                        */
;;;850            /*--------------------------------------------------------------------------------*/
;;;851            frnidx = itd->sched_frnidx;
;;;852    
;;;853            /*
;;;854             *  Prevent to race with Host Controller. If the iTD to be removed is located in
;;;855             *  current or next frame, wait until HC passed through it.
;;;856             */
;;;857            while (1)
;;;858            {
;;;859                now_frame = (_ehci->UFINDR >> 3) & 0x3FF;
;;;860                if ((now_frame == frnidx) || (((now_frame+1)%1024) == frnidx))
;;;861                    continue;
;;;862                break;
;;;863            }
;;;864    
;;;865            if (_PFList[frnidx] == ITD_HLNK_ITD(itd))
;;;866            {
;;;867                /* is the first entry, just change to next     */
;;;868                _PFList[frnidx] = itd->Next_Link;
;;;869            }
;;;870            else
;;;871            {
;;;872                /*
;;;873                 * find the preceding iTD
;;;874                 */
;;;875                p = ITD_PTR(_PFList[frnidx]);   /* find the preceding iTD                     */
;;;876                while ((ITD_PTR(p->Next_Link) != itd) && (p != NULL))
;;;877                {
;;;878                    p = ITD_PTR(p->Next_Link);
;;;879                }
;;;880    
;;;881                if (p == NULL)                  /* link list out of control!                  */
;;;882                {
;;;883                    USB_error("ehci_quit_iso_xfer - An iTD lost reference to periodic frame list! 0x%x on %d\n", (int)itd, frnidx);
;;;884                }
;;;885                else                            /* remove iTD from list                       */
;;;886                {
;;;887                    p->Next_Link = itd->Next_Link;
;;;888                }
;;;889            }
;;;890    
;;;891            utr->td_cnt--;
;;;892            if (utr->td_cnt == 0)
;;;893            {
;;;894                /* All iTD of this UTR done                   */
;;;895                utr->bIsTransferDone = 1;
;;;896                if (utr->func)
;;;897                    utr->func(utr);
;;;898                utr->status = USBH_ERR_ABORT;
;;;899            }
;;;900    
;;;901            free_ehci_iTD(itd);
;;;902            itd = itd_next;
;;;903        }
;;;904    
;;;905        /*
;;;906         *  Remove iso_ep from iso_ep_list
;;;907         */
;;;908        remove_iso_ep_from_list(iso_ep);
;;;909        usbh_free_mem(iso_ep, sizeof(*iso_ep));      /* free this iso_ep                      */
;;;910        ep->hw_pipe = NULL;
;;;911    
;;;912        if (iso_ep_list == NULL)
;;;913            _ehci->UCMDR &= ~HSUSBH_UCMDR_PSEN_Msk;
;;;914    
;;;915        return 0;
;;;916    }
000f5c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.3936|
000f60  e594000c          LDR      r0,[r4,#0xc]          ;819
000f64  e3500000          CMP      r0,#0                 ;819
000f68  1a000001          BNE      |L1.3956|
000f6c  e3e00069          MVN      r0,#0x69              ;820
000f70  eafffff9          B        |L1.3932|
                  |L1.3956|
000f74  e594800c          LDR      r8,[r4,#0xc]          ;822
                  |L1.3960|
000f78  e5d80001          LDRB     r0,[r8,#1]            ;825
000f7c  e2000003          AND      r0,r0,#3              ;825
000f80  e3500001          CMP      r0,#1                 ;825
000f84  0a000001          BEQ      |L1.3984|
000f88  e3e00069          MVN      r0,#0x69              ;826
000f8c  eafffff2          B        |L1.3932|
                  |L1.3984|
000f90  e51f097c          LDR      r0,|L1.1564|
000f94  e5906000          LDR      r6,[r0,#0]            ;831  ; iso_ep_list
000f98  ea000004          B        |L1.4016|
                  |L1.3996|
000f9c  e5960000          LDR      r0,[r6,#0]            ;834
000fa0  e1500008          CMP      r0,r8                 ;834
000fa4  1a000000          BNE      |L1.4012|
000fa8  ea000002          B        |L1.4024|
                  |L1.4012|
000fac  e5966018          LDR      r6,[r6,#0x18]         ;836
                  |L1.4016|
000fb0  e3560000          CMP      r6,#0                 ;832
000fb4  1afffff8          BNE      |L1.3996|
                  |L1.4024|
000fb8  e1a00000          MOV      r0,r0                 ;835
000fbc  e3560000          CMP      r6,#0                 ;838
000fc0  1a000001          BNE      |L1.4044|
000fc4  e3a00000          MOV      r0,#0                 ;839
000fc8  eaffffe3          B        |L1.3932|
                  |L1.4044|
000fcc  e5965008          LDR      r5,[r6,#8]            ;841
000fd0  ea00004d          B        |L1.4364|
                  |L1.4052|
000fd4  e595b054          LDR      r11,[r5,#0x54]        ;845
000fd8  e5954044          LDR      r4,[r5,#0x44]         ;846
000fdc  e5957050          LDR      r7,[r5,#0x50]         ;851
000fe0  ea00000c          B        |L1.4120|
                  |L1.4068|
000fe4  e51f09f0          LDR      r0,|L1.1532|
000fe8  e5900000          LDR      r0,[r0,#0]            ;859  ; _ehci
000fec  e590002c          LDR      r0,[r0,#0x2c]         ;859
000ff0  e51f19f8          LDR      r1,|L1.1536|
000ff4  e001a1a0          AND      r10,r1,r0,LSR #3      ;859
000ff8  e15a0007          CMP      r10,r7                ;860
000ffc  0a000003          BEQ      |L1.4112|
001000  e28a0001          ADD      r0,r10,#1             ;860
001004  e0000001          AND      r0,r0,r1              ;860
001008  e1500007          CMP      r0,r7                 ;860
00100c  1a000000          BNE      |L1.4116|
                  |L1.4112|
001010  ea000000          B        |L1.4120|
                  |L1.4116|
001014  ea000001          B        |L1.4128|
                  |L1.4120|
001018  e1a00000          MOV      r0,r0                 ;861
00101c  eafffff0          B        |L1.4068|
                  |L1.4128|
001020  e1a00000          MOV      r0,r0                 ;862
001024  e51f0a0c          LDR      r0,|L1.1568|
001028  e5900000          LDR      r0,[r0,#0]            ;865  ; _PFList
00102c  e7901107          LDR      r1,[r0,r7,LSL #2]     ;865
001030  e3c5001f          BIC      r0,r5,#0x1f           ;865
001034  e1510000          CMP      r1,r0                 ;865
001038  1a000004          BNE      |L1.4176|
00103c  e51f1a24          LDR      r1,|L1.1568|
001040  e5950000          LDR      r0,[r5,#0]            ;868
001044  e5911000          LDR      r1,[r1,#0]            ;868  ; _PFList
001048  e7810107          STR      r0,[r1,r7,LSL #2]     ;868
00104c  ea00001b          B        |L1.4288|
                  |L1.4176|
001050  e51f0a38          LDR      r0,|L1.1568|
001054  e5900000          LDR      r0,[r0,#0]            ;875  ; _PFList
001058  e7900107          LDR      r0,[r0,r7,LSL #2]     ;875
00105c  e3c0901f          BIC      r9,r0,#0x1f           ;875
001060  ea000007          B        |L1.4228|
                  |L1.4196|
001064  45484349          DCB      "EHCI driver ITD bug!?\n",0
001068  20647269
00106c  76657220
001070  49544420
001074  62756721
001078  3f0a00  
00107b  00                DCB      0
                  |L1.4220|
00107c  e5990000          LDR      r0,[r9,#0]            ;878
001080  e3c0901f          BIC      r9,r0,#0x1f           ;878
                  |L1.4228|
001084  e5990000          LDR      r0,[r9,#0]            ;876
001088  e3c0001f          BIC      r0,r0,#0x1f           ;876
00108c  e1500005          CMP      r0,r5                 ;876
001090  0a000001          BEQ      |L1.4252|
001094  e3590000          CMP      r9,#0                 ;876
001098  1afffff7          BNE      |L1.4220|
                  |L1.4252|
00109c  e3590000          CMP      r9,#0                 ;881
0010a0  1a000004          BNE      |L1.4280|
0010a4  e1a02007          MOV      r2,r7                 ;883
0010a8  e1a01005          MOV      r1,r5                 ;883
0010ac  e59f00b0          LDR      r0,|L1.4452|
0010b0  ebfffffe          BL       sysprintf
0010b4  ea000001          B        |L1.4288|
                  |L1.4280|
0010b8  e5950000          LDR      r0,[r5,#0]            ;887
0010bc  e5890000          STR      r0,[r9,#0]            ;887
                  |L1.4288|
0010c0  e5940074          LDR      r0,[r4,#0x74]         ;891
0010c4  e2400001          SUB      r0,r0,#1              ;891
0010c8  e5840074          STR      r0,[r4,#0x74]         ;891
0010cc  e5940074          LDR      r0,[r4,#0x74]         ;892
0010d0  e3500000          CMP      r0,#0                 ;892
0010d4  1a000009          BNE      |L1.4352|
0010d8  e3a00001          MOV      r0,#1                 ;895
0010dc  e5c40014          STRB     r0,[r4,#0x14]         ;895
0010e0  e5940084          LDR      r0,[r4,#0x84]         ;896
0010e4  e3500000          CMP      r0,#0                 ;896
0010e8  0a000002          BEQ      |L1.4344|
0010ec  e5941084          LDR      r1,[r4,#0x84]         ;897
0010f0  e1a00004          MOV      r0,r4                 ;897
0010f4  e12fff31          BLX      r1                    ;897
                  |L1.4344|
0010f8  e3e000cc          MVN      r0,#0xcc              ;898
0010fc  e5840078          STR      r0,[r4,#0x78]         ;898
                  |L1.4352|
001100  e1a00005          MOV      r0,r5                 ;901
001104  ebfffffe          BL       free_ehci_iTD
001108  e1a0500b          MOV      r5,r11                ;902
                  |L1.4364|
00110c  e3550000          CMP      r5,#0                 ;843
001110  1affffaf          BNE      |L1.4052|
001114  e1a00006          MOV      r0,r6                 ;908
001118  ebfffffe          BL       remove_iso_ep_from_list
00111c  e3a0101c          MOV      r1,#0x1c              ;909
001120  e1a00006          MOV      r0,r6                 ;909
001124  ebfffffe          BL       usbh_free_mem
001128  e3a00000          MOV      r0,#0                 ;910
00112c  e5880008          STR      r0,[r8,#8]            ;910
001130  e51f0b1c          LDR      r0,|L1.1564|
001134  e5900000          LDR      r0,[r0,#0]            ;912  ; iso_ep_list
001138  e3500000          CMP      r0,#0                 ;912
00113c  1a000006          BNE      |L1.4444|
001140  e51f0b4c          LDR      r0,|L1.1532|
001144  e5900000          LDR      r0,[r0,#0]            ;913  ; _ehci
001148  e5900020          LDR      r0,[r0,#0x20]         ;913
00114c  e3c00010          BIC      r0,r0,#0x10           ;913
001150  e51f1b5c          LDR      r1,|L1.1532|
001154  e5911000          LDR      r1,[r1,#0]            ;913  ; _ehci
001158  e5810020          STR      r0,[r1,#0x20]         ;913
                  |L1.4444|
00115c  e3a00000          MOV      r0,#0                 ;915
001160  eaffff7d          B        |L1.3932|
;;;917    
                          ENDP

                  |L1.4452|
                          DCD      ||.constdata||+0xc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sitd_OUT_Smask
000000  00010003          DCW      0x0001,0x0003
000004  0007000f          DCW      0x0007,0x000f
000008  001f003f          DCW      0x001f,0x003f
00000c  65686369          DCB      0x65,0x68,0x63,0x69
000010  5f717569          DCB      0x5f,0x71,0x75,0x69
000014  745f6973          DCB      0x74,0x5f,0x69,0x73
000018  6f5f7866          DCB      0x6f,0x5f,0x78,0x66
00001c  6572202d          DCB      0x65,0x72,0x20,0x2d
000020  20416e20          DCB      0x20,0x41,0x6e,0x20
000024  69544420          DCB      0x69,0x54,0x44,0x20
000028  6c6f7374          DCB      0x6c,0x6f,0x73,0x74
00002c  20726566          DCB      0x20,0x72,0x65,0x66
000030  6572656e          DCB      0x65,0x72,0x65,0x6e
000034  63652074          DCB      0x63,0x65,0x20,0x74
000038  6f207065          DCB      0x6f,0x20,0x70,0x65
00003c  72696f64          DCB      0x72,0x69,0x6f,0x64
000040  69632066          DCB      0x69,0x63,0x20,0x66
000044  72616d65          DCB      0x72,0x61,0x6d,0x65
000048  206c6973          DCB      0x20,0x6c,0x69,0x73
00004c  74212030          DCB      0x74,0x21,0x20,0x30
000050  78257820          DCB      0x78,0x25,0x78,0x20
000054  6f6e2025          DCB      0x6f,0x6e,0x20,0x25
000058  640a00            DCB      0x64,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  g_flr_cnt
                          DCD      0x00000000
                  iso_ep_list
                          DCD      0x00000000
