; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\guibasediolog.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\guibasediolog.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\guibasediolog.crf src\user\guibasediolog.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  updateBG PROC
;;;56     /*-----------------------------------------*/
;;;57     static void updateBG(void)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;58     {
;;;59         //TickType_t tickLocalStart = xTaskGetTickCount();
;;;60         //EPDDrawContainByIDPos(TRUE,EPD_PICT_LOADING,475,250);
;;;61         EPDDrawContainByIDPos(FALSE,EPD_PICT_ALL_WHITE_INDEX,0,0);
000004  e3a03000          MOV      r3,#0
000008  e1a02003          MOV      r2,r3
00000c  e3a01003          MOV      r1,#3
000010  e1a00003          MOV      r0,r3
000014  ebfffffe          BL       EPDDrawContainByIDPos
;;;62         EPDDrawStringMax(FALSE,"xxxxxx Calibration xxxxxx",200,100,FALSE);
000018  e3a00000          MOV      r0,#0
00001c  e3a03064          MOV      r3,#0x64
000020  e3a020c8          MOV      r2,#0xc8
000024  e28f1f7b          ADR      r1,|L1.536|
000028  e58d0000          STR      r0,[sp,#0]
00002c  ebfffffe          BL       EPDDrawStringMax
;;;63         EPDDrawStringMax(FALSE,"\nx\nx\nx\nx\nx\nx\nx\nx",200,100,FALSE);
000030  e3a00000          MOV      r0,#0
000034  e3a03064          MOV      r3,#0x64
000038  e3a020c8          MOV      r2,#0xc8
00003c  e28f1e1f          ADR      r1,|L1.564|
000040  e58d0000          STR      r0,[sp,#0]
000044  ebfffffe          BL       EPDDrawStringMax
;;;64         EPDDrawStringMax(FALSE,"\nx\nx\nx\nx\nx\nx\nx\nx",200+(24*28),100,FALSE);
000048  e3a00000          MOV      r0,#0
00004c  e3a03064          MOV      r3,#0x64
000050  e3a02fda          MOV      r2,#0x368
000054  e28f1f76          ADR      r1,|L1.564|
000058  e58d0000          STR      r0,[sp,#0]
00005c  ebfffffe          BL       EPDDrawStringMax
;;;65         EPDDrawStringMax(FALSE,"\n\n\n\n\n\n\n\n\nxxxxxxxxxxxxxxxxxxxxxxxxx",200,100,FALSE);
000060  e3a00000          MOV      r0,#0
000064  e3a03064          MOV      r3,#0x64
000068  e3a020c8          MOV      r2,#0xc8
00006c  e28f1f75          ADR      r1,|L1.584|
000070  e58d0000          STR      r0,[sp,#0]
000074  ebfffffe          BL       EPDDrawStringMax
;;;66         EPDDrawStringMax(FALSE," <>:Move   {:ON\\OFF   }:Exit ",BTM_DISCRIPT_BAR_X,BTM_DISCRIPT_BAR_Y,TRUE);
000078  e3a00001          MOV      r0,#1
00007c  e3a03e29          MOV      r3,#0x290
000080  e3a020b4          MOV      r2,#0xb4
000084  e28f1e1e          ADR      r1,|L1.620|
000088  e58d0000          STR      r0,[sp,#0]
00008c  e3a00000          MOV      r0,#0
000090  ebfffffe          BL       EPDDrawStringMax
;;;67         
;;;68         for(int i = 0; ; i++)
000094  e3a04000          MOV      r4,#0
000098  e1a00000          MOV      r0,r0
                  |L1.156|
;;;69         {//Dont Show Quit
;;;70             terninalPrintf("%s\n",listItem[i].itemName);
00009c  e59f01e8          LDR      r0,|L1.652|
0000a0  e5900000          LDR      r0,[r0,#0]  ; listItem
0000a4  e0800184          ADD      r0,r0,r4,LSL #3
0000a8  e5901004          LDR      r1,[r0,#4]
0000ac  e28f0f77          ADR      r0,|L1.656|
0000b0  ebfffffe          BL       terninalPrintf
;;;71             if(listItem[i].charItem == 0)
0000b4  e59f01d0          LDR      r0,|L1.652|
0000b8  e5900000          LDR      r0,[r0,#0]  ; listItem
0000bc  e7d00184          LDRB     r0,[r0,r4,LSL #3]
0000c0  e3500000          CMP      r0,#0
0000c4  1a000002          BNE      |L1.212|
;;;72             {
;;;73                 maxSelectItem = i;
0000c8  e59f01c4          LDR      r0,|L1.660|
0000cc  e5804000          STR      r4,[r0,#0]  ; maxSelectItem
;;;74                 break;
0000d0  ea000001          B        |L1.220|
                  |L1.212|
0000d4  e2844001          ADD      r4,r4,#1              ;68
0000d8  eaffffef          B        |L1.156|
                  |L1.220|
0000dc  e1a00000          MOV      r0,r0
;;;75             }
;;;76         }
;;;77         for(int i=0;i<maxSelectItem;i++)
0000e0  e3a04000          MOV      r4,#0
0000e4  ea000017          B        |L1.328|
                  |L1.232|
;;;78         {
;;;79             EPDDrawStringMax(FALSE,listItem[i].itemName,300+50,100+(44*(2+i)),FALSE);
0000e8  e3a00000          MOV      r0,#0
0000ec  e58d0000          STR      r0,[sp,#0]
0000f0  e2840002          ADD      r0,r4,#2
0000f4  e3a0202c          MOV      r2,#0x2c
0000f8  e0000092          MUL      r0,r2,r0
0000fc  e2803064          ADD      r3,r0,#0x64
000100  e59f0184          LDR      r0,|L1.652|
000104  e5900000          LDR      r0,[r0,#0]  ; listItem
000108  e0800184          ADD      r0,r0,r4,LSL #3
00010c  e5901004          LDR      r1,[r0,#4]
000110  e59f2180          LDR      r2,|L1.664|
000114  e3a00000          MOV      r0,#0
000118  ebfffffe          BL       EPDDrawStringMax
;;;80             EPDDrawStringMax(FALSE,"-",300,100+(44*(2+i)),TRUE);
00011c  e3a00001          MOV      r0,#1
000120  e58d0000          STR      r0,[sp,#0]
000124  e2840002          ADD      r0,r4,#2
000128  e3a0102c          MOV      r1,#0x2c
00012c  e0000091          MUL      r0,r1,r0
000130  e2803064          ADD      r3,r0,#0x64
000134  e3a02f4b          MOV      r2,#0x12c
000138  e28f1f57          ADR      r1,|L1.668|
00013c  e3a00000          MOV      r0,#0
000140  ebfffffe          BL       EPDDrawStringMax
000144  e2844001          ADD      r4,r4,#1              ;77
                  |L1.328|
000148  e59f0144          LDR      r0,|L1.660|
00014c  e5900000          LDR      r0,[r0,#0]            ;77  ; maxSelectItem
000150  e1540000          CMP      r4,r0                 ;77
000154  baffffe3          BLT      |L1.232|
;;;81         }
;;;82         EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,300,100+(44*(2+oldIndex)));
000158  e59f0140          LDR      r0,|L1.672|
00015c  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000160  e2800002          ADD      r0,r0,#2
000164  e3a0102c          MOV      r1,#0x2c
000168  e0000091          MUL      r0,r1,r0
00016c  e2803064          ADD      r3,r0,#0x64
000170  e3a02f4b          MOV      r2,#0x12c
000174  e3a0106b          MOV      r1,#0x6b
000178  e3a00001          MOV      r0,#1
00017c  ebfffffe          BL       EPDDrawContainByIDPos
;;;83     }
000180  e8bd8038          POP      {r3-r5,pc}
;;;84     //static void updateData(void)
                          ENDP

                  GuiBaseDiologOnDraw PROC
;;;95     /*-----------------------------------------*/
;;;96     BOOL GuiBaseDiologOnDraw(uint8_t oriGuiId, uint8_t reFreshPara, int item, int keyinCallbackFun)
000184  e92d41f0          PUSH     {r4-r8,lr}
;;;97     {
000188  e1a06000          MOV      r6,r0
00018c  e1a07001          MOV      r7,r1
000190  e1a04002          MOV      r4,r2
000194  e1a05003          MOV      r5,r3
;;;98         //tickStart = xTaskGetTickCount();
;;;99         // sysprintf(" [INFO GUI] <Free> OnDraw (from GuiId = %d, reFreshPara = %d, para2 = %d, para3 = %d)\n", oriGuiId, reFreshPara, para2, para3);   
;;;100        listItem = (ListItem*)item;
000198  e59f00ec          LDR      r0,|L1.652|
00019c  e5804000          STR      r4,[r0,#0]  ; listItem
;;;101        keyinCallback = (KeyinCallback)keyinCallbackFun;
0001a0  e59f00fc          LDR      r0,|L1.676|
0001a4  e5805000          STR      r5,[r0,#0]  ; keyinCallback
;;;102        
;;;103        powerStatus = TRUE;
0001a8  e3a00001          MOV      r0,#1
0001ac  e59f10f4          LDR      r1,|L1.680|
0001b0  e5c10000          STRB     r0,[r1,#0]  ; powerStatus
;;;104        pGuiGetInterface = GuiGetInterface();
0001b4  ebfffffe          BL       GuiGetInterface
0001b8  e59f10ec          LDR      r1,|L1.684|
0001bc  e5810000          STR      r0,[r1,#0]  ; pGuiGetInterface
;;;105        pGuiGetInterface->setTimeoutFunc(UPDATE_BG_TIMER, UPDATE_BG_INTERVAL);  
0001c0  e2810000          ADD      r0,r1,#0
0001c4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001c8  e3e01000          MVN      r1,#0
0001cc  e590200c          LDR      r2,[r0,#0xc]
0001d0  e3a00000          MOV      r0,#0
0001d4  e12fff32          BLX      r2
;;;106        pGuiGetInterface->setTimeoutFunc(UPDATE_DATA_TIMER, UPDATE_DATA_INTERVAL); 
0001d8  e59f00cc          LDR      r0,|L1.684|
0001dc  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001e0  e3a01005          MOV      r1,#5
0001e4  e590200c          LDR      r2,[r0,#0xc]
0001e8  e3a00001          MOV      r0,#1
0001ec  e12fff32          BLX      r2
;;;107        updateBG();
0001f0  ebfffffe          BL       updateBG
;;;108        pGuiGetInterface->runTimeoutFunc(UPDATE_BG_TIMER);//更新畫面
0001f4  e59f00b0          LDR      r0,|L1.684|
0001f8  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0001fc  e5901010          LDR      r1,[r0,#0x10]
000200  e3a00000          MOV      r0,#0
000204  e12fff31          BLX      r1
;;;109        //sysprintf(" [INFO GUI] <Free> OnDraw exit: cost ticks = %d\n", xTaskGetTickCount() - tickStart);
;;;110        terninalPrintf("end ondraw");
000208  e28f00a0          ADR      r0,|L1.688|
00020c  ebfffffe          BL       terninalPrintf
;;;111        return TRUE;
000210  e3a00001          MOV      r0,#1
;;;112    }
000214  e8bd81f0          POP      {r4-r8,pc}
                  |L1.536|
000218  78787878          DCB      "xxxxxx Calibration xxxxxx",0
00021c  78782043
000220  616c6962
000224  72617469
000228  6f6e2078
00022c  78787878
000230  7800    
000232  00                DCB      0
000233  00                DCB      0
                  |L1.564|
000234  0a780a78          DCB      "\nx\nx\nx\nx\nx\nx\nx\nx",0
000238  0a780a78
00023c  0a780a78
000240  0a780a78
000244  00      
000245  00                DCB      0
000246  00                DCB      0
000247  00                DCB      0
                  |L1.584|
000248  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\nxxxxxxxxxxxxxxxxxxxxxxxxx",0
00024c  0a0a0a0a
000250  0a787878
000254  78787878
000258  78787878
00025c  78787878
000260  78787878
000264  78787878
000268  787800  
00026b  00                DCB      0
                  |L1.620|
00026c  203c3e3a          DCB      " <>:Move   {:ON\\OFF   }:Exit ",0
000270  4d6f7665
000274  2020207b
000278  3a4f4e5c
00027c  4f464620
000280  20207d3a
000284  45786974
000288  2000    
00028a  00                DCB      0
00028b  00                DCB      0
                  |L1.652|
                          DCD      listItem
                  |L1.656|
000290  25730a00          DCB      "%s\n",0
                  |L1.660|
                          DCD      maxSelectItem
                  |L1.664|
                          DCD      0x0000015e
                  |L1.668|
00029c  2d00              DCB      "-",0
00029e  00                DCB      0
00029f  00                DCB      0
                  |L1.672|
                          DCD      oldIndex
                  |L1.676|
                          DCD      keyinCallback
                  |L1.680|
                          DCD      powerStatus
                  |L1.684|
                          DCD      pGuiGetInterface
                  |L1.688|
0002b0  656e6420          DCB      "end ondraw",0
0002b4  6f6e6472
0002b8  617700  
0002bb  00                DCB      0
                          ENDP

                  GuiBaseDiologUpdateData PROC
;;;113    BOOL GuiBaseDiologUpdateData(void)
0002bc  e92d4010          PUSH     {r4,lr}
;;;114    {    
;;;115        //tickStart = xTaskGetTickCount();
;;;116        pGuiGetInterface->runTimeoutFunc(UPDATE_DATA_TIMER);//更updateScreen
0002c0  e51f001c          LDR      r0,|L1.684|
0002c4  e5900000          LDR      r0,[r0,#0]  ; pGuiGetInterface
0002c8  e5901010          LDR      r1,[r0,#0x10]
0002cc  e3a00001          MOV      r0,#1
0002d0  e12fff31          BLX      r1
;;;117        return TRUE;
0002d4  e3a00001          MOV      r0,#1
;;;118    }
0002d8  e8bd8010          POP      {r4,pc}
;;;119    BOOL GuiBaseDiologKeyCallback(uint8_t keyId, uint8_t downUp)
                          ENDP

                  GuiBaseDiologKeyCallback PROC
0002dc  e92d4070          PUSH     {r4-r6,lr}
;;;120    {
0002e0  e1a04000          MOV      r4,r0
0002e4  e1a05001          MOV      r5,r1
;;;121        //sysprintf(" [INFO GUI] <Free> Key:  keyId = %d, downUp = %d\n", keyId, downUp);   
;;;122        terninalPrintf("now[%d] old[%d]\n",nowIndex,oldIndex);
0002e8  e51f0050          LDR      r0,|L1.672|
0002ec  e5902000          LDR      r2,[r0,#0]  ; oldIndex
0002f0  e59f02c0          LDR      r0,|L1.1464|
0002f4  e5901000          LDR      r1,[r0,#0]  ; nowIndex
0002f8  e28f0faf          ADR      r0,|L1.1468|
0002fc  ebfffffe          BL       terninalPrintf
;;;123        BOOL reVal = FALSE; 
000300  e3a06000          MOV      r6,#0
;;;124        if(keyIgnoreFlag)
000304  e59f02c4          LDR      r0,|L1.1488|
000308  e5d00000          LDRB     r0,[r0,#0]  ; keyIgnoreFlag
00030c  e3500000          CMP      r0,#0
000310  0a000003          BEQ      |L1.804|
;;;125        {
;;;126            terninalPrintf(" [INFO GUI] <Calibration> Key:  ignore...\n"); 
000314  e28f0fae          ADR      r0,|L1.1492|
000318  ebfffffe          BL       terninalPrintf
;;;127            return reVal;
00031c  e1a00006          MOV      r0,r6
                  |L1.800|
;;;128        }
;;;129        if(keyinCallback == NULL)
;;;130        {
;;;131            terninalPrintf(" [INFO GUI] <Calibration> KeyCallback:  Function Pointer ERROR!!!\n"); 
;;;132            return reVal;
;;;133        }
;;;134        if(GUI_KEY_DOWN_INDEX == downUp)
;;;135        {
;;;136            switch(keyId)
;;;137            {
;;;138                case GUI_KEYPAD_ONE:
;;;139                    if((nowIndex>0)&&(nowIndex==oldIndex))
;;;140                    {
;;;141                        oldIndex=nowIndex;
;;;142                        nowIndex--;
;;;143                        reVal = TRUE;
;;;144                    }
;;;145                    else if((nowIndex==oldIndex)&&(nowIndex==0))
;;;146                    {
;;;147                        oldIndex=nowIndex;
;;;148                        nowIndex=maxSelectItem-1;
;;;149                        reVal = TRUE;
;;;150                    }
;;;151                    break;
;;;152                case GUI_KEYPAD_TWO:
;;;153                    if((nowIndex<(maxSelectItem-1))&&(nowIndex==oldIndex))
;;;154                    {
;;;155                        oldIndex=nowIndex;
;;;156                        nowIndex++;
;;;157                        reVal = TRUE;
;;;158                    }
;;;159                    else if((nowIndex==oldIndex)&&(nowIndex==maxSelectItem-1))
;;;160                    {
;;;161                        oldIndex=nowIndex;
;;;162                        nowIndex=0;
;;;163                        reVal = TRUE;
;;;164                    }
;;;165                    break;
;;;166                case GUI_KEYPAD_THREE:
;;;167                    //reVal = TRUE;
;;;168                    break;
;;;169                case GUI_KEYPAD_FOUR:
;;;170                    //reVal = TRUE;
;;;171                    break;
;;;172                case GUI_KEYPAD_FIVE:
;;;173                    if(oldIndex==nowIndex)
;;;174                    {
;;;175                        keyinCallback(listItem[nowIndex].charItem);
;;;176                        reVal = TRUE;
;;;177                    }
;;;178                    break;
;;;179                case GUI_KEYPAD_SIX:
;;;180                    keyinCallback('q');
;;;181                    oldIndex = 0;
;;;182                    nowIndex = 0;
;;;183                    reVal = TRUE;
;;;184                    break;
;;;185                case GUI_KEYPAD_REPLACE_BP_ID:
;;;186                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;187                    //GuiManagerShowScreen(GUI_REPLACE_BP_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;188                    //reVal = TRUE;
;;;189                    break;
;;;190                
;;;191                case GUI_KEYPAD_TESTER_ID:
;;;192                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;193                    //GuiManagerShowScreen(GUI_TESTER_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;194                    //reVal = TRUE;
;;;195                    break;
;;;196                
;;;197                 case GUI_KEYPAD_TESTER_KEYPAD_ID:
;;;198                    //EPDReSetBacklightTimeout(portMAX_DELAY);
;;;199                    //GuiManagerShowScreen(GUI_TESTER_KEYPAD_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);
;;;200                    //reVal = TRUE;
;;;201                    break;
;;;202            }
;;;203        }
;;;204        else
;;;205        {
;;;206            
;;;207        }
;;;208        setPrintfFlag(FALSE);
;;;209        return reVal;
;;;210    }
000320  e8bd8070          POP      {r4-r6,pc}
                  |L1.804|
000324  e51f0088          LDR      r0,|L1.676|
000328  e5900000          LDR      r0,[r0,#0]            ;129  ; keyinCallback
00032c  e3500000          CMP      r0,#0                 ;129
000330  1a000003          BNE      |L1.836|
000334  e59f02c4          LDR      r0,|L1.1536|
000338  ebfffffe          BL       terninalPrintf
00033c  e1a00006          MOV      r0,r6                 ;132
000340  eafffff6          B        |L1.800|
                  |L1.836|
000344  e3550001          CMP      r5,#1                 ;134
000348  1a000096          BNE      |L1.1448|
00034c  e3540004          CMP      r4,#4                 ;136
000350  0a00006c          BEQ      |L1.1288|
000354  ca000008          BGT      |L1.892|
000358  e3540000          CMP      r4,#0                 ;136
00035c  0a00007e          BEQ      |L1.1372|
000360  e3540001          CMP      r4,#1                 ;136
000364  0a000069          BEQ      |L1.1296|
000368  e3540002          CMP      r4,#2                 ;136
00036c  0a000036          BEQ      |L1.1100|
000370  e3540003          CMP      r4,#3                 ;136
000374  1a00008a          BNE      |L1.1444|
000378  ea000008          B        |L1.928|
                  |L1.892|
00037c  e3540005          CMP      r4,#5                 ;136
000380  0a000064          BEQ      |L1.1304|
000384  e3540011          CMP      r4,#0x11              ;136
000388  0a00007f          BEQ      |L1.1420|
00038c  e3540013          CMP      r4,#0x13              ;136
000390  0a000081          BEQ      |L1.1436|
000394  e3540014          CMP      r4,#0x14              ;136
000398  1a000081          BNE      |L1.1444|
00039c  ea00007c          B        |L1.1428|
                  |L1.928|
0003a0  e1a00000          MOV      r0,r0                 ;138
0003a4  e59f020c          LDR      r0,|L1.1464|
0003a8  e5900000          LDR      r0,[r0,#0]            ;139  ; nowIndex
0003ac  e3500000          CMP      r0,#0                 ;139
0003b0  da000010          BLE      |L1.1016|
0003b4  e59f01fc          LDR      r0,|L1.1464|
0003b8  e5900000          LDR      r0,[r0,#0]            ;139  ; nowIndex
0003bc  e51f1124          LDR      r1,|L1.672|
0003c0  e5911000          LDR      r1,[r1,#0]            ;139  ; oldIndex
0003c4  e1500001          CMP      r0,r1                 ;139
0003c8  1a00000a          BNE      |L1.1016|
0003cc  e59f01e4          LDR      r0,|L1.1464|
0003d0  e5900000          LDR      r0,[r0,#0]            ;141  ; nowIndex
0003d4  e51f113c          LDR      r1,|L1.672|
0003d8  e5810000          STR      r0,[r1,#0]            ;141  ; oldIndex
0003dc  e59f01d4          LDR      r0,|L1.1464|
0003e0  e5900000          LDR      r0,[r0,#0]            ;142  ; nowIndex
0003e4  e2400001          SUB      r0,r0,#1              ;142
0003e8  e59f11c8          LDR      r1,|L1.1464|
0003ec  e5810000          STR      r0,[r1,#0]            ;142  ; nowIndex
0003f0  e3a06001          MOV      r6,#1                 ;143
0003f4  ea000013          B        |L1.1096|
                  |L1.1016|
0003f8  e59f01b8          LDR      r0,|L1.1464|
0003fc  e5900000          LDR      r0,[r0,#0]            ;145  ; nowIndex
000400  e51f1168          LDR      r1,|L1.672|
000404  e5911000          LDR      r1,[r1,#0]            ;145  ; oldIndex
000408  e1500001          CMP      r0,r1                 ;145
00040c  1a00000d          BNE      |L1.1096|
000410  e59f01a0          LDR      r0,|L1.1464|
000414  e5900000          LDR      r0,[r0,#0]            ;145  ; nowIndex
000418  e3500000          CMP      r0,#0                 ;145
00041c  1a000009          BNE      |L1.1096|
000420  e59f0190          LDR      r0,|L1.1464|
000424  e5900000          LDR      r0,[r0,#0]            ;147  ; nowIndex
000428  e51f1190          LDR      r1,|L1.672|
00042c  e5810000          STR      r0,[r1,#0]            ;147  ; oldIndex
000430  e51f01a4          LDR      r0,|L1.660|
000434  e5900000          LDR      r0,[r0,#0]            ;148  ; maxSelectItem
000438  e2400001          SUB      r0,r0,#1              ;148
00043c  e59f1174          LDR      r1,|L1.1464|
000440  e5810000          STR      r0,[r1,#0]            ;148  ; nowIndex
000444  e3a06001          MOV      r6,#1                 ;149
                  |L1.1096|
000448  ea000055          B        |L1.1444|
                  |L1.1100|
00044c  e1a00000          MOV      r0,r0                 ;152
000450  e51f01c4          LDR      r0,|L1.660|
000454  e5900000          LDR      r0,[r0,#0]            ;153  ; maxSelectItem
000458  e2400001          SUB      r0,r0,#1              ;153
00045c  e59f1154          LDR      r1,|L1.1464|
000460  e5911000          LDR      r1,[r1,#0]            ;153  ; nowIndex
000464  e1500001          CMP      r0,r1                 ;153
000468  da000010          BLE      |L1.1200|
00046c  e59f0144          LDR      r0,|L1.1464|
000470  e5900000          LDR      r0,[r0,#0]            ;153  ; nowIndex
000474  e51f11dc          LDR      r1,|L1.672|
000478  e5911000          LDR      r1,[r1,#0]            ;153  ; oldIndex
00047c  e1500001          CMP      r0,r1                 ;153
000480  1a00000a          BNE      |L1.1200|
000484  e59f012c          LDR      r0,|L1.1464|
000488  e5900000          LDR      r0,[r0,#0]            ;155  ; nowIndex
00048c  e51f11f4          LDR      r1,|L1.672|
000490  e5810000          STR      r0,[r1,#0]            ;155  ; oldIndex
000494  e59f011c          LDR      r0,|L1.1464|
000498  e5900000          LDR      r0,[r0,#0]            ;156  ; nowIndex
00049c  e2800001          ADD      r0,r0,#1              ;156
0004a0  e59f1110          LDR      r1,|L1.1464|
0004a4  e5810000          STR      r0,[r1,#0]            ;156  ; nowIndex
0004a8  e3a06001          MOV      r6,#1                 ;157
0004ac  ea000014          B        |L1.1284|
                  |L1.1200|
0004b0  e59f0100          LDR      r0,|L1.1464|
0004b4  e5900000          LDR      r0,[r0,#0]            ;159  ; nowIndex
0004b8  e51f1220          LDR      r1,|L1.672|
0004bc  e5911000          LDR      r1,[r1,#0]            ;159  ; oldIndex
0004c0  e1500001          CMP      r0,r1                 ;159
0004c4  1a00000e          BNE      |L1.1284|
0004c8  e51f023c          LDR      r0,|L1.660|
0004cc  e5900000          LDR      r0,[r0,#0]            ;159  ; maxSelectItem
0004d0  e2400001          SUB      r0,r0,#1              ;159
0004d4  e59f10dc          LDR      r1,|L1.1464|
0004d8  e5911000          LDR      r1,[r1,#0]            ;159  ; nowIndex
0004dc  e1500001          CMP      r0,r1                 ;159
0004e0  1a000007          BNE      |L1.1284|
0004e4  e59f00cc          LDR      r0,|L1.1464|
0004e8  e5900000          LDR      r0,[r0,#0]            ;161  ; nowIndex
0004ec  e51f1254          LDR      r1,|L1.672|
0004f0  e5810000          STR      r0,[r1,#0]            ;161  ; oldIndex
0004f4  e3a00000          MOV      r0,#0                 ;162
0004f8  e59f10b8          LDR      r1,|L1.1464|
0004fc  e5810000          STR      r0,[r1,#0]            ;162  ; nowIndex
000500  e3a06001          MOV      r6,#1                 ;163
                  |L1.1284|
000504  ea000026          B        |L1.1444|
                  |L1.1288|
000508  e1a00000          MOV      r0,r0                 ;166
00050c  ea000024          B        |L1.1444|
                  |L1.1296|
000510  e1a00000          MOV      r0,r0                 ;169
000514  ea000022          B        |L1.1444|
                  |L1.1304|
000518  e1a00000          MOV      r0,r0                 ;172
00051c  e51f0284          LDR      r0,|L1.672|
000520  e5900000          LDR      r0,[r0,#0]            ;173  ; oldIndex
000524  e59f108c          LDR      r1,|L1.1464|
000528  e5911000          LDR      r1,[r1,#0]            ;173  ; nowIndex
00052c  e1500001          CMP      r0,r1                 ;173
000530  1a000008          BNE      |L1.1368|
000534  e51f12b0          LDR      r1,|L1.652|
000538  e5911000          LDR      r1,[r1,#0]            ;175  ; listItem
00053c  e59f2074          LDR      r2,|L1.1464|
000540  e5922000          LDR      r2,[r2,#0]            ;175  ; nowIndex
000544  e7d10182          LDRB     r0,[r1,r2,LSL #3]     ;175
000548  e51f12ac          LDR      r1,|L1.676|
00054c  e5911000          LDR      r1,[r1,#0]            ;175  ; keyinCallback
000550  e12fff31          BLX      r1                    ;175
000554  e3a06001          MOV      r6,#1                 ;176
                  |L1.1368|
000558  ea000011          B        |L1.1444|
                  |L1.1372|
00055c  e1a00000          MOV      r0,r0                 ;179
000560  e3a00071          MOV      r0,#0x71              ;180
000564  e51f12c8          LDR      r1,|L1.676|
000568  e5911000          LDR      r1,[r1,#0]            ;180  ; keyinCallback
00056c  e12fff31          BLX      r1                    ;180
000570  e3a00000          MOV      r0,#0                 ;181
000574  e51f12dc          LDR      r1,|L1.672|
000578  e5810000          STR      r0,[r1,#0]            ;181  ; oldIndex
00057c  e59f1034          LDR      r1,|L1.1464|
000580  e5810000          STR      r0,[r1,#0]            ;182  ; nowIndex
000584  e3a06001          MOV      r6,#1                 ;183
000588  ea000005          B        |L1.1444|
                  |L1.1420|
00058c  e1a00000          MOV      r0,r0                 ;185
000590  ea000003          B        |L1.1444|
                  |L1.1428|
000594  e1a00000          MOV      r0,r0                 ;191
000598  ea000001          B        |L1.1444|
                  |L1.1436|
00059c  e1a00000          MOV      r0,r0                 ;197
0005a0  e1a00000          MOV      r0,r0                 ;201
                  |L1.1444|
0005a4  e1a00000          MOV      r0,r0                 ;151
                  |L1.1448|
0005a8  e3a00000          MOV      r0,#0                 ;208
0005ac  ebfffffe          BL       setPrintfFlag
0005b0  e1a00006          MOV      r0,r6                 ;209
0005b4  eaffff59          B        |L1.800|
                  |L1.1464|
                          DCD      nowIndex
                  |L1.1468|
0005bc  6e6f775b          DCB      "now[%d] old[%d]\n",0
0005c0  25645d20
0005c4  6f6c645b
0005c8  25645d0a
0005cc  00      
0005cd  00                DCB      0
0005ce  00                DCB      0
0005cf  00                DCB      0
                  |L1.1488|
                          DCD      keyIgnoreFlag
                  |L1.1492|
0005d4  205b494e          DCB      " [INFO GUI] <Calibration> Key:  ignore...\n",0
0005d8  464f2047
0005dc  55495d20
0005e0  3c43616c
0005e4  69627261
0005e8  74696f6e
0005ec  3e204b65
0005f0  793a2020
0005f4  69676e6f
0005f8  72652e2e
0005fc  2e0a00  
0005ff  00                DCB      0
                  |L1.1536|
                          DCD      ||.constdata||
                          ENDP

                  GuiBaseDiologTimerCallback PROC
;;;211    BOOL GuiBaseDiologTimerCallback(uint8_t timerIndex)
000604  e92d4010          PUSH     {r4,lr}
;;;212    {
000608  e1a04000          MOV      r4,r0
;;;213        keyIgnoreFlag = TRUE;
00060c  e3a00001          MOV      r0,#1
000610  e51f1048          LDR      r1,|L1.1488|
000614  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;214        switch(timerIndex)
000618  e3540000          CMP      r4,#0
00061c  0a000004          BEQ      |L1.1588|
000620  e3540001          CMP      r4,#1
000624  0a000004          BEQ      |L1.1596|
000628  e3540002          CMP      r4,#2
00062c  1a000024          BNE      |L1.1732|
000630  ea000021          B        |L1.1724|
                  |L1.1588|
;;;215        {
;;;216            case UPDATE_BG_TIMER:
000634  e1a00000          MOV      r0,r0
;;;217                break;
000638  ea000021          B        |L1.1732|
                  |L1.1596|
;;;218            case UPDATE_DATA_TIMER:
00063c  e1a00000          MOV      r0,r0
;;;219                if(oldIndex!=nowIndex)
000640  e51f03a8          LDR      r0,|L1.672|
000644  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000648  e51f1098          LDR      r1,|L1.1464|
00064c  e5911000          LDR      r1,[r1,#0]  ; nowIndex
000650  e1500001          CMP      r0,r1
000654  0a000017          BEQ      |L1.1720|
;;;220                {
;;;221                    //deselect item change to white
;;;222                    EPDDrawContainByIDPos(FALSE,EPD_PICT_LINE_SMALL_2_INDEX ,300,100+(44*(oldIndex+2)));
000658  e51f03c0          LDR      r0,|L1.672|
00065c  e5900000          LDR      r0,[r0,#0]  ; oldIndex
000660  e2800002          ADD      r0,r0,#2
000664  e3a0102c          MOV      r1,#0x2c
000668  e0000091          MUL      r0,r1,r0
00066c  e2803064          ADD      r3,r0,#0x64
000670  e3a02f4b          MOV      r2,#0x12c
000674  e3a0105c          MOV      r1,#0x5c
000678  e3a00000          MOV      r0,#0
00067c  ebfffffe          BL       EPDDrawContainByIDPos
;;;223                    //select item change to black
;;;224                    EPDDrawContainByIDPos(TRUE,EPD_PICT_LINE_SMALL_2_I_INDEX,300,100+(44*(nowIndex+2)));
000680  e51f00d0          LDR      r0,|L1.1464|
000684  e5900000          LDR      r0,[r0,#0]  ; nowIndex
000688  e2800002          ADD      r0,r0,#2
00068c  e3a0102c          MOV      r1,#0x2c
000690  e0000091          MUL      r0,r1,r0
000694  e2803064          ADD      r3,r0,#0x64
000698  e3a02f4b          MOV      r2,#0x12c
00069c  e3a0106b          MOV      r1,#0x6b
0006a0  e3a00001          MOV      r0,#1
0006a4  ebfffffe          BL       EPDDrawContainByIDPos
;;;225                    oldIndex=nowIndex;
0006a8  e51f00f8          LDR      r0,|L1.1464|
0006ac  e5900000          LDR      r0,[r0,#0]  ; nowIndex
0006b0  e51f1418          LDR      r1,|L1.672|
0006b4  e5810000          STR      r0,[r1,#0]  ; oldIndex
                  |L1.1720|
;;;226                }
;;;227                break;
0006b8  ea000001          B        |L1.1732|
                  |L1.1724|
;;;228            case EXIT_TIMER:
0006bc  e1a00000          MOV      r0,r0
;;;229                //GuiManagerShowScreen(GUI_STANDBY_ID, GUI_REDRAW_PARA_REFRESH, 0, 0);        
;;;230                break;
0006c0  e1a00000          MOV      r0,r0
                  |L1.1732|
0006c4  e1a00000          MOV      r0,r0                 ;217
;;;231        }
;;;232        keyIgnoreFlag = FALSE;
0006c8  e3a00000          MOV      r0,#0
0006cc  e51f1104          LDR      r1,|L1.1488|
0006d0  e5c10000          STRB     r0,[r1,#0]  ; keyIgnoreFlag
;;;233        return TRUE;
0006d4  e3a00001          MOV      r0,#1
;;;234    }
0006d8  e8bd8010          POP      {r4,pc}
;;;235    
                          ENDP

                  GuiBaseDiologPowerCallbackFunc PROC
;;;236    BOOL GuiBaseDiologPowerCallbackFunc(uint8_t type, int flag)
0006dc  e1a02000          MOV      r2,r0
;;;237    {
;;;238        //sysprintf(" [INFO GUI] <Free> power [%d] : flag = %d!!\n", type, flag);
;;;239        switch(type)
0006e0  e3520001          CMP      r2,#1
0006e4  0a000006          BEQ      |L1.1796|
0006e8  e3520002          CMP      r2,#2
0006ec  0a000008          BEQ      |L1.1812|
0006f0  e3520003          CMP      r2,#3
0006f4  0a000008          BEQ      |L1.1820|
0006f8  e3520004          CMP      r2,#4
0006fc  1a00000a          BNE      |L1.1836|
000700  ea000007          B        |L1.1828|
                  |L1.1796|
;;;240        {
;;;241            case GUI_POWER_STATUS_INDEX:
000704  e1a00000          MOV      r0,r0
;;;242                return powerStatus;
000708  e51f0468          LDR      r0,|L1.680|
00070c  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
                  |L1.1808|
;;;243            case GUI_POWER_ON_INDEX:
;;;244                break;
;;;245            case GUI_POWER_OFF_INDEX:
;;;246                break;
;;;247            case GUI_POWER_PREV_OFF_INDEX:
;;;248                break;
;;;249        }
;;;250        return TRUE;
;;;251    }
000710  e12fff1e          BX       lr
                  |L1.1812|
000714  e1a00000          MOV      r0,r0                 ;243
000718  ea000003          B        |L1.1836|
                  |L1.1820|
00071c  e1a00000          MOV      r0,r0                 ;245
000720  ea000001          B        |L1.1836|
                  |L1.1828|
000724  e1a00000          MOV      r0,r0                 ;247
000728  e1a00000          MOV      r0,r0                 ;248
                  |L1.1836|
00072c  e1a00000          MOV      r0,r0                 ;244
000730  e3a00001          MOV      r0,#1                 ;250
000734  eafffff5          B        |L1.1808|
;;;252    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  205b494e          DCB      0x20,0x5b,0x49,0x4e
000004  464f2047          DCB      0x46,0x4f,0x20,0x47
000008  55495d20          DCB      0x55,0x49,0x5d,0x20
00000c  3c43616c          DCB      0x3c,0x43,0x61,0x6c
000010  69627261          DCB      0x69,0x62,0x72,0x61
000014  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000018  3e204b65          DCB      0x3e,0x20,0x4b,0x65
00001c  7943616c          DCB      0x79,0x43,0x61,0x6c
000020  6c626163          DCB      0x6c,0x62,0x61,0x63
000024  6b3a2020          DCB      0x6b,0x3a,0x20,0x20
000028  46756e63          DCB      0x46,0x75,0x6e,0x63
00002c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000030  20506f69          DCB      0x20,0x50,0x6f,0x69
000034  6e746572          DCB      0x6e,0x74,0x65,0x72
000038  20455252          DCB      0x20,0x45,0x52,0x52
00003c  4f522121          DCB      0x4f,0x52,0x21,0x21
000040  210a00            DCB      0x21,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  keyinCallback
                          DCD      0x00000000
                  pGuiGetInterface
                          DCD      0x00000000
                  powerStatus
000008  01                DCB      0x01
                  keyIgnoreFlag
000009  000000            DCB      0x00,0x00,0x00
                  maxSelectItem
                          DCD      0x00000000
                  nowIndex
                          DCD      0x00000000
                  oldIndex
                          DCD      0x00000000
                  listItem
                          DCD      0x00000000
