; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\epmreader.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\epmreader.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\epmreader.crf src\syshal\cardlib\epmreader.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  EPMReaderParserMessage PROC
;;;611    
;;;612    uint16_t EPMReaderParserMessage(uint8_t msgType, uint8_t* msgBuff, uint16_t msgLen, uint16_t* returnCode)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;613    {    
000004  e1a0a000          MOV      r10,r0
000008  e1a05001          MOV      r5,r1
00000c  e1a04002          MOV      r4,r2
000010  e1a0b003          MOV      r11,r3
;;;614        uint16_t dataLen;
;;;615        //uint8_t lrcValue;
;;;616        uint8_t targetType1, targetType2;
;;;617        if(returnCode == NULL)
000014  e35b0000          CMP      r11,#0
000018  1a000006          BNE      |L1.56|
;;;618        {
;;;619            sysprintf("\r\n~~~ EPMReaderParserMessage msgType = %d[%d] error (returnCode == NULL)~~~>\r\n", msgType, msgLen);
00001c  e1a02004          MOV      r2,r4
000020  e1a0100a          MOV      r1,r10
000024  e59f02f0          LDR      r0,|L1.796|
000028  ebfffffe          BL       sysprintf
;;;620            return CARD_MESSAGE_RETURN_PARSER_ERROR;
00002c  e3a00003          MOV      r0,#3
                  |L1.48|
000030  e28dd010          ADD      sp,sp,#0x10
;;;621        }
;;;622        *returnCode = CARD_MESSAGE_CODE_NO_USE; //錯誤的總稱
;;;623    
;;;624        #if(ENABLE_RX_PRINT)
;;;625        int i;    
;;;626        sysprintf("\r\n~~~ EPMReaderParserMessage msgType = %d[%d] ~~~>\r\n", msgType, msgLen);
;;;627        for(i = 0; i<msgLen; i++)
;;;628        {
;;;629            sysprintf("0x%02x, ", msgBuff[i]);
;;;630            if(i%10 == 9)
;;;631                sysprintf("\r\n");
;;;632    
;;;633        }
;;;634        sysprintf("\r\n<~~~ EPMReaderParserMessage ~~~\r\n");
;;;635        #endif
;;;636        
;;;637        if(msgBuff[0] != 0xEA)
;;;638        {
;;;639            sysprintf("EPMReaderParserMessage(parser type:%d): header err [0x%02x: 0xEA]\n", msgType, msgBuff[0]);
;;;640            return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;641        }
;;;642        if((msgBuff[msgLen-2] != 0x90) || (msgBuff[msgLen-1] != 0x0))
;;;643        {
;;;644            sysprintf("EPMReaderParserMessage(parser type:%d): end flag err [0x%02x: 0x%02x]\n", msgType, msgBuff[msgLen-2], msgBuff[msgLen-1]);
;;;645            return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;646        }
;;;647        
;;;648        switch(msgType)
;;;649        {
;;;650            case CARD_MESSAGE_TYPE_CN:
;;;651                targetType1 = 0x02;
;;;652                targetType2 = 0x01;
;;;653                break;
;;;654            case CARD_MESSAGE_TYPE_TIME:
;;;655                targetType1 = 0x01;
;;;656                targetType2 = 0x02;
;;;657                break;        
;;;658            case CARD_MESSAGE_TYPE_API_VER_NO:
;;;659                targetType1 = 0x01;
;;;660                targetType2 = 0x00;
;;;661                break;
;;;662            case CARD_MESSAGE_TYPE_READER_ID:
;;;663                targetType1 = 0x04;
;;;664                targetType2 = 0x01;
;;;665                break;
;;;666            
;;;667            default:
;;;668                return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;669        }
;;;670        
;;;671        
;;;672        if((msgBuff[1] != targetType1) || (msgBuff[2] != targetType2))
;;;673        {
;;;674            sysprintf("EPMReaderParserMessage(parser type:%d): type err [0x%02x, 0x%02x : 0x%02x, 0x%02x]\n", msgType, msgBuff[1], msgBuff[2], targetType1, targetType2);
;;;675            
;;;676            #if(ENABLE_SHOW_RETURN_DATA)
;;;677            {
;;;678                int i;
;;;679                sysprintf("\r\n--- Raw Data [%d] --->\r\n", msgLen);
;;;680                for(i = 0; i<msgLen; i++)
;;;681                {
;;;682                     sysprintf("0x%02x, ", msgBuff[i]);
;;;683                    if(i%10 == 9)
;;;684                        sysprintf("\r\n");
;;;685    
;;;686                }
;;;687                sysprintf("\r\n<--- Raw Data ---\r\n");   
;;;688            }   
;;;689            #endif
;;;690            return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;691        }
;;;692        dataLen = rxBuffer[4]|(rxBuffer[3]<<8);    
;;;693        //lrcValue = EPMReaderLRC(rxBuffer, 5, dataLen-1);  
;;;694        
;;;695        switch(msgType)
;;;696        {
;;;697            case CARD_MESSAGE_TYPE_API_VER_NO:   
;;;698                //--- IVN [13] --->
;;;699                //0x46, 0x52, 0x44, 0x20, 0x76, 0x31, 0x35, 0x31, 0x31, 0x30,
;;;700                //0x32, 0x30, 0x31, [FRD v15110201]
;;;701            
;;;702                //--- IVN [13] --->
;;;703                //0x50, 0x31, 0x4D, 0x20, 0x76, 0x31, 0x37, 0x30, 0x36, 0x31,
;;;704                //0x36, 0x30, 0x31,
;;;705                //IVN: [P1M v17061601]
;;;706                //<--- IVN ---
;;;707    
;;;708                //<--- IVN ---
;;;709    
;;;710                memset(verStr, 0x0, sizeof(verStr)); 
;;;711                if(dataLen == 1)
;;;712                {
;;;713                    sysprintf("readVN error: 0x%02x !!! \r\n", rxBuffer[5]);              
;;;714                    return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;715                }            
;;;716                else
;;;717                {
;;;718                    verStrLen = dataLen;
;;;719                    memcpy(verStr, rxBuffer+5, verStrLen);
;;;720                    #if(ENABLE_SHOW_RETURN_DATA)
;;;721                    sysprintf("\r\n--- VN [%d] --->\r\n", verStrLen);
;;;722                    for(int i = 0; i<verStrLen; i++)
;;;723                    {
;;;724                        //sysprintf(" [%03d] : 0x%02x \r\n", i, rxBuffer[5+i]);
;;;725                        sysprintf("0x%02x, ", verStr[i]);
;;;726                        if(i%10 == 9)
;;;727                            sysprintf("\r\n");
;;;728    
;;;729                    }
;;;730                    
;;;731                    sysprintf("\r\n<--- VN ---\r\n");
;;;732                    #endif
;;;733                   /* sysprintf("IVN: [");
;;;734                    terninalPrintf("IVN: [");
;;;735                    for(int i = 0; i<verStrLen; i++)
;;;736                    {
;;;737                        sysprintf("%c", verStr[i]);
;;;738                        terninalPrintf("%c", verStr[i]);
;;;739                    }
;;;740                    sysprintf("]");
;;;741                    terninalPrintf("]"); */
;;;742                }
;;;743    
;;;744                break;
;;;745            case CARD_MESSAGE_TYPE_READER_ID:   
;;;746                /*
;;;747                0xEA, 0x04, 0x01, 0x00, 0x07, 0x42, 0x1F, 0x7B, 0x5E, 0x90,
;;;748                0x00, 0xE8, 0x90, 0x00,
;;;749                
;;;750                --- Raw Data [14] --->
;;;751                0xEA, 0x04, 0x01, 0x00, 0x07, 0xDA, 0x0E, 0x7B, 0x5E, 0x90,
;;;752                0x00, 0x61, 0x90, 0x00,
;;;753                <--- Raw Data ---
;;;754    
;;;755                */
;;;756                memset(readerId, 0x0, sizeof(readerId));             
;;;757                if(dataLen == sizeof(readerId))
;;;758                {
;;;759                    memcpy(readerId, rxBuffer+5, dataLen);
;;;760                    #if(ENABLE_SHOW_RETURN_DATA)
;;;761                    sysprintf("\r\n--- READER ID [%d] --->\r\n", dataLen);
;;;762                    for(int i = 0; i<dataLen; i++)
;;;763                    {
;;;764                        //sysprintf(" [%03d] : 0x%02x \r\n", i, rxBuffer[5+i]);
;;;765                        sysprintf("0x%02x, ", readerId[i]);
;;;766                        if(i%10 == 9)
;;;767                            sysprintf("\r\n");
;;;768    
;;;769                    }
;;;770                    sysprintf("\r\n<--- READER ID ---\r\n");
;;;771                    #endif
;;;772                }
;;;773                else
;;;774                {
;;;775                    sysprintf("Read_ReaderId error: len = %d error !!! \r\n", dataLen);
;;;776                    return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;777                } 
;;;778                break;
;;;779                
;;;780            case CARD_MESSAGE_TYPE_CN:
;;;781                memset(cnData, 0x0, sizeof(cnData)); 
;;;782                cnLen = 0;
;;;783                if(dataLen == 1)
;;;784                {
;;;785                    switch(rxBuffer[5])
;;;786                    {         
;;;787                    case 1://Get fail 
;;;788                        break;
;;;789                    case 2://Multicard
;;;790                        break;
;;;791                    default://Other Fail
;;;792                        break;
;;;793                    }   
;;;794                    
;;;795                    *returnCode = rxBuffer[5];               
;;;796                    return CARD_MESSAGE_TYPE_CN_RETURN_LEN_1;
;;;797                }
;;;798                #warning need check here =7???
;;;799                else// if(dataLen == 7) 
;;;800                {
;;;801                    switch(rxBuffer[5])
;;;802                    {
;;;803                        case 1:
;;;804                            #if(ENABLE_CARD_READER_DRIVER) 
;;;805                            sysprintf("readCN: Card Type 107 [0x%02x]\r\n", rxBuffer[5]);
;;;806                            #endif
;;;807                            return CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE;
;;;808                        case 2:
;;;809                            #if(ENABLE_CARD_READER_DRIVER) 
;;;810                            sysprintf("readCN: Card Type 200 [0x%02x]\r\n", rxBuffer[5]);
;;;811                            #endif
;;;812                            return CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE;
;;;813                        case 3:
;;;814                            #if(ENABLE_CARD_READER_DRIVER) 
;;;815                            sysprintf("readCN: Card Type Far Eastern [0x%02x]\r\n", rxBuffer[5]);
;;;816                            #endif
;;;817                            return CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE;;
;;;818                        case 4:
;;;819                            #if(ENABLE_CARD_READER_DRIVER) 
;;;820                            sysprintf("readCN: Card Type Easy Card [0x%02x]\r\n", rxBuffer[5]);
;;;821                            #endif
;;;822    						currentCardType = CARD_TYPE_ID_ECC;
;;;823                            sysprintf("\r\n => readCN (ECC) : [0x%02x : 0x%02x : 0x%02x : 0x%02x] \r\n", rxBuffer[6], rxBuffer[7], rxBuffer[8], rxBuffer[9]);
;;;824                            memcpy(cnData, rxBuffer+6, rxBuffer[(msgLen-3)]);
;;;825                            cnLen = rxBuffer[(msgLen-3)];
;;;826                            #if(SUPPORT_ECC_CARD_READER)
;;;827                            break;
;;;828                            #else
;;;829                            return CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE;
;;;830                            #endif
;;;831                        case 5:
;;;832                            #if(ENABLE_CARD_READER_DRIVER) 
;;;833                            sysprintf("readCN: Card Type iPASS [0x%02x]\r\n", rxBuffer[5]);
;;;834                            #endif
;;;835    						currentCardType = CARD_TYPE_ID_IPASS;
;;;836                            //沒有LRC
;;;837                            sysprintf("\r\n => readCN (IPASS) : [0x%02x : 0x%02x : 0x%02x : 0x%02x] \r\n", rxBuffer[6], rxBuffer[7], rxBuffer[8], rxBuffer[9]);
;;;838                            memcpy(cnData, rxBuffer+6, rxBuffer[(msgLen-3)]); 
;;;839                            cnLen = rxBuffer[(msgLen-3)];
;;;840                            //return CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE;                
;;;841                            break;
;;;842                        default:
;;;843                            sysprintf("\r\n => readCN warning(Card Type Other !!!! [0x%02x]) : ", rxBuffer[5]);
;;;844                            {
;;;845                                int i, len;
;;;846                                len = rxBuffer[(msgLen-3)];
;;;847                                memcpy(cnData, rxBuffer+6, len); 
;;;848                                cnLen = rxBuffer[(msgLen-3)];
;;;849                                if(len != 0)
;;;850                                {
;;;851                                    sysprintf("\r\n [ ");
;;;852                                    for(i = 0; i<len; i++)
;;;853                                    {
;;;854                                        cnData[i]=rxBuffer[6+i];
;;;855                                        sysprintf("0x%02x ",cnData[i]);
;;;856                                    } 
;;;857                                    sysprintf("]\r\n");
;;;858                                }
;;;859                                
;;;860                            }
;;;861                            return CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE;//CARD_MESSAGE_TYPE_CN_RETURN_UNKNOWN_CARDTYPE;
;;;862                    }               
;;;863                }             
;;;864                break;
;;;865            case CARD_MESSAGE_TYPE_TIME:  
;;;866                 
;;;867                if(dataLen != 7)
;;;868                {
;;;869                    sysprintf("Read_TIME: dataLen %d error \r\n", dataLen);
;;;870                    return CARD_MESSAGE_RETURN_PARSER_ERROR;
;;;871                }
;;;872                //沒有LRC
;;;873                //sysprintf("=> dataTime(%d): year %d, Month %d, Day %d, Hour %d, Minute %d, Second %d\n", 
;;;874                //                rxBuffer[5], rxBuffer[6], rxBuffer[7], rxBuffer[8], rxBuffer[9], rxBuffer[10], rxBuffer[11]);
;;;875               
;;;876                unixTime.year  = rxBuffer[6] + 2000;
;;;877                unixTime.mon   = rxBuffer[7];
;;;878                unixTime.day   = rxBuffer[8];
;;;879                unixTime.hour  = rxBuffer[9];
;;;880                unixTime.min   = rxBuffer[10];
;;;881                unixTime.sec   = rxBuffer[11];//sCurTime.u32cSecond;
;;;882                
;;;883                sprintf(dataStr, "%04d%02d%02d", unixTime.year, unixTime.mon, unixTime.day);
;;;884                sprintf(timeStr, "%02d%02d%02d", unixTime.hour, unixTime.min, unixTime.sec);
;;;885    
;;;886                utcTime = sysDOS_Time_To_UTC(unixTime);
;;;887    
;;;888                dataTime[0]=(char)utcTime;
;;;889                dataTime[1]=(char)(utcTime>>8);
;;;890                dataTime[2]=(char)(utcTime>>16);
;;;891                dataTime[3]=(char)(utcTime>>24);
;;;892                sysprintf("\r\n => readTime (%d)[%s][%s] : [0x%02x : 0x%02x : 0x%02x : 0x%02x] \r\n", utcTime, dataStr, timeStr, dataTime[0], dataTime[1], dataTime[2], dataTime[3]);
;;;893                break;     
;;;894           
;;;895            default:
;;;896                break;
;;;897        }    
;;;898    
;;;899        return CARD_MESSAGE_RETURN_SUCCESS;
;;;900    }
000034  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.56|
000038  e3a000ff          MOV      r0,#0xff              ;622
00003c  e1cb00b0          STRH     r0,[r11,#0]           ;622
000040  e5d50000          LDRB     r0,[r5,#0]            ;637
000044  e35000ea          CMP      r0,#0xea              ;637
000048  0a000005          BEQ      |L1.100|
00004c  e5d52000          LDRB     r2,[r5,#0]            ;639
000050  e1a0100a          MOV      r1,r10                ;639
000054  e59f02c4          LDR      r0,|L1.800|
000058  ebfffffe          BL       sysprintf
00005c  e3a00003          MOV      r0,#3                 ;640
000060  eafffff2          B        |L1.48|
                  |L1.100|
000064  e2440002          SUB      r0,r4,#2              ;642
000068  e7d50000          LDRB     r0,[r5,r0]            ;642
00006c  e3500090          CMP      r0,#0x90              ;642
000070  1a000003          BNE      |L1.132|
000074  e2440001          SUB      r0,r4,#1              ;642
000078  e7d50000          LDRB     r0,[r5,r0]            ;642
00007c  e3500000          CMP      r0,#0                 ;642
000080  0a000008          BEQ      |L1.168|
                  |L1.132|
000084  e2440001          SUB      r0,r4,#1              ;644
000088  e7d53000          LDRB     r3,[r5,r0]            ;644
00008c  e2440002          SUB      r0,r4,#2              ;644
000090  e7d52000          LDRB     r2,[r5,r0]            ;644
000094  e1a0100a          MOV      r1,r10                ;644
000098  e59f0284          LDR      r0,|L1.804|
00009c  ebfffffe          BL       sysprintf
0000a0  e3a00003          MOV      r0,#3                 ;645
0000a4  eaffffe1          B        |L1.48|
                  |L1.168|
0000a8  e35a0001          CMP      r10,#1                ;648
0000ac  0a000006          BEQ      |L1.204|
0000b0  e35a0002          CMP      r10,#2                ;648
0000b4  0a000008          BEQ      |L1.220|
0000b8  e35a0003          CMP      r10,#3                ;648
0000bc  0a00000a          BEQ      |L1.236|
0000c0  e35a0004          CMP      r10,#4                ;648
0000c4  1a000010          BNE      |L1.268|
0000c8  ea00000b          B        |L1.252|
                  |L1.204|
0000cc  e1a00000          MOV      r0,r0                 ;650
0000d0  e3a07002          MOV      r7,#2                 ;651
0000d4  e3a08001          MOV      r8,#1                 ;652
0000d8  ea00000e          B        |L1.280|
                  |L1.220|
0000dc  e1a00000          MOV      r0,r0                 ;654
0000e0  e3a07001          MOV      r7,#1                 ;655
0000e4  e3a08002          MOV      r8,#2                 ;656
0000e8  ea00000a          B        |L1.280|
                  |L1.236|
0000ec  e1a00000          MOV      r0,r0                 ;658
0000f0  e3a07001          MOV      r7,#1                 ;659
0000f4  e3a08000          MOV      r8,#0                 ;660
0000f8  ea000006          B        |L1.280|
                  |L1.252|
0000fc  e1a00000          MOV      r0,r0                 ;662
000100  e3a07004          MOV      r7,#4                 ;663
000104  e3a08001          MOV      r8,#1                 ;664
000108  ea000002          B        |L1.280|
                  |L1.268|
00010c  e1a00000          MOV      r0,r0                 ;667
000110  e3a00003          MOV      r0,#3                 ;668
000114  eaffffc5          B        |L1.48|
                  |L1.280|
000118  e1a00000          MOV      r0,r0                 ;653
00011c  e5d50001          LDRB     r0,[r5,#1]            ;672
000120  e1500007          CMP      r0,r7                 ;672
000124  1a000002          BNE      |L1.308|
000128  e5d50002          LDRB     r0,[r5,#2]            ;672
00012c  e1500008          CMP      r0,r8                 ;672
000130  0a00001b          BEQ      |L1.420|
                  |L1.308|
000134  e88d0180          STM      sp,{r7,r8}            ;674
000138  e5d53002          LDRB     r3,[r5,#2]            ;674
00013c  e5d52001          LDRB     r2,[r5,#1]            ;674
000140  e1a0100a          MOV      r1,r10                ;674
000144  e59f01dc          LDR      r0,|L1.808|
000148  ebfffffe          BL       sysprintf
00014c  e1a01004          MOV      r1,r4                 ;679
000150  e28f0f75          ADR      r0,|L1.812|
000154  ebfffffe          BL       sysprintf
000158  e3a09000          MOV      r9,#0                 ;680
00015c  ea00000a          B        |L1.396|
                  |L1.352|
000160  e7d51009          LDRB     r1,[r5,r9]            ;682
000164  e28f0f77          ADR      r0,|L1.840|
000168  ebfffffe          BL       sysprintf
00016c  e3a0100a          MOV      r1,#0xa               ;683
000170  e1a00009          MOV      r0,r9                 ;683
000174  ebfffffe          BL       __aeabi_idivmod
000178  e3510009          CMP      r1,#9                 ;683
00017c  1a000001          BNE      |L1.392|
000180  e28f0f6f          ADR      r0,|L1.836|
000184  ebfffffe          BL       sysprintf
                  |L1.392|
000188  e2899001          ADD      r9,r9,#1              ;680
                  |L1.396|
00018c  e1590004          CMP      r9,r4                 ;680
000190  bafffff2          BLT      |L1.352|
000194  e28f0f6e          ADR      r0,|L1.852|
000198  ebfffffe          BL       sysprintf
00019c  e3a00003          MOV      r0,#3                 ;690
0001a0  eaffffa2          B        |L1.48|
                  |L1.420|
0001a4  e59f01c0          LDR      r0,|L1.876|
0001a8  e5d00004          LDRB     r0,[r0,#4]            ;692  ; rxBuffer
0001ac  e59f11b8          LDR      r1,|L1.876|
0001b0  e5d11003          LDRB     r1,[r1,#3]            ;692  ; rxBuffer
0001b4  e1806401          ORR      r6,r0,r1,LSL #8       ;692
0001b8  e35a0001          CMP      r10,#1                ;695
0001bc  0a000099          BEQ      |L1.1064|
0001c0  e35a0002          CMP      r10,#2                ;695
0001c4  0a00018d          BEQ      |L1.2048|
0001c8  e35a0003          CMP      r10,#3                ;695
0001cc  0a000002          BEQ      |L1.476|
0001d0  e35a0004          CMP      r10,#4                ;695
0001d4  1a0001e4          BNE      |L1.2412|
0001d8  ea00002a          B        |L1.648|
                  |L1.476|
0001dc  e1a00000          MOV      r0,r0                 ;697
0001e0  e3a01040          MOV      r1,#0x40              ;710
0001e4  e59f0184          LDR      r0,|L1.880|
0001e8  ebfffffe          BL       __aeabi_memclr
0001ec  e3560001          CMP      r6,#1                 ;711
0001f0  1a000005          BNE      |L1.524|
0001f4  e59f0170          LDR      r0,|L1.876|
0001f8  e5d01005          LDRB     r1,[r0,#5]            ;713  ; rxBuffer
0001fc  e28f0e17          ADR      r0,|L1.884|
000200  ebfffffe          BL       sysprintf
000204  e3a00003          MOV      r0,#3                 ;714
000208  eaffff88          B        |L1.48|
                  |L1.524|
00020c  e59f017c          LDR      r0,|L1.912|
000210  e5806000          STR      r6,[r0,#0]            ;718  ; verStrLen
000214  e59f1178          LDR      r1,|L1.916|
000218  e5902000          LDR      r2,[r0,#0]            ;719  ; verStrLen
00021c  e59f014c          LDR      r0,|L1.880|
000220  ebfffffe          BL       __aeabi_memcpy
000224  e59f0164          LDR      r0,|L1.912|
000228  e5901000          LDR      r1,[r0,#0]            ;721  ; verStrLen
00022c  e28f0f59          ADR      r0,|L1.920|
000230  ebfffffe          BL       sysprintf
000234  e3a09000          MOV      r9,#0                 ;722
000238  ea00000b          B        |L1.620|
                  |L1.572|
00023c  e59f012c          LDR      r0,|L1.880|
000240  e7d01009          LDRB     r1,[r0,r9]            ;725
000244  e28f00fc          ADR      r0,|L1.840|
000248  ebfffffe          BL       sysprintf
00024c  e3a0100a          MOV      r1,#0xa               ;726
000250  e1a00009          MOV      r0,r9                 ;726
000254  ebfffffe          BL       __aeabi_idivmod
000258  e3510009          CMP      r1,#9                 ;726
00025c  1a000001          BNE      |L1.616|
000260  e28f00dc          ADR      r0,|L1.836|
000264  ebfffffe          BL       sysprintf
                  |L1.616|
000268  e2899001          ADD      r9,r9,#1              ;722
                  |L1.620|
00026c  e59f011c          LDR      r0,|L1.912|
000270  e5900000          LDR      r0,[r0,#0]            ;722  ; verStrLen
000274  e1590000          CMP      r9,r0                 ;722
000278  baffffef          BLT      |L1.572|
00027c  e28f0f4b          ADR      r0,|L1.944|
000280  ebfffffe          BL       sysprintf
000284  ea0001ba          B        |L1.2420|
                  |L1.648|
000288  e1a00000          MOV      r0,r0                 ;745
00028c  e3a01007          MOV      r1,#7                 ;756
000290  e59f0128          LDR      r0,|L1.960|
000294  ebfffffe          BL       __aeabi_memclr4
000298  e3560007          CMP      r6,#7                 ;757
00029c  1a000019          BNE      |L1.776|
0002a0  e1a02006          MOV      r2,r6                 ;759
0002a4  e59f10e8          LDR      r1,|L1.916|
0002a8  e59f0110          LDR      r0,|L1.960|
0002ac  ebfffffe          BL       __aeabi_memcpy
0002b0  e1a01006          MOV      r1,r6                 ;761
0002b4  e28f0f42          ADR      r0,|L1.964|
0002b8  ebfffffe          BL       sysprintf
0002bc  e3a09000          MOV      r9,#0                 ;762
0002c0  ea00000b          B        |L1.756|
                  |L1.708|
0002c4  e59f00f4          LDR      r0,|L1.960|
0002c8  e7d01009          LDRB     r1,[r0,r9]            ;765
0002cc  e28f0074          ADR      r0,|L1.840|
0002d0  ebfffffe          BL       sysprintf
0002d4  e3a0100a          MOV      r1,#0xa               ;766
0002d8  e1a00009          MOV      r0,r9                 ;766
0002dc  ebfffffe          BL       __aeabi_idivmod
0002e0  e3510009          CMP      r1,#9                 ;766
0002e4  1a000001          BNE      |L1.752|
0002e8  e28f0054          ADR      r0,|L1.836|
0002ec  ebfffffe          BL       sysprintf
                  |L1.752|
0002f0  e2899001          ADD      r9,r9,#1              ;762
                  |L1.756|
0002f4  e1590006          CMP      r9,r6                 ;762
0002f8  bafffff1          BLT      |L1.708|
0002fc  e28f00dc          ADR      r0,|L1.992|
000300  ebfffffe          BL       sysprintf
000304  ea000046          B        |L1.1060|
                  |L1.776|
000308  e1a01006          MOV      r1,r6                 ;775
00030c  e28f00e4          ADR      r0,|L1.1016|
000310  ebfffffe          BL       sysprintf
000314  e3a00003          MOV      r0,#3                 ;776
000318  eaffff44          B        |L1.48|
                  |L1.796|
                          DCD      ||.constdata||
                  |L1.800|
                          DCD      ||.constdata||+0x50
                  |L1.804|
                          DCD      ||.constdata||+0x94
                  |L1.808|
                          DCD      ||.constdata||+0xdc
                  |L1.812|
00032c  0d0a2d2d          DCB      "\r\n--- Raw Data [%d] --->"
000330  2d205261
000334  77204461
000338  7461205b
00033c  25645d20
000340  2d2d2d3e
                  |L1.836|
000344  0d0a00            DCB      "\r\n",0
000347  00                DCB      0
                  |L1.840|
000348  30782530          DCB      "0x%02x, ",0
00034c  32782c20
000350  00      
000351  00                DCB      0
000352  00                DCB      0
000353  00                DCB      0
                  |L1.852|
000354  0d0a3c2d          DCB      "\r\n<--- Raw Data ---\r\n",0
000358  2d2d2052
00035c  61772044
000360  61746120
000364  2d2d2d0d
000368  0a00    
00036a  00                DCB      0
00036b  00                DCB      0
                  |L1.876|
                          DCD      rxBuffer
                  |L1.880|
                          DCD      verStr
                  |L1.884|
000374  72656164          DCB      "readVN error: 0x%02x !!! \r\n",0
000378  564e2065
00037c  72726f72
000380  3a203078
000384  25303278
000388  20212121
00038c  200d0a00
                  |L1.912|
                          DCD      verStrLen
                  |L1.916|
                          DCD      rxBuffer+0x5
                  |L1.920|
000398  0d0a2d2d          DCB      "\r\n--- VN [%d] --->\r\n",0
00039c  2d20564e
0003a0  205b2564
0003a4  5d202d2d
0003a8  2d3e0d0a
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L1.944|
0003b0  0d0a3c2d          DCB      "\r\n<--- VN ---\r\n",0
0003b4  2d2d2056
0003b8  4e202d2d
0003bc  2d0d0a00
                  |L1.960|
                          DCD      readerId
                  |L1.964|
0003c4  0d0a2d2d          DCB      "\r\n--- READER ID [%d] --->\r\n",0
0003c8  2d205245
0003cc  41444552
0003d0  20494420
0003d4  5b25645d
0003d8  202d2d2d
0003dc  3e0d0a00
                  |L1.992|
0003e0  0d0a3c2d          DCB      "\r\n<--- READER ID ---\r\n",0
0003e4  2d2d2052
0003e8  45414445
0003ec  52204944
0003f0  202d2d2d
0003f4  0d0a00  
0003f7  00                DCB      0
                  |L1.1016|
0003f8  52656164          DCB      "Read_ReaderId error: len = %d error !!! \r\n",0
0003fc  5f526561
000400  64657249
000404  64206572
000408  726f723a
00040c  206c656e
000410  203d2025
000414  64206572
000418  726f7220
00041c  21212120
000420  0d0a00  
000423  00                DCB      0
                  |L1.1060|
000424  ea000152          B        |L1.2420|
                  |L1.1064|
000428  e1a00000          MOV      r0,r0                 ;780
00042c  e59f01d4          LDR      r0,|L1.1544|
000430  e3a01000          MOV      r1,#0                 ;781
000434  e5801000          STR      r1,[r0,#0]            ;781  ; cnData
000438  e5801004          STR      r1,[r0,#4]            ;781  ; cnData
00043c  e3a00000          MOV      r0,#0                 ;782
000440  e59f11c4          LDR      r1,|L1.1548|
000444  e5c10000          STRB     r0,[r1,#0]            ;782  ; cnLen
000448  e3560001          CMP      r6,#1                 ;783
00044c  1a000012          BNE      |L1.1180|
000450  e51f00ec          LDR      r0,|L1.876|
000454  e5d00005          LDRB     r0,[r0,#5]            ;785  ; rxBuffer
000458  e3500001          CMP      r0,#1                 ;785
00045c  0a000002          BEQ      |L1.1132|
000460  e3500002          CMP      r0,#2                 ;785
000464  1a000004          BNE      |L1.1148|
000468  ea000001          B        |L1.1140|
                  |L1.1132|
00046c  e1a00000          MOV      r0,r0                 ;787
000470  ea000003          B        |L1.1156|
                  |L1.1140|
000474  e1a00000          MOV      r0,r0                 ;789
000478  ea000001          B        |L1.1156|
                  |L1.1148|
00047c  e1a00000          MOV      r0,r0                 ;791
000480  e1a00000          MOV      r0,r0                 ;792
                  |L1.1156|
000484  e1a00000          MOV      r0,r0                 ;788
000488  e51f0124          LDR      r0,|L1.876|
00048c  e5d00005          LDRB     r0,[r0,#5]            ;795  ; rxBuffer
000490  e1cb00b0          STRH     r0,[r11,#0]           ;795
000494  e3a00011          MOV      r0,#0x11              ;796
000498  eafffee4          B        |L1.48|
                  |L1.1180|
00049c  e51f0138          LDR      r0,|L1.876|
0004a0  e5d00005          LDRB     r0,[r0,#5]            ;801  ; rxBuffer
0004a4  e3500006          CMP      r0,#6                 ;801
0004a8  308ff100          ADDCC    pc,pc,r0,LSL #2       ;801
0004ac  ea0000a7          B        |L1.1872|
0004b0  ea0000a6          B        |L1.1872|
0004b4  ea000003          B        |L1.1224|
0004b8  ea000009          B        |L1.1252|
0004bc  ea00000f          B        |L1.1280|
0004c0  ea000015          B        |L1.1308|
0004c4  ea000032          B        |L1.1428|
                  |L1.1224|
0004c8  e1a00000          MOV      r0,r0                 ;803
0004cc  e51f0168          LDR      r0,|L1.876|
0004d0  e5d01005          LDRB     r1,[r0,#5]            ;805  ; rxBuffer
0004d4  e28f0f4d          ADR      r0,|L1.1552|
0004d8  ebfffffe          BL       sysprintf
0004dc  e3a00012          MOV      r0,#0x12              ;807
0004e0  eafffed2          B        |L1.48|
                  |L1.1252|
0004e4  e1a00000          MOV      r0,r0                 ;808
0004e8  e51f0184          LDR      r0,|L1.876|
0004ec  e5d01005          LDRB     r1,[r0,#5]            ;810  ; rxBuffer
0004f0  e28f0f4f          ADR      r0,|L1.1588|
0004f4  ebfffffe          BL       sysprintf
0004f8  e3a00012          MOV      r0,#0x12              ;812
0004fc  eafffecb          B        |L1.48|
                  |L1.1280|
000500  e1a00000          MOV      r0,r0                 ;813
000504  e51f01a0          LDR      r0,|L1.876|
000508  e5d01005          LDRB     r1,[r0,#5]            ;815  ; rxBuffer
00050c  e28f0f51          ADR      r0,|L1.1624|
000510  ebfffffe          BL       sysprintf
000514  e3a00012          MOV      r0,#0x12              ;817
000518  eafffec4          B        |L1.48|
                  |L1.1308|
00051c  e1a00000          MOV      r0,r0                 ;818
000520  e51f01bc          LDR      r0,|L1.876|
000524  e5d01005          LDRB     r1,[r0,#5]            ;820  ; rxBuffer
000528  e28f0f55          ADR      r0,|L1.1668|
00052c  ebfffffe          BL       sysprintf
000530  e3a00002          MOV      r0,#2                 ;822
000534  e59f1170          LDR      r1,|L1.1708|
000538  e5c10000          STRB     r0,[r1,#0]            ;822  ; currentCardType
00053c  e51f01d8          LDR      r0,|L1.876|
000540  e5d00009          LDRB     r0,[r0,#9]            ;823  ; rxBuffer
000544  e58d0000          STR      r0,[sp,#0]            ;823
000548  e51f01e4          LDR      r0,|L1.876|
00054c  e5d03008          LDRB     r3,[r0,#8]            ;823  ; rxBuffer
000550  e5d02007          LDRB     r2,[r0,#7]            ;823  ; rxBuffer
000554  e5d01006          LDRB     r1,[r0,#6]            ;823  ; rxBuffer
000558  e28f0e15          ADR      r0,|L1.1712|
00055c  ebfffffe          BL       sysprintf
000560  e2440003          SUB      r0,r4,#3              ;824
000564  e51f1200          LDR      r1,|L1.876|
000568  e7d12000          LDRB     r2,[r1,r0]            ;824
00056c  e2811006          ADD      r1,r1,#6              ;824
000570  e59f0090          LDR      r0,|L1.1544|
000574  ebfffffe          BL       __aeabi_memcpy
000578  e2440003          SUB      r0,r4,#3              ;825
00057c  e51f1218          LDR      r1,|L1.876|
000580  e7d10000          LDRB     r0,[r1,r0]            ;825
000584  e59f1080          LDR      r1,|L1.1548|
000588  e5c10000          STRB     r0,[r1,#0]            ;825  ; cnLen
00058c  e3a00012          MOV      r0,#0x12              ;829
000590  eafffea6          B        |L1.48|
                  |L1.1428|
000594  e1a00000          MOV      r0,r0                 ;831
000598  e51f0234          LDR      r0,|L1.876|
00059c  e5d01005          LDRB     r1,[r0,#5]            ;833  ; rxBuffer
0005a0  e28f0f51          ADR      r0,|L1.1772|
0005a4  ebfffffe          BL       sysprintf
0005a8  e3a00001          MOV      r0,#1                 ;835
0005ac  e59f10f8          LDR      r1,|L1.1708|
0005b0  e5c10000          STRB     r0,[r1,#0]            ;835  ; currentCardType
0005b4  e51f0250          LDR      r0,|L1.876|
0005b8  e5d00009          LDRB     r0,[r0,#9]            ;837  ; rxBuffer
0005bc  e58d0000          STR      r0,[sp,#0]            ;837
0005c0  e51f025c          LDR      r0,|L1.876|
0005c4  e5d03008          LDRB     r3,[r0,#8]            ;837  ; rxBuffer
0005c8  e5d02007          LDRB     r2,[r0,#7]            ;837  ; rxBuffer
0005cc  e5d01006          LDRB     r1,[r0,#6]            ;837  ; rxBuffer
0005d0  e28f0f4e          ADR      r0,|L1.1808|
0005d4  ebfffffe          BL       sysprintf
0005d8  e2440003          SUB      r0,r4,#3              ;838
0005dc  e51f1278          LDR      r1,|L1.876|
0005e0  e7d12000          LDRB     r2,[r1,r0]            ;838
0005e4  e2811006          ADD      r1,r1,#6              ;838
0005e8  e59f0018          LDR      r0,|L1.1544|
0005ec  ebfffffe          BL       __aeabi_memcpy
0005f0  e2440003          SUB      r0,r4,#3              ;839
0005f4  e51f1290          LDR      r1,|L1.876|
0005f8  e7d10000          LDRB     r0,[r1,r0]            ;839
0005fc  e59f1008          LDR      r1,|L1.1548|
000600  e5c10000          STRB     r0,[r1,#0]            ;839  ; cnLen
000604  ea00007b          B        |L1.2040|
                  |L1.1544|
                          DCD      cnData
                  |L1.1548|
                          DCD      cnLen
                  |L1.1552|
000610  72656164          DCB      "readCN: Card Type 107 [0x%02x]\r\n",0
000614  434e3a20
000618  43617264
00061c  20547970
000620  65203130
000624  37205b30
000628  78253032
00062c  785d0d0a
000630  00      
000631  00                DCB      0
000632  00                DCB      0
000633  00                DCB      0
                  |L1.1588|
000634  72656164          DCB      "readCN: Card Type 200 [0x%02x]\r\n",0
000638  434e3a20
00063c  43617264
000640  20547970
000644  65203230
000648  30205b30
00064c  78253032
000650  785d0d0a
000654  00      
000655  00                DCB      0
000656  00                DCB      0
000657  00                DCB      0
                  |L1.1624|
000658  72656164          DCB      "readCN: Card Type Far Eastern [0x%02x]\r\n",0
00065c  434e3a20
000660  43617264
000664  20547970
000668  65204661
00066c  72204561
000670  73746572
000674  6e205b30
000678  78253032
00067c  785d0d0a
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  72656164          DCB      "readCN: Card Type Easy Card [0x%02x]\r\n",0
000688  434e3a20
00068c  43617264
000690  20547970
000694  65204561
000698  73792043
00069c  61726420
0006a0  5b307825
0006a4  3032785d
0006a8  0d0a00  
0006ab  00                DCB      0
                  |L1.1708|
                          DCD      currentCardType
                  |L1.1712|
0006b0  0d0a203d          DCB      "\r\n => readCN (ECC) : [0x%02x : 0x%02x : 0x%02x : 0x%0"
0006b4  3e207265
0006b8  6164434e
0006bc  20284543
0006c0  4329203a
0006c4  205b3078
0006c8  25303278
0006cc  203a2030
0006d0  78253032
0006d4  78203a20
0006d8  30782530
0006dc  3278203a
0006e0  20307825
0006e4  30      
0006e5  32785d20          DCB      "2x] \r\n",0
0006e9  0d0a00  
                  |L1.1772|
0006ec  72656164          DCB      "readCN: Card Type iPASS [0x%02x]\r\n",0
0006f0  434e3a20
0006f4  43617264
0006f8  20547970
0006fc  65206950
000700  41535320
000704  5b307825
000708  3032785d
00070c  0d0a00  
00070f  00                DCB      0
                  |L1.1808|
000710  0d0a203d          DCB      "\r\n => readCN (IPASS) : [0x%02x : 0x%02x : 0x%02x : 0x"
000714  3e207265
000718  6164434e
00071c  20284950
000720  41535329
000724  203a205b
000728  30782530
00072c  3278203a
000730  20307825
000734  30327820
000738  3a203078
00073c  25303278
000740  203a2030
000744  78      
000745  25303278          DCB      "%02x] \r\n",0
000749  5d200d0a
00074d  00      
00074e  00                DCB      0
00074f  00                DCB      0
                  |L1.1872|
000750  e1a00000          MOV      r0,r0                 ;842
000754  e51f03f0          LDR      r0,|L1.876|
000758  e5d01005          LDRB     r1,[r0,#5]            ;843  ; rxBuffer
00075c  e28f0f87          ADR      r0,|L1.2432|
000760  ebfffffe          BL       sysprintf
000764  e2440003          SUB      r0,r4,#3              ;846
000768  e51f1404          LDR      r1,|L1.876|
00076c  e7d10000          LDRB     r0,[r1,r0]            ;846
000770  e58d000c          STR      r0,[sp,#0xc]          ;846
000774  e2811006          ADD      r1,r1,#6              ;847
000778  e51f0178          LDR      r0,|L1.1544|
00077c  e59d200c          LDR      r2,[sp,#0xc]          ;847
000780  ebfffffe          BL       __aeabi_memcpy
000784  e2440003          SUB      r0,r4,#3              ;848
000788  e51f1424          LDR      r1,|L1.876|
00078c  e7d10000          LDRB     r0,[r1,r0]            ;848
000790  e51f118c          LDR      r1,|L1.1548|
000794  e5c10000          STRB     r0,[r1,#0]            ;848  ; cnLen
000798  e59d000c          LDR      r0,[sp,#0xc]          ;849
00079c  e3500000          CMP      r0,#0                 ;849
0007a0  0a000012          BEQ      |L1.2032|
0007a4  e28f0f83          ADR      r0,|L1.2488|
0007a8  ebfffffe          BL       sysprintf
0007ac  e3a09000          MOV      r9,#0                 ;852
0007b0  ea000009          B        |L1.2012|
                  |L1.1972|
0007b4  e2891006          ADD      r1,r9,#6              ;854
0007b8  e51f0454          LDR      r0,|L1.876|
0007bc  e7d00001          LDRB     r0,[r0,r1]            ;854
0007c0  e51f11c0          LDR      r1,|L1.1544|
0007c4  e7c10009          STRB     r0,[r1,r9]            ;854
0007c8  e2810000          ADD      r0,r1,#0              ;855
0007cc  e7d01009          LDRB     r1,[r0,r9]            ;855
0007d0  e28f0f7a          ADR      r0,|L1.2496|
0007d4  ebfffffe          BL       sysprintf
0007d8  e2899001          ADD      r9,r9,#1              ;852
                  |L1.2012|
0007dc  e59d000c          LDR      r0,[sp,#0xc]          ;852
0007e0  e1590000          CMP      r9,r0                 ;852
0007e4  bafffff2          BLT      |L1.1972|
0007e8  e28f0f76          ADR      r0,|L1.2504|
0007ec  ebfffffe          BL       sysprintf
                  |L1.2032|
0007f0  e3a00012          MOV      r0,#0x12              ;861
0007f4  eafffe0d          B        |L1.48|
                  |L1.2040|
0007f8  e1a00000          MOV      r0,r0                 ;841
0007fc  ea00005c          B        |L1.2420|
                  |L1.2048|
000800  e1a00000          MOV      r0,r0                 ;865
000804  e3560007          CMP      r6,#7                 ;867
000808  0a000004          BEQ      |L1.2080|
00080c  e1a01006          MOV      r1,r6                 ;869
000810  e28f0f6d          ADR      r0,|L1.2508|
000814  ebfffffe          BL       sysprintf
000818  e3a00003          MOV      r0,#3                 ;870
00081c  eafffe03          B        |L1.48|
                  |L1.2080|
000820  e51f04bc          LDR      r0,|L1.876|
000824  e5d00006          LDRB     r0,[r0,#6]            ;876  ; rxBuffer
000828  e2800e7d          ADD      r0,r0,#0x7d0          ;876
00082c  e59f11b8          LDR      r1,|L1.2540|
000830  e5810000          STR      r0,[r1,#0]            ;876  ; unixTime
000834  e51f04d0          LDR      r0,|L1.876|
000838  e5d00007          LDRB     r0,[r0,#7]            ;877  ; rxBuffer
00083c  e5810004          STR      r0,[r1,#4]            ;877  ; unixTime
000840  e51f04dc          LDR      r0,|L1.876|
000844  e5d00008          LDRB     r0,[r0,#8]            ;878  ; rxBuffer
000848  e5810008          STR      r0,[r1,#8]            ;878  ; unixTime
00084c  e51f04e8          LDR      r0,|L1.876|
000850  e5d00009          LDRB     r0,[r0,#9]            ;879  ; rxBuffer
000854  e581000c          STR      r0,[r1,#0xc]          ;879  ; unixTime
000858  e51f04f4          LDR      r0,|L1.876|
00085c  e5d0000a          LDRB     r0,[r0,#0xa]          ;880  ; rxBuffer
000860  e5810010          STR      r0,[r1,#0x10]         ;880  ; unixTime
000864  e51f0500          LDR      r0,|L1.876|
000868  e5d0000b          LDRB     r0,[r0,#0xb]          ;881  ; rxBuffer
00086c  e5810014          STR      r0,[r1,#0x14]         ;881  ; unixTime
000870  e2810000          ADD      r0,r1,#0              ;883
000874  e5900008          LDR      r0,[r0,#8]            ;883  ; unixTime
000878  e58d0000          STR      r0,[sp,#0]            ;883
00087c  e2810000          ADD      r0,r1,#0              ;883
000880  e5903004          LDR      r3,[r0,#4]            ;883  ; unixTime
000884  e28f1f59          ADR      r1,|L1.2544|
000888  e5902000          LDR      r2,[r0,#0]            ;883  ; unixTime
00088c  e59f016c          LDR      r0,|L1.2560|
000890  ebfffffe          BL       __2sprintf
000894  e59f0150          LDR      r0,|L1.2540|
000898  e5900014          LDR      r0,[r0,#0x14]         ;884  ; unixTime
00089c  e58d0000          STR      r0,[sp,#0]            ;884
0008a0  e59f0144          LDR      r0,|L1.2540|
0008a4  e5903010          LDR      r3,[r0,#0x10]         ;884  ; unixTime
0008a8  e28f1f55          ADR      r1,|L1.2564|
0008ac  e590200c          LDR      r2,[r0,#0xc]          ;884  ; unixTime
0008b0  e59f015c          LDR      r0,|L1.2580|
0008b4  ebfffffe          BL       __2sprintf
0008b8  e59f112c          LDR      r1,|L1.2540|
0008bc  e5910010          LDR      r0,[r1,#0x10]         ;886  ; unixTime, unixTime
0008c0  e5911014          LDR      r1,[r1,#0x14]         ;886
0008c4  e1cd00f0          STRD     r0,r1,[sp,#0]         ;886
0008c8  e59f011c          LDR      r0,|L1.2540|
0008cc  e890000f          LDM      r0,{r0-r3}            ;886  ; unixTime, unixTime, unixTime, unixTime
0008d0  ebfffffe          BL       sysDOS_Time_To_UTC
0008d4  e59f113c          LDR      r1,|L1.2584|
0008d8  e5810000          STR      r0,[r1,#0]            ;886  ; utcTime
0008dc  e2810000          ADD      r0,r1,#0              ;888
0008e0  e5d00000          LDRB     r0,[r0,#0]            ;888  ; utcTime
0008e4  e59f1130          LDR      r1,|L1.2588|
0008e8  e5c10000          STRB     r0,[r1,#0]            ;888  ; dataTime
0008ec  e59f0124          LDR      r0,|L1.2584|
0008f0  e1d000b0          LDRH     r0,[r0,#0]            ;889  ; utcTime
0008f4  e1a00800          LSL      r0,r0,#16             ;889
0008f8  e1a00c20          LSR      r0,r0,#24             ;889
0008fc  e5c10001          STRB     r0,[r1,#1]            ;889  ; dataTime
000900  e59f0110          LDR      r0,|L1.2584|
000904  e5900000          LDR      r0,[r0,#0]            ;890  ; utcTime
000908  e1a00400          LSL      r0,r0,#8              ;890
00090c  e1a00c20          LSR      r0,r0,#24             ;890
000910  e5c10002          STRB     r0,[r1,#2]            ;890  ; dataTime
000914  e59f00fc          LDR      r0,|L1.2584|
000918  e5900000          LDR      r0,[r0,#0]            ;891  ; utcTime
00091c  e1a00c20          LSR      r0,r0,#24             ;891
000920  e5c10003          STRB     r0,[r1,#3]            ;891  ; dataTime
000924  e2810000          ADD      r0,r1,#0              ;892
000928  e5d00003          LDRB     r0,[r0,#3]            ;892  ; dataTime
00092c  e5d11002          LDRB     r1,[r1,#2]            ;892  ; dataTime
000930  e59f20e4          LDR      r2,|L1.2588|
000934  e5d22001          LDRB     r2,[r2,#1]            ;892  ; dataTime
000938  e59f30dc          LDR      r3,|L1.2588|
00093c  e5d33000          LDRB     r3,[r3,#0]            ;892  ; dataTime
000940  e58d3000          STR      r3,[sp,#0]            ;892
000944  e59f30c8          LDR      r3,|L1.2580|
000948  e58d2004          STR      r2,[sp,#4]            ;892
00094c  e59f20ac          LDR      r2,|L1.2560|
000950  e58d000c          STR      r0,[sp,#0xc]          ;892
000954  e59f00bc          LDR      r0,|L1.2584|
000958  e58d1008          STR      r1,[sp,#8]            ;892
00095c  e5901000          LDR      r1,[r0,#0]            ;892  ; utcTime
000960  e59f00b8          LDR      r0,|L1.2592|
000964  ebfffffe          BL       sysprintf
000968  ea000001          B        |L1.2420|
                  |L1.2412|
00096c  e1a00000          MOV      r0,r0                 ;895
000970  e1a00000          MOV      r0,r0                 ;896
                  |L1.2420|
000974  e1a00000          MOV      r0,r0                 ;744
000978  e3a00002          MOV      r0,#2                 ;899
00097c  eafffdab          B        |L1.48|
                  |L1.2432|
000980  0d0a203d          DCB      "\r\n => readCN warning(Card Type Other !!!! [0x%02x]) :"
000984  3e207265
000988  6164434e
00098c  20776172
000990  6e696e67
000994  28436172
000998  64205479
00099c  7065204f
0009a0  74686572
0009a4  20212121
0009a8  21205b30
0009ac  78253032
0009b0  785d2920
0009b4  3a      
0009b5  2000              DCB      " ",0
0009b7  00                DCB      0
                  |L1.2488|
0009b8  0d0a205b          DCB      "\r\n [ ",0
0009bc  2000    
0009be  00                DCB      0
0009bf  00                DCB      0
                  |L1.2496|
0009c0  30782530          DCB      "0x%02x ",0
0009c4  32782000
                  |L1.2504|
0009c8  5d0d0a00          DCB      "]\r\n",0
                  |L1.2508|
0009cc  52656164          DCB      "Read_TIME: dataLen %d error \r\n",0
0009d0  5f54494d
0009d4  453a2064
0009d8  6174614c
0009dc  656e2025
0009e0  64206572
0009e4  726f7220
0009e8  0d0a00  
0009eb  00                DCB      0
                  |L1.2540|
                          DCD      unixTime
                  |L1.2544|
0009f0  25303464          DCB      "%04d%02d%02d",0
0009f4  25303264
0009f8  25303264
0009fc  00      
0009fd  00                DCB      0
0009fe  00                DCB      0
0009ff  00                DCB      0
                  |L1.2560|
                          DCD      dataStr
                  |L1.2564|
000a04  25303264          DCB      "%02d%02d%02d",0
000a08  25303264
000a0c  25303264
000a10  00      
000a11  00                DCB      0
000a12  00                DCB      0
000a13  00                DCB      0
                  |L1.2580|
                          DCD      timeStr
                  |L1.2584|
                          DCD      utcTime
                  |L1.2588|
                          DCD      dataTime
                  |L1.2592|
                          DCD      ||.constdata||+0x130
                          ENDP

                  EPMReaderReceiveCmd PROC
;;;457    #define RECEIVE_WAIT_INTERVAL   10
;;;458    int EPMReaderReceiveCmd(uint32_t waitTime, uint8_t** receiveData, uint16_t* dataLen)
000a24  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;459    {
000a28  e24dd008          SUB      sp,sp,#8
000a2c  e1a09001          MOV      r9,r1
000a30  e1a0a002          MOV      r10,r2
;;;460        int timeoutCounter;    
;;;461        int ret,rxCount,rxBcount,len;
;;;462        ret = 0;
000a34  e3a05000          MOV      r5,#0
;;;463        rxBcount = 0;
000a38  e3a04000          MOV      r4,#0
;;;464        rxCount = 0;  
000a3c  e3a06000          MOV      r6,#0
;;;465        //sysprintf("xTaskGetTickCount\n");
;;;466        TickType_t mTick = xTaskGetTickCount(); 
000a40  ebfffffe          BL       xTaskGetTickCount
000a44  e58d0004          STR      r0,[sp,#4]
;;;467        timeoutCounter = waitTime/RECEIVE_WAIT_INTERVAL;
000a48  e3a0100a          MOV      r1,#0xa
000a4c  e59d0008          LDR      r0,[sp,#8]
000a50  ebfffffe          BL       __aeabi_uidivmod
000a54  e1a0b000          MOV      r11,r0
;;;468        //sysprintf("xTaskGetTickCount : %d\n", mTick);
;;;469        while(1)
000a58  ea00001c          B        |L1.2768|
                  |L1.2652|
;;;470        {
;;;471            ret = pUartInterface->readFunc(rxTemp, CMD_UART_RX_BUFF_LEN);
000a5c  e59f018c          LDR      r0,|L1.3056|
000a60  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000a64  e3a01c02          MOV      r1,#0x200
000a68  e5902008          LDR      r2,[r0,#8]
000a6c  e59f0180          LDR      r0,|L1.3060|
000a70  e12fff32          BLX      r2
000a74  e1a05000          MOV      r5,r0
;;;472            if(ret!=0)
000a78  e3550000          CMP      r5,#0
000a7c  0a000007          BEQ      |L1.2720|
;;;473            {
;;;474                rxCount+=ret;            
000a80  e0866005          ADD      r6,r6,r5
;;;475                memcpy(rxBuffer + rxBcount, rxTemp, ret);
000a84  e51f1720          LDR      r1,|L1.876|
000a88  e0810004          ADD      r0,r1,r4
000a8c  e1a02005          MOV      r2,r5
000a90  e59f115c          LDR      r1,|L1.3060|
000a94  ebfffffe          BL       __aeabi_memcpy
;;;476                rxBcount = rxBcount + ret; 
000a98  e0844005          ADD      r4,r4,r5
000a9c  ea00000b          B        |L1.2768|
                  |L1.2720|
;;;477                //#if(ENABLE_RX_PRINT)
;;;478                #if(0)
;;;479                {
;;;480                    int i;
;;;481    				sysprintf("The read is %d bytes!\n",ret);
;;;482                    for(i=0; i<ret; i++)
;;;483                    {
;;;484                        sysprintf("Data[%d] we read is 0x%02x!\n", i, rxTemp[i]);
;;;485                    }   
;;;486                } 
;;;487                #endif  
;;;488            }
;;;489            else
;;;490            {
;;;491                if(rxCount>=5)
000aa0  e3560005          CMP      r6,#5
000aa4  ba000000          BLT      |L1.2732|
;;;492                {
;;;493                    //sysprintf("\r\n !!!  receiveReaderCmd break section 1: %d ticks, timeoutCounter = %d\n", xTaskGetTickCount() - mTick, timeoutCounter);
;;;494                    break;
000aa8  ea000009          B        |L1.2772|
                  |L1.2732|
;;;495                }
;;;496                
;;;497                if(timeoutCounter-- == 0)
000aac  e1b0000b          MOVS     r0,r11
000ab0  e24bb001          SUB      r11,r11,#1
000ab4  1a000001          BNE      |L1.2752|
;;;498                {              
;;;499                    rxBcount = 0;
000ab8  e3a04000          MOV      r4,#0
;;;500                    //sysprintf("receiveReaderCmd timeout 1, break (%d ticks)....\n", xTaskGetTickCount() - mTick);
;;;501                    goto exitHandle;
000abc  ea000096          B        |L1.3356|
                  |L1.2752|
;;;502                }
;;;503                sysprintf(".");
000ac0  e28f0e13          ADR      r0,|L1.3064|
000ac4  ebfffffe          BL       sysprintf
;;;504                vTaskDelay(RECEIVE_WAIT_INTERVAL/portTICK_RATE_MS); 
000ac8  e3a00001          MOV      r0,#1
000acc  ebfffffe          BL       vTaskDelay
                  |L1.2768|
000ad0  eaffffe1          B        |L1.2652|
                  |L1.2772|
000ad4  e1a00000          MOV      r0,r0                 ;494
;;;505            }
;;;506        }
;;;507        #warning need check here
;;;508        if(rxCount < 5)
000ad8  e3560005          CMP      r6,#5
000adc  aa000004          BGE      |L1.2804|
;;;509        {
;;;510            sysprintf("Total Read %d data!, break!!! (rxCount<5)\n", rxCount);
000ae0  e1a01006          MOV      r1,r6
000ae4  e28f0e11          ADR      r0,|L1.3068|
000ae8  ebfffffe          BL       sysprintf
;;;511            rxBcount = 0;
000aec  e3a04000          MOV      r4,#0
;;;512            goto exitHandle;
000af0  ea000089          B        |L1.3356|
                  |L1.2804|
;;;513        }
;;;514        if(rxBuffer[0] != 0xEA)
000af4  e51f0790          LDR      r0,|L1.876|
000af8  e5d00000          LDRB     r0,[r0,#0]  ; rxBuffer
000afc  e35000ea          CMP      r0,#0xea
000b00  0a000005          BEQ      |L1.2844|
;;;515        {
;;;516            sysprintf("carddrv: receiveReaderCmd header err [0x%02x: 0xEA]\n", rxBuffer[0]);
000b04  e51f07a0          LDR      r0,|L1.876|
000b08  e5d01000          LDRB     r1,[r0,#0]  ; rxBuffer
000b0c  e28f0f45          ADR      r0,|L1.3112|
000b10  ebfffffe          BL       sysprintf
;;;517            rxBcount = 0;
000b14  e3a04000          MOV      r4,#0
;;;518            goto exitHandle;
000b18  ea00007f          B        |L1.3356|
                  |L1.2844|
;;;519        }
;;;520        len=(rxBuffer[3]<<8)+rxBuffer[4]+7;
000b1c  e51f07b8          LDR      r0,|L1.876|
000b20  e5d00004          LDRB     r0,[r0,#4]  ; rxBuffer
000b24  e51f17c0          LDR      r1,|L1.876|
000b28  e5d11003          LDRB     r1,[r1,#3]  ; rxBuffer
000b2c  e0800401          ADD      r0,r0,r1,LSL #8
000b30  e2808007          ADD      r8,r0,#7
;;;521        
;;;522        #if(ENABLE_RX_PRINT)
;;;523        timeoutCounter = 200;
;;;524        #else
;;;525        timeoutCounter = 10;
000b34  e3a0b00a          MOV      r11,#0xa
;;;526        #endif
;;;527        
;;;528        //if(len>rxBcount) 
;;;529        //    sysprintf("Len we want read is %d!,the data len we get is %d. continue reading...\n", len, rxBcount);
;;;530        //mTick = xTaskGetTickCount(); 
;;;531        while(len>rxBcount)
000b38  ea000074          B        |L1.3344|
                  |L1.2876|
;;;532        {
;;;533            ret = pUartInterface->readFunc(rxTemp, CMD_UART_RX_BUFF_LEN);
000b3c  e59f00ac          LDR      r0,|L1.3056|
000b40  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000b44  e3a01c02          MOV      r1,#0x200
000b48  e5902008          LDR      r2,[r0,#8]
000b4c  e59f00a0          LDR      r0,|L1.3060|
000b50  e12fff32          BLX      r2
000b54  e1a05000          MOV      r5,r0
;;;534            if(ret!=0)
000b58  e3550000          CMP      r5,#0
000b5c  0a000006          BEQ      |L1.2940|
;;;535            {
;;;536                memcpy(rxBuffer + rxBcount, rxTemp, ret);
000b60  e51f17fc          LDR      r1,|L1.876|
000b64  e0810004          ADD      r0,r1,r4
000b68  e1a02005          MOV      r2,r5
000b6c  e59f1080          LDR      r1,|L1.3060|
000b70  ebfffffe          BL       __aeabi_memcpy
;;;537                rxBcount = rxBcount + ret;   
000b74  e0844005          ADD      r4,r4,r5
000b78  ea000064          B        |L1.3344|
                  |L1.2940|
;;;538                //#if(ENABLE_RX_PRINT)
;;;539                #if(0)
;;;540                {
;;;541                    int i;
;;;542                    for(i=0; i<ret; i++)
;;;543                    {
;;;544                        sysprintf("Data 2 [%d] we read is 0x%02x!\n", i, rxTemp[i]);
;;;545                    }   
;;;546                } 
;;;547                #endif  
;;;548                /*
;;;549                if((rxBuffer[rxBcount-2] == 0x90) && (rxBuffer[rxBcount-1] == 0x0))
;;;550                {
;;;551                    sysprintf(" -->Receive Data Finish!!! don`t break (%d ticks)\r\n", xTaskGetTickCount() - mTick);
;;;552                    break;
;;;553                }
;;;554                */
;;;555            }
;;;556            else
;;;557            {
;;;558                if(timeoutCounter-- == 0)
000b7c  e1b0000b          MOVS     r0,r11
000b80  e24bb001          SUB      r11,r11,#1
000b84  1a00005f          BNE      |L1.3336|
;;;559                {
;;;560                    
;;;561                    sysprintf("receiveReaderCmd timeout 2, break (%d ticks)....\n", (int)(xTaskGetTickCount() - mTick));
000b88  ebfffffe          BL       xTaskGetTickCount
000b8c  e59d1004          LDR      r1,[sp,#4]
000b90  e0407001          SUB      r7,r0,r1
000b94  e1a01007          MOV      r1,r7
000b98  e28f00c0          ADR      r0,|L1.3168|
000b9c  ebfffffe          BL       sysprintf
;;;562                    sysprintf("Len we want read is %d!,the data len we get is %d\n", len, rxBcount);
000ba0  e1a02004          MOV      r2,r4
000ba4  e1a01008          MOV      r1,r8
000ba8  e28f00e4          ADR      r0,|L1.3220|
000bac  ebfffffe          BL       sysprintf
;;;563                    {
;;;564                        int i;
;;;565                        sysprintf("--- dump rxBuffer ---\n");
000bb0  e28f0e11          ADR      r0,|L1.3272|
000bb4  ebfffffe          BL       sysprintf
;;;566                        for(i=0; i<rxBcount; i++)
000bb8  e3a07000          MOV      r7,#0
000bbc  ea000005          B        |L1.3032|
                  |L1.3008|
;;;567                        {
;;;568                            sysprintf(" [%d]: 0x%02x\n", i, rxBuffer[i]);
000bc0  e51f085c          LDR      r0,|L1.876|
000bc4  e7d02007          LDRB     r2,[r0,r7]
000bc8  e1a01007          MOV      r1,r7
000bcc  e28f0f43          ADR      r0,|L1.3296|
000bd0  ebfffffe          BL       sysprintf
000bd4  e2877001          ADD      r7,r7,#1              ;566
                  |L1.3032|
000bd8  e1570004          CMP      r7,r4                 ;566
000bdc  bafffff7          BLT      |L1.3008|
;;;569                        }
;;;570                        sysprintf("--------------------\n");
000be0  e28f0f42          ADR      r0,|L1.3312|
000be4  ebfffffe          BL       sysprintf
;;;571                    }
;;;572                    rxBcount = 0;
000be8  e3a04000          MOV      r4,#0
;;;573                    goto exitHandle;                
000bec  ea00004a          B        |L1.3356|
                  |L1.3056|
                          DCD      pUartInterface
                  |L1.3060|
                          DCD      rxTemp
                  |L1.3064|
000bf8  2e00              DCB      ".",0
000bfa  00                DCB      0
000bfb  00                DCB      0
                  |L1.3068|
000bfc  546f7461          DCB      "Total Read %d data!, break!!! (rxCount<5)\n",0
000c00  6c205265
000c04  61642025
000c08  64206461
000c0c  7461212c
000c10  20627265
000c14  616b2121
000c18  21202872
000c1c  78436f75
000c20  6e743c35
000c24  290a00  
000c27  00                DCB      0
                  |L1.3112|
000c28  63617264          DCB      "carddrv: receiveReaderCmd header err [0x%02x: 0xEA]\n",0
000c2c  6472763a
000c30  20726563
000c34  65697665
000c38  52656164
000c3c  6572436d
000c40  64206865
000c44  61646572
000c48  20657272
000c4c  205b3078
000c50  25303278
000c54  3a203078
000c58  45415d0a
000c5c  00      
000c5d  00                DCB      0
000c5e  00                DCB      0
000c5f  00                DCB      0
                  |L1.3168|
000c60  72656365          DCB      "receiveReaderCmd timeout 2, break (%d ticks)....\n",0
000c64  69766552
000c68  65616465
000c6c  72436d64
000c70  2074696d
000c74  656f7574
000c78  20322c20
000c7c  62726561
000c80  6b202825
000c84  64207469
000c88  636b7329
000c8c  2e2e2e2e
000c90  0a00    
000c92  00                DCB      0
000c93  00                DCB      0
                  |L1.3220|
000c94  4c656e20          DCB      "Len we want read is %d!,the data len we get is %d\n",0
000c98  77652077
000c9c  616e7420
000ca0  72656164
000ca4  20697320
000ca8  2564212c
000cac  74686520
000cb0  64617461
000cb4  206c656e
000cb8  20776520
000cbc  67657420
000cc0  69732025
000cc4  640a00  
000cc7  00                DCB      0
                  |L1.3272|
000cc8  2d2d2d20          DCB      "--- dump rxBuffer ---\n",0
000ccc  64756d70
000cd0  20727842
000cd4  75666665
000cd8  72202d2d
000cdc  2d0a00  
000cdf  00                DCB      0
                  |L1.3296|
000ce0  205b2564          DCB      " [%d]: 0x%02x\n",0
000ce4  5d3a2030
000ce8  78253032
000cec  780a00  
000cef  00                DCB      0
                  |L1.3312|
000cf0  2d2d2d2d          DCB      "--------------------\n",0
000cf4  2d2d2d2d
000cf8  2d2d2d2d
000cfc  2d2d2d2d
000d00  2d2d2d2d
000d04  0a00    
000d06  00                DCB      0
000d07  00                DCB      0
                  |L1.3336|
;;;574                }
;;;575                vTaskDelay(RECEIVE_WAIT_INTERVAL/portTICK_RATE_MS); 
000d08  e3a00001          MOV      r0,#1
000d0c  ebfffffe          BL       vTaskDelay
                  |L1.3344|
000d10  e1580004          CMP      r8,r4                 ;531
000d14  caffff88          BGT      |L1.2876|
;;;576            }
;;;577        }
;;;578    exitHandle:
000d18  e1a00000          MOV      r0,r0
                  |L1.3356|
;;;579        #if(ENABLE_RX_TIME_PRINT)
;;;580        if(rxBcount!=0)
;;;581            sysprintf("receiveReaderCmd OK case %d ticks....\n", xTaskGetTickCount() - mTick);
;;;582        #endif
;;;583    	*receiveData = rxBuffer;
000d1c  e51f09b8          LDR      r0,|L1.876|
000d20  e5890000          STR      r0,[r9,#0]
;;;584    	*dataLen = rxBcount;
000d24  e1ca40b0          STRH     r4,[r10,#0]
;;;585        return rxBcount;
000d28  e1a00004          MOV      r0,r4
000d2c  e28dd014          ADD      sp,sp,#0x14
;;;586    }
000d30  e8bd8ff0          POP      {r4-r11,pc}
;;;587    
                          ENDP

                  EPMReaderSendCmd PROC
;;;588    uint32_t EPMReaderSendCmd(uint8_t buff[], int len)
000d34  e92d4070          PUSH     {r4-r6,lr}
;;;589    {
000d38  e1a04000          MOV      r4,r0
000d3c  e1a05001          MOV      r5,r1
;;;590        uint32_t ret;
;;;591        #if(ENABLE_TX_PRINT)
;;;592        {
;;;593            int i;
;;;594            sysprintf("\r\n =====  EPMReaderSendCmd (len = %d)====\r\n", len);
;;;595            for(i = 0; i < len; i++)
;;;596            {
;;;597                sysprintf("0x%02x, ", buff[i]);
;;;598                if(i%10 == 9)
;;;599                    sysprintf("\r\n");
;;;600    
;;;601            }
;;;602            sysprintf("\r\n =====  EPMReaderSendCmd ====\r\n");
;;;603        }
;;;604        #endif
;;;605        //sysprintf("\r\n =====  EPMReaderSendCmd ==ENTER writeFunc==\r\n");
;;;606        ret = pUartInterface->writeFunc(buff, len);
000d40  e51f0158          LDR      r0,|L1.3056|
000d44  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000d48  e1a01005          MOV      r1,r5
000d4c  e5902004          LDR      r2,[r0,#4]
000d50  e1a00004          MOV      r0,r4
000d54  e12fff32          BLX      r2
000d58  e1a06000          MOV      r6,r0
;;;607        //sysprintf("\r\n =====  EPMReaderSendCmd ==EXIT writeFunc==\r\n");
;;;608        //sysprintf("The write is %d! len is %d!\n",ret,len);
;;;609        return ret;
000d5c  e1a00006          MOV      r0,r6
;;;610    }
000d60  e8bd8070          POP      {r4-r6,pc}
;;;611    
                          ENDP

                  EPMReaderFlushBuffer PROC
;;;1207   }
;;;1208   void EPMReaderFlushBuffer(void)
000d64  e92d4010          PUSH     {r4,lr}
;;;1209   {
;;;1210       //sysprintf(" --> EPMReaderFlushBuffer\n");
;;;1211       //if (pUartInterface->ioctlFunc(UART_IOC_FLUSH_TX_BUFFER, 0, 0) != 0) {
;;;1212      //     sysprintf("Set TX Flush fail!\n");
;;;1213       //    return;
;;;1214       //}
;;;1215       if (pUartInterface->ioctlFunc(UART_IOC_FLUSH_RX_BUFFER, 0, 0) != 0) {
000d68  e51f0180          LDR      r0,|L1.3056|
000d6c  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000d70  e3a02000          MOV      r2,#0
000d74  e1a01002          MOV      r1,r2
000d78  e5903018          LDR      r3,[r0,#0x18]
000d7c  e3a00019          MOV      r0,#0x19
000d80  e12fff33          BLX      r3
000d84  e3500000          CMP      r0,#0
000d88  0a000002          BEQ      |L1.3480|
;;;1216           sysprintf("Set RX Flush fail!\n");
000d8c  e28f0f82          ADR      r0,|L1.3996|
000d90  ebfffffe          BL       sysprintf
                  |L1.3476|
;;;1217           return;
;;;1218       }
;;;1219   }
000d94  e8bd8010          POP      {r4,pc}
                  |L1.3480|
000d98  e1a00000          MOV      r0,r0
000d9c  eafffffc          B        |L1.3476|
;;;1220   
                          ENDP

                  readCN PROC
;;;221    #endif
;;;222    static uint16_t readCN(uint16_t* returnCode)
000da0  e92d41fc          PUSH     {r2-r8,lr}
;;;223    { 
000da4  e1a05000          MOV      r5,r0
;;;224        uint16_t returnInfo;
;;;225    	uint8_t* receiveData;
;;;226    	uint16_t receiveDataLen;
;;;227        //sysprintf("\r\nRun Card readCN(), errorTimes = %d\n", errorTimes);
;;;228        *returnCode = CARD_MESSAGE_CODE_NO_USE;
000da8  e3a000ff          MOV      r0,#0xff
000dac  e1c500b0          STRH     r0,[r5,#0]
;;;229    	currentCardType = CARD_TYPE_ID_NONE;
000db0  e3a00000          MOV      r0,#0
000db4  e51f1710          LDR      r1,|L1.1708|
000db8  e5c10000          STRB     r0,[r1,#0]  ; currentCardType
;;;230        EPMReaderFlushBuffer();    
000dbc  ebfffffe          BL       EPMReaderFlushBuffer
;;;231        
;;;232        int nret = EPMReaderSendCmd(readCNCmd,sizeof(readCNCmd));
000dc0  e3a01008          MOV      r1,#8
000dc4  e59f01e4          LDR      r0,|L1.4016|
000dc8  ebfffffe          BL       EPMReaderSendCmd
000dcc  e1a06000          MOV      r6,r0
;;;233        if(nret != sizeof(readCNCmd))
000dd0  e3560008          CMP      r6,#8
000dd4  0a000005          BEQ      |L1.3568|
;;;234        {
;;;235            sysprintf("readCN() EPMReaderSendCmd size error [%d: %d]\n", nret, sizeof(readCNCmd));
000dd8  e3a02008          MOV      r2,#8
000ddc  e1a01006          MOV      r1,r6
000de0  e28f0f73          ADR      r0,|L1.4020|
000de4  ebfffffe          BL       sysprintf
;;;236            returnInfo = CARD_MESSAGE_RETURN_SEND_ERROR;
000de8  e3a04004          MOV      r4,#4
000dec  ea000011          B        |L1.3640|
                  |L1.3568|
;;;237        }
;;;238        else
;;;239        {
;;;240            //vTaskDelay(10/portTICK_RATE_MS);     
;;;241            int count=EPMReaderReceiveCmd(300, &receiveData, &receiveDataLen);
000df0  e1a0200d          MOV      r2,sp
000df4  e28d1004          ADD      r1,sp,#4
000df8  e3a00f4b          MOV      r0,#0x12c
000dfc  ebfffffe          BL       EPMReaderReceiveCmd
000e00  e1a07000          MOV      r7,r0
;;;242            //sysprintf("we get %d char! @ readCN\n",count);
;;;243            if(count == 0)
000e04  e3570000          CMP      r7,#0
000e08  1a000003          BNE      |L1.3612|
;;;244            {     
;;;245                sysprintf("readCN() receiveReaderCmd error\n"); 
000e0c  e28f0e1d          ADR      r0,|L1.4068|
000e10  ebfffffe          BL       sysprintf
;;;246                returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;            
000e14  e3a04001          MOV      r4,#1
000e18  ea000005          B        |L1.3636|
                  |L1.3612|
;;;247            }
;;;248            else
;;;249            {
;;;250                returnInfo = EPMReaderParserMessage(CARD_MESSAGE_TYPE_CN, receiveData, receiveDataLen, returnCode);            
000e1c  e1a03005          MOV      r3,r5
000e20  e1dd20b0          LDRH     r2,[sp,#0]
000e24  e3a00001          MOV      r0,#1
000e28  e59d1004          LDR      r1,[sp,#4]
000e2c  ebfffffe          BL       EPMReaderParserMessage
000e30  e1a04000          MOV      r4,r0
                  |L1.3636|
;;;251            }
;;;252        }    
000e34  e1a00000          MOV      r0,r0
                  |L1.3640|
;;;253        return returnInfo;
000e38  e1a00004          MOV      r0,r4
;;;254    
;;;255    }
000e3c  e8bd81fc          POP      {r2-r8,pc}
;;;256    
                          ENDP

                  readVN PROC
;;;257    
;;;258    static uint16_t readVN(void)
000e40  e92d40fe          PUSH     {r1-r7,lr}
;;;259    {
;;;260        uint16_t returnCode;
;;;261        uint16_t returnInfo;
;;;262    	uint8_t* receiveData;
;;;263    	uint16_t receiveDataLen;
;;;264        //sysprintf("\r\nRun Card readVN()\n");
;;;265        EPMReaderFlushBuffer();
000e44  ebfffffe          BL       EPMReaderFlushBuffer
;;;266        int nret = EPMReaderSendCmd(readVNCmd,sizeof(readVNCmd));
000e48  e3a01008          MOV      r1,#8
000e4c  e59f01b4          LDR      r0,|L1.4104|
000e50  ebfffffe          BL       EPMReaderSendCmd
000e54  e1a05000          MOV      r5,r0
;;;267    #if(1)
;;;268        if(nret != sizeof(readVNCmd))
000e58  e3550008          CMP      r5,#8
000e5c  0a000005          BEQ      |L1.3704|
;;;269        {
;;;270            sysprintf("readVN() EPMReaderSendCmd size error [%d: %d]\n", nret, sizeof(readVNCmd));
000e60  e3a02008          MOV      r2,#8
000e64  e1a01005          MOV      r1,r5
000e68  e28f0f67          ADR      r0,|L1.4108|
000e6c  ebfffffe          BL       sysprintf
;;;271            returnInfo = CARD_MESSAGE_RETURN_SEND_ERROR;
000e70  e3a04004          MOV      r4,#4
000e74  ea000019          B        |L1.3808|
                  |L1.3704|
;;;272        }
;;;273        else
;;;274        {
;;;275            int count=EPMReaderReceiveCmd(1000, &receiveData, &receiveDataLen);
000e78  e1a0200d          MOV      r2,sp
000e7c  e28d1004          ADD      r1,sp,#4
000e80  e3a00ffa          MOV      r0,#0x3e8
000e84  ebfffffe          BL       EPMReaderReceiveCmd
000e88  e1a06000          MOV      r6,r0
;;;276            if(count == 0)
000e8c  e3560000          CMP      r6,#0
000e90  1a000003          BNE      |L1.3748|
;;;277            {        
;;;278                sysprintf("readVN() receiveReaderCmd error\n"); 
000e94  e28f0e1a          ADR      r0,|L1.4156|
000e98  ebfffffe          BL       sysprintf
;;;279                returnInfo = CARD_MESSAGE_RETURN_TIMEOUT;        
000e9c  e3a04001          MOV      r4,#1
000ea0  ea00000d          B        |L1.3804|
                  |L1.3748|
;;;280            }
;;;281            else
;;;282            {
;;;283                if(disableReaderFlag)
000ea4  e59f01b4          LDR      r0,|L1.4192|
000ea8  e5d00000          LDRB     r0,[r0,#0]  ; disableReaderFlag
000eac  e3500000          CMP      r0,#0
000eb0  0a000003          BEQ      |L1.3780|
;;;284                {
;;;285                    sysprintf(" !!!!!!!readVN() CARD_MESSAGE_RETURN_TIMEOUT JUST FOR DEBUG !!!!!!!\n"); 
000eb4  e59f01a8          LDR      r0,|L1.4196|
000eb8  ebfffffe          BL       sysprintf
;;;286                    returnInfo = CARD_MESSAGE_RETURN_TIMEOUT; 
000ebc  e3a04001          MOV      r4,#1
000ec0  ea000005          B        |L1.3804|
                  |L1.3780|
;;;287                }
;;;288                else
;;;289                {
;;;290                    returnInfo = EPMReaderParserMessage(CARD_MESSAGE_TYPE_API_VER_NO, receiveData, receiveDataLen, &returnCode);  
000ec4  e28d3008          ADD      r3,sp,#8
000ec8  e1dd20b0          LDRH     r2,[sp,#0]
000ecc  e3a00003          MOV      r0,#3
000ed0  e59d1004          LDR      r1,[sp,#4]
000ed4  ebfffffe          BL       EPMReaderParserMessage
000ed8  e1a04000          MOV      r4,r0
                  |L1.3804|
;;;291                }                
;;;292            }
;;;293        }
000edc  e1a00000          MOV      r0,r0
                  |L1.3808|
;;;294    #endif
;;;295        return returnInfo;
000ee0  e1a00004          MOV      r0,r4
;;;296    }
000ee4  e8bd80fe          POP      {r1-r7,pc}
;;;297    /*
                          ENDP

                  EPMReaderInit PROC
;;;332    /*-----------------------------------------*/
;;;333    BOOL EPMReaderInit(void)
000ee8  e92d4010          PUSH     {r4,lr}
;;;334    {
000eec  e24dd018          SUB      sp,sp,#0x18
;;;335        sysprintf("EPMReaderInit!!\n");
000ef0  e28f0e17          ADR      r0,|L1.4200|
000ef4  ebfffffe          BL       sysprintf
;;;336        CardLogUint32ToString((char*)"epmid", GetMeterData()->epmid, machineNo, 4);
000ef8  ebfffffe          BL       GetMeterData
000efc  e3a03004          MOV      r3,#4
000f00  e59f2174          LDR      r2,|L1.4220|
000f04  e5904004          LDR      r4,[r0,#4]
000f08  e1a01004          MOV      r1,r4
000f0c  e28f0f5b          ADR      r0,|L1.4224|
000f10  ebfffffe          BL       CardLogUint32ToString
;;;337        sysprintf("machineNo : 0x%02x(%c) 0x%02x(%c) 0x%02x(%c) 0x%02x(%c)\r\n", machineNo[3], machineNo[3], machineNo[2], machineNo[2], machineNo[1], machineNo[1], machineNo[0], machineNo[0]);
000f14  e59f0160          LDR      r0,|L1.4220|
000f18  e5d00000          LDRB     r0,[r0,#0]  ; machineNo
000f1c  e59f1158          LDR      r1,|L1.4220|
000f20  e5d11000          LDRB     r1,[r1,#0]  ; machineNo
000f24  e59f2150          LDR      r2,|L1.4220|
000f28  e5d22001          LDRB     r2,[r2,#1]  ; machineNo
000f2c  e59f3148          LDR      r3,|L1.4220|
000f30  e5d33001          LDRB     r3,[r3,#1]  ; machineNo
000f34  e58d0010          STR      r0,[sp,#0x10]
000f38  e59f013c          LDR      r0,|L1.4220|
000f3c  e58d100c          STR      r1,[sp,#0xc]
000f40  e58d2008          STR      r2,[sp,#8]
000f44  e58d3004          STR      r3,[sp,#4]
000f48  e5d00002          LDRB     r0,[r0,#2]  ; machineNo
000f4c  e58d0000          STR      r0,[sp,#0]
000f50  e59f0124          LDR      r0,|L1.4220|
000f54  e5d03002          LDRB     r3,[r0,#2]  ; machineNo
000f58  e5d02003          LDRB     r2,[r0,#3]  ; machineNo
000f5c  e5d01003          LDRB     r1,[r0,#3]  ; machineNo
000f60  e28f0e12          ADR      r0,|L1.4232|
000f64  ebfffffe          BL       sysprintf
;;;338       
;;;339        pUartInterface = UartGetInterface(EPM_READER_UART);
000f68  e3a00001          MOV      r0,#1
000f6c  ebfffffe          BL       UartGetInterface
000f70  e51f1388          LDR      r1,|L1.3056|
000f74  e5810000          STR      r0,[r1,#0]  ; pUartInterface
;;;340        if(pUartInterface == NULL)
000f78  e2810000          ADD      r0,r1,#0
000f7c  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
000f80  e3500000          CMP      r0,#0
000f84  1a00005a          BNE      |L1.4340|
;;;341        {
;;;342            sysprintf("EPMReaderInit ERROR (pUartInterface == NULL)!!\n");
000f88  e28f0f4d          ADR      r0,|L1.4292|
000f8c  ebfffffe          BL       sysprintf
;;;343            return FALSE;
000f90  e3a00000          MOV      r0,#0
                  |L1.3988|
000f94  e28dd018          ADD      sp,sp,#0x18
;;;344        }
;;;345        if(pUartInterface->initFunc(UART_BARDRATE) == FALSE)
;;;346        {
;;;347            sysprintf("EPMReaderInit ERROR (initFunc false)!!\n");
;;;348            return FALSE;
;;;349        }
;;;350        //resetEpmReaderCtrl();
;;;351    #ifdef _PC_ENV_
;;;352        BlkCommonInit();
;;;353        ECCLibInit();
;;;354    #endif
;;;355        sysprintf("EPMReaderInit OK!!\n");
;;;356        return TRUE;
;;;357    }
000f98  e8bd8010          POP      {r4,pc}
                  |L1.3996|
000f9c  53657420          DCB      "Set RX Flush fail!\n",0
000fa0  52582046
000fa4  6c757368
000fa8  20666169
000fac  6c210a00
                  |L1.4016|
                          DCD      readCNCmd
                  |L1.4020|
000fb4  72656164          DCB      "readCN() EPMReaderSendCmd size error [%d: %d]\n",0
000fb8  434e2829
000fbc  2045504d
000fc0  52656164
000fc4  65725365
000fc8  6e64436d
000fcc  64207369
000fd0  7a652065
000fd4  72726f72
000fd8  205b2564
000fdc  3a202564
000fe0  5d0a00  
000fe3  00                DCB      0
                  |L1.4068|
000fe4  72656164          DCB      "readCN() receiveReaderCmd error\n",0
000fe8  434e2829
000fec  20726563
000ff0  65697665
000ff4  52656164
000ff8  6572436d
000ffc  64206572
001000  726f720a
001004  00      
001005  00                DCB      0
001006  00                DCB      0
001007  00                DCB      0
                  |L1.4104|
                          DCD      readVNCmd
                  |L1.4108|
00100c  72656164          DCB      "readVN() EPMReaderSendCmd size error [%d: %d]\n",0
001010  564e2829
001014  2045504d
001018  52656164
00101c  65725365
001020  6e64436d
001024  64207369
001028  7a652065
00102c  72726f72
001030  205b2564
001034  3a202564
001038  5d0a00  
00103b  00                DCB      0
                  |L1.4156|
00103c  72656164          DCB      "readVN() receiveReaderCmd error\n",0
001040  564e2829
001044  20726563
001048  65697665
00104c  52656164
001050  6572436d
001054  64206572
001058  726f720a
00105c  00      
00105d  00                DCB      0
00105e  00                DCB      0
00105f  00                DCB      0
                  |L1.4192|
                          DCD      disableReaderFlag
                  |L1.4196|
                          DCD      ||.constdata||+0x178
                  |L1.4200|
001068  45504d52          DCB      "EPMReaderInit!!\n",0
00106c  65616465
001070  72496e69
001074  7421210a
001078  00      
001079  00                DCB      0
00107a  00                DCB      0
00107b  00                DCB      0
                  |L1.4220|
                          DCD      machineNo
                  |L1.4224|
001080  65706d69          DCB      "epmid",0
001084  6400    
001086  00                DCB      0
001087  00                DCB      0
                  |L1.4232|
001088  6d616368          DCB      "machineNo : 0x%02x(%c) 0x%02x(%c) 0x%02x(%c) 0x%02x(%c)"
00108c  696e654e
001090  6f203a20
001094  30782530
001098  32782825
00109c  63292030
0010a0  78253032
0010a4  78282563
0010a8  29203078
0010ac  25303278
0010b0  28256329
0010b4  20307825
0010b8  30327828
0010bc  256329  
0010bf  0d0a00            DCB      "\r\n",0
0010c2  00                DCB      0
0010c3  00                DCB      0
                  |L1.4292|
0010c4  45504d52          DCB      "EPMReaderInit ERROR (pUartInterface == NULL)!!\n",0
0010c8  65616465
0010cc  72496e69
0010d0  74204552
0010d4  524f5220
0010d8  28705561
0010dc  7274496e
0010e0  74657266
0010e4  61636520
0010e8  3d3d204e
0010ec  554c4c29
0010f0  21210a00
                  |L1.4340|
0010f4  e51f050c          LDR      r0,|L1.3056|
0010f8  e5900000          LDR      r0,[r0,#0]            ;345  ; pUartInterface
0010fc  e5901000          LDR      r1,[r0,#0]            ;345
001100  e59f01fc          LDR      r0,|L1.4868|
001104  e12fff31          BLX      r1                    ;345
001108  e3500000          CMP      r0,#0                 ;345
00110c  1a000003          BNE      |L1.4384|
001110  e28f0e1f          ADR      r0,|L1.4872|
001114  ebfffffe          BL       sysprintf
001118  e3a00000          MOV      r0,#0                 ;348
00111c  eaffff9c          B        |L1.3988|
                  |L1.4384|
001120  e28f0f82          ADR      r0,|L1.4912|
001124  ebfffffe          BL       sysprintf
001128  e3a00001          MOV      r0,#1                 ;356
00112c  eaffff98          B        |L1.3988|
;;;358    BOOL EPMReaderSetPower(uint8_t id, BOOL flag)
                          ENDP

                  EPMReaderSetPower PROC
001130  e92d4070          PUSH     {r4-r6,lr}
;;;359    {
001134  e1a05000          MOV      r5,r0
001138  e1a04001          MOV      r4,r1
;;;360        if(flag)
00113c  e3540000          CMP      r4,#0
001140  0a000003          BEQ      |L1.4436|
;;;361        {
;;;362            powerUpTick = xTaskGetTickCount();
001144  ebfffffe          BL       xTaskGetTickCount
001148  e59f11f4          LDR      r1,|L1.4932|
00114c  e5810000          STR      r0,[r1,#0]  ; powerUpTick
001150  ea000002          B        |L1.4448|
                  |L1.4436|
;;;363        }
;;;364        else
;;;365        {
;;;366            powerUpTick = 0; 
001154  e3a00000          MOV      r0,#0
001158  e59f11e4          LDR      r1,|L1.4932|
00115c  e5810000          STR      r0,[r1,#0]  ; powerUpTick
                  |L1.4448|
;;;367        }
;;;368        //flag = setEpmReaderCtrl(id, flag);
;;;369        pUartInterface->setRS232PowerFunc(flag);
001160  e51f0578          LDR      r0,|L1.3056|
001164  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
001168  e5901014          LDR      r1,[r0,#0x14]
00116c  e1a00004          MOV      r0,r4
001170  e12fff31          BLX      r1
;;;370        pUartInterface->setPowerFunc(flag);
001174  e51f058c          LDR      r0,|L1.3056|
001178  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
00117c  e5901010          LDR      r1,[r0,#0x10]
001180  e1a00004          MOV      r0,r4
001184  e12fff31          BLX      r1
;;;371        
;;;372        if(flag == FALSE)
001188  e3540000          CMP      r4,#0
00118c  1a000005          BNE      |L1.4520|
;;;373        {
;;;374            needInitReaderFlag = TRUE;
001190  e3a00001          MOV      r0,#1
001194  e59f11ac          LDR      r1,|L1.4936|
001198  e5c10000          STRB     r0,[r1,#0]  ; needInitReaderFlag
;;;375            disableReaderFlag = FALSE;
00119c  e3a00000          MOV      r0,#0
0011a0  e51f1148          LDR      r1,|L1.4192|
0011a4  e5c10000          STRB     r0,[r1,#0]  ; disableReaderFlag
                  |L1.4520|
;;;376        }
;;;377        #if(SUPPORT_ECC_CARD_READER)
;;;378        if(flag == FALSE)
;;;379        {
;;;380            eccNeedRestFlag = TRUE;
;;;381        }
;;;382        sysprintf(" == INFORMATION == !!! EPMReaderSetPower flag = %d, eccNeedRestFlag = %d, needInitReaderFlag = %d !!!...\r\n", flag, eccNeedRestFlag, needInitReaderFlag);
;;;383        #endif
;;;384    
;;;385        return flag;
0011a8  e1a00004          MOV      r0,r4
;;;386    }
0011ac  e8bd8070          POP      {r4-r6,pc}
;;;387    
                          ENDP

                  EPMReaderCheckReader PROC
;;;388    uint8_t EPMReaderCheckReader(void)
0011b0  e92d4030          PUSH     {r4,r5,lr}
;;;389    {
0011b4  e24ddf81          SUB      sp,sp,#0x204
;;;390        if(needInitReaderFlag == FALSE)
0011b8  e59f0188          LDR      r0,|L1.4936|
0011bc  e5d00000          LDRB     r0,[r0,#0]  ; needInitReaderFlag
0011c0  e3500000          CMP      r0,#0
0011c4  1a000005          BNE      |L1.4576|
;;;391        {
;;;392            //sysprintf(" !!! EPMReaderCheckReader IGNORE  !!!...\r\n");
;;;393            
;;;394            LoglibPrintf(LOG_TYPE_INFO, " !!! EPMReaderCheckReader IGNORE  !!!...\r\n");
0011c8  e28f1f5f          ADR      r1,|L1.4940|
0011cc  e3a00000          MOV      r0,#0
0011d0  ebfffffe          BL       LoglibPrintf
;;;395            
;;;396            return  TSREADER_CHECK_READER_OK;
0011d4  e3a00002          MOV      r0,#2
                  |L1.4568|
0011d8  e28ddf81          ADD      sp,sp,#0x204
;;;397        }
;;;398        else
;;;399        {
;;;400            uint8_t reVal = TSREADER_CHECK_READER_OK;
;;;401            LoglibPrintf(LOG_TYPE_INFO, " !!! EPMReaderCheckReader enter  !!!...\r\n");
;;;402        
;;;403            while(readVN() != CARD_MESSAGE_RETURN_SUCCESS)
;;;404            {
;;;405                sysprintf("readVN retry(%d:%d)...\r\n", xTaskGetTickCount() - powerUpTick, CARD_INIT_TIMEOUT_TIME); 
;;;406                sysprintf(":");
;;;407                vTaskDelay(CARD_INIT_TIMEOUT_INTERVAL);
;;;408                if((powerUpTick != 0) && ((xTaskGetTickCount() - powerUpTick) > CARD_INIT_TIMEOUT_TIME) )
;;;409                {
;;;410                    //sysprintf("readVN break (time:%d)...\r\n", (int)(xTaskGetTickCount() - powerUpTick));
;;;411                    reVal = TSREADER_CHECK_READER_ERROR;
;;;412                    {
;;;413                        char str[512];
;;;414                        sprintf(str, "   Card Reader --> readVN break (time:%d)...\r\n", (int)(xTaskGetTickCount() - powerUpTick));
;;;415                        LoglibPrintf(LOG_TYPE_ERROR, str);
;;;416                    }
;;;417                    return reVal;  
;;;418                }         
;;;419            }       
;;;420    
;;;421            #if(SUPPORT_ECC_CARD_READER)
;;;422            if(eccNeedRestFlag)
;;;423            {
;;;424                uint16_t returnInfo, returnCode;
;;;425                vTaskDelay(5000/portTICK_RATE_MS);  
;;;426                time_t epmUTCTime = GetCurrentUTCTime();
;;;427                uint16_t reValTmp = ECCPPRReset(&returnInfo, &returnCode, epmUTCTime, epmUTCTime, FALSE);
;;;428                if(reValTmp == CARD_MESSAGE_RETURN_SUCCESS)
;;;429                {
;;;430                    eccNeedRestFlag = FALSE;
;;;431                    sysprintf("== INFORMATION == ECCPPRReset OK... (eccNeedRestFlag = %d)\r\n", eccNeedRestFlag); 
;;;432                }
;;;433                else
;;;434                {
;;;435                    //sysprintf("== INFORMATION == ECCPPRReset ERROR...(eccNeedRestFlag = %d)\r\n", eccNeedRestFlag); 
;;;436                    {
;;;437                        char str[512];
;;;438                        sprintf(str, "== INFORMATION == ECCPPRReset ERROR...(eccNeedRestFlag = %d)\r\n", eccNeedRestFlag); 
;;;439                        LoglibPrintf(LOG_TYPE_ERROR, str);
;;;440                    }
;;;441                    reVal = TSREADER_CHECK_READER_ERROR;                    
;;;442                    //DataProcessSendStatusData(0, "pprresetErr", WEB_POST_EVENT_ALERT);
;;;443                    return reVal;
;;;444                }             
;;;445            }    
;;;446            else
;;;447            {
;;;448                sysprintf("== INFORMATION == ECCPPRReset IGNORE...(eccNeedRestFlag = %d)\r\n", eccNeedRestFlag); 
;;;449            }    
;;;450            #endif
;;;451           
;;;452            //needInitReaderFlag = FALSE;
;;;453            return reVal;
;;;454        }
;;;455    }
0011dc  e8bd8030          POP      {r4,r5,pc}
                  |L1.4576|
0011e0  e3a04002          MOV      r4,#2                 ;400
0011e4  e28f1f63          ADR      r1,|L1.4984|
0011e8  e3a00000          MOV      r0,#0                 ;401
0011ec  ebfffffe          BL       LoglibPrintf
0011f0  ea000024          B        |L1.4744|
                  |L1.4596|
0011f4  ebfffffe          BL       xTaskGetTickCount
0011f8  e59f1144          LDR      r1,|L1.4932|
0011fc  e5911000          LDR      r1,[r1,#0]            ;405  ; powerUpTick
001200  e0405001          SUB      r5,r0,r1              ;405
001204  e59f2198          LDR      r2,|L1.5028|
001208  e1a01005          MOV      r1,r5                 ;405
00120c  e28f0f65          ADR      r0,|L1.5032|
001210  ebfffffe          BL       sysprintf
001214  e28f0f6a          ADR      r0,|L1.5060|
001218  ebfffffe          BL       sysprintf
00121c  e3a00064          MOV      r0,#0x64              ;407
001220  ebfffffe          BL       vTaskDelay
001224  e59f0118          LDR      r0,|L1.4932|
001228  e5900000          LDR      r0,[r0,#0]            ;408  ; powerUpTick
00122c  e3500000          CMP      r0,#0                 ;408
001230  0a000014          BEQ      |L1.4744|
001234  ebfffffe          BL       xTaskGetTickCount
001238  e59f1104          LDR      r1,|L1.4932|
00123c  e5911000          LDR      r1,[r1,#0]            ;408  ; powerUpTick
001240  e0400001          SUB      r0,r0,r1              ;408
001244  e59f1158          LDR      r1,|L1.5028|
001248  e1500001          CMP      r0,r1                 ;408
00124c  9a00000d          BLS      |L1.4744|
001250  e3a04003          MOV      r4,#3                 ;411
001254  ebfffffe          BL       xTaskGetTickCount
001258  e59f10e4          LDR      r1,|L1.4932|
00125c  e5911000          LDR      r1,[r1,#0]            ;414  ; powerUpTick
001260  e0405001          SUB      r5,r0,r1              ;414
001264  e1a02005          MOV      r2,r5                 ;414
001268  e28f1f56          ADR      r1,|L1.5064|
00126c  e28d0004          ADD      r0,sp,#4              ;414
001270  ebfffffe          BL       __2sprintf
001274  e28d1004          ADD      r1,sp,#4              ;415
001278  e3a00002          MOV      r0,#2                 ;415
00127c  ebfffffe          BL       LoglibPrintf
001280  e1a00004          MOV      r0,r4                 ;417
001284  eaffffd3          B        |L1.4568|
                  |L1.4744|
001288  ebfffffe          BL       readVN
00128c  e3500002          CMP      r0,#2                 ;403
001290  1affffd7          BNE      |L1.4596|
001294  e1a00004          MOV      r0,r4                 ;453
001298  eaffffce          B        |L1.4568|
;;;456    
                          ENDP

                  EPMReaderBreakCheckReader PROC
;;;900    }
;;;901    BOOL EPMReaderBreakCheckReader(void)
00129c  e3a00001          MOV      r0,#1
;;;902    {
;;;903        BOOL reVal = TRUE;
;;;904        //checkReaderFlag = FALSE;
;;;905        return reVal;
;;;906    }
0012a0  e12fff1e          BX       lr
;;;907    BOOL EPMReaderProcessCN(tsreaderCNResultCallback callback)
                          ENDP

                  EPMReaderProcessCN PROC
0012a4  e92d4038          PUSH     {r3-r5,lr}
;;;908    {
0012a8  e1a04000          MOV      r4,r0
;;;909        uint16_t returnInfo;
;;;910        uint16_t returnCode;
;;;911        returnInfo = readCN(&returnCode);
0012ac  e1a0000d          MOV      r0,sp
0012b0  ebfffffe          BL       readCN
0012b4  e1a05000          MOV      r5,r0
;;;912        if(cnLen > 0)
0012b8  e51f0cb4          LDR      r0,|L1.1548|
0012bc  e5d00000          LDRB     r0,[r0,#0]  ; cnLen
0012c0  e3500000          CMP      r0,#0
0012c4  da000008          BLE      |L1.4844|
;;;913        {    
;;;914            if(callback != NULL)
0012c8  e3540000          CMP      r4,#0
0012cc  0a000006          BEQ      |L1.4844|
;;;915            {
;;;916                callback(TRUE, cnData, cnLen);
0012d0  e51f0ccc          LDR      r0,|L1.1548|
0012d4  e5d02000          LDRB     r2,[r0,#0]  ; cnLen
0012d8  e51f1cd8          LDR      r1,|L1.1544|
0012dc  e3a00001          MOV      r0,#1
0012e0  e12fff34          BLX      r4
;;;917                return TRUE;
0012e4  e3a00001          MOV      r0,#1
                  |L1.4840|
;;;918            }
;;;919        }
;;;920        callback(FALSE, NULL, 0);
;;;921        return TRUE;
;;;922    }
0012e8  e8bd8038          POP      {r3-r5,pc}
                  |L1.4844|
0012ec  e3a02000          MOV      r2,#0                 ;920
0012f0  e1a01002          MOV      r1,r2                 ;920
0012f4  e1a00002          MOV      r0,r2                 ;920
0012f8  e12fff34          BLX      r4                    ;920
0012fc  e3a00001          MOV      r0,#1                 ;921
001300  eafffff8          B        |L1.4840|
                  |L1.4868|
                          DCD      0x0001c200
                  |L1.4872|
001308  45504d52          DCB      "EPMReaderInit ERROR (initFunc false)!!\n",0
00130c  65616465
001310  72496e69
001314  74204552
001318  524f5220
00131c  28696e69
001320  7446756e
001324  63206661
001328  6c736529
00132c  21210a00
                  |L1.4912|
001330  45504d52          DCB      "EPMReaderInit OK!!\n",0
001334  65616465
001338  72496e69
00133c  74204f4b
001340  21210a00
                  |L1.4932|
                          DCD      powerUpTick
                  |L1.4936|
                          DCD      needInitReaderFlag
                  |L1.4940|
00134c  20212121          DCB      " !!! EPMReaderCheckReader IGNORE  !!!...\r\n",0
001350  2045504d
001354  52656164
001358  65724368
00135c  65636b52
001360  65616465
001364  72204947
001368  4e4f5245
00136c  20202121
001370  212e2e2e
001374  0d0a00  
001377  00                DCB      0
                  |L1.4984|
001378  20212121          DCB      " !!! EPMReaderCheckReader enter  !!!...\r\n",0
00137c  2045504d
001380  52656164
001384  65724368
001388  65636b52
00138c  65616465
001390  7220656e
001394  74657220
001398  20212121
00139c  2e2e2e0d
0013a0  0a00    
0013a2  00                DCB      0
0013a3  00                DCB      0
                  |L1.5028|
                          DCD      0x000009c4
                  |L1.5032|
0013a8  72656164          DCB      "readVN retry(%d:%d)...\r\n",0
0013ac  564e2072
0013b0  65747279
0013b4  2825643a
0013b8  2564292e
0013bc  2e2e0d0a
0013c0  00      
0013c1  00                DCB      0
0013c2  00                DCB      0
0013c3  00                DCB      0
                  |L1.5060|
0013c4  3a00              DCB      ":",0
0013c6  00                DCB      0
0013c7  00                DCB      0
                  |L1.5064|
0013c8  20202043          DCB      "   Card Reader --> readVN break (time:%d)...\r\n",0
0013cc  61726420
0013d0  52656164
0013d4  6572202d
0013d8  2d3e2072
0013dc  65616456
0013e0  4e206272
0013e4  65616b20
0013e8  2874696d
0013ec  653a2564
0013f0  292e2e2e
0013f4  0d0a00  
0013f7  00                DCB      0
                          ENDP

                  EPMReaderProcess PROC
;;;923    
;;;924    BOOL EPMReaderProcess(uint16_t targetDeduct, tsreaderDepositResultCallback callback)
0013f8  e92d43f8          PUSH     {r3-r9,lr}
;;;925    {   
0013fc  e1a09000          MOV      r9,r0
001400  e1a05001          MOV      r5,r1
;;;926        BOOL retval = FALSE;
001404  e3a06000          MOV      r6,#0
;;;927        uint16_t returnCode;
;;;928        uint16_t returnInfo;
;;;929        TickType_t tickLocalStart;    
;;;930        char title[64];
;;;931        //sysprintf(" ==> CardReadProcess\n");   
;;;932        ptsreaderDepositResultCallback =  callback;  
001408  e59f0318          LDR      r0,|L1.5928|
00140c  e5805000          STR      r5,[r0,#0]  ; ptsreaderDepositResultCallback
;;;933        
;;;934        tickLocalStart = xTaskGetTickCount();
001410  ebfffffe          BL       xTaskGetTickCount
001414  e1a07000          MOV      r7,r0
;;;935        currentTargetDeduct = 0;
001418  e3a00000          MOV      r0,#0
00141c  e59f1308          LDR      r1,|L1.5932|
001420  e1c100b0          STRH     r0,[r1,#0]  ; currentTargetDeduct
;;;936    #if(0) 
;;;937        currentTargetDeduct = targetDeduct;
;;;938    	retval = ECCLibProcess(&returnInfo, &returnCode, targetDeduct, callback, cnData, dataTime, machineNo);
;;;939    #else
;;;940        returnInfo = readCN(&returnCode);
001424  e1a0000d          MOV      r0,sp
001428  ebfffffe          BL       readCN
00142c  e1a04000          MOV      r4,r0
;;;941        if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
001430  e3540002          CMP      r4,#2
001434  1a000013          BNE      |L1.5256|
;;;942        {         
;;;943            returnInfo = CARD_MESSAGE_RETURN_SUCCESS;//readTime();
001438  e3a04002          MOV      r4,#2
;;;944            if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
00143c  e3540002          CMP      r4,#2
001440  1a000050          BNE      |L1.5512|
;;;945            {      
;;;946                #if(0)
;;;947                    currentTargetDeduct = targetDeduct;
;;;948                    retval = ECCLibProcess(&returnInfo, &returnCode, targetDeduct, callback, cnData, utcTime, machineNo);
;;;949                #else
;;;950    			switch(currentCardType)
001444  e51f0da0          LDR      r0,|L1.1708|
001448  e5d00000          LDRB     r0,[r0,#0]  ; currentCardType
00144c  e3500001          CMP      r0,#1
001450  0a000002          BEQ      |L1.5216|
001454  e3500002          CMP      r0,#2
001458  1a000006          BNE      |L1.5240|
00145c  ea000002          B        |L1.5228|
                  |L1.5216|
;;;951    			{
;;;952                    
;;;953    				case CARD_TYPE_ID_IPASS:
001460  e1a00000          MOV      r0,r0
;;;954    					//currentTargetDeduct = targetDeduct;
;;;955    					//retval = IPASSLibProcess(&returnInfo, &returnCode, targetDeduct, callback, cnData, dataTime, machineNo);
;;;956                        retval = TRUE;
001464  e3a06001          MOV      r6,#1
;;;957    					break;
001468  ea000005          B        |L1.5252|
                  |L1.5228|
;;;958    				case CARD_TYPE_ID_ECC:
00146c  e1a00000          MOV      r0,r0
;;;959                        //epmCurrentUTCTime = GetCurrentUTCTime();
;;;960                        //currentTargetDeduct = targetDeduct;
;;;961    					//retval = ECCLibProcess(&returnInfo, &returnCode, targetDeduct, callback, cnData, epmCurrentUTCTime, machineNo);
;;;962                        retval = TRUE;
001470  e3a06001          MOV      r6,#1
;;;963    					break;
001474  ea000002          B        |L1.5252|
                  |L1.5240|
;;;964                    default:
001478  e1a00000          MOV      r0,r0
;;;965                        retval = TRUE;
00147c  e3a06001          MOV      r6,#1
001480  e1a00000          MOV      r0,r0                 ;950
                  |L1.5252|
001484  ea00003f          B        |L1.5512|
                  |L1.5256|
;;;966                        //break;
;;;967    
;;;968    			}
;;;969                #endif
;;;970                
;;;971                //if(retval)
;;;972                //    break;
;;;973            } 
;;;974            else //returnInfo = readTime();
;;;975            {
;;;976            } //returnInfo = readTime();   
;;;977                 
;;;978        } 
;;;979        else
;;;980        {        
;;;981            //sysprintf("ZZ(0x%02x:%d)", returnInfo, returnCode);
;;;982            static int checkCounter = 0;
;;;983            switch(returnInfo)
001488  e3540011          CMP      r4,#0x11
00148c  0a00000c          BEQ      |L1.5316|
001490  ca000006          BGT      |L1.5296|
001494  e3540001          CMP      r4,#1
001498  0a000010          BEQ      |L1.5344|
00149c  e3540003          CMP      r4,#3
0014a0  0a00000c          BEQ      |L1.5336|
0014a4  e3540004          CMP      r4,#4
0014a8  1a000035          BNE      |L1.5508|
0014ac  ea00000c          B        |L1.5348|
                  |L1.5296|
0014b0  e3540012          CMP      r4,#0x12
0014b4  0a000010          BEQ      |L1.5372|
0014b8  e3540013          CMP      r4,#0x13
0014bc  1a000030          BNE      |L1.5508|
0014c0  ea000028          B        |L1.5480|
                  |L1.5316|
;;;984            {                         
;;;985                case CARD_MESSAGE_TYPE_CN_RETURN_LEN_1:
0014c4  e1a00000          MOV      r0,r0
;;;986                    checkCounter = 0;
0014c8  e3a00000          MOV      r0,#0
0014cc  e59f125c          LDR      r1,|L1.5936|
0014d0  e5810000          STR      r0,[r1,#0]  ; checkCounter
;;;987                    //sysprintf(":"); 
;;;988                    break;
0014d4  ea00002a          B        |L1.5508|
                  |L1.5336|
;;;989                case CARD_MESSAGE_RETURN_PARSER_ERROR:
0014d8  e1a00000          MOV      r0,r0
;;;990                case CARD_MESSAGE_RETURN_TIMEOUT:
0014dc  e1a00000          MOV      r0,r0
                  |L1.5344|
;;;991                case CARD_MESSAGE_RETURN_SEND_ERROR:  
0014e0  e1a00000          MOV      r0,r0
                  |L1.5348|
;;;992                    sysprintf(" ==> readCN return FLASE: errorCode = 0x%04x(%d),  returnInfo = 0x%02x !!!\n", returnCode, returnCode, returnInfo);                
0014e4  e1a03004          MOV      r3,r4
0014e8  e1dd20b0          LDRH     r2,[sp,#0]
0014ec  e1a01002          MOV      r1,r2
0014f0  e59f023c          LDR      r0,|L1.5940|
0014f4  ebfffffe          BL       sysprintf
;;;993                    break;
0014f8  ea000021          B        |L1.5508|
                  |L1.5372|
;;;994                case CARD_MESSAGE_TYPE_CN_RETURN_NOT_SUPPORT_CARDTYPE:
0014fc  e1a00000          MOV      r0,r0
;;;995                    sysprintf(" ==> readCN return FLASE: errorCode = 0x%04x(%d),  returnInfo = 0x%02x !!!\n", returnCode, returnCode, returnInfo);
001500  e1a03004          MOV      r3,r4
001504  e1dd20b0          LDRH     r2,[sp,#0]
001508  e1a01002          MOV      r1,r2
00150c  e59f0220          LDR      r0,|L1.5940|
001510  ebfffffe          BL       sysprintf
;;;996                    checkCounter++;
001514  e59f0214          LDR      r0,|L1.5936|
001518  e5900000          LDR      r0,[r0,#0]  ; checkCounter
00151c  e2800001          ADD      r0,r0,#1
001520  e59f1208          LDR      r1,|L1.5936|
001524  e5810000          STR      r0,[r1,#0]  ; checkCounter
;;;997                    if(checkCounter > 3)
001528  e2810000          ADD      r0,r1,#0
00152c  e5900000          LDR      r0,[r0,#0]  ; checkCounter
001530  e3500003          CMP      r0,#3
001534  da00000a          BLE      |L1.5476|
;;;998                    {
;;;999                        if(ptsreaderDepositResultCallback != NULL)
001538  e59f01e8          LDR      r0,|L1.5928|
00153c  e5900000          LDR      r0,[r0,#0]  ; ptsreaderDepositResultCallback
001540  e3500000          CMP      r0,#0
001544  0a000005          BEQ      |L1.5472|
;;;1000                       {
;;;1001                           ptsreaderDepositResultCallback(FALSE, returnInfo, returnCode);
001548  e1dd20b0          LDRH     r2,[sp,#0]
00154c  e1a01004          MOV      r1,r4
001550  e3a00000          MOV      r0,#0
001554  e59f31cc          LDR      r3,|L1.5928|
001558  e5933000          LDR      r3,[r3,#0]  ; ptsreaderDepositResultCallback
00155c  e12fff33          BLX      r3
                  |L1.5472|
;;;1002                       }
;;;1003                       
;;;1004                       //sprintf(title, "CN(0x%02x:%d)", returnInfo, returnCode);
;;;1005                       //DataProcessSendStatusData(0, title, WEB_POST_EVENT_ALERT);
;;;1006   
;;;1007                       retval = TRUE; //完成 離開刷卡 loop
001560  e3a06001          MOV      r6,#1
                  |L1.5476|
;;;1008                   }
;;;1009                   break;
001564  ea000006          B        |L1.5508|
                  |L1.5480|
;;;1010               case CARD_MESSAGE_TYPE_CN_RETURN_UNKNOWN_CARDTYPE:
001568  e1a00000          MOV      r0,r0
;;;1011                   sysprintf(" ==> readCN return FLASE: errorCode = 0x%04x(%d),  returnInfo = 0x%02x !!!\n", returnCode, returnCode, returnInfo);
00156c  e1a03004          MOV      r3,r4
001570  e1dd20b0          LDRH     r2,[sp,#0]
001574  e1a01002          MOV      r1,r2
001578  e59f01b4          LDR      r0,|L1.5940|
00157c  ebfffffe          BL       sysprintf
;;;1012                   #if(0)//繼續循卡                
;;;1013                   if(ptsreaderDepositResultCallback != NULL)
;;;1014                   {
;;;1015                       ptsreaderDepositResultCallback(FALSE, returnInfo, returnCode);
;;;1016                   }
;;;1017                   
;;;1018                   sprintf(title, "CN(0x%02x:%d)", returnInfo, returnCode);
;;;1019                   DataProcessSendStatusData(0, title, WEB_POST_EVENT_ALERT);
;;;1020                   
;;;1021                   retval = TRUE; //完成 離開刷卡 loop
;;;1022                   #endif
;;;1023                   break;
001580  e1a00000          MOV      r0,r0
                  |L1.5508|
001584  e1a00000          MOV      r0,r0                 ;988
                  |L1.5512|
;;;1024   				/*
;;;1025               case CARD_MESSAGE_TYPE_CN_RETURN_IN_BLK:
;;;1026                   sprintf(title, "CN(0x%02x:%d)", returnInfo, returnCode);
;;;1027                   DataProcessSendStatusData(0, title, WEB_POST_EVENT_ALERT);
;;;1028                   
;;;1029                   #warning lock card   
;;;1030                   //returnInfo = iPass_Execute('L', targetDeduct, &returnCode);
;;;1031                   // // 票值回復後要再繼續執行 Read Card Basic，但卡號為 4 Bytes 的卡號。?????
;;;1032                   //sysprintf("****  [INFO Card Reader] Lock Card : errorCode = 0x%04x(%d),  returnInfo = 0x%02x !!!\n", returnCode, returnCode, returnInfo);  
;;;1033                   
;;;1034                   if(ptsreaderDepositResultCallback != NULL)
;;;1035                   {
;;;1036                       ptsreaderDepositResultCallback(FALSE, returnInfo, returnCode);
;;;1037                   }
;;;1038                   
;;;1039                   sprintf(title, "LOCK(0x%02x:%d)", returnInfo, returnCode);
;;;1040                   DataProcessSendStatusData(0, title, WEB_POST_EVENT_ALERT);                
;;;1041   
;;;1042                   retval = TRUE; //完成 離開刷卡 loop    
;;;1043                   
;;;1044                   break;
;;;1045   				*/
;;;1046           }
;;;1047       }
;;;1048   #endif
;;;1049       if(retval)
001588  e3560000          CMP      r6,#0
00158c  0a000005          BEQ      |L1.5544|
;;;1050   	{
;;;1051           sysprintf(" [INFO Card Reader] <EPMReaderProcess>  : [%d] ticks\n", (int)(xTaskGetTickCount() - tickLocalStart));  
001590  ebfffffe          BL       xTaskGetTickCount
001594  e0408007          SUB      r8,r0,r7
001598  e1a01008          MOV      r1,r8
00159c  e28f0f65          ADR      r0,|L1.5944|
0015a0  ebfffffe          BL       sysprintf
0015a4  ea000002          B        |L1.5556|
                  |L1.5544|
;;;1052   	}
;;;1053   	else
;;;1054   	{// 清成沒有卡片
;;;1055   		currentCardType = CARD_TYPE_ID_NONE;
0015a8  e3a00000          MOV      r0,#0
0015ac  e51f1f08          LDR      r1,|L1.1708|
0015b0  e5c10000          STRB     r0,[r1,#0]  ; currentCardType
                  |L1.5556|
;;;1056   	}
;;;1057       
;;;1058       return retval;
0015b4  e1a00006          MOV      r0,r6
;;;1059   }
0015b8  e8bd83f8          POP      {r3-r9,pc}
;;;1060   BOOL EPMReaderSignOnProcess(void)
                          ENDP

                  EPMReaderSignOnProcess PROC
0015bc  e3a00001          MOV      r0,#1
;;;1061   {
;;;1062       #if(1)
;;;1063       return TRUE;
;;;1064       #else
;;;1065       uint16_t returnInfo, returnCode;
;;;1066       time_t epmUTCTime = GetCurrentUTCTime();
;;;1067       returnInfo = ECCPPRReset(&returnInfo, &returnCode, epmUTCTime, epmUTCTime, TRUE);
;;;1068   
;;;1069       if(returnInfo == CARD_MESSAGE_RETURN_SUCCESS)
;;;1070       { 
;;;1071           sysprintf("\r\n     -[info]-> EPMReaderSignOnProcess ECCPPRReset SUCCESS!!\n");
;;;1072           return TRUE;
;;;1073       }
;;;1074       else
;;;1075       {
;;;1076           sysprintf("\r\n     -[info]-> EPMReaderSignOnProcess ECCPPRReset ERROR!!\n");
;;;1077           //先只做一次
;;;1078           return TRUE;
;;;1079           //return FALSE;
;;;1080       }
;;;1081       #endif
;;;1082   }
0015c0  e12fff1e          BX       lr
;;;1083   
                          ENDP

                  EPMReaderGetBootedStatus PROC
;;;1084   BOOL EPMReaderGetBootedStatus(void)
0015c4  e92d4010          PUSH     {r4,lr}
;;;1085   {
;;;1086       if(readVN() == CARD_MESSAGE_RETURN_SUCCESS)
0015c8  ebfffffe          BL       readVN
0015cc  e3500002          CMP      r0,#2
0015d0  1a000001          BNE      |L1.5596|
;;;1087           return TRUE;
0015d4  e3a00001          MOV      r0,#1
                  |L1.5592|
;;;1088       else
;;;1089           return FALSE;
;;;1090   }
0015d8  e8bd8010          POP      {r4,pc}
                  |L1.5596|
0015dc  e3a00000          MOV      r0,#0                 ;1089
0015e0  eafffffc          B        |L1.5592|
;;;1091   
                          ENDP

                  EPMReaderGetBootedStatusEx PROC
;;;1092   
;;;1093   BOOL EPMReaderGetBootedStatusEx(void)
0015e4  e92d407c          PUSH     {r2-r6,lr}
;;;1094   {
;;;1095       BOOL resultFlag1 = FALSE;
0015e8  e3a05000          MOV      r5,#0
;;;1096       BOOL resultFlag2 = FALSE;
0015ec  e3a06000          MOV      r6,#0
;;;1097       uint32_t CTSValue;
;;;1098       uint8_t* receiveData;
;;;1099   	uint16_t receiveDataLen;
;;;1100       EPMReaderFlushBuffer();
0015f0  ebfffffe          BL       EPMReaderFlushBuffer
;;;1101       EPMReaderSendCmd(readVNCmd,sizeof(readVNCmd));
0015f4  e3a01008          MOV      r1,#8
0015f8  e51f05f8          LDR      r0,|L1.4104|
0015fc  ebfffffe          BL       EPMReaderSendCmd
;;;1102       memset(receiveData,0x00,sizeof(readVNCmd));
001600  e3a01008          MOV      r1,#8
001604  e59d0004          LDR      r0,[sp,#4]
001608  ebfffffe          BL       __aeabi_memclr
;;;1103       memset(rxBuffer,0x00,sizeof(readVNCmd));
00160c  e3a01008          MOV      r1,#8
001610  e59f0158          LDR      r0,|L1.6000|
001614  ebfffffe          BL       __aeabi_memclr
;;;1104       EPMReaderReceiveCmd(1000, &receiveData, &receiveDataLen);
001618  e1a0200d          MOV      r2,sp
00161c  e28d1004          ADD      r1,sp,#4
001620  e3a00ffa          MOV      r0,#0x3e8
001624  ebfffffe          BL       EPMReaderReceiveCmd
;;;1105       /*
;;;1106       if(receiveDataLen > 0)
;;;1107       {
;;;1108           terninalPrintf("receiveDataLen=");
;;;1109           int counter = 0; 
;;;1110           //for(int i=0;i<receiveDataLen;i++)
;;;1111           for(int i=0;i<sizeof(readVNCmd);i++)
;;;1112           {
;;;1113   
;;;1114               terninalPrintf("%02x ",receiveData[i]);
;;;1115           }
;;;1116           terninalPrintf("\n  ");
;;;1117       
;;;1118       }
;;;1119       */
;;;1120       //pUartInterface->ioctlFunc(UART_IOC_SETRTSSIGNAL, UART_RTS_LOW, 0);
;;;1121       
;;;1122       
;;;1123       //UINT32 CTSFlag,uArg0;
;;;1124       //pUartInterface->ioctlFunc(UART_IOC_GETCTSSTATE, (UINT32)&uArg0, (UINT32)&CTSFlag);
;;;1125       
;;;1126       //terninalPrintf("CTSFlag=%d\n",CTSFlag);
;;;1127       //terninalPrintf("inpw(REG_UART0_MSR+uOffset)=%32b\n",inpw(REG_UART0_MSR+UART2*UARTOFFSET));
;;;1128       
;;;1129       if(memcmp(readVNCmd,receiveData,sizeof(readVNCmd)) == 0)
001628  e3a02008          MOV      r2,#8
00162c  e51f062c          LDR      r0,|L1.4104|
001630  e59d1004          LDR      r1,[sp,#4]
001634  ebfffffe          BL       memcmp
001638  e3500000          CMP      r0,#0
00163c  1a000003          BNE      |L1.5712|
;;;1130       {
;;;1131           //pUartInterface->ioctlFunc(UART_IOC_SETRTSSIGNAL, UART_RTS_HIGH, 0);
;;;1132           terninalPrintf("RX & TX interconnect success.\r\n");
001640  e28f0f4b          ADR      r0,|L1.6004|
001644  ebfffffe          BL       terninalPrintf
;;;1133           resultFlag1 = TRUE;
001648  e3a05001          MOV      r5,#1
00164c  ea000002          B        |L1.5724|
                  |L1.5712|
;;;1134           //return TRUE;
;;;1135       }
;;;1136       else
;;;1137       {
;;;1138           terninalPrintf("RX & TX interconnect error.\r\n");
001650  e28f0f4f          ADR      r0,|L1.6036|
001654  ebfffffe          BL       terninalPrintf
;;;1139           //pUartInterface->ioctlFunc(UART_IOC_SETRTSSIGNAL, UART_RTS_HIGH, 0);
;;;1140           resultFlag1 = FALSE;
001658  e3a05000          MOV      r5,#0
                  |L1.5724|
;;;1141           //return FALSE;
;;;1142       }
;;;1143       pUartInterface->ioctlFunc(UART_IOC_SETRTSSIGNAL, UART_RTS_LOW, 0);
00165c  e51f0a74          LDR      r0,|L1.3056|
001660  e5900000          LDR      r0,[r0,#0]  ; pUartInterface
001664  e3a02000          MOV      r2,#0
001668  e1a01002          MOV      r1,r2
00166c  e5903018          LDR      r3,[r0,#0x18]
001670  e3a00010          MOV      r0,#0x10
001674  e12fff33          BLX      r3
;;;1144       CTSValue =  inpw(REG_UART0_MSR+UART2*UARTOFFSET) ;
001678  e3a0032e          MOV      r0,#0xb8000000
00167c  e5904214          LDR      r4,[r0,#0x214]
;;;1145       //terninalPrintf("inpw(REG_UART0_MSR+uOffset)=%32b\n",CTSValue);
;;;1146       if(CTSValue & 0x01 )
001680  e3140001          TST      r4,#1
001684  0a000003          BEQ      |L1.5784|
;;;1147       {
;;;1148           terninalPrintf("RTS & CTS interconnect success.\r\n");
001688  e28f0f49          ADR      r0,|L1.6068|
00168c  ebfffffe          BL       terninalPrintf
;;;1149           resultFlag2 = TRUE;
001690  e3a06001          MOV      r6,#1
001694  ea000002          B        |L1.5796|
                  |L1.5784|
;;;1150       }
;;;1151       else
;;;1152       {
;;;1153           terninalPrintf("RTS & CTS interconnect error.\r\n");
001698  e28f0f4e          ADR      r0,|L1.6104|
00169c  ebfffffe          BL       terninalPrintf
;;;1154           resultFlag2 = FALSE;
0016a0  e3a06000          MOV      r6,#0
                  |L1.5796|
;;;1155       }
;;;1156       
;;;1157       return resultFlag1 & resultFlag2;
0016a4  e0050006          AND      r0,r5,r6
;;;1158   }
0016a8  e8bd807c          POP      {r2-r6,pc}
;;;1159   
                          ENDP

                  EPMReaderSaveFile PROC
;;;1160   void EPMReaderSaveFile(RTC_TIME_DATA_T pt, uint16_t paraValue)
0016ac  e59dc020          LDR      r12,[sp,#0x20]
;;;1161   {  
;;;1162       #if(1)
;;;1163       
;;;1164       #else
;;;1165       switch(currentCardType)
;;;1166       {
;;;1167       	case CARD_TYPE_ID_IPASS:
;;;1168           	IPASSSaveFile(pt, paraValue, currentTargetDeduct, readerId, dataStr, timeStr);
;;;1169   			break;
;;;1170   		case CARD_TYPE_ID_ECC:
;;;1171               ECCSaveFile(currentTargetDeduct, epmCurrentUTCTime);
;;;1172   			break;
;;;1173   	}
;;;1174       #endif
;;;1175   	
;;;1176   }
0016b0  e12fff1e          BX       lr
;;;1177   
                          ENDP

                  EPMReaderSaveFilePure PROC
;;;1178   void EPMReaderSaveFilePure(void)
0016b4  e12fff1e          BX       lr
;;;1179   {    
;;;1180       #if(1)
;;;1181   
;;;1182       #else
;;;1183       switch(currentCardType)
;;;1184       {
;;;1185       	case CARD_TYPE_ID_IPASS:
;;;1186           	IPASSSaveFilePure(currentTargetDeduct, readerId, dataStr, timeStr);
;;;1187   			break;
;;;1188   		case CARD_TYPE_ID_ECC:
;;;1189               ECCSaveFilePure(currentTargetDeduct, epmCurrentUTCTime);
;;;1190   			break;
;;;1191   	}
;;;1192   	#endif
;;;1193   }
;;;1194   
                          ENDP

                  EPMReaderLRC PROC
;;;1195   char EPMReaderLRC(uint8_t *array,int start,int len)
0016b8  e92d4010          PUSH     {r4,lr}
;;;1196   {
0016bc  e1a03000          MOV      r3,r0
0016c0  e1a0c002          MOV      r12,r2
;;;1197       int i;
;;;1198       char temp;
;;;1199       temp = array[start];
0016c4  e7d30001          LDRB     r0,[r3,r1]
;;;1200       for(i=(start+1); i<(start+len); i++)
0016c8  e2812001          ADD      r2,r1,#1
0016cc  ea000002          B        |L1.5852|
                  |L1.5840|
;;;1201       {
;;;1202           temp ^= array[i];
0016d0  e7d34002          LDRB     r4,[r3,r2]
0016d4  e0200004          EOR      r0,r0,r4
0016d8  e2822001          ADD      r2,r2,#1              ;1200
                  |L1.5852|
0016dc  e081400c          ADD      r4,r1,r12             ;1200
0016e0  e1540002          CMP      r4,r2                 ;1200
0016e4  cafffff9          BGT      |L1.5840|
;;;1203           //sysprintf("we got num %02d cnData = 0x%x\n",i,array[i]);
;;;1204       }
;;;1205       //sysprintf("Get EPMReaderLRC 0x%02x!\n",temp);
;;;1206       return temp;
;;;1207   }
0016e8  e8bd8010          POP      {r4,pc}
;;;1208   void EPMReaderFlushBuffer(void)
                          ENDP

                  EPMReaderSetDisableReaderFlag PROC
;;;1220   
;;;1221   void EPMReaderSetDisableReaderFlag(BOOL flag)
0016ec  e51f1694          LDR      r1,|L1.4192|
;;;1222   {
;;;1223       disableReaderFlag = flag;
0016f0  e5c10000          STRB     r0,[r1,#0]  ; disableReaderFlag
;;;1224   }
0016f4  e12fff1e          BX       lr
;;;1225   
                          ENDP

                  EPMReaderGetVersion PROC
;;;1226   void EPMReaderGetVersion(char* ReaderVerBuf)
0016f8  e1a01000          MOV      r1,r0
;;;1227   {      
;;;1228       for(int i = 0; i<verStrLen; i++)
0016fc  e3a00000          MOV      r0,#0
001700  ea000003          B        |L1.5908|
                  |L1.5892|
;;;1229       {     
;;;1230           ReaderVerBuf[i] = verStr[i];
001704  e59f20ec          LDR      r2,|L1.6136|
001708  e7d22000          LDRB     r2,[r2,r0]
00170c  e7c12000          STRB     r2,[r1,r0]
001710  e2800001          ADD      r0,r0,#1              ;1228
                  |L1.5908|
001714  e59f20e0          LDR      r2,|L1.6140|
001718  e5922000          LDR      r2,[r2,#0]            ;1228  ; verStrLen
00171c  e1500002          CMP      r0,r2                 ;1228
001720  bafffff7          BLT      |L1.5892|
;;;1231           
;;;1232           //sysprintf("%c", verStr[i]);
;;;1233           //terninalPrintf("%c", verStr[i]);
;;;1234       }
;;;1235    
;;;1236   }
001724  e12fff1e          BX       lr
;;;1237   
                          ENDP

                  |L1.5928|
                          DCD      ptsreaderDepositResultCallback
                  |L1.5932|
                          DCD      currentTargetDeduct
                  |L1.5936|
                          DCD      checkCounter
                  |L1.5940|
                          DCD      ||.constdata||+0x1c0
                  |L1.5944|
001738  205b494e          DCB      " [INFO Card Reader] <EPMReaderProcess>  : [%d] ticks\n",0
00173c  464f2043
001740  61726420
001744  52656164
001748  65725d20
00174c  3c45504d
001750  52656164
001754  65725072
001758  6f636573
00175c  733e2020
001760  3a205b25
001764  645d2074
001768  69636b73
00176c  0a00    
00176e  00                DCB      0
00176f  00                DCB      0
                  |L1.6000|
                          DCD      rxBuffer
                  |L1.6004|
001774  52582026          DCB      "RX & TX interconnect success.\r\n",0
001778  20545820
00177c  696e7465
001780  72636f6e
001784  6e656374
001788  20737563
00178c  63657373
001790  2e0d0a00
                  |L1.6036|
001794  52582026          DCB      "RX & TX interconnect error.\r\n",0
001798  20545820
00179c  696e7465
0017a0  72636f6e
0017a4  6e656374
0017a8  20657272
0017ac  6f722e0d
0017b0  0a00    
0017b2  00                DCB      0
0017b3  00                DCB      0
                  |L1.6068|
0017b4  52545320          DCB      "RTS & CTS interconnect success.\r\n",0
0017b8  26204354
0017bc  5320696e
0017c0  74657263
0017c4  6f6e6e65
0017c8  63742073
0017cc  75636365
0017d0  73732e0d
0017d4  0a00    
0017d6  00                DCB      0
0017d7  00                DCB      0
                  |L1.6104|
0017d8  52545320          DCB      "RTS & CTS interconnect error.\r\n",0
0017dc  26204354
0017e0  5320696e
0017e4  74657263
0017e8  6f6e6e65
0017ec  63742065
0017f0  72726f72
0017f4  2e0d0a00
                  |L1.6136|
                          DCD      verStr
                  |L1.6140|
                          DCD      verStrLen

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dataStr
                          %        9
                  timeStr
                          %        9
                  verStr
                          %        64
                  rxBuffer
                          %        500
                  rxTemp
                          %        514
                  unixTime
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0d0a7e7e          DCB      0x0d,0x0a,0x7e,0x7e
000004  7e204550          DCB      0x7e,0x20,0x45,0x50
000008  4d526561          DCB      0x4d,0x52,0x65,0x61
00000c  64657250          DCB      0x64,0x65,0x72,0x50
000010  61727365          DCB      0x61,0x72,0x73,0x65
000014  724d6573          DCB      0x72,0x4d,0x65,0x73
000018  73616765          DCB      0x73,0x61,0x67,0x65
00001c  206d7367          DCB      0x20,0x6d,0x73,0x67
000020  54797065          DCB      0x54,0x79,0x70,0x65
000024  203d2025          DCB      0x20,0x3d,0x20,0x25
000028  645b2564          DCB      0x64,0x5b,0x25,0x64
00002c  5d206572          DCB      0x5d,0x20,0x65,0x72
000030  726f7220          DCB      0x72,0x6f,0x72,0x20
000034  28726574          DCB      0x28,0x72,0x65,0x74
000038  75726e43          DCB      0x75,0x72,0x6e,0x43
00003c  6f646520          DCB      0x6f,0x64,0x65,0x20
000040  3d3d204e          DCB      0x3d,0x3d,0x20,0x4e
000044  554c4c29          DCB      0x55,0x4c,0x4c,0x29
000048  7e7e7e3e          DCB      0x7e,0x7e,0x7e,0x3e
00004c  0d0a0000          DCB      0x0d,0x0a,0x00,0x00
000050  45504d52          DCB      0x45,0x50,0x4d,0x52
000054  65616465          DCB      0x65,0x61,0x64,0x65
000058  72506172          DCB      0x72,0x50,0x61,0x72
00005c  7365724d          DCB      0x73,0x65,0x72,0x4d
000060  65737361          DCB      0x65,0x73,0x73,0x61
000064  67652870          DCB      0x67,0x65,0x28,0x70
000068  61727365          DCB      0x61,0x72,0x73,0x65
00006c  72207479          DCB      0x72,0x20,0x74,0x79
000070  70653a25          DCB      0x70,0x65,0x3a,0x25
000074  64293a20          DCB      0x64,0x29,0x3a,0x20
000078  68656164          DCB      0x68,0x65,0x61,0x64
00007c  65722065          DCB      0x65,0x72,0x20,0x65
000080  7272205b          DCB      0x72,0x72,0x20,0x5b
000084  30782530          DCB      0x30,0x78,0x25,0x30
000088  32783a20          DCB      0x32,0x78,0x3a,0x20
00008c  30784541          DCB      0x30,0x78,0x45,0x41
000090  5d0a0000          DCB      0x5d,0x0a,0x00,0x00
000094  45504d52          DCB      0x45,0x50,0x4d,0x52
000098  65616465          DCB      0x65,0x61,0x64,0x65
00009c  72506172          DCB      0x72,0x50,0x61,0x72
0000a0  7365724d          DCB      0x73,0x65,0x72,0x4d
0000a4  65737361          DCB      0x65,0x73,0x73,0x61
0000a8  67652870          DCB      0x67,0x65,0x28,0x70
0000ac  61727365          DCB      0x61,0x72,0x73,0x65
0000b0  72207479          DCB      0x72,0x20,0x74,0x79
0000b4  70653a25          DCB      0x70,0x65,0x3a,0x25
0000b8  64293a20          DCB      0x64,0x29,0x3a,0x20
0000bc  656e6420          DCB      0x65,0x6e,0x64,0x20
0000c0  666c6167          DCB      0x66,0x6c,0x61,0x67
0000c4  20657272          DCB      0x20,0x65,0x72,0x72
0000c8  205b3078          DCB      0x20,0x5b,0x30,0x78
0000cc  25303278          DCB      0x25,0x30,0x32,0x78
0000d0  3a203078          DCB      0x3a,0x20,0x30,0x78
0000d4  25303278          DCB      0x25,0x30,0x32,0x78
0000d8  5d0a0000          DCB      0x5d,0x0a,0x00,0x00
0000dc  45504d52          DCB      0x45,0x50,0x4d,0x52
0000e0  65616465          DCB      0x65,0x61,0x64,0x65
0000e4  72506172          DCB      0x72,0x50,0x61,0x72
0000e8  7365724d          DCB      0x73,0x65,0x72,0x4d
0000ec  65737361          DCB      0x65,0x73,0x73,0x61
0000f0  67652870          DCB      0x67,0x65,0x28,0x70
0000f4  61727365          DCB      0x61,0x72,0x73,0x65
0000f8  72207479          DCB      0x72,0x20,0x74,0x79
0000fc  70653a25          DCB      0x70,0x65,0x3a,0x25
000100  64293a20          DCB      0x64,0x29,0x3a,0x20
000104  74797065          DCB      0x74,0x79,0x70,0x65
000108  20657272          DCB      0x20,0x65,0x72,0x72
00010c  205b3078          DCB      0x20,0x5b,0x30,0x78
000110  25303278          DCB      0x25,0x30,0x32,0x78
000114  2c203078          DCB      0x2c,0x20,0x30,0x78
000118  25303278          DCB      0x25,0x30,0x32,0x78
00011c  203a2030          DCB      0x20,0x3a,0x20,0x30
000120  78253032          DCB      0x78,0x25,0x30,0x32
000124  782c2030          DCB      0x78,0x2c,0x20,0x30
000128  78253032          DCB      0x78,0x25,0x30,0x32
00012c  785d0a00          DCB      0x78,0x5d,0x0a,0x00
000130  0d0a203d          DCB      0x0d,0x0a,0x20,0x3d
000134  3e207265          DCB      0x3e,0x20,0x72,0x65
000138  61645469          DCB      0x61,0x64,0x54,0x69
00013c  6d652028          DCB      0x6d,0x65,0x20,0x28
000140  2564295b          DCB      0x25,0x64,0x29,0x5b
000144  25735d5b          DCB      0x25,0x73,0x5d,0x5b
000148  25735d20          DCB      0x25,0x73,0x5d,0x20
00014c  3a205b30          DCB      0x3a,0x20,0x5b,0x30
000150  78253032          DCB      0x78,0x25,0x30,0x32
000154  78203a20          DCB      0x78,0x20,0x3a,0x20
000158  30782530          DCB      0x30,0x78,0x25,0x30
00015c  3278203a          DCB      0x32,0x78,0x20,0x3a
000160  20307825          DCB      0x20,0x30,0x78,0x25
000164  30327820          DCB      0x30,0x32,0x78,0x20
000168  3a203078          DCB      0x3a,0x20,0x30,0x78
00016c  25303278          DCB      0x25,0x30,0x32,0x78
000170  5d200d0a          DCB      0x5d,0x20,0x0d,0x0a
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  20212121          DCB      0x20,0x21,0x21,0x21
00017c  21212121          DCB      0x21,0x21,0x21,0x21
000180  72656164          DCB      0x72,0x65,0x61,0x64
000184  564e2829          DCB      0x56,0x4e,0x28,0x29
000188  20434152          DCB      0x20,0x43,0x41,0x52
00018c  445f4d45          DCB      0x44,0x5f,0x4d,0x45
000190  53534147          DCB      0x53,0x53,0x41,0x47
000194  455f5245          DCB      0x45,0x5f,0x52,0x45
000198  5455524e          DCB      0x54,0x55,0x52,0x4e
00019c  5f54494d          DCB      0x5f,0x54,0x49,0x4d
0001a0  454f5554          DCB      0x45,0x4f,0x55,0x54
0001a4  204a5553          DCB      0x20,0x4a,0x55,0x53
0001a8  5420464f          DCB      0x54,0x20,0x46,0x4f
0001ac  52204445          DCB      0x52,0x20,0x44,0x45
0001b0  42554720          DCB      0x42,0x55,0x47,0x20
0001b4  21212121          DCB      0x21,0x21,0x21,0x21
0001b8  2121210a          DCB      0x21,0x21,0x21,0x0a
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  203d3d3e          DCB      0x20,0x3d,0x3d,0x3e
0001c4  20726561          DCB      0x20,0x72,0x65,0x61
0001c8  64434e20          DCB      0x64,0x43,0x4e,0x20
0001cc  72657475          DCB      0x72,0x65,0x74,0x75
0001d0  726e2046          DCB      0x72,0x6e,0x20,0x46
0001d4  4c415345          DCB      0x4c,0x41,0x53,0x45
0001d8  3a206572          DCB      0x3a,0x20,0x65,0x72
0001dc  726f7243          DCB      0x72,0x6f,0x72,0x43
0001e0  6f646520          DCB      0x6f,0x64,0x65,0x20
0001e4  3d203078          DCB      0x3d,0x20,0x30,0x78
0001e8  25303478          DCB      0x25,0x30,0x34,0x78
0001ec  28256429          DCB      0x28,0x25,0x64,0x29
0001f0  2c202072          DCB      0x2c,0x20,0x20,0x72
0001f4  65747572          DCB      0x65,0x74,0x75,0x72
0001f8  6e496e66          DCB      0x6e,0x49,0x6e,0x66
0001fc  6f203d20          DCB      0x6f,0x20,0x3d,0x20
000200  30782530          DCB      0x30,0x78,0x25,0x30
000204  32782021          DCB      0x32,0x78,0x20,0x21
000208  21210a00          DCB      0x21,0x21,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  readVNCmd
000000  ea010000          DCB      0xea,0x01,0x00,0x00
000004  01009000          DCB      0x01,0x00,0x90,0x00
                  readCNCmd
000008  ea020100          DCB      0xea,0x02,0x01,0x00
00000c  01009000          DCB      0x01,0x00,0x90,0x00
                  pUartInterface
                          DCD      0x00000000
                  cnData
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  cnLen
00001c  00                DCB      0x00
                  dataTime
00001d  000000            DCB      0x00,0x00,0x00
000020  00                DCB      0x00
                  machineNo
000021  000102            DCB      0x00,0x01,0x02
000024  03000000          DCB      0x03,0x00,0x00,0x00
                  verStrLen
                          DCD      0x00000000
                  readerId
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  powerUpTick
                          DCD      0x00000000
                  needInitReaderFlag
000038  01                DCB      0x01
                  currentCardType
000039  000000            DCB      0x00,0x00,0x00
                  epmCurrentUTCTime
                          DCD      0x00000000
                  disableReaderFlag
000040  00000000          DCB      0x00,0x00,0x00,0x00
                  checkCounter
                          DCD      0x00000000
                  currentTargetDeduct
000048  00000000          DCB      0x00,0x00,0x00,0x00
                  utcTime
                          DCD      0x00000000
                  ptsreaderDepositResultCallback
                          DCD      0x00000000
