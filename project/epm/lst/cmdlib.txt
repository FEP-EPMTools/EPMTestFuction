; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\cmdlib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\cmdlib.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\cmdlib.crf src\SysHal\cmdlib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  getChecksum PROC
;;;51     
;;;52     static uint16_t getChecksum(uint8_t* pTarget, uint16_t len, char* str)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;53     {
000004  e1a03000          MOV      r3,r0
000008  e1a0c001          MOV      r12,r1
00000c  e1a04002          MOV      r4,r2
;;;54         int i;
;;;55         uint16_t checksum = 0;
000010  e3a00000          MOV      r0,#0
;;;56         uint8_t* pr = (uint8_t*)pTarget;
000014  e1a02003          MOV      r2,r3
;;;57         for(i = 2; i< len - sizeof(uint16_t) - sizeof(CmdEnd); i++) //???checksum ?????
000018  e3a01002          MOV      r1,#2
00001c  ea000004          B        |L1.52|
                  |L1.32|
;;;58         {
;;;59             checksum = checksum + pr[i];
000020  e7d25001          LDRB     r5,[r2,r1]
000024  e0855000          ADD      r5,r5,r0
000028  e1a00805          LSL      r0,r5,#16
00002c  e1a00820          LSR      r0,r0,#16
000030  e2811001          ADD      r1,r1,#1              ;57
                  |L1.52|
000034  e24c5006          SUB      r5,r12,#6             ;57
000038  e1550001          CMP      r5,r1                 ;57
00003c  8afffff7          BHI      |L1.32|
;;;60         }
;;;61         //sysprintf("  -- getChecksum (%s) : checksum = 0x%x (%d)\r\n", str, checksum, checksum); 
;;;62         return checksum;
;;;63     }
000040  e8bd8030          POP      {r4,r5,pc}
;;;64     
                          ENDP

                  initCmd PROC
;;;65     static void initCmd(uint8_t cmdId, void* data, void* para)
000044  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;66     {
000048  e24dd008          SUB      sp,sp,#8
00004c  e1a0b000          MOV      r11,r0
000050  e1a05001          MOV      r5,r1
;;;67         uint16_t cmdLen, paraLen;
;;;68         CmdHeader* pCmdHeader;
;;;69         CmdEnd* pCmdEnd;
;;;70         uint8_t* pPara;
;;;71         char* pStr;
;;;72         
;;;73         switch(cmdId)
000054  e35b0009          CMP      r11,#9
000058  308ff10b          ADDCC    pc,pc,r11,LSL #2
00005c  ea00003f          B        |L1.352|
000060  ea00003e          B        |L1.352|
000064  ea000006          B        |L1.132|
000068  ea00003c          B        |L1.352|
00006c  ea00000d          B        |L1.168|
000070  ea00003a          B        |L1.352|
000074  ea000014          B        |L1.204|
000078  ea00001c          B        |L1.240|
00007c  ea000024          B        |L1.276|
000080  ea00002c          B        |L1.312|
                  |L1.132|
;;;74         {
;;;75             case CMD_VERSION_ID: 
000084  e1a00000          MOV      r0,r0
;;;76             {
;;;77                 CmdVersion* pCmd = (CmdVersion*)data;
000088  e1a00005          MOV      r0,r5
;;;78                 cmdLen = sizeof(CmdVersion);
00008c  e3a07036          MOV      r7,#0x36
;;;79                 paraLen = sizeof(versionPara);
000090  e3a08025          MOV      r8,#0x25
;;;80                 
;;;81                 pCmdHeader = &(pCmd->header);
000094  e1a04000          MOV      r4,r0
;;;82                 pCmdEnd = &(pCmd->end);
000098  e2806032          ADD      r6,r0,#0x32
;;;83                 pPara = (uint8_t*)&(pCmd->para);
00009c  e280900d          ADD      r9,r0,#0xd
;;;84                 pStr = "CMD_VERSION_ID";
0000a0  e28fae2a          ADR      r10,|L1.840|
;;;85             }
;;;86                 break;
0000a4  ea000030          B        |L1.364|
                  |L1.168|
;;;87             case CMD_TRANSACTION_DATA_ID: 
0000a8  e1a00000          MOV      r0,r0
;;;88             {
;;;89                 CmdTransaction* pCmd = (CmdTransaction*)data;
0000ac  e1a00005          MOV      r0,r5
;;;90                 cmdLen = sizeof(CmdTransaction);
0000b0  e3a07022          MOV      r7,#0x22
;;;91                 paraLen = sizeof(transactionPara);
0000b4  e3a08011          MOV      r8,#0x11
;;;92                 
;;;93                 pCmdHeader = &(pCmd->header);
0000b8  e1a04000          MOV      r4,r0
;;;94                 pCmdEnd = &(pCmd->end);
0000bc  e280601e          ADD      r6,r0,#0x1e
;;;95                 pPara = (uint8_t*)&(pCmd->para);
0000c0  e280900d          ADD      r9,r0,#0xd
;;;96                 pStr = "CMD_TRANSACTION_DATA_ID";
0000c4  e28fafa3          ADR      r10,|L1.856|
;;;97             }
;;;98                 break;
0000c8  ea000027          B        |L1.364|
                  |L1.204|
;;;99             case CMD_EXCEED_TIME_ID: 
0000cc  e1a00000          MOV      r0,r0
;;;100            {
;;;101                CmdExceedTime* pCmd = (CmdExceedTime*)data;
0000d0  e1a00005          MOV      r0,r5
;;;102                cmdLen = sizeof(CmdExceedTime);
0000d4  e3a0701a          MOV      r7,#0x1a
;;;103                paraLen = sizeof(exceedTimePara);
0000d8  e3a08009          MOV      r8,#9
;;;104                
;;;105                pCmdHeader = &(pCmd->header);
0000dc  e1a04000          MOV      r4,r0
;;;106                pCmdEnd = &(pCmd->end);
0000e0  e2806016          ADD      r6,r0,#0x16
;;;107                pPara = (uint8_t*)&(pCmd->para);
0000e4  e280900d          ADD      r9,r0,#0xd
;;;108                pStr = "CMD_EXCEED_TIME_ID";
0000e8  e28fad0a          ADR      r10,|L1.880|
;;;109            }        
;;;110                break;   
0000ec  ea00001e          B        |L1.364|
                  |L1.240|
;;;111            case CMD_BATTERY_FAIL_ID: 
0000f0  e1a00000          MOV      r0,r0
;;;112            {
;;;113                CmdBatteryFail* pCmd = (CmdBatteryFail*)data;
0000f4  e1a00005          MOV      r0,r5
;;;114                cmdLen = sizeof(CmdBatteryFail);
0000f8  e3a07014          MOV      r7,#0x14
;;;115                paraLen = sizeof(batteryFailPara);
0000fc  e3a08003          MOV      r8,#3
;;;116                
;;;117                pCmdHeader = &(pCmd->header);
000100  e1a04000          MOV      r4,r0
;;;118                pCmdEnd = &(pCmd->end);
000104  e2806010          ADD      r6,r0,#0x10
;;;119                pPara = (uint8_t*)&(pCmd->para);
000108  e280900d          ADD      r9,r0,#0xd
;;;120                pStr = "CMD_BATTERY_FAIL_ID";
00010c  e28fae27          ADR      r10,|L1.900|
;;;121            }   
;;;122                break;  
000110  ea000015          B        |L1.364|
                  |L1.276|
;;;123            case CMD_FILE_FRANSFER_ID: 
000114  e1a00000          MOV      r0,r0
;;;124            {
;;;125                CmdFileTransfer* pCmd = (CmdFileTransfer*)data;
000118  e1a00005          MOV      r0,r5
;;;126                cmdLen = sizeof(CmdFileTransfer);
00011c  e3a07034          MOV      r7,#0x34
;;;127                paraLen = sizeof(fileTransferPara);
000120  e3a08023          MOV      r8,#0x23
;;;128                
;;;129                pCmdHeader = &(pCmd->header);
000124  e1a04000          MOV      r4,r0
;;;130                pCmdEnd = &(pCmd->end);
000128  e2806030          ADD      r6,r0,#0x30
;;;131                pPara = (uint8_t*)&(pCmd->para);
00012c  e280900d          ADD      r9,r0,#0xd
;;;132                pStr = "CMD_FILE_FRANSFER_ID";
000130  e28fae26          ADR      r10,|L1.920|
;;;133            }   
;;;134                break;  
000134  ea00000c          B        |L1.364|
                  |L1.312|
;;;135            case CMD_FILE_FRANSFER_DATA_ID: 
000138  e1a00000          MOV      r0,r0
;;;136            {
;;;137                CmdFileTransferData* pCmd = (CmdFileTransferData*)data;
00013c  e1a00005          MOV      r0,r5
;;;138                cmdLen = sizeof(CmdFileTransferData);
000140  e59f7268          LDR      r7,|L1.944|
;;;139                paraLen = sizeof(fileTransferDataPara);
000144  e2478011          SUB      r8,r7,#0x11
;;;140                
;;;141                pCmdHeader = &(pCmd->header);
000148  e1a04000          MOV      r4,r0
;;;142                pCmdEnd = &(pCmd->end);
00014c  e3e01e41          MVN      r1,#0x410
000150  e0406001          SUB      r6,r0,r1
;;;143                pPara = (uint8_t*)&(pCmd->para);
000154  e280900d          ADD      r9,r0,#0xd
;;;144                pStr = "CMD_FILE_FRANSFER_DATA_ID";
000158  e28faf95          ADR      r10,|L1.948|
;;;145            }   
;;;146                break;  
00015c  ea000002          B        |L1.364|
                  |L1.352|
;;;147            
;;;148            
;;;149            default:
000160  e1a00000          MOV      r0,r0
                  |L1.356|
;;;150                return;
;;;151        }
;;;152        memset(data, 0x0, cmdLen);
;;;153        //memcpy(&(data->header), &CmdHeaderDefault, sizeof(CmdHeader));  
;;;154        pCmdHeader->value[0] = CMD_HEADER_VALUE;
;;;155        pCmdHeader->value[1] = CMD_HEADER_VALUE2;
;;;156        
;;;157        pCmdHeader->cmdLen = cmdLen;  
;;;158        pCmdHeader->deviceId = GetMeterSetting()->epmid;//  GPIO_ReadBit(GPIOH, BIT11)+1;////DeviceID;
;;;159        pCmdHeader->cmdIndex = mCommandIndex++;    
;;;160        pCmdHeader->cmdId = cmdId;    
;;;161        pCmdHeader->paraLen = paraLen;
;;;162        
;;;163        memcpy(pPara, para, paraLen);
;;;164        
;;;165        pCmdEnd->checksum = getChecksum((uint8_t*)data, cmdLen, pStr); 
;;;166        
;;;167        pCmdEnd->value[0] = CMD_END_VALUE;
;;;168        pCmdEnd->value[1] = CMD_END_VALUE2;
;;;169    }
000164  e28dd014          ADD      sp,sp,#0x14
000168  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.364|
00016c  e1a00000          MOV      r0,r0                 ;86
000170  e1a01007          MOV      r1,r7                 ;152
000174  e1a00005          MOV      r0,r5                 ;152
000178  ebfffffe          BL       __aeabi_memclr
00017c  e3a000da          MOV      r0,#0xda              ;154
000180  e5c40000          STRB     r0,[r4,#0]            ;154
000184  e3a000ad          MOV      r0,#0xad              ;155
000188  e5c40001          STRB     r0,[r4,#1]            ;155
00018c  e5c47002          STRB     r7,[r4,#2]            ;157
000190  e1a00427          LSR      r0,r7,#8              ;157
000194  e5c40003          STRB     r0,[r4,#3]            ;157
000198  ebfffffe          BL       GetMeterSetting
00019c  e2800004          ADD      r0,r0,#4              ;158
0001a0  e58d0000          STR      r0,[sp,#0]            ;158
0001a4  ebfffffe          BL       __aeabi_uread4
0001a8  e2841004          ADD      r1,r4,#4              ;158
0001ac  e58d0004          STR      r0,[sp,#4]            ;158
0001b0  ebfffffe          BL       __aeabi_uwrite4
0001b4  e59f0214          LDR      r0,|L1.976|
0001b8  e1d000b0          LDRH     r0,[r0,#0]            ;159  ; mCommandIndex
0001bc  e5c40008          STRB     r0,[r4,#8]            ;159
0001c0  e1a00420          LSR      r0,r0,#8              ;159
0001c4  e5c40009          STRB     r0,[r4,#9]            ;159
0001c8  e59f0200          LDR      r0,|L1.976|
0001cc  e1d000b0          LDRH     r0,[r0,#0]            ;159  ; mCommandIndex
0001d0  e2800001          ADD      r0,r0,#1              ;159
0001d4  e3c00801          BIC      r0,r0,#0x10000        ;159
0001d8  e59f11f0          LDR      r1,|L1.976|
0001dc  e1c100b0          STRH     r0,[r1,#0]            ;159  ; mCommandIndex
0001e0  e5c4b00a          STRB     r11,[r4,#0xa]         ;160
0001e4  e5c4800b          STRB     r8,[r4,#0xb]          ;161
0001e8  e1a00428          LSR      r0,r8,#8              ;161
0001ec  e5c4000c          STRB     r0,[r4,#0xc]          ;161
0001f0  e1a02008          MOV      r2,r8                 ;163
0001f4  e1a00009          MOV      r0,r9                 ;163
0001f8  e59d1010          LDR      r1,[sp,#0x10]         ;163
0001fc  ebfffffe          BL       __aeabi_memcpy
000200  e1a0200a          MOV      r2,r10                ;165
000204  e1a01007          MOV      r1,r7                 ;165
000208  e1a00005          MOV      r0,r5                 ;165
00020c  ebfffffe          BL       getChecksum
000210  e5c60000          STRB     r0,[r6,#0]            ;165
000214  e1a00420          LSR      r0,r0,#8              ;165
000218  e5c60001          STRB     r0,[r6,#1]            ;165
00021c  e3a0001f          MOV      r0,#0x1f              ;167
000220  e5c60002          STRB     r0,[r6,#2]            ;167
000224  e3a000f1          MOV      r0,#0xf1              ;168
000228  e5c60003          STRB     r0,[r6,#3]            ;168
00022c  e1a00000          MOV      r0,r0
000230  eaffffcb          B        |L1.356|
;;;170    /*
                          ENDP

                  checkcmd PROC
;;;189    
;;;190    static void checkcmd(uint8_t* data, uint16_t len)
000234  e92d43f0          PUSH     {r4-r9,lr}
;;;191    {
000238  e24dd054          SUB      sp,sp,#0x54
00023c  e1a05000          MOV      r5,r0
000240  e1a07001          MOV      r7,r1
;;;192    	CmdHeader headerTmp;
;;;193    	CmdEnd endTmp;
;;;194        uint16_t checksumTmp;
;;;195    	memcpy(&headerTmp, data, sizeof(CmdHeader));
000244  e3a0200d          MOV      r2,#0xd
000248  e1a01005          MOV      r1,r5
00024c  e28d0044          ADD      r0,sp,#0x44
000250  ebfffffe          BL       __aeabi_memcpy
;;;196    	memcpy(&endTmp, data + len - sizeof(CmdEnd), sizeof(CmdEnd));
000254  e0850007          ADD      r0,r5,r7
000258  e2401004          SUB      r1,r0,#4
00025c  e3a02004          MOV      r2,#4
000260  e28d0040          ADD      r0,sp,#0x40
000264  ebfffffe          BL       __aeabi_memcpy
;;;197    	if ((headerTmp.value[0] != CMD_HEADER_VALUE) || (headerTmp.value[1] != CMD_HEADER_VALUE2))
000268  e5dd0044          LDRB     r0,[sp,#0x44]
00026c  e35000da          CMP      r0,#0xda
000270  1a000002          BNE      |L1.640|
000274  e5dd0045          LDRB     r0,[sp,#0x45]
000278  e35000ad          CMP      r0,#0xad
00027c  0a000003          BEQ      |L1.656|
                  |L1.640|
;;;198    	{
;;;199    		sysprintf("CmdHeader error !!\r\n");
000280  e28f0f53          ADR      r0,|L1.980|
000284  ebfffffe          BL       sysprintf
                  |L1.648|
;;;200    		return;
;;;201    	}
;;;202    
;;;203    	if ((endTmp.value[0] != CMD_END_VALUE) || (endTmp.value[1] != CMD_END_VALUE2))
;;;204    	{
;;;205    		sysprintf("CmdEnd error !!\r\n");
;;;206    		return;
;;;207    	}
;;;208    
;;;209    
;;;210    	checksumTmp = getChecksum((uint8_t*)data, len, "checkcmd");
;;;211    	if (checksumTmp != endTmp.checksum)
;;;212    	{
;;;213    		sysprintf("checksum error [0x%04x: 0x%04x]!!\r\n", checksumTmp, endTmp.checksum);
;;;214    		return;
;;;215    	}
;;;216    #if(BUILD_DEBUG_VERSION)
;;;217    	sysprintf("[CMD INFO] Command ID: 0x%02x (index: %d), from device: %d\r\n", headerTmp.cmdId, headerTmp.cmdIndex, headerTmp.deviceId);
;;;218    #endif
;;;219    	switch (headerTmp.cmdId)
;;;220    	{
;;;221    	case CMD_VERSION_ID:
;;;222    		{//DA AD 0C 01 03 14 16 18 52 00 1F F1
;;;223                CmdVersion* pCmdVersion = (CmdVersion*)data;
;;;224                
;;;225                if (pCmdVersion->header.paraLen != sizeof(versionPara))
;;;226                { 
;;;227                    sysprintf(" --> CMD_VERSION_ID len error: %d:%d\r\n", pCmdVersion->header.paraLen, sizeof(versionPara));
;;;228                }
;;;229                else
;;;230                {
;;;231                    sysprintf(" --> CMD_VERSION_ID: %03d, %03d, %03d\r\n", pCmdVersion->para.majorVer, pCmdVersion->para.minorVer, pCmdVersion->para.revisionVer);
;;;232                }
;;;233    		}
;;;234    		break;
;;;235        
;;;236        case CMD_TIME_CORRECTION_ID:
;;;237    		{//DA AD 13 02 0A E0 07 00 00 0A 1B 0D 18 27 04 7B 01 1F F1
;;;238                
;;;239    
;;;240                CmdTimeCorrection* pCmdTimeCorrection = (CmdTimeCorrection*)data; 
;;;241                if (pCmdTimeCorrection->header.paraLen != sizeof(timePara))
;;;242                { 
;;;243                    sysprintf(" --> CMD_TIME_CORRECTION_ID len error: %d:%d\r\n", pCmdTimeCorrection->header.paraLen, sizeof(timePara));
;;;244                    break;
;;;245                }            
;;;246                sysprintf(" --> CMD_TIME_CORRECTION_ID : [%04d/%02d/%02d %02d:%02d:%02d (%d)]\r\n",
;;;247                                                    pCmdTimeCorrection->para.u32Year, pCmdTimeCorrection->para.u8cMonth, pCmdTimeCorrection->para.u8cDay, 
;;;248                                                    pCmdTimeCorrection->para.u8cHour, pCmdTimeCorrection->para.u8cMinute, pCmdTimeCorrection->para.u8cSecond, pCmdTimeCorrection->para.u8cDayOfWeek);
;;;249                #if(JUST_TEST_LORA_CMD)
;;;250                #else
;;;251                #if(1)
;;;252                {
;;;253                    RTC_TIME_DATA_T time;
;;;254                    time_t      rawtime;
;;;255                    time.u32Year = pCmdTimeCorrection->para.u32Year;
;;;256                    time.u32cMonth = pCmdTimeCorrection->para.u8cMonth;
;;;257                    time.u32cDay = pCmdTimeCorrection->para.u8cDay;
;;;258                    time.u32cHour = pCmdTimeCorrection->para.u8cHour;
;;;259                    time.u32cMinute = pCmdTimeCorrection->para.u8cMinute;
;;;260                    time.u32cSecond = pCmdTimeCorrection->para.u8cSecond;
;;;261                    time.u32cDayOfWeek = pCmdTimeCorrection->para.u8cDayOfWeek;//no care
;;;262                    
;;;263                    rawtime =  RTC2Time(&time);
;;;264                    
;;;265                    Time2RTC(rawtime, &time);
;;;266                    
;;;267          
;;;268                    sysprintf(" --> CMD_TIME_CORRECTION_ID _!!!! : [%04d/%02d/%02d %02d:%02d:%02d (%d)]\r\n",
;;;269                                                        time.u32Year, time.u32cMonth, time.u32cDay, 
;;;270                                                        time.u32cHour, time.u32cMinute, time.u32cSecond, time.u32cDayOfWeek);
;;;271                    //void SetOSTime(uint32_t u32Year, uint32_t u32cMonth, uint32_t u32cDay, uint32_t u32cHour, uint32_t u32cMinute, uint32_t u32cSecond, uint32_t u32cDayOfWeek);
;;;272                    if(SetOSTime(time.u32Year, time.u32cMonth, time.u32cDay, time.u32cHour, time.u32cMinute, time.u32cSecond, time.u32cDayOfWeek) == TRUE)
;;;273                    {
;;;274                        //RefreshMainScreen();
;;;275                        //RefreshSpaceStatusScreen();
;;;276                        TariffUpdateCurrentTariffData();
;;;277                        GuiManagerRefreshScreen();
;;;278                    }
;;;279                }
;;;280                #endif
;;;281                #endif
;;;282    		}
;;;283    		break;
;;;284        case CMD_ACK_ID:
;;;285    		{
;;;286                CmdAck* pCmdAck = (CmdAck*)data;  
;;;287                if (pCmdAck->header.paraLen != sizeof(ackPara))
;;;288                { 
;;;289                    sysprintf(" --> CMD_ACK_ID len error: %d:%d\r\n", pCmdAck->header.paraLen, sizeof(ackPara));
;;;290                    break;
;;;291                } 
;;;292                #if(BUILD_DEBUG_VERSION)            
;;;293                sysprintf(" --> CMD_ACK_ID : cmdIndex = %d...\r\n", pCmdAck->para.cmdIndex);
;;;294                #endif
;;;295                if(pCmdAck->para.deviceId == GetMeterSetting()->epmid/*(GPIO_ReadBit(GPIOH, BIT11)+1)*/)
;;;296                {
;;;297                    DataAgentRemoveDataByAck(pCmdAck->para.cmdIndex);
;;;298                }
;;;299                else
;;;300                {
;;;301                    #if(BUILD_DEBUG_VERSION)            
;;;302                    sysprintf(" --> CMD_ACK_ID : deviceId = %d (local : %d)...\r\n", pCmdAck->para.deviceId, GetMeterData()->deviceId/*(GPIO_ReadBit(GPIOH, BIT11)+1)*/);
;;;303                    #endif
;;;304                }
;;;305    		}
;;;306    		break;    
;;;307        case CMD_RESET_DEVICE_ID:
;;;308    		{
;;;309                CmdResetDevice* pCmdResetDevice = (CmdResetDevice*)data;  
;;;310                if (pCmdResetDevice->header.paraLen != sizeof(resetDevicePara))
;;;311                { 
;;;312                    sysprintf(" --> CMD_RESET_DEVICE_ID len error: %d:%d\r\n", pCmdResetDevice->header.paraLen, sizeof(resetDevicePara));
;;;313                    break;
;;;314                } 
;;;315                #if(BUILD_DEBUG_VERSION)            
;;;316                sysprintf(" --> CMD_RESET_DEVICE_ID : deviceId = %d...\r\n", pCmdResetDevice->para.deviceId);
;;;317                #endif
;;;318                if(pCmdResetDevice->para.deviceId == GetMeterSetting()->epmid/*(GPIO_ReadBit(GPIOH, BIT11)+1)*/)
;;;319                {
;;;320                    SettingResetDepositEndTime();
;;;321                    SettingFlush();
;;;322                    AutoUpdateMeterData();
;;;323                    GuiManagerRefreshScreen();
;;;324                }
;;;325                else
;;;326                {
;;;327                    #if(BUILD_DEBUG_VERSION)            
;;;328                    sysprintf(" --> CMD_ACK_ID : deviceId = %d (local : %d)...\r\n", pCmdAck->para.deviceId, GetMeterData()->deviceId/*(GPIO_ReadBit(GPIOH, BIT11)+1)*/);
;;;329                    #endif
;;;330                }
;;;331    		}
;;;332    		break;           
;;;333    	default:
;;;334    		sysprintf("[ERROR]cmd id error [0x%02x]!!", data[3]);
;;;335    		break;
;;;336    	}
;;;337    }
000288  e28dd054          ADD      sp,sp,#0x54
00028c  e8bd83f0          POP      {r4-r9,pc}
                  |L1.656|
000290  e5dd0042          LDRB     r0,[sp,#0x42]         ;203
000294  e350001f          CMP      r0,#0x1f              ;203
000298  1a000002          BNE      |L1.680|
00029c  e5dd0043          LDRB     r0,[sp,#0x43]         ;203
0002a0  e35000f1          CMP      r0,#0xf1              ;203
0002a4  0a000002          BEQ      |L1.692|
                  |L1.680|
0002a8  e28f0f4f          ADR      r0,|L1.1004|
0002ac  ebfffffe          BL       sysprintf
0002b0  eafffff4          B        |L1.648|
                  |L1.692|
0002b4  e28f2f51          ADR      r2,|L1.1024|
0002b8  e1a01007          MOV      r1,r7                 ;210
0002bc  e1a00005          MOV      r0,r5                 ;210
0002c0  ebfffffe          BL       getChecksum
0002c4  e1a06000          MOV      r6,r0                 ;210
0002c8  e1dd14b0          LDRH     r1,[sp,#0x40]         ;211
0002cc  e1510006          CMP      r1,r6                 ;211
0002d0  0a000004          BEQ      |L1.744|
0002d4  e1dd24b0          LDRH     r2,[sp,#0x40]         ;213
0002d8  e1a01006          MOV      r1,r6                 ;213
0002dc  e28f0f4a          ADR      r0,|L1.1036|
0002e0  ebfffffe          BL       sysprintf
0002e4  eaffffe7          B        |L1.648|
                  |L1.744|
0002e8  e5dd004e          LDRB     r0,[sp,#0x4e]         ;219
0002ec  e3500001          CMP      r0,#1                 ;219
0002f0  0a000006          BEQ      |L1.784|
0002f4  e3500002          CMP      r0,#2                 ;219
0002f8  0a00005c          BEQ      |L1.1136|
0002fc  e3500004          CMP      r0,#4                 ;219
000300  0a0000a8          BEQ      |L1.1448|
000304  e3500009          CMP      r0,#9                 ;219
000308  1a0000de          BNE      |L1.1672|
00030c  ea0000c1          B        |L1.1560|
                  |L1.784|
000310  e1a00000          MOV      r0,r0                 ;221
000314  e1a04005          MOV      r4,r5                 ;223
000318  e5d4000c          LDRB     r0,[r4,#0xc]          ;225
00031c  e5d4100b          LDRB     r1,[r4,#0xb]          ;225
000320  e1810400          ORR      r0,r1,r0,LSL #8       ;225
000324  e3500025          CMP      r0,#0x25              ;225
000328  0a00004a          BEQ      |L1.1112|
00032c  e5d4000c          LDRB     r0,[r4,#0xc]          ;227
000330  e5d4200b          LDRB     r2,[r4,#0xb]          ;227
000334  e1821400          ORR      r1,r2,r0,LSL #8       ;227
000338  e3a02025          MOV      r2,#0x25              ;227
00033c  e28f00ec          ADR      r0,|L1.1072|
000340  ebfffffe          BL       sysprintf
000344  ea000048          B        |L1.1132|
                  |L1.840|
000348  434d445f          DCB      "CMD_VERSION_ID",0
00034c  56455253
000350  494f4e5f
000354  494400  
000357  00                DCB      0
                  |L1.856|
000358  434d445f          DCB      "CMD_TRANSACTION_DATA_ID",0
00035c  5452414e
000360  53414354
000364  494f4e5f
000368  44415441
00036c  5f494400
                  |L1.880|
000370  434d445f          DCB      "CMD_EXCEED_TIME_ID",0
000374  45584345
000378  45445f54
00037c  494d455f
000380  494400  
000383  00                DCB      0
                  |L1.900|
000384  434d445f          DCB      "CMD_BATTERY_FAIL_ID",0
000388  42415454
00038c  4552595f
000390  4641494c
000394  5f494400
                  |L1.920|
000398  434d445f          DCB      "CMD_FILE_FRANSFER_ID",0
00039c  46494c45
0003a0  5f465241
0003a4  4e534645
0003a8  525f4944
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L1.944|
                          DCD      0x00000415
                  |L1.948|
0003b4  434d445f          DCB      "CMD_FILE_FRANSFER_DATA_ID",0
0003b8  46494c45
0003bc  5f465241
0003c0  4e534645
0003c4  525f4441
0003c8  54415f49
0003cc  4400    
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L1.976|
                          DCD      mCommandIndex
                  |L1.980|
0003d4  436d6448          DCB      "CmdHeader error !!\r\n",0
0003d8  65616465
0003dc  72206572
0003e0  726f7220
0003e4  21210d0a
0003e8  00      
0003e9  00                DCB      0
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L1.1004|
0003ec  436d6445          DCB      "CmdEnd error !!\r\n",0
0003f0  6e642065
0003f4  72726f72
0003f8  2021210d
0003fc  0a00    
0003fe  00                DCB      0
0003ff  00                DCB      0
                  |L1.1024|
000400  63686563          DCB      "checkcmd",0
000404  6b636d64
000408  00      
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0
                  |L1.1036|
00040c  63686563          DCB      "checksum error [0x%04x: 0x%04x]!!\r\n",0
000410  6b73756d
000414  20657272
000418  6f72205b
00041c  30782530
000420  34783a20
000424  30782530
000428  34785d21
00042c  210d0a00
                  |L1.1072|
000430  202d2d3e          DCB      " --> CMD_VERSION_ID len error: %d:%d\r\n",0
000434  20434d44
000438  5f564552
00043c  53494f4e
000440  5f494420
000444  6c656e20
000448  6572726f
00044c  723a2025
000450  643a2564
000454  0d0a00  
000457  00                DCB      0
                  |L1.1112|
000458  e5d4300f          LDRB     r3,[r4,#0xf]          ;231
00045c  e5d4200e          LDRB     r2,[r4,#0xe]          ;231
000460  e5d4100d          LDRB     r1,[r4,#0xd]          ;231
000464  e28f0f8f          ADR      r0,|L1.1704|
000468  ebfffffe          BL       sysprintf
                  |L1.1132|
00046c  ea00008a          B        |L1.1692|
                  |L1.1136|
000470  e1a00000          MOV      r0,r0                 ;236
000474  e1a04005          MOV      r4,r5                 ;240
000478  e5d4000c          LDRB     r0,[r4,#0xc]          ;241
00047c  e5d4100b          LDRB     r1,[r4,#0xb]          ;241
000480  e1810400          ORR      r0,r1,r0,LSL #8       ;241
000484  e350000a          CMP      r0,#0xa               ;241
000488  0a000006          BEQ      |L1.1192|
00048c  e5d4000c          LDRB     r0,[r4,#0xc]          ;243
000490  e5d4200b          LDRB     r2,[r4,#0xb]          ;243
000494  e1821400          ORR      r1,r2,r0,LSL #8       ;243
000498  e3a0200a          MOV      r2,#0xa               ;243
00049c  e28f0f8b          ADR      r0,|L1.1744|
0004a0  ebfffffe          BL       sysprintf
0004a4  ea00007c          B        |L1.1692|
                  |L1.1192|
0004a8  e284000d          ADD      r0,r4,#0xd            ;246
0004ac  ebfffffe          BL       __aeabi_uread4
0004b0  e1a08000          MOV      r8,r0                 ;246
0004b4  e5d40016          LDRB     r0,[r4,#0x16]         ;246
0004b8  e5d41015          LDRB     r1,[r4,#0x15]         ;246
0004bc  e5d42014          LDRB     r2,[r4,#0x14]         ;246
0004c0  e5d43013          LDRB     r3,[r4,#0x13]         ;246
0004c4  e58d000c          STR      r0,[sp,#0xc]          ;246
0004c8  e58d1008          STR      r1,[sp,#8]            ;246
0004cc  e58d2004          STR      r2,[sp,#4]            ;246
0004d0  e58d3000          STR      r3,[sp,#0]            ;246
0004d4  e5d43012          LDRB     r3,[r4,#0x12]         ;246
0004d8  e5d42011          LDRB     r2,[r4,#0x11]         ;246
0004dc  e1a01008          MOV      r1,r8                 ;246
0004e0  e59f0218          LDR      r0,|L1.1792|
0004e4  ebfffffe          BL       sysprintf
0004e8  e284000d          ADD      r0,r4,#0xd            ;255
0004ec  ebfffffe          BL       __aeabi_uread4
0004f0  e58d002c          STR      r0,[sp,#0x2c]         ;255
0004f4  e5d40011          LDRB     r0,[r4,#0x11]         ;256
0004f8  e58d0028          STR      r0,[sp,#0x28]         ;256
0004fc  e5d40012          LDRB     r0,[r4,#0x12]         ;257
000500  e58d0024          STR      r0,[sp,#0x24]         ;257
000504  e5d40013          LDRB     r0,[r4,#0x13]         ;258
000508  e58d001c          STR      r0,[sp,#0x1c]         ;258
00050c  e5d40014          LDRB     r0,[r4,#0x14]         ;259
000510  e58d0018          STR      r0,[sp,#0x18]         ;259
000514  e5d40015          LDRB     r0,[r4,#0x15]         ;260
000518  e58d0014          STR      r0,[sp,#0x14]         ;260
00051c  e5d40016          LDRB     r0,[r4,#0x16]         ;261
000520  e58d0020          STR      r0,[sp,#0x20]         ;261
000524  e28d0010          ADD      r0,sp,#0x10           ;263
000528  ebfffffe          BL       RTC2Time
00052c  e1a08000          MOV      r8,r0                 ;263
000530  e28d1010          ADD      r1,sp,#0x10           ;265
000534  e1a00008          MOV      r0,r8                 ;265
000538  ebfffffe          BL       Time2RTC
00053c  e59d001c          LDR      r0,[sp,#0x1c]         ;268
000540  e59d1020          LDR      r1,[sp,#0x20]         ;268
000544  e59d2014          LDR      r2,[sp,#0x14]         ;268
000548  e59d3018          LDR      r3,[sp,#0x18]         ;268
00054c  e88d0009          STM      sp,{r0,r3}            ;268
000550  e58d100c          STR      r1,[sp,#0xc]          ;268
000554  e58d2008          STR      r2,[sp,#8]            ;268
000558  e59f01a4          LDR      r0,|L1.1796|
00055c  e59d102c          LDR      r1,[sp,#0x2c]         ;268
000560  e59d2028          LDR      r2,[sp,#0x28]         ;268
000564  e59d3024          LDR      r3,[sp,#0x24]         ;268
000568  ebfffffe          BL       sysprintf
00056c  e59d0020          LDR      r0,[sp,#0x20]         ;272
000570  e59d1018          LDR      r1,[sp,#0x18]         ;272
000574  e59d2014          LDR      r2,[sp,#0x14]         ;272
000578  e58d0008          STR      r0,[sp,#8]            ;272
00057c  e88d0006          STM      sp,{r1,r2}            ;272
000580  e59d002c          LDR      r0,[sp,#0x2c]         ;272
000584  e59d1028          LDR      r1,[sp,#0x28]         ;272
000588  e59d2024          LDR      r2,[sp,#0x24]         ;272
00058c  e59d301c          LDR      r3,[sp,#0x1c]         ;272
000590  ebfffffe          BL       SetOSTime
000594  e3500001          CMP      r0,#1                 ;272
000598  1a000001          BNE      |L1.1444|
00059c  ebfffffe          BL       TariffUpdateCurrentTariffData
0005a0  ebfffffe          BL       GuiManagerRefreshScreen
                  |L1.1444|
0005a4  ea00003c          B        |L1.1692|
                  |L1.1448|
0005a8  e1a00000          MOV      r0,r0                 ;284
0005ac  e1a04005          MOV      r4,r5                 ;286
0005b0  e5d4000c          LDRB     r0,[r4,#0xc]          ;287
0005b4  e5d4100b          LDRB     r1,[r4,#0xb]          ;287
0005b8  e1810400          ORR      r0,r1,r0,LSL #8       ;287
0005bc  e3500006          CMP      r0,#6                 ;287
0005c0  0a000006          BEQ      |L1.1504|
0005c4  e5d4000c          LDRB     r0,[r4,#0xc]          ;289
0005c8  e5d4200b          LDRB     r2,[r4,#0xb]          ;289
0005cc  e1821400          ORR      r1,r2,r0,LSL #8       ;289
0005d0  e3a02006          MOV      r2,#6                 ;289
0005d4  e28f0f4b          ADR      r0,|L1.1800|
0005d8  ebfffffe          BL       sysprintf
0005dc  ea00002e          B        |L1.1692|
                  |L1.1504|
0005e0  e284000d          ADD      r0,r4,#0xd            ;295
0005e4  ebfffffe          BL       __aeabi_uread4
0005e8  e1a09000          MOV      r9,r0                 ;295
0005ec  ebfffffe          BL       GetMeterSetting
0005f0  e2808004          ADD      r8,r0,#4              ;295
0005f4  e1a00008          MOV      r0,r8                 ;295
0005f8  ebfffffe          BL       __aeabi_uread4
0005fc  e1590000          CMP      r9,r0                 ;295
000600  1a000003          BNE      |L1.1556|
000604  e5d41012          LDRB     r1,[r4,#0x12]         ;297
000608  e5d42011          LDRB     r2,[r4,#0x11]         ;297
00060c  e1820401          ORR      r0,r2,r1,LSL #8       ;297
000610  ebfffffe          BL       DataAgentRemoveDataByAck
                  |L1.1556|
000614  ea000020          B        |L1.1692|
                  |L1.1560|
000618  e1a00000          MOV      r0,r0                 ;307
00061c  e1a04005          MOV      r4,r5                 ;309
000620  e5d4000c          LDRB     r0,[r4,#0xc]          ;310
000624  e5d4100b          LDRB     r1,[r4,#0xb]          ;310
000628  e1810400          ORR      r0,r1,r0,LSL #8       ;310
00062c  e3500005          CMP      r0,#5                 ;310
000630  0a000006          BEQ      |L1.1616|
000634  e5d4000c          LDRB     r0,[r4,#0xc]          ;312
000638  e5d4200b          LDRB     r2,[r4,#0xb]          ;312
00063c  e1821400          ORR      r1,r2,r0,LSL #8       ;312
000640  e3a02005          MOV      r2,#5                 ;312
000644  e28f00e0          ADR      r0,|L1.1836|
000648  ebfffffe          BL       sysprintf
00064c  ea000012          B        |L1.1692|
                  |L1.1616|
000650  e284000d          ADD      r0,r4,#0xd            ;318
000654  ebfffffe          BL       __aeabi_uread4
000658  e1a09000          MOV      r9,r0                 ;318
00065c  ebfffffe          BL       GetMeterSetting
000660  e2808004          ADD      r8,r0,#4              ;318
000664  e1a00008          MOV      r0,r8                 ;318
000668  ebfffffe          BL       __aeabi_uread4
00066c  e1590000          CMP      r9,r0                 ;318
000670  1a000003          BNE      |L1.1668|
000674  ebfffffe          BL       SettingResetDepositEndTime
000678  ebfffffe          BL       SettingFlush
00067c  ebfffffe          BL       AutoUpdateMeterData
000680  ebfffffe          BL       GuiManagerRefreshScreen
                  |L1.1668|
000684  ea000004          B        |L1.1692|
                  |L1.1672|
000688  e1a00000          MOV      r0,r0                 ;333
00068c  e5d51003          LDRB     r1,[r5,#3]            ;334
000690  e28f00c0          ADR      r0,|L1.1880|
000694  ebfffffe          BL       sysprintf
000698  e1a00000          MOV      r0,r0                 ;335
                  |L1.1692|
00069c  e1a00000          MOV      r0,r0                 ;234
0006a0  e1a00000          MOV      r0,r0
0006a4  eafffef7          B        |L1.648|
                  |L1.1704|
0006a8  202d2d3e          DCB      " --> CMD_VERSION_ID: %03d, %03d, %03d\r\n",0
0006ac  20434d44
0006b0  5f564552
0006b4  53494f4e
0006b8  5f49443a
0006bc  20253033
0006c0  642c2025
0006c4  3033642c
0006c8  20253033
0006cc  640d0a00
                  |L1.1744|
0006d0  202d2d3e          DCB      " --> CMD_TIME_CORRECTION_ID len error: %d:%d"
0006d4  20434d44
0006d8  5f54494d
0006dc  455f434f
0006e0  52524543
0006e4  54494f4e
0006e8  5f494420
0006ec  6c656e20
0006f0  6572726f
0006f4  723a2025
0006f8  643a2564
                  |L1.1788|
0006fc  0d0a00            DCB      "\r\n",0
0006ff  00                DCB      0
                  |L1.1792|
                          DCD      ||.constdata||
                  |L1.1796|
                          DCD      ||.constdata||+0x48
                  |L1.1800|
000708  202d2d3e          DCB      " --> CMD_ACK_ID len error: %d:%d\r\n",0
00070c  20434d44
000710  5f41434b
000714  5f494420
000718  6c656e20
00071c  6572726f
000720  723a2025
000724  643a2564
000728  0d0a00  
00072b  00                DCB      0
                  |L1.1836|
00072c  202d2d3e          DCB      " --> CMD_RESET_DEVICE_ID len error: %d:%d\r\n",0
000730  20434d44
000734  5f524553
000738  45545f44
00073c  45564943
000740  455f4944
000744  206c656e
000748  20657272
00074c  6f723a20
000750  25643a25
000754  640d0a00
                  |L1.1880|
000758  5b455252          DCB      "[ERROR]cmd id error [0x%02x]!!",0
00075c  4f525d63
000760  6d642069
000764  64206572
000768  726f7220
00076c  5b307825
000770  3032785d
000774  212100  
000777  00                DCB      0
                          ENDP

                  CmdProcessReadData PROC
;;;340    
;;;341    void CmdProcessReadData(uint8_t* data, uint16_t len)
000778  e92d47f0          PUSH     {r4-r10,lr}
;;;342    {
00077c  e1a05000          MOV      r5,r0
000780  e1a07001          MOV      r7,r1
;;;343    	int i;
;;;344    	int cpyLen;
;;;345    	BOOL dumpFlag = TRUE;
000784  e3a09001          MOV      r9,#1
;;;346    	for (i = 0; i < len;)
000788  e3a04000          MOV      r4,#0
00078c  ea000052          B        |L1.2268|
                  |L1.1936|
;;;347    	{
;;;348    		//if (memcmp(data + i, &CmdHeaderDefault, sizeof(CmdHeader)) == 0)
;;;349            if ((data[i] == CMD_HEADER_VALUE) && (data[i+1] == CMD_HEADER_VALUE2))
000790  e7d50004          LDRB     r0,[r5,r4]
000794  e35000da          CMP      r0,#0xda
000798  1a000029          BNE      |L1.2116|
00079c  e2840001          ADD      r0,r4,#1
0007a0  e7d50000          LDRB     r0,[r5,r0]
0007a4  e35000ad          CMP      r0,#0xad
0007a8  1a000025          BNE      |L1.2116|
;;;350    		{
;;;351    			memset(cmdDataTmp, 0x0, sizeof(cmdDataTmp));
0007ac  e3a01c01          MOV      r1,#0x100
0007b0  e59f03a0          LDR      r0,|L1.2904|
0007b4  ebfffffe          BL       __aeabi_memclr
;;;352    			cmdDataIndex = 0;
0007b8  e3a00000          MOV      r0,#0
0007bc  e59f1398          LDR      r1,|L1.2908|
0007c0  e5810000          STR      r0,[r1,#0]  ; cmdDataIndex
;;;353    			cpyLen = 2;//sizeof(CmdHeader);
0007c4  e3a06002          MOV      r6,#2
;;;354    			memcpy(cmdDataTmp, data + i, cpyLen);
0007c8  e0851004          ADD      r1,r5,r4
0007cc  e1a02006          MOV      r2,r6
0007d0  e59f0380          LDR      r0,|L1.2904|
0007d4  ebfffffe          BL       __aeabi_memcpy
;;;355    
;;;356    			i = i + cpyLen;
0007d8  e0844006          ADD      r4,r4,r6
;;;357    			cmdDataIndex = cmdDataIndex + cpyLen;
0007dc  e59f0378          LDR      r0,|L1.2908|
0007e0  e5900000          LDR      r0,[r0,#0]  ; cmdDataIndex
0007e4  e0800006          ADD      r0,r0,r6
0007e8  e59f136c          LDR      r1,|L1.2908|
0007ec  e5810000          STR      r0,[r1,#0]  ; cmdDataIndex
;;;358    
;;;359    			cmdDataTmp[cmdDataIndex] = data[i];
0007f0  e7d50004          LDRB     r0,[r5,r4]
0007f4  e59f135c          LDR      r1,|L1.2904|
0007f8  e59f235c          LDR      r2,|L1.2908|
0007fc  e5922000          LDR      r2,[r2,#0]  ; cmdDataIndex
000800  e7c10002          STRB     r0,[r1,r2]
;;;360    			cmdDataNeedLen = data[i];
000804  e7d50004          LDRB     r0,[r5,r4]
000808  e59f1350          LDR      r1,|L1.2912|
00080c  e5810000          STR      r0,[r1,#0]  ; cmdDataNeedLen
;;;361    			i++;
000810  e2844001          ADD      r4,r4,#1
;;;362    			cmdDataIndex++;
000814  e59f0340          LDR      r0,|L1.2908|
000818  e5900000          LDR      r0,[r0,#0]  ; cmdDataIndex
00081c  e2800001          ADD      r0,r0,#1
000820  e59f1334          LDR      r1,|L1.2908|
000824  e5810000          STR      r0,[r1,#0]  ; cmdDataIndex
;;;363    
;;;364    			cmdDataNeedLen = cmdDataNeedLen - 3;
000828  e59f0330          LDR      r0,|L1.2912|
00082c  e5900000          LDR      r0,[r0,#0]  ; cmdDataNeedLen
000830  e2400003          SUB      r0,r0,#3
000834  e59f1324          LDR      r1,|L1.2912|
000838  e5810000          STR      r0,[r1,#0]  ; cmdDataNeedLen
;;;365                //sysprintf("[CmdProcessReadData] get headerCmd!! (cmdDataNeedLen = %d)\r\n", cmdDataNeedLen); 
;;;366    			dumpFlag = FALSE;
00083c  e3a09000          MOV      r9,#0
000840  ea000025          B        |L1.2268|
                  |L1.2116|
;;;367    		}
;;;368    		/*
;;;369    		else if (memcmp(data + i, &CmdEndDefault, sizeof(CmdEnd)) == 0)
;;;370    		{
;;;371    			if (ileft >= sizeof(CmdEnd))
;;;372    			{
;;;373    				cpyLen = sizeof(CmdEnd);
;;;374    			}
;;;375    			else
;;;376    			{
;;;377    				cpyLen = ileft;
;;;378    			}
;;;379    			memcpy(cmdDataTmp + cmdDataIndex, data + i, cpyLen);
;;;380    			ileft = ileft - cpyLen;
;;;381    			i = i + cpyLen;
;;;382    			cmdDataIndex = cmdDataIndex + cpyLen;
;;;383    			checkcmd(cmdDataTmp, cmdDataIndex);
;;;384    		}
;;;385    		*/
;;;386    		else
;;;387    		{
;;;388    			if (cmdDataIndex > 0)
000844  e59f0310          LDR      r0,|L1.2908|
000848  e5900000          LDR      r0,[r0,#0]  ; cmdDataIndex
00084c  e3500000          CMP      r0,#0
000850  da000020          BLE      |L1.2264|
;;;389    			{
;;;390    				cmdDataTmp[cmdDataIndex] = data[i];
000854  e7d50004          LDRB     r0,[r5,r4]
000858  e59f12f8          LDR      r1,|L1.2904|
00085c  e59f22f8          LDR      r2,|L1.2908|
000860  e5922000          LDR      r2,[r2,#0]  ; cmdDataIndex
000864  e7c10002          STRB     r0,[r1,r2]
;;;391    				cmdDataIndex++;
000868  e59f02ec          LDR      r0,|L1.2908|
00086c  e5900000          LDR      r0,[r0,#0]  ; cmdDataIndex
000870  e2800001          ADD      r0,r0,#1
000874  e59f12e0          LDR      r1,|L1.2908|
000878  e5810000          STR      r0,[r1,#0]  ; cmdDataIndex
;;;392    				i++;
00087c  e2844001          ADD      r4,r4,#1
;;;393    				cmdDataNeedLen--;
000880  e59f02d8          LDR      r0,|L1.2912|
000884  e5900000          LDR      r0,[r0,#0]  ; cmdDataNeedLen
000888  e2400001          SUB      r0,r0,#1
00088c  e59f12cc          LDR      r1,|L1.2912|
000890  e5810000          STR      r0,[r1,#0]  ; cmdDataNeedLen
;;;394    				if (cmdDataNeedLen == 0)
000894  e2810000          ADD      r0,r1,#0
000898  e5900000          LDR      r0,[r0,#0]  ; cmdDataNeedLen
00089c  e3500000          CMP      r0,#0
0008a0  1a00000a          BNE      |L1.2256|
;;;395    				{
;;;396                        //sysprintf("[CmdProcessReadData] receive end\r\n"); 
;;;397    					checkcmd(cmdDataTmp, cmdDataIndex);
0008a4  e59f02b0          LDR      r0,|L1.2908|
0008a8  e1d000b0          LDRH     r0,[r0,#0]  ; cmdDataIndex
0008ac  e1a01800          LSL      r1,r0,#16
0008b0  e1a01821          LSR      r1,r1,#16
0008b4  e59f029c          LDR      r0,|L1.2904|
0008b8  ebfffffe          BL       checkcmd
;;;398    					cmdDataIndex = -1;
0008bc  e3e00000          MVN      r0,#0
0008c0  e59f1294          LDR      r1,|L1.2908|
0008c4  e5810000          STR      r0,[r1,#0]  ; cmdDataIndex
;;;399    					cmdDataNeedLen = -1;
0008c8  e59f1290          LDR      r1,|L1.2912|
0008cc  e5810000          STR      r0,[r1,#0]  ; cmdDataNeedLen
                  |L1.2256|
;;;400    				}
;;;401    				dumpFlag = FALSE;
0008d0  e3a09000          MOV      r9,#0
0008d4  ea000000          B        |L1.2268|
                  |L1.2264|
;;;402    			}
;;;403    			else
;;;404    			{
;;;405    				i++;
0008d8  e2844001          ADD      r4,r4,#1
                  |L1.2268|
0008dc  e1540007          CMP      r4,r7                 ;346
0008e0  baffffaa          BLT      |L1.1936|
;;;406    			}
;;;407    		}
;;;408    	}
;;;409    	if (dumpFlag)
0008e4  e3590000          CMP      r9,#0
0008e8  0a00000b          BEQ      |L1.2332|
;;;410    	{
;;;411            sysprintf("[CmdProcessReadData] data ignore !! dump data:\r\n   ==> ");
0008ec  e28f0e27          ADR      r0,|L1.2916|
0008f0  ebfffffe          BL       sysprintf
;;;412    		for (int i = 0; i < len; i++)
0008f4  e3a08000          MOV      r8,#0
0008f8  ea000003          B        |L1.2316|
                  |L1.2300|
;;;413    		{
;;;414    			sysprintf("[0x%02x], ", data[i]);
0008fc  e7d51008          LDRB     r1,[r5,r8]
000900  e28f0fa5          ADR      r0,|L1.2972|
000904  ebfffffe          BL       sysprintf
000908  e2888001          ADD      r8,r8,#1              ;412
                  |L1.2316|
00090c  e1580007          CMP      r8,r7                 ;412
000910  bafffff9          BLT      |L1.2300|
;;;415    		}
;;;416            sysprintf("\r\n");
000914  e24f0e22          ADR      r0,|L1.1788|
000918  ebfffffe          BL       sysprintf
                  |L1.2332|
;;;417    	}
;;;418    	
;;;419    }
00091c  e8bd87f0          POP      {r4-r10,pc}
;;;420    
                          ENDP

                  CmdSendVersion PROC
;;;423    /*-----------------------------------------*/
;;;424    BOOL CmdSendVersion(uint32_t wakeupTime)
000920  e92d41f0          PUSH     {r4-r8,lr}
;;;425    {
000924  e24dd098          SUB      sp,sp,#0x98
000928  e1a04000          MOV      r4,r0
;;;426    
;;;427        RTC_TIME_DATA_T pt;
;;;428        UINT32 leftVoltage, rightVoltage;
;;;429        //static int timers = 0;
;;;430        //DA AD 01 03 01 03 05 0D 00 1F F1
;;;431        CmdVersion cmd;
;;;432        versionPara pPara;
;;;433        pPara.majorVer = MAJOR_VERSION;
00092c  e3a00001          MOV      r0,#1
000930  e5cd0000          STRB     r0,[sp,#0]
;;;434        pPara.minorVer = MINOR_VERSION;
000934  e3a00000          MOV      r0,#0
000938  e5cd0001          STRB     r0,[sp,#1]
;;;435        pPara.revisionVer = REVISION_VERSION;
00093c  e5cd0002          STRB     r0,[sp,#2]
;;;436        pPara.buildVer = GetMeterData()->buildVer;//BUILD_VERSION;
000940  ebfffffe          BL       GetMeterData
000944  e28d1003          ADD      r1,sp,#3
000948  e5905010          LDR      r5,[r0,#0x10]
00094c  e1a00005          MOV      r0,r5
000950  ebfffffe          BL       __aeabi_uwrite4
;;;437        if(E_RTC_SUCCESS == RTC_Read(RTC_CURRENT_TIME, &pt))
000954  e28d1068          ADD      r1,sp,#0x68
000958  e3a00000          MOV      r0,#0
00095c  ebfffffe          BL       RTC_Read
000960  e3500000          CMP      r0,#0
000964  1a000005          BNE      |L1.2432|
;;;438        {
;;;439            pPara.currentTime = RTC2Time(&pt);
000968  e28d0068          ADD      r0,sp,#0x68
00096c  ebfffffe          BL       RTC2Time
000970  e1a05000          MOV      r5,r0
000974  e28d1007          ADD      r1,sp,#7
000978  ebfffffe          BL       __aeabi_uwrite4
00097c  ea000002          B        |L1.2444|
                  |L1.2432|
;;;440        }
;;;441        else
;;;442        {
;;;443            pPara.currentTime = 0;
000980  e28d1007          ADD      r1,sp,#7
000984  e3a00000          MOV      r0,#0
000988  ebfffffe          BL       __aeabi_uwrite4
                  |L1.2444|
;;;444        }
;;;445        pPara.leftStartTime = GetMeterStorageData()->depositStartTime[GetMeterSetting()->meterPosition - 1];
00098c  ebfffffe          BL       GetMeterStorageData
000990  e2808003          ADD      r8,r0,#3
000994  ebfffffe          BL       GetMeterSetting
000998  e2807068          ADD      r7,r0,#0x68
00099c  e1a00007          MOV      r0,r7
0009a0  ebfffffe          BL       __aeabi_uread4
0009a4  e2400001          SUB      r0,r0,#1
0009a8  e0886100          ADD      r6,r8,r0,LSL #2
0009ac  e1a00006          MOV      r0,r6
0009b0  ebfffffe          BL       __aeabi_uread4
0009b4  e1a05000          MOV      r5,r0
0009b8  e28d100b          ADD      r1,sp,#0xb
0009bc  ebfffffe          BL       __aeabi_uwrite4
;;;446        pPara.rightStartTime = GetMeterStorageData()->depositStartTime[GetMeterSetting()->meterPosition];
0009c0  ebfffffe          BL       GetMeterStorageData
0009c4  e2808003          ADD      r8,r0,#3
0009c8  ebfffffe          BL       GetMeterSetting
0009cc  e2807068          ADD      r7,r0,#0x68
0009d0  e1a00007          MOV      r0,r7
0009d4  ebfffffe          BL       __aeabi_uread4
0009d8  e0886100          ADD      r6,r8,r0,LSL #2
0009dc  e1a00006          MOV      r0,r6
0009e0  ebfffffe          BL       __aeabi_uread4
0009e4  e1a05000          MOV      r5,r0
0009e8  e28d100f          ADD      r1,sp,#0xf
0009ec  ebfffffe          BL       __aeabi_uwrite4
;;;447        
;;;448        pPara.leftEndTime = GetMeterStorageData()->depositEndTime[GetMeterSetting()->meterPosition - 1];
0009f0  ebfffffe          BL       GetMeterStorageData
0009f4  e280801b          ADD      r8,r0,#0x1b
0009f8  ebfffffe          BL       GetMeterSetting
0009fc  e2807068          ADD      r7,r0,#0x68
000a00  e1a00007          MOV      r0,r7
000a04  ebfffffe          BL       __aeabi_uread4
000a08  e2400001          SUB      r0,r0,#1
000a0c  e0886100          ADD      r6,r8,r0,LSL #2
000a10  e1a00006          MOV      r0,r6
000a14  ebfffffe          BL       __aeabi_uread4
000a18  e1a05000          MOV      r5,r0
000a1c  e28d1013          ADD      r1,sp,#0x13
000a20  ebfffffe          BL       __aeabi_uwrite4
;;;449        pPara.rightEndTime = GetMeterStorageData()->depositEndTime[GetMeterSetting()->meterPosition];
000a24  ebfffffe          BL       GetMeterStorageData
000a28  e280801b          ADD      r8,r0,#0x1b
000a2c  ebfffffe          BL       GetMeterSetting
000a30  e2807068          ADD      r7,r0,#0x68
000a34  e1a00007          MOV      r0,r7
000a38  ebfffffe          BL       __aeabi_uread4
000a3c  e0886100          ADD      r6,r8,r0,LSL #2
000a40  e1a00006          MOV      r0,r6
000a44  ebfffffe          BL       __aeabi_uread4
000a48  e1a05000          MOV      r5,r0
000a4c  e28d1017          ADD      r1,sp,#0x17
000a50  ebfffffe          BL       __aeabi_uwrite4
;;;450        
;;;451        BatteryGetValue(&rightVoltage, &leftVoltage);
000a54  e28d1064          ADD      r1,sp,#0x64
000a58  e28d0060          ADD      r0,sp,#0x60
000a5c  ebfffffe          BL       BatteryGetValue
;;;452    
;;;453        pPara.voltageValueL = leftVoltage;
000a60  e59d0064          LDR      r0,[sp,#0x64]
000a64  e1a00800          LSL      r0,r0,#16
000a68  e1a00820          LSR      r0,r0,#16
000a6c  e5cd001b          STRB     r0,[sp,#0x1b]
000a70  e1a00420          LSR      r0,r0,#8
000a74  e5cd001c          STRB     r0,[sp,#0x1c]
;;;454        pPara.voltageValueR = rightVoltage;
000a78  e59d0060          LDR      r0,[sp,#0x60]
000a7c  e1a00800          LSL      r0,r0,#16
000a80  e1a00820          LSR      r0,r0,#16
000a84  e5cd001d          STRB     r0,[sp,#0x1d]
000a88  e1a00420          LSR      r0,r0,#8
000a8c  e5cd001e          STRB     r0,[sp,#0x1e]
;;;455        
;;;456        pPara.spaceStatus = 0;
000a90  e3a00000          MOV      r0,#0
000a94  e5cd001f          STRB     r0,[sp,#0x1f]
;;;457        if(GetSpaceStatus(SPACE_INDEX_1))
000a98  ebfffffe          BL       GetSpaceStatus
000a9c  e3500000          CMP      r0,#0
000aa0  0a000002          BEQ      |L1.2736|
;;;458        {
;;;459            pPara.spaceStatus = pPara.spaceStatus | (0x1<<0);
000aa4  e5dd001f          LDRB     r0,[sp,#0x1f]
000aa8  e3800001          ORR      r0,r0,#1
000aac  e5cd001f          STRB     r0,[sp,#0x1f]
                  |L1.2736|
;;;460        }
;;;461        if(GetSpaceStatus(SPACE_INDEX_2))
000ab0  e3a00001          MOV      r0,#1
000ab4  ebfffffe          BL       GetSpaceStatus
000ab8  e3500000          CMP      r0,#0
000abc  0a000002          BEQ      |L1.2764|
;;;462        {
;;;463            pPara.spaceStatus = pPara.spaceStatus | (0x1<<1);
000ac0  e5dd001f          LDRB     r0,[sp,#0x1f]
000ac4  e3800002          ORR      r0,r0,#2
000ac8  e5cd001f          STRB     r0,[sp,#0x1f]
                  |L1.2764|
;;;464        }
;;;465        
;;;466        pPara.depositStatus = ((GetMeterData()->spaceSepositStatus[GetMeterSetting()->meterPosition - 1]&0xf) << 0) | 
000acc  ebfffffe          BL       GetMeterData
000ad0  e2806008          ADD      r6,r0,#8
000ad4  ebfffffe          BL       GetMeterSetting
000ad8  e2805068          ADD      r5,r0,#0x68
000adc  e1a00005          MOV      r0,r5
000ae0  ebfffffe          BL       __aeabi_uread4
000ae4  e2400001          SUB      r0,r0,#1
000ae8  e7d60000          LDRB     r0,[r6,r0]
000aec  e200600f          AND      r6,r0,#0xf
000af0  ebfffffe          BL       GetMeterData
000af4  e2807008          ADD      r7,r0,#8
000af8  ebfffffe          BL       GetMeterSetting
000afc  e2805068          ADD      r5,r0,#0x68
000b00  e1a00005          MOV      r0,r5
000b04  ebfffffe          BL       __aeabi_uread4
000b08  e7d70000          LDRB     r0,[r7,r0]
000b0c  e200000f          AND      r0,r0,#0xf
000b10  e1860200          ORR      r0,r6,r0,LSL #4
000b14  e5cd0020          STRB     r0,[sp,#0x20]
;;;467                                    ((GetMeterData()->spaceSepositStatus[GetMeterSetting()->meterPosition]&0xf) << 4);
;;;468        pPara.wakeupTime = wakeupTime;
000b18  e28d1021          ADD      r1,sp,#0x21
000b1c  e1a00004          MOV      r0,r4
000b20  ebfffffe          BL       __aeabi_uwrite4
;;;469        
;;;470        //timers++;
;;;471        initCmd(CMD_VERSION_ID, &cmd, &pPara);
000b24  e1a0200d          MOV      r2,sp
000b28  e28d1028          ADD      r1,sp,#0x28
000b2c  e3a00001          MOV      r0,#1
000b30  ebfffffe          BL       initCmd
;;;472        #if(ENABLE_CMD_LIB_DEBUG_MESSAGE)
;;;473        sysprintf("  -- CmdSendVersion ...\r\n"); 
000b34  e28f006c          ADR      r0,|L1.2984|
000b38  ebfffffe          BL       sysprintf
;;;474        #endif
;;;475        return DataAgentAddData((uint8_t*)&cmd, sizeof(CmdVersion), TRUE, NULL);
000b3c  e3a03000          MOV      r3,#0
000b40  e3a02001          MOV      r2,#1
000b44  e3a01036          MOV      r1,#0x36
000b48  e28d0028          ADD      r0,sp,#0x28
000b4c  ebfffffe          BL       DataAgentAddData
000b50  e28dd098          ADD      sp,sp,#0x98
;;;476    
;;;477    }
000b54  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2904|
                          DCD      cmdDataTmp
                  |L1.2908|
                          DCD      cmdDataIndex
                  |L1.2912|
                          DCD      cmdDataNeedLen
                  |L1.2916|
000b64  5b436d64          DCB      "[CmdProcessReadData] data ignore !! dump data:\r\n   =="
000b68  50726f63
000b6c  65737352
000b70  65616444
000b74  6174615d
000b78  20646174
000b7c  61206967
000b80  6e6f7265
000b84  20212120
000b88  64756d70
000b8c  20646174
000b90  613a0d0a
000b94  2020203d
000b98  3d      
000b99  3e2000            DCB      "> ",0
                  |L1.2972|
000b9c  5b307825          DCB      "[0x%02x], ",0
000ba0  3032785d
000ba4  2c2000  
000ba7  00                DCB      0
                  |L1.2984|
000ba8  20202d2d          DCB      "  -- CmdSendVersion ...\r\n",0
000bac  20436d64
000bb0  53656e64
000bb4  56657273
000bb8  696f6e20
000bbc  2e2e2e0d
000bc0  0a00    
000bc2  00                DCB      0
000bc3  00                DCB      0
                          ENDP

                  CmdSendTransaction PROC
;;;478    
;;;479    BOOL CmdSendTransaction(uint8_t spaceId, uint32_t currentTime, uint32_t endTime, uint32_t depositTime, uint16_t cost, uint16_t balance)
000bc4  e92d43f0          PUSH     {r4-r9,lr}
;;;480    {
000bc8  e24dd03c          SUB      sp,sp,#0x3c
000bcc  e1a04000          MOV      r4,r0
000bd0  e1a05001          MOV      r5,r1
000bd4  e1a06002          MOV      r6,r2
000bd8  e1a07003          MOV      r7,r3
000bdc  e1cd85d8          LDRD     r8,r9,[sp,#0x58]
;;;481        //static int timers = 0;
;;;482        CmdTransaction cmd;
;;;483        transactionPara pPara;
;;;484        //timers++;
;;;485        /*
;;;486        typedef struct
;;;487        {
;;;488            uint8_t     spaceId;
;;;489            uint32_t    currentTime;
;;;490            uint32_t    depositTime;    
;;;491            uint16_t    cost;
;;;492            uint16_t    balance;  
;;;493        }transactionPara;
;;;494        */
;;;495        pPara.spaceId = spaceId;
000be0  e5cd4004          STRB     r4,[sp,#4]
;;;496        pPara.currentTime = currentTime;
000be4  e28d1005          ADD      r1,sp,#5
000be8  e1a00005          MOV      r0,r5
000bec  ebfffffe          BL       __aeabi_uwrite4
;;;497        pPara.endTime = endTime;   
000bf0  e28d1009          ADD      r1,sp,#9
000bf4  e1a00006          MOV      r0,r6
000bf8  ebfffffe          BL       __aeabi_uwrite4
;;;498        pPara.depositTime = depositTime;    
000bfc  e28d100d          ADD      r1,sp,#0xd
000c00  e1a00007          MOV      r0,r7
000c04  ebfffffe          BL       __aeabi_uwrite4
;;;499        pPara.cost = cost;
000c08  e5cd8011          STRB     r8,[sp,#0x11]
000c0c  e1a00428          LSR      r0,r8,#8
000c10  e5cd0012          STRB     r0,[sp,#0x12]
;;;500        pPara.balance = balance; 
000c14  e5cd9013          STRB     r9,[sp,#0x13]
000c18  e1a00429          LSR      r0,r9,#8
000c1c  e5cd0014          STRB     r0,[sp,#0x14]
;;;501       
;;;502        initCmd(CMD_TRANSACTION_DATA_ID, &cmd, &pPara);
000c20  e28d2004          ADD      r2,sp,#4
000c24  e28d1018          ADD      r1,sp,#0x18
000c28  e3a00003          MOV      r0,#3
000c2c  ebfffffe          BL       initCmd
;;;503        #if(ENABLE_CMD_LIB_DEBUG_MESSAGE)
;;;504        sysprintf("  -- CmdSendTransaction ...\r\n"); 
000c30  e28f0f6f          ADR      r0,|L1.3572|
000c34  ebfffffe          BL       sysprintf
;;;505        #endif
;;;506        //return sendCmd((uint8_t*)&cmd, sizeof(CmdVersion));
;;;507        return DataAgentAddData((uint8_t*)&cmd, sizeof(CmdTransaction), TRUE, NULL);
000c38  e3a03000          MOV      r3,#0
000c3c  e3a02001          MOV      r2,#1
000c40  e3a01022          MOV      r1,#0x22
000c44  e28d0018          ADD      r0,sp,#0x18
000c48  ebfffffe          BL       DataAgentAddData
000c4c  e28dd03c          ADD      sp,sp,#0x3c
;;;508    }
000c50  e8bd83f0          POP      {r4-r9,pc}
;;;509    
                          ENDP

                  CmdSendExceedTime PROC
;;;510    BOOL CmdSendExceedTime(uint8_t spaceId, uint32_t currentTime, uint32_t endTime)
000c54  e92d4070          PUSH     {r4-r6,lr}
;;;511    {
000c58  e24dd028          SUB      sp,sp,#0x28
000c5c  e1a04000          MOV      r4,r0
000c60  e1a05001          MOV      r5,r1
000c64  e1a06002          MOV      r6,r2
;;;512        //static int timers = 0;
;;;513        CmdExceedTime cmd;
;;;514        exceedTimePara pPara;
;;;515        //timers++;
;;;516        /*
;;;517        typedef struct
;;;518        {
;;;519            uint8_t     spaceId;
;;;520            uint32_t    currentTime;
;;;521            uint32_t    depositTime;    
;;;522            uint16_t    cost;
;;;523            uint16_t    balance;  
;;;524        }transactionPara;
;;;525        */
;;;526        pPara.spaceId = spaceId;
000c68  e5cd4000          STRB     r4,[sp,#0]
;;;527        pPara.currentTime = currentTime;
000c6c  e28d1001          ADD      r1,sp,#1
000c70  e1a00005          MOV      r0,r5
000c74  ebfffffe          BL       __aeabi_uwrite4
;;;528        pPara.endTime = endTime;    
000c78  e28d1005          ADD      r1,sp,#5
000c7c  e1a00006          MOV      r0,r6
000c80  ebfffffe          BL       __aeabi_uwrite4
;;;529       
;;;530        initCmd(CMD_EXCEED_TIME_ID, &cmd, &pPara);
000c84  e1a0200d          MOV      r2,sp
000c88  e28d100c          ADD      r1,sp,#0xc
000c8c  e3a00005          MOV      r0,#5
000c90  ebfffffe          BL       initCmd
;;;531        #if(ENABLE_CMD_LIB_DEBUG_MESSAGE)
;;;532        sysprintf("  -- CmdSendExceedTime ...\r\n"); 
000c94  e28f0f5e          ADR      r0,|L1.3604|
000c98  ebfffffe          BL       sysprintf
;;;533        #endif
;;;534        //return sendCmd((uint8_t*)&cmd, sizeof(CmdVersion));
;;;535        return DataAgentAddData((uint8_t*)&cmd, sizeof(CmdExceedTime), TRUE, NULL);
000c9c  e3a03000          MOV      r3,#0
000ca0  e3a02001          MOV      r2,#1
000ca4  e3a0101a          MOV      r1,#0x1a
000ca8  e28d000c          ADD      r0,sp,#0xc
000cac  ebfffffe          BL       DataAgentAddData
000cb0  e28dd028          ADD      sp,sp,#0x28
;;;536    }
000cb4  e8bd8070          POP      {r4-r6,pc}
;;;537    
                          ENDP

                  CmdSendBatteryFail PROC
;;;538    BOOL CmdSendBatteryFail(uint8_t batteryId, uint16_t voltage)
000cb8  e92d4030          PUSH     {r4,r5,lr}
;;;539    {
000cbc  e24dd01c          SUB      sp,sp,#0x1c
000cc0  e1a04000          MOV      r4,r0
000cc4  e1a05001          MOV      r5,r1
;;;540        //static int timers = 0;
;;;541        CmdBatteryFail cmd;
;;;542        batteryFailPara pPara;
;;;543        pPara.batteryId = batteryId;
000cc8  e5cd4004          STRB     r4,[sp,#4]
;;;544        pPara.voltage = voltage;   
000ccc  e5cd5005          STRB     r5,[sp,#5]
000cd0  e1a00425          LSR      r0,r5,#8
000cd4  e5cd0006          STRB     r0,[sp,#6]
;;;545       
;;;546        initCmd(CMD_BATTERY_FAIL_ID, &cmd, &pPara);
000cd8  e28d2004          ADD      r2,sp,#4
000cdc  e28d1008          ADD      r1,sp,#8
000ce0  e3a00006          MOV      r0,#6
000ce4  ebfffffe          BL       initCmd
;;;547        #if(ENABLE_CMD_LIB_DEBUG_MESSAGE)
;;;548        sysprintf("  -- CmdSendBatteryFail (%d, %d) ...\r\n", batteryId, voltage); 
000ce8  e1a02005          MOV      r2,r5
000cec  e1a01004          MOV      r1,r4
000cf0  e28f0f4f          ADR      r0,|L1.3636|
000cf4  ebfffffe          BL       sysprintf
;;;549        #endif
;;;550        //return sendCmd((uint8_t*)&cmd, sizeof(CmdVersion));
;;;551        return DataAgentAddData((uint8_t*)&cmd, sizeof(CmdBatteryFail), FALSE, NULL);
000cf8  e3a03000          MOV      r3,#0
000cfc  e1a02003          MOV      r2,r3
000d00  e3a01014          MOV      r1,#0x14
000d04  e28d0008          ADD      r0,sp,#8
000d08  ebfffffe          BL       DataAgentAddData
000d0c  e28dd01c          ADD      sp,sp,#0x1c
;;;552    }
000d10  e8bd8030          POP      {r4,r5,pc}
;;;553    
                          ENDP

                  CmdSendFileTransfer PROC
;;;554    BOOL CmdSendFileTransfer(char* fileName, uint16_t fileLen, uint8_t statusId, dataAgentTxCallback callback)
000d14  e92d40f0          PUSH     {r4-r7,lr}
;;;555    {
000d18  e24dd05c          SUB      sp,sp,#0x5c
000d1c  e1a06000          MOV      r6,r0
000d20  e1a04001          MOV      r4,r1
000d24  e1a05002          MOV      r5,r2
000d28  e1a07003          MOV      r7,r3
;;;556        //static int timers = 0;
;;;557        CmdFileTransfer cmd;
;;;558        fileTransferPara pPara;
;;;559        strcpy(pPara.fileName, fileName);
000d2c  e1a01006          MOV      r1,r6
000d30  e28d0004          ADD      r0,sp,#4
000d34  ebfffffe          BL       strcpy
;;;560        pPara.fileLen = fileLen;  
000d38  e1cd42b4          STRH     r4,[sp,#0x24]
;;;561        pPara.statusId = statusId;      
000d3c  e5cd5026          STRB     r5,[sp,#0x26]
;;;562       
;;;563        initCmd(CMD_FILE_FRANSFER_ID, &cmd, &pPara);
000d40  e28d2004          ADD      r2,sp,#4
000d44  e28d1028          ADD      r1,sp,#0x28
000d48  e3a00007          MOV      r0,#7
000d4c  ebfffffe          BL       initCmd
;;;564        #if(ENABLE_CMD_LIB_DEBUG_MESSAGE)
;;;565        sysprintf("  -- CmdSendFileTransfer (%s, %d, %d) ...\r\n", fileName, fileLen, statusId); 
000d50  e1a03005          MOV      r3,r5
000d54  e1a02004          MOV      r2,r4
000d58  e1a01006          MOV      r1,r6
000d5c  e28f00f8          ADR      r0,|L1.3676|
000d60  ebfffffe          BL       sysprintf
;;;566        #endif
;;;567        //return sendCmd((uint8_t*)&cmd, sizeof(CmdVersion));
;;;568        return DataAgentAddData((uint8_t*)&cmd, sizeof(CmdFileTransfer), TRUE, callback);
000d64  e1a03007          MOV      r3,r7
000d68  e3a02001          MOV      r2,#1
000d6c  e3a01034          MOV      r1,#0x34
000d70  e28d0028          ADD      r0,sp,#0x28
000d74  ebfffffe          BL       DataAgentAddData
000d78  e28dd05c          ADD      sp,sp,#0x5c
;;;569    }
000d7c  e8bd80f0          POP      {r4-r7,pc}
;;;570    
                          ENDP

                  CmdSendFileTransferData PROC
;;;571    BOOL CmdSendFileTransferData(uint16_t startAddress, uint16_t dataLen, uint8_t* data, dataAgentTxCallback callback)
000d80  e92d41f0          PUSH     {r4-r8,lr}
;;;572    {
000d84  e24dde82          SUB      sp,sp,#0x820
000d88  e1a04000          MOV      r4,r0
000d8c  e1a05001          MOV      r5,r1
000d90  e1a06002          MOV      r6,r2
000d94  e1a07003          MOV      r7,r3
;;;573        //static int timers = 0;
;;;574        CmdFileTransferData cmd;
;;;575        fileTransferDataPara pPara;
;;;576        pPara.startAddress = startAddress;
000d98  e1cd40b4          STRH     r4,[sp,#4]
;;;577        pPara.dataLen = dataLen;
000d9c  e1cd50b6          STRH     r5,[sp,#6]
;;;578        memcpy(pPara.data, data, dataLen);
000da0  e1a02005          MOV      r2,r5
000da4  e1a01006          MOV      r1,r6
000da8  e28d0008          ADD      r0,sp,#8
000dac  ebfffffe          BL       __aeabi_memcpy
;;;579       
;;;580        initCmd(CMD_FILE_FRANSFER_DATA_ID, &cmd, &pPara);
000db0  e28d2004          ADD      r2,sp,#4
000db4  e28d1b01          ADD      r1,sp,#0x400
000db8  e2811008          ADD      r1,r1,#8
000dbc  e3a00008          MOV      r0,#8
000dc0  ebfffffe          BL       initCmd
;;;581        #if(ENABLE_CMD_LIB_DEBUG_MESSAGE)
;;;582        sysprintf("  -- CmdSendFileTransferData (0x%04x, %d) ...\r\n", startAddress, dataLen); 
000dc4  e1a02005          MOV      r2,r5
000dc8  e1a01004          MOV      r1,r4
000dcc  e28f00b4          ADR      r0,|L1.3720|
000dd0  ebfffffe          BL       sysprintf
;;;583        #endif
;;;584        //return sendCmd((uint8_t*)&cmd, sizeof(CmdVersion));
;;;585        return DataAgentAddData((uint8_t*)&cmd, sizeof(CmdFileTransferData), TRUE, callback);
000dd4  e1a03007          MOV      r3,r7
000dd8  e3a02001          MOV      r2,#1
000ddc  e51f1a34          LDR      r1,|L1.944|
000de0  e28d0b01          ADD      r0,sp,#0x400
000de4  e2800008          ADD      r0,r0,#8
000de8  ebfffffe          BL       DataAgentAddData
000dec  e28dde82          ADD      sp,sp,#0x820
;;;586    }
000df0  e8bd81f0          POP      {r4-r8,pc}
;;;587    
                          ENDP

                  |L1.3572|
000df4  20202d2d          DCB      "  -- CmdSendTransaction ...\r\n",0
000df8  20436d64
000dfc  53656e64
000e00  5472616e
000e04  73616374
000e08  696f6e20
000e0c  2e2e2e0d
000e10  0a00    
000e12  00                DCB      0
000e13  00                DCB      0
                  |L1.3604|
000e14  20202d2d          DCB      "  -- CmdSendExceedTime ...\r\n",0
000e18  20436d64
000e1c  53656e64
000e20  45786365
000e24  65645469
000e28  6d65202e
000e2c  2e2e0d0a
000e30  00      
000e31  00                DCB      0
000e32  00                DCB      0
000e33  00                DCB      0
                  |L1.3636|
000e34  20202d2d          DCB      "  -- CmdSendBatteryFail (%d, %d) ...\r\n",0
000e38  20436d64
000e3c  53656e64
000e40  42617474
000e44  65727946
000e48  61696c20
000e4c  2825642c
000e50  20256429
000e54  202e2e2e
000e58  0d0a00  
000e5b  00                DCB      0
                  |L1.3676|
000e5c  20202d2d          DCB      "  -- CmdSendFileTransfer (%s, %d, %d) ...\r\n",0
000e60  20436d64
000e64  53656e64
000e68  46696c65
000e6c  5472616e
000e70  73666572
000e74  20282573
000e78  2c202564
000e7c  2c202564
000e80  29202e2e
000e84  2e0d0a00
                  |L1.3720|
000e88  20202d2d          DCB      "  -- CmdSendFileTransferData (0x%04x, %d) ...\r\n",0
000e8c  20436d64
000e90  53656e64
000e94  46696c65
000e98  5472616e
000e9c  73666572
000ea0  44617461
000ea4  20283078
000ea8  25303478
000eac  2c202564
000eb0  29202e2e
000eb4  2e0d0a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  cmdDataTmp
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  202d2d3e          DCB      0x20,0x2d,0x2d,0x3e
000004  20434d44          DCB      0x20,0x43,0x4d,0x44
000008  5f54494d          DCB      0x5f,0x54,0x49,0x4d
00000c  455f434f          DCB      0x45,0x5f,0x43,0x4f
000010  52524543          DCB      0x52,0x52,0x45,0x43
000014  54494f4e          DCB      0x54,0x49,0x4f,0x4e
000018  5f494420          DCB      0x5f,0x49,0x44,0x20
00001c  3a205b25          DCB      0x3a,0x20,0x5b,0x25
000020  3034642f          DCB      0x30,0x34,0x64,0x2f
000024  25303264          DCB      0x25,0x30,0x32,0x64
000028  2f253032          DCB      0x2f,0x25,0x30,0x32
00002c  64202530          DCB      0x64,0x20,0x25,0x30
000030  32643a25          DCB      0x32,0x64,0x3a,0x25
000034  3032643a          DCB      0x30,0x32,0x64,0x3a
000038  25303264          DCB      0x25,0x30,0x32,0x64
00003c  20282564          DCB      0x20,0x28,0x25,0x64
000040  295d0d0a          DCB      0x29,0x5d,0x0d,0x0a
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  202d2d3e          DCB      0x20,0x2d,0x2d,0x3e
00004c  20434d44          DCB      0x20,0x43,0x4d,0x44
000050  5f54494d          DCB      0x5f,0x54,0x49,0x4d
000054  455f434f          DCB      0x45,0x5f,0x43,0x4f
000058  52524543          DCB      0x52,0x52,0x45,0x43
00005c  54494f4e          DCB      0x54,0x49,0x4f,0x4e
000060  5f494420          DCB      0x5f,0x49,0x44,0x20
000064  5f212121          DCB      0x5f,0x21,0x21,0x21
000068  21203a20          DCB      0x21,0x20,0x3a,0x20
00006c  5b253034          DCB      0x5b,0x25,0x30,0x34
000070  642f2530          DCB      0x64,0x2f,0x25,0x30
000074  32642f25          DCB      0x32,0x64,0x2f,0x25
000078  30326420          DCB      0x30,0x32,0x64,0x20
00007c  25303264          DCB      0x25,0x30,0x32,0x64
000080  3a253032          DCB      0x3a,0x25,0x30,0x32
000084  643a2530          DCB      0x64,0x3a,0x25,0x30
000088  32642028          DCB      0x32,0x64,0x20,0x28
00008c  2564295d          DCB      0x25,0x64,0x29,0x5d
000090  0d0a00            DCB      0x0d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  mCommandIndex
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  cmdDataIndex
                          DCD      0xffffffff
                  cmdDataNeedLen
                          DCD      0xffffffff
