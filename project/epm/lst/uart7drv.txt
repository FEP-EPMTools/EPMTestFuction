; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uart7drv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart7drv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uart7drv.crf src\userdrv\uart7drv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART7SetPower PROC
;;;153    
;;;154    BOOL UART7SetPower(BOOL flag)
000000  e92d4010          PUSH     {r4,lr}
;;;155    {
000004  e1a04000          MOV      r4,r0
;;;156        //sysprintf("UART7SetPower [ %d ]!! enter\n", flag);
;;;157        if(flag)
000008  e3540000          CMP      r4,#0
00000c  0a000014          BEQ      |L1.100|
;;;158        {     
;;;159            //hwInit(baudRateTemp); 
;;;160            //GPIO_SetBit(POWER_PORT, POWER_PIN); 
;;;161            GPIO_ClrBit(POWER_PORT, POWER_PIN);    
000010  e3a01b01          MOV      r1,#0x400
000014  e3a00040          MOV      r0,#0x40
000018  ebfffffe          BL       GPIO_ClrBit
;;;162            vTaskDelay(100/portTICK_RATE_MS);          
00001c  e3a0000a          MOV      r0,#0xa
000020  ebfffffe          BL       vTaskDelay
;;;163            //vTaskDelay(1000/portTICK_RATE_MS);      
;;;164            // GPG 4, 5 //TX, RX
;;;165            outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xF<<16)) | (0x9<<16));
000024  e3a0020b          MOV      r0,#0xb0000000
000028  e59000a0          LDR      r0,[r0,#0xa0]
00002c  e3c0080f          BIC      r0,r0,#0xf0000
000030  e3800809          ORR      r0,r0,#0x90000
000034  e3a0120b          MOV      r1,#0xb0000000
000038  e58100a0          STR      r0,[r1,#0xa0]
;;;166            outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xF<<20)) | (0x9<<20));
00003c  e3a0020b          MOV      r0,#0xb0000000
000040  e59000a0          LDR      r0,[r0,#0xa0]
000044  e3c0060f          BIC      r0,r0,#0xf00000
000048  e3800609          ORR      r0,r0,#0x900000
00004c  e58100a0          STR      r0,[r1,#0xa0]
;;;167            outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<23)) | (0x1<<23));   
000050  e3a0020b          MOV      r0,#0xb0000000
000054  e5900218          LDR      r0,[r0,#0x218]
000058  e3800502          ORR      r0,r0,#0x800000
00005c  e5810218          STR      r0,[r1,#0x218]
000060  ea000011          B        |L1.172|
                  |L1.100|
;;;168                
;;;169        }
;;;170        else
;;;171        {
;;;172            GPIO_SetBit(POWER_PORT, POWER_PIN); 
000064  e3a01b01          MOV      r1,#0x400
000068  e3a00040          MOV      r0,#0x40
00006c  ebfffffe          BL       GPIO_SetBit
;;;173            //GPIO_ClrBit(POWER_PORT, POWER_PIN);
;;;174            vTaskDelay(200/portTICK_RATE_MS);
000070  e3a00014          MOV      r0,#0x14
000074  ebfffffe          BL       vTaskDelay
;;;175            // GPG 4, 5 //TX, RX
;;;176            outpw(REG_CLK_PCLKEN0,(inpw(REG_CLK_PCLKEN0) & ~(0x1<<23)) | (0x0<<23));  
000078  e3a0020b          MOV      r0,#0xb0000000
00007c  e5900218          LDR      r0,[r0,#0x218]
000080  e3c00502          BIC      r0,r0,#0x800000
000084  e3a0120b          MOV      r1,#0xb0000000
000088  e5810218          STR      r0,[r1,#0x218]
;;;177            
;;;178            outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xF<<16)) | (0<<16));
00008c  e3a0020b          MOV      r0,#0xb0000000
000090  e59000a0          LDR      r0,[r0,#0xa0]
000094  e3c0080f          BIC      r0,r0,#0xf0000
000098  e58100a0          STR      r0,[r1,#0xa0]
;;;179            outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xF<<20)) | (0<<20)); 
00009c  e3a0020b          MOV      r0,#0xb0000000
0000a0  e59000a0          LDR      r0,[r0,#0xa0]
0000a4  e3c0060f          BIC      r0,r0,#0xf00000
0000a8  e58100a0          STR      r0,[r1,#0xa0]
                  |L1.172|
;;;180            
;;;181            
;;;182                   
;;;183                
;;;184        }
;;;185        //sysprintf("UART7SetPower [ %d ]!! exit\n", flag);
;;;186        return TRUE;
0000ac  e3a00001          MOV      r0,#1
;;;187    }
0000b0  e8bd8010          POP      {r4,pc}
;;;188    
                          ENDP

                  hwInit PROC
;;;47     /*-----------------------------------------*/
;;;48     static BOOL hwInit(UINT32 baudRate)
0000b4  e92d4070          PUSH     {r4-r6,lr}
;;;49     {
0000b8  e1a05000          MOV      r5,r0
;;;50         int retval;
;;;51         outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
0000bc  e3a0020b          MOV      r0,#0xb0000000
0000c0  e5900218          LDR      r0,[r0,#0x218]
0000c4  e3800008          ORR      r0,r0,#8
0000c8  e3a0120b          MOV      r1,#0xb0000000
0000cc  e5810218          STR      r0,[r1,#0x218]
;;;52         
;;;53         // GPG 4, 5 //TX, RX
;;;54         outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xF<<16)) | (0x9<<16));
0000d0  e3a0020b          MOV      r0,#0xb0000000
0000d4  e59000a0          LDR      r0,[r0,#0xa0]
0000d8  e3c0080f          BIC      r0,r0,#0xf0000
0000dc  e3800809          ORR      r0,r0,#0x90000
0000e0  e58100a0          STR      r0,[r1,#0xa0]
;;;55         outpw(REG_SYS_GPG_MFPL,(inpw(REG_SYS_GPG_MFPL) & ~(0xF<<20)) | (0x9<<20));
0000e4  e3a0020b          MOV      r0,#0xb0000000
0000e8  e59000a0          LDR      r0,[r0,#0xa0]
0000ec  e3c0060f          BIC      r0,r0,#0xf00000
0000f0  e3800609          ORR      r0,r0,#0x900000
0000f4  e58100a0          STR      r0,[r1,#0xa0]
;;;56         
;;;57         
;;;58         //5V Power pin GPB10
;;;59         outpw(REG_SYS_GPB_MFPH,(inpw(REG_SYS_GPB_MFPH) & ~(0xFu<<8)) | (0x0u<<8));
0000f8  e3a0020b          MOV      r0,#0xb0000000
0000fc  e590007c          LDR      r0,[r0,#0x7c]
000100  e3c00c0f          BIC      r0,r0,#0xf00
000104  e581007c          STR      r0,[r1,#0x7c]
;;;60         GPIO_OpenBit(POWER_PORT, POWER_PIN, DIR_OUTPUT, NO_PULL_UP); 
000108  e3a03000          MOV      r3,#0
00010c  e3a02001          MOV      r2,#1
000110  e3a01b01          MOV      r1,#0x400
000114  e3a00040          MOV      r0,#0x40
000118  ebfffffe          BL       GPIO_OpenBit
;;;61         if(OTAinitFlag == FALSE)
00011c  e59f0288          LDR      r0,|L1.940|
000120  e5d00000          LDRB     r0,[r0,#0]  ; OTAinitFlag
000124  e3500000          CMP      r0,#0
000128  1a000001          BNE      |L1.308|
;;;62             UART7SetPower(FALSE);
00012c  e3a00000          MOV      r0,#0
000130  ebfffffe          BL       UART7SetPower
                  |L1.308|
;;;63         
;;;64         #if(SUPPORT_HK_10_HW)
;;;65         //GPB0 extern select pin
;;;66         outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xF<<4)) | (0x0<<4));
000134  e3a0020b          MOV      r0,#0xb0000000
000138  e5900078          LDR      r0,[r0,#0x78]
00013c  e3c000f0          BIC      r0,r0,#0xf0
000140  e3a0120b          MOV      r1,#0xb0000000
000144  e5810078          STR      r0,[r1,#0x78]
;;;67         GPIO_OpenBit(EXT_SEL_PORT, EXT_SEL_PIN, DIR_OUTPUT, NO_PULL_UP); 
000148  e3a03000          MOV      r3,#0
00014c  e3a02001          MOV      r2,#1
000150  e3a01002          MOV      r1,#2
000154  e3a00040          MOV      r0,#0x40
000158  ebfffffe          BL       GPIO_OpenBit
;;;68         //GPIO_ClrBit(EXT_SEL_PORT, EXT_SEL_PIN); 
;;;69         GPIO_SetBit(EXT_SEL_PORT, EXT_SEL_PIN); 
00015c  e3a01002          MOV      r1,#2
000160  e3a00040          MOV      r0,#0x40
000164  ebfffffe          BL       GPIO_SetBit
;;;70         #endif 
;;;71         
;;;72         /* configure UART */
;;;73         param.uFreq = 12000000;
000168  e59f0240          LDR      r0,|L1.944|
00016c  e59f1240          LDR      r1,|L1.948|
000170  e5810000          STR      r0,[r1,#0]  ; param
;;;74         param.uBaudRate = baudRate;
000174  e2810000          ADD      r0,r1,#0
000178  e5805004          STR      r5,[r0,#4]  ; param
;;;75         param.ucUartNo = UART7;
00017c  e3a00007          MOV      r0,#7
000180  e5c10008          STRB     r0,[r1,#8]  ; param
;;;76         param.ucDataBits = DATA_BITS_8;
000184  e3a00003          MOV      r0,#3
000188  e5c10009          STRB     r0,[r1,#9]  ; param
;;;77         param.ucStopBits = STOP_BITS_1;
00018c  e3a00000          MOV      r0,#0
000190  e5c1000a          STRB     r0,[r1,#0xa]  ; param
;;;78         param.ucParity = PARITY_NONE;
000194  e5c1000b          STRB     r0,[r1,#0xb]  ; param
;;;79         param.ucRxTriggerLevel = UART_FCR_RFITL_1BYTE;
000198  e5c1000c          STRB     r0,[r1,#0xc]  ; param
;;;80         retval = uartOpen(&param);
00019c  e2810000          ADD      r0,r1,#0
0001a0  ebfffffe          BL       uartOpen
0001a4  e1a04000          MOV      r4,r0
;;;81         if(retval != 0) 
0001a8  e3540000          CMP      r4,#0
0001ac  0a000003          BEQ      |L1.448|
;;;82         {
;;;83             sysprintf("hwInit Open UART error!\n");
0001b0  e28f0c02          ADR      r0,|L1.952|
0001b4  ebfffffe          BL       sysprintf
;;;84             return FALSE;
0001b8  e3a00000          MOV      r0,#0
                  |L1.444|
;;;85         }
;;;86     
;;;87         /* set TX interrupt mode */
;;;88         retval = uartIoctl(param.ucUartNo, UART_IOC_SETTXMODE, UARTPOLLMODE /*UARTINTMODE*/ , 0);
;;;89         //retval = uartIoctl(param.ucUartNo, UART_IOC_SETTXMODE, UARTINTMODE , 0);
;;;90         if (retval != 0) 
;;;91         {
;;;92             sysprintf("hwInit Set TX interrupt mode fail!\n");
;;;93             return FALSE;
;;;94         }
;;;95     
;;;96         /* set RX interrupt mode */
;;;97         retval = uartIoctl(param.ucUartNo, UART_IOC_SETRXMODE, UARTINTMODE, 0);
;;;98         if (retval != 0) 
;;;99         {
;;;100            sysprintf("hwInit Set RX interrupt mode fail!\n");
;;;101            return FALSE;
;;;102        }
;;;103    
;;;104        return TRUE;
;;;105    }
0001bc  e8bd8070          POP      {r4-r6,pc}
                  |L1.448|
0001c0  e59f11ec          LDR      r1,|L1.948|
0001c4  e5d10008          LDRB     r0,[r1,#8]            ;88  ; param
0001c8  e3a03000          MOV      r3,#0                 ;88
0001cc  e1a02003          MOV      r2,r3                 ;88
0001d0  e3a01001          MOV      r1,#1                 ;88
0001d4  ebfffffe          BL       uartIoctl
0001d8  e1a04000          MOV      r4,r0                 ;88
0001dc  e3540000          CMP      r4,#0                 ;90
0001e0  0a000003          BEQ      |L1.500|
0001e4  e28f0f7a          ADR      r0,|L1.980|
0001e8  ebfffffe          BL       sysprintf
0001ec  e3a00000          MOV      r0,#0                 ;93
0001f0  eafffff1          B        |L1.444|
                  |L1.500|
0001f4  e59f11b8          LDR      r1,|L1.948|
0001f8  e5d10008          LDRB     r0,[r1,#8]            ;97  ; param
0001fc  e3a03000          MOV      r3,#0                 ;97
000200  e3a02001          MOV      r2,#1                 ;97
000204  e3a01002          MOV      r1,#2                 ;97
000208  ebfffffe          BL       uartIoctl
00020c  e1a04000          MOV      r4,r0                 ;97
000210  e3540000          CMP      r4,#0                 ;98
000214  0a000003          BEQ      |L1.552|
000218  e28f0f76          ADR      r0,|L1.1016|
00021c  ebfffffe          BL       sysprintf
000220  e3a00000          MOV      r0,#0                 ;101
000224  eaffffe4          B        |L1.444|
                  |L1.552|
000228  e3a00001          MOV      r0,#1                 ;104
00022c  eaffffe2          B        |L1.444|
;;;106    
                          ENDP

                  UART7DrvInit PROC
;;;109    /*-----------------------------------------*/
;;;110    BOOL UART7DrvInit(UINT32 baudRate)
000230  e92d4070          PUSH     {r4-r6,lr}
;;;111    {
000234  e1a04000          MOV      r4,r0
;;;112        int retval;
;;;113        sysprintf("UART7DrvInit!!\n");
000238  e28f0f77          ADR      r0,|L1.1052|
00023c  ebfffffe          BL       sysprintf
;;;114        baudRateTemp = baudRate;
000240  e59f01e4          LDR      r0,|L1.1068|
000244  e5804000          STR      r4,[r0,#0]  ; baudRateTemp
;;;115        retval = hwInit(baudRate);
000248  e1a00004          MOV      r0,r4
00024c  ebfffffe          BL       hwInit
000250  e1a05000          MOV      r5,r0
;;;116        return retval;
000254  e1a00005          MOV      r0,r5
;;;117    }
000258  e8bd8070          POP      {r4-r6,pc}
;;;118    INT32 UART7Write(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART7Write PROC
00025c  e92d4070          PUSH     {r4-r6,lr}
;;;119    {
000260  e1a04000          MOV      r4,r0
000264  e1a05001          MOV      r5,r1
;;;120        INT32  reVal;
;;;121        reVal = uartWrite(param.ucUartNo, pucBuf, uLen);
000268  e59f1144          LDR      r1,|L1.948|
00026c  e5d10008          LDRB     r0,[r1,#8]  ; param
000270  e1a02005          MOV      r2,r5
000274  e1a01004          MOV      r1,r4
000278  ebfffffe          BL       uartWrite
00027c  e1a06000          MOV      r6,r0
;;;122        /*
;;;123        terninalPrintf("UART7Write >= ");
;;;124        for(int i=0;i<uLen;i++)
;;;125            terninalPrintf("%02x ",*(pucBuf+i));
;;;126        terninalPrintf("\r\n");
;;;127        */
;;;128        return reVal;
000280  e1a00006          MOV      r0,r6
;;;129    }
000284  e8bd8070          POP      {r4-r6,pc}
;;;130    INT32 UART7Read(PUINT8 pucBuf, UINT32 uLen)
                          ENDP

                  UART7Read PROC
000288  e92d4070          PUSH     {r4-r6,lr}
;;;131    {
00028c  e1a04000          MOV      r4,r0
000290  e1a05001          MOV      r5,r1
;;;132        /*
;;;133        INT32 temp;
;;;134        memset(pucBuf,0x00,uLen);
;;;135        temp = uartRead(param.ucUartNo, pucBuf, uLen);
;;;136        if(temp > 0)
;;;137        {        
;;;138            terninalPrintf("UART7Read <= ");
;;;139            int counter = 0; 
;;;140            for(int i=0;i<temp;i++)
;;;141                terninalPrintf("%02x ",pucBuf[i]);    
;;;142            terninalPrintf("\r\n");
;;;143        }        
;;;144        return temp;  
;;;145        */
;;;146        
;;;147        return uartRead(param.ucUartNo, pucBuf, uLen);
000294  e59f1118          LDR      r1,|L1.948|
000298  e5d10008          LDRB     r0,[r1,#8]  ; param
00029c  e1a02005          MOV      r2,r5
0002a0  e1a01004          MOV      r1,r4
0002a4  ebfffffe          BL       uartRead
;;;148    }
0002a8  e8bd8070          POP      {r4-r6,pc}
;;;149    BaseType_t UART7ReadWait(TickType_t time)
                          ENDP

                  UART7ReadWait PROC
0002ac  e92d4010          PUSH     {r4,lr}
;;;150    {
0002b0  e1a04000          MOV      r4,r0
;;;151        return  uartWaitReadEvent(param.ucUartNo, time);
0002b4  e59f10f8          LDR      r1,|L1.948|
0002b8  e5d10008          LDRB     r0,[r1,#8]  ; param
0002bc  e1a01004          MOV      r1,r4
0002c0  ebfffffe          BL       uartWaitReadEvent
;;;152    }
0002c4  e8bd8010          POP      {r4,pc}
;;;153    
                          ENDP

                  UART7SetRS232Power PROC
;;;188    
;;;189    BOOL UART7SetRS232Power(BOOL flag)
0002c8  e1a01000          MOV      r1,r0
;;;190    {
;;;191        return FALSE;
0002cc  e3a00000          MOV      r0,#0
;;;192    }
0002d0  e12fff1e          BX       lr
;;;193    INT UART7Ioctl(UINT32 uCmd, UINT32 uArg0, UINT32 uArg1)
                          ENDP

                  UART7Ioctl PROC
0002d4  e92d4070          PUSH     {r4-r6,lr}
;;;194    {
0002d8  e1a04000          MOV      r4,r0
0002dc  e1a05001          MOV      r5,r1
0002e0  e1a06002          MOV      r6,r2
;;;195        if(uCmd == 80)
0002e4  e3540050          CMP      r4,#0x50
0002e8  1a00000a          BNE      |L1.792|
;;;196        {
;;;197            if(uArg0 == 1)
0002ec  e3550001          CMP      r5,#1
0002f0  1a000003          BNE      |L1.772|
;;;198                OTAinitFlag = TRUE;
0002f4  e3a00001          MOV      r0,#1
0002f8  e59f10ac          LDR      r1,|L1.940|
0002fc  e5c10000          STRB     r0,[r1,#0]  ; OTAinitFlag
000300  ea000002          B        |L1.784|
                  |L1.772|
;;;199            else 
;;;200                OTAinitFlag = FALSE;
000304  e3a00000          MOV      r0,#0
000308  e59f109c          LDR      r1,|L1.940|
00030c  e5c10000          STRB     r0,[r1,#0]  ; OTAinitFlag
                  |L1.784|
;;;201            return 0;
000310  e3a00000          MOV      r0,#0
                  |L1.788|
;;;202        }
;;;203        return uartIoctl(param.ucUartNo, uCmd, uArg0, uArg1);
;;;204    }
000314  e8bd8070          POP      {r4-r6,pc}
                  |L1.792|
000318  e59f1094          LDR      r1,|L1.948|
00031c  e5d10008          LDRB     r0,[r1,#8]            ;203  ; param
000320  e1a03006          MOV      r3,r6                 ;203
000324  e1a02005          MOV      r2,r5                 ;203
000328  e1a01004          MOV      r1,r4                 ;203
00032c  ebfffffe          BL       uartIoctl
000330  eafffff7          B        |L1.788|
;;;205    
                          ENDP

                  UART7SetRTS PROC
;;;206    void UART7SetRTS(BOOL flag)
000334  e92d4010          PUSH     {r4,lr}
;;;207    {
000338  e1a04000          MOV      r4,r0
;;;208        if(flag)
00033c  e3540000          CMP      r4,#0
000340  0a000006          BEQ      |L1.864|
;;;209            uartIoctl(param.ucUartNo, UART_IOC_SETRTSSIGNAL, UART_RTS_LOW, 0);
000344  e59f1068          LDR      r1,|L1.948|
000348  e5d10008          LDRB     r0,[r1,#8]  ; param
00034c  e3a03000          MOV      r3,#0
000350  e1a02003          MOV      r2,r3
000354  e3a01010          MOV      r1,#0x10
000358  ebfffffe          BL       uartIoctl
00035c  ea000005          B        |L1.888|
                  |L1.864|
;;;210        else
;;;211            uartIoctl(param.ucUartNo, UART_IOC_SETRTSSIGNAL, UART_RTS_HIGH, 0);
000360  e59f104c          LDR      r1,|L1.948|
000364  e5d10008          LDRB     r0,[r1,#8]  ; param
000368  e3a03000          MOV      r3,#0
00036c  e3a02001          MOV      r2,#1
000370  e3a01010          MOV      r1,#0x10
000374  ebfffffe          BL       uartIoctl
                  |L1.888|
;;;212    }
000378  e8bd8010          POP      {r4,pc}
;;;213    
                          ENDP

                  UART7FlushBuffer PROC
;;;214    void UART7FlushBuffer(void)
00037c  e92d4010          PUSH     {r4,lr}
;;;215    {
;;;216        //sysprintf(" --> CardFlushBuffer\n");
;;;217        //if (pUartInterface->ioctlFunc(UART_IOC_FLUSH_TX_BUFFER, 0, 0) != 0) {
;;;218       //     sysprintf("Set TX Flush fail!\n");
;;;219        //    return;
;;;220        //}
;;;221        if (UART7Ioctl(UART_IOC_FLUSH_RX_BUFFER, 0, 0) != 0) {
000380  e3a02000          MOV      r2,#0
000384  e1a01002          MOV      r1,r2
000388  e3a00019          MOV      r0,#0x19
00038c  ebfffffe          BL       UART7Ioctl
000390  e3500000          CMP      r0,#0
000394  0a000002          BEQ      |L1.932|
;;;222            sysprintf("Set RX Flush fail!\n");
000398  e28f0090          ADR      r0,|L1.1072|
00039c  ebfffffe          BL       sysprintf
                  |L1.928|
;;;223            return;
;;;224        }
;;;225    }
0003a0  e8bd8010          POP      {r4,pc}
                  |L1.932|
0003a4  e1a00000          MOV      r0,r0
0003a8  eafffffc          B        |L1.928|
                  |L1.940|
                          DCD      OTAinitFlag
                  |L1.944|
                          DCD      0x00b71b00
                  |L1.948|
                          DCD      param
                  |L1.952|
0003b8  6877496e          DCB      "hwInit Open UART error!\n",0
0003bc  6974204f
0003c0  70656e20
0003c4  55415254
0003c8  20657272
0003cc  6f72210a
0003d0  00      
0003d1  00                DCB      0
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L1.980|
0003d4  6877496e          DCB      "hwInit Set TX interrupt mode fail!\n",0
0003d8  69742053
0003dc  65742054
0003e0  5820696e
0003e4  74657272
0003e8  75707420
0003ec  6d6f6465
0003f0  20666169
0003f4  6c210a00
                  |L1.1016|
0003f8  6877496e          DCB      "hwInit Set RX interrupt mode fail!\n",0
0003fc  69742053
000400  65742052
000404  5820696e
000408  74657272
00040c  75707420
000410  6d6f6465
000414  20666169
000418  6c210a00
                  |L1.1052|
00041c  55415254          DCB      "UART7DrvInit!!\n",0
000420  37447276
000424  496e6974
000428  21210a00
                  |L1.1068|
                          DCD      baudRateTemp
                  |L1.1072|
000430  53657420          DCB      "Set RX Flush fail!\n",0
000434  52582046
000438  6c757368
00043c  20666169
000440  6c210a00
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  param
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  baudRateTemp
                          DCD      0x0001c200
                  OTAinitFlag
000004  00                DCB      0x00
