; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\blkcommon.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\blkcommon.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\blkcommon.crf src\syshal\blk\blkcommon.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BlkCommonInit PROC
;;;50     /*-----------------------------------------*/
;;;51     BOOL BlkCommonInit(void)
000000  e92d4010          PUSH     {r4,lr}
;;;52     {
;;;53         sysprintf("BlkCommonInit!!\n");
000004  e28f00f8          ADR      r0,|L1.260|
000008  ebfffffe          BL       sysprintf
;;;54     //    IPASSBLKLoadAllFile();
;;;55     //    ECCBLKLoadAllFile();
;;;56         return TRUE;
00000c  e3a00001          MOV      r0,#1
;;;57     }
000010  e8bd8010          POP      {r4,pc}
;;;58     
                          ENDP

                  BlkHexStr2Dec PROC
;;;59     #define TO_DEX_LEN   4
;;;60     uint32_t BlkHexStr2Dec(uint8_t* str, int size)
000014  e92d41ff          PUSH     {r0-r8,lr}
;;;61     {
000018  e1a04000          MOV      r4,r0
00001c  e1a08001          MOV      r8,r1
;;;62         int decValue, decValue2;
;;;63         uint8_t strTmp[TO_DEX_LEN + 1];
;;;64         uint8_t strTmp2[TO_DEX_LEN + 1];
;;;65         uint32_t  reVal = 0;
000020  e3a07000          MOV      r7,#0
;;;66         memcpy(strTmp, str, TO_DEX_LEN);
000024  e3a02004          MOV      r2,#4
000028  e1a01004          MOV      r1,r4
00002c  e28d0008          ADD      r0,sp,#8
000030  ebfffffe          BL       __aeabi_memcpy
;;;67         strTmp[TO_DEX_LEN] = 0x0;
000034  e3a00000          MOV      r0,#0
000038  e5cd000c          STRB     r0,[sp,#0xc]
;;;68         decValue = strtol((char*)strTmp,NULL,16);
00003c  e3a02010          MOV      r2,#0x10
000040  e3a01000          MOV      r1,#0
000044  e28d0008          ADD      r0,sp,#8
000048  ebfffffe          BL       strtol
00004c  e1a05000          MOV      r5,r0
;;;69         memcpy(strTmp2, str + TO_DEX_LEN, TO_DEX_LEN);
000050  e3a02004          MOV      r2,#4
000054  e2841004          ADD      r1,r4,#4
000058  e1a0000d          MOV      r0,sp
00005c  ebfffffe          BL       __aeabi_memcpy
;;;70         strTmp2[TO_DEX_LEN] = 0x0;
000060  e3a00000          MOV      r0,#0
000064  e5cd0004          STRB     r0,[sp,#4]
;;;71         decValue2 = strtol((char*)strTmp2,NULL,16);    
000068  e3a02010          MOV      r2,#0x10
00006c  e3a01000          MOV      r1,#0
000070  e1a0000d          MOV      r0,sp
000074  ebfffffe          BL       strtol
000078  e1a06000          MOV      r6,r0
;;;72         reVal = decValue<<(TO_DEX_LEN*4) | decValue2;     
00007c  e1867805          ORR      r7,r6,r5,LSL #16
;;;73         //sysprintf("HexStr2Dec:[%s:%s], [%d, %d] ==> %d, 0x%08x\r\n", strTmp, strTmp2, decValue, decValue2, reVal, reVal);
;;;74         return reVal;
000080  e1a00007          MOV      r0,r7
000084  e28dd010          ADD      sp,sp,#0x10
;;;75     }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;76     
                          ENDP

                  BlkHex2HexStr PROC
;;;77     uint32_t BlkHex2HexStr(uint8_t* str, int size)
00008c  e92d41ff          PUSH     {r0-r8,lr}
;;;78     {
000090  e1a04000          MOV      r4,r0
000094  e1a08001          MOV      r8,r1
;;;79         int decValue, decValue2;
;;;80         uint8_t strTmp[TO_DEX_LEN + 1];
;;;81         uint8_t strTmp2[TO_DEX_LEN + 1];
;;;82         uint32_t  reVal = 0;
000098  e3a07000          MOV      r7,#0
;;;83         memcpy(strTmp, str, TO_DEX_LEN);
00009c  e3a02004          MOV      r2,#4
0000a0  e1a01004          MOV      r1,r4
0000a4  e28d0008          ADD      r0,sp,#8
0000a8  ebfffffe          BL       __aeabi_memcpy
;;;84         strTmp[TO_DEX_LEN] = 0x0;
0000ac  e3a00000          MOV      r0,#0
0000b0  e5cd000c          STRB     r0,[sp,#0xc]
;;;85         decValue = strtol((char*)strTmp,NULL,16);
0000b4  e3a02010          MOV      r2,#0x10
0000b8  e3a01000          MOV      r1,#0
0000bc  e28d0008          ADD      r0,sp,#8
0000c0  ebfffffe          BL       strtol
0000c4  e1a05000          MOV      r5,r0
;;;86         memcpy(strTmp2, str + TO_DEX_LEN, TO_DEX_LEN);
0000c8  e3a02004          MOV      r2,#4
0000cc  e2841004          ADD      r1,r4,#4
0000d0  e1a0000d          MOV      r0,sp
0000d4  ebfffffe          BL       __aeabi_memcpy
;;;87         strTmp2[TO_DEX_LEN] = 0x0;
0000d8  e3a00000          MOV      r0,#0
0000dc  e5cd0004          STRB     r0,[sp,#4]
;;;88         decValue2 = strtol((char*)strTmp2,NULL,16);    
0000e0  e3a02010          MOV      r2,#0x10
0000e4  e3a01000          MOV      r1,#0
0000e8  e1a0000d          MOV      r0,sp
0000ec  ebfffffe          BL       strtol
0000f0  e1a06000          MOV      r6,r0
;;;89         reVal = decValue<<(TO_DEX_LEN*4) | decValue2;     
0000f4  e1867805          ORR      r7,r6,r5,LSL #16
;;;90         //sysprintf("HexStr2Dec:[%s:%s], [%d, %d] ==> %d, 0x%08x\r\n", strTmp, strTmp2, decValue, decValue2, reVal, reVal);
;;;91         return reVal;
0000f8  e1a00007          MOV      r0,r7
0000fc  e28dd010          ADD      sp,sp,#0x10
;;;92     }
000100  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP

                  |L1.260|
000104  426c6b43          DCB      "BlkCommonInit!!\n",0
000108  6f6d6d6f
00010c  6e496e69
000110  7421210a
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
