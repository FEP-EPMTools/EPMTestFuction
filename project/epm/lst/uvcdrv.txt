; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\obj\uvcdrv.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uvcdrv.d --cpu=ARM926EJ-S --apcs=interwork -O0 -I.\src -I..\..\common\src\BSP\Driver\Include -I..\..\common\src\FreeRTOS -I..\..\common\src\FreeRTOS\Source\include -I..\..\common\src\FreeRTOS\Source\portable\RVDS\ARM926EJ-S -I..\..\common\src\BSP\ThirdParty\FATFS\src -I.\src\userdrv -I.\src\syshal -I.\src\user -I.\src\userdrv\vl53l0x\core\inc -I.\src\userdrv\vl53l0x\platform\inc -I.\src\syshal\json -I.\src\syshal\modemlib -I..\..\common\src\BSP\ThirdParty\yaffs2 -I..\..\common\src\BSP\ThirdParty\yaffs2\include -I..\..\common\src\BSP\ThirdParty\yaffs2\include\asm -I..\..\common\src\BSP\ThirdParty\yaffs2\include\linux -I.\src\syshal\yaffs2 -I..\..\common\src\BSP\Library\SmartcardLib\Include -I.\src\syshal\cardlib -I.\src\syshal\cardlog -I.\src\syshal\blk -I..\..\common\src\BSP\Library\USB_HOST\Inc -I..\..\common\src\BSP\Library\USB_HOST\Inc\usb_uvc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DEPM_PROJECT -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DCONFIG_YAFFS_PROVIDE_DEFS -DCONFIG_YAFFSFS_PROVIDE_VALUES --omf_browse=.\obj\uvcdrv.crf src\syshal\uvcdrv.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  uvcSetPower PROC
;;;68     /*-----------------------------------------*/
;;;69     static BOOL uvcSetPower(BOOL flag)
000000  e92d4010          PUSH     {r4,lr}
;;;70     {    
000004  e1a04000          MOV      r4,r0
;;;71         //sysprintf("uvcSetPower1 [%08x] -A- \r\n", GPIO_ReadPort(GPIOB));
;;;72         if(flag)
000008  e3540000          CMP      r4,#0
00000c  0a000005          BEQ      |L1.40|
;;;73         {      
;;;74             sysprintf("uvcSetPower ON!!\n"); 
000010  e28f0e22          ADR      r0,|L1.568|
000014  ebfffffe          BL       sysprintf
;;;75             //GPIO_SetBit(POWER_PORT, POWER_PIN);    
;;;76             GPIO_ClrBit(POWER_PORT, POWER_PIN);        
000018  e3a01020          MOV      r1,#0x20
00001c  e3a00040          MOV      r0,#0x40
000020  ebfffffe          BL       GPIO_ClrBit
000024  ea000004          B        |L1.60|
                  |L1.40|
;;;77         }
;;;78         else
;;;79         {
;;;80             sysprintf("uvcSetPower OFF!!\n"); 
000028  e28f0f87          ADR      r0,|L1.588|
00002c  ebfffffe          BL       sysprintf
;;;81             //GPIO_ClrBit(POWER_PORT, POWER_PIN);
;;;82             GPIO_SetBit(POWER_PORT, POWER_PIN);        
000030  e3a01020          MOV      r1,#0x20
000034  e3a00040          MOV      r0,#0x40
000038  ebfffffe          BL       GPIO_SetBit
                  |L1.60|
;;;83         }
;;;84         //sysprintf("uvcSetPower1 [%08x] -B- \r\n", GPIO_ReadPort(GPIOB));
;;;85        // vTaskDelay(10000/portTICK_RATE_MS);
;;;86        // sysprintf("uvcSetPower1 [%08x] -C- \r\n", GPIO_ReadPort(GPIOB));
;;;87         powerStatus = flag;
00003c  e59f021c          LDR      r0,|L1.608|
000040  e5c04000          STRB     r4,[r0,#0]  ; powerStatus
;;;88         return TRUE;
000044  e3a00001          MOV      r0,#1
;;;89     }
000048  e8bd8010          POP      {r4,pc}
;;;90     static BOOL uvcSetExtSel(int sel)
                          ENDP

                  uvcSetExtSel PROC
00004c  e92d4010          PUSH     {r4,lr}
;;;91     {
000050  e1a04000          MOV      r4,r0
;;;92         if(sel == 0)
000054  e3540000          CMP      r4,#0
000058  1a000005          BNE      |L1.116|
;;;93         {      
;;;94             sysprintf("uvcSetExtSel 0!!\n"); 
00005c  e28f0c02          ADR      r0,|L1.612|
000060  ebfffffe          BL       sysprintf
;;;95             GPIO_SetBit(EXT_SEL_PORT, EXT_SEL_PIN);              
000064  e3a01004          MOV      r1,#4
000068  e3a00040          MOV      r0,#0x40
00006c  ebfffffe          BL       GPIO_SetBit
000070  ea000004          B        |L1.136|
                  |L1.116|
;;;96         }
;;;97         else
;;;98         {
;;;99             sysprintf("uvcSetExtSel 1!!\n"); 
000074  e28f0f7f          ADR      r0,|L1.632|
000078  ebfffffe          BL       sysprintf
;;;100            GPIO_ClrBit(EXT_SEL_PORT, EXT_SEL_PIN);         
00007c  e3a01004          MOV      r1,#4
000080  e3a00040          MOV      r0,#0x40
000084  ebfffffe          BL       GPIO_ClrBit
                  |L1.136|
;;;101        }
;;;102        return TRUE;
000088  e3a00001          MOV      r0,#1
;;;103    }
00008c  e8bd8010          POP      {r4,pc}
;;;104    static BOOL uvcSetPower0(BOOL flag)
                          ENDP

                  uvcSetPower0 PROC
000090  e92d4010          PUSH     {r4,lr}
;;;105    {
000094  e1a04000          MOV      r4,r0
;;;106        if(flag)
000098  e3540000          CMP      r4,#0
00009c  0a000003          BEQ      |L1.176|
;;;107        {
;;;108            uvcSetExtSel(0);
0000a0  e3a00000          MOV      r0,#0
0000a4  ebfffffe          BL       uvcSetExtSel
;;;109            vTaskDelay(200/portTICK_RATE_MS);
0000a8  e3a00014          MOV      r0,#0x14
0000ac  ebfffffe          BL       vTaskDelay
                  |L1.176|
;;;110        }
;;;111        return uvcSetPower(flag);
0000b0  e1a00004          MOV      r0,r4
0000b4  ebfffffe          BL       uvcSetPower
;;;112    }
0000b8  e8bd8010          POP      {r4,pc}
;;;113    static BOOL uvcSetPower1(BOOL flag)
                          ENDP

                  uvcSetPower1 PROC
0000bc  e92d4010          PUSH     {r4,lr}
;;;114    {
0000c0  e1a04000          MOV      r4,r0
;;;115        if(flag)
0000c4  e3540000          CMP      r4,#0
0000c8  0a000003          BEQ      |L1.220|
;;;116        {
;;;117            uvcSetExtSel(1);
0000cc  e3a00001          MOV      r0,#1
0000d0  ebfffffe          BL       uvcSetExtSel
;;;118            vTaskDelay(200/portTICK_RATE_MS);
0000d4  e3a00014          MOV      r0,#0x14
0000d8  ebfffffe          BL       vTaskDelay
                  |L1.220|
;;;119        }
;;;120        return uvcSetPower(flag);
0000dc  e1a00004          MOV      r0,r4
0000e0  ebfffffe          BL       uvcSetPower
;;;121    }
0000e4  e8bd8010          POP      {r4,pc}
;;;122    
                          ENDP

                  hwInit PROC
;;;123    
;;;124    static BOOL hwInit(void)
0000e8  e92d4010          PUSH     {r4,lr}
;;;125    {     
;;;126        sysprintf("UVCDrvInit hwInit!!\n");  
0000ec  e28f0f66          ADR      r0,|L1.652|
0000f0  ebfffffe          BL       sysprintf
;;;127        outpw(REG_CLK_HCLKEN,(inpw(REG_CLK_HCLKEN) & ~(0x1<<19)) | (0x0<<19));//disable USB device clock.
0000f4  e3a0020b          MOV      r0,#0xb0000000
0000f8  e5900210          LDR      r0,[r0,#0x210]
0000fc  e3c00702          BIC      r0,r0,#0x80000
000100  e3a0120b          MOV      r1,#0xb0000000
000104  e5810210          STR      r0,[r1,#0x210]
;;;128        //outpw(REG_CLK_HCLKEN, inpw(REG_CLK_HCLKEN) | 0x40000);
;;;129        outpw(REG_CLK_HCLKEN,(inpw(REG_CLK_HCLKEN) & ~(0x1<<18)) | (0x1<<18));//enable USB HOST clock.
000108  e3a0020b          MOV      r0,#0xb0000000
00010c  e5900210          LDR      r0,[r0,#0x210]
000110  e3800701          ORR      r0,r0,#0x40000
000114  e5810210          STR      r0,[r1,#0x210]
;;;130    	//outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0) | 0x10000);//uart0 clock
;;;131        
;;;132        
;;;133        outpw(REG_CLK_PCLKEN0,inpw(REG_CLK_PCLKEN0) | (1<<3)); //Enable GPIO engin clock.
000118  e3a0020b          MOV      r0,#0xb0000000
00011c  e5900218          LDR      r0,[r0,#0x218]
000120  e3800008          ORR      r0,r0,#8
000124  e5810218          STR      r0,[r1,#0x218]
;;;134    
;;;135    	// set PE.14 & PE.15 for USBH_PPWR0 & USBH_PPWR1
;;;136    	//outpw(REG_SYS_GPE_MFPH, (inpw(REG_SYS_GPE_MFPH) & ~0xff000000) | 0x77000000);
;;;137    
;;;138        //GPB2 Ext Sel pin
;;;139        outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xF<<8)) | (0x0<<8));
000128  e3a0020b          MOV      r0,#0xb0000000
00012c  e5900078          LDR      r0,[r0,#0x78]
000130  e3c00c0f          BIC      r0,r0,#0xf00
000134  e5810078          STR      r0,[r1,#0x78]
;;;140        GPIO_OpenBit(EXT_SEL_PORT, EXT_SEL_PIN, DIR_OUTPUT, NO_PULL_UP);     
000138  e3a03000          MOV      r3,#0
00013c  e3a02001          MOV      r2,#1
000140  e3a01004          MOV      r1,#4
000144  e3a00040          MOV      r0,#0x40
000148  ebfffffe          BL       GPIO_OpenBit
;;;141        uvcSetExtSel(0);
00014c  e3a00000          MOV      r0,#0
000150  ebfffffe          BL       uvcSetExtSel
;;;142        
;;;143        //GPB5 Power pin (USB1)
;;;144        outpw(REG_SYS_GPB_MFPL,(inpw(REG_SYS_GPB_MFPL) & ~(0xF<<20)) | (0x0<<20));
000154  e3a0020b          MOV      r0,#0xb0000000
000158  e5900078          LDR      r0,[r0,#0x78]
00015c  e3c0060f          BIC      r0,r0,#0xf00000
000160  e3a0120b          MOV      r1,#0xb0000000
000164  e5810078          STR      r0,[r1,#0x78]
;;;145        GPIO_OpenBit(POWER_PORT, POWER_PIN, DIR_OUTPUT, NO_PULL_UP); 
000168  e3a03000          MOV      r3,#0
00016c  e3a02001          MOV      r2,#1
000170  e3a01020          MOV      r1,#0x20
000174  e3a00040          MOV      r0,#0x40
000178  ebfffffe          BL       GPIO_OpenBit
;;;146        uvcSetPower(FALSE);
00017c  e3a00000          MOV      r0,#0
000180  ebfffffe          BL       uvcSetPower
;;;147    
;;;148        return TRUE;
000184  e3a00001          MOV      r0,#1
;;;149    }
000188  e8bd8010          POP      {r4,pc}
;;;150    
                          ENDP

                  UVCSetPower PROC
;;;206    
;;;207    void UVCSetPower(int index, BOOL flag)
00018c  e92d4070          PUSH     {r4-r6,lr}
;;;208    {  
000190  e1a05000          MOV      r5,r0
000194  e1a04001          MOV      r4,r1
;;;209        //sysprintf("UVCSetPower [%d:%d]!!\n", index, flag);
;;;210        if(index == 0)
000198  e3550000          CMP      r5,#0
00019c  1a000002          BNE      |L1.428|
;;;211        {
;;;212            uvcSetPower0(flag);
0001a0  e1a00004          MOV      r0,r4
0001a4  ebfffffe          BL       uvcSetPower0
0001a8  ea000001          B        |L1.436|
                  |L1.428|
;;;213        }
;;;214        else
;;;215        {
;;;216            uvcSetPower1(flag);   
0001ac  e1a00004          MOV      r0,r4
0001b0  ebfffffe          BL       uvcSetPower1
                  |L1.436|
;;;217        }
;;;218    }
0001b4  e8bd8070          POP      {r4-r6,pc}
;;;219    
                          ENDP

                  UVCDrvInit PROC
;;;153    /*-----------------------------------------*/
;;;154    BOOL UVCDrvInit(BOOL testModeFlag)
0001b8  e92d4010          PUSH     {r4,lr}
;;;155    {
0001bc  e1a04000          MOV      r4,r0
;;;156        if(initFlag)
0001c0  e59f00dc          LDR      r0,|L1.676|
0001c4  e5d00000          LDRB     r0,[r0,#0]  ; initFlag
0001c8  e3500000          CMP      r0,#0
0001cc  0a000003          BEQ      |L1.480|
;;;157        {
;;;158            sysprintf("UVCDrvInit already inited!!\n");  
0001d0  e28f00d0          ADR      r0,|L1.680|
0001d4  ebfffffe          BL       sysprintf
;;;159            return TRUE;
0001d8  e3a00001          MOV      r0,#1
                  |L1.476|
;;;160        }
;;;161        sysprintf("UVCDrvInit!!\n");  
;;;162        
;;;163        xRunningSemaphore  = xSemaphoreCreateMutex();
;;;164        
;;;165        hwInit();
;;;166        
;;;167        usbh_core_init();    
;;;168        
;;;169    	usbh_uvc_init();
;;;170    	//usbh_pooling_hubs();
;;;171        //sysprintf("UVCDrvInit Exit!!\n");
;;;172        
;;;173        usbh_pooling_hubs();
;;;174        usbh_pooling_hubs();
;;;175        
;;;176        //UVCSetPower(0, FALSE); 
;;;177        UVCSetPower(0, FALSE);
;;;178        UVCSetPower(1, FALSE);
;;;179        
;;;180    
;;;181        
;;;182        initFlag = TRUE;
;;;183        return TRUE;
;;;184    }
0001dc  e8bd8010          POP      {r4,pc}
                  |L1.480|
0001e0  e28f00e0          ADR      r0,|L1.712|
0001e4  ebfffffe          BL       sysprintf
0001e8  e3a00001          MOV      r0,#1                 ;163
0001ec  ebfffffe          BL       xQueueCreateMutex
0001f0  e59f10e0          LDR      r1,|L1.728|
0001f4  e5810000          STR      r0,[r1,#0]            ;163  ; xRunningSemaphore
0001f8  ebfffffe          BL       hwInit
0001fc  ebfffffe          BL       usbh_core_init
000200  ebfffffe          BL       usbh_uvc_init
000204  ebfffffe          BL       usbh_pooling_hubs
000208  ebfffffe          BL       usbh_pooling_hubs
00020c  e3a01000          MOV      r1,#0                 ;177
000210  e1a00001          MOV      r0,r1                 ;177
000214  ebfffffe          BL       UVCSetPower
000218  e3a01000          MOV      r1,#0                 ;178
00021c  e3a00001          MOV      r0,#1                 ;178
000220  ebfffffe          BL       UVCSetPower
000224  e3a00001          MOV      r0,#1                 ;182
000228  e59f1074          LDR      r1,|L1.676|
00022c  e5c10000          STRB     r0,[r1,#0]            ;182  ; initFlag
000230  e1a00000          MOV      r0,r0                 ;183
000234  eaffffe8          B        |L1.476|
                  |L1.568|
000238  75766353          DCB      "uvcSetPower ON!!"
00023c  6574506f
000240  77657220
000244  4f4e2121
                  |L1.584|
000248  0a00              DCB      "\n",0
00024a  00                DCB      0
00024b  00                DCB      0
                  |L1.588|
00024c  75766353          DCB      "uvcSetPower OFF!!\n",0
000250  6574506f
000254  77657220
000258  4f464621
00025c  210a00  
00025f  00                DCB      0
                  |L1.608|
                          DCD      powerStatus
                  |L1.612|
000264  75766353          DCB      "uvcSetExtSel 0!!\n",0
000268  65744578
00026c  7453656c
000270  20302121
000274  0a00    
000276  00                DCB      0
000277  00                DCB      0
                  |L1.632|
000278  75766353          DCB      "uvcSetExtSel 1!!\n",0
00027c  65744578
000280  7453656c
000284  20312121
000288  0a00    
00028a  00                DCB      0
00028b  00                DCB      0
                  |L1.652|
00028c  55564344          DCB      "UVCDrvInit hwInit!!\n",0
000290  7276496e
000294  69742068
000298  77496e69
00029c  7421210a
0002a0  00      
0002a1  00                DCB      0
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L1.676|
                          DCD      initFlag
                  |L1.680|
0002a8  55564344          DCB      "UVCDrvInit already inited!!\n",0
0002ac  7276496e
0002b0  69742061
0002b4  6c726561
0002b8  64792069
0002bc  6e697465
0002c0  6421210a
0002c4  00      
0002c5  00                DCB      0
0002c6  00                DCB      0
0002c7  00                DCB      0
                  |L1.712|
0002c8  55564344          DCB      "UVCDrvInit!!\n",0
0002cc  7276496e
0002d0  69742121
0002d4  0a00    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L1.728|
                          DCD      xRunningSemaphore
                          ENDP

                  UVCDrvInitBurning PROC
;;;186    
;;;187    BOOL UVCDrvInitBurning(BOOL testModeFlag)
0002dc  e92d4010          PUSH     {r4,lr}
;;;188    {  
0002e0  e1a04000          MOV      r4,r0
;;;189        hwInit();
0002e4  ebfffffe          BL       hwInit
;;;190        
;;;191        usbh_core_init();    
0002e8  ebfffffe          BL       usbh_core_init
;;;192        
;;;193    	usbh_uvc_init();
0002ec  ebfffffe          BL       usbh_uvc_init
;;;194    	//usbh_pooling_hubs();
;;;195        //sysprintf("UVCDrvInit Exit!!\n");
;;;196        
;;;197        usbh_pooling_hubs();
0002f0  ebfffffe          BL       usbh_pooling_hubs
;;;198        usbh_pooling_hubs();
0002f4  ebfffffe          BL       usbh_pooling_hubs
;;;199        
;;;200        //UVCSetPower(0, FALSE); 
;;;201        UVCSetPower(0, FALSE);
0002f8  e3a01000          MOV      r1,#0
0002fc  e1a00001          MOV      r0,r1
000300  ebfffffe          BL       UVCSetPower
;;;202        UVCSetPower(1, FALSE);    
000304  e3a01000          MOV      r1,#0
000308  e3a00001          MOV      r0,#1
00030c  ebfffffe          BL       UVCSetPower
;;;203        return TRUE;
000310  e3a00001          MOV      r0,#1
;;;204    }
000314  e8bd8010          POP      {r4,pc}
;;;205    
                          ENDP

                  delay_us PROC
;;;292    
;;;293    void delay_us(int usec)
000318  e92d4038          PUSH     {r3-r5,lr}
;;;294    {
00031c  e1a04000          MOV      r4,r0
;;;295        volatile int  loop = 300 * usec / 5;
000320  e3a01f4b          MOV      r1,#0x12c
000324  e0000194          MUL      r0,r4,r1
000328  e3a01005          MOV      r1,#5
00032c  ebfffffe          BL       __aeabi_idivmod
000330  e58d0000          STR      r0,[sp,#0]
;;;296        while (loop > 0) loop--;
000334  ea000002          B        |L1.836|
                  |L1.824|
000338  e59d0000          LDR      r0,[sp,#0]
00033c  e2400001          SUB      r0,r0,#1
000340  e58d0000          STR      r0,[sp,#0]
                  |L1.836|
000344  e59d0000          LDR      r0,[sp,#0]
000348  e3500000          CMP      r0,#0
00034c  cafffff9          BGT      |L1.824|
;;;297    }
000350  e8bd8038          POP      {r3-r5,pc}
;;;298    
                          ENDP

                  get_ticks PROC
;;;299    uint32_t get_ticks(void)
000354  e92d4010          PUSH     {r4,lr}
;;;300    {
;;;301        return sysGetTicks(TIMER0);
000358  e3a00000          MOV      r0,#0
00035c  ebfffffe          BL       sysGetTicks
;;;302    }
000360  e8bd8010          POP      {r4,pc}
;;;303    
                          ENDP

                  dump_buff_hex PROC
;;;304    
;;;305    void  dump_buff_hex(uint8_t *pucBuff, int nBytes)
000364  e92d41f0          PUSH     {r4-r8,lr}
;;;306    {
000368  e1a07000          MOV      r7,r0
00036c  e1a04001          MOV      r4,r1
;;;307        int     nIdx, i;
;;;308    
;;;309        nIdx = 0;
000370  e3a05000          MOV      r5,#0
;;;310        while (nBytes > 0) 
000374  ea000011          B        |L1.960|
                  |L1.888|
;;;311        {
;;;312            sysprintf("0x%04X  ", nIdx);
000378  e1a01005          MOV      r1,r5
00037c  e28f0e2d          ADR      r0,|L1.1620|
000380  ebfffffe          BL       sysprintf
;;;313            for (i = 0; (i < 16) && (nBytes > 0); i++)
000384  e3a06000          MOV      r6,#0
000388  ea000005          B        |L1.932|
                  |L1.908|
;;;314            {
;;;315                sysprintf("%02x ", pucBuff[nIdx + i]);
00038c  e0850006          ADD      r0,r5,r6
000390  e7d71000          LDRB     r1,[r7,r0]
000394  e28f0fb1          ADR      r0,|L1.1632|
000398  ebfffffe          BL       sysprintf
;;;316                nBytes--;
00039c  e2444001          SUB      r4,r4,#1
0003a0  e2866001          ADD      r6,r6,#1              ;313
                  |L1.932|
0003a4  e3560010          CMP      r6,#0x10              ;313
0003a8  aa000001          BGE      |L1.948|
0003ac  e3540000          CMP      r4,#0                 ;313
0003b0  cafffff5          BGT      |L1.908|
                  |L1.948|
;;;317            }
;;;318            nIdx += 16;
0003b4  e2855010          ADD      r5,r5,#0x10
;;;319            sysprintf("\n");
0003b8  e24f0f5e          ADR      r0,|L1.584|
0003bc  ebfffffe          BL       sysprintf
                  |L1.960|
0003c0  e3540000          CMP      r4,#0                 ;310
0003c4  caffffeb          BGT      |L1.888|
;;;320        }
;;;321        sysprintf("\n");
0003c8  e24f0f62          ADR      r0,|L1.584|
0003cc  ebfffffe          BL       sysprintf
;;;322    }
0003d0  e8bd81f0          POP      {r4-r8,pc}
;;;323    
                          ENDP

                  init_image_buffers PROC
;;;324    
;;;325    void  init_image_buffers(void)
0003d4  e92d4010          PUSH     {r4,lr}
;;;326    {
;;;327        //for (i = 0; i < IMAGE_BUFF_CNT; i++)
;;;328        //{
;;;329        //    _ig[i].buff   = (uint8_t *)((uint32_t)image_buff_pool[i] | 0x80000000);
;;;330        //    _ig[i].len    = 0;
;;;331        //    _ig[i].state  = IMAGE_BUFF_FREE;
;;;332        //}
;;;333        sysprintf("init_image_buffers [%d]!!\n");
0003d8  e28f0fa2          ADR      r0,|L1.1640|
0003dc  ebfffffe          BL       sysprintf
;;;334        _ig.buff   = (uint8_t *)((uint32_t)image_buff_pool | 0x80000000);
0003e0  e59f029c          LDR      r0,|L1.1668|
0003e4  e3800102          ORR      r0,r0,#0x80000000
0003e8  e59f1298          LDR      r1,|L1.1672|
0003ec  e5810000          STR      r0,[r1,#0]  ; _ig
;;;335        _ig.len    = 0;
0003f0  e3a00000          MOV      r0,#0
0003f4  e5810004          STR      r0,[r1,#4]  ; _ig
;;;336        _ig.state  = IMAGE_BUFF_FREE;
0003f8  e5810008          STR      r0,[r1,#8]  ; _ig
;;;337        
;;;338        _igTemp.buff   = (uint8_t *)((uint32_t)image_buff_pool_Temp | 0x80000000);
0003fc  e59f0288          LDR      r0,|L1.1676|
000400  e3800102          ORR      r0,r0,#0x80000000
000404  e59f1284          LDR      r1,|L1.1680|
000408  e5810000          STR      r0,[r1,#0]  ; _igTemp
;;;339        _igTemp.len    = 0;
00040c  e3a00000          MOV      r0,#0
000410  e5810004          STR      r0,[r1,#4]  ; _igTemp
;;;340        _igTemp.state  = IMAGE_BUFF_FREE;
000414  e5810008          STR      r0,[r1,#8]  ; _igTemp
;;;341    
;;;342        //_idx_usb = 0;
;;;343        //_idx_post = 0;
;;;344    }
000418  e8bd8010          POP      {r4,pc}
;;;345    
                          ENDP

                  uvc_rx_callbak PROC
                  |L1.1052|
;;;346    
;;;347    int  uvc_rx_callbak(UVC_DEV_T *vdev, uint8_t *data, int len)
00041c  e92d4070          PUSH     {r4-r6,lr}
;;;348    {
000420  e1a05000          MOV      r5,r0
000424  e1a06001          MOV      r6,r1
000428  e1a04002          MOV      r4,r2
;;;349        //sysprintf("uvc_rx_callbak [%d], changeBufferFlag = %d!!\n", len, changeBufferFlag);
;;;350        _ig.state = IMAGE_BUFF_READY;   /* mark the current buffer as ready for decode/display */
00042c  e3a00002          MOV      r0,#2
000430  e59f1250          LDR      r1,|L1.1672|
000434  e5810008          STR      r0,[r1,#8]  ; _ig
;;;351        _ig.len   = len;                /* length of this newly received image   */
000438  e2810000          ADD      r0,r1,#0
00043c  e5804004          STR      r4,[r0,#4]  ; _ig
;;;352        if(changeBufferFlag)
000440  e59f024c          LDR      r0,|L1.1684|
000444  e5d00000          LDRB     r0,[r0,#0]  ; changeBufferFlag
000448  e3500000          CMP      r0,#0
00044c  0a00000c          BEQ      |L1.1156|
;;;353        {
;;;354            changeBufferFlag = FALSE;
000450  e3a00000          MOV      r0,#0
000454  e59f1238          LDR      r1,|L1.1684|
000458  e5c10000          STRB     r0,[r1,#0]  ; changeBufferFlag
;;;355            //usbh_uvc_set_video_buffer(vdev, _igTemp.buff, IMAGE_MAX_SIZE);
;;;356            memcpy(_igTemp.buff, _ig.buff, _ig.len);
00045c  e59f3224          LDR      r3,|L1.1672|
000460  e5932004          LDR      r2,[r3,#4]  ; _ig
000464  e5931000          LDR      r1,[r3,#0]  ; _ig
000468  e59f3220          LDR      r3,|L1.1680|
00046c  e5930000          LDR      r0,[r3,#0]  ; _igTemp
000470  ebfffffe          BL       __aeabi_memcpy
;;;357            _igTemp.len = _ig.len;
000474  e59f020c          LDR      r0,|L1.1672|
000478  e5900004          LDR      r0,[r0,#4]  ; _ig
00047c  e59f120c          LDR      r1,|L1.1680|
000480  e5810004          STR      r0,[r1,#4]  ; _igTemp
                  |L1.1156|
;;;358        }
;;;359    
;;;360        return 0;
000484  e3a00000          MOV      r0,#0
;;;361    }
000488  e8bd8070          POP      {r4-r6,pc}
;;;362    
                          ENDP

                  UVCTakePhoto PROC
;;;363    
;;;364    BOOL UVCTakePhoto(int index, uint8_t** photoPr, int* photoLen, StorageType type, char* dir, char* fileName, BOOL smallSizeFlag, int photoNum, int takeInterval)
00048c  e92d4fff          PUSH     {r0-r11,lr}
;;;365    {
000490  e24ddf43          SUB      sp,sp,#0x10c
000494  e1a05000          MOV      r5,r0
000498  e1a09002          MOV      r9,r2
00049c  e59d614c          LDR      r6,[sp,#0x14c]
0004a0  e59da150          LDR      r10,[sp,#0x150]
;;;366        BOOL reVal = FALSE;
0004a4  e3a07000          MOV      r7,#0
;;;367        int n = 0;
0004a8  e3a00000          MOV      r0,#0
0004ac  e58d0108          STR      r0,[sp,#0x108]
;;;368        int t0, ret;
;;;369        char targetFileName[_MAX_LFN];
;;;370        int takePhotoNum = 0;
0004b0  e3a0b000          MOV      r11,#0
;;;371        if(photoNum < 1)
0004b4  e3560001          CMP      r6,#1
0004b8  aa000001          BGE      |L1.1220|
                  |L1.1212|
;;;372        {
;;;373            return FALSE;
0004bc  e28ddf47          ADD      sp,sp,#0x11c
;;;374        }
;;;375        
;;;376        *photoLen = 0;
;;;377        xSemaphoreTake(xRunningSemaphore, portMAX_DELAY);
;;;378        
;;;379        sysprintf("\r\n ----- UVCTakePhoto [%d][%s]!!  START (smallSizeFlag = %d) (photoNum:%d, takeInterval:%d)-----\n", index, fileName, smallSizeFlag, photoNum, takeInterval*portTICK_RATE_MS);
;;;380        //_ehci->USBPCR0 = 0x160;                /* enable PHY 0          */
;;;381        _ehci->USBPCR1 = 0x520;                /* enable PHY 1          */
;;;382        
;;;383        //usbh_pooling_hubs();
;;;384        //usbh_pooling_hubs();
;;;385    #if(1)
;;;386        switch(index)
;;;387        {
;;;388            case 0:
;;;389                UVCSetPower(0, TRUE);
;;;390                counterNumber[0]++;
;;;391                break;
;;;392            case 1:
;;;393                UVCSetPower(1, TRUE);
;;;394                counterNumber[1]++;
;;;395                break;
;;;396            default:
;;;397                return reVal;
;;;398                
;;;399        }
;;;400    #endif
;;;401        //vTaskDelay(500/portTICK_RATE_MS);
;;;402        //usbh_resume();
;;;403        usbh_pooling_hubs();
;;;404        vTaskDelay(100/portTICK_RATE_MS);
;;;405        usbh_pooling_hubs();
;;;406        vTaskDelay(100/portTICK_RATE_MS);
;;;407        usbh_pooling_hubs();
;;;408        vTaskDelay(100/portTICK_RATE_MS);
;;;409        /*
;;;410         *  Has hub port event.
;;;411         */
;;;412        g_vdev = usbh_uvc_get_device_list();
;;;413        if (g_vdev == NULL)
;;;414        {
;;;415            g_vdev = NULL;
;;;416            sysprintf(" [No device connected]:< Camera %d >\n\n", index);
;;;417            
;;;418    #if (ENABLE_BURNIN_TESTER)
;;;419                if (EnabledBurninTestMode())
;;;420                {
;;;421                    sprintf(errorMsgBuffer," [No device connected]:< Camera %d >\n\n", index);
;;;422                    AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
;;;423                }
;;;424    #endif
;;;425            
;;;426            
;;;427            goto takePhotoeExit;
;;;428        }        
;;;429                
;;;430        /*----------------------------------------------------------------------------*/
;;;431        /*  Both UVC devices connected.                                               */
;;;432        /*----------------------------------------------------------------------------*/
;;;433                         
;;;434        //sysprintf("\n\n-------  UVC %d --------------------------------------------------\n", n);
;;;435        //sysprintf("[Video format list]\n");
;;;436        #if(0)
;;;437        for (int i = 0; ;i++)
;;;438        {
;;;439            IMAGE_FORMAT_E  format;
;;;440            int width, height;  
;;;441            ret = usbh_get_video_format(g_vdev, i, &format, &width, &height);
;;;442            if (ret != 0)
;;;443                break;
;;;444    
;;;445            sysprintf("[%d] %s, %d x %d\n", i, (format == UVC_FORMAT_MJPEG ? "MJPEG" : "YUYV"), width, height);
;;;446        }
;;;447        sysprintf("\n\n");
;;;448        #endif
;;;449        
;;;450        if(smallSizeFlag)
;;;451        {
;;;452            sysprintf("usbh_set_video_format %d x %d \r\n", SELECT_SMALL_RES_WIDTH, SELECT_SMALL_RES_HEIGHT);
;;;453            ret = usbh_set_video_format(g_vdev, UVC_FORMAT_MJPEG, SELECT_SMALL_RES_WIDTH, SELECT_SMALL_RES_HEIGHT);                
;;;454        }
;;;455        else
;;;456        {
;;;457            sysprintf("usbh_set_video_format %d x %d \r\n", SELECT_RES_WIDTH, SELECT_RES_HEIGHT);
;;;458            ret = usbh_set_video_format(g_vdev, UVC_FORMAT_MJPEG, SELECT_RES_WIDTH, SELECT_RES_HEIGHT);
;;;459        }
;;;460        if (ret != 0)
;;;461        {
;;;462            sysprintf("usbh_set_video_format failed! retry another- 0x%x (%d)\r\n", ret, ret);
;;;463            ret = usbh_set_video_format(g_vdev, UVC_FORMAT_MJPEG, SELECT_RES_WIDTH_2, SELECT_RES_HEIGHT_2);
;;;464        }
;;;465        else
;;;466        {
;;;467            //sysprintf("usbh_set_video_format OK! \r\n");
;;;468        }
;;;469    
;;;470        if (ret != 0)
;;;471        {
;;;472            sysprintf("usbh_set_video_format failed! - 0x%x (%d)\n", ret, ret);
;;;473            
;;;474    #if (ENABLE_BURNIN_TESTER)
;;;475                if (EnabledBurninTestMode())
;;;476                {
;;;477                    sprintf(errorMsgBuffer,"usbh_set_video_format failed! - 0x%x (%d) < Camera %d >...\r\n", ret, ret,index);
;;;478                    AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
;;;479                }
;;;480    #endif
;;;481            
;;;482            goto takePhotoeExit;
;;;483        }
;;;484        //usbh_memory_used();        
;;;485        
;;;486        changeBufferFlag = FALSE;
;;;487        init_image_buffers();
;;;488        
;;;489        /* assign the first image buffer to receive the image from USB */
;;;490        usbh_uvc_set_video_buffer(g_vdev, _ig.buff, IMAGE_MAX_SIZE);
;;;491        _ig.state = IMAGE_BUFF_USB;
;;;492        
;;;493        sysprintf("Start UVC %d video streaming< Camera %d >...\n\n", n, index);
;;;494        ret = usbh_uvc_start_streaming(g_vdev, uvc_rx_callbak);
;;;495        if (ret != 0)
;;;496        {
;;;497            sysprintf("usbh_uvc_start_streaming failed! - %d\n", ret);
;;;498            sysprintf("Please re-connect UVC device...\n"); 
;;;499            
;;;500    #if (ENABLE_BURNIN_TESTER)
;;;501                if (EnabledBurninTestMode())
;;;502                {
;;;503                    sprintf(errorMsgBuffer,"usbh_uvc_start_streaming failed!< Camera %d >...\r\n",index);
;;;504                    AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
;;;505                }
;;;506    #endif
;;;507            goto takePhotoeExit;
;;;508        }
;;;509        //sysprintf("Start UVC %d video Waiting 1000ns...\n");
;;;510        vTaskDelay(1000/portTICK_RATE_MS);  
;;;511        while(1)
;;;512        {
;;;513            init_image_buffers();        
;;;514            changeBufferFlag = TRUE;
;;;515            t0 = get_ticks();
;;;516    
;;;517            while ((get_ticks() - t0 < 300) && (_ig.state != IMAGE_BUFF_READY))
;;;518            {
;;;519                //sysprintf("^\r\n");
;;;520                vTaskDelay(100/portTICK_RATE_MS);
;;;521            } ;
;;;522    
;;;523            if (get_ticks() - t0 >= 300)
;;;524            {
;;;525                sysprintf("Cannot get image from UVC device %d in 3 seconds!!< Camera %d >...\n\n", n, index);
;;;526    #if (ENABLE_BURNIN_TESTER)
;;;527                if (EnabledBurninTestMode())
;;;528                {
;;;529                    sprintf(errorMsgBuffer,"Cannot get image from UVC device %d in 3 seconds!!< Camera %d >...\r\n", n, index);
;;;530                    AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
;;;531                }
;;;532    #endif
;;;533                reVal = FALSE;
;;;534                goto takePhotoeExit;
;;;535            }
;;;536            
;;;537            _ig.state = IMAGE_BUFF_POST;
;;;538    
;;;539            if(photoNum > 1)
;;;540            {
;;;541                sprintf(targetFileName, "%s-[%d].jpg", fileName, takePhotoNum);
;;;542            }
;;;543            else
;;;544            {
;;;545                sprintf(targetFileName, "%s", fileName);
;;;546            }
;;;547            
;;;548            //sysprintf(" ===> Get UVC %d video snaphot...\n", n);
;;;549    
;;;550            /* 
;;;551             * Get the snapshot 
;;;552             */
;;;553            *photoLen = _igTemp.len;
;;;554            *photoPr = _igTemp.buff;
;;;555            /*
;;;556            terninalPrintf("*photoPr = ");
;;;557            for(int i=0;i<10;i++)
;;;558                terninalPrintf("%02x ",*(*photoPr+i));
;;;559            
;;;560            terninalPrintf("\r\n");
;;;561            */
;;;562            
;;;563            
;;;564            
;;;565            
;;;566            /*
;;;567            int  SDbufferSize = 256 ;
;;;568            uint8_t SDbuffer[SDbufferSize];
;;;569            FIL filephoto;
;;;570            char * PhotoFileNameStr;
;;;571            UINT br;
;;;572            
;;;573            int count ;
;;;574            int remain ;
;;;575            int progress ;
;;;576    
;;;577            
;;;578            if(!UserDrvInit(FALSE))
;;;579            {
;;;580                terninalPrintf("UserDrvInit fail.\r\n");
;;;581                return FALSE;
;;;582            }
;;;583            if(!FatfsInit(TRUE))
;;;584            {
;;;585                terninalPrintf("FatfsInit fail.\r\n");
;;;586                return FALSE;
;;;587            }
;;;588    
;;;589            //sprintf(PhotoFileNameStr,"0:photo%d_%d.jpg",index+1,GetCurrentUTCTime());
;;;590            sprintf(PhotoFileNameStr,"0:photo%d.jpg",index+1);
;;;591                            
;;;592            if(f_open(&filephoto,PhotoFileNameStr, FA_CREATE_ALWAYS | FA_WRITE))
;;;593            //if(f_open(&filephoto, PhotoFileNameStr, FA_OPEN_EXISTING |FA_READ))
;;;594            {
;;;595                terninalPrintf("SD card file open %s fail.\r\n",PhotoFileNameStr);
;;;596                return FALSE;
;;;597            }
;;;598            
;;;599    
;;;600            count = *photoLen / SDbufferSize;
;;;601            remain = *photoLen % SDbufferSize;
;;;602            progress = count / 10 ;
;;;603            terninalPrintf("count = %d\r\n",count);
;;;604            terninalPrintf("remain = %d\r\n",remain);
;;;605            terninalPrintf("progress = %d\r\n",progress);
;;;606            */
;;;607            //terninalPrintf("photoPrAddr = %08x \r\n",photoPr);
;;;608            /*
;;;609                            terninalPrintf("nphotoPr = ");
;;;610                        for(int j=0;j<256;j++)
;;;611                            terninalPrintf("%02x ",*(*photoPr+j));
;;;612                
;;;613                        terninalPrintf("\r\n");
;;;614            */
;;;615            
;;;616            /*
;;;617            for(int i=0;i<count;i++)
;;;618            {
;;;619                if(i%progress == 0)
;;;620                {
;;;621                    terninalPrintf("%d%% complete...\r",(i/progress)*10);
;;;622                }
;;;623                
;;;624                //W25Q64BVqueryEx(i*SDbufferSize,SDbuffer,sizeof(SDbuffer));
;;;625                //memcpy(SDbuffer,*(&photoPr+i*SDbufferSize) , SDbufferSize);
;;;626                
;;;627                //memcpy(SDbuffer,photoPr+i*SDbufferSize , SDbufferSize);
;;;628                for(int j=0;j<SDbufferSize;j++)
;;;629                    SDbuffer[j] = *(*photoPr+i*SDbufferSize+j);
;;;630                f_write(&filephoto, SDbuffer, SDbufferSize, &br);
;;;631                
;;;632            }
;;;633            
;;;634            if(remain != 0)
;;;635            {   
;;;636                
;;;637                //W25Q64BVqueryEx(count*SDbufferSize,SDbuffer,remain);
;;;638                //memcpy(SDbuffer,*(&photoPr+count*SDbufferSize) , remain);
;;;639                
;;;640                
;;;641                //memcpy(SDbuffer,photoPr+count*SDbufferSize , remain);
;;;642                
;;;643                for(int k=0;k<remain;k++)
;;;644                    SDbuffer[k] = *(*photoPr+count*SDbufferSize+k);
;;;645                
;;;646                f_write(&filephoto, SDbuffer, remain, &br);
;;;647                
;;;648            }
;;;649                */
;;;650            
;;;651           // f_close(&filephoto);
;;;652            
;;;653            
;;;654            
;;;655            
;;;656            
;;;657            
;;;658            
;;;659            
;;;660            
;;;661            
;;;662            
;;;663            
;;;664            
;;;665            
;;;666            
;;;667            
;;;668            
;;;669            
;;;670            
;;;671            
;;;672            
;;;673            
;;;674            if(fileName != NULL)
;;;675            {        
;;;676                reVal = TRUE;            
;;;677                if(reVal)
;;;678                {
;;;679                    BuzzerPlay(50, 100, 1, TRUE);
;;;680                    BOOL transferFlag;
;;;681                    if(photoNum > 1)
;;;682                    {
;;;683                        //transferFlag = FALSE;
;;;684                        transferFlag = TRUE;
;;;685                    }
;;;686                    else
;;;687                    {
;;;688                        transferFlag = TRUE;
;;;689                    }
;;;690    
;;;691    //                uint8_t* pDate = pvPortMalloc(_igTemp.len);
;;;692    //                memcpy(pDate, _igTemp.buff, _igTemp.len);
;;;693                    //BOOL dataNeedFreeFlag, BOOL blockFlag, BOOL checkMode
;;;694                    //if(FileAgentAddDataEx(type, dir, targetFileName, pDate, _igTemp.len, FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, FALSE, TRUE, transferFlag) !=  FILE_AGENT_RETURN_ERROR )
;;;695    //                if(FileAgentAddData(type, dir, fileName, pDate, _igTemp.len, FILE_AGENT_ADD_DATA_TYPE_OVERWRITE, TRUE, TRUE, TRUE) !=  FILE_AGENT_RETURN_ERROR )
;;;696    //                {                 
;;;697    //                    BuzzerPlay(50, 100, 3, TRUE);                       
;;;698    //                    //successTimes++;
;;;699    //                    reVal = TRUE;
;;;700    //                }
;;;701    //                else
;;;702    //                {
;;;703    //                    reVal = FALSE;
;;;704    //                    sysprintf(" ~~~ UVCTakePhoto[usb index:%d] WRITE ERROR (photoSize = %d)\r\n", n, _igTemp.len);
;;;705    //                }
;;;706                    reVal = TRUE;
;;;707                    #if(0)
;;;708                    if(smallSizeFlag)
;;;709                    {
;;;710                        if(SCEncryptSAMData(type, dir, fileName, pDate, _igTemp.len))
;;;711                        {
;;;712                        }
;;;713                    }
;;;714                    #endif
;;;715    
;;;716                }
;;;717                else
;;;718                {
;;;719                    //BuzzerPlay(50, 100, 2, TRUE);
;;;720                }
;;;721            }
;;;722            else
;;;723            {
;;;724    #if (ENABLE_BURNIN_TESTER)
;;;725                if (EnabledBurninTestMode())
;;;726                {
;;;727                    sprintf(errorMsgBuffer,"fileName == NULL < Camera %d >\r\n",index);
;;;728                    AppendBurninErrorLog(errorMsgBuffer, strlen(errorMsgBuffer));
;;;729                }
;;;730    #endif
;;;731                //successTimes++;
;;;732                
;;;733            }
;;;734            takePhotoNum++;
;;;735            if(takePhotoNum == photoNum)
;;;736            {
;;;737                goto takePhotoeExit;
;;;738            }
;;;739            vTaskDelay(takeInterval);
;;;740        }
;;;741    
;;;742    takePhotoeExit:
;;;743        
;;;744        //sysprintf("Stop UVC %d video streaming...\n", n);
;;;745        if(reVal)
;;;746        {
;;;747            ret = usbh_uvc_stop_streaming(g_vdev);
;;;748            if (ret != 0)
;;;749            {
;;;750                //sysprintf("\nusbh_uvc_stop_streaming failed! - %d\n", ret);
;;;751                // break;
;;;752            }
;;;753        }
;;;754    
;;;755        #if(1)
;;;756        //vTaskDelay(5000/portTICK_RATE_MS);
;;;757        switch(index)
;;;758        {
;;;759            case 0:
;;;760                UVCSetPower(0, FALSE);
;;;761                break;
;;;762            case 1:
;;;763                UVCSetPower(1, FALSE);
;;;764                break;
;;;765                
;;;766        }
;;;767        #endif
;;;768    
;;;769        usbh_pooling_hubs();    /* turn-off VBUS cause device disconnected, this call to detect disconnect */
;;;770        usbh_pooling_hubs();
;;;771        #if(1)
;;;772        //_ehci->USBPCR0 = 0x060;                /* disable PHY 0          */
;;;773        _ehci->USBPCR1 = 0x020;                /* disable PHY 1          */
;;;774        #endif
;;;775    
;;;776        if(reVal)
;;;777        {
;;;778            BuzzerPlay(50, 100, 1, TRUE);
;;;779        }
;;;780        else
;;;781        {
;;;782            BuzzerPlay(50, 100, 2, TRUE);
;;;783        }
;;;784        sysprintf("\r\n ----- UVCTakePhoto [%d][%s](photoNum:%d, takeInterval:%d)!!  END -----\r\n", index, fileName, photoNum, takeInterval*portTICK_RATE_MS);     
;;;785        xSemaphoreGive(xRunningSemaphore);
;;;786       return reVal;
;;;787    }
0004c0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1220|
0004c4  e3a00000          MOV      r0,#0                 ;376
0004c8  e5890000          STR      r0,[r9,#0]            ;376
0004cc  e3a03000          MOV      r3,#0                 ;377
0004d0  e3e02000          MVN      r2,#0                 ;377
0004d4  e1a01003          MOV      r1,r3                 ;377
0004d8  e51f0208          LDR      r0,|L1.728|
0004dc  e5900000          LDR      r0,[r0,#0]            ;377  ; xRunningSemaphore
0004e0  ebfffffe          BL       xQueueGenericReceive
0004e4  e08a010a          ADD      r0,r10,r10,LSL #2     ;379
0004e8  e1a00080          LSL      r0,r0,#1              ;379
0004ec  e58d0004          STR      r0,[sp,#4]            ;379
0004f0  e58d6000          STR      r6,[sp,#0]            ;379
0004f4  e1a01005          MOV      r1,r5                 ;379
0004f8  e59f0198          LDR      r0,|L1.1688|
0004fc  e59d2144          LDR      r2,[sp,#0x144]        ;379
000500  e59d3148          LDR      r3,[sp,#0x148]        ;379
000504  ebfffffe          BL       sysprintf
000508  e3a00e52          MOV      r0,#0x520             ;381
00050c  e59f1188          LDR      r1,|L1.1692|
000510  e5911000          LDR      r1,[r1,#0]            ;381  ; _ehci
000514  e58100c8          STR      r0,[r1,#0xc8]         ;381
000518  e3550000          CMP      r5,#0                 ;386
00051c  0a000002          BEQ      |L1.1324|
000520  e3550001          CMP      r5,#1                 ;386
000524  1a000014          BNE      |L1.1404|
000528  ea000009          B        |L1.1364|
                  |L1.1324|
00052c  e1a00000          MOV      r0,r0                 ;388
000530  e3a01001          MOV      r1,#1                 ;389
000534  e3a00000          MOV      r0,#0                 ;389
000538  ebfffffe          BL       UVCSetPower
00053c  e59f015c          LDR      r0,|L1.1696|
000540  e5900000          LDR      r0,[r0,#0]            ;390  ; counterNumber
000544  e2800001          ADD      r0,r0,#1              ;390
000548  e59f1150          LDR      r1,|L1.1696|
00054c  e5810000          STR      r0,[r1,#0]            ;390  ; counterNumber
000550  ea00000c          B        |L1.1416|
                  |L1.1364|
000554  e1a00000          MOV      r0,r0                 ;392
000558  e3a01001          MOV      r1,#1                 ;393
00055c  e1a00001          MOV      r0,r1                 ;393
000560  ebfffffe          BL       UVCSetPower
000564  e59f0134          LDR      r0,|L1.1696|
000568  e5900004          LDR      r0,[r0,#4]            ;394  ; counterNumber
00056c  e2800001          ADD      r0,r0,#1              ;394
000570  e59f1128          LDR      r1,|L1.1696|
000574  e5810004          STR      r0,[r1,#4]            ;394  ; counterNumber
000578  ea000002          B        |L1.1416|
                  |L1.1404|
00057c  e1a00000          MOV      r0,r0                 ;396
000580  e1a00007          MOV      r0,r7                 ;397
000584  eaffffcc          B        |L1.1212|
                  |L1.1416|
000588  e1a00000          MOV      r0,r0                 ;391
00058c  ebfffffe          BL       usbh_pooling_hubs
000590  e3a0000a          MOV      r0,#0xa               ;404
000594  ebfffffe          BL       vTaskDelay
000598  ebfffffe          BL       usbh_pooling_hubs
00059c  e3a0000a          MOV      r0,#0xa               ;406
0005a0  ebfffffe          BL       vTaskDelay
0005a4  ebfffffe          BL       usbh_pooling_hubs
0005a8  e3a0000a          MOV      r0,#0xa               ;408
0005ac  ebfffffe          BL       vTaskDelay
0005b0  ebfffffe          BL       usbh_uvc_get_device_list
0005b4  e59f10e8          LDR      r1,|L1.1700|
0005b8  e5810000          STR      r0,[r1,#0]            ;412  ; g_vdev
0005bc  e2810000          ADD      r0,r1,#0              ;413
0005c0  e5900000          LDR      r0,[r0,#0]            ;413  ; g_vdev
0005c4  e3500000          CMP      r0,#0                 ;413
0005c8  1a000012          BNE      |L1.1560|
0005cc  e3a00000          MOV      r0,#0                 ;415
0005d0  e5810000          STR      r0,[r1,#0]            ;415  ; g_vdev
0005d4  e1a01005          MOV      r1,r5                 ;416
0005d8  e28f00c8          ADR      r0,|L1.1704|
0005dc  ebfffffe          BL       sysprintf
0005e0  ebfffffe          BL       EnabledBurninTestMode
0005e4  e3500000          CMP      r0,#0                 ;419
0005e8  0a000009          BEQ      |L1.1556|
0005ec  e1a02005          MOV      r2,r5                 ;421
0005f0  e28f10b0          ADR      r1,|L1.1704|
0005f4  e59f00d4          LDR      r0,|L1.1744|
0005f8  ebfffffe          BL       __2sprintf
0005fc  e59f00cc          LDR      r0,|L1.1744|
000600  ebfffffe          BL       strlen
000604  e58d0004          STR      r0,[sp,#4]            ;422
000608  e1a01000          MOV      r1,r0                 ;422
00060c  e59f00bc          LDR      r0,|L1.1744|
000610  ebfffffe          BL       AppendBurninErrorLog
                  |L1.1556|
000614  ea000151          B        |L1.2912|
                  |L1.1560|
000618  e59d0148          LDR      r0,[sp,#0x148]        ;450
00061c  e3500000          CMP      r0,#0                 ;450
000620  0a000034          BEQ      |L1.1784|
000624  e3a020f0          MOV      r2,#0xf0              ;452
000628  e3a01d05          MOV      r1,#0x140             ;452
00062c  e28f00a0          ADR      r0,|L1.1748|
000630  ebfffffe          BL       sysprintf
000634  e3a030f0          MOV      r3,#0xf0              ;453
000638  e3a02d05          MOV      r2,#0x140             ;453
00063c  e3a0100b          MOV      r1,#0xb               ;453
000640  e59f005c          LDR      r0,|L1.1700|
000644  e5900000          LDR      r0,[r0,#0]            ;453  ; g_vdev
000648  ebfffffe          BL       usbh_set_video_format
00064c  e1a04000          MOV      r4,r0                 ;453
000650  ea000033          B        |L1.1828|
                  |L1.1620|
000654  30782530          DCB      "0x%04X  ",0
000658  34582020
00065c  00      
00065d  00                DCB      0
00065e  00                DCB      0
00065f  00                DCB      0
                  |L1.1632|
000660  25303278          DCB      "%02x ",0
000664  2000    
000666  00                DCB      0
000667  00                DCB      0
                  |L1.1640|
000668  696e6974          DCB      "init_image_buffers [%d]!!\n",0
00066c  5f696d61
000670  67655f62
000674  75666665
000678  7273205b
00067c  25645d21
000680  210a00  
000683  00                DCB      0
                  |L1.1668|
                          DCD      image_buff_pool
                  |L1.1672|
                          DCD      _ig
                  |L1.1676|
                          DCD      image_buff_pool_Temp
                  |L1.1680|
                          DCD      _igTemp
                  |L1.1684|
                          DCD      changeBufferFlag
                  |L1.1688|
                          DCD      ||.constdata||
                  |L1.1692|
                          DCD      _ehci
                  |L1.1696|
                          DCD      counterNumber
                  |L1.1700|
                          DCD      g_vdev
                  |L1.1704|
0006a8  205b4e6f          DCB      " [No device connected]:< Camera %d >\n\n",0
0006ac  20646576
0006b0  69636520
0006b4  636f6e6e
0006b8  65637465
0006bc  645d3a3c
0006c0  2043616d
0006c4  65726120
0006c8  2564203e
0006cc  0a0a00  
0006cf  00                DCB      0
                  |L1.1744|
                          DCD      errorMsgBuffer
                  |L1.1748|
0006d4  75736268          DCB      "usbh_set_video_format %d x %d \r\n",0
0006d8  5f736574
0006dc  5f766964
0006e0  656f5f66
0006e4  6f726d61
0006e8  74202564
0006ec  20782025
0006f0  64200d0a
0006f4  00      
0006f5  00                DCB      0
0006f6  00                DCB      0
0006f7  00                DCB      0
                  |L1.1784|
0006f8  e59f215c          LDR      r2,|L1.2140|
0006fc  e3a01d1e          MOV      r1,#0x780             ;457
000700  e24f0034          ADR      r0,|L1.1748|
000704  ebfffffe          BL       sysprintf
000708  e59f314c          LDR      r3,|L1.2140|
00070c  e3a02d1e          MOV      r2,#0x780             ;458
000710  e3a0100b          MOV      r1,#0xb               ;458
000714  e51f0078          LDR      r0,|L1.1700|
000718  e5900000          LDR      r0,[r0,#0]            ;458  ; g_vdev
00071c  ebfffffe          BL       usbh_set_video_format
000720  e1a04000          MOV      r4,r0                 ;458
                  |L1.1828|
000724  e3540000          CMP      r4,#0                 ;460
000728  0a00000a          BEQ      |L1.1880|
00072c  e1a02004          MOV      r2,r4                 ;462
000730  e1a01004          MOV      r1,r4                 ;462
000734  e28f0f49          ADR      r0,|L1.2144|
000738  ebfffffe          BL       sysprintf
00073c  e3a03e2d          MOV      r3,#0x2d0             ;463
000740  e3a02c05          MOV      r2,#0x500             ;463
000744  e3a0100b          MOV      r1,#0xb               ;463
000748  e51f00ac          LDR      r0,|L1.1700|
00074c  e5900000          LDR      r0,[r0,#0]            ;463  ; g_vdev
000750  ebfffffe          BL       usbh_set_video_format
000754  e1a04000          MOV      r4,r0                 ;463
                  |L1.1880|
000758  e3540000          CMP      r4,#0                 ;470
00075c  0a000013          BEQ      |L1.1968|
000760  e1a02004          MOV      r2,r4                 ;472
000764  e1a01004          MOV      r1,r4                 ;472
000768  e28f0f4b          ADR      r0,|L1.2204|
00076c  ebfffffe          BL       sysprintf
000770  ebfffffe          BL       EnabledBurninTestMode
000774  e3500000          CMP      r0,#0                 ;475
000778  0a00000b          BEQ      |L1.1964|
00077c  e1a03004          MOV      r3,r4                 ;477
000780  e1a02004          MOV      r2,r4                 ;477
000784  e28f1f4f          ADR      r1,|L1.2248|
000788  e51f00c0          LDR      r0,|L1.1744|
00078c  e58d5000          STR      r5,[sp,#0]            ;477
000790  ebfffffe          BL       __2sprintf
000794  e51f00cc          LDR      r0,|L1.1744|
000798  ebfffffe          BL       strlen
00079c  e58d0004          STR      r0,[sp,#4]            ;478
0007a0  e1a01000          MOV      r1,r0                 ;478
0007a4  e51f00dc          LDR      r0,|L1.1744|
0007a8  ebfffffe          BL       AppendBurninErrorLog
                  |L1.1964|
0007ac  ea0000eb          B        |L1.2912|
                  |L1.1968|
0007b0  e3a00000          MOV      r0,#0                 ;486
0007b4  e51f1128          LDR      r1,|L1.1684|
0007b8  e5c10000          STRB     r0,[r1,#0]            ;486  ; changeBufferFlag
0007bc  ebfffffe          BL       init_image_buffers
0007c0  e51f0140          LDR      r0,|L1.1672|
0007c4  e3a02996          MOV      r2,#0x258000          ;490
0007c8  e5901000          LDR      r1,[r0,#0]            ;490  ; _ig
0007cc  e51f0130          LDR      r0,|L1.1700|
0007d0  e5900000          LDR      r0,[r0,#0]            ;490  ; g_vdev
0007d4  ebfffffe          BL       usbh_uvc_set_video_buffer
0007d8  e3a00001          MOV      r0,#1                 ;491
0007dc  e51f115c          LDR      r1,|L1.1672|
0007e0  e5810008          STR      r0,[r1,#8]            ;491  ; _ig
0007e4  e1a02005          MOV      r2,r5                 ;493
0007e8  e28f0f46          ADR      r0,|L1.2312|
0007ec  e59d1108          LDR      r1,[sp,#0x108]        ;493
0007f0  ebfffffe          BL       sysprintf
0007f4  e24f1e3e          ADR      r1,|L1.1052|
0007f8  e51f015c          LDR      r0,|L1.1700|
0007fc  e5900000          LDR      r0,[r0,#0]            ;494  ; g_vdev
000800  ebfffffe          BL       usbh_uvc_start_streaming
000804  e1a04000          MOV      r4,r0                 ;494
000808  e3540000          CMP      r4,#0                 ;495
00080c  0a000069          BEQ      |L1.2488|
000810  e1a01004          MOV      r1,r4                 ;497
000814  e28f0f47          ADR      r0,|L1.2360|
000818  ebfffffe          BL       sysprintf
00081c  e28f0f4f          ADR      r0,|L1.2400|
000820  ebfffffe          BL       sysprintf
000824  ebfffffe          BL       EnabledBurninTestMode
000828  e3500000          CMP      r0,#0                 ;501
00082c  0a000009          BEQ      |L1.2136|
000830  e1a02005          MOV      r2,r5                 ;503
000834  e28f1f52          ADR      r1,|L1.2436|
000838  e51f0170          LDR      r0,|L1.1744|
00083c  ebfffffe          BL       __2sprintf
000840  e51f0178          LDR      r0,|L1.1744|
000844  ebfffffe          BL       strlen
000848  e58d0004          STR      r0,[sp,#4]            ;504
00084c  e1a01000          MOV      r1,r0                 ;504
000850  e51f0188          LDR      r0,|L1.1744|
000854  ebfffffe          BL       AppendBurninErrorLog
                  |L1.2136|
000858  ea0000c0          B        |L1.2912|
                  |L1.2140|
                          DCD      0x00000438
                  |L1.2144|
000860  75736268          DCB      "usbh_set_video_format failed! retry another- 0x%x (%d)\r"
000864  5f736574
000868  5f766964
00086c  656f5f66
000870  6f726d61
000874  74206661
000878  696c6564
00087c  21207265
000880  74727920
000884  616e6f74
000888  6865722d
00088c  20307825
000890  78202825
000894  64290d  
000897  0a00              DCB      "\n",0
000899  00                DCB      0
00089a  00                DCB      0
00089b  00                DCB      0
                  |L1.2204|
00089c  75736268          DCB      "usbh_set_video_format failed! - 0x%x (%d)\n",0
0008a0  5f736574
0008a4  5f766964
0008a8  656f5f66
0008ac  6f726d61
0008b0  74206661
0008b4  696c6564
0008b8  21202d20
0008bc  30782578
0008c0  20282564
0008c4  290a00  
0008c7  00                DCB      0
                  |L1.2248|
0008c8  75736268          DCB      "usbh_set_video_format failed! - 0x%x (%d) < Camera %d >"
0008cc  5f736574
0008d0  5f766964
0008d4  656f5f66
0008d8  6f726d61
0008dc  74206661
0008e0  696c6564
0008e4  21202d20
0008e8  30782578
0008ec  20282564
0008f0  29203c20
0008f4  43616d65
0008f8  72612025
0008fc  64203e  
0008ff  2e2e2e0d          DCB      "...\r\n",0
000903  0a00    
000905  00                DCB      0
000906  00                DCB      0
000907  00                DCB      0
                  |L1.2312|
000908  53746172          DCB      "Start UVC %d video streaming< Camera %d >...\n\n",0
00090c  74205556
000910  43202564
000914  20766964
000918  656f2073
00091c  74726561
000920  6d696e67
000924  3c204361
000928  6d657261
00092c  20256420
000930  3e2e2e2e
000934  0a0a00  
000937  00                DCB      0
                  |L1.2360|
000938  75736268          DCB      "usbh_uvc_start_streaming failed! - %d\n",0
00093c  5f757663
000940  5f737461
000944  72745f73
000948  74726561
00094c  6d696e67
000950  20666169
000954  6c656421
000958  202d2025
00095c  640a00  
00095f  00                DCB      0
                  |L1.2400|
000960  506c6561          DCB      "Please re-connect UVC device...\n",0
000964  73652072
000968  652d636f
00096c  6e6e6563
000970  74205556
000974  43206465
000978  76696365
00097c  2e2e2e0a
000980  00      
000981  00                DCB      0
000982  00                DCB      0
000983  00                DCB      0
                  |L1.2436|
000984  75736268          DCB      "usbh_uvc_start_streaming failed!< Camera %d >...\r\n",0
000988  5f757663
00098c  5f737461
000990  72745f73
000994  74726561
000998  6d696e67
00099c  20666169
0009a0  6c656421
0009a4  3c204361
0009a8  6d657261
0009ac  20256420
0009b0  3e2e2e2e
0009b4  0d0a00  
0009b7  00                DCB      0
                  |L1.2488|
0009b8  e3a00064          MOV      r0,#0x64              ;510
0009bc  ebfffffe          BL       vTaskDelay
0009c0  ea000065          B        |L1.2908|
                  |L1.2500|
0009c4  ebfffffe          BL       init_image_buffers
0009c8  e3a00001          MOV      r0,#1                 ;514
0009cc  e51f1340          LDR      r1,|L1.1684|
0009d0  e5c10000          STRB     r0,[r1,#0]            ;514  ; changeBufferFlag
0009d4  ebfffffe          BL       get_ticks
0009d8  e1a08000          MOV      r8,r0                 ;515
0009dc  ea000001          B        |L1.2536|
                  |L1.2528|
0009e0  e3a0000a          MOV      r0,#0xa               ;520
0009e4  ebfffffe          BL       vTaskDelay
                  |L1.2536|
0009e8  ebfffffe          BL       get_ticks
0009ec  e0400008          SUB      r0,r0,r8              ;517
0009f0  e3500f4b          CMP      r0,#0x12c             ;517
0009f4  2a000003          BCS      |L1.2568|
0009f8  e51f0378          LDR      r0,|L1.1672|
0009fc  e5900008          LDR      r0,[r0,#8]            ;517  ; _ig
000a00  e3500002          CMP      r0,#2                 ;517
000a04  1afffff5          BNE      |L1.2528|
                  |L1.2568|
000a08  ebfffffe          BL       get_ticks
000a0c  e0400008          SUB      r0,r0,r8              ;523
000a10  e3500f4b          CMP      r0,#0x12c             ;523
000a14  3a000013          BCC      |L1.2664|
000a18  e1a02005          MOV      r2,r5                 ;525
000a1c  e59f0250          LDR      r0,|L1.3188|
000a20  e59d1108          LDR      r1,[sp,#0x108]        ;525
000a24  ebfffffe          BL       sysprintf
000a28  ebfffffe          BL       EnabledBurninTestMode
000a2c  e3500000          CMP      r0,#0                 ;527
000a30  0a00000a          BEQ      |L1.2656|
000a34  e1a03005          MOV      r3,r5                 ;529
000a38  e59f1238          LDR      r1,|L1.3192|
000a3c  e51f0374          LDR      r0,|L1.1744|
000a40  e59d2108          LDR      r2,[sp,#0x108]        ;529
000a44  ebfffffe          BL       __2sprintf
000a48  e51f0380          LDR      r0,|L1.1744|
000a4c  ebfffffe          BL       strlen
000a50  e58d0004          STR      r0,[sp,#4]            ;530
000a54  e1a01000          MOV      r1,r0                 ;530
000a58  e51f0390          LDR      r0,|L1.1744|
000a5c  ebfffffe          BL       AppendBurninErrorLog
                  |L1.2656|
000a60  e3a07000          MOV      r7,#0                 ;533
000a64  ea00003d          B        |L1.2912|
                  |L1.2664|
000a68  e3a00003          MOV      r0,#3                 ;537
000a6c  e51f13ec          LDR      r1,|L1.1672|
000a70  e5810008          STR      r0,[r1,#8]            ;537  ; _ig
000a74  e3560001          CMP      r6,#1                 ;539
000a78  da000005          BLE      |L1.2708|
000a7c  e1a0300b          MOV      r3,r11                ;541
000a80  e28f1f7d          ADR      r1,|L1.3196|
000a84  e59d2144          LDR      r2,[sp,#0x144]        ;541
000a88  e28d0008          ADD      r0,sp,#8              ;541
000a8c  ebfffffe          BL       __2sprintf
000a90  ea000003          B        |L1.2724|
                  |L1.2708|
000a94  e28f1f7b          ADR      r1,|L1.3208|
000a98  e59d2144          LDR      r2,[sp,#0x144]        ;545
000a9c  e28d0008          ADD      r0,sp,#8              ;545
000aa0  ebfffffe          BL       __2sprintf
                  |L1.2724|
000aa4  e51f041c          LDR      r0,|L1.1680|
000aa8  e5900004          LDR      r0,[r0,#4]            ;553  ; _igTemp
000aac  e5890000          STR      r0,[r9,#0]            ;553
000ab0  e51f0428          LDR      r0,|L1.1680|
000ab4  e5901000          LDR      r1,[r0,#0]            ;554  ; _igTemp
000ab8  e59d0110          LDR      r0,[sp,#0x110]        ;554
000abc  e5801000          STR      r1,[r0,#0]            ;554
000ac0  e59d0144          LDR      r0,[sp,#0x144]        ;674
000ac4  e3500000          CMP      r0,#0                 ;674
000ac8  0a000010          BEQ      |L1.2832|
000acc  e3a07001          MOV      r7,#1                 ;676
000ad0  e3570000          CMP      r7,#0                 ;677
000ad4  0a00001a          BEQ      |L1.2884|
000ad8  e3a03001          MOV      r3,#1                 ;679
000adc  e1a02003          MOV      r2,r3                 ;679
000ae0  e3a01064          MOV      r1,#0x64              ;679
000ae4  e3a00032          MOV      r0,#0x32              ;679
000ae8  ebfffffe          BL       BuzzerPlay
000aec  e3560001          CMP      r6,#1                 ;681
000af0  da000002          BLE      |L1.2816|
000af4  e3a00001          MOV      r0,#1                 ;684
000af8  e58d0004          STR      r0,[sp,#4]            ;684
000afc  ea000001          B        |L1.2824|
                  |L1.2816|
000b00  e3a00001          MOV      r0,#1                 ;688
000b04  e58d0004          STR      r0,[sp,#4]            ;688
                  |L1.2824|
000b08  e3a07001          MOV      r7,#1                 ;706
000b0c  ea00000c          B        |L1.2884|
                  |L1.2832|
000b10  ebfffffe          BL       EnabledBurninTestMode
000b14  e3500000          CMP      r0,#0                 ;725
000b18  0a000009          BEQ      |L1.2884|
000b1c  e1a02005          MOV      r2,r5                 ;727
000b20  e28f1f59          ADR      r1,|L1.3212|
000b24  e51f045c          LDR      r0,|L1.1744|
000b28  ebfffffe          BL       __2sprintf
000b2c  e51f0464          LDR      r0,|L1.1744|
000b30  ebfffffe          BL       strlen
000b34  e58d0004          STR      r0,[sp,#4]            ;728
000b38  e1a01000          MOV      r1,r0                 ;728
000b3c  e51f0474          LDR      r0,|L1.1744|
000b40  ebfffffe          BL       AppendBurninErrorLog
                  |L1.2884|
000b44  e28bb001          ADD      r11,r11,#1            ;734
000b48  e15b0006          CMP      r11,r6                ;735
000b4c  1a000000          BNE      |L1.2900|
000b50  ea000002          B        |L1.2912|
                  |L1.2900|
000b54  e1a0000a          MOV      r0,r10                ;739
000b58  ebfffffe          BL       vTaskDelay
                  |L1.2908|
000b5c  eaffff98          B        |L1.2500|
                  |L1.2912|
000b60  e1a00000          MOV      r0,r0                 ;742
000b64  e3570000          CMP      r7,#0                 ;745
000b68  0a000003          BEQ      |L1.2940|
000b6c  e51f04d0          LDR      r0,|L1.1700|
000b70  e5900000          LDR      r0,[r0,#0]            ;747  ; g_vdev
000b74  ebfffffe          BL       usbh_uvc_stop_streaming
000b78  e1a00000          MOV      r0,r0                 ;748
                  |L1.2940|
000b7c  e3550000          CMP      r5,#0                 ;757
000b80  0a000002          BEQ      |L1.2960|
000b84  e3550001          CMP      r5,#1                 ;757
000b88  1a00000a          BNE      |L1.3000|
000b8c  ea000004          B        |L1.2980|
                  |L1.2960|
000b90  e1a00000          MOV      r0,r0                 ;759
000b94  e3a01000          MOV      r1,#0                 ;760
000b98  e1a00001          MOV      r0,r1                 ;760
000b9c  ebfffffe          BL       UVCSetPower
000ba0  ea000004          B        |L1.3000|
                  |L1.2980|
000ba4  e1a00000          MOV      r0,r0                 ;762
000ba8  e3a01000          MOV      r1,#0                 ;763
000bac  e3a00001          MOV      r0,#1                 ;763
000bb0  ebfffffe          BL       UVCSetPower
000bb4  e1a00000          MOV      r0,r0                 ;764
                  |L1.3000|
000bb8  e1a00000          MOV      r0,r0                 ;761
000bbc  ebfffffe          BL       usbh_pooling_hubs
000bc0  ebfffffe          BL       usbh_pooling_hubs
000bc4  e3a00020          MOV      r0,#0x20              ;773
000bc8  e51f1534          LDR      r1,|L1.1692|
000bcc  e5911000          LDR      r1,[r1,#0]            ;773  ; _ehci
000bd0  e58100c8          STR      r0,[r1,#0xc8]         ;773
000bd4  e3570000          CMP      r7,#0                 ;776
000bd8  0a000005          BEQ      |L1.3060|
000bdc  e3a03001          MOV      r3,#1                 ;778
000be0  e1a02003          MOV      r2,r3                 ;778
000be4  e3a01064          MOV      r1,#0x64              ;778
000be8  e3a00032          MOV      r0,#0x32              ;778
000bec  ebfffffe          BL       BuzzerPlay
000bf0  ea000004          B        |L1.3080|
                  |L1.3060|
000bf4  e3a03001          MOV      r3,#1                 ;782
000bf8  e3a02002          MOV      r2,#2                 ;782
000bfc  e3a01064          MOV      r1,#0x64              ;782
000c00  e3a00032          MOV      r0,#0x32              ;782
000c04  ebfffffe          BL       BuzzerPlay
                  |L1.3080|
000c08  e08a010a          ADD      r0,r10,r10,LSL #2     ;784
000c0c  e1a00080          LSL      r0,r0,#1              ;784
000c10  e1a03006          MOV      r3,r6                 ;784
000c14  e58d0000          STR      r0,[sp,#0]            ;784
000c18  e1a01005          MOV      r1,r5                 ;784
000c1c  e59f008c          LDR      r0,|L1.3248|
000c20  e59d2144          LDR      r2,[sp,#0x144]        ;784
000c24  ebfffffe          BL       sysprintf
000c28  e3a03000          MOV      r3,#0                 ;785
000c2c  e1a02003          MOV      r2,r3                 ;785
000c30  e1a01003          MOV      r1,r3                 ;785
000c34  e51f0964          LDR      r0,|L1.728|
000c38  e5900000          LDR      r0,[r0,#0]            ;785  ; xRunningSemaphore
000c3c  ebfffffe          BL       xQueueGenericSend
000c40  e1a00007          MOV      r0,r7                 ;786
000c44  eafffe1c          B        |L1.1212|
;;;788    void UVCLogStatus(void)
                          ENDP

                  UVCLogStatus PROC
000c48  e92d4008          PUSH     {r3,lr}
;;;789    {
;;;790        static char logStr[128];
;;;791        sprintf(logStr, "-- {UVC counterNumber: %d, %d, power: %d} --\r\n", counterNumber[0], counterNumber[1], powerStatus);
000c4c  e51f09f4          LDR      r0,|L1.608|
000c50  e5d00000          LDRB     r0,[r0,#0]  ; powerStatus
000c54  e58d0000          STR      r0,[sp,#0]
000c58  e51f05c0          LDR      r0,|L1.1696|
000c5c  e5903004          LDR      r3,[r0,#4]  ; counterNumber
000c60  e28f104c          ADR      r1,|L1.3252|
000c64  e5902000          LDR      r2,[r0,#0]  ; counterNumber
000c68  e59f0074          LDR      r0,|L1.3300|
000c6c  ebfffffe          BL       __2sprintf
;;;792        //LoglibPrintf(LOG_TYPE_INFO, logStr, FALSE);
;;;793    }
000c70  e8bd8008          POP      {r3,pc}
                  |L1.3188|
                          DCD      ||.constdata||+0x64
                  |L1.3192|
                          DCD      ||.constdata||+0xac
                  |L1.3196|
000c7c  25732d5b          DCB      "%s-[%d].jpg",0
000c80  25645d2e
000c84  6a706700
                  |L1.3208|
000c88  257300            DCB      "%s",0
000c8b  00                DCB      0
                  |L1.3212|
000c8c  66696c65          DCB      "fileName == NULL < Camera %d >\r\n",0
000c90  4e616d65
000c94  203d3d20
000c98  4e554c4c
000c9c  203c2043
000ca0  616d6572
000ca4  61202564
000ca8  203e0d0a
000cac  00      
000cad  00                DCB      0
000cae  00                DCB      0
000caf  00                DCB      0
                  |L1.3248|
                          DCD      ||.constdata||+0xf4
                  |L1.3252|
000cb4  2d2d207b          DCB      "-- {UVC counterNumber: %d, %d, power: %d} --\r\n",0
000cb8  55564320
000cbc  636f756e
000cc0  7465724e
000cc4  756d6265
000cc8  723a2025
000ccc  642c2025
000cd0  642c2070
000cd4  6f776572
000cd8  3a202564
000cdc  7d202d2d
000ce0  0d0a00  
000ce3  00                DCB      0
                  |L1.3300|
                          DCD      logStr
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  logStr
                          %        128
                  errorMsgBuffer
                          %        256
                  _ig
                          %        12
                  _igTemp
                          %        20
                  image_buff_pool
                          %        2457600
                  image_buff_pool_Temp
                          %        2457600

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
000004  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000008  20555643          DCB      0x20,0x55,0x56,0x43
00000c  54616b65          DCB      0x54,0x61,0x6b,0x65
000010  50686f74          DCB      0x50,0x68,0x6f,0x74
000014  6f205b25          DCB      0x6f,0x20,0x5b,0x25
000018  645d5b25          DCB      0x64,0x5d,0x5b,0x25
00001c  735d2121          DCB      0x73,0x5d,0x21,0x21
000020  20205354          DCB      0x20,0x20,0x53,0x54
000024  41525420          DCB      0x41,0x52,0x54,0x20
000028  28736d61          DCB      0x28,0x73,0x6d,0x61
00002c  6c6c5369          DCB      0x6c,0x6c,0x53,0x69
000030  7a65466c          DCB      0x7a,0x65,0x46,0x6c
000034  6167203d          DCB      0x61,0x67,0x20,0x3d
000038  20256429          DCB      0x20,0x25,0x64,0x29
00003c  20287068          DCB      0x20,0x28,0x70,0x68
000040  6f746f4e          DCB      0x6f,0x74,0x6f,0x4e
000044  756d3a25          DCB      0x75,0x6d,0x3a,0x25
000048  642c2074          DCB      0x64,0x2c,0x20,0x74
00004c  616b6549          DCB      0x61,0x6b,0x65,0x49
000050  6e746572          DCB      0x6e,0x74,0x65,0x72
000054  76616c3a          DCB      0x76,0x61,0x6c,0x3a
000058  2564292d          DCB      0x25,0x64,0x29,0x2d
00005c  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000060  0a000000          DCB      0x0a,0x00,0x00,0x00
000064  43616e6e          DCB      0x43,0x61,0x6e,0x6e
000068  6f742067          DCB      0x6f,0x74,0x20,0x67
00006c  65742069          DCB      0x65,0x74,0x20,0x69
000070  6d616765          DCB      0x6d,0x61,0x67,0x65
000074  2066726f          DCB      0x20,0x66,0x72,0x6f
000078  6d205556          DCB      0x6d,0x20,0x55,0x56
00007c  43206465          DCB      0x43,0x20,0x64,0x65
000080  76696365          DCB      0x76,0x69,0x63,0x65
000084  20256420          DCB      0x20,0x25,0x64,0x20
000088  696e2033          DCB      0x69,0x6e,0x20,0x33
00008c  20736563          DCB      0x20,0x73,0x65,0x63
000090  6f6e6473          DCB      0x6f,0x6e,0x64,0x73
000094  21213c20          DCB      0x21,0x21,0x3c,0x20
000098  43616d65          DCB      0x43,0x61,0x6d,0x65
00009c  72612025          DCB      0x72,0x61,0x20,0x25
0000a0  64203e2e          DCB      0x64,0x20,0x3e,0x2e
0000a4  2e2e0a0a          DCB      0x2e,0x2e,0x0a,0x0a
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  43616e6e          DCB      0x43,0x61,0x6e,0x6e
0000b0  6f742067          DCB      0x6f,0x74,0x20,0x67
0000b4  65742069          DCB      0x65,0x74,0x20,0x69
0000b8  6d616765          DCB      0x6d,0x61,0x67,0x65
0000bc  2066726f          DCB      0x20,0x66,0x72,0x6f
0000c0  6d205556          DCB      0x6d,0x20,0x55,0x56
0000c4  43206465          DCB      0x43,0x20,0x64,0x65
0000c8  76696365          DCB      0x76,0x69,0x63,0x65
0000cc  20256420          DCB      0x20,0x25,0x64,0x20
0000d0  696e2033          DCB      0x69,0x6e,0x20,0x33
0000d4  20736563          DCB      0x20,0x73,0x65,0x63
0000d8  6f6e6473          DCB      0x6f,0x6e,0x64,0x73
0000dc  21213c20          DCB      0x21,0x21,0x3c,0x20
0000e0  43616d65          DCB      0x43,0x61,0x6d,0x65
0000e4  72612025          DCB      0x72,0x61,0x20,0x25
0000e8  64203e2e          DCB      0x64,0x20,0x3e,0x2e
0000ec  2e2e0d0a          DCB      0x2e,0x2e,0x0d,0x0a
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  0d0a202d          DCB      0x0d,0x0a,0x20,0x2d
0000f8  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
0000fc  20555643          DCB      0x20,0x55,0x56,0x43
000100  54616b65          DCB      0x54,0x61,0x6b,0x65
000104  50686f74          DCB      0x50,0x68,0x6f,0x74
000108  6f205b25          DCB      0x6f,0x20,0x5b,0x25
00010c  645d5b25          DCB      0x64,0x5d,0x5b,0x25
000110  735d2870          DCB      0x73,0x5d,0x28,0x70
000114  686f746f          DCB      0x68,0x6f,0x74,0x6f
000118  4e756d3a          DCB      0x4e,0x75,0x6d,0x3a
00011c  25642c20          DCB      0x25,0x64,0x2c,0x20
000120  74616b65          DCB      0x74,0x61,0x6b,0x65
000124  496e7465          DCB      0x49,0x6e,0x74,0x65
000128  7276616c          DCB      0x72,0x76,0x61,0x6c
00012c  3a256429          DCB      0x3a,0x25,0x64,0x29
000130  21212020          DCB      0x21,0x21,0x20,0x20
000134  454e4420          DCB      0x45,0x4e,0x44,0x20
000138  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00013c  2d0d0a00          DCB      0x2d,0x0d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  initFlag
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  xRunningSemaphore
                          DCD      0x00000000
                  changeBufferFlag
000008  00                DCB      0x00
                  powerStatus
000009  000000            DCB      0x00,0x00,0x00
                  counterNumber
                          DCD      0x00000000
                          DCD      0x00000000
                  g_vdev
                          DCD      0x00000000
                  g_OSD_base
                          DCD      0x00000000
                  g_LCD_base
                          DCD      0x00000000
