<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\epm2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\epm2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Jul 13 11:46:24 2017
<BR><P>
<H3>Maximum Stack Usage =       9528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
sendDataCallback &rArr; loadSimpleFile &rArr; FtpClientSendFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1a4]">Vector_Table</a>
 <LI><a href="#[10d]">Reset_Go</a>
 <LI><a href="#[720]">vPortStartFirstTask</a>
 <LI><a href="#[6ca]">vPortYield2</a>
 <LI><a href="#[10f]">vPortYieldProcessor</a>
 <LI><a href="#[112]">vFreeRTOS_ISR</a>
 <LI><a href="#[21c]">sysSetupCP15</a>
 <LI><a href="#[21d]">sys_flush_and_clean_dcache</a>
 <LI><a href="#[10e]">Undefined_Handler</a>
 <LI><a href="#[110]">Prefetch_Handler</a>
 <LI><a href="#[111]">Abort_Handler</a>
 <LI><a href="#[113]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21d]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21d]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[2a1]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a1]">cJSON_Delete</a><BR>
 <LI><a href="#[4b4]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b3]">parse_value</a><BR>
 <LI><a href="#[4b1]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b3]">parse_value</a><BR>
 <LI><a href="#[61f]">yaffs_summary_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56b]">yaffs_wr_chunk_tags_nand</a><BR>
 <LI><a href="#[588]">yaffs_verify_dir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[587]">yaffs_verify_obj_in_dir</a><BR>
 <LI><a href="#[59f]">yaffs_gc_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[598]">yaffs_generic_obj_del</a><BR>
 <LI><a href="#[585]">yaffs_soft_del_worker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[585]">yaffs_soft_del_worker</a><BR>
 <LI><a href="#[5ba]">yaffs_prune_worker</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5ba]">yaffs_prune_worker</a><BR>
 <LI><a href="#[668]">yaffsfs_DoFindDirectory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[669]">yaffsfs_FollowLink</a><BR>
 <LI><a href="#[4b9]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b8]">print_value</a><BR>
 <LI><a href="#[4b7]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b8]">print_value</a><BR>
 <LI><a href="#[482]">pattern_matching</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[482]">pattern_matching</a><BR>
 <LI><a href="#[24e]">RTC_Ioctl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24e]">RTC_Ioctl</a><BR>
 <LI><a href="#[508]">nand_erase_nand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4fe]">nand_update_bbt</a><BR>
 <LI><a href="#[10e]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">Undefined_Handler</a><BR>
 <LI><a href="#[110]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[110]">Prefetch_Handler</a><BR>
 <LI><a href="#[111]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[111]">Abort_Handler</a><BR>
 <LI><a href="#[113]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14e]">ATCmdDataTempBuffer2</a> from atcmdparser.o(.text) referenced from quentelmodemlib.o(.text)
 <LI><a href="#[111]">Abort_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[ac]">BatteryDrvInit</a> from batterydrv.o(.text) referenced 2 times from userdrv.o(.data)
 <LI><a href="#[aa]">BuzzerDrvInit</a> from buzzerdrv.o(.text) referenced 2 times from userdrv.o(.data)
 <LI><a href="#[2fe]">CallBackReturnValue</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.text)
 <LI><a href="#[f]">CardReaderInit</a> from cardreader.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[f3]">DipDrvInit</a> from dipdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f4]">DipSetCallbackFunc</a> from dipdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[14c]">EINT1Callback</a> from nt066edrv.o(.text) referenced from nt066edrv.o(.text)
 <LI><a href="#[421]">EINT2Callback</a> from dipdrv.o(.text) referenced from dipdrv.o(.text)
 <LI><a href="#[422]">EINT3Callback</a> from dipdrv.o(.text) referenced from dipdrv.o(.text)
 <LI><a href="#[420]">EINT4Callback</a> from dipdrv.o(.text) referenced from dipdrv.o(.text)
 <LI><a href="#[14a]">ETMR0_IRQHandler</a> from sr04tdrv.o(.text) referenced from sr04tdrv.o(.text)
 <LI><a href="#[14b]">ETMR1_IRQHandler</a> from sr04tdrv.o(.text) referenced from sr04tdrv.o(.text)
 <LI><a href="#[c]">EpdDrvInit</a> from epddrv.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[113]">FIQ_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[a9]">FakeDrvInit</a> from userdrv.o(.text) referenced 2 times from userdrv.o(.data)
 <LI><a href="#[d]">FatfsInit</a> from fatfslib.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[a8]">FileAgentCheckStatus</a> from fileagent.o(.text) referenced 2 times from fileagent.o(.data)
 <LI><a href="#[a6]">FileAgentOffCallback</a> from fileagent.o(.text) referenced 2 times from fileagent.o(.data)
 <LI><a href="#[a7]">FileAgentOnCallback</a> from fileagent.o(.text) referenced 2 times from fileagent.o(.data)
 <LI><a href="#[a5]">FileAgentPreOffCallback</a> from fileagent.o(.text) referenced 2 times from fileagent.o(.data)
 <LI><a href="#[101]">FlashDrvExInit</a> from flashdrvex.o(.text) referenced 4 times from interface.o(.data)
 <LI><a href="#[102]">FlashDrvExInitialize</a> from flashdrvex.o(.text) referenced 4 times from interface.o(.data)
 <LI><a href="#[106]">FlashDrvExIoctl</a> from flashdrvex.o(.text) referenced 4 times from interface.o(.data)
 <LI><a href="#[104]">FlashDrvExRead</a> from flashdrvex.o(.text) referenced 4 times from interface.o(.data)
 <LI><a href="#[103]">FlashDrvExStatus</a> from flashdrvex.o(.text) referenced 4 times from interface.o(.data)
 <LI><a href="#[105]">FlashDrvExWrite</a> from flashdrvex.o(.text) referenced 4 times from interface.o(.data)
 <LI><a href="#[121]">GPIO_IRQHandler</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[241]">GPIO_IRQHandler0</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[242]">GPIO_IRQHandler1</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[243]">GPIO_IRQHandler2</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[244]">GPIO_IRQHandler3</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[245]">GPIO_IRQHandler4</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[246]">GPIO_IRQHandler5</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[247]">GPIO_IRQHandler6</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[248]">GPIO_IRQHandler7</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[e]">GUIDrvInit</a> from guidrv.o(.text) referenced 4 times from main.o(.data)
 <LI><a href="#[12c]">GUIKeyCallbackFunc</a> from guidrv.o(.text) referenced from guidrv.o(.text)
 <LI><a href="#[12d]">GUITimerCallbackFunc</a> from guidrv.o(.text) referenced from guidrv.o(.text)
 <LI><a href="#[34]">GuiDepositFailKeyCallback</a> from guidepositfail.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[33]">GuiDepositFailOnDraw</a> from guidepositfail.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[36]">GuiDepositFailPowerCallbackFunc</a> from guidepositfail.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[35]">GuiDepositFailTimerCallback</a> from guidepositfail.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[2c]">GuiDepositKeyCallback</a> from guideposit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[30]">GuiDepositOKKeyCallback</a> from guidepositok.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[2f]">GuiDepositOKOnDraw</a> from guidepositok.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[32]">GuiDepositOKPowerCallbackFunc</a> from guidepositok.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[31]">GuiDepositOKTimerCallback</a> from guidepositok.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[2b]">GuiDepositOnDraw</a> from guideposit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[2e]">GuiDepositPowerCallbackFunc</a> from guideposit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[2d]">GuiDepositTimerCallback</a> from guideposit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[44]">GuiFileDownloadKeyCallback</a> from guifiledownload.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[43]">GuiFileDownloadOnDraw</a> from guifiledownload.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[46]">GuiFileDownloadPowerCallbackFunc</a> from guifiledownload.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[45]">GuiFileDownloadTimerCallback</a> from guifiledownload.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[48]">GuiFreeKeyCallback</a> from guifree.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[47]">GuiFreeOnDraw</a> from guifree.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[4a]">GuiFreePowerCallbackFunc</a> from guifree.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[49]">GuiFreeTimerCallback</a> from guifree.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[19]">GuiManagerInit</a> from guimanager.o(.text) referenced 2 times from user.o(.data)
 <LI><a href="#[4c]">GuiOffKeyCallback</a> from guioff.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[4b]">GuiOffOnDraw</a> from guioff.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[4e]">GuiOffPowerCallbackFunc</a> from guioff.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[4d]">GuiOffTimerCallback</a> from guioff.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[28]">GuiReaderInitKeyCallback</a> from guireaderinit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[27]">GuiReaderInitOnDraw</a> from guireaderinit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[2a]">GuiReaderInitPowerCallbackFunc</a> from guireaderinit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[29]">GuiReaderInitTimerCallback</a> from guireaderinit.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[38]">GuiReplaceBPKeyCallback</a> from guireplacebp.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[37]">GuiReplaceBPOnDraw</a> from guireplacebp.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[3a]">GuiReplaceBPPowerCallbackFunc</a> from guireplacebp.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[39]">GuiReplaceBPTimerCallback</a> from guireplacebp.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[7f]">GuiRunTimeoutFunc</a> from guidrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[20]">GuiSelSpaceKeyCallback</a> from guiselspace.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[1f]">GuiSelSpaceOnDraw</a> from guiselspace.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[22]">GuiSelSpacePowerCallbackFunc</a> from guiselspace.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[21]">GuiSelSpaceTimerCallback</a> from guiselspace.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[24]">GuiSelTimeKeyCallback</a> from guiseltime.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[23]">GuiSelTimeOnDraw</a> from guiseltime.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[26]">GuiSelTimePowerCallbackFunc</a> from guiseltime.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[25]">GuiSelTimeTimerCallback</a> from guiseltime.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[7c]">GuiSetKeyCallbackFunc</a> from guidrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[7e]">GuiSetTimeout</a> from guidrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[7d]">GuiSetTimerCallbackFunc</a> from guidrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[1c]">GuiStandbyKeyCallback</a> from guistandby.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[1a]">GuiStandbyOnDraw</a> from guistandby.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[1e]">GuiStandbyPowerCallbackFunc</a> from guistandby.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[1d]">GuiStandbyTimerCallback</a> from guistandby.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[1b]">GuiStandbyUpdateData</a> from guistandby.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[3c]">GuiTesterKeyCallback</a> from guitester.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[40]">GuiTesterKeypadKeyCallback</a> from guitesterkeypad.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[3f]">GuiTesterKeypadOnDraw</a> from guitesterkeypad.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[42]">GuiTesterKeypadPowerCallbackFunc</a> from guitesterkeypad.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[41]">GuiTesterKeypadTimerCallback</a> from guitesterkeypad.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[3b]">GuiTesterOnDraw</a> from guitester.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[3e]">GuiTesterPowerCallbackFunc</a> from guitester.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[3d]">GuiTesterTimerCallback</a> from guitester.o(.text) referenced 2 times from guimanager.o(.data)
 <LI><a href="#[ea]">I2c1DrvInit</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[eb]">I2c1Ioctl</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ed]">I2c1Read</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f0]">I2c1ResetPin</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ef]">I2c1SetPin</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ec]">I2c1Write</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ee]">I2c1enableCriticalSectionFunc</a> from i2c1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[12e]">KeyCallbackFunc</a> from keydrv.o(.text) referenced from keydrv.o(.text)
 <LI><a href="#[75]">KeyDrvInit</a> from keydrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[76]">KeyDrvSetCallbackFunc</a> from keydrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[77]">KeyDrvSetPowerFunc</a> from keydrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[5d]">LEDTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[ab]">LedDrvInit</a> from leddrv.o(.text) referenced 2 times from userdrv.o(.data)
 <LI><a href="#[58]">MeterDataCheckStatus</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[18]">MeterDataInit</a> from meterdata.o(.text) referenced 2 times from user.o(.data)
 <LI><a href="#[56]">MeterDataOffCallback</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[57]">MeterDataOnCallback</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[55]">MeterDataPreOffCallback</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[9d]">ModemAgentCheckStatus</a> from modemagent.o(.text) referenced 2 times from modemagent.o(.data)
 <LI><a href="#[12]">ModemAgentInit</a> from modemagent.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[9b]">ModemAgentOffCallback</a> from modemagent.o(.text) referenced 2 times from modemagent.o(.data)
 <LI><a href="#[9c]">ModemAgentOnCallback</a> from modemagent.o(.text) referenced 2 times from modemagent.o(.data)
 <LI><a href="#[9a]">ModemAgentPreOffCallback</a> from modemagent.o(.text) referenced 2 times from modemagent.o(.data)
 <LI><a href="#[f1]">NT066EDrvInit</a> from nt066edrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f2]">NT066ESetCallbackFunc</a> from nt066edrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[147]">NormalConvCallback</a> from batterydrv.o(.text) referenced from batterydrv.o(.text)
 <LI><a href="#[13]">PCT08DrvInit</a> from pct08drv.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[17]">ParaLibInit</a> from paralib.o(.text) referenced 2 times from user.o(.data)
 <LI><a href="#[99]">PhotoAgentCheckStatus</a> from photoagent.o(.text) referenced 2 times from photoagent.o(.data)
 <LI><a href="#[14]">PhotoAgentInit</a> from photoagent.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[97]">PhotoAgentOffCallback</a> from photoagent.o(.text) referenced 2 times from photoagent.o(.data)
 <LI><a href="#[98]">PhotoAgentOnCallback</a> from photoagent.o(.text) referenced 2 times from photoagent.o(.data)
 <LI><a href="#[96]">PhotoAgentPreOffCallback</a> from photoagent.o(.text) referenced 2 times from photoagent.o(.data)
 <LI><a href="#[8d]">PowerDrvCheckStatus</a> from powerdrv.o(.text) referenced 2 times from powerdrv.o(.data)
 <LI><a href="#[11]">PowerDrvInit</a> from powerdrv.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[8b]">PowerDrvOffCallback</a> from powerdrv.o(.text) referenced 2 times from powerdrv.o(.data)
 <LI><a href="#[8c]">PowerDrvOnCallback</a> from powerdrv.o(.text) referenced 2 times from powerdrv.o(.data)
 <LI><a href="#[8a]">PowerDrvPreOffCallback</a> from powerdrv.o(.text) referenced 2 times from powerdrv.o(.data)
 <LI><a href="#[110]">Prefetch_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[f7]">RS232CommDrvInit</a> from rs232commdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f9]">RS232CommDrvRead</a> from rs232commdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[fa]">RS232CommDrvReadWait</a> from rs232commdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f8]">RS232CommDrvWrite</a> from rs232commdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[63]">RTCTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[122]">RTC_ISR</a> from rtc.o(.text) referenced from rtc.o(.text)
 <LI><a href="#[318]">RTC_Releative_AlarmISR</a> from powerdrv.o(.text) referenced from powerdrv.o(.text)
 <LI><a href="#[10d]">Reset_Go</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[457]">SC0_IRQHandler</a> from smartcarddrv.o(.text) referenced from smartcarddrv.o(.text)
 <LI><a href="#[fc]">SDDrvInitialize</a> from sddrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[100]">SDDrvIoctl</a> from sddrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[fe]">SDDrvRead</a> from sddrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[fd]">SDDrvStatus</a> from sddrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ff]">SDDrvWrite</a> from sddrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[434]">SDH_IRQHandler</a> from sddrv.o(.text) referenced from sddrv.o(.text)
 <LI><a href="#[f5]">SR04TDrvInit</a> from sr04tdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f6]">SR04TMeasureDist</a> from sr04tdrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[16]">SYS_Interrupt_Shell</a> from sys.o(.text) referenced 244 times from sys.o(.data)
 <LI><a href="#[fb]">SdDrvInit</a> from sddrv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[95]">SpaceDrvCheckStatus</a> from spacedrv.o(.text) referenced 2 times from spacedrv.o(.data)
 <LI><a href="#[10]">SpaceDrvInit</a> from spacedrv.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[93]">SpaceDrvOffCallback</a> from spacedrv.o(.text) referenced 2 times from spacedrv.o(.data)
 <LI><a href="#[94]">SpaceDrvOnCallback</a> from spacedrv.o(.text) referenced 2 times from spacedrv.o(.data)
 <LI><a href="#[92]">SpaceDrvPreOffCallback</a> from spacedrv.o(.text) referenced 2 times from spacedrv.o(.data)
 <LI><a href="#[e1]">Spi0ActiveCS</a> from spi0drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[de]">Spi0DrvInit</a> from spi0drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e0]">Spi0Read</a> from spi0drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e3]">Spi0ResetPin</a> from spi0drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e2]">Spi0SetPin</a> from spi0drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[df]">Spi0Write</a> from spi0drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e7]">Spi1ActiveCS</a> from spi1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e4]">Spi1DrvInit</a> from spi1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e6]">Spi1Read</a> from spi1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e9]">Spi1ResetPin</a> from spi1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e8]">Spi1SetPin</a> from spi1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[e5]">Spi1Write</a> from spi1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[82]">TS2000BreakCheckReader</a> from ts2000drv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[83]">TS2000CheckReader</a> from ts2000drv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[80]">TS2000DrvInit</a> from ts2000drv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[85]">TS2000GetBootedStatus</a> from ts2000drv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[84]">TS2000Process</a> from ts2000drv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[81]">TS2000SetPower</a> from ts2000drv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[78]">TimerDrvInit</a> from timerdrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[7a]">TimerRun</a> from timerdrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[7b]">TimerSetCallback</a> from timerdrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[79]">TimerSetTimeout</a> from timerdrv.o(.text) referenced 2 times from halinterface.o(.data)
 <LI><a href="#[d7]">UART10DrvInit</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[dd]">UART10Ioctl</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d9]">UART10Read</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[da]">UART10ReadWait</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[db]">UART10SetPower</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[dc]">UART10SetRS232Power</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d8]">UART10Write</a> from uart10drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ad]">UART1DrvInit</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b3]">UART1Ioctl</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[af]">UART1Read</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b0]">UART1ReadWait</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b1]">UART1SetPower</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b2]">UART1SetRS232Power</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ae]">UART1Write</a> from uart1drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b4]">UART2DrvInit</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ba]">UART2Ioctl</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b6]">UART2Read</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b7]">UART2ReadWait</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b8]">UART2SetPower</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b9]">UART2SetRS232Power</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b5]">UART2Write</a> from uart2drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[bb]">UART3DrvInit</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c1]">UART3Ioctl</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[bd]">UART3Read</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[be]">UART3ReadWait</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[bf]">UART3SetPower</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c0]">UART3SetRS232Power</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[bc]">UART3Write</a> from uart3drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c2]">UART4DrvInit</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c8]">UART4Ioctl</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c4]">UART4Read</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c5]">UART4ReadWait</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c6]">UART4SetPower</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c7]">UART4SetRS232Power</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c3]">UART4Write</a> from uart4drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c9]">UART7DrvInit</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[cf]">UART7Ioctl</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[cb]">UART7Read</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[cc]">UART7ReadWait</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[cd]">UART7SetPower</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ce]">UART7SetRS232Power</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[ca]">UART7Write</a> from uart7drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d0]">UART8DrvInit</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d6]">UART8Ioctl</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d2]">UART8Read</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d3]">UART8ReadWait</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d4]">UART8SetPower</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d5]">UART8SetRS232Power</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d1]">UART8Write</a> from uart8drv.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[10e]">Undefined_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[b]">UserDrvInit</a> from userdrv.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[15]">UserInit</a> from user.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[19e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[19f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[1a1]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[1a0]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[19d]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[127]">adcISR</a> from adc.o(.text) referenced from adc.o(.text)
 <LI><a href="#[10a]">batteryDrvCheckStatus</a> from batterydrv.o(.text) referenced 2 times from batterydrv.o(.data)
 <LI><a href="#[108]">batteryDrvOffCallback</a> from batterydrv.o(.text) referenced 2 times from batterydrv.o(.data)
 <LI><a href="#[109]">batteryDrvOnCallback</a> from batterydrv.o(.text) referenced 2 times from batterydrv.o(.data)
 <LI><a href="#[107]">batteryDrvPreOffCallback</a> from batterydrv.o(.text) referenced 2 times from batterydrv.o(.data)
 <LI><a href="#[73]">batterySelect</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[69]">batteryTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[74]">buzzerLoop</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[5c]">buzzerTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[67]">cameraTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[136]">compare</a> from tarifflib.o(.text) referenced from tarifflib.o(.text)
 <LI><a href="#[a0]">dcfExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[145]">delCallback</a> from fileagent.o(.text) referenced from fileagent.o(.text)
 <LI><a href="#[9f]">dsfExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[6c]">electricityAllTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[5f]">electricitySingleTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[71]">enable12vPower</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[91]">epdDrvCheckStatus</a> from epddrv.o(.text) referenced 2 times from epddrv.o(.data)
 <LI><a href="#[8f]">epdDrvOffCallback</a> from epddrv.o(.text) referenced 2 times from epddrv.o(.data)
 <LI><a href="#[90]">epdDrvOnCallback</a> from epddrv.o(.text) referenced 2 times from epddrv.o(.data)
 <LI><a href="#[8e]">epdDrvPreOffCallback</a> from epddrv.o(.text) referenced 2 times from epddrv.o(.data)
 <LI><a href="#[60]">epdTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[6a]">exitTest</a> from hwtester.o(.text) referenced 6 times from hwtester.o(.data)
 <LI><a href="#[13f]">getDataFileCallback</a> from dataprocesslib.o(.text) referenced from dataprocesslib.o(.text)
 <LI><a href="#[89]">guiDrvCheckStatus</a> from guidrv.o(.text) referenced 2 times from guidrv.o(.data)
 <LI><a href="#[87]">guiDrvOffCallback</a> from guidrv.o(.text) referenced 2 times from guidrv.o(.data)
 <LI><a href="#[88]">guiDrvOnCallback</a> from guidrv.o(.text) referenced 2 times from guidrv.o(.data)
 <LI><a href="#[86]">guiDrvPreOffCallback</a> from guidrv.o(.text) referenced 2 times from guidrv.o(.data)
 <LI><a href="#[125]">i2c0ISR</a> from i2c.o(.text) referenced from i2c.o(.text)
 <LI><a href="#[126]">i2c1ISR</a> from i2c.o(.text) referenced from i2c.o(.text)
 <LI><a href="#[70]">idConfig</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[1a2]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6d]">keyPadAllTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[61]">keyPadSingleTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[144]">listCallback</a> from fileagent.o(.text) referenced from fileagent.o(.text)
 <LI><a href="#[a2]">logExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[114]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[54]">modemAgentTransmitRoutine</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[54]">modemAgentTransmitRoutine</a> from meterdata.o(.text) referenced from meterdata.o(.text)
 <LI><a href="#[62]">modemTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[16f]">multi_erase_cmd</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[183]">nand_bch_calculate_ecc</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[184]">nand_bch_correct_data</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[166]">nand_block_bad</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[18b]">nand_block_isbad</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[18c]">nand_block_markbad</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[160]">nand_command</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[171]">nand_command_lp</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[16e]">nand_default_bbt</a> from nand_bbt.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[167]">nand_default_block_markbad</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[185]">nand_erase</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[186]">nand_read</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[16b]">nand_read_buf</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[16a]">nand_read_buf16</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[164]">nand_read_byte</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[163]">nand_read_byte16</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[188]">nand_read_oob</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[178]">nand_read_oob_std</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[17e]">nand_read_oob_syndrome</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[174]">nand_read_page_hwecc</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[173]">nand_read_page_hwecc_oob_first</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[176]">nand_read_page_raw</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[17c]">nand_read_page_raw_syndrome</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[180]">nand_read_page_swecc</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[17a]">nand_read_page_syndrome</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[181]">nand_read_subpage</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[165]">nand_read_word</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[162]">nand_select_chip</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[18a]">nand_sync</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[16d]">nand_verify_buf</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[16c]">nand_verify_buf16</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[161]">nand_wait</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[187]">nand_write</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[169]">nand_write_buf</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[168]">nand_write_buf16</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[189]">nand_write_oob</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[179]">nand_write_oob_std</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[17f]">nand_write_oob_syndrome</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[172]">nand_write_page</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[175]">nand_write_page_hwecc</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[177]">nand_write_page_raw</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[17d]">nand_write_page_raw_syndrome</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[182]">nand_write_page_swecc</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[17b]">nand_write_page_syndrome</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[13c]">nandmtd2_MarkNANDBlockBad</a> from yaffs_mtdif2.o(.text) referenced from yaffs2drv.o(.text)
 <LI><a href="#[13d]">nandmtd2_QueryNANDBlock</a> from yaffs_mtdif2.o(.text) referenced from yaffs2drv.o(.text)
 <LI><a href="#[139]">nandmtd2_read_chunk_tags</a> from yaffs_mtdif2.o(.text) referenced from yaffs2drv.o(.text)
 <LI><a href="#[138]">nandmtd2_write_chunk_tags</a> from yaffs_mtdif2.o(.text) referenced from yaffs2drv.o(.text)
 <LI><a href="#[13a]">nandmtd_EraseBlockInNAND</a> from yaffs_mtdif.o(.text) referenced from yaffs2drv.o(.text)
 <LI><a href="#[13b]">nandmtd_InitialiseNAND</a> from yaffs_mtdif.o(.text) referenced from yaffs2drv.o(.text)
 <LI><a href="#[191]">nuc970_dev_ready</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[18f]">nuc970_hwcontrol</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[197]">nuc970_nand_calculate_ecc</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[190]">nuc970_nand_command</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[198]">nuc970_nand_correct_data</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[196]">nuc970_nand_enable_hwecc</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[195]">nuc970_nand_read_buf</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[193]">nuc970_nand_read_byte</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[19b]">nuc970_nand_read_oob_hwecc</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[19a]">nuc970_nand_read_page_hwecc_oob_first</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[192]">nuc970_nand_select_chip</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[194]">nuc970_nand_write_buf</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[199]">nuc970_nand_write_page_hwecc</a> from fmi_nand.o(.text) referenced from fmi_nand.o(.text)
 <LI><a href="#[12b]">paraCallback</a> from paralib.o(.text) referenced from paralib.o(.text)
 <LI><a href="#[a3]">paraExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[141]">paraReloadCallback</a> from dataprocesslib.o(.text) referenced from dataprocesslib.o(.text)
 <LI><a href="#[15e]">part_block_isbad</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[15f]">part_block_markbad</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[14f]">part_erase</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[15a]">part_get_fact_prot_info</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[159]">part_get_user_prot_info</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[15c]">part_lock</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[158]">part_lock_user_prot_reg</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[152]">part_panic_write</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[150]">part_read</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[156]">part_read_fact_prot_reg</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[153]">part_read_oob</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[155]">part_read_user_prot_reg</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[15b]">part_sync</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[15d]">part_unlock</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[151]">part_write</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[154]">part_write_oob</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[157]">part_write_user_prot_reg</a> from mtdpart.o(.text) referenced from mtdpart.o(.text)
 <LI><a href="#[a1]">photoExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[6e]">prowaveAllTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[68]">prowaveSingleTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[19c]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[10b]">pvPortMalloc</a> from heap_4.o(.text) referenced 2 times from cjson.o(.data)
 <LI><a href="#[64]">readerTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[6b]">redSwitchAllTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[5e]">redSwitchSingleTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[128]">redrawscreen</a> from guimanager.o(.text) referenced from guimanager.o(.text)
 <LI><a href="#[65]">sFlashTest</a> from hwtester.o(.text) referenced 4 times from hwtester.o(.data)
 <LI><a href="#[13e]">sendDataCallback</a> from dataprocesslib.o(.text) referenced from dataprocesslib.o(.text)
 <LI><a href="#[51]">sendLedHeartbeatRoutine</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[12a]">setDepositResultStatusCallback</a> from guideposit.o(.text) referenced from guideposit.o(.text)
 <LI><a href="#[5a]">singleTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[170]">single_erase_cmd</a> from nand_base.o(.text) referenced from nand_base.o(.text)
 <LI><a href="#[66]">smartCardTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[123]">spi0ISR</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[124]">spi1ISR</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[9e]">statusExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[72]">suspendSystem</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[1fb]">sysFiqHandler</a> from sys.o(.text) referenced from sys.o(.text)
 <LI><a href="#[200]">sysTimer0ISR</a> from sys_timer.o(.text) referenced from sys_timer.o(.text)
 <LI><a href="#[203]">sysTimer1ISR</a> from sys_timer.o(.text) referenced from sys_timer.o(.text)
 <LI><a href="#[52]">takePhotoRoutine</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[53]">takeTransactionRoutine</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[137]">tariffCallback</a> from tarifflib.o(.text) referenced from tarifflib.o(.text)
 <LI><a href="#[a4]">tariffExecuteFunc</a> from dataprocesslib.o(.text) referenced 2 times from dataprocesslib.o(.data)
 <LI><a href="#[140]">tariffReloadCallback</a> from dataprocesslib.o(.text) referenced from dataprocesslib.o(.text)
 <LI><a href="#[6c3]">tickProcess</a> from osmisc.o(.text) referenced from osmisc.o(.text)
 <LI><a href="#[6f]">toolsAdjustKeypad</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[5b]">toolsFunction</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[59]">totalTest</a> from hwtester.o(.text) referenced 2 times from hwtester.o(.data)
 <LI><a href="#[225]">uart0ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[228]">uart10ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[118]">uart1ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[119]">uart2ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[11a]">uart3ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[11b]">uart4ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[11c]">uart5ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[11d]">uart6ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[11e]">uart7ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[11f]">uart8ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[120]">uart9ISR</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[4f]">updateTariffDataRoutine</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[50]">updateTariffDataRoutineCondition</a> from meterdata.o(.text) referenced 2 times from meterdata.o(.data)
 <LI><a href="#[148]">vBatteryDrvTask</a> from batterydrv.o(.text) referenced from batterydrv.o(.text)
 <LI><a href="#[146]">vBuzzerDrvTask</a> from buzzerdrv.o(.text) referenced from buzzerdrv.o(.text)
 <LI><a href="#[131]">vCardReaderRxTask</a> from cardreader.o(.text) referenced from cardreader.o(.text)
 <LI><a href="#[117]">vDebugTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[149]">vDipDrvTask</a> from dipdrv.o(.text) referenced from dipdrv.o(.text)
 <LI><a href="#[116]">vDrvInitTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[143]">vFileAgentTask</a> from fileagent.o(.text) referenced from fileagent.o(.text)
 <LI><a href="#[112]">vFreeRTOS_ISR</a> from portasm.o(PORT_ASM) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[115]">vHWTestTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[132]">vLedBackLightTask</a> from epddrv.o(.text) referenced from epddrv.o(.text)
 <LI><a href="#[142]">vLedTask</a> from leddrv.o(.text) referenced from leddrv.o(.text)
 <LI><a href="#[129]">vMeterDataProcessTask</a> from meterdata.o(.text) referenced from meterdata.o(.text)
 <LI><a href="#[135]">vModemAgentTask</a> from modemagent.o(.text) referenced from modemagent.o(.text)
 <LI><a href="#[14d]">vNT066EDrvTask</a> from nt066edrv.o(.text) referenced from nt066edrv.o(.text)
 <LI><a href="#[134]">vPhotoAgentTakePhotoTask</a> from photoagent.o(.text) referenced from photoagent.o(.text)
 <LI><a href="#[10c]">vPortFree</a> from heap_4.o(.text) referenced 2 times from cjson.o(.data)
 <LI><a href="#[10f]">vPortYieldProcessor</a> from portasm.o(PORT_ASM) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[12f]">vPowerDrvTask</a> from powerdrv.o(.text) referenced from powerdrv.o(.text)
 <LI><a href="#[133]">vSpaceDrvTask</a> from spacedrv.o(.text) referenced from spacedrv.o(.text)
 <LI><a href="#[1a3]">vTaskSwitchContext</a> from tasks.o(.text) referenced from portasm.o(PORT_ASM)
 <LI><a href="#[130]">vTimerDrvTask</a> from timerdrv.o(.text) referenced from timerdrv.o(.text)
 <LI><a href="#[18d]">yaffs2_ybicmp</a> from yaffs_yaffs2.o(.text) referenced from yaffs_yaffs2.o(.text)
 <LI><a href="#[18e]">yaffsfs_RemoveObjectCallback</a> from yaffsfs.o(.text) referenced from yaffsfs.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1a4]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[10d]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[1a5]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[1a6]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1a8]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[792]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[793]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[794]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a9]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[795]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1aa]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[742]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1af]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[1b2]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[796]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1be]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[797]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[798]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>

<P><STRONG><a name="[799]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[79a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[79b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via BLX)
</UL>

<P><STRONG><a name="[79c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[79d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via BLX)
</UL>

<P><STRONG><a name="[79e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[79f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[7a0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7a1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7a2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7a3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7a4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7a5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7a6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7a7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7a8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[7a9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7aa]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[7ab]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[7ac]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[7ad]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[7ae]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[7af]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[7b0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1a7]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7b1]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1bb]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[7b2]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1bf]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[7b3]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[761]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[7b4]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1c3]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[31a]"></a>__wfi</STRONG> (ARM, 8 bytes, Stack size 0 bytes, osmisc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[31d]"></a>SysGetBooted</STRONG> (ARM, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedBackLightTask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
</UL>

<P><STRONG><a name="[114]"></a>main</STRONG> (ARM, 284 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcOpen
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceHwInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[771]"></a>sysIrqHandler</STRONG> (ARM, 96 bytes, Stack size 16 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFreeRTOS_ISR
</UL>

<P><STRONG><a name="[1fb]"></a>sysFiqHandler</STRONG> (ARM, 120 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sysFiqHandler &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>SYS_Interrupt_Shell</STRONG> (ARM, 24 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SYS_Interrupt_Shell &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[1fd]"></a>sysInitializeAIC</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[206]"></a>sysDisableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cClose
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Close
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableEINT
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClose
</UL>

<P><STRONG><a name="[202]"></a>sysEnableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcOpen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[7b5]"></a>sysInstallExceptionHandler</STRONG> (ARM, 140 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7b6]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7b7]"></a>sysInstallIrqHandler</STRONG> (ARM, 68 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>sysInstallISR</STRONG> (ARM, 160 bytes, Stack size 20 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcOpen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[7b8]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7b9]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 112 bytes, Stack size 12 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>sysSetInterruptType</STRONG> (ARM, 112 bytes, Stack size 12 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcOpen
</UL>

<P><STRONG><a name="[204]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcOpen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClose
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[7ba]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7bb]"></a>sysGetInterruptEnableStatusH</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7bc]"></a>sysGetIBitState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>sysGetPLL</STRONG> (ARM, 68 bytes, Stack size 24 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sysGetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
</UL>

<P><STRONG><a name="[1c7]"></a>sysGetClock</STRONG> (ARM, 956 bytes, Stack size 40 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysGetClock &rArr; sysGetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLL
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSysInfo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetModuleClock
</UL>

<P><STRONG><a name="[200]"></a>sysTimer0ISR</STRONG> (ARM, 260 bytes, Stack size 8 bytes, sys_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimer0ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>sysTimer1ISR</STRONG> (ARM, 260 bytes, Stack size 8 bytes, sys_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimer1ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>sysGetTicks</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sys_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
</UL>

<P><STRONG><a name="[7bd]"></a>sysResetTicks</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7be]"></a>sysUpdateTickCount</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7bf]"></a>sysSetTimerReferenceClock</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>sysStartTimer</STRONG> (ARM, 444 bytes, Stack size 32 bytes, sys_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = sysStartTimer &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[205]"></a>sysStopTimer</STRONG> (ARM, 212 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[7c0]"></a>sysClearWatchDogTimerCount</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7c1]"></a>sysClearWatchDogTimerInterruptStatus</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7c2]"></a>sysDisableWatchDogTimer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7c3]"></a>sysDisableWatchDogTimerReset</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7c4]"></a>sysEnableWatchDogTimer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[7c5]"></a>sysEnableWatchDogTimerReset</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>sysInstallWatchDogTimerISR</STRONG> (ARM, 96 bytes, Stack size 24 bytes, sys_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[7c6]"></a>sysSetWatchDogTimerInterval</STRONG> (ARM, 56 bytes, Stack size 8 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[6c6]"></a>sysSetTimerEvent</STRONG> (ARM, 400 bytes, Stack size 16 bytes, sys_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysSetTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[7c7]"></a>sysClearTimerEvent</STRONG> (ARM, 180 bytes, Stack size 0 bytes, sys_timer.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>sysDOS_Time_To_UTC</STRONG> (ARM, 300 bytes, Stack size 16 bytes, sys_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysDOS_Time_To_UTC
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalTime
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
</UL>

<P><STRONG><a name="[208]"></a>sysUTC_To_DOS_Time</STRONG> (ARM, 320 bytes, Stack size 24 bytes, sys_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>

<P><STRONG><a name="[209]"></a>sysSetLocalTime</STRONG> (ARM, 64 bytes, Stack size 28 bytes, sys_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
</UL>

<P><STRONG><a name="[20b]"></a>sysGetCurrentTime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, sys_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20c]"></a>sysDelay</STRONG> (ARM, 96 bytes, Stack size 16 bytes, sys_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = sysDelay &rArr; sysStartTimer &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinitEpd
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvCheckStatus
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[20f]"></a>_PutChar_f</STRONG> (ARM, 72 bytes, Stack size 0 bytes, sys_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[20e]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 4 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[1c9]"></a>sysIsKbHit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sys_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerLoop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalSelect
</UL>

<P><STRONG><a name="[1f6]"></a>sysInitializeUART</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sys_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f0]"></a>setPrintfFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFailure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1Callback
</UL>

<P><STRONG><a name="[1c6]"></a>sysprintf</STRONG> (ARM, 136 bytes, Stack size 24 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cExitCriticalSection
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cEnterCriticalSection
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1ISR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ISR
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartWriteTxBuf
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Interrupt_Shell
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFiqHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printParaValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMemoryInfo
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showFreeHeapSize
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDrvInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRTC
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentInit
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08DrvInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSetErrorCode
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrvInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFs
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowErrorID
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDebugTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHWTestTask
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSysInfo
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TDrvInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemLibInit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemATCmdTest
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerClearISR
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetPower
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetChip
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendFactoryTest
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerDrvInit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryDrvInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallBackReturnValue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFailure
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaLibResetDepositEndTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataReloadParaFile
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStorageValue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStorageValue
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatteryStatus
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderStopInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerProcess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLibInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowExpired
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendHeartbeat
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpmID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routineCounterTimer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataOffCallback
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterOnDraw
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadOnDraw
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadKeyCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeyCallback
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetInstance
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeOnDraw
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceOnDraw
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceKeyCallback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPOnDraw
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPKeyCallback
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitOnDraw
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitKeyCallback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffOnDraw
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffKeyCallback
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeOnDraw
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeKeyCallback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFileDownloadOnDraw
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFileDownloadKeyCallback
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOnDraw
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKOnDraw
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKKeyCallback
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositKeyCallback
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailOnDraw
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailKeyCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerUpdateScreen
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerRefreshScreen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterDepositTime
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSpaceDrv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyPowerCallbackFunc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyUpdateData
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaLibInit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataInit
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraExecuteFunc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffExecuteFunc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFileCallback
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_write_chunk_tags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_QueryNANDBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_MarkNANDBlockBad
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2DrvInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_dev_ls
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurrentTariffData
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printJsonTariff
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTariffFileName
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTariffName
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTariffFile
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupStart
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupProcess
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpQueryCsq
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessLibInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentOffCallback
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdLibInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentOffCallback
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentInit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseage
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushBuffer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CN
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Time
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardFlushBuffer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOSTime
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpaceStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpaceDrvTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvOffCallback
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDepositTimePositionInfo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainNumberPositionInfo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainPositionInfo
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIT8951SystemInfo
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedBackLightTask
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReset
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetPower
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderStartInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCardReaderRxTask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSetWakeupTime
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvResetSystem
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerSendStatusData
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStatusCallback
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showReg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIKeyCallbackFunc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITimerCallbackFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDrvInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000Process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000DrvInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000CheckReader
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetTriggerLevel
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetBuildBit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetClkReg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1Callback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNT066EDrvTask
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EReadCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EWriteCmd
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFull
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadMidDid
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3Callback
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2Callback
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT4Callback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryDrvTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDrvOffCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBuzzerDrvTask
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10FlushBuffer
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7FlushBuffer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4FlushBuffer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3FlushBuffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1FlushBuffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8DrvInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7DrvInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4DrvInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3DrvInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2DrvInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1DrvInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10DrvInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1DrvInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0DrvInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232CommDrvInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1SetPin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1ResetPin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1DrvInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExRead
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExIoctl
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userDrvInit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentParserAutoData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFileAgentTask
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentOffCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedTask
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFactoryTest
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHeartbeat
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColor
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedBoardWakeup
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibInit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientStart
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientProcess
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientSendFile
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientClose
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_objs
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_objs
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_tnodes
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_create_default_bbt_descr
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_bbt_descr
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbts
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bbt
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_tail
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_ident
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_flash_type
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_transfer_oob
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_fill_oob
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_select_chip
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_nand_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_register
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mtd_partitions
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_mtd_device
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mtd_device
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mtd_device
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemAbortDataMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFlushBuffer
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfBuffData
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfBuffData
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_rd_data_error
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_nand
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bug_fn
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_collected_blk
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_refresh_block
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bg_gc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_dirty_dirs
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_error
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_managed_tmp_buffer
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_alloc_block
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate_stream
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_block
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_erased_block
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_space_ok
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_obj
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_tnode
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_tnode
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfoEx
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfo
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMacroMessage
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[215]"></a>terninalPrintf</STRONG> (ARM, 112 bytes, Stack size 24 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = terninalPrintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemATCmdTest
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerLoop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveAllTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartCardTest
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFlashTest
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerTest
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTest
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspendSystem
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTestItemChar
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;totalTest
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
</UL>

<P><STRONG><a name="[1ca]"></a>sysGetChar</STRONG> (ARM, 60 bytes, Stack size 0 bytes, sys_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>

<P><STRONG><a name="[7c8]"></a>sysPutChar</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sys_uart.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, system_nuc970.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCachePages
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPhyPageAddr
</UL>

<P><STRONG><a name="[216]"></a>sysGetPhyPageAddr</STRONG> (ARM, 100 bytes, Stack size 24 bytes, system_nuc970.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>

<P><STRONG><a name="[218]"></a>sysSetCachePages</STRONG> (ARM, 268 bytes, Stack size 36 bytes, system_nuc970.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>

<P><STRONG><a name="[219]"></a>sysInitPageTable</STRONG> (ARM, 372 bytes, Stack size 48 bytes, system_nuc970.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[7c9]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 20 bytes, Stack size 0 bytes, system_nuc970.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 456 bytes, Stack size 12 bytes, system_nuc970.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysGetSdramSizebyMB
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[21a]"></a>sysInitMMUTable</STRONG> (ARM, 688 bytes, Stack size 32 bytes, system_nuc970.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSdramSizebyMB
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[1f4]"></a>sysFlushCache</STRONG> (ARM, 112 bytes, Stack size 16 bytes, system_nuc970.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7ca]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, system_nuc970.o(.text), UNUSED)

<P><STRONG><a name="[7cb]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, system_nuc970.o(.text), UNUSED)

<P><STRONG><a name="[7cc]"></a>_sysLockCode</STRONG> (ARM, 132 bytes, Stack size 12 bytes, system_nuc970.o(.text), UNUSED)

<P><STRONG><a name="[7cd]"></a>_sysUnLockCode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, system_nuc970.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, system_nuc970.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>sysDisableCache</STRONG> (ARM, 64 bytes, Stack size 8 bytes, system_nuc970.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[221]"></a>RS485_HANDLE</STRONG> (ARM, 180 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
</UL>

<P><STRONG><a name="[225]"></a>uart0ISR</STRONG> (ARM, 112 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart0ISR &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>uart1ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart1ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>uart2ISR</STRONG> (ARM, 276 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart2ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>uart3ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart3ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>uart4ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart4ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>uart5ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart5ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>uart6ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart6ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>uart7ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart7ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>uart8ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart8ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>uart9ISR</STRONG> (ARM, 432 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart9ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[228]"></a>uart10ISR</STRONG> (ARM, 228 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart10ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[7ce]"></a>uartInit</STRONG> (ARM, 168 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>uartOpen</STRONG> (ARM, 140 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uartOpen &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[236]"></a>uartWaitReadEvent</STRONG> (ARM, 40 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8ReadWait
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7ReadWait
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4ReadWait
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3ReadWait
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2ReadWait
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1ReadWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10ReadWait
</UL>

<P><STRONG><a name="[238]"></a>uartRead</STRONG> (ARM, 128 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReadRxBuf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8Read
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7Read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10Read
</UL>

<P><STRONG><a name="[239]"></a>uartWrite</STRONG> (ARM, 452 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartWriteTxBuf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckTxBufSpace
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10Write
</UL>

<P><STRONG><a name="[23a]"></a>uartIoctl</STRONG> (ARM, 2028 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartGetRegisterValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartPerformIrDA
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetRTS
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7SetRTS
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4SetRTS
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SetRTS
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SetRTS
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8Ioctl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7Ioctl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Ioctl
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Ioctl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Ioctl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Ioctl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10Ioctl
</UL>

<P><STRONG><a name="[23d]"></a>uartRelease</STRONG> (ARM, 116 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>

<P><STRONG><a name="[1c4]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[7cf]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__user_setup_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[121]"></a>GPIO_IRQHandler</STRONG> (ARM, 116 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>GPIO_IRQHandler0</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[242]"></a>GPIO_IRQHandler1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[243]"></a>GPIO_IRQHandler2</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[244]"></a>GPIO_IRQHandler3</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[245]"></a>GPIO_IRQHandler4</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[246]"></a>GPIO_IRQHandler5</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[247]"></a>GPIO_IRQHandler6</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[248]"></a>GPIO_IRQHandler7</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[7d0]"></a>GPIO_Open</STRONG> (ARM, 184 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d1]"></a>GPIO_Close</STRONG> (ARM, 60 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d2]"></a>GPIO_Set</STRONG> (ARM, 44 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d3]"></a>GPIO_Clr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>GPIO_ReadPort</STRONG> (ARM, 24 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpmID
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1Callback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
</UL>

<P><STRONG><a name="[7d4]"></a>GPIO_SetPortDir</STRONG> (ARM, 80 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>GPIO_OpenBit</STRONG> (ARM, 176 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_OpenBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvInit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0SetPin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0ResetPin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1ResetPin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FakeDrvInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[327]"></a>GPIO_CloseBit</STRONG> (ARM, 112 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_CloseBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
</UL>

<P><STRONG><a name="[30a]"></a>GPIO_SetBit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetPower
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReset
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetPower
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startToggle
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPower
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerPlay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8SetPower
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7SetRS232Power
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4SetPower
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SetRS232Power
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SetRS232Power
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SetPower
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SetRS232Power
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetRS232Power
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetPower
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0ActiveCS
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedBoardWakeup
</UL>

<P><STRONG><a name="[7d5]"></a>GPIO_ClrISR</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>GPIO_ClrISRBit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1Callback
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3Callback
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2Callback
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT4Callback
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
</UL>

<P><STRONG><a name="[309]"></a>GPIO_ClrBit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetPower
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReset
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetPower
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopToggle
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startToggle
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingToggle
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPower
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerPlay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8SetPower
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7SetRS232Power
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4SetPower
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SetRS232Power
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SetRS232Power
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SetPower
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SetRS232Power
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetRS232Power
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetPower
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0ActiveCS
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1ResetPin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FakeDrvInit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedBoardWakeup
</UL>

<P><STRONG><a name="[2fa]"></a>GPIO_ReadBit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDGetBacklight
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvCheckStatus
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3Callback
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2Callback
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT4Callback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBoardWakeuped
</UL>

<P><STRONG><a name="[7d6]"></a>GPIO_SetBitDir</STRONG> (ARM, 60 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d7]"></a>GPIO_BitIsUsed</STRONG> (ARM, 64 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>GPIO_EnableInt</STRONG> (ARM, 88 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[23f]"></a>GPIO_DisableInt</STRONG> (ARM, 104 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[240]"></a>GPIO_EnableEINT</STRONG> (ARM, 360 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_EnableEINT &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[424]"></a>GPIO_EnableTriggerType</STRONG> (ARM, 524 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EnableTriggerType
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[7d8]"></a>GPIO_DisableTriggerType</STRONG> (ARM, 108 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>GPIO_DisableEINT</STRONG> (ARM, 44 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[7d9]"></a>GPIO_EnableDebounce</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7da]"></a>GPIO_DisableDebounce</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>RTC_Check</STRONG> (ARM, 112 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DoFrequencyCompensation
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteEnable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[24a]"></a>RTC_WriteEnable</STRONG> (ARM, 184 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DoFrequencyCompensation
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR
</UL>

<P><STRONG><a name="[24c]"></a>RTC_DoFrequencyCompensation</STRONG> (ARM, 132 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_DoFrequencyCompensation &rArr; RTC_WriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteEnable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
</UL>

<P><STRONG><a name="[24e]"></a>RTC_Ioctl</STRONG> (ARM, 1732 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = RTC_Ioctl &rArr;  RTC_Ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DoFrequencyCompensation
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteEnable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Close
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvInit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerClearISR
</UL>

<P><STRONG><a name="[1e3]"></a>RTC_Init</STRONG> (ARM, 240 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_Init &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceHwInit
</UL>

<P><STRONG><a name="[24f]"></a>RTC_Open</STRONG> (ARM, 1172 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RTC_Open &rArr; RTC_WriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteEnable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOSTime
</UL>

<P><STRONG><a name="[29c]"></a>RTC_Read</STRONG> (ARM, 860 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRTC
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTest
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAddTimeEx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterGetCurrentDCFFileName
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurrentTariffData
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTariffFile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOSTime
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetNextWakeupTime
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentLogFileName
</UL>

<P><STRONG><a name="[250]"></a>RTC_Write</STRONG> (ARM, 1760 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteEnable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[251]"></a>RTC_Close</STRONG> (ARM, 52 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_Close &rArr; RTC_Ioctl &rArr;  RTC_Ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOSTime
</UL>

<P><STRONG><a name="[1e2]"></a>RTC_EnableClock</STRONG> (ARM, 56 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceHwInit
</UL>

<P><STRONG><a name="[253]"></a>spiInit</STRONG> (ARM, 116 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spiInit &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[254]"></a>spiIoctl</STRONG> (ARM, 1092 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = spiIoctl &rArr; spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ActiveCS
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0Write
</UL>

<P><STRONG><a name="[40c]"></a>spiOpen</STRONG> (ARM, 160 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[40e]"></a>spiGetBusyStatus</STRONG> (ARM, 52 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0Write
</UL>

<P><STRONG><a name="[40f]"></a>spiRead</STRONG> (ARM, 32 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0Read
</UL>

<P><STRONG><a name="[40d]"></a>spiWrite</STRONG> (ARM, 32 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0Write
</UL>

<P><STRONG><a name="[257]"></a>i2cEnterCriticalSection</STRONG> (ARM, 100 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = i2cEnterCriticalSection &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1enableCriticalSectionFunc
</UL>

<P><STRONG><a name="[258]"></a>i2cExitCriticalSection</STRONG> (ARM, 100 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = i2cExitCriticalSection &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1enableCriticalSectionFunc
</UL>

<P><STRONG><a name="[25a]"></a>i2cOpen</STRONG> (ARM, 184 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = i2cOpen &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cReset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[25d]"></a>i2cClose</STRONG> (ARM, 104 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[25f]"></a>i2cRead</STRONG> (ARM, 548 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2cRead &rArr; _i2cCalcAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cCalcAddr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1Read
</UL>

<P><STRONG><a name="[261]"></a>i2cWrite</STRONG> (ARM, 416 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2cWrite &rArr; _i2cCalcAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cCalcAddr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1Write
</UL>

<P><STRONG><a name="[262]"></a>i2cIoctl</STRONG> (ARM, 196 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2cIoctl &rArr; _i2cSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cSetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1Ioctl
</UL>

<P><STRONG><a name="[7db]"></a>i2cExit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>i2cInit</STRONG> (ARM, 108 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2cInit &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[26d]"></a>SD_CheckRB</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
</UL>

<P><STRONG><a name="[268]"></a>SD_SDCommand</STRONG> (ARM, 100 bytes, Stack size 8 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_SDCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[269]"></a>SD_SDCmdAndRsp</STRONG> (ARM, 340 bytes, Stack size 12 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[265]"></a>SD_Swap32</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp2
</UL>

<P><STRONG><a name="[264]"></a>SD_SDCmdAndRsp2</STRONG> (ARM, 216 bytes, Stack size 44 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SD_SDCmdAndRsp2
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[26b]"></a>SD_SDCmdAndRspDataIn</STRONG> (ARM, 188 bytes, Stack size 8 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchToHighSpeed
</UL>

<P><STRONG><a name="[266]"></a>SD_Set_clock</STRONG> (ARM, 336 bytes, Stack size 24 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[7dc]"></a>SD_CardSelect</STRONG> (ARM, 68 bytes, Stack size 0 bytes, sdh.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>SD_Init</STRONG> (ARM, 1032 bytes, Stack size 40 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SD_Init &rArr; SD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[26a]"></a>SD_SwitchToHighSpeed</STRONG> (ARM, 540 bytes, Stack size 20 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_SwitchToHighSpeed &rArr; SD_SDCmdAndRspDataIn
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
</UL>

<P><STRONG><a name="[26c]"></a>SD_SelectCardType</STRONG> (ARM, 836 bytes, Stack size 16 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SD_SelectCardType &rArr; SD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchToHighSpeed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRspDataIn
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[26e]"></a>SD_Get_SD_info</STRONG> (ARM, 492 bytes, Stack size 48 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SD_Get_SD_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRspDataIn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[271]"></a>SD_CardDetection</STRONG> (ARM, 416 bytes, Stack size 0 bytes, sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[435]"></a>SD_SetReferenceClock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[26f]"></a>SD_Open</STRONG> (ARM, 440 bytes, Stack size 8 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_Open &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[270]"></a>SD_Probe</STRONG> (ARM, 324 bytes, Stack size 8 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SD_Probe &rArr; SD_Init &rArr; SD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardDetection
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[272]"></a>SD_Read</STRONG> (ARM, 820 bytes, Stack size 48 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = SD_Read &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckRB
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDDrvRead
</UL>

<P><STRONG><a name="[273]"></a>SD_Write</STRONG> (ARM, 740 bytes, Stack size 48 bytes, sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckRB
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDDrvWrite
</UL>

<P><STRONG><a name="[127]"></a>adcISR</STRONG> (ARM, 1268 bytes, Stack size 56 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adcISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text)
</UL>
<P><STRONG><a name="[1f7]"></a>adcOpen</STRONG> (ARM, 256 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adcOpen &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[275]"></a>adcClose</STRONG> (ARM, 68 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[7dd]"></a>adcReadXY</STRONG> (ARM, 380 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[7de]"></a>adcReadZ</STRONG> (ARM, 380 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>adcIoctl</STRONG> (ARM, 1656 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adcIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureBattery
</UL>

<P><STRONG><a name="[417]"></a>adcChangeChannel</STRONG> (ARM, 64 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureBattery
</UL>

<P><STRONG><a name="[277]"></a>ETIMER_Open</STRONG> (ARM, 292 bytes, Stack size 32 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ETIMER_Open &rArr; ETIMER_GetModuleClock &rArr; sysGetClock &rArr; sysGetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetModuleClock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCapture
</UL>

<P><STRONG><a name="[442]"></a>ETIMER_Close</STRONG> (ARM, 120 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
</UL>

<P><STRONG><a name="[278]"></a>ETIMER_Delay</STRONG> (ARM, 636 bytes, Stack size 64 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetModuleClock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[43c]"></a>ETIMER_EnableCapture</STRONG> (ARM, 168 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCapture
</UL>

<P><STRONG><a name="[440]"></a>ETIMER_DisableCapture</STRONG> (ARM, 120 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
</UL>

<P><STRONG><a name="[70e]"></a>SC_IsCardInserted</STRONG> (ARM, 168 bytes, Stack size 0 bytes, sc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_GetCardInfo
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_StartTransmission
</UL>

<P><STRONG><a name="[712]"></a>SC_ClearFIFO</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ExchangePPS
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckCDEvent
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Deactivate
</UL>

<P><STRONG><a name="[7df]"></a>SC_Close</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sc.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>SC_Open</STRONG> (ARM, 244 bytes, Stack size 8 bytes, sc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
</UL>

<P><STRONG><a name="[70f]"></a>SC_ResetReader</STRONG> (ARM, 292 bytes, Stack size 0 bytes, sc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
</UL>

<P><STRONG><a name="[726]"></a>SC_SetBlockGuardTime</STRONG> (ARM, 72 bytes, Stack size 0 bytes, sc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetReaderParameter
</UL>

<P><STRONG><a name="[7e0]"></a>SC_SetCharGuardTime</STRONG> (ARM, 96 bytes, Stack size 0 bytes, sc.o(.text), UNUSED)

<P><STRONG><a name="[713]"></a>SC_StopAllTimer</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ExchangePPS
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckCDEvent
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_StartTransmission
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Deactivate
</UL>

<P><STRONG><a name="[71e]"></a>SC_StartTimer</STRONG> (ARM, 240 bytes, Stack size 12 bytes, sc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SC_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckTxRxEvent
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartColdReset
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartWarmReset
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ExchangePPS
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
</UL>

<P><STRONG><a name="[71d]"></a>SC_StopTimer</STRONG> (ARM, 184 bytes, Stack size 0 bytes, sc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckTxRxEvent
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckTimeOutEvent
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_PrecessT1Response
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ExchangePPS
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
</UL>

<P><STRONG><a name="[15]"></a>UserInit</STRONG> (ARM, 24 bytes, Stack size 8 bytes, user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UserInit &rArr; userInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>GuiStandbyOnDraw</STRONG> (ARM, 488 bytes, Stack size 24 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GuiStandbyOnDraw &rArr; EPDReSetBacklightTimeout &rArr; EPDSetBacklight &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvSetEnable
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetSleepFunction
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReSetBacklightTimeout
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>GuiStandbyUpdateData</STRONG> (ARM, 40 bytes, Stack size 8 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GuiStandbyUpdateData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>GuiStandbyKeyCallback</STRONG> (ARM, 676 bytes, Stack size 24 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GuiStandbyKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetCurrentTariffType
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvSetEnable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterDepositTime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetSleepFunction
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReSetBacklightTimeout
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>GuiStandbyTimerCallback</STRONG> (ARM, 144 bytes, Stack size 8 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = GuiStandbyTimerCallback &rArr; updateData &rArr; UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSpaceDrv
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>GuiStandbyPowerCallbackFunc</STRONG> (ARM, 184 bytes, Stack size 16 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GuiStandbyPowerCallbackFunc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[292]"></a>GuiManagerRefreshScreen</STRONG> (ARM, 88 bytes, Stack size 8 bytes, guimanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GuiManagerRefreshScreen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redrawscreen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraReloadCallback
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[290]"></a>GuiManagerShowScreen</STRONG> (ARM, 268 bytes, Stack size 40 bytes, guimanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadKeyCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeyCallback
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeTimerCallback
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceTimerCallback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceKeyCallback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPKeyCallback
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitTimerCallback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitKeyCallback
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffKeyCallback
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeKeyCallback
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositTimerCallback
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKTimerCallback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKKeyCallback
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositKeyCallback
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailTimerCallback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailKeyCallback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerInit
</UL>

<P><STRONG><a name="[19]"></a>GuiManagerInit</STRONG> (ARM, 436 bytes, Stack size 8 bytes, guimanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GuiManagerInit &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetReinitCallbackFunc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user.o(.data)
</UL>
<P><STRONG><a name="[295]"></a>GuiManagerUpdateScreen</STRONG> (ARM, 88 bytes, Stack size 8 bytes, guimanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GuiManagerUpdateScreen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
</UL>

<P><STRONG><a name="[299]"></a>GuiManagerCompareCurrentScreenId</STRONG> (ARM, 40 bytes, Stack size 0 bytes, guimanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTariffDataRoutineCondition
</UL>

<P><STRONG><a name="[1e7]"></a>GetMeterData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, meterdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSetBuildVer
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataReloadParaFile
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerProcess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterGetCurrentDCFFileName
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceKeyCallback
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterDepositTime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraExecuteFunc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffExecuteFunc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logExecuteFunc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;photoExecuteFunc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfExecuteFunc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsfExecuteFunc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentLogFileName
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[29b]"></a>MeterGetCurrentDCFFileName</STRONG> (ARM, 176 bytes, Stack size 40 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MeterGetCurrentDCFFileName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfExecuteFunc
</UL>

<P><STRONG><a name="[2a5]"></a>AutoUpdateMeterData</STRONG> (ARM, 572 bytes, Stack size 344 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7840 + Unknown Stack Size
<LI>Call Chain = AutoUpdateMeterData &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentStartTakePhoto
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDepositTimeBmpIdInfo
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterStorageData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpaceStatus
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerUpdateScreen
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
</UL>

<P><STRONG><a name="[18]"></a>MeterDataInit</STRONG> (ARM, 344 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7872 + Unknown Stack Size
<LI>Call Chain = MeterDataInit &rArr; swInit &rArr; AutoUpdateMeterData &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyData
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user.o(.data)
</UL>
<P><STRONG><a name="[28f]"></a>UpdateMeterDepositTime</STRONG> (ARM, 152 bytes, Stack size 32 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UpdateMeterDepositTime &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetCurrentTariffType
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
</UL>

<P><STRONG><a name="[28e]"></a>UpdateMeterCurrentSelSpace</STRONG> (ARM, 148 bytes, Stack size 24 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpdateMeterCurrentSelSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceKeyCallback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitKeyCallback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKKeyCallback
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositKeyCallback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailKeyCallback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
</UL>

<P><STRONG><a name="[1e5]"></a>MeterSetErrorCode</STRONG> (ARM, 44 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverInit
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurrentTariffData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpaceDrvTask
</UL>

<P><STRONG><a name="[2b1]"></a>MeterUpdateExpiredTitle</STRONG> (ARM, 800 bytes, Stack size 32 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MeterUpdateExpiredTitle &rArr; ShowExpired &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowExpired
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
</UL>

<P><STRONG><a name="[1e6]"></a>MeterSetBuildVer</STRONG> (ARM, 20 bytes, Stack size 4 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MeterSetBuildVer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
</UL>

<P><STRONG><a name="[1d8]"></a>MeterUpdateLedHeartbeat</STRONG> (ARM, 16 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MeterUpdateLedHeartbeat &rArr; sendLedHeartbeatRoutine &rArr; LedSendHeartbeat &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedHeartbeatRoutine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[2b3]"></a>MeterUpdateModemAgentLastTime</STRONG> (ARM, 120 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MeterUpdateModemAgentLastTime &rArr; GetCurrentUTCTime &rArr; RTC2Time &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[1f]"></a>GuiSelSpaceOnDraw</STRONG> (ARM, 232 bytes, Stack size 24 bytes, guiselspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GuiSelSpaceOnDraw &rArr; TariffUpdateCurrentTariffData &rArr; updateCurrentTariffData &rArr; MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>GuiSelSpaceKeyCallback</STRONG> (ARM, 516 bytes, Stack size 16 bytes, guiselspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiSelSpaceKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>GuiSelSpaceTimerCallback</STRONG> (ARM, 124 bytes, Stack size 8 bytes, guiselspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = GuiSelSpaceTimerCallback &rArr; updateData &rArr; UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>GuiSelSpacePowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guiselspace.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>GuiSelTimeOnDraw</STRONG> (ARM, 188 bytes, Stack size 24 bytes, guiseltime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GuiSelTimeOnDraw &rArr; CardReaderSetPower &rArr; CardReaderStopInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>GuiSelTimeKeyCallback</STRONG> (ARM, 732 bytes, Stack size 24 bytes, guiseltime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GuiSelTimeKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetCurrentTariffType
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderGetBootedStatus
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterDepositTime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>GuiSelTimeTimerCallback</STRONG> (ARM, 124 bytes, Stack size 8 bytes, guiseltime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = GuiSelTimeTimerCallback &rArr; updateData &rArr; EPDDrawCost &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>GuiSelTimePowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guiseltime.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>GuiReaderInitOnDraw</STRONG> (ARM, 188 bytes, Stack size 24 bytes, guireaderinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GuiReaderInitOnDraw &rArr; CardReaderSetPower &rArr; CardReaderStopInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>GuiReaderInitKeyCallback</STRONG> (ARM, 344 bytes, Stack size 16 bytes, guireaderinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiReaderInitKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>GuiReaderInitTimerCallback</STRONG> (ARM, 152 bytes, Stack size 8 bytes, guireaderinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GuiReaderInitTimerCallback &rArr; updateBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReader
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>GuiReaderInitPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guireaderinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>GuiDepositOnDraw</STRONG> (ARM, 212 bytes, Stack size 24 bytes, guideposit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GuiDepositOnDraw &rArr; CardReaderSetPower &rArr; CardReaderStopInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderStopInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>GuiDepositKeyCallback</STRONG> (ARM, 276 bytes, Stack size 16 bytes, guideposit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiDepositKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>GuiDepositTimerCallback</STRONG> (ARM, 144 bytes, Stack size 8 bytes, guideposit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GuiDepositTimerCallback &rArr; updateBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerProcess
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>GuiDepositPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guideposit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>GuiDepositFailOnDraw</STRONG> (ARM, 156 bytes, Stack size 24 bytes, guidepositfail.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiDepositFailOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>GuiDepositFailKeyCallback</STRONG> (ARM, 236 bytes, Stack size 16 bytes, guidepositfail.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiDepositFailKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>GuiDepositFailTimerCallback</STRONG> (ARM, 232 bytes, Stack size 8 bytes, guidepositfail.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GuiDepositFailTimerCallback &rArr; updateBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>GuiDepositFailPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guidepositfail.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>GuiDepositOKOnDraw</STRONG> (ARM, 164 bytes, Stack size 24 bytes, guidepositok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiDepositOKOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>GuiDepositOKKeyCallback</STRONG> (ARM, 212 bytes, Stack size 16 bytes, guidepositok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiDepositOKKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>GuiDepositOKTimerCallback</STRONG> (ARM, 232 bytes, Stack size 8 bytes, guidepositok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = GuiDepositOKTimerCallback &rArr; updateBG &rArr; EPDDrawCost &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>GuiDepositOKPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guidepositok.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>GuiReplaceBPOnDraw</STRONG> (ARM, 180 bytes, Stack size 24 bytes, guireplacebp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiReplaceBPOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>GuiReplaceBPKeyCallback</STRONG> (ARM, 428 bytes, Stack size 16 bytes, guireplacebp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiReplaceBPKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>GuiReplaceBPTimerCallback</STRONG> (ARM, 104 bytes, Stack size 8 bytes, guireplacebp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = GuiReplaceBPTimerCallback &rArr; updateData &rArr; updateContain &rArr; ShowVoltage &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>GuiReplaceBPPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guireplacebp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>GuiTesterOnDraw</STRONG> (ARM, 180 bytes, Stack size 24 bytes, guitester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiTesterOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>GuiTesterKeyCallback</STRONG> (ARM, 444 bytes, Stack size 16 bytes, guitester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiTesterKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>GuiTesterTimerCallback</STRONG> (ARM, 104 bytes, Stack size 8 bytes, guitester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GuiTesterTimerCallback &rArr; updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>GuiTesterPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guitester.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>GuiTesterKeypadOnDraw</STRONG> (ARM, 188 bytes, Stack size 24 bytes, guitesterkeypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiTesterKeypadOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvSetMode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>GuiTesterKeypadKeyCallback</STRONG> (ARM, 472 bytes, Stack size 16 bytes, guitesterkeypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiTesterKeypadKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvSetMode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>GuiTesterKeypadTimerCallback</STRONG> (ARM, 104 bytes, Stack size 8 bytes, guitesterkeypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GuiTesterKeypadTimerCallback &rArr; updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>GuiTesterKeypadPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guitesterkeypad.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>printParaValue</STRONG> (ARM, 196 bytes, Stack size 24 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = printParaValue &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStorageValue
</UL>

<P><STRONG><a name="[2e4]"></a>MeterDataReloadParaFile</STRONG> (ARM, 72 bytes, Stack size 8 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = MeterDataReloadParaFile &rArr; loadParaFileName &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyPara
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParaFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraReloadCallback
</UL>

<P><STRONG><a name="[17]"></a>ParaLibInit</STRONG> (ARM, 56 bytes, Stack size 8 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7216 + Unknown Stack Size
<LI>Call Chain = ParaLibInit &rArr; swInit &rArr; saveStorageValue &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>GetMeterPara</STRONG> (ARM, 8 bytes, Stack size 0 bytes, paralib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpaceStatus
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
</UL>

<P><STRONG><a name="[2a7]"></a>GetMeterStorageData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, paralib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
</UL>

<P><STRONG><a name="[2c1]"></a>MeterStorageFlush</STRONG> (ARM, 60 bytes, Stack size 8 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7184 + Unknown Stack Size
<LI>Call Chain = MeterStorageFlush &rArr; saveStorageValue &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStorageChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
</UL>

<P><STRONG><a name="[2e6]"></a>ParaLibResetDepositEndTime</STRONG> (ARM, 68 bytes, Stack size 8 bytes, paralib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>

<P><STRONG><a name="[43]"></a>GuiFileDownloadOnDraw</STRONG> (ARM, 156 bytes, Stack size 24 bytes, guifiledownload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiFileDownloadOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>GuiFileDownloadKeyCallback</STRONG> (ARM, 140 bytes, Stack size 16 bytes, guifiledownload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GuiFileDownloadKeyCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>GuiFileDownloadTimerCallback</STRONG> (ARM, 232 bytes, Stack size 8 bytes, guifiledownload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GuiFileDownloadTimerCallback &rArr; updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>GuiFileDownloadPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guifiledownload.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>GuiFreeOnDraw</STRONG> (ARM, 156 bytes, Stack size 24 bytes, guifree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiFreeOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>GuiFreeKeyCallback</STRONG> (ARM, 416 bytes, Stack size 16 bytes, guifree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiFreeKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReSetBacklightTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>GuiFreeTimerCallback</STRONG> (ARM, 104 bytes, Stack size 8 bytes, guifree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GuiFreeTimerCallback &rArr; updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>GuiFreePowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guifree.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>GuiOffOnDraw</STRONG> (ARM, 156 bytes, Stack size 24 bytes, guioff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiOffOnDraw &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>GuiOffKeyCallback</STRONG> (ARM, 416 bytes, Stack size 16 bytes, guioff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GuiOffKeyCallback &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReSetBacklightTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>GuiOffTimerCallback</STRONG> (ARM, 104 bytes, Stack size 8 bytes, guioff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GuiOffTimerCallback &rArr; updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>GuiOffPowerCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, guioff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.data)
</UL>
<P><STRONG><a name="[2fe]"></a>CallBackReturnValue</STRONG> (ARM, 44 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CallBackReturnValue &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.text)
</UL>
<P><STRONG><a name="[1f1]"></a>HWTesterInit</STRONG> (ARM, 120 bytes, Stack size 0 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = HWTesterInit &rArr; LedDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetStatus
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerDrvInit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendHeartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHWTestTask
</UL>

<P><STRONG><a name="[30d]"></a>KeyGetInterface</STRONG> (ARM, 8 bytes, Stack size 0 bytes, halinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrvInit
</UL>

<P><STRONG><a name="[30e]"></a>TimerGetInterface</STRONG> (ARM, 8 bytes, Stack size 0 bytes, halinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrvInit
</UL>

<P><STRONG><a name="[289]"></a>GuiGetInterface</STRONG> (ARM, 8 bytes, Stack size 0 bytes, halinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterOnDraw
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadOnDraw
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeOnDraw
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceOnDraw
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPOnDraw
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitOnDraw
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffOnDraw
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeOnDraw
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFileDownloadOnDraw
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOnDraw
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKOnDraw
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailOnDraw
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
</UL>

<P><STRONG><a name="[323]"></a>TSReaderGetInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, halinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderInit
</UL>

<P><STRONG><a name="[e]"></a>GUIDrvInit</STRONG> (ARM, 536 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GUIDrvInit &rArr; PowerRegCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetInterface
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyGetInterface
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.data)
<LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>GuiSetKeyCallbackFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, guidrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>GuiSetTimerCallbackFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, guidrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>GuiSetTimeout</STRONG> (ARM, 40 bytes, Stack size 16 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GuiSetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>GuiRunTimeoutFunc</STRONG> (ARM, 32 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GuiRunTimeoutFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[293]"></a>GuiSetInstance</STRONG> (ARM, 148 bytes, Stack size 24 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAllStop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetTimerCallbackFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetKeyCallbackFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>

<P><STRONG><a name="[75]"></a>KeyDrvInit</STRONG> (ARM, 148 bytes, Stack size 8 bytes, keydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = KeyDrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHardwareGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>KeyDrvSetCallbackFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, keydrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>KeyDrvSetPowerFunc</STRONG> (ARM, 72 bytes, Stack size 16 bytes, keydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyDrvSetPowerFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[2d4]"></a>KeyDrvSetMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, keydrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadOnDraw
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadKeyCallback
</UL>

<P><STRONG><a name="[318]"></a>RTC_Releative_AlarmISR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> powerdrv.o(.text)
</UL>
<P><STRONG><a name="[2fd]"></a>PowerClearISR</STRONG> (ARM, 768 bytes, Stack size 8 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PowerClearISR &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspendSystem
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[2fc]"></a>PowerSuspend</STRONG> (ARM, 452 bytes, Stack size 80 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PowerSuspend &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wfi
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetNextWakeupTime
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreReg
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspendSystem
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[31c]"></a>PowerDrvResetSystem</STRONG> (ARM, 436 bytes, Stack size 8 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PowerDrvResetSystem &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[2ac]"></a>PowerRegCallback</STRONG> (ARM, 116 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PowerRegCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrvInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[11]"></a>PowerDrvInit</STRONG> (ARM, 416 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = PowerDrvInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[320]"></a>PowerSetWakeupTime</STRONG> (ARM, 40 bytes, Stack size 8 bytes, powerdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[379]"></a>PowerGetTotalWakeupTick</STRONG> (ARM, 12 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[1e0]"></a>PowerDrvSetEnable</STRONG> (ARM, 96 bytes, Stack size 8 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PowerDrvSetEnable &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
</UL>

<P><STRONG><a name="[78]"></a>TimerDrvInit</STRONG> (ARM, 184 bytes, Stack size 16 bytes, timerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = TimerDrvInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>TimerSetTimeout</STRONG> (ARM, 60 bytes, Stack size 16 bytes, timerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TimerSetTimeout &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAllStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[30f]"></a>TimerAllStop</STRONG> (ARM, 44 bytes, Stack size 8 bytes, timerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TimerAllStop &rArr; TimerSetTimeout &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetInstance
</UL>

<P><STRONG><a name="[7a]"></a>TimerRun</STRONG> (ARM, 52 bytes, Stack size 8 bytes, timerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TimerRun &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>TimerSetCallback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, timerdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>CardReaderInit</STRONG> (ARM, 472 bytes, Stack size 8 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CardReaderInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSReaderGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[324]"></a>CardReaderStartInit</STRONG> (ARM, 76 bytes, Stack size 8 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CardReaderStartInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>

<P><STRONG><a name="[2c4]"></a>CardReaderStopInit</STRONG> (ARM, 56 bytes, Stack size 8 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CardReaderStopInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOnDraw
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>

<P><STRONG><a name="[2bb]"></a>CardReaderGetBootedStatus</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cardreader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerTest
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReader
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
</UL>

<P><STRONG><a name="[28b]"></a>CardReaderSetPower</STRONG> (ARM, 100 bytes, Stack size 8 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CardReaderSetPower &rArr; CardReaderStopInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderStopInit
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderStartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerTest
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeOnDraw
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceOnDraw
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitOnDraw
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOnDraw
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
</UL>

<P><STRONG><a name="[2c3]"></a>CardReaderProcess</STRONG> (ARM, 64 bytes, Stack size 16 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CardReaderProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerProcess
</UL>

<P><STRONG><a name="[2fb]"></a>setTotalPower</STRONG> (ARM, 296 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CloseBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReset
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdTest
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinitEpd
</UL>

<P><STRONG><a name="[32d]"></a>EPDGetBacklight</STRONG> (ARM, 40 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EPDGetBacklight &rArr; GPIO_ReadBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdDrvCheckStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdDrvPreOffCallback
</UL>

<P><STRONG><a name="[2f7]"></a>EPDSetBacklight</STRONG> (ARM, 60 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPDSetBacklight &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdTest
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTest
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReSetBacklightTimeout
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedBackLightTask
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdDrvOffCallback
</UL>

<P><STRONG><a name="[337]"></a>EPDDrawUpperLine</STRONG> (ARM, 156 bytes, Stack size 32 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[33c]"></a>EPDDrawDeviceId</STRONG> (ARM, 124 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
</UL>

<P><STRONG><a name="[1ed]"></a>EPDShowBGScreen</STRONG> (ARM, 160 bytes, Stack size 32 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDeviceId
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[c]"></a>EpdDrvInit</STRONG> (ARM, 264 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = EpdDrvInit &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGetInterface
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIT8951SystemInfo
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[28c]"></a>EPDReSetBacklightTimeout</STRONG> (ARM, 52 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EPDReSetBacklightTimeout &rArr; EPDSetBacklight &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffKeyCallback
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeKeyCallback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
</UL>

<P><STRONG><a name="[294]"></a>EPDSetReinitCallbackFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, epddrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerInit
</UL>

<P><STRONG><a name="[2af]"></a>calculateDeviceIDPositionInfo</STRONG> (ARM, 532 bytes, Stack size 32 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = calculateDeviceIDPositionInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10Ex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[1ee]"></a>EPDShowErrorID</STRONG> (ARM, 328 bytes, Stack size 80 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = EPDShowErrorID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
</UL>

<P><STRONG><a name="[2b2]"></a>ShowExpired</STRONG> (ARM, 520 bytes, Stack size 56 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ShowExpired &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
</UL>

<P><STRONG><a name="[287]"></a>UpdateClock</STRONG> (ARM, 328 bytes, Stack size 88 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[2e3]"></a>calculatePreparePositionInfo</STRONG> (ARM, 468 bytes, Stack size 32 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = calculatePreparePositionInfo &rArr; calculateDepositTimePositionInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDepositTimePositionInfo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainNumberPositionInfo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainPositionInfo
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateBannerLinePositionInfo
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyPara
</UL>

<P><STRONG><a name="[33f]"></a>EPDDrawBanner</STRONG> (ARM, 260 bytes, Stack size 24 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[284]"></a>EPDDrawBannerLine</STRONG> (ARM, 124 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = EPDDrawBannerLine &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[340]"></a>getIDFromTime</STRONG> (ARM, 196 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = getIDFromTime &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDepositTimeBmpIdInfo
</UL>

<P><STRONG><a name="[2a8]"></a>SetDepositTimeBmpIdInfo</STRONG> (ARM, 136 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = SetDepositTimeBmpIdInfo &rArr; getIDFromTime &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromTime
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
</UL>

<P><STRONG><a name="[2bd]"></a>EPDDrawContainByID</STRONG> (ARM, 152 bytes, Stack size 40 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitTimerCallback
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainBG
</UL>

<P><STRONG><a name="[285]"></a>EPDDrawContainBG</STRONG> (ARM, 160 bytes, Stack size 16 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = EPDDrawContainBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[342]"></a>EPDDrawCar</STRONG> (ARM, 224 bytes, Stack size 48 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCarPositionInfoIndex
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[282]"></a>EPDDrawItem</STRONG> (ARM, 1420 bytes, Stack size 112 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = EPDDrawItem &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCarPositionInfoIndex
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[283]"></a>EPDDrawDepositTime</STRONG> (ARM, 352 bytes, Stack size 136 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = EPDDrawDepositTime &rArr; MeterUpdateExpiredTitle &rArr; ShowExpired &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[286]"></a>EPDDrawAllDepositTime</STRONG> (ARM, 132 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = EPDDrawAllDepositTime &rArr; MeterUpdateExpiredTitle &rArr; ShowExpired &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[343]"></a>EPDDrawAllScreen</STRONG> (ARM, 144 bytes, Stack size 16 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[344]"></a>EPDDrawPleaseWait</STRONG> (ARM, 176 bytes, Stack size 40 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>

<P><STRONG><a name="[2b7]"></a>EPDDrawContainSelTime</STRONG> (ARM, 152 bytes, Stack size 32 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = EPDDrawContainSelTime &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[345]"></a>EPDDrawContainClear</STRONG> (ARM, 188 bytes, Stack size 32 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>

<P><STRONG><a name="[2b8]"></a>EPDDrawTime</STRONG> (ARM, 380 bytes, Stack size 272 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = EPDDrawTime &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromTime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[346]"></a>getIDFromCost</STRONG> (ARM, 204 bytes, Stack size 32 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = getIDFromCost
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10Ex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
</UL>

<P><STRONG><a name="[2b9]"></a>EPDDrawCost</STRONG> (ARM, 448 bytes, Stack size 280 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = EPDDrawCost &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromCost
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[2cb]"></a>ShowVoltage</STRONG> (ARM, 1000 bytes, Stack size 216 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ShowVoltage &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
</UL>

<P><STRONG><a name="[2ca]"></a>ShowBatteryStatus</STRONG> (ARM, 488 bytes, Stack size 64 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ShowBatteryStatus &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
</UL>

<P><STRONG><a name="[347]"></a>EPDEnterCriticalSection</STRONG> (ARM, 32 bytes, Stack size 8 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[348]"></a>EPDExitCriticalSection</STRONG> (ARM, 32 bytes, Stack size 8 bytes, epddrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[28a]"></a>EPDSetSleepFunction</STRONG> (ARM, 96 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = EPDSetSleepFunction &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
</UL>

<P><STRONG><a name="[10]"></a>SpaceDrvInit</STRONG> (ARM, 148 bytes, Stack size 8 bytes, spacedrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SpaceDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistGetInterface
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[297]"></a>GetSpaceStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, spacedrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpaceStatus
</UL>

<P><STRONG><a name="[3c1]"></a>GetSpaceDist</STRONG> (ARM, 16 bytes, Stack size 0 bytes, spacedrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
</UL>

<P><STRONG><a name="[34b]"></a>SetSpaceStatus</STRONG> (ARM, 356 bytes, Stack size 16 bytes, spacedrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[291]"></a>StartSpaceDrv</STRONG> (ARM, 52 bytes, Stack size 8 bytes, spacedrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = StartSpaceDrv &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyTimerCallback
</UL>

<P><STRONG><a name="[34c]"></a>fepgmtime</STRONG> (ARM, 560 bytes, Stack size 32 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = fepgmtime &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2RTC
</UL>

<P><STRONG><a name="[2a6]"></a>RTC2Time</STRONG> (ARM, 112 bytes, Stack size 16 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC2Time &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAddTimeEx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAddTime
</UL>

<P><STRONG><a name="[29e]"></a>Time2RTC</STRONG> (ARM, 160 bytes, Stack size 16 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Time2RTC &rArr; fepgmtime &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fepgmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTCTimeToString
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAddTime
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[34e]"></a>RTCAddTime</STRONG> (ARM, 48 bytes, Stack size 16 bytes, timelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2RTC
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time
</UL>

<P><STRONG><a name="[2c0]"></a>RTCAddTimeEx</STRONG> (ARM, 68 bytes, Stack size 64 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTCAddTimeEx &rArr; RTC2Time &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
</UL>

<P><STRONG><a name="[34f]"></a>SetOSTime</STRONG> (ARM, 204 bytes, Stack size 160 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SetOSTime &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Close
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[2a4]"></a>GetCurrentUTCTime</STRONG> (ARM, 52 bytes, Stack size 56 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetCurrentUTCTime &rArr; RTC2Time &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTest
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateModemAgentLastTime
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routineCounterTimer
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[350]"></a>UTCTimeToString</STRONG> (ARM, 80 bytes, Stack size 72 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = UTCTimeToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2RTC
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
</UL>

<P><STRONG><a name="[1d6]"></a>PrintRTC</STRONG> (ARM, 96 bytes, Stack size 80 bytes, timelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PrintRTC &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[80]"></a>TS2000DrvInit</STRONG> (ARM, 120 bytes, Stack size 8 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TS2000DrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>TS2000SetPower</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TS2000SetPower &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>TS2000CheckReader</STRONG> (ARM, 624 bytes, Stack size 16 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = TS2000CheckReader &rArr; Read_IVN &rArr; uart_r &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>TS2000BreakCheckReader</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ts2000drv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>TS2000Process</STRONG> (ARM, 528 bytes, Stack size 24 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TS2000Process &rArr; iPass_Execute &rArr; parserMessage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CN
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>TS2000GetBootedStatus</STRONG> (ARM, 12 bytes, Stack size 8 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TS2000GetBootedStatus &rArr; Read_IVN &rArr; uart_r &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> halinterface.o(.data)
</UL>
<P><STRONG><a name="[362]"></a>PCT08TakePhoto</STRONG> (ARM, 1004 bytes, Stack size 48 bytes, pct08cmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7184 + Unknown Stack Size
<LI>Call Chain = PCT08TakePhoto &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08SetPower
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
</UL>

<P><STRONG><a name="[305]"></a>PCT08ReadVerInfo</STRONG> (ARM, 108 bytes, Stack size 32 bytes, pct08cmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = PCT08ReadVerInfo &rArr; pct08ActionCmd &rArr; PCT08FlushTxRx &rArr; flushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08SetPower
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraTest
</UL>

<P><STRONG><a name="[363]"></a>PCT08SetPower</STRONG> (ARM, 52 bytes, Stack size 8 bytes, pct08drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCT08SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08DrvInit
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08ReadVerInfo
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto
</UL>

<P><STRONG><a name="[13]"></a>PCT08DrvInit</STRONG> (ARM, 132 bytes, Stack size 8 bytes, pct08drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PCT08DrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08SetPower
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cameraTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[35e]"></a>PCT08FlushTxRx</STRONG> (ARM, 12 bytes, Stack size 8 bytes, pct08drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PCT08FlushTxRx &rArr; flushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
</UL>

<P><STRONG><a name="[360]"></a>PCT08Read</STRONG> (ARM, 40 bytes, Stack size 16 bytes, pct08drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCT08Read
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
</UL>

<P><STRONG><a name="[35f]"></a>PCT08Write</STRONG> (ARM, 40 bytes, Stack size 16 bytes, pct08drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCT08Write
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
</UL>

<P><STRONG><a name="[367]"></a>FatFsFormat</STRONG> (ARM, 172 bytes, Stack size 16 bytes, fatfslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FatFsFormat &rArr; f_mkfs &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFs
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseage
</UL>

<P><STRONG><a name="[36a]"></a>FatfsGetDiskUseage</STRONG> (ARM, 500 bytes, Stack size 32 bytes, fatfslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FatfsGetDiskUseage &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatfsListFile
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
</UL>

<P><STRONG><a name="[d]"></a>FatfsInit</STRONG> (ARM, 792 bytes, Stack size 24 bytes, fatfslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = FatfsInit &rArr; FatfsGetDiskUseage &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsHardwareGetInterface
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseage
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[45f]"></a>FatfsGetCallback</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fatfslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[36f]"></a>FatfsGetDiskUseageEx</STRONG> (ARM, 76 bytes, Stack size 24 bytes, fatfslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[3e1]"></a>FatFsGetCounter</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fatfslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetList
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
</UL>

<P><STRONG><a name="[3df]"></a>FatFsGetExistFlag</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fatfslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetList
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
</UL>

<P><STRONG><a name="[3e0]"></a>FatFsGetRootStr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fatfslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetList
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
</UL>

<P><STRONG><a name="[14]"></a>PhotoAgentInit</STRONG> (ARM, 60 bytes, Stack size 8 bytes, photoagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = PhotoAgentInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1df]"></a>PhotoAgentStartTakePhoto</STRONG> (ARM, 80 bytes, Stack size 8 bytes, photoagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PhotoAgentStartTakePhoto &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takePhotoRoutine
</UL>

<P><STRONG><a name="[371]"></a>JsonCmdLibInit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, jsoncmdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[29f]"></a>JsonCmdCreateTransactionStatusData</STRONG> (ARM, 180 bytes, Stack size 40 bytes, jsoncmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = JsonCmdCreateTransactionStatusData &rArr; cJSON_AddItemToObject &rArr; cJSON_AddItemToObjectCS &rArr; cJSON_AddItemToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
</UL>

<P><STRONG><a name="[376]"></a>JsonCmdCreateExpiredStatusData</STRONG> (ARM, 60 bytes, Stack size 24 bytes, jsoncmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JsonCmdCreateExpiredStatusData &rArr; cJSON_AddItemToObject &rArr; cJSON_AddItemToObjectCS &rArr; cJSON_AddItemToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
</UL>

<P><STRONG><a name="[377]"></a>JsonCmdCreateStatusData</STRONG> (ARM, 1748 bytes, Stack size 312 bytes, jsoncmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetErrorTimes
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatFsAutoFormatCounter
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFalse
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseageEx
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTCTimeToString
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerGetTotalWakeupTick
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
</UL>

<P><STRONG><a name="[12]"></a>ModemAgentInit</STRONG> (ARM, 356 bytes, Stack size 8 bytes, modemagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ModemAgentInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1eb]"></a>ModemAgentStartSend</STRONG> (ARM, 104 bytes, Stack size 8 bytes, modemagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ModemAgentStartSend &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSetExecuteFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemAgentTransmitRoutine
</UL>

<P><STRONG><a name="[298]"></a>TariffUpdateCurrentTariffData</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TariffUpdateCurrentTariffData &rArr; updateCurrentTariffData &rArr; MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCurrentTariffData
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTariffFile
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTariffDataRoutine
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceOnDraw
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffReloadCallback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[395]"></a>TariffLoadTariffFile</STRONG> (ARM, 452 bytes, Stack size 8 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7232 + Unknown Stack Size
<LI>Call Chain = TariffLoadTariffFile &rArr; loadJsonTariff &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printJsonTariff
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTariffFileName
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortTariffFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffReloadCallback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[2ad]"></a>TariffLibInit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7248 + Unknown Stack Size
<LI>Call Chain = TariffLibInit &rArr; swInit &rArr; TariffLoadTariffFile &rArr; loadJsonTariff &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyData
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[1d1]"></a>TariffGetCurrentTariffType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tarifflib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterDepositTime
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
</UL>

<P><STRONG><a name="[1d2]"></a>TariffGetFileName</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tarifflib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
</UL>

<P><STRONG><a name="[317]"></a>TariffGetNextWakeupTime</STRONG> (ARM, 60 bytes, Stack size 16 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TariffGetNextWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
</UL>

<P><STRONG><a name="[3af]"></a>Yaffs2DrvInit</STRONG> (ARM, 96 bytes, Stack size 8 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[3b1]"></a>Yaffs2ListFileEx</STRONG> (ARM, 24 bytes, Stack size 8 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[3b2]"></a>Yaffs2ErrorStr</STRONG> (ARM, 12 bytes, Stack size 8 bytes, yaffs2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Yaffs2ErrorStr &rArr; yaffs_error_str
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_error_str
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
</UL>

<P><STRONG><a name="[3c0]"></a>setExecuteFlag</STRONG> (ARM, 104 bytes, Stack size 0 bytes, dataprocesslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSetExecuteFlag
</UL>

<P><STRONG><a name="[387]"></a>DataProcessLibInit</STRONG> (ARM, 68 bytes, Stack size 8 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DataProcessLibInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[380]"></a>DataProcessCheckExecute</STRONG> (ARM, 24 bytes, Stack size 8 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DataProcessCheckExecute
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkProcessExecuteFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[384]"></a>DataProcessExecute</STRONG> (ARM, 28 bytes, Stack size 16 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7800 + Unknown Stack Size
<LI>Call Chain = DataProcessExecute &rArr; executeProcess &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[389]"></a>DataProcessSetExecuteFlag</STRONG> (ARM, 36 bytes, Stack size 8 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DataProcessSetExecuteFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExecuteFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
</UL>

<P><STRONG><a name="[1e9]"></a>DataProcessSendStatusData</STRONG> (ARM, 1016 bytes, Stack size 160 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetFileName
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetValue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpaceStatus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterStorageData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpaceDist
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemAgentTransmitRoutine
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerSendStatusData
</UL>

<P><STRONG><a name="[29d]"></a>DataProcessSendData</STRONG> (ARM, 1200 bytes, Stack size 168 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = DataProcessSendData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetFileName
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetValue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateTransactionStatusData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpaceStatus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterStorageData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateExpiredStatusData
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpaceDist
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
</UL>

<P><STRONG><a name="[3c3]"></a>DataParserWebPostReturnData</STRONG> (ARM, 1404 bytes, Stack size 616 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = DataParserWebPostReturnData &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2RTC
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerRefreshScreen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOSTime
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage
</UL>

<P><STRONG><a name="[3c4]"></a>getCurrentLogFileName</STRONG> (ARM, 108 bytes, Stack size 32 bytes, loglib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = getCurrentLogFileName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
</UL>

<P><STRONG><a name="[3c5]"></a>LoglibInit</STRONG> (ARM, 36 bytes, Stack size 8 bytes, loglib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[3be]"></a>LoglibGetCurrentLogFileName</STRONG> (ARM, 8 bytes, Stack size 0 bytes, loglib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logExecuteFunc
</UL>

<P><STRONG><a name="[1e8]"></a>LoglibPrintf</STRONG> (ARM, 760 bytes, Stack size 360 bytes, loglib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7496 + Unknown Stack Size
<LI>Call Chain = LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentLogFileName
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statusExecuteFunc
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeProcess
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
</UL>

<P><STRONG><a name="[3cd]"></a>Bay_light_Command</STRONG> (ARM, 172 bytes, Stack size 12 bytes, ledcmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bay_light_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
</UL>

<P><STRONG><a name="[3ce]"></a>State_light_Command</STRONG> (ARM, 172 bytes, Stack size 12 bytes, ledcmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = State_light_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
</UL>

<P><STRONG><a name="[3d0]"></a>Light_Color_Command</STRONG> (ARM, 356 bytes, Stack size 28 bytes, ledcmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Light_Color_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColor
</UL>

<P><STRONG><a name="[3d2]"></a>HeartBeatTimeSet</STRONG> (ARM, 184 bytes, Stack size 20 bytes, ledcmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HeartBeatTimeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHeartbeat
</UL>

<P><STRONG><a name="[3d4]"></a>FactoryTest</STRONG> (ARM, 80 bytes, Stack size 0 bytes, ledcmdlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFactoryTest
</UL>

<P><STRONG><a name="[3c7]"></a>RUN_Results</STRONG> (ARM, 272 bytes, Stack size 8 bytes, ledcmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RUN_Results
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
</UL>

<P><STRONG><a name="[ab]"></a>LedDrvInit</STRONG> (ARM, 280 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LedDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInterface
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userdrv.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>LedSetStatus</STRONG> (ARM, 12 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = LedSetStatus &rArr; setLedPara &rArr; readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[1ec]"></a>LedSetColor</STRONG> (ARM, 364 bytes, Stack size 24 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LedSetColor &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFailure
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
</UL>

<P><STRONG><a name="[7e1]"></a>LedSetMode</STRONG> (ARM, 4 bytes, Stack size 0 bytes, leddrv.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>LedSendHeartbeat</STRONG> (ARM, 56 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LedSendHeartbeat &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedHeartbeatRoutine
</UL>

<P><STRONG><a name="[2f8]"></a>LedSendFactoryTest</STRONG> (ARM, 56 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LedSendFactoryTest &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTest
</UL>

<P><STRONG><a name="[31e]"></a>LedSetPower</STRONG> (ARM, 48 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedSetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[3e2]"></a>FileAgentParserAutoData</STRONG> (ARM, 524 bytes, Stack size 40 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FileAgentParserAutoData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
</UL>

<P><STRONG><a name="[1de]"></a>FileAgentFatFsFormat</STRONG> (ARM, 180 bytes, Stack size 144 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
</UL>

<P><STRONG><a name="[3ea]"></a>FileAgentGetFatfsList</STRONG> (ARM, 900 bytes, Stack size 888 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatfsListFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatfsDeleteFile
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetList
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetList
</UL>

<P><STRONG><a name="[366]"></a>FileAgentInit</STRONG> (ARM, 472 bytes, Stack size 16 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = FileAgentInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[2a2]"></a>FileAgentAddData</STRONG> (ARM, 876 bytes, Stack size 1080 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7136 + Unknown Stack Size
<LI>Call Chain = FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processWrite
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile
</UL>

<P><STRONG><a name="[2d9]"></a>FileAgentGetData</STRONG> (ARM, 96 bytes, Stack size 48 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5600 + Unknown Stack Size
<LI>Call Chain = FileAgentGetData &rArr; processRead &rArr; fatfsAutoGetFromFile &rArr; fatfsGetFromFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStorageValue
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
</UL>

<P><STRONG><a name="[3b8]"></a>FileAgentDelFile</STRONG> (ARM, 364 bytes, Stack size 280 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376 + Unknown Stack Size
<LI>Call Chain = FileAgentDelFile &rArr; yaffs_unlink &rArr; yaffsfs_DoUnlink &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFileCallback
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
</UL>

<P><STRONG><a name="[2e1]"></a>FileAgentGetList</STRONG> (ARM, 200 bytes, Stack size 56 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParaFileName
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataFile
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTariffFileName
</UL>

<P><STRONG><a name="[1d7]"></a>FileAgentFatfsListFile</STRONG> (ARM, 164 bytes, Stack size 32 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = FileAgentFatfsListFile &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseage
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[1da]"></a>FileAgentFatfsDeleteFile</STRONG> (ARM, 64 bytes, Stack size 32 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = FileAgentFatfsDeleteFile &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[1cf]"></a>FileAgentGetFatFsAutoFormatCounter</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fileagent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[b]"></a>UserDrvInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, userdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UserDrvInit &rArr; userDrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userDrvInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[35c]"></a>UartGetInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08DrvInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemLibInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000DrvInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232CommDrvInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FakeDrvInit
</UL>

<P><STRONG><a name="[33d]"></a>SpiGetInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInit
</UL>

<P><STRONG><a name="[456]"></a>I2cGetInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
</UL>

<P><STRONG><a name="[310]"></a>KeyHardwareGetInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvInit
</UL>

<P><STRONG><a name="[34a]"></a>DistGetInterface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvInit
</UL>

<P><STRONG><a name="[7e2]"></a>CommunicationGetInterface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, interface.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>FatfsHardwareGetInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
</UL>

<P><STRONG><a name="[b2]"></a>UART1SetRS232Power</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1SetRS232Power &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>UART1SetPower</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart1drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>UART1DrvInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART1DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>UART1Write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART1Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>UART1Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART1Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>UART1ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART1ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>UART1Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART1Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[3fb]"></a>UART1SetRTS</STRONG> (ARM, 72 bytes, Stack size 8 bytes, uart1drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[3fc]"></a>UART1FlushBuffer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart1drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Ioctl
</UL>

<P><STRONG><a name="[b9]"></a>UART2SetRS232Power</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2SetRS232Power &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>UART2SetPower</STRONG> (ARM, 92 bytes, Stack size 8 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2SetPower &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>UART2DrvInit</STRONG> (ARM, 40 bytes, Stack size 16 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART2DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>UART2Write</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART2Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>UART2Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART2Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>UART2ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART2ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>UART2Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART2Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>UART3SetRS232Power</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3SetRS232Power &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>UART3DrvInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART3DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>UART3Write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART3Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>UART3Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART3Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>UART3ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART3ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>UART3SetPower</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart3drv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>UART3Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART3Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[3ff]"></a>UART3SetRTS</STRONG> (ARM, 72 bytes, Stack size 8 bytes, uart3drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[400]"></a>UART3FlushBuffer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart3drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Ioctl
</UL>

<P><STRONG><a name="[c6]"></a>UART4SetPower</STRONG> (ARM, 92 bytes, Stack size 8 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4SetPower &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>UART4DrvInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART4DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>UART4Write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART4Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>UART4Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART4Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>UART4ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART4ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>UART4SetRS232Power</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart4drv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>UART4Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART4Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[402]"></a>UART4SetRTS</STRONG> (ARM, 72 bytes, Stack size 8 bytes, uart4drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[403]"></a>UART4FlushBuffer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart4drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Ioctl
</UL>

<P><STRONG><a name="[ce]"></a>UART7SetRS232Power</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART7SetRS232Power &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>UART7DrvInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART7DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>UART7Write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART7Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>UART7Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART7Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>UART7ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART7ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>UART7SetPower</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart7drv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>UART7Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART7Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[405]"></a>UART7SetRTS</STRONG> (ARM, 72 bytes, Stack size 8 bytes, uart7drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[406]"></a>UART7FlushBuffer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart7drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7Ioctl
</UL>

<P><STRONG><a name="[d4]"></a>UART8SetPower</STRONG> (ARM, 92 bytes, Stack size 8 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART8SetPower &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>UART8DrvInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART8DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>UART8Write</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART8Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>UART8Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART8Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>UART8ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART8ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>UART8SetRS232Power</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart8drv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>UART8Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART8Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>UART10SetRS232Power</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART10SetRS232Power &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>UART10SetPower</STRONG> (ARM, 92 bytes, Stack size 8 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART10SetPower &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>UART10DrvInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART10DrvInit &rArr; hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>UART10Write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UART10Write &rArr; uartWrite &rArr; _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>UART10Read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART10Read &rArr; uartRead &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>UART10ReadWait</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UART10ReadWait &rArr; uartWaitReadEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>UART10Ioctl</STRONG> (ARM, 44 bytes, Stack size 16 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UART10Ioctl &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[409]"></a>UART10SetRTS</STRONG> (ARM, 72 bytes, Stack size 8 bytes, uart10drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[40a]"></a>UART10FlushBuffer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart10drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10Ioctl
</UL>

<P><STRONG><a name="[e2]"></a>Spi0SetPin</STRONG> (ARM, 112 bytes, Stack size 8 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi0SetPin &rArr; GPIO_OpenBit
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>Spi0DrvInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Spi0DrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>Spi0Write</STRONG> (ARM, 72 bytes, Stack size 16 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Spi0Write &rArr; spiIoctl &rArr; spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGetBusyStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>Spi0Read</STRONG> (ARM, 24 bytes, Stack size 8 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi0Read
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>Spi0ActiveCS</STRONG> (ARM, 48 bytes, Stack size 8 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Spi0ActiveCS &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>Spi0ResetPin</STRONG> (ARM, 100 bytes, Stack size 8 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi0ResetPin &rArr; GPIO_OpenBit
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>Spi1SetPin</STRONG> (ARM, 88 bytes, Stack size 0 bytes, spi1drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>Spi1DrvInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, spi1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Spi1DrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>Spi1Write</STRONG> (ARM, 72 bytes, Stack size 16 bytes, spi1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Spi1Write &rArr; spiIoctl &rArr; spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGetBusyStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>Spi1Read</STRONG> (ARM, 24 bytes, Stack size 8 bytes, spi1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi1Read
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>Spi1ActiveCS</STRONG> (ARM, 64 bytes, Stack size 8 bytes, spi1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Spi1ActiveCS &rArr; spiIoctl &rArr; spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>Spi1ResetPin</STRONG> (ARM, 72 bytes, Stack size 0 bytes, spi1drv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ef]"></a>I2c1SetPin</STRONG> (ARM, 60 bytes, Stack size 8 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = I2c1SetPin &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>I2c1DrvInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = I2c1DrvInit &rArr; hwInit &rArr; i2cOpen &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>I2c1Ioctl</STRONG> (ARM, 40 bytes, Stack size 16 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2c1Ioctl &rArr; i2cIoctl &rArr; _i2cSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cIoctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>I2c1Read</STRONG> (ARM, 32 bytes, Stack size 16 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2c1Read &rArr; i2cRead &rArr; _i2cCalcAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>I2c1Write</STRONG> (ARM, 32 bytes, Stack size 16 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2c1Write &rArr; i2cWrite &rArr; _i2cCalcAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>I2c1enableCriticalSectionFunc</STRONG> (ARM, 40 bytes, Stack size 8 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = I2c1enableCriticalSectionFunc &rArr; i2cExitCriticalSection &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cExitCriticalSection
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cEnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>I2c1ResetPin</STRONG> (ARM, 116 bytes, Stack size 8 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = I2c1ResetPin &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>BuzzerDrvInit</STRONG> (ARM, 116 bytes, Stack size 8 bytes, buzzerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BuzzerDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userdrv.o(.data)
</UL>
<P><STRONG><a name="[1ef]"></a>BuzzerPlay</STRONG> (ARM, 360 bytes, Stack size 24 bytes, buzzerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = BuzzerPlay &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerLoop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerTest
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFailure
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReader
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackFunc
</UL>

<P><STRONG><a name="[30c]"></a>BatterySetSwitch2</STRONG> (ARM, 48 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BatterySetSwitch2 &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatterySwitchStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
</UL>

<P><STRONG><a name="[30b]"></a>BatterySetSwitch1</STRONG> (ARM, 48 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BatterySetSwitch1 &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatterySwitchStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
</UL>

<P><STRONG><a name="[307]"></a>setBatterySwitchStatus</STRONG> (ARM, 32 bytes, Stack size 16 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setBatterySwitchStatus &rArr; BatterySetSwitch2 &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch1
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySwitchStatusEx
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[313]"></a>BatteryCheckPowerDownCondition</STRONG> (ARM, 68 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BatteryCheckPowerDownCondition &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStatusCallback
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processOffCallback
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPreOffCallback
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientStart
</UL>

<P><STRONG><a name="[418]"></a>EINT5Callback</STRONG> (ARM, 144 bytes, Stack size 16 bytes, batterydrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
</UL>

<P><STRONG><a name="[41a]"></a>EINT6Callback</STRONG> (ARM, 144 bytes, Stack size 16 bytes, batterydrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
</UL>

<P><STRONG><a name="[ac]"></a>BatteryDrvInit</STRONG> (ARM, 136 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BatteryDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userdrv.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>BatteryGetValue</STRONG> (ARM, 72 bytes, Stack size 16 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BatteryGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
</UL>

<P><STRONG><a name="[2c8]"></a>BatteryGetStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, batterydrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
</UL>

<P><STRONG><a name="[41d]"></a>BatterySwitchStatusEx</STRONG> (ARM, 88 bytes, Stack size 8 bytes, batterydrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatterySwitchStatus
</UL>

<P><STRONG><a name="[306]"></a>BatteryGetVoltage</STRONG> (ARM, 44 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BatteryGetVoltage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
</UL>

<P><STRONG><a name="[41e]"></a>BatterySetEnableTestMode</STRONG> (ARM, 84 bytes, Stack size 8 bytes, batterydrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[420]"></a>EINT4Callback</STRONG> (ARM, 68 bytes, Stack size 16 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EINT4Callback &rArr; processAction &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dipdrv.o(.text)
</UL>
<P><STRONG><a name="[421]"></a>EINT2Callback</STRONG> (ARM, 68 bytes, Stack size 16 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EINT2Callback &rArr; processAction &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dipdrv.o(.text)
</UL>
<P><STRONG><a name="[422]"></a>EINT3Callback</STRONG> (ARM, 68 bytes, Stack size 16 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EINT3Callback &rArr; processAction &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dipdrv.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>DipDrvInit</STRONG> (ARM, 88 bytes, Stack size 8 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = DipDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>DipSetCallbackFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dipdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>RS232CommDrvInit</STRONG> (ARM, 168 bytes, Stack size 8 bytes, rs232commdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RS232CommDrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInterface
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>RS232CommDrvRead</STRONG> (ARM, 40 bytes, Stack size 16 bytes, rs232commdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS232CommDrvRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>RS232CommDrvWrite</STRONG> (ARM, 40 bytes, Stack size 16 bytes, rs232commdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS232CommDrvWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>RS232CommDrvReadWait</STRONG> (ARM, 32 bytes, Stack size 8 bytes, rs232commdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS232CommDrvReadWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>FlashDrvExInit</STRONG> (ARM, 276 bytes, Stack size 32 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FlashDrvExInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGetInterface
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFlashTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>FlashDrvExInitialize</STRONG> (ARM, 56 bytes, Stack size 8 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = FlashDrvExInitialize &rArr; swInit &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFlashTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>FlashDrvExStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, flashdrvex.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[104]"></a>FlashDrvExRead</STRONG> (ARM, 124 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FlashDrvExRead &rArr; SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalRead
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>FlashDrvExWrite</STRONG> (ARM, 544 bytes, Stack size 32 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FlashDrvExWrite &rArr; SpiFlash_NormalSectorProgram &rArr; SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalRead
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalSectorProgram
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_SectorErase
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>FlashDrvExIoctl</STRONG> (ARM, 160 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FlashDrvExIoctl &rArr; SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[1d9]"></a>FlashDrvExChipErasePure</STRONG> (ARM, 148 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FlashDrvExChipErasePure &rArr; SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[1dc]"></a>FlashDrvExChipEraseFs</STRONG> (ARM, 40 bytes, Stack size 8 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = FlashDrvExChipEraseFs &rArr; FlashDrvExChipErasePure &rArr; SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
</UL>

<P><STRONG><a name="[432]"></a>FlashDrvExChipEraseFull</STRONG> (ARM, 508 bytes, Stack size 8 bytes, flashdrvex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
</UL>

<P><STRONG><a name="[1ce]"></a>FlashDrvExGetErrorTimes</STRONG> (ARM, 32 bytes, Stack size 0 bytes, flashdrvex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[303]"></a>FlashDrvExGetChipID</STRONG> (ARM, 84 bytes, Stack size 16 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FlashDrvExGetChipID &rArr; SpiFlash_ReadMidDid &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadMidDid
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFlashTest
</UL>

<P><STRONG><a name="[434]"></a>SDH_IRQHandler</STRONG> (ARM, 296 bytes, Stack size 12 bytes, sddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sddrv.o(.text)
</UL>
<P><STRONG><a name="[48e]"></a>get_fattime</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sddrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[fb]"></a>SdDrvInit</STRONG> (ARM, 112 bytes, Stack size 8 bytes, sddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SdDrvInit &rArr; SD_Probe &rArr; SD_Init &rArr; SD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Open
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetReferenceClock
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[fc]"></a>SDDrvInitialize</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sddrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>SDDrvStatus</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sddrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>SDDrvRead</STRONG> (ARM, 76 bytes, Stack size 24 bytes, sddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = SDDrvRead &rArr; SD_Read &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>SDDrvWrite</STRONG> (ARM, 76 bytes, Stack size 24 bytes, sddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = SDDrvWrite &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>SDDrvIoctl</STRONG> (ARM, 104 bytes, Stack size 0 bytes, sddrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>SR04TDrvInit</STRONG> (ARM, 112 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SR04TDrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveAllTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>SR04TMeasureDist</STRONG> (ARM, 28 bytes, Stack size 16 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SR04TMeasureDist &rArr; runCapture &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveAllTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>EINT1Callback</STRONG> (ARM, 244 bytes, Stack size 24 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EINT1Callback &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nt066edrv.o(.text)
</UL>
<P><STRONG><a name="[451]"></a>NT066ESetClkReg</STRONG> (ARM, 540 bytes, Stack size 32 bytes, nt066edrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EReadCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EWriteCmd
</UL>

<P><STRONG><a name="[300]"></a>NT066EResetChip</STRONG> (ARM, 552 bytes, Stack size 24 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = NT066EResetChip &rArr; sendNT066EReadCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EReadCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EWriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[452]"></a>NT066EResetBuildBit</STRONG> (ARM, 252 bytes, Stack size 24 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = NT066EResetBuildBit &rArr; sendNT066EReadCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EReadCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EWriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetTriggerLevel
</UL>

<P><STRONG><a name="[453]"></a>NT066ESetTriggerLevel</STRONG> (ARM, 536 bytes, Stack size 24 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = NT066ESetTriggerLevel &rArr; NT066EResetBuildBit &rArr; sendNT066EReadCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetBuildBit
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EReadCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EWriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[f1]"></a>NT066EDrvInit</STRONG> (ARM, 200 bytes, Stack size 8 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = NT066EDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>NT066ESetCallbackFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nt066edrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[2ff]"></a>NT066ESetPower</STRONG> (ARM, 396 bytes, Stack size 8 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = NT066ESetPower &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[457]"></a>SC0_IRQHandler</STRONG> (ARM, 32 bytes, Stack size 8 bytes, smartcarddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = SC0_IRQHandler &rArr; SCLIB_CheckTxRxEvent &rArr; SC_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckTxRxEvent
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckTimeOutEvent
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckErrorEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smartcarddrv.o(.text)
</UL>
<P><STRONG><a name="[304]"></a>SmartCardDrvInit</STRONG> (ARM, 296 bytes, Stack size 56 bytes, smartcarddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SmartCardDrvInit &rArr; SCLIB_Activate &rArr; SCLIB_ColdReset &rArr; _SCLIB_ParseATR &rArr; _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Open
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_GetCardInfo
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartCardTest
</UL>

<P><STRONG><a name="[481]"></a>ff_convert</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[475]"></a>ff_wtoupper</STRONG> (ARM, 100 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[45e]"></a>disk_initialize</STRONG> (ARM, 76 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = disk_initialize &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[460]"></a>disk_status</STRONG> (ARM, 76 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = disk_status &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[461]"></a>disk_read</STRONG> (ARM, 232 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = disk_read &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetCallback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[462]"></a>disk_write</STRONG> (ARM, 280 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetCallback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[463]"></a>disk_ioctl</STRONG> (ARM, 100 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = disk_ioctl &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[464]"></a>ff_req_grant</STRONG> (ARM, 60 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[466]"></a>ff_rel_grant</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[471]"></a>clust2sect</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[46c]"></a>get_fat</STRONG> (ARM, 492 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[46d]"></a>put_fat</STRONG> (ARM, 628 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[48c]"></a>ff_cre_syncobj</STRONG> (ARM, 60 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ff_cre_syncobj &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[48d]"></a>ff_del_syncobj</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ff_del_syncobj &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[36d]"></a>f_mount</STRONG> (ARM, 236 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
</UL>

<P><STRONG><a name="[3d9]"></a>f_open</STRONG> (ARM, 684 bytes, Stack size 608 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
</UL>

<P><STRONG><a name="[3e4]"></a>f_read</STRONG> (ARM, 940 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
</UL>

<P><STRONG><a name="[3db]"></a>f_write</STRONG> (ARM, 1048 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
</UL>

<P><STRONG><a name="[490]"></a>f_sync</STRONG> (ARM, 332 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[3dc]"></a>f_close</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
</UL>

<P><STRONG><a name="[491]"></a>f_chdrive</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>

<P><STRONG><a name="[492]"></a>f_chdir</STRONG> (ARM, 180 bytes, Stack size 576 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[3da]"></a>f_lseek</STRONG> (ARM, 876 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
</UL>

<P><STRONG><a name="[493]"></a>f_opendir</STRONG> (ARM, 244 bytes, Stack size 552 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[3ed]"></a>f_closedir</STRONG> (ARM, 64 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
</UL>

<P><STRONG><a name="[494]"></a>f_readdir</STRONG> (ARM, 196 bytes, Stack size 544 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>

<P><STRONG><a name="[3ec]"></a>f_findnext</STRONG> (ARM, 152 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = f_findnext &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
</UL>

<P><STRONG><a name="[3eb]"></a>f_findfirst</STRONG> (ARM, 72 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = f_findfirst &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
</UL>

<P><STRONG><a name="[495]"></a>f_stat</STRONG> (ARM, 148 bytes, Stack size 584 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[36b]"></a>f_getfree</STRONG> (ARM, 508 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseageEx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsGetDiskUseage
</UL>

<P><STRONG><a name="[496]"></a>f_truncate</STRONG> (ARM, 364 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[3d8]"></a>f_unlink</STRONG> (ARM, 404 bytes, Stack size 624 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCallback
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
</UL>

<P><STRONG><a name="[497]"></a>f_mkdir</STRONG> (ARM, 736 bytes, Stack size 600 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[498]"></a>f_chmod</STRONG> (ARM, 220 bytes, Stack size 600 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[499]"></a>f_rename</STRONG> (ARM, 580 bytes, Stack size 656 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[49a]"></a>f_utime</STRONG> (ARM, 232 bytes, Stack size 592 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[369]"></a>f_mkfs</STRONG> (ARM, 2876 bytes, Stack size 120 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
</UL>

<P><STRONG><a name="[2de]"></a>cJSON_GetErrorPtr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
</UL>

<P><STRONG><a name="[7e3]"></a>cJSON_Version</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>cJSON_Delete</STRONG> (ARM, 164 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplaceItemInArray
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[4a4]"></a>cJSON_SetNumberHelper</STRONG> (ARM, 112 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>

<P><STRONG><a name="[4b6]"></a>cJSON_ParseWithOpts</STRONG> (ARM, 200 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[2dd]"></a>cJSON_Parse</STRONG> (ARM, 48 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[4ba]"></a>cJSON_Print</STRONG> (ARM, 32 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[2a0]"></a>cJSON_PrintUnformatted</STRONG> (ARM, 40 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = cJSON_PrintUnformatted &rArr; print_value &rArr; print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[4bb]"></a>cJSON_PrintBuffered</STRONG> (ARM, 116 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[4bc]"></a>cJSON_PrintPreallocated</STRONG> (ARM, 108 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[393]"></a>cJSON_GetArraySize</STRONG> (ARM, 36 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[394]"></a>cJSON_GetArrayItem</STRONG> (ARM, 60 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
</UL>

<P><STRONG><a name="[2df]"></a>cJSON_GetObjectItem</STRONG> (ARM, 80 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_GetObjectItem &rArr; cJSON_strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_HasObjectItem
</UL>

<P><STRONG><a name="[4bd]"></a>cJSON_HasObjectItem</STRONG> (ARM, 48 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[37d]"></a>cJSON_AddItemToArray</STRONG> (ARM, 96 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_AddItemToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InsertItemInArray
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObjectCS
</UL>

<P><STRONG><a name="[4c0]"></a>cJSON_AddItemToObjectCS</STRONG> (ARM, 104 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_AddItemToObjectCS &rArr; cJSON_AddItemToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[375]"></a>cJSON_AddItemToObject</STRONG> (ARM, 60 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_AddItemToObject &rArr; cJSON_AddItemToObjectCS &rArr; cJSON_AddItemToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObjectCS
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateTransactionStatusData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateExpiredStatusData
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
</UL>

<P><STRONG><a name="[4c1]"></a>cJSON_AddItemReferenceToArray</STRONG> (ARM, 40 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[4c2]"></a>cJSON_AddItemReferenceToObject</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[4c3]"></a>cJSON_DetachItemFromArray</STRONG> (ARM, 44 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetachItemFromArray
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
</UL>

<P><STRONG><a name="[4c5]"></a>cJSON_DeleteItemFromArray</STRONG> (ARM, 36 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
</UL>

<P><STRONG><a name="[4c6]"></a>cJSON_DetachItemFromObject</STRONG> (ARM, 92 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetachItemFromArray
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
</UL>

<P><STRONG><a name="[4c7]"></a>cJSON_DeleteItemFromObject</STRONG> (ARM, 36 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
</UL>

<P><STRONG><a name="[4c8]"></a>cJSON_InsertItemInArray</STRONG> (ARM, 124 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>

<P><STRONG><a name="[4ca]"></a>cJSON_ReplaceItemInArray</STRONG> (ARM, 52 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplaceItemInArray
</UL>

<P><STRONG><a name="[4cb]"></a>cJSON_ReplaceItemInObject</STRONG> (ARM, 144 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplaceItemInArray
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[4cc]"></a>cJSON_CreateNull</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[37c]"></a>cJSON_CreateTrue</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cJSON_CreateTrue &rArr; cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[37e]"></a>cJSON_CreateFalse</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cJSON_CreateFalse &rArr; cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[4cd]"></a>cJSON_CreateBool</STRONG> (ARM, 56 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[374]"></a>cJSON_CreateNumber</STRONG> (ARM, 140 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_CreateNumber &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateTransactionStatusData
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateExpiredStatusData
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[378]"></a>cJSON_CreateString</STRONG> (ARM, 80 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
</UL>

<P><STRONG><a name="[4ce]"></a>cJSON_CreateRaw</STRONG> (ARM, 80 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>

<P><STRONG><a name="[37b]"></a>cJSON_CreateArray</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cJSON_CreateArray &rArr; cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[372]"></a>cJSON_CreateObject</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateTransactionStatusData
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateExpiredStatusData
</UL>

<P><STRONG><a name="[4cf]"></a>cJSON_CreateIntArray</STRONG> (ARM, 164 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[4d0]"></a>cJSON_CreateFloatArray</STRONG> (ARM, 164 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[4d1]"></a>cJSON_CreateDoubleArray</STRONG> (ARM, 168 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[4d2]"></a>cJSON_CreateStringArray</STRONG> (ARM, 176 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>

<P><STRONG><a name="[4d3]"></a>cJSON_Duplicate</STRONG> (ARM, 320 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
</UL>

<P><STRONG><a name="[7e4]"></a>cJSON_Minify</STRONG> (ARM, 344 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>atCmdProcessReadData</STRONG> (ARM, 728 bytes, Stack size 72 bytes, atcmdparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = atCmdProcessReadData &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findStartAddress
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preProcessCmdData
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfBuffData
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
</UL>

<P><STRONG><a name="[1dd]"></a>ATCmdSetReceiveDebugFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, atcmdparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[4dc]"></a>ATCmdGetReceiveDebugFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, atcmdparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemWrite
</UL>

<P><STRONG><a name="[4e8]"></a>ATCmdDataTempBuffer</STRONG> (ARM, 32 bytes, Stack size 0 bytes, atcmdparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientSendFile
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile
</UL>

<P><STRONG><a name="[14e]"></a>ATCmdDataTempBuffer2</STRONG> (ARM, 32 bytes, Stack size 0 bytes, atcmdparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpQueryCsq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quentelmodemlib.o(.text)
</UL>
<P><STRONG><a name="[4dd]"></a>QModemFlushBuffer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = QModemFlushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
</UL>

<P><STRONG><a name="[4df]"></a>QModemAbortDataMode</STRONG> (ARM, 36 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = QModemAbortDataMode &rArr; QModemWrite &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
</UL>

<P><STRONG><a name="[385]"></a>QModemTotalStop</STRONG> (ARM, 120 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = QModemTotalStop &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRetryTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemLibInit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT6Callback
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT5Callback
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientStart
</UL>

<P><STRONG><a name="[301]"></a>QModemLibInit</STRONG> (ARM, 404 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = QModemLibInit &rArr; QModemTotalStop &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemTest
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[381]"></a>QModemDialupStart</STRONG> (ARM, 176 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = QModemDialupStart &rArr; QModemTotalStop &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRetryTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[3b4]"></a>QModemFtpClientStart</STRONG> (ARM, 132 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = QModemFtpClientStart &rArr; QModemTotalStop &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetRetryTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
</UL>

<P><STRONG><a name="[382]"></a>QModemDialupProcess</STRONG> (ARM, 120 bytes, Stack size 16 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = QModemDialupProcess &rArr; cmdProcess &rArr; actionCmd &rArr; atCmdProcessReadData &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[3b5]"></a>QModemFtpClientProcess</STRONG> (ARM, 340 bytes, Stack size 16 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = QModemFtpClientProcess &rArr; cmdProcess &rArr; actionCmd &rArr; atCmdProcessReadData &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
</UL>

<P><STRONG><a name="[1cd]"></a>QModemDialupStageIndex</STRONG> (ARM, 12 bytes, Stack size 0 bytes, quentelmodemlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[1cc]"></a>QModemFtpStageIndex</STRONG> (ARM, 12 bytes, Stack size 0 bytes, quentelmodemlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[3b6]"></a>FtpClientSendFile</STRONG> (ARM, 1240 bytes, Stack size 320 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8368 + Unknown Stack Size
<LI>Call Chain = FtpClientSendFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemWrite
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdDataTempBuffer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
</UL>

<P><STRONG><a name="[3bb]"></a>FtpClientGetFile</STRONG> (ARM, 572 bytes, Stack size 312 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8360 + Unknown Stack Size
<LI>Call Chain = FtpClientGetFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserString
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdDataTempBuffer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
</UL>

<P><STRONG><a name="[3bd]"></a>WebPostMessage</STRONG> (ARM, 676 bytes, Stack size 176 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8224 + Unknown Stack Size
<LI>Call Chain = WebPostMessage &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserString
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdDataTempBuffer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statusExecuteFunc
</UL>

<P><STRONG><a name="[3b7]"></a>FtpClientClose</STRONG> (ARM, 56 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8056 + Unknown Stack Size
<LI>Call Chain = FtpClientClose &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
</UL>

<P><STRONG><a name="[383]"></a>FtpQueryCsq</STRONG> (ARM, 144 bytes, Stack size 16 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8064 + Unknown Stack Size
<LI>Call Chain = FtpQueryCsq &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserString
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdDataTempBuffer2
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
</UL>

<P><STRONG><a name="[302]"></a>QModemATCmdTest</STRONG> (ARM, 464 bytes, Stack size 8 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8056 + Unknown Stack Size
<LI>Call Chain = QModemATCmdTest &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modemTest
</UL>

<P><STRONG><a name="[4e9]"></a>add_mtd_device</STRONG> (ARM, 120 bytes, Stack size 16 bytes, mtdcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_register
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
</UL>

<P><STRONG><a name="[4ea]"></a>del_mtd_device</STRONG> (ARM, 104 bytes, Stack size 16 bytes, mtdcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mtd_partitions
</UL>

<P><STRONG><a name="[7e5]"></a>get_mtd_device</STRONG> (ARM, 156 bytes, Stack size 8 bytes, mtdcore.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>get_mtd_device_nm</STRONG> (ARM, 268 bytes, Stack size 24 bytes, mtdcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[4ec]"></a>put_mtd_device</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mtdcore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[50b]"></a>mtd_erase_callback</STRONG> (ARM, 160 bytes, Stack size 8 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtd_erase_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
</UL>

<P><STRONG><a name="[4ed]"></a>del_mtd_partitions</STRONG> (ARM, 148 bytes, Stack size 16 bytes, mtdpart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mtd_device
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
</UL>

<P><STRONG><a name="[4f0]"></a>add_mtd_partitions</STRONG> (ARM, 296 bytes, Stack size 40 bytes, mtdpart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
</UL>

<P><STRONG><a name="[4f1]"></a>nand_register</STRONG> (ARM, 168 bytes, Stack size 24 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mtd_device
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_chip
</UL>

<P><STRONG><a name="[3ad]"></a>nand_init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAFFS_InitializeMemoryPool
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[164]"></a>nand_read_byte</STRONG> (ARM, 20 bytes, Stack size 0 bytes, nand_base.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>nand_write_buf</STRONG> (ARM, 48 bytes, Stack size 12 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nand_write_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[16b]"></a>nand_read_buf</STRONG> (ARM, 48 bytes, Stack size 8 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand_read_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>nand_write_buf16</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_write_buf16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>nand_read_buf16</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_read_buf16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[501]"></a>nand_wait_ready</STRONG> (ARM, 92 bytes, Stack size 24 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nand_wait_ready &rArr; get_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_oob
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_command_lp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_command
</UL>

<P><STRONG><a name="[508]"></a>nand_erase_nand</STRONG> (ARM, 1124 bytes, Stack size 120 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_checkbad
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_check_wp
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_offs_len
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_erase_callback
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase
</UL>

<P><STRONG><a name="[50e]"></a>nand_scan_ident</STRONG> (ARM, 328 bytes, Stack size 48 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_flash_type
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_set_defaults
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_nand_init
</UL>

<P><STRONG><a name="[510]"></a>nand_scan_tail</STRONG> (ARM, 2560 bytes, Stack size 16 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan
</UL>

<P><STRONG><a name="[4f4]"></a>nand_scan</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_tail
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_ident
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_chip
</UL>

<P><STRONG><a name="[511]"></a>nand_release</STRONG> (ARM, 112 bytes, Stack size 16 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mtd_partitions
</UL>

<P><STRONG><a name="[4fe]"></a>nand_update_bbt</STRONG> (ARM, 416 bytes, Stack size 80 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = nand_update_bbt &rArr; write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_bbt_region
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_block_markbad
</UL>

<P><STRONG><a name="[527]"></a>nand_scan_bbt</STRONG> (ARM, 484 bytes, Stack size 48 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = nand_scan_bbt &rArr; mark_bbt_region &rArr; nand_update_bbt &rArr; write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_bbt_descr
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_bbt_region
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_create
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_read_bbts
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbts
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_bbt
</UL>

<P><STRONG><a name="[16e]"></a>nand_default_bbt</STRONG> (ARM, 416 bytes, Stack size 16 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = nand_default_bbt &rArr; nand_scan_bbt &rArr; mark_bbt_region &rArr; nand_update_bbt &rArr; write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_create_default_bbt_descr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[500]"></a>nand_isbad_bbt</STRONG> (ARM, 180 bytes, Stack size 40 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nand_isbad_bbt
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_checkbad
</UL>

<P><STRONG><a name="[52c]"></a>yaffs_alloc_raw_tnode</STRONG> (ARM, 128 bytes, Stack size 16 bytes, yaffs_allocator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_tnodes
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
</UL>

<P><STRONG><a name="[52d]"></a>yaffs_free_raw_tnode</STRONG> (ARM, 100 bytes, Stack size 16 bytes, yaffs_allocator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_free_raw_tnode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>

<P><STRONG><a name="[532]"></a>yaffs_alloc_raw_obj</STRONG> (ARM, 168 bytes, Stack size 24 bytes, yaffs_allocator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = yaffs_alloc_raw_obj &rArr; yaffs_create_free_objs &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
</UL>

<P><STRONG><a name="[534]"></a>yaffs_free_raw_obj</STRONG> (ARM, 84 bytes, Stack size 16 bytes, yaffs_allocator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_free_raw_obj &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
</UL>

<P><STRONG><a name="[535]"></a>yaffs_deinit_raw_tnodes_and_objs</STRONG> (ARM, 88 bytes, Stack size 8 bytes, yaffs_allocator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_objs
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_tnodes_and_objs
</UL>

<P><STRONG><a name="[536]"></a>yaffs_init_raw_tnodes_and_objs</STRONG> (ARM, 160 bytes, Stack size 16 bytes, yaffs_allocator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_objs
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tnodes_and_objs
</UL>

<P><STRONG><a name="[593]"></a>yaffs_load_attribs</STRONG> (ARM, 52 bytes, Stack size 0 bytes, yaffs_attribs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
</UL>

<P><STRONG><a name="[5a9]"></a>yaffs_load_attribs_oh</STRONG> (ARM, 52 bytes, Stack size 0 bytes, yaffs_attribs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[537]"></a>yaffs_load_current_time</STRONG> (ARM, 60 bytes, Stack size 16 bytes, yaffs_attribs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_load_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_attribs_init
</UL>

<P><STRONG><a name="[539]"></a>yaffs_attribs_init</STRONG> (ARM, 52 bytes, Stack size 24 bytes, yaffs_attribs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_attribs_init &rArr; yaffs_load_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>

<P><STRONG><a name="[53a]"></a>yaffs_get_file_size</STRONG> (ARM, 144 bytes, Stack size 16 bytes, yaffs_attribs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_attribs
</UL>

<P><STRONG><a name="[53c]"></a>yaffs_set_attribs</STRONG> (ARM, 180 bytes, Stack size 24 bytes, yaffs_attribs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[53f]"></a>yaffs_get_attribs</STRONG> (ARM, 116 bytes, Stack size 16 bytes, yaffs_attribs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_file_size
</UL>

<P><STRONG><a name="[541]"></a>yaffs_verify_chunk_bit_id</STRONG> (ARM, 120 bytes, Stack size 16 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_chunk_bit_id &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
</UL>

<P><STRONG><a name="[542]"></a>yaffs_clear_chunk_bits</STRONG> (ARM, 44 bytes, Stack size 16 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_clear_chunk_bits &rArr; yaffs_block_bits &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
</UL>

<P><STRONG><a name="[543]"></a>yaffs_clear_chunk_bit</STRONG> (ARM, 92 bytes, Stack size 24 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_clear_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[544]"></a>yaffs_set_chunk_bit</STRONG> (ARM, 252 bytes, Stack size 24 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_set_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
</UL>

<P><STRONG><a name="[545]"></a>yaffs_check_chunk_bit</STRONG> (ARM, 96 bytes, Stack size 24 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_check_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_bit_id
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
</UL>

<P><STRONG><a name="[546]"></a>yaffs_still_some_chunks</STRONG> (ARM, 84 bytes, Stack size 24 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_still_some_chunks &rArr; yaffs_block_bits &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[547]"></a>yaffs_count_chunk_bits</STRONG> (ARM, 124 bytes, Stack size 24 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
</UL>

<P><STRONG><a name="[54d]"></a>yaffs2_checkpt_open</STRONG> (ARM, 564 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_space_ok
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[649]"></a>yaffs2_get_checkpt_sum</STRONG> (ARM, 28 bytes, Stack size 0 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
</UL>

<P><STRONG><a name="[54f]"></a>yaffs2_checkpt_wr</STRONG> (ARM, 216 bytes, Stack size 32 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_tnodes
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_validity_marker
</UL>

<P><STRONG><a name="[550]"></a>yaffs2_checkpt_rd</STRONG> (ARM, 496 bytes, Stack size 112 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_block
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_validity_marker
</UL>

<P><STRONG><a name="[551]"></a>yaffs_checkpt_close</STRONG> (ARM, 316 bytes, Stack size 24 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[552]"></a>yaffs2_checkpt_invalidate_stream</STRONG> (ARM, 48 bytes, Stack size 8 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs2_checkpt_invalidate_stream &rArr; yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
</UL>

<P><STRONG><a name="[624]"></a>yaffs_ecc_calc</STRONG> (ARM, 324 bytes, Stack size 24 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ecc_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_ecc
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
</UL>

<P><STRONG><a name="[553]"></a>yaffs_ecc_correct</STRONG> (ARM, 376 bytes, Stack size 32 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_ecc_correct
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_hweight8
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
</UL>

<P><STRONG><a name="[619]"></a>yaffs_ecc_calc_other</STRONG> (ARM, 104 bytes, Stack size 24 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_ecc_calc_other
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2
</UL>

<P><STRONG><a name="[555]"></a>yaffs_ecc_correct_other</STRONG> (ARM, 256 bytes, Stack size 56 bytes, yaffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_ecc_correct_other
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_hweight8
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_hweight32
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
</UL>

<P><STRONG><a name="[558]"></a>yaffs_addr_to_chunk</STRONG> (ARM, 128 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = yaffs_addr_to_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
</UL>

<P><STRONG><a name="[55a]"></a>yaffs_get_temp_buffer</STRONG> (ARM, 336 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = yaffs_get_temp_buffer &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[55b]"></a>yaffs_release_temp_buffer</STRONG> (ARM, 140 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_release_temp_buffer &rArr; yaffs_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[55c]"></a>yaffs_is_managed_tmp_buffer</STRONG> (ARM, 164 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[55d]"></a>yaffs_handle_chunk_error</STRONG> (ARM, 148 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_handle_chunk_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
</UL>

<P><STRONG><a name="[55e]"></a>yaffs_skip_rest_of_block</STRONG> (ARM, 80 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_skip_rest_of_block &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
</UL>

<P><STRONG><a name="[566]"></a>yaffs_check_ff</STRONG> (ARM, 52 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
</UL>

<P><STRONG><a name="[567]"></a>yaffs_block_became_dirty</STRONG> (ARM, 808 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_erase_block
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_clear_oldest_dirty_seq
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[569]"></a>yaffs_chunk_del</STRONG> (ARM, 524 bytes, Stack size 104 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = yaffs_chunk_del &rArr; yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_update_oldest_dirty_seq
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_update
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[7e6]"></a>yaffs_root</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)

<P><STRONG><a name="[7e7]"></a>yaffs_lost_n_found</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)

<P><STRONG><a name="[56f]"></a>yaffs_check_alloc_available</STRONG> (ARM, 72 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_check_alloc_available &rArr; yaffs_calc_checkpt_blocks_required &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
</UL>

<P><STRONG><a name="[575]"></a>yaffs_set_obj_name</STRONG> (ARM, 224 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_set_obj_name &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_name_sum
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
</UL>

<P><STRONG><a name="[577]"></a>yaffs_set_obj_name_from_oh</STRONG> (ARM, 28 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffs_set_obj_name_from_oh &rArr; yaffs_set_obj_name &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
</UL>

<P><STRONG><a name="[5c1]"></a>yaffs_max_file_size</STRONG> (ARM, 20 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[578]"></a>yaffs_get_tnode</STRONG> (ARM, 68 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = yaffs_get_tnode &rArr; yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_tnode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
</UL>

<P><STRONG><a name="[582]"></a>yaffs_load_tnode_0</STRONG> (ARM, 152 bytes, Stack size 28 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = yaffs_load_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
</UL>

<P><STRONG><a name="[580]"></a>yaffs_get_group_base</STRONG> (ARM, 96 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_get_group_base
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>

<P><STRONG><a name="[57f]"></a>yaffs_find_tnode_0</STRONG> (ARM, 168 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_find_tnode_0
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>

<P><STRONG><a name="[57b]"></a>yaffs_add_find_tnode_0</STRONG> (ARM, 476 bytes, Stack size 56 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = yaffs_add_find_tnode_0 &rArr; yaffs_get_tnode &rArr; yaffs_alloc_raw_tnode &rArr; yaffs_create_tnodes &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
</UL>

<P><STRONG><a name="[583]"></a>yaffs_put_chunk_in_file</STRONG> (ARM, 452 bytes, Stack size 184 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = yaffs_put_chunk_in_file &rArr; yaffs_chunk_del &rArr; yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tnode_0
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
</UL>

<P><STRONG><a name="[58a]"></a>yaffs_add_obj_to_dir</STRONG> (ARM, 300 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
</UL>

<P><STRONG><a name="[59d]"></a>yaffs_oh_size_load</STRONG> (ARM, 88 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[591]"></a>yaffs_clone_str</STRONG> (ARM, 112 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = yaffs_clone_str &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_symlink_alias
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
</UL>

<P><STRONG><a name="[59b]"></a>yaffs_find_by_number</STRONG> (ARM, 120 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_find_by_number
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
</UL>

<P><STRONG><a name="[53e]"></a>yaffs_update_oh</STRONG> (ARM, 1072 bytes, Stack size 472 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_size_load
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_oh_from_name
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_obj_cache_dirty
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs_oh
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_dirty_dirs
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_mod
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_attribs
</UL>

<P><STRONG><a name="[5ae]"></a>yaffs_get_obj_name</STRONG> (ARM, 260 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = yaffs_get_obj_name &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_name_from_oh
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>

<P><STRONG><a name="[5af]"></a>yaffs_find_by_name</STRONG> (ARM, 520 bytes, Stack size 280 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = yaffs_find_by_name &rArr; yaffs_get_obj_name &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_name_sum
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlinker
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[5b3]"></a>yaffs_flush_whole_cache</STRONG> (ARM, 244 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
</UL>

<P><STRONG><a name="[5b8]"></a>yaffs_handle_defered_free</STRONG> (ARM, 36 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
</UL>

<P><STRONG><a name="[5c0]"></a>yaffs_new_obj</STRONG> (ARM, 376 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = yaffs_new_obj &rArr; yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_max_file_size
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_obj
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj_id
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_fake_dir
</UL>

<P><STRONG><a name="[5c4]"></a>yaffs_find_or_create_by_number</STRONG> (ARM, 80 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
</UL>

<P><STRONG><a name="[5c6]"></a>yaffs_update_dirty_dirs</STRONG> (ARM, 156 bytes, Stack size 32 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[5c9]"></a>yaffs_is_non_empty_dir</STRONG> (ARM, 60 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_is_non_empty_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
</UL>

<P><STRONG><a name="[5cd]"></a>yaffs_resize_file_down</STRONG> (ARM, 200 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = yaffs_resize_file_down &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_tree
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[53d]"></a>yaffs_resize_file</STRONG> (ARM, 300 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_whole_cache
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_attribs
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ftruncate
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>

<P><STRONG><a name="[5d0]"></a>yaffs_del_file</STRONG> (ARM, 244 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>

<P><STRONG><a name="[5d1]"></a>yaffs_del_obj</STRONG> (ARM, 336 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_ReleaseInode
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_strip_deleted_objs
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>

<P><STRONG><a name="[5d3]"></a>yaffs_create_file</STRONG> (ARM, 80 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>

<P><STRONG><a name="[5d4]"></a>yaffs_create_dir</STRONG> (ARM, 80 bytes, Stack size 48 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
</UL>

<P><STRONG><a name="[5d5]"></a>yaffs_create_special</STRONG> (ARM, 80 bytes, Stack size 48 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>

<P><STRONG><a name="[5d6]"></a>yaffs_create_symlink</STRONG> (ARM, 80 bytes, Stack size 48 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
</UL>

<P><STRONG><a name="[53b]"></a>yaffs_get_equivalent_obj</STRONG> (ARM, 48 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetInodeIdForObject
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindInodeIdForObject
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_symlink_alias
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_type
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_inode
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_obj
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_file_size
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoChMod
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUtime
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[5d7]"></a>yaffs_link_obj</STRONG> (ARM, 100 bytes, Stack size 40 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
</UL>

<P><STRONG><a name="[5da]"></a>yaffs_bg_gc</STRONG> (ARM, 96 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[5df]"></a>yaffs_set_xattrib</STRONG> (ARM, 52 bytes, Stack size 32 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsetxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
</UL>

<P><STRONG><a name="[5e0]"></a>yaffs_remove_xattrib</STRONG> (ARM, 48 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fremovexattr
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
</UL>

<P><STRONG><a name="[5e1]"></a>yaffs_get_xattrib</STRONG> (ARM, 44 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fgetxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
</UL>

<P><STRONG><a name="[5e2]"></a>yaffs_list_xattrib</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flistxattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
</UL>

<P><STRONG><a name="[5e3]"></a>yaffs_file_rd</STRONG> (ARM, 428 bytes, Stack size 72 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = yaffs_file_rd &rArr; yaffs_grab_chunk_cache &rArr; yaffs_flush_file_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_use_cache
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_cache
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>

<P><STRONG><a name="[5e5]"></a>yaffs_do_file_wr</STRONG> (ARM, 1100 bytes, Stack size 104 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = yaffs_do_file_wr &rArr; yaffs_grab_chunk_cache &rArr; yaffs_flush_file_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_chunk_cache
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_use_cache
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_cache
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_file
</UL>

<P><STRONG><a name="[5e6]"></a>yaffs_wr_file</STRONG> (ARM, 68 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = yaffs_wr_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
</UL>

<P><STRONG><a name="[5e7]"></a>yaffs_flush_file</STRONG> (ARM, 132 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = yaffs_flush_file &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoChMod
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUtime
</UL>

<P><STRONG><a name="[5ea]"></a>yaffs_unlinker</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
</UL>

<P><STRONG><a name="[5eb]"></a>yaffs_rename_obj</STRONG> (ARM, 444 bytes, Stack size 48 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
</UL>

<P><STRONG><a name="[5ec]"></a>yaffs_handle_shadowed_obj</STRONG> (ARM, 140 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
</UL>

<P><STRONG><a name="[5ed]"></a>yaffs_link_fixup</STRONG> (ARM, 128 bytes, Stack size 32 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[5f3]"></a>yaffs_get_obj_length</STRONG> (ARM, 132 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = yaffs_get_obj_length &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lseek
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[67f]"></a>yaffs_get_obj_link_count</STRONG> (ARM, 60 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[5f4]"></a>yaffs_get_obj_inode</STRONG> (ARM, 28 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>

<P><STRONG><a name="[5f5]"></a>yaffs_get_obj_type</STRONG> (ARM, 336 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>

<P><STRONG><a name="[5f6]"></a>yaffs_get_symlink_alias</STRONG> (ARM, 56 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>

<P><STRONG><a name="[5f8]"></a>yaffs_deinitialise</STRONG> (ARM, 236 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_deinit
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_tnodes_and_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
</UL>

<P><STRONG><a name="[5fa]"></a>yaffs_guts_initialise</STRONG> (ARM, 2240 bytes, Stack size 32 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_nand
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_dev_fns
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_empty_l_n_f
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_strip_deleted_objs
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tnodes_and_objs
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_tnodes_and_objs
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tmp_buffers
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[636]"></a>yaffs_count_free_chunks</STRONG> (ARM, 164 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
</UL>

<P><STRONG><a name="[603]"></a>yaffs_get_n_free_chunks</STRONG> (ARM, 144 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
</UL>

<P><STRONG><a name="[637]"></a>yaffs_oh_to_size</STRONG> (ARM, 156 bytes, Stack size 20 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[4f5]"></a>YAFFS_InitializeMemoryPool</STRONG> (ARM, 120 bytes, Stack size 8 bytes, yaffs_malloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init
</UL>

<P><STRONG><a name="[3a6]"></a>yaffs_malloc</STRONG> (ARM, 876 bytes, Stack size 40 bytes, yaffs_malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_tnodes
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_create_default_bbt_descr
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tmp_buffers
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[3aa]"></a>yaffs_free</STRONG> (ARM, 264 bytes, Stack size 24 bytes, yaffs_malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = yaffs_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_objs
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mtd_partitions
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_deinit
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rmdir
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
</UL>

<P><STRONG><a name="[604]"></a>yaffs_bug_fn</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffs_malloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[660]"></a>yaffsfs_SetError</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffs_malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_closedir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_error
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_n_handles
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mknod
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readlink
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_inodecount
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_totalspace
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rmdir
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fchmod
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_access
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fremovexattr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flistxattr
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fgetxattr
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsetxattr
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_futime
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_utime
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lseek
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ftruncate
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dup
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckNameLength
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUtime
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[399]"></a>yaffsfs_GetLastError</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffs_malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_error_str
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_error
</UL>

<P><STRONG><a name="[7e8]"></a>yaffsfs_GetError</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffs_malloc.o(.text), UNUSED)

<P><STRONG><a name="[66d]"></a>yaffsfs_Lock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, yaffs_malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_closedir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readlink
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rewinddir
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_inodecount
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_totalspace
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fchmod
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_access
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fremovexattr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flistxattr
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fgetxattr
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsetxattr
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_futime
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_utime
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lseek
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ftruncate
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dup
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[66e]"></a>yaffsfs_Unlock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, yaffs_malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_closedir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readlink
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rewinddir
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_inodecount
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_totalspace
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fchmod
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_access
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fremovexattr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flistxattr
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fgetxattr
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsetxattr
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_futime
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_utime
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lseek
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ftruncate
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dup
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[538]"></a>yaffsfs_CurrentTime</STRONG> (ARM, 8 bytes, Stack size 0 bytes, yaffs_malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUtime
</UL>

<P><STRONG><a name="[7e9]"></a>yaffsfs_LocalInitialisation</STRONG> (ARM, 4 bytes, Stack size 0 bytes, yaffs_malloc.o(.text), UNUSED)

<P><STRONG><a name="[605]"></a>nandmtd_WriteChunkToNAND</STRONG> (ARM, 272 bytes, Stack size 96 bytes, yaffs_mtdif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_spare2oob
</UL>

<P><STRONG><a name="[607]"></a>nandmtd_ReadChunkFromNAND</STRONG> (ARM, 284 bytes, Stack size 96 bytes, yaffs_mtdif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_oob2spare
</UL>

<P><STRONG><a name="[13a]"></a>nandmtd_EraseBlockInNAND</STRONG> (ARM, 152 bytes, Stack size 96 bytes, yaffs_mtdif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nandmtd_EraseBlockInNAND
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs2drv.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>nandmtd_InitialiseNAND</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffs_mtdif.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> yaffs2drv.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>nandmtd2_write_chunk_tags</STRONG> (ARM, 416 bytes, Stack size 112 bytes, yaffs_mtdif2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = nandmtd2_write_chunk_tags &rArr; yaffs_pack_tags2 &rArr; yaffs_pack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs2drv.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>nandmtd2_read_chunk_tags</STRONG> (ARM, 828 bytes, Stack size 256 bytes, yaffs_mtdif2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = nandmtd2_read_chunk_tags &rArr; yaffs_unpack_tags2 &rArr; yaffs_unpack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_QueryNANDBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs2drv.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>nandmtd2_MarkNANDBlockBad</STRONG> (ARM, 112 bytes, Stack size 32 bytes, yaffs_mtdif2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = nandmtd2_MarkNANDBlockBad &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs2drv.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>nandmtd2_QueryNANDBlock</STRONG> (ARM, 288 bytes, Stack size 112 bytes, yaffs_mtdif2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = nandmtd2_QueryNANDBlock &rArr; nandmtd2_read_chunk_tags &rArr; yaffs_unpack_tags2 &rArr; yaffs_unpack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs2drv.o(.text)
</UL>
<P><STRONG><a name="[58e]"></a>nval_del</STRONG> (ARM, 140 bytes, Stack size 24 bytes, yaffs_nameval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nval_del &rArr; nval_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
</UL>

<P><STRONG><a name="[58d]"></a>nval_set</STRONG> (ARM, 324 bytes, Stack size 64 bytes, yaffs_nameval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nval_set &rArr; nval_del &rArr; nval_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_used
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
</UL>

<P><STRONG><a name="[5dd]"></a>nval_get</STRONG> (ARM, 240 bytes, Stack size 32 bytes, yaffs_nameval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
</UL>

<P><STRONG><a name="[5de]"></a>nval_list</STRONG> (ARM, 276 bytes, Stack size 40 bytes, yaffs_nameval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
</UL>

<P><STRONG><a name="[58f]"></a>nval_hasvalues</STRONG> (ARM, 48 bytes, Stack size 16 bytes, yaffs_nameval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nval_hasvalues &rArr; nval_used
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_used
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_apply_xattrib_mod
</UL>

<P><STRONG><a name="[565]"></a>yaffs_rd_chunk_tags_nand</STRONG> (ARM, 284 bytes, Stack size 112 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_error
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_xattrib_fetch
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_obj_details_loaded
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[56b]"></a>yaffs_wr_chunk_tags_nand</STRONG> (ARM, 516 bytes, Stack size 32 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = yaffs_wr_chunk_tags_nand &rArr; yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[562]"></a>yaffs_mark_bad</STRONG> (ARM, 68 bytes, Stack size 16 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = yaffs_mark_bad &rArr; yaffs_tags_compat_mark_bad &rArr; yaffs_wr_nand &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_mark_bad
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
</UL>

<P><STRONG><a name="[613]"></a>yaffs_query_init_block_state</STRONG> (ARM, 92 bytes, Stack size 24 bytes, yaffs_nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs1_scan
</UL>

<P><STRONG><a name="[563]"></a>yaffs_erase_block</STRONG> (ARM, 60 bytes, Stack size 16 bytes, yaffs_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
</UL>

<P><STRONG><a name="[5fb]"></a>yaffs_init_nand</STRONG> (ARM, 44 bytes, Stack size 8 bytes, yaffs_nand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[609]"></a>yaffs_pack_tags2_tags_only</STRONG> (ARM, 224 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = yaffs_pack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_tags_extra_packable
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_write_chunk_tags
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2
</UL>

<P><STRONG><a name="[60a]"></a>yaffs_pack_tags2</STRONG> (ARM, 116 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = yaffs_pack_tags2 &rArr; yaffs_pack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc_other
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_write_chunk_tags
</UL>

<P><STRONG><a name="[60b]"></a>yaffs_unpack_tags2_tags_only</STRONG> (ARM, 260 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = yaffs_unpack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_fetch
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
</UL>

<P><STRONG><a name="[60c]"></a>yaffs_unpack_tags2</STRONG> (ARM, 200 bytes, Stack size 40 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = yaffs_unpack_tags2 &rArr; yaffs_unpack_tags2_tags_only &rArr; yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_tags2
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct_other
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc_other
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
</UL>

<P><STRONG><a name="[61a]"></a>yaffs_qsort</STRONG> (ARM, 1292 bytes, Stack size 80 bytes, yaffs_qsort.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;med3
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapfunc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[5f9]"></a>yaffs_summary_deinit</STRONG> (ARM, 48 bytes, Stack size 8 bytes, yaffs_summary.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>

<P><STRONG><a name="[5fd]"></a>yaffs_summary_init</STRONG> (ARM, 148 bytes, Stack size 24 bytes, yaffs_summary.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_clear
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_deinit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[621]"></a>yaffs_summary_read</STRONG> (ARM, 544 bytes, Stack size 152 bytes, yaffs_summary.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_sum
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[611]"></a>yaffs_summary_add</STRONG> (ARM, 192 bytes, Stack size 48 bytes, yaffs_summary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = yaffs_summary_add &rArr; yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_clear
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
</UL>

<P><STRONG><a name="[622]"></a>yaffs_summary_fetch</STRONG> (ARM, 104 bytes, Stack size 40 bytes, yaffs_summary.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
</UL>

<P><STRONG><a name="[5a1]"></a>yaffs_summary_gc</STRONG> (ARM, 176 bytes, Stack size 24 bytes, yaffs_summary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = yaffs_summary_gc &rArr; yaffs_check_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[623]"></a>yaffs_calc_ecc</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffs_calc_ecc &rArr; yaffs_ecc_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
</UL>

<P><STRONG><a name="[626]"></a>yaffs_calc_tags_ecc</STRONG> (ARM, 124 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_calc_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_tags_ecc
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tags_to_spare
</UL>

<P><STRONG><a name="[625]"></a>yaffs_check_tags_ecc</STRONG> (ARM, 128 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_check_tags_ecc &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tags_from_spare
</UL>

<P><STRONG><a name="[610]"></a>yaffs_tags_compat_wr</STRONG> (ARM, 312 bytes, Stack size 48 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = yaffs_tags_compat_wr &rArr; yaffs_wr_nand &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_ecc
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_nand
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_spare_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tags_to_spare
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
</UL>

<P><STRONG><a name="[60f]"></a>yaffs_tags_compat_rd</STRONG> (ARM, 428 bytes, Stack size 64 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tags_from_spare
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_hweight8
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
</UL>

<P><STRONG><a name="[612]"></a>yaffs_tags_compat_mark_bad</STRONG> (ARM, 100 bytes, Stack size 32 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = yaffs_tags_compat_mark_bad &rArr; yaffs_wr_nand &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_nand
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mark_bad
</UL>

<P><STRONG><a name="[614]"></a>yaffs_tags_compat_query_block</STRONG> (ARM, 252 bytes, Stack size 64 bytes, yaffs_tagscompat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_hweight8
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_query_init_block_state
</UL>

<P><STRONG><a name="[568]"></a>yaffs_skip_verification</STRONG> (ARM, 40 bytes, Stack size 0 bytes, yaffs_verify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_special
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_symlink
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_link
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
</UL>

<P><STRONG><a name="[5a2]"></a>yaffs_verify_blk</STRONG> (ARM, 456 bytes, Stack size 24 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_blk &rArr; yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_chunk_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_collected_blk
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[5a3]"></a>yaffs_verify_collected_blk</STRONG> (ARM, 264 bytes, Stack size 16 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_collected_blk &rArr; yaffs_verify_blk &rArr; yaffs_count_chunk_bits &rArr; yaffs_block_bits &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[602]"></a>yaffs_verify_blocks</STRONG> (ARM, 972 bytes, Stack size 64 bytes, yaffs_verify.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[59e]"></a>yaffs_verify_oh</STRONG> (ARM, 852 bytes, Stack size 24 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_oh &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[62e]"></a>yaffs_verify_file</STRONG> (ARM, 348 bytes, Stack size 136 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_nand_verification
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_tnode_0
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[630]"></a>yaffs_verify_link</STRONG> (ARM, 44 bytes, Stack size 4 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = yaffs_verify_link
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[631]"></a>yaffs_verify_symlink</STRONG> (ARM, 44 bytes, Stack size 4 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = yaffs_verify_symlink
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[632]"></a>yaffs_verify_special</STRONG> (ARM, 44 bytes, Stack size 4 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = yaffs_verify_special
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
</UL>

<P><STRONG><a name="[587]"></a>yaffs_verify_obj_in_dir</STRONG> (ARM, 344 bytes, Stack size 24 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
</UL>

<P><STRONG><a name="[588]"></a>yaffs_verify_dir</STRONG> (ARM, 492 bytes, Stack size 16 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yaffs_verify_dir &rArr;  yaffs_verify_obj_in_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_full_verification
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
</UL>

<P><STRONG><a name="[633]"></a>yaffs_verify_obj</STRONG> (ARM, 1028 bytes, Stack size 120 bytes, yaffs_verify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_special
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_symlink
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_link
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_nand_verification
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
</UL>

<P><STRONG><a name="[635]"></a>yaffs_verify_objects</STRONG> (ARM, 108 bytes, Stack size 24 bytes, yaffs_verify.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
</UL>

<P><STRONG><a name="[601]"></a>yaffs_verify_free_chunks</STRONG> (ARM, 120 bytes, Stack size 16 bytes, yaffs_verify.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_free_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5b1]"></a>yaffs_verify_file_sane</STRONG> (ARM, 16 bytes, Stack size 0 bytes, yaffs_verify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
</UL>

<P><STRONG><a name="[600]"></a>yaffs1_scan</STRONG> (ARM, 2712 bytes, Stack size 160 bytes, yaffs_yaffs1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_query_init_block_state
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_to_size
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[638]"></a>yaffs_calc_oldest_dirty_seq</STRONG> (ARM, 160 bytes, Stack size 12 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_oldest_dirty_seq
</UL>

<P><STRONG><a name="[5a6]"></a>yaffs2_find_oldest_dirty_seq</STRONG> (ARM, 52 bytes, Stack size 8 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = yaffs2_find_oldest_dirty_seq &rArr; yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_ok_for_gc
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
</UL>

<P><STRONG><a name="[561]"></a>yaffs2_clear_oldest_dirty_seq</STRONG> (ARM, 60 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
</UL>

<P><STRONG><a name="[56a]"></a>yaffs2_update_oldest_dirty_seq</STRONG> (ARM, 64 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
</UL>

<P><STRONG><a name="[5a5]"></a>yaffs_block_ok_for_gc</STRONG> (ARM, 92 bytes, Stack size 12 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_block_ok_for_gc &rArr; yaffs2_find_oldest_dirty_seq &rArr; yaffs_calc_oldest_dirty_seq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_oldest_dirty_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
</UL>

<P><STRONG><a name="[5a8]"></a>yaffs2_find_refresh_block</STRONG> (ARM, 248 bytes, Stack size 24 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = yaffs2_find_refresh_block &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[639]"></a>yaffs2_checkpt_required</STRONG> (ARM, 88 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
</UL>

<P><STRONG><a name="[570]"></a>yaffs_calc_checkpt_blocks_required</STRONG> (ARM, 192 bytes, Stack size 24 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_calc_checkpt_blocks_required &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_required
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_n_free_chunks
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[560]"></a>yaffs2_checkpt_invalidate</STRONG> (ARM, 76 bytes, Stack size 8 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = yaffs2_checkpt_invalidate &rArr; yaffs2_checkpt_invalidate_stream &rArr; yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
</UL>

<P><STRONG><a name="[64d]"></a>yaffs_checkpoint_save</STRONG> (ARM, 128 bytes, Stack size 8 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
</UL>

<P><STRONG><a name="[5fe]"></a>yaffs2_checkpt_restore</STRONG> (ARM, 120 bytes, Stack size 16 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_objects
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_free_chunks
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5ce]"></a>yaffs2_handle_hole</STRONG> (ARM, 720 bytes, Stack size 88 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_file
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[5ff]"></a>yaffs2_scan_backwards</STRONG> (ARM, 1916 bytes, Stack size 96 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_query_init_block_state
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[7ea]"></a>yaffs_set_trace</STRONG> (ARM, 20 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)

<P><STRONG><a name="[7eb]"></a>yaffs_get_trace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)

<P><STRONG><a name="[664]"></a>yaffsfs_Match</STRONG> (ARM, 28 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>

<P><STRONG><a name="[662]"></a>yaffsfs_IsPathDivider</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
</UL>

<P><STRONG><a name="[65f]"></a>yaffsfs_CheckNameLength</STRONG> (ARM, 100 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
</UL>

<P><STRONG><a name="[66c]"></a>yaffs_dup</STRONG> (ARM, 196 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandle
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[66f]"></a>yaffs_open_sharing</STRONG> (ARM, 1640 bytes, Stack size 120 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = yaffs_open_sharing &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandleAndFileDes
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetInodeIdForObject
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_file
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_TooManyObjects
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
</UL>

<P><STRONG><a name="[3f0]"></a>yaffs_open</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = yaffs_open &rArr; yaffs_open_sharing &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
</UL>

<P><STRONG><a name="[671]"></a>yaffs_Dofsync</STRONG> (ARM, 112 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fdatasync
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsync
</UL>

<P><STRONG><a name="[672]"></a>yaffs_fsync</STRONG> (ARM, 24 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush
</UL>

<P><STRONG><a name="[673]"></a>yaffs_flush</STRONG> (ARM, 20 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsync
</UL>

<P><STRONG><a name="[674]"></a>yaffs_fdatasync</STRONG> (ARM, 24 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
</UL>

<P><STRONG><a name="[3f2]"></a>yaffs_close</STRONG> (ARM, 116 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = yaffs_close &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
</UL>

<P><STRONG><a name="[675]"></a>yaffsfs_do_read</STRONG> (ARM, 760 bytes, Stack size 88 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = yaffsfs_do_read &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_read
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pread
</UL>

<P><STRONG><a name="[3f5]"></a>yaffs_read</STRONG> (ARM, 52 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = yaffs_read &rArr; yaffsfs_do_read &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
</UL>

<P><STRONG><a name="[676]"></a>yaffs_pread</STRONG> (ARM, 48 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>

<P><STRONG><a name="[677]"></a>yaffsfs_do_write</STRONG> (ARM, 736 bytes, Stack size 88 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = yaffsfs_do_write &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pwrite
</UL>

<P><STRONG><a name="[3f1]"></a>yaffs_write</STRONG> (ARM, 52 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = yaffs_write &rArr; yaffsfs_do_write &rArr; yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
</UL>

<P><STRONG><a name="[678]"></a>yaffs_pwrite</STRONG> (ARM, 48 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
</UL>

<P><STRONG><a name="[679]"></a>yaffs_truncate</STRONG> (ARM, 444 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[67a]"></a>yaffs_ftruncate</STRONG> (ARM, 236 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[67b]"></a>yaffs_lseek</STRONG> (ARM, 392 bytes, Stack size 64 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
</UL>

<P><STRONG><a name="[67c]"></a>yaffsfs_DoUnlink</STRONG> (ARM, 520 bytes, Stack size 48 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = yaffsfs_DoUnlink &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlinker
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via BLX)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rmdir
</UL>

<P><STRONG><a name="[39e]"></a>yaffs_unlink</STRONG> (ARM, 24 bytes, Stack size 8 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = yaffs_unlink &rArr; yaffsfs_DoUnlink &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
</UL>

<P><STRONG><a name="[67d]"></a>yaffs_rename</STRONG> (ARM, 812 bytes, Stack size 80 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via BLX)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[682]"></a>yaffs_stat</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[39c]"></a>yaffs_lstat</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[3f4]"></a>yaffs_fstat</STRONG> (ARM, 104 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = yaffs_fstat &rArr; yaffsfs_DoStat &rArr; yaffs_get_obj_length &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
</UL>

<P><STRONG><a name="[684]"></a>yaffs_utime</STRONG> (ARM, 272 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUtime
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[685]"></a>yaffs_futime</STRONG> (ARM, 80 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUtime
</UL>

<P><STRONG><a name="[687]"></a>yaffs_setxattr</STRONG> (ARM, 60 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
</UL>

<P><STRONG><a name="[688]"></a>yaffs_lsetxattr</STRONG> (ARM, 60 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
</UL>

<P><STRONG><a name="[689]"></a>yaffs_fsetxattr</STRONG> (ARM, 156 bytes, Stack size 40 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_xattrib
</UL>

<P><STRONG><a name="[68b]"></a>yaffs_getxattr</STRONG> (ARM, 52 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
</UL>

<P><STRONG><a name="[68c]"></a>yaffs_lgetxattr</STRONG> (ARM, 52 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
</UL>

<P><STRONG><a name="[68d]"></a>yaffs_fgetxattr</STRONG> (ARM, 148 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_xattrib
</UL>

<P><STRONG><a name="[68f]"></a>yaffs_listxattr</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
</UL>

<P><STRONG><a name="[690]"></a>yaffs_llistxattr</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
</UL>

<P><STRONG><a name="[691]"></a>yaffs_flistxattr</STRONG> (ARM, 132 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_list_xattrib
</UL>

<P><STRONG><a name="[693]"></a>yaffs_removexattr</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
</UL>

<P><STRONG><a name="[694]"></a>yaffs_lremovexattr</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
</UL>

<P><STRONG><a name="[695]"></a>yaffs_fremovexattr</STRONG> (ARM, 124 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_xattrib
</UL>

<P><STRONG><a name="[697]"></a>yaffs_access</STRONG> (ARM, 440 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[698]"></a>yaffs_chmod</STRONG> (ARM, 344 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoChMod
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[699]"></a>yaffs_fchmod</STRONG> (ARM, 132 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoChMod
</UL>

<P><STRONG><a name="[69a]"></a>yaffs_mkdir</STRONG> (ARM, 492 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_dir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_TooManyObjects
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[69b]"></a>yaffs_rmdir</STRONG> (ARM, 148 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
</UL>

<P><STRONG><a name="[69c]"></a>yaffs_getdev</STRONG> (ARM, 36 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>

<P><STRONG><a name="[69d]"></a>yaffs_mount_common</STRONG> (ARM, 304 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount2
</UL>

<P><STRONG><a name="[69e]"></a>yaffs_mount2</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[3ae]"></a>yaffs_mount</STRONG> (ARM, 28 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[69f]"></a>yaffs_sync</STRONG> (ARM, 224 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_whole_cache
</UL>

<P><STRONG><a name="[6a1]"></a>yaffs_remount</STRONG> (ARM, 240 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_whole_cache
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsDevBusy
</UL>

<P><STRONG><a name="[6a2]"></a>yaffs_unmount2</STRONG> (ARM, 232 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_whole_cache
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsDevBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount
</UL>

<P><STRONG><a name="[6a3]"></a>yaffs_unmount</STRONG> (ARM, 24 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
</UL>

<P><STRONG><a name="[3a4]"></a>yaffs_freespace</STRONG> (ARM, 200 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_n_free_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_dev_ls
</UL>

<P><STRONG><a name="[6a4]"></a>yaffs_totalspace</STRONG> (ARM, 244 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[6a5]"></a>yaffs_inodecount</STRONG> (ARM, 192 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[3a9]"></a>yaffs_add_device</STRONG> (ARM, 124 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
</UL>

<P><STRONG><a name="[6a9]"></a>yaffs_remove_device</STRONG> (ARM, 36 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>

<P><STRONG><a name="[3a2]"></a>yaffs_dev_rewind</STRONG> (ARM, 20 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_dev_ls
</UL>

<P><STRONG><a name="[3a3]"></a>yaffs_next_dev</STRONG> (ARM, 92 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_dev_ls
</UL>

<P><STRONG><a name="[39b]"></a>yaffs_opendir</STRONG> (ARM, 480 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetDirRewound
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[39f]"></a>yaffs_readdir</STRONG> (ARM, 264 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[6ac]"></a>yaffs_rewinddir</STRONG> (ARM, 32 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetDirRewound
</UL>

<P><STRONG><a name="[3a0]"></a>yaffs_closedir</STRONG> (ARM, 72 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[6ad]"></a>yaffs_symlink</STRONG> (ARM, 496 bytes, Stack size 56 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_symlink
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_TooManyObjects
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[6ae]"></a>yaffs_readlink</STRONG> (ARM, 300 bytes, Stack size 56 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[6af]"></a>yaffs_link</STRONG> (ARM, 584 bytes, Stack size 64 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_obj
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckNameLength
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_TooManyObjects
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[6b0]"></a>yaffs_mknod</STRONG> (ARM, 44 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[6b1]"></a>yaffs_n_handles</STRONG> (ARM, 128 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CountHandles
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[6b2]"></a>yaffs_get_error</STRONG> (ARM, 12 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetLastError
</UL>

<P><STRONG><a name="[6b3]"></a>yaffs_set_error</STRONG> (ARM, 24 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
</UL>

<P><STRONG><a name="[7ec]"></a>yaffs_dump_dev</STRONG> (ARM, 16 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>udelay</STRONG> (ARM, 64 bytes, Stack size 16 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_oob
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_command_lp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_command
</UL>

<P><STRONG><a name="[502]"></a>get_timer</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait_ready
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait
</UL>

<P><STRONG><a name="[196]"></a>nuc970_nand_enable_hwecc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[6b4]"></a>fmiSM_CorrectData_BCH</STRONG> (ARM, 1052 bytes, Stack size 264 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = fmiSM_CorrectData_BCH
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSMCorrectData
</UL>

<P><STRONG><a name="[6b5]"></a>fmiSMCorrectData</STRONG> (ARM, 268 bytes, Stack size 32 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = fmiSMCorrectData &rArr; fmiSM_CorrectData_BCH
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSM_CorrectData_BCH
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nuc970_nand_dma_transfer
</UL>

<P><STRONG><a name="[4f3]"></a>board_nand_init</STRONG> (ARM, 1120 bytes, Stack size 16 bytes, fmi_nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_ident
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_layout_oob_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_chip
</UL>

<P><STRONG><a name="[6b8]"></a>_showMacroMessage</STRONG> (ARM, 88 bytes, Stack size 32 bytes, osmisc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
</UL>

<P><STRONG><a name="[6bc]"></a>_showCurrentThreadMemoryInfo</STRONG> (ARM, 56 bytes, Stack size 16 bytes, osmisc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
</UL>

<P><STRONG><a name="[6bd]"></a>_showCurrentThreadMemoryInfoEx</STRONG> (ARM, 72 bytes, Stack size 32 bytes, osmisc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
</UL>

<P><STRONG><a name="[1d4]"></a>_showFreeHeapSize</STRONG> (ARM, 56 bytes, Stack size 24 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _showFreeHeapSize &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[1d5]"></a>_showMemoryInfo</STRONG> (ARM, 604 bytes, Stack size 1168 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = _showMemoryInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[6bf]"></a>vApplicationStackOverflowHook</STRONG> (ARM, 44 bytes, Stack size 16 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[6c0]"></a>vApplicationMallocFailedHook</STRONG> (ARM, 32 bytes, Stack size 8 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6c1]"></a>GetFreeHeapSize</STRONG> (ARM, 12 bytes, Stack size 8 bytes, osmisc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>

<P><STRONG><a name="[6eb]"></a>vApplicationTickHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, osmisc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6c2]"></a>vApplicationIdleHook</STRONG> (ARM, 12 bytes, Stack size 8 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wfi
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6c3]"></a>tickProcess</STRONG> (ARM, 24 bytes, Stack size 8 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tickProcess &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osmisc.o(.text)
</UL>
<P><STRONG><a name="[6c5]"></a>initTimer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, osmisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = initTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetTimerEvent
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>

<P><STRONG><a name="[6c7]"></a>xQueueGenericReset</STRONG> (ARM, 184 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[235]"></a>xQueueGenericCreate</STRONG> (ARM, 92 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessLibInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[259]"></a>xQueueGenericSend</STRONG> (ARM, 376 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cExitCriticalSection
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvSetEnable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentStartTakePhoto
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowErrorID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendFactoryTest
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetChipID
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltage
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatteryStatus
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainSelTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowExpired
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendHeartbeat
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataOnCallback
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSpaceDrv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetSleepFunction
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDReSetBacklightTimeout
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBannerLine
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statusExecuteFunc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentOnCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvOnCallback
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDExitCriticalSection
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainClear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawPleaseWait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllScreen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCar
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBanner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDeviceId
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawUpperLine
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdDrvOffCallback
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderStartInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerDrvTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRun
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFull
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetEnableTestMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDrvOnCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExRead
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[25c]"></a>xQueueCreateMutex</STRONG> (ARM, 52 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOpen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerInit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentInit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDrvInit
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibInit
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[321]"></a>xQueueCreateCountingSemaphore</STRONG> (ARM, 52 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDrvInit
</UL>

<P><STRONG><a name="[6d9]"></a>xQueueGenericSendFromISR</STRONG> (ARM, 184 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[220]"></a>xQueueGiveFromISR</STRONG> (ARM, 160 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1Callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAction
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalConvCallback
</UL>

<P><STRONG><a name="[237]"></a>xQueueGenericReceive</STRONG> (ARM, 484 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cEnterCriticalSection
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWaitReadEvent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowErrorID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetChipID
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatteryStatus
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainSelTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowExpired
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetSleepFunction
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBannerLine
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statusExecuteFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpaceDrvTask
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDEnterCriticalSection
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainClear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawPleaseWait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllScreen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCar
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBanner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDeviceId
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawUpperLine
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedBackLightTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdDrvOffCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCardReaderRxTask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerDrvTask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNT066EDrvTask
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFull
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryDrvTask
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBuzzerDrvTask
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExRead
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFileAgentTask
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedTask
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[6de]"></a>xQueueReceiveFromISR</STRONG> (ARM, 172 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[6df]"></a>xQueuePeekFromISR</STRONG> (ARM, 72 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[6e0]"></a>uxQueueMessagesWaiting</STRONG> (ARM, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[6e1]"></a>uxQueueSpacesAvailable</STRONG> (ARM, 40 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[7ed]"></a>uxQueueMessagesWaitingFromISR</STRONG> (ARM, 12 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>vQueueDelete</STRONG> (ARM, 24 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cClose
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[7ee]"></a>uxQueueGetQueueNumber</STRONG> (ARM, 12 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[7ef]"></a>vQueueSetQueueNumber</STRONG> (ARM, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[7f0]"></a>ucQueueGetQueueType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[7f1]"></a>xQueueIsQueueEmptyFromISR</STRONG> (ARM, 32 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>xQueueIsQueueFullFromISR</STRONG> (ARM, 36 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
</UL>

<P><STRONG><a name="[1f9]"></a>xTaskCreate</STRONG> (ARM, 164 bytes, Stack size 72 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDrvInit
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[1f2]"></a>vTaskDelete</STRONG> (ARM, 216 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHWTestTask
</UL>

<P><STRONG><a name="[6c4]"></a>xTaskIncrementTick</STRONG> (ARM, 460 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickProcess
</UL>

<P><STRONG><a name="[6d7]"></a>xTaskResumeAll</STRONG> (ARM, 344 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[6d4]"></a>vTaskSuspendAll</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[6ee]"></a>vTaskDelayUntil</STRONG> (ARM, 148 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
</UL>

<P><STRONG><a name="[1f0]"></a>vTaskDelay</STRONG> (ARM, 60 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDebugTask
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemATCmdTest
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08ReadVerInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerLoop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerTest
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTest
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadAllTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataOffCallback
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitTimerCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentOffCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentOffCallback
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvOffCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedBackLightTask
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerDrvTask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000CheckReader
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startToggle
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySwitchStatusEx
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureBattery
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDrvOffCallback
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerPlay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFileAgentTask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentOffCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedTask
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedBoardWakeup
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemAbortDataMode
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
</UL>

<P><STRONG><a name="[6ef]"></a>eTaskGetState</STRONG> (ARM, 168 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[6f0]"></a>uxTaskPriorityGet</STRONG> (ARM, 56 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[7f2]"></a>uxTaskPriorityGetFromISR</STRONG> (ARM, 44 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>vTaskSwitchContext</STRONG> (ARM, 244 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1Callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAction
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalConvCallback
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(PORT_ASM)
</UL>
<P><STRONG><a name="[6f1]"></a>vTaskSuspend</STRONG> (ARM, 200 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[6f2]"></a>vTaskResume</STRONG> (ARM, 156 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[6f4]"></a>xTaskResumeFromISR</STRONG> (ARM, 168 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[1fa]"></a>vTaskStartScheduler</STRONG> (ARM, 108 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f7]"></a>vTaskEndScheduler</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[281]"></a>xTaskGetTickCount</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerProcess
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkReader
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterOnDraw
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadOnDraw
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeOnDraw
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeKeyCallback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceOnDraw
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceKeyCallback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPOnDraw
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitOnDraw
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffOnDraw
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeOnDraw
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFileDownloadOnDraw
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOnDraw
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKOnDraw
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailOnDraw
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyOnDraw
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000SetPower
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000Process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000CheckReader
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDipDrvTask
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
</UL>

<P><STRONG><a name="[7f3]"></a>xTaskGetTickCountFromISR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[7f4]"></a>uxTaskGetNumberOfTasks</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[6bb]"></a>pcTaskGetName</STRONG> (ARM, 40 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfoEx
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfo
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMacroMessage
</UL>

<P><STRONG><a name="[6f9]"></a>vTaskGetInfo</STRONG> (ARM, 204 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[6be]"></a>uxTaskGetSystemState</STRONG> (ARM, 224 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMemoryInfo
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[6d6]"></a>vTaskPlaceOnEventList</STRONG> (ARM, 48 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6fc]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (ARM, 68 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[6c9]"></a>xTaskRemoveFromEventList</STRONG> (ARM, 176 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[6fd]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (ARM, 136 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[6d3]"></a>vTaskSetTimeOutState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[6d5]"></a>xTaskCheckForTimeOut</STRONG> (ARM, 156 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6cf]"></a>vTaskMissedYield</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[7f5]"></a>uxTaskGetTaskNumber</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[7f6]"></a>vTaskSetTaskNumber</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[6ba]"></a>uxTaskGetStackHighWaterMark</STRONG> (ARM, 60 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxTaskGetStackHighWaterMark
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMemoryInfo
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfoEx
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfo
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMacroMessage
</UL>

<P><STRONG><a name="[6b9]"></a>xTaskGetCurrentTaskHandle</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfoEx
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showCurrentThreadMemoryInfo
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMacroMessage
</UL>

<P><STRONG><a name="[6dd]"></a>vTaskPriorityInherit</STRONG> (ARM, 228 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6d2]"></a>xTaskPriorityDisinherit</STRONG> (ARM, 160 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[6ff]"></a>vTaskList</STRONG> (ARM, 356 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[7f7]"></a>uxTaskResetEventItemValue</STRONG> (ARM, 44 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[6dc]"></a>pvTaskIncrementMutexHeldCount</STRONG> (ARM, 52 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[700]"></a>ulTaskNotifyTake</STRONG> (ARM, 176 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[701]"></a>xTaskNotifyWait</STRONG> (ARM, 240 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[702]"></a>xTaskGenericNotify</STRONG> (ARM, 296 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[703]"></a>xTaskGenericNotifyFromISR</STRONG> (ARM, 360 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[704]"></a>vTaskNotifyGiveFromISR</STRONG> (ARM, 208 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[705]"></a>xTaskNotifyStateClear</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[10b]"></a>pvPortMalloc</STRONG> (ARM, 348 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>vPortFree</STRONG> (ARM, 124 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStorageValue
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statusExecuteFunc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processWrite
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[37f]"></a>xPortGetFreeHeapSize</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showFreeHeapSize
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreeHeapSize
</UL>

<P><STRONG><a name="[7f8]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[7f9]"></a>vPortInitialiseBlocks</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[708]"></a>SCLIB_WarmReset</STRONG> (ARM, 116 bytes, Stack size 16 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SCLIB_WarmReset &rArr; _SCLIB_ParseATR &rArr; _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_UpdateCardCapabilities
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ParseATR
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
</UL>

<P><STRONG><a name="[70c]"></a>SCLIB_ColdReset</STRONG> (ARM, 128 bytes, Stack size 16 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SCLIB_ColdReset &rArr; _SCLIB_ParseATR &rArr; _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_UpdateCardCapabilities
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ParseATR
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
</UL>

<P><STRONG><a name="[45c]"></a>SCLIB_Activate</STRONG> (ARM, 204 bytes, Stack size 32 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SCLIB_Activate &rArr; SCLIB_ColdReset &rArr; _SCLIB_ParseATR &rArr; _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ResetReader
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_IsCardInserted
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetInterfaceClock
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_ColdReset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_WarmReset
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_ActivateDelay
</UL>

<P><STRONG><a name="[710]"></a>SCLIB_ActivateDelay</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sclib_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
</UL>

<P><STRONG><a name="[711]"></a>SCLIB_Deactivate</STRONG> (ARM, 360 bytes, Stack size 16 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCLIB_Deactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopAllTimer
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ClearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
</UL>

<P><STRONG><a name="[45d]"></a>SCLIB_GetCardInfo</STRONG> (ARM, 116 bytes, Stack size 16 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCLIB_GetCardInfo &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_IsCardInserted
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
</UL>

<P><STRONG><a name="[714]"></a>SCLIB_StartTransmission</STRONG> (ARM, 204 bytes, Stack size 40 bytes, sclib_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopAllTimer
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_IsCardInserted
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
</UL>

<P><STRONG><a name="[717]"></a>SCLIB_SetIFSD</STRONG> (ARM, 172 bytes, Stack size 32 bytes, sclib_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendSBlock
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetNAD
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetLEN
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetBlockType
</UL>

<P><STRONG><a name="[72a]"></a>SCLIB_RequestTimeExtension</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sclib_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ProcessSBlock
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
</UL>

<P><STRONG><a name="[71c]"></a>SCLIB_CheckCDEvent</STRONG> (ARM, 420 bytes, Stack size 32 bytes, sclib_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopAllTimer
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ClearFIFO
</UL>

<P><STRONG><a name="[458]"></a>SCLIB_CheckTimeOutEvent</STRONG> (ARM, 276 bytes, Stack size 24 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCLIB_CheckTimeOutEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC0_IRQHandler
</UL>

<P><STRONG><a name="[459]"></a>SCLIB_CheckTxRxEvent</STRONG> (ARM, 1052 bytes, Stack size 40 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = SCLIB_CheckTxRxEvent &rArr; SC_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopTimer
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StartTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC0_IRQHandler
</UL>

<P><STRONG><a name="[45a]"></a>SCLIB_CheckErrorEvent</STRONG> (ARM, 668 bytes, Stack size 36 bytes, sclib_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCLIB_CheckErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC0_IRQHandler
</UL>

<P><STRONG><a name="[6cb]"></a>vListInitialise</STRONG> (ARM, 44 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[6e6]"></a>vListInitialiseItem</STRONG> (ARM, 12 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[6e4]"></a>vListInsertEnd</STRONG> (ARM, 48 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6ed]"></a>vListInsert</STRONG> (ARM, 96 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[6e9]"></a>uxListRemove</STRONG> (ARM, 76 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6e7]"></a>pxPortInitialiseStack</STRONG> (ARM, 216 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[6f8]"></a>vPortEndScheduler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[6f6]"></a>xPortStartScheduler</STRONG> (ARM, 20 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = xPortStartScheduler &rArr; prvSetupTimerInterrupt &rArr; initTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[6c8]"></a>vPortEnterCritical</STRONG> (ARM, 36 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[6cc]"></a>vPortExitCritical</STRONG> (ARM, 68 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[70d]"></a>_SCLIB_GetInterfaceClock</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Activate
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_UpdateCardCapabilities
</UL>

<P><STRONG><a name="[70a]"></a>_SCLIB_UpdateCardCapabilities</STRONG> (ARM, 1048 bytes, Stack size 64 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow2
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetInterfaceClock
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ParseATR
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_ColdReset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_WarmReset
</UL>

<P><STRONG><a name="[70b]"></a>_SCLIB_ParseATR</STRONG> (ARM, 704 bytes, Stack size 56 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _SCLIB_ParseATR &rArr; _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetReaderParameter
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ExchangePPS
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_UpdateCardCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_ColdReset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_WarmReset
</UL>

<P><STRONG><a name="[727]"></a>_SCLIB_StartColdReset</STRONG> (ARM, 576 bytes, Stack size 40 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _SCLIB_StartColdReset &rArr; SC_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
</UL>

<P><STRONG><a name="[709]"></a>_SCLIB_ResetCard</STRONG> (ARM, 268 bytes, Stack size 24 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = _SCLIB_ResetCard &rArr; _SCLIB_StartColdReset &rArr; SC_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopAllTimer
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ResetReader
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartColdReset
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartWarmReset
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetBaudrate
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_ColdReset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_WarmReset
</UL>

<P><STRONG><a name="[729]"></a>_SCLIB_BuildT0TPDU</STRONG> (ARM, 188 bytes, Stack size 12 bytes, sclib_t0protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
</UL>

<P><STRONG><a name="[715]"></a>_SCLIB_T0Transmit</STRONG> (ARM, 1124 bytes, Stack size 56 bytes, sclib_t0protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopTimer
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StartTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_BuildT0TPDU
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_RequestTimeExtension
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_StartTransmission
</UL>

<P><STRONG><a name="[719]"></a>_SCLIB_GetBlockType</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1BlockRetransmitCheck
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_SetIFSD
</UL>

<P><STRONG><a name="[71a]"></a>_SCLIB_GetLEN</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_SetIFSD
</UL>

<P><STRONG><a name="[71b]"></a>_SCLIB_GetNAD</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_SetIFSD
</UL>

<P><STRONG><a name="[72e]"></a>_SCLIB_SendBlock</STRONG> (ARM, 312 bytes, Stack size 16 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopTimer
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StartTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_PrecessT1Response
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_CalcT1Chksum
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetBlockType
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendIBlock
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendRBlock
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendSBlock
</UL>

<P><STRONG><a name="[72f]"></a>_SCLIB_SendIBlock</STRONG> (ARM, 160 bytes, Stack size 16 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
</UL>

<P><STRONG><a name="[718]"></a>_SCLIB_SendSBlock</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ProcessSBlock
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_SetIFSD
</UL>

<P><STRONG><a name="[731]"></a>_SCLIB_ProcessSBlock</STRONG> (ARM, 492 bytes, Stack size 24 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetINF
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_RequestTimeExtension
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendSBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
</UL>

<P><STRONG><a name="[733]"></a>_SCLIB_StartT1Transmission</STRONG> (ARM, 1320 bytes, Stack size 80 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ProcessSBlock
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendIBlock
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1SelectErrcode
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendRBlock
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1BlockRetransmitCheck
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetBlockType
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
</UL>

<P><STRONG><a name="[716]"></a>_SCLIB_T1Transmit</STRONG> (ARM, 396 bytes, Stack size 56 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ProcessSBlock
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendSBlock
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetBlockType
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_StartTransmission
</UL>

<P><STRONG><a name="[22c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRelease (via BLX)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc (via BLX)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free (via BLX)
</UL>

<P><STRONG><a name="[3a7]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_register
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_mod_by_eb
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[7fa]"></a>_ll_udiv</STRONG> (ARM, 752 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[7fb]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>__aeabi_llsl</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_bbt_region
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbts
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bbt
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real (via BLX)
</UL>

<P><STRONG><a name="[7fc]"></a>_ll_shift_l</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>__aeabi_llsr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_bbt_descr
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_bbt_region
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbt
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_flash_type
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_oob
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
</UL>

<P><STRONG><a name="[7fd]"></a>_ll_ushift_r</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>__aeabi_lasr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_isbad_bbt
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_oob
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_block_markbad
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_bad
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
</UL>

<P><STRONG><a name="[7fe]"></a>_ll_sshift_r</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[680]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
</UL>

<P><STRONG><a name="[736]"></a>_ll_sdiv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[49c]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp (via BLX)
</UL>

<P><STRONG><a name="[1ea]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf (via BLX)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat (via BLX)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData (via BLX)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback (via BLX)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData (via BLX)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData (via BLX)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterGetCurrentDCFFileName (via BLX)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine (via BLX)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statusExecuteFunc (via BLX)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeProcess (via BLX)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile (via BLX)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile (via BLX)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls (via BLX)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModemAgentTask (via BLX)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask (via BLX)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTCTimeToString (via BLX)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList (via BLX)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCallback (via BLX)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile (via BLX)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile (via BLX)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile (via BLX)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile (via BLX)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentLogFileName (via BLX)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage (via BLX)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientSendFile (via BLX)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile (via BLX)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile (via BLX)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData (via BLX)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_register (via BLX)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure (via BLX)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr (via BLX)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number (via BLX)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList (via BLX)
</UL>

<P><STRONG><a name="[73a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[73b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[739]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1ae]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[7ff]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[740]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[38b]"></a>qsort</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortTariffFile (via BLX)
</UL>

<P><STRONG><a name="[3e6]"></a>strchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile (via BLX)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr (via BLX)
</UL>

<P><STRONG><a name="[361]"></a>memcmp</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor (via BLX)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto (via BLX)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd (via BLX)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite (via BLX)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pattern_no_oob (via BLX)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserString (via BLX)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findStartAddress (via BLX)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fineCurrentCmdRegType (via BLX)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd (via BLX)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block (via BLX)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written (via BLX)
</UL>

<P><STRONG><a name="[2ae]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile (via BLX)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData (via BLX)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit (via BLX)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir (via BLX)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig (via BLX)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffCallback (via BLX)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList (via BLX)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataParserWebPostReturnData (via BLX)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value (via BLX)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array (via BLX)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object (via BLX)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr (via BLX)
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path (via BLX)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name (via BLX)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name (via BLX)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name (via BLX)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh (via BLX)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer (via BLX)
</UL>

<P><STRONG><a name="[214]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf (via BLX)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData (via BLX)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData (via BLX)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData (via BLX)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeTransactionRoutine (via BLX)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile (via BLX)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFileCallback (via BLX)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir (via BLX)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig (via BLX)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls (via BLX)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile (via BLX)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList (via BLX)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile (via BLX)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage (via BLX)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure (via BLX)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd (via BLX)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserString (via BLX)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData (via BLX)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fineCurrentCmdRegType (via BLX)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value (via BLX)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array (via BLX)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object (via BLX)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update (via BLX)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup (via BLX)
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path (via BLX)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set (via BLX)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_list (via BLX)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length (via BLX)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj (via BLX)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name (via BLX)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str (via BLX)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name (via BLX)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name (via BLX)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_file_size (via BLX)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList (via BLX)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer (via BLX)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink (via BLX)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir (via BLX)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckNameLength (via BLX)
</UL>

<P><STRONG><a name="[4b5]"></a>strncmp</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value (via BLX)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find (via BLX)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name (via BLX)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename (via BLX)
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink (via BLX)
</UL>

<P><STRONG><a name="[5ac]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name (via BLX)
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStorageValue
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd2_read_chunk_tags
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateBannerLinePositionInfo
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_transfer_oob
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_fill_oob
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preProcessCmdData
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_used
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_find
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_list
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_get
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_oob_hwecc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_page_hwecc_oob_first
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_write_page_hwecc
</UL>

<P><STRONG><a name="[744]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[800]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_GetCardInfo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFileAgentTask
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[801]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[802]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[803]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_spare_init
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_mark_bad
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_write_page_hwecc
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStorageValue
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStorageValue
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_GetCardInfo
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_tail
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAFFS_InitializeMemoryPool
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_alt_dir_path
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_handle_hole
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T1Transmit
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readlink
</UL>

<P><STRONG><a name="[746]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[745]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Open
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOpen
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartGetRegisterValue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMemoryInfo
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetJsonTariff
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTariffFileName
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPhotoAgentTakePhotoTask
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIT8951SystemInfo
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_create_default_bbt_descr
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_nand_init
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_InitHandles
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_clear
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blocks
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_tmp_buffers
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ParseATR
</UL>

<P><STRONG><a name="[804]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[805]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[747]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3e7]"></a>strncpy</STRONG> (ARM, 104 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_name_from_oh
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_oh_from_name
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readlink
</UL>

<P><STRONG><a name="[368]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFileCallback
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTariffName
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsFormat
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mtd_device_nm
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printParaValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyPara
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDeviceIDPositionInfo
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateExpiredTitle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpaceStatus
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterCurrentSelSpace
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainBG
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBannerLine
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyKeyCallback
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllScreen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCar
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBanner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDeviceId
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawUpperLine
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCarPositionInfoIndex
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDepositTimePositionInfo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainNumberPositionInfo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainPositionInfo
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateBannerLinePositionInfo
</UL>

<P><STRONG><a name="[806]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaLibResetDepositEndTime
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetJsonPara
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDepositResultStatusCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDeviceIDPositionInfo
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDepositTimeBmpIdInfo
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDepositTimePositionInfo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainNumberPositionInfo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateContainPositionInfo
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateBannerLinePositionInfo
</UL>

<P><STRONG><a name="[807]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>mktime</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time (via BLX)
</UL>

<P><STRONG><a name="[808]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cSetSpeed
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetSpeed
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DoFrequencyCompensation
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDifferenceLedNumber
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerProcess
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fepgmtime
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromTime
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_rd_data_error
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime (via BLX)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry (via BLX)
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
</UL>

<P><STRONG><a name="[737]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower (via BLX)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace (via BLX)
</UL>

<P><STRONG><a name="[735]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>

<P><STRONG><a name="[759]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via BLX)
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via BLX)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value (via BLX)
</UL>

<P><STRONG><a name="[809]"></a>__errno</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[80a]"></a>__rt_errno_addr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[73f]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80b]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[74f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 618 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via BLX)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[738]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[19d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[752]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[1b5]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[756]"></a>__strtod_int</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod (via BLX)
</UL>

<P><STRONG><a name="[73e]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real (via BLX)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via BLX)
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[74e]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1a2]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[751]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a0]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[74a]"></a>_btod_etento</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[765]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[75c]"></a>_scanf_really_real</STRONG> (Thumb, 712 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow (via BLX)
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan (via BLX)
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real (via BLX)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (via Veneer)
</UL>

<P><STRONG><a name="[1c0]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[758]"></a>__aeabi_lmul</STRONG> (ARM, 0 bytes, Stack size 4 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value (via BLX)
</UL>

<P><STRONG><a name="[80c]"></a>_ll_mul</STRONG> (ARM, 24 bytes, Stack size 4 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[762]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>

<P><STRONG><a name="[763]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat (via Veneer)
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp (via BLX)
</UL>

<P><STRONG><a name="[764]"></a>_scanf_really_hex_real</STRONG> (Thumb, 794 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via BLX)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow (via BLX)
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real (via Veneer)
</UL>

<P><STRONG><a name="[791]"></a>_scanf_really_infnan</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan (via Veneer)
</UL>

<P><STRONG><a name="[80d]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[1ff]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetSpeed
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartSetBaudRate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLL
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetValue
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDeviceIDPositionInfo
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterGetCurrentDCFFileName
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMeterDepositTime
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Open
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_dev_ls
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct08ActionCmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fepgmtime
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromCost
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromTime
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerDrvTask
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCLIB_CheckTxRxEvent
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryDrvTask
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBuzzerDrvTask
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerPlay
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentLogFileName
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_tail
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_subpage
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_null_name
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_sort (via BLX)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartWarmReset
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetBaudrate
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_UpdateCardCapabilities
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_T0Transmit
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetInterfaceClock
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSM_CorrectData_BCH
</UL>

<P><STRONG><a name="[74b]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[76c]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[76b]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[76f]"></a>__btod_div_common</STRONG> (ARM, 712 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[76d]"></a>_e2d</STRONG> (ARM, 88 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[76e]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[74c]"></a>_btod_ediv</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[75b]"></a>_btod_edivd</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value (via BLX)
</UL>

<P><STRONG><a name="[74d]"></a>_btod_emul</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via BLX)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[75a]"></a>_btod_emuld</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value (via BLX)
</UL>

<P><STRONG><a name="[770]"></a>__btod_mult_common</STRONG> (ARM, 612 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[720]"></a>vPortStartFirstTask</STRONG> (ARM, 0 bytes, Stack size unknown bytes, portasm.o(PORT_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6ca]"></a>vPortYield2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, portasm.o(PORT_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[10f]"></a>vPortYieldProcessor</STRONG> (ARM, 0 bytes, Stack size unknown bytes, portasm.o(PORT_ASM))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[112]"></a>vFreeRTOS_ISR</STRONG> (ARM, 0 bytes, Stack size unknown bytes, portasm.o(PORT_ASM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = vFreeRTOS_ISR &rArr; sysIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[21c]"></a>sysSetupCP15</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_nuc970.o(SYS_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[21d]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_nuc970.o(SYS_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
</UL>

<P><STRONG><a name="[750]"></a>__ARM_fpclassify</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via BLX)
</UL>

<P><STRONG><a name="[772]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[75f]"></a>__mathlib_narrow</STRONG> (ARM, 24 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real (via BLX)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real (via BLX)
</UL>

<P><STRONG><a name="[774]"></a>__mathlib_tofloat</STRONG> (ARM, 196 bytes, Stack size 16 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[766]"></a>__support_ldexp</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real (via BLX)
</UL>

<P><STRONG><a name="[741]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4ab]"></a>floor</STRONG> (ARM, 284 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[775]"></a>frexp</STRONG> (ARM, 108 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[776]"></a>ldexp</STRONG> (ARM, 192 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via BLX)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[4a0]"></a>strtod</STRONG> (ARM, 48 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[19e]"></a>_get_lc_ctype</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1ba]"></a>_get_lc_numeric</STRONG> (ARM, 72 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via BLX)
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[779]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[777]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[77c]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[77f]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[783]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[27c]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
</UL>

<P><STRONG><a name="[781]"></a>_ddiv</STRONG> (ARM, 584 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4a8]"></a>__aeabi_cdcmpeq</STRONG> (ARM, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[782]"></a>_dcmpeq</STRONG> (ARM, 148 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[4a3]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[784]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateTransactionStatusData
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateExpiredStatusData
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[80e]"></a>_dflt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[37a]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateStatusData
</UL>

<P><STRONG><a name="[80f]"></a>_dfltu</STRONG> (ARM, 44 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[4a2]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_SetNumberHelper
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[785]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[788]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[4aa]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[786]"></a>_dmul</STRONG> (ARM, 364 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[77b]"></a>__fpl_dnaninf</STRONG> (ARM, 184 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[77e]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[4a1]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_SetNumberHelper
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[787]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[778]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[789]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[4a9]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[78b]"></a>_dsub</STRONG> (ARM, 508 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
</UL>

<P><STRONG><a name="[78c]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
</UL>

<P><STRONG><a name="[78e]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
</UL>

<P><STRONG><a name="[810]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[27a]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
</UL>

<P><STRONG><a name="[78f]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[78d]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[77a]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[6]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real (via BLX)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value (via BLX)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via BLX)
</UL>

<P><STRONG><a name="[1ab]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[780]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[773]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[755]"></a>_scanf_real</STRONG> (ARM, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf (via BLX)
</UL>

<P><STRONG><a name="[75e]"></a>_scanf_hex_real</STRONG> (ARM, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real (via BLX)
</UL>

<P><STRONG><a name="[75d]"></a>_scanf_infnan</STRONG> (ARM, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real (via BLX)
</UL>

<P><STRONG><a name="[790]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c5]"></a>printSysInfo</STRONG> (ARM, 1200 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = printSysInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>

<P><STRONG><a name="[1c8]"></a>debugProcess</STRONG> (ARM, 964 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = debugProcess &rArr; FileAgentFatfsListFile &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printParaValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showMemoryInfo
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_showFreeHeapSize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetFileName
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetCurrentTariffType
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpStageIndex
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupStageIndex
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRTC
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvSetEnable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentStartTakePhoto
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateLedHeartbeat
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetErrorTimes
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFs
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatFsAutoFormatCounter
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatfsListFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatfsDeleteFile
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSetReceiveDebugFlag
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printSysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDebugTask
</UL>

<P><STRONG><a name="[1e1]"></a>deviceHwInit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = deviceHwInit &rArr; RTC_Init &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e4]"></a>driverInit</STRONG> (ARM, 192 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = driverInit &rArr; MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvInitTask
</UL>

<P><STRONG><a name="[116]"></a>vDrvInitTask</STRONG> (ARM, 1584 bytes, Stack size 256 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7752 + Unknown Stack Size
<LI>Call Chain = vDrvInitTask &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSetBuildVer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowErrorID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>vHWTestTask</STRONG> (ARM, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = vHWTestTask &rArr; HWTesterInit &rArr; LedDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>vDebugTask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = vDebugTask &rArr; debugProcess &rArr; FileAgentFatfsListFile &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[211]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[212]"></a>sysPutNumber</STRONG> (ARM, 344 bytes, Stack size 80 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[213]"></a>FormatItem</STRONG> (ARM, 576 bytes, Stack size 40 bytes, sys_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[10e]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[110]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[111]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[113]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[21f]"></a>_uartRxBufGetNextOne</STRONG> (ARM, 40 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReadRxBuf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>

<P><STRONG><a name="[21e]"></a>_uartReceiveChars</STRONG> (ARM, 744 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _uartReceiveChars &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartRxBufGetNextOne
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0ISR
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
</UL>

<P><STRONG><a name="[224]"></a>_uartDisableInterrupt</STRONG> (ARM, 64 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRelease
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
</UL>

<P><STRONG><a name="[223]"></a>_uartTxBufGetNextOne</STRONG> (ARM, 40 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartWriteTxBuf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckTxBufSpace
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
</UL>

<P><STRONG><a name="[222]"></a>_uartTransmitChars</STRONG> (ARM, 148 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _uartTransmitChars
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTxBufGetNextOne
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0ISR
</UL>

<P><STRONG><a name="[227]"></a>_uartEnableInterrupt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartWriteTxBuf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>

<P><STRONG><a name="[226]"></a>_uartCheckModemStatus</STRONG> (ARM, 148 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _uartCheckModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
</UL>

<P><STRONG><a name="[229]"></a>_uartSetBaudRate</STRONG> (ARM, 92 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _uartSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>

<P><STRONG><a name="[22a]"></a>_uartInstallISR</STRONG> (ARM, 444 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _uartInstallISR &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>

<P><STRONG><a name="[22b]"></a>_uartBUFSpaceAlloc</STRONG> (ARM, 236 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>

<P><STRONG><a name="[22f]"></a>_uartCheckTxBufSpace</STRONG> (ARM, 144 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _uartCheckTxBufSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTxBufGetNextOne
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[230]"></a>_uartReadRxBuf</STRONG> (ARM, 208 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _uartReadRxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartRxBufGetNextOne
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
</UL>

<P><STRONG><a name="[231]"></a>_uartWriteTxBuf</STRONG> (ARM, 212 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _uartWriteTxBuf &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTxBufGetNextOne
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[232]"></a>_uartConfigureUART</STRONG> (ARM, 832 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartSetBaudRate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[23c]"></a>_uartPerformIrDA</STRONG> (ARM, 168 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _uartPerformIrDA
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[233]"></a>_uartGetRegisterValue</STRONG> (ARM, 548 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _uartGetRegisterValue &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[122]"></a>RTC_ISR</STRONG> (ARM, 328 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_ISR &rArr; RTC_Ioctl &rArr;  RTC_Ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Ioctl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteEnable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>spi0ISR</STRONG> (ARM, 28 bytes, Stack size 0 bytes, spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>spi1ISR</STRONG> (ARM, 28 bytes, Stack size 0 bytes, spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>spiSetSpeed</STRONG> (ARM, 64 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
</UL>

<P><STRONG><a name="[255]"></a>_i2cSetSpeed</STRONG> (ARM, 76 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _i2cSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cIoctl
</UL>

<P><STRONG><a name="[256]"></a>_i2cCommand</STRONG> (ARM, 28 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1ISR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ISR
</UL>

<P><STRONG><a name="[260]"></a>_i2cCalcAddr</STRONG> (ARM, 104 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _i2cCalcAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[25b]"></a>_i2cReset</STRONG> (ARM, 28 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOpen
</UL>

<P><STRONG><a name="[125]"></a>i2c0ISR</STRONG> (ARM, 520 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2c0ISR &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>i2c1ISR</STRONG> (ARM, 568 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2c1ISR &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.text)
</UL>
<P><STRONG><a name="[276]"></a>ETIMER_GetModuleClock</STRONG> (ARM, 100 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ETIMER_GetModuleClock &rArr; sysGetClock &rArr; sysGetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Delay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Open
</UL>

<P><STRONG><a name="[27f]"></a>userInit</STRONG> (ARM, 148 bytes, Stack size 8 bytes, user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = userInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
</UL>

<P><STRONG><a name="[280]"></a>updateBG</STRONG> (ARM, 324 bytes, Stack size 16 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainBG
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBannerLine
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyTimerCallback
</UL>

<P><STRONG><a name="[288]"></a>updateData</STRONG> (ARM, 56 bytes, Stack size 16 bytes, guistandby.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiStandbyTimerCallback
</UL>

<P><STRONG><a name="[128]"></a>redrawscreen</STRONG> (ARM, 12 bytes, Stack size 8 bytes, guimanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = redrawscreen &rArr; GuiManagerRefreshScreen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerRefreshScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimanager.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>MeterDataPreOffCallback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, meterdata.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>MeterDataOffCallback</STRONG> (ARM, 76 bytes, Stack size 16 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MeterDataOffCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>MeterDataOnCallback</STRONG> (ARM, 64 bytes, Stack size 16 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MeterDataOnCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>MeterDataCheckStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, meterdata.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[296]"></a>getSpaceStatus</STRONG> (ARM, 92 bytes, Stack size 16 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSpaceStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpaceStatus
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
</UL>

<P><STRONG><a name="[4f]"></a>updateTariffDataRoutine</STRONG> (ARM, 20 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = updateTariffDataRoutine &rArr; TariffUpdateCurrentTariffData &rArr; updateCurrentTariffData &rArr; MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>updateTariffDataRoutineCondition</STRONG> (ARM, 88 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateTariffDataRoutineCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerCompareCurrentScreenId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>sendLedHeartbeatRoutine</STRONG> (ARM, 20 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sendLedHeartbeatRoutine &rArr; LedSendHeartbeat &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendHeartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateLedHeartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>takePhotoRoutine</STRONG> (ARM, 24 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = takePhotoRoutine &rArr; PhotoAgentStartTakePhoto &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentStartTakePhoto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>takeTransactionRoutine</STRONG> (ARM, 448 bytes, Stack size 408 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7544 + Unknown Stack Size
<LI>Call Chain = takeTransactionRoutine &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentStartTakePhoto
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2RTC
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsonCmdCreateTransactionStatusData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterGetCurrentDCFFileName
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>modemAgentTransmitRoutine</STRONG> (ARM, 120 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = modemAgentTransmitRoutine &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
</UL>
<BR>[Address Reference Count : 2]<UL><LI> meterdata.o(.data)
<LI> meterdata.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>routineCounterTimer</STRONG> (ARM, 332 bytes, Stack size 16 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = routineCounterTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMeterDataProcessTask
</UL>

<P><STRONG><a name="[129]"></a>vMeterDataProcessTask</STRONG> (ARM, 564 bytes, Stack size 0 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7840 + Unknown Stack Size
<LI>Call Chain = vMeterDataProcessTask &rArr; AutoUpdateMeterData &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetFileName
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetCurrentTariffType
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;routineCounterTimer
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerCompareCurrentScreenId
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meterdata.o(.text)
</UL>
<P><STRONG><a name="[2aa]"></a>getEpmID</STRONG> (ARM, 84 bytes, Stack size 8 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = getEpmID &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[2ab]"></a>swInit</STRONG> (ARM, 364 bytes, Stack size 24 bytes, meterdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7864 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; AutoUpdateMeterData &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDeviceIDPositionInfo
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLibInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoUpdateMeterData
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEpmID
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataInit
</UL>

<P><STRONG><a name="[2b0]"></a>applyData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, meterdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataInit
</UL>

<P><STRONG><a name="[2b4]"></a>updateBG</STRONG> (ARM, 312 bytes, Stack size 16 bytes, guiselspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainBG
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceTimerCallback
</UL>

<P><STRONG><a name="[2b5]"></a>updateData</STRONG> (ARM, 168 bytes, Stack size 16 bytes, guiselspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; UpdateClock &rArr; ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelSpaceTimerCallback
</UL>

<P><STRONG><a name="[2b6]"></a>updateBG</STRONG> (ARM, 112 bytes, Stack size 16 bytes, guiseltime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDDrawCost &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainSelTime
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeTimerCallback
</UL>

<P><STRONG><a name="[2ba]"></a>updateData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, guiseltime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; EPDDrawCost &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSelTimeTimerCallback
</UL>

<P><STRONG><a name="[2bc]"></a>updateBG</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guireaderinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitTimerCallback
</UL>

<P><STRONG><a name="[2be]"></a>checkReader</STRONG> (ARM, 68 bytes, Stack size 8 bytes, guireaderinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = checkReader &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderGetBootedStatus
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReaderInitTimerCallback
</UL>

<P><STRONG><a name="[2bf]"></a>updateBG</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guideposit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositTimerCallback
</UL>

<P><STRONG><a name="[12a]"></a>setDepositResultStatusCallback</STRONG> (ARM, 612 bytes, Stack size 608 bytes, guideposit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8104 + Unknown Stack Size
<LI>Call Chain = setDepositResultStatusCallback &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentStartTakePhoto
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentStartSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAddTimeEx
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterStorageFlush
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterStorageData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendData
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guideposit.o(.text)
</UL>
<P><STRONG><a name="[2c2]"></a>readerProcess</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guideposit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = readerProcess &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderProcess
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositTimerCallback
</UL>

<P><STRONG><a name="[2c5]"></a>updateBG</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guidepositfail.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDDrawContainByID &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositFailTimerCallback
</UL>

<P><STRONG><a name="[2c6]"></a>updateBG</STRONG> (ARM, 84 bytes, Stack size 16 bytes, guidepositok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDDrawCost &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiDepositOKTimerCallback
</UL>

<P><STRONG><a name="[2c9]"></a>batteryStatus2EpdId</STRONG> (ARM, 220 bytes, Stack size 0 bytes, guireplacebp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
</UL>

<P><STRONG><a name="[2c7]"></a>updateContain</STRONG> (ARM, 372 bytes, Stack size 24 bytes, guireplacebp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = updateContain &rArr; ShowVoltage &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetValue
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatteryStatus
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryStatus2EpdId
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[2cc]"></a>updateBG</STRONG> (ARM, 72 bytes, Stack size 16 bytes, guireplacebp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; updateContain &rArr; ShowVoltage &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPTimerCallback
</UL>

<P><STRONG><a name="[2cd]"></a>updateData</STRONG> (ARM, 40 bytes, Stack size 16 bytes, guireplacebp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; updateContain &rArr; ShowVoltage &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiReplaceBPTimerCallback
</UL>

<P><STRONG><a name="[2cf]"></a>updateContain</STRONG> (ARM, 4 bytes, Stack size 0 bytes, guitester.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[2ce]"></a>updateBG</STRONG> (ARM, 72 bytes, Stack size 16 bytes, guitester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterTimerCallback
</UL>

<P><STRONG><a name="[2d0]"></a>updateData</STRONG> (ARM, 40 bytes, Stack size 16 bytes, guitester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterTimerCallback
</UL>

<P><STRONG><a name="[2d2]"></a>updateContain</STRONG> (ARM, 4 bytes, Stack size 0 bytes, guitesterkeypad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateData
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBG
</UL>

<P><STRONG><a name="[2d1]"></a>updateBG</STRONG> (ARM, 72 bytes, Stack size 16 bytes, guitesterkeypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadTimerCallback
</UL>

<P><STRONG><a name="[2d3]"></a>updateData</STRONG> (ARM, 40 bytes, Stack size 16 bytes, guitesterkeypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateContain
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTesterKeypadTimerCallback
</UL>

<P><STRONG><a name="[2d6]"></a>getStorageChecksum</STRONG> (ARM, 68 bytes, Stack size 12 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getStorageChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStorageValue
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterStorageFlush
</UL>

<P><STRONG><a name="[2d5]"></a>resetStorageValue</STRONG> (ARM, 88 bytes, Stack size 8 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = resetStorageValue &rArr; printParaValue &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printParaValue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStorageChecksum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[2d7]"></a>checkStorageValue</STRONG> (ARM, 436 bytes, Stack size 32 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = checkStorageValue &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[2d8]"></a>loadStorageValue</STRONG> (ARM, 160 bytes, Stack size 48 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5648 + Unknown Stack Size
<LI>Call Chain = loadStorageValue &rArr; FileAgentGetData &rArr; processRead &rArr; fatfsAutoGetFromFile &rArr; fatfsGetFromFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetData
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[2da]"></a>saveStorageValue</STRONG> (ARM, 176 bytes, Stack size 40 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7176 + Unknown Stack Size
<LI>Call Chain = saveStorageValue &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterStorageFlush
</UL>

<P><STRONG><a name="[2db]"></a>resetJsonPara</STRONG> (ARM, 44 bytes, Stack size 8 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resetJsonPara
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParaFileName
</UL>

<P><STRONG><a name="[2dc]"></a>loadJsonParaFile</STRONG> (ARM, 916 bytes, Stack size 64 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7200 + Unknown Stack Size
<LI>Call Chain = loadJsonParaFile &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetErrorPtr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetData
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraCallback
</UL>

<P><STRONG><a name="[12b]"></a>paraCallback</STRONG> (ARM, 316 bytes, Stack size 32 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7232 + Unknown Stack Size
<LI>Call Chain = paraCallback &rArr; loadJsonParaFile &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonParaFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> paralib.o(.text)
</UL>
<P><STRONG><a name="[2e0]"></a>loadParaFileName</STRONG> (ARM, 84 bytes, Stack size 24 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = loadParaFileName &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetList
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetJsonPara
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataReloadParaFile
</UL>

<P><STRONG><a name="[2e2]"></a>applyPara</STRONG> (ARM, 44 bytes, Stack size 16 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = applyPara &rArr; calculatePreparePositionInfo &rArr; calculateDepositTimePositionInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataReloadParaFile
</UL>

<P><STRONG><a name="[2e5]"></a>swInit</STRONG> (ARM, 600 bytes, Stack size 32 bytes, paralib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7208 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; saveStorageValue &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printParaValue
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataReloadParaFile
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStorageValue
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStorageValue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkStorageValue
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStorageValue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStorageChecksum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaLibInit
</UL>

<P><STRONG><a name="[2e7]"></a>updateBG</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guifiledownload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFileDownloadTimerCallback
</UL>

<P><STRONG><a name="[2e8]"></a>updateData</STRONG> (ARM, 80 bytes, Stack size 16 bytes, guifiledownload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateData &rArr; GuiManagerShowScreen &rArr; GuiSetInstance &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffGetFileName
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterPara
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerShowScreen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFileDownloadTimerCallback
</UL>

<P><STRONG><a name="[2e9]"></a>updateBG</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guifree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeTimerCallback
</UL>

<P><STRONG><a name="[2ea]"></a>updateData</STRONG> (ARM, 16 bytes, Stack size 8 bytes, guifree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = updateData &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFreeTimerCallback
</UL>

<P><STRONG><a name="[2eb]"></a>updateBG</STRONG> (ARM, 68 bytes, Stack size 16 bytes, guioff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = updateBG &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffTimerCallback
</UL>

<P><STRONG><a name="[2ec]"></a>updateData</STRONG> (ARM, 16 bytes, Stack size 8 bytes, guioff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = updateData &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiOffTimerCallback
</UL>

<P><STRONG><a name="[6a]"></a>exitTest</STRONG> (ARM, 12 bytes, Stack size 0 bytes, hwtester.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[2ed]"></a>getTerminalChar</STRONG> (ARM, 96 bytes, Stack size 8 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTerminalChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerLoop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batterySelect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable12vPower
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsAdjustKeypad
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalSelect
</UL>

<P><STRONG><a name="[2ee]"></a>terminalSelect</STRONG> (ARM, 32 bytes, Stack size 8 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = terminalSelect &rArr; getTerminalChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
</UL>

<P><STRONG><a name="[2ef]"></a>testFailure</STRONG> (ARM, 88 bytes, Stack size 8 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = testFailure &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
</UL>

<P><STRONG><a name="[2f1]"></a>testSuccessful</STRONG> (ARM, 132 bytes, Stack size 8 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = testSuccessful &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
</UL>

<P><STRONG><a name="[2f2]"></a>actionTestItem</STRONG> (ARM, 700 bytes, Stack size 40 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = actionTestItem &rArr; testSuccessful &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFailure
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;totalTest
</UL>

<P><STRONG><a name="[59]"></a>totalTest</STRONG> (ARM, 76 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = totalTest &rArr; actionTestItem &rArr; testSuccessful &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[2f3]"></a>printTestItemChar</STRONG> (ARM, 100 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = printTestItemChar &rArr; terninalPrintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
</UL>

<P><STRONG><a name="[2f4]"></a>enterMunu</STRONG> (ARM, 224 bytes, Stack size 40 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = enterMunu &rArr; actionTestItem &rArr; testSuccessful &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTestItemChar
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionTestItem
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWTesterInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolsFunction
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleTest
</UL>

<P><STRONG><a name="[5a]"></a>singleTest</STRONG> (ARM, 40 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = singleTest &rArr; enterMunu &rArr; actionTestItem &rArr; testSuccessful &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>toolsFunction</STRONG> (ARM, 40 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = toolsFunction &rArr; enterMunu &rArr; actionTestItem &rArr; testSuccessful &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterMunu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[2f9]"></a>LEDColorBuffSet</STRONG> (ARM, 352 bytes, Stack size 0 bytes, hwtester.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
</UL>

<P><STRONG><a name="[2f5]"></a>LEDBoardLightSet</STRONG> (ARM, 40 bytes, Stack size 8 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LEDBoardLightSet &rArr; LedSetColor &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricityAllTest
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricitySingleTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchAllTest
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redSwitchSingleTest
</UL>

<P><STRONG><a name="[2f6]"></a>getDifferenceLedNumber</STRONG> (ARM, 168 bytes, Stack size 24 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getDifferenceLedNumber &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prowaveSingleTest
</UL>

<P><STRONG><a name="[5c]"></a>buzzerTest</STRONG> (ARM, 40 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = buzzerTest &rArr; BuzzerPlay &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LEDTest</STRONG> (ARM, 92 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LEDTest &rArr; LedDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSendFactoryTest
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>redSwitchSingleTest</STRONG> (ARM, 336 bytes, Stack size 24 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = redSwitchSingleTest &rArr; DipDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>redSwitchAllTest</STRONG> (ARM, 640 bytes, Stack size 32 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = redSwitchAllTest &rArr; DipDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>electricitySingleTest</STRONG> (ARM, 288 bytes, Stack size 24 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = electricitySingleTest &rArr; DipDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>electricityAllTest</STRONG> (ARM, 500 bytes, Stack size 32 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = electricityAllTest &rArr; DipDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>epdTest</STRONG> (ARM, 112 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = epdTest &rArr; EpdDrvInit &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>suspendSystem</STRONG> (ARM, 40 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = suspendSystem &rArr; PowerSuspend &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerClearISR
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyPadSingleTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>keyPadSingleTest</STRONG> (ARM, 616 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = keyPadSingleTest &rArr; NT066EDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetPower
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetChip
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvSetCallbackFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspendSystem
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvSetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>keyPadAllTest</STRONG> (ARM, 412 bytes, Stack size 32 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = keyPadAllTest &rArr; NT066EDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetPower
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetChip
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvSetCallbackFunc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDrvSetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>modemTest</STRONG> (ARM, 172 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8072 + Unknown Stack Size
<LI>Call Chain = modemTest &rArr; QModemATCmdTest &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemLibInit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemATCmdTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>RTCTest</STRONG> (ARM, 212 bytes, Stack size 96 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RTCTest &rArr; terninalPrintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentUTCTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>readerTest</STRONG> (ARM, 144 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = readerTest &rArr; CardReaderInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderInit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderGetBootedStatus
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderSetPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>sFlashTest</STRONG> (ARM, 488 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = sFlashTest &rArr; FlashDrvExInitialize &rArr; swInit &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetChipID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>smartCardTest</STRONG> (ARM, 76 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = smartCardTest &rArr; SmartCardDrvInit &rArr; SCLIB_Activate &rArr; SCLIB_ColdReset &rArr; _SCLIB_ParseATR &rArr; _SCLIB_UpdateCardCapabilities &rArr; _SCLIB_GetInterfaceClock
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCardDrvInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>cameraTest</STRONG> (ARM, 76 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = cameraTest &rArr; PCT08ReadVerInfo &rArr; pct08ActionCmd &rArr; PCT08FlushTxRx &rArr; flushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08DrvInit
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08ReadVerInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>prowaveSingleTest</STRONG> (ARM, 564 bytes, Stack size 32 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = prowaveSingleTest &rArr; SR04TMeasureDist &rArr; runCapture &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TMeasureDist
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TDrvInit
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDifferenceLedNumber
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>prowaveAllTest</STRONG> (ARM, 260 bytes, Stack size 24 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = prowaveAllTest &rArr; SR04TMeasureDist &rArr; runCapture &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TMeasureDist
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TDrvInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>batteryTest</STRONG> (ARM, 1080 bytes, Stack size 56 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = batteryTest &rArr; BatteryDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetValue
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatterySwitchStatus
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryDrvInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardLightSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDColorBuffSet
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSuccessful
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>toolsAdjustKeypad</STRONG> (ARM, 448 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = toolsAdjustKeypad &rArr; NT066EDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>idConfig</STRONG> (ARM, 136 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = idConfig &rArr; terninalPrintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>enable12vPower</STRONG> (ARM, 220 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = enable12vPower &rArr; terninalPrintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>batterySelect</STRONG> (ARM, 648 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = batterySelect &rArr; BatteryDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrintfFlag
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetSwitch1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryDrvInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>buzzerLoop</STRONG> (ARM, 120 bytes, Stack size 16 bytes, hwtester.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = buzzerLoop &rArr; BuzzerDrvInit &rArr; swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terninalPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIsKbHit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerDrvInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTerminalChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtester.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>guiDrvPreOffCallback</STRONG> (ARM, 76 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiDrvPreOffCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>guiDrvOffCallback</STRONG> (ARM, 100 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiDrvOffCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>guiDrvOnCallback</STRONG> (ARM, 112 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiDrvOnCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>guiDrvCheckStatus</STRONG> (ARM, 64 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiDrvCheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>GUITimerCallbackFunc</STRONG> (ARM, 84 bytes, Stack size 8 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUITimerCallbackFunc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>GUIKeyCallbackFunc</STRONG> (ARM, 92 bytes, Stack size 16 bytes, guidrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUIKeyCallbackFunc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>KeyCallbackFunc</STRONG> (ARM, 188 bytes, Stack size 16 bytes, keydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = KeyCallbackFunc &rArr; BuzzerPlay &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keydrv.o(.text)
</UL>
<P><STRONG><a name="[311]"></a>showReg</STRONG> (ARM, 1876 bytes, Stack size 8 bytes, powerdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[319]"></a>backupReg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
</UL>

<P><STRONG><a name="[31b]"></a>restoreReg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
</UL>

<P><STRONG><a name="[8a]"></a>PowerDrvPreOffCallback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> powerdrv.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>PowerDrvOffCallback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> powerdrv.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>PowerDrvOnCallback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> powerdrv.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>PowerDrvCheckStatus</STRONG> (ARM, 72 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = PowerDrvCheckStatus &rArr; sysDelay &rArr; sysStartTimer &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerdrv.o(.data)
</UL>
<P><STRONG><a name="[312]"></a>processPreOffCallback</STRONG> (ARM, 84 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = processPreOffCallback &rArr; BatteryCheckPowerDownCondition &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[314]"></a>processOffCallback</STRONG> (ARM, 84 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = processOffCallback &rArr; BatteryCheckPowerDownCondition &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[31f]"></a>processOnCallback</STRONG> (ARM, 80 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = processOnCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[315]"></a>processStatusCallback</STRONG> (ARM, 152 bytes, Stack size 16 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = processStatusCallback &rArr; BatteryCheckPowerDownCondition &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerDrvTask
</UL>

<P><STRONG><a name="[316]"></a>powerSendStatusData</STRONG> (ARM, 188 bytes, Stack size 8 bytes, powerdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessSendStatusData
</UL>

<P><STRONG><a name="[12f]"></a>vPowerDrvTask</STRONG> (ARM, 252 bytes, Stack size 0 bytes, powerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = vPowerDrvTask &rArr; EPDShowBGScreen &rArr; EPDDrawDeviceId &rArr; DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetBooted
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSuspend
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerClearISR
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetPower
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetPower
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDrvResetSystem
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processStatusCallback
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processOnCallback
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processOffCallback
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processPreOffCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerdrv.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>vTimerDrvTask</STRONG> (ARM, 176 bytes, Stack size 0 bytes, timerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = vTimerDrvTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerdrv.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>vCardReaderRxTask</STRONG> (ARM, 84 bytes, Stack size 0 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vCardReaderRxTask &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.text)
</UL>
<P><STRONG><a name="[322]"></a>swInit</STRONG> (ARM, 72 bytes, Stack size 16 bytes, cardreader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReaderInit
</UL>

<P><STRONG><a name="[325]"></a>EPDSetPower</STRONG> (ARM, 92 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPDSetPower &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
</UL>

<P><STRONG><a name="[326]"></a>EPDReset</STRONG> (ARM, 52 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
</UL>

<P><STRONG><a name="[328]"></a>reinitEpd</STRONG> (ARM, 40 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTotalPower
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
</UL>

<P><STRONG><a name="[329]"></a>LCDWaitForReady</STRONG> (ARM, 264 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerPlay
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinitEpd
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
</UL>

<P><STRONG><a name="[32a]"></a>WriteCmdCode</STRONG> (ARM, 200 bytes, Stack size 16 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIT8951SystemInfo
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDExitSleep
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDEnterSleep
</UL>

<P><STRONG><a name="[32b]"></a>EPDEnterSleep</STRONG> (ARM, 80 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = EPDEnterSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epdDrvOffCallback
</UL>

<P><STRONG><a name="[32c]"></a>EPDExitSleep</STRONG> (ARM, 64 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>

<P><STRONG><a name="[8e]"></a>epdDrvPreOffCallback</STRONG> (ARM, 36 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epdDrvPreOffCallback &rArr; EPDGetBacklight &rArr; GPIO_ReadBit
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDGetBacklight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epddrv.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>epdDrvOffCallback</STRONG> (ARM, 76 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = epdDrvOffCallback &rArr; EPDEnterSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDEnterSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epddrv.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>epdDrvOnCallback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, epddrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> epddrv.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>epdDrvCheckStatus</STRONG> (ARM, 36 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epdDrvCheckStatus &rArr; EPDGetBacklight &rArr; GPIO_ReadBit
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDGetBacklight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epddrv.o(.data)
</UL>
<P><STRONG><a name="[32e]"></a>hwInit</STRONG> (ARM, 204 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinitEpd
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
</UL>

<P><STRONG><a name="[132]"></a>vLedBackLightTask</STRONG> (ARM, 192 bytes, Stack size 0 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vLedBackLightTask &rArr; EPDSetBacklight &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetBooted
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDSetBacklight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epddrv.o(.text)
</UL>
<P><STRONG><a name="[32f]"></a>swInit</STRONG> (ARM, 96 bytes, Stack size 16 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
</UL>

<P><STRONG><a name="[330]"></a>WriteData</STRONG> (ARM, 200 bytes, Stack size 16 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WriteData &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayArea
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
</UL>

<P><STRONG><a name="[331]"></a>ReadData</STRONG> (ARM, 416 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ReadData &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDWaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIT8951SystemInfo
</UL>

<P><STRONG><a name="[332]"></a>GetIT8951SystemInfo</STRONG> (ARM, 172 bytes, Stack size 56 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = GetIT8951SystemInfo &rArr; ReadData &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpdDrvInit
</UL>

<P><STRONG><a name="[333]"></a>LoadImages</STRONG> (ARM, 104 bytes, Stack size 16 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDExitSleep
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDEnterSleep
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowErrorID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatteryStatus
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainSelTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowExpired
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBannerLine
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainClear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawPleaseWait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllScreen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCar
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBanner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDeviceId
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawUpperLine
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
</UL>

<P><STRONG><a name="[334]"></a>DisplayArea</STRONG> (ARM, 256 bytes, Stack size 40 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = DisplayArea &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDExitSleep
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDEnterSleep
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowErrorID
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDShowBGScreen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVoltage
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatteryStatus
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainByID
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCost
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainSelTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowExpired
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDepositTime
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBannerLine
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllDepositTime
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawContainClear
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawPleaseWait
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawAllScreen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCar
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawBanner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawDeviceId
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawUpperLine
</UL>

<P><STRONG><a name="[33e]"></a>pow10Ex</STRONG> (ARM, 160 bytes, Stack size 0 bytes, epddrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDeviceIDPositionInfo
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIDFromCost
</UL>

<P><STRONG><a name="[335]"></a>ShowTime</STRONG> (ARM, 492 bytes, Stack size 128 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ShowTime &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
</UL>

<P><STRONG><a name="[336]"></a>ShowDate</STRONG> (ARM, 836 bytes, Stack size 200 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ShowDate &rArr; LoadImages &rArr; EPDExitSleep &rArr; WriteCmdCode &rArr; LCDWaitForReady &rArr; reinitEpd &rArr; setTotalPower &rArr; EPDReset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadImages
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateClock
</UL>

<P><STRONG><a name="[338]"></a>calculateBannerLinePositionInfo</STRONG> (ARM, 84 bytes, Stack size 8 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calculateBannerLinePositionInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
</UL>

<P><STRONG><a name="[339]"></a>calculateContainPositionInfo</STRONG> (ARM, 640 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = calculateContainPositionInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
</UL>

<P><STRONG><a name="[33a]"></a>calculateContainNumberPositionInfo</STRONG> (ARM, 520 bytes, Stack size 24 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = calculateContainNumberPositionInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
</UL>

<P><STRONG><a name="[33b]"></a>calculateDepositTimePositionInfo</STRONG> (ARM, 716 bytes, Stack size 48 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = calculateDepositTimePositionInfo &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePreparePositionInfo
</UL>

<P><STRONG><a name="[341]"></a>getCarPositionInfoIndex</STRONG> (ARM, 92 bytes, Stack size 16 bytes, epddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getCarPositionInfoIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawItem
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPDDrawCar
</UL>

<P><STRONG><a name="[92]"></a>SpaceDrvPreOffCallback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, spacedrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spacedrv.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>SpaceDrvOffCallback</STRONG> (ARM, 76 bytes, Stack size 16 bytes, spacedrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SpaceDrvOffCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spacedrv.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>SpaceDrvOnCallback</STRONG> (ARM, 64 bytes, Stack size 16 bytes, spacedrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SpaceDrvOnCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSpaceDrvTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spacedrv.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>SpaceDrvCheckStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, spacedrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spacedrv.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>vSpaceDrvTask</STRONG> (ARM, 1116 bytes, Stack size 16 bytes, spacedrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vSpaceDrvTask &rArr; MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSetErrorCode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvOnCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spacedrv.o(.text)
</UL>
<P><STRONG><a name="[349]"></a>swInit</STRONG> (ARM, 80 bytes, Stack size 16 bytes, spacedrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpaceDrvInit
</UL>

<P><STRONG><a name="[355]"></a>setcallBackValue</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ts2000drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
</UL>

<P><STRONG><a name="[351]"></a>CardFlushBuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CardFlushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CN
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Time
</UL>

<P><STRONG><a name="[354]"></a>LRC</STRONG> (ARM, 52 bytes, Stack size 8 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LRC
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
</UL>

<P><STRONG><a name="[357]"></a>uart_w</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_w
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CN
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Time
</UL>

<P><STRONG><a name="[352]"></a>uart_r</STRONG> (ARM, 868 bytes, Stack size 40 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uart_r &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IVN
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CN
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Time
</UL>

<P><STRONG><a name="[353]"></a>parserMessage</STRONG> (ARM, 2724 bytes, Stack size 48 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = parserMessage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LRC
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setcallBackValue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iPass_Execute
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ICD
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CN
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Time
</UL>

<P><STRONG><a name="[356]"></a>Read_Time</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Read_Time &rArr; parserMessage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_w
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardFlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000Process
</UL>

<P><STRONG><a name="[358]"></a>Read_CN</STRONG> (ARM, 332 bytes, Stack size 16 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Read_CN &rArr; parserMessage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_w
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardFlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000Process
</UL>

<P><STRONG><a name="[359]"></a>Read_IVN</STRONG> (ARM, 176 bytes, Stack size 40 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Read_IVN &rArr; uart_r &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_w
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardFlushBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000GetBootedStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000CheckReader
</UL>

<P><STRONG><a name="[35a]"></a>Read_ICD</STRONG> (ARM, 308 bytes, Stack size 32 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Read_ICD &rArr; parserMessage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_w
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LRC
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardFlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000Process
</UL>

<P><STRONG><a name="[35b]"></a>iPass_Execute</STRONG> (ARM, 792 bytes, Stack size 72 bytes, ts2000drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = iPass_Execute &rArr; parserMessage &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parserMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_r
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_w
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LRC
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardFlushBuffer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS2000Process
</UL>

<P><STRONG><a name="[35d]"></a>pct08ActionCmd</STRONG> (ARM, 344 bytes, Stack size 40 bytes, pct08cmdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pct08ActionCmd &rArr; PCT08FlushTxRx &rArr; flushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08Write
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08Read
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08FlushTxRx
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08ReadVerInfo
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto
</UL>

<P><STRONG><a name="[364]"></a>flushBuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, pct08drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = flushBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08FlushTxRx
</UL>

<P><STRONG><a name="[36e]"></a>hwInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fatfslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
</UL>

<P><STRONG><a name="[365]"></a>swInit</STRONG> (ARM, 12 bytes, Stack size 8 bytes, fatfslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; FileAgentInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatfsInit
</UL>

<P><STRONG><a name="[96]"></a>PhotoAgentPreOffCallback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, photoagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> photoagent.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>PhotoAgentOffCallback</STRONG> (ARM, 76 bytes, Stack size 16 bytes, photoagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PhotoAgentOffCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> photoagent.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>PhotoAgentOnCallback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, photoagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> photoagent.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>PhotoAgentCheckStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, photoagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> photoagent.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>vPhotoAgentTakePhotoTask</STRONG> (ARM, 716 bytes, Stack size 528 bytes, photoagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8024 + Unknown Stack Size
<LI>Call Chain = vPhotoAgentTakePhotoTask &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT08TakePhoto
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTCTimeToString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> photoagent.o(.text)
</UL>
<P><STRONG><a name="[370]"></a>swInit</STRONG> (ARM, 80 bytes, Stack size 16 bytes, photoagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoAgentInit
</UL>

<P><STRONG><a name="[9a]"></a>ModemAgentPreOffCallback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, modemagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> modemagent.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>ModemAgentOffCallback</STRONG> (ARM, 96 bytes, Stack size 16 bytes, modemagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ModemAgentOffCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemagent.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>ModemAgentOnCallback</STRONG> (ARM, 56 bytes, Stack size 16 bytes, modemagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ModemAgentOnCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemagent.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>ModemAgentCheckStatus</STRONG> (ARM, 32 bytes, Stack size 0 bytes, modemagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> modemagent.o(.data)
</UL>
<P><STRONG><a name="[135]"></a>vModemAgentTask</STRONG> (ARM, 876 bytes, Stack size 304 bytes, modemagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8368 + Unknown Stack Size
<LI>Call Chain = vModemAgentTask &rArr; FtpQueryCsq &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatfsListFile
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2Time
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterUpdateModemAgentLastTime
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupStart
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupProcess
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpQueryCsq
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessExecute
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessCheckExecute
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCheckPowerDownCondition
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modemagent.o(.text)
</UL>
<P><STRONG><a name="[388]"></a>hwInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, modemagent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentInit
</UL>

<P><STRONG><a name="[386]"></a>swInit</STRONG> (ARM, 124 bytes, Stack size 16 bytes, modemagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemLibInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessLibInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemAgentInit
</UL>

<P><STRONG><a name="[136]"></a>compare</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tarifflib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tarifflib.o(.text)
</UL>
<P><STRONG><a name="[38a]"></a>sortTariffFile</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sortTariffFile &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
</UL>

<P><STRONG><a name="[38c]"></a>selectTariffFile</STRONG> (ARM, 388 bytes, Stack size 72 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = selectTariffFile &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
</UL>

<P><STRONG><a name="[38d]"></a>checkTariffName</STRONG> (ARM, 392 bytes, Stack size 16 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = checkTariffName &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffCallback
</UL>

<P><STRONG><a name="[137]"></a>tariffCallback</STRONG> (ARM, 116 bytes, Stack size 32 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tariffCallback &rArr; checkTariffName &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTariffName
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tarifflib.o(.text)
</UL>
<P><STRONG><a name="[38e]"></a>loadTariffFileName</STRONG> (ARM, 140 bytes, Stack size 24 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = loadTariffFileName &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
</UL>

<P><STRONG><a name="[38f]"></a>resetJsonTariff</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = resetJsonTariff &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadJsonTariff
</UL>

<P><STRONG><a name="[390]"></a>printJsonTariff</STRONG> (ARM, 100 bytes, Stack size 16 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = printJsonTariff &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
</UL>

<P><STRONG><a name="[391]"></a>updateCurrentTariffData</STRONG> (ARM, 984 bytes, Stack size 96 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = updateCurrentTariffData &rArr; MeterSetErrorCode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterSetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
</UL>

<P><STRONG><a name="[392]"></a>loadJsonTariff</STRONG> (ARM, 3244 bytes, Stack size 88 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7224 + Unknown Stack Size
<LI>Call Chain = loadJsonTariff &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetErrorPtr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetData
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetJsonTariff
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
</UL>

<P><STRONG><a name="[396]"></a>swInit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, tarifflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7240 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; TariffLoadTariffFile &rArr; loadJsonTariff &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLibInit
</UL>

<P><STRONG><a name="[397]"></a>applyData</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tarifflib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLibInit
</UL>

<P><STRONG><a name="[3a8]"></a>yaffs_regions_overlap</STRONG> (ARM, 84 bytes, Stack size 0 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
</UL>

<P><STRONG><a name="[39d]"></a>yaffs_file_type_str</STRONG> (ARM, 88 bytes, Stack size 0 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[398]"></a>yaffs_error_str</STRONG> (ARM, 732 bytes, Stack size 8 bytes, yaffs2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_error_str
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2ErrorStr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_ls
</UL>

<P><STRONG><a name="[39a]"></a>cmd_yaffs_ls</STRONG> (ARM, 628 bytes, Stack size 352 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lstat
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_closedir
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_error_str
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_type_str
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2ListFileEx
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2DrvInit
</UL>

<P><STRONG><a name="[3a1]"></a>cmd_yaffs_dev_ls</STRONG> (ARM, 156 bytes, Stack size 24 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_next_dev
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dev_rewind
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[3a5]"></a>cmd_yaffs_devconfig</STRONG> (ARM, 844 bytes, Stack size 64 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_next_dev
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dev_rewind
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_device
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_regions_overlap
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[3ac]"></a>pinInit</STRONG> (ARM, 80 bytes, Stack size 0 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[3ab]"></a>hwInit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_devconfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_yaffs_dev_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2DrvInit
</UL>

<P><STRONG><a name="[3b0]"></a>swInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, yaffs2drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2DrvInit
</UL>

<P><STRONG><a name="[3b3]"></a>loadSimpleFile</STRONG> (ARM, 1120 bytes, Stack size 1096 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9464 + Unknown Stack Size
<LI>Call Chain = loadSimpleFile &rArr; FtpClientSendFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetData
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientStart
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientProcess
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientSendFile
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientClose
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCallback
</UL>

<P><STRONG><a name="[13e]"></a>sendDataCallback</STRONG> (ARM, 128 bytes, Stack size 64 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9528 + Unknown Stack Size
<LI>Call Chain = sendDataCallback &rArr; loadSimpleFile &rArr; FtpClientSendFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSimpleFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.text)
</UL>
<P><STRONG><a name="[3b9]"></a>sendDataFile</STRONG> (ARM, 84 bytes, Stack size 56 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = sendDataFile &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetList
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logExecuteFunc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;photoExecuteFunc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfExecuteFunc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsfExecuteFunc
</UL>

<P><STRONG><a name="[13f]"></a>getDataFileCallback</STRONG> (ARM, 208 bytes, Stack size 40 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416 + Unknown Stack Size
<LI>Call Chain = getDataFileCallback &rArr; FileAgentDelFile &rArr; yaffs_unlink &rArr; yaffsfs_DoUnlink &rArr; yaffs_unlinker &rArr; yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.text)
</UL>
<P><STRONG><a name="[3ba]"></a>getDataFile</STRONG> (ARM, 1148 bytes, Stack size 824 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9184 + Unknown Stack Size
<LI>Call Chain = getDataFile &rArr; FtpClientGetFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetList
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientStart
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientProcess
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientClose
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraExecuteFunc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tariffExecuteFunc
</UL>

<P><STRONG><a name="[3bf]"></a>checkProcessExecuteFlag</STRONG> (ARM, 96 bytes, Stack size 0 bytes, dataprocesslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessCheckExecute
</UL>

<P><STRONG><a name="[3bc]"></a>executeProcess</STRONG> (ARM, 344 bytes, Stack size 288 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7784 + Unknown Stack Size
<LI>Call Chain = executeProcess &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProcessExecute
</UL>

<P><STRONG><a name="[9e]"></a>statusExecuteFunc</STRONG> (ARM, 656 bytes, Stack size 1064 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9288 + Unknown Stack Size
<LI>Call Chain = statusExecuteFunc &rArr; WebPostMessage &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>dsfExecuteFunc</STRONG> (ARM, 68 bytes, Stack size 32 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = dsfExecuteFunc &rArr; sendDataFile &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>dcfExecuteFunc</STRONG> (ARM, 76 bytes, Stack size 80 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = dcfExecuteFunc &rArr; sendDataFile &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterGetCurrentDCFFileName
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>photoExecuteFunc</STRONG> (ARM, 68 bytes, Stack size 32 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = photoExecuteFunc &rArr; sendDataFile &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>logExecuteFunc</STRONG> (ARM, 64 bytes, Stack size 32 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = logExecuteFunc &rArr; sendDataFile &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataFile
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibGetCurrentLogFileName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>tariffReloadCallback</STRONG> (ARM, 20 bytes, Stack size 8 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7240 + Unknown Stack Size
<LI>Call Chain = tariffReloadCallback &rArr; TariffLoadTariffFile &rArr; loadJsonTariff &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffUpdateCurrentTariffData
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TariffLoadTariffFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>tariffExecuteFunc</STRONG> (ARM, 104 bytes, Stack size 40 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9224 + Unknown Stack Size
<LI>Call Chain = tariffExecuteFunc &rArr; getDataFile &rArr; FtpClientGetFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>paraReloadCallback</STRONG> (ARM, 20 bytes, Stack size 8 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = paraReloadCallback &rArr; MeterDataReloadParaFile &rArr; loadParaFileName &rArr; FileAgentGetList &rArr; fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataReloadParaFile
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiManagerRefreshScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>paraExecuteFunc</STRONG> (ARM, 236 bytes, Stack size 40 bytes, dataprocesslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9224 + Unknown Stack Size
<LI>Call Chain = paraExecuteFunc &rArr; getDataFile &rArr; FtpClientGetFile &rArr; actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterData
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataprocesslib.o(.data)
</UL>
<P><STRONG><a name="[3c6]"></a>readCmdAck</STRONG> (ARM, 168 bytes, Stack size 40 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUN_Results
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFactoryTest
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHeartbeat
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColor
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
</UL>

<P><STRONG><a name="[3c8]"></a>ledBoardWakeuped</STRONG> (ARM, 40 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ledBoardWakeuped &rArr; GPIO_ReadBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
</UL>

<P><STRONG><a name="[3c9]"></a>setLedBoardWakeup</STRONG> (ARM, 72 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = setLedBoardWakeup &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
</UL>

<P><STRONG><a name="[3ca]"></a>wakeupLedBoard</STRONG> (ARM, 124 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wakeupLedBoard &rArr; setLedBoardWakeup &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedBoardWakeup
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBoardWakeuped
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFactoryTest
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHeartbeat
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColor
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
</UL>

<P><STRONG><a name="[3cb]"></a>shutdownLedBoard</STRONG> (ARM, 100 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = shutdownLedBoard &rArr; setLedBoardWakeup &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedBoardWakeup
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBoardWakeuped
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFactoryTest
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHeartbeat
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColor
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedPara
</UL>

<P><STRONG><a name="[3cc]"></a>setLedPara</STRONG> (ARM, 508 bytes, Stack size 32 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = setLedPara &rArr; readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_light_Command
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bay_light_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetStatus
</UL>

<P><STRONG><a name="[3cf]"></a>setColor</STRONG> (ARM, 212 bytes, Stack size 64 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = setColor &rArr; readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Color_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedTask
</UL>

<P><STRONG><a name="[3d1]"></a>sendHeartbeat</STRONG> (ARM, 428 bytes, Stack size 40 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sendHeartbeat &rArr; readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatTimeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedTask
</UL>

<P><STRONG><a name="[3d3]"></a>sendFactoryTest</STRONG> (ARM, 148 bytes, Stack size 32 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sendFactoryTest &rArr; readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdownLedBoard
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupLedBoard
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCmdAck
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryTest
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedTask
</UL>

<P><STRONG><a name="[142]"></a>vLedTask</STRONG> (ARM, 316 bytes, Stack size 0 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = vLedTask &rArr; setColor &rArr; readCmdAck &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFactoryTest
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHeartbeat
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leddrv.o(.text)
</UL>
<P><STRONG><a name="[3d5]"></a>hwInit</STRONG> (ARM, 332 bytes, Stack size 8 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hwInit &rArr; GPIO_OpenBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
</UL>

<P><STRONG><a name="[3d6]"></a>swInit</STRONG> (ARM, 96 bytes, Stack size 16 bytes, leddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDrvInit
</UL>

<P><STRONG><a name="[a5]"></a>FileAgentPreOffCallback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fileagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>FileAgentOffCallback</STRONG> (ARM, 100 bytes, Stack size 16 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FileAgentOffCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>FileAgentOnCallback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fileagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>FileAgentCheckStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fileagent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.data)
</UL>
<P><STRONG><a name="[3dd]"></a>getChecksum</STRONG> (ARM, 64 bytes, Stack size 12 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentParserAutoData
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
</UL>

<P><STRONG><a name="[3d7]"></a>fatfsSaveToFile</STRONG> (ARM, 1108 bytes, Stack size 4448 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5464 + Unknown Stack Size
<LI>Call Chain = fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChecksum
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processWrite
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
</UL>

<P><STRONG><a name="[3de]"></a>fatfsGetReturnValueByDir</STRONG> (ARM, 160 bytes, Stack size 16 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fatfsGetReturnValueByDir &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetRootStr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetExistFlag
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetCounter
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetList
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoDelFile
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
</UL>

<P><STRONG><a name="[3e3]"></a>fatfsGetFromFile</STRONG> (ARM, 920 bytes, Stack size 4456 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5472 + Unknown Stack Size
<LI>Call Chain = fatfsGetFromFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentParserAutoData
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRead
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
</UL>

<P><STRONG><a name="[3e5]"></a>fatfsAutoSaveToFile</STRONG> (ARM, 812 bytes, Stack size 560 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024 + Unknown Stack Size
<LI>Call Chain = fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentFatFsFormat
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetRootStr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetExistFlag
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetCounter
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processWrite
</UL>

<P><STRONG><a name="[3e8]"></a>fatfsAutoGetFromFile</STRONG> (ARM, 152 bytes, Stack size 40 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512 + Unknown Stack Size
<LI>Call Chain = fatfsAutoGetFromFile &rArr; fatfsGetFromFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetRootStr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetExistFlag
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetCounter
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRead
</UL>

<P><STRONG><a name="[3e9]"></a>fatfsAutoDelFile</STRONG> (ARM, 176 bytes, Stack size 280 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = fatfsAutoDelFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetRootStr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetExistFlag
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetCounter
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentDelFile
</UL>

<P><STRONG><a name="[3ee]"></a>fatfsAutoGetList</STRONG> (ARM, 156 bytes, Stack size 56 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = fatfsAutoGetList &rArr; FileAgentGetFatfsList &rArr; FileAgentFatFsFormat &rArr; DataProcessSendStatusData &rArr; JsonCmdCreateStatusData &rArr; FatfsGetDiskUseageEx &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetRootStr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetExistFlag
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsGetCounter
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetFatfsList
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetReturnValueByDir
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetList
</UL>

<P><STRONG><a name="[3ef]"></a>yaffs2SaveToFile</STRONG> (ARM, 844 bytes, Stack size 40 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = yaffs2SaveToFile &rArr; yaffs_open &rArr; yaffs_open_sharing &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2ErrorStr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processWrite
</UL>

<P><STRONG><a name="[3f3]"></a>yaffs2GetFromFile</STRONG> (ARM, 964 bytes, Stack size 104 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = yaffs2GetFromFile &rArr; yaffs_open &rArr; yaffs_open_sharing &rArr; yaffs_create_file &rArr; yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaffs2ErrorStr
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_read
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentParserAutoData
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRead
</UL>

<P><STRONG><a name="[3f6]"></a>processWrite</STRONG> (ARM, 380 bytes, Stack size 32 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6056 + Unknown Stack Size
<LI>Call Chain = processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2SaveToFile
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoSaveToFile
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSaveToFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentAddData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFileAgentTask
</UL>

<P><STRONG><a name="[3f7]"></a>processRead</STRONG> (ARM, 204 bytes, Stack size 40 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5552 + Unknown Stack Size
<LI>Call Chain = processRead &rArr; fatfsAutoGetFromFile &rArr; fatfsGetFromFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2GetFromFile
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsAutoGetFromFile
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsGetFromFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileAgentGetData
</UL>

<P><STRONG><a name="[143]"></a>vFileAgentTask</STRONG> (ARM, 452 bytes, Stack size 512 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6568 + Unknown Stack Size
<LI>Call Chain = vFileAgentTask &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processWrite
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>listCallback</STRONG> (ARM, 28 bytes, Stack size 16 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = listCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>delCallback</STRONG> (ARM, 92 bytes, Stack size 288 bytes, fileagent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = delCallback &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fileagent.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>FakeDrvInit</STRONG> (ARM, 284 bytes, Stack size 8 bytes, userdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FakeDrvInit &rArr; GPIO_OpenBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userdrv.o(.data)
</UL>
<P><STRONG><a name="[3f9]"></a>userDrvInit</STRONG> (ARM, 156 bytes, Stack size 16 bytes, userdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = userDrvInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDrvInit
</UL>

<P><STRONG><a name="[3fa]"></a>hwInit</STRONG> (ARM, 400 bytes, Stack size 16 bytes, uart1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SetRS232Power
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1DrvInit
</UL>

<P><STRONG><a name="[3fd]"></a>hwInit</STRONG> (ARM, 400 bytes, Stack size 16 bytes, uart2drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SetRS232Power
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2DrvInit
</UL>

<P><STRONG><a name="[3fe]"></a>hwInit</STRONG> (ARM, 308 bytes, Stack size 16 bytes, uart3drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SetRS232Power
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3DrvInit
</UL>

<P><STRONG><a name="[401]"></a>hwInit</STRONG> (ARM, 352 bytes, Stack size 16 bytes, uart4drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4DrvInit
</UL>

<P><STRONG><a name="[404]"></a>hwInit</STRONG> (ARM, 312 bytes, Stack size 16 bytes, uart7drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7SetRS232Power
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7DrvInit
</UL>

<P><STRONG><a name="[407]"></a>hwInit</STRONG> (ARM, 352 bytes, Stack size 16 bytes, uart8drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8DrvInit
</UL>

<P><STRONG><a name="[408]"></a>hwInit</STRONG> (ARM, 400 bytes, Stack size 16 bytes, uart10drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetRS232Power
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART10DrvInit
</UL>

<P><STRONG><a name="[40b]"></a>hwInit</STRONG> (ARM, 172 bytes, Stack size 8 bytes, spi0drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; spiIoctl &rArr; spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiOpen
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0SetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0DrvInit
</UL>

<P><STRONG><a name="[410]"></a>hwInit</STRONG> (ARM, 172 bytes, Stack size 8 bytes, spi1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; spiIoctl &rArr; spiSetSpeed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiOpen
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1SetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1DrvInit
</UL>

<P><STRONG><a name="[411]"></a>hwInit</STRONG> (ARM, 100 bytes, Stack size 8 bytes, i2c1drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; i2cOpen &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cIoctl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cOpen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1SetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1DrvInit
</UL>

<P><STRONG><a name="[412]"></a>buzzerPlay</STRONG> (ARM, 56 bytes, Stack size 16 bytes, buzzerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = buzzerPlay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBuzzerDrvTask
</UL>

<P><STRONG><a name="[146]"></a>vBuzzerDrvTask</STRONG> (ARM, 156 bytes, Stack size 0 bytes, buzzerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vBuzzerDrvTask &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerPlay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzerdrv.o(.text)
</UL>
<P><STRONG><a name="[413]"></a>hwInit</STRONG> (ARM, 88 bytes, Stack size 8 bytes, buzzerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; buzzerPlay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerDrvInit
</UL>

<P><STRONG><a name="[414]"></a>swInit</STRONG> (ARM, 72 bytes, Stack size 16 bytes, buzzerdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerDrvInit
</UL>

<P><STRONG><a name="[107]"></a>batteryDrvPreOffCallback</STRONG> (ARM, 20 bytes, Stack size 0 bytes, batterydrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> batterydrv.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>batteryDrvOffCallback</STRONG> (ARM, 76 bytes, Stack size 16 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = batteryDrvOffCallback &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterydrv.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>batteryDrvOnCallback</STRONG> (ARM, 52 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = batteryDrvOnCallback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterydrv.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>batteryDrvCheckStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, batterydrv.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> batterydrv.o(.data)
</UL>
<P><STRONG><a name="[147]"></a>NormalConvCallback</STRONG> (ARM, 116 bytes, Stack size 16 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = NormalConvCallback &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterydrv.o(.text)
</UL>
<P><STRONG><a name="[415]"></a>measureBattery</STRONG> (ARM, 196 bytes, Stack size 16 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = measureBattery &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcChangeChannel
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryDrvTask
</UL>

<P><STRONG><a name="[148]"></a>vBatteryDrvTask</STRONG> (ARM, 320 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vBatteryDrvTask &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measureBattery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterydrv.o(.text)
</UL>
<P><STRONG><a name="[41b]"></a>hwInit</STRONG> (ARM, 148 bytes, Stack size 8 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwInit &rArr; setBatterySwitchStatus &rArr; BatterySetSwitch2 &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBatterySwitchStatus
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryDrvInit
</UL>

<P><STRONG><a name="[41c]"></a>swInit</STRONG> (ARM, 212 bytes, Stack size 16 bytes, batterydrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRegCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryDrvInit
</UL>

<P><STRONG><a name="[149]"></a>vDipDrvTask</STRONG> (ARM, 1072 bytes, Stack size 0 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vDipDrvTask &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPort
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetBooted
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dipdrv.o(.text)
</UL>
<P><STRONG><a name="[41f]"></a>processAction</STRONG> (ARM, 48 bytes, Stack size 8 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = processAction &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3Callback
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2Callback
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT4Callback
</UL>

<P><STRONG><a name="[423]"></a>hwInit</STRONG> (ARM, 280 bytes, Stack size 8 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hwInit &rArr; GPIO_EnableEINT &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableTriggerType
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
</UL>

<P><STRONG><a name="[425]"></a>swInit</STRONG> (ARM, 184 bytes, Stack size 16 bytes, dipdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipDrvInit
</UL>

<P><STRONG><a name="[426]"></a>hwInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rs232commdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232CommDrvInit
</UL>

<P><STRONG><a name="[427]"></a>swInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rs232commdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232CommDrvInit
</UL>

<P><STRONG><a name="[428]"></a>setFlashCS</STRONG> (ARM, 116 bytes, Stack size 16 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setFlashCS &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFull
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadMidDid
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalRead
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalPageProgram
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadStatusReg
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_SectorErase
</UL>

<P><STRONG><a name="[429]"></a>SpiFlash_SectorErase</STRONG> (ARM, 192 bytes, Stack size 16 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiFlash_SectorErase &rArr; setFlashCS &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
</UL>

<P><STRONG><a name="[42a]"></a>SpiFlash_ReadStatusReg</STRONG> (ARM, 112 bytes, Stack size 16 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiFlash_ReadStatusReg &rArr; setFlashCS &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
</UL>

<P><STRONG><a name="[42b]"></a>SpiFlash_WaitReady</STRONG> (ARM, 96 bytes, Stack size 16 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipErasePure
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetChipID
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExChipEraseFull
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalSectorProgram
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExRead
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExIoctl
</UL>

<P><STRONG><a name="[42c]"></a>SpiFlash_NormalPageProgram</STRONG> (ARM, 248 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpiFlash_NormalPageProgram &rArr; setFlashCS &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalSectorProgram
</UL>

<P><STRONG><a name="[42d]"></a>SpiFlash_NormalSectorProgram</STRONG> (ARM, 76 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SpiFlash_NormalSectorProgram &rArr; SpiFlash_WaitReady &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_NormalPageProgram
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
</UL>

<P><STRONG><a name="[42e]"></a>SpiFlash_NormalRead</STRONG> (ARM, 344 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpiFlash_NormalRead &rArr; setFlashCS &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExRead
</UL>

<P><STRONG><a name="[42f]"></a>SpiFlash_ReadMidDid</STRONG> (ARM, 256 bytes, Stack size 16 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SpiFlash_ReadMidDid &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlashCS
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExGetChipID
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swInit
</UL>

<P><STRONG><a name="[430]"></a>hwInit</STRONG> (ARM, 272 bytes, Stack size 8 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hwInit &rArr; GPIO_OpenBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInit
</UL>

<P><STRONG><a name="[431]"></a>swInit</STRONG> (ARM, 404 bytes, Stack size 24 bytes, flashdrvex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_ReadMidDid
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlash_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDrvExInitialize
</UL>

<P><STRONG><a name="[433]"></a>SYS_Init</STRONG> (ARM, 100 bytes, Stack size 8 bytes, sddrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYS_Init &rArr; GPIO_OpenBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdDrvInit
</UL>

<P><STRONG><a name="[444]"></a>ETIMER_Is_Active</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkActive
</UL>

<P><STRONG><a name="[43d]"></a>ETIMER_Start</STRONG> (ARM, 120 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCapture
</UL>

<P><STRONG><a name="[43f]"></a>ETIMER_Stop</STRONG> (ARM, 120 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
</UL>

<P><STRONG><a name="[44c]"></a>ETIMER_EnableInt</STRONG> (ARM, 120 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
</UL>

<P><STRONG><a name="[43b]"></a>ETIMER_EnableCaptureInt</STRONG> (ARM, 120 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCapture
</UL>

<P><STRONG><a name="[441]"></a>ETIMER_DisableCaptureInt</STRONG> (ARM, 120 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
</UL>

<P><STRONG><a name="[446]"></a>ETIMER_GetIntFlag</STRONG> (ARM, 80 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
</UL>

<P><STRONG><a name="[447]"></a>ETIMER_ClearIntFlag</STRONG> (ARM, 88 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
</UL>

<P><STRONG><a name="[448]"></a>ETIMER_GetCaptureIntFlag</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
</UL>

<P><STRONG><a name="[44a]"></a>ETIMER_ClearCaptureIntFlag</STRONG> (ARM, 88 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
</UL>

<P><STRONG><a name="[449]"></a>ETIMER_GetCaptureData</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
</UL>

<P><STRONG><a name="[436]"></a>setPower</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setPower &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[437]"></a>settingToggle</STRONG> (ARM, 56 bytes, Stack size 16 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = settingToggle &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[438]"></a>startToggle</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = startToggle &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[439]"></a>stopToggle</STRONG> (ARM, 52 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stopToggle &rArr; GPIO_ClrBit
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwInit
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[43a]"></a>startCapture</STRONG> (ARM, 124 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = startCapture &rArr; ETIMER_Open &rArr; ETIMER_GetModuleClock &rArr; sysGetClock &rArr; sysGetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_EnableCapture
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Open
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_EnableCaptureInt
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[43e]"></a>stopCapture</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopCapture
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_DisableCapture
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Close
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_DisableCaptureInt
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR1_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETMR0_IRQHandler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[443]"></a>checkActive</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkActive
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Is_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runCapture
</UL>

<P><STRONG><a name="[445]"></a>runCapture</STRONG> (ARM, 328 bytes, Stack size 32 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = runCapture &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkActive
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCapture
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopToggle
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startToggle
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingToggle
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPower
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TMeasureDist
</UL>

<P><STRONG><a name="[44d]"></a>swInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sr04tdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TDrvInit
</UL>

<P><STRONG><a name="[14a]"></a>ETMR0_IRQHandler</STRONG> (ARM, 336 bytes, Stack size 24 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ETMR0_IRQHandler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetCaptureData
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_ClearCaptureIntFlag
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetCaptureIntFlag
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_ClearIntFlag
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetIntFlag
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sr04tdrv.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>ETMR1_IRQHandler</STRONG> (ARM, 176 bytes, Stack size 24 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ETMR1_IRQHandler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopCapture
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetCaptureData
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_ClearCaptureIntFlag
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetCaptureIntFlag
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_ClearIntFlag
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_GetIntFlag
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sr04tdrv.o(.text)
</UL>
<P><STRONG><a name="[44b]"></a>hwInit</STRONG> (ARM, 440 bytes, Stack size 8 bytes, sr04tdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; ETIMER_Open &rArr; ETIMER_GetModuleClock &rArr; sysGetClock &rArr; sysGetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Open
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopToggle
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPower
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_EnableCaptureInt
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_EnableInt
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SR04TDrvInit
</UL>

<P><STRONG><a name="[44e]"></a>sendNT066EWriteCmd</STRONG> (ARM, 312 bytes, Stack size 24 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sendNT066EWriteCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetChip
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetTriggerLevel
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetBuildBit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetClkReg
</UL>

<P><STRONG><a name="[44f]"></a>sendNT066EReadCmd</STRONG> (ARM, 312 bytes, Stack size 24 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sendNT066EReadCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetChip
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetTriggerLevel
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetBuildBit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetClkReg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNT066EDrvTask
</UL>

<P><STRONG><a name="[450]"></a>processKeyEvent</STRONG> (ARM, 192 bytes, Stack size 16 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = processKeyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNT066EDrvTask
</UL>

<P><STRONG><a name="[14d]"></a>vNT066EDrvTask</STRONG> (ARM, 160 bytes, Stack size 16 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = vNT066EDrvTask &rArr; sendNT066EReadCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processKeyEvent
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNT066EReadCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nt066edrv.o(.text)
</UL>
<P><STRONG><a name="[454]"></a>hwInit</STRONG> (ARM, 548 bytes, Stack size 8 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = hwInit &rArr; NT066ESetTriggerLevel &rArr; NT066EResetBuildBit &rArr; sendNT066EReadCmd &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableTriggerType
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableEINT
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrISRBit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenBit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EResetChip
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066ESetTriggerLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
</UL>

<P><STRONG><a name="[455]"></a>swInit</STRONG> (ARM, 72 bytes, Stack size 16 bytes, nt066edrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = swInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT066EDrvInit
</UL>

<P><STRONG><a name="[477]"></a>mem_cpy</STRONG> (ARM, 40 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[46b]"></a>mem_set</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[47a]"></a>mem_cmp</STRONG> (ARM, 60 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[485]"></a>chk_chr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[465]"></a>lock_fs</STRONG> (ARM, 20 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[467]"></a>unlock_fs</STRONG> (ARM, 64 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[468]"></a>sync_window</STRONG> (ARM, 148 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[469]"></a>move_window</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[46a]"></a>sync_fs</STRONG> (ARM, 320 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[46e]"></a>remove_chain</STRONG> (ARM, 204 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[46f]"></a>create_chain</STRONG> (ARM, 380 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[470]"></a>dir_sdi</STRONG> (ARM, 364 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[472]"></a>dir_next</STRONG> (ARM, 568 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[473]"></a>dir_alloc</STRONG> (ARM, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[487]"></a>ld_clust</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[48f]"></a>st_clust</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[474]"></a>cmp_lfn</STRONG> (ARM, 228 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[47c]"></a>pick_lfn</STRONG> (ARM, 204 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[47e]"></a>fit_lfn</STRONG> (ARM, 196 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[476]"></a>gen_numname</STRONG> (ARM, 288 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[479]"></a>sum_sfn</STRONG> (ARM, 56 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[478]"></a>dir_find</STRONG> (ARM, 388 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[47b]"></a>dir_read</STRONG> (ARM, 340 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[47d]"></a>dir_register</STRONG> (ARM, 576 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[47f]"></a>dir_remove</STRONG> (ARM, 200 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[480]"></a>get_fileinfo</STRONG> (ARM, 416 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[483]"></a>get_achar</STRONG> (ARM, 72 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[482]"></a>pattern_matching</STRONG> (ARM, 368 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = pattern_matching &rArr;  pattern_matching (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[484]"></a>create_name</STRONG> (ARM, 1268 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = create_name &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[486]"></a>follow_path</STRONG> (ARM, 312 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[48a]"></a>get_ldnumber</STRONG> (ARM, 144 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdrive
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[488]"></a>check_fs</STRONG> (ARM, 208 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[489]"></a>find_volume</STRONG> (ARM, 1584 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[48b]"></a>validate</STRONG> (ARM, 136 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = validate &rArr; disk_status &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[49b]"></a>cJSON_strcasecmp</STRONG> (ARM, 148 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
</UL>

<P><STRONG><a name="[49d]"></a>cJSON_strdup</STRONG> (ARM, 100 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[49e]"></a>cJSON_New_Item</STRONG> (ARM, 52 bytes, Stack size 8 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFalse
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateRaw
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNull
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[49f]"></a>parse_number</STRONG> (ARM, 184 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[4a5]"></a>ensure</STRONG> (ARM, 272 bytes, Stack size 24 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ensure
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[4a6]"></a>update</STRONG> (ARM, 72 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = update &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[4a7]"></a>print_number</STRONG> (ARM, 704 bytes, Stack size 40 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = print_number &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[4ad]"></a>parse_hex4</STRONG> (ARM, 180 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[4ac]"></a>utf16_literal_to_utf8</STRONG> (ARM, 544 bytes, Stack size 64 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[4ae]"></a>parse_string</STRONG> (ARM, 672 bytes, Stack size 40 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[4af]"></a>print_string_ptr</STRONG> (ARM, 824 bytes, Stack size 40 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = print_string_ptr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
</UL>

<P><STRONG><a name="[4b0]"></a>print_string</STRONG> (ARM, 28 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[4b2]"></a>skip</STRONG> (ARM, 44 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[4b1]"></a>parse_object</STRONG> (ARM, 364 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[4b4]"></a>parse_array</STRONG> (ARM, 272 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[4b3]"></a>parse_value</STRONG> (ARM, 320 bytes, Stack size 16 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[4b7]"></a>print_object</STRONG> (ARM, 1940 bytes, Stack size 88 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[4b9]"></a>print_array</STRONG> (ARM, 1028 bytes, Stack size 72 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[4b8]"></a>print_value</STRONG> (ARM, 796 bytes, Stack size 32 bytes, cjson.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = print_value &rArr; print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintPreallocated
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintBuffered
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[4bf]"></a>suffix_object</STRONG> (ARM, 12 bytes, Stack size 0 bytes, cjson.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
</UL>

<P><STRONG><a name="[4be]"></a>create_reference</STRONG> (ARM, 88 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
</UL>

<P><STRONG><a name="[4c4]"></a>DetachItemFromArray</STRONG> (ARM, 140 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
</UL>

<P><STRONG><a name="[4c9]"></a>ReplaceItemInArray</STRONG> (ARM, 152 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
</UL>

<P><STRONG><a name="[4d4]"></a>printfBuffData</STRONG> (ARM, 132 bytes, Stack size 24 bytes, atcmdparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
</UL>

<P><STRONG><a name="[4d5]"></a>fineCurrentCmdRegType</STRONG> (ARM, 176 bytes, Stack size 24 bytes, atcmdparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fineCurrentCmdRegType &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preProcessCmdData
</UL>

<P><STRONG><a name="[4d6]"></a>preProcessCmdData</STRONG> (ARM, 528 bytes, Stack size 32 bytes, atcmdparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = preProcessCmdData &rArr; fineCurrentCmdRegType &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fineCurrentCmdRegType
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
</UL>

<P><STRONG><a name="[4d7]"></a>findStartAddress</STRONG> (ARM, 88 bytes, Stack size 24 bytes, atcmdparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findStartAddress &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
</UL>

<P><STRONG><a name="[4d9]"></a>printfBuffData</STRONG> (ARM, 144 bytes, Stack size 24 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemWrite
</UL>

<P><STRONG><a name="[4da]"></a>parserString</STRONG> (ARM, 200 bytes, Stack size 32 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = parserString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpQueryCsq
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile
</UL>

<P><STRONG><a name="[4db]"></a>QModemWrite</STRONG> (ARM, 92 bytes, Stack size 16 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = QModemWrite &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfBuffData
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdGetReceiveDebugFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientSendFile
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemAbortDataMode
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
</UL>

<P><STRONG><a name="[4e1]"></a>QModemRead</STRONG> (ARM, 64 bytes, Stack size 16 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QModemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
</UL>

<P><STRONG><a name="[4de]"></a>QModemIoctl</STRONG> (ARM, 164 bytes, Stack size 16 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QModemIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFlushBuffer
</UL>

<P><STRONG><a name="[4e7]"></a>resetRetryTimes</STRONG> (ARM, 60 bytes, Stack size 0 bytes, quentelmodemlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemTotalStop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupStart
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientStart
</UL>

<P><STRONG><a name="[4e6]"></a>fineModemStageItem</STRONG> (ARM, 80 bytes, Stack size 0 bytes, quentelmodemlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
</UL>

<P><STRONG><a name="[4e2]"></a>processCmdReqAction</STRONG> (ARM, 100 bytes, Stack size 0 bytes, quentelmodemlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
</UL>

<P><STRONG><a name="[4e4]"></a>processCmdReqActionPure</STRONG> (ARM, 120 bytes, Stack size 0 bytes, quentelmodemlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmdPure
</UL>

<P><STRONG><a name="[4e0]"></a>actionCmd</STRONG> (ARM, 400 bytes, Stack size 40 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = actionCmd &rArr; atCmdProcessReadData &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFlushBuffer
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCmdReqAction
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemRead
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemWrite
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdProcess
</UL>

<P><STRONG><a name="[4e3]"></a>actionCmdPure</STRONG> (ARM, 372 bytes, Stack size 552 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8048 + Unknown Stack Size
<LI>Call Chain = actionCmdPure &rArr; LoglibPrintf &rArr; FileAgentAddData &rArr; processWrite &rArr; fatfsAutoSaveToFile &rArr; fatfsSaveToFile &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoglibPrintf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemAbortDataMode
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFlushBuffer
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCmdReqActionPure
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemRead
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemWrite
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atCmdProcessReadData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemATCmdTest
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpQueryCsq
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPostMessage
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientSendFile
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientGetFile
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClientClose
</UL>

<P><STRONG><a name="[4e5]"></a>cmdProcess</STRONG> (ARM, 616 bytes, Stack size 40 bytes, quentelmodemlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = cmdProcess &rArr; actionCmd &rArr; atCmdProcessReadData &rArr; printfBuffData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actionCmd
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processCmdReqAction
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fineModemStageItem
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemDialupProcess
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QModemFtpClientProcess
</UL>

<P><STRONG><a name="[150]"></a>part_read</STRONG> (ARM, 256 bytes, Stack size 64 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = part_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>part_read_oob</STRONG> (ARM, 192 bytes, Stack size 40 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = part_read_oob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>part_read_user_prot_reg</STRONG> (ARM, 56 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_read_user_prot_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>part_get_user_prot_info</STRONG> (ARM, 44 bytes, Stack size 24 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = part_get_user_prot_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[156]"></a>part_read_fact_prot_reg</STRONG> (ARM, 56 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_read_fact_prot_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>part_get_fact_prot_info</STRONG> (ARM, 44 bytes, Stack size 24 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = part_get_fact_prot_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>part_write</STRONG> (ARM, 152 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>part_panic_write</STRONG> (ARM, 152 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_panic_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>part_write_oob</STRONG> (ARM, 156 bytes, Stack size 40 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = part_write_oob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>part_write_user_prot_reg</STRONG> (ARM, 56 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_write_user_prot_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>part_lock_user_prot_reg</STRONG> (ARM, 52 bytes, Stack size 32 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = part_lock_user_prot_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>part_erase</STRONG> (ARM, 204 bytes, Stack size 24 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = part_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>part_lock</STRONG> (ARM, 92 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[15d]"></a>part_unlock</STRONG> (ARM, 92 bytes, Stack size 48 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = part_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>part_sync</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = part_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>part_block_isbad</STRONG> (ARM, 80 bytes, Stack size 24 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = part_block_isbad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>part_block_markbad</STRONG> (ARM, 132 bytes, Stack size 24 bytes, mtdpart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = part_block_markbad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtdpart.o(.text)
</UL>
<P><STRONG><a name="[4ee]"></a>add_one_partition</STRONG> (ARM, 1820 bytes, Stack size 48 bytes, mtdpart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_mtd_partitions
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_mod_by_eb
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mtd_device
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_mtd_partitions
</UL>

<P><STRONG><a name="[4ef]"></a>mtd_mod_by_eb</STRONG> (ARM, 52 bytes, Stack size 16 bytes, mtdpart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_partition
</UL>

<P><STRONG><a name="[4f2]"></a>nand_init_chip</STRONG> (ARM, 132 bytes, Stack size 24 bytes, nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_nand_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init
</UL>

<P><STRONG><a name="[50d]"></a>generic_ffs</STRONG> (ARM, 116 bytes, Stack size 0 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_flash_type
</UL>

<P><STRONG><a name="[509]"></a>check_offs_len</STRONG> (ARM, 180 bytes, Stack size 32 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_offs_len
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
</UL>

<P><STRONG><a name="[4f8]"></a>nand_release_device</STRONG> (ARM, 32 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_release_device
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_sync
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_oob
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_oob
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_block_markbad
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_bad
</UL>

<P><STRONG><a name="[163]"></a>nand_read_byte16</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nand_base.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>nand_read_word</STRONG> (ARM, 28 bytes, Stack size 0 bytes, nand_base.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>nand_select_chip</STRONG> (ARM, 112 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = nand_select_chip &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>nand_verify_buf</STRONG> (ARM, 72 bytes, Stack size 12 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nand_verify_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>nand_verify_buf16</STRONG> (ARM, 84 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_verify_buf16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[4f7]"></a>nand_get_device</STRONG> (ARM, 16 bytes, Stack size 0 bytes, nand_base.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_sync
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_oob
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_oob
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_block_markbad
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_bad
</UL>

<P><STRONG><a name="[166]"></a>nand_block_bad</STRONG> (ARM, 516 bytes, Stack size 56 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nand_block_bad &rArr; nand_release_device
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[4f9]"></a>nand_fill_oob</STRONG> (ARM, 344 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = nand_fill_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
</UL>

<P><STRONG><a name="[4fc]"></a>nand_check_wp</STRONG> (ARM, 80 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_check_wp
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
</UL>

<P><STRONG><a name="[4fa]"></a>nand_do_write_oob</STRONG> (ARM, 544 bytes, Stack size 80 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = nand_do_write_oob &rArr; nand_fill_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_check_wp
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_fill_oob
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_oob
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_block_markbad
</UL>

<P><STRONG><a name="[167]"></a>nand_default_block_markbad</STRONG> (ARM, 404 bytes, Stack size 48 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = nand_default_block_markbad &rArr; nand_update_bbt &rArr; write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[4ff]"></a>nand_block_checkbad</STRONG> (ARM, 124 bytes, Stack size 32 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nand_block_checkbad &rArr; nand_isbad_bbt
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_isbad_bbt
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_isbad
</UL>

<P><STRONG><a name="[160]"></a>nand_command</STRONG> (ARM, 556 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nand_command &rArr; nand_wait_ready &rArr; get_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>nand_command_lp</STRONG> (ARM, 752 bytes, Stack size 32 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nand_command_lp &rArr; nand_wait_ready &rArr; get_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>nand_wait</STRONG> (ARM, 240 bytes, Stack size 24 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = nand_wait &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>nand_read_page_raw</STRONG> (ARM, 68 bytes, Stack size 24 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nand_read_page_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>nand_read_page_raw_syndrome</STRONG> (ARM, 228 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nand_read_page_raw_syndrome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[180]"></a>nand_read_page_swecc</STRONG> (ARM, 344 bytes, Stack size 72 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nand_read_page_swecc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>nand_read_subpage</STRONG> (ARM, 788 bytes, Stack size 88 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = nand_read_subpage
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>nand_read_page_hwecc</STRONG> (ARM, 348 bytes, Stack size 56 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nand_read_page_hwecc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>nand_read_page_hwecc_oob_first</STRONG> (ARM, 360 bytes, Stack size 72 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nand_read_page_hwecc_oob_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>nand_read_page_syndrome</STRONG> (ARM, 360 bytes, Stack size 48 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nand_read_page_syndrome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[504]"></a>nand_transfer_oob</STRONG> (ARM, 344 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = nand_transfer_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_oob
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
</UL>

<P><STRONG><a name="[505]"></a>nand_do_read_ops</STRONG> (ARM, 1144 bytes, Stack size 120 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = nand_do_read_ops &rArr; nand_transfer_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait_ready
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_transfer_oob
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_oob
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read
</UL>

<P><STRONG><a name="[186]"></a>nand_read</STRONG> (ARM, 160 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = nand_read &rArr; nand_do_read_ops &rArr; nand_transfer_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>nand_read_oob_std</STRONG> (ARM, 84 bytes, Stack size 24 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nand_read_oob_std
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>nand_read_oob_syndrome</STRONG> (ARM, 316 bytes, Stack size 56 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nand_read_oob_syndrome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>nand_write_oob_std</STRONG> (ARM, 140 bytes, Stack size 32 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nand_write_oob_std
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>nand_write_oob_syndrome</STRONG> (ARM, 488 bytes, Stack size 72 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nand_write_oob_syndrome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[506]"></a>nand_do_read_oob</STRONG> (ARM, 684 bytes, Stack size 96 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = nand_do_read_oob &rArr; nand_transfer_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_wait_ready
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_transfer_oob
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_oob
</UL>

<P><STRONG><a name="[188]"></a>nand_read_oob</STRONG> (ARM, 256 bytes, Stack size 32 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = nand_read_oob &rArr; nand_do_read_ops &rArr; nand_transfer_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_oob
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_read_ops
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>nand_write_page_raw</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_write_page_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[17d]"></a>nand_write_page_raw_syndrome</STRONG> (ARM, 240 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nand_write_page_raw_syndrome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>nand_write_page_swecc</STRONG> (ARM, 168 bytes, Stack size 56 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nand_write_page_swecc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>nand_write_page_hwecc</STRONG> (ARM, 208 bytes, Stack size 48 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nand_write_page_hwecc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>nand_write_page_syndrome</STRONG> (ARM, 280 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nand_write_page_syndrome
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>nand_write_page</STRONG> (ARM, 292 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nand_write_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[507]"></a>nand_do_write_ops</STRONG> (ARM, 1060 bytes, Stack size 112 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = nand_do_write_ops &rArr; nand_fill_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_check_wp
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_fill_oob
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_oob
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write
</UL>

<P><STRONG><a name="[187]"></a>nand_write</STRONG> (ARM, 160 bytes, Stack size 40 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = nand_write &rArr; nand_do_write_ops &rArr; nand_fill_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>nand_write_oob</STRONG> (ARM, 256 bytes, Stack size 32 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = nand_write_oob &rArr; nand_do_write_ops &rArr; nand_fill_oob &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_ops
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_do_write_oob
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>single_erase_cmd</STRONG> (ARM, 68 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = single_erase_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>multi_erase_cmd</STRONG> (ARM, 152 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = multi_erase_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[185]"></a>nand_erase</STRONG> (ARM, 32 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = nand_erase &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>nand_sync</STRONG> (ARM, 48 bytes, Stack size 16 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nand_sync &rArr; nand_release_device
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_get_device
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_release_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>nand_block_isbad</STRONG> (ARM, 76 bytes, Stack size 24 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nand_block_isbad &rArr; nand_block_checkbad &rArr; nand_isbad_bbt
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_checkbad
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_markbad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[18c]"></a>nand_block_markbad</STRONG> (ARM, 96 bytes, Stack size 24 bytes, nand_base.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nand_block_markbad &rArr; nand_block_isbad &rArr; nand_block_checkbad &rArr; nand_isbad_bbt
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_isbad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[50f]"></a>nand_set_defaults</STRONG> (ARM, 328 bytes, Stack size 0 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_ident
</UL>

<P><STRONG><a name="[50c]"></a>nand_get_flash_type</STRONG> (ARM, 2056 bytes, Stack size 72 bytes, nand_base.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_ffs
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_ident
</UL>

<P><STRONG><a name="[183]"></a>nand_bch_calculate_ecc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nand_base.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>nand_bch_correct_data</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nand_base.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nand_base.o(.text)
</UL>
<P><STRONG><a name="[512]"></a>check_pattern_no_oob</STRONG> (ARM, 56 bytes, Stack size 16 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_pattern_no_oob &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pattern
</UL>

<P><STRONG><a name="[513]"></a>check_pattern</STRONG> (ARM, 416 bytes, Stack size 32 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_pattern &rArr; check_pattern_no_oob &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pattern_no_oob
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_block_full
</UL>

<P><STRONG><a name="[51e]"></a>check_short_pattern</STRONG> (ARM, 152 bytes, Stack size 8 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_short_pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_block_fast
</UL>

<P><STRONG><a name="[515]"></a>add_marker_len</STRONG> (ARM, 52 bytes, Stack size 0 bytes, nand_bbt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bbt
</UL>

<P><STRONG><a name="[514]"></a>read_bbt</STRONG> (ARM, 900 bytes, Stack size 128 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = read_bbt &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_marker_len
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbt
</UL>

<P><STRONG><a name="[516]"></a>read_abs_bbt</STRONG> (ARM, 324 bytes, Stack size 80 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = read_abs_bbt &rArr; read_bbt &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bbt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_create
</UL>

<P><STRONG><a name="[518]"></a>scan_read_raw_data</STRONG> (ARM, 84 bytes, Stack size 48 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = scan_read_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw
</UL>

<P><STRONG><a name="[519]"></a>scan_read_raw_oob</STRONG> (ARM, 232 bytes, Stack size 64 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scan_read_raw_oob
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_block_full
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw
</UL>

<P><STRONG><a name="[517]"></a>scan_read_raw</STRONG> (ARM, 96 bytes, Stack size 32 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = scan_read_raw &rArr; scan_read_raw_oob
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw_oob
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbts
</UL>

<P><STRONG><a name="[523]"></a>scan_write_bbt</STRONG> (ARM, 96 bytes, Stack size 64 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scan_write_bbt
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
</UL>

<P><STRONG><a name="[51b]"></a>bbt_get_ver_offs</STRONG> (ARM, 32 bytes, Stack size 0 bytes, nand_bbt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbts
</UL>

<P><STRONG><a name="[51a]"></a>read_abs_bbts</STRONG> (ARM, 268 bytes, Stack size 56 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = read_abs_bbts &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_get_ver_offs
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
</UL>

<P><STRONG><a name="[51c]"></a>scan_block_full</STRONG> (ARM, 148 bytes, Stack size 40 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = scan_block_full &rArr; scan_read_raw_oob
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw_oob
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
</UL>

<P><STRONG><a name="[51d]"></a>scan_block_fast</STRONG> (ARM, 180 bytes, Stack size 72 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scan_block_fast &rArr; check_short_pattern
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_short_pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
</UL>

<P><STRONG><a name="[51f]"></a>create_bbt</STRONG> (ARM, 748 bytes, Stack size 112 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = create_bbt &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_block_fast
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_block_full
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_create
</UL>

<P><STRONG><a name="[520]"></a>search_bbt</STRONG> (ARM, 624 bytes, Stack size 120 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = search_bbt &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbt_get_ver_offs
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_read_raw
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pattern
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_read_bbts
</UL>

<P><STRONG><a name="[521]"></a>search_read_bbts</STRONG> (ARM, 68 bytes, Stack size 24 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = search_read_bbts &rArr; search_bbt &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_bbt
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
</UL>

<P><STRONG><a name="[522]"></a>write_bbt</STRONG> (ARM, 2008 bytes, Stack size 280 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_write_bbt
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_nand
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_create
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
</UL>

<P><STRONG><a name="[524]"></a>check_create</STRONG> (ARM, 832 bytes, Stack size 64 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = check_create &rArr; write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bbt
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_bbt
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_abs_bbt
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
</UL>

<P><STRONG><a name="[525]"></a>mark_bbt_region</STRONG> (ARM, 588 bytes, Stack size 96 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mark_bbt_region &rArr; nand_update_bbt &rArr; write_bbt &rArr; nand_erase_nand &rArr;  nand_update_bbt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_update_bbt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
</UL>

<P><STRONG><a name="[526]"></a>verify_bbt_descr</STRONG> (ARM, 460 bytes, Stack size 48 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = verify_bbt_descr &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_scan_bbt
</UL>

<P><STRONG><a name="[528]"></a>nand_create_default_bbt_descr</STRONG> (ARM, 388 bytes, Stack size 16 bytes, nand_bbt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = nand_create_default_bbt_descr &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_default_bbt
</UL>

<P><STRONG><a name="[531]"></a>list_add</STRONG> (ARM, 24 bytes, Stack size 0 bytes, yaffs_allocator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_free_objs
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_obj
</UL>

<P><STRONG><a name="[529]"></a>yaffs_deinit_raw_tnodes</STRONG> (ARM, 120 bytes, Stack size 16 bytes, yaffs_allocator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[52a]"></a>yaffs_init_raw_tnodes</STRONG> (ARM, 76 bytes, Stack size 16 bytes, yaffs_allocator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[52b]"></a>yaffs_create_tnodes</STRONG> (ARM, 540 bytes, Stack size 40 bytes, yaffs_allocator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = yaffs_create_tnodes &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_tnode
</UL>

<P><STRONG><a name="[52e]"></a>yaffs_init_raw_objs</STRONG> (ARM, 96 bytes, Stack size 16 bytes, yaffs_allocator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[52f]"></a>yaffs_deinit_raw_objs</STRONG> (ARM, 140 bytes, Stack size 16 bytes, yaffs_allocator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
</UL>

<P><STRONG><a name="[530]"></a>yaffs_create_free_objs</STRONG> (ARM, 260 bytes, Stack size 32 bytes, yaffs_allocator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = yaffs_create_free_objs &rArr; yaffs_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
</UL>

<P><STRONG><a name="[533]"></a>list_empty</STRONG> (ARM, 32 bytes, Stack size 0 bytes, yaffs_allocator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
</UL>

<P><STRONG><a name="[540]"></a>yaffs_block_bits</STRONG> (ARM, 112 bytes, Stack size 16 bytes, yaffs_bitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_block_bits &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_count_chunk_bits
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_still_some_chunks
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clear_chunk_bits
</UL>

<P><STRONG><a name="[548]"></a>yaffs_get_block_info</STRONG> (ARM, 108 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_erased_block
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_erase
</UL>

<P><STRONG><a name="[549]"></a>yaffs2_checkpt_space_ok</STRONG> (ARM, 72 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
</UL>

<P><STRONG><a name="[54a]"></a>yaffs_checkpt_erase</STRONG> (ARM, 536 bytes, Stack size 16 bytes, yaffs_checkptrw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_checkpt_erase &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate_stream
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
</UL>

<P><STRONG><a name="[54b]"></a>yaffs2_checkpt_find_erased_block</STRONG> (ARM, 244 bytes, Stack size 24 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_flush_buffer
</UL>

<P><STRONG><a name="[54c]"></a>yaffs2_checkpt_find_block</STRONG> (ARM, 296 bytes, Stack size 104 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>

<P><STRONG><a name="[54e]"></a>yaffs2_checkpt_flush_buffer</STRONG> (ARM, 360 bytes, Stack size 104 bytes, yaffs_checkptrw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_find_erased_block
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
</UL>

<P><STRONG><a name="[556]"></a>generic_hweight32</STRONG> (ARM, 108 bytes, Stack size 0 bytes, yaffs_ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct_other
</UL>

<P><STRONG><a name="[554]"></a>generic_hweight8</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffs_ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct_other
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct
</UL>

<P><STRONG><a name="[58b]"></a>list_add</STRONG> (ARM, 24 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_obj
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_empty_obj
</UL>

<P><STRONG><a name="[589]"></a>list_del_init</STRONG> (ARM, 36 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_dirty_dirs
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
</UL>

<P><STRONG><a name="[557]"></a>yaffs_get_block_info</STRONG> (ARM, 108 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_alloc_block
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_retire_block
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[559]"></a>yaffs_init_tmp_buffers</STRONG> (ARM, 112 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[574]"></a>yaffs_handle_chunk_wr_ok</STRONG> (ARM, 20 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[56c]"></a>yaffs_handle_chunk_update</STRONG> (ARM, 16 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
</UL>

<P><STRONG><a name="[55f]"></a>yaffs_retire_block</STRONG> (ARM, 552 bytes, Stack size 96 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = yaffs_retire_block &rArr; yaffs_mark_bad &rArr; yaffs_tags_compat_mark_bad &rArr; yaffs_wr_nand &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mark_bad
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_erase_block
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_clear_oldest_dirty_seq
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
</UL>

<P><STRONG><a name="[564]"></a>yaffs_check_chunk_erased</STRONG> (ARM, 156 bytes, Stack size 96 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_ff
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[56d]"></a>yaffs_handle_chunk_wr_error</STRONG> (ARM, 260 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = yaffs_handle_chunk_wr_error &rArr; yaffs_chunk_del &rArr; yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_error
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[596]"></a>yaffs_hash_fn</STRONG> (ARM, 40 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_obj
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
</UL>

<P><STRONG><a name="[56e]"></a>yaffs_verify_chunk_written</STRONG> (ARM, 160 bytes, Stack size 104 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = yaffs_verify_chunk_written &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[571]"></a>yaffs_find_alloc_block</STRONG> (ARM, 288 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_find_alloc_block &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
</UL>

<P><STRONG><a name="[572]"></a>yaffs_alloc_chunk</STRONG> (ARM, 536 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = yaffs_alloc_chunk &rArr; yaffs_set_chunk_bit &rArr; yaffs_verify_chunk_bit_id &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_alloc_available
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_alloc_block
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
</UL>

<P><STRONG><a name="[5a0]"></a>yaffs_get_erased_chunks</STRONG> (ARM, 48 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[573]"></a>yaffs_write_new_chunk</STRONG> (ARM, 480 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = yaffs_write_new_chunk &rArr; yaffs_handle_chunk_wr_error &rArr; yaffs_chunk_del &rArr; yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_invalidate
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_rest_of_block
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_chunk
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_chunk_written
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_error
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_erased
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_chunk_wr_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[576]"></a>yaffs_calc_name_sum</STRONG> (ARM, 96 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
</UL>

<P><STRONG><a name="[579]"></a>yaffs_free_tnode</STRONG> (ARM, 48 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_free_tnode &rArr; yaffs_free_raw_tnode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_tree
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
</UL>

<P><STRONG><a name="[57a]"></a>yaffs_deinit_tnodes_and_objs</STRONG> (ARM, 32 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_raw_tnodes_and_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
</UL>

<P><STRONG><a name="[57d]"></a>yaffs_tags_match</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
</UL>

<P><STRONG><a name="[57c]"></a>yaffs_find_chunk_in_group</STRONG> (ARM, 228 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_match
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
</UL>

<P><STRONG><a name="[57e]"></a>yaffs_find_chunk_in_file</STRONG> (ARM, 140 bytes, Stack size 112 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = yaffs_find_chunk_in_file &rArr; yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_tnode_0
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_data_obj
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
</UL>

<P><STRONG><a name="[581]"></a>yaffs_find_del_file_chunk</STRONG> (ARM, 168 bytes, Stack size 112 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = yaffs_find_del_file_chunk &rArr; yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_tnode_0
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tnode_0
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_group
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_chunks
</UL>

<P><STRONG><a name="[584]"></a>yaffs_soft_del_chunk</STRONG> (ARM, 368 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = yaffs_soft_del_chunk &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_update_oldest_dirty_seq
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
</UL>

<P><STRONG><a name="[585]"></a>yaffs_soft_del_worker</STRONG> (ARM, 256 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yaffs_soft_del_worker &rArr;  yaffs_soft_del_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_group_base
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_tnode_0
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_chunk
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
</UL>

<P><STRONG><a name="[586]"></a>yaffs_remove_obj_from_dir</STRONG> (ARM, 92 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj_in_dir
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>

<P><STRONG><a name="[5aa]"></a>yaffs_obj_cache_dirty</STRONG> (ARM, 92 bytes, Stack size 12 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_obj_cache_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[58c]"></a>yaffs_apply_xattrib_mod</STRONG> (ARM, 172 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = yaffs_apply_xattrib_mod &rArr; nval_set &rArr; nval_del &rArr; nval_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_hasvalues
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[590]"></a>yaffs_load_oh_from_name</STRONG> (ARM, 40 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_load_oh_from_name &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>

<P><STRONG><a name="[592]"></a>yaffs_check_obj_details_loaded</STRONG> (ARM, 180 bytes, Stack size 96 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>

<P><STRONG><a name="[594]"></a>yaffs_unhash_obj</STRONG> (ARM, 88 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_unhash_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_fn
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
</UL>

<P><STRONG><a name="[597]"></a>yaffs_free_obj</STRONG> (ARM, 284 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_free_obj &rArr; yaffs_free_raw_obj &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_raw_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_defered_free
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>

<P><STRONG><a name="[599]"></a>yaffs_invalidate_whole_cache</STRONG> (ARM, 88 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_invalidate_whole_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[598]"></a>yaffs_generic_obj_del</STRONG> (ARM, 136 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_whole_cache
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_obj_from_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[59c]"></a>yaffs_gc_process_chunk</STRONG> (ARM, 940 bytes, Stack size 128 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = yaffs_gc_process_chunk &rArr; yaffs_put_chunk_in_file &rArr; yaffs_chunk_del &rArr; yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_oh
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_skip_verification
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_size_load
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>

<P><STRONG><a name="[59f]"></a>yaffs_gc_block</STRONG> (ARM, 940 bytes, Stack size 56 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_collected_blk
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_blk
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_number
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_became_dirty
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_process_chunk
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_erased_chunks
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_still_some_chunks
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_chunk_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[5a4]"></a>yaffs_find_gc_block</STRONG> (ARM, 1060 bytes, Stack size 72 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = yaffs_find_gc_block &rArr; yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_block_ok_for_gc
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_oldest_dirty_seq
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
</UL>

<P><STRONG><a name="[5a7]"></a>yaffs_check_gc</STRONG> (ARM, 716 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_checkpt_blocks_required
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_find_refresh_block
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_gc_block
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_gc_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_bg_gc
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[5ab]"></a>yaffs_fix_null_name</STRONG> (ARM, 180 bytes, Stack size 64 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = yaffs_fix_null_name &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
</UL>

<P><STRONG><a name="[5ad]"></a>yaffs_load_name_from_oh</STRONG> (ARM, 44 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_load_name_from_oh &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
</UL>

<P><STRONG><a name="[59a]"></a>yaffs_change_obj_name</STRONG> (ARM, 348 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>

<P><STRONG><a name="[5b0]"></a>yaffs_wr_data_obj</STRONG> (ARM, 336 bytes, Stack size 184 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file_sane
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_gc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_write_new_chunk
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
</UL>

<P><STRONG><a name="[5b2]"></a>yaffs_flush_file_cache</STRONG> (ARM, 276 bytes, Stack size 40 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = yaffs_flush_file_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_data_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_whole_cache
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>

<P><STRONG><a name="[5b5]"></a>yaffs_grab_chunk_worker</STRONG> (ARM, 84 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_cache
</UL>

<P><STRONG><a name="[5b4]"></a>yaffs_grab_chunk_cache</STRONG> (ARM, 252 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = yaffs_grab_chunk_cache &rArr; yaffs_flush_file_cache &rArr; yaffs_wr_data_obj &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_grab_chunk_worker
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
</UL>

<P><STRONG><a name="[5b7]"></a>yaffs_find_chunk_cache</STRONG> (ARM, 140 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_find_chunk_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_invalidate_chunk_cache
</UL>

<P><STRONG><a name="[5e4]"></a>yaffs_use_cache</STRONG> (ARM, 148 bytes, Stack size 12 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_use_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
</UL>

<P><STRONG><a name="[5b6]"></a>yaffs_invalidate_chunk_cache</STRONG> (ARM, 64 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffs_invalidate_chunk_cache &rArr; yaffs_find_chunk_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
</UL>

<P><STRONG><a name="[5b9]"></a>yaffs_soft_del_file</STRONG> (ARM, 164 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = yaffs_soft_del_file &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_worker
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_file_if_needed
</UL>

<P><STRONG><a name="[5ba]"></a>yaffs_prune_worker</STRONG> (ARM, 244 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yaffs_prune_worker &rArr;  yaffs_prune_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_tree
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
</UL>

<P><STRONG><a name="[5bb]"></a>yaffs_prune_tree</STRONG> (ARM, 228 bytes, Stack size 32 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = yaffs_prune_tree &rArr; yaffs_prune_worker &rArr;  yaffs_prune_worker (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_prune_worker
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_tnode
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>

<P><STRONG><a name="[5bc]"></a>yaffs_alloc_empty_obj</STRONG> (ARM, 248 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = yaffs_alloc_empty_obj &rArr; yaffs_add_obj_to_dir &rArr; yaffs_remove_obj_from_dir &rArr; yaffs_verify_obj_in_dir &rArr; yaffs_verify_obj &rArr; yaffs_verify_file &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_alloc_raw_obj
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[5be]"></a>yaffs_find_nice_bucket</STRONG> (ARM, 120 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffs_find_nice_bucket
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj_id
</UL>

<P><STRONG><a name="[5bd]"></a>yaffs_new_obj_id</STRONG> (ARM, 120 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_new_obj_id &rArr; yaffs_find_nice_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_nice_bucket
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[5bf]"></a>yaffs_hash_obj</STRONG> (ARM, 84 bytes, Stack size 16 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffs_hash_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_hash_fn
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>

<P><STRONG><a name="[5c2]"></a>yaffs_create_fake_dir</STRONG> (ARM, 136 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_initial_dir
</UL>

<P><STRONG><a name="[5c3]"></a>yaffs_init_tnodes_and_objs</STRONG> (ARM, 132 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_raw_tnodes_and_objs
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5c5]"></a>yaffs_update_parent</STRONG> (ARM, 168 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = yaffs_update_parent &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_obj
</UL>

<P><STRONG><a name="[5c7]"></a>yaffs_del_link</STRONG> (ARM, 28 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = yaffs_del_link &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>

<P><STRONG><a name="[5c8]"></a>yaffs_del_symlink</STRONG> (ARM, 36 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = yaffs_del_symlink &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>

<P><STRONG><a name="[5ca]"></a>yaffs_del_dir</STRONG> (ARM, 44 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = yaffs_del_dir &rArr; yaffs_generic_obj_del &rArr; yaffs_change_obj_name &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>

<P><STRONG><a name="[5cb]"></a>yaffs_rd_data_obj</STRONG> (ARM, 284 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = yaffs_rd_data_obj &rArr; yaffs_find_chunk_in_file &rArr; yaffs_find_chunk_in_group &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_chunk_in_file
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_file_wr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_file_rd
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>

<P><STRONG><a name="[5cc]"></a>yaffs_prune_chunks</STRONG> (ARM, 372 bytes, Stack size 64 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = yaffs_prune_chunks &rArr; yaffs_chunk_del &rArr; yaffs_block_became_dirty &rArr; yaffs_check_chunk_erased &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_addr_to_chunk
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_del_file_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file_down
</UL>

<P><STRONG><a name="[5cf]"></a>yaffs_unlink_file_if_needed</STRONG> (ARM, 232 bytes, Stack size 24 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_soft_del_file
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_resize_file
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
</UL>

<P><STRONG><a name="[5d2]"></a>yaffs_create_obj</STRONG> (ARM, 428 bytes, Stack size 48 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = yaffs_create_obj &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_new_obj
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_attribs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_obj
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_symlink
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_special
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_dir
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_file
</UL>

<P><STRONG><a name="[5d8]"></a>yaffs_deinit_blocks</STRONG> (ARM, 144 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinitialise
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_init_blocks
</UL>

<P><STRONG><a name="[5d9]"></a>yaffs_init_blocks</STRONG> (ARM, 292 bytes, Stack size 16 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_deinit_blocks
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5db]"></a>yaffs_do_xattrib_mod</STRONG> (ARM, 120 bytes, Stack size 64 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_oh
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_xattrib
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_xattrib
</UL>

<P><STRONG><a name="[5dc]"></a>yaffs_do_xattrib_fetch</STRONG> (ARM, 404 bytes, Stack size 128 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_list
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_hasvalues
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_get
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_list_xattrib
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_xattrib
</UL>

<P><STRONG><a name="[5e8]"></a>yaffs_unlink_worker</STRONG> (ARM, 416 bytes, Stack size 288 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_file
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_name
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_symlink
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_link
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_change_obj_name
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_generic_obj_del
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
</UL>

<P><STRONG><a name="[5e9]"></a>yaffs_unlink_obj</STRONG> (ARM, 52 bytes, Stack size 8 bytes, yaffs_guts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = yaffs_unlink_obj &rArr; yaffs_unlink_worker &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename_obj
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlinker
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
</UL>

<P><STRONG><a name="[5ee]"></a>yaffs_strip_deleted_objs</STRONG> (ARM, 152 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5f0]"></a>yaffs_has_null_parent</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fix_hanging_objs
</UL>

<P><STRONG><a name="[5ef]"></a>yaffs_fix_hanging_objs</STRONG> (ARM, 336 bytes, Stack size 40 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_has_null_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5f1]"></a>yaffs_del_dir_contents</STRONG> (ARM, 144 bytes, Stack size 24 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_empty_l_n_f
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
</UL>

<P><STRONG><a name="[5f2]"></a>yaffs_empty_l_n_f</STRONG> (ARM, 20 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_dir_contents
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5fc]"></a>yaffs_check_dev_fns</STRONG> (ARM, 216 bytes, Stack size 0 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[5f7]"></a>yaffs_create_initial_dir</STRONG> (ARM, 184 bytes, Stack size 8 bytes, yaffs_guts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_create_fake_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_guts_initialise
</UL>

<P><STRONG><a name="[595]"></a>list_empty</STRONG> (ARM, 32 bytes, Stack size 0 bytes, yaffs_guts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_is_non_empty_dir
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_dirty_dirs
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unlink_worker
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_update_parent
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_free_obj
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unhash_obj
</UL>

<P><STRONG><a name="[606]"></a>translate_spare2oob</STRONG> (ARM, 144 bytes, Stack size 0 bytes, yaffs_mtdif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd_WriteChunkToNAND
</UL>

<P><STRONG><a name="[608]"></a>translate_oob2spare</STRONG> (ARM, 196 bytes, Stack size 0 bytes, yaffs_mtdif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandmtd_ReadChunkFromNAND
</UL>

<P><STRONG><a name="[60d]"></a>nval_find</STRONG> (ARM, 208 bytes, Stack size 32 bytes, yaffs_nameval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nval_find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_get
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_del
</UL>

<P><STRONG><a name="[60e]"></a>nval_used</STRONG> (ARM, 132 bytes, Stack size 24 bytes, yaffs_nameval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nval_used
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_set
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nval_hasvalues
</UL>

<P><STRONG><a name="[615]"></a>yaffs_dump_packed_tags2_tags_only</STRONG> (ARM, 48 bytes, Stack size 16 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_dump_packed_tags2_tags_only &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>

<P><STRONG><a name="[616]"></a>yaffs_dump_packed_tags2</STRONG> (ARM, 20 bytes, Stack size 8 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = yaffs_dump_packed_tags2 &rArr; yaffs_dump_packed_tags2_tags_only &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dump_packed_tags2_tags_only
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
</UL>

<P><STRONG><a name="[617]"></a>yaffs_dump_tags2</STRONG> (ARM, 92 bytes, Stack size 32 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yaffs_dump_tags2 &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2_tags_only
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unpack_tags2
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>

<P><STRONG><a name="[618]"></a>yaffs_check_tags_extra_packable</STRONG> (ARM, 108 bytes, Stack size 0 bytes, yaffs_packedtags2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_pack_tags2_tags_only
</UL>

<P><STRONG><a name="[61b]"></a>swapfunc</STRONG> (ARM, 124 bytes, Stack size 20 bytes, yaffs_qsort.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[61c]"></a>med3</STRONG> (ARM, 168 bytes, Stack size 24 bytes, yaffs_qsort.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_qsort
</UL>

<P><STRONG><a name="[61d]"></a>yaffs_get_block_info</STRONG> (ARM, 108 bytes, Stack size 16 bytes, yaffs_summary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yaffs_get_block_info &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_gc
</UL>

<P><STRONG><a name="[61e]"></a>yaffs_summary_clear</STRONG> (ARM, 52 bytes, Stack size 8 bytes, yaffs_summary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs_summary_clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_init
</UL>

<P><STRONG><a name="[620]"></a>yaffs_summary_sum</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffs_summary.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_write
</UL>

<P><STRONG><a name="[61f]"></a>yaffs_summary_write</STRONG> (ARM, 596 bytes, Stack size 144 bytes, yaffs_summary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yaffs_summary_write &rArr;  yaffs_wr_chunk_tags_nand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_sum
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_block_info
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_wr_chunk_tags_nand
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_release_temp_buffer
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_temp_buffer
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_add
</UL>

<P><STRONG><a name="[62d]"></a>generic_hweight8</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
</UL>

<P><STRONG><a name="[627]"></a>yaffs_load_tags_to_spare</STRONG> (ARM, 92 bytes, Stack size 16 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffs_load_tags_to_spare &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_calc_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
</UL>

<P><STRONG><a name="[628]"></a>yaffs_get_tags_from_spare</STRONG> (ARM, 144 bytes, Stack size 24 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffs_get_tags_from_spare &rArr; yaffs_check_tags_ecc &rArr; yaffs_calc_tags_ecc
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_check_tags_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
</UL>

<P><STRONG><a name="[629]"></a>yaffs_spare_init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = yaffs_spare_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
</UL>

<P><STRONG><a name="[62a]"></a>yaffs_wr_nand</STRONG> (ARM, 104 bytes, Stack size 24 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = yaffs_wr_nand &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_wr
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_mark_bad
</UL>

<P><STRONG><a name="[62b]"></a>yaffs_handle_rd_data_error</STRONG> (ARM, 176 bytes, Stack size 24 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_nand
</UL>

<P><STRONG><a name="[62c]"></a>yaffs_rd_chunk_nand</STRONG> (ARM, 1444 bytes, Stack size 96 bytes, yaffs_tagscompat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_rd_data_error
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_correct
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ecc_calc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_rd
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_tags_compat_query_block
</UL>

<P><STRONG><a name="[634]"></a>yaffs_skip_full_verification</STRONG> (ARM, 28 bytes, Stack size 0 bytes, yaffs_verify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_dir
</UL>

<P><STRONG><a name="[62f]"></a>yaffs_skip_nand_verification</STRONG> (ARM, 28 bytes, Stack size 0 bytes, yaffs_verify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_obj
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_verify_file
</UL>

<P><STRONG><a name="[647]"></a>list_add</STRONG> (ARM, 24 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_chunk
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[63a]"></a>yaffs2_wr_checkpt_validity_marker</STRONG> (ARM, 124 bytes, Stack size 32 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[63b]"></a>yaffs2_rd_checkpt_validity_marker</STRONG> (ARM, 176 bytes, Stack size 32 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[63d]"></a>yaffs2_dev_to_checkpt_dev</STRONG> (ARM, 68 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
</UL>

<P><STRONG><a name="[63f]"></a>yaffs_checkpt_dev_to_dev</STRONG> (ARM, 68 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
</UL>

<P><STRONG><a name="[63c]"></a>yaffs2_wr_checkpt_dev</STRONG> (ARM, 240 bytes, Stack size 56 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_dev_to_checkpt_dev
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[63e]"></a>yaffs2_rd_checkpt_dev</STRONG> (ARM, 252 bytes, Stack size 56 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_dev_to_dev
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[645]"></a>yaffs2_obj_checkpt_obj</STRONG> (ARM, 328 bytes, Stack size 0 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
</UL>

<P><STRONG><a name="[640]"></a>yaffs2_checkpt_obj_to_obj</STRONG> (ARM, 544 bytes, Stack size 24 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[641]"></a>yaffs2_checkpt_tnode_worker</STRONG> (ARM, 240 bytes, Stack size 40 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_tnodes
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
</UL>

<P><STRONG><a name="[642]"></a>yaffs2_wr_checkpt_tnodes</STRONG> (ARM, 136 bytes, Stack size 16 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_tnode_worker
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
</UL>

<P><STRONG><a name="[643]"></a>yaffs2_rd_checkpt_tnodes</STRONG> (ARM, 332 bytes, Stack size 32 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_find_tnode_0
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_tnode
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
</UL>

<P><STRONG><a name="[644]"></a>yaffs2_wr_checkpt_objs</STRONG> (ARM, 344 bytes, Stack size 64 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_tnodes
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_obj_checkpt_obj
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[646]"></a>yaffs2_rd_checkpt_objs</STRONG> (ARM, 584 bytes, Stack size 64 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_tnodes
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_obj_to_obj
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link_fixup
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[648]"></a>yaffs2_wr_checkpt_sum</STRONG> (ARM, 84 bytes, Stack size 16 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_wr
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_get_checkpt_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_data
</UL>

<P><STRONG><a name="[64a]"></a>yaffs2_rd_checkpt_sum</STRONG> (ARM, 108 bytes, Stack size 24 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_rd
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_get_checkpt_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_data
</UL>

<P><STRONG><a name="[64b]"></a>yaffs2_wr_checkpt_data</STRONG> (ARM, 340 bytes, Stack size 16 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_required
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_sum
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_objs
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_dev
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_wr_checkpt_validity_marker
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpoint_save
</UL>

<P><STRONG><a name="[64c]"></a>yaffs2_rd_checkpt_data</STRONG> (ARM, 716 bytes, Stack size 16 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_sum
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_objs
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_dev
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_rd_checkpt_validity_marker
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_checkpt_close
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_checkpt_restore
</UL>

<P><STRONG><a name="[18d]"></a>yaffs2_ybicmp</STRONG> (ARM, 48 bytes, Stack size 12 bytes, yaffs_yaffs2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffs2_ybicmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffs_yaffs2.o(.text)
</UL>
<P><STRONG><a name="[64e]"></a>yaffs2_scan_chunk</STRONG> (ARM, 2668 bytes, Stack size 168 bytes, yaffs_yaffs2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_summary_fetch
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rd_chunk_tags_nand
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_oh_to_size
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_handle_shadowed_obj
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_or_create_by_number
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_clone_str
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_obj_to_dir
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_put_chunk_in_file
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_obj_name_from_oh
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chunk_del
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_chunk_bit
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_load_attribs
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs2_scan_backwards
</UL>

<P><STRONG><a name="[6a8]"></a>list_add</STRONG> (ARM, 24 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_add_device
</UL>

<P><STRONG><a name="[64f]"></a>yaffsfs_InitHandles</STRONG> (ARM, 160 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[651]"></a>yaffsfs_HandleToPointer</STRONG> (ARM, 40 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetHandle
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dup
</UL>

<P><STRONG><a name="[650]"></a>yaffsfs_HandleToFileDes</STRONG> (ARM, 88 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToInode
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lseek
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ftruncate
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dup
</UL>

<P><STRONG><a name="[652]"></a>yaffsfs_HandleToInode</STRONG> (ARM, 116 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yaffsfs_HandleToInode &rArr; yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
</UL>

<P><STRONG><a name="[653]"></a>yaffsfs_HandleToObject</STRONG> (ARM, 44 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = yaffsfs_HandleToObject &rArr; yaffsfs_HandleToInode &rArr; yaffsfs_HandleToFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToInode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fchmod
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fremovexattr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flistxattr
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fgetxattr
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fsetxattr
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_futime
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lseek
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_ftruncate
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_Dofsync
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsDevBusy
</UL>

<P><STRONG><a name="[654]"></a>yaffsfs_FindInodeIdForObject</STRONG> (ARM, 92 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = yaffsfs_FindInodeIdForObject &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CountHandles
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_GetInodeIdForObject
</UL>

<P><STRONG><a name="[655]"></a>yaffsfs_GetInodeIdForObject</STRONG> (ARM, 156 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = yaffsfs_GetInodeIdForObject &rArr; yaffsfs_FindInodeIdForObject &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindInodeIdForObject
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>

<P><STRONG><a name="[656]"></a>yaffsfs_CountHandles</STRONG> (ARM, 48 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindInodeIdForObject
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_n_handles
</UL>

<P><STRONG><a name="[657]"></a>yaffsfs_ReleaseInode</STRONG> (ARM, 52 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_del_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutInode
</UL>

<P><STRONG><a name="[658]"></a>yaffsfs_PutInode</STRONG> (ARM, 80 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_ReleaseInode
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_BreakDeviceHandles
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutFileDes
</UL>

<P><STRONG><a name="[65a]"></a>yaffsfs_NewHandle</STRONG> (ARM, 100 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandleAndFileDes
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_dup
</UL>

<P><STRONG><a name="[659]"></a>yaffsfs_NewHandleAndFileDes</STRONG> (ARM, 188 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffsfs_NewHandleAndFileDes
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_NewHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>

<P><STRONG><a name="[65b]"></a>yaffsfs_GetHandle</STRONG> (ARM, 76 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = yaffsfs_GetHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
</UL>

<P><STRONG><a name="[65c]"></a>yaffsfs_PutFileDes</STRONG> (ARM, 152 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutInode
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutHandle
</UL>

<P><STRONG><a name="[65d]"></a>yaffsfs_PutHandle</STRONG> (ARM, 96 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = yaffsfs_PutHandle &rArr; yaffsfs_PutFileDes &rArr; yaffsfs_PutInode &rArr; yaffsfs_ReleaseInode &rArr; yaffs_del_obj &rArr; yaffs_del_file &rArr; yaffs_unlink_file_if_needed &rArr; yaffs_resize_file &rArr; yaffs2_handle_hole &rArr; yaffs_update_oh &rArr; yaffs_check_gc &rArr; yaffs_gc_block &rArr;  yaffs_generic_obj_del (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutFileDes
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_close
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_write
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_do_read
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>

<P><STRONG><a name="[65e]"></a>yaffsfs_BreakDeviceHandles</STRONG> (ARM, 196 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_PutInode
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToFileDes
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
</UL>

<P><STRONG><a name="[661]"></a>yaffsfs_alt_dir_path</STRONG> (ARM, 200 bytes, Stack size 24 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rmdir
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
</UL>

<P><STRONG><a name="[663]"></a>yaffsfs_FindDevice</STRONG> (ARM, 412 bytes, Stack size 40 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaffsfs_FindDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Match
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindMountPoint
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_inodecount
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_totalspace
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_getdev
</UL>

<P><STRONG><a name="[665]"></a>yaffsfs_CheckPath</STRONG> (ARM, 112 bytes, Stack size 12 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yaffsfs_CheckPath
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_freespace
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_n_handles
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_inodecount
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_totalspace
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_sync
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rmdir
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_access
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_utime
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[666]"></a>yaffsfs_FindMountPoint</STRONG> (ARM, 80 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mount_common
</UL>

<P><STRONG><a name="[667]"></a>yaffsfs_FindRoot</STRONG> (ARM, 64 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yaffsfs_FindRoot &rArr; yaffsfs_FindDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>

<P><STRONG><a name="[668]"></a>yaffsfs_DoFindDirectory</STRONG> (ARM, 408 bytes, Stack size 296 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindRoot
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>

<P><STRONG><a name="[66a]"></a>yaffsfs_FindDirectory</STRONG> (ARM, 52 bytes, Stack size 40 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>

<P><STRONG><a name="[66b]"></a>yaffsfs_FindObject</STRONG> (ARM, 148 bytes, Stack size 64 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_find_by_name
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_n_handles
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readlink
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_access
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_utime
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rename
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoUnlink
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
</UL>

<P><STRONG><a name="[669]"></a>yaffsfs_FollowLink</STRONG> (ARM, 180 bytes, Stack size 32 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = yaffsfs_FollowLink &rArr; yaffsfs_FindObject &rArr; yaffsfs_FindDirectory &rArr; yaffsfs_DoFindDirectory &rArr;  yaffsfs_FollowLink (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_IsPathDivider
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoFindDirectory
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_access
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_truncate
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_removexattr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_listxattr
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_getxattr
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_do_setxattr
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[670]"></a>yaffsfs_TooManyObjects</STRONG> (ARM, 56 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_link
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_symlink
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_mkdir
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_open_sharing
</UL>

<P><STRONG><a name="[67e]"></a>yaffsfs_DoStat</STRONG> (ARM, 296 bytes, Stack size 24 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = yaffsfs_DoStat &rArr; yaffs_get_obj_length &rArr; yaffs_get_equivalent_obj &rArr; yaffs_check_obj_details_loaded &rArr; yaffs_rd_chunk_tags_nand &rArr; yaffs_tags_compat_rd &rArr; yaffs_rd_chunk_nand &rArr; yaffs_handle_rd_data_error &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_link_count
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_obj_length
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fstat
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStatOrLStat
</UL>

<P><STRONG><a name="[681]"></a>yaffsfs_DoStatOrLStat</STRONG> (ARM, 320 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DoStat
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lstat
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_stat
</UL>

<P><STRONG><a name="[683]"></a>yaffsfs_DoUtime</STRONG> (ARM, 184 bytes, Stack size 32 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CurrentTime
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_futime
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_utime
</UL>

<P><STRONG><a name="[686]"></a>yaffs_do_setxattr</STRONG> (ARM, 352 bytes, Stack size 64 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_set_xattrib
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lsetxattr
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_setxattr
</UL>

<P><STRONG><a name="[68a]"></a>yaffs_do_getxattr</STRONG> (ARM, 348 bytes, Stack size 56 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_xattrib
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lgetxattr
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_getxattr
</UL>

<P><STRONG><a name="[68e]"></a>yaffs_do_listxattr</STRONG> (ARM, 340 bytes, Stack size 56 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_list_xattrib
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_llistxattr
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_listxattr
</UL>

<P><STRONG><a name="[692]"></a>yaffs_do_removexattr</STRONG> (ARM, 332 bytes, Stack size 48 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_CheckPath
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Unlock
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_Lock
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetError
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_xattrib
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FollowLink
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_lremovexattr
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_removexattr
</UL>

<P><STRONG><a name="[696]"></a>yaffsfs_DoChMod</STRONG> (ARM, 104 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_flush_file
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_get_equivalent_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_fchmod
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_chmod
</UL>

<P><STRONG><a name="[6a0]"></a>yaffsfs_IsDevBusy</STRONG> (ARM, 76 bytes, Stack size 16 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_HandleToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_unmount2
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remount
</UL>

<P><STRONG><a name="[6a6]"></a>yaffsfs_DirAdvance</STRONG> (ARM, 140 bytes, Stack size 8 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaffsfs_DirAdvance
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_readdir
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_RemoveObjectCallback
</UL>

<P><STRONG><a name="[18e]"></a>yaffsfs_RemoveObjectCallback</STRONG> (ARM, 96 bytes, Stack size 16 bytes, yaffsfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yaffsfs_RemoveObjectCallback &rArr; yaffsfs_DirAdvance
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yaffsfs.o(.text)
</UL>
<P><STRONG><a name="[6ab]"></a>yaffsfs_SetDirRewound</STRONG> (ARM, 112 bytes, Stack size 8 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_opendir
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_rewinddir
</UL>

<P><STRONG><a name="[6aa]"></a>list_del</STRONG> (ARM, 20 bytes, Stack size 0 bytes, yaffsfs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_closedir
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffs_remove_device
</UL>

<P><STRONG><a name="[6a7]"></a>list_empty</STRONG> (ARM, 32 bytes, Stack size 0 bytes, yaffsfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_SetDirRewound
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaffsfs_DirAdvance
</UL>

<P><STRONG><a name="[6b7]"></a>nuc970_layout_oob_table</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fmi_nand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_nand_init
</UL>

<P><STRONG><a name="[18f]"></a>nuc970_hwcontrol</STRONG> (ARM, 72 bytes, Stack size 8 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nuc970_hwcontrol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>nuc970_nand_select_chip</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[191]"></a>nuc970_dev_ready</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>nuc970_nand_command</STRONG> (ARM, 640 bytes, Stack size 24 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nuc970_nand_command
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_oob_hwecc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_page_hwecc_oob_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[193]"></a>nuc970_nand_read_byte</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>nuc970_nand_write_buf</STRONG> (ARM, 44 bytes, Stack size 8 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nuc970_nand_write_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[195]"></a>nuc970_nand_read_buf</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_oob_hwecc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_page_hwecc_oob_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>nuc970_nand_calculate_ecc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>nuc970_nand_correct_data</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fmi_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[6b6]"></a>_nuc970_nand_dma_transfer</STRONG> (ARM, 648 bytes, Stack size 32 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _nuc970_nand_dma_transfer &rArr; fmiSMCorrectData &rArr; fmiSM_CorrectData_BCH
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSMCorrectData
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_page_hwecc_oob_first
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_write_page_hwecc
</UL>

<P><STRONG><a name="[199]"></a>nuc970_nand_write_page_hwecc</STRONG> (ARM, 148 bytes, Stack size 32 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = nuc970_nand_write_page_hwecc &rArr; _nuc970_nand_dma_transfer &rArr; fmiSMCorrectData &rArr; fmiSM_CorrectData_BCH
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nuc970_nand_dma_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>nuc970_nand_read_page_hwecc_oob_first</STRONG> (ARM, 148 bytes, Stack size 32 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = nuc970_nand_read_page_hwecc_oob_first &rArr; _nuc970_nand_dma_transfer &rArr; fmiSMCorrectData &rArr; fmiSM_CorrectData_BCH
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nuc970_nand_dma_transfer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_buf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[19b]"></a>nuc970_nand_read_oob_hwecc</STRONG> (ARM, 96 bytes, Stack size 24 bytes, fmi_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nuc970_nand_read_oob_hwecc &rArr; nuc970_nand_command
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_read_buf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nuc970_nand_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fmi_nand.o(.text)
</UL>
<P><STRONG><a name="[6cd]"></a>prvInitialiseNewQueue</STRONG> (ARM, 72 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[6ce]"></a>prvUnlockQueue</STRONG> (ARM, 228 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6d0]"></a>prvIsQueueFull</STRONG> (ARM, 52 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[6d1]"></a>prvCopyDataToQueue</STRONG> (ARM, 240 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[6d8]"></a>prvInitialiseMutex</STRONG> (ARM, 56 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[6da]"></a>prvIsQueueEmpty</STRONG> (ARM, 48 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6db]"></a>prvCopyDataFromQueue</STRONG> (ARM, 84 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[6e2]"></a>prvInitialiseTaskLists</STRONG> (ARM, 108 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[6e3]"></a>prvAddNewTaskToReadyList</STRONG> (ARM, 268 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[6e5]"></a>prvInitialiseNewTask</STRONG> (ARM, 236 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[6ea]"></a>prvResetNextTaskUnblockTime</STRONG> (ARM, 88 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6e8]"></a>prvDeleteTCB</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6ec]"></a>prvAddCurrentTaskToDelayedList</STRONG> (ARM, 180 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddCurrentTaskToDelayedList
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[6f3]"></a>prvTaskIsTaskSuspended</STRONG> (ARM, 124 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[6f5]"></a>prvCheckTasksWaitingTermination</STRONG> (ARM, 236 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[19c]"></a>prvIdleTask</STRONG> (ARM, 36 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield2
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[6fa]"></a>prvTaskCheckFreeStackSpace</STRONG> (ARM, 48 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[6fb]"></a>prvListTasksWithinSingleList</STRONG> (ARM, 200 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[6fe]"></a>prvWriteNameToBuffer</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[707]"></a>prvInsertBlockIntoFreeList</STRONG> (ARM, 188 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[706]"></a>prvHeapInit</STRONG> (ARM, 176 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[71f]"></a>prvSetupTimerInterrupt</STRONG> (ARM, 12 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = prvSetupTimerInterrupt &rArr; initTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[722]"></a>_SCLIB_ExchangePPS</STRONG> (ARM, 428 bytes, Stack size 24 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _SCLIB_ExchangePPS &rArr; SC_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopTimer
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StartTimer
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopAllTimer
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_ClearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ParseATR
</UL>

<P><STRONG><a name="[723]"></a>_SCLIB_SetBaudrate</STRONG> (ARM, 124 bytes, Stack size 32 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _SCLIB_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetReaderParameter
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
</UL>

<P><STRONG><a name="[725]"></a>_SCLIB_SetCharacterGuardTime</STRONG> (ARM, 228 bytes, Stack size 8 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SCLIB_SetCharacterGuardTime
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetReaderParameter
</UL>

<P><STRONG><a name="[724]"></a>_SCLIB_SetReaderParameter</STRONG> (ARM, 356 bytes, Stack size 16 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _SCLIB_SetReaderParameter &rArr; _SCLIB_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_SetBlockGuardTime
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetCharacterGuardTime
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ParseATR
</UL>

<P><STRONG><a name="[728]"></a>_SCLIB_StartWarmReset</STRONG> (ARM, 520 bytes, Stack size 32 bytes, sclib_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = _SCLIB_StartWarmReset &rArr; SC_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StartTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ResetCard
</UL>

<P><STRONG><a name="[721]"></a>Pow2</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sclib_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_UpdateCardCapabilities
</UL>

<P><STRONG><a name="[72d]"></a>_SCLIB_CalcT1Chksum</STRONG> (ARM, 216 bytes, Stack size 24 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_PrecessT1Response
</UL>

<P><STRONG><a name="[72b]"></a>T1BlockRetransmitCheck</STRONG> (ARM, 80 bytes, Stack size 8 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_GetBlockType
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
</UL>

<P><STRONG><a name="[72c]"></a>_SCLIB_PrecessT1Response</STRONG> (ARM, 488 bytes, Stack size 288 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_StopTimer
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_CalcT1Chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
</UL>

<P><STRONG><a name="[730]"></a>_SCLIB_SendRBlock</STRONG> (ARM, 104 bytes, Stack size 8 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
</UL>

<P><STRONG><a name="[732]"></a>_SCLIB_GetINF</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_ProcessSBlock
</UL>

<P><STRONG><a name="[734]"></a>T1SelectErrcode</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sclib_t1protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCLIB_StartT1Transmission
</UL>

<P><STRONG><a name="[743]"></a>_partition_sort</STRONG> (Thumb, 510 bytes, Stack size 304 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[748]"></a>_tm_carry</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[769]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[768]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[767]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[76a]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[78a]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[77d]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[749]"></a>_fp_digits</STRONG> (Thumb, 410 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via BLX)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via BLX)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via BLX)
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[754]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[757]"></a>_fp_value</STRONG> (Thumb, 528 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul (via BLX)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via BLX)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld (via BLX)
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd (via BLX)
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[760]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[753]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[73c]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[73d]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
